void sub_1888CB794(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1888CB774);
}

uint64_t maps::path_codec::BitStream::read(maps::path_codec::BitStream *this, unsigned int a2)
{
  char v2;
  int v3;
  uint64_t *v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *__p;
  char v16;
  void *v17[2];
  char v18;
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  v2 = a2;
  v3 = *((_DWORD *)this + 2);
  v4 = *(uint64_t **)this;
  if (*(char *)(*(_QWORD *)this + 23) < 0)
    v5 = v4[1];
  else
    v5 = *(unsigned __int8 *)(*(_QWORD *)this + 23);
  if (v5 <= (a2 + v3 - 1) >> 3)
  {
    if (maps::path_codec::Logger::m_log_level <= 4u)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Prevented read past-the-end (num_bits=", 38);
      LOBYTE(v17[0]) = v2;
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v17, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"). Returning 0.", 15);
      std::string::basic_string[abi:ne180100]<0>(v17, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/src/path-codec/compression/BitStream.cpp");
      std::stringbuf::str();
      maps::path_codec::Logger::log_error((uint64_t)v17, 89, (uint64_t)&__p);
      if (v16 < 0)
        operator delete(__p);
      if (v18 < 0)
        operator delete(v17[0]);
      v19[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v19[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v20 < 0)
        operator delete((void *)v19[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D764310](&v21);
    }
    return 0;
  }
  if (!a2)
    return 0;
  v6 = 0;
  LODWORD(v7) = 0;
  v8 = v3 & 7;
  v9 = *((_DWORD *)this + 3);
  v10 = v3 + 1;
  do
  {
    v11 = v4;
    if (*((char *)v4 + 23) < 0)
      v11 = (uint64_t *)*v4;
    v7 = (*((char *)v11 + v9) >> v8) & 1 | (2 * (_DWORD)v7);
    v8 = v10 & 7;
    if ((v10 & 7) == 0)
      ++v9;
    *((_DWORD *)this + 2) = v10;
    *((_DWORD *)this + 3) = v9;
    ++v6;
    ++v10;
  }
  while (v6 < a2);
  return v7;
}

void sub_1888CB968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t maps::path_codec::BitStream::read_rice(maps::path_codec::BitStream *this, unsigned int a2)
{
  int v4;

  v4 = -1;
  do
    ++v4;
  while (maps::path_codec::BitStream::read(this, 1u));
  return maps::path_codec::BitStream::read(this, a2) + (v4 << a2);
}

void maps::path_codec::Logger::deregister_logger(maps::path_codec::Logger *this)
{
  std::mutex::lock(&maps::path_codec::Logger::get_mutex(void)::MUTEX);
  maps::path_codec::Logger::m_logger = 0;
  std::mutex::unlock(&maps::path_codec::Logger::get_mutex(void)::MUTEX);
}

void maps::path_codec::Logger::log_trace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex::lock(&maps::path_codec::Logger::get_mutex(void)::MUTEX);
  if (maps::path_codec::Logger::m_logger)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)maps::path_codec::Logger::m_logger + 24))(maps::path_codec::Logger::m_logger, a1, a2, a3);
  std::mutex::unlock(&maps::path_codec::Logger::get_mutex(void)::MUTEX);
}

void sub_1888CBA9C(_Unwind_Exception *a1)
{
  std::mutex::unlock(&maps::path_codec::Logger::get_mutex(void)::MUTEX);
  _Unwind_Resume(a1);
}

void maps::path_codec::Logger::log_debug(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex::lock(&maps::path_codec::Logger::get_mutex(void)::MUTEX);
  if (maps::path_codec::Logger::m_logger)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)maps::path_codec::Logger::m_logger + 40))(maps::path_codec::Logger::m_logger, a1, a2, a3);
  std::mutex::unlock(&maps::path_codec::Logger::get_mutex(void)::MUTEX);
}

void sub_1888CBB18(_Unwind_Exception *a1)
{
  std::mutex::unlock(&maps::path_codec::Logger::get_mutex(void)::MUTEX);
  _Unwind_Resume(a1);
}

void maps::path_codec::Logger::log_warning(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex::lock(&maps::path_codec::Logger::get_mutex(void)::MUTEX);
  if (maps::path_codec::Logger::m_logger)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)maps::path_codec::Logger::m_logger + 72))(maps::path_codec::Logger::m_logger, a1, a2, a3);
  std::mutex::unlock(&maps::path_codec::Logger::get_mutex(void)::MUTEX);
}

void sub_1888CBB94(_Unwind_Exception *a1)
{
  std::mutex::unlock(&maps::path_codec::Logger::get_mutex(void)::MUTEX);
  _Unwind_Resume(a1);
}

void maps::path_codec::Logger::log_error(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex::lock(&maps::path_codec::Logger::get_mutex(void)::MUTEX);
  if (maps::path_codec::Logger::m_logger)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)maps::path_codec::Logger::m_logger + 88))(maps::path_codec::Logger::m_logger, a1, a2, a3);
  std::mutex::unlock(&maps::path_codec::Logger::get_mutex(void)::MUTEX);
}

void sub_1888CBC10(_Unwind_Exception *a1)
{
  std::mutex::unlock(&maps::path_codec::Logger::get_mutex(void)::MUTEX);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_AnchorData_compressed_5fpath_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, 3014000, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/include/path-codec/protobuf/compressed_path.pb.cc", a4);
  maps::path_codec::geo3::AnchorData::AnchorData((maps::path_codec::geo3::AnchorData *)&maps::path_codec::geo3::_AnchorData_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&maps::path_codec::geo3::_AnchorData_default_instance_, v4);
}

void InitDefaultsscc_info_CommonPointData_compressed_5fpath_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, 3014000, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/include/path-codec/protobuf/compressed_path.pb.cc", a4);
  maps::path_codec::geo3::_CommonPointData_default_instance_ = (uint64_t)&off_1E1BF6BF8;
  unk_1EDF51360 = 0;
  qword_1EDF51368 = 0;
  if (atomic_load(scc_info_CommonPointData_compressed_5fpath_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_CommonPointData_compressed_5fpath_2eproto);
  qword_1EDF51370 = 0;
  unk_1EDF51378 = 0;
  qword_1EDF51380 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&maps::path_codec::geo3::_CommonPointData_default_instance_, v4);
}

void InitDefaultsscc_info_CompressedPath_compressed_5fpath_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, 3014000, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/include/path-codec/protobuf/compressed_path.pb.cc", a4);
  maps::path_codec::geo3::_CompressedPath_default_instance_ = (uint64_t)&off_1E1BF6A98;
  *(_QWORD *)algn_1EDF513D8 = 0;
  qword_1EDF513E0 = 0;
  if (atomic_load(scc_info_CompressedPath_compressed_5fpath_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_CompressedPath_compressed_5fpath_2eproto);
  qword_1EDF513E8 = 0;
  unk_1EDF513F0 = 0;
  dword_1EDF51400 = 0;
  qword_1EDF513F8 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&maps::path_codec::geo3::_CompressedPath_default_instance_, v4);
}

void InitDefaultsscc_info_RiceEncodedIntegers_compressed_5fpath_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, 3014000, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/include/path-codec/protobuf/compressed_path.pb.cc", a4);
  maps::path_codec::geo3::RiceEncodedIntegers::RiceEncodedIntegers((maps::path_codec::geo3::RiceEncodedIntegers *)&maps::path_codec::geo3::_RiceEncodedIntegers_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&maps::path_codec::geo3::_RiceEncodedIntegers_default_instance_, v4);
}

void InitDefaultsscc_info_SupportPointData_compressed_5fpath_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, 3014000, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/include/path-codec/protobuf/compressed_path.pb.cc", a4);
  maps::path_codec::geo3::SupportPointData::SupportPointData((maps::path_codec::geo3::SupportPointData *)&maps::path_codec::geo3::_SupportPointData_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&maps::path_codec::geo3::_SupportPointData_default_instance_, v4);
}

maps::path_codec::geo3::RiceEncodedIntegers *maps::path_codec::geo3::RiceEncodedIntegers::RiceEncodedIntegers(maps::path_codec::geo3::RiceEncodedIntegers *this, Arena *a2)
{
  *(_QWORD *)this = &off_1E1BF6E08;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a2;
  if (atomic_load(scc_info_RiceEncodedIntegers_compressed_5fpath_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_RiceEncodedIntegers_compressed_5fpath_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = 0;
  return this;
}

void sub_1888CBE88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  if (*(int *)(v1 + 28) >= 1)
  {
    v3 = *(_QWORD *)(v1 + 32);
    v5 = *(_QWORD *)(v3 - 8);
    v4 = (void *)(v3 - 8);
    if (!v5)
      operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void maps::path_codec::geo3::RiceEncodedIntegers::~RiceEncodedIntegers(maps::path_codec::geo3::RiceEncodedIntegers *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x18D76437C](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
  if (*((int *)this + 7) >= 1)
  {
    v3 = *((_QWORD *)this + 4);
    v5 = *(_QWORD *)(v3 - 8);
    v4 = (void *)(v3 - 8);
    if (!v5)
      operator delete(v4);
  }
}

{
  maps::path_codec::geo3::RiceEncodedIntegers::~RiceEncodedIntegers(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t maps::path_codec::geo3::RiceEncodedIntegers::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

google::protobuf::UnknownFieldSet *maps::path_codec::geo3::RiceEncodedIntegers::Clear(maps::path_codec::geo3::RiceEncodedIntegers *this)
{
  int v1;
  unint64_t v2;
  google::protobuf::UnknownFieldSet *result;
  char v4;

  *((_DWORD *)this + 6) = 0;
  v1 = *((_DWORD *)this + 4);
  if ((v1 & 1) != 0)
  {
    v2 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  if ((v1 & 6) != 0)
    *((_QWORD *)this + 7) = 0;
  v4 = *((_BYTE *)this + 8);
  result = (maps::path_codec::geo3::RiceEncodedIntegers *)((char *)this + 8);
  *((_DWORD *)result + 2) = 0;
  if ((v4 & 1) != 0)
    return google::protobuf::internal::InternalMetadata::DoClear<google::protobuf::UnknownFieldSet>((uint64_t *)result);
  return result;
}

google::protobuf::internal *maps::path_codec::geo3::RiceEncodedIntegers::_InternalParse(uint64_t a1, google::protobuf::internal *a2, int32x2_t *this)
{
  const char **v5;
  int v6;
  google::protobuf::internal *v7;
  _QWORD *v9;
  std::string **v10;
  unsigned int v11;
  int v12;
  google::protobuf::internal *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  google::protobuf::internal::ArenaImpl *v18;
  std::string *v19;
  google::protobuf::internal *v20;
  google::protobuf::internal *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  google::protobuf::internal *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  google::protobuf::UnknownFieldSet *v30;
  google::protobuf::UnknownFieldSet *v31;
  uint64_t v32;
  google::protobuf::internal *v33;
  google::protobuf::UnknownFieldSet *v34;

  v33 = a2;
  v6 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)this, (const char **)&v33, this[11].i32[1]) & 1) == 0)
  {
    v9 = (_QWORD *)(a1 + 8);
    v10 = (std::string **)(a1 + 48);
    while (1)
    {
      v7 = (google::protobuf::internal *)((char *)v33 + 1);
      v11 = *(unsigned __int8 *)v33;
      if (*(char *)v33 < 0)
      {
        v12 = *(char *)v7;
        v11 = v11 + (v12 << 7) - 128;
        if (v12 < 0)
        {
          v7 = (google::protobuf::internal *)((char *)v33 + 3);
          v24 = -21;
          while (1)
          {
            v11 += (*((unsigned __int8 *)v7 - 1) - 1) << (v24 + 35);
            if ((*((char *)v7 - 1) & 0x80000000) == 0)
              break;
            v7 = (google::protobuf::internal *)((char *)v7 + 1);
            v24 += 7;
            if (!v24)
              goto LABEL_61;
          }
        }
        else
        {
          v7 = (google::protobuf::internal *)((char *)v33 + 2);
        }
      }
      v33 = v7;
      switch(v11 >> 3)
      {
        case 1u:
          if (v11 != 8)
            goto LABEL_45;
          v13 = (google::protobuf::internal *)((char *)v7 + 1);
          v14 = *(unsigned __int8 *)v7;
          if ((*(char *)v7 & 0x80000000) == 0)
            goto LABEL_40;
          v15 = *(unsigned __int8 *)v13;
          v16 = v14 + (v15 << 7) - 128;
          if ((v15 & 0x80) != 0)
          {
            v25 = (google::protobuf::internal *)((char *)v7 + 3);
            v26 = 14;
            while (1)
            {
              v16 += (*((unsigned __int8 *)v25 - 1) - 1) << v26;
              if ((*((char *)v25 - 1) & 0x80000000) == 0)
                break;
              v14 = 0;
              v13 = 0;
              v25 = (google::protobuf::internal *)((char *)v25 + 1);
              v26 += 7;
              if (v26 == 70)
                goto LABEL_40;
            }
            v14 = v16;
            v13 = v25;
          }
          else
          {
            v13 = (google::protobuf::internal *)((char *)v7 + 2);
            v14 = v16;
          }
LABEL_40:
          v6 |= 2u;
          v33 = v13;
          *(_DWORD *)(a1 + 56) = -(v14 & 1) ^ (v14 >> 1);
          if (v13)
            goto LABEL_53;
          goto LABEL_61;
        case 2u:
          if (v11 != 18)
            goto LABEL_45;
          *(_DWORD *)(a1 + 16) |= 1u;
          v17 = *(_QWORD *)(a1 + 8);
          v18 = (google::protobuf::internal::ArenaImpl *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if ((v17 & 1) != 0)
            v18 = *(google::protobuf::internal::ArenaImpl **)v18;
          v19 = *v10;
          if (*v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            v19 = (std::string *)google::protobuf::internal::ArenaStringPtr::MutableSlow<>((_QWORD *)(a1 + 48), v18);
            v7 = v33;
          }
          v20 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v19, (std::string::value_type *)v7, (uint64_t)this);
          goto LABEL_52;
        case 3u:
          if (v11 == 26)
          {
            v20 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)this, v7, (unsigned int *)(a1 + 24));
          }
          else
          {
            if (v11 == 24)
            {
              v28 = google::protobuf::internal::ReadVarint32(&v33, v5);
              google::protobuf::SourceCodeInfo_Location::_internal_add_path((google::protobuf::SourceCodeInfo_Location *)a1, v28);
              v7 = v33;
              if (!v33)
                goto LABEL_3;
              goto LABEL_53;
            }
LABEL_45:
            if (v11)
              v29 = (v11 & 7) == 4;
            else
              v29 = 1;
            if (v29)
            {
              this[10].i32[0] = v11 - 1;
              goto LABEL_3;
            }
            if ((*v9 & 1) != 0)
            {
              v30 = (google::protobuf::UnknownFieldSet *)((*v9 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              v30 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a1 + 8));
              v7 = v33;
            }
            v34 = v30;
            v20 = google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldParserHelper>(v11, &v34, (uint64_t *)v7, this);
          }
LABEL_52:
          v33 = v20;
          if (!v20)
          {
LABEL_61:
            v7 = 0;
            goto LABEL_3;
          }
LABEL_53:
          if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)this, (const char **)&v33, this[11].i32[1]))goto LABEL_2;
          break;
        case 4u:
          if (v11 != 32)
            goto LABEL_45;
          v21 = (google::protobuf::internal *)((char *)v7 + 1);
          v22 = *(unsigned __int8 *)v7;
          if ((*(char *)v7 & 0x80000000) == 0)
            goto LABEL_25;
          v23 = *(unsigned __int8 *)v21;
          v22 = (v22 + (v23 << 7) - 128);
          if ((v23 & 0x80) != 0)
          {
            v21 = (google::protobuf::internal *)((char *)v7 + 3);
            v27 = 14;
            while (1)
            {
              v22 += (*((unsigned __int8 *)v21 - 1) - 1) << v27;
              if ((*((char *)v21 - 1) & 0x80000000) == 0)
                break;
              v21 = (google::protobuf::internal *)((char *)v21 + 1);
              v27 += 7;
              if (v27 == 70)
                goto LABEL_61;
            }
          }
          else
          {
            v21 = (google::protobuf::internal *)((char *)v7 + 2);
          }
LABEL_25:
          v33 = v21;
          if (v22 > 2)
          {
            if ((*v9 & 1) != 0)
            {
              v31 = (google::protobuf::UnknownFieldSet *)((*v9 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              v32 = v22;
              v31 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a1 + 8));
              v22 = v32;
            }
            google::protobuf::UnknownFieldSet::AddVarint(v31, 4u, v22);
          }
          else
          {
            *(_DWORD *)(a1 + 16) |= 4u;
            *(_DWORD *)(a1 + 60) = v22;
          }
          goto LABEL_53;
        default:
          goto LABEL_45;
      }
    }
  }
LABEL_2:
  v7 = v33;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v6;
  return v7;
}

unint64_t google::protobuf::internal::ReadVarint32(google::protobuf::internal **this, const char **a2)
{
  google::protobuf::internal *v3;
  google::protobuf::internal *v4;
  google::protobuf::internal *v5;
  int v6;
  unint64_t v7;

  v3 = *this;
  v4 = *this;
  v6 = *(char *)v4;
  v5 = (google::protobuf::internal *)((char *)v4 + 1);
  v7 = v6;
  if (v6 < 0)
  {
    v7 = v7 + (*(unsigned __int8 *)v5 << 7) - 128;
    if (*(char *)v5 < 0)
      v5 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v3, (const char *)v7);
    else
      v5 = (google::protobuf::internal *)((char *)v3 + 2);
  }
  *this = v5;
  return v7;
}

const google::protobuf::UnknownFieldSet *maps::path_codec::geo3::RiceEncodedIntegers::_InternalSerialize(maps::path_codec::geo3::RiceEncodedIntegers *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v27;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 2) == 0)
  {
LABEL_9:
    if ((v6 & 1) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v7 = *((_DWORD *)this + 14);
  *v4 = 8;
  v8 = (2 * v7) ^ (v7 >> 31);
  if (v8 <= 0x7F)
  {
    v4[1] = v8;
    v4 += 2;
    if ((v6 & 1) == 0)
      goto LABEL_11;
LABEL_10:
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL, v4);
    goto LABEL_11;
  }
  v4[1] = v8 | 0x80;
  v9 = v8 >> 7;
  if (!(v8 >> 14))
  {
    v4[2] = v9;
    v4 += 3;
    goto LABEL_9;
  }
  v4 += 3;
  do
  {
    *(v4 - 1) = v9 | 0x80;
    v21 = v9 >> 7;
    ++v4;
    v22 = v9 >> 14;
    v9 >>= 7;
  }
  while (v22);
  *(v4 - 1) = v21;
  if ((v6 & 1) != 0)
    goto LABEL_10;
LABEL_11:
  v10 = *((_DWORD *)this + 10);
  if ((int)v10 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    *v4 = 26;
    v11 = v4 + 1;
    if (v10 >= 0x80)
    {
      do
      {
        *v11++ = v10 | 0x80;
        v27 = v10 >> 14;
        v10 >>= 7;
      }
      while (v27);
      v4 = v11 - 1;
    }
    v4 += 2;
    *v11 = v10;
    v12 = (unsigned int *)*((_QWORD *)this + 4);
    v13 = &v12[*((int *)this + 6)];
    do
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
        v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v15 = *v12++;
      v14 = v15;
      if (v15 > 0x7F)
      {
        *v4 = v14 | 0x80;
        v16 = v14 >> 7;
        if (v14 >> 14)
        {
          v4 += 2;
          do
          {
            *(v4 - 1) = v16 | 0x80;
            v17 = v16 >> 7;
            ++v4;
            v18 = v16 >> 14;
            v16 >>= 7;
          }
          while (v18);
          *(v4 - 1) = v17;
        }
        else
        {
          v4[1] = v16;
          v4 += 2;
        }
      }
      else
      {
        *v4++ = v14;
      }
    }
    while (v12 < v13);
  }
  if ((v6 & 4) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v19 = *((int *)this + 15);
    *v4 = 32;
    if (v19 > 0x7F)
    {
      v4[1] = v19 | 0x80;
      v20 = v19 >> 7;
      if (v19 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v20 | 0x80;
          v23 = v20 >> 7;
          ++v4;
          v24 = v20 >> 14;
          v20 >>= 7;
        }
        while (v24);
        *(v4 - 1) = v23;
      }
      else
      {
        v4[2] = v20;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v19;
      v4 += 2;
    }
  }
  v25 = *((_QWORD *)this + 1);
  if ((v25 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)v4, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
  else
    return (const google::protobuf::UnknownFieldSet *)v4;
}

const InternalMetadata *maps::path_codec::geo3::RiceEncodedIntegers::ByteSizeLong(maps::path_codec::geo3::RiceEncodedIntegers *this, uint64_t a2, uint64_t a3, CachedSize *a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  const InternalMetadata *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v4 = *((unsigned int *)this + 6);
  if ((int)v4 < 1)
  {
    v5 = 0;
LABEL_8:
    v9 = 0;
    v8 = 0;
    goto LABEL_11;
  }
  v5 = 0;
  v6 = (int *)*((_QWORD *)this + 4);
  do
  {
    v7 = *v6++;
    v5 += (9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6;
    --v4;
  }
  while (v4);
  if (!v5)
    goto LABEL_8;
  if ((v5 & 0x80000000) != 0)
    v8 = 11;
  else
    v8 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v9 = v5;
LABEL_11:
  *((_DWORD *)this + 10) = v9;
  v10 = (const InternalMetadata *)(v8 + v5);
  v11 = *((_DWORD *)this + 4);
  if ((v11 & 7) == 0)
    goto LABEL_24;
  if ((v11 & 1) != 0)
  {
    v12 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v14 = v13;
    v10 = (const InternalMetadata *)((char *)v10 + v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1);
    if ((v11 & 2) == 0)
    {
LABEL_14:
      if ((v11 & 4) == 0)
        goto LABEL_24;
      goto LABEL_20;
    }
  }
  else if ((v11 & 2) == 0)
  {
    goto LABEL_14;
  }
  v10 = (const InternalMetadata *)((char *)v10
                                 + ((9 * (__clz((2 * *((_DWORD *)this + 14)) ^ (*((int *)this + 14) >> 31) | 1) ^ 0x1F)
                                   + 73) >> 6)
                                 + 1);
  if ((v11 & 4) == 0)
    goto LABEL_24;
LABEL_20:
  v15 = *((_DWORD *)this + 15);
  if (v15 < 0)
    v16 = 11;
  else
    v16 = ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v10 = (const InternalMetadata *)((char *)v10 + v16);
LABEL_24:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return (const InternalMetadata *)google::protobuf::internal::ComputeUnknownFieldsSize((maps::path_codec::geo3::RiceEncodedIntegers *)((char *)this + 8), v10, (_DWORD *)this + 5, a4);
  *((_DWORD *)this + 5) = (_DWORD)v10;
  return v10;
}

void maps::path_codec::geo3::RiceEncodedIntegers::MergeFrom(maps::path_codec::geo3::RiceEncodedIntegers *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(maps::path_codec::geo3::RiceEncodedIntegers *__hidden))a2 == &off_1E1BF6E08)
    google::protobuf::GeneratedCodeInfo_Annotation::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void maps::path_codec::geo3::RiceEncodedIntegers::CopyFrom(maps::path_codec::geo3::RiceEncodedIntegers *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    maps::path_codec::geo3::RiceEncodedIntegers::Clear(this);
    maps::path_codec::geo3::RiceEncodedIntegers::MergeFrom(this, a2, v4);
  }
}

uint64_t maps::path_codec::geo3::RiceEncodedIntegers::IsInitialized(maps::path_codec::geo3::RiceEncodedIntegers *this)
{
  return 1;
}

uint64_t maps::path_codec::geo3::RiceEncodedIntegers::GetMetadata(maps::path_codec::geo3::RiceEncodedIntegers *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_compressed_5fpath_2eproto, 0);
  return *off_1EDF47068;
}

void maps::path_codec::geo3::CommonPointData::~CommonPointData(maps::path_codec::geo3::CommonPointData *this)
{
  maps::path_codec::geo3::RiceEncodedIntegers *v2;
  maps::path_codec::geo3::RiceEncodedIntegers *v3;
  maps::path_codec::geo3::RiceEncodedIntegers *v4;

  if (this != (maps::path_codec::geo3::CommonPointData *)&maps::path_codec::geo3::_CommonPointData_default_instance_)
  {
    v2 = (maps::path_codec::geo3::RiceEncodedIntegers *)*((_QWORD *)this + 3);
    if (v2)
    {
      maps::path_codec::geo3::RiceEncodedIntegers::~RiceEncodedIntegers(v2);
      MEMORY[0x18D76437C]();
    }
    v3 = (maps::path_codec::geo3::RiceEncodedIntegers *)*((_QWORD *)this + 4);
    if (v3)
    {
      maps::path_codec::geo3::RiceEncodedIntegers::~RiceEncodedIntegers(v3);
      MEMORY[0x18D76437C]();
    }
    v4 = (maps::path_codec::geo3::RiceEncodedIntegers *)*((_QWORD *)this + 5);
    if (v4)
    {
      maps::path_codec::geo3::RiceEncodedIntegers::~RiceEncodedIntegers(v4);
      MEMORY[0x18D76437C]();
    }
  }
  google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
}

{
  maps::path_codec::geo3::CommonPointData::~CommonPointData(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t maps::path_codec::geo3::CommonPointData::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

google::protobuf::UnknownFieldSet *maps::path_codec::geo3::CommonPointData::Clear(google::protobuf::UnknownFieldSet *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  char v4;

  v1 = (uint64_t)this;
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 7) == 0)
    goto LABEL_6;
  if ((v2 & 1) != 0)
  {
    this = maps::path_codec::geo3::RiceEncodedIntegers::Clear(*((maps::path_codec::geo3::RiceEncodedIntegers **)this + 3));
    if ((v2 & 2) == 0)
    {
LABEL_4:
      if ((v2 & 4) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_4;
  }
  this = maps::path_codec::geo3::RiceEncodedIntegers::Clear(*(maps::path_codec::geo3::RiceEncodedIntegers **)(v1 + 32));
  if ((v2 & 4) != 0)
LABEL_5:
    this = maps::path_codec::geo3::RiceEncodedIntegers::Clear(*(maps::path_codec::geo3::RiceEncodedIntegers **)(v1 + 40));
LABEL_6:
  v4 = *(_BYTE *)(v1 + 8);
  v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if ((v4 & 1) != 0)
    return google::protobuf::internal::InternalMetadata::DoClear<google::protobuf::UnknownFieldSet>((uint64_t *)v3);
  return this;
}

google::protobuf::internal *maps::path_codec::geo3::CommonPointData::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  google::protobuf::internal *result;
  _QWORD *v7;
  google::protobuf::internal *v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v12;
  google::protobuf::UnknownFieldSet *v13;
  maps::path_codec::geo3::RiceEncodedIntegers *v14;
  google::protobuf::internal::ArenaImpl *v15;
  google::protobuf::internal::ArenaImpl *v16;
  google::protobuf::internal::ArenaImpl *v17;
  int v18;
  uint64_t v19;
  google::protobuf::internal *v20;
  google::protobuf::UnknownFieldSet *v21;

  v20 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v20, *((_DWORD *)this + 23));
  result = v20;
  if ((v5 & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = (google::protobuf::internal *)((char *)result + 1);
      v9 = *(unsigned __int8 *)result;
      if (*(char *)result < 0)
      {
        v9 = v9 + (*(unsigned __int8 *)v8 << 7) - 128;
        if (*(char *)v8 < 0)
        {
          v8 = (google::protobuf::internal *)((char *)result + 3);
          v19 = -21;
          while (1)
          {
            v9 += (*((unsigned __int8 *)v8 - 1) - 1) << (v19 + 35);
            if ((*((char *)v8 - 1) & 0x80000000) == 0)
              break;
            v8 = (google::protobuf::internal *)((char *)v8 + 1);
            v19 += 7;
            if (!v19)
              return 0;
          }
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)result + 2);
        }
      }
      v20 = v8;
      v10 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 26)
        {
          *(_DWORD *)(a1 + 16) |= 4u;
          v14 = *(maps::path_codec::geo3::RiceEncodedIntegers **)(a1 + 40);
          if (v14)
            goto LABEL_35;
          v15 = (google::protobuf::internal::ArenaImpl *)(*v7 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v7 & 1) != 0)
            v15 = *(google::protobuf::internal::ArenaImpl **)v15;
          v14 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RiceEncodedIntegers>(v15);
          *(_QWORD *)(a1 + 40) = v14;
LABEL_34:
          v8 = v20;
          goto LABEL_35;
        }
      }
      else if (v10 == 2)
      {
        if (v9 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          v14 = *(maps::path_codec::geo3::RiceEncodedIntegers **)(a1 + 32);
          if (v14)
            goto LABEL_35;
          v16 = (google::protobuf::internal::ArenaImpl *)(*v7 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v7 & 1) != 0)
            v16 = *(google::protobuf::internal::ArenaImpl **)v16;
          v14 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RiceEncodedIntegers>(v16);
          *(_QWORD *)(a1 + 32) = v14;
          goto LABEL_34;
        }
      }
      else if (v10 == 1 && v9 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v14 = *(maps::path_codec::geo3::RiceEncodedIntegers **)(a1 + 24);
        if (!v14)
        {
          v17 = (google::protobuf::internal::ArenaImpl *)(*v7 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v7 & 1) != 0)
            v17 = *(google::protobuf::internal::ArenaImpl **)v17;
          v14 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RiceEncodedIntegers>(v17);
          *(_QWORD *)(a1 + 24) = v14;
          goto LABEL_34;
        }
LABEL_35:
        result = google::protobuf::internal::ParseContext::ParseMessage<maps::path_codec::geo3::RiceEncodedIntegers>((int32x2_t *)this, (uint64_t)v14, v8);
        goto LABEL_36;
      }
      if (v9)
        v12 = (v9 & 7) == 4;
      else
        v12 = 1;
      if (v12)
      {
        *((_DWORD *)this + 20) = v9 - 1;
        return v8;
      }
      if ((*v7 & 1) != 0)
      {
        v13 = (google::protobuf::UnknownFieldSet *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v13 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a1 + 8));
        v8 = v20;
      }
      v21 = v13;
      result = google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldParserHelper>(v9, &v21, (uint64_t *)v8, (int32x2_t *)this);
LABEL_36:
      v20 = result;
      if (result)
      {
        v18 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v20, *((_DWORD *)this + 23));
        result = v20;
        if (!v18)
          continue;
      }
      return result;
    }
  }
  return result;
}

google::protobuf::internal *google::protobuf::internal::ParseContext::ParseMessage<maps::path_codec::geo3::RiceEncodedIntegers>(int32x2_t *this, uint64_t a2, google::protobuf::internal *a3)
{
  const char *v5;
  google::protobuf::internal *v6;
  google::protobuf::internal *result;
  int32x2_t v8;
  int v9;
  __int32 v10;
  BOOL v11;
  int v12;

  v5 = (const char *)*(unsigned __int8 *)a3;
  if (*(char *)a3 < 0)
  {
    result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(a3, v5);
    if (!result)
      return result;
    v6 = result;
  }
  else
  {
    v6 = (google::protobuf::internal *)((char *)a3 + 1);
  }
  v8 = this[1];
  v9 = (_DWORD)v5 + (_DWORD)v6 - v8.i32[0];
  *this = (int32x2_t)(*(_QWORD *)&v8 + (v9 & (v9 >> 31)));
  v10 = this[3].i32[1];
  this[3].i32[1] = v9;
  v8.i32[0] = this[11].i32[0];
  v11 = __OFSUB__(v8.i32[0]--, 1);
  this[11].i32[0] = v8.i32[0];
  if (v8.i32[0] < 0 != v11)
    return 0;
  result = maps::path_codec::geo3::RiceEncodedIntegers::_InternalParse(a2, v6, this);
  if (!result)
    return result;
  ++this[11].i32[0];
  if (this[10].i32[0])
    return 0;
  v12 = this[3].i32[1] + v10 - v9;
  this[3].i32[1] = v12;
  *this = (int32x2_t)(*(_QWORD *)&this[1] + (v12 & (v12 >> 31)));
  return result;
}

const google::protobuf::UnknownFieldSet *maps::path_codec::geo3::CommonPointData::_InternalSerialize(maps::path_codec::geo3::CommonPointData *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  maps::path_codec::geo3::RiceEncodedIntegers *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  maps::path_codec::geo3::RiceEncodedIntegers *v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  maps::path_codec::geo3::RiceEncodedIntegers *v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;

  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = (maps::path_codec::geo3::RiceEncodedIntegers *)*((_QWORD *)this + 3);
    *a2 = 10;
    v8 = *((_DWORD *)v7 + 5);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v9 = a2 + 3;
        do
        {
          *(v9 - 1) = v10 | 0x80;
          v11 = v10 >> 7;
          ++v9;
          v12 = v10 >> 14;
          v10 >>= 7;
        }
        while (v12);
        *(v9 - 1) = v11;
      }
      else
      {
        a2[2] = v10;
        v9 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v8;
      v9 = a2 + 2;
    }
    a2 = (unsigned __int8 *)maps::path_codec::geo3::RiceEncodedIntegers::_InternalSerialize(v7, v9, a3);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_35;
      goto LABEL_25;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v13 = (maps::path_codec::geo3::RiceEncodedIntegers *)*((_QWORD *)this + 4);
  *a2 = 18;
  v14 = *((_DWORD *)v13 + 5);
  if (v14 > 0x7F)
  {
    a2[1] = v14 | 0x80;
    v16 = v14 >> 7;
    if (v14 >> 14)
    {
      v15 = a2 + 3;
      do
      {
        *(v15 - 1) = v16 | 0x80;
        v17 = v16 >> 7;
        ++v15;
        v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
      *(v15 - 1) = v17;
    }
    else
    {
      a2[2] = v16;
      v15 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v14;
    v15 = a2 + 2;
  }
  a2 = (unsigned __int8 *)maps::path_codec::geo3::RiceEncodedIntegers::_InternalSerialize(v13, v15, a3);
  if ((v6 & 4) != 0)
  {
LABEL_25:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v19 = (maps::path_codec::geo3::RiceEncodedIntegers *)*((_QWORD *)this + 5);
    *a2 = 26;
    v20 = *((_DWORD *)v19 + 5);
    if (v20 > 0x7F)
    {
      a2[1] = v20 | 0x80;
      v22 = v20 >> 7;
      if (v20 >> 14)
      {
        v21 = a2 + 3;
        do
        {
          *(v21 - 1) = v22 | 0x80;
          v23 = v22 >> 7;
          ++v21;
          v24 = v22 >> 14;
          v22 >>= 7;
        }
        while (v24);
        *(v21 - 1) = v23;
      }
      else
      {
        a2[2] = v22;
        v21 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v20;
      v21 = a2 + 2;
    }
    a2 = (unsigned __int8 *)maps::path_codec::geo3::RiceEncodedIntegers::_InternalSerialize(v19, v21, a3);
  }
LABEL_35:
  v25 = *((_QWORD *)this + 1);
  if ((v25 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

const InternalMetadata *maps::path_codec::geo3::CommonPointData::ByteSizeLong(maps::path_codec::geo3::CommonPointData *this, uint64_t a2, uint64_t a3, CachedSize *a4)
{
  int v5;
  const InternalMetadata *v6;
  const InternalMetadata *v7;
  const InternalMetadata *v8;
  const InternalMetadata *v9;

  v5 = *((_DWORD *)this + 4);
  if ((v5 & 7) == 0)
  {
    v6 = 0;
    goto LABEL_10;
  }
  if ((v5 & 1) != 0)
  {
    v7 = maps::path_codec::geo3::RiceEncodedIntegers::ByteSizeLong(*((maps::path_codec::geo3::RiceEncodedIntegers **)this + 3), a2, a3, a4);
    v6 = (const InternalMetadata *)((char *)&v7->var0 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1);
    if ((v5 & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v6 = 0;
  if ((v5 & 2) != 0)
  {
LABEL_7:
    v8 = maps::path_codec::geo3::RiceEncodedIntegers::ByteSizeLong(*((maps::path_codec::geo3::RiceEncodedIntegers **)this + 4), a2, a3, a4);
    v6 = (const InternalMetadata *)((char *)&v8->var0
                                  + (_QWORD)v6
                                  + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)
                                  + 1);
  }
LABEL_8:
  if ((v5 & 4) != 0)
  {
    v9 = maps::path_codec::geo3::RiceEncodedIntegers::ByteSizeLong(*((maps::path_codec::geo3::RiceEncodedIntegers **)this + 5), a2, a3, a4);
    v6 = (const InternalMetadata *)((char *)&v9->var0
                                  + (_QWORD)v6
                                  + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)
                                  + 1);
  }
LABEL_10:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return (const InternalMetadata *)google::protobuf::internal::ComputeUnknownFieldsSize((maps::path_codec::geo3::CommonPointData *)((char *)this + 8), v6, (_DWORD *)this + 5, a4);
  *((_DWORD *)this + 5) = (_DWORD)v6;
  return v6;
}

void maps::path_codec::geo3::CommonPointData::MergeFrom(maps::path_codec::geo3::CommonPointData *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(maps::path_codec::geo3::CommonPointData *__hidden))a2 == &off_1E1BF6BF8)
    maps::path_codec::geo3::CommonPointData::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void maps::path_codec::geo3::CommonPointData::MergeFrom(maps::path_codec::geo3::CommonPointData *this, const maps::path_codec::geo3::CommonPointData *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  google::protobuf::GeneratedCodeInfo_Annotation *v7;
  google::protobuf::internal::ArenaImpl *v8;
  const google::protobuf::GeneratedCodeInfo_Annotation *v9;
  google::protobuf::GeneratedCodeInfo_Annotation *v10;
  google::protobuf::internal::ArenaImpl *v11;
  const google::protobuf::GeneratedCodeInfo_Annotation *v12;
  google::protobuf::GeneratedCodeInfo_Annotation *v13;
  google::protobuf::internal::ArenaImpl *v14;
  const google::protobuf::GeneratedCodeInfo_Annotation *v15;

  v4 = (_QWORD *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadata::DoMergeFrom<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1, (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8));
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 7) != 0)
  {
    if ((v6 & 1) != 0)
    {
      *((_DWORD *)this + 4) |= 1u;
      v7 = (google::protobuf::GeneratedCodeInfo_Annotation *)*((_QWORD *)this + 3);
      if (!v7)
      {
        v8 = (google::protobuf::internal::ArenaImpl *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v4 & 1) != 0)
          v8 = *(google::protobuf::internal::ArenaImpl **)v8;
        v7 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RiceEncodedIntegers>(v8);
        *((_QWORD *)this + 3) = v7;
      }
      if (*((_QWORD *)a2 + 3))
        v9 = (const google::protobuf::GeneratedCodeInfo_Annotation *)*((_QWORD *)a2 + 3);
      else
        v9 = (const google::protobuf::GeneratedCodeInfo_Annotation *)&maps::path_codec::geo3::_RiceEncodedIntegers_default_instance_;
      google::protobuf::GeneratedCodeInfo_Annotation::MergeFrom(v7, v9);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return;
        goto LABEL_24;
      }
    }
    else if ((v6 & 2) == 0)
    {
      goto LABEL_6;
    }
    *((_DWORD *)this + 4) |= 2u;
    v10 = (google::protobuf::GeneratedCodeInfo_Annotation *)*((_QWORD *)this + 4);
    if (!v10)
    {
      v11 = (google::protobuf::internal::ArenaImpl *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v4 & 1) != 0)
        v11 = *(google::protobuf::internal::ArenaImpl **)v11;
      v10 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RiceEncodedIntegers>(v11);
      *((_QWORD *)this + 4) = v10;
    }
    if (*((_QWORD *)a2 + 4))
      v12 = (const google::protobuf::GeneratedCodeInfo_Annotation *)*((_QWORD *)a2 + 4);
    else
      v12 = (const google::protobuf::GeneratedCodeInfo_Annotation *)&maps::path_codec::geo3::_RiceEncodedIntegers_default_instance_;
    google::protobuf::GeneratedCodeInfo_Annotation::MergeFrom(v10, v12);
    if ((v6 & 4) != 0)
    {
LABEL_24:
      *((_DWORD *)this + 4) |= 4u;
      v13 = (google::protobuf::GeneratedCodeInfo_Annotation *)*((_QWORD *)this + 5);
      if (!v13)
      {
        v14 = (google::protobuf::internal::ArenaImpl *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v4 & 1) != 0)
          v14 = *(google::protobuf::internal::ArenaImpl **)v14;
        v13 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RiceEncodedIntegers>(v14);
        *((_QWORD *)this + 5) = v13;
      }
      if (*((_QWORD *)a2 + 5))
        v15 = (const google::protobuf::GeneratedCodeInfo_Annotation *)*((_QWORD *)a2 + 5);
      else
        v15 = (const google::protobuf::GeneratedCodeInfo_Annotation *)&maps::path_codec::geo3::_RiceEncodedIntegers_default_instance_;
      google::protobuf::GeneratedCodeInfo_Annotation::MergeFrom(v13, v15);
    }
  }
}

void maps::path_codec::geo3::CommonPointData::CopyFrom(maps::path_codec::geo3::CommonPointData *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    maps::path_codec::geo3::CommonPointData::Clear(this);
    maps::path_codec::geo3::CommonPointData::MergeFrom(this, a2, v4);
  }
}

uint64_t maps::path_codec::geo3::CommonPointData::IsInitialized(maps::path_codec::geo3::CommonPointData *this)
{
  return 1;
}

uint64_t maps::path_codec::geo3::CommonPointData::GetMetadata(maps::path_codec::geo3::CommonPointData *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_compressed_5fpath_2eproto, 0);
  return off_1EDF47068[2];
}

maps::path_codec::geo3::SupportPointData *maps::path_codec::geo3::SupportPointData::SupportPointData(maps::path_codec::geo3::SupportPointData *this, Arena *a2)
{
  *(_QWORD *)this = &off_1E1BF6D58;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = a2;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = a2;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = a2;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = a2;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = a2;
  *((_QWORD *)this + 23) = a2;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = a2;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = a2;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = a2;
  *((_DWORD *)this + 69) = 0;
  if (atomic_load(scc_info_SupportPointData_compressed_5fpath_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SupportPointData_compressed_5fpath_2eproto);
  return this;
}

void sub_1888CD220(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  if (*(int *)(v1 + 260) >= 1)
  {
    v4 = *(_QWORD *)(v1 + 264);
    v6 = *(_QWORD *)(v4 - 8);
    v5 = (void *)(v4 - 8);
    if (!v6)
      operator delete(v5);
  }
  if (*(int *)(v1 + 236) >= 1)
  {
    v7 = *(_QWORD *)(v1 + 240);
    v9 = *(_QWORD *)(v7 - 8);
    v8 = (void *)(v7 - 8);
    if (!v9)
      operator delete(v8);
  }
  if (*(int *)(v1 + 212) >= 1)
  {
    v10 = *(_QWORD *)(v1 + 216);
    v12 = *(_QWORD *)(v10 - 8);
    v11 = (void *)(v10 - 8);
    if (!v12)
      operator delete(v11);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v2);
  if (*(int *)(v1 + 164) >= 1)
  {
    v13 = *(_QWORD *)(v1 + 168);
    v15 = *(_QWORD *)(v13 - 8);
    v14 = (void *)(v13 - 8);
    if (!v15)
      operator delete(v14);
  }
  if (*(int *)(v1 + 140) >= 1)
  {
    v16 = *(_QWORD *)(v1 + 144);
    v18 = *(_QWORD *)(v16 - 8);
    v17 = (void *)(v16 - 8);
    if (!v18)
      operator delete(v17);
  }
  if (*(int *)(v1 + 116) >= 1)
  {
    v19 = *(_QWORD *)(v1 + 120);
    v21 = *(_QWORD *)(v19 - 8);
    v20 = (void *)(v19 - 8);
    if (!v21)
      operator delete(v20);
  }
  if (*(int *)(v1 + 92) >= 1)
  {
    v22 = *(_QWORD *)(v1 + 96);
    v24 = *(_QWORD *)(v22 - 8);
    v23 = (void *)(v22 - 8);
    if (!v24)
      operator delete(v23);
  }
  if (*(int *)(v1 + 68) >= 1)
  {
    v25 = *(_QWORD *)(v1 + 72);
    v27 = *(_QWORD *)(v25 - 8);
    v26 = (void *)(v25 - 8);
    if (!v27)
      operator delete(v26);
  }
  if (*(int *)(v1 + 44) >= 1)
  {
    v28 = *(_QWORD *)(v1 + 48);
    v30 = *(_QWORD *)(v28 - 8);
    v29 = (void *)(v28 - 8);
    if (!v30)
      operator delete(v29);
  }
  if (*(int *)(v1 + 20) >= 1)
  {
    v31 = *(_QWORD *)(v1 + 24);
    v33 = *(_QWORD *)(v31 - 8);
    v32 = (void *)(v31 - 8);
    if (!v33)
      operator delete(v32);
  }
  _Unwind_Resume(a1);
}

void maps::path_codec::geo3::SupportPointData::~SupportPointData(maps::path_codec::geo3::SupportPointData *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
  if (*((int *)this + 65) >= 1)
  {
    v2 = *((_QWORD *)this + 33);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  if (*((int *)this + 59) >= 1)
  {
    v5 = *((_QWORD *)this + 30);
    v7 = *(_QWORD *)(v5 - 8);
    v6 = (void *)(v5 - 8);
    if (!v7)
      operator delete(v6);
  }
  if (*((int *)this + 53) >= 1)
  {
    v8 = *((_QWORD *)this + 27);
    v10 = *(_QWORD *)(v8 - 8);
    v9 = (void *)(v8 - 8);
    if (!v10)
      operator delete(v9);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 23);
  if (*((int *)this + 41) >= 1)
  {
    v11 = *((_QWORD *)this + 21);
    v13 = *(_QWORD *)(v11 - 8);
    v12 = (void *)(v11 - 8);
    if (!v13)
      operator delete(v12);
  }
  if (*((int *)this + 35) >= 1)
  {
    v14 = *((_QWORD *)this + 18);
    v16 = *(_QWORD *)(v14 - 8);
    v15 = (void *)(v14 - 8);
    if (!v16)
      operator delete(v15);
  }
  if (*((int *)this + 29) >= 1)
  {
    v17 = *((_QWORD *)this + 15);
    v19 = *(_QWORD *)(v17 - 8);
    v18 = (void *)(v17 - 8);
    if (!v19)
      operator delete(v18);
  }
  if (*((int *)this + 23) >= 1)
  {
    v20 = *((_QWORD *)this + 12);
    v22 = *(_QWORD *)(v20 - 8);
    v21 = (void *)(v20 - 8);
    if (!v22)
      operator delete(v21);
  }
  if (*((int *)this + 17) >= 1)
  {
    v23 = *((_QWORD *)this + 9);
    v25 = *(_QWORD *)(v23 - 8);
    v24 = (void *)(v23 - 8);
    if (!v25)
      operator delete(v24);
  }
  if (*((int *)this + 11) >= 1)
  {
    v26 = *((_QWORD *)this + 6);
    v28 = *(_QWORD *)(v26 - 8);
    v27 = (void *)(v26 - 8);
    if (!v28)
      operator delete(v27);
  }
  if (*((int *)this + 5) >= 1)
  {
    v29 = *((_QWORD *)this + 3);
    v31 = *(_QWORD *)(v29 - 8);
    v30 = (void *)(v29 - 8);
    if (!v31)
      operator delete(v30);
  }
}

{
  maps::path_codec::geo3::SupportPointData::~SupportPointData(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t maps::path_codec::geo3::SupportPointData::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 276) = a2;
  return this;
}

google::protobuf::UnknownFieldSet *maps::path_codec::geo3::SupportPointData::Clear(maps::path_codec::geo3::SupportPointData *this)
{
  google::protobuf::UnknownFieldSet *result;
  char *v3;
  char v4;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_DWORD *)this + 40) = 0;
  result = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 184);
  v4 = *((_BYTE *)this + 8);
  v3 = (char *)this + 8;
  *((_DWORD *)v3 + 50) = 0;
  *((_DWORD *)v3 + 56) = 0;
  *((_DWORD *)v3 + 62) = 0;
  if ((v4 & 1) != 0)
    return google::protobuf::internal::InternalMetadata::DoClear<google::protobuf::UnknownFieldSet>((uint64_t *)v3);
  return result;
}

google::protobuf::internal *maps::path_codec::geo3::SupportPointData::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  const char **v5;
  char v6;
  google::protobuf::internal *result;
  _QWORD *v8;
  uint64_t *v9;
  google::protobuf::internal *v10;
  unsigned int v11;
  uint64_t v12;
  std::string::value_type *v13;
  int *v14;
  int v15;
  int v16;
  std::string *AlignedAndAddCleanup;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *SizeFallback;
  int v23;
  unint64_t v24;
  int v25;
  char *v26;
  __int128 *v27;
  int v28;
  int v29;
  google::protobuf::internal::EpsCopyInputStream *v30;
  char *v31;
  char *v32;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unint64_t VarintZigZag64;
  int v40;
  int v41;
  uint64_t Varint64;
  uint64_t v43;
  int VarintZigZag32;
  BOOL v45;
  unsigned int *v46;
  int v47;
  google::protobuf::UnknownFieldSet *v48;
  google::protobuf::internal *v49;
  unsigned int *v50[3];
  int v51;
  unsigned int *v52[3];
  int v53;
  unsigned int *v54[3];
  int v55;
  __int128 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v49 = a2;
  v6 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v49, *((_DWORD *)this + 23));
  result = v49;
  if ((v6 & 1) == 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (uint64_t *)(a1 + 184);
    while (2)
    {
      v10 = (google::protobuf::internal *)((char *)result + 1);
      v11 = *(unsigned __int8 *)result;
      if (*(char *)result < 0)
      {
        v11 = v11 + (*(unsigned __int8 *)v10 << 7) - 128;
        if (*(char *)v10 < 0)
        {
          v10 = (google::protobuf::internal *)((char *)result + 3);
          v12 = -21;
          while (1)
          {
            v11 += (*((unsigned __int8 *)v10 - 1) - 1) << (v12 + 35);
            if ((*((char *)v10 - 1) & 0x80000000) == 0)
              break;
            v10 = (google::protobuf::internal *)((char *)v10 + 1);
            v12 += 7;
            if (!v12)
              return 0;
          }
        }
        else
        {
          v10 = (google::protobuf::internal *)((char *)result + 2);
        }
      }
      v49 = v10;
      switch(v11 >> 3)
      {
        case 1u:
          if (v11 == 10)
          {
            result = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)this, v10, (unsigned int *)(a1 + 16));
            goto LABEL_100;
          }
          if (v11 != 8)
            goto LABEL_93;
          v34 = google::protobuf::internal::ReadVarint32(&v49, v5);
          maps::path_codec::geo3::SupportPointData::_internal_add_index((maps::path_codec::geo3::SupportPointData *)a1, v34);
          goto LABEL_91;
        case 2u:
          if (v11 == 18)
          {
            result = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<long long,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)this, v10, (unsigned int *)(a1 + 40));
            goto LABEL_100;
          }
          if (v11 != 16)
            goto LABEL_93;
          VarintZigZag64 = google::protobuf::internal::ReadVarintZigZag64((google::protobuf::internal *)&v49, v5);
          maps::path_codec::geo3::SupportPointData::_internal_add_delta_road_id((maps::path_codec::geo3::SupportPointData *)a1, VarintZigZag64);
          goto LABEL_91;
        case 3u:
          if (v11 == 26)
          {
            result = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)this, v10, (unsigned int *)(a1 + 64));
            goto LABEL_100;
          }
          if (v11 != 24)
            goto LABEL_93;
          v37 = google::protobuf::internal::ReadVarint32(&v49, v5);
          maps::path_codec::geo3::SupportPointData::_internal_add_heading((maps::path_codec::geo3::SupportPointData *)a1, v37);
          goto LABEL_91;
        case 4u:
          if (v11 == 34)
          {
            result = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)this, v10, (unsigned int *)(a1 + 88));
            goto LABEL_100;
          }
          if (v11 != 32)
            goto LABEL_93;
          v38 = google::protobuf::internal::ReadVarint32(&v49, v5);
          maps::path_codec::geo3::SupportPointData::_internal_add_legacy_frc((maps::path_codec::geo3::SupportPointData *)a1, v38);
          goto LABEL_91;
        case 5u:
          if (v11 == 42)
          {
            result = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)this, v10, (unsigned int *)(a1 + 112));
            goto LABEL_100;
          }
          if (v11 != 40)
            goto LABEL_93;
          v35 = google::protobuf::internal::ReadVarint32(&v49, v5);
          maps::path_codec::geo3::SupportPointData::_internal_add_legacy_fow((maps::path_codec::geo3::SupportPointData *)a1, v35);
          goto LABEL_91;
        case 6u:
          if (v11 == 50)
          {
            result = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)this, v10, (unsigned int *)(a1 + 136));
            goto LABEL_100;
          }
          if (v11 != 48)
            goto LABEL_93;
          v40 = google::protobuf::internal::ReadVarint32(&v49, v5);
          maps::path_codec::geo3::SupportPointData::_internal_add_delta_distance((maps::path_codec::geo3::SupportPointData *)a1, v40);
          goto LABEL_91;
        case 7u:
          if (v11 == 58)
          {
            result = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)this, v10, (unsigned int *)(a1 + 160));
            goto LABEL_100;
          }
          if (v11 != 56)
            goto LABEL_93;
          v41 = google::protobuf::internal::ReadVarint32(&v49, v5);
          maps::path_codec::geo3::SupportPointData::_internal_add_is_u_turn_index((maps::path_codec::geo3::SupportPointData *)a1, v41);
          goto LABEL_91;
        case 8u:
          if (v11 != 66)
            goto LABEL_93;
          result = (google::protobuf::internal *)((char *)v10 - 1);
          break;
        case 9u:
          if (v11 == 74)
          {
            result = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<int,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)this, v10, (unsigned int *)(a1 + 208));
            goto LABEL_100;
          }
          if (v11 != 72)
            goto LABEL_93;
          VarintZigZag32 = google::protobuf::internal::ReadVarintZigZag32((google::protobuf::internal *)&v49, v5);
          maps::path_codec::geo3::SupportPointData::_internal_add_road_name_index((maps::path_codec::geo3::SupportPointData *)a1, VarintZigZag32);
          goto LABEL_91;
        case 0xAu:
          if (v11 == 82)
          {
            result = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)this, v10, (unsigned int *)(a1 + 232));
            goto LABEL_100;
          }
          if (v11 != 80)
            goto LABEL_93;
          v36 = google::protobuf::internal::ReadVarint32(&v49, v5);
          maps::path_codec::geo3::SupportPointData::_internal_add_delta_preferred_side_change_index((maps::path_codec::geo3::SupportPointData *)a1, v36);
LABEL_91:
          if (!v49)
            return 0;
          goto LABEL_101;
        case 0xBu:
          if (v11 == 90)
          {
            v21 = *(unsigned __int8 *)v10;
            if ((*(char *)v10 & 0x80000000) == 0)
            {
              SizeFallback = (char *)v10 + 1;
              goto LABEL_54;
            }
            SizeFallback = google::protobuf::internal::ReadSizeFallback(v10, (const char *)*(unsigned __int8 *)v10);
            if (!SizeFallback)
              return 0;
            v21 = v23;
            while (1)
            {
LABEL_54:
              v24 = *((_QWORD *)this + 1);
              v25 = v24 - (_DWORD)SizeFallback;
              if (v21 <= (int)v24 - (int)SizeFallback)
              {
                v50[0] = (unsigned int *)(a1 + 256);
                v50[1] = (unsigned int *)maps::path_codec::geo3::RelativeSide_IsValid;
                v31 = &SizeFallback[v21];
                v50[2] = (unsigned int *)(a1 + 8);
                v51 = 11;
                if (v31 == google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::PackedEnumParser<google::protobuf::UnknownFieldSet>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(int),google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>(SizeFallback, (unint64_t)v31, v50))goto LABEL_61;
                return 0;
              }
              v54[0] = (unsigned int *)(a1 + 256);
              v54[1] = (unsigned int *)maps::path_codec::geo3::RelativeSide_IsValid;
              v54[2] = (unsigned int *)(a1 + 8);
              v55 = 11;
              v26 = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::PackedEnumParser<google::protobuf::UnknownFieldSet>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(int),google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>(SizeFallback, v24, v54);
              if (!v26)
                return 0;
              v27 = (__int128 *)*((_QWORD *)this + 1);
              v28 = (_DWORD)v26 - (_DWORD)v27;
              v29 = v21 - v25;
              if (v21 - v25 <= 16)
                break;
              if (*((int *)this + 7) < 17)
                return 0;
              v30 = google::protobuf::internal::EpsCopyInputStream::Next(this);
              if (!v30)
                return 0;
              v21 = v21 - v25 - v28;
              SizeFallback = (char *)v30 + v28;
            }
            v58 = 0;
            v57 = 0;
            v56 = *v27;
            v52[0] = (unsigned int *)(a1 + 256);
            v52[1] = (unsigned int *)maps::path_codec::geo3::RelativeSide_IsValid;
            v52[2] = (unsigned int *)(a1 + 8);
            v53 = 11;
            v32 = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::PackedEnumParser<google::protobuf::UnknownFieldSet>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(int),google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>((char *)&v56 + v28, (unint64_t)&v56 + v29, v52);
            if (v32)
              v33 = v32 == (char *)&v56 + v29;
            else
              v33 = 0;
            if (v33)
              v31 = (char *)(*((_QWORD *)this + 1) + v29);
            else
              v31 = 0;
LABEL_61:
            v49 = (google::protobuf::internal *)v31;
            if (!v31)
              return 0;
          }
          else if (v11 == 88)
          {
            Varint64 = google::protobuf::internal::ReadVarint64((google::protobuf::internal *)&v49, v5);
            if (!v49)
              return 0;
            v43 = Varint64;
            if (Varint64 > 3)
            {
              if ((*v8 & 1) != 0)
                v48 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
              else
                v48 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a1 + 8));
              google::protobuf::UnknownFieldSet::AddVarint(v48, 0xBu, v43);
            }
            else
            {
              maps::path_codec::geo3::SupportPointData::_internal_add_preferred_side_changes(a1, Varint64);
            }
          }
          else
          {
LABEL_93:
            if (v11)
              v45 = (v11 & 7) == 4;
            else
              v45 = 1;
            if (v45)
            {
              *((_DWORD *)this + 20) = v11 - 1;
              return v10;
            }
            if ((*v8 & 1) != 0)
            {
              v46 = (unsigned int *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              v46 = (unsigned int *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a1 + 8));
              v10 = v49;
            }
            v54[0] = v46;
            result = google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldParserHelper>(v11, (google::protobuf::UnknownFieldSet **)v54, (uint64_t *)v10, (int32x2_t *)this);
LABEL_100:
            v49 = result;
            if (!result)
              return result;
          }
LABEL_101:
          v47 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v49, *((_DWORD *)this + 23));
          result = v49;
          if (v47)
            return result;
          continue;
        default:
          goto LABEL_93;
      }
      break;
    }
    while (1)
    {
      v13 = (char *)result + 1;
      v49 = (google::protobuf::internal *)((char *)result + 1);
      v14 = *(int **)(a1 + 200);
      if (!v14)
        break;
      v15 = *(_DWORD *)(a1 + 192);
      v16 = *v14;
      if (v15 >= *v14)
      {
        if (v16 == *(_DWORD *)(a1 + 196))
        {
LABEL_28:
          if (v15 <= v16)
          {
            google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 184), v16 - v15 + 1);
            v14 = *(int **)(a1 + 200);
          }
          v16 = *v14;
        }
        *v14 = v16 + 1;
        v18 = *v9;
        if (*v9)
        {
          if ((*(_BYTE *)(v18 + 24) & 1) != 0)
          AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v18, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
        }
        else
        {
          AlignedAndAddCleanup = (std::string *)operator new();
        }
        AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
        AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
        AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
        v19 = *(_QWORD *)(a1 + 200);
        v20 = *(int *)(a1 + 192);
        *(_DWORD *)(a1 + 192) = v20 + 1;
        *(_QWORD *)(v19 + 8 * v20 + 8) = AlignedAndAddCleanup;
        v13 = (std::string::value_type *)v49;
        goto LABEL_37;
      }
      *(_DWORD *)(a1 + 192) = v15 + 1;
      AlignedAndAddCleanup = *(std::string **)&v14[2 * v15 + 2];
LABEL_37:
      result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v13, (uint64_t)this);
      v49 = result;
      if (!result)
        return result;
      if (*(_QWORD *)this <= (unint64_t)result || *(_BYTE *)result != 66)
        goto LABEL_101;
    }
    v15 = *(_DWORD *)(a1 + 192);
    v16 = *(_DWORD *)(a1 + 196);
    goto LABEL_28;
  }
  return result;
}

void maps::path_codec::geo3::SupportPointData::_internal_add_index(maps::path_codec::geo3::SupportPointData *this, int a2)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;

  v5 = *((unsigned int *)this + 4);
  v4 = (_DWORD *)((char *)this + 16);
  if ((_DWORD)v5 == *((_DWORD *)this + 5))
  {
    v6 = v5 + 1;
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v5 + 1);
    *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v5) = a2;
    v6 = v5 + 1;
  }
  *v4 = v6;
}

void maps::path_codec::geo3::SupportPointData::_internal_add_delta_road_id(maps::path_codec::geo3::SupportPointData *this, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;

  v5 = *((unsigned int *)this + 10);
  v4 = (_DWORD *)((char *)this + 40);
  if ((_DWORD)v5 == *((_DWORD *)this + 11))
  {
    v6 = v5 + 1;
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v5 + 1);
    *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v5) = a2;
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v5) = a2;
    v6 = v5 + 1;
  }
  *v4 = v6;
}

void maps::path_codec::geo3::SupportPointData::_internal_add_heading(maps::path_codec::geo3::SupportPointData *this, int a2)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;

  v5 = *((unsigned int *)this + 16);
  v4 = (_DWORD *)((char *)this + 64);
  if ((_DWORD)v5 == *((_DWORD *)this + 17))
  {
    v6 = v5 + 1;
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 16, v5 + 1);
    *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v5) = a2;
    v6 = v5 + 1;
  }
  *v4 = v6;
}

void maps::path_codec::geo3::SupportPointData::_internal_add_legacy_frc(maps::path_codec::geo3::SupportPointData *this, int a2)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;

  v5 = *((unsigned int *)this + 22);
  v4 = (_DWORD *)((char *)this + 88);
  if ((_DWORD)v5 == *((_DWORD *)this + 23))
  {
    v6 = v5 + 1;
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 22, v5 + 1);
    *(_DWORD *)(*((_QWORD *)this + 12) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*((_QWORD *)this + 12) + 4 * v5) = a2;
    v6 = v5 + 1;
  }
  *v4 = v6;
}

void maps::path_codec::geo3::SupportPointData::_internal_add_legacy_fow(maps::path_codec::geo3::SupportPointData *this, int a2)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;

  v5 = *((unsigned int *)this + 28);
  v4 = (_DWORD *)((char *)this + 112);
  if ((_DWORD)v5 == *((_DWORD *)this + 29))
  {
    v6 = v5 + 1;
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 28, v5 + 1);
    *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v5) = a2;
    v6 = v5 + 1;
  }
  *v4 = v6;
}

void maps::path_codec::geo3::SupportPointData::_internal_add_delta_distance(maps::path_codec::geo3::SupportPointData *this, int a2)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;

  v5 = *((unsigned int *)this + 34);
  v4 = (_DWORD *)((char *)this + 136);
  if ((_DWORD)v5 == *((_DWORD *)this + 35))
  {
    v6 = v5 + 1;
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 34, v5 + 1);
    *(_DWORD *)(*((_QWORD *)this + 18) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*((_QWORD *)this + 18) + 4 * v5) = a2;
    v6 = v5 + 1;
  }
  *v4 = v6;
}

void maps::path_codec::geo3::SupportPointData::_internal_add_is_u_turn_index(maps::path_codec::geo3::SupportPointData *this, int a2)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;

  v5 = *((unsigned int *)this + 40);
  v4 = (_DWORD *)((char *)this + 160);
  if ((_DWORD)v5 == *((_DWORD *)this + 41))
  {
    v6 = v5 + 1;
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 40, v5 + 1);
    *(_DWORD *)(*((_QWORD *)this + 21) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*((_QWORD *)this + 21) + 4 * v5) = a2;
    v6 = v5 + 1;
  }
  *v4 = v6;
}

void maps::path_codec::geo3::SupportPointData::_internal_add_road_name_index(maps::path_codec::geo3::SupportPointData *this, int a2)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;

  v5 = *((unsigned int *)this + 52);
  v4 = (_DWORD *)((char *)this + 208);
  if ((_DWORD)v5 == *((_DWORD *)this + 53))
  {
    v6 = v5 + 1;
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 52, v5 + 1);
    *(_DWORD *)(*((_QWORD *)this + 27) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*((_QWORD *)this + 27) + 4 * v5) = a2;
    v6 = v5 + 1;
  }
  *v4 = v6;
}

void maps::path_codec::geo3::SupportPointData::_internal_add_delta_preferred_side_change_index(maps::path_codec::geo3::SupportPointData *this, int a2)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;

  v5 = *((unsigned int *)this + 58);
  v4 = (_DWORD *)((char *)this + 232);
  if ((_DWORD)v5 == *((_DWORD *)this + 59))
  {
    v6 = v5 + 1;
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 58, v5 + 1);
    *(_DWORD *)(*((_QWORD *)this + 30) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*((_QWORD *)this + 30) + 4 * v5) = a2;
    v6 = v5 + 1;
  }
  *v4 = v6;
}

void maps::path_codec::geo3::SupportPointData::_internal_add_preferred_side_changes(uint64_t a1, int a2)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;

  v4 = (_DWORD *)(a1 + 256);
  v5 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 260))
  {
    v6 = v5 + 1;
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(a1 + 256), v5 + 1);
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * v5) = a2;
    v6 = v5 + 1;
  }
  *v4 = v6;
}

const google::protobuf::UnknownFieldSet *maps::path_codec::geo3::SupportPointData::_InternalSerialize(maps::path_codec::geo3::SupportPointData *this, google::protobuf::io::EpsCopyOutputStream *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  unsigned int v6;
  _BYTE *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  _BYTE *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  _BYTE *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE *v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  _BYTE *v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  int64_t v73;
  unsigned __int8 *v74;
  unsigned int v75;
  _BYTE *v76;
  int *v77;
  int *v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  _BYTE *v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  _BYTE *v94;
  int *v95;
  int *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (unsigned __int8 *)a2);
    *v4 = 10;
    v7 = v4 + 1;
    if (v6 >= 0x80)
    {
      do
      {
        *v7++ = v6 | 0x80;
        v104 = v6 >> 14;
        v6 >>= 7;
      }
      while (v104);
      v4 = v7 - 1;
    }
    v4 += 2;
    *v7 = v6;
    v8 = (unsigned int *)*((_QWORD *)this + 3);
    v9 = &v8[*((int *)this + 4)];
    do
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
        v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v11 = *v8++;
      v10 = v11;
      if (v11 > 0x7F)
      {
        *v4 = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v4 += 2;
          do
          {
            *(v4 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v4;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v4 - 1) = v13;
        }
        else
        {
          v4[1] = v12;
          v4 += 2;
        }
      }
      else
      {
        *v4++ = v10;
      }
    }
    while (v8 < v9);
  }
  v15 = *((_DWORD *)this + 14);
  if ((int)v15 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    *v4 = 18;
    v16 = v4 + 1;
    if (v15 >= 0x80)
    {
      do
      {
        *v16++ = v15 | 0x80;
        v105 = v15 >> 14;
        v15 >>= 7;
      }
      while (v105);
      v4 = v16 - 1;
    }
    v4 += 2;
    *v16 = v15;
    v17 = (uint64_t *)*((_QWORD *)this + 6);
    v18 = &v17[*((int *)this + 10)];
    do
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
        v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v19 = *v17++;
      v20 = (2 * v19) ^ (v19 >> 63);
      if (v20 > 0x7F)
      {
        *v4 = v20 | 0x80;
        v21 = v20 >> 7;
        if (v20 >> 14)
        {
          v4 += 2;
          do
          {
            *(v4 - 1) = v21 | 0x80;
            v22 = v21 >> 7;
            ++v4;
            v23 = v21 >> 14;
            v21 >>= 7;
          }
          while (v23);
          *(v4 - 1) = v22;
        }
        else
        {
          v4[1] = v21;
          v4 += 2;
        }
      }
      else
      {
        *v4++ = v20;
      }
    }
    while (v17 < v18);
  }
  v24 = *((_DWORD *)this + 20);
  if ((int)v24 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    *v4 = 26;
    v25 = v4 + 1;
    if (v24 >= 0x80)
    {
      do
      {
        *v25++ = v24 | 0x80;
        v106 = v24 >> 14;
        v24 >>= 7;
      }
      while (v106);
      v4 = v25 - 1;
    }
    v4 += 2;
    *v25 = v24;
    v26 = (unsigned int *)*((_QWORD *)this + 9);
    v27 = &v26[*((int *)this + 16)];
    do
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
        v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v29 = *v26++;
      v28 = v29;
      if (v29 > 0x7F)
      {
        *v4 = v28 | 0x80;
        v30 = v28 >> 7;
        if (v28 >> 14)
        {
          v4 += 2;
          do
          {
            *(v4 - 1) = v30 | 0x80;
            v31 = v30 >> 7;
            ++v4;
            v32 = v30 >> 14;
            v30 >>= 7;
          }
          while (v32);
          *(v4 - 1) = v31;
        }
        else
        {
          v4[1] = v30;
          v4 += 2;
        }
      }
      else
      {
        *v4++ = v28;
      }
    }
    while (v26 < v27);
  }
  v33 = *((_DWORD *)this + 26);
  if ((int)v33 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    *v4 = 34;
    v34 = v4 + 1;
    if (v33 >= 0x80)
    {
      do
      {
        *v34++ = v33 | 0x80;
        v107 = v33 >> 14;
        v33 >>= 7;
      }
      while (v107);
      v4 = v34 - 1;
    }
    v4 += 2;
    *v34 = v33;
    v35 = (unsigned int *)*((_QWORD *)this + 12);
    v36 = &v35[*((int *)this + 22)];
    do
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
        v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v38 = *v35++;
      v37 = v38;
      if (v38 > 0x7F)
      {
        *v4 = v37 | 0x80;
        v39 = v37 >> 7;
        if (v37 >> 14)
        {
          v4 += 2;
          do
          {
            *(v4 - 1) = v39 | 0x80;
            v40 = v39 >> 7;
            ++v4;
            v41 = v39 >> 14;
            v39 >>= 7;
          }
          while (v41);
          *(v4 - 1) = v40;
        }
        else
        {
          v4[1] = v39;
          v4 += 2;
        }
      }
      else
      {
        *v4++ = v37;
      }
    }
    while (v35 < v36);
  }
  v42 = *((_DWORD *)this + 32);
  if ((int)v42 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    *v4 = 42;
    v43 = v4 + 1;
    if (v42 >= 0x80)
    {
      do
      {
        *v43++ = v42 | 0x80;
        v108 = v42 >> 14;
        v42 >>= 7;
      }
      while (v108);
      v4 = v43 - 1;
    }
    v4 += 2;
    *v43 = v42;
    v44 = (unsigned int *)*((_QWORD *)this + 15);
    v45 = &v44[*((int *)this + 28)];
    do
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
        v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v47 = *v44++;
      v46 = v47;
      if (v47 > 0x7F)
      {
        *v4 = v46 | 0x80;
        v48 = v46 >> 7;
        if (v46 >> 14)
        {
          v4 += 2;
          do
          {
            *(v4 - 1) = v48 | 0x80;
            v49 = v48 >> 7;
            ++v4;
            v50 = v48 >> 14;
            v48 >>= 7;
          }
          while (v50);
          *(v4 - 1) = v49;
        }
        else
        {
          v4[1] = v48;
          v4 += 2;
        }
      }
      else
      {
        *v4++ = v46;
      }
    }
    while (v44 < v45);
  }
  v51 = *((_DWORD *)this + 38);
  if ((int)v51 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    *v4 = 50;
    v52 = v4 + 1;
    if (v51 >= 0x80)
    {
      do
      {
        *v52++ = v51 | 0x80;
        v109 = v51 >> 14;
        v51 >>= 7;
      }
      while (v109);
      v4 = v52 - 1;
    }
    v4 += 2;
    *v52 = v51;
    v53 = (unsigned int *)*((_QWORD *)this + 18);
    v54 = &v53[*((int *)this + 34)];
    do
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
        v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v56 = *v53++;
      v55 = v56;
      if (v56 > 0x7F)
      {
        *v4 = v55 | 0x80;
        v57 = v55 >> 7;
        if (v55 >> 14)
        {
          v4 += 2;
          do
          {
            *(v4 - 1) = v57 | 0x80;
            v58 = v57 >> 7;
            ++v4;
            v59 = v57 >> 14;
            v57 >>= 7;
          }
          while (v59);
          *(v4 - 1) = v58;
        }
        else
        {
          v4[1] = v57;
          v4 += 2;
        }
      }
      else
      {
        *v4++ = v55;
      }
    }
    while (v53 < v54);
  }
  v60 = *((_DWORD *)this + 44);
  if ((int)v60 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    *v4 = 58;
    v61 = v4 + 1;
    if (v60 >= 0x80)
    {
      do
      {
        *v61++ = v60 | 0x80;
        v110 = v60 >> 14;
        v60 >>= 7;
      }
      while (v110);
      v4 = v61 - 1;
    }
    v4 += 2;
    *v61 = v60;
    v62 = (unsigned int *)*((_QWORD *)this + 21);
    v63 = &v62[*((int *)this + 40)];
    do
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
        v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v65 = *v62++;
      v64 = v65;
      if (v65 > 0x7F)
      {
        *v4 = v64 | 0x80;
        v66 = v64 >> 7;
        if (v64 >> 14)
        {
          v4 += 2;
          do
          {
            *(v4 - 1) = v66 | 0x80;
            v67 = v66 >> 7;
            ++v4;
            v68 = v66 >> 14;
            v66 >>= 7;
          }
          while (v68);
          *(v4 - 1) = v67;
        }
        else
        {
          v4[1] = v66;
          v4 += 2;
        }
      }
      else
      {
        *v4++ = v64;
      }
    }
    while (v62 < v63);
  }
  v69 = *((unsigned int *)this + 48);
  if ((int)v69 >= 1)
  {
    v70 = 0;
    v71 = 8 * v69;
    do
    {
      v72 = *(_QWORD **)(*((_QWORD *)this + 25) + v70 + 8);
      if (*((char *)v72 + 23) < 0)
      {
        v73 = v72[1];
        if (v73 > 127)
          goto LABEL_117;
      }
      else
      {
        v73 = *((unsigned __int8 *)v72 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v73)
      {
        *v4 = 66;
        v4[1] = v73;
        if (*((char *)v72 + 23) < 0)
          v72 = (_QWORD *)*v72;
        v74 = v4 + 2;
        memcpy(v4 + 2, v72, v73);
        v4 = &v74[v73];
        goto LABEL_115;
      }
LABEL_117:
      v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 8, (uint64_t)v72, v4);
LABEL_115:
      v70 += 8;
    }
    while (v71 != v70);
  }
  v75 = *((_DWORD *)this + 56);
  if ((int)v75 > 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    *v4 = 74;
    v76 = v4 + 1;
    if (v75 >= 0x80)
    {
      do
      {
        *v76++ = v75 | 0x80;
        v111 = v75 >> 14;
        v75 >>= 7;
      }
      while (v111);
      v4 = v76 - 1;
    }
    v4 += 2;
    *v76 = v75;
    v77 = (int *)*((_QWORD *)this + 27);
    v78 = &v77[*((int *)this + 52)];
    do
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
        v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v79 = *v77++;
      v80 = (2 * v79) ^ (v79 >> 31);
      if (v80 > 0x7F)
      {
        *v4 = v80 | 0x80;
        v81 = v80 >> 7;
        if (v80 >> 14)
        {
          v4 += 2;
          do
          {
            *(v4 - 1) = v81 | 0x80;
            v82 = v81 >> 7;
            ++v4;
            v83 = v81 >> 14;
            v81 >>= 7;
          }
          while (v83);
          *(v4 - 1) = v82;
        }
        else
        {
          v4[1] = v81;
          v4 += 2;
        }
      }
      else
      {
        *v4++ = v80;
      }
    }
    while (v77 < v78);
  }
  v84 = *((_DWORD *)this + 62);
  if ((int)v84 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    *v4 = 82;
    v85 = v4 + 1;
    if (v84 >= 0x80)
    {
      do
      {
        *v85++ = v84 | 0x80;
        v112 = v84 >> 14;
        v84 >>= 7;
      }
      while (v112);
      v4 = v85 - 1;
    }
    v4 += 2;
    *v85 = v84;
    v86 = (unsigned int *)*((_QWORD *)this + 30);
    v87 = &v86[*((int *)this + 58)];
    do
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
        v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v89 = *v86++;
      v88 = v89;
      if (v89 > 0x7F)
      {
        *v4 = v88 | 0x80;
        v90 = v88 >> 7;
        if (v88 >> 14)
        {
          v4 += 2;
          do
          {
            *(v4 - 1) = v90 | 0x80;
            v91 = v90 >> 7;
            ++v4;
            v92 = v90 >> 14;
            v90 >>= 7;
          }
          while (v92);
          *(v4 - 1) = v91;
        }
        else
        {
          v4[1] = v90;
          v4 += 2;
        }
      }
      else
      {
        *v4++ = v88;
      }
    }
    while (v86 < v87);
  }
  v93 = *((_DWORD *)this + 68);
  if ((int)v93 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    *v4 = 90;
    v94 = v4 + 1;
    if (v93 >= 0x80)
    {
      do
      {
        *v94++ = v93 | 0x80;
        v113 = v93 >> 14;
        v93 >>= 7;
      }
      while (v113);
      v4 = v94 - 1;
    }
    v4 += 2;
    *v94 = v93;
    v95 = (int *)*((_QWORD *)this + 33);
    v96 = &v95[*((int *)this + 64)];
    do
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
        v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v98 = *v95++;
      v97 = v98;
      if (v98 > 0x7F)
      {
        *v4 = v97 | 0x80;
        v99 = v97 >> 7;
        if (v97 >> 14)
        {
          v4 += 2;
          do
          {
            *(v4 - 1) = v99 | 0x80;
            v100 = v99 >> 7;
            ++v4;
            v101 = v99 >> 14;
            v99 >>= 7;
          }
          while (v101);
          *(v4 - 1) = v100;
        }
        else
        {
          v4[1] = v99;
          v4 += 2;
        }
      }
      else
      {
        *v4++ = v97;
      }
    }
    while (v95 < v96);
  }
  v102 = *((_QWORD *)this + 1);
  if ((v102 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v102 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)v4, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
  else
    return (const google::protobuf::UnknownFieldSet *)v4;
}

uint64_t maps::path_codec::geo3::SupportPointData::ByteSizeLong(maps::path_codec::geo3::SupportPointData *this)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  CachedSize *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  const InternalMetadata *v75;

  v2 = *((unsigned int *)this + 4);
  if ((int)v2 < 1)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = (int *)*((_QWORD *)this + 3);
    do
    {
      v5 = *v4++;
      v3 += (9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6;
      --v2;
    }
    while (v2);
    if (v3)
    {
      if ((v3 & 0x80000000) != 0)
        v6 = 10;
      else
        v6 = (9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6;
      v8 = v6 + 1;
      v7 = v3;
      goto LABEL_11;
    }
  }
  v7 = 0;
  v8 = 0;
LABEL_11:
  *((_DWORD *)this + 8) = v7;
  v9 = v8 + v3;
  v10 = google::protobuf::internal::WireFormatLite::SInt64Size((unsigned int *)this + 10);
  if (v10)
  {
    v11 = v10;
    if ((v10 & 0x80000000) != 0)
      v12 = 10;
    else
      v12 = (9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6;
    v9 += v12 + 1;
  }
  else
  {
    v11 = 0;
  }
  *((_DWORD *)this + 14) = v11;
  v13 = v9 + v10;
  v14 = *((unsigned int *)this + 16);
  if ((int)v14 < 1)
  {
    v15 = 0;
LABEL_24:
    v19 = 0;
    goto LABEL_27;
  }
  v15 = 0;
  v16 = (int *)*((_QWORD *)this + 9);
  do
  {
    v17 = *v16++;
    v15 += (9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6;
    --v14;
  }
  while (v14);
  if (!v15)
    goto LABEL_24;
  if ((v15 & 0x80000000) != 0)
    v18 = 10;
  else
    v18 = (9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6;
  v13 += v18 + 1;
  v19 = v15;
LABEL_27:
  *((_DWORD *)this + 20) = v19;
  v20 = v13 + v15;
  v21 = *((unsigned int *)this + 22);
  if ((int)v21 < 1)
  {
    v22 = 0;
LABEL_34:
    v26 = 0;
    goto LABEL_37;
  }
  v22 = 0;
  v23 = (int *)*((_QWORD *)this + 12);
  do
  {
    v24 = *v23++;
    v22 += (9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6;
    --v21;
  }
  while (v21);
  if (!v22)
    goto LABEL_34;
  if ((v22 & 0x80000000) != 0)
    v25 = 10;
  else
    v25 = (9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6;
  v20 += v25 + 1;
  v26 = v22;
LABEL_37:
  *((_DWORD *)this + 26) = v26;
  v27 = v20 + v22;
  v28 = *((unsigned int *)this + 28);
  if ((int)v28 < 1)
  {
    v29 = 0;
LABEL_44:
    v33 = 0;
    goto LABEL_47;
  }
  v29 = 0;
  v30 = (int *)*((_QWORD *)this + 15);
  do
  {
    v31 = *v30++;
    v29 += (9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6;
    --v28;
  }
  while (v28);
  if (!v29)
    goto LABEL_44;
  if ((v29 & 0x80000000) != 0)
    v32 = 10;
  else
    v32 = (9 * (__clz(v29 | 1) ^ 0x1F) + 73) >> 6;
  v27 += v32 + 1;
  v33 = v29;
LABEL_47:
  *((_DWORD *)this + 32) = v33;
  v34 = v27 + v29;
  v35 = *((unsigned int *)this + 34);
  if ((int)v35 < 1)
  {
    v36 = 0;
LABEL_54:
    v40 = 0;
    goto LABEL_57;
  }
  v36 = 0;
  v37 = (int *)*((_QWORD *)this + 18);
  do
  {
    v38 = *v37++;
    v36 += (9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6;
    --v35;
  }
  while (v35);
  if (!v36)
    goto LABEL_54;
  if ((v36 & 0x80000000) != 0)
    v39 = 11;
  else
    v39 = ((9 * (__clz(v36 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v34 += v39;
  v40 = v36;
LABEL_57:
  *((_DWORD *)this + 38) = v40;
  v41 = v34 + v36;
  v42 = *((unsigned int *)this + 40);
  if ((int)v42 < 1)
  {
    v43 = 0;
LABEL_64:
    v47 = 0;
    goto LABEL_67;
  }
  v43 = 0;
  v44 = (int *)*((_QWORD *)this + 21);
  do
  {
    v45 = *v44++;
    v43 += (9 * (__clz(v45 | 1) ^ 0x1F) + 73) >> 6;
    --v42;
  }
  while (v42);
  if (!v43)
    goto LABEL_64;
  if ((v43 & 0x80000000) != 0)
    v46 = 11;
  else
    v46 = ((9 * (__clz(v43 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v41 += v46;
  v47 = v43;
LABEL_67:
  *((_DWORD *)this + 44) = v47;
  v48 = v41 + v43;
  v49 = *((unsigned int *)this + 48);
  v50 = v48 + v49;
  if ((int)v49 >= 1)
  {
    v51 = (uint64_t *)(*((_QWORD *)this + 25) + 8);
    do
    {
      v52 = *v51++;
      v53 = *(unsigned __int8 *)(v52 + 23);
      v54 = *(_QWORD *)(v52 + 8);
      if ((v53 & 0x80u) == 0)
        v54 = v53;
      v50 += v54 + ((9 * (__clz(v54 | 1) ^ 0x1F) + 73) >> 6);
      --v49;
    }
    while (v49);
  }
  v55 = google::protobuf::internal::WireFormatLite::SInt32Size((unsigned int *)this + 52);
  v57 = 11;
  v58 = ((9 * (__clz(v55 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v55 >= 0)
    v57 = v58;
  v59 = v57 + v50;
  if (v55)
    v60 = v55;
  else
    v60 = 0;
  if (!v55)
    v59 = v50;
  *((_DWORD *)this + 56) = v60;
  v61 = v59 + v55;
  v62 = *((unsigned int *)this + 58);
  if ((int)v62 < 1)
  {
    v63 = 0;
LABEL_86:
    v67 = 0;
    goto LABEL_89;
  }
  v63 = 0;
  v64 = (int *)*((_QWORD *)this + 30);
  do
  {
    v65 = *v64++;
    v63 += (9 * (__clz(v65 | 1) ^ 0x1F) + 73) >> 6;
    --v62;
  }
  while (v62);
  if (!v63)
    goto LABEL_86;
  if ((v63 & 0x80000000) != 0)
    v66 = 11;
  else
    v66 = ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v61 += v66;
  v67 = v63;
LABEL_89:
  *((_DWORD *)this + 62) = v67;
  v68 = v61 + v63;
  v69 = *((_DWORD *)this + 64);
  if (v69)
  {
    v70 = 0;
    v71 = 0;
    do
    {
      v72 = *(_DWORD *)(*((_QWORD *)this + 33) + 4 * v70);
      if (v72 < 0)
        v73 = 10;
      else
        v73 = (9 * (__clz(v72 | 1) ^ 0x1F) + 73) >> 6;
      v71 += v73;
      ++v70;
    }
    while (v69 != v70);
    if (v71)
    {
      if ((v71 & 0x80000000) != 0)
        v74 = 11;
      else
        v74 = ((9 * (__clz(v71 | 1) ^ 0x1F) + 73) >> 6) + 1;
      v68 += v74;
      v69 = v71;
    }
    else
    {
      v69 = 0;
    }
  }
  else
  {
    v71 = 0;
  }
  *((_DWORD *)this + 68) = v69;
  v75 = (const InternalMetadata *)(v68 + v71);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((maps::path_codec::geo3::SupportPointData *)((char *)this + 8), v75, (_DWORD *)this + 69, v56);
  *((_DWORD *)this + 69) = (_DWORD)v75;
  return v68 + v71;
}

void maps::path_codec::geo3::SupportPointData::MergeFrom(maps::path_codec::geo3::SupportPointData *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(maps::path_codec::geo3::SupportPointData *__hidden))a2 == &off_1E1BF6D58)
    maps::path_codec::geo3::SupportPointData::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void maps::path_codec::geo3::SupportPointData::MergeFrom(maps::path_codec::geo3::SupportPointData *this, const maps::path_codec::geo3::SupportPointData *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  signed int v26;
  const std::string **v27;
  unsigned int *v28;
  int v29;
  int *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadata::DoMergeFrom<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1, (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8));
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    v6 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v6 + v5);
    v7 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v7 + 4 * v6), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  v8 = *((_DWORD *)a2 + 10);
  if (v8)
  {
    v9 = *((int *)this + 10);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v9 + v8);
    v10 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v10 + 8 * v9), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  v11 = *((_DWORD *)a2 + 16);
  if (v11)
  {
    v12 = *((int *)this + 16);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 16, v12 + v11);
    v13 = *((_QWORD *)this + 9);
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
    memcpy((void *)(v13 + 4 * v12), *((const void **)a2 + 9), 4 * *((int *)a2 + 16));
  }
  v14 = *((_DWORD *)a2 + 22);
  if (v14)
  {
    v15 = *((int *)this + 22);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 22, v15 + v14);
    v16 = *((_QWORD *)this + 12);
    *((_DWORD *)this + 22) += *((_DWORD *)a2 + 22);
    memcpy((void *)(v16 + 4 * v15), *((const void **)a2 + 12), 4 * *((int *)a2 + 22));
  }
  v17 = *((_DWORD *)a2 + 28);
  if (v17)
  {
    v18 = *((int *)this + 28);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 28, v18 + v17);
    v19 = *((_QWORD *)this + 15);
    *((_DWORD *)this + 28) += *((_DWORD *)a2 + 28);
    memcpy((void *)(v19 + 4 * v18), *((const void **)a2 + 15), 4 * *((int *)a2 + 28));
  }
  v20 = *((_DWORD *)a2 + 34);
  if (v20)
  {
    v21 = *((int *)this + 34);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 34, v21 + v20);
    v22 = *((_QWORD *)this + 18);
    *((_DWORD *)this + 34) += *((_DWORD *)a2 + 34);
    memcpy((void *)(v22 + 4 * v21), *((const void **)a2 + 18), 4 * *((int *)a2 + 34));
  }
  v23 = *((_DWORD *)a2 + 40);
  if (v23)
  {
    v24 = *((int *)this + 40);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 40, v24 + v23);
    v25 = *((_QWORD *)this + 21);
    *((_DWORD *)this + 40) += *((_DWORD *)a2 + 40);
    memcpy((void *)(v25 + 4 * v24), *((const void **)a2 + 21), 4 * *((int *)a2 + 40));
  }
  v26 = *((_DWORD *)a2 + 48);
  if (v26)
  {
    v27 = (const std::string **)(*((_QWORD *)a2 + 25) + 8);
    v28 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((maps::path_codec::geo3::SupportPointData *)((char *)this + 184), *((_DWORD *)a2 + 48));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)((char *)this + 184), (std::string **)v28, v27, v26, **((_DWORD **)this + 25) - *((_DWORD *)this + 48));
    v29 = *((_DWORD *)this + 48) + v26;
    *((_DWORD *)this + 48) = v29;
    v30 = (int *)*((_QWORD *)this + 25);
    if (*v30 < v29)
      *v30 = v29;
  }
  v31 = *((_DWORD *)a2 + 52);
  if (v31)
  {
    v32 = *((int *)this + 52);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 52, v32 + v31);
    v33 = *((_QWORD *)this + 27);
    *((_DWORD *)this + 52) += *((_DWORD *)a2 + 52);
    memcpy((void *)(v33 + 4 * v32), *((const void **)a2 + 27), 4 * *((int *)a2 + 52));
  }
  v34 = *((_DWORD *)a2 + 58);
  if (v34)
  {
    v35 = *((int *)this + 58);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 58, v35 + v34);
    v36 = *((_QWORD *)this + 30);
    *((_DWORD *)this + 58) += *((_DWORD *)a2 + 58);
    memcpy((void *)(v36 + 4 * v35), *((const void **)a2 + 30), 4 * *((int *)a2 + 58));
  }
  v37 = *((_DWORD *)a2 + 64);
  if (v37)
  {
    v38 = *((int *)this + 64);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 64, v38 + v37);
    v39 = *((_QWORD *)this + 33);
    *((_DWORD *)this + 64) += *((_DWORD *)a2 + 64);
    memcpy((void *)(v39 + 4 * v38), *((const void **)a2 + 33), 4 * *((int *)a2 + 64));
  }
}

void maps::path_codec::geo3::SupportPointData::CopyFrom(maps::path_codec::geo3::SupportPointData *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    maps::path_codec::geo3::SupportPointData::Clear(this);
    maps::path_codec::geo3::SupportPointData::MergeFrom(this, a2, v4);
  }
}

uint64_t maps::path_codec::geo3::SupportPointData::IsInitialized(maps::path_codec::geo3::SupportPointData *this)
{
  return 1;
}

uint64_t maps::path_codec::geo3::SupportPointData::GetMetadata(maps::path_codec::geo3::SupportPointData *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_compressed_5fpath_2eproto, 0);
  return off_1EDF47068[4];
}

maps::path_codec::geo3::AnchorData *maps::path_codec::geo3::AnchorData::AnchorData(maps::path_codec::geo3::AnchorData *this, Arena *a2)
{
  *(_QWORD *)this = &off_1E1BF69E8;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 5) = a2;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  if (atomic_load(scc_info_AnchorData_compressed_5fpath_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_AnchorData_compressed_5fpath_2eproto);
  return this;
}

void sub_1888CF4F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = v2;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<maps::path_codec::geo3::UUID>::TypeHandler>(v3);
  if (*(int *)(v1 + 20) >= 1)
  {
    v5 = *(_QWORD *)(v1 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v6 = (void *)(v5 - 8);
    if (!v7)
      operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void maps::path_codec::geo3::AnchorData::~AnchorData(maps::path_codec::geo3::AnchorData *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<maps::path_codec::geo3::UUID>::TypeHandler>((_QWORD *)this + 5);
  if (*((int *)this + 5) >= 1)
  {
    v2 = *((_QWORD *)this + 3);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
}

{
  maps::path_codec::geo3::AnchorData::~AnchorData(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t maps::path_codec::geo3::AnchorData::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

google::protobuf::UnknownFieldSet *maps::path_codec::geo3::AnchorData::Clear(google::protobuf::UnknownFieldSet *this)
{
  uint64_t v1;
  uint64_t v2;
  maps::path_codec::geo3::UUID **v3;
  maps::path_codec::geo3::UUID *v4;
  uint64_t *v5;
  char v6;

  v1 = (uint64_t)this;
  *((_DWORD *)this + 4) = 0;
  v2 = *((unsigned int *)this + 12);
  if ((int)v2 >= 1)
  {
    v3 = (maps::path_codec::geo3::UUID **)(*((_QWORD *)this + 7) + 8);
    do
    {
      v4 = *v3++;
      this = maps::path_codec::geo3::UUID::Clear(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 48) = 0;
  }
  v6 = *(_BYTE *)(v1 + 8);
  v5 = (uint64_t *)(v1 + 8);
  if ((v6 & 1) != 0)
    return google::protobuf::internal::InternalMetadata::DoClear<google::protobuf::UnknownFieldSet>(v5);
  return this;
}

google::protobuf::internal *maps::path_codec::geo3::AnchorData::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  const char **v5;
  char v6;
  google::protobuf::internal *result;
  _QWORD *v8;
  google::protobuf::internal *v9;
  unsigned int v10;
  google::protobuf::internal *v11;
  int *v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  google::protobuf::UnknownFieldSet *v21;
  int v22;
  google::protobuf::internal *v23;
  google::protobuf::UnknownFieldSet *v24;

  v23 = a2;
  v6 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v23, *((_DWORD *)this + 23));
  result = v23;
  if ((v6 & 1) == 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v9 = (google::protobuf::internal *)((char *)result + 1);
      v10 = *(unsigned __int8 *)result;
      if (*(char *)result < 0)
      {
        v10 = v10 + (*(unsigned __int8 *)v9 << 7) - 128;
        if (*(char *)v9 < 0)
        {
          v9 = (google::protobuf::internal *)((char *)result + 3);
          v18 = -21;
          while (1)
          {
            v10 += (*((unsigned __int8 *)v9 - 1) - 1) << (v18 + 35);
            if ((*((char *)v9 - 1) & 0x80000000) == 0)
              break;
            v9 = (google::protobuf::internal *)((char *)v9 + 1);
            v18 += 7;
            if (!v18)
              return 0;
          }
        }
        else
        {
          v9 = (google::protobuf::internal *)((char *)result + 2);
        }
      }
      v23 = v9;
      if (v10 >> 3 == 2)
        break;
      if (v10 >> 3 != 1)
        goto LABEL_33;
      if (v10 == 10)
      {
        result = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)this, v9, (unsigned int *)(a1 + 16));
LABEL_40:
        v23 = result;
        if (!result)
          return result;
        goto LABEL_41;
      }
      if (v10 != 8)
        goto LABEL_33;
      v19 = google::protobuf::internal::ReadVarint32(&v23, v5);
      maps::path_codec::geo3::SupportPointData::_internal_add_index((maps::path_codec::geo3::SupportPointData *)a1, v19);
      if (!v23)
        return 0;
LABEL_41:
      v22 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v23, *((_DWORD *)this + 23));
      result = v23;
      if (v22)
        return result;
    }
    if (v10 != 18)
    {
LABEL_33:
      if (v10)
        v20 = (v10 & 7) == 4;
      else
        v20 = 1;
      if (v20)
      {
        *((_DWORD *)this + 20) = v10 - 1;
        return v9;
      }
      if ((*v8 & 1) != 0)
      {
        v21 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v21 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a1 + 8));
        v9 = v23;
      }
      v24 = v21;
      result = google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldParserHelper>(v10, &v24, (uint64_t *)v9, (int32x2_t *)this);
      goto LABEL_40;
    }
    result = (google::protobuf::internal *)((char *)v9 - 1);
    while (1)
    {
      v11 = (google::protobuf::internal *)((char *)result + 1);
      v23 = (google::protobuf::internal *)((char *)result + 1);
      v12 = *(int **)(a1 + 56);
      if (!v12)
        break;
      v13 = *(_DWORD *)(a1 + 48);
      v14 = *v12;
      if (v13 >= *v12)
      {
        if (v14 == *(_DWORD *)(a1 + 52))
        {
LABEL_18:
          if (v13 <= v14)
          {
            google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 40), v14 - v13 + 1);
            v12 = *(int **)(a1 + 56);
          }
          v14 = *v12;
        }
        *v12 = v14 + 1;
        v15 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::UUID>(*(google::protobuf::internal::ArenaImpl **)(a1 + 40));
        v16 = *(_QWORD *)(a1 + 56);
        v17 = *(int *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = v17 + 1;
        *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
        v11 = v23;
        goto LABEL_22;
      }
      *(_DWORD *)(a1 + 48) = v13 + 1;
      v15 = *(_QWORD **)&v12[2 * v13 + 2];
LABEL_22:
      result = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<maps::path_codec::geo3::UUID>((int32x2_t *)this, (uint64_t)v15, v11);
      v23 = result;
      if (!result)
        return result;
      if (*(_QWORD *)this <= (unint64_t)result || *(_BYTE *)result != 18)
        goto LABEL_41;
    }
    v13 = *(_DWORD *)(a1 + 48);
    v14 = *(_DWORD *)(a1 + 52);
    goto LABEL_18;
  }
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<maps::path_codec::geo3::UUID>(int32x2_t *this, uint64_t a2, google::protobuf::internal *a3)
{
  const char *v5;
  const char *v6;
  char *result;
  int32x2_t v8;
  int v9;
  __int32 v10;
  BOOL v11;
  int v12;

  v5 = (const char *)*(unsigned __int8 *)a3;
  if (*(char *)a3 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v5);
    if (!result)
      return result;
    v6 = result;
  }
  else
  {
    v6 = (char *)a3 + 1;
  }
  v8 = this[1];
  v9 = (_DWORD)v5 + (_DWORD)v6 - v8.i32[0];
  *this = (int32x2_t)(*(_QWORD *)&v8 + (v9 & (v9 >> 31)));
  v10 = this[3].i32[1];
  this[3].i32[1] = v9;
  v8.i32[0] = this[11].i32[0];
  v11 = __OFSUB__(v8.i32[0]--, 1);
  this[11].i32[0] = v8.i32[0];
  if (v8.i32[0] < 0 != v11)
    return 0;
  result = maps::path_codec::geo3::UUID::_InternalParse(a2, v6, this);
  if (!result)
    return result;
  ++this[11].i32[0];
  if (this[10].i32[0])
    return 0;
  v12 = this[3].i32[1] + v10 - v9;
  this[3].i32[1] = v12;
  *this = (int32x2_t)(*(_QWORD *)&this[1] + (v12 & (v12 >> 31)));
  return result;
}

const google::protobuf::UnknownFieldSet *maps::path_codec::geo3::AnchorData::_InternalSerialize(maps::path_codec::geo3::AnchorData *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int i;
  maps::path_codec::geo3::UUID *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v25;

  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    *a2 = 10;
    v7 = a2 + 1;
    if (v6 >= 0x80)
    {
      do
      {
        *v7++ = v6 | 0x80;
        v25 = v6 >> 14;
        v6 >>= 7;
      }
      while (v25);
      a2 = v7 - 1;
    }
    a2 += 2;
    *v7 = v6;
    v8 = (unsigned int *)*((_QWORD *)this + 3);
    v9 = &v8[*((int *)this + 4)];
    do
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v11 = *v8++;
      v10 = v11;
      if (v11 > 0x7F)
      {
        *a2 = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          a2 += 2;
          do
          {
            *(a2 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++a2;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(a2 - 1) = v13;
        }
        else
        {
          a2[1] = v12;
          a2 += 2;
        }
      }
      else
      {
        *a2++ = v10;
      }
    }
    while (v8 < v9);
  }
  v15 = *((_DWORD *)this + 12);
  if (v15)
  {
    for (i = 0; i != v15; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v17 = *(maps::path_codec::geo3::UUID **)(*((_QWORD *)this + 7) + 8 * i + 8);
      *a2 = 18;
      v18 = *((_DWORD *)v17 + 5);
      if (v18 > 0x7F)
      {
        a2[1] = v18 | 0x80;
        v20 = v18 >> 7;
        if (v18 >> 14)
        {
          v19 = a2 + 3;
          do
          {
            *(v19 - 1) = v20 | 0x80;
            v21 = v20 >> 7;
            ++v19;
            v22 = v20 >> 14;
            v20 >>= 7;
          }
          while (v22);
          *(v19 - 1) = v21;
        }
        else
        {
          a2[2] = v20;
          v19 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v18;
        v19 = a2 + 2;
      }
      a2 = (unsigned __int8 *)maps::path_codec::geo3::UUID::_InternalSerialize(v17, v19, a3, a4);
    }
  }
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v23 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

const InternalMetadata *maps::path_codec::geo3::AnchorData::ByteSizeLong(maps::path_codec::geo3::AnchorData *this, uint64_t a2, uint64_t a3, CachedSize *a4)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const InternalMetadata *v13;
  uint64_t v14;
  maps::path_codec::geo3::UUID **v15;
  uint64_t v16;
  maps::path_codec::geo3::UUID *v17;
  const InternalMetadata *v18;

  v5 = *((unsigned int *)this + 4);
  if ((int)v5 < 1)
  {
    v6 = 0;
LABEL_8:
    v10 = 0;
    v9 = 0;
    goto LABEL_11;
  }
  v6 = 0;
  v7 = (int *)*((_QWORD *)this + 3);
  do
  {
    v8 = *v7++;
    v6 += (9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6;
    --v5;
  }
  while (v5);
  if (!v6)
    goto LABEL_8;
  if ((v6 & 0x80000000) != 0)
    v9 = 11;
  else
    v9 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v10 = v6;
LABEL_11:
  *((_DWORD *)this + 8) = v10;
  v11 = v9 + v6;
  v12 = *((int *)this + 12);
  v13 = (const InternalMetadata *)(v11 + v12);
  v14 = *((_QWORD *)this + 7);
  if (v14)
    v15 = (maps::path_codec::geo3::UUID **)(v14 + 8);
  else
    v15 = 0;
  if ((_DWORD)v12)
  {
    v16 = 8 * v12;
    do
    {
      v17 = *v15++;
      v18 = maps::path_codec::geo3::UUID::ByteSizeLong(v17, a2, a3, a4);
      v13 = (const InternalMetadata *)((char *)v13
                                     + (_QWORD)v18
                                     + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6));
      v16 -= 8;
    }
    while (v16);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return (const InternalMetadata *)google::protobuf::internal::ComputeUnknownFieldsSize((maps::path_codec::geo3::AnchorData *)((char *)this + 8), v13, (_DWORD *)this + 16, a4);
  *((_DWORD *)this + 16) = (_DWORD)v13;
  return v13;
}

void maps::path_codec::geo3::AnchorData::MergeFrom(maps::path_codec::geo3::AnchorData *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(maps::path_codec::geo3::AnchorData *__hidden))a2 == &off_1E1BF69E8)
    maps::path_codec::geo3::AnchorData::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void maps::path_codec::geo3::AnchorData::MergeFrom(maps::path_codec::geo3::AnchorData *this, const maps::path_codec::geo3::AnchorData *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const maps::path_codec::geo3::UUID **v15;
  maps::path_codec::geo3::UUID **v16;
  const maps::path_codec::geo3::UUID *v17;
  const maps::path_codec::geo3::UUID *v18;
  maps::path_codec::geo3::UUID *v19;
  google::protobuf::internal::ArenaImpl *v20;
  int v21;
  uint64_t v22;
  maps::path_codec::geo3::UUID **v23;
  const maps::path_codec::geo3::UUID **v24;
  const maps::path_codec::geo3::UUID *v25;
  maps::path_codec::geo3::UUID *v26;
  int v27;
  int *v28;
  uint64_t v29;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadata::DoMergeFrom<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1, (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8));
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    v6 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v6 + v5);
    v7 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v7 + 4 * v6), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  v8 = *((_DWORD *)a2 + 12);
  if (v8)
  {
    v29 = *((_QWORD *)a2 + 7);
    v9 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((maps::path_codec::geo3::AnchorData *)((char *)this + 40), v8);
    v10 = v9;
    v11 = **((int **)this + 7);
    v12 = *((int *)this + 12);
    v13 = v11 - v12;
    if ((int)v11 - (int)v12 >= v8)
      v14 = v8;
    else
      v14 = v13;
    if ((int)v14 >= 1)
    {
      v15 = (const maps::path_codec::geo3::UUID **)(v29 + 8);
      v16 = (maps::path_codec::geo3::UUID **)v9;
      do
      {
        v18 = *v15++;
        v17 = v18;
        v19 = *v16++;
        google::protobuf::internal::GenericTypeHandler<maps::path_codec::geo3::UUID>::Merge(v17, v19);
        --v14;
      }
      while (v14);
    }
    if (v13 < v8)
    {
      v20 = (google::protobuf::internal::ArenaImpl *)*((_QWORD *)this + 5);
      v21 = v12 + v8 - v11;
      v22 = 8 * v11 - 8 * v12;
      v23 = (maps::path_codec::geo3::UUID **)((char *)v10 + v22);
      v24 = (const maps::path_codec::geo3::UUID **)(v22 + v29 + 8);
      do
      {
        v25 = *v24++;
        v26 = (maps::path_codec::geo3::UUID *)google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::UUID>(v20);
        google::protobuf::internal::GenericTypeHandler<maps::path_codec::geo3::UUID>::Merge(v25, v26);
        *v23++ = v26;
        --v21;
      }
      while (v21);
    }
    v27 = *((_DWORD *)this + 12) + v8;
    *((_DWORD *)this + 12) = v27;
    v28 = (int *)*((_QWORD *)this + 7);
    if (*v28 < v27)
      *v28 = v27;
  }
}

void maps::path_codec::geo3::AnchorData::CopyFrom(maps::path_codec::geo3::AnchorData *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    maps::path_codec::geo3::AnchorData::Clear(this);
    maps::path_codec::geo3::AnchorData::MergeFrom(this, a2, v4);
  }
}

uint64_t maps::path_codec::geo3::AnchorData::IsInitialized(maps::path_codec::geo3::AnchorData *this)
{
  return 1;
}

uint64_t maps::path_codec::geo3::AnchorData::GetMetadata(maps::path_codec::geo3::AnchorData *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_compressed_5fpath_2eproto, 0);
  return off_1EDF47068[6];
}

void maps::path_codec::geo3::CompressedPath::~CompressedPath(maps::path_codec::geo3::CompressedPath *this)
{
  maps::path_codec::geo3::CommonPointData *v2;
  maps::path_codec::geo3::SupportPointData *v3;
  maps::path_codec::geo3::AnchorData *v4;

  if (this != (maps::path_codec::geo3::CompressedPath *)&maps::path_codec::geo3::_CompressedPath_default_instance_)
  {
    v2 = (maps::path_codec::geo3::CommonPointData *)*((_QWORD *)this + 3);
    if (v2)
    {
      maps::path_codec::geo3::CommonPointData::~CommonPointData(v2);
      MEMORY[0x18D76437C]();
    }
    v3 = (maps::path_codec::geo3::SupportPointData *)*((_QWORD *)this + 4);
    if (v3)
    {
      maps::path_codec::geo3::SupportPointData::~SupportPointData(v3);
      MEMORY[0x18D76437C]();
    }
    v4 = (maps::path_codec::geo3::AnchorData *)*((_QWORD *)this + 5);
    if (v4)
    {
      maps::path_codec::geo3::AnchorData::~AnchorData(v4);
      MEMORY[0x18D76437C]();
    }
  }
  google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
}

{
  maps::path_codec::geo3::CompressedPath::~CompressedPath(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t maps::path_codec::geo3::CompressedPath::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

google::protobuf::UnknownFieldSet *maps::path_codec::geo3::CompressedPath::Clear(google::protobuf::UnknownFieldSet *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  char v4;

  v1 = (uint64_t)this;
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 7) == 0)
    goto LABEL_6;
  if ((v2 & 1) != 0)
  {
    this = maps::path_codec::geo3::CommonPointData::Clear(*((google::protobuf::UnknownFieldSet **)this + 3));
    if ((v2 & 2) == 0)
    {
LABEL_4:
      if ((v2 & 4) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_4;
  }
  this = maps::path_codec::geo3::SupportPointData::Clear(*(maps::path_codec::geo3::SupportPointData **)(v1 + 32));
  if ((v2 & 4) != 0)
LABEL_5:
    this = maps::path_codec::geo3::AnchorData::Clear(*(google::protobuf::UnknownFieldSet **)(v1 + 40));
LABEL_6:
  v4 = *(_BYTE *)(v1 + 8);
  v3 = v1 + 8;
  *(_DWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 8) = 0;
  if ((v4 & 1) != 0)
    return google::protobuf::internal::InternalMetadata::DoClear<google::protobuf::UnknownFieldSet>((uint64_t *)v3);
  return this;
}

google::protobuf::internal *maps::path_codec::geo3::CompressedPath::_InternalParse(uint64_t a1, google::protobuf::internal *a2, int32x2_t *this)
{
  int v5;
  google::protobuf::internal *v6;
  _QWORD *v7;
  unsigned int v8;
  google::protobuf::internal *v9;
  const char *v10;
  int v11;
  _QWORD *v12;
  google::protobuf::internal::ArenaImpl *v13;
  const char *v14;
  google::protobuf::internal *v15;
  maps::path_codec::geo3::SupportPointData *v16;
  google::protobuf::internal::ArenaImpl *v17;
  const char *v18;
  google::protobuf::internal *v19;
  maps::path_codec::geo3::AnchorData *v20;
  google::protobuf::internal::ArenaImpl *v21;
  const char *v22;
  google::protobuf::internal *v23;
  BOOL v24;
  google::protobuf::UnknownFieldSet *v25;
  uint64_t v26;
  char *SizeFallback;
  int32x2_t v28;
  int v29;
  __int32 v30;
  BOOL v31;
  google::protobuf::internal *v32;
  char *v33;
  int32x2_t v34;
  char *v35;
  int32x2_t v36;
  int v37;
  google::protobuf::internal *v38;
  int v39;
  google::protobuf::internal *v41;
  google::protobuf::UnknownFieldSet *v42;

  v41 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)this, (const char **)&v41, this[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v6 = (google::protobuf::internal *)((char *)v41 + 1);
      v8 = *(unsigned __int8 *)v41;
      if (*(char *)v41 < 0)
      {
        v8 = v8 + (*(unsigned __int8 *)v6 << 7) - 128;
        if (*(char *)v6 < 0)
        {
          v6 = (google::protobuf::internal *)((char *)v41 + 3);
          v26 = -21;
          while (1)
          {
            v8 += (*((unsigned __int8 *)v6 - 1) - 1) << (v26 + 35);
            if ((*((char *)v6 - 1) & 0x80000000) == 0)
              break;
            v6 = (google::protobuf::internal *)((char *)v6 + 1);
            v26 += 7;
            if (!v26)
              goto LABEL_67;
          }
        }
        else
        {
          v6 = (google::protobuf::internal *)((char *)v41 + 2);
        }
      }
      v41 = v6;
      switch(v8 >> 3)
      {
        case 1u:
          if (v8 != 8)
            goto LABEL_34;
          v5 |= 8u;
          v9 = (google::protobuf::internal *)((char *)v6 + 1);
          LODWORD(v10) = *(unsigned __int8 *)v6;
          if ((*(char *)v6 & 0x80000000) == 0)
            goto LABEL_12;
          v11 = *(char *)v9;
          v10 = (const char *)(v10 + (v11 << 7) - 128);
          if ((v11 & 0x80000000) == 0)
          {
            v9 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_12:
            v41 = v9;
            *(_DWORD *)(a1 + 48) = (_DWORD)v10;
            goto LABEL_62;
          }
          v38 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v6, v10);
          v41 = v38;
          *(_DWORD *)(a1 + 48) = v39;
          if (!v38)
            goto LABEL_67;
          goto LABEL_62;
        case 2u:
          if (v8 != 18)
            goto LABEL_34;
          *(_DWORD *)(a1 + 16) |= 1u;
          v12 = *(_QWORD **)(a1 + 24);
          if (!v12)
          {
            v13 = (google::protobuf::internal::ArenaImpl *)(*v7 & 0xFFFFFFFFFFFFFFFELL);
            if ((*v7 & 1) != 0)
              v13 = *(google::protobuf::internal::ArenaImpl **)v13;
            v12 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::CommonPointData>(v13);
            *(_QWORD *)(a1 + 24) = v12;
            v6 = v41;
          }
          v14 = (const char *)*(unsigned __int8 *)v6;
          if (*(char *)v6 < 0)
          {
            SizeFallback = google::protobuf::internal::ReadSizeFallback(v6, v14);
            if (!SizeFallback)
              goto LABEL_67;
            v15 = (google::protobuf::internal *)SizeFallback;
          }
          else
          {
            v15 = (google::protobuf::internal *)((char *)v6 + 1);
          }
          v28 = this[1];
          v29 = (_DWORD)v14 + (_DWORD)v15 - v28.i32[0];
          *this = (int32x2_t)(*(_QWORD *)&v28 + (v29 & (v29 >> 31)));
          v30 = this[3].i32[1];
          this[3].i32[1] = v29;
          v28.i32[0] = this[11].i32[0];
          v31 = __OFSUB__(v28.i32[0]--, 1);
          this[11].i32[0] = v28.i32[0];
          if (v28.i32[0] < 0 != v31)
            goto LABEL_67;
          v32 = maps::path_codec::geo3::CommonPointData::_InternalParse((uint64_t)v12, v15, (google::protobuf::internal::EpsCopyInputStream *)this);
          if (!v32)
            goto LABEL_67;
          goto LABEL_60;
        case 3u:
          if (v8 != 26)
            goto LABEL_34;
          *(_DWORD *)(a1 + 16) |= 2u;
          v16 = *(maps::path_codec::geo3::SupportPointData **)(a1 + 32);
          if (!v16)
          {
            v17 = (google::protobuf::internal::ArenaImpl *)(*v7 & 0xFFFFFFFFFFFFFFFELL);
            if ((*v7 & 1) != 0)
              v17 = *(google::protobuf::internal::ArenaImpl **)v17;
            v16 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::SupportPointData>(v17);
            *(_QWORD *)(a1 + 32) = v16;
            v6 = v41;
          }
          v18 = (const char *)*(unsigned __int8 *)v6;
          if (*(char *)v6 < 0)
          {
            v33 = google::protobuf::internal::ReadSizeFallback(v6, v18);
            if (!v33)
              goto LABEL_67;
            v19 = (google::protobuf::internal *)v33;
          }
          else
          {
            v19 = (google::protobuf::internal *)((char *)v6 + 1);
          }
          v34 = this[1];
          v29 = (_DWORD)v18 + (_DWORD)v19 - v34.i32[0];
          *this = (int32x2_t)(*(_QWORD *)&v34 + (v29 & (v29 >> 31)));
          v30 = this[3].i32[1];
          this[3].i32[1] = v29;
          v34.i32[0] = this[11].i32[0];
          v31 = __OFSUB__(v34.i32[0]--, 1);
          this[11].i32[0] = v34.i32[0];
          if (v34.i32[0] < 0 != v31)
            goto LABEL_67;
          v32 = maps::path_codec::geo3::SupportPointData::_InternalParse((uint64_t)v16, v19, (google::protobuf::internal::EpsCopyInputStream *)this);
          if (!v32)
            goto LABEL_67;
          goto LABEL_60;
        case 4u:
          if (v8 != 34)
            goto LABEL_34;
          *(_DWORD *)(a1 + 16) |= 4u;
          v20 = *(maps::path_codec::geo3::AnchorData **)(a1 + 40);
          if (!v20)
          {
            v21 = (google::protobuf::internal::ArenaImpl *)(*v7 & 0xFFFFFFFFFFFFFFFELL);
            if ((*v7 & 1) != 0)
              v21 = *(google::protobuf::internal::ArenaImpl **)v21;
            v20 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::AnchorData>(v21);
            *(_QWORD *)(a1 + 40) = v20;
            v6 = v41;
          }
          v22 = (const char *)*(unsigned __int8 *)v6;
          if (*(char *)v6 < 0)
          {
            v35 = google::protobuf::internal::ReadSizeFallback(v6, v22);
            if (!v35)
              goto LABEL_67;
            v23 = (google::protobuf::internal *)v35;
          }
          else
          {
            v23 = (google::protobuf::internal *)((char *)v6 + 1);
          }
          v36 = this[1];
          v29 = (_DWORD)v22 + (_DWORD)v23 - v36.i32[0];
          *this = (int32x2_t)(*(_QWORD *)&v36 + (v29 & (v29 >> 31)));
          v30 = this[3].i32[1];
          this[3].i32[1] = v29;
          v36.i32[0] = this[11].i32[0];
          v31 = __OFSUB__(v36.i32[0]--, 1);
          this[11].i32[0] = v36.i32[0];
          if (v36.i32[0] < 0 != v31)
            goto LABEL_67;
          v32 = maps::path_codec::geo3::AnchorData::_InternalParse((uint64_t)v20, v23, (google::protobuf::internal::EpsCopyInputStream *)this);
          if (!v32)
            goto LABEL_67;
LABEL_60:
          ++this[11].i32[0];
          if (this[10].i32[0])
            goto LABEL_67;
          v37 = this[3].i32[1] + v30 - v29;
          this[3].i32[1] = v37;
          *this = (int32x2_t)(*(_QWORD *)&this[1] + (v37 & (v37 >> 31)));
          v41 = v32;
          goto LABEL_62;
        default:
LABEL_34:
          if (v8)
            v24 = (v8 & 7) == 4;
          else
            v24 = 1;
          if (v24)
          {
            this[10].i32[0] = v8 - 1;
            goto LABEL_68;
          }
          if ((*v7 & 1) != 0)
          {
            v25 = (google::protobuf::UnknownFieldSet *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v25 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a1 + 8));
            v6 = v41;
          }
          v42 = v25;
          v41 = google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldParserHelper>(v8, &v42, (uint64_t *)v6, this);
          if (!v41)
          {
LABEL_67:
            v6 = 0;
            goto LABEL_68;
          }
LABEL_62:
          if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)this, (const char **)&v41, this[11].i32[1]))goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  v6 = v41;
LABEL_68:
  *(_DWORD *)(a1 + 16) |= v5;
  return v6;
}

const google::protobuf::UnknownFieldSet *maps::path_codec::geo3::CompressedPath::_InternalSerialize(maps::path_codec::geo3::CompressedPath *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  maps::path_codec::geo3::CommonPointData *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  maps::path_codec::geo3::SupportPointData *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  maps::path_codec::geo3::AnchorData *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;

  v6 = *((_DWORD *)this + 4);
  if ((v6 & 8) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = *((_DWORD *)this + 12);
    *a2 = 8;
    if (v7 > 0x7F)
    {
      a2[1] = v7 | 0x80;
      v8 = v7 >> 7;
      if (v7 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v8 | 0x80;
          v9 = v8 >> 7;
          ++a2;
          v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
        *(a2 - 1) = v9;
        if ((v6 & 1) != 0)
          goto LABEL_17;
      }
      else
      {
        a2[2] = v8;
        a2 += 3;
        if ((v6 & 1) != 0)
          goto LABEL_17;
      }
    }
    else
    {
      a2[1] = v7;
      a2 += 2;
      if ((v6 & 1) != 0)
        goto LABEL_17;
    }
LABEL_3:
    if ((v6 & 2) == 0)
      goto LABEL_4;
    goto LABEL_27;
  }
  if ((v6 & 1) == 0)
    goto LABEL_3;
LABEL_17:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v11 = (maps::path_codec::geo3::CommonPointData *)*((_QWORD *)this + 3);
  *a2 = 18;
  v12 = *((_DWORD *)v11 + 5);
  if (v12 > 0x7F)
  {
    a2[1] = v12 | 0x80;
    v14 = v12 >> 7;
    if (v12 >> 14)
    {
      v13 = a2 + 3;
      do
      {
        *(v13 - 1) = v14 | 0x80;
        v15 = v14 >> 7;
        ++v13;
        v16 = v14 >> 14;
        v14 >>= 7;
      }
      while (v16);
      *(v13 - 1) = v15;
    }
    else
    {
      a2[2] = v14;
      v13 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v12;
    v13 = a2 + 2;
  }
  a2 = (unsigned __int8 *)maps::path_codec::geo3::CommonPointData::_InternalSerialize(v11, v13, a3, a4);
  if ((v6 & 2) == 0)
  {
LABEL_4:
    if ((v6 & 4) == 0)
      goto LABEL_47;
    goto LABEL_37;
  }
LABEL_27:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v17 = (maps::path_codec::geo3::SupportPointData *)*((_QWORD *)this + 4);
  *a2 = 26;
  v18 = *((_DWORD *)v17 + 69);
  if (v18 > 0x7F)
  {
    a2[1] = v18 | 0x80;
    v20 = v18 >> 7;
    if (v18 >> 14)
    {
      v19 = a2 + 3;
      do
      {
        *(v19 - 1) = v20 | 0x80;
        v21 = v20 >> 7;
        ++v19;
        v22 = v20 >> 14;
        v20 >>= 7;
      }
      while (v22);
      *(v19 - 1) = v21;
    }
    else
    {
      a2[2] = v20;
      v19 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v18;
    v19 = a2 + 2;
  }
  a2 = (unsigned __int8 *)maps::path_codec::geo3::SupportPointData::_InternalSerialize(v17, (google::protobuf::io::EpsCopyOutputStream *)v19, a3);
  if ((v6 & 4) != 0)
  {
LABEL_37:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v23 = (maps::path_codec::geo3::AnchorData *)*((_QWORD *)this + 5);
    *a2 = 34;
    v24 = *((_DWORD *)v23 + 16);
    if (v24 > 0x7F)
    {
      a2[1] = v24 | 0x80;
      v26 = v24 >> 7;
      if (v24 >> 14)
      {
        v25 = a2 + 3;
        do
        {
          *(v25 - 1) = v26 | 0x80;
          v27 = v26 >> 7;
          ++v25;
          v28 = v26 >> 14;
          v26 >>= 7;
        }
        while (v28);
        *(v25 - 1) = v27;
      }
      else
      {
        a2[2] = v26;
        v25 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v24;
      v25 = a2 + 2;
    }
    a2 = (unsigned __int8 *)maps::path_codec::geo3::AnchorData::_InternalSerialize(v23, v25, a3, a4);
  }
LABEL_47:
  v29 = *((_QWORD *)this + 1);
  if ((v29 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v29 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

const InternalMetadata *maps::path_codec::geo3::CompressedPath::ByteSizeLong(maps::path_codec::geo3::CompressedPath *this, uint64_t a2, uint64_t a3, CachedSize *a4)
{
  int v5;
  const InternalMetadata *v6;
  const InternalMetadata *v7;
  uint64_t v8;
  const InternalMetadata *v10;

  v5 = *((_DWORD *)this + 4);
  if ((v5 & 0xF) == 0)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((v5 & 1) != 0)
  {
    v7 = maps::path_codec::geo3::CommonPointData::ByteSizeLong(*((maps::path_codec::geo3::CommonPointData **)this + 3), a2, a3, a4);
    v6 = (const InternalMetadata *)((char *)&v7->var0 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1);
    if ((v5 & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v6 = 0;
  if ((v5 & 2) != 0)
  {
LABEL_7:
    v8 = maps::path_codec::geo3::SupportPointData::ByteSizeLong(*((maps::path_codec::geo3::SupportPointData **)this + 4));
    v6 = (const InternalMetadata *)((char *)v6 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
  }
LABEL_8:
  if ((v5 & 4) == 0)
  {
    if ((v5 & 8) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v10 = maps::path_codec::geo3::AnchorData::ByteSizeLong(*((maps::path_codec::geo3::AnchorData **)this + 5), a2, a3, a4);
  v6 = (const InternalMetadata *)((char *)&v10->var0
                                + (_QWORD)v6
                                + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)
                                + 1);
  if ((v5 & 8) != 0)
LABEL_10:
    v6 = (const InternalMetadata *)((char *)v6 + ((9 * (__clz(*((_DWORD *)this + 12) | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_11:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return (const InternalMetadata *)google::protobuf::internal::ComputeUnknownFieldsSize((maps::path_codec::geo3::CompressedPath *)((char *)this + 8), v6, (_DWORD *)this + 5, a4);
  *((_DWORD *)this + 5) = (_DWORD)v6;
  return v6;
}

void maps::path_codec::geo3::CompressedPath::MergeFrom(maps::path_codec::geo3::CommonPointData **this, const maps::path_codec::geo3::CommonPointData **a2, google::protobuf::Message *a3)
{
  _QWORD *v5;
  const maps::path_codec::geo3::CommonPointData *v6;
  int v7;
  maps::path_codec::geo3::CommonPointData *v8;
  google::protobuf::internal::ArenaImpl *v9;
  const maps::path_codec::geo3::CommonPointData *v10;
  maps::path_codec::geo3::SupportPointData *v11;
  google::protobuf::internal::ArenaImpl *v12;
  const maps::path_codec::geo3::SupportPointData *v13;
  maps::path_codec::geo3::AnchorData *v14;
  google::protobuf::internal::ArenaImpl *v15;
  const maps::path_codec::geo3::AnchorData *v16;

  if (*a2 != (const maps::path_codec::geo3::CommonPointData *)&off_1E1BF6A98)
  {
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)a2, (const google::protobuf::Message *)this, a3);
    return;
  }
  v5 = this + 1;
  v6 = a2[1];
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadata::DoMergeFrom<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1, (const google::protobuf::UnknownFieldSet *)(((unint64_t)v6 & 0xFFFFFFFFFFFFFFFELL) + 8));
  v7 = *((_DWORD *)a2 + 4);
  if ((v7 & 0xF) != 0)
  {
    if ((v7 & 1) != 0)
    {
      *((_DWORD *)this + 4) |= 1u;
      v8 = this[3];
      if (!v8)
      {
        v9 = (google::protobuf::internal::ArenaImpl *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v9 = *(google::protobuf::internal::ArenaImpl **)v9;
        v8 = (maps::path_codec::geo3::CommonPointData *)google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::CommonPointData>(v9);
        this[3] = v8;
      }
      if (a2[3])
        v10 = a2[3];
      else
        v10 = (const maps::path_codec::geo3::CommonPointData *)&maps::path_codec::geo3::_CommonPointData_default_instance_;
      maps::path_codec::geo3::CommonPointData::MergeFrom(v8, v10);
      if ((v7 & 2) == 0)
      {
LABEL_8:
        if ((v7 & 4) == 0)
          goto LABEL_9;
        goto LABEL_29;
      }
    }
    else if ((v7 & 2) == 0)
    {
      goto LABEL_8;
    }
    *((_DWORD *)this + 4) |= 2u;
    v11 = this[4];
    if (!v11)
    {
      v12 = (google::protobuf::internal::ArenaImpl *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v5 & 1) != 0)
        v12 = *(google::protobuf::internal::ArenaImpl **)v12;
      v11 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::SupportPointData>(v12);
      this[4] = v11;
    }
    if (a2[4])
      v13 = a2[4];
    else
      v13 = (const maps::path_codec::geo3::SupportPointData *)&maps::path_codec::geo3::_SupportPointData_default_instance_;
    maps::path_codec::geo3::SupportPointData::MergeFrom(v11, v13);
    if ((v7 & 4) == 0)
    {
LABEL_9:
      if ((v7 & 8) == 0)
      {
LABEL_11:
        *((_DWORD *)this + 4) |= v7;
        return;
      }
LABEL_10:
      *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
      goto LABEL_11;
    }
LABEL_29:
    *((_DWORD *)this + 4) |= 4u;
    v14 = this[5];
    if (!v14)
    {
      v15 = (google::protobuf::internal::ArenaImpl *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v5 & 1) != 0)
        v15 = *(google::protobuf::internal::ArenaImpl **)v15;
      v14 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::AnchorData>(v15);
      this[5] = v14;
    }
    if (a2[5])
      v16 = a2[5];
    else
      v16 = (const maps::path_codec::geo3::AnchorData *)&maps::path_codec::geo3::_AnchorData_default_instance_;
    maps::path_codec::geo3::AnchorData::MergeFrom(v14, v16);
    if ((v7 & 8) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
}

void maps::path_codec::geo3::CompressedPath::CopyFrom(const maps::path_codec::geo3::CommonPointData **this, const maps::path_codec::geo3::CommonPointData **a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    maps::path_codec::geo3::CompressedPath::Clear((google::protobuf::UnknownFieldSet *)this);
    maps::path_codec::geo3::CompressedPath::MergeFrom(this, a2, v4);
  }
}

uint64_t maps::path_codec::geo3::CompressedPath::IsInitialized(maps::path_codec::geo3::CompressedPath *this)
{
  return 1;
}

uint64_t maps::path_codec::geo3::CompressedPath::GetMetadata(maps::path_codec::geo3::CompressedPath *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_compressed_5fpath_2eproto, 0);
  return off_1EDF47068[8];
}

maps::path_codec::geo3::RiceEncodedIntegers *google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RiceEncodedIntegers>(google::protobuf::internal::ArenaImpl *this)
{
  maps::path_codec::geo3::RiceEncodedIntegers *Aligned;

  if (this)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    Aligned = (maps::path_codec::geo3::RiceEncodedIntegers *)google::protobuf::internal::ArenaImpl::AllocateAligned(this, 0x40uLL);
    maps::path_codec::geo3::RiceEncodedIntegers::RiceEncodedIntegers(Aligned, (Arena *)this);
  }
  else
  {
    Aligned = (maps::path_codec::geo3::RiceEncodedIntegers *)operator new();
    maps::path_codec::geo3::RiceEncodedIntegers::RiceEncodedIntegers(Aligned, 0);
  }
  return Aligned;
}

void sub_1888D0A6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x1081C408A70D0C6);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::CommonPointData>(google::protobuf::internal::ArenaImpl *this)
{
  _QWORD *Aligned;

  if (this)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    Aligned = google::protobuf::internal::ArenaImpl::AllocateAligned(this, 0x30uLL);
    *Aligned = &off_1E1BF6BF8;
    Aligned[1] = this;
    Aligned[2] = 0;
    if (atomic_load(scc_info_CommonPointData_compressed_5fpath_2eproto))
      goto LABEL_7;
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    *Aligned = &off_1E1BF6BF8;
    Aligned[1] = 0;
    Aligned[2] = 0;
    if (atomic_load(scc_info_CommonPointData_compressed_5fpath_2eproto))
LABEL_7:
      google::protobuf::internal::InitSCCImpl(scc_info_CommonPointData_compressed_5fpath_2eproto);
  }
  Aligned[3] = 0;
  Aligned[4] = 0;
  Aligned[5] = 0;
  return Aligned;
}

void sub_1888D0B74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40CA074DDCLL);
  _Unwind_Resume(a1);
}

maps::path_codec::geo3::SupportPointData *google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::SupportPointData>(google::protobuf::internal::ArenaImpl *this)
{
  maps::path_codec::geo3::SupportPointData *Aligned;

  if (this)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    Aligned = (maps::path_codec::geo3::SupportPointData *)google::protobuf::internal::ArenaImpl::AllocateAligned(this, 0x118uLL);
    maps::path_codec::geo3::SupportPointData::SupportPointData(Aligned, (Arena *)this);
  }
  else
  {
    Aligned = (maps::path_codec::geo3::SupportPointData *)operator new();
    maps::path_codec::geo3::SupportPointData::SupportPointData(Aligned, 0);
  }
  return Aligned;
}

void sub_1888D0C28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C402EB22144);
  _Unwind_Resume(a1);
}

maps::path_codec::geo3::AnchorData *google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::AnchorData>(google::protobuf::internal::ArenaImpl *this)
{
  maps::path_codec::geo3::AnchorData *Aligned;

  if (this)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    Aligned = (maps::path_codec::geo3::AnchorData *)google::protobuf::internal::ArenaImpl::AllocateAligned(this, 0x48uLL);
    maps::path_codec::geo3::AnchorData::AnchorData(Aligned, (Arena *)this);
  }
  else
  {
    Aligned = (maps::path_codec::geo3::AnchorData *)operator new();
    maps::path_codec::geo3::AnchorData::AnchorData(Aligned, 0);
  }
  return Aligned;
}

void sub_1888D0CDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40B787F885);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::CompressedPath>(google::protobuf::internal::ArenaImpl *this)
{
  uint64_t Aligned;

  if (this)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    Aligned = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAligned(this, 0x38uLL);
    *(_QWORD *)Aligned = &off_1E1BF6A98;
    *(_QWORD *)(Aligned + 8) = this;
    *(_QWORD *)(Aligned + 16) = 0;
    if (atomic_load(scc_info_CompressedPath_compressed_5fpath_2eproto))
      goto LABEL_7;
  }
  else
  {
    Aligned = operator new();
    *(_QWORD *)Aligned = &off_1E1BF6A98;
    *(_QWORD *)(Aligned + 8) = 0;
    *(_QWORD *)(Aligned + 16) = 0;
    if (atomic_load(scc_info_CompressedPath_compressed_5fpath_2eproto))
LABEL_7:
      google::protobuf::internal::InitSCCImpl(scc_info_CompressedPath_compressed_5fpath_2eproto);
  }
  *(_QWORD *)(Aligned + 24) = 0;
  *(_QWORD *)(Aligned + 32) = 0;
  *(_DWORD *)(Aligned + 48) = 0;
  *(_QWORD *)(Aligned + 40) = 0;
  return Aligned;
}

void sub_1888D0DE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C400941DAD4);
  _Unwind_Resume(a1);
}

maps::path_codec::geo3::RiceEncodedIntegers *maps::path_codec::geo3::RiceEncodedIntegers::New(maps::path_codec::geo3::RiceEncodedIntegers *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RiceEncodedIntegers>(0);
}

maps::path_codec::geo3::RiceEncodedIntegers *maps::path_codec::geo3::RiceEncodedIntegers::New(maps::path_codec::geo3::RiceEncodedIntegers *this, Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RiceEncodedIntegers>((google::protobuf::internal::ArenaImpl *)a2);
}

uint64_t maps::path_codec::geo3::RiceEncodedIntegers::GetCachedSize(maps::path_codec::geo3::RiceEncodedIntegers *this)
{
  return *((unsigned int *)this + 5);
}

_QWORD *maps::path_codec::geo3::CommonPointData::New(maps::path_codec::geo3::CommonPointData *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::CommonPointData>(0);
}

_QWORD *maps::path_codec::geo3::CommonPointData::New(maps::path_codec::geo3::CommonPointData *this, Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::CommonPointData>((google::protobuf::internal::ArenaImpl *)a2);
}

uint64_t maps::path_codec::geo3::CommonPointData::GetCachedSize(maps::path_codec::geo3::CommonPointData *this)
{
  return *((unsigned int *)this + 5);
}

maps::path_codec::geo3::SupportPointData *maps::path_codec::geo3::SupportPointData::New(maps::path_codec::geo3::SupportPointData *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::SupportPointData>(0);
}

maps::path_codec::geo3::SupportPointData *maps::path_codec::geo3::SupportPointData::New(maps::path_codec::geo3::SupportPointData *this, Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::SupportPointData>((google::protobuf::internal::ArenaImpl *)a2);
}

uint64_t maps::path_codec::geo3::SupportPointData::GetCachedSize(maps::path_codec::geo3::SupportPointData *this)
{
  return *((unsigned int *)this + 69);
}

maps::path_codec::geo3::AnchorData *maps::path_codec::geo3::AnchorData::New(maps::path_codec::geo3::AnchorData *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::AnchorData>(0);
}

maps::path_codec::geo3::AnchorData *maps::path_codec::geo3::AnchorData::New(maps::path_codec::geo3::AnchorData *this, Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::AnchorData>((google::protobuf::internal::ArenaImpl *)a2);
}

uint64_t maps::path_codec::geo3::AnchorData::GetCachedSize(maps::path_codec::geo3::AnchorData *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t maps::path_codec::geo3::CompressedPath::New(maps::path_codec::geo3::CompressedPath *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::CompressedPath>(0);
}

uint64_t maps::path_codec::geo3::CompressedPath::New(maps::path_codec::geo3::CompressedPath *this, Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::CompressedPath>((google::protobuf::internal::ArenaImpl *)a2);
}

uint64_t maps::path_codec::geo3::CompressedPath::GetCachedSize(maps::path_codec::geo3::CompressedPath *this)
{
  return *((unsigned int *)this + 5);
}

char *google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::PackedEnumParser<google::protobuf::UnknownFieldSet>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(int),google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>(char *a1, unint64_t a2, unsigned int **a3)
{
  char *v3;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  google::protobuf::UnknownFieldSet *v13;
  uint64_t v14;

  v3 = a1;
  while ((unint64_t)v3 < a2)
  {
    v6 = *v3;
    if (*v3 < 0)
    {
      v7 = v3[1];
      v6 = (v6 + (v7 << 7) - 128);
      if ((v7 & 0x80) != 0)
      {
        v3 += 3;
        v14 = 14;
        while (1)
        {
          v6 += (*(v3 - 1) - 1) << v14;
          if ((*(v3 - 1) & 0x80000000) == 0)
            break;
          ++v3;
          v14 += 7;
          if (v14 == 70)
            return 0;
        }
      }
      else
      {
        v3 += 2;
      }
    }
    else
    {
      ++v3;
    }
    if (((unsigned int (*)(uint64_t))a3[1])(v6))
    {
      v8 = *a3;
      v9 = **a3;
      if ((_DWORD)v9 == (*a3)[1])
      {
        v10 = v9 + 1;
        google::protobuf::RepeatedField<int>::Reserve(*a3, v9 + 1);
        *(_DWORD *)(*((_QWORD *)v8 + 1) + 4 * v9) = v6;
      }
      else
      {
        *(_DWORD *)(*((_QWORD *)v8 + 1) + 4 * v9) = v6;
        v10 = v9 + 1;
      }
      *v8 = v10;
    }
    else
    {
      v11 = *((_DWORD *)a3 + 6);
      v12 = (uint64_t *)a3[2];
      if ((*v12 & 1) != 0)
        v13 = (google::protobuf::UnknownFieldSet *)((*v12 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v13 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v12);
      google::protobuf::UnknownFieldSet::AddVarint(v13, v11, v6);
    }
  }
  return v3;
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<maps::path_codec::geo3::UUID>::TypeHandler>(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = (uint64_t *)(v2 + 2);
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        v5 = *v3;
        if (*v3)
        {
          google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)(v5 + 8));
          MEMORY[0x18D76437C](v5, 0x1081C40825B58B5);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::GenericTypeHandler<maps::path_codec::geo3::UUID>::Merge(const maps::path_codec::geo3::UUID *a1, maps::path_codec::geo3::UUID *a2)
{
  maps::path_codec::geo3::UUID::MergeFrom(a2, a1);
}

void InitDefaultsscc_info_LatLngE7_path_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, 3014000, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/include/path-codec/protobuf/path.pb.cc", a4);
  maps::path_codec::geo3::_LatLngE7_default_instance_ = (uint64_t)&off_1E1BF6F68;
  unk_1EDF512F0 = 0;
  qword_1EDF512F8 = 0;
  unk_1EDF51300 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&maps::path_codec::geo3::_LatLngE7_default_instance_, v4);
}

void InitDefaultsscc_info_RoutingPathLeg_path_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, 3014000, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/include/path-codec/protobuf/path.pb.cc", a4);
  maps::path_codec::geo3::RoutingPathLeg::RoutingPathLeg((maps::path_codec::geo3::RoutingPathLeg *)&maps::path_codec::geo3::_RoutingPathLeg_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&maps::path_codec::geo3::_RoutingPathLeg_default_instance_, v4);
}

void InitDefaultsscc_info_RoutingPathLeg_MetaData_path_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, 3014000, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/include/path-codec/protobuf/path.pb.cc", a4);
  maps::path_codec::geo3::_RoutingPathLeg_MetaData_default_instance_ = (uint64_t)&off_1E1BF11D0;
  unk_1EDF512D0 = 0;
  qword_1EDF512D8 = 0;
  dword_1EDF512E0 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&maps::path_codec::geo3::_RoutingPathLeg_MetaData_default_instance_, v4);
}

void InitDefaultsscc_info_RoutingPathPoint_path_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, 3014000, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/include/path-codec/protobuf/path.pb.cc", a4);
  maps::path_codec::geo3::_RoutingPathPoint_default_instance_ = (uint64_t)&off_1E1BF6CA8;
  *(_QWORD *)algn_1EDF4FBB8 = 0;
  qword_1EDF4FBC0 = 0;
  if (atomic_load(scc_info_RoutingPathPoint_path_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_RoutingPathPoint_path_2eproto);
  qword_1EDF4FBC8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  xmmword_1EDF4FBD0 = 0u;
  unk_1EDF4FBE0 = 0u;
  xmmword_1EDF4FBF0 = 0u;
  qword_1EDF4FC00 = 0x100000000;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&maps::path_codec::geo3::_RoutingPathPoint_default_instance_, v4);
}

void InitDefaultsscc_info_UUID_path_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, 3014000, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/include/path-codec/protobuf/path.pb.cc", a4);
  maps::path_codec::geo3::_UUID_default_instance_ = (uint64_t)&off_1E1BF6EB8;
  *(_QWORD *)algn_1EDF51258 = 0;
  qword_1EDF51268 = 0;
  unk_1EDF51270 = 0;
  qword_1EDF51260 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&maps::path_codec::geo3::_UUID_default_instance_, v4);
}

BOOL maps::path_codec::geo3::RelativeSide_IsValid(maps::path_codec::geo3 *this)
{
  return this < 4;
}

void maps::path_codec::geo3::LatLngE7::~LatLngE7(maps::path_codec::geo3::LatLngE7 *this)
{
  google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
}

{
  google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
  JUMPOUT(0x18D76437CLL);
}

uint64_t maps::path_codec::geo3::LatLngE7::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

google::protobuf::UnknownFieldSet *maps::path_codec::geo3::LatLngE7::Clear(maps::path_codec::geo3::LatLngE7 *this)
{
  google::protobuf::UnknownFieldSet *result;
  char v2;

  if ((*((_BYTE *)this + 16) & 3) != 0)
    *((_QWORD *)this + 3) = 0;
  v2 = *((_BYTE *)this + 8);
  result = (maps::path_codec::geo3::LatLngE7 *)((char *)this + 8);
  *((_DWORD *)result + 2) = 0;
  if ((v2 & 1) != 0)
    return google::protobuf::internal::InternalMetadata::DoClear<google::protobuf::UnknownFieldSet>((uint64_t *)result);
  return result;
}

char *maps::path_codec::geo3::LatLngE7::_InternalParse(uint64_t a1, const char *a2, int32x2_t *this)
{
  int v5;
  char *v6;
  _QWORD *v8;
  unsigned int v9;
  BOOL v11;
  google::protobuf::UnknownFieldSet *v12;
  const char *v13;
  int v14;
  int v15;
  uint64_t v16;
  google::protobuf::internal::EpsCopyInputStream *v17;
  google::protobuf::UnknownFieldSet *v18;

  v17 = (google::protobuf::internal::EpsCopyInputStream *)a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)this, (const char **)&v17, this[11].i32[1]) & 1) == 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    do
    {
      v6 = (char *)v17 + 1;
      v9 = *(unsigned __int8 *)v17;
      if (*(char *)v17 < 0)
      {
        v9 = v9 + (*v6 << 7) - 128;
        if (*v6 < 0)
        {
          v6 = (char *)v17 + 3;
          v16 = -21;
          while (1)
          {
            v9 += (*(v6 - 1) - 1) << (v16 + 35);
            if ((*(v6 - 1) & 0x80000000) == 0)
              break;
            ++v6;
            v16 += 7;
            if (!v16)
              goto LABEL_33;
          }
        }
        else
        {
          v6 = (char *)v17 + 2;
        }
      }
      v17 = (google::protobuf::internal::EpsCopyInputStream *)v6;
      if (v9 >> 3 == 2)
      {
        if (v9 == 21)
        {
          v14 = *(_DWORD *)v6;
          v13 = v6 + 4;
          v5 |= 2u;
          *(_DWORD *)(a1 + 28) = v14;
LABEL_24:
          v17 = (google::protobuf::internal::EpsCopyInputStream *)v13;
          continue;
        }
      }
      else if (v9 >> 3 == 1 && v9 == 13)
      {
        v15 = *(_DWORD *)v6;
        v13 = v6 + 4;
        v5 |= 1u;
        *(_DWORD *)(a1 + 24) = v15;
        goto LABEL_24;
      }
      if (v9)
        v11 = (v9 & 7) == 4;
      else
        v11 = 1;
      if (v11)
      {
        this[10].i32[0] = v9 - 1;
        goto LABEL_3;
      }
      if ((*v8 & 1) != 0)
      {
        v12 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v12 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a1 + 8));
        v6 = (char *)v17;
      }
      v18 = v12;
      v17 = google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldParserHelper>(v9, &v18, (uint64_t *)v6, this);
      if (!v17)
      {
LABEL_33:
        v6 = 0;
        goto LABEL_3;
      }
    }
    while (!google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)this, (const char **)&v17, this[11].i32[1]));
  }
  v6 = (char *)v17;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return v6;
}

const google::protobuf::UnknownFieldSet *maps::path_codec::geo3::LatLngE7::_InternalSerialize(maps::path_codec::geo3::LatLngE7 *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = *((_DWORD *)this + 6);
    *a2 = 13;
    *(_DWORD *)(a2 + 1) = v7;
    a2 += 5;
  }
  if ((v6 & 2) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v8 = *((_DWORD *)this + 7);
    *a2 = 21;
    *(_DWORD *)(a2 + 1) = v8;
    a2 += 5;
  }
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

uint64_t maps::path_codec::geo3::LatLngE7::ByteSizeLong(maps::path_codec::geo3::LatLngE7 *this, uint64_t a2, uint64_t a3, CachedSize *a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *((_DWORD *)this + 4);
  v5 = 5;
  if ((v4 & 1) == 0)
    v5 = 0;
  if ((v4 & 2) != 0)
    v5 += 5;
  if ((~v4 & 3) != 0)
    v6 = v5;
  else
    v6 = 10;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((maps::path_codec::geo3::LatLngE7 *)((char *)this + 8), (const InternalMetadata *)v6, (_DWORD *)this + 5, a4);
  *((_DWORD *)this + 5) = v6;
  return v6;
}

void maps::path_codec::geo3::LatLngE7::MergeFrom(maps::path_codec::geo3::LatLngE7 *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(maps::path_codec::geo3::LatLngE7 *__hidden))a2 == &off_1E1BF6F68)
    google::protobuf::DescriptorProto_ReservedRange::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void maps::path_codec::geo3::LatLngE7::CopyFrom(maps::path_codec::geo3::LatLngE7 *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    maps::path_codec::geo3::LatLngE7::Clear(this);
    maps::path_codec::geo3::LatLngE7::MergeFrom(this, a2, v4);
  }
}

BOOL maps::path_codec::geo3::LatLngE7::IsInitialized(maps::path_codec::geo3::LatLngE7 *this)
{
  return (~*((_DWORD *)this + 4) & 3) == 0;
}

uint64_t maps::path_codec::geo3::LatLngE7::GetMetadata(maps::path_codec::geo3::LatLngE7 *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_path_2eproto, 0);
  return *off_1EDF470E0;
}

void maps::path_codec::geo3::UUID::~UUID(maps::path_codec::geo3::UUID *this)
{
  google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
}

{
  google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
  JUMPOUT(0x18D76437CLL);
}

uint64_t maps::path_codec::geo3::UUID::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

google::protobuf::UnknownFieldSet *maps::path_codec::geo3::UUID::Clear(maps::path_codec::geo3::UUID *this)
{
  google::protobuf::UnknownFieldSet *result;
  char v2;

  if ((*((_BYTE *)this + 16) & 3) != 0)
  {
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  v2 = *((_BYTE *)this + 8);
  result = (maps::path_codec::geo3::UUID *)((char *)this + 8);
  *((_DWORD *)result + 2) = 0;
  if ((v2 & 1) != 0)
    return google::protobuf::internal::InternalMetadata::DoClear<google::protobuf::UnknownFieldSet>((uint64_t *)result);
  return result;
}

char *maps::path_codec::geo3::UUID::_InternalParse(uint64_t a1, const char *a2, int32x2_t *this)
{
  int v5;
  char *v6;
  _QWORD *v8;
  unsigned int v9;
  BOOL v11;
  google::protobuf::UnknownFieldSet *v12;
  const char *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::internal::EpsCopyInputStream *v22;
  google::protobuf::UnknownFieldSet *v23;

  v22 = (google::protobuf::internal::EpsCopyInputStream *)a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)this, (const char **)&v22, this[11].i32[1]) & 1) == 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    do
    {
      v6 = (char *)v22 + 1;
      v9 = *(unsigned __int8 *)v22;
      if (*(char *)v22 < 0)
      {
        v9 = v9 + (*v6 << 7) - 128;
        if (*v6 < 0)
        {
          v6 = (char *)v22 + 3;
          v19 = -21;
          while (1)
          {
            v9 += (*(v6 - 1) - 1) << (v19 + 35);
            if ((*(v6 - 1) & 0x80000000) == 0)
              break;
            ++v6;
            v19 += 7;
            if (!v19)
              goto LABEL_46;
          }
        }
        else
        {
          v6 = (char *)v22 + 2;
        }
      }
      v22 = (google::protobuf::internal::EpsCopyInputStream *)v6;
      if (v9 >> 3 == 2)
      {
        if (v9 == 16)
        {
          v5 |= 2u;
          v13 = v6 + 1;
          v14 = *v6;
          if (*v6 < 0)
          {
            v15 = *(unsigned __int8 *)v13;
            v14 = (v14 + (v15 << 7) - 128);
            if ((v15 & 0x80) != 0)
            {
              v13 = v6 + 3;
              v20 = 14;
              while (1)
              {
                v14 += (*((unsigned __int8 *)v13 - 1) - 1) << v20;
                if ((*(v13 - 1) & 0x80000000) == 0)
                  break;
                ++v13;
                v20 += 7;
                if (v20 == 70)
                {
                  v6 = 0;
                  *(_QWORD *)(a1 + 32) = 0;
                  goto LABEL_3;
                }
              }
            }
            else
            {
              v13 = v6 + 2;
            }
          }
          v22 = (google::protobuf::internal::EpsCopyInputStream *)v13;
          *(_QWORD *)(a1 + 32) = v14;
          continue;
        }
      }
      else if (v9 >> 3 == 1 && v9 == 8)
      {
        v5 |= 1u;
        v16 = v6 + 1;
        v17 = *v6;
        if (*v6 < 0)
        {
          v18 = *(unsigned __int8 *)v16;
          v17 = (v17 + (v18 << 7) - 128);
          if ((v18 & 0x80) != 0)
          {
            v16 = v6 + 3;
            v21 = 14;
            while (1)
            {
              v17 += (*((unsigned __int8 *)v16 - 1) - 1) << v21;
              if ((*(v16 - 1) & 0x80000000) == 0)
                break;
              ++v16;
              v21 += 7;
              if (v21 == 70)
              {
                v6 = 0;
                *(_QWORD *)(a1 + 24) = 0;
                goto LABEL_3;
              }
            }
          }
          else
          {
            v16 = v6 + 2;
          }
        }
        v22 = (google::protobuf::internal::EpsCopyInputStream *)v16;
        *(_QWORD *)(a1 + 24) = v17;
        continue;
      }
      if (v9)
        v11 = (v9 & 7) == 4;
      else
        v11 = 1;
      if (v11)
      {
        this[10].i32[0] = v9 - 1;
        goto LABEL_3;
      }
      if ((*v8 & 1) != 0)
      {
        v12 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v12 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a1 + 8));
        v6 = (char *)v22;
      }
      v23 = v12;
      v22 = google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldParserHelper>(v9, &v23, (uint64_t *)v6, this);
      if (!v22)
      {
LABEL_46:
        v6 = 0;
        goto LABEL_3;
      }
    }
    while (!google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)this, (const char **)&v22, this[11].i32[1]));
  }
  v6 = (char *)v22;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return v6;
}

const google::protobuf::UnknownFieldSet *maps::path_codec::geo3::UUID::_InternalSerialize(maps::path_codec::geo3::UUID *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) == 0)
  {
LABEL_9:
    if ((v6 & 2) == 0)
      goto LABEL_23;
    goto LABEL_10;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v7 = *((_QWORD *)this + 3);
  *a2 = 8;
  if (v7 <= 0x7F)
  {
    a2[1] = v7;
    a2 += 2;
    if ((v6 & 2) == 0)
      goto LABEL_23;
    goto LABEL_10;
  }
  a2[1] = v7 | 0x80;
  v8 = v7 >> 7;
  if (!(v7 >> 14))
  {
    a2[2] = v8;
    a2 += 3;
    goto LABEL_9;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v8 | 0x80;
    v11 = v8 >> 7;
    ++a2;
    v12 = v8 >> 14;
    v8 >>= 7;
  }
  while (v12);
  *(a2 - 1) = v11;
  if ((v6 & 2) == 0)
    goto LABEL_23;
LABEL_10:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v9 = *((_QWORD *)this + 4);
  *a2 = 16;
  if (v9 > 0x7F)
  {
    a2[1] = v9 | 0x80;
    v10 = v9 >> 7;
    if (v9 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v10 | 0x80;
        v13 = v10 >> 7;
        ++a2;
        v14 = v10 >> 14;
        v10 >>= 7;
      }
      while (v14);
      *(a2 - 1) = v13;
    }
    else
    {
      a2[2] = v10;
      a2 += 3;
    }
  }
  else
  {
    a2[1] = v9;
    a2 += 2;
  }
LABEL_23:
  v15 = *((_QWORD *)this + 1);
  if ((v15 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

const InternalMetadata *maps::path_codec::geo3::UUID::ByteSizeLong(maps::path_codec::geo3::UUID *this, uint64_t a2, uint64_t a3, CachedSize *a4)
{
  int v4;
  const InternalMetadata *v5;

  v4 = *((_DWORD *)this + 4);
  if ((v4 & 3) == 0)
  {
    v5 = 0;
    goto LABEL_8;
  }
  if ((v4 & 1) != 0)
  {
    v5 = (const InternalMetadata *)(((9 * (__clz(*((_QWORD *)this + 3) | 1) ^ 0x3F) + 73) >> 6) + 1);
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v5 = 0;
  if ((v4 & 2) != 0)
LABEL_7:
    v5 = (const InternalMetadata *)((char *)v5 + ((9 * (__clz(*((_QWORD *)this + 4) | 1) ^ 0x3F) + 73) >> 6) + 1);
LABEL_8:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return (const InternalMetadata *)google::protobuf::internal::ComputeUnknownFieldsSize((maps::path_codec::geo3::UUID *)((char *)this + 8), v5, (_DWORD *)this + 5, a4);
  *((_DWORD *)this + 5) = (_DWORD)v5;
  return v5;
}

void maps::path_codec::geo3::UUID::MergeFrom(maps::path_codec::geo3::UUID *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(maps::path_codec::geo3::UUID *__hidden))a2 == &off_1E1BF6EB8)
    maps::path_codec::geo3::UUID::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void maps::path_codec::geo3::UUID::MergeFrom(maps::path_codec::geo3::UUID *this, const maps::path_codec::geo3::UUID *a2)
{
  uint64_t v4;
  int v5;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadata::DoMergeFrom<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1, (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8));
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 3) != 0)
  {
    if ((v5 & 1) != 0)
      *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    if ((v5 & 2) != 0)
      *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    *((_DWORD *)this + 4) |= v5;
  }
}

void maps::path_codec::geo3::UUID::CopyFrom(maps::path_codec::geo3::UUID *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    maps::path_codec::geo3::UUID::Clear(this);
    maps::path_codec::geo3::UUID::MergeFrom(this, a2, v4);
  }
}

uint64_t maps::path_codec::geo3::UUID::IsInitialized(maps::path_codec::geo3::UUID *this)
{
  return 1;
}

uint64_t maps::path_codec::geo3::UUID::GetMetadata(maps::path_codec::geo3::UUID *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_path_2eproto, 0);
  return off_1EDF470E0[2];
}

void maps::path_codec::geo3::RoutingPathPoint::~RoutingPathPoint(maps::path_codec::geo3::RoutingPathPoint *this)
{
  maps::path_codec::geo3::RoutingPathPoint::SharedDtor((uint64_t *)this);
  google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
}

{
  maps::path_codec::geo3::RoutingPathPoint::~RoutingPathPoint(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t *maps::path_codec::geo3::RoutingPathPoint::SharedDtor(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this;
  v2 = this[3];
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (uint64_t *)MEMORY[0x18D76437C](v2, 0x1012C40EC159624);
  }
  if (v1 != &maps::path_codec::geo3::_RoutingPathPoint_default_instance_)
  {
    v3 = v1[4];
    if (v3)
    {
      google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)(v3 + 8));
      this = (uint64_t *)MEMORY[0x18D76437C](v3, 0x1081C404FE48876);
    }
    v4 = v1[5];
    if (v4)
    {
      google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)(v4 + 8));
      JUMPOUT(0x18D76437CLL);
    }
  }
  return this;
}

uint64_t maps::path_codec::geo3::RoutingPathPoint::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

google::protobuf::UnknownFieldSet *maps::path_codec::geo3::RoutingPathPoint::Clear(google::protobuf::UnknownFieldSet *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  char v4;
  unint64_t v5;

  v1 = (uint64_t)this;
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 7) == 0)
    goto LABEL_6;
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      goto LABEL_4;
    goto LABEL_16;
  }
  v5 = *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_16;
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  *(_BYTE *)v5 = 0;
  *(_BYTE *)(v5 + 23) = 0;
  if ((v2 & 2) == 0)
    goto LABEL_4;
LABEL_16:
  this = maps::path_codec::geo3::LatLngE7::Clear(*((maps::path_codec::geo3::LatLngE7 **)this + 4));
  if ((v2 & 4) != 0)
LABEL_5:
    this = maps::path_codec::geo3::UUID::Clear(*(maps::path_codec::geo3::UUID **)(v1 + 40));
LABEL_6:
  if ((v2 & 0xF8) != 0)
  {
    *(_QWORD *)(v1 + 48) = 0;
    *(_QWORD *)(v1 + 56) = 0;
    *(_QWORD *)(v1 + 64) = 0;
  }
  if ((v2 & 0xF00) != 0)
  {
    *(_QWORD *)(v1 + 72) = 0;
    *(_QWORD *)(v1 + 80) = 0x100000000;
  }
  v4 = *(_BYTE *)(v1 + 8);
  v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if ((v4 & 1) != 0)
    return google::protobuf::internal::InternalMetadata::DoClear<google::protobuf::UnknownFieldSet>((uint64_t *)v3);
  return this;
}

google::protobuf::internal *maps::path_codec::geo3::RoutingPathPoint::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  google::protobuf::internal *v6;
  _QWORD *v8;
  std::string **v9;
  unsigned int v10;
  google::protobuf::internal *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  google::protobuf::internal::ArenaImpl *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  google::protobuf::internal *v20;
  int v21;
  google::protobuf::internal *v22;
  const char *v23;
  int v24;
  google::protobuf::internal *v25;
  const char *v26;
  int v27;
  google::protobuf::internal *v28;
  const char *v29;
  int v30;
  google::protobuf::internal *v31;
  const char *v32;
  int v33;
  google::protobuf::internal *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  google::protobuf::internal::ArenaImpl *v38;
  google::protobuf::internal *v39;
  uint64_t v40;
  google::protobuf::internal::ArenaImpl *v41;
  std::string *v42;
  google::protobuf::internal *v43;
  int v44;
  BOOL v45;
  google::protobuf::UnknownFieldSet *v46;
  char *SizeFallback;
  uint64_t v48;
  int v49;
  int v50;
  BOOL v51;
  char *v52;
  int v53;
  uint64_t v54;
  uint64_t i;
  google::protobuf::internal *v56;
  int v57;
  google::protobuf::internal *v58;
  int v59;
  google::protobuf::internal *v60;
  int v61;
  google::protobuf::internal *v62;
  int v63;
  uint64_t j;
  uint64_t v65;
  google::protobuf::UnknownFieldSet *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  google::protobuf::internal *v70;
  google::protobuf::UnknownFieldSet *v71;

  v70 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v70, *((_DWORD *)this + 23)) & 1) != 0)
  {
LABEL_2:
    v6 = v70;
    goto LABEL_3;
  }
  v8 = (_QWORD *)(a1 + 8);
  v9 = (std::string **)(a1 + 24);
  while (2)
  {
    v6 = (google::protobuf::internal *)((char *)v70 + 1);
    v10 = *(unsigned __int8 *)v70;
    if (*(char *)v70 < 0)
    {
      v10 = v10 + (*(unsigned __int8 *)v6 << 7) - 128;
      if (*(char *)v6 < 0)
      {
        v6 = (google::protobuf::internal *)((char *)v70 + 3);
        v14 = -21;
        while (1)
        {
          v10 += (*((unsigned __int8 *)v6 - 1) - 1) << (v14 + 35);
          if ((*((char *)v6 - 1) & 0x80000000) == 0)
            break;
          v6 = (google::protobuf::internal *)((char *)v6 + 1);
          v14 += 7;
          if (!v14)
            goto LABEL_127;
        }
      }
      else
      {
        v6 = (google::protobuf::internal *)((char *)v70 + 2);
      }
    }
    v70 = v6;
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 8)
          goto LABEL_76;
        v11 = (google::protobuf::internal *)((char *)v6 + 1);
        v12 = *(unsigned __int8 *)v6;
        if (*(char *)v6 < 0)
        {
          v13 = *(unsigned __int8 *)v11;
          v12 = (v12 + (v13 << 7) - 128);
          if ((v13 & 0x80) != 0)
          {
            v11 = (google::protobuf::internal *)((char *)v6 + 3);
            v54 = 14;
            while (1)
            {
              v12 += (*((unsigned __int8 *)v11 - 1) - 1) << v54;
              if ((*((char *)v11 - 1) & 0x80000000) == 0)
                break;
              v11 = (google::protobuf::internal *)((char *)v11 + 1);
              v54 += 7;
              if (v54 == 70)
                goto LABEL_127;
            }
          }
          else
          {
            v11 = (google::protobuf::internal *)((char *)v6 + 2);
          }
        }
        v70 = v11;
        if ((v12 - 1) <= 1)
        {
          *(_DWORD *)(a1 + 16) |= 0x800u;
          *(_DWORD *)(a1 + 84) = v12;
          goto LABEL_91;
        }
        if ((*v8 & 1) != 0)
        {
          v66 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v68 = v12;
          v66 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a1 + 8));
          v12 = v68;
        }
        v67 = 1;
        goto LABEL_123;
      case 2u:
        if (v10 != 18)
          goto LABEL_76;
        *(_DWORD *)(a1 + 16) |= 2u;
        v15 = *(_QWORD **)(a1 + 32);
        if (!v15)
        {
          v16 = (google::protobuf::internal::ArenaImpl *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v8 & 1) != 0)
            v16 = *(google::protobuf::internal::ArenaImpl **)v16;
          v15 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::LatLngE7>(v16);
          *(_QWORD *)(a1 + 32) = v15;
          v6 = v70;
        }
        v17 = (const char *)*(unsigned __int8 *)v6;
        if (*(char *)v6 < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(v6, v17);
          if (!SizeFallback)
            goto LABEL_127;
          v18 = SizeFallback;
        }
        else
        {
          v18 = (char *)v6 + 1;
        }
        v48 = *((_QWORD *)this + 1);
        v49 = (_DWORD)v17 + (_DWORD)v18 - v48;
        *(_QWORD *)this = v48 + (v49 & (v49 >> 31));
        v50 = *((_DWORD *)this + 7);
        *((_DWORD *)this + 7) = v49;
        LODWORD(v48) = *((_DWORD *)this + 22);
        v51 = __OFSUB__((_DWORD)v48, 1);
        LODWORD(v48) = v48 - 1;
        *((_DWORD *)this + 22) = v48;
        if ((int)v48 < 0 != v51)
          goto LABEL_127;
        v52 = maps::path_codec::geo3::LatLngE7::_InternalParse((uint64_t)v15, v18, (int32x2_t *)this);
        if (!v52)
          goto LABEL_127;
        ++*((_DWORD *)this + 22);
        if (*((_DWORD *)this + 20))
          goto LABEL_127;
        v53 = *((_DWORD *)this + 7) + v50 - v49;
        *((_DWORD *)this + 7) = v53;
        *(_QWORD *)this = *((_QWORD *)this + 1) + (v53 & (v53 >> 31));
        v70 = (google::protobuf::internal *)v52;
        goto LABEL_91;
      case 3u:
        if (v10 != 24)
          goto LABEL_76;
        v5 |= 0x10u;
        v20 = (google::protobuf::internal *)((char *)v6 + 1);
        LODWORD(v19) = *(unsigned __int8 *)v6;
        if ((v19 & 0x80) == 0)
          goto LABEL_30;
        v21 = *(char *)v20;
        v19 = v19 + (v21 << 7) - 128;
        if (v21 < 0)
        {
          v20 = (google::protobuf::internal *)((char *)v6 + 3);
          for (i = 14; i != 70; i += 7)
          {
            v19 += (*((unsigned __int8 *)v20 - 1) - 1) << i;
            if ((*((char *)v20 - 1) & 0x80000000) == 0)
              goto LABEL_30;
            v20 = (google::protobuf::internal *)((char *)v20 + 1);
          }
          v6 = 0;
          *(_DWORD *)(a1 + 56) = 0;
          goto LABEL_3;
        }
        v20 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_30:
        v70 = v20;
        *(_DWORD *)(a1 + 56) = v19;
        goto LABEL_91;
      case 4u:
        if (v10 != 33)
          goto LABEL_76;
        v5 |= 8u;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)v6;
        v70 = (google::protobuf::internal *)((char *)v6 + 8);
        goto LABEL_91;
      case 5u:
        if (v10 != 40)
          goto LABEL_76;
        v5 |= 0x20u;
        v22 = (google::protobuf::internal *)((char *)v6 + 1);
        LODWORD(v23) = *(unsigned __int8 *)v6;
        if ((*(char *)v6 & 0x80000000) == 0)
          goto LABEL_37;
        v24 = *(char *)v22;
        v23 = (const char *)(v23 + (v24 << 7) - 128);
        if (v24 < 0)
        {
          v56 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v6, v23);
          v70 = v56;
          *(_DWORD *)(a1 + 60) = v57;
          if (!v56)
            goto LABEL_127;
        }
        else
        {
          v22 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_37:
          v70 = v22;
          *(_DWORD *)(a1 + 60) = (_DWORD)v23;
        }
        goto LABEL_91;
      case 6u:
        if (v10 != 48)
          goto LABEL_76;
        v5 |= 0x40u;
        v25 = (google::protobuf::internal *)((char *)v6 + 1);
        LODWORD(v26) = *(unsigned __int8 *)v6;
        if ((*(char *)v6 & 0x80000000) == 0)
          goto LABEL_42;
        v27 = *(char *)v25;
        v26 = (const char *)(v26 + (v27 << 7) - 128);
        if (v27 < 0)
        {
          v58 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v6, v26);
          v70 = v58;
          *(_DWORD *)(a1 + 64) = v59;
          if (!v58)
            goto LABEL_127;
        }
        else
        {
          v25 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_42:
          v70 = v25;
          *(_DWORD *)(a1 + 64) = (_DWORD)v26;
        }
        goto LABEL_91;
      case 7u:
        if (v10 != 56)
          goto LABEL_76;
        v5 |= 0x80u;
        v28 = (google::protobuf::internal *)((char *)v6 + 1);
        LODWORD(v29) = *(unsigned __int8 *)v6;
        if ((*(char *)v6 & 0x80000000) == 0)
          goto LABEL_47;
        v30 = *(char *)v28;
        v29 = (const char *)(v29 + (v30 << 7) - 128);
        if (v30 < 0)
        {
          v60 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v6, v29);
          v70 = v60;
          *(_DWORD *)(a1 + 68) = v61;
          if (!v60)
            goto LABEL_127;
        }
        else
        {
          v28 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_47:
          v70 = v28;
          *(_DWORD *)(a1 + 68) = (_DWORD)v29;
        }
        goto LABEL_91;
      case 8u:
        if (v10 != 64)
          goto LABEL_76;
        v5 |= 0x100u;
        v31 = (google::protobuf::internal *)((char *)v6 + 1);
        LODWORD(v32) = *(unsigned __int8 *)v6;
        if ((*(char *)v6 & 0x80000000) == 0)
          goto LABEL_52;
        v33 = *(char *)v31;
        v32 = (const char *)(v32 + (v33 << 7) - 128);
        if (v33 < 0)
        {
          v62 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v6, v32);
          v70 = v62;
          *(_DWORD *)(a1 + 72) = v63;
          if (!v62)
            goto LABEL_127;
        }
        else
        {
          v31 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_52:
          v70 = v31;
          *(_DWORD *)(a1 + 72) = (_DWORD)v32;
        }
        goto LABEL_91;
      case 9u:
        if (v10 != 72)
          goto LABEL_76;
        v5 |= 0x200u;
        v34 = (google::protobuf::internal *)((char *)v6 + 1);
        v35 = *(unsigned __int8 *)v6;
        if ((*(char *)v6 & 0x80000000) == 0)
          goto LABEL_57;
        v36 = *(unsigned __int8 *)v34;
        v35 = (v35 + (v36 << 7) - 128);
        if ((v36 & 0x80) == 0)
        {
          v34 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_57:
          v70 = v34;
          *(_BYTE *)(a1 + 76) = v35 != 0;
LABEL_91:
          if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v70, *((_DWORD *)this + 23)))goto LABEL_2;
          continue;
        }
        v34 = (google::protobuf::internal *)((char *)v6 + 3);
        for (j = 14; j != 70; j += 7)
        {
          v35 += (*((unsigned __int8 *)v34 - 1) - 1) << j;
          if ((*((char *)v34 - 1) & 0x80000000) == 0)
            goto LABEL_57;
          v34 = (google::protobuf::internal *)((char *)v34 + 1);
        }
        v6 = 0;
        *(_BYTE *)(a1 + 76) = 0;
LABEL_3:
        *(_DWORD *)(a1 + 16) |= v5;
        return v6;
      case 0xAu:
        if (v10 != 82)
          goto LABEL_76;
        *(_DWORD *)(a1 + 16) |= 4u;
        v37 = *(_QWORD **)(a1 + 40);
        if (!v37)
        {
          v38 = (google::protobuf::internal::ArenaImpl *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v8 & 1) != 0)
            v38 = *(google::protobuf::internal::ArenaImpl **)v38;
          v37 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::UUID>(v38);
          *(_QWORD *)(a1 + 40) = v37;
          v6 = v70;
        }
        v39 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<maps::path_codec::geo3::UUID>((int32x2_t *)this, (uint64_t)v37, v6);
        goto LABEL_83;
      case 0xBu:
        if (v10 != 90)
          goto LABEL_76;
        *(_DWORD *)(a1 + 16) |= 1u;
        v40 = *(_QWORD *)(a1 + 8);
        v41 = (google::protobuf::internal::ArenaImpl *)(v40 & 0xFFFFFFFFFFFFFFFELL);
        if ((v40 & 1) != 0)
          v41 = *(google::protobuf::internal::ArenaImpl **)v41;
        v42 = *v9;
        if (*v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          v42 = (std::string *)google::protobuf::internal::ArenaStringPtr::MutableSlow<>((_QWORD *)(a1 + 24), v41);
          v6 = v70;
        }
        v39 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v42, (std::string::value_type *)v6, (uint64_t)this);
        goto LABEL_83;
      case 0xCu:
        if (v10 != 96)
          goto LABEL_76;
        v43 = (google::protobuf::internal *)((char *)v6 + 1);
        v12 = *(unsigned __int8 *)v6;
        if ((*(char *)v6 & 0x80000000) == 0)
          goto LABEL_74;
        v44 = *(unsigned __int8 *)v43;
        v12 = (v12 + (v44 << 7) - 128);
        if ((v44 & 0x80) != 0)
        {
          v43 = (google::protobuf::internal *)((char *)v6 + 3);
          v65 = 14;
          while (1)
          {
            v12 += (*((unsigned __int8 *)v43 - 1) - 1) << v65;
            if ((*((char *)v43 - 1) & 0x80000000) == 0)
              break;
            v43 = (google::protobuf::internal *)((char *)v43 + 1);
            v65 += 7;
            if (v65 == 70)
              goto LABEL_127;
          }
        }
        else
        {
          v43 = (google::protobuf::internal *)((char *)v6 + 2);
        }
LABEL_74:
        v70 = v43;
        if (v12 > 3)
        {
          if ((*v8 & 1) != 0)
          {
            v66 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v69 = v12;
            v66 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a1 + 8));
            v12 = v69;
          }
          v67 = 12;
LABEL_123:
          google::protobuf::UnknownFieldSet::AddVarint(v66, v67, v12);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 0x400u;
          *(_DWORD *)(a1 + 80) = v12;
        }
        goto LABEL_91;
      default:
LABEL_76:
        if (v10)
          v45 = (v10 & 7) == 4;
        else
          v45 = 1;
        if (v45)
        {
          *((_DWORD *)this + 20) = v10 - 1;
          goto LABEL_3;
        }
        if ((*v8 & 1) != 0)
        {
          v46 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v46 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a1 + 8));
          v6 = v70;
        }
        v71 = v46;
        v39 = google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldParserHelper>(v10, &v71, (uint64_t *)v6, (int32x2_t *)this);
LABEL_83:
        v70 = v39;
        if (v39)
          goto LABEL_91;
LABEL_127:
        v6 = 0;
        goto LABEL_3;
    }
  }
}

const google::protobuf::UnknownFieldSet *maps::path_codec::geo3::RoutingPathPoint::_InternalSerialize(maps::path_codec::geo3::RoutingPathPoint *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  maps::path_codec::geo3::LatLngE7 *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned __int8 v38;
  maps::path_codec::geo3::UUID *v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 0x800) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (unsigned __int8 *)a2);
    v7 = *((int *)this + 21);
    *v4 = 8;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      v8 = v7 >> 7;
      if (v7 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v8 | 0x80;
          v9 = v8 >> 7;
          ++v4;
          v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
        *(v4 - 1) = v9;
        if ((v6 & 2) != 0)
          goto LABEL_25;
      }
      else
      {
        v4[2] = v8;
        v4 += 3;
        if ((v6 & 2) != 0)
          goto LABEL_25;
      }
    }
    else
    {
      v4[1] = v7;
      v4 += 2;
      if ((v6 & 2) != 0)
        goto LABEL_25;
    }
LABEL_3:
    if ((v6 & 0x10) == 0)
      goto LABEL_4;
LABEL_35:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v17 = *((int *)this + 14);
    *v4 = 24;
    if (v17 > 0x7F)
    {
      v4[1] = v17 | 0x80;
      v18 = v17 >> 7;
      if (v17 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v18 | 0x80;
          v19 = v18 >> 7;
          ++v4;
          v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v4 - 1) = v19;
        if ((v6 & 8) != 0)
          goto LABEL_46;
      }
      else
      {
        v4[2] = v18;
        v4 += 3;
        if ((v6 & 8) != 0)
          goto LABEL_46;
      }
    }
    else
    {
      v4[1] = v17;
      v4 += 2;
      if ((v6 & 8) != 0)
        goto LABEL_46;
    }
LABEL_5:
    if ((v6 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_49;
  }
  if ((v6 & 2) == 0)
    goto LABEL_3;
LABEL_25:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v11 = (maps::path_codec::geo3::LatLngE7 *)*((_QWORD *)this + 4);
  *v4 = 18;
  v12 = *((_DWORD *)v11 + 5);
  if (v12 > 0x7F)
  {
    v4[1] = v12 | 0x80;
    v14 = v12 >> 7;
    if (v12 >> 14)
    {
      v13 = v4 + 3;
      do
      {
        *(v13 - 1) = v14 | 0x80;
        v15 = v14 >> 7;
        ++v13;
        v16 = v14 >> 14;
        v14 >>= 7;
      }
      while (v16);
      *(v13 - 1) = v15;
    }
    else
    {
      v4[2] = v14;
      v13 = v4 + 3;
    }
  }
  else
  {
    v4[1] = v12;
    v13 = v4 + 2;
  }
  v4 = (unsigned __int8 *)maps::path_codec::geo3::LatLngE7::_InternalSerialize(v11, v13, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
  if ((v6 & 0x10) != 0)
    goto LABEL_35;
LABEL_4:
  if ((v6 & 8) == 0)
    goto LABEL_5;
LABEL_46:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v21 = *((_QWORD *)this + 6);
  *v4 = 33;
  *(_QWORD *)(v4 + 1) = v21;
  v4 += 9;
  if ((v6 & 0x20) == 0)
  {
LABEL_6:
    if ((v6 & 0x40) == 0)
      goto LABEL_7;
LABEL_60:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v26 = *((_DWORD *)this + 16);
    *v4 = 48;
    if (v26 > 0x7F)
    {
      v4[1] = v26 | 0x80;
      v27 = v26 >> 7;
      if (v26 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v27 | 0x80;
          v28 = v27 >> 7;
          ++v4;
          v29 = v27 >> 14;
          v27 >>= 7;
        }
        while (v29);
        *(v4 - 1) = v28;
        if ((v6 & 0x80) != 0)
          goto LABEL_71;
      }
      else
      {
        v4[2] = v27;
        v4 += 3;
        if ((v6 & 0x80) != 0)
          goto LABEL_71;
      }
    }
    else
    {
      v4[1] = v26;
      v4 += 2;
      if ((v6 & 0x80) != 0)
        goto LABEL_71;
    }
LABEL_8:
    if ((v6 & 0x100) == 0)
      goto LABEL_9;
LABEL_82:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v34 = *((_DWORD *)this + 18);
    *v4 = 64;
    if (v34 > 0x7F)
    {
      v4[1] = v34 | 0x80;
      v35 = v34 >> 7;
      if (v34 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v35 | 0x80;
          v36 = v35 >> 7;
          ++v4;
          v37 = v35 >> 14;
          v35 >>= 7;
        }
        while (v37);
        *(v4 - 1) = v36;
        if ((v6 & 0x200) != 0)
          goto LABEL_93;
      }
      else
      {
        v4[2] = v35;
        v4 += 3;
        if ((v6 & 0x200) != 0)
          goto LABEL_93;
      }
    }
    else
    {
      v4[1] = v34;
      v4 += 2;
      if ((v6 & 0x200) != 0)
        goto LABEL_93;
    }
LABEL_10:
    if ((v6 & 4) == 0)
      goto LABEL_11;
    goto LABEL_96;
  }
LABEL_49:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v22 = *((_DWORD *)this + 15);
  *v4 = 40;
  if (v22 > 0x7F)
  {
    v4[1] = v22 | 0x80;
    v23 = v22 >> 7;
    if (v22 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v23 | 0x80;
        v24 = v23 >> 7;
        ++v4;
        v25 = v23 >> 14;
        v23 >>= 7;
      }
      while (v25);
      *(v4 - 1) = v24;
      if ((v6 & 0x40) != 0)
        goto LABEL_60;
    }
    else
    {
      v4[2] = v23;
      v4 += 3;
      if ((v6 & 0x40) != 0)
        goto LABEL_60;
    }
  }
  else
  {
    v4[1] = v22;
    v4 += 2;
    if ((v6 & 0x40) != 0)
      goto LABEL_60;
  }
LABEL_7:
  if ((v6 & 0x80) == 0)
    goto LABEL_8;
LABEL_71:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v30 = *((_DWORD *)this + 17);
  *v4 = 56;
  if (v30 > 0x7F)
  {
    v4[1] = v30 | 0x80;
    v31 = v30 >> 7;
    if (v30 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v31 | 0x80;
        v32 = v31 >> 7;
        ++v4;
        v33 = v31 >> 14;
        v31 >>= 7;
      }
      while (v33);
      *(v4 - 1) = v32;
      if ((v6 & 0x100) != 0)
        goto LABEL_82;
    }
    else
    {
      v4[2] = v31;
      v4 += 3;
      if ((v6 & 0x100) != 0)
        goto LABEL_82;
    }
  }
  else
  {
    v4[1] = v30;
    v4 += 2;
    if ((v6 & 0x100) != 0)
      goto LABEL_82;
  }
LABEL_9:
  if ((v6 & 0x200) == 0)
    goto LABEL_10;
LABEL_93:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v38 = *((_BYTE *)this + 76);
  *v4 = 72;
  v4[1] = v38;
  v4 += 2;
  if ((v6 & 4) == 0)
  {
LABEL_11:
    if ((v6 & 1) == 0)
      goto LABEL_12;
    goto LABEL_106;
  }
LABEL_96:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v39 = (maps::path_codec::geo3::UUID *)*((_QWORD *)this + 5);
  *v4 = 82;
  v40 = *((_DWORD *)v39 + 5);
  if (v40 > 0x7F)
  {
    v4[1] = v40 | 0x80;
    v42 = v40 >> 7;
    if (v40 >> 14)
    {
      v41 = v4 + 3;
      do
      {
        *(v41 - 1) = v42 | 0x80;
        v43 = v42 >> 7;
        ++v41;
        v44 = v42 >> 14;
        v42 >>= 7;
      }
      while (v44);
      *(v41 - 1) = v43;
    }
    else
    {
      v4[2] = v42;
      v41 = v4 + 3;
    }
  }
  else
  {
    v4[1] = v40;
    v41 = v4 + 2;
  }
  v4 = (unsigned __int8 *)maps::path_codec::geo3::UUID::_InternalSerialize(v39, v41, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
  if ((v6 & 1) == 0)
  {
LABEL_12:
    if ((v6 & 0x400) == 0)
      goto LABEL_116;
    goto LABEL_107;
  }
LABEL_106:
  v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 11, *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 0x400) == 0)
    goto LABEL_116;
LABEL_107:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v45 = *((int *)this + 20);
  *v4 = 96;
  if (v45 > 0x7F)
  {
    v4[1] = v45 | 0x80;
    v46 = v45 >> 7;
    if (v45 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v46 | 0x80;
        v47 = v46 >> 7;
        ++v4;
        v48 = v46 >> 14;
        v46 >>= 7;
      }
      while (v48);
      *(v4 - 1) = v47;
    }
    else
    {
      v4[2] = v46;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v45;
    v4 += 2;
  }
LABEL_116:
  v49 = *((_QWORD *)this + 1);
  if ((v49 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v49 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)v4, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
  else
    return (const google::protobuf::UnknownFieldSet *)v4;
}

const InternalMetadata *maps::path_codec::geo3::RoutingPathPoint::ByteSizeLong(maps::path_codec::geo3::RoutingPathPoint *this, uint64_t a2, uint64_t a3, CachedSize *a4)
{
  int v5;
  uint64_t v6;
  const InternalMetadata *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const InternalMetadata *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;

  v5 = *((_DWORD *)this + 4);
  if (!(_BYTE)v5)
  {
    v7 = 0;
    goto LABEL_20;
  }
  if ((v5 & 1) == 0)
  {
    v6 = 0;
    if ((v5 & 2) == 0)
      goto LABEL_10;
LABEL_9:
    v11 = maps::path_codec::geo3::LatLngE7::ByteSizeLong(*((maps::path_codec::geo3::LatLngE7 **)this + 4), a2, a3, a4);
    v6 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_10;
  }
  v8 = *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL;
  v9 = *(unsigned __int8 *)(v8 + 23);
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v6 = v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_10:
  if ((v5 & 4) != 0)
  {
    v12 = maps::path_codec::geo3::UUID::ByteSizeLong(*((maps::path_codec::geo3::UUID **)this + 5), a2, a3, a4);
    v6 += (uint64_t)&v12->var0 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  if ((v5 & 8) != 0)
    v7 = (const InternalMetadata *)(v6 + 9);
  else
    v7 = (const InternalMetadata *)v6;
  if ((v5 & 0x10) != 0)
  {
    v20 = *((_DWORD *)this + 14);
    if (v20 < 0)
      v21 = 11;
    else
      v21 = ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v7 = (const InternalMetadata *)((char *)v7 + v21);
    if ((v5 & 0x20) == 0)
    {
LABEL_17:
      if ((v5 & 0x40) == 0)
        goto LABEL_18;
      goto LABEL_42;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_17;
  }
  v7 = (const InternalMetadata *)((char *)v7 + ((9 * (__clz(*((_DWORD *)this + 15) | 1) ^ 0x1F) + 73) >> 6) + 1);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_42:
  v7 = (const InternalMetadata *)((char *)v7 + ((9 * (__clz(*((_DWORD *)this + 16) | 1) ^ 0x1F) + 73) >> 6) + 1);
  if ((v5 & 0x80) != 0)
LABEL_19:
    v7 = (const InternalMetadata *)((char *)v7 + ((9 * (__clz(*((_DWORD *)this + 17) | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_20:
  if ((v5 & 0xF00) != 0)
  {
    if ((v5 & 0x100) != 0)
      v7 = (const InternalMetadata *)((char *)v7 + ((9 * (__clz(*((_DWORD *)this + 18) | 1) ^ 0x1F) + 73) >> 6) + 1);
    if ((v5 & 0x200) != 0)
      v7 = (const InternalMetadata *)((char *)v7 + 2);
    if ((v5 & 0x400) != 0)
    {
      v13 = *((_DWORD *)this + 20);
      v14 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if (v13 >= 0)
        v15 = v14;
      else
        v15 = 11;
      v7 = (const InternalMetadata *)((char *)v7 + v15);
    }
    if ((v5 & 0x800) != 0)
    {
      v16 = *((_DWORD *)this + 21);
      v17 = ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if (v16 >= 0)
        v18 = v17;
      else
        v18 = 11;
      v7 = (const InternalMetadata *)((char *)v7 + v18);
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return (const InternalMetadata *)google::protobuf::internal::ComputeUnknownFieldsSize((maps::path_codec::geo3::RoutingPathPoint *)((char *)this + 8), v7, (_DWORD *)this + 5, a4);
  *((_DWORD *)this + 5) = (_DWORD)v7;
  return v7;
}

void maps::path_codec::geo3::RoutingPathPoint::MergeFrom(maps::path_codec::geo3::RoutingPathPoint *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(maps::path_codec::geo3::RoutingPathPoint *__hidden))a2 == &off_1E1BF6CA8)
    maps::path_codec::geo3::RoutingPathPoint::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void maps::path_codec::geo3::RoutingPathPoint::MergeFrom(maps::path_codec::geo3::RoutingPathPoint *this, const maps::path_codec::geo3::RoutingPathPoint *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  __int128 *v7;
  uint64_t v8;
  google::protobuf::internal::ArenaImpl *v9;
  google::protobuf::DescriptorProto_ReservedRange *v10;
  google::protobuf::internal::ArenaImpl *v11;
  const google::protobuf::DescriptorProto_ReservedRange *v12;
  maps::path_codec::geo3::UUID *v13;
  google::protobuf::internal::ArenaImpl *v14;
  const maps::path_codec::geo3::UUID *v15;

  v4 = (_QWORD *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadata::DoMergeFrom<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1, (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8));
  v6 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v6)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (__int128 *)(*((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 4) |= 1u;
      v8 = *((_QWORD *)this + 1);
      v9 = (google::protobuf::internal::ArenaImpl *)(v8 & 0xFFFFFFFFFFFFFFFELL);
      if ((v8 & 1) != 0)
        v9 = *(google::protobuf::internal::ArenaImpl **)v9;
      google::protobuf::internal::ArenaStringPtr::Set((std::string **)this + 3, (std::string *)&google::protobuf::internal::fixed_address_empty_string, v7, v9);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_33;
      }
    }
    else if ((v6 & 2) == 0)
    {
      goto LABEL_6;
    }
    *((_DWORD *)this + 4) |= 2u;
    v10 = (google::protobuf::DescriptorProto_ReservedRange *)*((_QWORD *)this + 4);
    if (!v10)
    {
      v11 = (google::protobuf::internal::ArenaImpl *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v4 & 1) != 0)
        v11 = *(google::protobuf::internal::ArenaImpl **)v11;
      v10 = (google::protobuf::DescriptorProto_ReservedRange *)google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::LatLngE7>(v11);
      *((_QWORD *)this + 4) = v10;
    }
    if (*((_QWORD *)a2 + 4))
      v12 = (const google::protobuf::DescriptorProto_ReservedRange *)*((_QWORD *)a2 + 4);
    else
      v12 = (const google::protobuf::DescriptorProto_ReservedRange *)&maps::path_codec::geo3::_LatLngE7_default_instance_;
    google::protobuf::DescriptorProto_ReservedRange::MergeFrom(v10, v12);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        goto LABEL_8;
      goto LABEL_41;
    }
LABEL_33:
    *((_DWORD *)this + 4) |= 4u;
    v13 = (maps::path_codec::geo3::UUID *)*((_QWORD *)this + 5);
    if (!v13)
    {
      v14 = (google::protobuf::internal::ArenaImpl *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v4 & 1) != 0)
        v14 = *(google::protobuf::internal::ArenaImpl **)v14;
      v13 = (maps::path_codec::geo3::UUID *)google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::UUID>(v14);
      *((_QWORD *)this + 5) = v13;
    }
    if (*((_QWORD *)a2 + 5))
      v15 = (const maps::path_codec::geo3::UUID *)*((_QWORD *)a2 + 5);
    else
      v15 = (const maps::path_codec::geo3::UUID *)&maps::path_codec::geo3::_UUID_default_instance_;
    maps::path_codec::geo3::UUID::MergeFrom(v13, v15);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_42;
    }
LABEL_41:
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    if ((v6 & 0x10) == 0)
    {
LABEL_9:
      if ((v6 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_43;
    }
LABEL_42:
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    if ((v6 & 0x20) == 0)
    {
LABEL_10:
      if ((v6 & 0x40) == 0)
        goto LABEL_11;
      goto LABEL_44;
    }
LABEL_43:
    *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0)
      {
LABEL_13:
        *((_DWORD *)this + 4) |= v6;
        goto LABEL_14;
      }
LABEL_12:
      *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
      goto LABEL_13;
    }
LABEL_44:
    *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
    if ((v6 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_14:
  if ((v6 & 0xF00) == 0)
    return;
  if ((v6 & 0x100) != 0)
  {
    *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
    if ((v6 & 0x200) == 0)
    {
LABEL_17:
      if ((v6 & 0x400) == 0)
        goto LABEL_18;
LABEL_48:
      *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
      if ((v6 & 0x800) == 0)
        goto LABEL_20;
      goto LABEL_19;
    }
  }
  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  *((_BYTE *)this + 76) = *((_BYTE *)a2 + 76);
  if ((v6 & 0x400) != 0)
    goto LABEL_48;
LABEL_18:
  if ((v6 & 0x800) != 0)
LABEL_19:
    *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
LABEL_20:
  *((_DWORD *)this + 4) |= v6;
}

void maps::path_codec::geo3::RoutingPathPoint::CopyFrom(maps::path_codec::geo3::RoutingPathPoint *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    maps::path_codec::geo3::RoutingPathPoint::Clear(this);
    maps::path_codec::geo3::RoutingPathPoint::MergeFrom(this, a2, v4);
  }
}

BOOL maps::path_codec::geo3::RoutingPathPoint::IsInitialized(maps::path_codec::geo3::RoutingPathPoint *this)
{
  return (*((_BYTE *)this + 16) & 2) == 0 || (~*(_DWORD *)(*((_QWORD *)this + 4) + 16) & 3) == 0;
}

uint64_t maps::path_codec::geo3::RoutingPathPoint::GetMetadata(maps::path_codec::geo3::RoutingPathPoint *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_path_2eproto, 0);
  return off_1EDF470E0[4];
}

void maps::path_codec::geo3::RoutingPathLeg_MetaData::~RoutingPathLeg_MetaData(maps::path_codec::geo3::RoutingPathLeg_MetaData *this)
{
  google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
}

{
  google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
  JUMPOUT(0x18D76437CLL);
}

uint64_t maps::path_codec::geo3::RoutingPathLeg_MetaData::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

google::protobuf::UnknownFieldSet *maps::path_codec::geo3::RoutingPathLeg_MetaData::Clear(maps::path_codec::geo3::RoutingPathLeg_MetaData *this)
{
  google::protobuf::UnknownFieldSet *result;
  char v2;

  v2 = *((_BYTE *)this + 8);
  result = (maps::path_codec::geo3::RoutingPathLeg_MetaData *)((char *)this + 8);
  *((_DWORD *)result + 4) = 0;
  *((_DWORD *)result + 2) = 0;
  if ((v2 & 1) != 0)
    return google::protobuf::internal::InternalMetadata::DoClear<google::protobuf::UnknownFieldSet>((uint64_t *)result);
  return result;
}

const char *maps::path_codec::geo3::RoutingPathLeg_MetaData::_InternalParse(uint64_t a1, const char *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  const char *result;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  google::protobuf::UnknownFieldSet *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  google::protobuf::UnknownFieldSet *v18;
  uint64_t v19;
  char *v20;
  google::protobuf::UnknownFieldSet *v21;

  v20 = (char *)a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v20, *((_DWORD *)this + 23));
  result = v20;
  if ((v5 & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    do
    {
      v8 = (char *)(result + 1);
      v9 = *(unsigned __int8 *)result;
      if (*result < 0)
      {
        v9 = v9 + (*v8 << 7) - 128;
        if (*v8 < 0)
        {
          v8 = (char *)(result + 3);
          v16 = -21;
          while (1)
          {
            v9 += (*(v8 - 1) - 1) << (v16 + 35);
            if ((*(v8 - 1) & 0x80000000) == 0)
              break;
            ++v8;
            v16 += 7;
            if (!v16)
              return 0;
          }
        }
        else
        {
          v8 = (char *)(result + 2);
        }
      }
      v20 = v8;
      if (v9 == 8)
      {
        v12 = v8 + 1;
        v13 = *v8;
        if (*v8 < 0)
        {
          v14 = *(unsigned __int8 *)v12;
          v13 = (v13 + (v14 << 7) - 128);
          if ((v14 & 0x80) != 0)
          {
            v12 = v8 + 3;
            v17 = 14;
            while (1)
            {
              v13 += (*((unsigned __int8 *)v12 - 1) - 1) << v17;
              if ((*(v12 - 1) & 0x80000000) == 0)
                break;
              result = 0;
              ++v12;
              v17 += 7;
              if (v17 == 70)
                return result;
            }
          }
          else
          {
            v12 = v8 + 2;
          }
        }
        v20 = (char *)v12;
        if (v13 > 2)
        {
          if ((*v7 & 1) != 0)
          {
            v18 = (google::protobuf::UnknownFieldSet *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v19 = v13;
            v18 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a1 + 8));
            v13 = v19;
          }
          google::protobuf::UnknownFieldSet::AddVarint(v18, 1u, v13);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 1u;
          *(_DWORD *)(a1 + 24) = v13;
        }
      }
      else
      {
        if (v9)
          v10 = (v9 & 7) == 4;
        else
          v10 = 1;
        if (v10)
        {
          *((_DWORD *)this + 20) = v9 - 1;
          return v8;
        }
        if ((*v7 & 1) != 0)
        {
          v11 = (google::protobuf::UnknownFieldSet *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v11 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a1 + 8));
          v8 = v20;
        }
        v21 = v11;
        result = (const char *)google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldParserHelper>(v9, &v21, (uint64_t *)v8, (int32x2_t *)this);
        v20 = (char *)result;
        if (!result)
          return result;
      }
      v15 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v20, *((_DWORD *)this + 23));
      result = v20;
    }
    while (!v15);
  }
  return result;
}

const google::protobuf::UnknownFieldSet *maps::path_codec::geo3::RoutingPathLeg_MetaData::_InternalSerialize(maps::path_codec::geo3::RoutingPathLeg_MetaData *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v6 = *((int *)this + 6);
    *a2 = 8;
    if (v6 > 0x7F)
    {
      a2[1] = v6 | 0x80;
      v7 = v6 >> 7;
      if (v6 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v7 | 0x80;
          v8 = v7 >> 7;
          ++a2;
          v9 = v7 >> 14;
          v7 >>= 7;
        }
        while (v9);
        *(a2 - 1) = v8;
      }
      else
      {
        a2[2] = v7;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v6;
      a2 += 2;
    }
  }
  v10 = *((_QWORD *)this + 1);
  if ((v10 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

uint64_t maps::path_codec::geo3::RoutingPathLeg_MetaData::ByteSizeLong(maps::path_codec::geo3::RoutingPathLeg_MetaData *this, uint64_t a2, uint64_t a3, CachedSize *a4)
{
  uint64_t v4;
  int v5;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v5 = *((_DWORD *)this + 6);
    if (v5 < 0)
      v4 = 11;
    else
      v4 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v4 = 0;
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((maps::path_codec::geo3::RoutingPathLeg_MetaData *)((char *)this + 8), (const InternalMetadata *)v4, (_DWORD *)this + 5, a4);
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void maps::path_codec::geo3::RoutingPathLeg_MetaData::MergeFrom(maps::path_codec::geo3::RoutingPathLeg_MetaData *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(maps::path_codec::geo3::RoutingPathLeg_MetaData *__hidden))a2 == &off_1E1BF11D0)
    maps::path_codec::geo3::RoutingPathLeg_MetaData::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void maps::path_codec::geo3::RoutingPathLeg_MetaData::MergeFrom(maps::path_codec::geo3::RoutingPathLeg_MetaData *this, const maps::path_codec::geo3::RoutingPathLeg_MetaData *a2)
{
  uint64_t v4;
  int v5;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadata::DoMergeFrom<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1, (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8));
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 4) |= 1u;
    *((_DWORD *)this + 6) = v5;
  }
}

void maps::path_codec::geo3::RoutingPathLeg_MetaData::CopyFrom(maps::path_codec::geo3::RoutingPathLeg_MetaData *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  char *v5;
  char v6;

  if (a2 != this)
  {
    v6 = *((_BYTE *)this + 8);
    v5 = (char *)this + 8;
    *((_DWORD *)v5 + 4) = 0;
    *((_DWORD *)v5 + 2) = 0;
    if ((v6 & 1) != 0)
      google::protobuf::internal::InternalMetadata::DoClear<google::protobuf::UnknownFieldSet>((uint64_t *)v5);
    maps::path_codec::geo3::RoutingPathLeg_MetaData::MergeFrom(this, a2, a3);
  }
}

uint64_t maps::path_codec::geo3::RoutingPathLeg_MetaData::IsInitialized(maps::path_codec::geo3::RoutingPathLeg_MetaData *this)
{
  return 1;
}

uint64_t maps::path_codec::geo3::RoutingPathLeg_MetaData::GetMetadata(maps::path_codec::geo3::RoutingPathLeg_MetaData *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_path_2eproto, 0);
  return off_1EDF470E0[6];
}

maps::path_codec::geo3::RoutingPathLeg *maps::path_codec::geo3::RoutingPathLeg::RoutingPathLeg(maps::path_codec::geo3::RoutingPathLeg *this, Arena *a2)
{
  *(_QWORD *)this = &off_1E1BF6B48;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_RoutingPathLeg_path_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_RoutingPathLeg_path_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = 0;
  return this;
}

void sub_1888D355C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<maps::path_codec::geo3::RoutingPathPoint>::TypeHandler>(v1);
  _Unwind_Resume(a1);
}

maps::path_codec::geo3::RoutingPathLeg *maps::path_codec::geo3::RoutingPathLeg::RoutingPathLeg(maps::path_codec::geo3::RoutingPathLeg *this, const maps::path_codec::geo3::RoutingPathLeg *a2)
{
  uint64_t *v4;
  google::protobuf::internal::ArenaImpl **v5;
  unsigned int v6;
  maps::path_codec::geo3::RoutingPathPoint **v7;
  unsigned int *v8;
  signed int v9;
  signed int *v10;
  uint64_t v11;
  int v12;
  google::protobuf::internal::ArenaImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)this = &off_1E1BF6B48;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  v5 = (google::protobuf::internal::ArenaImpl **)((char *)this + 24);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  v6 = *((_DWORD *)a2 + 8);
  if (v6)
  {
    v7 = (maps::path_codec::geo3::RoutingPathPoint **)(*((_QWORD *)a2 + 5) + 8);
    v8 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((maps::path_codec::geo3::RoutingPathLeg *)((char *)this + 24), *((_DWORD *)a2 + 8));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<maps::path_codec::geo3::RoutingPathPoint>::TypeHandler>(v5, (maps::path_codec::geo3::RoutingPathPoint **)v8, v7, v6, **((_DWORD **)this + 5) - *((_DWORD *)this + 8));
    v9 = *((_DWORD *)this + 8) + v6;
    *((_DWORD *)this + 8) = v9;
    v10 = (signed int *)*((_QWORD *)this + 5);
    if (*v10 < v9)
      *v10 = v9;
  }
  v11 = *((_QWORD *)a2 + 1);
  if ((v11 & 1) != 0)
    google::protobuf::internal::InternalMetadata::DoMergeFrom<google::protobuf::UnknownFieldSet>(v4, (const google::protobuf::UnknownFieldSet *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8));
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v12 = *((_DWORD *)a2 + 4);
  if ((v12 & 1) != 0)
  {
    v13 = (google::protobuf::internal::ArenaImpl *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if ((*v4 & 1) != 0)
      v13 = *(google::protobuf::internal::ArenaImpl **)v13;
    google::protobuf::internal::ArenaStringPtr::Set((std::string **)this + 6, (std::string *)&google::protobuf::internal::fixed_address_empty_string, (__int128 *)(*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFFELL), v13);
    v12 = *((_DWORD *)a2 + 4);
  }
  if ((v12 & 2) != 0)
  {
    v14 = operator new();
    *(_QWORD *)(v14 + 8) = 0;
    v15 = *((_QWORD *)a2 + 7);
    *(_QWORD *)v14 = &off_1E1BF11D0;
    *(_DWORD *)(v14 + 16) = *(_DWORD *)(v15 + 16);
    *(_DWORD *)(v14 + 20) = 0;
    v16 = *(_QWORD *)(v15 + 8);
    if ((v16 & 1) != 0)
      google::protobuf::internal::InternalMetadata::DoMergeFrom<google::protobuf::UnknownFieldSet>((uint64_t *)(v14 + 8), (const google::protobuf::UnknownFieldSet *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8));
    *(_DWORD *)(v14 + 24) = *(_DWORD *)(v15 + 24);
  }
  else
  {
    v14 = 0;
  }
  *((_QWORD *)this + 7) = v14;
  return this;
}

void sub_1888D36F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x18D76437C](v2, 0x1081C40E1DA5700);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<maps::path_codec::geo3::RoutingPathPoint>::TypeHandler>(v1);
  _Unwind_Resume(a1);
}

void maps::path_codec::geo3::RoutingPathLeg::~RoutingPathLeg(maps::path_codec::geo3::RoutingPathLeg *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x18D76437C](v2, 0x1012C40EC159624);
  }
  if (this != (maps::path_codec::geo3::RoutingPathLeg *)&maps::path_codec::geo3::_RoutingPathLeg_default_instance_)
  {
    v3 = *((_QWORD *)this + 7);
    if (v3)
    {
      google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)(v3 + 8));
      MEMORY[0x18D76437C](v3, 0x1081C40E1DA5700);
    }
  }
  google::protobuf::internal::InternalMetadata::Delete<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<maps::path_codec::geo3::RoutingPathPoint>::TypeHandler>((_QWORD *)this + 3);
}

{
  maps::path_codec::geo3::RoutingPathLeg::~RoutingPathLeg(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t maps::path_codec::geo3::RoutingPathLeg::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

google::protobuf::UnknownFieldSet *maps::path_codec::geo3::RoutingPathLeg::Clear(google::protobuf::UnknownFieldSet *this)
{
  google::protobuf::UnknownFieldSet *v1;
  uint64_t v2;
  google::protobuf::UnknownFieldSet **v3;
  google::protobuf::UnknownFieldSet *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char *v9;
  char v10;

  v1 = this;
  v2 = *((unsigned int *)this + 8);
  if ((int)v2 >= 1)
  {
    v3 = (google::protobuf::UnknownFieldSet **)(*((_QWORD *)this + 5) + 8);
    do
    {
      v4 = *v3++;
      this = maps::path_codec::geo3::RoutingPathPoint::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)v1 + 8) = 0;
  }
  v5 = *((_DWORD *)v1 + 4);
  if ((v5 & 3) != 0)
  {
    if ((v5 & 1) != 0)
    {
      v6 = *((_QWORD *)v1 + 6) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v6 + 23) < 0)
      {
        **(_BYTE **)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        if ((v5 & 2) == 0)
          goto LABEL_13;
        goto LABEL_10;
      }
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
    if ((v5 & 2) == 0)
      goto LABEL_13;
LABEL_10:
    v7 = *((_QWORD *)v1 + 7);
    v8 = *(_BYTE *)(v7 + 8);
    this = (google::protobuf::UnknownFieldSet *)(v7 + 8);
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 2) = 0;
    if ((v8 & 1) != 0)
      this = google::protobuf::internal::InternalMetadata::DoClear<google::protobuf::UnknownFieldSet>((uint64_t *)this);
  }
LABEL_13:
  v10 = *((_BYTE *)v1 + 8);
  v9 = (char *)v1 + 8;
  *((_DWORD *)v9 + 2) = 0;
  if ((v10 & 1) != 0)
    return google::protobuf::internal::InternalMetadata::DoClear<google::protobuf::UnknownFieldSet>((uint64_t *)v9);
  return this;
}

google::protobuf::internal *maps::path_codec::geo3::RoutingPathLeg::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  google::protobuf::internal *result;
  _QWORD *v7;
  std::string **v8;
  google::protobuf::internal *v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v13;
  google::protobuf::UnknownFieldSet *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  google::protobuf::internal::ArenaImpl *v20;
  std::string *v21;
  google::protobuf::internal *v22;
  int *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  google::protobuf::internal *v30;
  uint64_t v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  google::protobuf::internal *v43;
  google::protobuf::UnknownFieldSet *v44;

  v43 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v43, *((_DWORD *)this + 23));
  result = v43;
  if ((v5 & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    v8 = (std::string **)(a1 + 48);
    while (1)
    {
      v9 = (google::protobuf::internal *)((char *)result + 1);
      v10 = *(unsigned __int8 *)result;
      if (*(char *)result < 0)
      {
        v10 = v10 + (*(unsigned __int8 *)v9 << 7) - 128;
        if (*(char *)v9 < 0)
        {
          v9 = (google::protobuf::internal *)((char *)result + 3);
          v37 = -21;
          while (1)
          {
            v10 += (*((unsigned __int8 *)v9 - 1) - 1) << (v37 + 35);
            if ((*((char *)v9 - 1) & 0x80000000) == 0)
              break;
            result = 0;
            v9 = (google::protobuf::internal *)((char *)v9 + 1);
            v37 += 7;
            if (!v37)
              return result;
          }
        }
        else
        {
          v9 = (google::protobuf::internal *)((char *)result + 2);
        }
      }
      v43 = v9;
      v11 = v10 >> 3;
      if (v10 >> 3 != 3)
        break;
      if (v10 != 26)
        goto LABEL_12;
      *(_DWORD *)(a1 + 16) |= 2u;
      v15 = *(_QWORD *)(a1 + 56);
      if (!v15)
      {
        v16 = (google::protobuf::internal::ArenaImpl *)(*v7 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v7 & 1) != 0)
          v16 = *(google::protobuf::internal::ArenaImpl **)v16;
        v15 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RoutingPathLeg_MetaData>(v16);
        *(_QWORD *)(a1 + 56) = v15;
        v9 = v43;
      }
      v17 = (const char *)*(unsigned __int8 *)v9;
      if (*(char *)v9 < 0)
      {
        result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(v9, v17);
        if (!result)
          return result;
        v18 = (const char *)result;
      }
      else
      {
        v18 = (char *)v9 + 1;
      }
      v38 = *((_QWORD *)this + 1);
      v39 = (_DWORD)v17 + (_DWORD)v18 - v38;
      *(_QWORD *)this = v38 + (v39 & (v39 >> 31));
      v40 = *((_DWORD *)this + 7);
      *((_DWORD *)this + 7) = v39;
      LODWORD(v38) = *((_DWORD *)this + 22);
      v34 = __OFSUB__((_DWORD)v38, 1);
      LODWORD(v38) = v38 - 1;
      *((_DWORD *)this + 22) = v38;
      if ((int)v38 < 0 != v34)
        return 0;
      result = (google::protobuf::internal *)maps::path_codec::geo3::RoutingPathLeg_MetaData::_InternalParse(v15, v18, this);
      if (!result)
        return result;
      ++*((_DWORD *)this + 22);
      if (*((_DWORD *)this + 20))
        return 0;
      v41 = *((_DWORD *)this + 7) + v40 - v39;
      *((_DWORD *)this + 7) = v41;
      *(_QWORD *)this = *((_QWORD *)this + 1) + (v41 & (v41 >> 31));
      v43 = result;
LABEL_64:
      v42 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v43, *((_DWORD *)this + 23));
      result = v43;
      if (v42)
        return result;
    }
    if (v11 == 2)
    {
      if (v10 == 18)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v19 = *(_QWORD *)(a1 + 8);
        v20 = (google::protobuf::internal::ArenaImpl *)(v19 & 0xFFFFFFFFFFFFFFFELL);
        if ((v19 & 1) != 0)
          v20 = *(google::protobuf::internal::ArenaImpl **)v20;
        v21 = *v8;
        if (*v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          v21 = (std::string *)google::protobuf::internal::ArenaStringPtr::MutableSlow<>((_QWORD *)(a1 + 48), v20);
          v9 = v43;
        }
        result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v21, (std::string::value_type *)v9, (uint64_t)this);
LABEL_32:
        v43 = result;
        if (!result)
          return result;
        goto LABEL_64;
      }
LABEL_12:
      if (v10)
        v13 = (v10 & 7) == 4;
      else
        v13 = 1;
      if (v13)
      {
        *((_DWORD *)this + 20) = v10 - 1;
        return v9;
      }
      if ((*v7 & 1) != 0)
      {
        v14 = (google::protobuf::UnknownFieldSet *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v14 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(a1 + 8));
        v9 = v43;
      }
      v44 = v14;
      result = google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldParserHelper>(v10, &v44, (uint64_t *)v9, (int32x2_t *)this);
      goto LABEL_32;
    }
    if (v11 != 1 || v10 != 10)
      goto LABEL_12;
    result = (google::protobuf::internal *)((char *)v9 - 1);
    while (1)
    {
      v22 = (google::protobuf::internal *)((char *)result + 1);
      v43 = v22;
      v23 = *(int **)(a1 + 40);
      if (!v23)
        break;
      v24 = *(_DWORD *)(a1 + 32);
      v25 = *v23;
      if (v24 >= *v23)
      {
        if (v25 == *(_DWORD *)(a1 + 36))
        {
LABEL_40:
          if (v24 <= v25)
          {
            google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), v25 - v24 + 1);
            v23 = *(int **)(a1 + 40);
          }
          v25 = *v23;
        }
        *v23 = v25 + 1;
        v26 = google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RoutingPathPoint>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
        v27 = *(_QWORD *)(a1 + 40);
        v28 = *(int *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = v28 + 1;
        *(_QWORD *)(v27 + 8 * v28 + 8) = v26;
        v22 = v43;
        goto LABEL_44;
      }
      *(_DWORD *)(a1 + 32) = v24 + 1;
      v26 = *(_QWORD *)&v23[2 * v24 + 2];
LABEL_44:
      v29 = (const char *)*(unsigned __int8 *)v22;
      if (*(char *)v22 < 0)
      {
        result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(v22, v29);
        if (!result)
          return result;
        v30 = result;
      }
      else
      {
        v30 = (google::protobuf::internal *)((char *)v22 + 1);
      }
      v31 = *((_QWORD *)this + 1);
      v32 = (_DWORD)v29 + (_DWORD)v30 - v31;
      *(_QWORD *)this = v31 + (v32 & (v32 >> 31));
      v33 = *((_DWORD *)this + 7);
      *((_DWORD *)this + 7) = v32;
      LODWORD(v31) = *((_DWORD *)this + 22);
      v34 = __OFSUB__((_DWORD)v31, 1);
      LODWORD(v31) = v31 - 1;
      *((_DWORD *)this + 22) = v31;
      if ((int)v31 < 0 != v34)
        return 0;
      result = maps::path_codec::geo3::RoutingPathPoint::_InternalParse(v26, v30, this);
      if (!result)
        return result;
      ++*((_DWORD *)this + 22);
      if (*((_DWORD *)this + 20))
        return 0;
      v35 = *((_DWORD *)this + 7) + v33 - v32;
      *((_DWORD *)this + 7) = v35;
      v36 = *((_QWORD *)this + 1) + (v35 & (v35 >> 31));
      *(_QWORD *)this = v36;
      v43 = result;
      if (v36 <= (unint64_t)result || *(_BYTE *)result != 10)
        goto LABEL_64;
    }
    v24 = *(_DWORD *)(a1 + 32);
    v25 = *(_DWORD *)(a1 + 36);
    goto LABEL_40;
  }
  return result;
}

const google::protobuf::UnknownFieldSet *maps::path_codec::geo3::RoutingPathLeg::_InternalSerialize(maps::path_codec::geo3::RoutingPathLeg *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  maps::path_codec::geo3::RoutingPathPoint *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  maps::path_codec::geo3::RoutingPathLeg_MetaData *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;

  v6 = *((_DWORD *)this + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v8 = *(maps::path_codec::geo3::RoutingPathPoint **)(*((_QWORD *)this + 5) + 8 * i + 8);
      *a2 = 10;
      v9 = *((_DWORD *)v8 + 5);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        v10 = a2 + 2;
      }
      a2 = (unsigned __int8 *)maps::path_codec::geo3::RoutingPathPoint::_InternalSerialize(v8, (google::protobuf::UnknownFieldSet *)v10, a3);
    }
  }
  v14 = *((_DWORD *)this + 4);
  if ((v14 & 1) != 0)
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v14 & 2) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v15 = (maps::path_codec::geo3::RoutingPathLeg_MetaData *)*((_QWORD *)this + 7);
    *a2 = 26;
    v16 = *((_DWORD *)v15 + 5);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v17 = a2 + 3;
        do
        {
          *(v17 - 1) = v18 | 0x80;
          v19 = v18 >> 7;
          ++v17;
          v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v17 - 1) = v19;
      }
      else
      {
        a2[2] = v18;
        v17 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v16;
      v17 = a2 + 2;
    }
    a2 = (unsigned __int8 *)maps::path_codec::geo3::RoutingPathLeg_MetaData::_InternalSerialize(v15, v17, a3, (google::protobuf::io::EpsCopyOutputStream *)a2);
  }
  v21 = *((_QWORD *)this + 1);
  if ((v21 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v21 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, (google::protobuf::io::EpsCopyOutputStream *)a2);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

const InternalMetadata *maps::path_codec::geo3::RoutingPathLeg::ByteSizeLong(maps::path_codec::geo3::RoutingPathLeg *this, uint64_t a2, uint64_t a3, CachedSize *a4)
{
  const InternalMetadata *v5;
  uint64_t v6;
  maps::path_codec::geo3::RoutingPathPoint **v7;
  uint64_t v8;
  maps::path_codec::geo3::RoutingPathPoint *v9;
  const InternalMetadata *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = (const InternalMetadata *)*((int *)this + 8);
  v6 = *((_QWORD *)this + 5);
  if (v6)
    v7 = (maps::path_codec::geo3::RoutingPathPoint **)(v6 + 8);
  else
    v7 = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * (_QWORD)v5;
    do
    {
      v9 = *v7++;
      v10 = maps::path_codec::geo3::RoutingPathPoint::ByteSizeLong(v9, a2, a3, a4);
      v5 = (const InternalMetadata *)((char *)v5 + (_QWORD)v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6));
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    v5 = 0;
  }
  v11 = *((_DWORD *)this + 4);
  if ((v11 & 3) != 0)
  {
    if ((v11 & 1) != 0)
    {
      v12 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
      v13 = *(unsigned __int8 *)(v12 + 23);
      v14 = *(_QWORD *)(v12 + 8);
      if ((v13 & 0x80u) == 0)
        v14 = v13;
      v5 = (const InternalMetadata *)((char *)v5 + v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
    if ((v11 & 2) != 0)
    {
      v15 = maps::path_codec::geo3::RoutingPathLeg_MetaData::ByteSizeLong(*((maps::path_codec::geo3::RoutingPathLeg_MetaData **)this + 7), a2, a3, a4);
      v5 = (const InternalMetadata *)((char *)v5 + v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return (const InternalMetadata *)google::protobuf::internal::ComputeUnknownFieldsSize((maps::path_codec::geo3::RoutingPathLeg *)((char *)this + 8), v5, (_DWORD *)this + 5, a4);
  *((_DWORD *)this + 5) = (_DWORD)v5;
  return v5;
}

void maps::path_codec::geo3::RoutingPathLeg::MergeFrom(maps::path_codec::geo3::RoutingPathLeg *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  maps::path_codec::geo3::RoutingPathPoint **v8;
  unsigned int *v9;
  signed int v10;
  signed int *v11;
  int v12;
  __int128 *v13;
  uint64_t v14;
  google::protobuf::internal::ArenaImpl *v15;
  maps::path_codec::geo3::RoutingPathLeg_MetaData *v16;
  google::protobuf::internal::ArenaImpl *v17;
  const maps::path_codec::geo3::RoutingPathLeg_MetaData *v18;

  if (*(void (***)(maps::path_codec::geo3::RoutingPathLeg *__hidden))a2 == &off_1E1BF6B48)
  {
    v5 = (_QWORD *)((char *)this + 8);
    v6 = *((_QWORD *)a2 + 1);
    if ((v6 & 1) != 0)
      google::protobuf::internal::InternalMetadata::DoMergeFrom<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1, (const google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8));
    v7 = *((_DWORD *)a2 + 8);
    if (v7)
    {
      v8 = (maps::path_codec::geo3::RoutingPathPoint **)(*((_QWORD *)a2 + 5) + 8);
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((maps::path_codec::geo3::RoutingPathLeg *)((char *)this + 24), *((_DWORD *)a2 + 8));
      google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<maps::path_codec::geo3::RoutingPathPoint>::TypeHandler>((google::protobuf::internal::ArenaImpl **)this + 3, (maps::path_codec::geo3::RoutingPathPoint **)v9, v8, v7, **((_DWORD **)this + 5) - *((_DWORD *)this + 8));
      v10 = *((_DWORD *)this + 8) + v7;
      *((_DWORD *)this + 8) = v10;
      v11 = (signed int *)*((_QWORD *)this + 5);
      if (*v11 < v10)
        *v11 = v10;
    }
    v12 = *((_DWORD *)a2 + 4);
    if ((v12 & 3) != 0)
    {
      if ((v12 & 1) != 0)
      {
        v13 = (__int128 *)(*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFFELL);
        *((_DWORD *)this + 4) |= 1u;
        v14 = *((_QWORD *)this + 1);
        v15 = (google::protobuf::internal::ArenaImpl *)(v14 & 0xFFFFFFFFFFFFFFFELL);
        if ((v14 & 1) != 0)
          v15 = *(google::protobuf::internal::ArenaImpl **)v15;
        google::protobuf::internal::ArenaStringPtr::Set((std::string **)this + 6, (std::string *)&google::protobuf::internal::fixed_address_empty_string, v13, v15);
      }
      if ((v12 & 2) != 0)
      {
        *((_DWORD *)this + 4) |= 2u;
        v16 = (maps::path_codec::geo3::RoutingPathLeg_MetaData *)*((_QWORD *)this + 7);
        if (!v16)
        {
          v17 = (google::protobuf::internal::ArenaImpl *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v5 & 1) != 0)
            v17 = *(google::protobuf::internal::ArenaImpl **)v17;
          v16 = (maps::path_codec::geo3::RoutingPathLeg_MetaData *)google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RoutingPathLeg_MetaData>(v17);
          *((_QWORD *)this + 7) = v16;
        }
        if (*((_QWORD *)a2 + 7))
          v18 = (const maps::path_codec::geo3::RoutingPathLeg_MetaData *)*((_QWORD *)a2 + 7);
        else
          v18 = (const maps::path_codec::geo3::RoutingPathLeg_MetaData *)&maps::path_codec::geo3::_RoutingPathLeg_MetaData_default_instance_;
        maps::path_codec::geo3::RoutingPathLeg_MetaData::MergeFrom(v16, v18);
      }
    }
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

void maps::path_codec::geo3::RoutingPathLeg::CopyFrom(maps::path_codec::geo3::RoutingPathLeg *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    maps::path_codec::geo3::RoutingPathLeg::Clear(this);
    maps::path_codec::geo3::RoutingPathLeg::MergeFrom(this, a2, v4);
  }
}

uint64_t maps::path_codec::geo3::RoutingPathLeg::IsInitialized(maps::path_codec::geo3::RoutingPathLeg *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((unsigned int *)this + 8);
  if ((int)v1 < 1)
    return 1;
  v2 = v1 + 1;
  while (1)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * (v2 - 2) + 8);
    if ((*(_BYTE *)(v3 + 16) & 2) != 0 && (~*(_DWORD *)(*(_QWORD *)(v3 + 32) + 16) & 3) != 0)
      break;
    if ((unint64_t)--v2 <= 1)
      return 1;
  }
  return 0;
}

uint64_t maps::path_codec::geo3::RoutingPathLeg::GetMetadata(maps::path_codec::geo3::RoutingPathLeg *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_path_2eproto, 0);
  return off_1EDF470E0[8];
}

_QWORD *google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::LatLngE7>(google::protobuf::internal::ArenaImpl *this)
{
  _QWORD *result;

  if (this)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    result = google::protobuf::internal::ArenaImpl::AllocateAligned(this, 0x20uLL);
  }
  else
  {
    result = (_QWORD *)operator new();
  }
  *result = &off_1E1BF6F68;
  result[1] = this;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::UUID>(google::protobuf::internal::ArenaImpl *this)
{
  _QWORD *result;

  if (this)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    result = google::protobuf::internal::ArenaImpl::AllocateAligned(this, 0x28uLL);
  }
  else
  {
    result = (_QWORD *)operator new();
  }
  *result = &off_1E1BF6EB8;
  result[1] = this;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RoutingPathPoint>(google::protobuf::internal::ArenaImpl *this)
{
  uint64_t Aligned;

  if (this)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    Aligned = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAligned(this, 0x58uLL);
    *(_QWORD *)Aligned = &off_1E1BF6CA8;
    *(_QWORD *)(Aligned + 8) = this;
    *(_QWORD *)(Aligned + 16) = 0;
    if (atomic_load(scc_info_RoutingPathPoint_path_2eproto))
      goto LABEL_7;
  }
  else
  {
    Aligned = operator new();
    *(_QWORD *)Aligned = &off_1E1BF6CA8;
    *(_QWORD *)(Aligned + 8) = 0;
    *(_QWORD *)(Aligned + 16) = 0;
    if (atomic_load(scc_info_RoutingPathPoint_path_2eproto))
LABEL_7:
      google::protobuf::internal::InitSCCImpl(scc_info_RoutingPathPoint_path_2eproto);
  }
  *(_QWORD *)(Aligned + 24) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)(Aligned + 32) = 0u;
  *(_OWORD *)(Aligned + 48) = 0u;
  *(_OWORD *)(Aligned + 64) = 0u;
  *(_QWORD *)(Aligned + 80) = 0x100000000;
  return Aligned;
}

void sub_1888D4434(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C409D9664DFLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RoutingPathLeg_MetaData>(google::protobuf::internal::ArenaImpl *this)
{
  uint64_t result;

  if (this)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    result = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAligned(this, 0x20uLL);
  }
  else
  {
    result = operator new();
  }
  *(_QWORD *)result = &off_1E1BF11D0;
  *(_QWORD *)(result + 8) = this;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

maps::path_codec::geo3::RoutingPathLeg *google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RoutingPathLeg>(google::protobuf::internal::ArenaImpl *this)
{
  maps::path_codec::geo3::RoutingPathLeg *Aligned;

  if (this)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    Aligned = (maps::path_codec::geo3::RoutingPathLeg *)google::protobuf::internal::ArenaImpl::AllocateAligned(this, 0x40uLL);
    maps::path_codec::geo3::RoutingPathLeg::RoutingPathLeg(Aligned, (Arena *)this);
  }
  else
  {
    Aligned = (maps::path_codec::geo3::RoutingPathLeg *)operator new();
    maps::path_codec::geo3::RoutingPathLeg::RoutingPathLeg(Aligned, 0);
  }
  return Aligned;
}

void sub_1888D4570(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C404773F172);
  _Unwind_Resume(a1);
}

_QWORD *maps::path_codec::geo3::LatLngE7::New(maps::path_codec::geo3::LatLngE7 *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::LatLngE7>(0);
}

_QWORD *maps::path_codec::geo3::LatLngE7::New(maps::path_codec::geo3::LatLngE7 *this, Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::LatLngE7>((google::protobuf::internal::ArenaImpl *)a2);
}

uint64_t maps::path_codec::geo3::LatLngE7::GetCachedSize(maps::path_codec::geo3::LatLngE7 *this)
{
  return *((unsigned int *)this + 5);
}

_QWORD *maps::path_codec::geo3::UUID::New(maps::path_codec::geo3::UUID *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::UUID>(0);
}

_QWORD *maps::path_codec::geo3::UUID::New(maps::path_codec::geo3::UUID *this, Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::UUID>((google::protobuf::internal::ArenaImpl *)a2);
}

uint64_t maps::path_codec::geo3::UUID::GetCachedSize(maps::path_codec::geo3::UUID *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t maps::path_codec::geo3::RoutingPathPoint::New(maps::path_codec::geo3::RoutingPathPoint *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RoutingPathPoint>(0);
}

uint64_t maps::path_codec::geo3::RoutingPathPoint::New(maps::path_codec::geo3::RoutingPathPoint *this, Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RoutingPathPoint>((google::protobuf::internal::ArenaImpl *)a2);
}

uint64_t maps::path_codec::geo3::RoutingPathPoint::GetCachedSize(maps::path_codec::geo3::RoutingPathPoint *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t maps::path_codec::geo3::RoutingPathLeg_MetaData::New(maps::path_codec::geo3::RoutingPathLeg_MetaData *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RoutingPathLeg_MetaData>(0);
}

uint64_t maps::path_codec::geo3::RoutingPathLeg_MetaData::New(maps::path_codec::geo3::RoutingPathLeg_MetaData *this, Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RoutingPathLeg_MetaData>((google::protobuf::internal::ArenaImpl *)a2);
}

uint64_t maps::path_codec::geo3::RoutingPathLeg_MetaData::GetCachedSize(maps::path_codec::geo3::RoutingPathLeg_MetaData *this)
{
  return *((unsigned int *)this + 5);
}

maps::path_codec::geo3::RoutingPathLeg *maps::path_codec::geo3::RoutingPathLeg::New(maps::path_codec::geo3::RoutingPathLeg *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RoutingPathLeg>(0);
}

maps::path_codec::geo3::RoutingPathLeg *maps::path_codec::geo3::RoutingPathLeg::New(maps::path_codec::geo3::RoutingPathLeg *this, Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RoutingPathLeg>((google::protobuf::internal::ArenaImpl *)a2);
}

uint64_t maps::path_codec::geo3::RoutingPathLeg::GetCachedSize(maps::path_codec::geo3::RoutingPathLeg *this)
{
  return *((unsigned int *)this + 5);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<maps::path_codec::geo3::RoutingPathPoint>::TypeHandler>(_QWORD *a1)
{
  maps::path_codec::geo3::RoutingPathPoint **v2;
  maps::path_codec::geo3::RoutingPathPoint **v3;
  uint64_t v4;

  v2 = (maps::path_codec::geo3::RoutingPathPoint **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          maps::path_codec::geo3::RoutingPathPoint::~RoutingPathPoint(*v3);
          MEMORY[0x18D76437C]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (maps::path_codec::geo3::RoutingPathPoint **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<maps::path_codec::geo3::RoutingPathPoint>::TypeHandler>(google::protobuf::internal::ArenaImpl **a1, maps::path_codec::geo3::RoutingPathPoint **a2, maps::path_codec::geo3::RoutingPathPoint **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  maps::path_codec::geo3::RoutingPathPoint **v11;
  maps::path_codec::geo3::RoutingPathPoint **v12;
  maps::path_codec::geo3::RoutingPathPoint *v13;
  maps::path_codec::geo3::RoutingPathPoint *v14;
  maps::path_codec::geo3::RoutingPathPoint *v15;
  BOOL v16;
  int v17;
  google::protobuf::internal::ArenaImpl *v18;
  maps::path_codec::geo3::RoutingPathPoint **v19;
  maps::path_codec::geo3::RoutingPathPoint **v20;
  maps::path_codec::geo3::RoutingPathPoint *v21;
  maps::path_codec::geo3::RoutingPathPoint *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<maps::path_codec::geo3::RoutingPathPoint>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20++;
      v22 = (maps::path_codec::geo3::RoutingPathPoint *)google::protobuf::Arena::CreateMaybeMessage<maps::path_codec::geo3::RoutingPathPoint>(v18);
      google::protobuf::internal::GenericTypeHandler<maps::path_codec::geo3::RoutingPathPoint>::Merge(v21, v22);
      *v19++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<maps::path_codec::geo3::RoutingPathPoint>::Merge(maps::path_codec::geo3::RoutingPathPoint *a1, maps::path_codec::geo3::RoutingPathPoint *this)
{
  maps::path_codec::geo3::RoutingPathPoint::MergeFrom(this, a1);
}

BOOL GEOPDGuideSummaryLayoutMetadataReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _BOOL8 v23;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 12) |= 1u;
          while (1)
          {
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
              break;
            v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
            *(_QWORD *)&v3[v20] = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_30;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_32;
            }
          }
          v3[*v6] = 1;
LABEL_30:
          if (v3[*v6])
            LODWORD(v19) = 0;
LABEL_32:
          *(_DWORD *)(a1 + 8) = v19;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_35;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v23 = v3[*v6] == 0;
  }
  else
  {
LABEL_35:
    v23 = 0;
  }
  objc_sync_exit(v3);

  return v23;
}

void sub_1888D4C10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888D661C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1888D6D78(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t ClearValue(void *a1, _QWORD *a2, uint64_t a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v5 = a1;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy_;
  v18 = __Block_byref_object_dispose_;
  v19 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __ClearValue_block_invoke;
  v10[3] = &unk_1E1BFF770;
  v6 = v5;
  v12 = &v14;
  v13 = a3;
  v11 = v6;
  v7 = objc_msgSend(v6, "executeStatement:statementBlock:", CFSTR("ClearValue"), v10);
  if (a2)
  {
    v8 = (void *)v15[5];
    if (v8)
      *a2 = objc_retainAutorelease(v8);
  }

  _Block_object_dispose(&v14, 8);
  return v7;
}

void sub_1888D72C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AddValue(void *a1, _QWORD *a2, uint64_t a3, void *a4, uint64_t a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  _QWORD v24[4];
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;

  v13 = a1;
  v14 = a4;
  v15 = a6;
  v16 = a7;
  v32 = 0;
  v33 = &v32;
  v34 = 0x3032000000;
  v35 = __Block_byref_object_copy_;
  v36 = __Block_byref_object_dispose_;
  v37 = 0;
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __AddValue_block_invoke;
  v24[3] = &unk_1E1BFF9C0;
  v17 = v13;
  v29 = &v32;
  v30 = a3;
  v25 = v17;
  v18 = v14;
  v26 = v18;
  v31 = a5;
  v19 = v15;
  v27 = v19;
  v20 = v16;
  v28 = v20;
  v21 = objc_msgSend(v17, "executeStatement:statementBlock:", CFSTR("AddValue"), v24);
  if (a2)
  {
    v22 = (void *)v33[5];
    if (v22)
      *a2 = objc_retainAutorelease(v22);
  }

  _Block_object_dispose(&v32, 8);
  return v21;
}

void sub_1888D745C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AddXPCValue(void *a1, _QWORD *a2, uint64_t a3, void *a4, uint64_t a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  _QWORD v24[4];
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;

  v13 = a1;
  v14 = a4;
  v15 = a6;
  v16 = a7;
  v32 = 0;
  v33 = &v32;
  v34 = 0x3032000000;
  v35 = __Block_byref_object_copy_;
  v36 = __Block_byref_object_dispose_;
  v37 = 0;
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __AddXPCValue_block_invoke;
  v24[3] = &unk_1E1BFF9C0;
  v17 = v13;
  v29 = &v32;
  v30 = a3;
  v25 = v17;
  v18 = v14;
  v26 = v18;
  v31 = a5;
  v19 = v15;
  v27 = v19;
  v20 = v16;
  v28 = v20;
  v21 = objc_msgSend(v17, "executeStatement:statementBlock:", CFSTR("AddXPCValue"), v24);
  if (a2)
  {
    v22 = (void *)v33[5];
    if (v22)
      *a2 = objc_retainAutorelease(v22);
  }

  _Block_object_dispose(&v32, 8);
  return v21;
}

void sub_1888D7630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1888D7A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1888D8358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _geoDefaultsToArray(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  _QWORD v6[4];
  id v7;

  v1 = (void *)MEMORY[0x1E0C99DE8];
  v2 = a1;
  objc_msgSend(v1, "arrayWithCapacity:", objc_msgSend(v2, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___geoDefaultsToArray_block_invoke;
  v6[3] = &unk_1E1BFFAD8;
  v4 = v3;
  v7 = v4;
  objc_msgSend(v2, "enumerateObjectsUsingBlock:", v6);

  return v4;
}

void sub_1888D8A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1888D92C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1888D94C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _getFirstColumnInt64(const char **a1, int a2, const char **a3)
{
  const char *v4;

  if (a2)
  {
    v4 = *a3;
    if (*a3)
      v4 = (const char *)strtoll(v4, 0, 10);
  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
  return 0;
}

void ___setDefaultDict_block_invoke_392(_QWORD *a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v7;
  id v8;
  char v9;
  uint64_t v10;
  char v11;
  id v12;

  v7 = (void *)a1[4];
  v8 = a3;
  objc_msgSend(v7, "arrayByAddingObject:", a2);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  v9 = _setDefault(a1[5], v8, v12);

  v10 = *(_QWORD *)(a1[6] + 8);
  if (*(_BYTE *)(v10 + 24))
    v11 = v9;
  else
    v11 = 0;
  *(_BYTE *)(v10 + 24) = v11;
  *a4 = *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) ^ 1;

}

void ___setDefaultArray_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  _valueForKeyPath(a2, *(void **)(a1 + 32), 0, 0);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void ___setDefaultArray_block_invoke_2(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  id v8;
  void *v9;
  char v10;
  uint64_t v11;
  char v12;
  id v13;

  v7 = (void *)MEMORY[0x1E0CB3940];
  v8 = a2;
  objc_msgSend(v7, "stringWithFormat:", CFSTR("%u"), a3);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "arrayByAddingObject:", v13);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = _setDefault(*(_QWORD *)(a1 + 40), v8, v9);

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (*(_BYTE *)(v11 + 24))
    v12 = v10;
  else
    v12 = 0;
  *(_BYTE *)(v11 + 24) = v12;
  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) ^ 1;

}

void ___geoDefaultsToArray_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSObject *v8;
  uint8_t v9[16];

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = *(void **)(a1 + 32);
    _geoDefaultsToDict(v3);
    v5 = objc_claimAutoreleasedReturnValue();
LABEL_7:
    v7 = (void *)v5;
    objc_msgSend(v4, "addObject:", v5);

    goto LABEL_8;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = *(void **)(a1 + 32);
    _geoDefaultsToArray(v3);
    v5 = objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
  objc_msgSend(v3, "value");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v4 = *(void **)(a1 + 32);
    objc_msgSend(v3, "value");
    v5 = objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
  j__GEOGetUserDefaultsLog();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1885A9000, v8, OS_LOG_TYPE_FAULT, "Tried to add a nil object to an array.", v9, 2u);
  }

LABEL_8:
}

void sub_1888DAFF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1888DB09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888DB214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1888DC43C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void GEOSimpleTileRequesterUnpackETag(void *a1, _QWORD *a2, _QWORD *a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;

  v13 = a1;
  if (objc_msgSend(v13, "rangeOfString:", CFSTR("|LOCSPLIT|")) == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (a2)
      *a2 = objc_retainAutorelease(v13);
    v5 = v13;
    if (a3)
      *a3 = 0;
  }
  else
  {
    objc_msgSend(v13, "componentsSeparatedByString:", CFSTR("|LOCSPLIT|"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "count"))
    {
      objc_msgSend(v6, "firstObject");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = 0;
    }
    if ((unint64_t)objc_msgSend(v6, "count") < 2)
    {
      v8 = 0;
    }
    else
    {
      objc_msgSend(v6, "objectAtIndex:", 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    if (!objc_msgSend(v7, "length"))
    {

      v7 = 0;
    }
    if (!objc_msgSend(v8, "length"))
    {

      v8 = 0;
    }
    if (v7)
    {
      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedString:options:", v7, 0);
      if (v9)
      {
        v10 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v9, 4);

        v7 = (void *)v10;
      }

    }
    if (v8)
    {
      v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedString:options:", v8, 0);
      if (v11)
      {
        v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v11, 4);

        v8 = (void *)v12;
      }

    }
    if (a2)
      *a2 = objc_retainAutorelease(v7);
    if (a3)
      *a3 = objc_retainAutorelease(v8);

    v5 = v13;
  }

}

id GEOSimpleTileRequesterPackETags(void *a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  __CFString *v8;
  void *v9;
  __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;

  v3 = a1;
  v4 = a2;
  if (!(v3 | v4))
  {
    v5 = 0;
    return v5;
  }
  v6 = (void *)v4;
  if (!v3)
  {
    v8 = 0;
    if (v4)
      goto LABEL_5;
LABEL_7:
    v10 = 0;
    goto LABEL_8;
  }
  objc_msgSend((id)v3, "dataUsingEncoding:", 4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "base64EncodedStringWithOptions:", 0);
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (!v6)
    goto LABEL_7;
LABEL_5:
  objc_msgSend(v6, "dataUsingEncoding:", 4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "base64EncodedStringWithOptions:", 0);
  v10 = (__CFString *)objc_claimAutoreleasedReturnValue();

LABEL_8:
  if (v8)
    v11 = v8;
  else
    v11 = &stru_1E1C241D0;
  if (v10)
    v12 = v10;
  else
    v12 = &stru_1E1C241D0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@%@"), v11, CFSTR("|LOCSPLIT|"), v12);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1888DD194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1888DDA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void ___sharedWorkloop_block_invoke()
{
  uint64_t v0;
  void *v1;

  geo_dispatch_workloop_create_with_qos();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EDF4FAF8;
  qword_1EDF4FAF8 = v0;

}

void __httpPragmaHeader_block_invoke()
{
  uint64_t v0;
  void *v1;

  _getValue(GeoServicesConfig_TileRequesterPragmaHeader, (uint64_t)off_1EDF4D478, 1, 0, 0, 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EDF4FB08;
  qword_1EDF4FB08 = v0;

}

void __buildUserInfo_block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  v4[5] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99D80];
  v4[0] = CFSTR("tileURL");
  v4[1] = CFSTR("localizationURL");
  v4[2] = CFSTR("tileLength");
  v4[3] = CFSTR("TileIsCacheable");
  v4[4] = CFSTR("GEOTileLoadResultMaxAge");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 5);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "sharedKeySetForKeys:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1EDF4FB18;
  qword_1EDF4FB18 = v2;

}

id GEOErrorReasonKey()
{
  return (id)*MEMORY[0x1E0C9AFA8];
}

void sub_1888DE7BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1888DEAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1888DEC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1888DF160(_Unwind_Exception *a1)
{
  id *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float gm::Matrix<float,2,1>::nearestPointOffsetAlongLineSegment<int,void>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float result;
  float v7;

  v3 = a2[1];
  v4 = *a3 - *a2;
  v5 = a3[1] - v3;
  result = 0.0;
  v7 = (float)((float)(v4 * v4) + 0.0) + (float)(v5 * v5);
  if (v7 > 1.0e-15)
  {
    result = (float)((float)((float)((float)(*a1 - *a2) * v4) + 0.0) + (float)((float)(a1[1] - v3) * v5)) / v7;
    if (result < 0.0)
      result = 0.0;
    if (result > 1.0)
      return 1.0;
  }
  return result;
}

uint64_t std::hash<geo::TransitEdgePiece>::operator()(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)a1, "containingTile");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "tileKey");
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)v3 << 32;
  v6 = BYTE4(*(_QWORD *)v3) | ((((*(_QWORD *)v3 >> 40) | (*(unsigned __int16 *)(v3 + 8) << 24)) & 0x3FFFFFF) << 8) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(unsigned __int16 *)(v3 + 8) >> 2) << 34) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v3 + 10) & 0xF) << 48) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v3 + 10) >> 4) << 52);
  *(_QWORD *)((char *)v16 + 1) = v5 & 0xFFFFC00000000000 | ((unint64_t)((*(_QWORD *)v3 >> 8) & 0x3F) << 40);
  LOBYTE(v16[0]) = v4;
  *((_QWORD *)&v7 + 1) = v6;
  *(_QWORD *)&v7 = v5;
  v15[0] = v16[0];
  v15[1] = v7 >> 56;
  v8 = GEOTileKeyHash(v15) + 2654435769u;

  v9 = ((v8 << 6) + (v8 >> 2) + 2654435769u + *(_QWORD *)objc_msgSend(*(id *)a1, "transitIndexRange")) ^ v8;
  v10 = ((v9 << 6) + objc_msgSend(*(id *)a1, "sectionOffset") + (v9 >> 2) + 2654435769u) ^ v9;
  v11 = *(void **)(a1 + 16);
  if (v11)
  {
    objc_msgSend(v11, "feature");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (v10 << 6) + 2654435769u + (v10 >> 2) + objc_msgSend(v12, "featureID");

  }
  else
  {
    v13 = (v10 << 6) + 2654435769u + (v10 >> 2);
  }
  return (*(unsigned __int8 *)(a1 + 28) + 2654435769 + ((v13 ^ v10) << 6) + ((v13 ^ v10) >> 2)) ^ v13 ^ v10;
}

void sub_1888DF3EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL std::equal_to<geo::TransitEdgePiece>::operator()(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  _BOOL8 v15;
  uint64_t v16;
  _BYTE v18[11];
  _BYTE v19[11];

  objc_msgSend(*(id *)a1, "containingTile");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "tileKey");
  *(_QWORD *)v19 = *(_QWORD *)v6;
  *(_DWORD *)&v19[7] = *(_DWORD *)(v6 + 7);

  objc_msgSend(*(id *)a2, "containingTile");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "tileKey");
  *(_QWORD *)v18 = *(_QWORD *)v8;
  *(_DWORD *)&v18[7] = *(_DWORD *)(v8 + 7);

  if (*(unsigned __int8 *)(a1 + 28) != *(unsigned __int8 *)(a2 + 28))
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = (v9 | v10) == 0;
  if (v9 | v10)
  {
    v15 = 0;
    if (!v9 || !v10)
      return v15;
    objc_msgSend((id)v9, "feature");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v7, "featureID");
    objc_msgSend(*(id *)(a2 + 16), "feature");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16 != objc_msgSend(v2, "featureID"))
    {
      v15 = 0;
      goto LABEL_19;
    }
  }
  v12 = *(_QWORD *)objc_msgSend(*(id *)a1, "transitIndexRange");
  if (v12 != *(_QWORD *)objc_msgSend(*(id *)a2, "transitIndexRange")
    || (v13 = objc_msgSend(*(id *)a1, "sectionOffset"), v13 != objc_msgSend(*(id *)a2, "sectionOffset")))
  {
    v15 = 0;
    if (v11)
      return v15;
LABEL_19:

    return v15;
  }
  v15 = *(_QWORD *)v19 == *(_QWORD *)v18 && *(_QWORD *)&v19[3] == *(_QWORD *)&v18[3];
  if (!v11)
    goto LABEL_19;
  return v15;
}

void sub_1888DF5A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

GEOMapRegion *GEOMapRegionUnion(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  GEOMapRegion *v15;
  GEOMapRegion *v16;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = GEOMapRectForMapRegion(v3);
      v8 = v7;
      v10 = v9;
      v12 = v11;
      v13 = GEOMapRectForMapRegion(v5);
      v15 = -[GEOMapRegion initWithMapRect:]([GEOMapRegion alloc], "initWithMapRect:", GEOMapRectUnion(v6, v8, v10, v12, v13, v14));
    }
    else
    {
      v15 = (GEOMapRegion *)v3;
    }
  }
  else
  {
    v15 = (GEOMapRegion *)v4;
  }
  v16 = v15;

  return v16;
}

id GEOCoarseLocationLatLngDescription(double *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CB3940];
  _GEOCoarseLocationLatLngDictionaryRepresentation(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("GEOCoarseLocationLatLng<%p> %@"), a1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _GEOCoarseLocationLatLngDictionaryRepresentation(double *a1)
{
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v3, CFSTR("lat"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a1[1]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("lng"));

  return v2;
}

void _GEOCoarseLocationLatLngFromDictionaryRepresentation(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = a1;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("lat"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v4, "doubleValue");
    *a2 = v5;
  }

  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("lng"));
  v7 = (id)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v7, "doubleValue");
    a2[1] = v6;
  }

}

uint64_t GEOCoarseLocationLatLngReadFrom(_QWORD *a1, uint64_t a2)
{
  return GEOCoarseLocationLatLngReadAllFrom(a1, a2);
}

uint64_t GEOCoarseLocationLatLngWriteTo()
{
  PBDataWriterWriteDoubleField();
  return PBDataWriterWriteDoubleField();
}

BOOL GEOCoarseLocationLatLngEquals(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t GEOCoarseLocationLatLngHash()
{
  return PBHashBytes();
}

uint64_t GEOCoarseLocationLatLngIsValid(void *a1)
{
  uint64_t AllFrom;
  _QWORD v4[4];

  v4[2] = objc_msgSend(a1, "position");
  v4[3] = objc_msgSend(a1, "length");
  AllFrom = GEOCoarseLocationLatLngReadAllFrom(v4, (uint64_t)a1);
  PBReaderRecallMark();
  return AllFrom;
}

id GEOCoarseLocationPointDescription(unsigned int *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CB3940];
  _GEOCoarseLocationPointDictionaryRepresentation(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("GEOCoarseLocationPoint<%p> %@"), a1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _GEOCoarseLocationPointDictionaryRepresentation(unsigned int *a1)
{
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v3, CFSTR("lat"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[1]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("lng"));

  return v2;
}

void _GEOCoarseLocationPointFromDictionaryRepresentation(void *a1, _DWORD *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a1;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("lat"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    *a2 = objc_msgSend(v4, "intValue");

  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("lng"));
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    a2[1] = objc_msgSend(v5, "intValue");

}

BOOL GEOCoarseLocationPointReadFrom(_DWORD *a1, uint64_t a2)
{
  return GEOCoarseLocationPointReadAllFrom(a1, a2);
}

uint64_t GEOCoarseLocationPointWriteTo()
{
  PBDataWriterWriteSint32Field();
  return PBDataWriterWriteSint32Field();
}

BOOL GEOCoarseLocationPointEquals(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t GEOCoarseLocationPointHash()
{
  return PBHashBytes();
}

BOOL GEOCoarseLocationPointIsValid(void *a1)
{
  _BOOL8 v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend(a1, "position");
  v6 = objc_msgSend(a1, "length");
  v2 = GEOCoarseLocationPointReadAllFrom(&v4, (uint64_t)a1);
  PBReaderRecallMark();
  return v2;
}

void sub_1888E1DD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOCoarseLocationPolygonCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = *(id *)(a1 + 16);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v7);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

unint64_t GEOCoarseLocationPolygonReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOCoarseLocationPolygonReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1888E1F40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCoarseLocationPolygonIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 2 || (v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOCoarseLocationRingIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOCoarseLocationRingIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOCoarseLocationPointIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_1888E2500(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCoarseLocationPolygonIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 44) & 7) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_1888E2898(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCoarseLocationRingReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOCoarseLocationRingReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1888E2F40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888E36E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888E3D7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888E3EC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888E4FBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOCoarseLocationTerritoryInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  uint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOCoarseLocationTerritoryInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1888E501C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCoarseLocationTerritoryInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  _BOOL8 v72;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_124;
          v21 = 0;
          while (1)
          {
            v22 = *v2;
            v23 = *(_QWORD *)&a1[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&a1[*v3])
              goto LABEL_108;
            v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
            *(_QWORD *)&a1[v22] = v24;
            if (v25 < 0)
            {
              v26 = v21++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_110;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_124;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_108;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v26 = v27++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_110;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_124;
          v32 = 0;
          while (1)
          {
            v33 = *v2;
            v34 = *(_QWORD *)&a1[v33];
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
              goto LABEL_108;
            v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
            *(_QWORD *)&a1[v33] = v35;
            if (v36 < 0)
            {
              v26 = v32++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_110;
          }
        case 4u:
          if (v16 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_124:
              PBReaderRecallMark();
              return 0;
            }
LABEL_113:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v67 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v68 = *v2;
                v69 = *(_QWORD *)&a1[v68];
                v70 = v69 + 1;
                if (v69 == -1 || v70 > *(_QWORD *)&a1[*v3])
                  break;
                v71 = *(char *)(*(_QWORD *)&a1[*v5] + v69);
                *(_QWORD *)&a1[v68] = v70;
                if (v71 < 0)
                {
                  v13 = v67++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_113;
              }
              a1[*v4] = 1;
            }
LABEL_89:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_124;
            while (1)
            {
              v37 = *v2;
              v38 = *(_QWORD *)&a1[v37];
              v39 = v38 + 1;
              if (v38 == -1 || v39 > *(_QWORD *)&a1[*v3])
                break;
              v40 = *(char *)(*(_QWORD *)&a1[*v5] + v38);
              *(_QWORD *)&a1[v37] = v39;
              if (v40 < 0)
              {
                v41 = v16++;
                if (v41 <= 8)
                  continue;
              }
              goto LABEL_110;
            }
LABEL_108:
            v14 = *v4;
LABEL_109:
            a1[v14] = 1;
          }
LABEL_110:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_122;
          break;
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_124;
          v42 = 0;
          while (1)
          {
            v43 = *v2;
            v44 = *(_QWORD *)&a1[v43];
            v45 = v44 + 1;
            if (v44 == -1 || v45 > *(_QWORD *)&a1[*v3])
              goto LABEL_108;
            v46 = *(char *)(*(_QWORD *)&a1[*v5] + v44);
            *(_QWORD *)&a1[v43] = v45;
            if (v46 < 0)
            {
              v26 = v42++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_110;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_124;
          v47 = 0;
          while (1)
          {
            v48 = *v2;
            v49 = *(_QWORD *)&a1[v48];
            v50 = v49 + 1;
            if (v49 == -1 || v50 > *(_QWORD *)&a1[*v3])
              goto LABEL_108;
            v51 = *(char *)(*(_QWORD *)&a1[*v5] + v49);
            *(_QWORD *)&a1[v48] = v50;
            if (v51 < 0)
            {
              v26 = v47++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_110;
          }
        case 7u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOCoarseLocationLatLngIsValid(a1))
            goto LABEL_124;
          goto LABEL_89;
        case 8u:
        case 0xAu:
        case 0xBu:
          if (v16 != 1)
            goto LABEL_124;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_109;
          v20 = v19 + 8;
          if (v20 > *(_QWORD *)&a1[*v3])
            goto LABEL_109;
          *(_QWORD *)&a1[v18] = v20;
          goto LABEL_110;
        case 9u:
          if ((v8 & 7) != 0)
            goto LABEL_124;
          v52 = 0;
          while (1)
          {
            v53 = *v2;
            v54 = *(_QWORD *)&a1[v53];
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)&a1[*v3])
              goto LABEL_108;
            v56 = *(char *)(*(_QWORD *)&a1[*v5] + v54);
            *(_QWORD *)&a1[v53] = v55;
            if (v56 < 0)
            {
              v26 = v52++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_110;
          }
        case 0xCu:
          if (v16 == 2)
            goto LABEL_90;
          goto LABEL_124;
        case 0xDu:
          if (v16 == 2)
            goto LABEL_90;
          goto LABEL_124;
        case 0xEu:
          if (v16 == 2 && PBReaderPlaceMark() && GEOCoarseLocationPolygonIsValid(a1))
            goto LABEL_89;
          goto LABEL_124;
        case 0x10u:
          if ((v8 & 7) != 0)
            goto LABEL_124;
          v57 = 0;
          while (1)
          {
            v58 = *v2;
            v59 = *(_QWORD *)&a1[v58];
            v60 = v59 + 1;
            if (v59 == -1 || v60 > *(_QWORD *)&a1[*v3])
              goto LABEL_108;
            v61 = *(char *)(*(_QWORD *)&a1[*v5] + v59);
            *(_QWORD *)&a1[v58] = v60;
            if (v61 < 0)
            {
              v26 = v57++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_110;
          }
        case 0x11u:
          if ((v8 & 7) != 0)
            goto LABEL_124;
          v62 = 0;
          while (1)
          {
            v63 = *v2;
            v64 = *(_QWORD *)&a1[v63];
            v65 = v64 + 1;
            if (v64 == -1 || v65 > *(_QWORD *)&a1[*v3])
              goto LABEL_108;
            v66 = *(char *)(*(_QWORD *)&a1[*v5] + v64);
            *(_QWORD *)&a1[v63] = v65;
            if (v66 < 0)
            {
              v26 = v62++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_110;
          }
        default:
LABEL_90:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_124;
          goto LABEL_110;
      }
    }
  }
LABEL_122:
  v72 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v72;
}

void sub_1888E59AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL _GEOCoarseLocationTerritoryInfoIsDirty(uint64_t a1)
{
  int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  v2 = *(_DWORD *)(a1 + 148);
  if ((v2 & 0x1B000) != 0)
    return 1;
  if ((v2 & 0x4000) != 0)
    return GEOCoarseLocationPolygonIsDirty(*(_QWORD *)(a1 + 96));
  return 0;
}

os_unfair_lock_s *GEOCoarseLocationTerritoryInfoIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  _BOOL8 IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOCoarseLocationTerritoryInfoIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 30);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1888E610C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCoarseLocationTileDataReadFrom(void *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOCoarseLocationTileDataReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1888E6F20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCoarseLocationTileDataIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOCoarseLocationTerritoryInfoIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_1888E8050(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888E80D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888E8130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888E818C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888E81DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888E822C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888E828C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1888E82E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888E8340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1888E8398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888E84A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)GEOTileLoader;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1888E8594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1888E8880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

id LoadItem::description(LoadItem *this)
{
  double v2;
  double v3;
  double v4;
  void *v5;
  uint64_t **i;
  void *v7;
  id v8;
  NSObject *v9;
  const char *label;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  const __CFString *v16;
  char v17;
  void *v18;
  void *v19;
  void *v20;
  LoadItem *v22;
  uint64_t *v23;
  uint64_t (**v24)();
  id v25;
  uint64_t (**v26)();
  id v27;
  uint64_t (**v28)();
  id v29;
  uint64_t (**v30)();
  id v31;
  uint64_t (**v32)();
  id v33;
  unint64_t v34;
  id v35;

  GEOMachAbsoluteTimeGetCurrent();
  v3 = v2;
  v4 = *((double *)this + 2);
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = this;
  for (i = (uint64_t **)*((_QWORD *)this + 10); i; i = (uint64_t **)*i)
  {
    v23 = i[2];
    LoadItem::Requester::Requester((LoadItem::Requester *)&v24, (const LoadItem::Requester *)(i + 3));
    v7 = (void *)MEMORY[0x1E0CB3940];
    v8 = v25;
    v9 = v29;
    label = dispatch_queue_get_label(v9);
    _loadOptionsDescription(v34);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stringWithFormat:", CFSTR("<Requester identifier: %@ queue: %s options: %@>"), v8, label, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "addObject:", v12);
    v32 = &off_1E1BF6500;

    v30 = &off_1E1BF6520;
    v28 = &off_1E1BF64E0;

    v26 = &off_1E1BF6480;
    v24 = &off_1E1BF64C0;

  }
  v13 = (void *)MEMORY[0x1E0CB3940];
  GEOStringFromTileKey((char *)v22);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = *((_DWORD *)v22 + 6) - 1;
  if (v15 > 4)
    v16 = CFSTR("Pending");
  else
    v16 = off_1E1C00458[v15];
  v17 = LoadItem::options(v22);
  _loadOptionsDescription(v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  _loadOptionsDescription(*((_QWORD *)v22 + 4));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "stringWithFormat:", CFSTR("<LoadItem key:%@ age:%.2fs state:%@ options:%@ optionsAtSubmitTime:%@ Requesters: %@>"), v14, v3 - v4, v16, v18, v19, v5);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

void sub_1888E8B48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id ErrorInfo::description(ErrorInfo *this)
{
  double v2;
  double v3;
  double v4;
  void *v5;
  uint64_t i;
  void *v7;
  void *v8;
  char v10[24];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  GEOMachAbsoluteTimeGetCurrent();
  v3 = v2;
  v4 = *(double *)this;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = *((_QWORD *)this + 5); (ErrorInfo *)i != (ErrorInfo *)((char *)this + 32); i = *(_QWORD *)(i + 8))
  {
    *(_OWORD *)v10 = *(_OWORD *)(i + 16);
    GEOStringFromTileKey(v10);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "addObject:", v7);

  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<Error %@ age:%.1fs keys: %@>"), *((_QWORD *)this + 2), v3 - v4, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1888E8CBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888E8D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1888E91A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1888E92A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888E9338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1888E9494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888E9534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1888E96E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_1888E9878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  void *v27;

  _Block_object_dispose(&a16, 8);
  _Unwind_Resume(a1);
}

void sub_1888E9910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888E9A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _noNetErr(void)
{
  if (qword_1ECDBB848 != -1)
    dispatch_once(&qword_1ECDBB848, &__block_literal_global_415);
  return (id)qword_1ECDBB840;
}

void sub_1888E9C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888E9CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888E9D94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888E9E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888E9E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888E9EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888E9FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1888EA208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1888EA404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_1888EA570(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888EA64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1888EA730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1888EA820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1888EA9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1888EAA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1888EAB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1888EAC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1888EAEE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::__list_imp<std::__list_iterator<LoadItem,void *>>::clear((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_1888EB01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1888EB13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  id *v12;
  void *v13;

  operator delete(v12);
  _Unwind_Resume(a1);
}

void sub_1888EB218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1888EB340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1888EB3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888EB5D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1888EB9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, _QWORD *a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;

  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  std::__list_imp<std::__list_iterator<LoadItem,void *>>::clear(a14);
  _Block_object_dispose(&a68, 8);
  std::__list_imp<std::pair<_GEOTileKey,LoadItem::Requester>>::clear(a15);

  _Unwind_Resume(a1);
}

_QWORD *__Block_byref_object_copy__193(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result[6] = result + 6;
  result[7] = result + 6;
  result[8] = 0;
  v2 = a2[8];
  if (v2)
  {
    v4 = a2[6];
    v3 = (uint64_t *)a2[7];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    v6 = result[6];
    *(_QWORD *)(v6 + 8) = v3;
    *v3 = v6;
    result[6] = v4;
    *(_QWORD *)(v4 + 8) = result + 6;
    result[8] = v2;
    a2[8] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__194(uint64_t a1)
{
  std::__list_imp<std::pair<_GEOTileKey,LoadItem::Requester>>::clear((uint64_t *)(a1 + 48));
}

uint64_t __Block_byref_object_copy__195(uint64_t *a1, uint64_t a2)
{
  a1[6] = (uint64_t)(a1 + 6);
  a1[7] = (uint64_t)(a1 + 6);
  a1[8] = 0;
  return std::list<_GEOTileKey>::splice((uint64_t)(a1 + 6), a1 + 6, (_QWORD *)(a2 + 48));
}

_QWORD *__Block_byref_object_dispose__196(uint64_t a1)
{
  return std::__list_imp<std::__list_iterator<LoadItem,void *>>::clear((_QWORD *)(a1 + 48));
}

void sub_1888EBDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1888EBFD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _appendError(void *a1, void *a2, uint64_t a3)
{
  id v5;
  int64x2_t *internal;
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  _OWORD *v68;
  char *v69;
  GEOTileLoader *v70;
  uint64_t v71;

  v70 = a1;
  v5 = a2;
  _pruneErrors(v70);
  internal = (int64x2_t *)v70->_internal;
  v7 = internal[8].u64[0];
  if (!v7)
  {
    v9 = (char *)internal[6].i64[1];
    v8 = (char *)internal[7].i64[0];
    v10 = (v8 - v9) >> 3;
    v11 = 73 * v10 - 1;
    if (v8 == v9)
      v11 = 0;
    if ((unint64_t)(v11 - internal[8].i64[1]) < 0x49)
    {
      v12 = (char *)internal[7].i64[1];
      v13 = internal[6].i64[0];
      if (v10 >= (uint64_t)&v12[-v13] >> 3)
      {
        if (v12 == (char *)v13)
          v17 = 1;
        else
          v17 = (uint64_t)&v12[-v13] >> 2;
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v17);
        v20 = v19;
        v21 = operator new(0xFF8uLL);
        if (v20)
        {
          v22 = &v18[8 * v20];
          v23 = v18;
        }
        else
        {
          v23 = (char *)operator new(8uLL);
          v22 = v23 + 8;
          if (v18)
            operator delete(v18);
        }
        *(_QWORD *)v23 = v21;
        v36 = v23 + 8;
        v37 = (uint64_t *)internal[6].i64[1];
        if (v37 == (uint64_t *)internal[7].i64[0])
        {
          v40 = v23;
          v38 = v23;
          v55 = v23 + 8;
        }
        else
        {
          v38 = v23;
          do
          {
            if (v36 == v22)
            {
              v41 = v23 - v38;
              if (v23 <= v38)
              {
                if (v36 == v38)
                  v46 = 1;
                else
                  v46 = (v36 - v38) >> 2;
                v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v46);
                v49 = v47;
                v40 = &v47[8 * (v46 >> 2)];
                v39 = v40;
                v50 = v36 - v23;
                if (v36 != v23)
                {
                  v39 = &v40[v50 & 0xFFFFFFFFFFFFFFF8];
                  v51 = 8 * (v50 >> 3);
                  v52 = v40;
                  do
                  {
                    v53 = *(_QWORD *)v23;
                    v23 += 8;
                    *(_QWORD *)v52 = v53;
                    v52 += 8;
                    v51 -= 8;
                  }
                  while (v51);
                }
                v36 = &v47[8 * v48];
                if (v38)
                  operator delete(v38);
                v38 = v49;
              }
              else
              {
                v69 = v38;
                v42 = v5;
                v43 = v41 >> 3;
                if (v43 >= -1)
                  v44 = v43 + 1;
                else
                  v44 = v43 + 2;
                v45 = v36;
                if (v36 != v23)
                {
                  memmove(&v23[-8 * (v44 >> 1)], v23, v36 - v23);
                  v45 = v23;
                }
                v39 = &v36[-8 * (v44 >> 1)];
                v40 = &v45[-8 * (v44 >> 1)];
                v5 = v42;
                v38 = v69;
              }
            }
            else
            {
              v39 = v36;
              v40 = v23;
              v36 = v22;
            }
            v22 = v36;
            v54 = *v37++;
            *(_QWORD *)v39 = v54;
            v55 = v39 + 8;
            v36 = v55;
            v23 = v40;
          }
          while (v37 != (uint64_t *)internal[7].i64[0]);
        }
        v56 = (void *)internal[6].i64[0];
        internal[6].i64[0] = (uint64_t)v38;
        internal[6].i64[1] = (uint64_t)v40;
        internal[7].i64[0] = (uint64_t)v55;
        internal[7].i64[1] = (uint64_t)v22;
        if (v55 - v40 == 8)
          v57 = 36;
        else
          v57 = internal[8].i64[0] + 73;
        internal[8].i64[0] = v57;
        if (v56)
          operator delete(v56);
      }
      else
      {
        v14 = operator new(0xFF8uLL);
        v15 = v14;
        if (v9 == (char *)v13)
        {
          if (v8 == v12)
          {
            if (v8 == v9)
              v24 = 1;
            else
              v24 = (uint64_t)&v8[-v13] >> 2;
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v24);
            v27 = &v25[8 * (v24 >> 2)];
            v28 = (uint64_t *)internal[6].i64[1];
            v8 = v27;
            v29 = internal[7].i64[0] - (_QWORD)v28;
            if (v29)
            {
              v8 = &v27[v29 & 0xFFFFFFFFFFFFFFF8];
              v30 = 8 * (v29 >> 3);
              v31 = v27;
              do
              {
                v32 = *v28++;
                *(_QWORD *)v31 = v32;
                v31 += 8;
                v30 -= 8;
              }
              while (v30);
            }
            v33 = (void *)internal[6].i64[0];
            internal[6].i64[0] = (uint64_t)v25;
            internal[6].i64[1] = (uint64_t)v27;
            internal[7].i64[0] = (uint64_t)v8;
            internal[7].i64[1] = (uint64_t)&v25[8 * v26];
            if (v33)
            {
              operator delete(v33);
              v8 = (char *)internal[7].i64[0];
            }
          }
          *(_QWORD *)v8 = v15;
          v34 = (uint64_t *)internal[7].i64[0];
          internal[7].i64[0] = (uint64_t)(v34 + 1);
          v71 = *v34;
          internal[7].i64[0] = (uint64_t)v34;
          std::__split_buffer<ErrorInfo *>::push_front((uint64_t)internal[6].i64, &v71);
          v16 = internal[6].i64[1];
        }
        else
        {
          *((_QWORD *)v9 - 1) = v14;
          v16 = internal[6].i64[1] - 8;
          internal[6].i64[1] = v16;
        }
        if (internal[7].i64[0] - v16 == 8)
          v35 = 36;
        else
          v35 = internal[8].i64[0] + 73;
        internal[8].i64[0] = v35;
      }
    }
    else
    {
      internal[8].i64[0] = 73;
      v71 = *((_QWORD *)v8 - 1);
      internal[7].i64[0] = (uint64_t)(v8 - 8);
      std::__split_buffer<ErrorInfo *>::push_front((uint64_t)internal[6].i64, &v71);
    }
    v7 = internal[8].u64[0];
  }
  v58 = internal[6].i64[1];
  v59 = (_QWORD *)(v58 + 8 * (v7 / 0x49));
  v60 = *v59 + 56 * (v7 % 0x49);
  if (internal[7].i64[0] == v58)
    v61 = 0;
  else
    v61 = v60;
  if (v61 == *v59)
    v61 = *(v59 - 1) + 4088;
  v62 = v5;
  GEOMachAbsoluteTimeGetCurrent();
  *(_QWORD *)(v61 - 56) = v63;
  v64 = v62;
  *(_QWORD *)(v61 - 48) = &off_1E1BF64A0;
  *(_QWORD *)(v61 - 40) = v64;
  *(_QWORD *)(v61 - 24) = v61 - 24;
  *(_QWORD *)(v61 - 16) = v61 - 24;
  *(_QWORD *)(v61 - 8) = 0;
  v65 = *(_QWORD *)(a3 + 8);
  if (v65 != a3)
  {
    v66 = 1;
    v67 = (_OWORD *)(v61 - 24);
    do
    {
      v68 = operator new(0x20uLL);
      v68[1] = *(_OWORD *)(v65 + 16);
      *(_QWORD *)v68 = v67;
      *((_QWORD *)v68 + 1) = v61 - 24;
      *((_QWORD *)v67 + 1) = v68;
      *(_QWORD *)(v61 - 24) = v68;
      *(_QWORD *)(v61 - 8) = v66;
      v65 = *(_QWORD *)(v65 + 8);
      ++v66;
      v67 = v68;
    }
    while (v65 != a3);
  }

  internal[8] = vaddq_s64(internal[8], (int64x2_t)xmmword_189CC15E0);
}

void sub_1888EC4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, id a11)
{
  void *v11;
  void *v12;

  operator delete(v12);
  if (v11)
    operator delete(v11);

  _Unwind_Resume(a1);
}

void LoadItem::Requester::~Requester(id *this)
{

  this[12] = &off_1E1BF6500;
  this[9] = &off_1E1BF6520;

  this[6] = &off_1E1BF64E0;
  this[3] = &off_1E1BF6480;

  *this = &off_1E1BF64C0;
}

uint64_t std::pair<_GEOTileKey,LoadItem::Requester>::~pair(uint64_t a1)
{

  *(_QWORD *)(a1 + 112) = &off_1E1BF6500;
  *(_QWORD *)(a1 + 88) = &off_1E1BF6520;

  *(_QWORD *)(a1 + 64) = &off_1E1BF64E0;
  *(_QWORD *)(a1 + 40) = &off_1E1BF6480;

  *(_QWORD *)(a1 + 16) = &off_1E1BF64C0;
  return a1;
}

void sub_1888EC740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1888EC9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1888ECBBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888ECCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1888ECD4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888ECF64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::pair<NSString * {__strong},LoadItem::Requester>::~pair(uint64_t a1)
{

  *(_QWORD *)(a1 + 104) = &off_1E1BF6500;
  *(_QWORD *)(a1 + 80) = &off_1E1BF6520;

  *(_QWORD *)(a1 + 56) = &off_1E1BF64E0;
  *(_QWORD *)(a1 + 32) = &off_1E1BF6480;

  *(_QWORD *)(a1 + 8) = &off_1E1BF64C0;
  return a1;
}

id _loadOptionsDescription(char a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((a1 & 1) != 0)
    objc_msgSend(v2, "addObject:", CFSTR("CheckDisk"));
  if ((a1 & 2) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("CheckNetwork"));
  if ((a1 & 4) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("Preload"));
  if ((a1 & 8) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("RequireWiFi"));
  objc_msgSend(v3, "componentsJoinedByString:", CFSTR(" | "));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<%@>"), v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1888ED1C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__list_imp<_CacheRequester<void({block_pointer} {__strong})(unsigned long long)>>::__delete_node[abi:ne180100]<>(uint64_t a1)
{
  *(_QWORD *)(a1 + 40) = &off_1E1BF64E0;

  *(_QWORD *)(a1 + 16) = &off_1E1BF6540;
  operator delete((void *)a1);
}

uint64_t geo::_retain_ptr<NSObject  {objcproto17OS_dispatch_queue}* {__strong},geo::_retain_dispatch_arc<NSObject  {objcproto17OS_dispatch_queue}* {__strong}>,geo::_release_dispatch_arc,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF64E0;

  return a1;
}

uint64_t geo::_retain_ptr<void({block_pointer} {__strong})(unsigned long long),geo::_copy_block_arc<void({block_pointer} {__strong})(unsigned long long)>,geo::_release_block_arc<void({block_pointer} {__strong})(unsigned long long)>,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF6540;

  return a1;
}

void geo::_retain_ptr<NSObject  {objcproto17OS_dispatch_queue}* {__strong},geo::_retain_dispatch_arc<NSObject  {objcproto17OS_dispatch_queue}* {__strong}>,geo::_release_dispatch_arc,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF64E0;

  JUMPOUT(0x18D76437CLL);
}

void geo::_retain_ptr<void({block_pointer} {__strong})(unsigned long long),geo::_copy_block_arc<void({block_pointer} {__strong})(unsigned long long)>,geo::_release_block_arc<void({block_pointer} {__strong})(unsigned long long)>,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF6540;

  JUMPOUT(0x18D76437CLL);
}

void std::__destroy_at[abi:ne180100]<LoadItem,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)(a1 + 136) = &off_1E1BF6400;

  *(_QWORD *)(a1 + 112) = &off_1E1BF6400;
  v2 = *(_QWORD **)(a1 + 80);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},LoadItem::Requester>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
    operator delete(v4);
}

uint64_t geo::_retain_ptr<GEOTileData * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF6400;

  return a1;
}

void geo::_retain_ptr<GEOTileData * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF6400;

  JUMPOUT(0x18D76437CLL);
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},LoadItem::Requester>,0>(uint64_t a1)
{

  *(_QWORD *)(a1 + 104) = &off_1E1BF6500;
  *(_QWORD *)(a1 + 80) = &off_1E1BF6520;

  *(_QWORD *)(a1 + 56) = &off_1E1BF64E0;
  *(_QWORD *)(a1 + 32) = &off_1E1BF6480;

  *(_QWORD *)(a1 + 8) = &off_1E1BF64C0;
}

uint64_t ___ZN3geo13DispatchTimerC2EPU28objcproto17OS_dispatch_queue8NSObjectNSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  dispatch_source_set_timer(*(dispatch_source_t *)(v1 + 8), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  v2 = *(_QWORD *)(v1 + 40);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
}

void geo::DispatchTimer::~DispatchTimer(dispatch_source_t *this)
{
  geo::DispatchTimer::~DispatchTimer(this);
  JUMPOUT(0x18D76437CLL);
}

{
  geo::DispatchTimer *v2;
  uint64_t v3;

  *this = (dispatch_source_t)&off_1E1BF6560;
  dispatch_source_set_event_handler(this[1], &__block_literal_global_409);
  v2 = (geo::DispatchTimer *)this[5];
  if (v2 == (geo::DispatchTimer *)(this + 2))
  {
    v3 = 4;
    v2 = (geo::DispatchTimer *)(this + 2);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }

}

void ___ZL9_noNetErrv_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v0 = (void *)MEMORY[0x1E0CB35C8];
  GEOErrorReason(CFSTR("Cannot be done without using the network"));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "GEOErrorWithCode:userInfo:", -6);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)qword_1ECDBB840;
  qword_1ECDBB840 = v1;

}

void sub_1888ED5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void geo::_retain_ptr<GEOTileData * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::reset(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = a2;
  v7 = v3;
  if (v3)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  v6 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;

}

uint64_t ___ZN3geo13DispatchTimer8scheduleEyy11qos_class_t_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  dispatch_source_set_timer(*(dispatch_source_t *)(v1 + 8), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  v2 = *(_QWORD *)(v1 + 40);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
}

uint64_t geo::_retain_ptr<NSMutableSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF6420;

  return a1;
}

void geo::_retain_ptr<NSMutableSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF6420;

  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__list_imp<std::__list_iterator<LoadItem,void *>>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void ___ZL11_corruptErrv_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:", -11);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDBB850;
  qword_1ECDBB850 = v0;

}

void std::deque<ErrorInfo>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[5] + a1[4] - 1;
  v3 = *(_QWORD *)(a1[1] + 8 * (v2 / 0x49)) + 56 * (v2 % 0x49);
  std::__list_imp<std::__list_iterator<LoadItem,void *>>::clear((_QWORD *)(v3 + 32));
  *(_QWORD *)(v3 + 8) = &off_1E1BF64A0;

  v4 = a1[2];
  v5 = v4 == a1[1];
  v6 = 73 * ((v4 - a1[1]) >> 3) - 1;
  v8 = a1[4];
  v7 = a1[5];
  a1[5] = v7 - 1;
  if (v5)
    v6 = 0;
  if ((unint64_t)(v6 - (v7 + v8) - 145) <= 0xFFFFFFFFFFFFFF6DLL)
  {
    operator delete(*(void **)(v4 - 8));
    a1[2] -= 8;
  }
}

uint64_t geo::_retain_ptr<NSError * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF64A0;

  return a1;
}

void geo::_retain_ptr<NSError * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF64A0;

  JUMPOUT(0x18D76437CLL);
}

void std::__list_imp<std::pair<_GEOTileKey,LoadItem::Requester>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];

        v3[16] = (uint64_t)&off_1E1BF6500;
        v3[13] = (uint64_t)&off_1E1BF6520;

        v3[10] = (uint64_t)&off_1E1BF64E0;
        v3[7] = (uint64_t)&off_1E1BF6480;

        v3[4] = (uint64_t)&off_1E1BF64C0;
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__split_buffer<ErrorInfo *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

LoadItem::Requester *LoadItem::Requester::Requester(LoadItem::Requester *this, const LoadItem::Requester *a2)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;

  *(_QWORD *)this = &off_1E1BF64C0;
  *((_QWORD *)this + 1) = 0;
  v4 = *((id *)a2 + 1);
  v5 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4;

  *((_QWORD *)this + 3) = &off_1E1BF6480;
  *((_QWORD *)this + 4) = 0;
  v6 = *((id *)a2 + 4);
  v7 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v6;

  *((_QWORD *)this + 6) = &off_1E1BF64E0;
  *((_QWORD *)this + 7) = 0;
  v8 = *((id *)a2 + 7);
  v9 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v8;

  *((_QWORD *)this + 9) = &off_1E1BF6520;
  *((_QWORD *)this + 10) = 0;
  v10 = (void *)MEMORY[0x18D765024](*((_QWORD *)a2 + 10));
  if (v10)
  {
    v11 = v10;
    v12 = (void *)objc_msgSend(v10, "copy");

  }
  else
  {
    v12 = 0;
  }
  v13 = MEMORY[0x18D765024](v12);
  v14 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v13;

  *((_QWORD *)this + 12) = &off_1E1BF6500;
  *((_QWORD *)this + 13) = 0;
  v15 = (void *)MEMORY[0x18D765024](*((_QWORD *)a2 + 13));
  if (v15)
  {
    v16 = v15;
    v17 = (void *)objc_msgSend(v15, "copy");

  }
  else
  {
    v17 = 0;
  }
  v18 = MEMORY[0x18D765024](v17);
  v19 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v18;

  v20 = *(_OWORD *)((char *)a2 + 120);
  v21 = *(_OWORD *)((char *)a2 + 136);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *(_OWORD *)((char *)this + 136) = v21;
  *(_OWORD *)((char *)this + 120) = v20;
  *((_QWORD *)this + 20) = *((id *)a2 + 20);
  *(_OWORD *)((char *)this + 168) = *(_OWORD *)((char *)a2 + 168);
  return this;
}

void sub_1888EDC30(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 72) = v6;
  *(_QWORD *)(v1 + 48) = v5;

  *(_QWORD *)(v1 + 24) = v4;
  *(_QWORD *)v1 = v3;

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF6520;

  return a1;
}

uint64_t geo::_retain_ptr<GEOApplicationAuditToken * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF6480;

  return a1;
}

uint64_t geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF64C0;

  return a1;
}

void geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF64C0;

  JUMPOUT(0x18D76437CLL);
}

void geo::_retain_ptr<GEOApplicationAuditToken * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF6480;

  JUMPOUT(0x18D76437CLL);
}

void geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF6520;

  JUMPOUT(0x18D76437CLL);
}

uint64_t geo::_retain_ptr<void({block_pointer} {__strong})(_GEOTileKey const*,GEOTileData *,unsigned long,NSError *,NSDictionary *),geo::_copy_block_arc<void({block_pointer} {__strong})(_GEOTileKey const*,GEOTileData *,unsigned long,NSError *,NSDictionary *)>,geo::_release_block_arc<void({block_pointer} {__strong})(_GEOTileKey const*,GEOTileData *,unsigned long,NSError *,NSDictionary *)>,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF6500;

  return a1;
}

void geo::_retain_ptr<void({block_pointer} {__strong})(_GEOTileKey const*,GEOTileData *,unsigned long,NSError *,NSDictionary *),geo::_copy_block_arc<void({block_pointer} {__strong})(_GEOTileKey const*,GEOTileData *,unsigned long,NSError *,NSDictionary *)>,geo::_release_block_arc<void({block_pointer} {__strong})(_GEOTileKey const*,GEOTileData *,unsigned long,NSError *,NSDictionary *)>,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF6500;

  JUMPOUT(0x18D76437CLL);
}

void ___ZL25_cancelWithReplacementErrv_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  const __CFString *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v3 = CFSTR("LoadReplaced");
  v4[0] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, &v3, 1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:userInfo:", -2, v0);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)qword_1ECDBB860;
  qword_1ECDBB860 = v1;

}

void sub_1888EDF18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(LoadItem::Requester const&),std::allocator<void({block_pointer} {__strong})(LoadItem::Requester const&)>,void ()(LoadItem::Requester&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(LoadItem::Requester const&),std::allocator<void({block_pointer} {__strong})(LoadItem::Requester const&)>,void ()(LoadItem::Requester&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x18D76437CLL);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(LoadItem::Requester const&),std::allocator<void({block_pointer} {__strong})(LoadItem::Requester const&)>,void ()(LoadItem::Requester&)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(LoadItem::Requester const&),std::allocator<void({block_pointer} {__strong})(LoadItem::Requester const&)>,void ()(LoadItem::Requester&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_1E1BFA2E0;
  result = MEMORY[0x18D765024](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(LoadItem::Requester const&),std::allocator<void({block_pointer} {__strong})(LoadItem::Requester const&)>,void ()(LoadItem::Requester&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(LoadItem::Requester const&),std::allocator<void({block_pointer} {__strong})(LoadItem::Requester const&)>,void ()(LoadItem::Requester&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void({block_pointer} {__strong})(LoadItem::Requester const&),std::allocator<void({block_pointer} {__strong})(LoadItem::Requester const&)>,void ()(LoadItem::Requester&)>::target_type()
{
}

uint64_t _ZNSt3__110__function6__funcIZZ51__GEOTileLoader__decodePreliminaryTileData_forKey__EUb_E3__1NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEED1Ev(uint64_t a1)
{

  return a1;
}

void _ZNSt3__110__function6__funcIZZ51__GEOTileLoader__decodePreliminaryTileData_forKey__EUb_E3__1NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEED0Ev(uint64_t a1)
{

  JUMPOUT(0x18D76437CLL);
}

char *_ZNKSt3__110__function6__funcIZZ51__GEOTileLoader__decodePreliminaryTileData_forKey__EUb_E3__1NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  id v3;
  uint64_t v4;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E1BFB200;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(id *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 3) = v3;
  *((_QWORD *)v2 + 4) = v4;
  return v2;
}

id _ZNKSt3__110__function6__funcIZZ51__GEOTileLoader__decodePreliminaryTileData_forKey__EUb_E3__1NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE7__cloneEPNS0_6__baseIS8_EE(uint64_t a1, uint64_t a2)
{
  id result;
  uint64_t v5;

  *(_QWORD *)a2 = &off_1E1BFB200;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(id *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 32) = v5;
  return result;
}

void _ZNSt3__110__function6__funcIZZ51__GEOTileLoader__decodePreliminaryTileData_forKey__EUb_E3__1NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE7destroyEv(uint64_t a1)
{

}

void _ZNSt3__110__function6__funcIZZ51__GEOTileLoader__decodePreliminaryTileData_forKey__EUb_E3__1NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE18destroy_deallocateEv(id *a1)
{

  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZZ51__GEOTileLoader__decodePreliminaryTileData_forKey__EUb_E3__1NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEEclES7_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = a2[15];
  if ((v2 & 0x60) != 0)
  {
    if ((v2 & 0x40) != 0)
    {
      v5 = **(void ***)(a1 + 32);
      if (!v5)
      {
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = *(void ***)(a1 + 32);
        v8 = *v7;
        *v7 = (void *)v6;

        v5 = **(void ***)(a1 + 32);
      }
      objc_msgSend(v5, "addObject:", a2[1]);
    }
    v9 = (void *)MEMORY[0x18D765024](a2[13]);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZZZ51__GEOTileLoader__decodePreliminaryTileData_forKey__EUb_ENK3__1clERKN8LoadItem9RequesterE_block_invoke;
    block[3] = &unk_1E1C00038;
    v14 = *(_OWORD *)(a1 + 8);
    v13 = v9;
    v12 = *(id *)(a1 + 24);
    v10 = v9;
    LoadItem::Requester::performAsyncOnCallbackQueue((uint64_t)a2, block);

  }
}

uint64_t _ZNKSt3__110__function6__funcIZZ51__GEOTileLoader__decodePreliminaryTileData_forKey__EUb_E3__1NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ51__GEOTileLoader__decodePreliminaryTileData_forKey__EUb_E3__1))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ51__GEOTileLoader__decodePreliminaryTileData_forKey__EUb_E3__1NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE11target_typeEv()
{
  return &_ZTIZZ51__GEOTileLoader__decodePreliminaryTileData_forKey__EUb_E3__1;
}

void ___ZZZ51__GEOTileLoader__decodePreliminaryTileData_forKey__EUb_ENK3__1clERKN8LoadItem9RequesterE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  const __CFString *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = *(_OWORD *)(a1 + 48);
  v2 = *(void **)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  v3 = objc_msgSend(v2, "length");
  v5 = CFSTR("GEOTileLoadResultIsPreliminary");
  v6 = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, __int128 *, void *, uint64_t, _QWORD, void *))(v1 + 16))(v1, &v7, v2, v3, 0, v4);

}

void sub_1888EE49C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>(__int128 *result, __int128 *a2, __int128 *a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v3 = *((_DWORD *)a2 + 4);
  v4 = *((_DWORD *)a3 + 4);
  if (v3 <= *((_DWORD *)result + 4))
  {
    if (v4 > v3)
    {
      v12 = *((_QWORD *)a2 + 6);
      v14 = a2[1];
      v13 = a2[2];
      v15 = *a2;
      v17 = a3[1];
      v16 = a3[2];
      v18 = *a3;
      *((_QWORD *)a2 + 6) = *((_QWORD *)a3 + 6);
      a2[1] = v17;
      a2[2] = v16;
      *a2 = v18;
      *a3 = v15;
      a3[1] = v14;
      a3[2] = v13;
      *((_QWORD *)a3 + 6) = v12;
      if (*((_DWORD *)a2 + 4) > *((_DWORD *)result + 4))
      {
        v19 = *((_QWORD *)result + 6);
        v21 = result[1];
        v20 = result[2];
        v22 = *result;
        v24 = a2[1];
        v23 = a2[2];
        v25 = *a2;
        *((_QWORD *)result + 6) = *((_QWORD *)a2 + 6);
        result[1] = v24;
        result[2] = v23;
        *result = v25;
        *a2 = v22;
        a2[1] = v21;
        a2[2] = v20;
        *((_QWORD *)a2 + 6) = v19;
      }
    }
  }
  else
  {
    if (v4 <= v3)
    {
      v26 = *((_QWORD *)result + 6);
      v28 = result[1];
      v27 = result[2];
      v29 = *result;
      v31 = a2[1];
      v30 = a2[2];
      v32 = *a2;
      *((_QWORD *)result + 6) = *((_QWORD *)a2 + 6);
      result[1] = v31;
      result[2] = v30;
      *result = v32;
      *a2 = v29;
      a2[1] = v28;
      a2[2] = v27;
      *((_QWORD *)a2 + 6) = v26;
      if (*((_DWORD *)a3 + 4) <= *((_DWORD *)a2 + 4))
        return result;
      v5 = *((_QWORD *)a2 + 6);
      v7 = a2[1];
      v6 = a2[2];
      v8 = *a2;
      v34 = a3[1];
      v33 = a3[2];
      v35 = *a3;
      *((_QWORD *)a2 + 6) = *((_QWORD *)a3 + 6);
      a2[1] = v34;
      a2[2] = v33;
      *a2 = v35;
    }
    else
    {
      v5 = *((_QWORD *)result + 6);
      v7 = result[1];
      v6 = result[2];
      v8 = *result;
      v10 = a3[1];
      v9 = a3[2];
      v11 = *a3;
      *((_QWORD *)result + 6) = *((_QWORD *)a3 + 6);
      result[1] = v10;
      result[2] = v9;
      *result = v11;
    }
    *a3 = v8;
    a3[1] = v7;
    a3[2] = v6;
    *((_QWORD *)a3 + 6) = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  __int128 v50;

  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 40) > *(_DWORD *)(a1 + 16))
      {
        v6 = *(_QWORD *)(a1 + 48);
        v8 = *(_OWORD *)(a1 + 16);
        v7 = *(_OWORD *)(a1 + 32);
        v9 = *(_OWORD *)a1;
        v10 = *(_OWORD *)(a2 - 40);
        v11 = *(_OWORD *)(a2 - 24);
        v12 = *(_OWORD *)(a2 - 56);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a1 + 32) = v11;
        *(_OWORD *)a1 = v12;
        *(_OWORD *)(a2 - 56) = v9;
        *(_OWORD *)(a2 - 40) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a2 - 56));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>(a1, a1 + 56, a1 + 112, (__int128 *)(a2 - 56));
      return 1;
    case 5:
      v22 = (__int128 *)(a1 + 56);
      v23 = (__int128 *)(a1 + 112);
      v24 = (__int128 *)(a1 + 168);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>(a1, a1 + 56, a1 + 112, (__int128 *)(a1 + 168));
      if (*(_DWORD *)(a2 - 40) <= *(_DWORD *)(a1 + 184))
        return 1;
      v25 = *(_QWORD *)(a1 + 216);
      v27 = *(_OWORD *)(a1 + 184);
      v26 = *(_OWORD *)(a1 + 200);
      v28 = *v24;
      v29 = *(_OWORD *)(a2 - 40);
      v30 = *(_OWORD *)(a2 - 24);
      v31 = *(_OWORD *)(a2 - 56);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 184) = v29;
      *(_OWORD *)(a1 + 200) = v30;
      *v24 = v31;
      *(_OWORD *)(a2 - 56) = v28;
      *(_OWORD *)(a2 - 40) = v27;
      *(_OWORD *)(a2 - 24) = v26;
      *(_QWORD *)(a2 - 8) = v25;
      if (*(_DWORD *)(a1 + 184) <= *(_DWORD *)(a1 + 128))
        return 1;
      v32 = *(_QWORD *)(a1 + 160);
      v34 = *(_OWORD *)(a1 + 128);
      v33 = *(_OWORD *)(a1 + 144);
      v35 = *v23;
      v36 = *(_OWORD *)(a1 + 184);
      *v23 = *v24;
      *(_OWORD *)(a1 + 128) = v36;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 216);
      *v24 = v35;
      *(_OWORD *)(a1 + 184) = v34;
      *(_OWORD *)(a1 + 200) = v33;
      *(_QWORD *)(a1 + 216) = v32;
      if (*(_DWORD *)(a1 + 128) <= *(_DWORD *)(a1 + 72))
        return 1;
      v37 = *(_QWORD *)(a1 + 104);
      v39 = *(_OWORD *)(a1 + 72);
      v38 = *(_OWORD *)(a1 + 88);
      v40 = *v22;
      v41 = *(_OWORD *)(a1 + 128);
      *v22 = *v23;
      *(_OWORD *)(a1 + 72) = v41;
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
      *v23 = v40;
      *(_OWORD *)(a1 + 128) = v39;
      *(_OWORD *)(a1 + 144) = v38;
      *(_QWORD *)(a1 + 160) = v37;
      if (*(_DWORD *)(a1 + 72) <= *(_DWORD *)(a1 + 16))
        return 1;
      v42 = *(_QWORD *)(a1 + 48);
      v44 = *(_OWORD *)(a1 + 16);
      v43 = *(_OWORD *)(a1 + 32);
      v45 = *(_OWORD *)a1;
      v46 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)a1 = *v22;
      *(_OWORD *)(a1 + 16) = v46;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
      *v22 = v45;
      *(_OWORD *)(a1 + 72) = v44;
      *(_OWORD *)(a1 + 88) = v43;
      result = 1;
      *(_QWORD *)(a1 + 104) = v42;
      return result;
    default:
      v13 = a1 + 112;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a1 + 112));
      v14 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = *(_DWORD *)(v14 + 16);
    if (v17 > *(_DWORD *)(v13 + 16))
    {
      v50 = *(_OWORD *)v14;
      v47 = *(_OWORD *)(v14 + 20);
      v48 = *(_OWORD *)(v14 + 36);
      v49 = *(_DWORD *)(v14 + 52);
      v18 = v15;
      while (1)
      {
        v19 = a1 + v18;
        v20 = *(_OWORD *)(a1 + v18 + 128);
        *(_OWORD *)(v19 + 168) = *(_OWORD *)(a1 + v18 + 112);
        *(_OWORD *)(v19 + 184) = v20;
        *(_OWORD *)(v19 + 200) = *(_OWORD *)(a1 + v18 + 144);
        *(_QWORD *)(v19 + 216) = *(_QWORD *)(a1 + v18 + 160);
        if (v18 == -112)
          break;
        v18 -= 56;
        if (v17 <= *(_DWORD *)(v19 + 72))
        {
          v21 = a1 + v18 + 168;
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *(_OWORD *)v21 = v50;
      *(_DWORD *)(v21 + 16) = v17;
      *(_OWORD *)(v21 + 20) = v47;
      *(_OWORD *)(v21 + 36) = v48;
      *(_DWORD *)(v21 + 52) = v49;
      if (++v16 == 8)
        return v14 + 56 == a2;
    }
    v13 = v14;
    v15 += 56;
    v14 += 56;
    if (v14 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*((_DWORD *)a4 + 4) > *(_DWORD *)(a3 + 16))
  {
    v9 = *(_QWORD *)(a3 + 48);
    v10 = *(_OWORD *)(a3 + 16);
    result = *(__n128 *)(a3 + 32);
    v11 = *(_OWORD *)a3;
    v13 = a4[1];
    v12 = a4[2];
    v14 = *a4;
    *(_QWORD *)(a3 + 48) = *((_QWORD *)a4 + 6);
    *(_OWORD *)(a3 + 16) = v13;
    *(_OWORD *)(a3 + 32) = v12;
    *(_OWORD *)a3 = v14;
    *a4 = v11;
    a4[1] = v10;
    a4[2] = (__int128)result;
    *((_QWORD *)a4 + 6) = v9;
    if (*(_DWORD *)(a3 + 16) > *(_DWORD *)(a2 + 16))
    {
      v15 = *(_QWORD *)(a2 + 48);
      v16 = *(_OWORD *)(a2 + 16);
      result = *(__n128 *)(a2 + 32);
      v17 = *(_OWORD *)a2;
      v19 = *(_OWORD *)(a3 + 16);
      v18 = *(_OWORD *)(a3 + 32);
      v20 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v19;
      *(_OWORD *)(a2 + 32) = v18;
      *(_OWORD *)a2 = v20;
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v16;
      *(__n128 *)(a3 + 32) = result;
      *(_QWORD *)(a3 + 48) = v15;
      if (*(_DWORD *)(a2 + 16) > *(_DWORD *)(a1 + 16))
      {
        v21 = *(_QWORD *)(a1 + 48);
        v22 = *(_OWORD *)(a1 + 16);
        result = *(__n128 *)(a1 + 32);
        v23 = *(_OWORD *)a1;
        v25 = *(_OWORD *)(a2 + 16);
        v24 = *(_OWORD *)(a2 + 32);
        v26 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 16) = v25;
        *(_OWORD *)(a1 + 32) = v24;
        *(_OWORD *)a1 = v26;
        *(_OWORD *)a2 = v23;
        *(_OWORD *)(a2 + 16) = v22;
        *(__n128 *)(a2 + 32) = result;
        *(_QWORD *)(a2 + 48) = v21;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__5NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEED1Ev(uint64_t a1)
{

  return a1;
}

void _ZNSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__5NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEED0Ev(uint64_t a1)
{

  JUMPOUT(0x18D76437CLL);
}

char *_ZNKSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__5NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE7__cloneEv(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E1BFB0F8;
  *((_QWORD *)v2 + 1) = *(id *)(a1 + 8);
  *((_OWORD *)v2 + 1) = *(_OWORD *)(a1 + 16);
  *((_QWORD *)v2 + 4) = *(id *)(a1 + 32);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__5NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE7__cloneEPNS0_6__baseIS8_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E1BFB0F8;
  *(_QWORD *)(a2 + 8) = *(id *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(id *)(a1 + 32);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__5NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE7destroyEv(uint64_t a1)
{

}

uint64_t _ZNKSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__5NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__5))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__5NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE11target_typeEv()
{
  return &_ZTIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__5;
}

uint64_t _ZNSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__6NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEED1Ev(uint64_t a1)
{

  return a1;
}

void _ZNSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__6NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEED0Ev(uint64_t a1)
{

  JUMPOUT(0x18D76437CLL);
}

char *_ZNKSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__6NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE7__cloneEv(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E1BFB150;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(id *)(a1 + 24);
  *((_QWORD *)v2 + 4) = *(id *)(a1 + 32);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__6NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE7__cloneEPNS0_6__baseIS8_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E1BFB150;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(id *)(a1 + 24);
  *(_QWORD *)(a2 + 32) = *(id *)(a1 + 32);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__6NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE7destroyEv(uint64_t a1)
{

}

void _ZNSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__6NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE18destroy_deallocateEv(id *a1)
{

  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__6NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEEclES7_(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  id v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (**(_BYTE **)(a1 + 40))
  {
    if ((*(_BYTE *)(a2 + 120) & 0x40) == 0)
      return;
    v4 = **(void ***)(a1 + 48);
    if (!v4)
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = *(void ***)(a1 + 48);
      v7 = *v6;
      *v6 = (void *)v5;

      v4 = **(void ***)(a1 + 48);
    }
    objc_msgSend(v4, "addObject:", *(_QWORD *)(a2 + 8));
  }
  v8 = (void *)MEMORY[0x18D765024](*(_QWORD *)(a2 + 104));
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___ZZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_ENK3__6clERKN8LoadItem9RequesterE_block_invoke;
  v12[3] = &unk_1E1C00438;
  v16 = *(_OWORD *)(a1 + 8);
  v15 = v8;
  v9 = *(id *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v13 = v9;
  v14 = v10;
  v11 = v8;
  LoadItem::Requester::performAsyncOnCallbackQueue(a2, v12);

}

uint64_t _ZNKSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__6NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__6))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__6NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE11target_typeEv()
{
  return &_ZTIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__6;
}

uint64_t ___ZZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_ENK3__6clERKN8LoadItem9RequesterE_block_invoke(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 56);
  return (*(uint64_t (**)(_QWORD, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), &v2, 0, 0, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t std::list<_GEOTileKey>::splice(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[2];
  if (v3)
  {
    v5 = *a3;
    v4 = (uint64_t *)a3[1];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = v4;
    *v4 = v7;
    *a2 = v5;
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZ47__GEOTileLoader_proxy_willGoToNetworkForTiles__EUb1_E3__8NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEED0Ev()
{
  JUMPOUT(0x18D76437CLL);
}

__n128 _ZNKSt3__110__function6__funcIZZ47__GEOTileLoader_proxy_willGoToNetworkForTiles__EUb1_E3__8NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E1BFB1A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ47__GEOTileLoader_proxy_willGoToNetworkForTiles__EUb1_E3__8NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE7__cloneEPNS0_6__baseIS8_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E1BFB1A8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZ47__GEOTileLoader_proxy_willGoToNetworkForTiles__EUb1_E3__8NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ47__GEOTileLoader_proxy_willGoToNetworkForTiles__EUb1_E3__8))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ47__GEOTileLoader_proxy_willGoToNetworkForTiles__EUb1_E3__8NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE11target_typeEv()
{
  return &_ZTIZZ47__GEOTileLoader_proxy_willGoToNetworkForTiles__EUb1_E3__8;
}

uint64_t ___ZZZ47__GEOTileLoader_proxy_willGoToNetworkForTiles__EUb1_ENK3__8clERN8LoadItem9RequesterE_block_invoke(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 48);
  return (*(uint64_t (**)(_QWORD, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v2, 0, 0, *(_QWORD *)(a1 + 32), 0);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},LoadItem::Requester>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},LoadItem::Requester>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},LoadItem::Requester>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void sub_1888EFCDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888EFE44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888EFFBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1888F0090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888F0210(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888F0398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

dispatch_data_t GEODispatchDataForMemoryMappedFileFromFileDescriptor(int a1, _QWORD *a2)
{
  off_t st_size;
  void *v5;
  void *v6;
  const __CFString *v7;
  dispatch_data_t v9;
  int v10;
  int *v11;
  char *v12;
  stat v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  memset(&v13, 0, sizeof(v13));
  if (fstat(a1, &v13) == -1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Could not get file information", buf, 2u);
      if (a2)
        goto LABEL_8;
    }
    else if (a2)
    {
LABEL_8:
      v6 = (void *)MEMORY[0x1E0CB35C8];
      v7 = CFSTR("Could not get file information");
      goto LABEL_9;
    }
LABEL_14:
    v9 = 0;
    return v9;
  }
  st_size = v13.st_size;
  v5 = mmap(0, v13.st_size, 1, 2, a1, 0);
  if ((unint64_t)v5 + 1 <= 1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = *__error();
      v11 = __error();
      v12 = strerror(*v11);
      *(_DWORD *)buf = 67109378;
      v15 = v10;
      v16 = 2080;
      v17 = v12;
      _os_log_error_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Could not mmap file: [%i] %s", buf, 0x12u);
      if (a2)
        goto LABEL_5;
    }
    else if (a2)
    {
LABEL_5:
      v6 = (void *)MEMORY[0x1E0CB35C8];
      v7 = CFSTR("Could not mmap file");
LABEL_9:
      objc_msgSend(v6, "GEOErrorWithCode:reason:", -18, v7);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
      return (dispatch_data_t)0;
    }
    goto LABEL_14;
  }
  v9 = dispatch_data_create(v5, st_size, 0, (dispatch_block_t)*MEMORY[0x1E0C80CE8]);
  return v9;
}

void sub_1888F13EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888F144C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888F15D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1888F17A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888F188C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888F1CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1888F1DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  zilch::Message::~Message((zilch::Message *)va);
  _Unwind_Resume(a1);
}

void sub_1888F1E80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888F1F64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void geo::TransitEdgePiece::findPiecesForLink(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, id *);
  unint64_t v5;
  void *v6;
  int v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  id v18;
  int v19;
  char v20;

  v3 = a1;
  v4 = a2;
  v5 = 0;
  v16 = 0;
  v18 = 0;
  v20 = 0;
  while (v5 < *(_QWORD *)(objc_msgSend(v3, "transitIndexRange", v16) + 8))
  {
    GEOVectorTransitLineAlongLink(v3, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = geo::codec::transitTravelTimeForLineAlongLink((_QWORD *)objc_msgSend(v3, "get"), v5);
    v8 = v3;
    v9 = v6;
    v10 = v16;
    v16 = v8;

    v11 = v18;
    v17 = v5;
    v18 = v9;

    v19 = v7;
    v20 = 0;
    v4[2](v4, &v16);
    v12 = v8;
    v13 = v9;
    v14 = v16;
    v16 = v12;

    v15 = v18;
    v17 = v5;
    v18 = v13;

    v19 = v7;
    v20 = 1;
    v4[2](v4, &v16);

    ++v5;
  }

}

void sub_1888F20DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t geo::MapEdgeTransit::MapEdgeTransit(uint64_t a1, _QWORD *a2)
{
  double v2;
  double v3;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  long double *v15;
  _QWORD *v16;
  void **v17;
  void **v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  unsigned int v61;
  uint64_t i;
  uint64_t v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  float *v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  unint64_t v83;
  id *v84;
  void *v85;
  id v86;
  _QWORD *v87;
  id v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  id v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  id v110;
  _QWORD *v111;
  id v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  id v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v135;
  uint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 8) = 0u;
  v152 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = &off_1E1BF65C0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = a2[4];
  v6 = a2[1];
  v7 = (char *)(v6 + 8 * (v5 >> 7));
  v151 = a1 + 40;
  if (a2[2] == v6)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v6 + 8 * ((a2[5] + v5) >> 7));
  }
  else
  {
    v8 = *(_QWORD *)v7 + 32 * (a2[4] & 0x7FLL);
    v9 = a2[5] + v5;
    v10 = (char *)(v6 + 8 * (v9 >> 7));
    v11 = *(_QWORD *)v10 + 32 * (v9 & 0x7F);
  }
  if (v11 == v8
    || (v12 = ((v11 - *(_QWORD *)v10) >> 5) + 16 * (v10 - v7),
        v13 = v8 - *(_QWORD *)v7,
        v14 = v12 - (v13 >> 5),
        v12 == v13 >> 5))
  {
    *(_QWORD *)(a1 + 88) = 0;
    v15 = (long double *)(a1 + 88);
    v16 = (_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 96) = 0;
    v157 = (_QWORD *)(a1 + 96);
LABEL_7:
    v154 = v16;
    v17 = *(void ***)(a1 + 56);
    if (v17 != *(void ***)(a1 + 48))
    {
      do
      {
        operator delete(*(v17 - 1));
        v18 = *(void ***)(a1 + 48);
        v17 = (void **)(*(_QWORD *)(a1 + 56) - 8);
        *(_QWORD *)(a1 + 56) = v17;
      }
      while (v17 != v18);
    }
    *(_QWORD *)(a1 + 72) = 0;
    v19 = (uint64_t)v17;
    goto LABEL_10;
  }
  v154 = (_QWORD *)(a1 + 80);
  if (((v14 + 1) & 0x7F) != 0)
    v29 = ((unint64_t)(v14 + 1) >> 7) + 1;
  else
    v29 = (unint64_t)(v14 + 1) >> 7;
  if (v29)
  {
    v161 = a1 + 64;
    *(_QWORD *)&v159 = std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>(a1 + 64, v29);
    *((_QWORD *)&v159 + 1) = v159;
    *(_QWORD *)&v160 = v159;
    *((_QWORD *)&v160 + 1) = v159 + 8 * v30;
    v31 = -v29;
    do
    {
      *(_QWORD *)&v158 = operator new(0x1000uLL);
      std::__split_buffer<geo::TransitEdgePiece *>::push_back(&v159, &v158);
      v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    v33 = *(_QWORD **)(a1 + 56);
    v34 = -7 - (_QWORD)v33;
    while (v33 != *(_QWORD **)(a1 + 48))
    {
      --v33;
      v34 += 8;
      std::__split_buffer<geo::TransitEdgePiece *>::push_front((uint64_t)&v159, v33);
    }
    v35 = *(void **)(a1 + 40);
    v36 = *((_QWORD *)&v159 + 1);
    *(_QWORD *)(a1 + 40) = v159;
    *(_QWORD *)(a1 + 48) = v36;
    *(_QWORD *)&v159 = v35;
    *((_QWORD *)&v159 + 1) = v33;
    v37 = v160;
    v38 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v160;
    v160 = v38;
    if (v33 != (_QWORD *)v38)
      *(_QWORD *)&v160 = v38 + (-(v38 + v34) & 0xFFFFFFFFFFFFFFF8);
    if (v35)
    {
      operator delete(v35);
      v39 = *(_QWORD *)(a1 + 72);
      v36 = *(_QWORD *)(a1 + 48);
      v40 = *(_QWORD *)(a1 + 56);
    }
    else
    {
      v39 = *(_QWORD *)(a1 + 72);
      v40 = v37;
    }
    v135 = *v154;
    v137 = *v154 + v39;
    v136 = (uint64_t *)(v36 + 8 * (v137 >> 7));
    if (v40 == v36)
      v29 = 0;
    else
      v29 = *v136 + 32 * (v137 & 0x7F);
  }
  else
  {
    v135 = 0;
    v136 = 0;
  }
  v138 = *v136;
  v139 = v14 + ((v29 - *v136) >> 5);
  if (v139 < 1)
  {
    v142 = 127 - v139;
    v140 = &v136[-(v142 >> 7)];
    v141 = *v140 + 32 * (~(_BYTE)v142 & 0x7F);
  }
  else
  {
    v140 = &v136[(unint64_t)v139 >> 7];
    v141 = *v140 + 32 * (v139 & 0x7F);
  }
  v16 = v154;
  if (v29 != v141)
  {
    do
    {
      v143 = v138 + 4096;
      if (v136 == v140)
        v144 = v141;
      else
        v144 = v143;
      if (v29 == v144)
      {
        v144 = v29;
      }
      else
      {
        v145 = v29;
        do
        {
          *(_QWORD *)v145 = *(id *)v8;
          *(_QWORD *)(v145 + 8) = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v145 + 16) = *(id *)(v8 + 16);
          v146 = *(_DWORD *)(v8 + 24);
          *(_BYTE *)(v145 + 28) = *(_BYTE *)(v8 + 28);
          *(_DWORD *)(v145 + 24) = v146;
          v8 += 32;
          if (v8 - *(_QWORD *)v7 == 4096)
          {
            v147 = *((_QWORD *)v7 + 1);
            v7 += 8;
            v8 = v147;
          }
          v145 += 32;
        }
        while (v145 != v144);
        v16 = v154;
        v135 = *v154;
      }
      v135 += (v144 - v29) >> 5;
      *v16 = v135;
      if (v136 == v140)
        break;
      v148 = v136[1];
      ++v136;
      v138 = v148;
      v29 = v148;
    }
    while (v148 != v141);
  }
  *(_QWORD *)(a1 + 88) = 0;
  v15 = (long double *)(a1 + 88);
  *(_QWORD *)(a1 + 96) = 0;
  v157 = (_QWORD *)(a1 + 96);
  if (!v135)
    goto LABEL_7;
  v149 = *(_QWORD *)(a1 + 72);
  v17 = *(void ***)(a1 + 48);
  if (v149 >= 0x80)
  {
    operator delete(*v17);
    v17 = (void **)(*(_QWORD *)(a1 + 48) + 8);
    *(_QWORD *)(a1 + 48) = v17;
    v135 = *(_QWORD *)(a1 + 80);
    v149 = *(_QWORD *)(a1 + 72) - 128;
    *(_QWORD *)(a1 + 72) = v149;
  }
  v19 = *(_QWORD *)(a1 + 56);
  v150 = 16 * (v19 - (_QWORD)v17) - 1;
  if ((void **)v19 == v17)
    v150 = 0;
  if (v150 - (v149 + v135) >= 0x80)
  {
    operator delete(*(void **)(v19 - 8));
    v17 = *(void ***)(a1 + 48);
    v19 = *(_QWORD *)(a1 + 56) - 8;
    *(_QWORD *)(a1 + 56) = v19;
  }
LABEL_10:
  v20 = (v19 - (uint64_t)v17) >> 3;
  if (v20 >= (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 40)) >> 3)
    goto LABEL_34;
  if ((void **)v19 == v17)
  {
    v24 = 0;
    v21 = 0;
    goto LABEL_31;
  }
  v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>(a1 + 64, v20);
  v22 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v24 = &v21[8 * v23];
  v25 = v19 - v22;
  if (v19 == v22)
  {
LABEL_31:
    v28 = v19;
    goto LABEL_32;
  }
  v26 = 0;
  v27 = 8 * (v25 >> 3);
  do
  {
    *(_QWORD *)&v21[v26] = *(_QWORD *)(v22 + v26);
    v26 += 8;
  }
  while (v27 != v26);
  v19 = *(_QWORD *)(a1 + 48);
  v28 = *(_QWORD *)(a1 + 56);
LABEL_32:
  v41 = v28 - v19;
  v42 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 48) = v21;
  *(_QWORD *)(a1 + 56) = &v21[v41];
  *(_QWORD *)(a1 + 64) = v24;
  if (v42)
    operator delete(v42);
LABEL_34:
  v43 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) != v43)
  {
    v44 = *(_QWORD *)(a1 + 72);
    v45 = (_QWORD *)(v43 + 8 * (v44 >> 7));
    v46 = *v45 + 32 * (v44 & 0x7F);
    v155 = *(_QWORD *)(v43 + (((*v154 + v44) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((*v154 + v44) & 0x7F);
    if (v46 != v155)
    {
      v47 = 0;
      do
      {
        v158 = 0uLL;
        objc_msgSend(*(id *)v46, "containingTile", v151, v152);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = objc_msgSend(v48, "tileKey");
        v50 = *(_QWORD *)v49;
        v51 = *(_QWORD *)v49 << 32;
        v52 = BYTE4(*(_QWORD *)v49) | ((((*(_QWORD *)v49 >> 40) | (*(unsigned __int16 *)(v49 + 8) << 24)) & 0x3FFFFFF) << 8) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(unsigned __int16 *)(v49 + 8) >> 2) << 34) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v49 + 10) & 0xF) << 48) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v49 + 10) >> 4) << 52);
        *(_QWORD *)((char *)&v159 + 1) = v51 & 0xFFFFC00000000000 | ((unint64_t)((*(_QWORD *)v49 >> 8) & 0x3F) << 40);
        LOBYTE(v159) = v50;
        *((_QWORD *)&v53 + 1) = v52;
        *(_QWORD *)&v53 = v51;
        *(_QWORD *)&v158 = v159;
        *((_QWORD *)&v158 + 1) = v53 >> 56;

        v54 = GEOMapRectForGEOTileKey((uint64_t)&v158);
        v56 = v55;
        v58 = v57;
        v60 = v59;
        *(_QWORD *)&v159 = 0;
        v61 = *(unsigned __int8 *)(v46 + 28);
        v156 = v45;
        if (*(_BYTE *)(v46 + 28))
          v61 = objc_msgSend(*(id *)v46, "sectionCount") - 1;
        for (i = v61; ; i += v74)
        {
          v63 = geo::codec::transitLinkPoints(objc_msgSend(*(id *)v46, "get"), i, &v159);
          v64 = v159;
          v65 = *(unsigned __int8 *)(v46 + 28);
          if ((_QWORD)v159)
          {
            *v157 += v159;
            v66 = v64 - 1;
            if (v65)
              v67 = -1;
            else
              v67 = 1;
            if (!v65)
              v66 = 0;
            if ((v47 & 1) != 0)
              v68 = v67;
            else
              v68 = 0;
            v69 = v68 + v66;
            if ((uint64_t)(v68 + v66) >= 0 && v69 < v64)
            {
              v70 = v68 + v66 + v67;
              v71 = (float *)(v63 + 8 * v69 + 4);
              v72 = v3;
              v73 = v2;
              do
              {
                v2 = v54 + *(v71 - 1) * v58;
                v3 = v56 + (float)(1.0 - *v71) * v60;
                if ((v47 & 1) != 0)
                  *v15 = GEOMetersBetweenMapPoints(v54 + *(v71 - 1) * v58, v3, v73, v72) + *v15;
                v47 = 1;
                if ((v70 & 0x8000000000000000) != 0)
                  break;
                v71 += 2 * v67;
                v72 = v3;
                v73 = v2;
                v32 = v70 >= v64;
                v70 += v67;
              }
              while (!v32);
            }
          }
          if (v65 && !i)
            break;
          if (v65)
          {
            v74 = -1;
          }
          else
          {
            if (i == objc_msgSend(*(id *)v46, "sectionCount") - 1)
              break;
            v74 = 1;
            if (*(_BYTE *)(v46 + 28))
              v74 = -1;
          }
        }
        v46 += 32;
        v45 = v156;
        if (v46 - *v156 == 4096)
        {
          v45 = v156 + 1;
          v46 = v156[1];
        }
      }
      while (v46 != v155);
    }
  }
  if (*v154)
  {
    v75 = *(_QWORD *)(a1 + 48);
    v76 = *(_QWORD *)(a1 + 72);
    v77 = *(_QWORD *)(v75 + ((v76 >> 4) & 0xFFFFFFFFFFFFFF8));
    v78 = v76 & 0x7F;
    v79 = v77 + 32 * v78;
    v80 = *v154 + v76 - 1;
    v81 = *(_QWORD *)(v75 + ((v80 >> 4) & 0xFFFFFFFFFFFFFF8));
    objc_msgSend(*(id *)v79, "containingTile");
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    v83 = v80 & 0x7F;
    v84 = (id *)(v81 + 32 * v83);
    objc_msgSend(*v84, "containingTile");
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    v86 = *(id *)v79;
    if (*(_BYTE *)(v79 + 28))
    {
      v87 = geo::codec::transitLinkGetToNodeID(objc_msgSend(v86, "get"), *(_QWORD *)(v77 + 32 * v78 + 8));
      v88 = v82;
      if (v88)
      {
        v89 = v88;
        v90 = -1;
        v91 = 40;
        while (++v90 < (unint64_t)objc_msgSend(v89, "transitNodeCount", v151))
        {
          v92 = objc_msgSend(v89, "transitNodes");
          v93 = v91 + 344;
          v94 = *(_QWORD **)(v92 + v91);
          v91 += 344;
          if (v94 == v87)
            goto LABEL_79;
        }
      }
    }
    else
    {
      v95 = geo::codec::transitLinkGetFromNodeID(objc_msgSend(v86, "get"), *(_QWORD *)(v77 + 32 * v78 + 8));
      v96 = v82;
      if (v96)
      {
        v97 = v96;
        v98 = -1;
        v99 = 40;
        while (++v98 < (unint64_t)objc_msgSend(v97, "transitNodeCount", v151))
        {
          v92 = objc_msgSend(v97, "transitNodes");
          v93 = v99 + 344;
          v100 = *(_QWORD **)(v92 + v99);
          v99 += 344;
          if (v100 == v95)
          {
LABEL_79:
            v101 = v92 + v93 - 384;

            *(_QWORD *)&v158 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
            *((_QWORD *)&v158 + 1) = v102;
            objc_msgSend(*(id *)v79, "containingTile");
            v103 = (void *)objc_claimAutoreleasedReturnValue();
            std::allocate_shared[abi:ne180100]<geo::MapNodeTransit,std::allocator<geo::MapNodeTransit>,GEOLocationCoordinate2D,GEOVectorTile * {__strong},GeoCodecsTransitNodeFeature *&,void>((uint64_t *)&v159, &v158, v103, v101);
            std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](v152, &v159);
            v104 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
            if (*((_QWORD *)&v159 + 1))
            {
              v105 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                std::__shared_weak_count::__release_weak(v104);
              }
            }

            goto LABEL_90;
          }
        }
      }
    }

    v159 = 0uLL;
    std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](v152, &v159);
    v107 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
    if (*((_QWORD *)&v159 + 1))
    {
      v108 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
LABEL_90:
    v110 = *v84;
    if (*(_BYTE *)(v81 + 32 * v83 + 28))
    {
      v111 = geo::codec::transitLinkGetFromNodeID(objc_msgSend(v110, "get"), *(_QWORD *)(v81 + 32 * v83 + 8));
      v112 = v85;
      if (v112)
      {
        v113 = v112;
        v114 = -1;
        v115 = 40;
        while (++v114 < (unint64_t)objc_msgSend(v113, "transitNodeCount", v151))
        {
          v116 = objc_msgSend(v113, "transitNodes");
          v117 = v115 + 344;
          v118 = *(_QWORD **)(v116 + v115);
          v115 += 344;
          if (v118 == v111)
            goto LABEL_100;
        }
      }
    }
    else
    {
      v119 = geo::codec::transitLinkGetToNodeID(objc_msgSend(v110, "get"), *(_QWORD *)(v81 + 32 * v83 + 8));
      v120 = v85;
      if (v120)
      {
        v121 = v120;
        v122 = -1;
        v123 = 40;
        while (++v122 < (unint64_t)objc_msgSend(v121, "transitNodeCount", v151))
        {
          v116 = objc_msgSend(v121, "transitNodes");
          v117 = v123 + 344;
          v124 = *(_QWORD **)(v116 + v123);
          v123 += 344;
          if (v124 == v119)
          {
LABEL_100:
            v125 = v116 + v117 - 384;

            *(_QWORD *)&v158 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
            *((_QWORD *)&v158 + 1) = v126;
            objc_msgSend(*v84, "containingTile");
            v127 = (void *)objc_claimAutoreleasedReturnValue();
            std::allocate_shared[abi:ne180100]<geo::MapNodeTransit,std::allocator<geo::MapNodeTransit>,GEOLocationCoordinate2D,GEOVectorTile * {__strong},GeoCodecsTransitNodeFeature *&,void>((uint64_t *)&v159, &v158, v127, v125);
            std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](a1 + 24, &v159);
            v128 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
            if (*((_QWORD *)&v159 + 1))
            {
              v129 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
            }

            goto LABEL_111;
          }
        }
      }
    }

    v159 = 0uLL;
    std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](a1 + 24, &v159);
    v131 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
    if (*((_QWORD *)&v159 + 1))
    {
      v132 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
LABEL_111:

  }
  return a1;
}

void sub_1888F2BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;

  std::deque<geo::TransitEdgePiece>::~deque[abi:ne180100](a9);
  *a11 = &unk_1E1BF68B8;
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)(a11 + 3));
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void geo::MapEdgeTransit::~MapEdgeTransit(geo::MapEdgeTransit *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E1BF65C0;
  v2 = (char *)this + 24;
  std::deque<geo::TransitEdgePiece>::~deque[abi:ne180100]((_QWORD *)this + 5);
  *(_QWORD *)this = &unk_1E1BF68B8;
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  geo::MapEdgeTransit::~MapEdgeTransit(this);
  JUMPOUT(0x18D76437CLL);
}

BOOL geo::MapEdgeTransit::operator==(geo::MapEdgeTransit *a1, geo::MapEdgeTransit *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  _BYTE v19[11];
  _BYTE v20[11];

  if ((*(unsigned int (**)(geo::MapEdgeTransit *))(*(_QWORD *)a2 + 24))(a2) != 1)
    return 0;
  v4 = geo::MapEdgeTransit::lineID(a1);
  if (v4 != geo::MapEdgeTransit::lineID(a2))
    return 0;
  v5 = *((_QWORD *)a1 + 10);
  v6 = *((_QWORD *)a2 + 10);
  result = (v5 | v6) == 0;
  if (v5 && v6)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a1 + 6) + ((*((_QWORD *)a1 + 9) >> 4) & 0xFFFFFFFFFFFFFF8));
    v9 = *((_QWORD *)a1 + 9) & 0x7FLL;
    v10 = (id *)(v8 + 32 * v9);
    v11 = *((_QWORD *)a2 + 9);
    v12 = *(_QWORD *)(*((_QWORD *)a2 + 6) + ((v11 >> 4) & 0xFFFFFFFFFFFFFF8));
    objc_msgSend(*v10, "containingTile");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "tileKey");
    *(_QWORD *)v20 = *(_QWORD *)v14;
    *(_DWORD *)&v20[7] = *(_DWORD *)(v14 + 7);

    objc_msgSend(*v10, "containingTile");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "tileKey");
    *(_QWORD *)v19 = *(_QWORD *)v16;
    *(_DWORD *)&v19[7] = *(_DWORD *)(v16 + 7);

    v17 = *(_QWORD *)v20 == *(_QWORD *)v19 && *(_QWORD *)&v20[3] == *(_QWORD *)&v19[3];
    if (v17 && *(unsigned __int8 *)(v8 + 32 * v9 + 28) == *(unsigned __int8 *)(v12 + 32 * (v11 & 0x7F) + 28))
    {
      v18 = objc_msgSend(*v10, "sectionOffset");
      return v18 == objc_msgSend(*(id *)(v12 + 32 * (v11 & 0x7F)), "sectionOffset");
    }
    return 0;
  }
  return result;
}

void sub_1888F2F78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t geo::MapEdgeTransit::lineID(geo::MapEdgeTransit *this)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 6) + ((*((_QWORD *)this + 9) >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * (*((_QWORD *)this + 9) & 0x7FLL)+ 16), "feature");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "featureID");

  return v2;
}

void sub_1888F2FE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t geo::MapEdgeTransit::flip@<X0>(geo::MapEdgeTransit *this@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  id v17;
  char v18;
  _OWORD v19[3];

  memset(v19, 0, sizeof(v19));
  v4 = *((_QWORD *)this + 9);
  v5 = v4 + *((_QWORD *)this + 10);
  v6 = *((_QWORD *)this + 6);
  v7 = *((_QWORD *)this + 7);
  v8 = (_QWORD *)(v6 + 8 * (v5 >> 7));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *v8 + 32 * (v5 & 0x7F);
  while (1)
  {
    v10 = (_QWORD *)(v6 + 8 * (v4 >> 7));
    v11 = v7 == v6 ? 0 : *v10 + 32 * (v4 & 0x7F);
    if (v10 >= v8 && (v10 != v8 || v11 >= v9))
      break;
    v13 = v9;
    if (v9 == *v8)
      v13 = *(v8 - 1) + 4096;
    *(_QWORD *)&v16 = 0;
    v17 = 0;
    v18 = 0;
    *(_QWORD *)&v16 = *(id *)(v13 - 32);
    objc_storeStrong(&v17, *(id *)(v13 - 16));
    v18 = *(_BYTE *)(v13 - 4) ^ 1;
    std::deque<geo::TransitEdgePiece>::push_back(v19, (uint64_t)&v16);

    if (v9 == *v8)
    {
      v14 = *--v8;
      v9 = v14 + 4096;
    }
    v9 -= 32;
    v4 = *((_QWORD *)this + 9);
    v6 = *((_QWORD *)this + 6);
    v7 = *((_QWORD *)this + 7);
  }
  std::allocate_shared[abi:ne180100]<geo::MapEdgeTransit,std::allocator<geo::MapEdgeTransit>,std::deque<geo::TransitEdgePiece> &,void>(v19, &v16);
  *a2 = v16;
  return std::deque<geo::TransitEdgePiece>::~deque[abi:ne180100](v19);
}

void sub_1888F3150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::deque<geo::TransitEdgePiece>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

id std::deque<geo::TransitEdgePiece>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  id result;
  char v13;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 16 * (v5 - v4) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<geo::TransitEdgePiece>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F);
  }
  v9 = *(id *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)v8 = v9;
  *(_QWORD *)(v8 + 8) = v10;
  result = v11;
  *(_QWORD *)(v8 + 16) = result;
  v13 = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(v8 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(v8 + 28) = v13;
  ++a1[5];
  return result;
}

void geo::MapEdgeTransit::coordinates(geo::MapEdgeTransit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  double *v32;
  float *v33;
  double v34;
  long double v35;
  double v36;
  double v37;
  double *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  double *v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[4];

  v53[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v50 = 0;
  v3 = *((_QWORD *)this + 6);
  if (*((_QWORD *)this + 7) != v3)
  {
    v4 = *((_QWORD *)this + 9);
    v5 = (_QWORD *)(v3 + 8 * (v4 >> 7));
    v6 = *v5 + 32 * (v4 & 0x7F);
    v47 = *(_QWORD *)(v3 + (((*((_QWORD *)this + 10) + v4) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*((_QWORD *)this + 10) + v4) & 0x7F);
    if (v6 != v47)
    {
      v7 = 0;
      v8 = (_QWORD *)(a2 + 16);
      do
      {
        v9 = *(unsigned __int8 *)(v6 + 28);
        v48 = v5;
        if (*(_BYTE *)(v6 + 28))
          v9 = objc_msgSend(*(id *)v6, "sectionCount") - 1;
        v10 = v9;
        v49 = v6;
        while (1)
        {
          v11 = geo::codec::transitLinkPoints(objc_msgSend(*(id *)v6, "get", v47), v10, &v50);
          v51 = 0;
          v52 = 0;
          objc_msgSend(*(id *)v6, "containingTile");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "tileKey");
          v14 = *(_QWORD *)v13;
          v15 = *(_QWORD *)v13 << 32;
          v16 = BYTE4(*(_QWORD *)v13) | ((((*(_QWORD *)v13 >> 40) | (*(unsigned __int16 *)(v13 + 8) << 24)) & 0x3FFFFFF) << 8) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(unsigned __int16 *)(v13 + 8) >> 2) << 34) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v13 + 10) & 0xF) << 48) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v13 + 10) >> 4) << 52);
          *(_QWORD *)((char *)v53 + 1) = v15 & 0xFFFFC00000000000 | ((unint64_t)((*(_QWORD *)v13 >> 8) & 0x3F) << 40);
          LOBYTE(v53[0]) = v14;
          *((_QWORD *)&v17 + 1) = v16;
          *(_QWORD *)&v17 = v15;
          v51 = v53[0];
          v52 = v17 >> 56;

          *(double *)&v18 = GEOMapRectForGEOTileKey((uint64_t)&v51);
          v22 = v50;
          if (v50)
          {
            v23 = *(double *)&v18;
            v24 = v19;
            v25 = v20;
            v26 = v21;
            v27 = *(unsigned __int8 *)(v6 + 28);
            if (v27)
              v28 = -1;
            else
              v28 = 1;
            std::vector<GEOLocationCoordinate2D>::reserve((void **)a2, v50 + ((v7 & 1) == 0) + ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
            if ((v7 & 1) != 0)
              v29 = v28;
            else
              v29 = 0;
            v30 = v22 - 1;
            if (!v27)
              v30 = 0;
            v31 = v29 + v30;
            if ((uint64_t)(v29 + v30) >= 0 && v31 < v22)
            {
              v32 = *(double **)(a2 + 8);
              do
              {
                v33 = (float *)(v11 + 8 * v31);
                v34 = v23 + *v33 * v25;
                v35 = exp(((v24 + (float)(1.0 - v33[1]) * v26) * 0.0078125 + -1048576.0) / 333772.107);
                v36 = (atan(v35) * -2.0 + 1.57079633) * 57.2957795;
                *(double *)&v18 = v34 * 0.0078125;
                v37 = v34 * 0.0078125 * 0.000171661377 + -180.0;
                if ((unint64_t)v32 >= *v8)
                {
                  v38 = *(double **)a2;
                  v39 = ((uint64_t)v32 - *(_QWORD *)a2) >> 4;
                  v40 = v39 + 1;
                  if ((unint64_t)(v39 + 1) >> 60)
                    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                  v41 = *v8 - (_QWORD)v38;
                  if (v41 >> 3 > v40)
                    v40 = v41 >> 3;
                  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
                    v42 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v42 = v40;
                  if (v42)
                  {
                    v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>(a2 + 16, v42);
                    v38 = *(double **)a2;
                    v32 = *(double **)(a2 + 8);
                  }
                  else
                  {
                    v43 = 0;
                  }
                  v44 = (double *)&v43[16 * v39];
                  *v44 = v36;
                  v44[1] = v37;
                  v45 = v44;
                  if (v32 != v38)
                  {
                    do
                    {
                      v18 = *((_OWORD *)v32 - 1);
                      *((_OWORD *)v45 - 1) = v18;
                      v45 -= 2;
                      v32 -= 2;
                    }
                    while (v32 != v38);
                    v38 = *(double **)a2;
                  }
                  v32 = v44 + 2;
                  *(_QWORD *)a2 = v45;
                  *(_QWORD *)(a2 + 8) = v44 + 2;
                  *(_QWORD *)(a2 + 16) = &v43[16 * v42];
                  if (v38)
                    operator delete(v38);
                }
                else
                {
                  *v32 = v36;
                  v32[1] = v37;
                  v32 += 2;
                }
                *(_QWORD *)(a2 + 8) = v32;
                v7 = 1;
                v31 += v28;
              }
              while (v31 >= 0 && v31 < v50);
            }
          }
          v6 = v49;
          if (*(_BYTE *)(v49 + 28))
          {
            if (!v10)
              break;
          }
          if (*(_BYTE *)(v49 + 28))
          {
            v46 = -1;
          }
          else
          {
            if (v10 == objc_msgSend(*(id *)v49, "sectionCount", *(double *)&v18) - 1)
              break;
            v46 = 1;
            if (*(_BYTE *)(v49 + 28))
              v46 = -1;
          }
          v10 += v46;
        }
        v6 = v49 + 32;
        v5 = v48;
        if (v49 + 32 - *v48 == 4096)
        {
          v5 = v48 + 1;
          v6 = v48[1];
        }
      }
      while (v6 != v47);
    }
  }
}

void sub_1888F3634(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<GEOLocationCoordinate2D>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

long double geo::MapEdgeTransit::coordinateIn(geo::MapEdgeTransit *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long double v17;
  _QWORD v19[2];
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 9) & 0x7FLL;
  v2 = *(_QWORD *)(*((_QWORD *)this + 6) + ((*((_QWORD *)this + 9) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * v1;
  objc_msgSend(*(id *)v2, "containingTile");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "tileKey");
  v5 = *(_QWORD *)v4;
  v6 = *(_QWORD *)v4 << 32;
  v7 = BYTE4(*(_QWORD *)v4) | ((((*(_QWORD *)v4 >> 40) | (*(unsigned __int16 *)(v4 + 8) << 24)) & 0x3FFFFFF) << 8) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(unsigned __int16 *)(v4 + 8) >> 2) << 34) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v4 + 10) & 0xF) << 48) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v4 + 10) >> 4) << 52);
  *(_QWORD *)((char *)v20 + 1) = v6 & 0xFFFFC00000000000 | ((unint64_t)((*(_QWORD *)v4 >> 8) & 0x3F) << 40);
  LOBYTE(v20[0]) = v5;
  *((_QWORD *)&v8 + 1) = v7;
  *(_QWORD *)&v8 = v6;
  v19[0] = v20[0];
  v19[1] = v8 >> 56;

  GEOMapRectForGEOTileKey((uint64_t)v19);
  v10 = v9;
  v12 = v11;
  v20[0] = 0;
  v13 = objc_msgSend(*(id *)v2, "get");
  if (*(_BYTE *)(v2 + 28))
    v14 = objc_msgSend(*(id *)v2, "sectionCount") - 1;
  else
    v14 = 0;
  v15 = geo::codec::transitLinkPoints(v13, v14, v20);
  if (*(_BYTE *)(v2 + 28))
    v16 = 0;
  else
    v16 = v20[0] - 1;
  v17 = exp(((v10 + (float)(1.0 - *(float *)(v15 + 8 * v16 + 4)) * v12) * 0.0078125 + -1048576.0) / 333772.107);
  return (atan(v17) * -2.0 + 1.57079633) * 57.2957795;
}

void sub_1888F38FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

long double geo::MapEdgeTransit::coordinateOut(geo::MapEdgeTransit *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long double v17;
  _QWORD v19[2];
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 9) & 0x7FLL;
  v2 = *(_QWORD *)(*((_QWORD *)this + 6) + ((*((_QWORD *)this + 9) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * v1;
  objc_msgSend(*(id *)v2, "containingTile");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "tileKey");
  v5 = *(_QWORD *)v4;
  v6 = *(_QWORD *)v4 << 32;
  v7 = BYTE4(*(_QWORD *)v4) | ((((*(_QWORD *)v4 >> 40) | (*(unsigned __int16 *)(v4 + 8) << 24)) & 0x3FFFFFF) << 8) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(unsigned __int16 *)(v4 + 8) >> 2) << 34) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v4 + 10) & 0xF) << 48) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v4 + 10) >> 4) << 52);
  *(_QWORD *)((char *)v20 + 1) = v6 & 0xFFFFC00000000000 | ((unint64_t)((*(_QWORD *)v4 >> 8) & 0x3F) << 40);
  LOBYTE(v20[0]) = v5;
  *((_QWORD *)&v8 + 1) = v7;
  *(_QWORD *)&v8 = v6;
  v19[0] = v20[0];
  v19[1] = v8 >> 56;

  GEOMapRectForGEOTileKey((uint64_t)v19);
  v10 = v9;
  v12 = v11;
  v20[0] = 0;
  v13 = objc_msgSend(*(id *)v2, "get");
  if (*(_BYTE *)(v2 + 28))
    v14 = 0;
  else
    v14 = objc_msgSend(*(id *)v2, "sectionCount") - 1;
  v15 = geo::codec::transitLinkPoints(v13, v14, v20);
  if (*(_BYTE *)(v2 + 28))
    v16 = v20[0] - 1;
  else
    v16 = 0;
  v17 = exp(((v10 + (float)(1.0 - *(float *)(v15 + 8 * v16 + 4)) * v12) * 0.0078125 + -1048576.0) / 333772.107);
  return (atan(v17) * -2.0 + 1.57079633) * 57.2957795;
}

void sub_1888F3AF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t geo::MapEdgeTransit::toString(geo::MapEdgeTransit *this)
{
  geo::MapEdgeTransit *v1;
  const char *v2;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  char *v14;
  char *v15;
  std::locale::id *v16;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  id *v25;
  uint64_t v26;
  std::locale::id *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  const std::locale::facet *v37;
  id *v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 *v47;
  uint64_t v48;
  _QWORD *v49;
  const std::locale::facet *v50;
  const char *v53;
  _QWORD v54[11];
  char v55;
  uint64_t v56;
  std::locale v57;
  uint64_t v58;
  __int128 v59;
  unsigned __int8 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v54);
  v1 = this;
  v2 = (const char *)geo::MapEdge::debugName(this);
  v3 = (uint64_t)v2;
  v53 = v2;
  if (v2)
  {
    v4 = strlen(v2);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v3, v4);
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
    v6 = std::locale::use_facet((const std::locale *)&v59, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale((std::locale *)&v59);
    std::ostream::put();
  }
  else
  {
    (*(void (**)(geo::MapEdgeTransit *))(*(_QWORD *)this + 64))(this);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    geo::codec::featureGetNativeLabel(objc_msgSend(v7, "get"), 0, &v53, 0);

    v8 = v53;
    if (!v53)
    {
      (*(void (**)(geo::MapEdgeTransit *))(*(_QWORD *)this + 64))(this);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      geo::codec::featureGetNativeShield(objc_msgSend(v9, "get"), 0, &v53, 0, 0);

      v8 = v53;
    }
    if (v8)
      v10 = v8;
    else
      v10 = "unnamed";
    v11 = strlen(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v10, v11);
    v1 = this;
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
    v13 = std::locale::use_facet((const std::locale *)&v59, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale((std::locale *)&v59);
    std::ostream::put();
  }
  std::ostream::flush();
  *(_QWORD *)((char *)&v54[2] + *(_QWORD *)(v54[0] - 24)) = 10;
  (*(void (**)(__int128 *__return_ptr, geo::MapEdgeTransit *))(*(_QWORD *)v1 + 48))(&v59, v1);
  v15 = (char *)*((_QWORD *)&v59 + 1);
  v14 = (char *)v59;
  if ((_QWORD)v59 != *((_QWORD *)&v59 + 1))
  {
    v16 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)",", 1);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
      v19 = std::locale::use_facet(&v57, v16);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale(&v57);
      std::ostream::put();
      std::ostream::flush();
      v14 += 16;
    }
    while (v14 != v15);
    v14 = (char *)v59;
  }
  if (v14)
  {
    *((_QWORD *)&v59 + 1) = v14;
    operator delete(v14);
  }
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"tiles:", 6);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
  v21 = std::locale::use_facet((const std::locale *)&v59, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale((std::locale *)&v59);
  std::ostream::put();
  std::ostream::flush();
  v22 = *((_QWORD *)v1 + 6);
  if (*((_QWORD *)v1 + 7) != v22)
  {
    v23 = *((_QWORD *)this + 9);
    v24 = (_QWORD *)(v22 + 8 * (v23 >> 7));
    v25 = (id *)(*v24 + 32 * (v23 & 0x7F));
    v26 = *(_QWORD *)(v22 + (((*((_QWORD *)this + 10) + v23) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*((_QWORD *)this + 10) + v23) & 0x7F);
    if (v25 != (id *)v26)
    {
      v27 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        v57.__locale_ = 0;
        v58 = 0;
        objc_msgSend(*v25, "containingTile");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_msgSend(v28, "tileKey");
        v30 = *(_QWORD *)v29;
        v31 = *(_QWORD *)v29 << 32;
        v32 = BYTE4(*(_QWORD *)v29) | ((((*(_QWORD *)v29 >> 40) | (*(unsigned __int16 *)(v29 + 8) << 24)) & 0x3FFFFFF) << 8) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(unsigned __int16 *)(v29 + 8) >> 2) << 34) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v29 + 10) & 0xF) << 48) & 0xFF0FFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v29 + 10) >> 4) << 52);
        *(_QWORD *)((char *)&v59 + 1) = v31 & 0xFFFFC00000000000 | ((unint64_t)((*(_QWORD *)v29 >> 8) & 0x3F) << 40);
        LOBYTE(v59) = v30;
        *((_QWORD *)&v33 + 1) = v32;
        *(_QWORD *)&v33 = v31;
        v57.__locale_ = (std::locale::__imp *)v59;
        v58 = v33 >> 56;

        v34 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)",", 1);
        v35 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)",", 1);
        v36 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
        v37 = std::locale::use_facet((const std::locale *)&v59, v27);
        ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
        std::locale::~locale((std::locale *)&v59);
        std::ostream::put();
        std::ostream::flush();
        v25 += 4;
        if ((id *)((char *)v25 - *v24) == (id *)4096)
        {
          v38 = (id *)v24[1];
          ++v24;
          v25 = v38;
        }
      }
      while (v25 != (id *)v26);
    }
  }
  v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"from: ", 6);
  v40 = *((_QWORD *)this + 1);
  if (v40)
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v40 + 32))(&v59);
  else
    std::string::basic_string[abi:ne180100]<0>(&v59, "(not found)");
  if ((v60 & 0x80u) == 0)
    v41 = &v59;
  else
    v41 = (__int128 *)v59;
  if ((v60 & 0x80u) == 0)
    v42 = v60;
  else
    v42 = *((_QWORD *)&v59 + 1);
  v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v41, v42);
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(*v43 - 24)));
  v44 = std::locale::use_facet(&v57, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale(&v57);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v60 < 0)
    operator delete((void *)v59);
  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"to: ", 4);
  v46 = *((_QWORD *)this + 3);
  if (v46)
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v46 + 32))(&v59);
  else
    std::string::basic_string[abi:ne180100]<0>(&v59, "(not found)");
  if ((v60 & 0x80u) == 0)
    v47 = &v59;
  else
    v47 = (__int128 *)v59;
  if ((v60 & 0x80u) == 0)
    v48 = v60;
  else
    v48 = *((_QWORD *)&v59 + 1);
  v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v47, v48);
  std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(_QWORD *)(*v49 - 24)));
  v50 = std::locale::use_facet(&v57, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
  std::locale::~locale(&v57);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v60 < 0)
    operator delete((void *)v59);
  std::stringbuf::str();
  v54[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v54 + *(_QWORD *)(v54[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v54[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v55 < 0)
    operator delete((void *)v54[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D764310](&v56);
}

void sub_1888F41F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t geo::MapEdge::debugName(geo::MapEdge *this)
{
  void *v1;
  uint64_t v2;

  (*(void (**)(geo::MapEdge *))(*(_QWORD *)this + 64))(this);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "name");

  return v2;
}

void sub_1888F42EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id geo::MapEdgeTransit::findEdgesOut(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[4];
  id v17;
  _QWORD *v18;
  _QWORD v19[6];
  id v20;
  uint64_t v21;
  id v22;
  int v23;
  char v24;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1[3])
  {
    v19[0] = 0;
    v19[1] = v19;
    v19[2] = 0x5012000000;
    v19[3] = __Block_byref_object_copy__3;
    v19[4] = __Block_byref_object_dispose__3;
    v19[5] = "0 0";
    v10 = a1[10] + a1[9] - 1;
    v11 = *(_QWORD *)(a1[6] + ((v10 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v10 & 0x7F);
    v20 = *(id *)v11;
    v21 = *(_QWORD *)(v11 + 8);
    v22 = *(id *)(v11 + 16);
    v12 = *(_BYTE *)(v11 + 28);
    v23 = *(_DWORD *)(v11 + 24);
    v24 = v12;
    v13 = a1[3];
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = ___ZNK3geo14MapEdgeTransit12findEdgesOutEP12GEOMapAccessU13block_pointerFvNSt3__110shared_ptrINS_7MapEdgeEEEEU13block_pointerFvP13GEOMapRequestE_block_invoke;
    v16[3] = &unk_1E1C00560;
    v18 = v19;
    v17 = v8;
    (*(void (**)(uint64_t, id, _QWORD *, id))(*(_QWORD *)v13 + 48))(v13, v7, v16, v9);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    _Block_object_dispose(v19, 8);
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_1888F4480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,id a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void ___ZNK3geo14MapEdgeTransit12findEdgesOutEP12GEOMapAccessU13block_pointerFvNSt3__110shared_ptrINS_7MapEdgeEEEEU13block_pointerFvP13GEOMapRequestE_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = *(_QWORD *)(*(_QWORD *)(*a2 + 48) + ((*(_QWORD *)(*a2 + 72) >> 4) & 0xFFFFFFFFFFFFFF8));
  v3 = *(_QWORD *)(*a2 + 72) & 0x7FLL;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_QWORD *)(v2 + 32 * v3) != *(_QWORD *)(v4 + 48)
    || (v5 = v2 + 32 * v3, *(_QWORD *)(v5 + 16) != *(_QWORD *)(v4 + 64))
    || *(unsigned __int8 *)(v5 + 28) != *(unsigned __int8 *)(v4 + 76))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = (std::__shared_weak_count *)a2[1];
    v13 = *a2;
    v14 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(v6 + 16))(v6, &v13);
    v10 = v14;
    if (v14)
    {
      v11 = (unint64_t *)&v14->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1888F45A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t geo::MapEdgeTransit::type(geo::MapEdgeTransit *this)
{
  return 1;
}

uint64_t geo::MapEdgeTransit::coordinateCount(geo::MapEdgeTransit *this)
{
  return *((_QWORD *)this + 12);
}

double geo::MapEdgeTransit::length(geo::MapEdgeTransit *this)
{
  return *((double *)this + 11);
}

id geo::MapEdgeTransit::feature(geo::MapEdgeTransit *this)
{
  objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 6) + ((*((_QWORD *)this + 9) >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * (*((_QWORD *)this + 9) & 0x7FLL)+ 16), "feature");
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t geo::MapEdgeTransit::roadClass(geo::MapEdgeTransit *this)
{
  return 9;
}

uint64_t geo::MapEdgeTransit::formOfWay(geo::MapEdgeTransit *this)
{
  return 0;
}

void std::__split_buffer<geo::TransitEdgePiece *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<geo::TransitEdgePiece *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::__split_buffer<geo::TransitEdgePiece *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::deque<geo::TransitEdgePiece>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 7];
    v7 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v5) & 0x7F);
    if (v7 != v8)
    {
      do
      {

        v9 = *(void **)v7;
        v7 += 32;

        if (v7 - (_QWORD)*v6 == 4096)
        {
          v10 = (uint64_t)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 64;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_16;
    v13 = 128;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<geo::TransitEdgePiece *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::allocate_shared[abi:ne180100]<geo::MapNodeTransit,std::allocator<geo::MapNodeTransit>,GEOLocationCoordinate2D,GEOVectorTile * {__strong},GeoCodecsTransitNodeFeature *&,void>(uint64_t *a1, _OWORD *a2, void *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;

  v8 = operator new(0x50uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E1BFB3D8;
  result = geo::MapNode::MapNode((uint64_t)(v8 + 3), a2, a3, *(_QWORD *)(a4 + 240));
  v8[3] = &off_1E1BF6648;
  v8[8] = a4;
  *a1 = result;
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1888F4C64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<geo::MapNodeTransit>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB3D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::MapNodeTransit>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB3D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D76437CLL);
}

uint64_t std::__shared_ptr_emplace<geo::MapNodeTransit>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::deque<geo::TransitEdgePiece>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<geo::TransitEdgePiece *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<geo::TransitEdgePiece *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<geo::TransitEdgePiece *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<geo::TransitEdgePiece *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1888F4F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<geo::MapEdgeTransit,std::allocator<geo::MapEdgeTransit>,std::deque<geo::TransitEdgePiece> &,void>@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x80uLL);
  result = std::__shared_ptr_emplace<geo::MapEdgeTransit>::__shared_ptr_emplace[abi:ne180100]<std::deque<geo::TransitEdgePiece> &,std::allocator<geo::MapEdgeTransit>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1888F5024(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<geo::MapEdgeTransit>::__shared_ptr_emplace[abi:ne180100]<std::deque<geo::TransitEdgePiece> &,std::allocator<geo::MapEdgeTransit>,0>(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E1BFB3A0;
  geo::MapEdgeTransit::MapEdgeTransit((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1888F506C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<geo::MapEdgeTransit>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB3A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::MapEdgeTransit>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB3A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D76437CLL);
}

uint64_t std::__shared_ptr_emplace<geo::MapEdgeTransit>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1888F51C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1888F52E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1888F540C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1888F55BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v18);
  objc_destroyWeak((id *)(v19 - 88));

  _Unwind_Resume(a1);
}

void sub_1888F5648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1888F59D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1888F5B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1888F5C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1888F5DD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<geo::MapAccessPointFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::MapAccessPointFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D76437CLL);
}

void std::__shared_ptr_emplace<geo::MapAccessPointFeature>::__on_zero_shared(uint64_t a1)
{

}

void sub_1888F5FA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitRouteIdentifierReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  char v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  void *v42;
  int v43;
  char v44;
  char v45;
  int v46;
  int v47;
  void *v48;
  int v50;
  char v51;
  char v52;
  char v53;
  BOOL v54;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 & ~(_BYTE)v7;
        v16 = v14 | v7;
        v51 = v15 | v8;
        v17 = v16 | v15 | v8;
        if (((v16 | v9) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v54 = v16;
        v52 = v17;
        v53 = (v18 == 0) | v16;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v20))
      goto LABEL_59;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v6))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_23;
      v22 += 7;
      if (v23++ >= 9)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_23:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_25:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_59:
      v50 = 1;
      goto LABEL_60;
    }
    v32 = v24 >> 3;
    v33 = v54;
    if ((v53 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    if ((_DWORD)v32 == 2)
      break;
    if ((_DWORD)v32 == 1)
    {
      if (!v33)
        goto LABEL_51;
      if ((*(_BYTE *)(a1 + 52) & 4) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_77;
        v45 = 32 * *(_BYTE *)(a1 + 52);
        goto LABEL_57;
      }
      PBReaderReadData();
      v38 = objc_claimAutoreleasedReturnValue();
      v39 = 32;
      goto LABEL_44;
    }
    if ((v51 & 1) == 0 || (*(_BYTE *)(a1 + 52) & 1) != 0)
    {
LABEL_51:
      v44 = PBReaderSkipValueWithTag();
      v20 = (int *)MEMORY[0x1E0D82BC8];
      if ((v44 & 1) == 0)
      {
        v50 = 0;
        goto LABEL_60;
      }
      goto LABEL_58;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v42 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v41;

    }
    v43 = PBUnknownFieldAdd();
    v20 = (int *)MEMORY[0x1E0D82BC8];
    if (!v43)
    {
      v50 = 0;
      goto LABEL_61;
    }
LABEL_58:
    if (!(v52 & 1 | (v10 != 0)))
      goto LABEL_59;
  }
  if (!v33)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 52) & 2) == 0)
  {
    PBReaderReadData();
    v38 = objc_claimAutoreleasedReturnValue();
    v39 = 24;
LABEL_44:
    v40 = *(void **)(a1 + v39);
    *(_QWORD *)(a1 + v39) = v38;

    v20 = (int *)MEMORY[0x1E0D82BC8];
    --v10;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v45 = *(_BYTE *)(a1 + 52) << 6;
LABEL_57:
    v10 += v45 >> 7;
    v20 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_58;
  }
LABEL_77:
  v50 = 0;
  v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_60:
  if ((v51 & 1) == 0)
    goto LABEL_62;
LABEL_61:
  *(_BYTE *)(a1 + 52) |= 1u;
LABEL_62:
  if (v54 || (v50 & 1) == 0)
  {
    *(_BYTE *)(a1 + 52) |= 4u;
    *(_BYTE *)(a1 + 52) |= 2u;
    goto LABEL_71;
  }
  if (v18)
  {
    while (1)
    {
      v47 = *v18++;
      v46 = v47;
      if (v47 == 1)
        break;
      if (v46 == 2)
      {
LABEL_67:
        *(_BYTE *)(a1 + 52) |= v46;
      }
      else if (!v46)
      {
        goto LABEL_71;
      }
    }
    LOBYTE(v46) = 4;
    goto LABEL_67;
  }
LABEL_71:
  if (v50)
    v3 = *(_BYTE *)(v3 + *v20) == 0;
  else
    v3 = 0;
  if (v54)
  {
    v48 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1888F659C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888F6B64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitRouteIdentifierReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitRouteIdentifierReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitRouteIdentifierReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitRouteIdentifierReadAllFrom_initialTag;
  Specified = GEOTransitRouteIdentifierReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1888F6CF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitRouteIdentifierReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitRouteIdentifierReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1888F6D50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitRouteIdentifierIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_27;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_27;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2)
          goto LABEL_29;
        goto LABEL_23;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_29:
        v17 = 0;
        goto LABEL_28;
      }
LABEL_26:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_27;
    }
    if (v15 != 2)
      goto LABEL_29;
LABEL_23:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_29;
    goto LABEL_26;
  }
LABEL_27:
  v17 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v17;
}

void sub_1888F709C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitRouteIdentifierIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 52) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_1888F7334(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888F7558(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888F77B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitRouteUpdateReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  BOOL v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  GEOTransitRouteIdentifier *v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  void *v47;
  id v48;
  void *v49;
  int v50;
  char v51;
  char v52;
  int v53;
  char v54;
  void *v55;
  int v57;
  unint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 72)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFBFFFCFFFDLL) & 0xFF01FF01FF01FF01))+ ((*(_BYTE *)(a1 + 72) & 2) != 0));
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 > 2;
        v59 = v17 & ~(_BYTE)v12 | v10;
        v60 = v17 | v12 | v59;
        if ((((v17 | v12) | v9) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v61 = (v18 == 0) | v17 | v12;
        v62 = v17 | v12;
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v10;
LABEL_8:
        v15 = v11;
        v16 = v12;
LABEL_10:
        ++v8;
        v10 = v14;
        v11 = v15;
        v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v20))
      goto LABEL_88;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v7))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      v29 = v23++ >= 9;
      if (v29)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_27:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_88:
      v57 = 1;
      goto LABEL_89;
    }
    v32 = v24 >> 3;
    v33 = v62;
    if ((v61 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if (!v33)
          goto LABEL_75;
        if ((*(_BYTE *)(a1 + 72) & 0x10) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_106;
          v38 = objc_alloc_init(GEOTransitRouteIdentifier);
          if (GEOTransitRouteIdentifierReadAllFrom((uint64_t)v38, (void *)v3, v11 & 1))
          {
            PBReaderRecallMark();
            v39 = 40;
            goto LABEL_57;
          }
          goto LABEL_105;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_106;
        v52 = 8 * *(_BYTE *)(a1 + 72);
        goto LABEL_85;
      case 2:
        if ((v9 & 1) == 0)
          goto LABEL_75;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        *(_BYTE *)(a1 + 72) |= 1u;
        while (2)
        {
          v43 = *v19;
          v44 = *(_QWORD *)(v3 + v43);
          v45 = v44 + 1;
          if (v44 == -1 || v45 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v44);
            *(_QWORD *)(v3 + v43) = v45;
            v42 |= (unint64_t)(v46 & 0x7F) << v40;
            if (v46 < 0)
            {
              v40 += 7;
              v29 = v41++ >= 9;
              if (v29)
              {
                LODWORD(v42) = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v42) = 0;
LABEL_80:
        *(_DWORD *)(a1 + 68) = v42;
        goto LABEL_87;
      case 3:
        if (!v33)
          goto LABEL_75;
        if ((*(_BYTE *)(a1 + 72) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_106;
          v52 = 16 * *(_BYTE *)(a1 + 72);
LABEL_85:
          v8 += v52 >> 7;
          goto LABEL_86;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_106;
        v38 = objc_alloc_init(GEOTransitRouteDisplayStrings);
        if (GEOTransitRouteDisplayStringsReadAllFrom((uint64_t)v38, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          v39 = 32;
LABEL_57:
          v47 = *(void **)(a1 + v39);
          *(_QWORD *)(a1 + v39) = v38;

          --v8;
LABEL_86:
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
LABEL_87:
          if (!(v60 & 1 | (v8 != 0)))
            goto LABEL_88;
          continue;
        }
LABEL_105:

LABEL_106:
        v57 = 0;
        v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_89:
        v58 = 0x1ECDA9000uLL;
        if ((v59 & 1) != 0)
LABEL_90:
          *(_BYTE *)(a1 + *(int *)(v58 + 1812)) |= 2u;
        if (v62 & 1 | ((v57 & 1) == 0))
        {
          *(_BYTE *)(a1 + *(int *)(v58 + 1812)) |= 0x10u;
          *(_BYTE *)(a1 + *(int *)(v58 + 1812)) |= 8u;
          *(_BYTE *)(a1 + *(int *)(v58 + 1812)) |= 0x20u;
          *(_BYTE *)(a1 + *(int *)(v58 + 1812)) |= 4u;
        }
        else if (v18)
        {
          while (1)
          {
            v53 = *v18++;
            v54 = 16;
            switch(v53)
            {
              case 0:
                goto LABEL_99;
              case 1:
                goto LABEL_98;
              case 3:
                v54 = 8;
                goto LABEL_98;
              case 5:
                v54 = 32;
                goto LABEL_98;
              case 6:
                v54 = 4;
LABEL_98:
                *(_BYTE *)(a1 + *(int *)(v58 + 1812)) |= v54;
                break;
              default:
                continue;
            }
          }
        }
LABEL_99:
        if (v57)
          v3 = *(_BYTE *)(v3 + *v20) == 0;
        else
          v3 = 0;
        if ((v62 & 1) != 0)
        {
          v55 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 5:
        if (!v33 || (*(_BYTE *)(a1 + 72) & 0x20) != 0)
          goto LABEL_75;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_106;
        v38 = objc_alloc_init(GEOTransitStepUpdate);
        if (!GEOTransitStepUpdateReadAllFrom((uint64_t)v38, (void *)v3, v11 & 1))
          goto LABEL_105;
        PBReaderRecallMark();
        -[GEOTransitRouteUpdate _addNoFlagsStepUpdate:](a1, v38);
        goto LABEL_74;
      case 6:
        if (!v33 || (*(_BYTE *)(a1 + 72) & 4) != 0)
          goto LABEL_75;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_106;
        v38 = objc_alloc_init(GEOTransitRouteUpdateAlert);
        if (!GEOTransitRouteUpdateAlertReadAllFrom((uint64_t)v38, (void *)v3, v11 & 1))
          goto LABEL_105;
        PBReaderRecallMark();
        -[GEOTransitRouteUpdate _addNoFlagsAlert:](a1, v38);
LABEL_74:

        goto LABEL_86;
      default:
        if ((v59 & 1) == 0 || (*(_BYTE *)(a1 + 72) & 2) != 0)
        {
LABEL_75:
          v51 = PBReaderSkipValueWithTag();
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v20 = (int *)MEMORY[0x1E0D82BC8];
          if ((v51 & 1) == 0)
          {
            v57 = 0;
            goto LABEL_89;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v48 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v49 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v48;

          }
          v50 = PBUnknownFieldAdd();
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          if (!v50)
          {
            v57 = 0;
            v58 = 0x1ECDA9000;
            goto LABEL_90;
          }
        }
        goto LABEL_87;
    }
  }
}

void sub_1888F8224(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888F8364(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888F869C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888F94BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOTransitRouteUpdateCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[5], "readAll:", 1);
  objc_msgSend(a1[4], "readAll:", 1);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v2 = a1[6];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v4);
  }

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = a1[3];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "readAll:", 1, (_QWORD)v12);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    }
    while (v9);
  }

}

unint64_t GEOTransitRouteUpdateReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitRouteUpdateReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitRouteUpdateReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitRouteUpdateReadAllFrom_initialTag;
  Specified = GEOTransitRouteUpdateReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitRouteUpdateCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1888F9804(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitRouteUpdateReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitRouteUpdateReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1888F9864(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitRouteUpdateIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOTransitRouteIdentifierIsValid(a1))
            goto LABEL_44;
          goto LABEL_49;
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_49;
          v17 = 0;
          break;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitRouteDisplayStringsIsValid(a1))
            goto LABEL_49;
          goto LABEL_44;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitStepUpdateIsValid(a1))
            goto LABEL_49;
          goto LABEL_44;
        case 6u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitRouteUpdateAlertIsValid(a1))
            goto LABEL_49;
LABEL_44:
          PBReaderRecallMark();
          continue;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_49:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v18 = *v2;
        v19 = *(_QWORD *)&a1[v18];
        v20 = v19 + 1;
        if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
          break;
        v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
        *(_QWORD *)&a1[v18] = v20;
        if (v21 < 0 && v17++ <= 8)
          continue;
        goto LABEL_45;
      }
      a1[*v4] = 1;
LABEL_45:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

BOOL GEOTransitStepUpdateIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2)
            goto LABEL_40;
          goto LABEL_20;
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOInstructionSetIsValid(a1))
            goto LABEL_40;
          goto LABEL_37;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitVehiclePositionInfoIsValid(a1))
            goto LABEL_40;
          goto LABEL_37;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitScheduleInfoIsValid(a1))
            goto LABEL_40;
          goto LABEL_37;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitBoardingInfoIsValid(a1))
            goto LABEL_40;
LABEL_37:
          PBReaderRecallMark();
          goto LABEL_38;
        default:
LABEL_20:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_40:
            PBReaderRecallMark();
            return 0;
          }
LABEL_38:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_39;
          break;
      }
    }
  }
LABEL_39:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOTransitRouteUpdateAlertIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  _BOOL8 v18;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_28;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_28;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 != 2 && (_DWORD)v17 != 1)
        goto LABEL_26;
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringIsValid(a1))
      {
LABEL_29:
        PBReaderRecallMark();
        return 0;
      }
      PBReaderRecallMark();
LABEL_27:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_28;
    }
    if (v15 != 2)
      goto LABEL_29;
LABEL_26:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_28:
  v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

void sub_1888FA2AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitRouteUpdateIsDirty(uint64_t a1)
{
  char v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = *(_BYTE *)(a1 + 72);
  if ((v2 & 0x40) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 72) & 0x10) != 0)
  {
    if (GEOTransitRouteIdentifierIsDirty(*(_QWORD *)(a1 + 40)))
      return 1;
    v2 = *(_BYTE *)(a1 + 72);
  }
  if ((v2 & 8) == 0)
    goto LABEL_8;
  if ((GEOTransitRouteDisplayStringsIsDirty(*(os_unfair_lock_s **)(a1 + 32)) & 1) == 0)
  {
    v2 = *(_BYTE *)(a1 + 72);
LABEL_8:
    if ((v2 & 0x24) != 0)
      return 1;
    if ((v2 & 0x20) != 0)
    {
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v5 = *(id *)(a1 + 48);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v17;
LABEL_14:
        v9 = 0;
        while (1)
        {
          if (*(_QWORD *)v17 != v8)
            objc_enumerationMutation(v5);
          if ((GEOTransitStepUpdateIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v16 + 1) + 8 * v9)) & 1) != 0)
            goto LABEL_32;
          if (v7 == ++v9)
          {
            v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
            if (v7)
              goto LABEL_14;
            break;
          }
        }
      }

      v2 = *(_BYTE *)(a1 + 72);
    }
    if ((v2 & 4) == 0)
      return 0;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v5 = *(id *)(a1 + 24);
    v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    if (!v3)
    {
LABEL_33:

      return v3;
    }
    v10 = *(_QWORD *)v13;
LABEL_25:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v13 != v10)
        objc_enumerationMutation(v5);
      if ((GEOTransitRouteUpdateAlertIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v12 + 1) + 8 * v11)) & 1) != 0)
        break;
      if (v3 == ++v11)
      {
        v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
        if (v3)
          goto LABEL_25;
        goto LABEL_33;
      }
    }
LABEL_32:
    v3 = 1;
    goto LABEL_33;
  }
  return 1;
}

os_unfair_lock_s *GEOTransitRouteUpdateIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTransitRouteUpdateIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 16);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1888FAA2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FAEE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FB2EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitRouteUpdateAlertReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  GEOFormattedString *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  int v46;
  char v47;
  char v48;
  int v49;
  char v50;
  void *v51;
  int v53;
  unint64_t v54;
  char v55;
  char v56;
  char v57;
  BOOL v58;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v55 = v17;
        v19 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v58 = v18;
        v56 = v19;
        v57 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_73;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_73:
      v53 = 1;
      goto LABEL_74;
    }
    v34 = v26 >> 3;
    v35 = v58;
    if ((v57 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    if ((_DWORD)v34 == 3)
    {
      if (!v35)
        goto LABEL_62;
      if ((*(_BYTE *)(a1 + 60) & 4) == 0)
      {
        PBReaderReadData();
        v42 = objc_claimAutoreleasedReturnValue();
        v43 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v42;
        goto LABEL_55;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_90;
      v48 = 32 * *(_BYTE *)(a1 + 60);
      goto LABEL_70;
    }
    if ((_DWORD)v34 == 2)
      break;
    if ((_DWORD)v34 == 1)
    {
      if (!v35)
        goto LABEL_62;
      if ((*(_BYTE *)(a1 + 60) & 8) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_90;
        v40 = objc_alloc_init(GEOFormattedString);
        if (!GEOFormattedStringReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
          goto LABEL_89;
        PBReaderRecallMark();
        v41 = 40;
LABEL_54:
        v43 = *(void **)(a1 + v41);
        *(_QWORD *)(a1 + v41) = v40;
LABEL_55:

        --v7;
LABEL_71:
        v22 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_72;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_90;
      v48 = 16 * *(_BYTE *)(a1 + 60);
LABEL_70:
      v7 += v48 >> 7;
      goto LABEL_71;
    }
    if ((v55 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 1) != 0)
    {
LABEL_62:
      v47 = PBReaderSkipValueWithTag();
      v22 = (int *)MEMORY[0x1E0D82BC8];
      if ((v47 & 1) == 0)
      {
        v53 = 0;
        goto LABEL_74;
      }
      goto LABEL_72;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v44 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v45 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v44;

    }
    v46 = PBUnknownFieldAdd();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if (!v46)
    {
      v53 = 0;
      v54 = 0x1ECDA9000;
      goto LABEL_75;
    }
LABEL_72:
    if (!(v56 & 1 | (v7 != 0)))
      goto LABEL_73;
  }
  if (!v35)
    goto LABEL_62;
  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_90;
    v48 = *(_BYTE *)(a1 + 60) << 6;
    goto LABEL_70;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_90;
  v40 = objc_alloc_init(GEOFormattedString);
  if (GEOFormattedStringReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    v41 = 24;
    goto LABEL_54;
  }
LABEL_89:

LABEL_90:
  v53 = 0;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_74:
  v54 = 0x1ECDA9000uLL;
  if ((v55 & 1) == 0)
    goto LABEL_76;
LABEL_75:
  *(_BYTE *)(a1 + *(int *)(v54 + 1856)) |= 1u;
LABEL_76:
  if (v58 || (v53 & 1) == 0)
  {
    *(_BYTE *)(a1 + *(int *)(v54 + 1856)) |= 8u;
    *(_BYTE *)(a1 + *(int *)(v54 + 1856)) |= 2u;
    *(_BYTE *)(a1 + *(int *)(v54 + 1856)) |= 4u;
  }
  else if (v20)
  {
    while (1)
    {
      v49 = *v20++;
      v50 = 8;
      switch(v49)
      {
        case 0:
          goto LABEL_83;
        case 1:
          goto LABEL_82;
        case 2:
          v50 = 2;
          goto LABEL_82;
        case 3:
          v50 = 4;
LABEL_82:
          *(_BYTE *)(a1 + *(int *)(v54 + 1856)) |= v50;
          break;
        default:
          continue;
      }
    }
  }
LABEL_83:
  if (v53)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v58)
  {
    v51 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1888FBA14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FBB58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FC1E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitRouteUpdateAlertReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitRouteUpdateAlertReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitRouteUpdateAlertReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitRouteUpdateAlertReadAllFrom_initialTag;
  Specified = GEOTransitRouteUpdateAlertReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_1888FC398(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitRouteUpdateAlertReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitRouteUpdateAlertReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1888FC3F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FC59C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitRouteUpdateAlertIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = *(unsigned __int8 *)(a1 + 60);
  if ((v2 & 0x10) != 0)
    return 1;
  if ((v2 & 8) != 0)
  {
    if ((GEOFormattedStringIsDirty(*(os_unfair_lock_s **)(a1 + 40)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 60);
  }
  if ((v2 & 2) != 0)
  {
    if ((GEOFormattedStringIsDirty(*(os_unfair_lock_s **)(a1 + 24)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 60);
  }
  return (v2 >> 2) & 1;
}

os_unfair_lock_s *GEOTransitRouteUpdateAlertIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTransitRouteUpdateAlertIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1888FC8EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FCB84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FCE14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOTransitRouteUpdateRequestReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint16x4_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  unsigned __int8 v20;
  int *v21;
  int *v22;
  int *v23;
  int *v24;
  char v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  int v33;
  unint64_t v35;
  BOOL v36;
  int *v37;
  int v38;
  int v39;
  BOOL v40;
  GEOTransitRouteIdentifier *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  int v51;
  char v52;
  __int16 v53;
  int v54;
  int v55;
  __int16 v56;
  void *v57;
  int v59;
  char v60;
  char v61;
  char v62;
  BOOL v63;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 136));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 132);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 128));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 140));
  v14 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16(v13, (uint16x4_t)0xFFF8FFFDFFF5FFFALL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 140) >> 7) & 1)+ ((*(_WORD *)(a1 + 140) >> 5) & 1)+ ((*(_WORD *)(a1 + 140) >> 4) & 1))+ (unsigned __int16)vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16(v13, (uint16x4_t)0xFFFEFFF4FFF7FFF6), (int8x8_t)0x1000100010001));
  while (2)
  {
    v15 = 1;
    v16 = 1;
    v17 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v14;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v16 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v18 = v14 > 7;
        v19 = v18 & ~(_BYTE)v12 | v10;
        v20 = v18 | v12;
        v60 = v19;
        v61 = v20 | v19;
        if (((v20 | v9) & 1) != 0)
          v21 = 0;
        else
          v21 = a3;
        v62 = (v21 == 0) | v20;
        v63 = v20;
        v22 = (int *)MEMORY[0x1E0D82BF0];
        v23 = (int *)MEMORY[0x1E0D82BC8];
        v24 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v14;
LABEL_7:
        v15 = v10;
LABEL_8:
        v16 = v11;
        v17 = v12;
LABEL_10:
        ++v8;
        v10 = v15;
        v11 = v16;
        v12 = v17;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v22) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v23))
      goto LABEL_126;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    while (1)
    {
      v28 = *v22;
      v29 = *(_QWORD *)(v3 + v28);
      v30 = v29 + 1;
      if (v29 == -1 || v30 > *(_QWORD *)(v3 + *v7))
        break;
      v31 = *(_BYTE *)(*(_QWORD *)(v3 + *v24) + v29);
      *(_QWORD *)(v3 + v28) = v30;
      v27 |= (unint64_t)(v31 & 0x7F) << v25;
      if ((v31 & 0x80) == 0)
        goto LABEL_25;
      v25 += 7;
      if (v26++ >= 9)
      {
        v27 = 0;
        v33 = *(unsigned __int8 *)(v3 + *v23);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v23) = 1;
LABEL_25:
    v33 = *(unsigned __int8 *)(v3 + *v23);
    if (*(_BYTE *)(v3 + *v23))
      v27 = 0;
LABEL_27:
    if (v33 || (v27 & 7) == 4)
    {
LABEL_126:
      v59 = 1;
      goto LABEL_127;
    }
    v35 = v27 >> 3;
    v36 = v63;
    if ((v62 & 1) == 0)
    {
      v37 = v21;
      do
      {
        v39 = *v37++;
        v38 = v39;
        v36 = v39 != 0;
        if (v39)
          v40 = v38 == (_DWORD)v35;
        else
          v40 = 1;
      }
      while (!v40);
    }
    switch((int)v35)
    {
      case 1:
        if (!v36 || (*(_WORD *)(a1 + 140) & 0x800) != 0)
          goto LABEL_104;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_151;
        v41 = objc_alloc_init(GEOTransitRouteIdentifier);
        if (!GEOTransitRouteIdentifierReadAllFrom((uint64_t)v41, (void *)v3, v11 & 1))
          goto LABEL_150;
        PBReaderRecallMark();
        -[GEOTransitRouteUpdateRequest _addNoFlagsRouteIdentifier:](a1, v41);
        goto LABEL_65;
      case 2:
        if (!v36)
          goto LABEL_104;
        if ((*(_WORD *)(a1 + 140) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_151;
          v53 = *(_WORD *)(a1 + 140) << 9;
          goto LABEL_120;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_151;
        v41 = objc_alloc_init(GEOClientCapabilities);
        if (!GEOClientCapabilitiesReadAllFrom((uint64_t)v41, (void *)v3, v11 & 1))
          goto LABEL_150;
        PBReaderRecallMark();
        v42 = 64;
        goto LABEL_88;
      case 3:
        if (!v36)
          goto LABEL_104;
        if ((*(_WORD *)(a1 + 140) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_151;
          v53 = *(_WORD *)(a1 + 140) << 12;
          goto LABEL_120;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_151;
        v41 = objc_alloc_init(GEOPDABClientDatasetMetadata);
        if (!GEOPDABClientDatasetMetadataReadAllFrom((uint64_t)v41, (void *)v3))
          goto LABEL_150;
        PBReaderRecallMark();
        v42 = 40;
        goto LABEL_88;
      case 4:
        if (!v36 || (*(_WORD *)(a1 + 140) & 0x100) != 0)
          goto LABEL_104;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_151;
        v41 = objc_alloc_init(GEOWaypointTyped);
        if (!GEOWaypointTypedReadAllFrom((uint64_t)v41, (void *)v3, v11 & 1))
          goto LABEL_150;
        PBReaderRecallMark();
        -[GEOTransitRouteUpdateRequest _addNoFlagsOriginalWaypoint:](a1, v41);
        goto LABEL_65;
      case 5:
        if (!v36)
          goto LABEL_104;
        if ((*(_WORD *)(a1 + 140) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_151;
          v53 = *(_WORD *)(a1 + 140) << 8;
          goto LABEL_120;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_151;
        v41 = objc_alloc_init(GEORouteAttributes);
        if (!GEORouteAttributesReadAllFrom((uint64_t)v41, (void *)v3, v11 & 1))
          goto LABEL_150;
        PBReaderRecallMark();
        v42 = 72;
        goto LABEL_88;
      case 6:
        if (!v36)
          goto LABEL_104;
        if ((*(_WORD *)(a1 + 140) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_151;
          v53 = *(_WORD *)(a1 + 140) << 10;
          goto LABEL_120;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_151;
        v41 = objc_alloc_init(GEOAdditionalEnabledMarkets);
        if (!GEOAdditionalEnabledMarketsReadAllFrom((uint64_t)v41, (void *)v3, v11 & 1))
          goto LABEL_150;
        PBReaderRecallMark();
        v42 = 56;
        goto LABEL_88;
      case 7:
        if (!v36)
          goto LABEL_104;
        if ((*(_WORD *)(a1 + 140) & 0x10) == 0)
        {
          PBReaderReadData();
          v43 = objc_claimAutoreleasedReturnValue();
          v44 = 48;
          goto LABEL_82;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_151;
        v53 = *(_WORD *)(a1 + 140) << 11;
        goto LABEL_120;
      case 8:
        if (!v36)
          goto LABEL_104;
        if ((*(_WORD *)(a1 + 140) & 0x400) == 0)
        {
          PBReaderReadString();
          v43 = objc_claimAutoreleasedReturnValue();
          v44 = 96;
LABEL_82:
          v45 = *(void **)(a1 + v44);
          *(_QWORD *)(a1 + v44) = v43;
          goto LABEL_89;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_151;
        v53 = 32 * *(_WORD *)(a1 + 140);
        goto LABEL_120;
      case 9:
        if (!v36)
          goto LABEL_104;
        if ((*(_WORD *)(a1 + 140) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_151;
          v53 = *(_WORD *)(a1 + 140) << 6;
LABEL_120:
          v8 += v53 >> 15;
LABEL_121:
          v23 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v24 = (int *)MEMORY[0x1E0D82BB8];
LABEL_122:
          if (!(v61 & 1 | (v8 != 0)))
            goto LABEL_126;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_151;
        v41 = objc_alloc_init(GEOPrivacyMetadata);
        if (GEOPrivacyMetadataReadAllFrom((uint64_t)v41, (void *)v3))
        {
          PBReaderRecallMark();
          v42 = 88;
LABEL_88:
          v45 = *(void **)(a1 + v42);
          *(_QWORD *)(a1 + v42) = v41;
LABEL_89:

          --v8;
          goto LABEL_121;
        }
LABEL_150:

LABEL_151:
        v59 = 0;
        v23 = (int *)MEMORY[0x1E0D82BC8];
LABEL_127:
        if ((v60 & 1) != 0)
LABEL_128:
          *(_WORD *)(a1 + 140) |= 4u;
        if (v63 || (v59 & 1) == 0)
        {
          *(_WORD *)(a1 + 140) |= 0x800u;
          *(_WORD *)(a1 + 140) |= 0x40u;
          *(_WORD *)(a1 + 140) |= 8u;
          *(_WORD *)(a1 + 140) |= 0x100u;
          *(_WORD *)(a1 + 140) |= 0x80u;
          *(_WORD *)(a1 + 140) |= 0x20u;
          *(_WORD *)(a1 + 140) |= 0x10u;
          *(_WORD *)(a1 + 140) |= 0x400u;
          *(_WORD *)(a1 + 140) |= 0x200u;
          *(_WORD *)(a1 + 140) |= 0x1000u;
        }
        else if (v21)
        {
          while (1)
          {
            v55 = *v21++;
            v54 = v55;
            v56 = 2048;
            switch(v55)
            {
              case 0:
                goto LABEL_144;
              case 1:
                goto LABEL_143;
              case 2:
                v56 = 64;
                goto LABEL_143;
              case 3:
                v56 = 8;
                goto LABEL_143;
              case 4:
                v56 = 256;
                goto LABEL_143;
              case 5:
                v56 = 128;
                goto LABEL_143;
              case 6:
                v56 = 32;
                goto LABEL_143;
              case 7:
                v56 = 16;
                goto LABEL_143;
              case 8:
                v56 = 1024;
                goto LABEL_143;
              case 9:
                v56 = 512;
                goto LABEL_143;
              default:
                if (v54 != 100)
                  continue;
                v56 = 4096;
LABEL_143:
                *(_WORD *)(a1 + 140) |= v56;
                break;
            }
          }
        }
LABEL_144:
        if (v59)
          v3 = *(_BYTE *)(v3 + *v23) == 0;
        else
          v3 = 0;
        if (v63)
        {
          v57 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 10:
        if ((v9 & 1) == 0)
          goto LABEL_104;
        if (!PBReaderPlaceMark() || (GEOSessionIDReadAllFrom((_QWORD *)(a1 + 24), v3) & 1) == 0)
          goto LABEL_151;
        PBReaderRecallMark();
        *(_WORD *)(a1 + 140) |= 1u;
        goto LABEL_121;
      case 11:
        if ((v9 & 1) == 0)
          goto LABEL_104;
        *(_WORD *)(a1 + 140) |= 2u;
        v46 = *v22;
        v47 = *(_QWORD *)(v3 + v46);
        if (v47 <= 0xFFFFFFFFFFFFFFF7 && v47 + 8 <= *(_QWORD *)(v3 + *v7))
        {
          v48 = *(_QWORD *)(*(_QWORD *)(v3 + *v24) + v47);
          *(_QWORD *)(v3 + v46) = v47 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v23) = 1;
          v48 = 0;
        }
        *(_QWORD *)(a1 + 120) = v48;
        goto LABEL_122;
      default:
        if ((_DWORD)v35 == 100)
        {
          if (v36 && (*(_WORD *)(a1 + 140) & 0x1000) == 0)
          {
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_151;
            v41 = objc_alloc_init(GEOGeoServiceTag);
            if (!GEOGeoServiceTagReadAllFrom((uint64_t)v41, (void *)v3))
              goto LABEL_150;
            PBReaderRecallMark();
            -[GEOTransitRouteUpdateRequest _addNoFlagsServiceTag:](a1, v41);
LABEL_65:

            goto LABEL_121;
          }
LABEL_104:
          v52 = PBReaderSkipValueWithTag();
          v24 = (int *)MEMORY[0x1E0D82BB8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v23 = (int *)MEMORY[0x1E0D82BC8];
          if ((v52 & 1) == 0)
          {
            v59 = 0;
            goto LABEL_127;
          }
          goto LABEL_122;
        }
        if ((v60 & 1) == 0 || (*(_WORD *)(a1 + 140) & 4) != 0)
          goto LABEL_104;
        if (!*(_QWORD *)(a1 + 16))
        {
          v49 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v50 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v49;

        }
        v51 = PBUnknownFieldAdd();
        v23 = (int *)MEMORY[0x1E0D82BC8];
        v7 = (int *)MEMORY[0x1E0D82BD8];
        v24 = (int *)MEMORY[0x1E0D82BB8];
        if (!v51)
        {
          v59 = 0;
          goto LABEL_128;
        }
        goto LABEL_122;
    }
  }
}

void sub_1888FDC60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FDDA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FDEE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FE21C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FE360(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FE4A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FE5E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FE728(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FE958(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1888FFDB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOTransitRouteUpdateRequestCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v2 = a1[13];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v26;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v26 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
    }
    while (v4);
  }

  objc_msgSend(a1[8], "readAll:", 1);
  objc_msgSend(a1[5], "readAll:", 1);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v7 = a1[10];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v22;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v22 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * v11++), "readAll:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
    }
    while (v9);
  }

  objc_msgSend(a1[9], "readAll:", 1);
  objc_msgSend(a1[7], "readAll:", 1);
  objc_msgSend(a1[11], "readAll:", 1);
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v12 = a1[14];
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v18;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v18 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v16++), "readAll:", 1, (_QWORD)v17);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
    }
    while (v14);
  }

}

uint64_t GEOTransitRouteUpdateRequestReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 132))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitRouteUpdateRequestReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 128) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 132) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitRouteUpdateRequestReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitRouteUpdateRequestReadAllFrom_initialTag;
  Specified = GEOTransitRouteUpdateRequestReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitRouteUpdateRequestCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  return Specified;
}

void sub_1889001CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOTransitRouteUpdateRequestReadFrom(uint64_t a1, void *a2)
{
  id v3;
  uint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitRouteUpdateRequestReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18890022C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitRouteUpdateRequestIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOTransitRouteIdentifierIsValid(a1))
            goto LABEL_59;
          goto LABEL_69;
        case 2u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOClientCapabilitiesIsValid(a1))
            goto LABEL_69;
          goto LABEL_59;
        case 3u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDABClientDatasetMetadataIsValid(a1))
            goto LABEL_69;
          goto LABEL_59;
        case 4u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOWaypointTypedIsValid(a1))
            goto LABEL_69;
          goto LABEL_59;
        case 5u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEORouteAttributesIsValid(a1))
            goto LABEL_69;
          goto LABEL_59;
        case 6u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOAdditionalEnabledMarketsIsValid(a1))
            goto LABEL_69;
          goto LABEL_59;
        case 7u:
          if (v16 == 2)
            goto LABEL_64;
          goto LABEL_69;
        case 8u:
          if (v16 == 2)
            goto LABEL_64;
          goto LABEL_69;
        case 9u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPrivacyMetadataIsValid(a1))
            goto LABEL_69;
          goto LABEL_59;
        case 0xAu:
          if (v16 == 2 && PBReaderPlaceMark() && GEOSessionIDIsValid(a1))
            goto LABEL_59;
          goto LABEL_69;
        case 0xBu:
          if (v16 != 1)
            goto LABEL_69;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && (v20 = v19 + 8, v20 <= *(_QWORD *)&a1[*v3]))
            *(_QWORD *)&a1[v18] = v20;
          else
            a1[v14] = 1;
          goto LABEL_65;
        default:
          if ((v8 >> 3) == 100)
          {
            if (v16 != 2 || !PBReaderPlaceMark() || !GEOGeoServiceTagIsValid(a1))
            {
LABEL_69:
              PBReaderRecallMark();
              return 0;
            }
LABEL_59:
            PBReaderRecallMark();
          }
          else
          {
LABEL_64:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_69;
          }
LABEL_65:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_68;
          break;
      }
    }
  }
LABEL_68:
  v21 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v21;
}

void sub_188900A74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitRouteUpdateRequestIsDirty(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 136));
  v2 = *(_WORD *)(a1 + 140);
  if ((v2 & 0x2800) != 0)
    return 1;
  if ((v2 & 0x40) == 0)
  {
LABEL_5:
    if ((v2 & 0x108) != 0)
      return 1;
    if ((v2 & 0x80) != 0)
    {
      if ((GEORouteAttributesIsDirty(*(os_unfair_lock_s **)(a1 + 72)) & 1) != 0)
        return 1;
      v2 = *(_WORD *)(a1 + 140);
    }
    if ((v2 & 0x20) != 0)
    {
      if (GEOAdditionalEnabledMarketsIsDirty(*(_QWORD *)(a1 + 56)))
        return 1;
      v2 = *(_WORD *)(a1 + 140);
    }
    if ((v2 & 0x1610) != 0)
      return 1;
    if ((v2 & 0x800) != 0)
    {
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v5 = *(id *)(a1 + 104);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v17;
LABEL_18:
        v9 = 0;
        while (1)
        {
          if (*(_QWORD *)v17 != v8)
            objc_enumerationMutation(v5);
          if (GEOTransitRouteIdentifierIsDirty(*(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v9)))
            goto LABEL_36;
          if (v7 == ++v9)
          {
            v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
            if (v7)
              goto LABEL_18;
            break;
          }
        }
      }

      v2 = *(_WORD *)(a1 + 140);
    }
    if ((v2 & 0x100) == 0)
      return 0;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v5 = *(id *)(a1 + 80);
    v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    if (!v3)
    {
LABEL_37:

      return v3;
    }
    v10 = *(_QWORD *)v13;
LABEL_29:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v13 != v10)
        objc_enumerationMutation(v5);
      if ((GEOWaypointTypedIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v12 + 1) + 8 * v11)) & 1) != 0)
        break;
      if (v3 == ++v11)
      {
        v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
        if (v3)
          goto LABEL_29;
        goto LABEL_37;
      }
    }
LABEL_36:
    v3 = 1;
    goto LABEL_37;
  }
  if (!GEOClientCapabilitiesIsDirty(*(_QWORD *)(a1 + 64)))
  {
    v2 = *(_WORD *)(a1 + 140);
    goto LABEL_5;
  }
  return 1;
}

os_unfair_lock_s *GEOTransitRouteUpdateRequestIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTransitRouteUpdateRequestIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 34);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

unint64_t GEOTransitRouteUpdateRequestClearSensitiveFields(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t result;
  unint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  -[GEOTransitRouteUpdateRequest _readOriginalWaypoints](a1);
  result = objc_msgSend(*(id *)(a1 + 80), "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      objc_msgSend(*(id *)(a1 + 80), "objectAtIndexedSubscript:", i);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = v8;
      if (a3 && GEOWaypointTypedHasSensitiveFields(v8))
      {
        v10 = (void *)objc_msgSend(v9, "copy");
        objc_msgSend(v10, "waypointLocation");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "clearSensitiveFields:", a2);

        objc_msgSend(*(id *)(a1 + 80), "replaceObjectAtIndex:withObject:", i, v10);
      }
      else
      {
        objc_msgSend(v9, "clearSensitiveFields:", a2);
      }

      result = objc_msgSend(*(id *)(a1 + 80), "count");
    }
  }
  return result;
}

uint64_t GEOTransitRouteUpdateRequestHasSensitiveFields(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  objc_msgSend(a1, "originalWaypoints", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        if ((GEOWaypointTypedHasSensitiveFields(*(void **)(*((_QWORD *)&v8 + 1) + 8 * v5)) & 1) != 0)
        {
          v6 = 1;
          goto LABEL_12;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_12:

  return v6;
}

void sub_1889017D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188902018(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188902544(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOTransitRouteUpdateResponseReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  BOOL v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  GEOTransitRouteUpdate *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  void *v49;
  id v50;
  void *v51;
  int v52;
  char v53;
  __int16 v54;
  int v55;
  int v56;
  __int16 v57;
  void *v58;
  int v60;
  unint64_t v61;
  char v62;
  char v63;
  char v64;
  char v65;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 96));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 92);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 88));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 104)), (uint16x4_t)0xFFFBFFFDFFFAFFFCLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 104) >> 7) & 1)+ ((*(_WORD *)(a1 + 104) >> 2) & 1));
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 > 3;
        v62 = v17 & ~(_BYTE)v12 | v10;
        v63 = v17 | v12 | v62;
        if ((((v17 | v12) | v9) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v64 = (v18 == 0) | v17 | v12;
        v65 = v17 | v12;
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v10;
LABEL_8:
        v15 = v11;
        v16 = v12;
LABEL_10:
        ++v8;
        v10 = v14;
        v11 = v15;
        v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v20))
      goto LABEL_99;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v7))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      v29 = v23++ >= 9;
      if (v29)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_27:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_99:
      v60 = 1;
      goto LABEL_100;
    }
    v32 = v24 >> 3;
    v33 = v65;
    if ((v64 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if (!v33 || (*(_WORD *)(a1 + 104) & 0x40) != 0)
          goto LABEL_82;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_119;
        v38 = objc_alloc_init(GEOTransitRouteUpdate);
        if (!GEOTransitRouteUpdateReadAllFrom((uint64_t)v38, (void *)v3, v11 & 1))
          goto LABEL_118;
        PBReaderRecallMark();
        -[GEOTransitRouteUpdateResponse _addNoFlagsRouteUpdate:](a1, v38);

        goto LABEL_97;
      case 2:
        if (!v33)
          goto LABEL_82;
        if ((*(_WORD *)(a1 + 104) & 0x10) == 0)
        {
          PBReaderReadData();
          v40 = objc_claimAutoreleasedReturnValue();
          v41 = 56;
          goto LABEL_74;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_119;
        v54 = *(_WORD *)(a1 + 104) << 11;
        goto LABEL_96;
      case 3:
        if ((v9 & 1) == 0)
          goto LABEL_82;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 104) |= 2u;
        while (2)
        {
          v45 = *v19;
          v46 = *(_QWORD *)(v3 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v46);
            *(_QWORD *)(v3 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              v29 = v43++ >= 9;
              if (v29)
              {
                LODWORD(v44) = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v44) = 0;
LABEL_87:
        *(_DWORD *)(a1 + 100) = v44;
        goto LABEL_98;
      case 4:
        if (!v33)
          goto LABEL_82;
        if ((*(_WORD *)(a1 + 104) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_119;
          v54 = *(_WORD *)(a1 + 104) << 12;
LABEL_96:
          v8 += v54 >> 15;
LABEL_97:
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
LABEL_98:
          if (!(v63 & 1 | (v8 != 0)))
            goto LABEL_99;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_119;
        v38 = objc_alloc_init(GEOPDDatasetABStatus);
        if (GEOPDDatasetABStatusReadAllFrom((uint64_t)v38, (void *)v3))
        {
          PBReaderRecallMark();
          v39 = 48;
LABEL_66:
          v49 = *(void **)(a1 + v39);
          *(_QWORD *)(a1 + v39) = v38;
LABEL_75:

          --v8;
          goto LABEL_97;
        }
LABEL_118:

LABEL_119:
        v60 = 0;
        v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_100:
        v61 = 0x1ECDA9000uLL;
        if ((v62 & 1) != 0)
LABEL_101:
          *(_WORD *)(a1 + *(int *)(v61 + 1964)) |= 4u;
        if (v65 & 1 | ((v60 & 1) == 0))
        {
          *(_WORD *)(a1 + *(int *)(v61 + 1964)) |= 0x40u;
          *(_WORD *)(a1 + *(int *)(v61 + 1964)) |= 0x10u;
          *(_WORD *)(a1 + *(int *)(v61 + 1964)) |= 8u;
          *(_WORD *)(a1 + *(int *)(v61 + 1964)) |= 0x20u;
          *(_WORD *)(a1 + *(int *)(v61 + 1964)) |= 0x80u;
        }
        else if (v18)
        {
          while (1)
          {
            v56 = *v18++;
            v55 = v56;
            v57 = 64;
            switch(v56)
            {
              case 0:
                goto LABEL_112;
              case 1:
                goto LABEL_111;
              case 2:
                v57 = 16;
                goto LABEL_111;
              case 3:
              case 5:
                continue;
              case 4:
                v57 = 8;
                goto LABEL_111;
              case 6:
                v57 = 128;
                goto LABEL_111;
              default:
                if (v55 != 32)
                  continue;
                v57 = 32;
LABEL_111:
                *(_WORD *)(a1 + *(int *)(v61 + 1964)) |= v57;
                break;
            }
          }
        }
LABEL_112:
        if (v60)
          v3 = *(_BYTE *)(v3 + *v20) == 0;
        else
          v3 = 0;
        if ((v65 & 1) != 0)
        {
          v58 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 5:
        if ((v9 & 1) == 0)
          goto LABEL_82;
        if (!PBReaderPlaceMark() || (GEOTimepointReadAllFrom(a1 + 24, v3) & 1) == 0)
          goto LABEL_119;
        PBReaderRecallMark();
        *(_WORD *)(a1 + 104) |= 1u;
        goto LABEL_97;
      case 6:
        if (!v33)
          goto LABEL_82;
        if ((*(_WORD *)(a1 + 104) & 0x80) == 0)
        {
          PBReaderReadString();
          v40 = objc_claimAutoreleasedReturnValue();
          v41 = 80;
LABEL_74:
          v49 = *(void **)(a1 + v41);
          *(_QWORD *)(a1 + v41) = v40;
          goto LABEL_75;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_119;
        v54 = *(_WORD *)(a1 + 104) << 8;
        goto LABEL_96;
      default:
        if ((_DWORD)v32 == 32)
        {
          if (!v33)
            goto LABEL_82;
          if ((*(_WORD *)(a1 + 104) & 0x20) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_119;
            v54 = *(_WORD *)(a1 + 104) << 10;
            goto LABEL_96;
          }
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_119;
          v38 = objc_alloc_init(GEOTransitRouteUpdateConfiguration);
          if (!GEOTransitRouteUpdateConfigurationReadAllFrom((uint64_t)v38, (void *)v3))
            goto LABEL_118;
          PBReaderRecallMark();
          v39 = 64;
          goto LABEL_66;
        }
        if ((v62 & 1) == 0 || (*(_WORD *)(a1 + 104) & 4) != 0)
        {
LABEL_82:
          v53 = PBReaderSkipValueWithTag();
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v20 = (int *)MEMORY[0x1E0D82BC8];
          if ((v53 & 1) == 0)
          {
            v60 = 0;
            goto LABEL_100;
          }
          goto LABEL_98;
        }
        if (!*(_QWORD *)(a1 + 16))
        {
          v50 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v51 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v50;

        }
        v52 = PBUnknownFieldAdd();
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v7 = (int *)MEMORY[0x1E0D82BD8];
        if (!v52)
        {
          v60 = 0;
          v61 = 0x1ECDA9000;
          goto LABEL_101;
        }
        goto LABEL_98;
    }
  }
}

void sub_1889030CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188903500(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188903644(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188903810(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188904564(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitRouteUpdateResponseCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = a1[9];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v8);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  objc_msgSend(a1[6], "readAll:", 1);
  return objc_msgSend(a1[8], "readAll:", 1);
}

uint64_t GEOTransitRouteUpdateResponseReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 92))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitRouteUpdateResponseReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 88) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 92) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitRouteUpdateResponseReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitRouteUpdateResponseReadAllFrom_initialTag;
  Specified = GEOTransitRouteUpdateResponseReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitRouteUpdateResponseCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  return Specified;
}

void sub_18890481C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOTransitRouteUpdateResponseReadFrom(uint64_t a1, void *a2)
{
  id v3;
  uint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitRouteUpdateResponseReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18890487C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitRouteUpdateResponseIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOTransitRouteUpdateIsValid(a1))
            goto LABEL_45;
          goto LABEL_52;
        case 2u:
          if (v15 == 2)
            goto LABEL_47;
          goto LABEL_52;
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_52;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              break;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0 && v17++ <= 8)
              continue;
            goto LABEL_48;
          }
          a1[*v4] = 1;
          goto LABEL_48;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDDatasetABStatusIsValid(a1))
            goto LABEL_52;
          goto LABEL_45;
        case 5u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOTimepointIsValid(a1))
            goto LABEL_45;
          goto LABEL_52;
        case 6u:
          if (v15 == 2)
            goto LABEL_47;
          goto LABEL_52;
        default:
          if ((v8 >> 3) == 32)
          {
            if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitRouteUpdateConfigurationIsValid(a1))
            {
LABEL_52:
              PBReaderRecallMark();
              return 0;
            }
LABEL_45:
            PBReaderRecallMark();
          }
          else
          {
LABEL_47:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_52;
          }
LABEL_48:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_51;
          break;
      }
    }
  }
LABEL_51:
  v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

void sub_188904E70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitRouteUpdateResponseIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 96));
  v2 = (*(_WORD *)(a1 + 104) & 0x1F8) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  return v2;
}

void sub_1889053A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889058F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188905C74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitStepUpdateReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  void *v40;
  id v41;
  void *v42;
  int v43;
  GEOInstructionSet *v44;
  uint64_t v45;
  char v46;
  char v47;
  int v48;
  char v49;
  void *v50;
  int v52;
  unint64_t v53;
  char v54;
  char v55;
  char v56;
  BOOL v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 76)), (uint16x4_t)0xFFFDFFFBFFFCFFFELL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 76) & 1)+ ((*(_BYTE *)(a1 + 76) & 2) != 0));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 3;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v54 = v17;
        v55 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v56 = (v19 == 0) | v18;
        v57 = v18;
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_85;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_85:
      v52 = 1;
      goto LABEL_86;
    }
    v33 = v25 >> 3;
    v34 = v57;
    if ((v56 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34)
          goto LABEL_70;
        if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
        {
          PBReaderReadData();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = *(void **)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v39;
          goto LABEL_69;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_104;
        v47 = 8 * *(_BYTE *)(a1 + 76);
        goto LABEL_82;
      case 2:
        if (!v34)
          goto LABEL_70;
        if ((*(_BYTE *)(a1 + 76) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_104;
          v47 = 32 * *(_BYTE *)(a1 + 76);
          goto LABEL_82;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_104;
        v44 = objc_alloc_init(GEOInstructionSet);
        if (!GEOInstructionSetReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_103;
        PBReaderRecallMark();
        v45 = 32;
        goto LABEL_68;
      case 3:
        if (!v34)
          goto LABEL_70;
        if ((*(_BYTE *)(a1 + 76) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_104;
          v47 = 4 * *(_BYTE *)(a1 + 76);
          goto LABEL_82;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_104;
        v44 = objc_alloc_init(GEOTransitVehiclePositionInfo);
        if (!GEOTransitVehiclePositionInfoReadAllFrom(v44, (void *)v3))
          goto LABEL_103;
        PBReaderRecallMark();
        v45 = 56;
        goto LABEL_68;
      case 4:
        if (!v34)
          goto LABEL_70;
        if ((*(_BYTE *)(a1 + 76) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_104;
          v47 = 16 * *(_BYTE *)(a1 + 76);
          goto LABEL_82;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_104;
        v44 = objc_alloc_init(GEOTransitScheduleInfo);
        if (!GEOTransitScheduleInfoReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_103;
        PBReaderRecallMark();
        v45 = 40;
        goto LABEL_68;
      case 5:
        if (!v34)
          goto LABEL_70;
        if ((*(_BYTE *)(a1 + 76) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_104;
          v47 = *(_BYTE *)(a1 + 76) << 6;
LABEL_82:
          v7 += v47 >> 7;
LABEL_83:
          v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_84:
          if (!(v55 & 1 | (v7 != 0)))
            goto LABEL_85;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_104;
        v44 = objc_alloc_init(GEOTransitBoardingInfo);
        if (GEOTransitBoardingInfoReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v45 = 24;
LABEL_68:
          v40 = *(void **)(a1 + v45);
          *(_QWORD *)(a1 + v45) = v44;
LABEL_69:

          --v7;
          goto LABEL_83;
        }
LABEL_103:

LABEL_104:
        v52 = 0;
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_86:
        v53 = 0x1ECDA9000uLL;
        if ((v54 & 1) != 0)
LABEL_87:
          *(_BYTE *)(a1 + *(int *)(v53 + 2016)) |= 1u;
        if (v57 || (v52 & 1) == 0)
        {
          *(_BYTE *)(a1 + *(int *)(v53 + 2016)) |= 0x10u;
          *(_BYTE *)(a1 + *(int *)(v53 + 2016)) |= 4u;
          *(_BYTE *)(a1 + *(int *)(v53 + 2016)) |= 0x20u;
          *(_BYTE *)(a1 + *(int *)(v53 + 2016)) |= 8u;
          *(_BYTE *)(a1 + *(int *)(v53 + 2016)) |= 2u;
        }
        else if (v19)
        {
          while (1)
          {
            v48 = *v19++;
            v49 = 16;
            switch(v48)
            {
              case 0:
                goto LABEL_97;
              case 1:
                goto LABEL_96;
              case 2:
                v49 = 4;
                goto LABEL_96;
              case 3:
                v49 = 32;
                goto LABEL_96;
              case 4:
                v49 = 8;
                goto LABEL_96;
              case 5:
                v49 = 2;
LABEL_96:
                *(_BYTE *)(a1 + *(int *)(v53 + 2016)) |= v49;
                break;
              default:
                continue;
            }
          }
        }
LABEL_97:
        if (v52)
          v3 = *(_BYTE *)(v3 + *v21) == 0;
        else
          v3 = 0;
        if (v57)
        {
          v50 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v54 & 1) == 0 || (*(_BYTE *)(a1 + 76) & 1) != 0)
        {
LABEL_70:
          v46 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if ((v46 & 1) == 0)
          {
            v52 = 0;
            goto LABEL_86;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v42 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v41;

          }
          v43 = PBUnknownFieldAdd();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if (!v43)
          {
            v52 = 0;
            v53 = 0x1ECDA9000;
            goto LABEL_87;
          }
        }
        goto LABEL_84;
    }
  }
}

void sub_188906518(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188906658(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188906798(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889068DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188907114(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitStepUpdateCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  objc_msgSend(a1[4], "readAll:", 1);
  objc_msgSend(a1[7], "readAll:", 1);
  objc_msgSend(a1[5], "readAll:", 1);
  return objc_msgSend(a1[3], "readAll:", 1);
}

unint64_t GEOTransitStepUpdateReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitStepUpdateReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitStepUpdateReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitStepUpdateReadAllFrom_initialTag;
  Specified = GEOTransitStepUpdateReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitStepUpdateCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_18890730C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitStepUpdateReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitStepUpdateReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18890736C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188907550(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitStepUpdateIsDirty(uint64_t a1)
{
  char v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v2 = *(_BYTE *)(a1 + 76);
  if ((v2 & 0x50) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 76) & 4) != 0)
  {
    if ((GEOInstructionSetIsDirty(*(os_unfair_lock_s **)(a1 + 32)) & 1) != 0)
      return 1;
    v2 = *(_BYTE *)(a1 + 76);
  }
  if ((v2 & 0x28) != 0)
    return 1;
  if ((v2 & 2) != 0)
    return (uint64_t)GEOTransitBoardingInfoIsDirty(*(os_unfair_lock_s **)(a1 + 24));
  else
    return 0;
}

os_unfair_lock_s *GEOTransitStepUpdateIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTransitStepUpdateIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 18);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_18890791C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188907C78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188908654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1889086C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)GEOTileCache;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_188908854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1889088DC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_188908938(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_188908B44(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_188908C70(_Unwind_Exception *a1)
{
  void *v1;
  std::mutex *v2;
  void *v3;

  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_188908EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::__list_imp<CacheItem>::clear((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_188909068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  _QWORD *v8;
  void *v9;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  std::__list_imp<std::__list_iterator<LoadItem,void *>>::clear(v8);

  _Unwind_Resume(a1);
}

void sub_18890913C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__list_imp<CacheItem>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];

        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

id GEOStringFromTileProvider(uint64_t a1)
{
  void *v2;
  void *v3;
  const __CFString *v4;

  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((a1 & 0x40) != 0)
    objc_msgSend(v2, "appendString:", CFSTR("Offline "));
  switch(a1 & 0x1F)
  {
    case 1:
      v4 = CFSTR("Invalid");
      goto LABEL_27;
    case 2:
      v4 = CFSTR("Voltaire");
      goto LABEL_27;
    case 3:
      v4 = CFSTR("VoltaireSimple3D");
      goto LABEL_27;
    case 4:
      v4 = CFSTR("VoltaireSputnikMetadata");
      goto LABEL_27;
    case 5:
      v4 = CFSTR("MuninTile");
      goto LABEL_27;
    case 6:
      v4 = CFSTR("MuninMesh");
      goto LABEL_27;
    case 7:
      v4 = CFSTR("MuninTexture");
      goto LABEL_27;
    case 8:
      v4 = CFSTR("Regional");
      goto LABEL_27;
    case 9:
      v4 = CFSTR("Identified");
      goto LABEL_27;
    case 0xALL:
      v4 = CFSTR("FeatureSpecific");
      goto LABEL_27;
    case 0xBLL:
      v4 = CFSTR("PolygonSelection");
      goto LABEL_27;
    case 0xCLL:
      v4 = CFSTR("Gloria");
      goto LABEL_27;
    case 0xDLL:
    case 0xFLL:
      v4 = CFSTR("VL");
      goto LABEL_27;
    case 0xELL:
      v4 = CFSTR("VLMeta");
      goto LABEL_27;
    case 0x10:
      v4 = CFSTR("S2");
      goto LABEL_27;
    case 0x12:
      v4 = CFSTR("Live");
      goto LABEL_27;
    case 0x13:
      v4 = CFSTR("RoadSelection");
      goto LABEL_27;
    case 0x14:
      v4 = CFSTR("ContourLines");
      goto LABEL_27;
    case 0x1BLL:
      v4 = CFSTR("External_1");
      goto LABEL_27;
    case 0x1CLL:
      v4 = CFSTR("External_2");
      goto LABEL_27;
    case 0x1DLL:
      v4 = CFSTR("External_3");
      goto LABEL_27;
    case 0x1ELL:
      v4 = CFSTR("External_4");
LABEL_27:
      objc_msgSend(v3, "appendString:", v4);
      break;
    default:
      objc_msgSend(v3, "appendFormat:", CFSTR("Unknown(%d)"), a1);
      break;
  }
  return v3;
}

id GEOStringFromTileKey(char *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  __CFString *v6;
  void *v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  __CFString *v17;
  void *v18;
  void *v19;
  __int128 v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __CFString *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __CFString *v34;
  const __CFString *v35;
  uint64_t v36;
  uint64_t v37;
  __CFString *v38;
  int v39;
  __CFString *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  switch(*a1 & 0x1F)
  {
    case 9:
      v2 = (void *)MEMORY[0x1E0CB3940];
      v3 = *(_QWORD *)(a1 + 1);
      v4 = a1[9];
      if ((*(_DWORD *)(a1 + 11) & 1) != 0)
        v5 = "Y";
      else
        v5 = "N";
      v6 = CFSTR("RASTER_STANDARD");
      switch(a1[10])
      {
        case 0:
          break;
        case 1:
          v6 = CFSTR("VECTOR_STANDARD");
          break;
        case 2:
          v6 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER");
          break;
        case 3:
          v6 = CFSTR("VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER");
          break;
        case 4:
          v6 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER");
          break;
        case 5:
          v6 = CFSTR("RASTER_STANDARD_BACKGROUND");
          break;
        case 6:
          v6 = CFSTR("RASTER_HYBRID");
          break;
        case 7:
          v6 = CFSTR("RASTER_SATELLITE");
          break;
        case 8:
          v6 = CFSTR("RASTER_TERRAIN");
          break;
        case 11:
          v6 = CFSTR("VECTOR_BUILDINGS");
          break;
        case 12:
          v6 = CFSTR("VECTOR_TRAFFIC");
          break;
        case 13:
          v6 = CFSTR("VECTOR_POI");
          break;
        case 14:
          v6 = CFSTR("SPUTNIK_METADATA");
          break;
        case 15:
          v6 = CFSTR("SPUTNIK_C3M");
          break;
        case 16:
          v6 = CFSTR("SPUTNIK_DSM");
          break;
        case 17:
          v6 = CFSTR("SPUTNIK_DSM_GLOBAL");
          break;
        case 18:
          v6 = CFSTR("VECTOR_REALISTIC");
          break;
        case 19:
          v6 = CFSTR("VECTOR_LEGACY_REALISTIC");
          break;
        case 20:
          v6 = CFSTR("VECTOR_ROADS");
          break;
        case 21:
          v6 = CFSTR("RASTER_VEGETATION");
          break;
        case 22:
          v6 = CFSTR("VECTOR_TRAFFIC_SKELETON");
          break;
        case 23:
          v6 = CFSTR("RASTER_COASTLINE_MASK");
          break;
        case 24:
          v6 = CFSTR("RASTER_HILLSHADE");
          break;
        case 25:
          v6 = CFSTR("VECTOR_TRAFFIC_WITH_GREEN");
          break;
        case 26:
          v6 = CFSTR("VECTOR_TRAFFIC_STATIC");
          break;
        case 27:
          v6 = CFSTR("RASTER_COASTLINE_DROP_MASK");
          break;
        case 28:
          v6 = CFSTR("VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL");
          break;
        case 29:
          v6 = CFSTR("VECTOR_SPEED_PROFILES");
          break;
        case 30:
          v6 = CFSTR("VECTOR_VENUES");
          break;
        case 31:
          v6 = CFSTR("RASTER_DOWN_SAMPLED");
          break;
        case 32:
          v6 = CFSTR("RASTER_COLOR_BALANCED");
          break;
        case 33:
          v6 = CFSTR("RASTER_SATELLITE_NIGHT");
          break;
        case 34:
          v6 = CFSTR("SPUTNIK_VECTOR_BORDER");
          break;
        case 35:
          v6 = CFSTR("RASTER_SATELLITE_DIGITIZE");
          break;
        case 36:
          v6 = CFSTR("RASTER_HILLSHADE_PARKS");
          break;
        case 37:
          v6 = CFSTR("VECTOR_TRANSIT");
          break;
        case 38:
          v6 = CFSTR("RASTER_STANDARD_BASE");
          break;
        case 39:
          v6 = CFSTR("RASTER_STANDARD_LABELS");
          break;
        case 40:
          v6 = CFSTR("RASTER_HYBRID_ROADS");
          break;
        case 41:
          v6 = CFSTR("RASTER_HYBRID_LABELS");
          break;
        case 42:
          v6 = CFSTR("FLYOVER_C3M_MESH");
          break;
        case 43:
          v6 = CFSTR("FLYOVER_C3M_JPEG_TEXTURE");
          break;
        case 44:
          v6 = CFSTR("FLYOVER_C3M_ASTC_TEXTURE");
          break;
        case 45:
          v6 = CFSTR("RASTER_SATELLITE_ASTC");
          break;
        case 46:
          v6 = CFSTR("RASTER_HYBRID_ROADS_AND_LABELS");
          break;
        case 47:
          v6 = CFSTR("VECTOR_TRANSIT_SELECTION");
          break;
        case 48:
          v6 = CFSTR("VECTOR_COVERAGE");
          break;
        case 52:
          v6 = CFSTR("FLYOVER_METADATA");
          break;
        case 53:
          v6 = CFSTR("VECTOR_ROAD_NETWORK");
          break;
        case 54:
          v6 = CFSTR("VECTOR_LAND_COVER");
          break;
        case 55:
          v6 = CFSTR("VECTOR_DEBUG");
          break;
        case 56:
          v6 = CFSTR("VECTOR_STREET_POI");
          break;
        case 57:
          v6 = CFSTR("MUNIN_METADATA");
          break;
        case 58:
          v6 = CFSTR("VECTOR_SPR_MERCATOR");
          break;
        case 59:
          v6 = CFSTR("VECTOR_SPR_MODELS");
          break;
        case 60:
          v6 = CFSTR("VECTOR_SPR_MATERIALS");
          break;
        case 61:
          v6 = CFSTR("VECTOR_SPR_METADATA");
          break;
        case 62:
          v6 = CFSTR("VECTOR_TRACKS");
          break;
        case 63:
          v6 = CFSTR("VECTOR_RESERVED_2");
          break;
        case 64:
          v6 = CFSTR("VECTOR_STREET_LANDMARKS");
          break;
        case 65:
          v6 = CFSTR("COARSE_LOCATION_POLYGONS");
          break;
        case 66:
          v6 = CFSTR("VECTOR_SPR_ROADS");
          break;
        case 67:
          v6 = CFSTR("VECTOR_SPR_STANDARD");
          break;
        case 68:
          v6 = CFSTR("VECTOR_POI_V2");
          break;
        case 69:
          v6 = CFSTR("VECTOR_POLYGON_SELECTION");
          break;
        case 70:
          v6 = CFSTR("VL_METADATA");
          break;
        case 71:
          v6 = CFSTR("VL_DATA");
          break;
        case 72:
          v6 = CFSTR("PROACTIVE_APP_CLIP");
          break;
        case 73:
          v6 = CFSTR("VECTOR_BUILDINGS_V2");
          break;
        case 74:
          v6 = CFSTR("POI_BUSYNESS");
          break;
        case 75:
          v6 = CFSTR("POI_DP_BUSYNESS");
          break;
        case 76:
          v6 = CFSTR("SMART_INTERFACE_SELECTION");
          break;
        case 77:
          v6 = CFSTR("VECTOR_ASSETS");
          break;
        case 78:
          v6 = CFSTR("SPR_ASSET_METADATA");
          break;
        case 79:
          v6 = CFSTR("VECTOR_SPR_POLAR");
          break;
        case 80:
          v6 = CFSTR("SMART_DATA_MODE");
          break;
        case 81:
          v6 = CFSTR("CELLULAR_PERFORMANCE_SCORE");
          break;
        case 82:
          v6 = CFSTR("VECTOR_SPR_MODELS_OCCLUSION");
          break;
        case 83:
          v6 = CFSTR("VECTOR_TOPOGRAPHIC");
          break;
        case 84:
          v6 = CFSTR("VECTOR_POI_V2_UPDATE");
          break;
        case 85:
          v6 = CFSTR("VECTOR_LIVE_DATA_UPDATES");
          break;
        case 86:
          v6 = CFSTR("VECTOR_TRAFFIC_V2");
          break;
        case 87:
          v6 = CFSTR("VECTOR_ROAD_SELECTION");
          break;
        case 88:
          v6 = CFSTR("VECTOR_REGION_METADATA");
          break;
        case 89:
          v6 = CFSTR("RAY_TRACING");
          break;
        case 90:
          v6 = CFSTR("VECTOR_CONTOURS");
          break;
        case 91:
          v6 = CFSTR("RASTER_SATELLITE_POLAR");
          break;
        case 92:
          v6 = CFSTR("VMAP4_ELEVATION");
          break;
        case 93:
          v6 = CFSTR("VMAP4_ELEVATION_POLAR");
          break;
        case 94:
          v6 = CFSTR("CELLULAR_COVERAGE_PLMN");
          break;
        case 95:
          v6 = CFSTR("RASTER_SATELLITE_POLAR_NIGHT");
          break;
        case 96:
          v6 = CFSTR("UNUSED_96");
          break;
        case 97:
          v6 = CFSTR("UNUSED_97");
          break;
        case 98:
          v6 = CFSTR("UNUSED_98");
          break;
        case 99:
          v6 = CFSTR("UNUSED_99");
          break;
        case 100:
          v6 = CFSTR("UNUSED_100");
          break;
        case 101:
          v6 = CFSTR("UNUSED_101");
          break;
        case 102:
          v6 = CFSTR("UNUSED_102");
          break;
        case 103:
          v6 = CFSTR("UNUSED_103");
          break;
        case 104:
          v6 = CFSTR("UNUSED_104");
          break;
        case 105:
          v6 = CFSTR("UNUSED_105");
          break;
        case 106:
          v6 = CFSTR("UNUSED_106");
          break;
        case 107:
          v6 = CFSTR("UNUSED_107");
          break;
        case 108:
          v6 = CFSTR("UNUSED_108");
          break;
        case 109:
          v6 = CFSTR("UNUSED_109");
          break;
        case 110:
          v6 = CFSTR("UNUSED_110");
          break;
        case 111:
          v6 = CFSTR("UNUSED_111");
          break;
        case 112:
          v6 = CFSTR("UNUSED_112");
          break;
        case 113:
          v6 = CFSTR("UNUSED_113");
          break;
        case 114:
          v6 = CFSTR("UNUSED_114");
          break;
        case 115:
          v6 = CFSTR("UNUSED_115");
          break;
        case 116:
          v6 = CFSTR("UNUSED_116");
          break;
        case 117:
          v6 = CFSTR("UNUSED_117");
          break;
        case 118:
          v6 = CFSTR("UNUSED_118");
          break;
        case 119:
          v6 = CFSTR("UNUSED_119");
          break;
        default:
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a1[10]);
          v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
          break;
      }
      objc_msgSend(v2, "stringWithFormat:", CFSTR("id: %llu lod: %u ASTC: %s type: %@"), v3, v4, v5, v6);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_386;
    case 0xA:
    case 0xB:
    case 0xD:
    case 0x10:
    case 0x11:
      goto LABEL_10;
    case 0xC:
      *((_QWORD *)&v20 + 1) = *(unsigned __int16 *)(a1 + 9) | ((unint64_t)a1[11] << 16);
      *(_QWORD *)&v20 = *(_QWORD *)(a1 + 1);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("z=%u qk=%llu t=%u"), v20 & 0x3F, (unint64_t)(v20 >> 6), ((*(unsigned __int16 *)(a1 + 9) | (a1[11] << 16)) >> 6) & 0x3FFF, v46, v47);
      goto LABEL_15;
    case 0xE:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("x:%d y:%d z:%d"), ((*(_QWORD *)(a1 + 1) >> 46) | (*(_DWORD *)(a1 + 9) << 18)) & 0x3FFFFFF, ((*(unsigned int *)(a1 + 9) | ((unint64_t)(*(unsigned __int16 *)(a1 + 13) | (a1[15] << 16)) << 32)) >> 8) & 0x3FFFFFF, (*(_QWORD *)(a1 + 1) >> 40) & 0x3FLL, v46, v47);
      goto LABEL_15;
    case 0xF:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("x:%d y:%d z:%d (uncertainty: %u, build: %llu)"), (*(_DWORD *)(a1 + 10) >> 5) & 0x1FFFFF, ((*(unsigned int *)(a1 + 10) | ((unint64_t)*((unsigned __int16 *)a1 + 7) << 32)) >> 26) & 0x1FFFFF, *(_DWORD *)(a1 + 10) & 0x1F, a1[9], *(_QWORD *)(a1 + 1));
LABEL_15:
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_386;
    case 0x12:
      v21 = (void *)MEMORY[0x1E0CB37A0];
      v22 = *(unsigned int *)(a1 + 9);
      v23 = *(_QWORD *)(a1 + 1);
      v24 = v23 >> 6;
      v25 = HIDWORD(v23) & 0x3FFFFFF;
      v26 = ((v23 >> 58) | (unsigned __int16)((_WORD)v22 << 6)) & 0x3FFF;
      v27 = v22 | ((unint64_t)(*(unsigned __int16 *)(a1 + 13) | (a1[15] << 16)) << 32);
      v28 = v27 >> 8;
      v29 = v27 >> 16;
      v30 = CFSTR("RASTER_STANDARD");
      switch((int)v26)
      {
        case 0:
          break;
        case 1:
          v30 = CFSTR("VECTOR_STANDARD");
          break;
        case 2:
          v30 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER");
          break;
        case 3:
          v30 = CFSTR("VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER");
          break;
        case 4:
          v30 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER");
          break;
        case 5:
          v30 = CFSTR("RASTER_STANDARD_BACKGROUND");
          break;
        case 6:
          v30 = CFSTR("RASTER_HYBRID");
          break;
        case 7:
          v30 = CFSTR("RASTER_SATELLITE");
          break;
        case 8:
          v30 = CFSTR("RASTER_TERRAIN");
          break;
        case 11:
          v30 = CFSTR("VECTOR_BUILDINGS");
          break;
        case 12:
          v30 = CFSTR("VECTOR_TRAFFIC");
          break;
        case 13:
          v30 = CFSTR("VECTOR_POI");
          break;
        case 14:
          v30 = CFSTR("SPUTNIK_METADATA");
          break;
        case 15:
          v30 = CFSTR("SPUTNIK_C3M");
          break;
        case 16:
          v30 = CFSTR("SPUTNIK_DSM");
          break;
        case 17:
          v30 = CFSTR("SPUTNIK_DSM_GLOBAL");
          break;
        case 18:
          v30 = CFSTR("VECTOR_REALISTIC");
          break;
        case 19:
          v30 = CFSTR("VECTOR_LEGACY_REALISTIC");
          break;
        case 20:
          v30 = CFSTR("VECTOR_ROADS");
          break;
        case 21:
          v30 = CFSTR("RASTER_VEGETATION");
          break;
        case 22:
          v30 = CFSTR("VECTOR_TRAFFIC_SKELETON");
          break;
        case 23:
          v30 = CFSTR("RASTER_COASTLINE_MASK");
          break;
        case 24:
          v30 = CFSTR("RASTER_HILLSHADE");
          break;
        case 25:
          v30 = CFSTR("VECTOR_TRAFFIC_WITH_GREEN");
          break;
        case 26:
          v30 = CFSTR("VECTOR_TRAFFIC_STATIC");
          break;
        case 27:
          v30 = CFSTR("RASTER_COASTLINE_DROP_MASK");
          break;
        case 28:
          v30 = CFSTR("VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL");
          break;
        case 29:
          v30 = CFSTR("VECTOR_SPEED_PROFILES");
          break;
        case 30:
          v30 = CFSTR("VECTOR_VENUES");
          break;
        case 31:
          v30 = CFSTR("RASTER_DOWN_SAMPLED");
          break;
        case 32:
          v30 = CFSTR("RASTER_COLOR_BALANCED");
          break;
        case 33:
          v30 = CFSTR("RASTER_SATELLITE_NIGHT");
          break;
        case 34:
          v30 = CFSTR("SPUTNIK_VECTOR_BORDER");
          break;
        case 35:
          v30 = CFSTR("RASTER_SATELLITE_DIGITIZE");
          break;
        case 36:
          v30 = CFSTR("RASTER_HILLSHADE_PARKS");
          break;
        case 37:
          v30 = CFSTR("VECTOR_TRANSIT");
          break;
        case 38:
          v30 = CFSTR("RASTER_STANDARD_BASE");
          break;
        case 39:
          v30 = CFSTR("RASTER_STANDARD_LABELS");
          break;
        case 40:
          v30 = CFSTR("RASTER_HYBRID_ROADS");
          break;
        case 41:
          v30 = CFSTR("RASTER_HYBRID_LABELS");
          break;
        case 42:
          v30 = CFSTR("FLYOVER_C3M_MESH");
          break;
        case 43:
          v30 = CFSTR("FLYOVER_C3M_JPEG_TEXTURE");
          break;
        case 44:
          v30 = CFSTR("FLYOVER_C3M_ASTC_TEXTURE");
          break;
        case 45:
          v30 = CFSTR("RASTER_SATELLITE_ASTC");
          break;
        case 46:
          v30 = CFSTR("RASTER_HYBRID_ROADS_AND_LABELS");
          break;
        case 47:
          v30 = CFSTR("VECTOR_TRANSIT_SELECTION");
          break;
        case 48:
          v30 = CFSTR("VECTOR_COVERAGE");
          break;
        case 52:
          v30 = CFSTR("FLYOVER_METADATA");
          break;
        case 53:
          v30 = CFSTR("VECTOR_ROAD_NETWORK");
          break;
        case 54:
          v30 = CFSTR("VECTOR_LAND_COVER");
          break;
        case 55:
          v30 = CFSTR("VECTOR_DEBUG");
          break;
        case 56:
          v30 = CFSTR("VECTOR_STREET_POI");
          break;
        case 57:
          v30 = CFSTR("MUNIN_METADATA");
          break;
        case 58:
          v30 = CFSTR("VECTOR_SPR_MERCATOR");
          break;
        case 59:
          v30 = CFSTR("VECTOR_SPR_MODELS");
          break;
        case 60:
          v30 = CFSTR("VECTOR_SPR_MATERIALS");
          break;
        case 61:
          v30 = CFSTR("VECTOR_SPR_METADATA");
          break;
        case 62:
          v30 = CFSTR("VECTOR_TRACKS");
          break;
        case 63:
          v30 = CFSTR("VECTOR_RESERVED_2");
          break;
        case 64:
          v30 = CFSTR("VECTOR_STREET_LANDMARKS");
          break;
        case 65:
          v30 = CFSTR("COARSE_LOCATION_POLYGONS");
          break;
        case 66:
          v30 = CFSTR("VECTOR_SPR_ROADS");
          break;
        case 67:
          v30 = CFSTR("VECTOR_SPR_STANDARD");
          break;
        case 68:
          v30 = CFSTR("VECTOR_POI_V2");
          break;
        case 69:
          v30 = CFSTR("VECTOR_POLYGON_SELECTION");
          break;
        case 70:
          v30 = CFSTR("VL_METADATA");
          break;
        case 71:
          v30 = CFSTR("VL_DATA");
          break;
        case 72:
          v30 = CFSTR("PROACTIVE_APP_CLIP");
          break;
        case 73:
          v30 = CFSTR("VECTOR_BUILDINGS_V2");
          break;
        case 74:
          v30 = CFSTR("POI_BUSYNESS");
          break;
        case 75:
          v30 = CFSTR("POI_DP_BUSYNESS");
          break;
        case 76:
          v30 = CFSTR("SMART_INTERFACE_SELECTION");
          break;
        case 77:
          v30 = CFSTR("VECTOR_ASSETS");
          break;
        case 78:
          v30 = CFSTR("SPR_ASSET_METADATA");
          break;
        case 79:
          v30 = CFSTR("VECTOR_SPR_POLAR");
          break;
        case 80:
          v30 = CFSTR("SMART_DATA_MODE");
          break;
        case 81:
          v30 = CFSTR("CELLULAR_PERFORMANCE_SCORE");
          break;
        case 82:
          v30 = CFSTR("VECTOR_SPR_MODELS_OCCLUSION");
          break;
        case 83:
          v30 = CFSTR("VECTOR_TOPOGRAPHIC");
          break;
        case 84:
          v30 = CFSTR("VECTOR_POI_V2_UPDATE");
          break;
        case 85:
          v30 = CFSTR("VECTOR_LIVE_DATA_UPDATES");
          break;
        case 86:
          v30 = CFSTR("VECTOR_TRAFFIC_V2");
          break;
        case 87:
          v30 = CFSTR("VECTOR_ROAD_SELECTION");
          break;
        case 88:
          v30 = CFSTR("VECTOR_REGION_METADATA");
          break;
        case 89:
          v30 = CFSTR("RAY_TRACING");
          break;
        case 90:
          v30 = CFSTR("VECTOR_CONTOURS");
          break;
        case 91:
          v30 = CFSTR("RASTER_SATELLITE_POLAR");
          break;
        case 92:
          v30 = CFSTR("VMAP4_ELEVATION");
          break;
        case 93:
          v30 = CFSTR("VMAP4_ELEVATION_POLAR");
          break;
        case 94:
          v30 = CFSTR("CELLULAR_COVERAGE_PLMN");
          break;
        case 95:
          v30 = CFSTR("RASTER_SATELLITE_POLAR_NIGHT");
          break;
        case 96:
          v30 = CFSTR("UNUSED_96");
          break;
        case 97:
          v30 = CFSTR("UNUSED_97");
          break;
        case 98:
          v30 = CFSTR("UNUSED_98");
          break;
        case 99:
          v30 = CFSTR("UNUSED_99");
          break;
        case 100:
          v30 = CFSTR("UNUSED_100");
          break;
        case 101:
          v30 = CFSTR("UNUSED_101");
          break;
        case 102:
          v30 = CFSTR("UNUSED_102");
          break;
        case 103:
          v30 = CFSTR("UNUSED_103");
          break;
        case 104:
          v30 = CFSTR("UNUSED_104");
          break;
        case 105:
          v30 = CFSTR("UNUSED_105");
          break;
        case 106:
          v30 = CFSTR("UNUSED_106");
          break;
        case 107:
          v30 = CFSTR("UNUSED_107");
          break;
        case 108:
          v30 = CFSTR("UNUSED_108");
          break;
        case 109:
          v30 = CFSTR("UNUSED_109");
          break;
        case 110:
          v30 = CFSTR("UNUSED_110");
          break;
        case 111:
          v30 = CFSTR("UNUSED_111");
          break;
        case 112:
          v30 = CFSTR("UNUSED_112");
          break;
        case 113:
          v30 = CFSTR("UNUSED_113");
          break;
        case 114:
          v30 = CFSTR("UNUSED_114");
          break;
        case 115:
          v30 = CFSTR("UNUSED_115");
          break;
        case 116:
          v30 = CFSTR("UNUSED_116");
          break;
        case 117:
          v30 = CFSTR("UNUSED_117");
          break;
        case 118:
          v30 = CFSTR("UNUSED_118");
          break;
        case 119:
          v30 = CFSTR("UNUSED_119");
          break;
        default:
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), v26);
          v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
          v31 = *(unsigned int *)(a1 + 9) | ((unint64_t)(*(unsigned __int16 *)(a1 + 13) | (a1[15] << 16)) << 32);
          v28 = v31 >> 8;
          v29 = v31 >> 16;
          break;
      }
      v32 = v23 & 0x3F;
      v33 = v28 & 0xF;
      if ((_DWORD)v33)
      {
        if ((_DWORD)v33 == 2)
        {
          v34 = CFSTR("PX512");
        }
        else if ((_DWORD)v33 == 1)
        {
          v34 = CFSTR("PX256");
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), v33);
          v34 = (__CFString *)objc_claimAutoreleasedReturnValue();
          LODWORD(v29) = *(_DWORD *)(a1 + 11);
        }
      }
      else
      {
        v34 = CFSTR("PX128");
      }
      objc_msgSend(v21, "stringWithFormat:", CFSTR("x:%d y:%d z:%d (type: %@ size: %@ domain:%d"), v24, v25, v32, v30, v34, v29 & 0xF);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      if ((*a1 & 0x80000000) == 0)
        goto LABEL_385;
      v35 = CFSTR(" expires");
      break;
    default:
      if ((*a1 & 0x1F) == 2)
      {
        v7 = (void *)MEMORY[0x1E0CB37A0];
        v8 = *(unsigned __int16 *)(a1 + 13);
        v9 = v8 | (a1[15] << 16);
        v10 = *(_QWORD *)(a1 + 1);
        v11 = *(unsigned int *)(a1 + 9);
        v12 = (v10 >> 46) | ((_DWORD)v11 << 18);
        v13 = v8 >> 2;
        v14 = ((v11 & 0xFF000000FFFFFFFFLL | ((*(_QWORD *)&v9 & 0xFFFFFFLL) << 32)) >> 8) & 0x3FFFFFF;
        v15 = (v10 >> 40) & 0x3F;
        v16 = BYTE2(v9);
        v17 = CFSTR("RASTER_STANDARD");
        switch((int)v13)
        {
          case 0:
            break;
          case 1:
            v17 = CFSTR("VECTOR_STANDARD");
            break;
          case 2:
            v17 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER");
            break;
          case 3:
            v17 = CFSTR("VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER");
            break;
          case 4:
            v17 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER");
            break;
          case 5:
            v17 = CFSTR("RASTER_STANDARD_BACKGROUND");
            break;
          case 6:
            v17 = CFSTR("RASTER_HYBRID");
            break;
          case 7:
            v17 = CFSTR("RASTER_SATELLITE");
            break;
          case 8:
            v17 = CFSTR("RASTER_TERRAIN");
            break;
          case 11:
            v17 = CFSTR("VECTOR_BUILDINGS");
            break;
          case 12:
            v17 = CFSTR("VECTOR_TRAFFIC");
            break;
          case 13:
            v17 = CFSTR("VECTOR_POI");
            break;
          case 14:
            v17 = CFSTR("SPUTNIK_METADATA");
            break;
          case 15:
            v17 = CFSTR("SPUTNIK_C3M");
            break;
          case 16:
            v17 = CFSTR("SPUTNIK_DSM");
            break;
          case 17:
            v17 = CFSTR("SPUTNIK_DSM_GLOBAL");
            break;
          case 18:
            v17 = CFSTR("VECTOR_REALISTIC");
            break;
          case 19:
            v17 = CFSTR("VECTOR_LEGACY_REALISTIC");
            break;
          case 20:
            v17 = CFSTR("VECTOR_ROADS");
            break;
          case 21:
            v17 = CFSTR("RASTER_VEGETATION");
            break;
          case 22:
            v17 = CFSTR("VECTOR_TRAFFIC_SKELETON");
            break;
          case 23:
            v17 = CFSTR("RASTER_COASTLINE_MASK");
            break;
          case 24:
            v17 = CFSTR("RASTER_HILLSHADE");
            break;
          case 25:
            v17 = CFSTR("VECTOR_TRAFFIC_WITH_GREEN");
            break;
          case 26:
            v17 = CFSTR("VECTOR_TRAFFIC_STATIC");
            break;
          case 27:
            v17 = CFSTR("RASTER_COASTLINE_DROP_MASK");
            break;
          case 28:
            v17 = CFSTR("VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL");
            break;
          case 29:
            v17 = CFSTR("VECTOR_SPEED_PROFILES");
            break;
          case 30:
            v17 = CFSTR("VECTOR_VENUES");
            break;
          case 31:
            v17 = CFSTR("RASTER_DOWN_SAMPLED");
            break;
          case 32:
            v17 = CFSTR("RASTER_COLOR_BALANCED");
            break;
          case 33:
            v17 = CFSTR("RASTER_SATELLITE_NIGHT");
            break;
          case 34:
            v17 = CFSTR("SPUTNIK_VECTOR_BORDER");
            break;
          case 35:
            v17 = CFSTR("RASTER_SATELLITE_DIGITIZE");
            break;
          case 36:
            v17 = CFSTR("RASTER_HILLSHADE_PARKS");
            break;
          case 37:
            v17 = CFSTR("VECTOR_TRANSIT");
            break;
          case 38:
            v17 = CFSTR("RASTER_STANDARD_BASE");
            break;
          case 39:
            v17 = CFSTR("RASTER_STANDARD_LABELS");
            break;
          case 40:
            v17 = CFSTR("RASTER_HYBRID_ROADS");
            break;
          case 41:
            v17 = CFSTR("RASTER_HYBRID_LABELS");
            break;
          case 42:
            v17 = CFSTR("FLYOVER_C3M_MESH");
            break;
          case 43:
            v17 = CFSTR("FLYOVER_C3M_JPEG_TEXTURE");
            break;
          case 44:
            v17 = CFSTR("FLYOVER_C3M_ASTC_TEXTURE");
            break;
          case 45:
            v17 = CFSTR("RASTER_SATELLITE_ASTC");
            break;
          case 46:
            v17 = CFSTR("RASTER_HYBRID_ROADS_AND_LABELS");
            break;
          case 47:
            v17 = CFSTR("VECTOR_TRANSIT_SELECTION");
            break;
          case 48:
            v17 = CFSTR("VECTOR_COVERAGE");
            break;
          case 52:
            v17 = CFSTR("FLYOVER_METADATA");
            break;
          case 53:
            v17 = CFSTR("VECTOR_ROAD_NETWORK");
            break;
          case 54:
            v17 = CFSTR("VECTOR_LAND_COVER");
            break;
          case 55:
            v17 = CFSTR("VECTOR_DEBUG");
            break;
          case 56:
            v17 = CFSTR("VECTOR_STREET_POI");
            break;
          case 57:
            v17 = CFSTR("MUNIN_METADATA");
            break;
          case 58:
            v17 = CFSTR("VECTOR_SPR_MERCATOR");
            break;
          case 59:
            v17 = CFSTR("VECTOR_SPR_MODELS");
            break;
          case 60:
            v17 = CFSTR("VECTOR_SPR_MATERIALS");
            break;
          case 61:
            v17 = CFSTR("VECTOR_SPR_METADATA");
            break;
          case 62:
            v17 = CFSTR("VECTOR_TRACKS");
            break;
          case 63:
            v17 = CFSTR("VECTOR_RESERVED_2");
            break;
          case 64:
            v17 = CFSTR("VECTOR_STREET_LANDMARKS");
            break;
          case 65:
            v17 = CFSTR("COARSE_LOCATION_POLYGONS");
            break;
          case 66:
            v17 = CFSTR("VECTOR_SPR_ROADS");
            break;
          case 67:
            v17 = CFSTR("VECTOR_SPR_STANDARD");
            break;
          case 68:
            v17 = CFSTR("VECTOR_POI_V2");
            break;
          case 69:
            v17 = CFSTR("VECTOR_POLYGON_SELECTION");
            break;
          case 70:
            v17 = CFSTR("VL_METADATA");
            break;
          case 71:
            v17 = CFSTR("VL_DATA");
            break;
          case 72:
            v17 = CFSTR("PROACTIVE_APP_CLIP");
            break;
          case 73:
            v17 = CFSTR("VECTOR_BUILDINGS_V2");
            break;
          case 74:
            v17 = CFSTR("POI_BUSYNESS");
            break;
          case 75:
            v17 = CFSTR("POI_DP_BUSYNESS");
            break;
          case 76:
            v17 = CFSTR("SMART_INTERFACE_SELECTION");
            break;
          case 77:
            v17 = CFSTR("VECTOR_ASSETS");
            break;
          case 78:
            v17 = CFSTR("SPR_ASSET_METADATA");
            break;
          case 79:
            v17 = CFSTR("VECTOR_SPR_POLAR");
            break;
          case 80:
            v17 = CFSTR("SMART_DATA_MODE");
            break;
          case 81:
            v17 = CFSTR("CELLULAR_PERFORMANCE_SCORE");
            break;
          case 82:
            v17 = CFSTR("VECTOR_SPR_MODELS_OCCLUSION");
            break;
          case 83:
            v17 = CFSTR("VECTOR_TOPOGRAPHIC");
            break;
          case 84:
            v17 = CFSTR("VECTOR_POI_V2_UPDATE");
            break;
          case 85:
            v17 = CFSTR("VECTOR_LIVE_DATA_UPDATES");
            break;
          case 86:
            v17 = CFSTR("VECTOR_TRAFFIC_V2");
            break;
          case 87:
            v17 = CFSTR("VECTOR_ROAD_SELECTION");
            break;
          case 88:
            v17 = CFSTR("VECTOR_REGION_METADATA");
            break;
          case 89:
            v17 = CFSTR("RAY_TRACING");
            break;
          case 90:
            v17 = CFSTR("VECTOR_CONTOURS");
            break;
          case 91:
            v17 = CFSTR("RASTER_SATELLITE_POLAR");
            break;
          case 92:
            v17 = CFSTR("VMAP4_ELEVATION");
            break;
          case 93:
            v17 = CFSTR("VMAP4_ELEVATION_POLAR");
            break;
          case 94:
            v17 = CFSTR("CELLULAR_COVERAGE_PLMN");
            break;
          case 95:
            v17 = CFSTR("RASTER_SATELLITE_POLAR_NIGHT");
            break;
          case 96:
            v17 = CFSTR("UNUSED_96");
            break;
          case 97:
            v17 = CFSTR("UNUSED_97");
            break;
          case 98:
            v17 = CFSTR("UNUSED_98");
            break;
          case 99:
            v17 = CFSTR("UNUSED_99");
            break;
          case 100:
            v17 = CFSTR("UNUSED_100");
            break;
          case 101:
            v17 = CFSTR("UNUSED_101");
            break;
          case 102:
            v17 = CFSTR("UNUSED_102");
            break;
          case 103:
            v17 = CFSTR("UNUSED_103");
            break;
          case 104:
            v17 = CFSTR("UNUSED_104");
            break;
          case 105:
            v17 = CFSTR("UNUSED_105");
            break;
          case 106:
            v17 = CFSTR("UNUSED_106");
            break;
          case 107:
            v17 = CFSTR("UNUSED_107");
            break;
          case 108:
            v17 = CFSTR("UNUSED_108");
            break;
          case 109:
            v17 = CFSTR("UNUSED_109");
            break;
          case 110:
            v17 = CFSTR("UNUSED_110");
            break;
          case 111:
            v17 = CFSTR("UNUSED_111");
            break;
          case 112:
            v17 = CFSTR("UNUSED_112");
            break;
          case 113:
            v17 = CFSTR("UNUSED_113");
            break;
          case 114:
            v17 = CFSTR("UNUSED_114");
            break;
          case 115:
            v17 = CFSTR("UNUSED_115");
            break;
          case 116:
            v17 = CFSTR("UNUSED_116");
            break;
          case 117:
            v17 = CFSTR("UNUSED_117");
            break;
          case 118:
            v17 = CFSTR("UNUSED_118");
            break;
          case 119:
            v17 = CFSTR("UNUSED_119");
            break;
          default:
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), v13);
            v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
            v16 = a1[15];
            break;
        }
        v36 = v12 & 0x3FFFFFF;
        v37 = v16 & 0xF;
        if (v37 >= 3)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), v37);
          v38 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v38 = off_1E1C00698[v37];
        }
        objc_msgSend(v7, "stringWithFormat:", CFSTR("x:%d y:%d z:%d (type: %@ size: %@"), v36, v14, v15, v17, v38);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        v39 = a1[15] >> 4;
        if (v39)
        {
          if (v39 == 1)
          {
            v40 = CFSTR("LODPI");
          }
          else if (v39 == 2)
          {
            v40 = CFSTR("HIDPI");
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a1[15] >> 4);
            v40 = (__CFString *)objc_claimAutoreleasedReturnValue();
          }
          objc_msgSend(v19, "appendFormat:", CFSTR(" scale: %@"), v40);

        }
      }
      else
      {
LABEL_10:
        objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("x:%d y:%d z:%d (type: %d pixel: %d"), ((*(_QWORD *)(a1 + 1) >> 46) | (*(_DWORD *)(a1 + 9) << 18)) & 0x3FFFFFF, ((*(unsigned int *)(a1 + 9) | ((unint64_t)(*(unsigned __int16 *)(a1 + 13) | (a1[15] << 16)) << 32)) >> 8) & 0x3FFFFFF, (*(_QWORD *)(a1 + 1) >> 40) & 0x3FLL, *(unsigned __int16 *)(a1 + 13) >> 2, a1[15] & 0xF);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = v18;
        if (a1[15] >> 4)
          objc_msgSend(v18, "appendFormat:", CFSTR(" text: %d"), a1[15] >> 4);
      }
      if (*a1 < 0)
        objc_msgSend(v19, "appendFormat:", CFSTR(" expires"));
      if ((*(_QWORD *)(a1 + 1) & 0xFFFFFFFFFFLL) == 0)
        goto LABEL_385;
      v45 = *(_QWORD *)(a1 + 1) & 0xFFFFFFFFFFLL;
      v35 = CFSTR(" r: %llu");
      break;
  }
  objc_msgSend(v19, "appendFormat:", v35, v45);
LABEL_385:
  objc_msgSend(v19, "appendString:", CFSTR(")"));
LABEL_386:
  v41 = (void *)MEMORY[0x1E0CB3940];
  GEOStringFromTileProvider(*a1 & 0x7F);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "stringWithFormat:", CFSTR("{%@ / %@}"), v42, v19);
  v43 = (void *)objc_claimAutoreleasedReturnValue();

  return v43;
}

uint64_t GEOTileKeyZoom(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;

  v2 = 0;
  v3 = *(_BYTE *)a1 & 0x1F;
  if (v3 <= 9)
  {
    if (v3 == 2)
    {
      *((_QWORD *)&v5 + 1) = *(unsigned int *)(a1 + 9) | ((unint64_t)((*(unsigned __int16 *)(a1 + 13) | (*(unsigned __int8 *)(a1 + 15) << 16)) & 0xFFFFFF) << 32);
      *(_QWORD *)&v5 = *(_QWORD *)(a1 + 1);
      v4 = v5 >> 40;
      goto LABEL_9;
    }
    if (v3 != 3)
      return v2;
LABEL_7:
    v4 = *(_QWORD *)(a1 + 1);
LABEL_9:
    *a2 = v4 & 0x3F;
    return 1;
  }
  if (v3 == 10 || v3 == 20)
    goto LABEL_7;
  return v2;
}

uint64_t GEOTileProviderForStyle(unsigned int a1)
{
  if (a1 > 0x77)
    return 1;
  else
    return byte_189CC28A9[a1];
}

uint64_t GEOTileProviderForOfflineStyle(unsigned int a1)
{
  return GEOTileProviderForStyle(a1) | 0x40;
}

unint64_t GEOTileKeyMakeOffline(_BYTE *a1)
{
  unsigned int v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v1 = *a1 & 0x7F;
  if (v1 >= 0x40)
  {
    v2 = *(_QWORD *)a1;
    v4 = *(_QWORD *)a1;
  }
  else
  {
    v2 = *(_QWORD *)a1;
    v3 = v1 == 8;
    v4 = *(_QWORD *)a1 & 0x9FLL | 0x40;
    if (v3)
      v4 = *(_QWORD *)a1;
  }
  return v2 & 0xFFFFFFFFFFFFFF00 | v4;
}

BOOL GEOTileKeyContainsKey(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  char v6;
  __int128 v7;
  unint64_t v8;
  __int128 v11;

  GEOTileKeyAssertIsStandard(a1);
  GEOTileKeyAssertIsStandard((uint64_t)a2);
  v11 = *a2;
  v4 = *(unsigned int *)((char *)&v11 + 9) | ((unint64_t)(*(unsigned __int16 *)((char *)&v11 + 13) | (HIBYTE(v11) << 16)) << 32);
  v5 = (unsigned __int128)*a2 >> 8;
  v6 = BYTE6(*(_QWORD *)a2);
  if (((v5 >> 40) & 0x3F) <= (*(_DWORD *)(a1 + 6) & 0x3Fu))
  {
    v8 = (unsigned __int128)*a2 >> 8;
  }
  else
  {
    do
    {
      *((_QWORD *)&v7 + 1) = v4;
      *(_QWORD *)&v7 = v5;
      v4 = (v4 >> 1) & 0x1FFFFFF7FLL | v4 & 0xFFFFFFFC00000000;
      v8 = (v7 >> 1) & 0xFFFFC00000000000 | v5 & 0xFFFFFFFFFFLL | ((unint64_t)((v6 - 1) & 0x3F) << 40);
      v6 = BYTE5(v8);
      v5 = v8;
    }
    while (((v8 >> 40) & 0x3F) > (*(_DWORD *)(a1 + 6) & 0x3Fu));
  }
  *(_QWORD *)((char *)&v11 + 1) = v8;
  *(_DWORD *)((char *)&v11 + 9) = v4;
  HIBYTE(v11) = BYTE6(v4);
  *(_WORD *)((char *)&v11 + 13) = WORD2(v4);
  return *(_QWORD *)a1 == (_QWORD)v11 && *(_QWORD *)(a1 + 8) == *((_QWORD *)&v11 + 1);
}

const __CFString *GEOProactiveTileDownloadPolicyAsString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("[unknown]");
  else
    return off_1E1C006B0[a1];
}

uint64_t GEOProactiveTileDownloadPolicyIsEnabled(uint64_t a1)
{
  char v2;
  int BOOL;
  void *v4;
  char v5;
  void *v6;
  char v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  int v17;
  _BOOL4 v18;
  __CFString *v19;
  NSObject *v20;
  __CFString *v21;
  __CFString *v22;
  __CFString *v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  unsigned __int8 v27;
  uint8_t buf[4];
  const __CFString *v29;
  __int16 v30;
  __CFString *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  switch(a1)
  {
    case 0:
      BOOL = GEOConfigGetBOOL(GeoServicesConfig_CellSaverUpdateStaleEnabled, (uint64_t)off_1EDF4D4E8);
      v4 = (void *)objc_opt_class();
      if (!BOOL)
        return 0;
LABEL_9:
      v5 = objc_msgSend(v4, "policy");
      if ((v5 & 1) != 0)
      {
        +[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v6, "isCellDataPossible");

        if ((v7 & 1) == 0)
        {
          v8 = GEOConfigGetBOOL(GeoServicesConfig_CellSaverIgnoreCellularCapability, (uint64_t)off_1EDF4D038);
          GEOGetProactiveTileDownloadLog();
          v9 = objc_claimAutoreleasedReturnValue();
          v10 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
          if (!v8)
          {
            if (v10)
            {
              v22 = off_1E1C006B0[a1];
              *(_DWORD *)buf = 138543362;
              v29 = v22;
              v24 = "Device does not have cellular capability, or lacks cellular plan. Policy '%{public}@' disabled.";
              goto LABEL_29;
            }
LABEL_31:

            return 0;
          }
          if (v10)
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1885A9000, v9, OS_LOG_TYPE_INFO, "Device does not have cellular capability, or lacks cellular plan. Override set, so ignoring.", buf, 2u);
          }

        }
      }
      if ((v5 & 2) == 0)
        return 1;
      v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CA5870]), "initWithBundleIdentifier:allowPlaceholder:error:", CFSTR("com.apple.Maps"), 0, 0);
      objc_msgSend(v12, "applicationState");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "isInstalled");

      if ((v14 & 1) == 0)
      {
        GEOGetProactiveTileDownloadLog();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          v21 = off_1E1C006B0[a1];
          *(_DWORD *)buf = 138543362;
          v29 = v21;
          _os_log_impl(&dword_1885A9000, v20, OS_LOG_TYPE_INFO, "Maps.app is not installed. Policy '%{public}@' disabled.", buf, 0xCu);
        }

        return 0;
      }
      v27 = 0;
      +[GEOSystemMonitor sharedInstance](GEOSystemMonitor, "sharedInstance");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "isBackgroundAppRefreshEnabledForBundleIdentifier:isDisabledGlobally:", CFSTR("com.apple.Maps"), &v27);

      if ((v16 & 1) != 0)
        return 1;
      v17 = v27;
      GEOGetProactiveTileDownloadLog();
      v9 = objc_claimAutoreleasedReturnValue();
      v18 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
      if (v17)
      {
        if (v18)
        {
          v19 = off_1E1C006B0[a1];
          *(_DWORD *)buf = 138543362;
          v29 = v19;
          v24 = "Background App Refresh is disabled globally. Policy '%{public}@' disabled.";
LABEL_29:
          v25 = v9;
          v26 = 12;
          goto LABEL_30;
        }
      }
      else if (v18)
      {
        v23 = off_1E1C006B0[a1];
        *(_DWORD *)buf = 138543618;
        v29 = CFSTR("com.apple.Maps");
        v30 = 2114;
        v31 = v23;
        v24 = "Background App Refresh is disabled for %{public}@. Policy '%{public}@' disabled.";
        v25 = v9;
        v26 = 22;
LABEL_30:
        _os_log_impl(&dword_1885A9000, v25, OS_LOG_TYPE_INFO, v24, buf, v26);
        goto LABEL_31;
      }
      goto LABEL_31;
    case 2:
      v2 = GEOConfigGetBOOL(GeoServicesConfig_ProactiveLoadSubscriptionsEnabled, (uint64_t)off_1EDF4DF18);
      break;
    case 1:
      v2 = GEOConfigGetBOOL(GeoServicesConfig_ProactiveLoadFailedTilesEnabled, (uint64_t)off_1EDF4DF08);
      break;
    default:
      return 0;
  }
  v4 = (void *)objc_opt_class();
  if ((v2 & 1) != 0)
    goto LABEL_9;
  return 0;
}

GEOOpportunisticSubscriptionDataSource *_GEOCreateOpportunisticDataSource(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  GEOProactiveFailedTileDownloader *v16;
  GEOBatchTileRequesterOpportunisticAdapter *v17;
  id v18;
  GEOProactiveFailedTileDownloader *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  GEOOpportunisticSubscriptionDataSource *v24;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  if (a1 == 2)
  {
    v24 = -[GEOOpportunisticSubscriptionDataSource initWithSessionIdentifier:diskCache:subscriptionManager:manifestManager:requestCounter:requestCounterPolicy:tileRequesterCreationBlock:]([GEOOpportunisticSubscriptionDataSource alloc], "initWithSessionIdentifier:diskCache:subscriptionManager:manifestManager:requestCounter:requestCounterPolicy:tileRequesterCreationBlock:", v11, v13, 0, v12, v14, 3, v15);
  }
  else
  {
    if (a1 == 1)
    {
      v16 = -[GEOProactiveFailedTileDownloader initWithDiskCache:tileRequesterCreationBlock:]([GEOProactiveFailedTileDownloader alloc], "initWithDiskCache:tileRequesterCreationBlock:", v13, v15);
      v17 = [GEOBatchTileRequesterOpportunisticAdapter alloc];
      v18 = v11;
      v19 = v16;
      v20 = v12;
      v21 = v13;
      v22 = v14;
      v23 = 2;
    }
    else
    {
      if (a1)
      {
        v24 = 0;
        goto LABEL_9;
      }
      v16 = -[GEOStaleTileUpdater initWithDiskCache:manifestManager:tileRequesterCreationBlock:]([GEOStaleTileUpdater alloc], "initWithDiskCache:manifestManager:tileRequesterCreationBlock:", v13, v12, v15);
      v17 = [GEOBatchTileRequesterOpportunisticAdapter alloc];
      v18 = v11;
      v19 = v16;
      v20 = v12;
      v21 = v13;
      v22 = v14;
      v23 = 1;
    }
    v24 = -[GEOBatchTileRequesterOpportunisticAdapter initWithSessionIdentifier:batchTileRequester:manifestManager:diskCache:requestCounter:requestCounterPolicy:](v17, "initWithSessionIdentifier:batchTileRequester:manifestManager:diskCache:requestCounter:requestCounterPolicy:", v18, v19, v20, v21, v22, v23);

  }
LABEL_9:

  return v24;
}

id GEOTileDBLanguageLocale()
{
  return _languageLocale(0);
}

id _languageLocale(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v1 = (id)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v1, "_geo_languageAndLocale");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id GEOTileDBDevicePostureRegion()
{
  return _postureRegion(0);
}

sqlite3 *GEOTileDBCheckVersion(sqlite3 *db, sqlite3_stmt **ppStmt, _BYTE *a3, _BYTE *a4, _BYTE *a5, const unsigned __int8 **a6, const unsigned __int8 **a7)
{
  sqlite3 *v12;
  sqlite3_stmt *v13;
  int v14;
  const unsigned __int8 *v15;
  void *v16;
  void *v17;
  char v18;
  const unsigned __int8 *v19;
  const unsigned __int8 *v20;
  int v21;
  int v22;
  FILE *v23;
  const char *v24;

  if (db)
  {
    v12 = db;
    if (a3)
      *a3 = 1;
    v13 = *ppStmt;
    if (*ppStmt)
      goto LABEL_5;
    v21 = sqlite3_prepare_v2(v12, "select version, locale, country, region from version where row = 0;",
            67,
            ppStmt,
            0);
    if (!v21)
    {
      v13 = *ppStmt;
LABEL_5:
      if (sqlite3_step(v13) == 100)
      {
        v14 = sqlite3_column_int(*ppStmt, 0);
        v15 = sqlite3_column_text(*ppStmt, 1);
        if (v15)
        {
          v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v15, 4);
          _languageLocale(0);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v15) = objc_msgSend(v16, "isEqualToString:", v17);

        }
        if (a4)
        {
          if (v14 == 73)
            v18 = (char)v15;
          else
            v18 = 0;
          *a4 = v18;
        }
        if (a6)
        {
          v19 = sqlite3_column_text(*ppStmt, 2);
          if (v19)
            v19 = (const unsigned __int8 *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v19, 4);
          *a6 = v19;
        }
        if (a7)
        {
          v20 = sqlite3_column_text(*ppStmt, 3);
          if (v20)
            v20 = (const unsigned __int8 *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v20, 4);
          *a7 = v20;
        }
      }
      else if (a5)
      {
        *a5 = 1;
      }
      return (sqlite3 *)sqlite3_reset(*ppStmt);
    }
    v22 = v21;
    v23 = (FILE *)*MEMORY[0x1E0C80C10];
    v24 = sqlite3_errmsg(v12);
    db = (sqlite3 *)fprintf(v23, "%s:%d  SQL error: (%d) %s\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/GeoServices/Tiles/DB/GEOTileDB.m", 131, v22, v24);
    if (a5)
      *a5 = 1;
  }
  else if (a3)
  {
    *a3 = 0;
  }
  return db;
}

id GEOTileDBReadData(sqlite3_stmt *a1, int a2)
{
  int v4;

  v4 = sqlite3_column_bytes(a1, a2);
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", sqlite3_column_blob(a1, a2), v4);
}

uint64_t GEOTileDBBindData(sqlite3_stmt *a1, int a2, id a3)
{
  id v5;
  const void *v6;
  int v7;

  v5 = objc_retainAutorelease(a3);
  v6 = (const void *)objc_msgSend(v5, "bytes");
  v7 = objc_msgSend(v5, "length");

  return sqlite3_bind_blob(a1, a2, v6, v7, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t GEOTileDBBindString(sqlite3_stmt *a1, int a2, id a3)
{
  const char *v5;
  int v6;

  v5 = (const char *)objc_msgSend(objc_retainAutorelease(a3), "UTF8String");
  v6 = strlen(v5);
  return sqlite3_bind_text(a1, a2, v5, v6, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

_DWORD *GEOTileDBDecomposeKey(_DWORD *result, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  int v5;
  int v6;
  int v7;

  v5 = result[1];
  v6 = result[2];
  v7 = result[3];
  *a2 = *result;
  *a3 = v5;
  *a4 = v6;
  *a5 = v7;
  return result;
}

uint64_t GEOTileDBExecuteSQL(sqlite3 *a1, char *a2, ...)
{
  char *v3;
  uint64_t v4;
  char *errmsg;
  va_list va;

  va_start(va, a2);
  if (!a1)
    return 1;
  errmsg = 0;
  v3 = sqlite3_vmprintf(a2, va);
  v4 = sqlite3_exec(a1, v3, 0, 0, &errmsg);
  if ((_DWORD)v4 && errmsg)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "execute() Error: %s\n", errmsg);
    sqlite3_free(errmsg);
  }
  sqlite3_free(v3);
  return v4;
}

uint64_t GEOTileDBQuerySQL(sqlite3 *a1, void *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  void (**v11)(id, sqlite3_stmt *);
  char *v12;
  int v13;
  unsigned int v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  const char *v19;
  sqlite3_stmt *pStmt[2];
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  if (a1)
  {
    pStmt[1] = (sqlite3_stmt *)&a9;
    v12 = sqlite3_vmprintf(a3, &a9);
    pStmt[0] = 0;
    v13 = strlen(v12);
    v14 = sqlite3_prepare_v2(a1, v12, v13, pStmt, 0);
    if (!v14)
    {
      v14 = sqlite3_step(pStmt[0]);
      if (v14 == 100)
      {
        do
        {
          v11[2](v11, pStmt[0]);
          v15 = sqlite3_step(pStmt[0]);
        }
        while (v15 == 100);
        v14 = v15;
      }
    }
    if (v14 && v14 != 101)
    {
      GEOGetTileDBLog();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v19 = sqlite3_errmsg(a1);
        *(_DWORD *)buf = 136315650;
        v22 = "int GEOTileDBQuerySQL(sqlite3 *, __strong GEOTileDBQueryProgress, const char *, ...)";
        v23 = 1024;
        v24 = v14;
        v25 = 2080;
        v26 = v19;
        _os_log_error_impl(&dword_1885A9000, v16, OS_LOG_TYPE_ERROR, "%s SQL Error %d: %s", buf, 0x1Cu);
      }

    }
    if (v14 == 101)
      v17 = 0;
    else
      v17 = v14;
    if (v12)
      sqlite3_free(v12);
    if (pStmt[0])
      sqlite3_finalize(pStmt[0]);
  }
  else
  {
    v17 = 1;
  }

  return v17;
}

id defaultPragmas()
{
  void *v0;
  void *v1;
  uint64_t v3;
  _QWORD v4[6];

  v4[5] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lli"), GEOConfigGetInteger(GeoServicesConfig_TileDBCacheSpill, (uint64_t)off_1EDF4E218), CFSTR("journal_mode"), CFSTR("synchronous"), CFSTR("fullfsync"), CFSTR("cache_size"), CFSTR("cache_spill"), CFSTR("WAL"), CFSTR("0"), CFSTR("0"), CFSTR("10"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v4[4] = v0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, &v3, 5);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

uint64_t GEOTileDBSetPragmas(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v3 = a2;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  defaultPragmas();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __GEOTileDBSetPragmas_block_invoke;
  v10[3] = &unk_1E1C00710;
  v5 = v3;
  v11 = v5;
  v12 = &v14;
  v13 = a1;
  objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v10);

  v6 = *((_DWORD *)v15 + 6);
  if (v6)
    v7 = v6 == 101;
  else
    v7 = 1;
  v8 = v7;

  _Block_object_dispose(&v14, 8);
  return v8;
}

void sub_18890D2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18890DCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _ensureURLExistsAndIsDirectory(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  BOOL v5;
  int v6;
  NSObject *v7;
  char v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  char v13;
  NSObject *v14;
  id v16;
  id v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint8_t buf[4];
  id v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0;
  objc_msgSend(v1, "path");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "fileExistsAtPath:isDirectory:", v3, &v18);

  if (v4)
    v5 = v18 == 0;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_16;
  if (v18)
    v6 = 0;
  else
    v6 = v4;
  if (v6 == 1)
  {
    GEOGetTileDBLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v22 = v1;
      _os_log_impl(&dword_1885A9000, v7, OS_LOG_TYPE_DEFAULT, "\"%@\" exists, but is not a directory, removing", buf, 0xCu);
    }

    v17 = 0;
    v8 = objc_msgSend(v2, "removeItemAtURL:error:", v1, &v17);
    v9 = v17;
    if ((v8 & 1) == 0)
    {
      GEOGetTileDBLog();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v22 = v1;
        v23 = 2112;
        v24 = v9;
        _os_log_impl(&dword_1885A9000, v10, OS_LOG_TYPE_ERROR, "Unable to remove bad path \"%@\": %@", buf, 0x16u);
      }
      goto LABEL_22;
    }
LABEL_18:
    v12 = v9;
    v19 = *MEMORY[0x1E0CB2AA8];
    v20 = &unk_1E1E80AB8;
    v11 = 1;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1);
    v10 = objc_claimAutoreleasedReturnValue();
    v16 = v9;
    v13 = objc_msgSend(v2, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v1, 1, v10, &v16);
    v9 = v16;

    if ((v13 & 1) != 0)
    {
LABEL_23:

      goto LABEL_24;
    }
    GEOGetTileDBLog();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v22 = v1;
      v23 = 2112;
      v24 = v9;
      _os_log_impl(&dword_1885A9000, v14, OS_LOG_TYPE_ERROR, "Unable to create new directory \"%@\": %@", buf, 0x16u);
    }

LABEL_22:
    v11 = 0;
    goto LABEL_23;
  }
  if ((v4 & 1) == 0)
  {
    v9 = 0;
    goto LABEL_18;
  }
LABEL_16:
  v11 = 1;
LABEL_24:

  return v11;
}

void sub_18890E820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1889101D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_188910970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t MarkExternalDataForDeletion(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  _QWORD v9[4];
  id v10;
  id v11;
  _QWORD *v12;
  _QWORD v13[5];
  id v14;

  v3 = a1;
  v4 = a2;
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x3032000000;
  v13[3] = __Block_byref_object_copy__5;
  v13[4] = __Block_byref_object_dispose__5;
  v14 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MarkExternalDataForDeletion_block_invoke;
  v9[3] = &unk_1E1BFFB28;
  v5 = v3;
  v10 = v5;
  v6 = v4;
  v11 = v6;
  v12 = v13;
  v7 = objc_msgSend(v5, "executeStatement:statementBlock:", CFSTR("MarkExternalDataForDeletion"), v9);

  _Block_object_dispose(v13, 8);
  return v7;
}

void sub_188910A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188910EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1889110F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_188911410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188911C9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_188911D84(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1889120F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

void sub_188912D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Unwind_Resume(a1);
}

void sub_188913330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188913500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188913B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188914318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_188914810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188914EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1889151E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t UpdateAccessTime(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  id v6;
  uint64_t v7;
  _QWORD v9[4];
  id v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  id v15;

  v5 = a1;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x3032000000;
  v14[3] = __Block_byref_object_copy__5;
  v14[4] = __Block_byref_object_dispose__5;
  v15 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __UpdateAccessTime_block_invoke;
  v9[3] = &unk_1E1C01AB0;
  v6 = v5;
  v10 = v6;
  v11 = v14;
  v12 = a2;
  v13 = a3;
  v7 = objc_msgSend(v6, "executeStatement:statementBlock:", CFSTR("UpdateAccessTime"), v9);

  _Block_object_dispose(v14, 8);
  return v7;
}

void sub_188915308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t InsertData(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v26[5];
  id v27;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a5;
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x3032000000;
  v26[3] = __Block_byref_object_copy__5;
  v26[4] = __Block_byref_object_dispose__5;
  v27 = 0;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __InsertData_block_invoke;
  v19[3] = &unk_1E1C01AD8;
  v13 = v9;
  v20 = v13;
  v14 = v10;
  v21 = v14;
  v24 = v26;
  v15 = v11;
  v22 = v15;
  v25 = a4;
  v16 = v12;
  v23 = v16;
  v17 = objc_msgSend(v13, "executeStatement:statementBlock:", CFSTR("InsertData"), v19);

  _Block_object_dispose(v26, 8);
  return v17;
}

void sub_1889155B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188915B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;

  _Block_object_dispose((const void *)(v42 - 168), 8);
  _Block_object_dispose((const void *)(v42 - 256), 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a42, 8);
  _Unwind_Resume(a1);
}

void DeleteFailedTile(void *a1, int a2, int a3, int a4, int a5)
{
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _QWORD v18[5];
  id v19;

  v9 = a1;
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x3032000000;
  v18[3] = __Block_byref_object_copy__5;
  v18[4] = __Block_byref_object_dispose__5;
  v19 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __DeleteFailedTile_block_invoke;
  v11[3] = &unk_1E1C01AB0;
  v10 = v9;
  v12 = v10;
  v13 = v18;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  objc_msgSend(v10, "executeStatement:statementBlock:", CFSTR("DeleteFailedTile"), v11);

  _Block_object_dispose(v18, 8);
}

void sub_188915DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void DeleteData(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;

  v3 = a1;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x3032000000;
  v9[3] = __Block_byref_object_copy__5;
  v9[4] = __Block_byref_object_dispose__5;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __DeleteData_block_invoke;
  v5[3] = &unk_1E1BFF770;
  v4 = v3;
  v7 = v9;
  v8 = a2;
  v6 = v4;
  objc_msgSend(v4, "executeStatement:statementBlock:", CFSTR("DeleteData"), v5);

  _Block_object_dispose(v9, 8);
}

void sub_188915EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1889160A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void GetSubscriptionPK(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD v16[5];
  id v17;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x3032000000;
  v16[3] = __Block_byref_object_copy__5;
  v16[4] = __Block_byref_object_dispose__5;
  v17 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __GetSubscriptionPK_block_invoke;
  v11[3] = &unk_1E1C01B28;
  v8 = v5;
  v12 = v8;
  v9 = v6;
  v13 = v9;
  v15 = v16;
  v10 = v7;
  v14 = v10;
  objc_msgSend(v8, "statementForKey:statementBlock:", CFSTR("GetSubscriptionPK"), v11);

  _Block_object_dispose(v16, 8);
}

void sub_1889161F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188916390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void sub_188916644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose((const void *)(v8 - 168), 8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1889169A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose((const void *)(v9 - 152), 8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_188916EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_188917310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_1889176BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188917AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  _Block_object_dispose((const void *)(v36 - 152), 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void sub_188917DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188917ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188918060(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void BulkUpdateSubscriptionDataStateAllSubtypes(void *a1, int a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  char v10;
  _QWORD v11[5];
  id v12;

  v3 = a1;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x3032000000;
  v11[3] = __Block_byref_object_copy__5;
  v11[4] = __Block_byref_object_dispose__5;
  v12 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __BulkUpdateSubscriptionDataStateAllSubtypes_block_invoke;
  v5[3] = &unk_1E1C01C10;
  v4 = v3;
  v9 = a2;
  v6 = v4;
  v7 = v11;
  v8 = 1;
  v10 = 0;
  objc_msgSend(v4, "executeStatement:statementBlock:", CFSTR("BulkUpdateSubscriptionDataStateAllSubtypes"), v5);

  _Block_object_dispose(v11, 8);
}

void sub_1889181DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188918358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void SetSubscriptionDataState(void *a1, uint64_t a2, int a3, int a4, uint64_t a5, char a6, int a7, uint64_t a8)
{
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  char v26;
  _QWORD v27[5];
  id v28;

  v15 = a1;
  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x3032000000;
  v27[3] = __Block_byref_object_copy__5;
  v27[4] = __Block_byref_object_dispose__5;
  v28 = 0;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __SetSubscriptionDataState_block_invoke;
  v17[3] = &unk_1E1C01C80;
  v16 = v15;
  v18 = v16;
  v19 = v27;
  v23 = a3;
  v24 = a4;
  v20 = a2;
  v21 = a5;
  v26 = a6;
  v25 = a7;
  v22 = a8;
  objc_msgSend(v16, "executeStatement:statementBlock:", CFSTR("SetSubscriptionDataState"), v17);

  _Block_object_dispose(v27, 8);
}

void sub_1889184F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1889188D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_188918C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188918F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188919168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FetchSubscriptions(void *a1, _QWORD *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v5 = a1;
  v6 = a3;
  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = __Block_byref_object_copy__5;
  v20 = __Block_byref_object_dispose__5;
  v21 = 0;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __FetchSubscriptions_block_invoke;
  v12[3] = &unk_1E1BFF998;
  v7 = v5;
  v13 = v7;
  v8 = v6;
  v14 = v8;
  v15 = &v16;
  v9 = objc_msgSend(v7, "statementForKey:statementBlock:", CFSTR("FetchSubscriptions"), v12);
  if (a2)
  {
    v10 = (void *)v17[5];
    if (v10)
      *a2 = objc_retainAutorelease(v10);
  }

  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_188919774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1889199A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void GetSubscriptionDataStates(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[5];
  id v15;

  v5 = a1;
  v6 = a3;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x3032000000;
  v14[3] = __Block_byref_object_copy__5;
  v14[4] = __Block_byref_object_dispose__5;
  v15 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __GetSubscriptionDataStates_block_invoke;
  v9[3] = &unk_1E1C019E8;
  v7 = v5;
  v12 = v14;
  v13 = a2;
  v10 = v7;
  v8 = v6;
  v11 = v8;
  objc_msgSend(v7, "statementForKey:statementBlock:", CFSTR("GetSubscriptionDataStates"), v9);

  _Block_object_dispose(v14, 8);
}

void sub_188919AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188919DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18891A854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  _Block_object_dispose(&a58, 8);
  _Unwind_Resume(a1);
}

void ReadGlobalOfflineMetadata(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  _QWORD *v10;
  _QWORD v11[5];
  id v12;

  v3 = a1;
  v4 = a2;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x3032000000;
  v11[3] = __Block_byref_object_copy__5;
  v11[4] = __Block_byref_object_dispose__5;
  v12 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __ReadGlobalOfflineMetadata_block_invoke;
  v7[3] = &unk_1E1BFF998;
  v5 = v3;
  v8 = v5;
  v6 = v4;
  v9 = v6;
  v10 = v11;
  objc_msgSend(v5, "statementForKey:statementBlock:", CFSTR("ReadGlobalOfflineMetadata"), v7);

  _Block_object_dispose(v11, 8);
}

void sub_18891AC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t RemoveSubscription(void *a1, _QWORD *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v5 = a1;
  v6 = a3;
  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = __Block_byref_object_copy__5;
  v20 = __Block_byref_object_dispose__5;
  v21 = 0;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __RemoveSubscription_block_invoke;
  v12[3] = &unk_1E1BFFB28;
  v7 = v5;
  v13 = v7;
  v8 = v6;
  v14 = v8;
  v15 = &v16;
  v9 = objc_msgSend(v7, "executeStatement:statementBlock:", CFSTR("RemoveSubscription"), v12);
  if (a2)
  {
    v10 = (void *)v17[5];
    if (v10)
      *a2 = objc_retainAutorelease(v10);
  }

  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_18891AEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t InsertExpiredSubscription(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7, int a8)
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD v37[5];
  id v38;

  v14 = a1;
  v15 = a2;
  v16 = a3;
  v17 = a6;
  v18 = a7;
  v37[0] = 0;
  v37[1] = v37;
  v37[2] = 0x3032000000;
  v37[3] = __Block_byref_object_copy__5;
  v37[4] = __Block_byref_object_dispose__5;
  v38 = 0;
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __InsertExpiredSubscription_block_invoke;
  v27[3] = &unk_1E1C01CA8;
  v19 = v14;
  v28 = v19;
  v20 = v15;
  v29 = v20;
  v33 = v37;
  v21 = v16;
  v30 = v21;
  v34 = a4;
  v35 = a5;
  v22 = v17;
  v31 = v22;
  v23 = v18;
  v32 = v23;
  v36 = a8;
  v24 = objc_msgSend(v19, "executeStatement:statementBlock:", CFSTR("InsertExpiredSubscription"), v27);

  _Block_object_dispose(v37, 8);
  return v24;
}

void sub_18891B064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18891B2AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18891B868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  id *v35;
  uint64_t v36;

  objc_destroyWeak(v35);
  objc_destroyWeak((id *)(v36 - 192));
  _Unwind_Resume(a1);
}

void sub_18891BEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18891C450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18891CB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void FetchSubscription(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD v16[5];
  id v17;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x3032000000;
  v16[3] = __Block_byref_object_copy__5;
  v16[4] = __Block_byref_object_dispose__5;
  v17 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __FetchSubscription_block_invoke;
  v11[3] = &unk_1E1C01B28;
  v8 = v5;
  v12 = v8;
  v9 = v6;
  v13 = v9;
  v15 = v16;
  v10 = v7;
  v14 = v10;
  objc_msgSend(v8, "statementForKey:statementBlock:", CFSTR("FetchSubscription"), v11);

  _Block_object_dispose(v16, 8);
}

void sub_18891CCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void FetchExpiredSubscription(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD v16[5];
  id v17;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x3032000000;
  v16[3] = __Block_byref_object_copy__5;
  v16[4] = __Block_byref_object_dispose__5;
  v17 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __FetchExpiredSubscription_block_invoke;
  v11[3] = &unk_1E1C01B28;
  v8 = v5;
  v12 = v8;
  v9 = v6;
  v13 = v9;
  v15 = v16;
  v10 = v7;
  v14 = v10;
  objc_msgSend(v8, "statementForKey:statementBlock:", CFSTR("FetchExpiredSubscription"), v11);

  _Block_object_dispose(v16, 8);
}

void sub_18891CFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t RemoveExpiredSubscription(void *a1, _QWORD *a2, uint64_t a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v5 = a1;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy__5;
  v18 = __Block_byref_object_dispose__5;
  v19 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __RemoveExpiredSubscription_block_invoke;
  v10[3] = &unk_1E1BFF770;
  v6 = v5;
  v12 = &v14;
  v13 = a3;
  v11 = v6;
  v7 = objc_msgSend(v6, "executeStatement:statementBlock:", CFSTR("RemoveExpiredSubscription"), v10);
  if (a2)
  {
    v8 = (void *)v15[5];
    if (v8)
      *a2 = objc_retainAutorelease(v8);
  }

  _Block_object_dispose(&v14, 8);
  return v7;
}

void sub_18891D0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18891D764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose((const void *)(v37 - 144), 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_18891E2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18891ED6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18891F548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose((const void *)(v39 - 144), 8);
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_18891FB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_18891FDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose((const void *)(v7 - 112), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18891FFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  _Block_object_dispose((const void *)(v6 - 96), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void GetSubscriptionsForSyncToPairedDevice(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD v16[5];
  id v17;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x3032000000;
  v16[3] = __Block_byref_object_copy__5;
  v16[4] = __Block_byref_object_dispose__5;
  v17 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __GetSubscriptionsForSyncToPairedDevice_block_invoke;
  v11[3] = &unk_1E1C01B28;
  v8 = v5;
  v12 = v8;
  v9 = v6;
  v13 = v9;
  v15 = v16;
  v10 = v7;
  v14 = v10;
  objc_msgSend(v8, "statementForKey:statementBlock:", CFSTR("GetSubscriptionsForSyncToPairedDevice"), v11);

  _Block_object_dispose(v16, 8);
}

void sub_188920584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188920B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188920D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188921C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void CheckExistenceOfOfflineBatchKey(void *a1, int a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  _QWORD v22[5];
  id v23;

  v9 = a1;
  v10 = a4;
  v11 = a5;
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x3032000000;
  v22[3] = __Block_byref_object_copy__5;
  v22[4] = __Block_byref_object_dispose__5;
  v23 = 0;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __CheckExistenceOfOfflineBatchKey_block_invoke;
  v15[3] = &unk_1E1C01E58;
  v12 = v9;
  v21 = a2;
  v16 = v12;
  v19 = v22;
  v20 = a3;
  v13 = v10;
  v17 = v13;
  v14 = v11;
  v18 = v14;
  objc_msgSend(v12, "statementForKey:statementBlock:", CFSTR("CheckExistenceOfOfflineBatchKey"), v15);

  _Block_object_dispose(v22, 8);
}

void sub_188921DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188922270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_188922C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  _Block_object_dispose((const void *)(v55 - 224), 8);
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose((const void *)(v55 - 256), 8);
  _Unwind_Resume(a1);
}

uint64_t GetDataForOfflineKeyInFullyLoadedSubscription(void *a1, _QWORD *a2, int a3, uint64_t a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;

  v11 = a1;
  v12 = a5;
  v13 = a6;
  v27 = 0;
  v28 = &v27;
  v29 = 0x3032000000;
  v30 = __Block_byref_object_copy__5;
  v31 = __Block_byref_object_dispose__5;
  v32 = 0;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __GetDataForOfflineKeyInFullyLoadedSubscription_block_invoke;
  v20[3] = &unk_1E1C01E58;
  v14 = v11;
  v26 = a3;
  v21 = v14;
  v24 = &v27;
  v25 = a4;
  v15 = v12;
  v22 = v15;
  v16 = v13;
  v23 = v16;
  v17 = objc_msgSend(v14, "statementForKey:statementBlock:", CFSTR("GetDataForOfflineKeyInFullyLoadedSubscription"), v20);
  if (a2)
  {
    v18 = (void *)v28[5];
    if (v18)
      *a2 = objc_retainAutorelease(v18);
  }

  _Block_object_dispose(&v27, 8);
  return v17;
}

void sub_188922E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t GetDataForOfflineKey(void *a1, _QWORD *a2, int a3, uint64_t a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;

  v11 = a1;
  v12 = a5;
  v13 = a6;
  v27 = 0;
  v28 = &v27;
  v29 = 0x3032000000;
  v30 = __Block_byref_object_copy__5;
  v31 = __Block_byref_object_dispose__5;
  v32 = 0;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __GetDataForOfflineKey_block_invoke;
  v20[3] = &unk_1E1C01E58;
  v14 = v11;
  v26 = a3;
  v21 = v14;
  v24 = &v27;
  v25 = a4;
  v15 = v12;
  v22 = v15;
  v16 = v13;
  v23 = v16;
  v17 = objc_msgSend(v14, "statementForKey:statementBlock:", CFSTR("GetDataForOfflineKey"), v20);
  if (a2)
  {
    v18 = (void *)v28[5];
    if (v18)
      *a2 = objc_retainAutorelease(v18);
  }

  _Block_object_dispose(&v27, 8);
  return v17;
}

void sub_188922FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1889234E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18892379C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_188923AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  _Block_object_dispose(va2, 8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_188923FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose((const void *)(v8 - 144), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188924370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_188924760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_188924B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_188925404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1889265F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1889269E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose((const void *)(v39 - 160), 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_188926FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose((const void *)(v39 - 160), 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_1889276C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_1889279F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __migrateToSchemaVersion_block_invoke(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  const char *v15;
  __n128 v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = 1;
  if (v2 >= *(_QWORD *)(a1 + 56))
    return v3;
  a2.n128_u64[0] = 134217984;
  v16 = a2;
  while (2)
  {
    v5 = v2++;
    objc_msgSend(*(id *)(a1 + 32), "log", *(_OWORD *)&v16);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = v16.n128_u32[0];
      v18 = v2;
      _os_log_impl(&dword_1885A9000, v6, OS_LOG_TYPE_INFO, "migrating to schema version %lli", buf, 0xCu);
    }

    switch(v5)
    {
      case 'E':
        v7 = sqlite3_exec((sqlite3 *)objc_msgSend(*(id *)(a1 + 32), "sqliteDB"), "DELETE FROM data WHERE data.rowid NOT IN(    SELECT data_pk FROM tiles) AND data.rowid NOT IN(    SELECT data_pk FROM offline_data_batches) RETURNING ext_uuid ", (int (__cdecl *)(void *, int, char **, char **))_migration_deletedRowReferencingExternalResource, *(void **)(a1 + 64), 0);
        if (!v7)
          goto LABEL_12;
        v10 = v7;
        objc_msgSend(*(id *)(a1 + 32), "log");
        v11 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
          goto LABEL_19;
        goto LABEL_22;
      case 'F':
        goto LABEL_12;
      case 'G':
        v8 = sqlite3_exec((sqlite3 *)objc_msgSend(*(id *)(a1 + 32), "sqliteDB"), "ALTER TABLE expired_subscriptions ADD COLUMN regulatory_region_id INT; UPDATE expired_subscriptions SET r"
               "egulatory_region_id = 0; ",
               0,
               0,
               0);
        if (!v8)
          goto LABEL_12;
        v10 = v8;
        objc_msgSend(*(id *)(a1 + 32), "log");
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
          goto LABEL_22;
        goto LABEL_19;
      case 'H':
        v9 = sqlite3_exec((sqlite3 *)objc_msgSend(*(id *)(a1 + 32), "sqliteDB"), "DROP INDEX IF EXISTS offline_data_layer_idx; DROP INDEX IF EXISTS offline_data_key_idx; DROP INDEX IF EXI"
               "STS offline_data_version_idx; DROP INDEX IF EXISTS offline_data_idx; CREATE TABLE IF NOT EXISTS tmp_offli"
               "ne_data_batch_refs(    batch_pk INT NOT NULL,     offline_data_pk INT NOT NULL,     offset INT NOT NULL"
               ",     size INT NOT NULL,     layer INT NOT NULL,     version INT NOT NULL,     UNIQUE(batch_pk, offline_d"
               "ata_pk)     ON CONFLICT REPLACE    );      INSERT INTO tmp_offline_data_batch_refs (batch_pk, offline_da"
               "ta_pk, offset, size, layer, version)     SELECT batch_pk, offline_data_pk, offset, size, offline_data_bat"
               "ches.layer, offline_data_batches.version FROM offline_data_batch_refs INNER JOIN offline_data_batches ON "
               "batch_pk = offline_data_batches.rowid;          DROP TABLE offline_data_batch_refs; ALTER TABLE tmp_offli"
               "ne_data_batch_refs RENAME TO offline_data_batch_refs; ",
               0,
               0,
               0);
        if (!v9)
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
LABEL_12:
          if (v2 >= *(_QWORD *)(a1 + 56))
            return 1;
          continue;
        }
        v10 = v9;
        objc_msgSend(*(id *)(a1 + 32), "log");
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
        {
LABEL_22:
          v15 = sqlite3_errmsg((sqlite3 *)objc_msgSend(*(id *)(a1 + 32), "sqliteDB"));
          *(_DWORD *)buf = 134218498;
          v18 = v5 + 1;
          v19 = 1024;
          v20 = v10;
          v21 = 2082;
          v22 = v15;
          _os_log_fault_impl(&dword_1885A9000, v11, OS_LOG_TYPE_FAULT, "failed to migrate to schema version %lli: %d %{public}s", buf, 0x1Cu);
        }
LABEL_19:

        return 0;
      default:
        return 0;
    }
  }
}

uint64_t _migration_deletedRowReferencingExternalResource(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint8_t v12[16];
  uint8_t buf[16];

  if (!a2)
    return 1;
  v3 = *a3;
  if (!*a3)
    return 0;
  if (*(_BYTE *)(v3 + 16))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: uuidBytes[16] == '\\0'", buf, 2u);
    }
    return 1;
  }
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", v3);
  v6 = v5;
  if (v5)
  {
    v7 = *(void **)(a1 + 136);
    objc_msgSend(v5, "UUIDString");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "URLByAppendingPathComponent:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 8), "deleteExternalResourceAtURL:error:", v9, 0);
    v10 = 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v12 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: externalResourceUUID != ((void *)0)", v12, 2u);
    }
    v10 = 1;
  }

  return v10;
}

void _insideRadius_sqlite(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _BOOL4 v11;

  if (a2 == 6)
  {
    v5 = sqlite3_value_double(*a3);
    v6 = sqlite3_value_double(a3[1]);
    v7 = sqlite3_value_double(a3[2]);
    v8 = sqlite3_value_double(a3[3]);
    v9 = sqlite3_value_double(a3[4]);
    v10 = sqlite3_value_double(a3[5]);
    v11 = (v6 - v8) * (v6 - v8) + (v5 - v7) * (v5 - v7) <= (v9 - v10) * (v9 - v10);
  }
  else
  {
    v11 = 0;
  }
  sqlite3_result_int(a1, v11);
}

void _coordinatesMatch_sqlite(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _BOOL4 v10;
  int v11;

  if (a2 == 5)
  {
    v5 = sqlite3_value_double(*a3);
    v6 = sqlite3_value_double(a3[1]);
    v7 = sqlite3_value_double(a3[2]);
    v8 = sqlite3_value_double(a3[3]);
    v9 = sqlite3_value_double(a3[4]);
    v10 = vabdd_f64(v5, v7) < v9;
    v11 = vabdd_f64(v6, v8) < v9 && v10;
  }
  else
  {
    v11 = 0;
  }
  sqlite3_result_int(a1, v11);
}

uint64_t GEODirectionsSearchTypeForError(uint64_t a1)
{
  if ((unint64_t)(a1 - 4) > 7)
    return 0;
  else
    return qword_189CC29B0[a1 - 4];
}

id _GEODataFromDirectionsError(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v1, 1, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id _GEODirectionsErrorFromData(void *a1)
{
  void *v1;
  id v2;
  void *v3;

  v1 = (void *)MEMORY[0x1E0CB3710];
  v2 = a1;
  objc_msgSend(v1, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

GEODirectionsError *GEODirectionsErrorForWaypointIndex(uint64_t a1)
{
  return -[GEODirectionsError initWithWaypointIndex:]([GEODirectionsError alloc], "initWithWaypointIndex:", a1);
}

__CFString *GEOTileDBTileSetShortDescription(unsigned __int8 *a1)
{
  int v2;
  void *v3;
  int v4;
  uint64_t v5;
  int v6;
  __CFString *v7;
  __CFString *v8;
  void *v9;
  unsigned int v10;
  int v11;
  __CFString *v12;
  unsigned int v13;
  int v14;
  __CFString *v15;

  if (a1)
  {
    v2 = *a1;
    if (v2 == 2)
    {
      v9 = (void *)MEMORY[0x1E0CB3940];
      v10 = *(unsigned __int16 *)(a1 + 1) | (a1[3] << 16);
      v7 = CFSTR("RASTER_STANDARD");
      switch(*(_WORD *)(a1 + 1))
      {
        case 0u:
          break;
        case 1u:
          v7 = CFSTR("VECTOR_STANDARD");
          break;
        case 2u:
          v7 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER");
          break;
        case 3u:
          v7 = CFSTR("VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER");
          break;
        case 4u:
          v7 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER");
          break;
        case 5u:
          v7 = CFSTR("RASTER_STANDARD_BACKGROUND");
          break;
        case 6u:
          v7 = CFSTR("RASTER_HYBRID");
          break;
        case 7u:
          v7 = CFSTR("RASTER_SATELLITE");
          break;
        case 8u:
          v7 = CFSTR("RASTER_TERRAIN");
          break;
        case 0xBu:
          v7 = CFSTR("VECTOR_BUILDINGS");
          break;
        case 0xCu:
          v7 = CFSTR("VECTOR_TRAFFIC");
          break;
        case 0xDu:
          v7 = CFSTR("VECTOR_POI");
          break;
        case 0xEu:
          v7 = CFSTR("SPUTNIK_METADATA");
          break;
        case 0xFu:
          v7 = CFSTR("SPUTNIK_C3M");
          break;
        case 0x10u:
          v7 = CFSTR("SPUTNIK_DSM");
          break;
        case 0x11u:
          v7 = CFSTR("SPUTNIK_DSM_GLOBAL");
          break;
        case 0x12u:
          v7 = CFSTR("VECTOR_REALISTIC");
          break;
        case 0x13u:
          v7 = CFSTR("VECTOR_LEGACY_REALISTIC");
          break;
        case 0x14u:
          v7 = CFSTR("VECTOR_ROADS");
          break;
        case 0x15u:
          v7 = CFSTR("RASTER_VEGETATION");
          break;
        case 0x16u:
          v7 = CFSTR("VECTOR_TRAFFIC_SKELETON");
          break;
        case 0x17u:
          v7 = CFSTR("RASTER_COASTLINE_MASK");
          break;
        case 0x18u:
          v7 = CFSTR("RASTER_HILLSHADE");
          break;
        case 0x19u:
          v7 = CFSTR("VECTOR_TRAFFIC_WITH_GREEN");
          break;
        case 0x1Au:
          v7 = CFSTR("VECTOR_TRAFFIC_STATIC");
          break;
        case 0x1Bu:
          v7 = CFSTR("RASTER_COASTLINE_DROP_MASK");
          break;
        case 0x1Cu:
          v7 = CFSTR("VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL");
          break;
        case 0x1Du:
          v7 = CFSTR("VECTOR_SPEED_PROFILES");
          break;
        case 0x1Eu:
          v7 = CFSTR("VECTOR_VENUES");
          break;
        case 0x1Fu:
          v7 = CFSTR("RASTER_DOWN_SAMPLED");
          break;
        case 0x20u:
          v7 = CFSTR("RASTER_COLOR_BALANCED");
          break;
        case 0x21u:
          v7 = CFSTR("RASTER_SATELLITE_NIGHT");
          break;
        case 0x22u:
          v7 = CFSTR("SPUTNIK_VECTOR_BORDER");
          break;
        case 0x23u:
          v7 = CFSTR("RASTER_SATELLITE_DIGITIZE");
          break;
        case 0x24u:
          v7 = CFSTR("RASTER_HILLSHADE_PARKS");
          break;
        case 0x25u:
          v7 = CFSTR("VECTOR_TRANSIT");
          break;
        case 0x26u:
          v7 = CFSTR("RASTER_STANDARD_BASE");
          break;
        case 0x27u:
          v7 = CFSTR("RASTER_STANDARD_LABELS");
          break;
        case 0x28u:
          v7 = CFSTR("RASTER_HYBRID_ROADS");
          break;
        case 0x29u:
          v7 = CFSTR("RASTER_HYBRID_LABELS");
          break;
        case 0x2Au:
          v7 = CFSTR("FLYOVER_C3M_MESH");
          break;
        case 0x2Bu:
          v7 = CFSTR("FLYOVER_C3M_JPEG_TEXTURE");
          break;
        case 0x2Cu:
          v7 = CFSTR("FLYOVER_C3M_ASTC_TEXTURE");
          break;
        case 0x2Du:
          v7 = CFSTR("RASTER_SATELLITE_ASTC");
          break;
        case 0x2Eu:
          v7 = CFSTR("RASTER_HYBRID_ROADS_AND_LABELS");
          break;
        case 0x2Fu:
          v7 = CFSTR("VECTOR_TRANSIT_SELECTION");
          break;
        case 0x30u:
          v7 = CFSTR("VECTOR_COVERAGE");
          break;
        case 0x34u:
          v7 = CFSTR("FLYOVER_METADATA");
          break;
        case 0x35u:
          v7 = CFSTR("VECTOR_ROAD_NETWORK");
          break;
        case 0x36u:
          v7 = CFSTR("VECTOR_LAND_COVER");
          break;
        case 0x37u:
          v7 = CFSTR("VECTOR_DEBUG");
          break;
        case 0x38u:
          v7 = CFSTR("VECTOR_STREET_POI");
          break;
        case 0x39u:
          v7 = CFSTR("MUNIN_METADATA");
          break;
        case 0x3Au:
          v7 = CFSTR("VECTOR_SPR_MERCATOR");
          break;
        case 0x3Bu:
          v7 = CFSTR("VECTOR_SPR_MODELS");
          break;
        case 0x3Cu:
          v7 = CFSTR("VECTOR_SPR_MATERIALS");
          break;
        case 0x3Du:
          v7 = CFSTR("VECTOR_SPR_METADATA");
          break;
        case 0x3Eu:
          v7 = CFSTR("VECTOR_TRACKS");
          break;
        case 0x3Fu:
          v7 = CFSTR("VECTOR_RESERVED_2");
          break;
        case 0x40u:
          v7 = CFSTR("VECTOR_STREET_LANDMARKS");
          break;
        case 0x41u:
          v7 = CFSTR("COARSE_LOCATION_POLYGONS");
          break;
        case 0x42u:
          v7 = CFSTR("VECTOR_SPR_ROADS");
          break;
        case 0x43u:
          v7 = CFSTR("VECTOR_SPR_STANDARD");
          break;
        case 0x44u:
          v7 = CFSTR("VECTOR_POI_V2");
          break;
        case 0x45u:
          v7 = CFSTR("VECTOR_POLYGON_SELECTION");
          break;
        case 0x46u:
          v7 = CFSTR("VL_METADATA");
          break;
        case 0x47u:
          v7 = CFSTR("VL_DATA");
          break;
        case 0x48u:
          v7 = CFSTR("PROACTIVE_APP_CLIP");
          break;
        case 0x49u:
          v7 = CFSTR("VECTOR_BUILDINGS_V2");
          break;
        case 0x4Au:
          v7 = CFSTR("POI_BUSYNESS");
          break;
        case 0x4Bu:
          v7 = CFSTR("POI_DP_BUSYNESS");
          break;
        case 0x4Cu:
          v7 = CFSTR("SMART_INTERFACE_SELECTION");
          break;
        case 0x4Du:
          v7 = CFSTR("VECTOR_ASSETS");
          break;
        case 0x4Eu:
          v7 = CFSTR("SPR_ASSET_METADATA");
          break;
        case 0x4Fu:
          v7 = CFSTR("VECTOR_SPR_POLAR");
          break;
        case 0x50u:
          v7 = CFSTR("SMART_DATA_MODE");
          break;
        case 0x51u:
          v7 = CFSTR("CELLULAR_PERFORMANCE_SCORE");
          break;
        case 0x52u:
          v7 = CFSTR("VECTOR_SPR_MODELS_OCCLUSION");
          break;
        case 0x53u:
          v7 = CFSTR("VECTOR_TOPOGRAPHIC");
          break;
        case 0x54u:
          v7 = CFSTR("VECTOR_POI_V2_UPDATE");
          break;
        case 0x55u:
          v7 = CFSTR("VECTOR_LIVE_DATA_UPDATES");
          break;
        case 0x56u:
          v7 = CFSTR("VECTOR_TRAFFIC_V2");
          break;
        case 0x57u:
          v7 = CFSTR("VECTOR_ROAD_SELECTION");
          break;
        case 0x58u:
          v7 = CFSTR("VECTOR_REGION_METADATA");
          break;
        case 0x59u:
          v7 = CFSTR("RAY_TRACING");
          break;
        case 0x5Au:
          v7 = CFSTR("VECTOR_CONTOURS");
          break;
        case 0x5Bu:
          v7 = CFSTR("RASTER_SATELLITE_POLAR");
          break;
        case 0x5Cu:
          v7 = CFSTR("VMAP4_ELEVATION");
          break;
        case 0x5Du:
          v7 = CFSTR("VMAP4_ELEVATION_POLAR");
          break;
        case 0x5Eu:
          v7 = CFSTR("CELLULAR_COVERAGE_PLMN");
          break;
        case 0x5Fu:
          v7 = CFSTR("RASTER_SATELLITE_POLAR_NIGHT");
          break;
        case 0x60u:
          v7 = CFSTR("UNUSED_96");
          break;
        case 0x61u:
          v7 = CFSTR("UNUSED_97");
          break;
        case 0x62u:
          v7 = CFSTR("UNUSED_98");
          break;
        case 0x63u:
          v7 = CFSTR("UNUSED_99");
          break;
        case 0x64u:
          v7 = CFSTR("UNUSED_100");
          break;
        case 0x65u:
          v7 = CFSTR("UNUSED_101");
          break;
        case 0x66u:
          v7 = CFSTR("UNUSED_102");
          break;
        case 0x67u:
          v7 = CFSTR("UNUSED_103");
          break;
        case 0x68u:
          v7 = CFSTR("UNUSED_104");
          break;
        case 0x69u:
          v7 = CFSTR("UNUSED_105");
          break;
        case 0x6Au:
          v7 = CFSTR("UNUSED_106");
          break;
        case 0x6Bu:
          v7 = CFSTR("UNUSED_107");
          break;
        case 0x6Cu:
          v7 = CFSTR("UNUSED_108");
          break;
        case 0x6Du:
          v7 = CFSTR("UNUSED_109");
          break;
        case 0x6Eu:
          v7 = CFSTR("UNUSED_110");
          break;
        case 0x6Fu:
          v7 = CFSTR("UNUSED_111");
          break;
        case 0x70u:
          v7 = CFSTR("UNUSED_112");
          break;
        case 0x71u:
          v7 = CFSTR("UNUSED_113");
          break;
        case 0x72u:
          v7 = CFSTR("UNUSED_114");
          break;
        case 0x73u:
          v7 = CFSTR("UNUSED_115");
          break;
        case 0x74u:
          v7 = CFSTR("UNUSED_116");
          break;
        case 0x75u:
          v7 = CFSTR("UNUSED_117");
          break;
        case 0x76u:
          v7 = CFSTR("UNUSED_118");
          break;
        case 0x77u:
          v7 = CFSTR("UNUSED_119");
          break;
        default:
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), (char)*(_WORD *)(a1 + 1));
          v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
          v10 = *(unsigned __int16 *)(a1 + 1) | (a1[3] << 16);
          break;
      }
      objc_msgSend(v9, "stringWithFormat:", CFSTR("<%@|region: %d>"), v7, (unsigned __int16)(v10 >> 8));
      v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
      goto LABEL_250;
    }
    if (v2 == 1)
    {
      v3 = (void *)MEMORY[0x1E0CB3940];
      v4 = *(unsigned __int16 *)(a1 + 1);
      v5 = (v4 << 18 >> 18);
      v6 = v4 | (a1[3] << 16);
      v7 = CFSTR("RASTER_STANDARD");
      switch((int)v5)
      {
        case 0:
          break;
        case 1:
          v7 = CFSTR("VECTOR_STANDARD");
          break;
        case 2:
          v7 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER");
          break;
        case 3:
          v7 = CFSTR("VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER");
          break;
        case 4:
          v7 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER");
          break;
        case 5:
          v7 = CFSTR("RASTER_STANDARD_BACKGROUND");
          break;
        case 6:
          v7 = CFSTR("RASTER_HYBRID");
          break;
        case 7:
          v7 = CFSTR("RASTER_SATELLITE");
          break;
        case 8:
          v7 = CFSTR("RASTER_TERRAIN");
          break;
        case 11:
          v7 = CFSTR("VECTOR_BUILDINGS");
          break;
        case 12:
          v7 = CFSTR("VECTOR_TRAFFIC");
          break;
        case 13:
          v7 = CFSTR("VECTOR_POI");
          break;
        case 14:
          v7 = CFSTR("SPUTNIK_METADATA");
          break;
        case 15:
          v7 = CFSTR("SPUTNIK_C3M");
          break;
        case 16:
          v7 = CFSTR("SPUTNIK_DSM");
          break;
        case 17:
          v7 = CFSTR("SPUTNIK_DSM_GLOBAL");
          break;
        case 18:
          v7 = CFSTR("VECTOR_REALISTIC");
          break;
        case 19:
          v7 = CFSTR("VECTOR_LEGACY_REALISTIC");
          break;
        case 20:
          v7 = CFSTR("VECTOR_ROADS");
          break;
        case 21:
          v7 = CFSTR("RASTER_VEGETATION");
          break;
        case 22:
          v7 = CFSTR("VECTOR_TRAFFIC_SKELETON");
          break;
        case 23:
          v7 = CFSTR("RASTER_COASTLINE_MASK");
          break;
        case 24:
          v7 = CFSTR("RASTER_HILLSHADE");
          break;
        case 25:
          v7 = CFSTR("VECTOR_TRAFFIC_WITH_GREEN");
          break;
        case 26:
          v7 = CFSTR("VECTOR_TRAFFIC_STATIC");
          break;
        case 27:
          v7 = CFSTR("RASTER_COASTLINE_DROP_MASK");
          break;
        case 28:
          v7 = CFSTR("VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL");
          break;
        case 29:
          v7 = CFSTR("VECTOR_SPEED_PROFILES");
          break;
        case 30:
          v7 = CFSTR("VECTOR_VENUES");
          break;
        case 31:
          v7 = CFSTR("RASTER_DOWN_SAMPLED");
          break;
        case 32:
          v7 = CFSTR("RASTER_COLOR_BALANCED");
          break;
        case 33:
          v7 = CFSTR("RASTER_SATELLITE_NIGHT");
          break;
        case 34:
          v7 = CFSTR("SPUTNIK_VECTOR_BORDER");
          break;
        case 35:
          v7 = CFSTR("RASTER_SATELLITE_DIGITIZE");
          break;
        case 36:
          v7 = CFSTR("RASTER_HILLSHADE_PARKS");
          break;
        case 37:
          v7 = CFSTR("VECTOR_TRANSIT");
          break;
        case 38:
          v7 = CFSTR("RASTER_STANDARD_BASE");
          break;
        case 39:
          v7 = CFSTR("RASTER_STANDARD_LABELS");
          break;
        case 40:
          v7 = CFSTR("RASTER_HYBRID_ROADS");
          break;
        case 41:
          v7 = CFSTR("RASTER_HYBRID_LABELS");
          break;
        case 42:
          v7 = CFSTR("FLYOVER_C3M_MESH");
          break;
        case 43:
          v7 = CFSTR("FLYOVER_C3M_JPEG_TEXTURE");
          break;
        case 44:
          v7 = CFSTR("FLYOVER_C3M_ASTC_TEXTURE");
          break;
        case 45:
          v7 = CFSTR("RASTER_SATELLITE_ASTC");
          break;
        case 46:
          v7 = CFSTR("RASTER_HYBRID_ROADS_AND_LABELS");
          break;
        case 47:
          v7 = CFSTR("VECTOR_TRANSIT_SELECTION");
          break;
        case 48:
          v7 = CFSTR("VECTOR_COVERAGE");
          break;
        case 52:
          v7 = CFSTR("FLYOVER_METADATA");
          break;
        case 53:
          v7 = CFSTR("VECTOR_ROAD_NETWORK");
          break;
        case 54:
          v7 = CFSTR("VECTOR_LAND_COVER");
          break;
        case 55:
          v7 = CFSTR("VECTOR_DEBUG");
          break;
        case 56:
          v7 = CFSTR("VECTOR_STREET_POI");
          break;
        case 57:
          v7 = CFSTR("MUNIN_METADATA");
          break;
        case 58:
          v7 = CFSTR("VECTOR_SPR_MERCATOR");
          break;
        case 59:
          v7 = CFSTR("VECTOR_SPR_MODELS");
          break;
        case 60:
          v7 = CFSTR("VECTOR_SPR_MATERIALS");
          break;
        case 61:
          v7 = CFSTR("VECTOR_SPR_METADATA");
          break;
        case 62:
          v7 = CFSTR("VECTOR_TRACKS");
          break;
        case 63:
          v7 = CFSTR("VECTOR_RESERVED_2");
          break;
        case 64:
          v7 = CFSTR("VECTOR_STREET_LANDMARKS");
          break;
        case 65:
          v7 = CFSTR("COARSE_LOCATION_POLYGONS");
          break;
        case 66:
          v7 = CFSTR("VECTOR_SPR_ROADS");
          break;
        case 67:
          v7 = CFSTR("VECTOR_SPR_STANDARD");
          break;
        case 68:
          v7 = CFSTR("VECTOR_POI_V2");
          break;
        case 69:
          v7 = CFSTR("VECTOR_POLYGON_SELECTION");
          break;
        case 70:
          v7 = CFSTR("VL_METADATA");
          break;
        case 71:
          v7 = CFSTR("VL_DATA");
          break;
        case 72:
          v7 = CFSTR("PROACTIVE_APP_CLIP");
          break;
        case 73:
          v7 = CFSTR("VECTOR_BUILDINGS_V2");
          break;
        case 74:
          v7 = CFSTR("POI_BUSYNESS");
          break;
        case 75:
          v7 = CFSTR("POI_DP_BUSYNESS");
          break;
        case 76:
          v7 = CFSTR("SMART_INTERFACE_SELECTION");
          break;
        case 77:
          v7 = CFSTR("VECTOR_ASSETS");
          break;
        case 78:
          v7 = CFSTR("SPR_ASSET_METADATA");
          break;
        case 79:
          v7 = CFSTR("VECTOR_SPR_POLAR");
          break;
        case 80:
          v7 = CFSTR("SMART_DATA_MODE");
          break;
        case 81:
          v7 = CFSTR("CELLULAR_PERFORMANCE_SCORE");
          break;
        case 82:
          v7 = CFSTR("VECTOR_SPR_MODELS_OCCLUSION");
          break;
        case 83:
          v7 = CFSTR("VECTOR_TOPOGRAPHIC");
          break;
        case 84:
          v7 = CFSTR("VECTOR_POI_V2_UPDATE");
          break;
        case 85:
          v7 = CFSTR("VECTOR_LIVE_DATA_UPDATES");
          break;
        case 86:
          v7 = CFSTR("VECTOR_TRAFFIC_V2");
          break;
        case 87:
          v7 = CFSTR("VECTOR_ROAD_SELECTION");
          break;
        case 88:
          v7 = CFSTR("VECTOR_REGION_METADATA");
          break;
        case 89:
          v7 = CFSTR("RAY_TRACING");
          break;
        case 90:
          v7 = CFSTR("VECTOR_CONTOURS");
          break;
        case 91:
          v7 = CFSTR("RASTER_SATELLITE_POLAR");
          break;
        case 92:
          v7 = CFSTR("VMAP4_ELEVATION");
          break;
        case 93:
          v7 = CFSTR("VMAP4_ELEVATION_POLAR");
          break;
        case 94:
          v7 = CFSTR("CELLULAR_COVERAGE_PLMN");
          break;
        case 95:
          v7 = CFSTR("RASTER_SATELLITE_POLAR_NIGHT");
          break;
        case 96:
          v7 = CFSTR("UNUSED_96");
          break;
        case 97:
          v7 = CFSTR("UNUSED_97");
          break;
        case 98:
          v7 = CFSTR("UNUSED_98");
          break;
        case 99:
          v7 = CFSTR("UNUSED_99");
          break;
        case 100:
          v7 = CFSTR("UNUSED_100");
          break;
        case 101:
          v7 = CFSTR("UNUSED_101");
          break;
        case 102:
          v7 = CFSTR("UNUSED_102");
          break;
        case 103:
          v7 = CFSTR("UNUSED_103");
          break;
        case 104:
          v7 = CFSTR("UNUSED_104");
          break;
        case 105:
          v7 = CFSTR("UNUSED_105");
          break;
        case 106:
          v7 = CFSTR("UNUSED_106");
          break;
        case 107:
          v7 = CFSTR("UNUSED_107");
          break;
        case 108:
          v7 = CFSTR("UNUSED_108");
          break;
        case 109:
          v7 = CFSTR("UNUSED_109");
          break;
        case 110:
          v7 = CFSTR("UNUSED_110");
          break;
        case 111:
          v7 = CFSTR("UNUSED_111");
          break;
        case 112:
          v7 = CFSTR("UNUSED_112");
          break;
        case 113:
          v7 = CFSTR("UNUSED_113");
          break;
        case 114:
          v7 = CFSTR("UNUSED_114");
          break;
        case 115:
          v7 = CFSTR("UNUSED_115");
          break;
        case 116:
          v7 = CFSTR("UNUSED_116");
          break;
        case 117:
          v7 = CFSTR("UNUSED_117");
          break;
        case 118:
          v7 = CFSTR("UNUSED_118");
          break;
        case 119:
          v7 = CFSTR("UNUSED_119");
          break;
        default:
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), v5);
          v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
          v6 = *(unsigned __int16 *)(a1 + 1) | (a1[3] << 16);
          break;
      }
      v11 = v6 << 14 >> 28;
      if (v11)
      {
        if (v11 == 2)
        {
          v12 = CFSTR("PX512");
        }
        else if (v11 == 1)
        {
          v12 = CFSTR("PX256");
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), (v6 << 14 >> 28));
          v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
          v6 = *(unsigned __int16 *)(a1 + 1) | (a1[3] << 16);
        }
      }
      else
      {
        v12 = CFSTR("PX128");
      }
      v13 = 4 * (v6 & 0x3FFFFF);
      v14 = v6 << 10 >> 28;
      if (v13 >= 0x300000)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), v14);
        v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v15 = off_1E1C01FF8[v14];
      }
      objc_msgSend(v3, "stringWithFormat:", CFSTR("<%@|%@|%@>"), v7, v12, v15);
      v8 = (__CFString *)objc_claimAutoreleasedReturnValue();

LABEL_250:
      return v8;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<unknown: %d>"), *(unsigned int *)a1);
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = CFSTR("<null>");
  }
  return v8;
}

void sub_188932DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

id _stateDescriptionForTask(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  objc_class *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = a1;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (objc_class *)objc_opt_class();
  NSStringFromClass(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, CFSTR("name"));

  v7 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v3, "progress");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "fractionCompleted");
  objc_msgSend(v7, "numberWithDouble:");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v9, CFSTR("progress"));

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v3, "stateWithHints:", a2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
      objc_msgSend(v4, "addEntriesFromDictionary:", v10);

  }
  return v4;
}

id GEOGetSignedResourcesLog()
{
  if (qword_1ECDBB958 != -1)
    dispatch_once(&qword_1ECDBB958, &__block_literal_global_54);
  return (id)qword_1ECDBB950;
}

void __certsForType_block_invoke()
{
  void *v0;
  int v1;

  +[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isInternalInstall");

  if (!v1
    || (_loadCertsFromFile((uint64_t)LPRProductionCert, (uint64_t)off_1EDF47A10, &_MergedGlobals_181, &qword_1ECDBB910) & 1) == 0)
  {
    _MergedGlobals_181 = (uint64_t)&LPRProductionCert;
    qword_1ECDBB910 = 1;
  }
}

uint64_t _loadCertsFromFile(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  void *v8;
  id v9;
  BOOL v10;
  id v11;
  NSObject *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD v19[4];
  id v20;
  _QWORD v21[6];
  id v22;
  id v23;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:options:error:", CFSTR("/AppleInternal/Library/Preferences/GeoServices/GEOResourceCertIds.plist"), 0, &v23);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v23;
  if (v8)
    v10 = v9 == 0;
  else
    v10 = 0;
  if (!v10)
  {
    v11 = v9;
    GEOGetSignedResourcesLog();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = CFSTR("/AppleInternal/Library/Preferences/GeoServices/GEOResourceCertIds.plist");
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v11;
      _os_log_impl(&dword_1885A9000, v12, OS_LOG_TYPE_ERROR, "Could not read plist at \"%@\": %@", buf, 0x16u);
    }
LABEL_17:
    v15 = 0;
    goto LABEL_18;
  }
  v22 = 0;
  objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v8, 0, 0, &v22);
  v12 = objc_claimAutoreleasedReturnValue();
  v11 = v22;
  if (v11 || !v12 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0) || !-[NSObject count](v12, "count"))
  {
    GEOGetSignedResourcesLog();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = CFSTR("/AppleInternal/Library/Preferences/GeoServices/GEOResourceCertIds.plist");
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v11;
      _os_log_impl(&dword_1885A9000, v16, OS_LOG_TYPE_ERROR, "Could not read/badly formatted plist at \"%@\": %@", buf, 0x16u);
    }

    GEOGetSignedResourcesLog();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_1885A9000, v17, OS_LOG_TYPE_ERROR, "    Contents: %@", buf, 0xCu);
    }

    goto LABEL_17;
  }
  v13 = malloc_type_malloc(16 * -[NSObject count](v12, "count") + 16, 0x600405BB7FD7CuLL);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  *v13 = a1;
  v13[1] = a2;
  v25 = 1;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = ___loadCertsFromFile_block_invoke;
  v21[3] = &unk_1E1C02090;
  v21[4] = buf;
  v21[5] = v13;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = ___loadCertsFromFile_block_invoke_2;
  v19[3] = &unk_1E1C020B8;
  v14 = (id)MEMORY[0x18D765024](v21);
  v20 = v14;
  -[NSObject enumerateKeysAndObjectsUsingBlock:](v12, "enumerateKeysAndObjectsUsingBlock:", v19);
  *a3 = v13;
  *a4 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);

  _Block_object_dispose(buf, 8);
  v11 = 0;
  v15 = 1;
LABEL_18:

  return v15;
}

void sub_18893411C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __certsForType_block_invoke_3()
{
  void *v0;
  int v1;

  +[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isInternalInstall");

  if (!v1
    || (_loadCertsFromFile((uint64_t)RAPProductionCert, (uint64_t)off_1EDF47A20, &qword_1ECDBB920, &qword_1ECDBB928) & 1) == 0)
  {
    qword_1ECDBB920 = (uint64_t)&RAPProductionCert;
    qword_1ECDBB928 = 1;
  }
}

void __certsForType_block_invoke_5()
{
  void *v0;
  int v1;

  +[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isInternalInstall");

  if (!v1
    || (_loadCertsFromFile((uint64_t)PlaceCardProductionCert, (uint64_t)off_1EDF47A30, &qword_1ECDBB938, &qword_1ECDBB940) & 1) == 0)
  {
    qword_1ECDBB938 = (uint64_t)&PlaceCardProductionCert;
    qword_1ECDBB940 = 1;
  }
}

void ___loadCertsFromFile_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;

  v5 = a2;
  v6 = a3;
  v8 = v5;
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8) = v8;
  CFRetain(*(CFTypeRef *)(*(_QWORD *)(a1 + 40) + 16 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8));
  v7 = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16 * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))++) = v7;

}

void ___loadCertsFromFile_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  int v10;
  id v11;
  __int16 v12;
  id v13;
  __int16 v14;
  NSObject *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v6, "count") == 2)
  {
    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("leaf"));
    v7 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ca"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[NSObject length](v7, "length") && objc_msgSend(v8, "length"))
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
    else
    {
      GEOGetSignedResourcesLog();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = 138412802;
        v11 = v5;
        v12 = 2112;
        v13 = v8;
        v14 = 2112;
        v15 = v7;
        _os_log_impl(&dword_1885A9000, v9, OS_LOG_TYPE_ERROR, "Invalid cert entry \"%@\": ca %@ leaf %@", (uint8_t *)&v10, 0x20u);
      }

    }
  }
  else
  {
    GEOGetSignedResourcesLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412546;
      v11 = v5;
      v12 = 2112;
      v13 = v6;
      _os_log_impl(&dword_1885A9000, v7, OS_LOG_TYPE_ERROR, "Invalid cert entry \"%@\": %@", (uint8_t *)&v10, 0x16u);
    }
  }

}

id GEOGetExternalRequestLog()
{
  if (qword_1ECDBB978 != -1)
    dispatch_once(&qword_1ECDBB978, &__block_literal_global_3);
  return (id)qword_1ECDBB970;
}

id GEORequestCounterInterfaceTypesToStrings(uint64_t a1)
{
  __int16 v1;
  void *v2;
  void *v3;

  if (!a1)
  {
    v3 = &unk_1E1E85420;
    return v3;
  }
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("WiFi/Wired"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_12;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("Cellular"));
  if ((v1 & 4) == 0)
  {
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_6;
LABEL_13:
    objc_msgSend(v3, "addObject:", CFSTR("Constrained"));
    if ((v1 & 0x10) == 0)
    {
LABEL_7:
      if ((v1 & 0x100) == 0)
        return v3;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_12:
  objc_msgSend(v3, "addObject:", CFSTR("Expensive"));
  if ((v1 & 8) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v1 & 0x10) == 0)
    goto LABEL_7;
LABEL_14:
  objc_msgSend(v3, "addObject:", CFSTR("Multipath"));
  if ((v1 & 0x100) != 0)
LABEL_15:
    objc_msgSend(v3, "addObject:", CFSTR("Offline"));
  return v3;
}

const __CFString *GEOStringForRequestCounterInfoResult(char a1)
{
  if ((a1 + 2) > 7u)
    return CFSTR("Success");
  else
    return off_1E1C021D8[(char)(a1 + 2)];
}

uint64_t GEORequestCounterInfoResultToNWActivityCompletionReason(int a1)
{
  if ((a1 - 1) > 4)
    return 2;
  else
    return dword_189CC2D54[(char)(a1 - 1)];
}

id GEOStringForRequestCounterDictionary(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  objc_msgSend(&stru_1E1C241D0, "stringByPaddingToLength:withString:startingAtIndex:", 58, CFSTR("-"), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("+%@+\n"), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "allKeys");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "sortedArrayUsingComparator:", &__block_literal_global_45);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  obj = v6;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v20 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        v12 = objc_msgSend(v11, "length");
        if ((unint64_t)(v12 + 5) >= 0x3C)
          v13 = 0;
        else
          v13 = 55 - v12;
        objc_msgSend(&stru_1E1C241D0, "stringByPaddingToLength:withString:startingAtIndex:", v13, CFSTR(" "), 0);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "appendString:", CFSTR("\n"));
        objc_msgSend(v2, "appendString:", v4);
        objc_msgSend(v2, "appendFormat:", CFSTR("| %@:%@ |\n"), v11, v14);
        objc_msgSend(v2, "appendString:", v4);
        objc_msgSend(v1, "objectForKeyedSubscript:", v11);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "_appendFormattedStringTo:", v2);

      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v8);
  }

  v16 = (void *)objc_msgSend(v2, "copy");
  return v16;
}

id GEOCSVStringForRequestCounterDictionary(void *a1)
{
  id v1;
  id v2;
  unsigned __int8 v3;
  const __CFString *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  void *v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  objc_msgSend(v2, "appendString:", CFSTR("App ID, Type, Bytes Sent, Bytes Recieved, Total Duration, Average Duration"));
  v3 = 0;
  do
  {
    v4 = CFSTR("Success");
    if ((v3 - 1) <= 3u)
      v4 = off_1E1C02218[(char)v3 - 1];
    objc_msgSend(v2, "appendString:", CFSTR(", "));
    objc_msgSend(v2, "appendString:", v4);
    objc_msgSend(v2, "appendString:", CFSTR(" Count"));
    v5 = v3++;
  }
  while (v5 < 4);
  objc_msgSend(v2, "appendString:", CFSTR(", "));
  GEORequestCounterInterfaceTypesToStrings(287);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "componentsJoinedByString:", CFSTR(", "));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "appendString:", v7);

  objc_msgSend(v2, "appendString:", CFSTR("\n"));
  objc_msgSend(v1, "allKeys");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "sortedArrayUsingComparator:", &__block_literal_global_58);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v10 = v9;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v20 != v13)
          objc_enumerationMutation(v10);
        v15 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * i);
        objc_msgSend(v1, "objectForKeyedSubscript:", v15, (_QWORD)v19);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "_appendFormattedCSVStringTo:forAppId:", v2, v15);

      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v12);
  }

  v17 = (void *)objc_msgSend(v2, "copy");
  return v17;
}

id GEOStringForRequestCounterLogArray(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v7++), "_appendFormattedStringTo:", v2, (_QWORD)v10);
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  v8 = (void *)objc_msgSend(v2, "copy");
  return v8;
}

id GEOCSVStringForRequestCounterLogArray(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  objc_msgSend(v2, "appendString:", CFSTR("App ID, Type, Result, Bytes Sent, Bytes Recieved, Start Time, End Time, "));
  GEORequestCounterInterfaceTypesToStrings(287);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", "));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "appendString:", v4);

  objc_msgSend(v2, "appendString:", CFSTR("\n"));
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = v1;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v9++), "_appendFormattedCSVStringTo:", v2, (_QWORD)v12);
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

  v10 = (void *)objc_msgSend(v2, "copy");
  return v10;
}

id GEOStringForExternalRequestCounterInfoArray(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  __CFString *v26;
  void *v27;
  __CFString *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  void *v38;
  __CFString *v39;
  void *v40;
  __CFString *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void *v74;
  void *v75;
  id obj;
  uint64_t v78;
  id v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[128];
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v79 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  obj = v1;
  v80 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v85, 16);
  if (v80)
  {
    v78 = *(_QWORD *)v82;
    do
    {
      v2 = 0;
      do
      {
        if (*(_QWORD *)v82 != v78)
          objc_enumerationMutation(obj);
        v3 = *(id *)(*((_QWORD *)&v81 + 1) + 8 * v2);
        v4 = v79;
        objc_msgSend(v3, "requestType");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "appId");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = v5;
        v8 = v4;
        objc_msgSend(v8, "appendString:", &stru_1E1C241D0);
        objc_msgSend(v8, "appendString:", &stru_1E1C241D0);
        objc_msgSend(v8, "appendString:", v7);
        v9 = objc_msgSend(&stru_1E1C241D0, "length");
        v10 = objc_msgSend(&stru_1E1C241D0, "length") + v9;
        v11 = objc_msgSend(v7, "length");

        v12 = v10 + objc_msgSend(CFSTR(" "), "length");
        v13 = v12 + objc_msgSend(v6, "length") + v11;
        v14 = v13 <= 0x3C;
        v15 = 60 - v13;
        if (v14)
          v16 = v15;
        else
          v16 = 0;
        objc_msgSend(&stru_1E1C241D0, "stringByPaddingToLength:withString:startingAtIndex:", v16, CFSTR(" "), 0);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "appendString:", v17);

        objc_msgSend(v8, "appendString:", CFSTR(" "));
        objc_msgSend(v8, "appendString:", v6);
        objc_msgSend(v8, "appendString:", CFSTR("\n"));

        objc_msgSend(&stru_1E1C241D0, "stringByPaddingToLength:withString:startingAtIndex:", 60, CFSTR("-"), 0);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "appendString:", v18);

        objc_msgSend(v8, "appendString:", CFSTR("\n"));
        objc_msgSend(v3, "startTime");
        v19 = objc_claimAutoreleasedReturnValue();
        if (v19
          && (v20 = (void *)v19,
              objc_msgSend(v3, "endTime"),
              v21 = (void *)objc_claimAutoreleasedReturnValue(),
              v21,
              v20,
              v21))
        {
          objc_msgSend(v3, "endTime");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "startTime");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "timeIntervalSinceDate:", v23);
          v25 = v24;

          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%.03fs"), fmax(v25, 0.0));
          v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v26 = &stru_1E1C241D0;
        }
        objc_msgSend(v3, "requestSubtype");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = v26;
        v29 = v8;
        objc_msgSend(v29, "appendString:", &stru_1E1C241D0);
        objc_msgSend(v29, "appendString:", CFSTR("Subtype: "));
        objc_msgSend(v29, "appendString:", v27);
        v30 = objc_msgSend(&stru_1E1C241D0, "length");
        v31 = objc_msgSend(CFSTR("Subtype: "), "length") + v30;
        v32 = objc_msgSend(v27, "length");
        v33 = v31 + objc_msgSend(CFSTR(" "), "length");
        v34 = v33 + -[__CFString length](v28, "length") + v32;
        v14 = v34 <= 0x3C;
        v35 = 60 - v34;
        if (v14)
          v36 = v35;
        else
          v36 = 0;
        objc_msgSend(&stru_1E1C241D0, "stringByPaddingToLength:withString:startingAtIndex:", v36, CFSTR(" "), 0);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "appendString:", v37);

        objc_msgSend(v29, "appendString:", CFSTR(" "));
        objc_msgSend(v29, "appendString:", v28);

        objc_msgSend(v29, "appendString:", CFSTR("\n"));
        if (objc_msgSend(v3, "usedInterface"))
        {
          GEORequestCounterInterfaceTypesToStrings(objc_msgSend(v3, "usedInterface"));
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "componentsJoinedByString:", CFSTR(", "));
          v39 = (__CFString *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v39 = &stru_1E1C241D0;
        }
        objc_msgSend(v3, "source");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = v39;
        v42 = v29;
        objc_msgSend(v42, "appendString:", &stru_1E1C241D0);
        objc_msgSend(v42, "appendString:", CFSTR("Source: "));
        objc_msgSend(v42, "appendString:", v40);
        v43 = objc_msgSend(&stru_1E1C241D0, "length");
        v44 = objc_msgSend(CFSTR("Source: "), "length") + v43;
        v45 = objc_msgSend(v40, "length");
        v46 = v44 + objc_msgSend(CFSTR(" "), "length");
        v47 = v46 + -[__CFString length](v41, "length") + v45;
        v14 = v47 <= 0x3C;
        v48 = 60 - v47;
        if (v14)
          v49 = v48;
        else
          v49 = 0;
        objc_msgSend(&stru_1E1C241D0, "stringByPaddingToLength:withString:startingAtIndex:", v49, CFSTR(" "), 0);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "appendString:", v50);

        objc_msgSend(v42, "appendString:", CFSTR(" "));
        objc_msgSend(v42, "appendString:", v41);

        objc_msgSend(v42, "appendString:", CFSTR("\n"));
        if (objc_msgSend(v3, "xmitBytes"))
        {
          _byteFormatter();
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v51, "stringFromByteCount:", objc_msgSend(v3, "xmitBytes"));
          v52 = (void *)objc_claimAutoreleasedReturnValue();

          v53 = v52;
          v54 = v42;
          objc_msgSend(v54, "appendString:", &stru_1E1C241D0);
          objc_msgSend(v54, "appendString:", CFSTR("Xmit: "));
          objc_msgSend(v54, "appendString:", v53);
          v55 = objc_msgSend(&stru_1E1C241D0, "length");
          v56 = objc_msgSend(CFSTR("Xmit: "), "length") + v55;
          v57 = objc_msgSend(v53, "length");

          v58 = v56 + objc_msgSend(&stru_1E1C241D0, "length");
          v59 = v58 + objc_msgSend(&stru_1E1C241D0, "length") + v57;
          v14 = v59 <= 0x3C;
          v60 = 60 - v59;
          if (v14)
            v61 = v60;
          else
            v61 = 0;
          objc_msgSend(&stru_1E1C241D0, "stringByPaddingToLength:withString:startingAtIndex:", v61, CFSTR(" "), 0);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v54, "appendString:", v62);

          objc_msgSend(v54, "appendString:", &stru_1E1C241D0);
          objc_msgSend(v54, "appendString:", &stru_1E1C241D0);
          objc_msgSend(v54, "appendString:", CFSTR("\n"));

        }
        if (objc_msgSend(v3, "recvBytes"))
        {
          _byteFormatter();
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v63, "stringFromByteCount:", objc_msgSend(v3, "recvBytes"));
          v64 = (void *)objc_claimAutoreleasedReturnValue();

          v65 = v64;
          v66 = v42;
          objc_msgSend(v66, "appendString:", &stru_1E1C241D0);
          objc_msgSend(v66, "appendString:", CFSTR("Recv: "));
          objc_msgSend(v66, "appendString:", v65);
          v67 = objc_msgSend(&stru_1E1C241D0, "length");
          v68 = objc_msgSend(CFSTR("Recv: "), "length") + v67;
          v69 = objc_msgSend(v65, "length");

          v70 = v68 + objc_msgSend(&stru_1E1C241D0, "length");
          v71 = v70 + objc_msgSend(&stru_1E1C241D0, "length") + v69;
          v14 = v71 <= 0x3C;
          v72 = 60 - v71;
          if (v14)
            v73 = v72;
          else
            v73 = 0;
          objc_msgSend(&stru_1E1C241D0, "stringByPaddingToLength:withString:startingAtIndex:", v73, CFSTR(" "), 0);
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v66, "appendString:", v74);

          objc_msgSend(v66, "appendString:", &stru_1E1C241D0);
          objc_msgSend(v66, "appendString:", &stru_1E1C241D0);
          objc_msgSend(v66, "appendString:", CFSTR("\n"));

        }
        objc_msgSend(v42, "appendString:", CFSTR("\n"));

        ++v2;
      }
      while (v80 != v2);
      v80 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v85, 16);
    }
    while (v80);
  }

  v75 = (void *)objc_msgSend(v79, "copy");
  return v75;
}

id GEOCSVStringForExternalRequestCounterInfoArray(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  const __CFString *v15;
  uint64_t v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t i;
  const __CFString *v23;
  void *v24;
  id obj;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[8];
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  objc_msgSend(v2, "appendString:", CFSTR("App ID, Start Time, End Time, Bytes Sent, Bytes Received, Type, Subtype, Source, "));
  GEORequestCounterInterfaceTypesToStrings(287);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", "));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "appendString:", v4);

  objc_msgSend(v2, "appendString:", CFSTR("\n"));
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  obj = v1;
  v28 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
  if (v28)
  {
    v27 = *(_QWORD *)v37;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v37 != v27)
          objc_enumerationMutation(obj);
        v35 = v5;
        v6 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * v5);
        objc_msgSend(v6, "appId");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v40[0] = v34;
        v7 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v6, "startTime");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "timeIntervalSinceReferenceDate");
        objc_msgSend(v7, "stringWithFormat:", CFSTR("%f"), v8);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v40[1] = v32;
        v9 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v6, "endTime");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "timeIntervalSinceReferenceDate");
        objc_msgSend(v9, "stringWithFormat:", CFSTR("%f"), v10);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v40[2] = v30;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lld"), objc_msgSend(v6, "xmitBytes"));
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v40[3] = v29;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lld"), objc_msgSend(v6, "recvBytes"));
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v40[4] = v11;
        objc_msgSend(v6, "requestType");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v40[5] = v12;
        objc_msgSend(v6, "requestSubtype");
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = (void *)v13;
        if (v13)
          v15 = (const __CFString *)v13;
        else
          v15 = CFSTR("N/A");
        v40[6] = v15;
        objc_msgSend(v6, "source");
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = (void *)v16;
        if (v16)
          v18 = (const __CFString *)v16;
        else
          v18 = CFSTR("N/A");
        v40[7] = v18;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v40, 8);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v19, "componentsJoinedByString:", CFSTR(", "));
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "appendString:", v20);

        v21 = objc_msgSend(v6, "usedInterface");
        for (i = 0; i != 6; ++i)
        {
          if ((GEOAllRequestCounterInterfaceTypes[i] & v21) != 0)
            v23 = CFSTR(", Y");
          else
            v23 = CFSTR(", N");
          objc_msgSend(v2, "appendString:", v23);
        }
        objc_msgSend(v2, "appendString:", CFSTR("\n"));

        v5 = v35 + 1;
      }
      while (v35 + 1 != v28);
      v28 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
    }
    while (v28);
  }

  v24 = (void *)objc_msgSend(v2, "copy");
  return v24;
}

id GEOExternalRequestSummaryData(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  id obj;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  obj = v1;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v24 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        objc_msgSend(v7, "source");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "objectForKeyedSubscript:", v8);
        v9 = (id)objc_claimAutoreleasedReturnValue();
        if (!v9)
        {
          v9 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, v8);
        }
        objc_msgSend(v7, "requestType");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = (void *)objc_msgSend(v10, "mutableCopy");

        objc_msgSend(v7, "requestSubtype");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "length");

        if (v13)
        {
          v14 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(v7, "requestSubtype");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "stringWithFormat:", CFSTR(" [%@]"), v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "appendString:", v16);

        }
        objc_msgSend(v9, "objectForKeyedSubscript:", v11);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "intValue");

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (v18 + 1));
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "setObject:forKeyedSubscript:", v19, v11);

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v4);
  }

  v20 = (void *)objc_msgSend(v2, "copy");
  return v20;
}

id GEOStringForExternalRequestCounterInfoSummary(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  int v23;
  __CFString *v24;
  __CFString *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  void *v40;
  void *v42;
  id obj;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[128];
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v46 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v42 = v1;
  GEOExternalRequestSummaryData(v1);
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "allKeys");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v47 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v60, 16);
  if (v47)
  {
    v44 = *(_QWORD *)v56;
    do
    {
      v2 = 0;
      do
      {
        if (*(_QWORD *)v56 != v44)
          objc_enumerationMutation(obj);
        v48 = v2;
        v3 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * v2);
        objc_msgSend(&stru_1E1C241D0, "stringByPaddingToLength:withString:startingAtIndex:", 60, CFSTR("-"), 0);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "appendString:", v4);

        objc_msgSend(v46, "appendString:", CFSTR("\n"));
        v5 = v3;
        v6 = v46;
        objc_msgSend(v6, "appendString:", &stru_1E1C241D0);
        objc_msgSend(v6, "appendString:", CFSTR("Source: "));
        objc_msgSend(v6, "appendString:", v5);
        v7 = objc_msgSend(&stru_1E1C241D0, "length");
        v8 = objc_msgSend(CFSTR("Source: "), "length") + v7;
        v9 = objc_msgSend(v5, "length");

        v10 = v8 + objc_msgSend(&stru_1E1C241D0, "length");
        v11 = v10 + objc_msgSend(&stru_1E1C241D0, "length") + v9;
        v12 = v11 <= 0x3C;
        v13 = 60 - v11;
        if (v12)
          v14 = v13;
        else
          v14 = 0;
        objc_msgSend(&stru_1E1C241D0, "stringByPaddingToLength:withString:startingAtIndex:", v14, CFSTR(" "), 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "appendString:", v15);

        objc_msgSend(v6, "appendString:", &stru_1E1C241D0);
        objc_msgSend(v6, "appendString:", &stru_1E1C241D0);
        objc_msgSend(v6, "appendString:", CFSTR("\n"));
        v50 = v6;

        objc_msgSend(v45, "objectForKeyedSubscript:", v5);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v54 = 0u;
        objc_msgSend(v16, "allKeys");
        v49 = (id)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
        if (v17)
        {
          v18 = v17;
          v19 = *(_QWORD *)v52;
          do
          {
            for (i = 0; i != v18; ++i)
            {
              if (*(_QWORD *)v52 != v19)
                objc_enumerationMutation(v49);
              v21 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * i);
              objc_msgSend(v16, "objectForKeyedSubscript:", v21);
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              v23 = objc_msgSend(v22, "intValue");
              v24 = CFSTR("requests");
              if (v23 == 1)
                v24 = CFSTR("request");
              v25 = v24;

              v26 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(v16, "objectForKeyedSubscript:", v21);
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v26, "stringWithFormat:", CFSTR("%@ %@"), v27, v25);
              v28 = (void *)objc_claimAutoreleasedReturnValue();

              v29 = v28;
              v30 = v21;
              v31 = v50;
              objc_msgSend(v31, "appendString:", &stru_1E1C241D0);
              objc_msgSend(v31, "appendString:", &stru_1E1C241D0);
              objc_msgSend(v31, "appendString:", v30);
              v32 = objc_msgSend(&stru_1E1C241D0, "length");
              v33 = objc_msgSend(&stru_1E1C241D0, "length") + v32;
              v34 = objc_msgSend(v30, "length");

              v35 = v33 + objc_msgSend(&stru_1E1C241D0, "length");
              v36 = v35 + objc_msgSend(v29, "length") + v34;
              v12 = v36 <= 0x3C;
              v37 = 60 - v36;
              if (v12)
                v38 = v37;
              else
                v38 = 0;
              objc_msgSend(&stru_1E1C241D0, "stringByPaddingToLength:withString:startingAtIndex:", v38, CFSTR(" "), 0);
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v31, "appendString:", v39);

              objc_msgSend(v31, "appendString:", &stru_1E1C241D0);
              objc_msgSend(v31, "appendString:", v29);

              objc_msgSend(v31, "appendString:", CFSTR("\n"));
            }
            v18 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
          }
          while (v18);
        }

        objc_msgSend(v50, "appendString:", CFSTR("\n"));
        v2 = v48 + 1;
      }
      while (v48 + 1 != v47);
      v47 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v60, 16);
    }
    while (v47);
  }

  v40 = (void *)objc_msgSend(v46, "copy");
  return v40;
}

id GEOCSVStringForExternalRequestCounterInfoSummary(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v17;
  id obj;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[3];
  _BYTE v32[128];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v17 = v1;
  GEOExternalRequestSummaryData(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "appendString:", CFSTR("Source, Type and Subtype, Requests count"));
  objc_msgSend(v2, "appendString:", CFSTR("\n"));
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v20 = v3;
  objc_msgSend(v3, "allKeys");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
  if (v21)
  {
    v19 = *(_QWORD *)v28;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v28 != v19)
          objc_enumerationMutation(obj);
        v22 = v4;
        v5 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * v4);
        objc_msgSend(v20, "objectForKeyedSubscript:", v5, v17);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 0u;
        v24 = 0u;
        v25 = 0u;
        v26 = 0u;
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
        if (v7)
        {
          v8 = v7;
          v9 = *(_QWORD *)v24;
          do
          {
            for (i = 0; i != v8; ++i)
            {
              if (*(_QWORD *)v24 != v9)
                objc_enumerationMutation(v6);
              v11 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * i);
              v31[0] = v5;
              v31[1] = v11;
              objc_msgSend(v6, "objectForKeyedSubscript:");
              v12 = (void *)objc_claimAutoreleasedReturnValue();
              v31[2] = v12;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v31, 3);
              v13 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v13, "componentsJoinedByString:", CFSTR(", "));
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v2, "appendString:", v14);

              objc_msgSend(v2, "appendString:", CFSTR("\n"));
            }
            v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
          }
          while (v8);
        }

        v4 = v22 + 1;
      }
      while (v22 + 1 != v21);
      v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
    }
    while (v21);
  }

  v15 = (void *)objc_msgSend(v2, "copy");
  return v15;
}

id GEODictionaryRepresentationWithExternalInfo(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;

  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v1, "appId");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKey:", v3, CFSTR("appId"));

  objc_msgSend(v1, "startTime");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v1, "startTime");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setValue:forKey:", v5, CFSTR("start"));

  }
  objc_msgSend(v1, "endTime");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v1, "endTime");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setValue:forKey:", v7, CFSTR("end"));

  }
  if (objc_msgSend(v1, "xmitBytes") >= 1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v1, "xmitBytes"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setValue:forKey:", v8, CFSTR("xmit"));

  }
  if (objc_msgSend(v1, "recvBytes") >= 1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v1, "recvBytes"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setValue:forKey:", v9, CFSTR("recv"));

  }
  if (objc_msgSend(v1, "usedInterface"))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v1, "usedInterface"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setValue:forKey:", v10, CFSTR("interface"));

  }
  objc_msgSend(v1, "requestType");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKey:", v11, CFSTR("requestType"));

  objc_msgSend(v1, "requestSubtype");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "length");

  if (v13)
  {
    objc_msgSend(v1, "requestSubtype");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setValue:forKey:", v14, CFSTR("requestSubtype"));

  }
  objc_msgSend(v1, "source");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "length");

  if (v16)
  {
    objc_msgSend(v1, "source");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setValue:forKey:", v17, CFSTR("source"));

  }
  v18 = (void *)objc_msgSend(v2, "copy");

  return v18;
}

id _byteFormatter()
{
  if (qword_1ECDBB998 != -1)
    dispatch_once(&qword_1ECDBB998, &__block_literal_global_600);
  return (id)qword_1ECDBB990;
}

uint64_t ___byteFormatter_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0CB34E8]);
  v1 = (void *)qword_1ECDBB990;
  qword_1ECDBB990 = (uint64_t)v0;

  objc_msgSend((id)qword_1ECDBB990, "setCountStyle:", 3);
  objc_msgSend((id)qword_1ECDBB990, "setAllowsNonnumericFormatting:", 0);
  objc_msgSend((id)qword_1ECDBB990, "setFormattingContext:", 2);
  return objc_msgSend((id)qword_1ECDBB990, "setAllowedUnits:", 1);
}

void sub_18893B074(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_18893BA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location)
{
  id *v31;

  objc_destroyWeak(v31);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18893D368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_18893D55C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GEOPathMatcherRoadNetwork::GEOPathMatcherRoadNetwork(uint64_t a1, unsigned int a2, void *a3, uint64_t *a4)
{
  id v7;
  uint64_t v8;
  uint64_t *v9;
  GEOPathMatcherRoadLookup *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *i;
  _OWORD *v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t **v34;
  _QWORD *v35;
  _QWORD *v36;
  __int16 v38[8];

  v7 = a3;
  *(_DWORD *)(a1 + 16) = 5000;
  *(_OWORD *)(a1 + 24) = xmmword_189CC0500;
  *(_OWORD *)(a1 + 40) = xmmword_189CC0510;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 20000000;
  *(_QWORD *)(a1 + 72) = 0x3FF199999999999ALL;
  *(_QWORD *)(a1 + 80) = 0x3E800002710;
  *(_DWORD *)(a1 + 88) = 10000;
  *(_WORD *)(a1 + 92) = 10;
  *(_OWORD *)(a1 + 96) = xmmword_189CC0520;
  *(_QWORD *)(a1 + 112) = 0x3FE6147AE147AE14;
  *(_WORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = &off_1E1BF4FD8;
  *(_QWORD *)(a1 + 8) = 0x4039000000000000;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = a2;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v8 = a1 + 152;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  v9 = (uint64_t *)(a1 + 144);
  if (a2 > 3 || a2 == 1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      v38[0] = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: transportType == GEOTransportType_AUTOMOBILE || transportType == GEOTransportType_WALKING || transportType == GEOTransportType_BICYCLE", (uint8_t *)v38, 2u);
    }
    goto LABEL_51;
  }
  v10 = -[GEOPathMatcherRoadLookup initWithAuditToken:]([GEOPathMatcherRoadLookup alloc], "initWithAuditToken:", v7);
  v11 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v10;

  if (!a4 || v9 == a4)
    goto LABEL_51;
  v14 = (_QWORD *)*a4;
  v12 = a4 + 1;
  v13 = v14;
  if (*(_QWORD *)(a1 + 160))
  {
    v15 = *v9;
    *v9 = v8;
    *(_QWORD *)(*(_QWORD *)v8 + 16) = 0;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(a1 + 160) = 0;
    if (*(_QWORD *)(v15 + 8))
      v16 = *(_QWORD *)(v15 + 8);
    else
      v16 = v15;
    if (v16)
    {
      v17 = std::__tree<std::__value_type<int,gloria::ShardInfo>,std::__map_value_compare<int,std::__value_type<int,gloria::ShardInfo>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::ShardInfo>>>::_DetachedTreeCache::__detach_next(v16);
      if (v13 == v12)
      {
        v19 = (_QWORD *)v16;
      }
      else
      {
        v18 = v13;
        do
        {
          v19 = v17;
          v20 = v18[4];
          *(_QWORD *)(v16 + 32) = v20;
          v21 = *(_OWORD *)(v18 + 5);
          *(_QWORD *)(v16 + 56) = v18[7];
          *(_OWORD *)(v16 + 40) = v21;
          v22 = *(uint64_t **)v8;
          v23 = (uint64_t **)(a1 + 152);
          v24 = (uint64_t **)(a1 + 152);
          if (*(_QWORD *)v8)
          {
            do
            {
              while (1)
              {
                v23 = (uint64_t **)v22;
                if (v20 >= v22[4])
                  break;
                v22 = (uint64_t *)*v22;
                v24 = v23;
                if (!*v23)
                  goto LABEL_18;
              }
              v22 = (uint64_t *)v22[1];
            }
            while (v22);
            v24 = v23 + 1;
          }
LABEL_18:
          std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at((uint64_t **)(a1 + 144), (uint64_t)v23, v24, (uint64_t *)v16);
          if (v17)
            v17 = std::__tree<std::__value_type<int,gloria::ShardInfo>,std::__map_value_compare<int,std::__value_type<int,gloria::ShardInfo>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::ShardInfo>>>::_DetachedTreeCache::__detach_next((uint64_t)v17);
          else
            v17 = 0;
          v25 = (_QWORD *)v18[1];
          if (v25)
          {
            do
            {
              v13 = v25;
              v25 = (_QWORD *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v18[2];
              v26 = *v13 == (_QWORD)v18;
              v18 = v13;
            }
            while (!v26);
          }
          if (!v19)
            break;
          v16 = (uint64_t)v19;
          v18 = v13;
        }
        while (v13 != v12);
      }
      std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(a1 + 144, v19);
      if (!v17)
        goto LABEL_38;
      for (i = (_QWORD *)v17[2]; i; i = (_QWORD *)i[2])
        v17 = i;
      v27 = a1 + 144;
      v28 = v17;
    }
    else
    {
      v27 = a1 + 144;
      v28 = 0;
    }
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(v27, v28);
  }
LABEL_38:
  if (v13 != v12)
  {
    do
    {
      v30 = operator new(0x40uLL);
      v31 = *((_OWORD *)v13 + 3);
      v30[2] = *((_OWORD *)v13 + 2);
      v30[3] = v31;
      v32 = *(uint64_t **)v8;
      v33 = (uint64_t **)(a1 + 152);
      v34 = (uint64_t **)(a1 + 152);
      if (*(_QWORD *)v8)
      {
        do
        {
          while (1)
          {
            v33 = (uint64_t **)v32;
            if (*((_QWORD *)v30 + 4) >= v32[4])
              break;
            v32 = (uint64_t *)*v32;
            v34 = v33;
            if (!*v33)
              goto LABEL_45;
          }
          v32 = (uint64_t *)v32[1];
        }
        while (v32);
        v34 = v33 + 1;
      }
LABEL_45:
      std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at((uint64_t **)(a1 + 144), (uint64_t)v33, v34, (uint64_t *)v30);
      v35 = (_QWORD *)v13[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v13[2];
          v26 = *v36 == (_QWORD)v13;
          v13 = v36;
        }
        while (!v26);
      }
      v13 = v36;
    }
    while (v36 != v12);
  }
LABEL_51:

  return a1;
}

void sub_18893DAD4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(v3, *(_QWORD **)(v2 + 152));

  _Unwind_Resume(a1);
}

void GEOPathMatcherRoadNetwork::get_road(GEOPathMatcherRoadNetwork *this@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X8>)
{
  _QWORD *v4;
  double *v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  double v10;
  double v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  NSObject *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*((_QWORD *)this + 19);
  if (!v4)
    goto LABEL_11;
  v6 = (double *)((char *)this + 152);
  do
  {
    v7 = v4[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (!v8)
      v6 = (double *)v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == (double *)((char *)this + 152) || *((_QWORD *)v6 + 4) > a2)
  {
LABEL_11:
    a3->i64[0] = 0;
    a3->i64[1] = 0;
    a3[1] = vdupq_n_s64(0xC066800000000000);
    a3[2].i8[0] = 0;
    return;
  }
  v10 = v6[5];
  v11 = v6[6];
  objc_msgSend(*((id *)this + 16), "findRoadWithMuid:nearCoordinate:", a2, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v12)
  {
    if ((unint64_t)objc_msgSend(v12, "coordinateCount") >= 2)
    {
      v14 = objc_msgSend(v13, "roadID");
      if (a2)
        v15 = 0;
      else
        v15 = v14;
      a3->i64[0] = a2;
      a3->i64[1] = v15;
      v16 = 1;
      goto LABEL_22;
    }
    GEOGetGEOPathMatcherLog();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v13, "coordinatesDescription");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138478083;
      v20 = v13;
      v21 = 2113;
      v22 = v18;
      _os_log_impl(&dword_1885A9000, v17, OS_LOG_TYPE_ERROR, "Found a road that has fewer than 2 points. Not reporting this road to the path-codec library. %{private}@ | %{private}@", (uint8_t *)&v19, 0x16u);

    }
  }
  v16 = 0;
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  v10 = -180.0;
  v11 = -180.0;
LABEL_22:
  *(double *)a3[1].i64 = v10;
  *(double *)&a3[1].i64[1] = v11;
  a3[2].i8[0] = v16;

}

void sub_18893DC9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id GEOGetGEOPathMatcherLog(void)
{
  if (qword_1ECDBB9C8 != -1)
    dispatch_once(&qword_1ECDBB9C8, &__block_literal_global_15);
  return (id)_MergedGlobals_185;
}

{
  if (qword_1ECDBBA08 != -1)
    dispatch_once(&qword_1ECDBBA08, &__block_literal_global_19);
  return (id)_MergedGlobals_188;
}

{
  if (qword_1ECDBBD50 != -1)
    dispatch_once(&qword_1ECDBBD50, &__block_literal_global_64);
  return (id)_MergedGlobals_220;
}

{
  if (qword_1ECDBC2C0 != -1)
    dispatch_once(&qword_1ECDBC2C0, &__block_literal_global_123);
  return (id)_MergedGlobals_263;
}

double GEOPathMatcherRoadNetwork::flip_orientation@<D0>(GEOPathMatcherRoadNetwork *this@<X0>, const GEOPathMatcherRoadKey *a2@<X1>, _OWORD *a3@<X8>)
{
  void *v3;
  __int128 v4;
  double result;
  _OWORD v6[2];

  v3 = (void *)*((_QWORD *)this + 16);
  v4 = *(_OWORD *)&a2->var2;
  v6[0] = *(_OWORD *)&a2->var0;
  v6[1] = v4;
  if (v3)
  {
    objc_msgSend(v3, "flippedRoad:", v6);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t GEOPathMatcherRoadNetwork::get_map_road_id(GEOPathMatcherRoadNetwork *this, const GEOPathMatcherRoadKey *a2)
{
  return 0;
}

void GEOPathMatcherRoadNetwork::find_roads(uint64_t a1, _DWORD *a2, int a3, void **a4, double a5)
{
  long double v9;
  double v10;
  long double v11;
  long double v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[32];
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  LODWORD(a5) = a2[1];
  v9 = (double)*(unint64_t *)&a5 * -6.28318531 / 4294967300.0 + 3.14159265;
  v10 = exp(v9);
  v11 = exp(-v9);
  v12 = atan((v10 - v11) * 0.5);
  HIDWORD(v13) = 1078765020;
  LODWORD(v13) = *a2;
  objc_msgSend(*(id *)(a1 + 128), "findRoadsNearCoordinate:radius:", (double)(v12 * 57.2957795), (double)v13 * 360.0 / 4294967300.0 + -180.0, (double)a3 / 100.0);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  a4[1] = *a4;
  std::vector<GEOPathMatcherRoadKey>::reserve(a4, objc_msgSend(v37, "count"));
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v14 = v37;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
  if (v15)
  {
    v16 = *(_QWORD *)v39;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v39 != v16)
          objc_enumerationMutation(v14);
        v18 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
        if ((unint64_t)objc_msgSend(v18, "coordinateCount") < 2)
        {
          GEOGetGEOPathMatcherLog();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v18, "coordinatesDescription");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138478083;
            *(_QWORD *)&buf[4] = v18;
            *(_WORD *)&buf[12] = 2113;
            *(_QWORD *)&buf[14] = v21;
            _os_log_impl(&dword_1885A9000, v20, OS_LOG_TYPE_ERROR, "Found a road that has fewer than 2 points. Not reporting this road to the path-codec library. %{private}@ | %{private}@", buf, 0x16u);

          }
        }
        else
        {
          v19 = *(void **)(a1 + 128);
          if (v19)
            objc_msgSend(v19, "keyForRoad:", v18);
          else
            memset(buf, 0, sizeof(buf));
          v22 = (char *)a4[1];
          v23 = (unint64_t)a4[2];
          if ((unint64_t)v22 >= v23)
          {
            v26 = (v22 - (_BYTE *)*a4) >> 5;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 59)
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v28 = v23 - (_QWORD)*a4;
            if (v28 >> 4 > v27)
              v27 = v28 >> 4;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0)
              v29 = 0x7FFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
              v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(a4 + 2), v29);
            else
              v30 = 0;
            v31 = &v30[32 * v26];
            v32 = *(_OWORD *)&buf[16];
            *(_OWORD *)v31 = *(_OWORD *)buf;
            *((_OWORD *)v31 + 1) = v32;
            v34 = (char *)*a4;
            v33 = (char *)a4[1];
            v35 = v31;
            if (v33 != *a4)
            {
              do
              {
                v36 = *((_OWORD *)v33 - 1);
                *((_OWORD *)v35 - 2) = *((_OWORD *)v33 - 2);
                *((_OWORD *)v35 - 1) = v36;
                v35 -= 32;
                v33 -= 32;
              }
              while (v33 != v34);
              v33 = (char *)*a4;
            }
            v25 = v31 + 32;
            *a4 = v35;
            a4[1] = v31 + 32;
            a4[2] = &v30[32 * v29];
            if (v33)
              operator delete(v33);
          }
          else
          {
            v24 = *(_OWORD *)&buf[16];
            *(_OWORD *)v22 = *(_OWORD *)buf;
            *((_OWORD *)v22 + 1) = v24;
            v25 = v22 + 32;
          }
          a4[1] = v25;
        }
      }
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
    }
    while (v15);
  }

}

void sub_18893E09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::vector<GEOPathMatcherRoadKey>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void GEOPathMatcherRoadNetwork::get_road_properties(GEOPathMatcherRoadNetwork *this@<X0>, GEOPathMatcherRoadKey *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  GEOPathMatcherRoadNetwork *v6;
  void *v7;
  __int128 v8;
  void *v9;
  void *v10;
  int v11;
  BOOL v12;
  NSObject *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  unint64_t i;
  maps::path_codec::Coordinate *v18;
  unint64_t v19;
  GEOPathMatcherRoadNetwork *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  _DWORD *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  int v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  char *v38;
  __int16 v39;
  __int16 v40;
  double v41;
  double v42;
  double v43;
  BOOL v44;
  unsigned int v45;
  int v46;
  char v47;
  void *v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[3];
  void *__p[3];
  void *v54;
  unint64_t *v55;
  _QWORD v56[11];
  char v57;
  uint64_t v58;
  _OWORD v59[2];
  _BYTE v60[12];
  __int16 v61;
  void *v62;
  char v63;
  uint8_t buf[4];
  _BYTE *v65;
  uint64_t v66;

  v6 = this;
  v66 = *MEMORY[0x1E0C80C00];
  v7 = (void *)*((_QWORD *)this + 16);
  v8 = *(_OWORD *)&a2->var2;
  v59[0] = *(_OWORD *)&a2->var0;
  v59[1] = v8;
  objc_msgSend(v7, "roadForKey:", v59);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v11 = *((_DWORD *)v6 + 34);
    if (v11 == 3)
    {
      v16 = objc_msgSend(v9, "bikeableSide");
    }
    else if (v11 == 2)
    {
      v16 = objc_msgSend(v9, "walkableSide");
    }
    else
    {
      if (v11)
        goto LABEL_24;
      if (objc_msgSend(v9, "isDrivable") && (objc_msgSend(v10, "isValidTravelDirection") & 1) != 0)
      {
        v12 = 1;
LABEL_27:
        v47 = v12;
        goto LABEL_28;
      }
      if ((objc_msgSend(v10, "isDrivable") & 1) != 0)
      {
LABEL_24:
        v47 = 0;
LABEL_28:
        v54 = 0;
        v55 = 0;
        v56[0] = 0;
        if (!a3)
          goto LABEL_55;
        for (i = 0; i < objc_msgSend(v10, "coordinateCount"); ++i)
        {
          v18 = (maps::path_codec::Coordinate *)objc_msgSend(v10, "coordinates3d");
          v19 = maps::path_codec::Coordinate::from_lat_lon(v18, *((double *)v18 + 3 * i), *((double *)v18 + 3 * i + 1));
          v21 = v19;
          v6 = v20;
          v22 = v55;
          if ((unint64_t)v55 >= v56[0])
          {
            v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (_BYTE *)v54) >> 2);
            v25 = v24 + 1;
            if (v24 + 1 > 0x1555555555555555)
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v56[0] - (_QWORD)v54) >> 2) > v25)
              v25 = 0x5555555555555556 * ((uint64_t)(v56[0] - (_QWORD)v54) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56[0] - (_QWORD)v54) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v26 = 0x1555555555555555;
            else
              v26 = v25;
            if (v26)
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::GeoCoordinates>>((uint64_t)v56, v26);
            else
              v27 = 0;
            v28 = &v27[4 * (((char *)v55 - (_BYTE *)v54) >> 2)];
            *(_QWORD *)v28 = v21;
            *((_DWORD *)v28 + 2) = (_DWORD)v6;
            v30 = v54;
            v29 = v55;
            v31 = &v27[12 * v24];
            if (v55 != v54)
            {
              do
              {
                v32 = *(_QWORD *)(v29 - 3);
                v29 -= 3;
                v33 = v29[2];
                *(_QWORD *)(v31 - 12) = v32;
                v31 -= 12;
                *((_DWORD *)v31 + 2) = v33;
              }
              while (v29 != v30);
              v29 = v54;
            }
            v23 = (unint64_t *)(v28 + 12);
            v54 = v31;
            v55 = (unint64_t *)(v28 + 12);
            v56[0] = &v27[12 * v26];
            if (v29)
              operator delete(v29);
          }
          else
          {
            *v55 = v19;
            *((_DWORD *)v22 + 2) = (_DWORD)v20;
            v23 = (unint64_t *)((char *)v22 + 12);
          }
          v55 = v23;
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (_BYTE *)v54) >> 2) < 2)
        {
          GEOGetGEOPathMatcherLog();
          v34 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
          {
            objc_msgSend(v10, "coordinatesDescription");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v60 = 138478083;
            *(_QWORD *)&v60[4] = v10;
            v61 = 2113;
            v62 = v35;
            _os_log_impl(&dword_1885A9000, v34, OS_LOG_TYPE_FAULT, "Returning a road to path-codec that has fewer than 2 points. This will cause a crash. %{private}@ | %{private}@", v60, 0x16u);

          }
          memset(v52, 0, sizeof(v52));
          std::string::basic_string[abi:ne180100]<0>(v60, "");
          maps::path_codec::RoadProperties::RoadProperties(a4, 0, 0, 0, (uint64_t)v52, 0, (__int128 *)v60);
          if (v63 < 0)
            operator delete(*(void **)v60);
          v36 = (void *)v52[0];
          if (!v52[0])
            goto LABEL_71;
        }
        else
        {
LABEL_55:
          objc_msgSend(v10, "internalRoadName");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          if (v37)
          {
            objc_msgSend(v10, "internalRoadName");
            v6 = (GEOPathMatcherRoadNetwork *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v38 = (char *)-[GEOPathMatcherRoadNetwork cStringUsingEncoding:](v6, "cStringUsingEncoding:", 4);
          }
          else
          {
            v38 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(v60, v38);
          if (v37)

          v39 = objc_msgSend(v10, "roadClass");
          v40 = objc_msgSend(v10, "formOfWay");
          objc_msgSend(v10, "length");
          v42 = v41;
          v49 = 0;
          v50 = 0;
          v51 = 0;
          std::vector<maps::path_codec::Coordinate>::__init_with_size[abi:ne180100]<maps::path_codec::Coordinate*,maps::path_codec::Coordinate*>(&v49, v54, (uint64_t)v55, 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (_BYTE *)v54) >> 2));
          v43 = v42 * 100.0;
          v44 = v42 * 100.0 >= -2147483650.0 && v43 < 2147483650.0;
          v45 = llround(v43);
          if (v44)
            v46 = v45;
          else
            v46 = 0x7FFFFFFF;
          maps::path_codec::RoadProperties::RoadProperties(a4, v39, v40, v46, (uint64_t)&v49, v47, (__int128 *)v60);
          if (v49)
          {
            v50 = v49;
            operator delete(v49);
          }
          if ((v63 & 0x80000000) == 0)
            goto LABEL_71;
          v36 = *(void **)v60;
        }
        operator delete(v36);
LABEL_71:
        if (v54)
        {
          v55 = (unint64_t *)v54;
          operator delete(v54);
        }
        goto LABEL_73;
      }
      v16 = objc_msgSend(v10, "walkableSide");
    }
    v12 = v16 != 0;
    goto LABEL_27;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v54);
  operator<<(v56, a2);
  GEOGetGEOPathMatcherLog();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    std::stringbuf::str();
    v14 = v63 >= 0 ? v60 : *(_BYTE **)v60;
    *(_DWORD *)buf = 136380675;
    v65 = v14;
    _os_log_impl(&dword_1885A9000, v13, OS_LOG_TYPE_ERROR, "Unable to find road for key: %{private}s", buf, 0xCu);
    if (v63 < 0)
      operator delete(*(void **)v60);
  }

  memset(__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100]<0>(v60, "");
  maps::path_codec::RoadProperties::RoadProperties(a4, 0, 0, 0, (uint64_t)__p, 0, (__int128 *)v60);
  if (v63 < 0)
    operator delete(*(void **)v60);
  if (__p[0])
    operator delete(__p[0]);
  v54 = (void *)*MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(void **)((char *)&v54 + *((_QWORD *)v54 - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
  v56[0] = v15;
  v56[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v57 < 0)
    operator delete((void *)v56[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18D764310](&v58);
LABEL_73:

}

void sub_18893E734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;
  void *v22;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *operator<<(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;

  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) |= 4u;
  if (*a2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"muid: ", 6);
    std::ostream::operator<<();
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"roadID: ", 8);
    std::ostream::operator<<();
  }
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
  *(_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 16) = 6;
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", ", 2);
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) &= ~4u;
  return a1;
}

uint64_t GEOPathMatcherRoadNetwork::road_lengths_respect_elevation(GEOPathMatcherRoadNetwork *this)
{
  return 0;
}

void GEOPathMatcherRoadNetwork::get_outgoing_roads(uint64_t a1, _OWORD *a2, void **a3)
{
  void *v5;
  __int128 v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  char *v15;
  unint64_t v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  uint8_t buf[32];
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = *(void **)(a1 + 128);
  v6 = a2[1];
  v35[0] = *a2;
  v35[1] = v6;
  objc_msgSend(v5, "findOutgoingRoadsFrom:", v35);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  a3[1] = *a3;
  std::vector<GEOPathMatcherRoadKey>::reserve(a3, objc_msgSend(v30, "count"));
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v7 = v30;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v32 != v9)
          objc_enumerationMutation(v7);
        v11 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
        if ((unint64_t)objc_msgSend(v11, "coordinateCount") < 2)
        {
          GEOGetGEOPathMatcherLog();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v11, "coordinatesDescription");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138478083;
            *(_QWORD *)&buf[4] = v11;
            *(_WORD *)&buf[12] = 2113;
            *(_QWORD *)&buf[14] = v14;
            _os_log_impl(&dword_1885A9000, v13, OS_LOG_TYPE_ERROR, "Found a road that has fewer than 2 points. Not reporting this road to the path-codec library. %{private}@ | %{private}@", buf, 0x16u);

          }
        }
        else
        {
          v12 = *(void **)(a1 + 128);
          if (v12)
            objc_msgSend(v12, "keyForRoad:", v11);
          else
            memset(buf, 0, sizeof(buf));
          v15 = (char *)a3[1];
          v16 = (unint64_t)a3[2];
          if ((unint64_t)v15 >= v16)
          {
            v19 = (v15 - (_BYTE *)*a3) >> 5;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 59)
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v21 = v16 - (_QWORD)*a3;
            if (v21 >> 4 > v20)
              v20 = v21 >> 4;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0)
              v22 = 0x7FFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
              v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(a3 + 2), v22);
            else
              v23 = 0;
            v24 = &v23[32 * v19];
            v25 = *(_OWORD *)&buf[16];
            *(_OWORD *)v24 = *(_OWORD *)buf;
            *((_OWORD *)v24 + 1) = v25;
            v27 = (char *)*a3;
            v26 = (char *)a3[1];
            v28 = v24;
            if (v26 != *a3)
            {
              do
              {
                v29 = *((_OWORD *)v26 - 1);
                *((_OWORD *)v28 - 2) = *((_OWORD *)v26 - 2);
                *((_OWORD *)v28 - 1) = v29;
                v28 -= 32;
                v26 -= 32;
              }
              while (v26 != v27);
              v26 = (char *)*a3;
            }
            v18 = v24 + 32;
            *a3 = v28;
            a3[1] = v24 + 32;
            a3[2] = &v23[32 * v22];
            if (v26)
              operator delete(v26);
          }
          else
          {
            v17 = *(_OWORD *)&buf[16];
            *(_OWORD *)v15 = *(_OWORD *)buf;
            *((_OWORD *)v15 + 1) = v17;
            v18 = v15 + 32;
          }
          a3[1] = v18;
        }
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
    }
    while (v8);
  }

}

void sub_18893EBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey>::get_from_junction_bearing(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v9;
  void *v10[3];
  unsigned __int16 v11;
  void *__p;
  char v13;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(&v9);
  v7 = v11;
  if (v11 >= 0x168u)
  {
    v7 = maps::path_codec::compute_angle_of_contact_degrees((uint64_t *)v10, 1, a1 + 8, v2, v3, v4, v5, v6);
    v11 = v7;
  }
  if (v13 < 0)
    operator delete(__p);
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  return v7;
}

uint64_t maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey>::get_to_junction_bearing(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v9;
  void *v10[3];
  unsigned __int16 v11;
  void *__p;
  char v13;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(&v9);
  v7 = v11;
  if (v11 >= 0x168u)
  {
    v7 = maps::path_codec::compute_angle_of_contact_degrees((uint64_t *)v10, 0, a1 + 8, v2, v3, v4, v5, v6);
    v11 = v7;
  }
  if (v13 < 0)
    operator delete(__p);
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  return v7;
}

void maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey>::get_navigable_outgoing_roads(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  int v8;
  _OWORD *v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  void *__p;
  char v17;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v5 = (_OWORD *)*a3;
  v6 = (_OWORD *)a3[1];
  if ((_OWORD *)*a3 == v6)
    goto LABEL_21;
  v7 = (_OWORD *)a3[1];
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _OWORD *, _QWORD))(*(_QWORD *)a1 + 32))(&v12, a1, v5, 0);
    v8 = v15;
    if (v17 < 0)
      operator delete(__p);
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
    if (!v8)
      break;
    v5 += 2;
    if (v5 == v6)
      goto LABEL_22;
  }
  if (v5 != v6)
  {
    v9 = v5 + 2;
    if (v5 + 2 != v6)
    {
      v7 = v5;
      do
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _OWORD *, _QWORD))(*(_QWORD *)a1 + 32))(&v12, a1, v9, 0);
        v10 = v15;
        if (v17 < 0)
          operator delete(__p);
        if (v13)
        {
          v14 = v13;
          operator delete(v13);
        }
        if (v10)
        {
          v11 = v9[1];
          *v7 = *v9;
          v7[1] = v11;
          v7 += 2;
        }
        v9 += 2;
      }
      while (v9 != v6);
      goto LABEL_22;
    }
LABEL_21:
    v7 = v5;
  }
LABEL_22:
  if ((_OWORD *)a3[1] != v7)
    a3[1] = v7;
}

void ___ZL23GEOGetGEOPathMatcherLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.GeoServices", "GEOPathMatcher");
  v1 = (void *)_MergedGlobals_185;
  _MergedGlobals_185 = (uint64_t)v0;

}

uint64_t maps::path_codec::RoadProperties::RoadProperties(uint64_t a1, __int16 a2, __int16 a3, int a4, uint64_t a5, char a6, __int128 *a7)
{
  std::string *v8;
  __int128 v9;

  *(_WORD *)a1 = a2;
  *(_WORD *)(a1 + 2) = a3;
  *(_DWORD *)(a1 + 4) = a4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a5;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 23593320;
  *(_BYTE *)(a1 + 36) = a6;
  v8 = (std::string *)(a1 + 40);
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
  }
  else
  {
    v9 = *a7;
    v8->__r_.__value_.__r.__words[2] = *((_QWORD *)a7 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_18893EF48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t maps::path_codec::compute_angle_of_contact_degrees(uint64_t *a1, int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  double v26;
  double v27;
  int v28;
  double v29;
  int v30;
  unsigned __int16 v31;
  double v32;
  double v33;
  unint64_t v34;
  double v35;
  unsigned __int16 v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  unint64_t v53;
  double v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  unint64_t v71;
  uint64_t v73;
  int v74;
  double v75;
  int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  int v80;

  v8 = *a1;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  v10 = v9 - 2;
  if (v9 < 2)
    return 0;
  v14 = v9 - 1;
  if (a2)
    v15 = 0;
  else
    v15 = v14;
  if (a2)
    v16 = 1;
  else
    v16 = v10;
  v17 = (_DWORD *)(v8 + 12 * v15);
  LODWORD(a4) = *v17;
  LODWORD(a5) = v17[1];
  v18 = (double)*(unint64_t *)&a4;
  v19 = (double)*(unint64_t *)&a5;
  v20 = v17[2];
  HIDWORD(v21) = 1079574528;
  v22 = (double)*(int *)(a3 + 88) / 100.0;
  if (a2)
    v23 = 1;
  else
    v23 = -1;
  v24 = (_DWORD *)(v8 + 12 * v16);
  do
  {
    v25 = v16;
    LODWORD(v21) = *v24;
    LODWORD(a8) = v24[1];
    v26 = (v18 - (double)*(unint64_t *)&v21) / 100.0;
    v27 = (v19 - (double)*(unint64_t *)&a8) / 100.0;
    if (v20 == 0x7FFFFFFF || (v28 = v24[2], v28 == 0x7FFFFFFF))
    {
      a8 = v27 * v27;
      v29 = a8 + v26 * v26;
    }
    else
    {
      v30 = v20 - v28;
      if (v30 < 0)
        v30 = -v30;
      a8 = v27 * v27;
      v29 = a8 + v26 * v26 + (double)v30 / 100.0 * ((double)v30 / 100.0);
    }
    v16 += v23;
    v24 += 3 * v23;
    if (!v25)
      break;
    if (v14 == v25)
      break;
    v21 = sqrt(v29);
  }
  while (v21 < v22);
  v31 = maps::path_codec::compute_bearing(v17, &v24[-3 * v23], v18, v19, v22);
  v35 = NAN;
  v79 = -1;
  v80 = 0x7FFFFFFF;
  if (v25)
  {
    v36 = v31;
    v35 = (double)*(int *)(a3 + 92);
    v32 = 100.0;
    v37 = v25;
    v38 = v35 / 100.0;
    v39 = -v23;
    v40 = v25;
    v41 = v25;
    v42 = v31;
    while (1)
    {
      v43 = *a1;
      if (v39 + v16 == -1 - 0x5555555555555555 * ((a1[1] - *a1) >> 2))
        return maps::path_codec::compute_bearing((_DWORD *)(*a1 + 12 * v15), (_DWORD *)(*a1 + 12 * v37), v35, v32, v33);
      v44 = (_DWORD *)(v43 + 12 * v15);
      v45 = (_DWORD *)(v43 + 12 * v16);
      v46 = (_DWORD *)(v43 + 12 * v40);
      LODWORD(v35) = *v44;
      LODWORD(v33) = v44[1];
      v47 = (double)*(unint64_t *)&v35;
      v48 = (double)*(unint64_t *)&v33;
      LODWORD(v33) = *v45;
      LODWORD(v34) = v45[1];
      v49 = (double)*(unint64_t *)&v33 - v47;
      v50 = (double)v34 - v48;
      v51 = v50 * v50 + v49 * v49;
      v52 = fabs(v51);
      HIDWORD(v53) = 1018167296;
      if (v51 == 0.0 || v52 < 2.22044605e-16)
        break;
      LODWORD(v52) = *v46;
      LODWORD(v53) = *(_DWORD *)(v43 + 12 * v40 + 4);
      v55 = (v50 * ((double)v53 - v48) + ((double)*(unint64_t *)&v52 - v47) * v49) / v51;
      if (v55 <= 0.0)
      {
        v58 = *(_QWORD *)v44;
        v59 = v44[2];
        goto LABEL_36;
      }
      if (v55 >= 1.0)
        break;
      v48 = v48 + v55 * v50;
      LODWORD(v79) = llround(v47 + v55 * v49);
      HIDWORD(v79) = llround(v48);
      v56 = *(_DWORD *)(v43 + 12 * v15 + 8);
      if (v56 != 0x7FFFFFFF)
      {
        v57 = *(_DWORD *)(v43 + 12 * v16 + 8);
        if (v57 != 0x7FFFFFFF)
        {
          v48 = (double)v56 + v55 * (double)(v57 - v56);
          v80 = (int)v48;
        }
      }
LABEL_37:
      maps::path_codec::great_circle_distance_in_m((uint64_t)v46, (unsigned int *)&v79, v48);
      if (v35 >= v38)
      {
        v37 = v16 - v23;
        return maps::path_codec::compute_bearing((_DWORD *)(*a1 + 12 * v15), (_DWORD *)(*a1 + 12 * v37), v35, v32, v33);
      }
      v61 = *a1;
      v62 = (_DWORD *)(*a1 + 12 * v15);
      v63 = (_DWORD *)(*a1 + 12 * v16);
      v64 = (_DWORD *)(*a1 + 12 * v41);
      LODWORD(v35) = *v62;
      LODWORD(v33) = v62[1];
      v65 = (double)*(unint64_t *)&v35;
      v66 = (double)*(unint64_t *)&v33;
      LODWORD(v33) = *v63;
      LODWORD(v60) = v63[1];
      v67 = (double)*(unint64_t *)&v33 - v65;
      v68 = (double)v60 - v66;
      v69 = v68 * v68 + v67 * v67;
      v70 = fabs(v69);
      HIDWORD(v71) = 1018167296;
      if (v69 != 0.0 && v70 >= 2.22044605e-16)
      {
        LODWORD(v70) = *v64;
        LODWORD(v71) = *(_DWORD *)(v61 + 12 * v41 + 4);
        v75 = (v68 * ((double)v71 - v66) + ((double)*(unint64_t *)&v70 - v65) * v67) / v69;
        if (v75 <= 0.0)
        {
          v73 = *(_QWORD *)v62;
          v74 = v62[2];
          goto LABEL_50;
        }
        if (v75 < 1.0)
        {
          v66 = v66 + v75 * v68;
          LODWORD(v79) = llround(v65 + v75 * v67);
          HIDWORD(v79) = llround(v66);
          v76 = *(_DWORD *)(v61 + 12 * v15 + 8);
          if (v76 != 0x7FFFFFFF)
          {
            v77 = *(_DWORD *)(v61 + 12 * v16 + 8);
            if (v77 != 0x7FFFFFFF)
            {
              v66 = (double)v76 + v75 * (double)(v77 - v76);
              v80 = (int)v66;
            }
          }
          goto LABEL_51;
        }
      }
      v73 = *(_QWORD *)v63;
      v74 = v63[2];
LABEL_50:
      v80 = v74;
      v79 = v73;
LABEL_51:
      maps::path_codec::great_circle_distance_in_m((uint64_t)v64, (unsigned int *)&v79, v66);
      if (v35 >= v38)
        return maps::path_codec::compute_bearing((_DWORD *)(*a1 + 12 * v15), (_DWORD *)(*a1 + 12 * v37), v35, v32, v33);
      v37 += v23;
      v78 = (unsigned __int16)maps::path_codec::compute_bearing((_DWORD *)(*a1 + 12 * v15), (_DWORD *)(*a1 + 12 * v16), v35, v32, v33);
      if (v78 < v36)
      {
        v36 = v78;
        v40 = v16;
      }
      if (v78 > v42)
      {
        v42 = v78;
        v41 = v16;
      }
      v16 += v23;
      v39 = -v23;
      if (v16 == v23)
        goto LABEL_57;
    }
    v58 = *(_QWORD *)v45;
    v59 = v45[2];
LABEL_36:
    v80 = v59;
    v79 = v58;
    goto LABEL_37;
  }
LABEL_57:
  v37 = 0;
  return maps::path_codec::compute_bearing((_DWORD *)(*a1 + 12 * v15), (_DWORD *)(*a1 + 12 * v37), v35, v32, v33);
}

BOOL GEOTFCompactPredictedSpeedReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _BOOL8 v33;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v27 = 0;
          v28 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 2u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v20 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
            {
              v26 = &OBJC_IVAR___GEOTFCompactPredictedSpeed__speedKph;
              goto LABEL_40;
            }
            v27 += 7;
            v25 = v28++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEOTFCompactPredictedSpeed__speedKph;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOTFCompactPredictedSpeed__speedKph;
LABEL_39:
          v3[*v6] = 1;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_48;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEOTFCompactPredictedSpeed__deltaMinutesInFuture;
              goto LABEL_39;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEOTFCompactPredictedSpeed__deltaMinutesInFuture;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOTFCompactPredictedSpeed__deltaMinutesInFuture;
        }
LABEL_40:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_42:
        *(_DWORD *)(a1 + *v26) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_18893FA64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTFCompactRoadSpeedsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int v25;
  int v26;
  unint64_t v28;
  BOOL v29;
  int *v30;
  int v31;
  int v32;
  BOOL v33;
  int *v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  char v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  int v89;
  int v90;
  __int16 v91;
  void *v92;
  GEOTFCompactPredictedSpeed *v94;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int16 *)(a1 + 96) >> 7) & 1)
      + ((*(unsigned __int16 *)(a1 + 96) >> 9) & 1)
      + (HIBYTE(*(unsigned __int16 *)(a1 + 96)) & 1);
  while (1)
  {
    v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 | (v10 > 1);
  if (v9 & 1 | (v10 > 1) | v8 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
  {
LABEL_148:
    if ((v12 & 1) != 0)
    {
      v88 = 1;
      goto LABEL_150;
    }
    if (!v13)
      goto LABEL_163;
    while (1)
    {
      while (1)
      {
        v90 = *v13++;
        v89 = v90;
        if (v90 <= 4)
          break;
        if (v89 == 10)
        {
          v91 = 256;
LABEL_161:
          *(_WORD *)(a1 + 96) |= v91;
        }
        else if (v89 == 5)
        {
          v91 = 512;
          goto LABEL_161;
        }
      }
      if (v89 == 1)
      {
        v91 = 128;
        goto LABEL_161;
      }
      if (!v89)
        goto LABEL_163;
    }
  }
  v16 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(v3 + *v15))
      goto LABEL_148;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *v14;
      v21 = *(_QWORD *)(v3 + v20);
      v22 = v21 + 1;
      if (v21 == -1 || v22 > *(_QWORD *)(v3 + *v6))
        break;
      v23 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v21);
      *(_QWORD *)(v3 + v20) = v22;
      v19 |= (unint64_t)(v23 & 0x7F) << v17;
      if ((v23 & 0x80) == 0)
        goto LABEL_24;
      v17 += 7;
      v24 = v18++ >= 9;
      if (v24)
      {
        v19 = 0;
        v25 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_24:
    v25 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v19 = 0;
LABEL_26:
    v26 = v19 & 7;
    if (v25 || v26 == 4)
      goto LABEL_148;
    v28 = v19 >> 3;
    v29 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      v30 = v13;
      do
      {
        v32 = *v30++;
        v31 = v32;
        v29 = v32 != 0;
        if (v32)
          v33 = v31 == (_DWORD)v28;
        else
          v33 = 1;
      }
      while (!v33);
    }
    switch((int)v28)
    {
      case 1:
        if (!v29 || (*(_WORD *)(a1 + 96) & 0x80) != 0)
          goto LABEL_107;
        if (v26 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_168;
          while (1)
          {
            v34 = (int *)MEMORY[0x1E0D82BC8];
            if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            {
              PBReaderRecallMark();
              goto LABEL_145;
            }
            v35 = 0;
            v36 = 0;
            v37 = 0;
            while (1)
            {
              v38 = *v14;
              v39 = *(_QWORD *)(v3 + v38);
              v40 = v39 + 1;
              if (v39 == -1 || v40 > *(_QWORD *)(v3 + *v6))
                break;
              v41 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v39);
              *(_QWORD *)(v3 + v38) = v40;
              v37 |= (unint64_t)(v41 & 0x7F) << v35;
              if (v41 < 0)
              {
                v35 += 7;
                v24 = v36++ >= 9;
                if (!v24)
                  continue;
              }
              goto LABEL_52;
            }
            *(_BYTE *)(v3 + *v34) = 1;
LABEL_52:
            PBRepeatedInt64Add();
          }
        }
        v80 = 0;
        v81 = 0;
        v82 = 0;
        while (1)
        {
          v83 = *v14;
          v84 = *(_QWORD *)(v3 + v83);
          v85 = v84 + 1;
          if (v84 == -1 || v85 > *(_QWORD *)(v3 + *v6))
            break;
          v86 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v84);
          *(_QWORD *)(v3 + v83) = v85;
          v82 |= (unint64_t)(v86 & 0x7F) << v80;
          if (v86 < 0)
          {
            v80 += 7;
            v24 = v81++ >= 9;
            if (!v24)
              continue;
          }
          goto LABEL_144;
        }
        *(_BYTE *)(v3 + *v15) = 1;
LABEL_144:
        PBRepeatedInt64Add();
        goto LABEL_145;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_107;
        *(_WORD *)(a1 + 96) |= 0x20u;
        v43 = *v14;
        v44 = *(_QWORD *)(v3 + v43);
        if (v44 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v45 = *(_DWORD *)(*(_QWORD *)(v3 + *v16) + v44);
          *(_QWORD *)(v3 + v43) = v44 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v15) = 1;
          v45 = 0;
        }
        v87 = 88;
        goto LABEL_141;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_107;
        *(_WORD *)(a1 + 96) |= 8u;
        v46 = *v14;
        v47 = *(_QWORD *)(v3 + v46);
        if (v47 <= 0xFFFFFFFFFFFFFFFBLL && v47 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v45 = *(_DWORD *)(*(_QWORD *)(v3 + *v16) + v47);
          *(_QWORD *)(v3 + v46) = v47 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v15) = 1;
          v45 = 0;
        }
        v87 = 80;
        goto LABEL_141;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_107;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        *(_WORD *)(a1 + 96) |= 0x40u;
        while (2)
        {
          v51 = *v14;
          v52 = *(_QWORD *)(v3 + v51);
          v53 = v52 + 1;
          if (v52 == -1 || v53 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v52);
            *(_QWORD *)(v3 + v51) = v53;
            v50 |= (unint64_t)(v54 & 0x7F) << v48;
            if (v54 < 0)
            {
              v48 += 7;
              v24 = v49++ >= 9;
              if (v24)
              {
                v50 = 0;
                goto LABEL_112;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          v50 = 0;
LABEL_112:
        *(_BYTE *)(a1 + 92) = v50 != 0;
        goto LABEL_146;
      case 5:
        if (!v29 || (*(_WORD *)(a1 + 96) & 0x200) != 0)
          goto LABEL_107;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_168;
        v94 = objc_alloc_init(GEOTFCompactPredictedSpeed);
        if (GEOTFCompactPredictedSpeedReadAllFrom((uint64_t)v94, (void *)v3))
        {
          PBReaderRecallMark();
          -[GEOTFCompactRoadSpeeds _addNoFlagsPredictedSpeed:](a1, v94);

LABEL_145:
          v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_146:
          if (!(v12 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_148;
          continue;
        }

LABEL_168:
        v88 = 0;
        v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_150:
        *(_WORD *)(a1 + 96) |= 0x80u;
        *(_WORD *)(a1 + 96) |= 0x200u;
        *(_WORD *)(a1 + 96) |= 0x100u;
        if ((v88 & 1) != 0)
        {
LABEL_163:
          v3 = *(_BYTE *)(v3 + *v15) == 0;
          if ((v12 & 1) != 0)
            goto LABEL_164;
          return v3;
        }
        v3 = 0;
        if ((v12 & 1) == 0)
          return v3;
LABEL_164:
        v92 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_107;
        v55 = 0;
        v56 = 0;
        v57 = 0;
        *(_WORD *)(a1 + 96) |= 1u;
        while (2)
        {
          v58 = *v14;
          v59 = *(_QWORD *)(v3 + v58);
          v60 = v59 + 1;
          if (v59 == -1 || v60 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v61 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v59);
            *(_QWORD *)(v3 + v58) = v60;
            v57 |= (unint64_t)(v61 & 0x7F) << v55;
            if (v61 < 0)
            {
              v55 += 7;
              v24 = v56++ >= 9;
              if (v24)
              {
                LODWORD(v57) = 0;
                goto LABEL_116;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v57) = 0;
LABEL_116:
        v79 = 68;
        goto LABEL_125;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_107;
        v62 = 0;
        v63 = 0;
        v57 = 0;
        *(_WORD *)(a1 + 96) |= 0x10u;
        while (2)
        {
          v64 = *v14;
          v65 = *(_QWORD *)(v3 + v64);
          v66 = v65 + 1;
          if (v65 == -1 || v66 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v67 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v65);
            *(_QWORD *)(v3 + v64) = v66;
            v57 |= (unint64_t)(v67 & 0x7F) << v62;
            if (v67 < 0)
            {
              v62 += 7;
              v24 = v63++ >= 9;
              if (v24)
              {
                LODWORD(v57) = 0;
                goto LABEL_120;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v57) = 0;
LABEL_120:
        v79 = 84;
        goto LABEL_125;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_107;
        v68 = 0;
        v69 = 0;
        v57 = 0;
        *(_WORD *)(a1 + 96) |= 4u;
        while (2)
        {
          v70 = *v14;
          v71 = *(_QWORD *)(v3 + v70);
          v72 = v71 + 1;
          if (v71 == -1 || v72 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v73 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v71);
            *(_QWORD *)(v3 + v70) = v72;
            v57 |= (unint64_t)(v73 & 0x7F) << v68;
            if (v73 < 0)
            {
              v68 += 7;
              v24 = v69++ >= 9;
              if (v24)
              {
                LODWORD(v57) = 0;
                goto LABEL_124;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v57) = 0;
LABEL_124:
        v79 = 76;
LABEL_125:
        *(_DWORD *)(a1 + v79) = v57;
        goto LABEL_146;
      case 9:
        if ((v8 & 1) == 0)
          goto LABEL_107;
        *(_WORD *)(a1 + 96) |= 2u;
        v74 = *v14;
        v75 = *(_QWORD *)(v3 + v74);
        if (v75 <= 0xFFFFFFFFFFFFFFFBLL && v75 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v45 = *(_DWORD *)(*(_QWORD *)(v3 + *v16) + v75);
          *(_QWORD *)(v3 + v74) = v75 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v15) = 1;
          v45 = 0;
        }
        v87 = 72;
LABEL_141:
        *(_DWORD *)(a1 + v87) = v45;
        goto LABEL_146;
      case 10:
        if (!v29)
        {
LABEL_107:
          v78 = PBReaderSkipValueWithTag();
          v15 = (int *)MEMORY[0x1E0D82BC8];
          if ((v78 & 1) == 0)
          {
LABEL_166:
            v88 = 0;
            goto LABEL_150;
          }
          goto LABEL_146;
        }
        if ((*(_WORD *)(a1 + 96) & 0x100) == 0)
        {
          PBReaderReadData();
          v76 = objc_claimAutoreleasedReturnValue();
          v77 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v76;

          v15 = (int *)MEMORY[0x1E0D82BC8];
          --v7;
          goto LABEL_146;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_168;
        v7 += *(unsigned __int16 *)(a1 + 96) << 23 >> 31;
        goto LABEL_145;
      default:
        v42 = PBReaderSkipValueWithTag();
        v15 = (int *)MEMORY[0x1E0D82BC8];
        if (!v42)
          goto LABEL_166;
        goto LABEL_146;
    }
  }
}

void sub_1889408D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188940F08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188940FE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOTFCompactRoadSpeedsCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[128];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v1 = *(id *)(a1 + 48);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v5, v9, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v6;
    while (1)
    {
      if (*(_QWORD *)v6 != v4)
        objc_enumerationMutation(v1);
      if (!--v3)
      {
        v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v5, v9, 16);
        if (!v3)
          break;
      }
    }
  }

}

unint64_t GEOTFCompactRoadSpeedsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTFCompactRoadSpeedsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTFCompactRoadSpeedsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTFCompactRoadSpeedsReadAllFrom_initialTag;
  Specified = GEOTFCompactRoadSpeedsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTFCompactRoadSpeedsCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_188941250(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889415C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188941930(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTFIncidentReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  int *v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  char v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  char v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  char v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  void *v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  BOOL v175;
  uint64_t v176;
  int v177;
  char v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  int v188;
  int v189;
  int v190;
  void *v191;
  GEOTFInfo *v193;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 152));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 148);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 144));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11.i64[0] = 0x100000001;
  v11.i64[1] = 0x100000001;
  v12 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(*(_DWORD *)(a1 + 208)), (uint32x4_t)xmmword_189CC30E0), v11))+ (HIBYTE(*(_DWORD *)(a1 + 208)) & 1)+ ((*(_DWORD *)(a1 + 208) >> 29) & 1)+ ((*(_DWORD *)(a1 + 208) >> 27) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v13 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v15 = v10 | (v12 > 4);
        if (v10 & 1 | (v12 > 4) | v8 & 1)
          v16 = 0;
        else
          v16 = a3;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_347;
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_6:
        v13 = v9;
        v14 = v10;
LABEL_8:
        ++v7;
        v9 = v13;
        v10 = v14;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v18))
      goto LABEL_347;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    v29 = v22 & 7;
    if (v28 || v29 == 4)
    {
LABEL_347:
      if ((v15 & 1) != 0)
      {
        v187 = 1;
        goto LABEL_349;
      }
      if (!v16)
        goto LABEL_363;
      while (1)
      {
        v189 = *v16++;
        v188 = v189;
        v190 = 0x800000;
        switch(v189)
        {
          case 0:
            goto LABEL_363;
          case 1:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
            continue;
          case 2:
            goto LABEL_362;
          case 3:
            v190 = 0x4000000;
            goto LABEL_362;
          case 4:
            v190 = 0x2000000;
            goto LABEL_362;
          case 12:
            v190 = 0x10000000;
            goto LABEL_362;
          case 13:
            v190 = 0x1000000;
            goto LABEL_362;
          default:
            if (v188 == 30)
            {
              v190 = 0x20000000;
LABEL_362:
              *(_DWORD *)(a1 + 208) |= v190;
            }
            else if (v188 == 33)
            {
              v190 = 0x8000000;
              goto LABEL_362;
            }
            break;
        }
      }
    }
    v31 = v22 >> 3;
    v32 = v15;
    if (!((v16 == 0) | v15 & 1))
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_DWORD *)(a1 + 208) |= 0x20000u;
        while (2)
        {
          v40 = *v17;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v41);
            *(_QWORD *)(v3 + v40) = v42;
            v39 |= (unint64_t)(v43 & 0x7F) << v37;
            if (v43 < 0)
            {
              v37 += 7;
              v27 = v38++ >= 9;
              if (v27)
              {
                LODWORD(v39) = 0;
                goto LABEL_240;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_240:
        v173 = 196;
        goto LABEL_302;
      case 2:
        if (!v32 || (*(_BYTE *)(a1 + 210) & 0x80) != 0)
          goto LABEL_235;
        if (v29 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_368;
          while (1)
          {
            v44 = (int *)MEMORY[0x1E0D82BC8];
            if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
              break;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            while (1)
            {
              v48 = *v17;
              v49 = *(_QWORD *)(v3 + v48);
              v50 = v49 + 1;
              if (v49 == -1 || v50 > *(_QWORD *)(v3 + *v6))
                break;
              v51 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v49);
              *(_QWORD *)(v3 + v48) = v50;
              v47 |= (unint64_t)(v51 & 0x7F) << v45;
              if (v51 < 0)
              {
                v45 += 7;
                v27 = v46++ >= 9;
                if (!v27)
                  continue;
              }
              goto LABEL_59;
            }
            *(_BYTE *)(v3 + *v44) = 1;
LABEL_59:
            PBRepeatedInt64Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v178 = 0;
          v179 = 0;
          v180 = 0;
          while (1)
          {
            v181 = *v17;
            v182 = *(_QWORD *)(v3 + v181);
            v183 = v182 + 1;
            if (v182 == -1 || v183 > *(_QWORD *)(v3 + *v6))
              break;
            v184 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v182);
            *(_QWORD *)(v3 + v181) = v183;
            v180 |= (unint64_t)(v184 & 0x7F) << v178;
            if (v184 < 0)
            {
              v178 += 7;
              v27 = v179++ >= 9;
              if (!v27)
                continue;
            }
            goto LABEL_346;
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_346:
          PBRepeatedInt64Add();
        }
        goto LABEL_319;
      case 3:
        if (!v32 || (*(_BYTE *)(a1 + 211) & 4) != 0)
          goto LABEL_235;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_368;
        v193 = objc_alloc_init(GEOTFInfo);
        if (GEOTFInfoReadAllFrom((uint64_t)v193, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          -[GEOTFIncident _addNoFlagsInfo:](a1, v193);

LABEL_319:
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_341:
          if (!(v15 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_347;
          continue;
        }

LABEL_368:
        v187 = 0;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_349:
        *(_DWORD *)(a1 + 208) |= 0x800000u;
        *(_DWORD *)(a1 + 208) |= 0x4000000u;
        *(_DWORD *)(a1 + 208) |= 0x2000000u;
        *(_DWORD *)(a1 + 208) |= 0x10000000u;
        *(_DWORD *)(a1 + 208) |= 0x1000000u;
        *(_DWORD *)(a1 + 208) |= 0x20000000u;
        *(_DWORD *)(a1 + 208) |= 0x8000000u;
        if ((v187 & 1) != 0)
        {
LABEL_363:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_364;
          return v3;
        }
        v3 = 0;
        if ((v15 & 1) == 0)
          return v3;
LABEL_364:
        v191 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      case 4:
        if (!v32)
          goto LABEL_235;
        if ((*(_BYTE *)(a1 + 211) & 2) == 0)
        {
          PBReaderReadString();
          v52 = objc_claimAutoreleasedReturnValue();
          v53 = 64;
          goto LABEL_234;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_368;
        v177 = (int)(*(_DWORD *)(a1 + 208) << 6) >> 31;
        goto LABEL_318;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        *(_DWORD *)(a1 + 208) |= 4u;
        v54 = *v17;
        v55 = *(_QWORD *)(v3 + v54);
        if (v55 <= 0xFFFFFFFFFFFFFFF7 && v55 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v56 = *(_QWORD *)(*(_QWORD *)(v3 + *v19) + v55);
          *(_QWORD *)(v3 + v54) = v55 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v56 = 0;
        }
        v185 = 80;
        goto LABEL_335;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        *(_DWORD *)(a1 + 208) |= 8u;
        v57 = *v17;
        v58 = *(_QWORD *)(v3 + v57);
        if (v58 <= 0xFFFFFFFFFFFFFFF7 && v58 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v56 = *(_QWORD *)(*(_QWORD *)(v3 + *v19) + v58);
          *(_QWORD *)(v3 + v57) = v58 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v56 = 0;
        }
        v185 = 88;
        goto LABEL_335;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v60 = 0;
        v61 = 0;
        v62 = 0;
        *(_DWORD *)(a1 + 208) |= 0x20u;
        while (2)
        {
          v63 = *v17;
          v64 = *(_QWORD *)(v3 + v63);
          v65 = v64 + 1;
          if (v64 == -1 || v65 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v66 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v64);
            *(_QWORD *)(v3 + v63) = v65;
            v62 |= (unint64_t)(v66 & 0x7F) << v60;
            if (v66 < 0)
            {
              v60 += 7;
              v27 = v61++ >= 9;
              if (v27)
              {
                v62 = 0;
                goto LABEL_244;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v62 = 0;
LABEL_244:
        v174 = 112;
        goto LABEL_297;
      case 10:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v67 = 0;
        v68 = 0;
        v62 = 0;
        *(_DWORD *)(a1 + 208) |= 0x40u;
        while (2)
        {
          v69 = *v17;
          v70 = *(_QWORD *)(v3 + v69);
          v71 = v70 + 1;
          if (v70 == -1 || v71 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v72 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v70);
            *(_QWORD *)(v3 + v69) = v71;
            v62 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              v27 = v68++ >= 9;
              if (v27)
              {
                v62 = 0;
                goto LABEL_248;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v62 = 0;
LABEL_248:
        v174 = 128;
        goto LABEL_297;
      case 11:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v73 = 0;
        v74 = 0;
        v75 = 0;
        *(_DWORD *)(a1 + 208) |= 0x40000u;
        while (2)
        {
          v76 = *v17;
          v77 = *(_QWORD *)(v3 + v76);
          v78 = v77 + 1;
          if (v77 == -1 || v78 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v79 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v77);
            *(_QWORD *)(v3 + v76) = v78;
            v75 |= (unint64_t)(v79 & 0x7F) << v73;
            if (v79 < 0)
            {
              v73 += 7;
              v27 = v74++ >= 9;
              if (v27)
              {
                v75 = 0;
                goto LABEL_252;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v75 = 0;
LABEL_252:
        v175 = v75 != 0;
        v176 = 200;
        goto LABEL_307;
      case 12:
        if (!v32)
          goto LABEL_235;
        if ((*(_BYTE *)(a1 + 211) & 0x10) == 0)
        {
          PBReaderReadString();
          v52 = objc_claimAutoreleasedReturnValue();
          v53 = 120;
          goto LABEL_234;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_368;
        v177 = (8 * *(_DWORD *)(a1 + 208)) >> 31;
        goto LABEL_318;
      case 13:
        if (!v32)
          goto LABEL_235;
        if ((*(_BYTE *)(a1 + 211) & 1) == 0)
        {
          PBReaderReadString();
          v52 = objc_claimAutoreleasedReturnValue();
          v53 = 40;
          goto LABEL_234;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_368;
        v177 = (int)(*(_DWORD *)(a1 + 208) << 7) >> 31;
        goto LABEL_318;
      case 14:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v80 = 0;
        v81 = 0;
        v39 = 0;
        *(_DWORD *)(a1 + 208) |= 0x400u;
        while (2)
        {
          v82 = *v17;
          v83 = *(_QWORD *)(v3 + v82);
          v84 = v83 + 1;
          if (v83 == -1 || v84 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v85 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v83);
            *(_QWORD *)(v3 + v82) = v84;
            v39 |= (unint64_t)(v85 & 0x7F) << v80;
            if (v85 < 0)
            {
              v80 += 7;
              v27 = v81++ >= 9;
              if (v27)
              {
                LODWORD(v39) = 0;
                goto LABEL_256;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_256:
        v173 = 168;
        goto LABEL_302;
      case 16:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v86 = 0;
        v87 = 0;
        v88 = 0;
        *(_DWORD *)(a1 + 208) |= 0x80000u;
        while (2)
        {
          v89 = *v17;
          v90 = *(_QWORD *)(v3 + v89);
          v91 = v90 + 1;
          if (v90 == -1 || v91 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v92 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v90);
            *(_QWORD *)(v3 + v89) = v91;
            v88 |= (unint64_t)(v92 & 0x7F) << v86;
            if (v92 < 0)
            {
              v86 += 7;
              v27 = v87++ >= 9;
              if (v27)
              {
                v88 = 0;
                goto LABEL_260;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v88 = 0;
LABEL_260:
        v175 = v88 != 0;
        v176 = 201;
        goto LABEL_307;
      case 17:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v93 = 0;
        v94 = 0;
        v39 = 0;
        *(_DWORD *)(a1 + 208) |= 0x800u;
        while (2)
        {
          v95 = *v17;
          v96 = *(_QWORD *)(v3 + v95);
          v97 = v96 + 1;
          if (v96 == -1 || v97 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v98 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v96);
            *(_QWORD *)(v3 + v95) = v97;
            v39 |= (unint64_t)(v98 & 0x7F) << v93;
            if (v98 < 0)
            {
              v93 += 7;
              v27 = v94++ >= 9;
              if (v27)
              {
                LODWORD(v39) = 0;
                goto LABEL_264;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_264:
        v173 = 172;
        goto LABEL_302;
      case 18:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v99 = 0;
        v100 = 0;
        v101 = 0;
        *(_DWORD *)(a1 + 208) |= 0x100000u;
        while (2)
        {
          v102 = *v17;
          v103 = *(_QWORD *)(v3 + v102);
          v104 = v103 + 1;
          if (v103 == -1 || v104 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v105 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v103);
            *(_QWORD *)(v3 + v102) = v104;
            v101 |= (unint64_t)(v105 & 0x7F) << v99;
            if (v105 < 0)
            {
              v99 += 7;
              v27 = v100++ >= 9;
              if (v27)
              {
                v101 = 0;
                goto LABEL_268;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v101 = 0;
LABEL_268:
        v175 = v101 != 0;
        v176 = 202;
        goto LABEL_307;
      case 19:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        *(_DWORD *)(a1 + 208) |= 0x10u;
        v106 = *v17;
        v107 = *(_QWORD *)(v3 + v106);
        if (v107 <= 0xFFFFFFFFFFFFFFF7 && v107 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v56 = *(_QWORD *)(*(_QWORD *)(v3 + *v19) + v107);
          *(_QWORD *)(v3 + v106) = v107 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v56 = 0;
        }
        v185 = 104;
        goto LABEL_335;
      case 20:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        *(_DWORD *)(a1 + 208) |= 2u;
        v108 = *v17;
        v109 = *(_QWORD *)(v3 + v108);
        if (v109 <= 0xFFFFFFFFFFFFFFF7 && v109 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v56 = *(_QWORD *)(*(_QWORD *)(v3 + *v19) + v109);
          *(_QWORD *)(v3 + v108) = v109 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v56 = 0;
        }
        v185 = 56;
LABEL_335:
        *(_QWORD *)(a1 + v185) = v56;
        goto LABEL_341;
      case 21:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        *(_DWORD *)(a1 + 208) |= 0x200u;
        v110 = *v17;
        v111 = *(_QWORD *)(v3 + v110);
        if (v111 <= 0xFFFFFFFFFFFFFFFBLL && v111 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v112 = *(_DWORD *)(*(_QWORD *)(v3 + *v19) + v111);
          *(_QWORD *)(v3 + v110) = v111 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v112 = 0;
        }
        v186 = 164;
        goto LABEL_340;
      case 22:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v113 = 0;
        v114 = 0;
        v39 = 0;
        *(_DWORD *)(a1 + 208) |= 0x4000u;
        while (2)
        {
          v115 = *v17;
          v116 = *(_QWORD *)(v3 + v115);
          v117 = v116 + 1;
          if (v116 == -1 || v117 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v118 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v116);
            *(_QWORD *)(v3 + v115) = v117;
            v39 |= (unint64_t)(v118 & 0x7F) << v113;
            if (v118 < 0)
            {
              v113 += 7;
              v27 = v114++ >= 9;
              if (v27)
              {
                LODWORD(v39) = 0;
                goto LABEL_272;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_272:
        v173 = 184;
        goto LABEL_302;
      case 23:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v119 = 0;
        v120 = 0;
        v39 = 0;
        *(_DWORD *)(a1 + 208) |= 0x2000u;
        while (2)
        {
          v121 = *v17;
          v122 = *(_QWORD *)(v3 + v121);
          v123 = v122 + 1;
          if (v122 == -1 || v123 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v124 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v122);
            *(_QWORD *)(v3 + v121) = v123;
            v39 |= (unint64_t)(v124 & 0x7F) << v119;
            if (v124 < 0)
            {
              v119 += 7;
              v27 = v120++ >= 9;
              if (v27)
              {
                LODWORD(v39) = 0;
                goto LABEL_276;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_276:
        v173 = 180;
        goto LABEL_302;
      case 24:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v125 = 0;
        v126 = 0;
        v39 = 0;
        *(_DWORD *)(a1 + 208) |= 0x1000u;
        while (2)
        {
          v127 = *v17;
          v128 = *(_QWORD *)(v3 + v127);
          v129 = v128 + 1;
          if (v128 == -1 || v129 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v130 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v128);
            *(_QWORD *)(v3 + v127) = v129;
            v39 |= (unint64_t)(v130 & 0x7F) << v125;
            if (v130 < 0)
            {
              v125 += 7;
              v27 = v126++ >= 9;
              if (v27)
              {
                LODWORD(v39) = 0;
                goto LABEL_280;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_280:
        v173 = 176;
        goto LABEL_302;
      case 25:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        *(_DWORD *)(a1 + 208) |= 0x8000u;
        v131 = *v17;
        v132 = *(_QWORD *)(v3 + v131);
        if (v132 <= 0xFFFFFFFFFFFFFFFBLL && v132 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v112 = *(_DWORD *)(*(_QWORD *)(v3 + *v19) + v132);
          *(_QWORD *)(v3 + v131) = v132 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v112 = 0;
        }
        v186 = 188;
LABEL_340:
        *(_DWORD *)(a1 + v186) = v112;
        goto LABEL_341;
      case 26:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v133 = 0;
        v134 = 0;
        v135 = 0;
        *(_DWORD *)(a1 + 208) |= 0x200000u;
        while (2)
        {
          v136 = *v17;
          v137 = *(_QWORD *)(v3 + v136);
          v138 = v137 + 1;
          if (v137 == -1 || v138 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v139 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v137);
            *(_QWORD *)(v3 + v136) = v138;
            v135 |= (unint64_t)(v139 & 0x7F) << v133;
            if (v139 < 0)
            {
              v133 += 7;
              v27 = v134++ >= 9;
              if (v27)
              {
                v135 = 0;
                goto LABEL_284;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v135 = 0;
LABEL_284:
        v175 = v135 != 0;
        v176 = 203;
        goto LABEL_307;
      case 27:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v140 = 0;
        v141 = 0;
        v39 = 0;
        *(_DWORD *)(a1 + 208) |= 0x10000u;
        while (2)
        {
          v142 = *v17;
          v143 = *(_QWORD *)(v3 + v142);
          v144 = v143 + 1;
          if (v143 == -1 || v144 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v145 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v143);
            *(_QWORD *)(v3 + v142) = v144;
            v39 |= (unint64_t)(v145 & 0x7F) << v140;
            if (v145 < 0)
            {
              v140 += 7;
              v27 = v141++ >= 9;
              if (v27)
              {
                LODWORD(v39) = 0;
                goto LABEL_288;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_288:
        v173 = 192;
        goto LABEL_302;
      case 28:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v146 = 0;
        v147 = 0;
        v39 = 0;
        *(_DWORD *)(a1 + 208) |= 0x100u;
        while (2)
        {
          v148 = *v17;
          v149 = *(_QWORD *)(v3 + v148);
          v150 = v149 + 1;
          if (v149 == -1 || v150 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v151 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v149);
            *(_QWORD *)(v3 + v148) = v150;
            v39 |= (unint64_t)(v151 & 0x7F) << v146;
            if (v151 < 0)
            {
              v146 += 7;
              v27 = v147++ >= 9;
              if (v27)
              {
                LODWORD(v39) = 0;
                goto LABEL_292;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_292:
        v173 = 160;
        goto LABEL_302;
      case 29:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v152 = 0;
        v153 = 0;
        v62 = 0;
        *(_DWORD *)(a1 + 208) |= 1u;
        while (2)
        {
          v154 = *v17;
          v155 = *(_QWORD *)(v3 + v154);
          v156 = v155 + 1;
          if (v155 == -1 || v156 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v157 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v155);
            *(_QWORD *)(v3 + v154) = v156;
            v62 |= (unint64_t)(v157 & 0x7F) << v152;
            if (v157 < 0)
            {
              v152 += 7;
              v27 = v153++ >= 9;
              if (v27)
              {
                v62 = 0;
                goto LABEL_296;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v62 = 0;
LABEL_296:
        v174 = 48;
LABEL_297:
        *(_QWORD *)(a1 + v174) = v62;
        goto LABEL_341;
      case 30:
        if (!v32)
          goto LABEL_235;
        if ((*(_BYTE *)(a1 + 211) & 0x20) == 0)
        {
          PBReaderReadData();
          v52 = objc_claimAutoreleasedReturnValue();
          v53 = 136;
          goto LABEL_234;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_368;
        v177 = (4 * *(_DWORD *)(a1 + 208)) >> 31;
        goto LABEL_318;
      case 31:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v158 = 0;
        v159 = 0;
        v39 = 0;
        *(_DWORD *)(a1 + 208) |= 0x80u;
        while (2)
        {
          v160 = *v17;
          v161 = *(_QWORD *)(v3 + v160);
          v162 = v161 + 1;
          if (v161 == -1 || v162 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v163 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v161);
            *(_QWORD *)(v3 + v160) = v162;
            v39 |= (unint64_t)(v163 & 0x7F) << v158;
            if (v163 < 0)
            {
              v158 += 7;
              v27 = v159++ >= 9;
              if (v27)
              {
                LODWORD(v39) = 0;
                goto LABEL_301;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_301:
        v173 = 156;
LABEL_302:
        *(_DWORD *)(a1 + v173) = v39;
        goto LABEL_341;
      case 32:
        if ((v8 & 1) == 0)
          goto LABEL_235;
        v164 = 0;
        v165 = 0;
        v166 = 0;
        *(_DWORD *)(a1 + 208) |= 0x400000u;
        while (2)
        {
          v167 = *v17;
          v168 = *(_QWORD *)(v3 + v167);
          v169 = v168 + 1;
          if (v168 == -1 || v169 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v170 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v168);
            *(_QWORD *)(v3 + v167) = v169;
            v166 |= (unint64_t)(v170 & 0x7F) << v164;
            if (v170 < 0)
            {
              v164 += 7;
              v27 = v165++ >= 9;
              if (v27)
              {
                v166 = 0;
                goto LABEL_306;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v166 = 0;
LABEL_306:
        v175 = v166 != 0;
        v176 = 204;
LABEL_307:
        *(_BYTE *)(a1 + v176) = v175;
        goto LABEL_341;
      case 33:
        if (v32)
        {
          if ((*(_BYTE *)(a1 + 211) & 8) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_368;
            v177 = (16 * *(_DWORD *)(a1 + 208)) >> 31;
LABEL_318:
            v7 += v177;
          }
          else
          {
            PBReaderReadData();
            v52 = objc_claimAutoreleasedReturnValue();
            v53 = 96;
LABEL_234:
            v171 = *(void **)(a1 + v53);
            *(_QWORD *)(a1 + v53) = v52;

            --v7;
          }
          goto LABEL_319;
        }
LABEL_235:
        v172 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if ((v172 & 1) == 0)
        {
LABEL_366:
          v187 = 0;
          goto LABEL_349;
        }
        goto LABEL_341;
      default:
        v59 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (!v59)
          goto LABEL_366;
        goto LABEL_341;
    }
  }
}

void sub_188943784(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889445E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889446CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOTFIncidentCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 72);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        -[GEOTFInfo readAll:](*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * v5++), 1);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOTFIncidentReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 148))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTFIncidentReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 144) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 148) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTFIncidentReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTFIncidentReadAllFrom_initialTag;
  Specified = GEOTFIncidentReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTFIncidentCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 152));
  return Specified;
}

void sub_188944958(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188944F18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188945580(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTFInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  BOOL v15;
  int *v16;
  int *v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  int v38;
  char v39;
  char v40;
  char v41;
  int v42;
  int v43;
  char v44;
  void *v45;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v7 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1)
    v14 = 0;
  else
    v14 = a3;
  if (v12)
    v15 = 1;
  else
    v15 = v14 == 0;
  v16 = (int *)MEMORY[0x1E0D82BF0];
  v17 = (int *)MEMORY[0x1E0D82BC8];
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_62;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v16;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      if (v20++ >= 9)
      {
        v21 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_27:
    v27 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v21 = 0;
LABEL_29:
    if (v27 || (v21 & 7) == 4)
    {
LABEL_62:
      if (v13)
      {
        v41 = 1;
        goto LABEL_74;
      }
      if (!v14)
        goto LABEL_75;
      while (1)
      {
        v43 = *v14++;
        v42 = v43;
        if (v43 == 100)
          break;
        if (v42 == 101)
        {
          v44 = 1;
LABEL_71:
          *(_BYTE *)(a1 + 44) |= v44;
        }
        else if (!v42)
        {
          goto LABEL_75;
        }
      }
      v44 = 2;
      goto LABEL_71;
    }
    v29 = v21 >> 3;
    v30 = v13;
    if (!v15)
    {
      v31 = v14;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 != 101)
    {
      if ((_DWORD)v29 != 100)
      {
        v38 = PBReaderSkipValueWithTag();
        v17 = (int *)MEMORY[0x1E0D82BC8];
        if (!v38)
          goto LABEL_72;
        goto LABEL_58;
      }
      if (v30)
      {
        if ((*(_BYTE *)(a1 + 44) & 2) == 0)
        {
          PBReaderReadString();
          v35 = objc_claimAutoreleasedReturnValue();
          v36 = 24;
          goto LABEL_48;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_73;
        v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
LABEL_57:
        v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_58:
        if (v9)
          v40 = 1;
        else
          v40 = v13;
        if ((v40 & 1) == 0)
          goto LABEL_62;
        continue;
      }
LABEL_51:
      v39 = PBReaderSkipValueWithTag();
      v17 = (int *)MEMORY[0x1E0D82BC8];
      if ((v39 & 1) == 0)
      {
LABEL_72:
        v41 = 0;
        goto LABEL_74;
      }
      goto LABEL_58;
    }
    break;
  }
  if (!v30)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 44) & 1) == 0)
  {
    PBReaderReadString();
    v35 = objc_claimAutoreleasedReturnValue();
    v36 = 16;
LABEL_48:
    v37 = *(void **)(a1 + v36);
    *(_QWORD *)(a1 + v36) = v35;

    v17 = (int *)MEMORY[0x1E0D82BC8];
    --v9;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v9 -= *(_BYTE *)(a1 + 44) & 1;
    goto LABEL_57;
  }
LABEL_73:
  v41 = 0;
  v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_74:
  *(_BYTE *)(a1 + 44) |= 2u;
  *(_BYTE *)(a1 + 44) |= 1u;
  if ((v41 & 1) != 0)
  {
LABEL_75:
    v3 = *(_BYTE *)(v3 + *v17) == 0;
    if (v13)
      goto LABEL_76;
  }
  else
  {
    v3 = 0;
    if (v13)
    {
LABEL_76:
      v45 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

    }
  }
  return v3;
}

void sub_188946890(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188946958(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTFInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTFInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTFInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTFInfoReadAllFrom_initialTag;
  Specified = GEOTFInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_188946AE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188946C58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188946DB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTFPredictedSpeedReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _BOOL8 v33;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 3)
        {
          v27 = 0;
          v28 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 2u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v20 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
            {
              v26 = &OBJC_IVAR___GEOTFPredictedSpeed__speed;
              goto LABEL_40;
            }
            v27 += 7;
            v25 = v28++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEOTFPredictedSpeed__speed;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOTFPredictedSpeed__speed;
LABEL_39:
          v3[*v6] = 1;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_48;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEOTFPredictedSpeed__deltaMinutesInFuture;
              goto LABEL_39;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEOTFPredictedSpeed__deltaMinutesInFuture;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOTFPredictedSpeed__deltaMinutesInFuture;
        }
LABEL_40:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_42:
        *(_DWORD *)(a1 + *v26) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_188947388(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTFRoadSpeedReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int *v13;
  GEOTFPredictedSpeed *v14;
  int *v15;
  int *v16;
  int *v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int *v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  void *v95;
  char v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  int v110;
  __int16 v111;
  void *v112;
  int v114;
  char v115;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 124);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 120));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = (unsigned __int16)(vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 160)), (uint16x4_t)0xFFF7FFF8FFF5FFF4) & 0xFF01FF01FF01FF01))+ ((*(_WORD *)(a1 + 160) >> 7) & 1)+ ((*(_WORD *)(a1 + 160) >> 10) & 1));
  while (1)
  {
    v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 | (v10 > 3);
  if (((v12 | v8) & 1) != 0)
    v13 = 0;
  else
    v13 = a3;
  LODWORD(v14) = v12;
  v15 = (int *)MEMORY[0x1E0D82BF0];
  v16 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
  {
LABEL_194:
    if ((v14 & 1) != 0)
    {
      v109 = 1;
      goto LABEL_196;
    }
    if (v13)
    {
      while (1)
      {
        v110 = *v13++;
        v111 = 2048;
        switch(v110)
        {
          case 0:
            goto LABEL_207;
          case 6:
            goto LABEL_206;
          case 9:
            v111 = 4096;
            goto LABEL_206;
          case 12:
            v111 = 256;
            goto LABEL_206;
          case 13:
            v111 = 512;
            goto LABEL_206;
          case 14:
            v111 = 128;
            goto LABEL_206;
          case 15:
            v111 = 1024;
LABEL_206:
            *(_WORD *)(a1 + 160) |= v111;
            break;
          default:
            continue;
        }
      }
    }
    goto LABEL_207;
  }
  v115 = (v13 == 0) | v12;
  v17 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(v3 + *v16))
      goto LABEL_194;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v21 = *v15;
      v22 = *(_QWORD *)(v3 + v21);
      v23 = v22 + 1;
      if (v22 == -1 || v23 > *(_QWORD *)(v3 + *v6))
        break;
      v24 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v22);
      *(_QWORD *)(v3 + v21) = v23;
      v20 |= (unint64_t)(v24 & 0x7F) << v18;
      if ((v24 & 0x80) == 0)
        goto LABEL_24;
      v18 += 7;
      v25 = v19++ >= 9;
      if (v25)
      {
        v20 = 0;
        v26 = *v16;
        v27 = *(unsigned __int8 *)(v3 + v26);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v16) = 1;
LABEL_24:
    v26 = *v16;
    v27 = *(unsigned __int8 *)(v3 + v26);
    if (*(_BYTE *)(v3 + v26))
      v20 = 0;
LABEL_26:
    v28 = v20 & 7;
    if (v27 || v28 == 4)
      goto LABEL_194;
    v30 = v20 >> 3;
    v31 = (char)v14;
    if ((v115 & 1) == 0)
    {
      v32 = v13;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_141;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        while (1)
        {
          v39 = *v15;
          v40 = *(_QWORD *)(v3 + v39);
          v41 = v40 + 1;
          if (v40 == -1 || v41 > *(_QWORD *)(v3 + *v6))
            break;
          v42 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v40);
          *(_QWORD *)(v3 + v39) = v41;
          v38 |= (unint64_t)(v42 & 0x7F) << v36;
          if ((v42 & 0x80) == 0)
            goto LABEL_145;
          v36 += 7;
          v25 = v37++ >= 9;
          if (v25)
          {
            v38 = 0;
            goto LABEL_147;
          }
        }
        *(_BYTE *)(v3 + *v16) = 1;
LABEL_145:
        if (*(_BYTE *)(v3 + *v16))
          v38 = 0;
LABEL_147:
        *(_QWORD *)(a1 + 88) = -(v38 & 1) ^ (v38 >> 1);
        goto LABEL_192;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_141;
        *(_WORD *)(a1 + 160) |= 0x20u;
        v44 = *v15;
        v45 = *(_QWORD *)(v3 + v44);
        if (v45 <= 0xFFFFFFFFFFFFFFFBLL && v45 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v46 = *(_DWORD *)(*(_QWORD *)(v3 + *v17) + v45);
          *(_QWORD *)(v3 + v44) = v45 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v16) = 1;
          v46 = 0;
        }
        v99 = 152;
        goto LABEL_176;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_141;
        *(_WORD *)(a1 + 160) |= 8u;
        v47 = *v15;
        v48 = *(_QWORD *)(v3 + v47);
        if (v48 <= 0xFFFFFFFFFFFFFFFBLL && v48 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v46 = *(_DWORD *)(*(_QWORD *)(v3 + *v17) + v48);
          *(_QWORD *)(v3 + v47) = v48 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v16) = 1;
          v46 = 0;
        }
        v99 = 144;
        goto LABEL_176;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_141;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        *(_WORD *)(a1 + 160) |= 0x40u;
        while (2)
        {
          v52 = *v15;
          v53 = *(_QWORD *)(v3 + v52);
          v54 = v53 + 1;
          if (v53 == -1 || v54 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v16) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v53);
            *(_QWORD *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              v25 = v50++ >= 9;
              if (v25)
              {
                v51 = 0;
                goto LABEL_151;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v16))
          v51 = 0;
LABEL_151:
        *(_BYTE *)(a1 + 156) = v51 != 0;
        goto LABEL_192;
      case 6:
        if (!v31 || (*(_WORD *)(a1 + 160) & 0x800) != 0)
          goto LABEL_141;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_211;
        v114 = (int)v14;
        v14 = objc_alloc_init(GEOTFPredictedSpeed);
        if (GEOTFPredictedSpeedReadAllFrom((uint64_t)v14, (void *)v3))
        {
          PBReaderRecallMark();
          -[GEOTFRoadSpeed _addNoFlagsPredictedSpeed:](a1, v14);

          LODWORD(v14) = v114;
LABEL_191:
          v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_192:
          if (!(v14 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_194;
          continue;
        }

        v109 = 0;
        LOBYTE(v14) = v114;
LABEL_212:
        v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_196:
        *(_WORD *)(a1 + 160) |= 0x800u;
        *(_WORD *)(a1 + 160) |= 0x1000u;
        *(_WORD *)(a1 + 160) |= 0x100u;
        *(_WORD *)(a1 + 160) |= 0x200u;
        *(_WORD *)(a1 + 160) |= 0x80u;
        *(_WORD *)(a1 + 160) |= 0x400u;
        if ((v109 & 1) != 0)
        {
LABEL_207:
          v3 = *(_BYTE *)(v3 + *v16) == 0;
          if ((v14 & 1) != 0)
            goto LABEL_208;
          return v3;
        }
        v3 = 0;
        if ((v14 & 1) == 0)
          return v3;
LABEL_208:
        v112 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_141;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        *(_WORD *)(a1 + 160) |= 1u;
        while (2)
        {
          v59 = *v15;
          v60 = *(_QWORD *)(v3 + v59);
          v61 = v60 + 1;
          if (v60 == -1 || v61 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v16) = 1;
          }
          else
          {
            v62 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v60);
            *(_QWORD *)(v3 + v59) = v61;
            v58 |= (unint64_t)(v62 & 0x7F) << v56;
            if (v62 < 0)
            {
              v56 += 7;
              v25 = v57++ >= 9;
              if (v25)
              {
                LODWORD(v58) = 0;
                goto LABEL_155;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v16))
          LODWORD(v58) = 0;
LABEL_155:
        v97 = 132;
        goto LABEL_164;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_141;
        v63 = 0;
        v64 = 0;
        v58 = 0;
        *(_WORD *)(a1 + 160) |= 0x10u;
        while (2)
        {
          v65 = *v15;
          v66 = *(_QWORD *)(v3 + v65);
          v67 = v66 + 1;
          if (v66 == -1 || v67 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v16) = 1;
          }
          else
          {
            v68 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v66);
            *(_QWORD *)(v3 + v65) = v67;
            v58 |= (unint64_t)(v68 & 0x7F) << v63;
            if (v68 < 0)
            {
              v63 += 7;
              v25 = v64++ >= 9;
              if (v25)
              {
                LODWORD(v58) = 0;
                goto LABEL_159;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v16))
          LODWORD(v58) = 0;
LABEL_159:
        v97 = 148;
        goto LABEL_164;
      case 9:
        if (!v31)
          goto LABEL_141;
        if ((*(_WORD *)(a1 + 160) & 0x1000) == 0)
        {
          PBReaderReadData();
          v69 = objc_claimAutoreleasedReturnValue();
          v70 = 112;
          goto LABEL_140;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_211;
        v98 = 8 * *(_WORD *)(a1 + 160);
        goto LABEL_169;
      case 10:
        if ((v8 & 1) == 0)
          goto LABEL_141;
        v71 = 0;
        v72 = 0;
        v58 = 0;
        *(_WORD *)(a1 + 160) |= 4u;
        while (2)
        {
          v73 = *v15;
          v74 = *(_QWORD *)(v3 + v73);
          v75 = v74 + 1;
          if (v74 == -1 || v75 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v16) = 1;
          }
          else
          {
            v76 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v74);
            *(_QWORD *)(v3 + v73) = v75;
            v58 |= (unint64_t)(v76 & 0x7F) << v71;
            if (v76 < 0)
            {
              v71 += 7;
              v25 = v72++ >= 9;
              if (v25)
              {
                LODWORD(v58) = 0;
                goto LABEL_163;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v16))
          LODWORD(v58) = 0;
LABEL_163:
        v97 = 140;
LABEL_164:
        *(_DWORD *)(a1 + v97) = v58;
        goto LABEL_192;
      case 11:
        if ((v8 & 1) == 0)
          goto LABEL_141;
        *(_WORD *)(a1 + 160) |= 2u;
        v77 = *v15;
        v78 = *(_QWORD *)(v3 + v77);
        if (v78 <= 0xFFFFFFFFFFFFFFFBLL && v78 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v46 = *(_DWORD *)(*(_QWORD *)(v3 + *v17) + v78);
          *(_QWORD *)(v3 + v77) = v78 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v16) = 1;
          v46 = 0;
        }
        v99 = 136;
LABEL_176:
        *(_DWORD *)(a1 + v99) = v46;
        goto LABEL_192;
      case 12:
        if (!v31 || (*(_WORD *)(a1 + 160) & 0x100) != 0)
          goto LABEL_141;
        if (v28 != 2)
          goto LABEL_177;
        if (!PBReaderPlaceMark())
          goto LABEL_211;
        while (1)
        {
          v79 = (unint64_t *)(v3 + *v15);
          v80 = *v79;
          v81 = *(_QWORD *)(v3 + *v6);
          if (*v79 >= v81)
            break;
          v82 = (int)*MEMORY[0x1E0D82BC8];
          if (*(_BYTE *)(v3 + v82))
            break;
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > v81)
            *(_BYTE *)(v3 + v82) = 1;
          else
            *v79 = v80 + 4;
          PBRepeatedFloatAdd();
        }
        goto LABEL_143;
      case 13:
        if (!v31 || (*(_WORD *)(a1 + 160) & 0x200) != 0)
          goto LABEL_141;
        if (v28 != 2)
        {
LABEL_177:
          v100 = *v15;
          v101 = *(_QWORD *)(v3 + v100);
          if (v101 <= 0xFFFFFFFFFFFFFFFBLL && v101 + 4 <= *(_QWORD *)(v3 + *v6))
            *(_QWORD *)(v3 + v100) = v101 + 4;
          else
            *(_BYTE *)(v3 + v26) = 1;
          PBRepeatedFloatAdd();
          goto LABEL_191;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_211;
        while (1)
        {
          v83 = (unint64_t *)(v3 + *v15);
          v84 = *v83;
          v85 = *(_QWORD *)(v3 + *v6);
          if (*v83 >= v85)
            break;
          v86 = (int)*MEMORY[0x1E0D82BC8];
          if (*(_BYTE *)(v3 + v86))
            break;
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > v85)
            *(_BYTE *)(v3 + v86) = 1;
          else
            *v83 = v84 + 4;
          PBRepeatedFloatAdd();
        }
        goto LABEL_143;
      case 14:
        if (!v31 || (*(_WORD *)(a1 + 160) & 0x80) != 0)
          goto LABEL_141;
        if (v28 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_211;
          while (1)
          {
            v87 = (int *)MEMORY[0x1E0D82BC8];
            if (*(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
              break;
            v88 = 0;
            v89 = 0;
            v90 = 0;
            while (1)
            {
              v91 = *v15;
              v92 = *(_QWORD *)(v3 + v91);
              v93 = v92 + 1;
              if (v92 == -1 || v93 > *(_QWORD *)(v3 + *v6))
                break;
              v94 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v92);
              *(_QWORD *)(v3 + v91) = v93;
              v90 |= (unint64_t)(v94 & 0x7F) << v88;
              if (v94 < 0)
              {
                v88 += 7;
                v25 = v89++ >= 9;
                if (!v25)
                  continue;
              }
              goto LABEL_136;
            }
            *(_BYTE *)(v3 + *v87) = 1;
LABEL_136:
            PBRepeatedInt64Add();
          }
LABEL_143:
          PBReaderRecallMark();
        }
        else
        {
          v102 = 0;
          v103 = 0;
          v104 = 0;
          while (1)
          {
            v105 = *v15;
            v106 = *(_QWORD *)(v3 + v105);
            v107 = v106 + 1;
            if (v106 == -1 || v107 > *(_QWORD *)(v3 + *v6))
              break;
            v108 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v106);
            *(_QWORD *)(v3 + v105) = v107;
            v104 |= (unint64_t)(v108 & 0x7F) << v102;
            if (v108 < 0)
            {
              v102 += 7;
              v25 = v103++ >= 9;
              if (!v25)
                continue;
            }
            goto LABEL_188;
          }
          *(_BYTE *)(v3 + *v16) = 1;
LABEL_188:
          PBRepeatedInt64Add();
        }
        goto LABEL_191;
      case 15:
        if (v31)
        {
          if ((*(_WORD *)(a1 + 160) & 0x400) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
            {
LABEL_211:
              v109 = 0;
              goto LABEL_212;
            }
            v98 = 32 * *(_WORD *)(a1 + 160);
LABEL_169:
            v7 += v98 >> 15;
          }
          else
          {
            PBReaderReadData();
            v69 = objc_claimAutoreleasedReturnValue();
            v70 = 96;
LABEL_140:
            v95 = *(void **)(a1 + v70);
            *(_QWORD *)(a1 + v70) = v69;

            --v7;
          }
          goto LABEL_191;
        }
LABEL_141:
        v96 = PBReaderSkipValueWithTag();
        v16 = (int *)MEMORY[0x1E0D82BC8];
        if ((v96 & 1) == 0)
        {
LABEL_210:
          v109 = 0;
          goto LABEL_196;
        }
        goto LABEL_192;
      default:
        v43 = PBReaderSkipValueWithTag();
        v16 = (int *)MEMORY[0x1E0D82BC8];
        if (!v43)
          goto LABEL_210;
        goto LABEL_192;
    }
  }
}

void sub_18894853C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188948D00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188948DE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOTFRoadSpeedCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[128];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v1 = *(id *)(a1 + 104);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v5, v9, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v6;
    while (1)
    {
      if (*(_QWORD *)v6 != v4)
        objc_enumerationMutation(v1);
      if (!--v3)
      {
        v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v5, v9, 16);
        if (!v3)
          break;
      }
    }
  }

}

unint64_t GEOTFRoadSpeedReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 124))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTFRoadSpeedReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 120) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 124) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTFRoadSpeedReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTFRoadSpeedReadAllFrom_initialTag;
  Specified = GEOTFRoadSpeedReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTFRoadSpeedCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  return Specified;
}

void sub_18894904C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889494A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188949858(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188949FA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTFTrafficSnapshotReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  GEOTFIncident *v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  int v59;
  void *v60;
  char v61;
  uint64_t v62;
  __int16 v63;
  char v64;
  int v65;
  __int16 v66;
  void *v67;
  GEOTFIncident *v69;
  char v70;
  char v71;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 84);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 80));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 96)), (uint16x4_t)0xFFFCFFF8FFFAFFFBLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 96) >> 3) & 1)+ ((*(_WORD *)(a1 + 96) >> 7) & 1));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 3;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v71 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v70 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_113;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_113:
      if ((v15 & 1) != 0)
      {
        v64 = 1;
        goto LABEL_126;
      }
      if (v16)
      {
        while (1)
        {
          v65 = *v16++;
          v66 = 64;
          switch(v65)
          {
            case 0:
              goto LABEL_127;
            case 1:
              goto LABEL_122;
            case 2:
              v66 = 32;
              goto LABEL_122;
            case 3:
              v66 = 256;
              goto LABEL_122;
            case 5:
              v66 = 16;
              goto LABEL_122;
            case 8:
              v66 = 8;
              goto LABEL_122;
            case 10:
              v66 = 128;
LABEL_122:
              *(_WORD *)(a1 + 96) |= v66;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_127;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if ((v71 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31 || (*(_WORD *)(a1 + 96) & 0x40) != 0)
          goto LABEL_91;
        PBReaderReadString();
        v36 = (GEOTFIncident *)objc_claimAutoreleasedReturnValue();
        if (!v36)
          goto LABEL_84;
        v69 = v36;
        -[GEOTFTrafficSnapshot _addNoFlagsRegion:](a1, v36);
        goto LABEL_83;
      case 2:
        if (!v31 || (*(_WORD *)(a1 + 96) & 0x20) != 0)
          goto LABEL_91;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_125;
        v69 = objc_alloc_init(GEOTFIncident);
        if (!GEOTFIncidentReadAllFrom((uint64_t)v69, (void *)v3, v9 & 1))
          goto LABEL_124;
        PBReaderRecallMark();
        -[GEOTFTrafficSnapshot _addNoFlagsIncidents:](a1, v69);
        goto LABEL_83;
      case 3:
        if (!v31 || (*(_WORD *)(a1 + 96) & 0x100) != 0)
          goto LABEL_91;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_125;
        v69 = objc_alloc_init(GEOTFRoadSpeed);
        if (!GEOTFRoadSpeedReadAllFrom((uint64_t)v69, (void *)v3, v9 & 1))
          goto LABEL_124;
        PBReaderRecallMark();
        -[GEOTFTrafficSnapshot _addNoFlagsSpeeds:](a1, v69);
        goto LABEL_83;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_91;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 96) |= 2u;
        while (2)
        {
          v40 = *v17;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v41);
            *(_QWORD *)(v3 + v40) = v42;
            v39 |= (unint64_t)(v43 & 0x7F) << v37;
            if (v43 < 0)
            {
              v37 += 7;
              v27 = v38++ >= 9;
              if (v27)
              {
                v39 = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v39 = 0;
LABEL_96:
        v62 = 40;
        goto LABEL_105;
      case 5:
        if (!v31)
          goto LABEL_91;
        if ((*(_WORD *)(a1 + 96) & 0x10) == 0)
        {
          PBReaderReadString();
          v44 = objc_claimAutoreleasedReturnValue();
          v45 = 24;
          goto LABEL_90;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_125;
        v63 = *(_WORD *)(a1 + 96) << 11;
        goto LABEL_110;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_91;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        *(_WORD *)(a1 + 96) |= 4u;
        while (2)
        {
          v49 = *v17;
          v50 = *(_QWORD *)(v3 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v50);
            *(_QWORD *)(v3 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              v27 = v47++ >= 9;
              if (v27)
              {
                LODWORD(v48) = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v48) = 0;
LABEL_100:
        *(_DWORD *)(a1 + 92) = v48;
        goto LABEL_112;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_91;
        v53 = 0;
        v54 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 96) |= 1u;
        while (2)
        {
          v55 = *v17;
          v56 = *(_QWORD *)(v3 + v55);
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v56);
            *(_QWORD *)(v3 + v55) = v57;
            v39 |= (unint64_t)(v58 & 0x7F) << v53;
            if (v58 < 0)
            {
              v53 += 7;
              v27 = v54++ >= 9;
              if (v27)
              {
                v39 = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v39 = 0;
LABEL_104:
        v62 = 32;
LABEL_105:
        *(_QWORD *)(a1 + v62) = v39;
        goto LABEL_112;
      case 8:
        if (!v31 || (*(_WORD *)(a1 + 96) & 8) != 0)
          goto LABEL_91;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_125;
        v69 = objc_alloc_init(GEOTFCompactRoadSpeeds);
        if (GEOTFCompactRoadSpeedsReadAllFrom((uint64_t)v69, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          -[GEOTFTrafficSnapshot _addNoFlagsCompactSpeeds:](a1, v69);
LABEL_83:
          v36 = v69;
LABEL_84:

LABEL_111:
          v15 = v70;
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_112:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_113;
          continue;
        }
LABEL_124:

LABEL_125:
        v64 = 0;
        v15 = v70;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_126:
        *(_WORD *)(a1 + 96) |= 0x40u;
        *(_WORD *)(a1 + 96) |= 0x20u;
        *(_WORD *)(a1 + 96) |= 0x100u;
        *(_WORD *)(a1 + 96) |= 0x10u;
        *(_WORD *)(a1 + 96) |= 8u;
        *(_WORD *)(a1 + 96) |= 0x80u;
        if ((v64 & 1) != 0)
        {
LABEL_127:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_128;
        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
          {
LABEL_128:
            v67 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 10:
        if (v31)
        {
          if ((*(_WORD *)(a1 + 96) & 0x80) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_125;
            v63 = *(_WORD *)(a1 + 96) << 8;
LABEL_110:
            v7 += v63 >> 15;
          }
          else
          {
            PBReaderReadString();
            v44 = objc_claimAutoreleasedReturnValue();
            v45 = 64;
LABEL_90:
            v60 = *(void **)(a1 + v45);
            *(_QWORD *)(a1 + v45) = v44;

            --v7;
          }
          goto LABEL_111;
        }
LABEL_91:
        v61 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v70;
        if ((v61 & 1) == 0)
        {
LABEL_123:
          v64 = 0;
          goto LABEL_126;
        }
        goto LABEL_112;
      default:
        v59 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v70;
        if (!v59)
          goto LABEL_123;
        goto LABEL_112;
    }
  }
}

void sub_18894AB40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18894AE74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18894B21C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18894B444(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18894B778(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18894F230(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18894F308(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOTFTrafficSnapshotCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v2 = a1[6];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v26;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v26 != v5)
          objc_enumerationMutation(v2);
        -[GEOTFIncident readAll:](*(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * v6++), 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
    }
    while (v4);
  }

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v7 = a1[9];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v22;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v22 != v10)
          objc_enumerationMutation(v7);
        -[GEOTFRoadSpeed readAll:](*(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v11++), 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
    }
    while (v9);
  }

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v12 = a1[2];
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v18;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v18 != v15)
          objc_enumerationMutation(v12);
        -[GEOTFCompactRoadSpeeds readAll:](*(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v16++), 1);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
    }
    while (v14);
  }

}

unint64_t GEOTFTrafficSnapshotReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 84))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTFTrafficSnapshotReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 80) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 84) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTFTrafficSnapshotReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTFTrafficSnapshotReadAllFrom_initialTag;
  Specified = GEOTFTrafficSnapshotReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTFTrafficSnapshotCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
  return Specified;
}

void sub_18894F6C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTFTrafficSnapshotReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTFTrafficSnapshotReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18894F728(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTFTrafficSnapshotIsValid(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  int v17;
  int v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unsigned int v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  int v53;
  int v54;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  int v135;
  int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int v141;
  int v142;
  char v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  unsigned int v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char v176;
  int v177;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  int v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  int v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  int v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  int v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  int v217;
  unsigned int v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  int v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  int v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  int v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  int v239;
  uint64_t v240;
  char v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char v247;
  uint64_t v248;
  int v249;
  int v250;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  int v264;
  char v265;
  unsigned int v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  char v271;
  int v272;
  BOOL v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  int v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  int v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  int v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  int v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  int v298;
  int v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  int v304;
  int v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  _BOOL8 v312;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v5 = (int *)MEMORY[0x1E0D82BF0];
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
LABEL_561:
    v312 = a1[*v7] == 0;
    PBReaderRecallMark();
    return v312;
  }
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (a1[*v7])
      goto LABEL_561;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v5;
      v13 = *(_QWORD *)&a1[v12];
      v14 = v13 + 1;
      if (v13 == -1 || v14 > *(_QWORD *)&a1[*v6])
        break;
      v15 = *(_BYTE *)(*(_QWORD *)&a1[*v8] + v13);
      *(_QWORD *)&a1[v12] = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      v16 = v10++ >= 9;
      if (v16)
      {
        v11 = 0;
        v17 = a1[*v7];
        goto LABEL_14;
      }
    }
    a1[*v7] = 1;
LABEL_12:
    v17 = a1[*v7];
    if (a1[*v7])
      v11 = 0;
LABEL_14:
    v18 = v11 & 7;
    v19 = v17 || v18 == 4;
    if (v19)
      goto LABEL_561;
    switch((v11 >> 3))
    {
      case 1u:
        if (v18 == 2)
          goto LABEL_550;
        goto LABEL_564;
      case 2u:
        if (v18 != 2 || !PBReaderPlaceMark())
          goto LABEL_564;
        objc_msgSend(a1, "position", 0, 0);
        objc_msgSend(a1, "length");
LABEL_24:
        while (*(_QWORD *)&a1[*v5] < *(_QWORD *)&a1[*v6] && !a1[*v7])
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          while (2)
          {
            v23 = *v5;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v6])
            {
              a1[*v7] = 1;
            }
            else
            {
              v26 = *(_BYTE *)(*(_QWORD *)&a1[*v8] + v24);
              *(_QWORD *)&a1[v23] = v25;
              v22 |= (unint64_t)(v26 & 0x7F) << v20;
              if (v26 < 0)
              {
                v20 += 7;
                v16 = v21++ >= 9;
                if (v16)
                {
                  v22 = 0;
                  v27 = *v7;
                  v28 = a1[v27];
                  goto LABEL_36;
                }
                continue;
              }
            }
            break;
          }
          v27 = *v7;
          v28 = a1[v27];
          if (a1[v27])
            v22 = 0;
LABEL_36:
          v29 = v22 & 7;
          if (v28)
            v30 = 1;
          else
            v30 = v29 == 4;
          if (!v30)
          {
            switch((v22 >> 3))
            {
              case 1u:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v35 = 0;
                while (1)
                {
                  v36 = *v5;
                  v37 = *(_QWORD *)&a1[v36];
                  v38 = v37 + 1;
                  if (v37 == -1 || v38 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v39 = *(char *)(*(_QWORD *)&a1[*v8] + v37);
                  *(_QWORD *)&a1[v36] = v38;
                  if (v39 < 0)
                  {
                    v40 = v35++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 2u:
                if (v29 == 2)
                {
                  if (PBReaderPlaceMark())
                  {
LABEL_236:
                    while (*(_QWORD *)&a1[*v5] < *(_QWORD *)&a1[*v6])
                    {
                      v137 = a1[*v7];
                      if (a1[*v7])
                        break;
                      while (1)
                      {
                        v138 = *v5;
                        v139 = *(_QWORD *)&a1[v138];
                        v140 = v139 + 1;
                        if (v139 == -1 || v140 > *(_QWORD *)&a1[*v6])
                          break;
                        v141 = *(char *)(*(_QWORD *)&a1[*v8] + v139);
                        *(_QWORD *)&a1[v138] = v140;
                        if (v141 < 0)
                        {
                          v16 = v137++ >= 9;
                          if (!v16)
                            continue;
                        }
                        goto LABEL_236;
                      }
                      a1[*v7] = 1;
                    }
LABEL_245:
                    PBReaderRecallMark();
                    continue;
                  }
                }
                else if ((v22 & 7) == 0)
                {
                  while (1)
                  {
                    v41 = *v5;
                    v42 = *(_QWORD *)&a1[v41];
                    v43 = v42 + 1;
                    if (v42 == -1 || v43 > *(_QWORD *)&a1[*v6])
                      break;
                    v44 = *(char *)(*(_QWORD *)&a1[*v8] + v42);
                    *(_QWORD *)&a1[v41] = v43;
                    if (v44 < 0)
                    {
                      v45 = v29++;
                      if (v45 <= 8)
                        continue;
                    }
                    goto LABEL_24;
                  }
LABEL_228:
                  v27 = *v7;
LABEL_229:
                  a1[v27] = 1;
                  continue;
                }
                break;
              case 3u:
                if (v29 != 2 || !PBReaderPlaceMark())
                  goto LABEL_563;
                objc_msgSend(a1, "position");
                objc_msgSend(a1, "length");
                while (2)
                {
                  if (*(_QWORD *)&a1[*v5] < *(_QWORD *)&a1[*v6] && !a1[*v7])
                  {
                    v46 = 0;
                    v47 = 0;
                    v48 = 0;
                    while (1)
                    {
                      v49 = *v5;
                      v50 = *(_QWORD *)&a1[v49];
                      v51 = v50 + 1;
                      if (v50 == -1 || v51 > *(_QWORD *)&a1[*v6])
                        break;
                      v52 = *(_BYTE *)(*(_QWORD *)&a1[*v8] + v50);
                      *(_QWORD *)&a1[v49] = v51;
                      v48 |= (unint64_t)(v52 & 0x7F) << v46;
                      if ((v52 & 0x80) == 0)
                        goto LABEL_77;
                      v46 += 7;
                      v16 = v47++ >= 9;
                      if (v16)
                      {
                        v48 = 0;
                        v53 = a1[*v7];
                        goto LABEL_79;
                      }
                    }
                    a1[*v7] = 1;
LABEL_77:
                    v53 = a1[*v7];
                    if (a1[*v7])
                      v48 = 0;
LABEL_79:
                    v54 = v48 & 7;
                    if (!v53 && v54 != 4)
                    {
                      if ((v48 >> 3) == 101)
                      {
                        if (v54 != 2)
                          goto LABEL_562;
                      }
                      else
                      {
                        if ((v48 >> 3) != 100)
                        {
                          if (!PBReaderSkipValueWithTag())
                            goto LABEL_562;
                          continue;
                        }
                        if (v54 != 2)
                          goto LABEL_562;
                      }
                      if ((PBReaderSkipValueWithTag() & 1) == 0)
                        goto LABEL_562;
                      continue;
                    }
                  }
                  break;
                }
                v136 = a1[*v7];
                PBReaderRecallMark();
                if (!v136)
                  goto LABEL_245;
                goto LABEL_563;
              case 4u:
                if (v29 != 2)
                  goto LABEL_563;
                goto LABEL_231;
              case 5u:
              case 6u:
              case 0x13u:
              case 0x14u:
                if (v29 != 1)
                  goto LABEL_563;
                v31 = *v5;
                v32 = *(_QWORD *)&a1[v31];
                if (v32 > 0xFFFFFFFFFFFFFFF7)
                  goto LABEL_229;
                v33 = v32 + 8;
                goto LABEL_47;
              case 8u:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v56 = 0;
                while (1)
                {
                  v57 = *v5;
                  v58 = *(_QWORD *)&a1[v57];
                  v59 = v58 + 1;
                  if (v58 == -1 || v59 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v60 = *(char *)(*(_QWORD *)&a1[*v8] + v58);
                  *(_QWORD *)&a1[v57] = v59;
                  if (v60 < 0)
                  {
                    v40 = v56++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0xAu:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v61 = 0;
                while (1)
                {
                  v62 = *v5;
                  v63 = *(_QWORD *)&a1[v62];
                  v64 = v63 + 1;
                  if (v63 == -1 || v64 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v65 = *(char *)(*(_QWORD *)&a1[*v8] + v63);
                  *(_QWORD *)&a1[v62] = v64;
                  if (v65 < 0)
                  {
                    v40 = v61++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0xBu:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v66 = 0;
                while (1)
                {
                  v67 = *v5;
                  v68 = *(_QWORD *)&a1[v67];
                  v69 = v68 + 1;
                  if (v68 == -1 || v69 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v70 = *(char *)(*(_QWORD *)&a1[*v8] + v68);
                  *(_QWORD *)&a1[v67] = v69;
                  if (v70 < 0)
                  {
                    v40 = v66++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0xCu:
                if (v29 != 2)
                  goto LABEL_563;
                goto LABEL_231;
              case 0xDu:
                if (v29 != 2)
                  goto LABEL_563;
                goto LABEL_231;
              case 0xEu:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v71 = 0;
                while (1)
                {
                  v72 = *v5;
                  v73 = *(_QWORD *)&a1[v72];
                  v74 = v73 + 1;
                  if (v73 == -1 || v74 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v75 = *(char *)(*(_QWORD *)&a1[*v8] + v73);
                  *(_QWORD *)&a1[v72] = v74;
                  if (v75 < 0)
                  {
                    v40 = v71++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0x10u:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v76 = 0;
                while (1)
                {
                  v77 = *v5;
                  v78 = *(_QWORD *)&a1[v77];
                  v79 = v78 + 1;
                  if (v78 == -1 || v79 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v80 = *(char *)(*(_QWORD *)&a1[*v8] + v78);
                  *(_QWORD *)&a1[v77] = v79;
                  if (v80 < 0)
                  {
                    v40 = v76++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0x11u:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v81 = 0;
                while (1)
                {
                  v82 = *v5;
                  v83 = *(_QWORD *)&a1[v82];
                  v84 = v83 + 1;
                  if (v83 == -1 || v84 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v85 = *(char *)(*(_QWORD *)&a1[*v8] + v83);
                  *(_QWORD *)&a1[v82] = v84;
                  if (v85 < 0)
                  {
                    v40 = v81++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0x12u:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v86 = 0;
                while (1)
                {
                  v87 = *v5;
                  v88 = *(_QWORD *)&a1[v87];
                  v89 = v88 + 1;
                  if (v88 == -1 || v89 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v90 = *(char *)(*(_QWORD *)&a1[*v8] + v88);
                  *(_QWORD *)&a1[v87] = v89;
                  if (v90 < 0)
                  {
                    v40 = v86++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0x15u:
              case 0x19u:
                if (v29 != 5)
                  goto LABEL_563;
                v31 = *v5;
                v34 = *(_QWORD *)&a1[v31];
                if (v34 > 0xFFFFFFFFFFFFFFFBLL)
                  goto LABEL_229;
                v33 = v34 + 4;
LABEL_47:
                if (v33 > *(_QWORD *)&a1[*v6])
                  goto LABEL_229;
                *(_QWORD *)&a1[v31] = v33;
                continue;
              case 0x16u:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v91 = 0;
                while (1)
                {
                  v92 = *v5;
                  v93 = *(_QWORD *)&a1[v92];
                  v94 = v93 + 1;
                  if (v93 == -1 || v94 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v95 = *(char *)(*(_QWORD *)&a1[*v8] + v93);
                  *(_QWORD *)&a1[v92] = v94;
                  if (v95 < 0)
                  {
                    v40 = v91++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0x17u:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v96 = 0;
                while (1)
                {
                  v97 = *v5;
                  v98 = *(_QWORD *)&a1[v97];
                  v99 = v98 + 1;
                  if (v98 == -1 || v99 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v100 = *(char *)(*(_QWORD *)&a1[*v8] + v98);
                  *(_QWORD *)&a1[v97] = v99;
                  if (v100 < 0)
                  {
                    v40 = v96++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0x18u:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v101 = 0;
                while (1)
                {
                  v102 = *v5;
                  v103 = *(_QWORD *)&a1[v102];
                  v104 = v103 + 1;
                  if (v103 == -1 || v104 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v105 = *(char *)(*(_QWORD *)&a1[*v8] + v103);
                  *(_QWORD *)&a1[v102] = v104;
                  if (v105 < 0)
                  {
                    v40 = v101++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0x1Au:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v106 = 0;
                while (1)
                {
                  v107 = *v5;
                  v108 = *(_QWORD *)&a1[v107];
                  v109 = v108 + 1;
                  if (v108 == -1 || v109 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v110 = *(char *)(*(_QWORD *)&a1[*v8] + v108);
                  *(_QWORD *)&a1[v107] = v109;
                  if (v110 < 0)
                  {
                    v40 = v106++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0x1Bu:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v111 = 0;
                while (1)
                {
                  v112 = *v5;
                  v113 = *(_QWORD *)&a1[v112];
                  v114 = v113 + 1;
                  if (v113 == -1 || v114 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v115 = *(char *)(*(_QWORD *)&a1[*v8] + v113);
                  *(_QWORD *)&a1[v112] = v114;
                  if (v115 < 0)
                  {
                    v40 = v111++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0x1Cu:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v116 = 0;
                while (1)
                {
                  v117 = *v5;
                  v118 = *(_QWORD *)&a1[v117];
                  v119 = v118 + 1;
                  if (v118 == -1 || v119 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v120 = *(char *)(*(_QWORD *)&a1[*v8] + v118);
                  *(_QWORD *)&a1[v117] = v119;
                  if (v120 < 0)
                  {
                    v40 = v116++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0x1Du:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v121 = 0;
                while (1)
                {
                  v122 = *v5;
                  v123 = *(_QWORD *)&a1[v122];
                  v124 = v123 + 1;
                  if (v123 == -1 || v124 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v125 = *(char *)(*(_QWORD *)&a1[*v8] + v123);
                  *(_QWORD *)&a1[v122] = v124;
                  if (v125 < 0)
                  {
                    v40 = v121++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0x1Eu:
                if (v29 != 2)
                  goto LABEL_563;
                goto LABEL_231;
              case 0x1Fu:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v126 = 0;
                while (1)
                {
                  v127 = *v5;
                  v128 = *(_QWORD *)&a1[v127];
                  v129 = v128 + 1;
                  if (v128 == -1 || v129 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v130 = *(char *)(*(_QWORD *)&a1[*v8] + v128);
                  *(_QWORD *)&a1[v127] = v129;
                  if (v130 < 0)
                  {
                    v40 = v126++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0x20u:
                if ((v22 & 7) != 0)
                  goto LABEL_563;
                v131 = 0;
                while (1)
                {
                  v132 = *v5;
                  v133 = *(_QWORD *)&a1[v132];
                  v134 = v133 + 1;
                  if (v133 == -1 || v134 > *(_QWORD *)&a1[*v6])
                    goto LABEL_228;
                  v135 = *(char *)(*(_QWORD *)&a1[*v8] + v133);
                  *(_QWORD *)&a1[v132] = v134;
                  if (v135 < 0)
                  {
                    v40 = v131++ > 8;
                    if (!v40)
                      continue;
                  }
                  goto LABEL_24;
                }
              case 0x21u:
                if (v29 != 2)
                  goto LABEL_563;
                goto LABEL_231;
              default:
LABEL_231:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_563;
                continue;
            }
            goto LABEL_563;
          }
          break;
        }
        v306 = a1[*v7];
        PBReaderRecallMark();
        if (v306)
          goto LABEL_564;
        goto LABEL_559;
      case 3u:
        if (v18 != 2 || !PBReaderPlaceMark())
          goto LABEL_564;
        objc_msgSend(a1, "position", 0, 0);
        objc_msgSend(a1, "length");
        if (*(_QWORD *)&a1[*v5] >= *(_QWORD *)&a1[*v6])
        {
          v142 = 0;
LABEL_555:
          v307 = v1;
          v308 = v2;
          v309 = v3;
          v310 = a1[*v7];
          PBReaderRecallMark();
          v19 = v310 == 0;
          v3 = v309;
          v2 = v308;
          v1 = v307;
          if (!v19 || v142 == 0)
            goto LABEL_564;
LABEL_559:
          PBReaderRecallMark();
LABEL_560:
          if (*(_QWORD *)&a1[*v5] >= *(_QWORD *)&a1[*v6])
            goto LABEL_561;
          continue;
        }
        v142 = 0;
        while (2)
        {
          if (a1[*v7])
            goto LABEL_555;
          v143 = 0;
          v144 = 0;
          v145 = 0;
          while (1)
          {
            v146 = *v5;
            v147 = *(_QWORD *)&a1[v146];
            v148 = v147 + 1;
            if (v147 == -1 || v148 > *(_QWORD *)&a1[*v6])
              break;
            v149 = *(_BYTE *)(*(_QWORD *)&a1[*v8] + v147);
            *(_QWORD *)&a1[v146] = v148;
            v145 |= (unint64_t)(v149 & 0x7F) << v143;
            if ((v149 & 0x80) == 0)
              goto LABEL_259;
            v143 += 7;
            v16 = v144++ >= 9;
            if (v16)
            {
              v145 = 0;
              v150 = *v7;
              v151 = a1[v150];
              goto LABEL_261;
            }
          }
          a1[*v7] = 1;
LABEL_259:
          v150 = *v7;
          v151 = a1[v150];
          if (a1[v150])
            v145 = 0;
LABEL_261:
          v152 = v145 & 7;
          if (v151 || v152 == 4)
            goto LABEL_555;
          switch((v145 >> 3))
          {
            case 1u:
              if (v142 || (v145 & 7) != 0)
                goto LABEL_563;
              v157 = 0;
              while (1)
              {
                v158 = *v5;
                v159 = *(_QWORD *)&a1[v158];
                v160 = v159 + 1;
                if (v159 == -1 || v160 > *(_QWORD *)&a1[*v6])
                  break;
                v161 = *(char *)(*(_QWORD *)&a1[*v8] + v159);
                *(_QWORD *)&a1[v158] = v160;
                v142 = 1;
                if (v161 < 0)
                {
                  v40 = v157++ > 8;
                  if (!v40)
                    continue;
                }
                goto LABEL_397;
              }
              v142 = 1;
              a1[*v7] = 1;
              goto LABEL_397;
            case 3u:
            case 4u:
            case 0xBu:
              if (v152 == 5)
                goto LABEL_267;
              goto LABEL_563;
            case 5u:
              if ((v145 & 7) != 0)
                goto LABEL_563;
              v162 = 0;
              while (1)
              {
                v163 = *v5;
                v164 = *(_QWORD *)&a1[v163];
                v165 = v164 + 1;
                if (v164 == -1 || v165 > *(_QWORD *)&a1[*v6])
                  goto LABEL_378;
                v166 = *(char *)(*(_QWORD *)&a1[*v8] + v164);
                *(_QWORD *)&a1[v163] = v165;
                if (v166 < 0)
                {
                  v40 = v162++ > 8;
                  if (!v40)
                    continue;
                }
                goto LABEL_397;
              }
            case 6u:
              if (v152 != 2)
                goto LABEL_563;
              v167 = v1;
              v168 = v2;
              v169 = v3;
              if (!PBReaderPlaceMark())
                goto LABEL_563;
              objc_msgSend(a1, "position");
              objc_msgSend(a1, "length");
LABEL_290:
              if (*(_QWORD *)&a1[*v5] >= *(_QWORD *)&a1[*v6] || a1[*v7])
                goto LABEL_383;
              v170 = 0;
              v171 = 0;
              v172 = 0;
              while (1)
              {
                v173 = *v5;
                v174 = *(_QWORD *)&a1[v173];
                v175 = v174 + 1;
                if (v174 == -1 || v175 > *(_QWORD *)&a1[*v6])
                  break;
                v176 = *(_BYTE *)(*(_QWORD *)&a1[*v8] + v174);
                *(_QWORD *)&a1[v173] = v175;
                v172 |= (unint64_t)(v176 & 0x7F) << v170;
                if ((v176 & 0x80) == 0)
                  goto LABEL_300;
                v170 += 7;
                v16 = v171++ >= 9;
                if (v16)
                {
                  v172 = 0;
                  v177 = a1[*v7];
                  goto LABEL_302;
                }
              }
              a1[*v7] = 1;
LABEL_300:
              v177 = a1[*v7];
              if (a1[*v7])
                v172 = 0;
LABEL_302:
              if (v177 || (v172 & 7) == 4)
              {
LABEL_383:
                v219 = a1[*v7];
                PBReaderRecallMark();
                if (v219)
                  goto LABEL_563;
                PBReaderRecallMark();
                v3 = v169;
                v2 = v168;
                v1 = v167;
LABEL_397:
                if (*(_QWORD *)&a1[*v5] >= *(_QWORD *)&a1[*v6])
                  goto LABEL_555;
                continue;
              }
              if ((v172 >> 3) == 3)
              {
                if ((v172 & 7) == 0)
                {
                  v184 = 0;
                  while (1)
                  {
                    v185 = *v5;
                    v186 = *(_QWORD *)&a1[v185];
                    v187 = v186 + 1;
                    if (v186 == -1 || v187 > *(_QWORD *)&a1[*v6])
                      break;
                    v188 = *(char *)(*(_QWORD *)&a1[*v8] + v186);
                    *(_QWORD *)&a1[v185] = v187;
                    if (v188 < 0)
                    {
                      v40 = v184++ > 8;
                      if (!v40)
                        continue;
                    }
                    goto LABEL_290;
                  }
LABEL_324:
                  a1[*v7] = 1;
                  goto LABEL_290;
                }
              }
              else
              {
                if ((v172 >> 3) != 1)
                {
                  if ((PBReaderSkipValueWithTag() & 1) == 0)
                    goto LABEL_562;
                  goto LABEL_290;
                }
                if ((v172 & 7) == 0)
                {
                  v179 = 0;
                  while (1)
                  {
                    v180 = *v5;
                    v181 = *(_QWORD *)&a1[v180];
                    v182 = v181 + 1;
                    if (v181 == -1 || v182 > *(_QWORD *)&a1[*v6])
                      goto LABEL_324;
                    v183 = *(char *)(*(_QWORD *)&a1[*v8] + v181);
                    *(_QWORD *)&a1[v180] = v182;
                    if (v183 < 0)
                    {
                      v40 = v179++ > 8;
                      if (!v40)
                        continue;
                    }
                    goto LABEL_290;
                  }
                }
              }
LABEL_562:
              PBReaderRecallMark();
LABEL_563:
              PBReaderRecallMark();
LABEL_564:
              PBReaderRecallMark();
              return 0;
            case 7u:
              if ((v145 & 7) != 0)
                goto LABEL_563;
              v189 = 0;
              while (1)
              {
                v190 = *v5;
                v191 = *(_QWORD *)&a1[v190];
                v192 = v191 + 1;
                if (v191 == -1 || v192 > *(_QWORD *)&a1[*v6])
                  goto LABEL_378;
                v193 = *(char *)(*(_QWORD *)&a1[*v8] + v191);
                *(_QWORD *)&a1[v190] = v192;
                if (v193 < 0)
                {
                  v40 = v189++ > 8;
                  if (!v40)
                    continue;
                }
                goto LABEL_397;
              }
            case 8u:
              if ((v145 & 7) != 0)
                goto LABEL_563;
              v194 = 0;
              while (1)
              {
                v195 = *v5;
                v196 = *(_QWORD *)&a1[v195];
                v197 = v196 + 1;
                if (v196 == -1 || v197 > *(_QWORD *)&a1[*v6])
                  goto LABEL_378;
                v198 = *(char *)(*(_QWORD *)&a1[*v8] + v196);
                *(_QWORD *)&a1[v195] = v197;
                if (v198 < 0)
                {
                  v40 = v194++ > 8;
                  if (!v40)
                    continue;
                }
                goto LABEL_397;
              }
            case 9u:
              if (v152 == 2)
                goto LABEL_381;
              goto LABEL_563;
            case 0xAu:
              if ((v145 & 7) != 0)
                goto LABEL_563;
              v199 = 0;
              while (1)
              {
                v200 = *v5;
                v201 = *(_QWORD *)&a1[v200];
                v202 = v201 + 1;
                if (v201 == -1 || v202 > *(_QWORD *)&a1[*v6])
                  goto LABEL_378;
                v203 = *(char *)(*(_QWORD *)&a1[*v8] + v201);
                *(_QWORD *)&a1[v200] = v202;
                if (v203 < 0)
                {
                  v40 = v199++ > 8;
                  if (!v40)
                    continue;
                }
                goto LABEL_397;
              }
            case 0xCu:
              if (v152 == 5)
                goto LABEL_267;
              if (v152 != 2 || !PBReaderPlaceMark())
                goto LABEL_563;
              while (1)
              {
                v204 = (unint64_t *)&a1[*v5];
                v205 = *v204;
                v206 = *(_QWORD *)&a1[*v6];
                if (*v204 >= v206)
                  break;
                v207 = *v7;
                if (a1[v207])
                  break;
                if (v205 > 0xFFFFFFFFFFFFFFFBLL || (v208 = v205 + 4, v208 > v206))
                  a1[v207] = 1;
                else
                  *v204 = v208;
              }
              goto LABEL_396;
            case 0xDu:
              if (v152 == 5)
              {
LABEL_267:
                v154 = *v5;
                v155 = *(_QWORD *)&a1[v154];
                if (v155 > 0xFFFFFFFFFFFFFFFBLL || (v156 = v155 + 4, v156 > *(_QWORD *)&a1[*v6]))
LABEL_379:
                  a1[v150] = 1;
                else
                  *(_QWORD *)&a1[v154] = v156;
              }
              else
              {
                if (v152 != 2 || !PBReaderPlaceMark())
                  goto LABEL_563;
                while (1)
                {
                  v209 = (unint64_t *)&a1[*v5];
                  v210 = *v209;
                  v211 = *(_QWORD *)&a1[*v6];
                  if (*v209 >= v211)
                    break;
                  v212 = *v7;
                  if (a1[v212])
                    break;
                  if (v210 > 0xFFFFFFFFFFFFFFFBLL || (v213 = v210 + 4, v213 > v211))
                    a1[v212] = 1;
                  else
                    *v209 = v213;
                }
LABEL_396:
                PBReaderRecallMark();
              }
              goto LABEL_397;
            case 0xEu:
              if (v152 != 2)
              {
                if ((v145 & 7) != 0)
                  goto LABEL_563;
                while (1)
                {
                  v214 = *v5;
                  v215 = *(_QWORD *)&a1[v214];
                  v216 = v215 + 1;
                  if (v215 == -1 || v216 > *(_QWORD *)&a1[*v6])
                    break;
                  v217 = *(char *)(*(_QWORD *)&a1[*v8] + v215);
                  *(_QWORD *)&a1[v214] = v216;
                  if (v217 < 0)
                  {
                    v218 = v152++;
                    if (v218 <= 8)
                      continue;
                  }
                  goto LABEL_397;
                }
LABEL_378:
                v150 = *v7;
                goto LABEL_379;
              }
              if (!PBReaderPlaceMark())
                goto LABEL_563;
LABEL_387:
              while (*(_QWORD *)&a1[*v5] < *(_QWORD *)&a1[*v6])
              {
                v220 = a1[*v7];
                if (a1[*v7])
                  break;
                while (1)
                {
                  v221 = *v5;
                  v222 = *(_QWORD *)&a1[v221];
                  v223 = v222 + 1;
                  if (v222 == -1 || v223 > *(_QWORD *)&a1[*v6])
                    break;
                  v224 = *(char *)(*(_QWORD *)&a1[*v8] + v222);
                  *(_QWORD *)&a1[v221] = v223;
                  if (v224 < 0)
                  {
                    v16 = v220++ >= 9;
                    if (!v16)
                      continue;
                  }
                  goto LABEL_387;
                }
                a1[*v7] = 1;
              }
              goto LABEL_396;
            case 0xFu:
              if (v152 == 2)
                goto LABEL_381;
              goto LABEL_563;
            default:
LABEL_381:
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_563;
              goto LABEL_397;
          }
        }
      case 4u:
        if ((v11 & 7) != 0)
          goto LABEL_564;
        v225 = 0;
        while (1)
        {
          v226 = *v5;
          v227 = *(_QWORD *)&a1[v226];
          v228 = v227 + 1;
          if (v227 == -1 || v228 > *(_QWORD *)&a1[*v6])
            goto LABEL_425;
          v229 = *(char *)(*(_QWORD *)&a1[*v8] + v227);
          *(_QWORD *)&a1[v226] = v228;
          if (v229 < 0)
          {
            v40 = v225++ > 8;
            if (!v40)
              continue;
          }
          goto LABEL_560;
        }
      case 5u:
        if (v18 == 2)
          goto LABEL_550;
        goto LABEL_564;
      case 6u:
        if ((v11 & 7) != 0)
          goto LABEL_564;
        v230 = 0;
        while (1)
        {
          v231 = *v5;
          v232 = *(_QWORD *)&a1[v231];
          v233 = v232 + 1;
          if (v232 == -1 || v233 > *(_QWORD *)&a1[*v6])
            goto LABEL_425;
          v234 = *(char *)(*(_QWORD *)&a1[*v8] + v232);
          *(_QWORD *)&a1[v231] = v233;
          if (v234 < 0)
          {
            v40 = v230++ > 8;
            if (!v40)
              continue;
          }
          goto LABEL_560;
        }
      case 7u:
        if ((v11 & 7) != 0)
          goto LABEL_564;
        v235 = 0;
        while (1)
        {
          v236 = *v5;
          v237 = *(_QWORD *)&a1[v236];
          v238 = v237 + 1;
          if (v237 == -1 || v238 > *(_QWORD *)&a1[*v6])
            break;
          v239 = *(char *)(*(_QWORD *)&a1[*v8] + v237);
          *(_QWORD *)&a1[v236] = v238;
          if (v239 < 0)
          {
            v40 = v235++ > 8;
            if (!v40)
              continue;
          }
          goto LABEL_560;
        }
LABEL_425:
        a1[*v7] = 1;
        goto LABEL_560;
      case 8u:
        if (v18 != 2)
          goto LABEL_564;
        v240 = v3;
        if (!PBReaderPlaceMark())
          goto LABEL_564;
        objc_msgSend(a1, "position", 0, 0);
        objc_msgSend(a1, "length");
        if (*(_QWORD *)&a1[*v5] >= *(_QWORD *)&a1[*v6])
          goto LABEL_547;
        do
        {
          if (a1[*v7])
            break;
          v241 = 0;
          v242 = 0;
          v243 = 0;
          while (1)
          {
            v244 = *v5;
            v245 = *(_QWORD *)&a1[v244];
            v246 = v245 + 1;
            if (v245 == -1 || v246 > *(_QWORD *)&a1[*v6])
              break;
            v247 = *(_BYTE *)(*(_QWORD *)&a1[*v8] + v245);
            *(_QWORD *)&a1[v244] = v246;
            v243 |= (unint64_t)(v247 & 0x7F) << v241;
            if ((v247 & 0x80) == 0)
              goto LABEL_438;
            v241 += 7;
            v16 = v242++ >= 9;
            if (v16)
            {
              v243 = 0;
              v248 = *v7;
              v249 = a1[v248];
              goto LABEL_440;
            }
          }
          a1[*v7] = 1;
LABEL_438:
          v248 = *v7;
          v249 = a1[v248];
          if (a1[v248])
            v243 = 0;
LABEL_440:
          v250 = v243 & 7;
          if (v249 || v250 == 4)
            break;
          switch((v243 >> 3))
          {
            case 1u:
              if (v250 == 2)
              {
                if (!PBReaderPlaceMark())
                  goto LABEL_563;
                while (1)
                {
LABEL_536:
                  if (*(_QWORD *)&a1[*v5] >= *(_QWORD *)&a1[*v6])
                    goto LABEL_545;
                  v300 = a1[*v7];
                  if (a1[*v7])
                    goto LABEL_545;
                  while (1)
                  {
                    v301 = *v5;
                    v302 = *(_QWORD *)&a1[v301];
                    v303 = v302 + 1;
                    if (v302 == -1 || v303 > *(_QWORD *)&a1[*v6])
                      break;
                    v304 = *(char *)(*(_QWORD *)&a1[*v8] + v302);
                    *(_QWORD *)&a1[v301] = v303;
                    if (v304 < 0)
                    {
                      v16 = v300++ >= 9;
                      if (!v16)
                        continue;
                    }
                    goto LABEL_536;
                  }
                  a1[*v7] = 1;
                }
              }
              if ((v243 & 7) != 0)
                goto LABEL_563;
              while (1)
              {
                v255 = *v5;
                v256 = *(_QWORD *)&a1[v255];
                v257 = v256 + 1;
                if (v256 == -1 || v257 > *(_QWORD *)&a1[*v6])
                  goto LABEL_528;
                v258 = *(char *)(*(_QWORD *)&a1[*v8] + v256);
                *(_QWORD *)&a1[v255] = v257;
                if (v258 < 0)
                {
                  v259 = v250++;
                  if (v259 <= 8)
                    continue;
                }
                goto LABEL_546;
              }
            case 2u:
            case 3u:
            case 9u:
              if (v250 != 5)
                goto LABEL_563;
              v252 = *v5;
              v253 = *(_QWORD *)&a1[v252];
              if (v253 > 0xFFFFFFFFFFFFFFFBLL)
                goto LABEL_529;
              v254 = v253 + 4;
              if (v254 > *(_QWORD *)&a1[*v6])
                goto LABEL_529;
              *(_QWORD *)&a1[v252] = v254;
              continue;
            case 4u:
              if ((v243 & 7) != 0)
                goto LABEL_563;
              v260 = 0;
              while (1)
              {
                v261 = *v5;
                v262 = *(_QWORD *)&a1[v261];
                v263 = v262 + 1;
                if (v262 == -1 || v263 > *(_QWORD *)&a1[*v6])
                  goto LABEL_528;
                v264 = *(char *)(*(_QWORD *)&a1[*v8] + v262);
                *(_QWORD *)&a1[v261] = v263;
                if (v264 < 0)
                {
                  v40 = v260++ > 8;
                  if (!v40)
                    continue;
                }
                goto LABEL_546;
              }
            case 5u:
              if (v250 != 2 || !PBReaderPlaceMark())
                goto LABEL_563;
              objc_msgSend(a1, "position");
              objc_msgSend(a1, "length");
LABEL_467:
              while (*(_QWORD *)&a1[*v5] < *(_QWORD *)&a1[*v6] && !a1[*v7])
              {
                v265 = 0;
                v266 = 0;
                v267 = 0;
                while (2)
                {
                  v268 = *v5;
                  v269 = *(_QWORD *)&a1[v268];
                  v270 = v269 + 1;
                  if (v269 == -1 || v270 > *(_QWORD *)&a1[*v6])
                  {
                    a1[*v7] = 1;
                  }
                  else
                  {
                    v271 = *(_BYTE *)(*(_QWORD *)&a1[*v8] + v269);
                    *(_QWORD *)&a1[v268] = v270;
                    v267 |= (unint64_t)(v271 & 0x7F) << v265;
                    if (v271 < 0)
                    {
                      v265 += 7;
                      v16 = v266++ >= 9;
                      if (v16)
                      {
                        v267 = 0;
                        v272 = a1[*v7];
                        goto LABEL_479;
                      }
                      continue;
                    }
                  }
                  break;
                }
                v272 = a1[*v7];
                if (a1[*v7])
                  v267 = 0;
LABEL_479:
                if (v272)
                  v273 = 1;
                else
                  v273 = (v267 & 7) == 4;
                if (!v273)
                {
                  if ((v267 >> 3) == 2)
                  {
                    if ((v267 & 7) != 0)
                      goto LABEL_562;
                    v279 = 0;
                    while (1)
                    {
                      v280 = *v5;
                      v281 = *(_QWORD *)&a1[v280];
                      v282 = v281 + 1;
                      if (v281 == -1 || v282 > *(_QWORD *)&a1[*v6])
                        break;
                      v283 = *(char *)(*(_QWORD *)&a1[*v8] + v281);
                      *(_QWORD *)&a1[v280] = v282;
                      if (v283 < 0)
                      {
                        v40 = v279++ > 8;
                        if (!v40)
                          continue;
                      }
                      goto LABEL_467;
                    }
                  }
                  else
                  {
                    if ((v267 >> 3) != 1)
                    {
                      if ((PBReaderSkipValueWithTag() & 1) == 0)
                        goto LABEL_562;
                      continue;
                    }
                    if ((v267 & 7) != 0)
                      goto LABEL_562;
                    v274 = 0;
                    while (1)
                    {
                      v275 = *v5;
                      v276 = *(_QWORD *)&a1[v275];
                      v277 = v276 + 1;
                      if (v276 == -1 || v277 > *(_QWORD *)&a1[*v6])
                        break;
                      v278 = *(char *)(*(_QWORD *)&a1[*v8] + v276);
                      *(_QWORD *)&a1[v275] = v277;
                      if (v278 < 0)
                      {
                        v40 = v274++ > 8;
                        if (!v40)
                          continue;
                      }
                      goto LABEL_467;
                    }
                  }
                  a1[*v7] = 1;
                  continue;
                }
                break;
              }
              v299 = a1[*v7];
              PBReaderRecallMark();
              if (v299)
                goto LABEL_563;
LABEL_545:
              PBReaderRecallMark();
              continue;
            case 6u:
              if ((v243 & 7) != 0)
                goto LABEL_563;
              v284 = 0;
              while (1)
              {
                v285 = *v5;
                v286 = *(_QWORD *)&a1[v285];
                v287 = v286 + 1;
                if (v286 == -1 || v287 > *(_QWORD *)&a1[*v6])
                  goto LABEL_528;
                v288 = *(char *)(*(_QWORD *)&a1[*v8] + v286);
                *(_QWORD *)&a1[v285] = v287;
                if (v288 < 0)
                {
                  v40 = v284++ > 8;
                  if (!v40)
                    continue;
                }
                goto LABEL_546;
              }
            case 7u:
              if ((v243 & 7) != 0)
                goto LABEL_563;
              v289 = 0;
              while (1)
              {
                v290 = *v5;
                v291 = *(_QWORD *)&a1[v290];
                v292 = v291 + 1;
                if (v291 == -1 || v292 > *(_QWORD *)&a1[*v6])
                  goto LABEL_528;
                v293 = *(char *)(*(_QWORD *)&a1[*v8] + v291);
                *(_QWORD *)&a1[v290] = v292;
                if (v293 < 0)
                {
                  v40 = v289++ > 8;
                  if (!v40)
                    continue;
                }
                goto LABEL_546;
              }
            case 8u:
              if ((v243 & 7) != 0)
                goto LABEL_563;
              v294 = 0;
              break;
            case 0xAu:
              if (v250 == 2)
                goto LABEL_531;
              goto LABEL_563;
            default:
LABEL_531:
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_563;
              continue;
          }
          while (1)
          {
            v295 = *v5;
            v296 = *(_QWORD *)&a1[v295];
            v297 = v296 + 1;
            if (v296 == -1 || v297 > *(_QWORD *)&a1[*v6])
              break;
            v298 = *(char *)(*(_QWORD *)&a1[*v8] + v296);
            *(_QWORD *)&a1[v295] = v297;
            if (v298 < 0)
            {
              v40 = v294++ > 8;
              if (!v40)
                continue;
            }
            goto LABEL_546;
          }
LABEL_528:
          v248 = *v7;
LABEL_529:
          a1[v248] = 1;
LABEL_546:
          ;
        }
        while (*(_QWORD *)&a1[*v5] < *(_QWORD *)&a1[*v6]);
LABEL_547:
        v305 = a1[*v7];
        PBReaderRecallMark();
        if (v305)
          goto LABEL_564;
        PBReaderRecallMark();
        v3 = v240;
        goto LABEL_560;
      case 0xAu:
        if (v18 == 2)
          goto LABEL_550;
        goto LABEL_564;
      default:
LABEL_550:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_564;
        goto LABEL_560;
    }
  }
}

void sub_1889515C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTFTrafficSnapshotIsDirty(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  v2 = *(_WORD *)(a1 + 96);
  if ((v2 & 0x3F8) == 0)
  {
    if ((*(_WORD *)(a1 + 96) & 0x100) != 0)
    {
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v4 = *(id *)(a1 + 72);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v21;
LABEL_6:
        v8 = 0;
        while (1)
        {
          if (*(_QWORD *)v21 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * v8);
          if (v9)
          {
            os_unfair_lock_lock_with_options();
            os_unfair_lock_assert_owner((const os_unfair_lock *)(v9 + 128));
            v10 = *(_WORD *)(v9 + 160) & 0x3F80;
            os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 128));
            if (v10)
              goto LABEL_26;
          }
          if (v6 == ++v8)
          {
            v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
            if (v6)
              goto LABEL_6;
            break;
          }
        }
      }

      v2 = *(_WORD *)(a1 + 96);
    }
    if ((v2 & 8) == 0)
      return 0;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v4 = *(id *)(a1 + 16);
    v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
    if (!v3)
    {
LABEL_27:

      return v3;
    }
    v11 = *(_QWORD *)v17;
LABEL_18:
    v12 = 0;
    while (1)
    {
      if (*(_QWORD *)v17 != v11)
        objc_enumerationMutation(v4);
      v13 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v12);
      if (v13)
      {
        os_unfair_lock_lock_with_options();
        os_unfair_lock_assert_owner((const os_unfair_lock *)(v13 + 64));
        v14 = *(_WORD *)(v13 + 96) & 0x780;
        os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 64));
        if (v14)
          break;
      }
      if (v3 == ++v12)
      {
        v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
        if (v3)
          goto LABEL_18;
        goto LABEL_27;
      }
    }
LABEL_26:
    v3 = 1;
    goto LABEL_27;
  }
  return 1;
}

os_unfair_lock_s *GEOTFTrafficSnapshotIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTFTrafficSnapshotIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 22);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_188951FF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOGetGEONavdCachePersistenceManagerLog()
{
  if (qword_1ECDBB9D8 != -1)
    dispatch_once(&qword_1ECDBB9D8, &__block_literal_global_64);
  return (id)_MergedGlobals_186;
}

void sub_18895313C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_188953278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ReadRowWithHash(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[5];
  id v15;

  v5 = a1;
  v6 = a3;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x3032000000;
  v14[3] = __Block_byref_object_copy__6;
  v14[4] = __Block_byref_object_dispose__6;
  v15 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __ReadRowWithHash_block_invoke;
  v9[3] = &unk_1E1C019E8;
  v7 = v5;
  v12 = v14;
  v13 = a2;
  v10 = v7;
  v8 = v6;
  v11 = v8;
  objc_msgSend(v7, "statementForKey:statementBlock:", CFSTR("ReadRowWithHash"), v9);

  _Block_object_dispose(v14, 8);
}

void sub_1889533A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18895359C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1889536E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188953B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188953FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_1889540D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1889545E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void ReadAllRows(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  _QWORD *v10;
  _QWORD v11[5];
  id v12;

  v3 = a1;
  v4 = a2;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x3032000000;
  v11[3] = __Block_byref_object_copy__6;
  v11[4] = __Block_byref_object_dispose__6;
  v12 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __ReadAllRows_block_invoke;
  v7[3] = &unk_1E1BFF998;
  v5 = v3;
  v8 = v5;
  v6 = v4;
  v9 = v6;
  v10 = v11;
  objc_msgSend(v5, "statementForKey:statementBlock:", CFSTR("ReadAllRows"), v7);

  _Block_object_dispose(v11, 8);
}

void sub_1889548BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188954CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188954DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_188959044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_188959204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_188959458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);

  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18895961C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18895977C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1889598AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_188959A10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_188959AB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_188959B5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_188959CE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL23GEOGetGEOPathMatcherLogv_block_invoke_0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.GeoServices", "GEOPathMatcher");
  v1 = (void *)_MergedGlobals_188;
  _MergedGlobals_188 = (uint64_t)v0;

}

void sub_18895B874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

id _GEOVisualLocalizationTileURLPathForKey(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;

  if ((*(_BYTE *)(a2 + 12) & 0x3F) == 2)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%u/%llu/%i/%i/%i"), 10867, *(_QWORD *)(a1 + 1), *(_DWORD *)(a1 + 10) & 0x1F, (*(_DWORD *)(a1 + 10) >> 5) & 0x1FFFFF, ((*(unsigned int *)(a1 + 10) | ((unint64_t)*(unsigned __int16 *)(a1 + 14) << 32)) >> 26) & 0x1FFFFF);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "dataUsingEncoding:", 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_geo_MD5Hash");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_geo_hexString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", vcvtps_u32_f32((float)(unint64_t)objc_msgSend(v7, "length") / 3.0));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "length"))
    {
      v9 = 0;
      do
      {
        if (objc_msgSend(v7, "length") - v9 <= 3)
          v10 = objc_msgSend(v7, "length") - v9;
        else
          v10 = 3;
        objc_msgSend(v7, "substringWithRange:", v9, v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "addObject:", v11);

        v9 += v10;
      }
      while (v9 < objc_msgSend(v7, "length"));
    }
    v12 = (void *)MEMORY[0x1E0CB3940];
    v13 = *(unsigned int *)(a2 + 8);
    v14 = *(_QWORD *)(a1 + 1);
    objc_msgSend(v8, "componentsJoinedByString:", CFSTR("/"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stringWithFormat:", CFSTR("%llu/%llu/t/%@/%i"), v13, v14, v15, *(unsigned __int8 *)(a1 + 9));
    v16 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%llu/%llu/tracks/%i/%i/%i/tracks_%i.vtrk"), *(unsigned int *)(a2 + 8), *(_QWORD *)(a1 + 1), *(_DWORD *)(a1 + 10) & 0x1F, (*(_DWORD *)(a1 + 10) >> 5) & 0x1FFFFF, ((*(unsigned int *)(a1 + 10) | ((unint64_t)*(unsigned __int16 *)(a1 + 14) << 32)) >> 26) & 0x1FFFFF, *(unsigned __int8 *)(a1 + 9));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v16;
}

void sub_18895DE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18895EB30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORRRequestResponseEventReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int v24;
  unint64_t v26;
  BOOL v27;
  int *v28;
  int v29;
  int v30;
  BOOL v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  int v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  void *v58;
  char v59;
  uint64_t v60;
  __int16 v61;
  char v62;
  int v63;
  __int16 v64;
  void *v65;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 88)), (uint16x4_t)0xFFFBFFFAFFF9FFF8), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 88) >> 4) & 1));
  while (1)
  {
    v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 | (v10 > 3);
  if (v9 & 1 | (v10 > 3) | v7 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  v16 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v15))
      goto LABEL_119;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *v14;
      v21 = *(_QWORD *)(v3 + v20);
      if (v21 == -1 || v21 >= *(_QWORD *)(v3 + *v6))
        break;
      v22 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v21);
      *(_QWORD *)(v3 + v20) = v21 + 1;
      v19 |= (unint64_t)(v22 & 0x7F) << v17;
      if ((v22 & 0x80) == 0)
        goto LABEL_24;
      v17 += 7;
      v23 = v18++ >= 9;
      if (v23)
      {
        v19 = 0;
        v24 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_24:
    v24 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v19 = 0;
LABEL_26:
    if (v24 || (v19 & 7) == 4)
    {
LABEL_119:
      if ((v12 & 1) != 0)
      {
        v62 = 1;
        goto LABEL_130;
      }
      if (v13)
      {
        while (1)
        {
          v63 = *v13++;
          v64 = 128;
          switch(v63)
          {
            case 0:
              goto LABEL_131;
            case 4:
              goto LABEL_127;
            case 5:
              v64 = 256;
              goto LABEL_127;
            case 7:
              v64 = 64;
              goto LABEL_127;
            case 8:
              v64 = 32;
              goto LABEL_127;
            case 9:
              v64 = 16;
LABEL_127:
              *(_WORD *)(a1 + 88) |= v64;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_131;
    }
    v26 = v19 >> 3;
    v27 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      v28 = v13;
      do
      {
        v30 = *v28++;
        v29 = v30;
        v27 = v30 != 0;
        if (v30)
          v31 = v29 == (_DWORD)v26;
        else
          v31 = 1;
      }
      while (!v31);
    }
    switch((int)v26)
    {
      case 1:
        if ((v7 & 1) == 0)
          goto LABEL_88;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        *(_WORD *)(a1 + 88) |= 2u;
        while (1)
        {
          v35 = *v14;
          v36 = *(_QWORD *)(v3 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(v3 + *v6))
            break;
          v37 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v36);
          *(_QWORD *)(v3 + v35) = v36 + 1;
          v34 |= (unint64_t)(v37 & 0x7F) << v32;
          if ((v37 & 0x80) == 0)
            goto LABEL_91;
          v32 += 7;
          v23 = v33++ >= 9;
          if (v23)
          {
            LODWORD(v34) = 0;
            goto LABEL_93;
          }
        }
        *(_BYTE *)(v3 + *v15) = 1;
LABEL_91:
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v34) = 0;
LABEL_93:
        v60 = 76;
        goto LABEL_98;
      case 2:
        if ((v7 & 1) == 0)
          goto LABEL_88;
        v39 = 0;
        v40 = 0;
        v34 = 0;
        *(_WORD *)(a1 + 88) |= 4u;
        while (2)
        {
          v41 = *v14;
          v42 = *(_QWORD *)(v3 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v42);
            *(_QWORD *)(v3 + v41) = v42 + 1;
            v34 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              v23 = v40++ >= 9;
              if (v23)
              {
                LODWORD(v34) = 0;
                goto LABEL_97;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v34) = 0;
LABEL_97:
        v60 = 80;
LABEL_98:
        *(_DWORD *)(a1 + v60) = v34;
        goto LABEL_118;
      case 3:
        if ((v7 & 1) == 0)
          goto LABEL_88;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_WORD *)(a1 + 88) |= 1u;
        while (2)
        {
          v47 = *v14;
          v48 = *(_QWORD *)(v3 + v47);
          if (v48 == -1 || v48 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v48);
            *(_QWORD *)(v3 + v47) = v48 + 1;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              v23 = v45++ >= 9;
              if (v23)
              {
                v46 = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          v46 = 0;
LABEL_102:
        *(_QWORD *)(a1 + 48) = v46;
        goto LABEL_118;
      case 4:
        if (!v27)
          goto LABEL_88;
        if ((*(_WORD *)(a1 + 88) & 0x80) == 0)
        {
          PBReaderReadString();
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = 40;
          goto LABEL_87;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_129;
        v61 = *(_WORD *)(a1 + 88) << 8;
        goto LABEL_117;
      case 5:
        if (!v27)
          goto LABEL_88;
        if ((*(_WORD *)(a1 + 88) & 0x100) == 0)
        {
          PBReaderReadString();
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = 56;
          goto LABEL_87;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_129;
        v61 = *(_WORD *)(a1 + 88) << 7;
        goto LABEL_117;
      case 6:
        if ((v7 & 1) == 0)
          goto LABEL_88;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        *(_WORD *)(a1 + 88) |= 8u;
        while (2)
        {
          v55 = *v14;
          v56 = *(_QWORD *)(v3 + v55);
          if (v56 == -1 || v56 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v56);
            *(_QWORD *)(v3 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              v23 = v53++ >= 9;
              if (v23)
              {
                v54 = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          v54 = 0;
LABEL_106:
        *(_BYTE *)(a1 + 84) = v54 != 0;
        goto LABEL_118;
      case 7:
        if (!v27)
          goto LABEL_88;
        if ((*(_WORD *)(a1 + 88) & 0x40) == 0)
        {
          PBReaderReadString();
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = 32;
          goto LABEL_87;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_129;
        v61 = *(_WORD *)(a1 + 88) << 9;
        goto LABEL_117;
      case 8:
        if (!v27)
          goto LABEL_88;
        if ((*(_WORD *)(a1 + 88) & 0x20) == 0)
        {
          PBReaderReadData();
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = 24;
          goto LABEL_87;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_129;
        v61 = *(_WORD *)(a1 + 88) << 10;
        goto LABEL_117;
      case 9:
        if (!v27)
        {
LABEL_88:
          v59 = PBReaderSkipValueWithTag();
          v15 = (int *)MEMORY[0x1E0D82BC8];
          if ((v59 & 1) == 0)
          {
LABEL_128:
            v62 = 0;
            goto LABEL_130;
          }
          goto LABEL_118;
        }
        if ((*(_WORD *)(a1 + 88) & 0x10) == 0)
        {
          PBReaderReadString();
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = 16;
LABEL_87:
          v58 = *(void **)(a1 + v51);
          *(_QWORD *)(a1 + v51) = v50;

          v15 = (int *)MEMORY[0x1E0D82BC8];
          --v8;
          goto LABEL_118;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v61 = *(_WORD *)(a1 + 88) << 11;
LABEL_117:
          v8 += v61 >> 15;
          v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_118:
          if (!(v12 & 1 | (v8 != 0)))
            goto LABEL_119;
          continue;
        }
LABEL_129:
        v62 = 0;
        v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_130:
        *(_WORD *)(a1 + 88) |= 0x80u;
        *(_WORD *)(a1 + 88) |= 0x100u;
        *(_WORD *)(a1 + 88) |= 0x40u;
        *(_WORD *)(a1 + 88) |= 0x20u;
        *(_WORD *)(a1 + 88) |= 0x10u;
        if ((v62 & 1) != 0)
        {
LABEL_131:
          v3 = *(_BYTE *)(v3 + *v15) == 0;
          if ((v12 & 1) != 0)
            goto LABEL_132;
        }
        else
        {
          v3 = 0;
          if ((v12 & 1) != 0)
          {
LABEL_132:
            v65 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v38 = PBReaderSkipValueWithTag();
        v15 = (int *)MEMORY[0x1E0D82BC8];
        if (!v38)
          goto LABEL_128;
        goto LABEL_118;
    }
  }
}

void sub_18895F4B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18895F670(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18895F7B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18895F8F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18896061C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORRRequestResponseEventReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORRRequestResponseEventReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORRRequestResponseEventReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORRRequestResponseEventReadAllFrom_initialTag;
  Specified = GEORRRequestResponseEventReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_1889607A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORRRequestResponseEventReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORRRequestResponseEventReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_188960808(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORRRequestResponseEventIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  _BOOL8 v37;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
              goto LABEL_55;
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            if (v24 == -1 || v24 >= *(_QWORD *)&a1[*v3])
              goto LABEL_55;
            v25 = v24 + 1;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            if (v29 == -1 || v29 >= *(_QWORD *)&a1[*v3])
              goto LABEL_55;
            v30 = v29 + 1;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 4u:
          if (v14 == 2)
            goto LABEL_61;
          goto LABEL_65;
        case 5u:
          if (v14 == 2)
            goto LABEL_61;
          goto LABEL_65;
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v32 = 0;
          break;
        case 7u:
          if (v14 == 2)
            goto LABEL_61;
          goto LABEL_65;
        case 8u:
          if (v14 == 2)
            goto LABEL_61;
          goto LABEL_65;
        case 9u:
          if (v14 == 2)
            goto LABEL_61;
          goto LABEL_65;
        default:
LABEL_61:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_65:
          v37 = 0;
          goto LABEL_64;
      }
      while (1)
      {
        v33 = *v2;
        v34 = *(_QWORD *)&a1[v33];
        if (v34 == -1 || v34 >= *(_QWORD *)&a1[*v3])
          break;
        v35 = v34 + 1;
        v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
        *(_QWORD *)&a1[v33] = v35;
        if (v36 < 0)
        {
          v21 = v32++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_62;
      }
LABEL_55:
      a1[*v4] = 1;
LABEL_62:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v37 = a1[*v4] == 0;
LABEL_64:
  PBReaderRecallMark();
  return v37;
}

void sub_188960DD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORRRequestResponseEventIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v2 = (*(_WORD *)(a1 + 88) & 0x3F0) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return v2;
}

void sub_188961264(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL _GEOTileResponseIsAllowableForKey(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  _BOOL8 IsAllowable;

  v11 = a6;
  v12 = a5;
  v13 = a4;
  v14 = a3;
  objc_msgSend(a2, "activeTileGroup");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "activeTileSetForKey:", a1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  IsAllowable = _GEOTileResponseIsAllowable(v16, v14, v13, v12, v11);
  return IsAllowable;
}

void GEOBackgroundTaskReportReportTaskInitiated(void *a1)
{
  id v1;
  void *v2;
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;
  uint8_t buf[16];

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __GEOBackgroundTaskReportReportTaskInitiated_block_invoke;
    v4[3] = &unk_1E1C02AC0;
    v5 = v2;
    v6 = v1;
    v3 = v2;
    geoAnalyticsSendEventLazy(CFSTR("com.apple.GeoServices.BackgroundTask"), v4);

  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: taskName.length > 0", buf, 2u);
  }

}

void ___calendar_block_invoke()
{
  id v0;
  uint64_t v1;
  void *v2;

  v0 = objc_alloc(MEMORY[0x1E0C99D48]);
  v1 = objc_msgSend(v0, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
  v2 = (void *)_MergedGlobals_189;
  _MergedGlobals_189 = v1;

}

BOOL GEOACResultReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v16;
  _BOOL8 v17;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v7 = v2[*v5];
      if (*(_QWORD *)&v2[*v3] >= *(_QWORD *)&v2[*v4])
        break;
      if (v2[*v5])
      {
        v7 = 1;
        break;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)&v2[v11];
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)&v2[*v4])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v12);
        *(_QWORD *)&v2[v11] = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_13;
        v8 += 7;
        if (v9++ >= 9)
        {
          LOBYTE(v10) = 0;
          v7 = v2[*v5];
          goto LABEL_15;
        }
      }
      v2[*v5] = 1;
LABEL_13:
      v7 = v2[*v5];
      if (v2[*v5])
        LOBYTE(v10) = 0;
LABEL_15:
      if (v7)
        v16 = 1;
      else
        v16 = (v10 & 7) == 4;
      if (v16)
        break;
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_20;
    }
    v17 = v7 == 0;
  }
  else
  {
LABEL_20:
    v17 = 0;
  }
  objc_sync_exit(v2);

  return v17;
}

void sub_188963F2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOACResultReadFrom(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  _BOOL8 AllFrom;

  v2 = a2;
  v3 = objc_sync_enter(v2);
  AllFrom = GEOACResultReadAllFrom(v3, v2);
  objc_sync_exit(v2);

  return AllFrom;
}

void sub_188963F84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOACResultIsValid(unsigned __int8 *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  int v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;
  _BOOL8 v16;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v6 = a1[*v4];
    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
      break;
    if (a1[*v4])
    {
      v6 = 1;
      break;
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *v2;
      v11 = *(_QWORD *)&a1[v10];
      v12 = v11 + 1;
      if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
        break;
      v13 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v11);
      *(_QWORD *)&a1[v10] = v12;
      v9 |= (unint64_t)(v13 & 0x7F) << v7;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v7 += 7;
      if (v8++ >= 9)
      {
        LOBYTE(v9) = 0;
        v6 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v6 = a1[*v4];
    if (a1[*v4])
      LOBYTE(v9) = 0;
LABEL_14:
    if (v6)
      v15 = 1;
    else
      v15 = (v9 & 7) == 4;
    if (v15)
      break;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
      v16 = 0;
      goto LABEL_22;
    }
  }
  v16 = v6 == 0;
LABEL_22:
  PBReaderRecallMark();
  return v16;
}

BOOL GEOCacheHitLogMessageReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v16;
  _BOOL8 v17;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v7 = v2[*v5];
      if (*(_QWORD *)&v2[*v3] >= *(_QWORD *)&v2[*v4])
        break;
      if (v2[*v5])
      {
        v7 = 1;
        break;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)&v2[v11];
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)&v2[*v4])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v12);
        *(_QWORD *)&v2[v11] = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_13;
        v8 += 7;
        if (v9++ >= 9)
        {
          LOBYTE(v10) = 0;
          v7 = v2[*v5];
          goto LABEL_15;
        }
      }
      v2[*v5] = 1;
LABEL_13:
      v7 = v2[*v5];
      if (v2[*v5])
        LOBYTE(v10) = 0;
LABEL_15:
      if (v7)
        v16 = 1;
      else
        v16 = (v10 & 7) == 4;
      if (v16)
        break;
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_20;
    }
    v17 = v7 == 0;
  }
  else
  {
LABEL_20:
    v17 = 0;
  }
  objc_sync_exit(v2);

  return v17;
}

void sub_1889643C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCacheHitLogMessageReadFrom(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  _BOOL8 AllFrom;

  v2 = a2;
  v3 = objc_sync_enter(v2);
  AllFrom = GEOCacheHitLogMessageReadAllFrom(v3, v2);
  objc_sync_exit(v2);

  return AllFrom;
}

void sub_18896441C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCacheHitLogMessageIsValid(unsigned __int8 *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  int v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;
  _BOOL8 v16;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v6 = a1[*v4];
    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
      break;
    if (a1[*v4])
    {
      v6 = 1;
      break;
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *v2;
      v11 = *(_QWORD *)&a1[v10];
      v12 = v11 + 1;
      if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
        break;
      v13 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v11);
      *(_QWORD *)&a1[v10] = v12;
      v9 |= (unint64_t)(v13 & 0x7F) << v7;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v7 += 7;
      if (v8++ >= 9)
      {
        LOBYTE(v9) = 0;
        v6 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v6 = a1[*v4];
    if (a1[*v4])
      LOBYTE(v9) = 0;
LABEL_14:
    if (v6)
      v15 = 1;
    else
      v15 = (v9 & 7) == 4;
    if (v15)
      break;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
      v16 = 0;
      goto LABEL_22;
    }
  }
  v16 = v6 == 0;
LABEL_22:
  PBReaderRecallMark();
  return v16;
}

BOOL GEODebugLogMessageReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v16;
  _BOOL8 v17;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v7 = v2[*v5];
      if (*(_QWORD *)&v2[*v3] >= *(_QWORD *)&v2[*v4])
        break;
      if (v2[*v5])
      {
        v7 = 1;
        break;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)&v2[v11];
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)&v2[*v4])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v12);
        *(_QWORD *)&v2[v11] = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_13;
        v8 += 7;
        if (v9++ >= 9)
        {
          LOBYTE(v10) = 0;
          v7 = v2[*v5];
          goto LABEL_15;
        }
      }
      v2[*v5] = 1;
LABEL_13:
      v7 = v2[*v5];
      if (v2[*v5])
        LOBYTE(v10) = 0;
LABEL_15:
      if (v7)
        v16 = 1;
      else
        v16 = (v10 & 7) == 4;
      if (v16)
        break;
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_20;
    }
    v17 = v7 == 0;
  }
  else
  {
LABEL_20:
    v17 = 0;
  }
  objc_sync_exit(v2);

  return v17;
}

void sub_18896485C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEODebugLogMessageReadFrom(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  _BOOL8 AllFrom;

  v2 = a2;
  v3 = objc_sync_enter(v2);
  AllFrom = GEODebugLogMessageReadAllFrom(v3, v2);
  objc_sync_exit(v2);

  return AllFrom;
}

void sub_1889648B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEODebugLogMessageIsValid(unsigned __int8 *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  int v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;
  _BOOL8 v16;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v6 = a1[*v4];
    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
      break;
    if (a1[*v4])
    {
      v6 = 1;
      break;
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *v2;
      v11 = *(_QWORD *)&a1[v10];
      v12 = v11 + 1;
      if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
        break;
      v13 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v11);
      *(_QWORD *)&a1[v10] = v12;
      v9 |= (unint64_t)(v13 & 0x7F) << v7;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v7 += 7;
      if (v8++ >= 9)
      {
        LOBYTE(v9) = 0;
        v6 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v6 = a1[*v4];
    if (a1[*v4])
      LOBYTE(v9) = 0;
LABEL_14:
    if (v6)
      v15 = 1;
    else
      v15 = (v9 & 7) == 4;
    if (v15)
      break;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
      v16 = 0;
      goto LABEL_22;
    }
  }
  v16 = v6 == 0;
LABEL_22:
  PBReaderRecallMark();
  return v16;
}

void sub_188964C58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEODirectionsFeedbackLogMessageReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  _BOOL4 v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  GEODirectionsFeedback *v37;
  int v38;
  void *v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  int v54;
  int v55;
  void *v56;
  _BOOL4 v58;
  BOOL v59;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 96));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 92);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 88));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 104) >> 3) & 1) + ((*(unsigned __int8 *)(a1 + 104) >> 4) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 & 1 | v11;
        if ((v14 != 0) | v8 & 1)
          v15 = 0;
        else
          v15 = a3;
        v16 = v14 != 0;
        if (v14)
          v17 = 1;
        else
          v17 = v15 == 0;
        v59 = v17;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_84;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_26;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_28;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_26:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_28:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_84:
      if (v16)
      {
        v52 = 1;
        goto LABEL_99;
      }
      if (!v15)
        goto LABEL_100;
      while (1)
      {
        v55 = *v15++;
        v54 = v55;
        if (v55 == 1)
          break;
        if (v54 == 2)
        {
          v53 = 16;
LABEL_90:
          *(_BYTE *)(a1 + 104) |= v53;
        }
        else if (!v54)
        {
          goto LABEL_100;
        }
      }
      v53 = 8;
      goto LABEL_90;
    }
    v31 = v23 >> 3;
    v32 = v16;
    if (!v59)
    {
      v33 = v15;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32 || (*(_BYTE *)(a1 + 104) & 8) != 0)
          goto LABEL_69;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_96;
        v58 = v16;
        v37 = objc_alloc_init(GEODirectionsFeedback);
        if (!GEODirectionsFeedbackReadAllFrom((uint64_t)v37, (void *)v3, v9 & 1))
          goto LABEL_97;
        PBReaderRecallMark();
        -[GEODirectionsFeedbackLogMessage _addNoFlagsDirectionsFeedback:](a1, v37);

        goto LABEL_52;
      case 2:
        if (!v32)
          goto LABEL_69;
        if ((*(_BYTE *)(a1 + 104) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_96:
            v52 = 0;
            goto LABEL_98;
          }
          v7 += *(unsigned __int8 *)(a1 + 104) << 27 >> 31;
          goto LABEL_77;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_96;
        v58 = v16;
        v37 = objc_alloc_init(GEOLocation);
        if (GEOLocationReadAllFrom((uint64_t)v37, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v39 = *(void **)(a1 + 80);
          *(_QWORD *)(a1 + 80) = v37;

          --v7;
LABEL_52:
          v16 = v58;
LABEL_77:
          v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_80:
          if (v7)
            v51 = 1;
          else
            v51 = v16;
          if ((v51 & 1) == 0)
            goto LABEL_84;
          continue;
        }
LABEL_97:

        v52 = 0;
        v16 = v58;
LABEL_98:
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_99:
        *(_BYTE *)(a1 + 104) |= 8u;
        *(_BYTE *)(a1 + 104) |= 0x10u;
        if ((v52 & 1) != 0)
        {
LABEL_100:
          v3 = *(_BYTE *)(v3 + *v19) == 0;
          if (v16)
            goto LABEL_101;
        }
        else
        {
          v3 = 0;
          if (v16)
          {
LABEL_101:
            v56 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_69;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        *(_BYTE *)(a1 + 104) |= 4u;
        while (2)
        {
          v43 = *v18;
          v44 = *(_QWORD *)(v3 + v43);
          v45 = v44 + 1;
          if (v44 == -1 || v45 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v44);
            *(_QWORD *)(v3 + v43) = v45;
            v42 |= (unint64_t)(v46 & 0x7F) << v40;
            if (v46 < 0)
            {
              v40 += 7;
              v28 = v41++ >= 9;
              if (v28)
              {
                v42 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v42 = 0;
LABEL_74:
        *(_BYTE *)(a1 + 100) = v42 != 0;
        goto LABEL_80;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_69;
        if (!PBReaderPlaceMark() || (GEONavigationAudioFeedbackReadAllFrom(a1 + 16, v3) & 1) == 0)
          goto LABEL_96;
        PBReaderRecallMark();
        *(_BYTE *)(a1 + 104) |= 1u;
        goto LABEL_77;
      case 5:
        if ((v8 & 1) != 0)
        {
          *(_BYTE *)(a1 + 104) |= 2u;
          v47 = *v18;
          v48 = *(_QWORD *)(v3 + v47);
          if (v48 <= 0xFFFFFFFFFFFFFFF7 && v48 + 8 <= *(_QWORD *)(v3 + *v6))
          {
            v49 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v48);
            *(_QWORD *)(v3 + v47) = v48 + 8;
          }
          else
          {
            *(_BYTE *)(v3 + *v19) = 1;
            v49 = 0;
          }
          *(_QWORD *)(a1 + 72) = v49;
        }
        else
        {
LABEL_69:
          v50 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v50 & 1) == 0)
          {
LABEL_95:
            v52 = 0;
            goto LABEL_99;
          }
        }
        goto LABEL_80;
      default:
        v38 = PBReaderSkipValueWithTag();
        v19 = (int *)MEMORY[0x1E0D82BC8];
        if (!v38)
          goto LABEL_95;
        goto LABEL_80;
    }
  }
}

void sub_1889655C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188965FB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEODirectionsFeedbackLogMessageCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(a1 + 64);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v8);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  return objc_msgSend(*(id *)(a1 + 80), "readAll:", 1);
}

uint64_t GEODirectionsFeedbackLogMessageReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 92))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEODirectionsFeedbackLogMessageReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 88) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 92) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEODirectionsFeedbackLogMessageReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEODirectionsFeedbackLogMessageReadAllFrom_initialTag;
  Specified = GEODirectionsFeedbackLogMessageReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEODirectionsFeedbackLogMessageCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  return Specified;
}

void sub_188966258(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEODirectionsFeedbackLogMessageReadFrom(uint64_t a1, void *a2)
{
  id v3;
  uint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEODirectionsFeedbackLogMessageReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889662B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEODirectionsFeedbackLogMessageIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BOOL8 v27;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 2 && PBReaderPlaceMark() && GEODirectionsFeedbackIsValid(a1))
            goto LABEL_40;
          goto LABEL_49;
        case 2u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLocationIsValid(a1))
            goto LABEL_49;
          goto LABEL_40;
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_49;
          v18 = 0;
          break;
        case 4u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEONavigationAudioFeedbackIsValid(a1))
            goto LABEL_49;
LABEL_40:
          PBReaderRecallMark();
          continue;
        case 5u:
          if (v16 != 1)
            goto LABEL_49;
          v24 = *v2;
          v25 = *(_QWORD *)&a1[v24];
          if (v25 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_46;
          v26 = v25 + 8;
          if (v26 > *(_QWORD *)&a1[*v3])
            goto LABEL_46;
          *(_QWORD *)&a1[v24] = v26;
          continue;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_49:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v19 = *v2;
        v20 = *(_QWORD *)&a1[v19];
        v21 = v20 + 1;
        if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
          break;
        v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
        *(_QWORD *)&a1[v19] = v21;
        if (v22 < 0 && v18++ <= 8)
          continue;
        goto LABEL_47;
      }
      v14 = *v4;
LABEL_46:
      a1[v14] = 1;
LABEL_47:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v27 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v27;
}

void sub_18896682C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEODirectionsFeedbackLogMessageIsDirty(uint64_t a1)
{
  char v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 96));
  v2 = *(_BYTE *)(a1 + 104);
  if ((v2 & 0x28) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 104) & 0x10) != 0)
  {
    if (GEOLocationIsDirty(*(os_unfair_lock_s **)(a1 + 80)))
      return 1;
    v2 = *(_BYTE *)(a1 + 104);
  }
  if ((v2 & 8) == 0)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v5 = *(id *)(a1 + 64);
  v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v6 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v5);
        if (GEODirectionsFeedbackIsDirty(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * i)))
        {
          v3 = 1;
          goto LABEL_19;
        }
      }
      v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_19:

  return v3;
}

os_unfair_lock_s *GEODirectionsFeedbackLogMessageIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEODirectionsFeedbackLogMessageIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 24);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEODirectionsFeedbackLogMessageClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  int HasSensitiveFields;
  void *v7;
  _DWORD *v8;

  if (a3
    && objc_msgSend(a1, "hasFinalLocation")
    && (objc_msgSend(a1, "finalLocation"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v5),
        v5,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "finalLocation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (_DWORD *)objc_msgSend(v7, "copy");

    GEOLocationClearSensitiveFields(v8);
    objc_msgSend(a1, "setFinalLocation:", v8);
  }
  else
  {
    objc_msgSend(a1, "finalLocation");
    v8 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

}

void *GEODirectionsFeedbackLogMessageHasSensitiveFields(void *result)
{
  void *v1;
  uint64_t HasSensitiveFields;

  if (result)
  {
    objc_msgSend(result, "finalLocation");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v1);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void sub_188967088(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMessageReadAllFrom(_BYTE *a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  unint64_t v20;
  GEOLogMsgEvent *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v5[*v8])
          goto LABEL_51;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v17 = v11++ >= 9;
          if (v17)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          goto LABEL_51;
        v20 = v12 >> 3;
        if ((v12 >> 3) == 2000)
          break;
        if ((_DWORD)v20 == 1000)
        {
          v29 = 0;
          v30 = 0;
          v24 = 0;
          a1[24] |= 2u;
          while (1)
          {
            v31 = *v6;
            v32 = *(_QWORD *)&v5[v31];
            v33 = v32 + 1;
            if (v32 == -1 || v33 > *(_QWORD *)&v5[*v7])
              break;
            v34 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v32);
            *(_QWORD *)&v5[v31] = v33;
            v24 |= (unint64_t)(v34 & 0x7F) << v29;
            if ((v34 & 0x80) == 0)
              goto LABEL_46;
            v29 += 7;
            v17 = v30++ >= 9;
            if (v17)
            {
              LODWORD(v24) = 0;
              goto LABEL_48;
            }
          }
          v5[*v8] = 1;
LABEL_46:
          if (v5[*v8])
            LODWORD(v24) = 0;
LABEL_48:
          v35 = 20;
LABEL_49:
          *(_DWORD *)&a1[v35] = v24;
          goto LABEL_50;
        }
        if ((_DWORD)v20 == 102)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_53;
          v21 = objc_alloc_init(GEOLogMsgEvent);
          if (!GEOLogMsgEventReadAllFrom((uint64_t)v21, v5, a3))
          {

            goto LABEL_53;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addLogMsgEvent:", v21, 0, 0);

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_53;
        }
LABEL_50:
        if (*(_QWORD *)&v5[*v6] >= *(_QWORD *)&v5[*v7])
          goto LABEL_51;
      }
      v22 = 0;
      v23 = 0;
      v24 = 0;
      a1[24] |= 1u;
      while (1)
      {
        v25 = *v6;
        v26 = *(_QWORD *)&v5[v25];
        v27 = v26 + 1;
        if (v26 == -1 || v27 > *(_QWORD *)&v5[*v7])
          break;
        v28 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v26);
        *(_QWORD *)&v5[v25] = v27;
        v24 |= (unint64_t)(v28 & 0x7F) << v22;
        if ((v28 & 0x80) == 0)
          goto LABEL_42;
        v22 += 7;
        v17 = v23++ >= 9;
        if (v17)
        {
          LODWORD(v24) = 0;
          goto LABEL_44;
        }
      }
      v5[*v8] = 1;
LABEL_42:
      if (v5[*v8])
        LODWORD(v24) = 0;
LABEL_44:
      v35 = 16;
      goto LABEL_49;
    }
LABEL_51:
    v36 = v5[*v8] == 0;
  }
  else
  {
LABEL_53:
    v36 = 0;
  }
  objc_sync_exit(v5);

  return v36;
}

void sub_188968854(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMessageReadFrom(_BYTE *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMessageReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889688B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMessageIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  _BOOL8 v29;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_44;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_44;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 2000)
        break;
      if ((_DWORD)v17 == 1000)
      {
        if ((v8 & 7) != 0)
          goto LABEL_46;
        v24 = 0;
        while (1)
        {
          v25 = *v2;
          v26 = *(_QWORD *)&a1[v25];
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
            goto LABEL_41;
          v28 = *(char *)(*(_QWORD *)&a1[*v5] + v26);
          *(_QWORD *)&a1[v25] = v27;
          if (v28 < 0)
          {
            v23 = v24++ > 8;
            if (!v23)
              continue;
          }
          goto LABEL_43;
        }
      }
      if ((_DWORD)v17 == 102)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOLogMsgEventIsValid(a1))
        {
LABEL_46:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_46;
      }
LABEL_43:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_44;
    }
    if ((v8 & 7) != 0)
      goto LABEL_46;
    v18 = 0;
    while (1)
    {
      v19 = *v2;
      v20 = *(_QWORD *)&a1[v19];
      v21 = v20 + 1;
      if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
        break;
      v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
      *(_QWORD *)&a1[v19] = v21;
      if (v22 < 0)
      {
        v23 = v18++ > 8;
        if (!v23)
          continue;
      }
      goto LABEL_43;
    }
LABEL_41:
    a1[*v4] = 1;
    goto LABEL_43;
  }
LABEL_44:
  v29 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v29;
}

unint64_t GEOLogMessageClearSensitiveFields(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t result;
  unint64_t i;
  uint64_t v8;
  void *v9;
  id *v10;

  result = objc_msgSend(*(id *)(a1 + 8), "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      objc_msgSend(*(id *)(a1 + 8), "objectAtIndexedSubscript:", i);
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = (void *)v8;
      if (a3 && GEOLogMsgEventHasSensitiveFields(v8, a2))
      {
        v10 = (id *)objc_msgSend(v9, "copy");
        GEOLogMsgEventClearSensitiveFields(v10, a2, 0);
        objc_msgSend(*(id *)(a1 + 8), "replaceObjectAtIndex:withObject:", i, v10);

      }
      else
      {
        objc_msgSend(v9, "clearSensitiveFields:", a2);
      }

      result = objc_msgSend(*(id *)(a1 + 8), "count");
    }
  }
  return result;
}

uint64_t GEOLogMessageHasSensitiveFields(void *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  objc_msgSend(a1, "logMsgEvents", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        if ((GEOLogMsgEventHasSensitiveFields(*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v7), a2) & 1) != 0)
        {
          v8 = 1;
          goto LABEL_12;
        }
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        continue;
      break;
    }
  }
  v8 = 0;
LABEL_12:

  return v8;
}

BOOL GEOLogMessageCollectionRequestReadAllFrom(void *a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v18;
  GEOLogMessage *v20;
  _BOOL8 v21;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          if (v11++ >= 9)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v20 = objc_alloc_init(GEOLogMessage);
          if (!GEOLogMessageReadAllFrom(v20, v5, a3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addLogMessage:", v20, 0, 0);

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v21 = v5[*v8] == 0;
  }
  else
  {
LABEL_27:
    v21 = 0;
  }
  objc_sync_exit(v5);

  return v21;
}

void sub_188969C7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMessageCollectionRequestReadFrom(void *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMessageCollectionRequestReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_188969CDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMessageCollectionRequestIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOLogMessageIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

unint64_t GEOLogMessageCollectionRequestClearSensitiveFields(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t result;
  unint64_t i;
  void *v8;
  void *v9;
  void *v10;

  result = objc_msgSend(*(id *)(a1 + 8), "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      objc_msgSend(*(id *)(a1 + 8), "objectAtIndexedSubscript:", i);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = v8;
      if (a3 && GEOLogMessageHasSensitiveFields(v8, a2))
      {
        v10 = (void *)objc_msgSend(v9, "copy");
        GEOLogMessageClearSensitiveFields((uint64_t)v10, a2, 0);
        objc_msgSend(*(id *)(a1 + 8), "replaceObjectAtIndex:withObject:", i, v10);

      }
      else
      {
        objc_msgSend(v9, "clearSensitiveFields:", a2);
      }

      result = objc_msgSend(*(id *)(a1 + 8), "count");
    }
  }
  return result;
}

uint64_t GEOLogMessageCollectionRequestHasSensitiveFields(void *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  objc_msgSend(a1, "logMessages", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        if ((GEOLogMessageHasSensitiveFields(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7), a2) & 1) != 0)
        {
          v8 = 1;
          goto LABEL_12;
        }
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        continue;
      break;
    }
  }
  v8 = 0;
LABEL_12:

  return v8;
}

BOOL GEOLogMessageCollectionResponseReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v16;
  _BOOL8 v17;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v7 = v2[*v5];
      if (*(_QWORD *)&v2[*v3] >= *(_QWORD *)&v2[*v4])
        break;
      if (v2[*v5])
      {
        v7 = 1;
        break;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)&v2[v11];
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)&v2[*v4])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v12);
        *(_QWORD *)&v2[v11] = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_13;
        v8 += 7;
        if (v9++ >= 9)
        {
          LOBYTE(v10) = 0;
          v7 = v2[*v5];
          goto LABEL_15;
        }
      }
      v2[*v5] = 1;
LABEL_13:
      v7 = v2[*v5];
      if (v2[*v5])
        LOBYTE(v10) = 0;
LABEL_15:
      if (v7)
        v16 = 1;
      else
        v16 = (v10 & 7) == 4;
      if (v16)
        break;
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_20;
    }
    v17 = v7 == 0;
  }
  else
  {
LABEL_20:
    v17 = 0;
  }
  objc_sync_exit(v2);

  return v17;
}

void sub_18896A89C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMessageCollectionResponseReadFrom(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  _BOOL8 AllFrom;

  v2 = a2;
  v3 = objc_sync_enter(v2);
  AllFrom = GEOLogMessageCollectionResponseReadAllFrom(v3, v2);
  objc_sync_exit(v2);

  return AllFrom;
}

void sub_18896A8F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMessageCollectionResponseIsValid(unsigned __int8 *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  int v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;
  _BOOL8 v16;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v6 = a1[*v4];
    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
      break;
    if (a1[*v4])
    {
      v6 = 1;
      break;
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *v2;
      v11 = *(_QWORD *)&a1[v10];
      v12 = v11 + 1;
      if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
        break;
      v13 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v11);
      *(_QWORD *)&a1[v10] = v12;
      v9 |= (unint64_t)(v13 & 0x7F) << v7;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v7 += 7;
      if (v8++ >= 9)
      {
        LOBYTE(v9) = 0;
        v6 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v6 = a1[*v4];
    if (a1[*v4])
      LOBYTE(v9) = 0;
LABEL_14:
    if (v6)
      v15 = 1;
    else
      v15 = (v9 & 7) == 4;
    if (v15)
      break;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
      v16 = 0;
      goto LABEL_22;
    }
  }
  v16 = v6 == 0;
LABEL_22:
  PBReaderRecallMark();
  return v16;
}

BOOL GEOMapLaunchDetailsReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v16;
  _BOOL8 v17;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v7 = v2[*v5];
      if (*(_QWORD *)&v2[*v3] >= *(_QWORD *)&v2[*v4])
        break;
      if (v2[*v5])
      {
        v7 = 1;
        break;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)&v2[v11];
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)&v2[*v4])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v12);
        *(_QWORD *)&v2[v11] = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_13;
        v8 += 7;
        if (v9++ >= 9)
        {
          LOBYTE(v10) = 0;
          v7 = v2[*v5];
          goto LABEL_15;
        }
      }
      v2[*v5] = 1;
LABEL_13:
      v7 = v2[*v5];
      if (v2[*v5])
        LOBYTE(v10) = 0;
LABEL_15:
      if (v7)
        v16 = 1;
      else
        v16 = (v10 & 7) == 4;
      if (v16)
        break;
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_20;
    }
    v17 = v7 == 0;
  }
  else
  {
LABEL_20:
    v17 = 0;
  }
  objc_sync_exit(v2);

  return v17;
}

void sub_18896AD34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapLaunchDetailsReadFrom(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  _BOOL8 AllFrom;

  v2 = a2;
  v3 = objc_sync_enter(v2);
  AllFrom = GEOMapLaunchDetailsReadAllFrom(v3, v2);
  objc_sync_exit(v2);

  return AllFrom;
}

void sub_18896AD8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapLaunchDetailsIsValid(unsigned __int8 *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  int v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;
  _BOOL8 v16;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v6 = a1[*v4];
    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
      break;
    if (a1[*v4])
    {
      v6 = 1;
      break;
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *v2;
      v11 = *(_QWORD *)&a1[v10];
      v12 = v11 + 1;
      if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
        break;
      v13 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v11);
      *(_QWORD *)&a1[v10] = v12;
      v9 |= (unint64_t)(v13 & 0x7F) << v7;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v7 += 7;
      if (v8++ >= 9)
      {
        LOBYTE(v9) = 0;
        v6 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v6 = a1[*v4];
    if (a1[*v4])
      LOBYTE(v9) = 0;
LABEL_14:
    if (v6)
      v15 = 1;
    else
      v15 = (v9 & 7) == 4;
    if (v15)
      break;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
      v16 = 0;
      goto LABEL_22;
    }
  }
  v16 = v6 == 0;
LABEL_22:
  PBReaderRecallMark();
  return v16;
}

void sub_18896B1DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18896B44C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSuggestionsUsageLogMessageReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v16;
  _BOOL8 v17;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v7 = v2[*v5];
      if (*(_QWORD *)&v2[*v3] >= *(_QWORD *)&v2[*v4])
        break;
      if (v2[*v5])
      {
        v7 = 1;
        break;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)&v2[v11];
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)&v2[*v4])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v12);
        *(_QWORD *)&v2[v11] = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_13;
        v8 += 7;
        if (v9++ >= 9)
        {
          LOBYTE(v10) = 0;
          v7 = v2[*v5];
          goto LABEL_15;
        }
      }
      v2[*v5] = 1;
LABEL_13:
      v7 = v2[*v5];
      if (v2[*v5])
        LOBYTE(v10) = 0;
LABEL_15:
      if (v7)
        v16 = 1;
      else
        v16 = (v10 & 7) == 4;
      if (v16)
        break;
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_20;
    }
    v17 = v7 == 0;
  }
  else
  {
LABEL_20:
    v17 = 0;
  }
  objc_sync_exit(v2);

  return v17;
}

void sub_18896B6D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSuggestionsUsageLogMessageReadFrom(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  _BOOL8 AllFrom;

  v2 = a2;
  v3 = objc_sync_enter(v2);
  AllFrom = GEOSuggestionsUsageLogMessageReadAllFrom(v3, v2);
  objc_sync_exit(v2);

  return AllFrom;
}

void sub_18896B728(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSuggestionsUsageLogMessageIsValid(unsigned __int8 *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  int v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;
  _BOOL8 v16;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v6 = a1[*v4];
    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
      break;
    if (a1[*v4])
    {
      v6 = 1;
      break;
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *v2;
      v11 = *(_QWORD *)&a1[v10];
      v12 = v11 + 1;
      if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
        break;
      v13 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v11);
      *(_QWORD *)&a1[v10] = v12;
      v9 |= (unint64_t)(v13 & 0x7F) << v7;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v7 += 7;
      if (v8++ >= 9)
      {
        LOBYTE(v9) = 0;
        v6 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v6 = a1[*v4];
    if (a1[*v4])
      LOBYTE(v9) = 0;
LABEL_14:
    if (v6)
      v15 = 1;
    else
      v15 = (v9 & 7) == 4;
    if (v15)
      break;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
      v16 = 0;
      goto LABEL_22;
    }
  }
  v16 = v6 == 0;
LABEL_22:
  PBReaderRecallMark();
  return v16;
}

BOOL GEOTileSetStateUsageLogMessageReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v16;
  _BOOL8 v17;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v7 = v2[*v5];
      if (*(_QWORD *)&v2[*v3] >= *(_QWORD *)&v2[*v4])
        break;
      if (v2[*v5])
      {
        v7 = 1;
        break;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)&v2[v11];
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)&v2[*v4])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v12);
        *(_QWORD *)&v2[v11] = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_13;
        v8 += 7;
        if (v9++ >= 9)
        {
          LOBYTE(v10) = 0;
          v7 = v2[*v5];
          goto LABEL_15;
        }
      }
      v2[*v5] = 1;
LABEL_13:
      v7 = v2[*v5];
      if (v2[*v5])
        LOBYTE(v10) = 0;
LABEL_15:
      if (v7)
        v16 = 1;
      else
        v16 = (v10 & 7) == 4;
      if (v16)
        break;
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_20;
    }
    v17 = v7 == 0;
  }
  else
  {
LABEL_20:
    v17 = 0;
  }
  objc_sync_exit(v2);

  return v17;
}

void sub_18896BB68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTileSetStateUsageLogMessageReadFrom(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  _BOOL8 AllFrom;

  v2 = a2;
  v3 = objc_sync_enter(v2);
  AllFrom = GEOTileSetStateUsageLogMessageReadAllFrom(v3, v2);
  objc_sync_exit(v2);

  return AllFrom;
}

void sub_18896BBC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTileSetStateUsageLogMessageIsValid(unsigned __int8 *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  int v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;
  _BOOL8 v16;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v6 = a1[*v4];
    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
      break;
    if (a1[*v4])
    {
      v6 = 1;
      break;
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *v2;
      v11 = *(_QWORD *)&a1[v10];
      v12 = v11 + 1;
      if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
        break;
      v13 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v11);
      *(_QWORD *)&a1[v10] = v12;
      v9 |= (unint64_t)(v13 & 0x7F) << v7;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v7 += 7;
      if (v8++ >= 9)
      {
        LOBYTE(v9) = 0;
        v6 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v6 = a1[*v4];
    if (a1[*v4])
      LOBYTE(v9) = 0;
LABEL_14:
    if (v6)
      v15 = 1;
    else
      v15 = (v9 & 7) == 4;
    if (v15)
      break;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
      v16 = 0;
      goto LABEL_22;
    }
  }
  v16 = v6 == 0;
LABEL_22:
  PBReaderRecallMark();
  return v16;
}

BOOL GEOTileSetUsageReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _BOOL8 v33;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v27 = 0;
          v28 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 1u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v20 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
            {
              v26 = &OBJC_IVAR___GEOTileSetUsage__count;
              goto LABEL_40;
            }
            v27 += 7;
            v25 = v28++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEOTileSetUsage__count;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOTileSetUsage__count;
LABEL_39:
          v3[*v6] = 1;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_48;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 2u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEOTileSetUsage__style;
              goto LABEL_39;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEOTileSetUsage__style;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOTileSetUsage__style;
        }
LABEL_40:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_42:
        *(_DWORD *)(a1 + *v26) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_18896E908(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTileSetUsageReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTileSetUsageReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18896E968(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTileSetUsageIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_39;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_39;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_41;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0)
          {
            v21 = v16++ > 8;
            if (!v21)
              continue;
          }
          goto LABEL_38;
        }
LABEL_36:
        a1[*v4] = 1;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        v27 = 0;
        goto LABEL_40;
      }
LABEL_38:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_39;
    }
    if ((v8 & 7) != 0)
      goto LABEL_41;
    v22 = 0;
    while (1)
    {
      v23 = *v2;
      v24 = *(_QWORD *)&a1[v23];
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
        goto LABEL_36;
      v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
      *(_QWORD *)&a1[v23] = v25;
      if (v26 < 0)
      {
        v21 = v22++ > 8;
        if (!v21)
          continue;
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  v27 = a1[*v4] == 0;
LABEL_40:
  PBReaderRecallMark();
  return v27;
}

BOOL GEOTimeToLeaveHypothesisLogMessageReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v16;
  _BOOL8 v17;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v7 = v2[*v5];
      if (*(_QWORD *)&v2[*v3] >= *(_QWORD *)&v2[*v4])
        break;
      if (v2[*v5])
      {
        v7 = 1;
        break;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)&v2[v11];
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)&v2[*v4])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v12);
        *(_QWORD *)&v2[v11] = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_13;
        v8 += 7;
        if (v9++ >= 9)
        {
          LOBYTE(v10) = 0;
          v7 = v2[*v5];
          goto LABEL_15;
        }
      }
      v2[*v5] = 1;
LABEL_13:
      v7 = v2[*v5];
      if (v2[*v5])
        LOBYTE(v10) = 0;
LABEL_15:
      if (v7)
        v16 = 1;
      else
        v16 = (v10 & 7) == 4;
      if (v16)
        break;
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_20;
    }
    v17 = v7 == 0;
  }
  else
  {
LABEL_20:
    v17 = 0;
  }
  objc_sync_exit(v2);

  return v17;
}

void sub_18896F118(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTimeToLeaveHypothesisLogMessageReadFrom(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  _BOOL8 AllFrom;

  v2 = a2;
  v3 = objc_sync_enter(v2);
  AllFrom = GEOTimeToLeaveHypothesisLogMessageReadAllFrom(v3, v2);
  objc_sync_exit(v2);

  return AllFrom;
}

void sub_18896F170(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTimeToLeaveHypothesisLogMessageIsValid(unsigned __int8 *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  int v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;
  _BOOL8 v16;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v6 = a1[*v4];
    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
      break;
    if (a1[*v4])
    {
      v6 = 1;
      break;
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *v2;
      v11 = *(_QWORD *)&a1[v10];
      v12 = v11 + 1;
      if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
        break;
      v13 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v11);
      *(_QWORD *)&a1[v10] = v12;
      v9 |= (unint64_t)(v13 & 0x7F) << v7;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v7 += 7;
      if (v8++ >= 9)
      {
        LOBYTE(v9) = 0;
        v6 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v6 = a1[*v4];
    if (a1[*v4])
      LOBYTE(v9) = 0;
LABEL_14:
    if (v6)
      v15 = 1;
    else
      v15 = (v9 & 7) == 4;
    if (v15)
      break;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
      v16 = 0;
      goto LABEL_22;
    }
  }
  v16 = v6 == 0;
LABEL_22:
  PBReaderRecallMark();
  return v16;
}

BOOL GEOTimeToLeaveInitialTravelTimeLogMessageReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v16;
  _BOOL8 v17;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v7 = v2[*v5];
      if (*(_QWORD *)&v2[*v3] >= *(_QWORD *)&v2[*v4])
        break;
      if (v2[*v5])
      {
        v7 = 1;
        break;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)&v2[v11];
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)&v2[*v4])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v12);
        *(_QWORD *)&v2[v11] = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_13;
        v8 += 7;
        if (v9++ >= 9)
        {
          LOBYTE(v10) = 0;
          v7 = v2[*v5];
          goto LABEL_15;
        }
      }
      v2[*v5] = 1;
LABEL_13:
      v7 = v2[*v5];
      if (v2[*v5])
        LOBYTE(v10) = 0;
LABEL_15:
      if (v7)
        v16 = 1;
      else
        v16 = (v10 & 7) == 4;
      if (v16)
        break;
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_20;
    }
    v17 = v7 == 0;
  }
  else
  {
LABEL_20:
    v17 = 0;
  }
  objc_sync_exit(v2);

  return v17;
}

void sub_18896F5B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTimeToLeaveInitialTravelTimeLogMessageReadFrom(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  _BOOL8 AllFrom;

  v2 = a2;
  v3 = objc_sync_enter(v2);
  AllFrom = GEOTimeToLeaveInitialTravelTimeLogMessageReadAllFrom(v3, v2);
  objc_sync_exit(v2);

  return AllFrom;
}

void sub_18896F608(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTimeToLeaveInitialTravelTimeLogMessageIsValid(unsigned __int8 *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  int v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;
  _BOOL8 v16;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v6 = a1[*v4];
    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
      break;
    if (a1[*v4])
    {
      v6 = 1;
      break;
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *v2;
      v11 = *(_QWORD *)&a1[v10];
      v12 = v11 + 1;
      if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
        break;
      v13 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v11);
      *(_QWORD *)&a1[v10] = v12;
      v9 |= (unint64_t)(v13 & 0x7F) << v7;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v7 += 7;
      if (v8++ >= 9)
      {
        LOBYTE(v9) = 0;
        v6 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v6 = a1[*v4];
    if (a1[*v4])
      LOBYTE(v9) = 0;
LABEL_14:
    if (v6)
      v15 = 1;
    else
      v15 = (v9 & 7) == 4;
    if (v15)
      break;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
      v16 = 0;
      goto LABEL_22;
    }
  }
  v16 = v6 == 0;
LABEL_22:
  PBReaderRecallMark();
  return v16;
}

void sub_18897148C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1889715B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1889716E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1889719A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_188971ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_188971C50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_188971CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_188971DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_188971F84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_188972010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_188972110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1889721EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1889722C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18897238C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_188972460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_188972560(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1889726A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1889727F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_188972874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1889728F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_188972CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;

  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_188972DA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_188972E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1889731F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1889732EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_188973614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_188973770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_188973844(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18897390C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_188973A50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<-[GEOFeature attributes]::$_0 &&>>(uint64_t **a1)
{
  uint64_t v1;
  GEOFeatureStyleAttributes *v2;
  void *v3;

  v1 = **a1;
  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    v2 = -[GEOFeatureStyleAttributes initWithFeatureStyleAttributesConstPtr:]([GEOFeatureStyleAttributes alloc], "initWithFeatureStyleAttributesConstPtr:", *(_QWORD *)(*(_QWORD *)v1 + 16) + 24);
    v3 = *(void **)(*(_QWORD *)v1 + 32);
    *(_QWORD *)(*(_QWORD *)v1 + 32) = v2;

  }
}

void sub_1889740F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPIncidentAnnotationDetailsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  GEORPUserLocationDetails *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  void *v52;
  char v53;
  uint64_t v54;
  char v55;
  char v56;
  int v57;
  char v58;
  void *v59;
  char v61;
  char v62;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 60) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 1;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v62 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v20 = 0x1EDF0A000uLL;
        v61 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_89;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v17;
      v25 = *(_QWORD *)(v3 + v24);
      if (v25 == -1 || v25 >= *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v25);
      *(_QWORD *)(v3 + v24) = v25 + 1;
      v23 |= (unint64_t)(v26 & 0x7F) << v21;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      v27 = v22++ >= 9;
      if (v27)
      {
        v23 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v23 = 0;
LABEL_25:
    if (v28 || (v23 & 7) == 4)
    {
LABEL_89:
      if ((v15 & 1) != 0)
      {
        v56 = 1;
        goto LABEL_100;
      }
      if (v16)
      {
        while (1)
        {
          v57 = *v16++;
          v58 = 16;
          switch(v57)
          {
            case 0:
              goto LABEL_101;
            case 1:
              goto LABEL_95;
            case 2:
              v58 = 4;
              goto LABEL_95;
            case 5:
              v58 = 8;
LABEL_95:
              *(_BYTE *)(a1 + *(int *)(v20 + 3828)) |= v58;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_101;
    }
    v30 = v23 >> 3;
    v31 = v15;
    if ((v62 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31)
          goto LABEL_69;
        if ((*(_BYTE *)(a1 + *(int *)(v20 + 3828)) & 0x10) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_97;
          v36 = objc_alloc_init(GEORPUserLocationDetails);
          if (GEORPUserLocationDetailsReadAllFrom((uint64_t)v36, (void *)v3, v9 & 1))
          {
            PBReaderRecallMark();
            v37 = 32;
            goto LABEL_68;
          }
          goto LABEL_98;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_97;
        v55 = 8 * *(_BYTE *)(a1 + *(int *)(v20 + 3828));
        goto LABEL_86;
      case 2:
        if (!v31)
          goto LABEL_69;
        if ((*(_BYTE *)(a1 + *(int *)(v20 + 3828)) & 4) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v39;

          --v7;
          goto LABEL_87;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_97;
        v55 = 32 * *(_BYTE *)(a1 + *(int *)(v20 + 3828));
        goto LABEL_86;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_69;
        v41 = 0;
        v42 = 0;
        v43 = 0;
        *(_BYTE *)(a1 + *(int *)(v20 + 3828)) |= 1u;
        while (2)
        {
          v44 = *v17;
          v45 = *(_QWORD *)(v3 + v44);
          if (v45 == -1 || v45 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v45);
            *(_QWORD *)(v3 + v44) = v45 + 1;
            v43 |= (unint64_t)(v46 & 0x7F) << v41;
            if (v46 < 0)
            {
              v41 += 7;
              v27 = v42++ >= 9;
              if (v27)
              {
                LODWORD(v43) = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v43) = 0;
LABEL_74:
        v54 = 52;
        goto LABEL_79;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_69;
        v47 = 0;
        v48 = 0;
        v43 = 0;
        *(_BYTE *)(a1 + *(int *)(v20 + 3828)) |= 2u;
        while (2)
        {
          v49 = *v17;
          v50 = *(_QWORD *)(v3 + v49);
          if (v50 == -1 || v50 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v50);
            *(_QWORD *)(v3 + v49) = v50 + 1;
            v43 |= (unint64_t)(v51 & 0x7F) << v47;
            if (v51 < 0)
            {
              v47 += 7;
              v27 = v48++ >= 9;
              if (v27)
              {
                LODWORD(v43) = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v43) = 0;
LABEL_78:
        v54 = 56;
LABEL_79:
        *(_DWORD *)(a1 + v54) = v43;
        goto LABEL_88;
      case 5:
        if (!v31)
        {
LABEL_69:
          v53 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v61;
          if ((v53 & 1) == 0)
          {
LABEL_96:
            v56 = 0;
            goto LABEL_100;
          }
LABEL_88:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_89;
          continue;
        }
        if ((*(_BYTE *)(a1 + *(int *)(v20 + 3828)) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_97:
            v56 = 0;
            goto LABEL_99;
          }
          v55 = 16 * *(_BYTE *)(a1 + *(int *)(v20 + 3828));
LABEL_86:
          v7 += v55 >> 7;
          goto LABEL_87;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_97;
        v36 = objc_alloc_init(GEOLatLng);
        if (GEOLatLngReadAllFrom((uint64_t)v36, (void *)v3))
        {
          PBReaderRecallMark();
          v37 = 24;
LABEL_68:
          v52 = *(void **)(a1 + v37);
          *(_QWORD *)(a1 + v37) = v36;

          --v7;
          v20 = 0x1EDF0A000;
LABEL_87:
          v15 = v61;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_88;
        }
LABEL_98:

        v56 = 0;
        v20 = 0x1EDF0A000uLL;
LABEL_99:
        v15 = v61;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_100:
        *(_BYTE *)(a1 + *(int *)(v20 + 3828)) |= 0x10u;
        *(_BYTE *)(a1 + *(int *)(v20 + 3828)) |= 4u;
        *(_BYTE *)(a1 + *(int *)(v20 + 3828)) |= 8u;
        if ((v56 & 1) != 0)
        {
LABEL_101:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_102;
        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
          {
LABEL_102:
            v59 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v38 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v61;
        if (!v38)
          goto LABEL_96;
        goto LABEL_88;
    }
  }
}

void sub_1889748D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188974F00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18897588C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPIncidentAnnotationDetailsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPIncidentAnnotationDetailsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPIncidentAnnotationDetailsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPIncidentAnnotationDetailsReadAllFrom_initialTag;
  Specified = GEORPIncidentAnnotationDetailsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188975A40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPIncidentAnnotationDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPIncidentAnnotationDetailsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_188975AA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPIncidentAnnotationDetailsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v14 == 2 && PBReaderPlaceMark() && GEORPUserLocationDetailsIsValid(a1))
            goto LABEL_46;
          goto LABEL_50;
        case 2u:
          if (v14 == 2)
            goto LABEL_24;
          goto LABEL_50;
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_50;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
              goto LABEL_42;
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_47;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_50;
          v22 = 0;
          break;
        case 5u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_50;
LABEL_46:
          PBReaderRecallMark();
          continue;
        default:
LABEL_24:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_50:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v23 = *v2;
        v24 = *(_QWORD *)&a1[v23];
        if (v24 == -1 || v24 >= *(_QWORD *)&a1[*v3])
          break;
        v25 = v24 + 1;
        v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
        *(_QWORD *)&a1[v23] = v25;
        if (v26 < 0)
        {
          v21 = v22++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_47;
      }
LABEL_42:
      a1[*v4] = 1;
LABEL_47:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v27 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v27;
}

BOOL GEORPUserLocationDetailsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  _BOOL8 v16;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEORPTimestampIsValid(a1))
            goto LABEL_31;
          goto LABEL_28;
        case 2u:
        case 3u:
        case 4u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOLocationIsValid(a1))
            goto LABEL_31;
LABEL_28:
          PBReaderRecallMark();
          goto LABEL_29;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_31:
            PBReaderRecallMark();
            return 0;
          }
LABEL_29:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_30;
          break;
      }
    }
  }
LABEL_30:
  v16 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v16;
}

void sub_188976168(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPIncidentAnnotationDetailsIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = *(unsigned __int8 *)(a1 + 60);
  if ((v2 & 0x20) != 0)
    return 1;
  if ((v2 & 0x10) != 0)
  {
    if ((GEORPUserLocationDetailsIsDirty(*(os_unfair_lock_s **)(a1 + 32)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 60);
  }
  if ((v2 & 4) == 0)
    return (v2 >> 3) & 1;
  return 1;
}

os_unfair_lock_s *GEORPIncidentAnnotationDetailsIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPIncidentAnnotationDetailsIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEORPIncidentAnnotationDetailsClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  int HasSensitiveFields;
  void *v7;
  id *v8;

  if (a3
    && objc_msgSend(a1, "hasUserLocation")
    && (objc_msgSend(a1, "userLocation"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEORPUserLocationDetailsHasSensitiveFields((uint64_t)v5),
        v5,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "userLocation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (id *)objc_msgSend(v7, "copy");

    GEORPUserLocationDetailsClearSensitiveFields(v8, a2, 0);
    objc_msgSend(a1, "setUserLocation:", v8);
  }
  else
  {
    objc_msgSend(a1, "userLocation");
    v8 = (id *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

}

void *GEORPIncidentAnnotationDetailsHasSensitiveFields(void *result)
{
  void *v1;
  uint64_t HasSensitiveFields;

  if (result)
  {
    objc_msgSend(result, "userLocation");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEORPUserLocationDetailsHasSensitiveFields((uint64_t)v1);

    return (void *)HasSensitiveFields;
  }
  return result;
}

uint64_t GEORPUserLocationDetailsHasSensitiveFields(uint64_t result)
{
  void *v1;
  void *v2;
  void *v3;
  char HasSensitiveFields;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = (void *)result;
    objc_msgSend((id)result, "currentUserLocation");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (GEOLocationHasSensitiveFields((uint64_t)v2))
    {

      return 1;
    }
    objc_msgSend(v1, "lastKnownRoadLocation");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v3);

    if ((HasSensitiveFields & 1) != 0)
      return 1;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    objc_msgSend(v1, "deviceHistoricalLocations", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v11;
      while (2)
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v11 != v8)
            objc_enumerationMutation(v5);
          if ((GEOLocationHasSensitiveFields(*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v9)) & 1) != 0)
          {

            return 1;
          }
          ++v9;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v7)
          continue;
        break;
      }
    }

    return 0;
  }
  return result;
}

unint64_t GEORPUserLocationDetailsClearSensitiveFields(id *a1, uint64_t a2, int a3)
{
  void *v6;
  int HasSensitiveFields;
  void *v8;
  _DWORD *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  _DWORD *v14;
  unint64_t result;
  unint64_t i;
  uint64_t v17;
  void *v18;
  _DWORD *v19;

  if (a3)
  {
    if (objc_msgSend(a1, "hasCurrentUserLocation")
      && (objc_msgSend(a1, "currentUserLocation"),
          v6 = (void *)objc_claimAutoreleasedReturnValue(),
          HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v6),
          v6,
          HasSensitiveFields))
    {
      objc_msgSend(a1, "currentUserLocation");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = (_DWORD *)objc_msgSend(v8, "copy");

      GEOLocationClearSensitiveFields(v9);
      objc_msgSend(a1, "setCurrentUserLocation:", v9);
    }
    else
    {
      objc_msgSend(a1, "currentUserLocation");
      v9 = (_DWORD *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "clearSensitiveFields:", a2);
    }

    if (objc_msgSend(a1, "hasLastKnownRoadLocation"))
    {
      objc_msgSend(a1, "lastKnownRoadLocation");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = GEOLocationHasSensitiveFields((uint64_t)v11);

      if (v12)
      {
        objc_msgSend(a1, "lastKnownRoadLocation");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = (_DWORD *)objc_msgSend(v13, "copy");

        GEOLocationClearSensitiveFields(v14);
        objc_msgSend(a1, "setLastKnownRoadLocation:", v14);
        goto LABEL_11;
      }
    }
  }
  else
  {
    objc_msgSend(a1, "currentUserLocation");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "clearSensitiveFields:", a2);

  }
  objc_msgSend(a1, "lastKnownRoadLocation");
  v14 = (_DWORD *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "clearSensitiveFields:", a2);
LABEL_11:

  -[GEORPUserLocationDetails _readDeviceHistoricalLocations]((uint64_t)a1);
  result = objc_msgSend(a1[4], "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      objc_msgSend(a1[4], "objectAtIndexedSubscript:", i);
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = (void *)v17;
      if (a3 && GEOLocationHasSensitiveFields(v17))
      {
        v19 = (_DWORD *)objc_msgSend(v18, "copy");
        GEOLocationClearSensitiveFields(v19);
        objc_msgSend(a1[4], "replaceObjectAtIndex:withObject:", i, v19);

      }
      else
      {
        objc_msgSend(v18, "clearSensitiveFields:", a2);
      }

      result = objc_msgSend(a1[4], "count");
    }
  }
  return result;
}

void sub_188976A10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188977064(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPIncidentFeedbackReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  int v42;
  GEORPNewIncidentDetails *v43;
  uint64_t v44;
  void *v45;
  char v46;
  char v47;
  char v48;
  int v49;
  char v50;
  void *v51;
  char v53;
  char v54;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 64)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 2;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v54 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v20 = 0x1EDF0A000uLL;
        v53 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_85;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v17;
      v25 = *(_QWORD *)(v3 + v24);
      if (v25 == -1 || v25 >= *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v25);
      *(_QWORD *)(v3 + v24) = v25 + 1;
      v23 |= (unint64_t)(v26 & 0x7F) << v21;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      v27 = v22++ >= 9;
      if (v27)
      {
        v23 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v23 = 0;
LABEL_25:
    if (v28 || (v23 & 7) == 4)
    {
LABEL_85:
      if ((v15 & 1) != 0)
      {
        v48 = 1;
        goto LABEL_97;
      }
      if (v16)
      {
        while (1)
        {
          v49 = *v16++;
          v50 = 4;
          switch(v49)
          {
            case 0:
              goto LABEL_98;
            case 2:
              goto LABEL_92;
            case 3:
              v50 = 2;
              goto LABEL_92;
            case 4:
              v50 = 8;
              goto LABEL_92;
            case 5:
              v50 = 16;
LABEL_92:
              *(_BYTE *)(a1 + *(int *)(v20 + 3840)) |= v50;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_98;
    }
    v30 = v23 >> 3;
    v31 = v15;
    if ((v54 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_68;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        *(_BYTE *)(a1 + *(int *)(v20 + 3840)) |= 1u;
        while (1)
        {
          v39 = *v17;
          v40 = *(_QWORD *)(v3 + v39);
          if (v40 == -1 || v40 >= *(_QWORD *)(v3 + *v6))
            break;
          v41 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v40);
          *(_QWORD *)(v3 + v39) = v40 + 1;
          v38 |= (unint64_t)(v41 & 0x7F) << v36;
          if ((v41 & 0x80) == 0)
            goto LABEL_71;
          v36 += 7;
          v27 = v37++ >= 9;
          if (v27)
          {
            LODWORD(v38) = 0;
            goto LABEL_73;
          }
        }
        *(_BYTE *)(v3 + *v18) = 1;
LABEL_71:
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_73:
        *(_DWORD *)(a1 + 60) = v38;
        goto LABEL_84;
      case 2:
        if (!v31)
          goto LABEL_68;
        if ((*(_BYTE *)(a1 + *(int *)(v20 + 3840)) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_94;
          v47 = 32 * *(_BYTE *)(a1 + *(int *)(v20 + 3840));
          goto LABEL_82;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_94;
        v43 = objc_alloc_init(GEORPNewIncidentDetails);
        if (!GEORPNewIncidentDetailsReadAllFrom((uint64_t)v43, (void *)v3, v9 & 1))
          goto LABEL_95;
        PBReaderRecallMark();
        v44 = 24;
        goto LABEL_67;
      case 3:
        if (!v31)
          goto LABEL_68;
        if ((*(_BYTE *)(a1 + *(int *)(v20 + 3840)) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_94;
          v47 = *(_BYTE *)(a1 + *(int *)(v20 + 3840)) << 6;
          goto LABEL_82;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_94;
        v43 = objc_alloc_init(GEORPIncidentAnnotationDetails);
        if (!GEORPIncidentAnnotationDetailsReadAllFrom((uint64_t)v43, (void *)v3, v9 & 1))
          goto LABEL_95;
        PBReaderRecallMark();
        v44 = 16;
        goto LABEL_67;
      case 4:
        if (!v31)
          goto LABEL_68;
        if ((*(_BYTE *)(a1 + *(int *)(v20 + 3840)) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_94;
          v47 = 16 * *(_BYTE *)(a1 + *(int *)(v20 + 3840));
          goto LABEL_82;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_94;
        v43 = objc_alloc_init(GEORPSiriContext);
        if (!GEORPSiriContextReadAllFrom((uint64_t)v43, (void *)v3, v9 & 1))
          goto LABEL_95;
        PBReaderRecallMark();
        v44 = 32;
        goto LABEL_67;
      case 5:
        if (!v31)
        {
LABEL_68:
          v46 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v53;
          if ((v46 & 1) == 0)
          {
LABEL_93:
            v48 = 0;
            goto LABEL_97;
          }
LABEL_84:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_85;
          continue;
        }
        if ((*(_BYTE *)(a1 + *(int *)(v20 + 3840)) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_94:
            v48 = 0;
            goto LABEL_96;
          }
          v47 = 8 * *(_BYTE *)(a1 + *(int *)(v20 + 3840));
LABEL_82:
          v7 += v47 >> 7;
          goto LABEL_83;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_94;
        v43 = objc_alloc_init(GEORPIncidentUserPath);
        if (GEORPIncidentUserPathReadAllFrom((uint64_t)v43, (void *)v3))
        {
          PBReaderRecallMark();
          v44 = 40;
LABEL_67:
          v45 = *(void **)(a1 + v44);
          *(_QWORD *)(a1 + v44) = v43;

          --v7;
          v20 = 0x1EDF0A000;
LABEL_83:
          v15 = v53;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_84;
        }
LABEL_95:

        v48 = 0;
        v20 = 0x1EDF0A000uLL;
LABEL_96:
        v15 = v53;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_97:
        *(_BYTE *)(a1 + *(int *)(v20 + 3840)) |= 4u;
        *(_BYTE *)(a1 + *(int *)(v20 + 3840)) |= 2u;
        *(_BYTE *)(a1 + *(int *)(v20 + 3840)) |= 8u;
        *(_BYTE *)(a1 + *(int *)(v20 + 3840)) |= 0x10u;
        if ((v48 & 1) != 0)
        {
LABEL_98:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_99;
        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
          {
LABEL_99:
            v51 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v42 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v53;
        if (!v42)
          goto LABEL_93;
        goto LABEL_84;
    }
  }
}

void sub_188977868(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889779A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188977AE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188978218(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPIncidentFeedbackCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  objc_msgSend(a1[3], "readAll:", 1);
  objc_msgSend(a1[2], "readAll:", 1);
  objc_msgSend(a1[4], "readAll:", 1);
  return objc_msgSend(a1[5], "readAll:", 1);
}

unint64_t GEORPIncidentFeedbackReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPIncidentFeedbackReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPIncidentFeedbackReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPIncidentFeedbackReadAllFrom_initialTag;
  Specified = GEORPIncidentFeedbackReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEORPIncidentFeedbackCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_188978414(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPIncidentFeedbackReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPIncidentFeedbackReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_188978474(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPIncidentFeedbackIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_49;
          v16 = 0;
          do
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
              goto LABEL_45;
            }
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if ((v20 & 0x80000000) == 0)
              break;
          }
          while (v16++ <= 8);
          goto LABEL_45;
        case 2u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEORPNewIncidentDetailsIsValid(a1))
            goto LABEL_49;
          goto LABEL_44;
        case 3u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEORPIncidentAnnotationDetailsIsValid(a1))
            goto LABEL_49;
          goto LABEL_44;
        case 4u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEORPSiriContextIsValid(a1))
            goto LABEL_49;
          goto LABEL_44;
        case 5u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEORPIncidentUserPathIsValid(a1))
            goto LABEL_49;
LABEL_44:
          PBReaderRecallMark();
          goto LABEL_45;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_49:
            PBReaderRecallMark();
            return 0;
          }
LABEL_45:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_48;
          break;
      }
    }
  }
LABEL_48:
  v22 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v22;
}

BOOL GEORPNewIncidentDetailsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_41;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        goto LABEL_41;
      v16 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v16 == 2)
      {
        if (v14 != 2 || !PBReaderPlaceMark() || !GEORPUserLocationDetailsIsValid(a1))
          goto LABEL_43;
LABEL_36:
        PBReaderRecallMark();
        goto LABEL_40;
      }
      if ((_DWORD)v16 == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_43;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 == -1 || v19 >= *(_QWORD *)&a1[*v3])
            break;
          v20 = v19 + 1;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8)
            continue;
          goto LABEL_40;
        }
        a1[*v4] = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_43;
      }
LABEL_40:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_41;
    }
    if (v14 != 2 || !PBReaderPlaceMark() || !GEORPIncidentLocationIsValid(a1))
    {
LABEL_43:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_36;
  }
LABEL_41:
  v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

BOOL GEORPSiriContextIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  _BOOL8 v16;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_27;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        goto LABEL_27;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v14 != 2)
          goto LABEL_29;
        goto LABEL_23;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_29:
        v16 = 0;
        goto LABEL_28;
      }
LABEL_26:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_27;
    }
    if (v14 != 2)
      goto LABEL_29;
LABEL_23:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_29;
    goto LABEL_26;
  }
LABEL_27:
  v16 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v16;
}

BOOL GEORPIncidentUserPathIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  _BOOL8 v42;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v12 = v7++ >= 9;
        if (v12)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v14 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_68;
            while (1)
            {
LABEL_56:
              if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || (v37 = a1[*v4], a1[*v4]))
              {
                PBReaderRecallMark();
                goto LABEL_53;
              }
              while (1)
              {
                v38 = *v2;
                v39 = *(_QWORD *)&a1[v38];
                if (v39 == -1 || v39 >= *(_QWORD *)&a1[*v3])
                  break;
                v40 = v39 + 1;
                v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
                *(_QWORD *)&a1[v38] = v40;
                if (v41 < 0)
                {
                  v12 = v37++ >= 9;
                  if (!v12)
                    continue;
                }
                goto LABEL_56;
              }
              a1[*v4] = 1;
            }
          }
          if ((v8 & 7) != 0)
            goto LABEL_68;
          while (1)
          {
            v16 = *v2;
            v17 = *(_QWORD *)&a1[v16];
            if (v17 == -1 || v17 >= *(_QWORD *)&a1[*v3])
              goto LABEL_52;
            v18 = v17 + 1;
            v19 = *(char *)(*(_QWORD *)&a1[*v5] + v17);
            *(_QWORD *)&a1[v16] = v18;
            if (v19 < 0)
            {
              v20 = v14++;
              if (v20 <= 8)
                continue;
            }
            goto LABEL_53;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_68;
          v21 = 0;
          while (1)
          {
            v22 = *v2;
            v23 = *(_QWORD *)&a1[v22];
            if (v23 == -1 || v23 >= *(_QWORD *)&a1[*v3])
              goto LABEL_52;
            v24 = v23 + 1;
            v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
            *(_QWORD *)&a1[v22] = v24;
            if (v25 < 0)
            {
              v26 = v21++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_53;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_68;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            if (v29 == -1 || v29 >= *(_QWORD *)&a1[*v3])
              goto LABEL_52;
            v30 = v29 + 1;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v26 = v27++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_53;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_68;
          v32 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_68:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v33 = *v2;
        v34 = *(_QWORD *)&a1[v33];
        if (v34 == -1 || v34 >= *(_QWORD *)&a1[*v3])
          break;
        v35 = v34 + 1;
        v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
        *(_QWORD *)&a1[v33] = v35;
        if (v36 < 0)
        {
          v26 = v32++ > 8;
          if (!v26)
            continue;
        }
        goto LABEL_53;
      }
LABEL_52:
      a1[*v4] = 1;
LABEL_53:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v42 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v42;
}

void sub_1889790EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPIncidentFeedbackIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = *(unsigned __int8 *)(a1 + 64);
  if ((v2 & 0x20) != 0)
    return 1;
  if ((v2 & 4) != 0)
  {
    if ((GEORPNewIncidentDetailsIsDirty(*(os_unfair_lock_s **)(a1 + 24)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 64);
  }
  if ((v2 & 2) == 0)
    goto LABEL_8;
  if ((GEORPIncidentAnnotationDetailsIsDirty(*(os_unfair_lock_s **)(a1 + 16)) & 1) != 0)
    return 1;
  v2 = *(unsigned __int8 *)(a1 + 64);
LABEL_8:
  if ((v2 & 8) != 0)
  {
    if (GEORPSiriContextIsDirty(*(_QWORD *)(a1 + 32)))
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 64);
  }
  return (v2 >> 4) & 1;
}

os_unfair_lock_s *GEORPIncidentFeedbackIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPIncidentFeedbackIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEORPIncidentFeedbackClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  void *v13;
  void *v14;
  id v15;

  if (!a3)
  {
    v10 = (void *)objc_msgSend(a1, "newIncidentDetails");
    objc_msgSend(v10, "clearSensitiveFields:", a2);

LABEL_10:
    objc_msgSend(a1, "incidentAnnotationDetails");
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "clearSensitiveFields:", a2);
    goto LABEL_11;
  }
  if (objc_msgSend(a1, "hasNewIncidentDetails")
    && (v5 = (void *)objc_msgSend(a1, "newIncidentDetails"),
        v6 = GEORPNewIncidentDetailsHasSensitiveFields(v5),
        v5,
        v6))
  {
    v7 = (void *)objc_msgSend(a1, "newIncidentDetails");
    v8 = (void *)objc_msgSend(v7, "copy");

    objc_msgSend(v8, "userLocation");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "clearSensitiveFields:", a2);

    objc_msgSend(a1, "setNewIncidentDetails:", v8);
  }
  else
  {
    v8 = (void *)objc_msgSend(a1, "newIncidentDetails");
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

  if (!objc_msgSend(a1, "hasIncidentAnnotationDetails"))
    goto LABEL_10;
  objc_msgSend(a1, "incidentAnnotationDetails");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = GEORPIncidentAnnotationDetailsHasSensitiveFields(v11);

  if (!v12)
    goto LABEL_10;
  objc_msgSend(a1, "incidentAnnotationDetails");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (id)objc_msgSend(v13, "copy");

  objc_msgSend(v15, "userLocation");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "clearSensitiveFields:", a2);

  objc_msgSend(a1, "setIncidentAnnotationDetails:", v15);
LABEL_11:

}

uint64_t GEORPIncidentFeedbackHasSensitiveFields(void *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  if (!a1)
    return 0;
  v2 = (void *)objc_msgSend(a1, "newIncidentDetails");
  if ((GEORPNewIncidentDetailsHasSensitiveFields(v2) & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    objc_msgSend(a1, "incidentAnnotationDetails");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (uint64_t)GEORPIncidentAnnotationDetailsHasSensitiveFields(v4);

  }
  return v3;
}

void *GEORPNewIncidentDetailsHasSensitiveFields(void *result)
{
  void *v1;
  uint64_t HasSensitiveFields;

  if (result)
  {
    objc_msgSend(result, "userLocation");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEORPUserLocationDetailsHasSensitiveFields((uint64_t)v1);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void GEORPNewIncidentDetailsClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  int HasSensitiveFields;
  void *v7;
  id *v8;

  if (a3
    && objc_msgSend(a1, "hasUserLocation")
    && (objc_msgSend(a1, "userLocation"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEORPUserLocationDetailsHasSensitiveFields((uint64_t)v5),
        v5,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "userLocation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (id *)objc_msgSend(v7, "copy");

    GEORPUserLocationDetailsClearSensitiveFields(v8, a2, 0);
    objc_msgSend(a1, "setUserLocation:", v8);
  }
  else
  {
    objc_msgSend(a1, "userLocation");
    v8 = (id *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

}

void sub_188979840(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPIncidentLocationReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  GEOLatLng *v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _BOOL8 v25;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            if (v23 == -1 || v23 >= *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_34;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6])
            LODWORD(v21) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 16) = v21;
        }
        else if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_40;
          v17 = objc_alloc_init(GEOLatLng);
          if (!GEOLatLngReadAllFrom((uint64_t)v17, v3))
          {

            goto LABEL_40;
          }
          PBReaderRecallMark();
          v18 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v17;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_40;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v25 = v3[*v6] == 0;
  }
  else
  {
LABEL_40:
    v25 = 0;
  }
  objc_sync_exit(v3);

  return v25;
}

void sub_18897A208(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPIncidentLocationReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPIncidentLocationReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18897A268(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPIncidentLocationIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_38;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
            break;
          v19 = v18 + 1;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8)
            continue;
          goto LABEL_35;
        }
        a1[*v4] = 1;
      }
      else if ((v8 >> 3) == 1)
      {
        if (v14 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
        {
LABEL_38:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_38;
      }
LABEL_35:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v22;
}

BOOL GEORPIncidentUserPathReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  BOOL v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  _BOOL8 v50;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        v16 = v10 & 7;
        if (v15 || v16 == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            if (v16 == 2)
            {
              if (!PBReaderPlaceMark())
                goto LABEL_81;
              while (1)
              {
                if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5] || v3[*v6])
                {
                  PBReaderRecallMark();
                  goto LABEL_79;
                }
                v18 = 0;
                v19 = 0;
                v20 = 0;
                while (1)
                {
                  v21 = *v4;
                  v22 = *(_QWORD *)&v3[v21];
                  if (v22 == -1 || v22 >= *(_QWORD *)&v3[*v5])
                    break;
                  v23 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
                  *(_QWORD *)&v3[v21] = v22 + 1;
                  v20 |= (unint64_t)(v23 & 0x7F) << v18;
                  if (v23 < 0)
                  {
                    v18 += 7;
                    v14 = v19++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_32;
                }
                v3[*v6] = 1;
LABEL_32:
                PBRepeatedInt32Add();
              }
            }
            v44 = 0;
            v45 = 0;
            v46 = 0;
            while (1)
            {
              v47 = *v4;
              v48 = *(_QWORD *)&v3[v47];
              if (v48 == -1 || v48 >= *(_QWORD *)&v3[*v5])
                break;
              v49 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v48);
              *(_QWORD *)&v3[v47] = v48 + 1;
              v46 |= (unint64_t)(v49 & 0x7F) << v44;
              if (v49 < 0)
              {
                v44 += 7;
                v14 = v45++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_78;
            }
            v3[*v6] = 1;
LABEL_78:
            PBRepeatedInt32Add();
            continue;
          case 2u:
            v24 = 0;
            v25 = 0;
            v26 = 0;
            *(_BYTE *)(a1 + 40) |= 4u;
            while (1)
            {
              v27 = *v4;
              v28 = *(_QWORD *)&v3[v27];
              if (v28 == -1 || v28 >= *(_QWORD *)&v3[*v5])
                break;
              v29 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v28);
              *(_QWORD *)&v3[v27] = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if ((v29 & 0x80) == 0)
                goto LABEL_57;
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                v26 = 0;
                goto LABEL_59;
              }
            }
            v3[*v6] = 1;
LABEL_57:
            if (v3[*v6])
              v26 = 0;
LABEL_59:
            v42 = v26 != 0;
            v43 = 37;
            goto LABEL_64;
          case 3u:
            v30 = 0;
            v31 = 0;
            v32 = 0;
            *(_BYTE *)(a1 + 40) |= 2u;
            while (2)
            {
              v33 = *v4;
              v34 = *(_QWORD *)&v3[v33];
              if (v34 == -1 || v34 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v35 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v34);
                *(_QWORD *)&v3[v33] = v34 + 1;
                v32 |= (unint64_t)(v35 & 0x7F) << v30;
                if (v35 < 0)
                {
                  v30 += 7;
                  v14 = v31++ >= 9;
                  if (v14)
                  {
                    v32 = 0;
                    goto LABEL_63;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v32 = 0;
LABEL_63:
            v42 = v32 != 0;
            v43 = 36;
LABEL_64:
            *(_BYTE *)(a1 + v43) = v42;
            continue;
          case 4u:
            v36 = 0;
            v37 = 0;
            v38 = 0;
            *(_BYTE *)(a1 + 40) |= 1u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_81;
            continue;
        }
        while (1)
        {
          v39 = *v4;
          v40 = *(_QWORD *)&v3[v39];
          if (v40 == -1 || v40 >= *(_QWORD *)&v3[*v5])
            break;
          v41 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v40);
          *(_QWORD *)&v3[v39] = v40 + 1;
          v38 |= (unint64_t)(v41 & 0x7F) << v36;
          if ((v41 & 0x80) == 0)
            goto LABEL_66;
          v36 += 7;
          v14 = v37++ >= 9;
          if (v14)
          {
            LODWORD(v38) = 0;
            goto LABEL_68;
          }
        }
        v3[*v6] = 1;
LABEL_66:
        if (v3[*v6])
          LODWORD(v38) = 0;
LABEL_68:
        *(_DWORD *)(a1 + 32) = v38;
LABEL_79:
        ;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v50 = v3[*v6] == 0;
  }
  else
  {
LABEL_81:
    v50 = 0;
  }
  objc_sync_exit(v3);

  return v50;
}

void sub_18897BA64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPIncidentUserPathReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPIncidentUserPathReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18897BAC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18897C524(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPNewIncidentDetailsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  int *v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  unint64_t v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  GEORPIncidentLocation *v43;
  uint64_t v44;
  void *v45;
  int v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  int v52;
  int v53;
  void *v54;
  _BOOL4 v56;
  BOOL v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 48) >> 2) & 1) + ((*(unsigned __int8 *)(a1 + 48) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 & 1 | v11;
        v15 = v14 != 0;
        if ((v14 != 0) | v8 & 1)
          v16 = 0;
        else
          v16 = a3;
        if (v14)
          v17 = 1;
        else
          v17 = v16 == 0;
        v57 = v17;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        v21 = 0x1EDF0A000uLL;
        v56 = v15;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_79;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v18;
      v26 = *(_QWORD *)(v3 + v25);
      if (v26 == -1 || v26 >= *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v26);
      *(_QWORD *)(v3 + v25) = v26 + 1;
      v24 |= (unint64_t)(v27 & 0x7F) << v22;
      if ((v27 & 0x80) == 0)
        goto LABEL_26;
      v22 += 7;
      v28 = v23++ >= 9;
      if (v28)
      {
        v24 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_28;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_26:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v24 = 0;
LABEL_28:
    if (v29 || (v24 & 7) == 4)
    {
LABEL_79:
      if (v15)
      {
        v50 = 1;
        goto LABEL_94;
      }
      if (!v16)
        goto LABEL_95;
      while (1)
      {
        v53 = *v16++;
        v52 = v53;
        if (v53 == 2)
          break;
        if (v52 == 3)
        {
          v51 = 2;
LABEL_85:
          *(_BYTE *)(a1 + *(int *)(v21 + 3860)) |= v51;
        }
        else if (!v52)
        {
          goto LABEL_95;
        }
      }
      v51 = 4;
      goto LABEL_85;
    }
    v31 = v24 >> 3;
    v32 = v15;
    if (!v57)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 != 3)
      break;
    if (v32)
    {
      if ((*(_BYTE *)(a1 + *(int *)(v21 + 3860)) & 2) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_91;
        v43 = objc_alloc_init(GEORPIncidentLocation);
        if (!GEORPIncidentLocationReadAllFrom((uint64_t)v43, (void *)v3))
          goto LABEL_92;
        PBReaderRecallMark();
        v44 = 16;
LABEL_60:
        v45 = *(void **)(a1 + v44);
        *(_QWORD *)(a1 + v44) = v43;

        --v7;
        v21 = 0x1EDF0A000;
LABEL_74:
        v15 = v56;
        v19 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_75;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_91;
      v48 = *(_BYTE *)(a1 + *(int *)(v21 + 3860)) << 6;
LABEL_73:
      v7 += v48 >> 7;
      goto LABEL_74;
    }
LABEL_63:
    v47 = PBReaderSkipValueWithTag();
    v19 = (int *)MEMORY[0x1E0D82BC8];
    v15 = v56;
    if ((v47 & 1) == 0)
    {
LABEL_90:
      v50 = 0;
      goto LABEL_94;
    }
LABEL_75:
    if (v7)
      v49 = 1;
    else
      v49 = v15;
    if ((v49 & 1) == 0)
      goto LABEL_79;
  }
  if ((_DWORD)v31 != 2)
  {
    if ((_DWORD)v31 != 1)
    {
      v46 = PBReaderSkipValueWithTag();
      v19 = (int *)MEMORY[0x1E0D82BC8];
      v15 = v56;
      if (!v46)
        goto LABEL_90;
      goto LABEL_75;
    }
    if ((v8 & 1) != 0)
    {
      v37 = 0;
      v38 = 0;
      v39 = 0;
      *(_BYTE *)(a1 + *(int *)(v21 + 3860)) |= 1u;
      while (1)
      {
        v40 = *v18;
        v41 = *(_QWORD *)(v3 + v40);
        if (v41 == -1 || v41 >= *(_QWORD *)(v3 + *v6))
          break;
        v42 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v41);
        *(_QWORD *)(v3 + v40) = v41 + 1;
        v39 |= (unint64_t)(v42 & 0x7F) << v37;
        if ((v42 & 0x80) == 0)
          goto LABEL_66;
        v37 += 7;
        v28 = v38++ >= 9;
        if (v28)
        {
          LODWORD(v39) = 0;
          goto LABEL_68;
        }
      }
      *(_BYTE *)(v3 + *v19) = 1;
LABEL_66:
      if (*(_BYTE *)(v3 + *v19))
        LODWORD(v39) = 0;
LABEL_68:
      *(_DWORD *)(a1 + 44) = v39;
      goto LABEL_75;
    }
    goto LABEL_63;
  }
  if (!v32)
    goto LABEL_63;
  if ((*(_BYTE *)(a1 + *(int *)(v21 + 3860)) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_91:
      v50 = 0;
      goto LABEL_93;
    }
    v48 = 32 * *(_BYTE *)(a1 + *(int *)(v21 + 3860));
    goto LABEL_73;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_91;
  v43 = objc_alloc_init(GEORPUserLocationDetails);
  if (GEORPUserLocationDetailsReadAllFrom((uint64_t)v43, (void *)v3, v9 & 1))
  {
    PBReaderRecallMark();
    v44 = 24;
    goto LABEL_60;
  }
LABEL_92:

  v50 = 0;
  v21 = 0x1EDF0A000uLL;
LABEL_93:
  v15 = v56;
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_94:
  *(_BYTE *)(a1 + *(int *)(v21 + 3860)) |= 4u;
  *(_BYTE *)(a1 + *(int *)(v21 + 3860)) |= 2u;
  if ((v50 & 1) != 0)
  {
LABEL_95:
    v3 = *(_BYTE *)(v3 + *v19) == 0;
    if (v15)
      goto LABEL_96;
  }
  else
  {
    v3 = 0;
    if (v15)
    {
LABEL_96:
      v54 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

    }
  }
  return v3;
}

void sub_18897CBC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18897D318(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPNewIncidentDetailsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPNewIncidentDetailsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPNewIncidentDetailsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPNewIncidentDetailsReadAllFrom_initialTag;
  Specified = GEORPNewIncidentDetailsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 16), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_18897D4CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPNewIncidentDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPNewIncidentDetailsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18897D52C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18897D6C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPNewIncidentDetailsIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = *(unsigned __int8 *)(a1 + 48);
  if ((v2 & 8) != 0)
    return 1;
  if ((v2 & 4) != 0)
  {
    if ((GEORPUserLocationDetailsIsDirty(*(os_unfair_lock_s **)(a1 + 24)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 48);
  }
  return (v2 >> 1) & 1;
}

os_unfair_lock_s *GEORPNewIncidentDetailsIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPNewIncidentDetailsIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 10);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_18897DA84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18897DE70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPSiriContextReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  int *v15;
  int *v16;
  BOOL v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  int v26;
  unint64_t v28;
  _BOOL4 v29;
  int *v30;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  int v37;
  char v38;
  char v39;
  char v40;
  int v41;
  int v42;
  char v43;
  void *v44;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v7 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1)
    v14 = 0;
  else
    v14 = a3;
  v15 = (int *)MEMORY[0x1E0D82BF0];
  v16 = (int *)MEMORY[0x1E0D82BC8];
  if (v12)
    v17 = 1;
  else
    v17 = v14 == 0;
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v16))
      goto LABEL_62;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v15;
      v23 = *(_QWORD *)(v3 + v22);
      if (v23 == -1 || v23 >= *(_QWORD *)(v3 + *v6))
        break;
      v24 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v23 + 1;
      v21 |= (unint64_t)(v24 & 0x7F) << v19;
      if ((v24 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      if (v20++ >= 9)
      {
        v21 = 0;
        v26 = *(unsigned __int8 *)(v3 + *v16);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v16) = 1;
LABEL_27:
    v26 = *(unsigned __int8 *)(v3 + *v16);
    if (*(_BYTE *)(v3 + *v16))
      v21 = 0;
LABEL_29:
    if (v26 || (v21 & 7) == 4)
    {
LABEL_62:
      if (v13)
      {
        v40 = 1;
        goto LABEL_74;
      }
      if (!v14)
        goto LABEL_75;
      while (1)
      {
        v42 = *v14++;
        v41 = v42;
        if (v42 == 1)
          break;
        if (v41 == 2)
        {
          v43 = 1;
LABEL_71:
          *(_BYTE *)(a1 + 44) |= v43;
        }
        else if (!v41)
        {
          goto LABEL_75;
        }
      }
      v43 = 2;
      goto LABEL_71;
    }
    v28 = v21 >> 3;
    v29 = v13;
    if (!v17)
    {
      v30 = v14;
      do
      {
        v32 = *v30++;
        v31 = v32;
        v29 = v32 != 0;
        if (v32)
          v33 = v31 == (_DWORD)v28;
        else
          v33 = 1;
      }
      while (!v33);
    }
    if ((_DWORD)v28 != 2)
    {
      if ((_DWORD)v28 != 1)
      {
        v37 = PBReaderSkipValueWithTag();
        v16 = (int *)MEMORY[0x1E0D82BC8];
        if (!v37)
          goto LABEL_72;
        goto LABEL_58;
      }
      if (v29)
      {
        if ((*(_BYTE *)(a1 + 44) & 2) == 0)
        {
          PBReaderReadString();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = 24;
          goto LABEL_48;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_73;
        v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
LABEL_57:
        v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_58:
        if (v9)
          v39 = 1;
        else
          v39 = v13;
        if ((v39 & 1) == 0)
          goto LABEL_62;
        continue;
      }
LABEL_51:
      v38 = PBReaderSkipValueWithTag();
      v16 = (int *)MEMORY[0x1E0D82BC8];
      if ((v38 & 1) == 0)
      {
LABEL_72:
        v40 = 0;
        goto LABEL_74;
      }
      goto LABEL_58;
    }
    break;
  }
  if (!v29)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 44) & 1) == 0)
  {
    PBReaderReadString();
    v34 = objc_claimAutoreleasedReturnValue();
    v35 = 16;
LABEL_48:
    v36 = *(void **)(a1 + v35);
    *(_QWORD *)(a1 + v35) = v34;

    v16 = (int *)MEMORY[0x1E0D82BC8];
    --v9;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v9 -= *(_BYTE *)(a1 + 44) & 1;
    goto LABEL_57;
  }
LABEL_73:
  v40 = 0;
  v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_74:
  *(_BYTE *)(a1 + 44) |= 2u;
  *(_BYTE *)(a1 + 44) |= 1u;
  if ((v40 & 1) != 0)
  {
LABEL_75:
    v3 = *(_BYTE *)(v3 + *v16) == 0;
    if (v13)
      goto LABEL_76;
  }
  else
  {
    v3 = 0;
    if (v13)
    {
LABEL_76:
      v44 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

    }
  }
  return v3;
}

void sub_18897E38C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18897E75C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPSiriContextReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPSiriContextReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPSiriContextReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPSiriContextReadAllFrom_initialTag;
  Specified = GEORPSiriContextReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_18897E8E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPSiriContextReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPSiriContextReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18897E944(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18897EAC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPSiriContextIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 44) & 7) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_18897ED54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18897F088(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUserLocationDetailsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  int *v15;
  BOOL v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v29;
  BOOL v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  GEORPTimestamp *v35;
  uint64_t v36;
  int v37;
  void *v38;
  char v39;
  char v40;
  char v41;
  int v42;
  char v43;
  void *v44;
  BOOL v46;
  char v47;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 | (v11 > 2);
        if (((v14 | v8) & 1) != 0)
          v15 = 0;
        else
          v15 = a3;
        v16 = v14;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v47 = (v15 == 0) | v14;
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v46 = v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_72;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v27 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v27 || (v22 & 7) == 4)
    {
LABEL_72:
      if (v16)
      {
        v41 = 1;
        goto LABEL_84;
      }
      if (v15)
      {
        while (1)
        {
          v42 = *v15++;
          v43 = 1;
          switch(v42)
          {
            case 0:
              goto LABEL_85;
            case 1:
              goto LABEL_79;
            case 2:
              v43 = 2;
              goto LABEL_79;
            case 3:
              v43 = 8;
              goto LABEL_79;
            case 4:
              v43 = 4;
LABEL_79:
              *(_BYTE *)(a1 + 60) |= v43;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_85;
    }
    v29 = v22 >> 3;
    v30 = v16;
    if ((v47 & 1) == 0)
    {
      v31 = v15;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    switch((int)v29)
    {
      case 1:
        if (!v30)
          goto LABEL_61;
        if ((*(_BYTE *)(a1 + 60) & 1) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_81;
          v35 = objc_alloc_init(GEORPTimestamp);
          if (GEORPTimestampReadAllFrom((uint64_t)v35, (void *)v3))
          {
            PBReaderRecallMark();
            v36 = 16;
            goto LABEL_54;
          }
          goto LABEL_82;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_81;
        v7 -= *(_BYTE *)(a1 + 60) & 1;
        goto LABEL_70;
      case 2:
        if (!v30)
          goto LABEL_61;
        if ((*(_BYTE *)(a1 + 60) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_81;
          v40 = *(_BYTE *)(a1 + 60) << 6;
          goto LABEL_69;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_81;
        v35 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v35, (void *)v3, v9 & 1))
          goto LABEL_82;
        PBReaderRecallMark();
        v36 = 24;
        goto LABEL_54;
      case 3:
        if (!v30)
          goto LABEL_61;
        if ((*(_BYTE *)(a1 + 60) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_81;
          v35 = objc_alloc_init(GEOLocation);
          if (!GEOLocationReadAllFrom((uint64_t)v35, (void *)v3, v9 & 1))
            goto LABEL_82;
          PBReaderRecallMark();
          v36 = 40;
LABEL_54:
          v38 = *(void **)(a1 + v36);
          *(_QWORD *)(a1 + v36) = v35;

          --v7;
          goto LABEL_60;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_81:
          v41 = 0;
          goto LABEL_83;
        }
        v40 = 16 * *(_BYTE *)(a1 + 60);
LABEL_69:
        v7 += v40 >> 7;
        goto LABEL_70;
      case 4:
        if (!v30 || (*(_BYTE *)(a1 + 60) & 4) != 0)
        {
LABEL_61:
          v39 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if ((v39 & 1) == 0)
          {
LABEL_80:
            v41 = 0;
            goto LABEL_84;
          }
LABEL_71:
          if (!v16 && v7 == 0)
            goto LABEL_72;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_81;
        v35 = objc_alloc_init(GEOLocation);
        if (GEOLocationReadAllFrom((uint64_t)v35, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          -[GEORPUserLocationDetails _addNoFlagsDeviceHistoricalLocation:](a1, v35);

LABEL_60:
          v16 = v46;
LABEL_70:
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_71;
        }
LABEL_82:

        v41 = 0;
        v16 = v46;
LABEL_83:
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_84:
        *(_BYTE *)(a1 + 60) |= 1u;
        *(_BYTE *)(a1 + 60) |= 2u;
        *(_BYTE *)(a1 + 60) |= 8u;
        *(_BYTE *)(a1 + 60) |= 4u;
        if ((v41 & 1) != 0)
        {
LABEL_85:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if (v16)
            goto LABEL_86;
        }
        else
        {
          v3 = 0;
          if (v16)
          {
LABEL_86:
            v44 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v37 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (!v37)
          goto LABEL_80;
        goto LABEL_71;
    }
  }
}

void sub_18897F7A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18897F8E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18897FA20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188980408(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEORPUserLocationDetailsCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[2], "readAll:", 1);
  objc_msgSend(a1[3], "readAll:", 1);
  objc_msgSend(a1[5], "readAll:", 1);
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = a1[4];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v7);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

unint64_t GEORPUserLocationDetailsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPUserLocationDetailsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPUserLocationDetailsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPUserLocationDetailsReadAllFrom_initialTag;
  Specified = GEORPUserLocationDetailsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEORPUserLocationDetailsCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_1889806C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUserLocationDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPUserLocationDetailsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_188980728(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188980980(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPUserLocationDetailsIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = *(unsigned __int8 *)(a1 + 60);
  if ((v2 & 0x11111111) != 0)
    return 1;
  if ((v2 & 2) != 0)
  {
    if (GEOLocationIsDirty(*(os_unfair_lock_s **)(a1 + 24)))
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 60);
  }
  if ((v2 & 8) != 0)
  {
    if (!GEOLocationIsDirty(*(os_unfair_lock_s **)(a1 + 40)))
    {
      v2 = *(unsigned __int8 *)(a1 + 60);
      return (v2 >> 2) & 1;
    }
    return 1;
  }
  return (v2 >> 2) & 1;
}

os_unfair_lock_s *GEORPUserLocationDetailsIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPUserLocationDetailsIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_188980F60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188982924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  uint64_t v29;
  uint64_t v30;

  _Block_object_dispose((const void *)(v30 - 192), 8);

  _Block_object_dispose(&a28, 8);
  *(_QWORD *)(v30 - 192) = v29;
  std::vector<GEORoadEdge * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 192));

  _Unwind_Resume(a1);
}

void sub_188982BDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_188982D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_188982E44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18898314C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18898320C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_188983480(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1889834FC()
{
  void *v0;

  JUMPOUT(0x1889834D4);
}

void sub_188983508()
{
  JUMPOUT(0x1889834D4);
}

void sub_188983510()
{
  JUMPOUT(0x1889834D8);
}

void sub_188983578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_188983658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_188983850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void std::vector<GEORoadEdge * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<GEORoadEdge * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_188984F18(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_188985A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  id location;
  id *v67;

  objc_destroyWeak(v67);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgEventProactiveSuggestionInteractionSessionReadAllFrom(_BYTE *a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  GEOProactiveItem *v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (!v3[*v6])
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v17 = 0;
            v18 = 0;
            v19 = 0;
            a1[28] |= 4u;
            while (1)
            {
              v20 = *v4;
              v21 = *(_QWORD *)&v3[v20];
              if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
                break;
              v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
              *(_QWORD *)&v3[v20] = v21 + 1;
              v19 |= (unint64_t)(v22 & 0x7F) << v17;
              if ((v22 & 0x80) == 0)
                goto LABEL_47;
              v17 += 7;
              v14 = v18++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_49;
              }
            }
            v3[*v6] = 1;
LABEL_47:
            if (v3[*v6])
              LODWORD(v19) = 0;
LABEL_49:
            v34 = 24;
            goto LABEL_58;
          case 2u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_62;
            v23 = objc_alloc_init(GEOProactiveItem);
            if (!GEOProactiveItemReadAllFrom((uint64_t)v23, v3))
            {

              goto LABEL_62;
            }
            PBReaderRecallMark();
            objc_msgSend(a1, "addProactiveItem:", v23, 0, 0);

LABEL_59:
            if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
              goto LABEL_60;
            break;
          case 3u:
            v24 = 0;
            v25 = 0;
            v19 = 0;
            a1[28] |= 1u;
            while (2)
            {
              v26 = *v4;
              v27 = *(_QWORD *)&v3[v26];
              if (v27 == -1 || v27 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v28 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v27);
                *(_QWORD *)&v3[v26] = v27 + 1;
                v19 |= (unint64_t)(v28 & 0x7F) << v24;
                if (v28 < 0)
                {
                  v24 += 7;
                  v14 = v25++ >= 9;
                  if (v14)
                  {
                    LODWORD(v19) = 0;
                    goto LABEL_53;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v19) = 0;
LABEL_53:
            v34 = 16;
            goto LABEL_58;
          case 4u:
            v29 = 0;
            v30 = 0;
            v19 = 0;
            a1[28] |= 2u;
            while (2)
            {
              v31 = *v4;
              v32 = *(_QWORD *)&v3[v31];
              if (v32 == -1 || v32 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v32);
                *(_QWORD *)&v3[v31] = v32 + 1;
                v19 |= (unint64_t)(v33 & 0x7F) << v29;
                if (v33 < 0)
                {
                  v29 += 7;
                  v14 = v30++ >= 9;
                  if (v14)
                  {
                    LODWORD(v19) = 0;
                    goto LABEL_57;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v19) = 0;
LABEL_57:
            v34 = 20;
LABEL_58:
            *(_DWORD *)&a1[v34] = v19;
            goto LABEL_59;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_62;
            goto LABEL_59;
        }
      }
    }
LABEL_60:
    v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_62:
    v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_1889881B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgEventProactiveSuggestionInteractionSessionReadFrom(_BYTE *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgEventProactiveSuggestionInteractionSessionReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_188988210(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgEventProactiveSuggestionInteractionSessionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  _BOOL8 v32;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_53;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
              goto LABEL_49;
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_50;
          }
        case 2u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOProactiveItemIsValid(a1))
            goto LABEL_53;
          PBReaderRecallMark();
          continue;
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_53;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            if (v24 == -1 || v24 >= *(_QWORD *)&a1[*v3])
              goto LABEL_49;
            v25 = v24 + 1;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_50;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_53;
          v27 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_53:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v28 = *v2;
        v29 = *(_QWORD *)&a1[v28];
        if (v29 == -1 || v29 >= *(_QWORD *)&a1[*v3])
          break;
        v30 = v29 + 1;
        v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
        *(_QWORD *)&a1[v28] = v30;
        if (v31 < 0)
        {
          v21 = v27++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_50;
      }
LABEL_49:
      a1[*v4] = 1;
LABEL_50:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v32 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v32;
}

BOOL GEOProactiveItemIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  _BOOL8 v51;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v13 || (v8 & 7) == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_81;
          v15 = 0;
          while (1)
          {
            v16 = *v2;
            v17 = *(_QWORD *)&a1[v16];
            if (v17 == -1 || v17 >= *(_QWORD *)&a1[*v3])
              goto LABEL_77;
            v18 = v17 + 1;
            v19 = *(char *)(*(_QWORD *)&a1[*v5] + v17);
            *(_QWORD *)&a1[v16] = v18;
            if (v19 < 0)
            {
              v20 = v15++ > 8;
              if (!v20)
                continue;
            }
            goto LABEL_78;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_81;
          v26 = 0;
          while (1)
          {
            v27 = *v2;
            v28 = *(_QWORD *)&a1[v27];
            if (v28 == -1 || v28 >= *(_QWORD *)&a1[*v3])
              goto LABEL_77;
            v29 = v28 + 1;
            v30 = *(char *)(*(_QWORD *)&a1[*v5] + v28);
            *(_QWORD *)&a1[v27] = v29;
            if (v30 < 0)
            {
              v20 = v26++ > 8;
              if (!v20)
                continue;
            }
            goto LABEL_78;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_81;
          v31 = 0;
          while (1)
          {
            v32 = *v2;
            v33 = *(_QWORD *)&a1[v32];
            if (v33 == -1 || v33 >= *(_QWORD *)&a1[*v3])
              goto LABEL_77;
            v34 = v33 + 1;
            v35 = *(char *)(*(_QWORD *)&a1[*v5] + v33);
            *(_QWORD *)&a1[v32] = v34;
            if (v35 < 0)
            {
              v20 = v31++ > 8;
              if (!v20)
                continue;
            }
            goto LABEL_78;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_81;
          v36 = 0;
          while (1)
          {
            v37 = *v2;
            v38 = *(_QWORD *)&a1[v37];
            if (v38 == -1 || v38 >= *(_QWORD *)&a1[*v3])
              goto LABEL_77;
            v39 = v38 + 1;
            v40 = *(char *)(*(_QWORD *)&a1[*v5] + v38);
            *(_QWORD *)&a1[v37] = v39;
            if (v40 < 0)
            {
              v20 = v36++ > 8;
              if (!v20)
                continue;
            }
            goto LABEL_78;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_81;
          v21 = 0;
          while (1)
          {
            v22 = *v2;
            v23 = *(_QWORD *)&a1[v22];
            if (v23 == -1 || v23 >= *(_QWORD *)&a1[*v3])
              goto LABEL_77;
            v24 = v23 + 1;
            v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
            *(_QWORD *)&a1[v22] = v24;
            if (v25 < 0)
            {
              v20 = v21++ > 8;
              if (!v20)
                continue;
            }
            goto LABEL_78;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_81;
          v41 = 0;
          while (1)
          {
            v42 = *v2;
            v43 = *(_QWORD *)&a1[v42];
            if (v43 == -1 || v43 >= *(_QWORD *)&a1[*v3])
              goto LABEL_77;
            v44 = v43 + 1;
            v45 = *(char *)(*(_QWORD *)&a1[*v5] + v43);
            *(_QWORD *)&a1[v42] = v44;
            if (v45 < 0)
            {
              v20 = v41++ > 8;
              if (!v20)
                continue;
            }
            goto LABEL_78;
          }
        case 7u:
          if ((v8 & 7) != 0)
            goto LABEL_81;
          v46 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_81:
          v51 = 0;
          goto LABEL_80;
      }
      while (1)
      {
        v47 = *v2;
        v48 = *(_QWORD *)&a1[v47];
        if (v48 == -1 || v48 >= *(_QWORD *)&a1[*v3])
          break;
        v49 = v48 + 1;
        v50 = *(char *)(*(_QWORD *)&a1[*v5] + v48);
        *(_QWORD *)&a1[v47] = v49;
        if (v50 < 0)
        {
          v20 = v46++ > 8;
          if (!v20)
            continue;
        }
        goto LABEL_78;
      }
LABEL_77:
      a1[*v4] = 1;
LABEL_78:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v51 = a1[*v4] == 0;
LABEL_80:
  PBReaderRecallMark();
  return v51;
}

BOOL GEOProactiveItemReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  _BOOL8 v61;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v17 = 0;
            v18 = 0;
            v19 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v20 = *v4;
              v21 = *(_QWORD *)&v3[v20];
              if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
                break;
              v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
              *(_QWORD *)&v3[v20] = v21 + 1;
              v19 |= (unint64_t)(v22 & 0x7F) << v17;
              if ((v22 & 0x80) == 0)
                goto LABEL_72;
              v17 += 7;
              v14 = v18++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_74;
              }
            }
            v3[*v6] = 1;
LABEL_72:
            if (v3[*v6])
              LODWORD(v19) = 0;
LABEL_74:
            v58 = 8;
            goto LABEL_79;
          case 2u:
            v23 = 0;
            v24 = 0;
            v19 = 0;
            *(_BYTE *)(a1 + 24) |= 2u;
            while (2)
            {
              v25 = *v4;
              v26 = *(_QWORD *)&v3[v25];
              if (v26 == -1 || v26 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v27 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v26);
                *(_QWORD *)&v3[v25] = v26 + 1;
                v19 |= (unint64_t)(v27 & 0x7F) << v23;
                if (v27 < 0)
                {
                  v23 += 7;
                  v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v19) = 0;
                    goto LABEL_78;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v19) = 0;
LABEL_78:
            v58 = 12;
LABEL_79:
            *(_DWORD *)(a1 + v58) = v19;
            continue;
          case 3u:
            v28 = 0;
            v29 = 0;
            v30 = 0;
            *(_BYTE *)(a1 + 24) |= 0x40u;
            while (2)
            {
              v31 = *v4;
              v32 = *(_QWORD *)&v3[v31];
              if (v32 == -1 || v32 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v32);
                *(_QWORD *)&v3[v31] = v32 + 1;
                v30 |= (unint64_t)(v33 & 0x7F) << v28;
                if (v33 < 0)
                {
                  v28 += 7;
                  v14 = v29++ >= 9;
                  if (v14)
                  {
                    v30 = 0;
                    goto LABEL_83;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v30 = 0;
LABEL_83:
            v59 = v30 != 0;
            v60 = 20;
            goto LABEL_100;
          case 4u:
            v34 = 0;
            v35 = 0;
            v36 = 0;
            *(_BYTE *)(a1 + 24) |= 0x20u;
            while (2)
            {
              v37 = *v4;
              v38 = *(_QWORD *)&v3[v37];
              if (v38 == -1 || v38 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v38);
                *(_QWORD *)&v3[v37] = v38 + 1;
                v36 |= (unint64_t)(v39 & 0x7F) << v34;
                if (v39 < 0)
                {
                  v34 += 7;
                  v14 = v35++ >= 9;
                  if (v14)
                  {
                    v36 = 0;
                    goto LABEL_87;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v36 = 0;
LABEL_87:
            v59 = v36 != 0;
            v60 = 19;
            goto LABEL_100;
          case 5u:
            v40 = 0;
            v41 = 0;
            v42 = 0;
            *(_BYTE *)(a1 + 24) |= 0x10u;
            while (2)
            {
              v43 = *v4;
              v44 = *(_QWORD *)&v3[v43];
              if (v44 == -1 || v44 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v45 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v44);
                *(_QWORD *)&v3[v43] = v44 + 1;
                v42 |= (unint64_t)(v45 & 0x7F) << v40;
                if (v45 < 0)
                {
                  v40 += 7;
                  v14 = v41++ >= 9;
                  if (v14)
                  {
                    v42 = 0;
                    goto LABEL_91;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v42 = 0;
LABEL_91:
            v59 = v42 != 0;
            v60 = 18;
            goto LABEL_100;
          case 6u:
            v46 = 0;
            v47 = 0;
            v48 = 0;
            *(_BYTE *)(a1 + 24) |= 8u;
            while (2)
            {
              v49 = *v4;
              v50 = *(_QWORD *)&v3[v49];
              if (v50 == -1 || v50 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v51 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v50);
                *(_QWORD *)&v3[v49] = v50 + 1;
                v48 |= (unint64_t)(v51 & 0x7F) << v46;
                if (v51 < 0)
                {
                  v46 += 7;
                  v14 = v47++ >= 9;
                  if (v14)
                  {
                    v48 = 0;
                    goto LABEL_95;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v48 = 0;
LABEL_95:
            v59 = v48 != 0;
            v60 = 17;
            goto LABEL_100;
          case 7u:
            v52 = 0;
            v53 = 0;
            v54 = 0;
            *(_BYTE *)(a1 + 24) |= 4u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_103;
            continue;
        }
        while (1)
        {
          v55 = *v4;
          v56 = *(_QWORD *)&v3[v55];
          if (v56 == -1 || v56 >= *(_QWORD *)&v3[*v5])
            break;
          v57 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v56);
          *(_QWORD *)&v3[v55] = v56 + 1;
          v54 |= (unint64_t)(v57 & 0x7F) << v52;
          if ((v57 & 0x80) == 0)
            goto LABEL_97;
          v52 += 7;
          v14 = v53++ >= 9;
          if (v14)
          {
            v54 = 0;
            goto LABEL_99;
          }
        }
        v3[*v6] = 1;
LABEL_97:
        if (v3[*v6])
          v54 = 0;
LABEL_99:
        v59 = v54 != 0;
        v60 = 16;
LABEL_100:
        *(_BYTE *)(a1 + v60) = v59;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v61 = v3[*v6] == 0;
  }
  else
  {
LABEL_103:
    v61 = 0;
  }
  objc_sync_exit(v3);

  return v61;
}

void sub_18898A5B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOProactiveItemReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOProactiveItemReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18898A610(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOGetGEORouteBuilder_PlaceDataCuratedHikeLog()
{
  if (qword_1EDF4FB50 != -1)
    dispatch_once(&qword_1EDF4FB50, &__block_literal_global_26);
  return (id)_MergedGlobals_1;
}

void sub_18898C29C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgEventMapsWidgetsInteractionSessionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  int v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  GEOMapsDestinationsWidget *v48;
  uint64_t v49;
  void *v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  __int16 v74;
  char v75;
  int v76;
  __int16 v77;
  void *v78;
  char v80;
  char v81;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int16 *)(a1 + 76) >> 6) & 1)
      + (HIBYTE(*(unsigned __int16 *)(a1 + 76)) & 1)
      + ((*(unsigned __int16 *)(a1 + 76) >> 7) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 1;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v81 = (v16 == 0) | v15;
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v20 = 0x1EDF0A000uLL;
        v80 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_139;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v17;
      v25 = *(_QWORD *)(v3 + v24);
      if (v25 == -1 || v25 >= *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v25);
      *(_QWORD *)(v3 + v24) = v25 + 1;
      v23 |= (unint64_t)(v26 & 0x7F) << v21;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      v27 = v22++ >= 9;
      if (v27)
      {
        v23 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v23 = 0;
LABEL_25:
    if (v28 || (v23 & 7) == 4)
    {
LABEL_139:
      if ((v15 & 1) != 0)
      {
        v75 = 1;
        goto LABEL_150;
      }
      if (v16)
      {
        while (1)
        {
          v76 = *v16++;
          v77 = 64;
          switch(v76)
          {
            case 0:
              goto LABEL_151;
            case 3:
              goto LABEL_145;
            case 4:
              v77 = 256;
              goto LABEL_145;
            case 5:
              v77 = 128;
LABEL_145:
              *(_WORD *)(a1 + *(int *)(v20 + 4024)) |= v77;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_151;
    }
    v30 = v23 >> 3;
    v31 = v15;
    if ((v81 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_103;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        *(_WORD *)(a1 + *(int *)(v20 + 4024)) |= 0x10u;
        while (1)
        {
          v39 = *v17;
          v40 = *(_QWORD *)(v3 + v39);
          if (v40 == -1 || v40 >= *(_QWORD *)(v3 + *v6))
            break;
          v41 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v40);
          *(_QWORD *)(v3 + v39) = v40 + 1;
          v38 |= (unint64_t)(v41 & 0x7F) << v36;
          if ((v41 & 0x80) == 0)
            goto LABEL_106;
          v36 += 7;
          v27 = v37++ >= 9;
          if (v27)
          {
            LODWORD(v38) = 0;
            goto LABEL_108;
          }
        }
        *(_BYTE *)(v3 + *v18) = 1;
LABEL_106:
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_108:
        v73 = 68;
        goto LABEL_129;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_103;
        v43 = 0;
        v44 = 0;
        v38 = 0;
        *(_WORD *)(a1 + *(int *)(v20 + 4024)) |= 2u;
        while (2)
        {
          v45 = *v17;
          v46 = *(_QWORD *)(v3 + v45);
          if (v46 == -1 || v46 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v46);
            *(_QWORD *)(v3 + v45) = v46 + 1;
            v38 |= (unint64_t)(v47 & 0x7F) << v43;
            if (v47 < 0)
            {
              v43 += 7;
              v27 = v44++ >= 9;
              if (v27)
              {
                LODWORD(v38) = 0;
                goto LABEL_112;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_112:
        v73 = 56;
        goto LABEL_129;
      case 3:
        if (!v31)
          goto LABEL_103;
        if ((*(_WORD *)(a1 + *(int *)(v20 + 4024)) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_147;
          v74 = *(_WORD *)(a1 + *(int *)(v20 + 4024)) << 9;
          goto LABEL_136;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_147;
        v48 = objc_alloc_init(GEOMapsDestinationsWidget);
        if (!GEOMapsDestinationsWidgetReadAllFrom((uint64_t)v48, (void *)v3))
          goto LABEL_148;
        PBReaderRecallMark();
        v49 = 16;
        goto LABEL_70;
      case 4:
        if (!v31)
          goto LABEL_103;
        if ((*(_WORD *)(a1 + *(int *)(v20 + 4024)) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_147;
          v74 = *(_WORD *)(a1 + *(int *)(v20 + 4024)) << 7;
          goto LABEL_136;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_147;
        v48 = objc_alloc_init(GEOMapsTransitWidget);
        if (!GEOMapsTransitWidgetReadAllFrom(v48, (void *)v3, v9 & 1))
          goto LABEL_148;
        PBReaderRecallMark();
        v49 = 32;
        goto LABEL_70;
      case 5:
        if (!v31)
          goto LABEL_103;
        if ((*(_WORD *)(a1 + *(int *)(v20 + 4024)) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_147:
            v75 = 0;
            goto LABEL_149;
          }
          v74 = *(_WORD *)(a1 + *(int *)(v20 + 4024)) << 8;
LABEL_136:
          v7 += v74 >> 15;
          goto LABEL_137;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_147;
        v48 = objc_alloc_init(GEOMapsNearbyWidget);
        if (GEOMapsNearbyWidgetReadAllFrom((uint64_t)v48, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v49 = 24;
LABEL_70:
          v50 = *(void **)(a1 + v49);
          *(_QWORD *)(a1 + v49) = v48;

          --v7;
          v20 = 0x1EDF0A000;
LABEL_137:
          v15 = v80;
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_138:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_139;
          continue;
        }
LABEL_148:

        v75 = 0;
        v20 = 0x1EDF0A000uLL;
LABEL_149:
        v15 = v80;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_150:
        *(_WORD *)(a1 + *(int *)(v20 + 4024)) |= 0x40u;
        *(_WORD *)(a1 + *(int *)(v20 + 4024)) |= 0x100u;
        *(_WORD *)(a1 + *(int *)(v20 + 4024)) |= 0x80u;
        if ((v75 & 1) != 0)
        {
LABEL_151:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_152;
        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
          {
LABEL_152:
            v78 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_103;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        *(_WORD *)(a1 + *(int *)(v20 + 4024)) |= 0x20u;
        while (2)
        {
          v54 = *v17;
          v55 = *(_QWORD *)(v3 + v54);
          if (v55 == -1 || v55 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v55);
            *(_QWORD *)(v3 + v54) = v55 + 1;
            v53 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              v27 = v52++ >= 9;
              if (v27)
              {
                v53 = 0;
                goto LABEL_116;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v53 = 0;
LABEL_116:
        *(_BYTE *)(a1 + 72) = v53 != 0;
        goto LABEL_138;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_103;
        v57 = 0;
        v58 = 0;
        v38 = 0;
        *(_WORD *)(a1 + *(int *)(v20 + 4024)) |= 8u;
        while (2)
        {
          v59 = *v17;
          v60 = *(_QWORD *)(v3 + v59);
          if (v60 == -1 || v60 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v61 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v60);
            *(_QWORD *)(v3 + v59) = v60 + 1;
            v38 |= (unint64_t)(v61 & 0x7F) << v57;
            if (v61 < 0)
            {
              v57 += 7;
              v27 = v58++ >= 9;
              if (v27)
              {
                LODWORD(v38) = 0;
                goto LABEL_120;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_120:
        v73 = 64;
        goto LABEL_129;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_103;
        v62 = 0;
        v63 = 0;
        v38 = 0;
        *(_WORD *)(a1 + *(int *)(v20 + 4024)) |= 4u;
        while (2)
        {
          v64 = *v17;
          v65 = *(_QWORD *)(v3 + v64);
          if (v65 == -1 || v65 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v66 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v65);
            *(_QWORD *)(v3 + v64) = v65 + 1;
            v38 |= (unint64_t)(v66 & 0x7F) << v62;
            if (v66 < 0)
            {
              v62 += 7;
              v27 = v63++ >= 9;
              if (v27)
              {
                LODWORD(v38) = 0;
                goto LABEL_124;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_124:
        v73 = 60;
        goto LABEL_129;
      case 9:
        if ((v8 & 1) != 0)
        {
          v67 = 0;
          v68 = 0;
          v38 = 0;
          *(_WORD *)(a1 + *(int *)(v20 + 4024)) |= 1u;
          while (1)
          {
            v69 = *v17;
            v70 = *(_QWORD *)(v3 + v69);
            if (v70 == -1 || v70 >= *(_QWORD *)(v3 + *v6))
              break;
            v71 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v70);
            *(_QWORD *)(v3 + v69) = v70 + 1;
            v38 |= (unint64_t)(v71 & 0x7F) << v67;
            if ((v71 & 0x80) == 0)
              goto LABEL_126;
            v67 += 7;
            v27 = v68++ >= 9;
            if (v27)
            {
              LODWORD(v38) = 0;
              goto LABEL_128;
            }
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_126:
          if (*(_BYTE *)(v3 + *v18))
            LODWORD(v38) = 0;
LABEL_128:
          v73 = 52;
LABEL_129:
          *(_DWORD *)(a1 + v73) = v38;
        }
        else
        {
LABEL_103:
          v72 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v80;
          if ((v72 & 1) == 0)
          {
LABEL_146:
            v75 = 0;
            goto LABEL_150;
          }
        }
        goto LABEL_138;
      default:
        v42 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v80;
        if (!v42)
          goto LABEL_146;
        goto LABEL_138;
    }
  }
}

void sub_18898CD80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18898CEBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18898DB4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgEventMapsWidgetsInteractionSessionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLogMsgEventMapsWidgetsInteractionSessionReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLogMsgEventMapsWidgetsInteractionSessionReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLogMsgEventMapsWidgetsInteractionSessionReadAllFrom_initialTag;
  Specified = GEOLogMsgEventMapsWidgetsInteractionSessionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 16), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18898DD10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgEventMapsWidgetsInteractionSessionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgEventMapsWidgetsInteractionSessionReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18898DD70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgEventMapsWidgetsInteractionSessionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  _BOOL8 v47;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_85;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
              goto LABEL_81;
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_82;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_85;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            if (v24 == -1 || v24 >= *(_QWORD *)&a1[*v3])
              goto LABEL_81;
            v25 = v24 + 1;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_82;
          }
        case 3u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOMapsDestinationsWidgetIsValid(a1))
            goto LABEL_85;
          goto LABEL_48;
        case 4u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOMapsTransitWidgetIsValid(a1))
            goto LABEL_85;
          goto LABEL_48;
        case 5u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOMapsNearbyWidgetIsValid(a1))
            goto LABEL_85;
LABEL_48:
          PBReaderRecallMark();
          continue;
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_85;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            if (v29 == -1 || v29 >= *(_QWORD *)&a1[*v3])
              goto LABEL_81;
            v30 = v29 + 1;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_82;
          }
        case 7u:
          if ((v8 & 7) != 0)
            goto LABEL_85;
          v32 = 0;
          while (1)
          {
            v33 = *v2;
            v34 = *(_QWORD *)&a1[v33];
            if (v34 == -1 || v34 >= *(_QWORD *)&a1[*v3])
              goto LABEL_81;
            v35 = v34 + 1;
            v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
            *(_QWORD *)&a1[v33] = v35;
            if (v36 < 0)
            {
              v21 = v32++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_82;
          }
        case 8u:
          if ((v8 & 7) != 0)
            goto LABEL_85;
          v37 = 0;
          while (1)
          {
            v38 = *v2;
            v39 = *(_QWORD *)&a1[v38];
            if (v39 == -1 || v39 >= *(_QWORD *)&a1[*v3])
              goto LABEL_81;
            v40 = v39 + 1;
            v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
            *(_QWORD *)&a1[v38] = v40;
            if (v41 < 0)
            {
              v21 = v37++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_82;
          }
        case 9u:
          if ((v8 & 7) != 0)
            goto LABEL_85;
          v42 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_85:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v43 = *v2;
        v44 = *(_QWORD *)&a1[v43];
        if (v44 == -1 || v44 >= *(_QWORD *)&a1[*v3])
          break;
        v45 = v44 + 1;
        v46 = *(char *)(*(_QWORD *)&a1[*v5] + v44);
        *(_QWORD *)&a1[v43] = v45;
        if (v46 < 0)
        {
          v21 = v42++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_82;
      }
LABEL_81:
      a1[*v4] = 1;
LABEL_82:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v47 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v47;
}

BOOL GEOMapsDestinationsWidgetIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  _BOOL8 v32;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOProactiveWidgetItemIsValid(a1))
            goto LABEL_53;
          PBReaderRecallMark();
          continue;
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_53;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
              goto LABEL_49;
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_50;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_53;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            if (v24 == -1 || v24 >= *(_QWORD *)&a1[*v3])
              goto LABEL_49;
            v25 = v24 + 1;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_50;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_53;
          v27 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_53:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v28 = *v2;
        v29 = *(_QWORD *)&a1[v28];
        if (v29 == -1 || v29 >= *(_QWORD *)&a1[*v3])
          break;
        v30 = v29 + 1;
        v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
        *(_QWORD *)&a1[v28] = v30;
        if (v31 < 0)
        {
          v21 = v27++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_50;
      }
LABEL_49:
      a1[*v4] = 1;
LABEL_50:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v32 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v32;
}

BOOL GEOMapsTransitWidgetIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  _BOOL8 v37;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_61;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
              goto LABEL_57;
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_58;
          }
        case 2u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOTransitIncidentItemIsValid(a1))
            goto LABEL_61;
          PBReaderRecallMark();
          continue;
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_61;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            if (v24 == -1 || v24 >= *(_QWORD *)&a1[*v3])
              goto LABEL_57;
            v25 = v24 + 1;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_58;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_61;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            if (v29 == -1 || v29 >= *(_QWORD *)&a1[*v3])
              goto LABEL_57;
            v30 = v29 + 1;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_58;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_61;
          v32 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_61:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v33 = *v2;
        v34 = *(_QWORD *)&a1[v33];
        if (v34 == -1 || v34 >= *(_QWORD *)&a1[*v3])
          break;
        v35 = v34 + 1;
        v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
        *(_QWORD *)&a1[v33] = v35;
        if (v36 < 0)
        {
          v21 = v32++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_58;
      }
LABEL_57:
      a1[*v4] = 1;
LABEL_58:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v37 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v37;
}

BOOL GEOMapsNearbyWidgetIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_38;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
            break;
          v19 = v18 + 1;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8)
            continue;
          goto LABEL_35;
        }
        a1[*v4] = 1;
      }
      else if ((v8 >> 3) == 1)
      {
        if (v14 != 2 || !PBReaderPlaceMark() || !GEOMapsServerMetadataIsValid(a1))
        {
LABEL_38:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_38;
      }
LABEL_35:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v22;
}

void sub_18898EC90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgEventMapsWidgetsInteractionSessionIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_WORD *)(a1 + 76) & 0x3C0) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_18898F190(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapsDestinationsWidgetReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  GEOProactiveWidgetItem *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  BOOL v36;
  uint64_t v37;
  _BOOL8 v38;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_62;
            v17 = objc_alloc_init(GEOProactiveWidgetItem);
            if (GEOProactiveWidgetItemReadAllFrom((uint64_t)v17, v3))
            {
              PBReaderRecallMark();
              objc_msgSend((id)a1, "addProactiveItem:", v17, 0, 0);

              continue;
            }

            goto LABEL_62;
          case 2u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 4u;
            while (2)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              if (v22 == -1 || v22 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v23 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
                *(_QWORD *)&v3[v21] = v22 + 1;
                v20 |= (unint64_t)(v23 & 0x7F) << v18;
                if (v23 < 0)
                {
                  v18 += 7;
                  v14 = v19++ >= 9;
                  if (v14)
                  {
                    v20 = 0;
                    goto LABEL_49;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v20 = 0;
LABEL_49:
            v36 = v20 != 0;
            v37 = 21;
            goto LABEL_54;
          case 3u:
            v24 = 0;
            v25 = 0;
            v26 = 0;
            *(_BYTE *)(a1 + 24) |= 2u;
            while (2)
            {
              v27 = *v4;
              v28 = *(_QWORD *)&v3[v27];
              if (v28 == -1 || v28 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v29 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v28);
                *(_QWORD *)&v3[v27] = v28 + 1;
                v26 |= (unint64_t)(v29 & 0x7F) << v24;
                if (v29 < 0)
                {
                  v24 += 7;
                  v14 = v25++ >= 9;
                  if (v14)
                  {
                    v26 = 0;
                    goto LABEL_53;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v26 = 0;
LABEL_53:
            v36 = v26 != 0;
            v37 = 20;
LABEL_54:
            *(_BYTE *)(a1 + v37) = v36;
            continue;
          case 4u:
            v30 = 0;
            v31 = 0;
            v32 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_62;
            continue;
        }
        while (1)
        {
          v33 = *v4;
          v34 = *(_QWORD *)&v3[v33];
          if (v34 == -1 || v34 >= *(_QWORD *)&v3[*v5])
            break;
          v35 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v34);
          *(_QWORD *)&v3[v33] = v34 + 1;
          v32 |= (unint64_t)(v35 & 0x7F) << v30;
          if ((v35 & 0x80) == 0)
            goto LABEL_56;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v32) = 0;
            goto LABEL_58;
          }
        }
        v3[*v6] = 1;
LABEL_56:
        if (v3[*v6])
          LODWORD(v32) = 0;
LABEL_58:
        *(_DWORD *)(a1 + 16) = v32;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v38 = v3[*v6] == 0;
  }
  else
  {
LABEL_62:
    v38 = 0;
  }
  objc_sync_exit(v3);

  return v38;
}

void sub_18899036C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapsDestinationsWidgetReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapsDestinationsWidgetReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889903CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOProactiveWidgetItemIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  _BOOL8 v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v13 || (v8 & 7) == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_33;
        v15 = 0;
        while (1)
        {
          v16 = *v2;
          v17 = *(_QWORD *)&a1[v16];
          if (v17 == -1 || v17 >= *(_QWORD *)&a1[*v3])
            break;
          v18 = v17 + 1;
          v19 = *(char *)(*(_QWORD *)&a1[*v5] + v17);
          *(_QWORD *)&a1[v16] = v18;
          if (v19 < 0 && v15++ <= 8)
            continue;
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        v21 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v21 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v21;
}

BOOL GEOMapsNearbyWidgetReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  int v17;
  GEOMapsServerMetadata *v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  _BOOL8 v27;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          if (v14 == -1 || v14 >= *(_QWORD *)&v5[*v7])
            break;
          v15 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v14 + 1;
          v12 |= (unint64_t)(v15 & 0x7F) << v10;
          if ((v15 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v16 = v11++ >= 9;
          if (v16)
          {
            v12 = 0;
            v17 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v17 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v17 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 2)
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v24 = *v6;
            v25 = *(_QWORD *)&v5[v24];
            if (v25 == -1 || v25 >= *(_QWORD *)&v5[*v7])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v25);
            *(_QWORD *)&v5[v24] = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if ((v26 & 0x80) == 0)
              goto LABEL_34;
            v21 += 7;
            v16 = v22++ >= 9;
            if (v16)
            {
              LODWORD(v23) = 0;
              goto LABEL_36;
            }
          }
          v5[*v8] = 1;
LABEL_34:
          if (v5[*v8])
            LODWORD(v23) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 16) = v23;
        }
        else if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_40;
          v19 = objc_alloc_init(GEOMapsServerMetadata);
          if (!GEOMapsServerMetadataReadAllFrom((uint64_t)v19, v5, a3))
          {

            goto LABEL_40;
          }
          PBReaderRecallMark();
          v20 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v19;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_40;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v27 = v5[*v8] == 0;
  }
  else
  {
LABEL_40:
    v27 = 0;
  }
  objc_sync_exit(v5);

  return v27;
}

void sub_188991408(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapsNearbyWidgetReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapsNearbyWidgetReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_188991468(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapsTransitWidgetReadAllFrom(_BYTE *a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  GEOTransitIncidentItem *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  _BOOL8 v46;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      while (!v5[*v8])
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          if (v14 == -1 || v14 >= *(_QWORD *)&v5[*v7])
            break;
          v15 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v14 + 1;
          v12 |= (unint64_t)(v15 & 0x7F) << v10;
          if ((v15 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v16 = v11++ >= 9;
          if (v16)
          {
            v12 = 0;
            v17 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v17 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v17 || (v12 & 7) == 4)
          break;
        switch((v12 >> 3))
        {
          case 1u:
            v19 = 0;
            v20 = 0;
            v21 = 0;
            a1[28] |= 2u;
            while (1)
            {
              v22 = *v6;
              v23 = *(_QWORD *)&v5[v22];
              if (v23 == -1 || v23 >= *(_QWORD *)&v5[*v7])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v23);
              *(_QWORD *)&v5[v22] = v23 + 1;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if ((v24 & 0x80) == 0)
                goto LABEL_54;
              v19 += 7;
              v16 = v20++ >= 9;
              if (v16)
              {
                LODWORD(v21) = 0;
                goto LABEL_56;
              }
            }
            v5[*v8] = 1;
LABEL_54:
            if (v5[*v8])
              LODWORD(v21) = 0;
LABEL_56:
            v43 = 20;
            goto LABEL_70;
          case 2u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_74;
            v25 = objc_alloc_init(GEOTransitIncidentItem);
            if (!GEOTransitIncidentItemReadAllFrom((uint64_t)v25, v5, a3))
            {

              goto LABEL_74;
            }
            PBReaderRecallMark();
            objc_msgSend(a1, "addTransitIncidentItem:", v25, 0, 0);

LABEL_71:
            if (*(_QWORD *)&v5[*v6] >= *(_QWORD *)&v5[*v7])
              goto LABEL_72;
            break;
          case 3u:
            v26 = 0;
            v27 = 0;
            v28 = 0;
            a1[28] |= 8u;
            while (2)
            {
              v29 = *v6;
              v30 = *(_QWORD *)&v5[v29];
              if (v30 == -1 || v30 >= *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v31 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v30);
                *(_QWORD *)&v5[v29] = v30 + 1;
                v28 |= (unint64_t)(v31 & 0x7F) << v26;
                if (v31 < 0)
                {
                  v26 += 7;
                  v16 = v27++ >= 9;
                  if (v16)
                  {
                    v28 = 0;
                    goto LABEL_60;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              v28 = 0;
LABEL_60:
            v44 = v28 != 0;
            v45 = 25;
            goto LABEL_65;
          case 4u:
            v32 = 0;
            v33 = 0;
            v34 = 0;
            a1[28] |= 4u;
            while (2)
            {
              v35 = *v6;
              v36 = *(_QWORD *)&v5[v35];
              if (v36 == -1 || v36 >= *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v37 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v36);
                *(_QWORD *)&v5[v35] = v36 + 1;
                v34 |= (unint64_t)(v37 & 0x7F) << v32;
                if (v37 < 0)
                {
                  v32 += 7;
                  v16 = v33++ >= 9;
                  if (v16)
                  {
                    v34 = 0;
                    goto LABEL_64;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              v34 = 0;
LABEL_64:
            v44 = v34 != 0;
            v45 = 24;
LABEL_65:
            a1[v45] = v44;
            goto LABEL_71;
          case 5u:
            v38 = 0;
            v39 = 0;
            v21 = 0;
            a1[28] |= 1u;
            while (2)
            {
              v40 = *v6;
              v41 = *(_QWORD *)&v5[v40];
              if (v41 == -1 || v41 >= *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v42 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v41);
                *(_QWORD *)&v5[v40] = v41 + 1;
                v21 |= (unint64_t)(v42 & 0x7F) << v38;
                if (v42 < 0)
                {
                  v38 += 7;
                  v16 = v39++ >= 9;
                  if (v16)
                  {
                    LODWORD(v21) = 0;
                    goto LABEL_69;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              LODWORD(v21) = 0;
LABEL_69:
            v43 = 16;
LABEL_70:
            *(_DWORD *)&a1[v43] = v21;
            goto LABEL_71;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_74;
            goto LABEL_71;
        }
      }
    }
LABEL_72:
    v46 = v5[*v8] == 0;
  }
  else
  {
LABEL_74:
    v46 = 0;
  }
  objc_sync_exit(v5);

  return v46;
}

void sub_188992844(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapsTransitWidgetReadFrom(_BYTE *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapsTransitWidgetReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889928A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitIncidentItemIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  _BOOL8 v16;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_27;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        goto LABEL_27;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v14 != 2)
          goto LABEL_29;
        goto LABEL_23;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_29:
        v16 = 0;
        goto LABEL_28;
      }
LABEL_26:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_27;
    }
    if (v14 != 2)
      goto LABEL_29;
LABEL_23:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_29;
    goto LABEL_26;
  }
LABEL_27:
  v16 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v16;
}

BOOL GEOProactiveWidgetItemReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _BOOL8 v23;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 12) |= 1u;
          while (1)
          {
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
              break;
            v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
            *(_QWORD *)&v3[v20] = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_30;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_32;
            }
          }
          v3[*v6] = 1;
LABEL_30:
          if (v3[*v6])
            LODWORD(v19) = 0;
LABEL_32:
          *(_DWORD *)(a1 + 8) = v19;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_35;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v23 = v3[*v6] == 0;
  }
  else
  {
LABEL_35:
    v23 = 0;
  }
  objc_sync_exit(v3);

  return v23;
}

void sub_1889937F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOProactiveWidgetItemReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOProactiveWidgetItemReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_188993858(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188993C34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitIncidentItemReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  BOOL v15;
  int *v16;
  int *v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  int v26;
  unint64_t v28;
  _BOOL4 v29;
  int *v30;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  int v37;
  char v38;
  char v39;
  char v40;
  int v41;
  int v42;
  void *v43;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v7 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1)
    v14 = 0;
  else
    v14 = a3;
  if (v12)
    v15 = 1;
  else
    v15 = v14 == 0;
  v16 = (int *)MEMORY[0x1E0D82BF0];
  v17 = (int *)MEMORY[0x1E0D82BC8];
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_62;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v16;
      v23 = *(_QWORD *)(v3 + v22);
      if (v23 == -1 || v23 >= *(_QWORD *)(v3 + *v6))
        break;
      v24 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v23 + 1;
      v21 |= (unint64_t)(v24 & 0x7F) << v19;
      if ((v24 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      if (v20++ >= 9)
      {
        v21 = 0;
        v26 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_27:
    v26 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v21 = 0;
LABEL_29:
    if (v26 || (v21 & 7) == 4)
    {
LABEL_62:
      if (v13)
      {
        v40 = 1;
        goto LABEL_72;
      }
      if (v14)
      {
        do
        {
          while (1)
          {
            v42 = *v14++;
            v41 = v42;
            if (v42 != 1 && v41 != 2)
              break;
            *(_BYTE *)(a1 + 44) |= v41;
          }
        }
        while (v41);
      }
      goto LABEL_73;
    }
    v28 = v21 >> 3;
    v29 = v13;
    if (!v15)
    {
      v30 = v14;
      do
      {
        v32 = *v30++;
        v31 = v32;
        v29 = v32 != 0;
        if (v32)
          v33 = v31 == (_DWORD)v28;
        else
          v33 = 1;
      }
      while (!v33);
    }
    if ((_DWORD)v28 != 2)
    {
      if ((_DWORD)v28 != 1)
      {
        v37 = PBReaderSkipValueWithTag();
        v17 = (int *)MEMORY[0x1E0D82BC8];
        if (!v37)
          goto LABEL_70;
        goto LABEL_58;
      }
      if (v29)
      {
        if ((*(_BYTE *)(a1 + 44) & 1) == 0)
        {
          PBReaderReadString();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = 16;
          goto LABEL_48;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_71;
        v9 -= *(_BYTE *)(a1 + 44) & 1;
LABEL_57:
        v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_58:
        if (v9)
          v39 = 1;
        else
          v39 = v13;
        if ((v39 & 1) == 0)
          goto LABEL_62;
        continue;
      }
LABEL_51:
      v38 = PBReaderSkipValueWithTag();
      v17 = (int *)MEMORY[0x1E0D82BC8];
      if ((v38 & 1) == 0)
      {
LABEL_70:
        v40 = 0;
        goto LABEL_72;
      }
      goto LABEL_58;
    }
    break;
  }
  if (!v29)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    PBReaderReadString();
    v34 = objc_claimAutoreleasedReturnValue();
    v35 = 24;
LABEL_48:
    v36 = *(void **)(a1 + v35);
    *(_QWORD *)(a1 + v35) = v34;

    v17 = (int *)MEMORY[0x1E0D82BC8];
    --v9;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
    goto LABEL_57;
  }
LABEL_71:
  v40 = 0;
  v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_72:
  *(_BYTE *)(a1 + 44) |= 1u;
  *(_BYTE *)(a1 + 44) |= 2u;
  if ((v40 & 1) != 0)
  {
LABEL_73:
    v3 = *(_BYTE *)(v3 + *v17) == 0;
    if (!v13)
      return v3;
    goto LABEL_74;
  }
  v3 = 0;
  if (v13)
  {
LABEL_74:
    v43 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_188994148(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188994514(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitIncidentItemReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitIncidentItemReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitIncidentItemReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitIncidentItemReadAllFrom_initialTag;
  Specified = GEOTransitIncidentItemReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_1889946A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitIncidentItemReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitIncidentItemReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_188994700(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18899487C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitIncidentItemIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 44) & 7) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_188994B00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18899562C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAVExternalDeviceClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!_MergedGlobals_192)
  {
    _MergedGlobals_192 = _sl_dlopen();
    if (!_MergedGlobals_192)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("AVExternalDevice");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1ECDBBA48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id GEOGetMapsFeatureFlagsAuthLog()
{
  if (qword_1ECDBBA58 != -1)
    dispatch_once(&qword_1ECDBBA58, &__block_literal_global_28);
  return (id)_MergedGlobals_193;
}

void sub_188998E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL GEOTransitAdvisoryReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v18;
  GEOFormattedString *v20;
  void *v21;
  id v22;
  void *v23;
  _BOOL8 v24;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          if (v11++ >= 9)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_29;
          v20 = objc_alloc_init(GEOFormattedString);
          if (!GEOFormattedStringReadAllFrom((uint64_t)v20, v5, a3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          v21 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v20;

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v22 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v23 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v22;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_29;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v24 = v5[*v8] == 0;
  }
  else
  {
LABEL_29:
    v24 = 0;
  }
  objc_sync_exit(v5);

  return v24;
}

void sub_18899A194(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitAdvisoryReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitAdvisoryReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18899A1F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitAdvisoryIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOTransitArrivalInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_34:
          *(_DWORD *)(a1 + 16) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_18899AF04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitArrivalInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitArrivalInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18899AF64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitArrivalInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_33;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8)
            continue;
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        v22 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v22;
}

void sub_18899B5EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitBannerReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEOPBTransitArtwork *v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  int v44;
  char v45;
  char v46;
  int v47;
  char v48;
  void *v49;
  int v51;
  unint64_t v52;
  char v53;
  char v54;
  char v55;
  BOOL v56;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v53 = v17;
        v54 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v55 = (v19 == 0) | v18;
        v56 = v18;
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_74;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_74:
      v51 = 1;
      goto LABEL_75;
    }
    v33 = v25 >> 3;
    v34 = v56;
    if ((v55 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    if ((_DWORD)v33 == 3)
    {
      if (!v34)
        goto LABEL_63;
      if ((*(_BYTE *)(a1 + 60) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_91;
        v46 = *(_BYTE *)(a1 + 60) << 6;
        goto LABEL_71;
      }
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_91;
      v39 = objc_alloc_init(GEOPBTransitArtwork);
      if (!GEOPBTransitArtworkReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
        goto LABEL_90;
      PBReaderRecallMark();
      v40 = 24;
LABEL_56:
      v41 = *(void **)(a1 + v40);
      *(_QWORD *)(a1 + v40) = v39;

      --v7;
      goto LABEL_72;
    }
    if ((_DWORD)v33 == 2)
      break;
    if ((_DWORD)v33 == 1)
    {
      if (!v34)
        goto LABEL_63;
      if ((*(_BYTE *)(a1 + 60) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_91;
        v39 = objc_alloc_init(GEOFormattedString);
        if (!GEOFormattedStringReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_90;
        PBReaderRecallMark();
        v40 = 32;
        goto LABEL_56;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_91;
      v46 = 32 * *(_BYTE *)(a1 + 60);
LABEL_71:
      v7 += v46 >> 7;
LABEL_72:
      v21 = (int *)MEMORY[0x1E0D82BC8];
      goto LABEL_73;
    }
    if ((v53 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 1) != 0)
    {
LABEL_63:
      v45 = PBReaderSkipValueWithTag();
      v21 = (int *)MEMORY[0x1E0D82BC8];
      if ((v45 & 1) == 0)
      {
        v51 = 0;
        goto LABEL_75;
      }
      goto LABEL_73;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v42 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v43 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v42;

    }
    v44 = PBUnknownFieldAdd();
    v21 = (int *)MEMORY[0x1E0D82BC8];
    if (!v44)
    {
      v51 = 0;
      v52 = 0x1ECDA9000;
      goto LABEL_76;
    }
LABEL_73:
    if (!(v54 & 1 | (v7 != 0)))
      goto LABEL_74;
  }
  if (!v34)
    goto LABEL_63;
  if ((*(_BYTE *)(a1 + 60) & 8) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_91;
    v46 = 16 * *(_BYTE *)(a1 + 60);
    goto LABEL_71;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_91;
  v39 = objc_alloc_init(GEOFormattedString);
  if (GEOFormattedStringReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    v40 = 40;
    goto LABEL_56;
  }
LABEL_90:

LABEL_91:
  v51 = 0;
  v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_75:
  v52 = 0x1ECDA9000uLL;
  if ((v53 & 1) == 0)
    goto LABEL_77;
LABEL_76:
  *(_BYTE *)(a1 + *(int *)(v52 + 3024)) |= 1u;
LABEL_77:
  if (v56 || (v51 & 1) == 0)
  {
    *(_BYTE *)(a1 + *(int *)(v52 + 3024)) |= 4u;
    *(_BYTE *)(a1 + *(int *)(v52 + 3024)) |= 8u;
    *(_BYTE *)(a1 + *(int *)(v52 + 3024)) |= 2u;
  }
  else if (v19)
  {
    while (1)
    {
      v47 = *v19++;
      v48 = 4;
      switch(v47)
      {
        case 0:
          goto LABEL_84;
        case 1:
          goto LABEL_83;
        case 2:
          v48 = 8;
          goto LABEL_83;
        case 3:
          v48 = 2;
LABEL_83:
          *(_BYTE *)(a1 + *(int *)(v52 + 3024)) |= v48;
          break;
        default:
          continue;
      }
    }
  }
LABEL_84:
  if (v51)
    v3 = *(_BYTE *)(v3 + *v21) == 0;
  else
    v3 = 0;
  if (v56)
  {
    v49 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_18899BD44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18899BE84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18899C548(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitBannerReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitBannerReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitBannerReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitBannerReadAllFrom_initialTag;
  Specified = GEOTransitBannerReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_18899C710(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitBannerReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitBannerReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18899C770(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitBannerIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  _BOOL8 v18;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_31;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_31;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2 || (_DWORD)v17 == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringIsValid(a1))
          goto LABEL_32;
LABEL_28:
        PBReaderRecallMark();
        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_32;
LABEL_30:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_31;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOPBTransitArtworkIsValid(a1))
    {
LABEL_32:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_28;
  }
LABEL_31:
  v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

void sub_18899CB14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitBannerIsDirty(uint64_t a1)
{
  char v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = *(_BYTE *)(a1 + 60);
  if ((v2 & 0x10) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 60) & 4) != 0)
  {
    if ((GEOFormattedStringIsDirty(*(os_unfair_lock_s **)(a1 + 32)) & 1) != 0)
      return 1;
    v2 = *(_BYTE *)(a1 + 60);
  }
  if ((v2 & 8) != 0)
  {
    if ((GEOFormattedStringIsDirty(*(os_unfair_lock_s **)(a1 + 40)) & 1) != 0)
      return 1;
    v2 = *(_BYTE *)(a1 + 60);
  }
  if ((v2 & 2) != 0)
    return (uint64_t)GEOPBTransitArtworkIsDirty(*(os_unfair_lock_s **)(a1 + 24));
  else
    return 0;
}

os_unfair_lock_s *GEOTransitBannerIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTransitBannerIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_18899CE80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18899D12C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18899D41C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitBaseFareReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  char v18;
  int *v19;
  int *v20;
  char v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  int v32;
  int v33;
  unint64_t v35;
  BOOL v36;
  int *v37;
  int v38;
  int v39;
  BOOL v40;
  GEOTransitPrice *v41;
  void *v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  int *v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  char v76;
  uint64_t v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  int v85;
  char v86;
  void *v87;
  char v89;
  char v90;
  int v91;
  char v92;
  char v93;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 88)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFDFFFCFFFBFFFALL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        if ((((v16 | v11) | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v91 = 1;
        v21 = v17;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_130;
        v89 = v17;
        v92 = v18 | v17;
        v93 = (v20 == 0) | v18;
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        v90 = v18;
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v22))
      goto LABEL_128;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v19;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      v31 = v25++ >= 9;
      if (v31)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    v33 = v26 & 7;
    if (v32 || v33 == 4)
    {
LABEL_128:
      v91 = 1;
      goto LABEL_129;
    }
    v35 = v26 >> 3;
    v36 = v18;
    if ((v93 & 1) == 0)
    {
      v37 = v20;
      do
      {
        v39 = *v37++;
        v38 = v39;
        v36 = v39 != 0;
        if (v39)
          v40 = v38 == (_DWORD)v35;
        else
          v40 = 1;
      }
      while (!v40);
    }
    switch((int)v35)
    {
      case 1:
        if (!v36)
          goto LABEL_97;
        if ((*(_BYTE *)(a1 + 88) & 0x20) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_147;
          v41 = objc_alloc_init(GEOTransitPrice);
          if (GEOTransitPriceReadAllFrom((uint64_t)v41, (void *)v3))
          {
            PBReaderRecallMark();
            v42 = *(void **)(a1 + 48);
            *(_QWORD *)(a1 + 48) = v41;

            --v7;
            goto LABEL_124;
          }
          goto LABEL_146;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_147;
        v7 += *(unsigned __int8 *)(a1 + 88) << 26 >> 31;
        goto LABEL_124;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_97;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        *(_BYTE *)(a1 + 88) |= 2u;
        while (2)
        {
          v49 = *v19;
          v50 = *(_QWORD *)(v3 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v50);
            *(_QWORD *)(v3 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              v31 = v47++ >= 9;
              if (v31)
              {
                LODWORD(v48) = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          LODWORD(v48) = 0;
LABEL_102:
        v77 = 80;
        goto LABEL_107;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_97;
        v53 = 0;
        v54 = 0;
        v48 = 0;
        *(_BYTE *)(a1 + 88) |= 1u;
        while (2)
        {
          v55 = *v19;
          v56 = *(_QWORD *)(v3 + v55);
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v56);
            *(_QWORD *)(v3 + v55) = v57;
            v48 |= (unint64_t)(v58 & 0x7F) << v53;
            if (v58 < 0)
            {
              v53 += 7;
              v31 = v54++ >= 9;
              if (v31)
              {
                LODWORD(v48) = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          LODWORD(v48) = 0;
LABEL_106:
        v77 = 76;
LABEL_107:
        *(_DWORD *)(a1 + v77) = v48;
        goto LABEL_126;
      case 4:
        if (!v36 || (*(_BYTE *)(a1 + 88) & 0x40) != 0)
        {
          v75 = PBReaderSkipValueWithTag();
          v18 = v90;
          v22 = (int *)MEMORY[0x1E0D82BC8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if ((v75 & 1) == 0)
            goto LABEL_145;
          goto LABEL_126;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_147;
        v41 = objc_alloc_init(GEOPBTransitPaymentMethod);
        if (GEOPBTransitPaymentMethodReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          -[GEOTransitBaseFare _addNoFlagsSupportedPaymentMethod:](a1, v41);

LABEL_124:
          v18 = v90;
          v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_125:
          v23 = (int *)MEMORY[0x1E0D82BB8];
LABEL_126:
          if (!(v92 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_128;
          continue;
        }
LABEL_146:

LABEL_147:
        v91 = 0;
        v18 = v90;
LABEL_129:
        v21 = v89;
LABEL_130:
        if ((v21 & 1) != 0)
LABEL_131:
          *(_BYTE *)(a1 + 88) |= 8u;
        if (v18 & 1 | ((v91 & 1) == 0))
        {
          *(_BYTE *)(a1 + 88) |= 0x20u;
          *(_BYTE *)(a1 + 88) |= 0x40u;
          *(_BYTE *)(a1 + 88) |= 0x10u;
        }
        else if (v20)
        {
          while (1)
          {
            v85 = *v20++;
            v86 = 32;
            switch(v85)
            {
              case 0:
                goto LABEL_139;
              case 1:
                goto LABEL_138;
              case 4:
                v86 = 64;
                goto LABEL_138;
              case 6:
                v86 = 16;
LABEL_138:
                *(_BYTE *)(a1 + 88) |= v86;
                break;
              default:
                continue;
            }
          }
        }
LABEL_139:
        if (v91)
        {
          v3 = *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]) == 0;
          if ((v18 & 1) == 0)
            return v3;
LABEL_143:
          v87 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v18 & 1) != 0)
            goto LABEL_143;
        }
        return v3;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_97;
        v59 = 0;
        v60 = 0;
        v61 = 0;
        *(_BYTE *)(a1 + 88) |= 4u;
        while (2)
        {
          v62 = *v19;
          v63 = *(_QWORD *)(v3 + v62);
          v64 = v63 + 1;
          if (v63 == -1 || v64 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v63);
            *(_QWORD *)(v3 + v62) = v64;
            v61 |= (unint64_t)(v65 & 0x7F) << v59;
            if (v65 < 0)
            {
              v59 += 7;
              v31 = v60++ >= 9;
              if (v31)
              {
                v61 = 0;
                goto LABEL_111;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          v61 = 0;
LABEL_111:
        *(_BYTE *)(a1 + 84) = v61 != 0;
        goto LABEL_126;
      case 6:
        if (!v36 || (*(_BYTE *)(a1 + 88) & 0x10) != 0)
          goto LABEL_97;
        if (v33 != 2)
        {
          v78 = 0;
          v79 = 0;
          v80 = 0;
          while (1)
          {
            v81 = *v19;
            v82 = *(_QWORD *)(v3 + v81);
            v83 = v82 + 1;
            if (v82 == -1 || v83 > *(_QWORD *)(v3 + *v6))
              break;
            v84 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v82);
            *(_QWORD *)(v3 + v81) = v83;
            v80 |= (unint64_t)(v84 & 0x7F) << v78;
            if (v84 < 0)
            {
              v78 += 7;
              v31 = v79++ >= 9;
              if (!v31)
                continue;
            }
            goto LABEL_123;
          }
          *(_BYTE *)(v3 + *v22) = 1;
LABEL_123:
          PBRepeatedUInt32Add();
          goto LABEL_124;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_147;
        while (1)
        {
          v66 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v67 = 0;
          v68 = 0;
          v69 = 0;
          v70 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v71 = *v19;
            v72 = *(_QWORD *)(v3 + v71);
            v73 = v72 + 1;
            if (v72 == -1 || v73 > *(_QWORD *)(v3 + *v6))
              break;
            v74 = *(_BYTE *)(*(_QWORD *)(v3 + *v70) + v72);
            *(_QWORD *)(v3 + v71) = v73;
            v69 |= (unint64_t)(v74 & 0x7F) << v67;
            if (v74 < 0)
            {
              v67 += 7;
              v31 = v68++ >= 9;
              if (!v31)
                continue;
            }
            goto LABEL_93;
          }
          *(_BYTE *)(v3 + *v66) = 1;
LABEL_93:
          PBRepeatedUInt32Add();
        }
        PBReaderRecallMark();
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v18 = v90;
        goto LABEL_125;
      default:
        if ((v89 & 1) == 0 || (*(_BYTE *)(a1 + 88) & 8) != 0)
        {
LABEL_97:
          v76 = PBReaderSkipValueWithTag();
          v23 = (int *)MEMORY[0x1E0D82BB8];
          v22 = (int *)MEMORY[0x1E0D82BC8];
          v18 = v90;
          if ((v76 & 1) == 0)
          {
LABEL_145:
            v91 = 0;
            goto LABEL_129;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v44 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v43;

          }
          v45 = PBUnknownFieldAdd();
          v18 = v90;
          v22 = (int *)MEMORY[0x1E0D82BC8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if (!v45)
          {
            v91 = 0;
            goto LABEL_131;
          }
        }
        goto LABEL_126;
    }
  }
}

void sub_18899E178(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18899E524(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18899F2A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOTransitBaseFareCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 48), "readAll:", 1);
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = *(id *)(a1 + 56);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v7);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

unint64_t GEOTransitBaseFareReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitBaseFareReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitBaseFareReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitBaseFareReadAllFrom_initialTag;
  Specified = GEOTransitBaseFareReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitBaseFareCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_18899F548(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitBaseFareReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitBaseFareReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18899F5A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitBaseFareIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  _BOOL8 v43;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOTransitPriceIsValid(a1))
            goto LABEL_44;
          goto LABEL_75;
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_75;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_60;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_61;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_75;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_60;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_61;
          }
        case 4u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOPBTransitPaymentMethodIsValid(a1))
            goto LABEL_44;
          goto LABEL_75;
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_75;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_60;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_61;
          }
        case 6u:
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_75:
              PBReaderRecallMark();
              return 0;
            }
LABEL_64:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v38 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v39 = *v2;
                v40 = *(_QWORD *)&a1[v39];
                v41 = v40 + 1;
                if (v40 == -1 || v41 > *(_QWORD *)&a1[*v3])
                  break;
                v42 = *(char *)(*(_QWORD *)&a1[*v5] + v40);
                *(_QWORD *)&a1[v39] = v41;
                if (v42 < 0)
                {
                  v13 = v38++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_64;
              }
              a1[*v4] = 1;
            }
LABEL_44:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_75;
            while (1)
            {
              v33 = *v2;
              v34 = *(_QWORD *)&a1[v33];
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
                break;
              v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
              *(_QWORD *)&a1[v33] = v35;
              if (v36 < 0)
              {
                v37 = v15++;
                if (v37 <= 8)
                  continue;
              }
              goto LABEL_61;
            }
LABEL_60:
            a1[*v4] = 1;
          }
LABEL_61:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_73;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_75;
          goto LABEL_61;
      }
    }
  }
LABEL_73:
  v43 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v43;
}

BOOL GEOTransitPriceIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  _BOOL8 v29;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_41;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_41;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        if (v15 != 2)
          goto LABEL_43;
      }
      else if ((_DWORD)v17 == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_43;
        v18 = 0;
        while (1)
        {
          v19 = *v2;
          v20 = *(_QWORD *)&a1[v19];
          v21 = v20 + 1;
          if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
            break;
          v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
          *(_QWORD *)&a1[v19] = v21;
          if (v22 < 0)
          {
            v23 = v18++ > 8;
            if (!v23)
              continue;
          }
          goto LABEL_40;
        }
LABEL_37:
        a1[*v4] = 1;
        goto LABEL_40;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_43:
        v29 = 0;
        goto LABEL_42;
      }
LABEL_40:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_41;
    }
    if ((v8 & 7) != 0)
      goto LABEL_43;
    v24 = 0;
    while (1)
    {
      v25 = *v2;
      v26 = *(_QWORD *)&a1[v25];
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
        goto LABEL_37;
      v28 = *(char *)(*(_QWORD *)&a1[*v5] + v26);
      *(_QWORD *)&a1[v25] = v27;
      if (v28 < 0)
      {
        v23 = v24++ > 8;
        if (!v23)
          continue;
      }
      goto LABEL_40;
    }
  }
LABEL_41:
  v29 = a1[*v4] == 0;
LABEL_42:
  PBReaderRecallMark();
  return v29;
}

void sub_18899FED0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitBaseFareIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v2 = *(unsigned __int8 *)(a1 + 88) > 0xFu;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return v2;
}

void sub_1889A03F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889A08E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889A0C14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitBoardingInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEOTransitBoardingInfoEntry *v39;
  uint64_t v40;
  id v41;
  void *v42;
  int v43;
  void *v44;
  char v45;
  char v46;
  int v47;
  char v48;
  void *v49;
  int v51;
  unint64_t v52;
  char v53;
  char v54;
  char v55;
  BOOL v56;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 76)), (uint16x4_t)0xFFFFFFFBFFFEFFFDLL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 76) & 1)+ ((*(_BYTE *)(a1 + 76) & 0x10) != 0));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 3;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v53 = v17;
        v54 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v55 = (v19 == 0) | v18;
        v56 = v18;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_84;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_84:
      v51 = 1;
      goto LABEL_85;
    }
    v33 = v25 >> 3;
    v34 = v56;
    if ((v55 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34 || (*(_BYTE *)(a1 + 76) & 4) != 0)
          goto LABEL_71;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_103;
        v39 = objc_alloc_init(GEOTransitBoardingInfoEntry);
        if (!GEOTransitBoardingInfoEntryReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_102;
        PBReaderRecallMark();
        -[GEOTransitBoardingInfo _addNoFlagsEntry:](a1, v39);

        goto LABEL_82;
      case 2:
        if (!v34)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 76) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_103;
          v46 = 16 * *(_BYTE *)(a1 + 76);
          goto LABEL_81;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_103;
        v39 = objc_alloc_init(GEOTransitExitPlanInfo);
        if (!GEOTransitExitPlanInfoReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_102;
        PBReaderRecallMark();
        v40 = 40;
        goto LABEL_70;
      case 4:
        if (!v34)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 76) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_103;
          v46 = 4 * *(_BYTE *)(a1 + 76);
          goto LABEL_81;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_103;
        v39 = objc_alloc_init(GEOTransitListTimeInstruction);
        if (!GEOTransitListTimeInstructionReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_102;
        PBReaderRecallMark();
        v40 = 56;
        goto LABEL_70;
      case 5:
        if (!v34)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 76) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_103;
          v46 = *(_BYTE *)(a1 + 76) << 6;
          goto LABEL_81;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_103;
        v39 = objc_alloc_init(GEOTransitListTimeInstruction);
        if (!GEOTransitListTimeInstructionReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_102;
        PBReaderRecallMark();
        v40 = 24;
        goto LABEL_70;
      case 6:
        if (!v34)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 76) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_103;
          v46 = 8 * *(_BYTE *)(a1 + 76);
LABEL_81:
          v7 += v46 >> 7;
LABEL_82:
          v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_83:
          if (!(v54 & 1 | (v7 != 0)))
            goto LABEL_84;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_103;
        v39 = objc_alloc_init(GEOTransitListTimeInstruction);
        if (GEOTransitListTimeInstructionReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v40 = 48;
LABEL_70:
          v44 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v39;

          --v7;
          goto LABEL_82;
        }
LABEL_102:

LABEL_103:
        v51 = 0;
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_85:
        v52 = 0x1ECDA9000uLL;
        if ((v53 & 1) != 0)
LABEL_86:
          *(_BYTE *)(a1 + *(int *)(v52 + 3104)) |= 1u;
        if (v56 || (v51 & 1) == 0)
        {
          *(_BYTE *)(a1 + *(int *)(v52 + 3104)) |= 4u;
          *(_BYTE *)(a1 + *(int *)(v52 + 3104)) |= 8u;
          *(_BYTE *)(a1 + *(int *)(v52 + 3104)) |= 0x20u;
          *(_BYTE *)(a1 + *(int *)(v52 + 3104)) |= 2u;
          *(_BYTE *)(a1 + *(int *)(v52 + 3104)) |= 0x10u;
        }
        else if (v19)
        {
          while (1)
          {
            v47 = *v19++;
            v48 = 4;
            switch(v47)
            {
              case 0:
                goto LABEL_96;
              case 1:
                goto LABEL_95;
              case 2:
                v48 = 8;
                goto LABEL_95;
              case 4:
                v48 = 32;
                goto LABEL_95;
              case 5:
                v48 = 2;
                goto LABEL_95;
              case 6:
                v48 = 16;
LABEL_95:
                *(_BYTE *)(a1 + *(int *)(v52 + 3104)) |= v48;
                break;
              default:
                continue;
            }
          }
        }
LABEL_96:
        if (v51)
          v3 = *(_BYTE *)(v3 + *v21) == 0;
        else
          v3 = 0;
        if (v56)
        {
          v49 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v53 & 1) == 0 || (*(_BYTE *)(a1 + 76) & 1) != 0)
        {
LABEL_71:
          v45 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if ((v45 & 1) == 0)
          {
            v51 = 0;
            goto LABEL_85;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v42 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v41;

          }
          v43 = PBUnknownFieldAdd();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if (!v43)
          {
            v51 = 0;
            v52 = 0x1ECDA9000;
            goto LABEL_86;
          }
        }
        goto LABEL_83;
    }
  }
}

void sub_1889A16BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889A17FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889A1938(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889A1A78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889A2498(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitBoardingInfoCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = a1[4];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v8);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  objc_msgSend(a1[5], "readAll:", 1);
  objc_msgSend(a1[7], "readAll:", 1);
  objc_msgSend(a1[3], "readAll:", 1);
  return objc_msgSend(a1[6], "readAll:", 1);
}

unint64_t GEOTransitBoardingInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitBoardingInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitBoardingInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitBoardingInfoReadAllFrom_initialTag;
  Specified = GEOTransitBoardingInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitBoardingInfoCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_1889A276C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitBoardingInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitBoardingInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889A27CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitBoardingInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
LABEL_35:
    v17 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v17;
  }
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (a1[*v4])
      goto LABEL_35;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *v2;
      v10 = *(_QWORD *)&a1[v9];
      v11 = v10 + 1;
      if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
        break;
      v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
      *(_QWORD *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0)
        goto LABEL_12;
      v6 += 7;
      if (v7++ >= 9)
      {
        v8 = 0;
        v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v14 = a1[*v4];
    if (a1[*v4])
      v8 = 0;
LABEL_14:
    v15 = v8 & 7;
    if (v14 || v15 == 4)
      goto LABEL_35;
    switch((v8 >> 3))
    {
      case 1u:
        if (v15 == 2 && PBReaderPlaceMark() && GEOTransitBoardingInfoEntryIsValid(a1))
          goto LABEL_30;
        goto LABEL_34;
      case 2u:
        if (v15 == 2 && PBReaderPlaceMark() && GEOTransitExitPlanInfoIsValid(a1))
          goto LABEL_30;
        goto LABEL_34;
      case 4u:
      case 5u:
      case 6u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitListTimeInstructionIsValid(a1))
          goto LABEL_34;
LABEL_30:
        PBReaderRecallMark();
        goto LABEL_31;
      default:
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
LABEL_31:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_35;
          continue;
        }
LABEL_34:
        PBReaderRecallMark();
        return 0;
    }
  }
}

BOOL GEOTransitBoardingInfoEntryIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  _BOOL8 v28;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_58;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_55;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_45;
          }
        case 2u:
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringIsValid(a1))
            goto LABEL_58;
          goto LABEL_44;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitOccupancyInfoIsValid(a1))
            goto LABEL_58;
          goto LABEL_44;
        case 5u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOTransitExitPlanInfoIsValid(a1))
            goto LABEL_44;
          goto LABEL_58;
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_58;
          v23 = 0;
          break;
        case 7u:
        case 8u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitListTimeInstructionIsValid(a1))
            goto LABEL_58;
LABEL_44:
          PBReaderRecallMark();
          continue;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_58:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v24 = *v2;
        v25 = *(_QWORD *)&a1[v24];
        v26 = v25 + 1;
        if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
          break;
        v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
        *(_QWORD *)&a1[v24] = v26;
        if (v27 < 0)
        {
          v22 = v23++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_45;
      }
LABEL_55:
      a1[*v4] = 1;
LABEL_45:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v28 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v28;
}

BOOL GEOTransitExitPlanInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  _BOOL8 v34;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_55;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_55;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        if (v15 != 2)
        {
          if ((v8 & 7) != 0)
            goto LABEL_57;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_42;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v28 = v15++;
              if (v28 <= 8)
                continue;
            }
            goto LABEL_43;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_57;
LABEL_46:
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
        {
          v29 = a1[*v4];
          if (a1[*v4])
            break;
          while (1)
          {
            v30 = *v2;
            v31 = *(_QWORD *)&a1[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&a1[*v3])
              break;
            v33 = *(char *)(*(_QWORD *)&a1[*v5] + v31);
            *(_QWORD *)&a1[v30] = v32;
            if (v33 < 0)
            {
              v13 = v29++ >= 9;
              if (!v13)
                continue;
            }
            goto LABEL_46;
          }
          a1[*v4] = 1;
        }
        goto LABEL_32;
      }
      if ((_DWORD)v17 == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_57;
        v18 = 0;
        while (1)
        {
          v19 = *v2;
          v20 = *(_QWORD *)&a1[v19];
          v21 = v20 + 1;
          if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
            break;
          v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
          *(_QWORD *)&a1[v19] = v21;
          if (v22 < 0 && v18++ <= 8)
            continue;
          goto LABEL_43;
        }
LABEL_42:
        a1[*v4] = 1;
        goto LABEL_43;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_57;
LABEL_43:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_55;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringIsValid(a1))
    {
LABEL_57:
      PBReaderRecallMark();
      return 0;
    }
LABEL_32:
    PBReaderRecallMark();
    goto LABEL_43;
  }
LABEL_55:
  v34 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v34;
}

void sub_1889A32C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitBoardingInfoIsDirty(uint64_t a1)
{
  int v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v2 = *(unsigned __int8 *)(a1 + 76);
  if ((v2 & 0x44444444) != 0)
    return 1;
  if ((v2 & 8) != 0)
  {
    if ((GEOTransitExitPlanInfoIsDirty(*(os_unfair_lock_s **)(a1 + 40)) & 1) != 0)
      return 1;
    LOBYTE(v2) = *(_BYTE *)(a1 + 76);
  }
  if ((v2 & 0x20) != 0)
  {
    if ((GEOTransitListTimeInstructionIsDirty(*(os_unfair_lock_s **)(a1 + 56)) & 1) != 0)
      return 1;
    LOBYTE(v2) = *(_BYTE *)(a1 + 76);
  }
  if ((v2 & 2) != 0)
  {
    if ((GEOTransitListTimeInstructionIsDirty(*(os_unfair_lock_s **)(a1 + 24)) & 1) != 0)
      return 1;
    LOBYTE(v2) = *(_BYTE *)(a1 + 76);
  }
  if ((v2 & 0x10) == 0)
    goto LABEL_16;
  if ((GEOTransitListTimeInstructionIsDirty(*(os_unfair_lock_s **)(a1 + 48)) & 1) != 0)
    return 1;
  LOBYTE(v2) = *(_BYTE *)(a1 + 76);
LABEL_16:
  if ((v2 & 4) == 0)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v5 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v6 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v5);
        if ((GEOTransitBoardingInfoEntryIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v8 + 1) + 8 * i)) & 1) != 0)
        {
          v3 = 1;
          goto LABEL_28;
        }
      }
      v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_28:

  return v3;
}

os_unfair_lock_s *GEOTransitBoardingInfoIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTransitBoardingInfoIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 18);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1889A38E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889A3CF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889A4100(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitBoardingInfoEntryReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  id v44;
  void *v45;
  int v46;
  GEOFormattedString *v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  void *v56;
  char v57;
  __int16 v58;
  int v59;
  __int16 v60;
  void *v61;
  int v63;
  unint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 76);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 72));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 92)), (uint16x4_t)0xFFFCFFF9FFFAFFFDLL), (int8x8_t)0x1000100010001))+ (HIBYTE(*(_WORD *)(a1 + 92)) & 1)+ ((*(_WORD *)(a1 + 92) >> 5) & 1)+ ((*(_WORD *)(a1 + 92) >> 2) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 3;
        v65 = v16 & ~(_BYTE)v11 | v9;
        v66 = v16 | v11 | v65;
        if ((((v16 | v11) | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v67 = (v17 == 0) | v16 | v11;
        v68 = v16 | v11;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_117;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_117:
      v63 = 1;
      goto LABEL_118;
    }
    v31 = v23 >> 3;
    v32 = v68;
    if ((v67 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_92;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 92) |= 1u;
        while (1)
        {
          v40 = *v18;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v41);
          *(_QWORD *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0)
            goto LABEL_95;
          v37 += 7;
          v28 = v38++ >= 9;
          if (v28)
          {
            LODWORD(v39) = 0;
            goto LABEL_97;
          }
        }
        *(_BYTE *)(v3 + *v19) = 1;
LABEL_95:
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v39) = 0;
LABEL_97:
        *(_DWORD *)(a1 + 84) = v39;
        goto LABEL_116;
      case 2:
        if (!v32)
          goto LABEL_92;
        if ((*(_WORD *)(a1 + 92) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_137;
          v58 = *(_WORD *)(a1 + 92) << 9;
          goto LABEL_114;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_137;
        v47 = objc_alloc_init(GEOFormattedString);
        if (!GEOFormattedStringReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_136;
        PBReaderRecallMark();
        v48 = 48;
        goto LABEL_91;
      case 3:
        if (!v32)
          goto LABEL_92;
        if ((*(_WORD *)(a1 + 92) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_137;
          v58 = *(_WORD *)(a1 + 92) << 12;
          goto LABEL_114;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_137;
        v47 = objc_alloc_init(GEOFormattedString);
        if (!GEOFormattedStringReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_136;
        PBReaderRecallMark();
        v48 = 24;
        goto LABEL_91;
      case 4:
        if (!v32)
          goto LABEL_92;
        if ((*(_WORD *)(a1 + 92) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_137;
          v58 = *(_WORD *)(a1 + 92) << 7;
          goto LABEL_114;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_137;
        v47 = objc_alloc_init(GEOTransitOccupancyInfo);
        if (!GEOTransitOccupancyInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_136;
        PBReaderRecallMark();
        v48 = 64;
        goto LABEL_91;
      case 5:
        if (!v32)
          goto LABEL_92;
        if ((*(_WORD *)(a1 + 92) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_137;
          v58 = *(_WORD *)(a1 + 92) << 10;
          goto LABEL_114;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_137;
        v47 = objc_alloc_init(GEOTransitExitPlanInfo);
        if (!GEOTransitExitPlanInfoReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_136;
        PBReaderRecallMark();
        v48 = 40;
        goto LABEL_91;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_92;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        *(_WORD *)(a1 + 92) |= 2u;
        while (2)
        {
          v52 = *v18;
          v53 = *(_QWORD *)(v3 + v52);
          v54 = v53 + 1;
          if (v53 == -1 || v54 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v53);
            *(_QWORD *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              v28 = v50++ >= 9;
              if (v28)
              {
                v51 = 0;
                goto LABEL_101;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v51 = 0;
LABEL_101:
        *(_BYTE *)(a1 + 88) = v51 != 0;
        goto LABEL_116;
      case 7:
        if (!v32)
          goto LABEL_92;
        if ((*(_WORD *)(a1 + 92) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_137;
          v58 = *(_WORD *)(a1 + 92) << 8;
          goto LABEL_114;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_137;
        v47 = objc_alloc_init(GEOTransitListTimeInstruction);
        if (!GEOTransitListTimeInstructionReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_136;
        PBReaderRecallMark();
        v48 = 56;
        goto LABEL_91;
      case 8:
        if (!v32)
          goto LABEL_92;
        if ((*(_WORD *)(a1 + 92) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_137;
          v58 = *(_WORD *)(a1 + 92) << 11;
LABEL_114:
          v7 += v58 >> 15;
LABEL_115:
          v19 = (int *)MEMORY[0x1E0D82BC8];
          v20 = (int *)MEMORY[0x1E0D82BB8];
LABEL_116:
          if (!(v66 & 1 | (v7 != 0)))
            goto LABEL_117;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_137;
        v47 = objc_alloc_init(GEOTransitListTimeInstruction);
        if (GEOTransitListTimeInstructionReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v48 = 32;
LABEL_91:
          v56 = *(void **)(a1 + v48);
          *(_QWORD *)(a1 + v48) = v47;

          --v7;
          goto LABEL_115;
        }
LABEL_136:

LABEL_137:
        v63 = 0;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_118:
        v64 = 0x1ECDA9000uLL;
        if ((v65 & 1) != 0)
LABEL_119:
          *(_WORD *)(a1 + *(int *)(v64 + 3152)) |= 4u;
        if (v68 & 1 | ((v63 & 1) == 0))
        {
          *(_WORD *)(a1 + *(int *)(v64 + 3152)) |= 0x40u;
          *(_WORD *)(a1 + *(int *)(v64 + 3152)) |= 8u;
          *(_WORD *)(a1 + *(int *)(v64 + 3152)) |= 0x80u;
          *(_WORD *)(a1 + *(int *)(v64 + 3152)) |= 0x10u;
          *(_WORD *)(a1 + *(int *)(v64 + 3152)) |= 0x100u;
          *(_WORD *)(a1 + *(int *)(v64 + 3152)) |= 0x20u;
        }
        else if (v17)
        {
          while (1)
          {
            v59 = *v17++;
            v60 = 64;
            switch(v59)
            {
              case 0:
                goto LABEL_130;
              case 2:
                goto LABEL_129;
              case 3:
                v60 = 8;
                goto LABEL_129;
              case 4:
                v60 = 256;
                goto LABEL_129;
              case 5:
                v60 = 32;
                goto LABEL_129;
              case 7:
                v60 = 128;
                goto LABEL_129;
              case 8:
                v60 = 16;
LABEL_129:
                *(_WORD *)(a1 + *(int *)(v64 + 3152)) |= v60;
                break;
              default:
                continue;
            }
          }
        }
LABEL_130:
        if (v63)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if ((v68 & 1) != 0)
        {
          v61 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v65 & 1) == 0 || (*(_WORD *)(a1 + 92) & 4) != 0)
        {
LABEL_92:
          v57 = PBReaderSkipValueWithTag();
          v20 = (int *)MEMORY[0x1E0D82BB8];
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v57 & 1) == 0)
          {
            v63 = 0;
            goto LABEL_118;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v44 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v45 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v44;

          }
          v46 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          v20 = (int *)MEMORY[0x1E0D82BB8];
          if (!v46)
          {
            v63 = 0;
            v64 = 0x1ECDA9000;
            goto LABEL_119;
          }
        }
        goto LABEL_116;
    }
  }
}

void sub_1889A4C14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889A4D58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889A4E9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889A4FE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889A5120(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889A5C24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitBoardingInfoEntryCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  objc_msgSend(a1[6], "readAll:", 1);
  objc_msgSend(a1[3], "readAll:", 1);
  objc_msgSend(a1[7], "readAll:", 1);
  objc_msgSend(a1[4], "readAll:", 1);
  objc_msgSend(a1[8], "readAll:", 1);
  return objc_msgSend(a1[5], "readAll:", 1);
}

unint64_t GEOTransitBoardingInfoEntryReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 76))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitBoardingInfoEntryReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 76) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitBoardingInfoEntryReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitBoardingInfoEntryReadAllFrom_initialTag;
  Specified = GEOTransitBoardingInfoEntryReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitBoardingInfoEntryCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_1889A5E3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitBoardingInfoEntryReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitBoardingInfoEntryReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889A5E9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitOccupancyInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_33;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8)
            continue;
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        v22 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v22;
}

void sub_1889A62CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitBoardingInfoEntryIsDirty(uint64_t a1)
{
  __int16 v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v2 = *(_WORD *)(a1 + 92);
  if ((v2 & 0x200) != 0)
    return 1;
  if ((v2 & 0x40) != 0)
  {
    if ((GEOFormattedStringIsDirty(*(os_unfair_lock_s **)(a1 + 48)) & 1) != 0)
      return 1;
    v2 = *(_WORD *)(a1 + 92);
  }
  if ((v2 & 8) != 0)
  {
    if ((GEOFormattedStringIsDirty(*(os_unfair_lock_s **)(a1 + 24)) & 1) != 0)
      return 1;
    v2 = *(_WORD *)(a1 + 92);
  }
  if ((v2 & 0x80) != 0)
  {
    if ((GEOTransitListTimeInstructionIsDirty(*(os_unfair_lock_s **)(a1 + 56)) & 1) != 0)
      return 1;
    v2 = *(_WORD *)(a1 + 92);
  }
  if ((v2 & 0x10) == 0)
    goto LABEL_14;
  if ((GEOTransitListTimeInstructionIsDirty(*(os_unfair_lock_s **)(a1 + 32)) & 1) != 0)
    return 1;
  v2 = *(_WORD *)(a1 + 92);
LABEL_14:
  if ((v2 & 0x100) != 0)
    return 1;
  if ((v2 & 0x20) != 0)
    return (uint64_t)GEOTransitExitPlanInfoIsDirty(*(os_unfair_lock_s **)(a1 + 40));
  else
    return 0;
}

os_unfair_lock_s *GEOTransitBoardingInfoEntryIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTransitBoardingInfoEntryIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 20);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1889A67DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889A6CEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitClusterArtworkItemReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  GEOFormattedString *v27;
  void *v28;
  id v29;
  void *v30;
  _BOOL8 v31;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v17 = v11++ >= 9;
          if (v17)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 2)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_42;
          v27 = objc_alloc_init(GEOFormattedString);
          if (!GEOFormattedStringReadAllFrom((uint64_t)v27, v5, a3))
          {

            goto LABEL_42;
          }
          PBReaderRecallMark();
          v28 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v27;

        }
        else if ((v12 >> 3) == 1)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v23 = *v6;
            v24 = *(_QWORD *)&v5[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&v5[*v7])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v24);
            *(_QWORD *)&v5[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_36;
            v20 += 7;
            v17 = v21++ >= 9;
            if (v17)
            {
              LODWORD(v22) = 0;
              goto LABEL_38;
            }
          }
          v5[*v8] = 1;
LABEL_36:
          if (v5[*v8])
            LODWORD(v22) = 0;
LABEL_38:
          *(_DWORD *)(a1 + 24) = v22;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v29 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v30 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v29;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_42;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v31 = v5[*v8] == 0;
  }
  else
  {
LABEL_42:
    v31 = 0;
  }
  objc_sync_exit(v5);

  return v31;
}

void sub_1889A7668(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitClusterArtworkItemReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitClusterArtworkItemReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889A76C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitClusterArtworkItemIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringIsValid(a1))
        {
LABEL_38:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_38;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8)
            continue;
          goto LABEL_35;
        }
        a1[*v4] = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_38;
      }
LABEL_35:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

void sub_1889A7EF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitClusterArtworkSetReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  int v17;
  int *v18;
  int *v19;
  int v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  BOOL v30;
  int v31;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  GEOTransitClusterArtworkItem *v47;
  id v48;
  void *v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  int v57;
  int v58;
  char v59;
  void *v60;
  char v62;
  int v63;
  int v64;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 68) >> 2) & 1)
      + (*(_BYTE *)(a1 + 68) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 1) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_DWORD)v11 | v7;
        v64 = v16 | v11;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        if ((((v16 | v11) | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = 1;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_82;
        v62 = v17;
        v63 = (v9 != 0) | v64 | v17;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v7;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v9;
        v7 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_BYTE *)(v3 + *v21))
      goto LABEL_80;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v18;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      v30 = v24++ >= 9;
      if (v30)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    v32 = v25 & 7;
    if (v31 || v32 == 4)
    {
LABEL_80:
      v20 = 1;
      goto LABEL_81;
    }
    v34 = v25 >> 3;
    v35 = v64;
    if (!((v19 == 0) | v64 & 1))
    {
      v36 = v19;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    if ((_DWORD)v34 == 2)
      break;
    if ((_DWORD)v34 == 1)
    {
      if (v35 && (*(_BYTE *)(a1 + 68) & 2) == 0)
      {
        if (v32 == 2)
        {
          v20 = PBReaderPlaceMark();
          if (!v20)
            goto LABEL_81;
          while (*(_QWORD *)(v3 + *v18) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v21))
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            while (1)
            {
              v43 = *v18;
              v44 = *(_QWORD *)(v3 + v43);
              v45 = v44 + 1;
              if (v44 == -1 || v45 > *(_QWORD *)(v3 + *v6))
                break;
              v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v44);
              *(_QWORD *)(v3 + v43) = v45;
              v42 |= (unint64_t)(v46 & 0x7F) << v40;
              if (v46 < 0)
              {
                v40 += 7;
                v30 = v41++ >= 9;
                if (!v30)
                  continue;
              }
              goto LABEL_54;
            }
            *(_BYTE *)(v3 + *v21) = 1;
LABEL_54:
            PBRepeatedUInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          while (1)
          {
            v53 = *v18;
            v54 = *(_QWORD *)(v3 + v53);
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v6))
              break;
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              v30 = v51++ >= 9;
              if (!v30)
                continue;
            }
            goto LABEL_77;
          }
          *(_BYTE *)(v3 + *v21) = 1;
LABEL_77:
          PBRepeatedUInt32Add();
        }
LABEL_78:
        if ((v63 & 1) == 0)
          goto LABEL_80;
        goto LABEL_79;
      }
    }
    else if ((v62 & 1) != 0 && (*(_BYTE *)(a1 + 68) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v48 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v49 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v48;

      }
      v20 = PBUnknownFieldAdd();
      if (!v20)
        goto LABEL_83;
      goto LABEL_78;
    }
LABEL_66:
    v20 = PBReaderSkipValueWithTag();
    if ((v20 & v63 & 1) == 0)
      goto LABEL_81;
LABEL_79:
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6))
      goto LABEL_80;
  }
  if (!v35 || (*(_BYTE *)(a1 + 68) & 4) != 0)
    goto LABEL_66;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_101;
  v47 = objc_alloc_init(GEOTransitClusterArtworkItem);
  if (GEOTransitClusterArtworkItemReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOTransitClusterArtworkSet _addNoFlagsArtworkItem:](a1, v47);

    goto LABEL_78;
  }

LABEL_101:
  v20 = 0;
LABEL_81:
  LOBYTE(v17) = v62;
LABEL_82:
  if ((v17 & 1) != 0)
LABEL_83:
    *(_BYTE *)(a1 + 68) |= 1u;
  if (v64 & 1 | ((v20 & 1) == 0))
  {
    *(_BYTE *)(a1 + 68) |= 2u;
    *(_BYTE *)(a1 + 68) |= 4u;
    goto LABEL_94;
  }
  if (v19)
  {
    while (2)
    {
      while (1)
      {
        v58 = *v19++;
        v57 = v58;
        if (v58 == 1)
          break;
        if (v57 == 2)
        {
          v59 = 4;
          goto LABEL_93;
        }
        if (!v57)
          goto LABEL_94;
      }
      v59 = 2;
LABEL_93:
      *(_BYTE *)(a1 + 68) |= v59;
      continue;
    }
  }
LABEL_94:
  if (v20)
    v3 = *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]) == 0;
  else
    v3 = 0;
  if ((v64 & 1) != 0)
  {
    v60 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1889A8864(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889A9288(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOTransitClusterArtworkSetCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 48);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOTransitClusterArtworkSetReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitClusterArtworkSetReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitClusterArtworkSetReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitClusterArtworkSetReadAllFrom_initialTag;
  Specified = GEOTransitClusterArtworkSetReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitClusterArtworkSetCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1889A9514(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitClusterArtworkSetReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitClusterArtworkSetReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889A9574(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitClusterArtworkSetIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_45;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_45;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_47;
LABEL_34:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v22 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v23 = *v2;
              v24 = *(_QWORD *)&a1[v23];
              v25 = v24 + 1;
              if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
                break;
              v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
              *(_QWORD *)&a1[v23] = v25;
              if (v26 < 0)
              {
                v13 = v22++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_34;
            }
            a1[*v4] = 1;
          }
LABEL_30:
          PBReaderRecallMark();
          goto LABEL_44;
        }
        if ((v8 & 7) != 0)
          goto LABEL_47;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0)
          {
            v21 = v15++;
            if (v21 <= 8)
              continue;
          }
          goto LABEL_44;
        }
        a1[*v4] = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_47;
      }
LABEL_44:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_45;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitClusterArtworkItemIsValid(a1))
    {
LABEL_47:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_30;
  }
LABEL_45:
  v27 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v27;
}

void sub_1889A9A90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitClusterArtworkSetIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = (*(_BYTE *)(a1 + 68) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_1889A9E7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889AA17C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889AA48C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitDecoderDataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint16x4_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  int v19;
  int v20;
  int *v21;
  _BOOL4 v22;
  int *v23;
  int v24;
  int *v25;
  int *v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  int v35;
  unint64_t v37;
  BOOL v38;
  int *v39;
  int v40;
  int v41;
  BOOL v42;
  GEOPBTransitStation *v43;
  id v44;
  void *v45;
  int v46;
  __int16 v47;
  void *v48;
  char v50;
  int v51;

  v3 = a2;
  if (a2)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 136));
    v6 = (int *)MEMORY[0x1E0D82BD8];
    *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 132);
    objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 128));
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = *(unsigned __int16 *)(a1 + 140);
    v13 = (uint16x4_t)vdup_n_s16(v12);
    v14 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16(v13, (uint16x4_t)0xFFF6FFFEFFFDFFF5), (int8x8_t)0x1000100010001))+ (v12 & 1)+ ((*(_WORD *)(a1 + 140) >> 7) & 1)+ ((*(_WORD *)(a1 + 140) >> 5) & 1))+ (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16(v13, (uint16x4_t)0xFFF4FFFFFFFAFFFCLL), (int8x8_t)0x1000100010001))+ ((v12 >> 8) & 1)+ ((v12 >> 13) & 1)+ ((v12 >> 9) & 1));
    while (2)
    {
      v15 = 1;
      v16 = 1;
      v17 = 1;
      switch(a3[v7])
      {
        case -4:
          ++v14;
          goto LABEL_8;
        case -3:
          v8 = 1;
          goto LABEL_7;
        case -2:
          v16 = v10;
          goto LABEL_10;
        case -1:
          goto LABEL_10;
        case 0:
          v18 = v14 > 9;
          v19 = v18 & ~(_DWORD)v11 | v9;
          v20 = v18 | v11;
          if ((((v18 | v11) | v8) & 1) != 0)
            v21 = 0;
          else
            v21 = a3;
          v22 = v7 != 0;
          v23 = (int *)MEMORY[0x1E0D82BF0];
          v24 = 1;
          v25 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_116;
          v50 = v19;
          v51 = v22 | v20 | v19;
          v26 = (int *)MEMORY[0x1E0D82BB8];
          break;
        default:
          ++v14;
LABEL_7:
          v15 = v9;
LABEL_8:
          v16 = v10;
          v17 = v11;
LABEL_10:
          ++v7;
          v9 = v15;
          v10 = v16;
          v11 = v17;
          continue;
      }
      break;
    }
    while (!*(_BYTE *)(v3 + *v25))
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
      while (1)
      {
        v30 = *v23;
        v31 = *(_QWORD *)(v3 + v30);
        v32 = v31 + 1;
        if (v31 == -1 || v32 > *(_QWORD *)(v3 + *v6))
          break;
        v33 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v31);
        *(_QWORD *)(v3 + v30) = v32;
        v29 |= (unint64_t)(v33 & 0x7F) << v27;
        if ((v33 & 0x80) == 0)
          goto LABEL_25;
        v27 += 7;
        if (v28++ >= 9)
        {
          v29 = 0;
          v35 = *(unsigned __int8 *)(v3 + *v25);
          goto LABEL_27;
        }
      }
      *(_BYTE *)(v3 + *v25) = 1;
LABEL_25:
      v35 = *(unsigned __int8 *)(v3 + *v25);
      if (*(_BYTE *)(v3 + *v25))
        v29 = 0;
LABEL_27:
      if (v35 || (v29 & 7) == 4)
        break;
      v37 = v29 >> 3;
      v38 = v20;
      if (!((v21 == 0) | v20 & 1))
      {
        v39 = v21;
        do
        {
          v41 = *v39++;
          v40 = v41;
          v38 = v41 != 0;
          if (v41)
            v42 = v40 == (_DWORD)v37;
          else
            v42 = 1;
        }
        while (!v42);
      }
      switch((int)v37)
      {
        case 1:
          if (!v38 || (*(_WORD *)(a1 + 140) & 0x40) != 0)
            goto LABEL_112;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_142;
          v43 = objc_alloc_init(GEOPBTransitStation);
          if (!GEOPBTransitStationReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1))
            goto LABEL_141;
          PBReaderRecallMark();
          -[GEOTransitDecoderData _addNoFlagsStation:](a1, v43);
          goto LABEL_109;
        case 5:
          if (!v38 || (*(_WORD *)(a1 + 140) & 0x10) != 0)
            goto LABEL_112;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_142;
          v43 = objc_alloc_init(GEOPBTransitLine);
          if (!GEOPBTransitLineReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1))
            goto LABEL_141;
          PBReaderRecallMark();
          -[GEOTransitDecoderData _addNoFlagsLine:](a1, v43);
          goto LABEL_109;
        case 8:
          if (!v38 || (*(_WORD *)(a1 + 140) & 2) != 0)
            goto LABEL_112;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_142;
          v43 = objc_alloc_init(GEOPBTransitAccessPoint);
          if (!GEOPBTransitAccessPointReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1))
            goto LABEL_141;
          PBReaderRecallMark();
          -[GEOTransitDecoderData _addNoFlagsAccessPoint:](a1, v43);
          goto LABEL_109;
        case 10:
          if (!v38 || (*(_WORD *)(a1 + 140) & 0x1000) != 0)
            goto LABEL_112;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_142;
          v43 = objc_alloc_init(GEORoute);
          if (!GEORouteReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1))
            goto LABEL_141;
          PBReaderRecallMark();
          -[GEOTransitDecoderData _addNoFlagsWalking:](a1, v43);
          goto LABEL_109;
        case 11:
          if (!v38 || (*(_WORD *)(a1 + 140) & 0x100) != 0)
            goto LABEL_112;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_142;
          v43 = objc_alloc_init(GEOPBTransitStop);
          if (!GEOPBTransitStopReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1))
            goto LABEL_141;
          PBReaderRecallMark();
          -[GEOTransitDecoderData _addNoFlagsStop:](a1, v43);
          goto LABEL_109;
        case 12:
          if (!v38 || (*(_WORD *)(a1 + 140) & 0x2000) != 0)
            goto LABEL_112;
          PBReaderReadData();
          v43 = (GEOPBTransitStation *)objc_claimAutoreleasedReturnValue();
          if (v43)
            -[GEOTransitDecoderData _addNoFlagsZilchPoints:](a1, v43);
          goto LABEL_109;
        case 13:
          if (!v38 || (*(_WORD *)(a1 + 140) & 0x200) != 0)
            goto LABEL_112;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_142;
          v43 = objc_alloc_init(GEOPBTransitSystem);
          if (!GEOPBTransitSystemReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1))
            goto LABEL_141;
          PBReaderRecallMark();
          -[GEOTransitDecoderData _addNoFlagsSystem:](a1, v43);
          goto LABEL_109;
        case 15:
          if (!v38 || (*(_WORD *)(a1 + 140) & 0x800) != 0)
            goto LABEL_112;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_142;
          v43 = objc_alloc_init(GEOPBTransitIncident);
          if (!GEOPBTransitIncidentReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1))
            goto LABEL_141;
          PBReaderRecallMark();
          -[GEOTransitDecoderData _addNoFlagsTransitIncident:](a1, v43);
          goto LABEL_109;
        case 17:
          if (!v38 || (*(_WORD *)(a1 + 140) & 8) != 0)
            goto LABEL_112;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_142;
          v43 = objc_alloc_init(GEOPBTransitHall);
          if (!GEOPBTransitHallReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1))
            goto LABEL_141;
          PBReaderRecallMark();
          -[GEOTransitDecoderData _addNoFlagsHall:](a1, v43);
          goto LABEL_109;
        case 18:
          if (!v38 || (*(_WORD *)(a1 + 140) & 4) != 0)
            goto LABEL_112;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_142;
          v43 = objc_alloc_init(GEOPBTransitArtwork);
          if (!GEOPBTransitArtworkReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1))
            goto LABEL_141;
          PBReaderRecallMark();
          -[GEOTransitDecoderData _addNoFlagsArtwork:](a1, v43);
          goto LABEL_109;
        case 19:
          if (!v38 || (*(_WORD *)(a1 + 140) & 0x400) != 0)
            goto LABEL_112;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_142;
          v43 = objc_alloc_init(GEOPBTransitRoutingIncidentMessage);
          if (!GEOPBTransitRoutingIncidentMessageReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1))
            goto LABEL_141;
          PBReaderRecallMark();
          -[GEOTransitDecoderData _addNoFlagsTransitIncidentMessage:](a1, v43);
          goto LABEL_109;
        case 20:
          if (!v38 || (*(_WORD *)(a1 + 140) & 0x80) != 0)
            goto LABEL_112;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_142;
          v43 = objc_alloc_init(GEOTransitStep);
          if (!GEOTransitStepReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1))
            goto LABEL_141;
          PBReaderRecallMark();
          -[GEOTransitDecoderData _addNoFlagsStep:](a1, v43);
          goto LABEL_109;
        case 21:
          if (!v38 || (*(_WORD *)(a1 + 140) & 0x20) != 0)
            goto LABEL_112;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_142;
          v43 = objc_alloc_init(GEOPBTransitPaymentMethod);
          if (!GEOPBTransitPaymentMethodReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1))
          {
LABEL_141:

LABEL_142:
            v24 = 0;
            v25 = (int *)MEMORY[0x1E0D82BC8];
            goto LABEL_115;
          }
          PBReaderRecallMark();
          -[GEOTransitDecoderData _addNoFlagsPaymentMethod:](a1, v43);
LABEL_109:

          v25 = (int *)MEMORY[0x1E0D82BC8];
LABEL_110:
          if ((v51 & 1) == 0)
            goto LABEL_114;
LABEL_113:
          if (*(_QWORD *)(v3 + *v23) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_114;
          break;
        default:
          if ((v50 & 1) == 0 || (*(_WORD *)(a1 + 140) & 1) != 0)
          {
LABEL_112:
            v24 = PBReaderSkipValueWithTag();
            v25 = (int *)MEMORY[0x1E0D82BC8];
            if ((v24 & v51 & 1) == 0)
              goto LABEL_115;
            goto LABEL_113;
          }
          if (!*(_QWORD *)(a1 + 16))
          {
            v44 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v45 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v44;

          }
          v24 = PBUnknownFieldAdd();
          v25 = (int *)MEMORY[0x1E0D82BC8];
          if (!v24)
            goto LABEL_117;
          goto LABEL_110;
      }
    }
LABEL_114:
    v24 = 1;
LABEL_115:
    LOBYTE(v19) = v50;
LABEL_116:
    if ((v19 & 1) != 0)
LABEL_117:
      *(_WORD *)(a1 + 140) |= 1u;
    if (v20 & 1 | ((v24 & 1) == 0))
    {
      *(_WORD *)(a1 + 140) |= 0x40u;
      *(_WORD *)(a1 + 140) |= 0x10u;
      *(_WORD *)(a1 + 140) |= 2u;
      *(_WORD *)(a1 + 140) |= 0x1000u;
      *(_WORD *)(a1 + 140) |= 0x100u;
      *(_WORD *)(a1 + 140) |= 0x2000u;
      *(_WORD *)(a1 + 140) |= 0x200u;
      *(_WORD *)(a1 + 140) |= 0x800u;
      *(_WORD *)(a1 + 140) |= 8u;
      *(_WORD *)(a1 + 140) |= 4u;
      *(_WORD *)(a1 + 140) |= 0x400u;
      *(_WORD *)(a1 + 140) |= 0x80u;
      *(_WORD *)(a1 + 140) |= 0x20u;
    }
    else if (v21)
    {
      while (1)
      {
        v46 = *v21++;
        v47 = 64;
        switch(v46)
        {
          case 0:
            goto LABEL_135;
          case 1:
            goto LABEL_134;
          case 5:
            v47 = 16;
            goto LABEL_134;
          case 8:
            v47 = 2;
            goto LABEL_134;
          case 10:
            v47 = 4096;
            goto LABEL_134;
          case 11:
            v47 = 256;
            goto LABEL_134;
          case 12:
            v47 = 0x2000;
            goto LABEL_134;
          case 13:
            v47 = 512;
            goto LABEL_134;
          case 15:
            v47 = 2048;
            goto LABEL_134;
          case 17:
            v47 = 8;
            goto LABEL_134;
          case 18:
            v47 = 4;
            goto LABEL_134;
          case 19:
            v47 = 1024;
            goto LABEL_134;
          case 20:
            v47 = 128;
            goto LABEL_134;
          case 21:
            v47 = 32;
LABEL_134:
            *(_WORD *)(a1 + 140) |= v47;
            break;
          default:
            continue;
        }
      }
    }
LABEL_135:
    if (v24)
    {
      v3 = *(_BYTE *)(v3 + *v25) == 0;
      if ((v20 & 1) == 0)
        return v3;
      goto LABEL_139;
    }
    v3 = 0;
    if ((v20 & 1) != 0)
    {
LABEL_139:
      v48 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

    }
  }
  return v3;
}

void sub_1889AB2F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889AB62C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889AB964(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889ABC9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889ABFD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889AC30C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889AC644(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889AC97C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889ACCB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889ACFEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889AD324(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889AD65C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889AF9E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOTransitDecoderDataCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[128];
  _BYTE v111[128];
  _BYTE v112[128];
  _BYTE v113[128];
  _BYTE v114[128];
  _BYTE v115[128];
  _BYTE v116[128];
  _BYTE v117[128];
  _BYTE v118[128];
  _BYTE v119[128];
  _BYTE v120[128];
  _BYTE v121[128];
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v2 = a1[8];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v106, v121, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v107;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v107 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v106 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v106, v121, 16);
    }
    while (v4);
  }

  v104 = 0u;
  v105 = 0u;
  v102 = 0u;
  v103 = 0u;
  v7 = a1[6];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v102, v120, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v103;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v103 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v102 + 1) + 8 * v11++), "readAll:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v102, v120, 16);
    }
    while (v9);
  }

  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  v12 = a1[3];
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v98, v119, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v99;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v99 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v98 + 1) + 8 * v16++), "readAll:", 1);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v98, v119, 16);
    }
    while (v14);
  }

  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v17 = a1[14];
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v94, v118, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v95;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v95 != v20)
          objc_enumerationMutation(v17);
        objc_msgSend(*(id *)(*((_QWORD *)&v94 + 1) + 8 * v21++), "readAll:", 1);
      }
      while (v19 != v21);
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v94, v118, 16);
    }
    while (v19);
  }

  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v22 = a1[10];
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v90, v117, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v91;
    do
    {
      v26 = 0;
      do
      {
        if (*(_QWORD *)v91 != v25)
          objc_enumerationMutation(v22);
        objc_msgSend(*(id *)(*((_QWORD *)&v90 + 1) + 8 * v26++), "readAll:", 1);
      }
      while (v24 != v26);
      v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v90, v117, 16);
    }
    while (v24);
  }

  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v27 = a1[11];
  v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v86, v116, 16);
  if (v28)
  {
    v29 = v28;
    v30 = *(_QWORD *)v87;
    do
    {
      v31 = 0;
      do
      {
        if (*(_QWORD *)v87 != v30)
          objc_enumerationMutation(v27);
        objc_msgSend(*(id *)(*((_QWORD *)&v86 + 1) + 8 * v31++), "readAll:", 1);
      }
      while (v29 != v31);
      v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v86, v116, 16);
    }
    while (v29);
  }

  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v32 = a1[13];
  v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v82, v115, 16);
  if (v33)
  {
    v34 = v33;
    v35 = *(_QWORD *)v83;
    do
    {
      v36 = 0;
      do
      {
        if (*(_QWORD *)v83 != v35)
          objc_enumerationMutation(v32);
        -[GEOPBTransitIncident readAll:](*(_QWORD *)(*((_QWORD *)&v82 + 1) + 8 * v36++), 1);
      }
      while (v34 != v36);
      v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v82, v115, 16);
    }
    while (v34);
  }

  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v37 = a1[5];
  v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v78, v114, 16);
  if (v38)
  {
    v39 = v38;
    v40 = *(_QWORD *)v79;
    do
    {
      v41 = 0;
      do
      {
        if (*(_QWORD *)v79 != v40)
          objc_enumerationMutation(v37);
        objc_msgSend(*(id *)(*((_QWORD *)&v78 + 1) + 8 * v41++), "readAll:", 1);
      }
      while (v39 != v41);
      v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v78, v114, 16);
    }
    while (v39);
  }

  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v42 = a1[4];
  v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v74, v113, 16);
  if (v43)
  {
    v44 = v43;
    v45 = *(_QWORD *)v75;
    do
    {
      v46 = 0;
      do
      {
        if (*(_QWORD *)v75 != v45)
          objc_enumerationMutation(v42);
        objc_msgSend(*(id *)(*((_QWORD *)&v74 + 1) + 8 * v46++), "readAll:", 1);
      }
      while (v44 != v46);
      v44 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v74, v113, 16);
    }
    while (v44);
  }

  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v47 = a1[12];
  v48 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v70, v112, 16);
  if (v48)
  {
    v49 = v48;
    v50 = *(_QWORD *)v71;
    do
    {
      v51 = 0;
      do
      {
        if (*(_QWORD *)v71 != v50)
          objc_enumerationMutation(v47);
        -[GEOPBTransitRoutingIncidentMessage readAll:](*(_QWORD *)(*((_QWORD *)&v70 + 1) + 8 * v51++), 1);
      }
      while (v49 != v51);
      v49 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v70, v112, 16);
    }
    while (v49);
  }

  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v52 = a1[9];
  v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v66, v111, 16);
  if (v53)
  {
    v54 = v53;
    v55 = *(_QWORD *)v67;
    do
    {
      v56 = 0;
      do
      {
        if (*(_QWORD *)v67 != v55)
          objc_enumerationMutation(v52);
        objc_msgSend(*(id *)(*((_QWORD *)&v66 + 1) + 8 * v56++), "readAll:", 1);
      }
      while (v54 != v56);
      v54 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v66, v111, 16);
    }
    while (v54);
  }

  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v57 = a1[7];
  v58 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v62, v110, 16);
  if (v58)
  {
    v59 = v58;
    v60 = *(_QWORD *)v63;
    do
    {
      v61 = 0;
      do
      {
        if (*(_QWORD *)v63 != v60)
          objc_enumerationMutation(v57);
        objc_msgSend(*(id *)(*((_QWORD *)&v62 + 1) + 8 * v61++), "readAll:", 1, (_QWORD)v62);
      }
      while (v59 != v61);
      v59 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v62, v110, 16);
    }
    while (v59);
  }

}

unint64_t GEOTransitDecoderDataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 132))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitDecoderDataReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 128) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 132) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitDecoderDataReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitDecoderDataReadAllFrom_initialTag;
  Specified = GEOTransitDecoderDataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitDecoderDataCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  return Specified;
}

void sub_1889B02FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitDecoderDataReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitDecoderDataReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889B035C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitDecoderDataIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOPBTransitStationIsValid(a1))
            goto LABEL_69;
          goto LABEL_72;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPBTransitLineIsValid(a1))
            goto LABEL_72;
          goto LABEL_69;
        case 8u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPBTransitAccessPointIsValid(a1))
            goto LABEL_72;
          goto LABEL_69;
        case 0xAu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORouteIsValid(a1))
            goto LABEL_72;
          goto LABEL_69;
        case 0xBu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPBTransitStopIsValid(a1))
            goto LABEL_72;
          goto LABEL_69;
        case 0xCu:
          if (v15 == 2)
            goto LABEL_40;
          goto LABEL_72;
        case 0xDu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPBTransitSystemIsValid(a1))
            goto LABEL_72;
          goto LABEL_69;
        case 0xFu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPBTransitIncidentIsValid(a1))
            goto LABEL_72;
          goto LABEL_69;
        case 0x11u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPBTransitHallIsValid(a1))
            goto LABEL_72;
          goto LABEL_69;
        case 0x12u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPBTransitArtworkIsValid(a1))
            goto LABEL_72;
          goto LABEL_69;
        case 0x13u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPBTransitRoutingIncidentMessageIsValid(a1))
            goto LABEL_72;
          goto LABEL_69;
        case 0x14u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitStepIsValid(a1))
            goto LABEL_72;
          goto LABEL_69;
        case 0x15u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPBTransitPaymentMethodIsValid(a1))
            goto LABEL_72;
LABEL_69:
          PBReaderRecallMark();
          goto LABEL_70;
        default:
LABEL_40:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_72:
            PBReaderRecallMark();
            return 0;
          }
LABEL_70:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_71;
          break;
      }
    }
  }
LABEL_71:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOTransitStepIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  _BOOL8 v113;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_237;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_177;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_213;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_237;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_177;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_213;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_237;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_177;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_213;
          }
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitVehicleInfoIsValid(a1))
            goto LABEL_237;
          goto LABEL_212;
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_237;
          v33 = 0;
          while (1)
          {
            v34 = *v2;
            v35 = *(_QWORD *)&a1[v34];
            v36 = v35 + 1;
            if (v35 == -1 || v36 > *(_QWORD *)&a1[*v3])
              goto LABEL_177;
            v37 = *(char *)(*(_QWORD *)&a1[*v5] + v35);
            *(_QWORD *)&a1[v34] = v36;
            if (v37 < 0)
            {
              v22 = v33++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_213;
          }
        case 7u:
          if ((v8 & 7) != 0)
            goto LABEL_237;
          v38 = 0;
          while (1)
          {
            v39 = *v2;
            v40 = *(_QWORD *)&a1[v39];
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)&a1[*v3])
              goto LABEL_177;
            v42 = *(char *)(*(_QWORD *)&a1[*v5] + v40);
            *(_QWORD *)&a1[v39] = v41;
            if (v42 < 0)
            {
              v22 = v38++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_213;
          }
        case 9u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitEnterExitInfoIsValid(a1))
            goto LABEL_237;
          goto LABEL_212;
        case 0xAu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitTransferInfoIsValid(a1))
            goto LABEL_237;
          goto LABEL_212;
        case 0xBu:
          if ((v8 & 7) != 0)
            goto LABEL_237;
          v43 = 0;
          while (1)
          {
            v44 = *v2;
            v45 = *(_QWORD *)&a1[v44];
            v46 = v45 + 1;
            if (v45 == -1 || v46 > *(_QWORD *)&a1[*v3])
              goto LABEL_177;
            v47 = *(char *)(*(_QWORD *)&a1[*v5] + v45);
            *(_QWORD *)&a1[v44] = v46;
            if (v47 < 0)
            {
              v22 = v43++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_213;
          }
        case 0xCu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitArrivalInfoIsValid(a1))
            goto LABEL_237;
          goto LABEL_212;
        case 0xEu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_237;
          goto LABEL_212;
        case 0xFu:
          if ((v8 & 7) != 0)
            goto LABEL_237;
          v48 = 0;
          while (1)
          {
            v49 = *v2;
            v50 = *(_QWORD *)&a1[v49];
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)&a1[*v3])
              goto LABEL_177;
            v52 = *(char *)(*(_QWORD *)&a1[*v5] + v50);
            *(_QWORD *)&a1[v49] = v51;
            if (v52 < 0)
            {
              v22 = v48++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_213;
          }
        case 0x11u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOInstructionSetIsValid(a1))
            goto LABEL_237;
          goto LABEL_212;
        case 0x13u:
          if ((v8 & 7) != 0)
            goto LABEL_237;
          v53 = 0;
          while (1)
          {
            v54 = *v2;
            v55 = *(_QWORD *)&a1[v54];
            v56 = v55 + 1;
            if (v55 == -1 || v56 > *(_QWORD *)&a1[*v3])
              goto LABEL_177;
            v57 = *(char *)(*(_QWORD *)&a1[*v5] + v55);
            *(_QWORD *)&a1[v54] = v56;
            if (v57 < 0)
            {
              v22 = v53++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_213;
          }
        case 0x14u:
          if ((v8 & 7) != 0)
            goto LABEL_237;
          v58 = 0;
          while (1)
          {
            v59 = *v2;
            v60 = *(_QWORD *)&a1[v59];
            v61 = v60 + 1;
            if (v60 == -1 || v61 > *(_QWORD *)&a1[*v3])
              goto LABEL_177;
            v62 = *(char *)(*(_QWORD *)&a1[*v5] + v60);
            *(_QWORD *)&a1[v59] = v61;
            if (v62 < 0)
            {
              v22 = v58++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_213;
          }
        case 0x16u:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_237;
            while (1)
            {
              v63 = *v2;
              v64 = *(_QWORD *)&a1[v63];
              v65 = v64 + 1;
              if (v64 == -1 || v65 > *(_QWORD *)&a1[*v3])
                goto LABEL_177;
              v66 = *(char *)(*(_QWORD *)&a1[*v5] + v64);
              *(_QWORD *)&a1[v63] = v65;
              if (v66 < 0)
              {
                v67 = v15++;
                if (v67 <= 8)
                  continue;
              }
              goto LABEL_213;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_237;
LABEL_216:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v103 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v104 = *v2;
              v105 = *(_QWORD *)&a1[v104];
              v106 = v105 + 1;
              if (v105 == -1 || v106 > *(_QWORD *)&a1[*v3])
                break;
              v107 = *(char *)(*(_QWORD *)&a1[*v5] + v105);
              *(_QWORD *)&a1[v104] = v106;
              if (v107 < 0)
              {
                v13 = v103++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_216;
            }
            a1[*v4] = 1;
          }
          goto LABEL_212;
        case 0x17u:
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_237:
              PBReaderRecallMark();
              return 0;
            }
LABEL_226:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v108 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v109 = *v2;
                v110 = *(_QWORD *)&a1[v109];
                v111 = v110 + 1;
                if (v110 == -1 || v111 > *(_QWORD *)&a1[*v3])
                  break;
                v112 = *(char *)(*(_QWORD *)&a1[*v5] + v110);
                *(_QWORD *)&a1[v109] = v111;
                if (v112 < 0)
                {
                  v13 = v108++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_226;
              }
              a1[*v4] = 1;
            }
LABEL_212:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_237;
            while (1)
            {
              v68 = *v2;
              v69 = *(_QWORD *)&a1[v68];
              v70 = v69 + 1;
              if (v69 == -1 || v70 > *(_QWORD *)&a1[*v3])
                break;
              v71 = *(char *)(*(_QWORD *)&a1[*v5] + v69);
              *(_QWORD *)&a1[v68] = v70;
              if (v71 < 0)
              {
                v72 = v15++;
                if (v72 <= 8)
                  continue;
              }
              goto LABEL_213;
            }
LABEL_177:
            a1[*v4] = 1;
          }
LABEL_213:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_235;
          break;
        case 0x18u:
          if ((v8 & 7) != 0)
            goto LABEL_237;
          v73 = 0;
          while (1)
          {
            v74 = *v2;
            v75 = *(_QWORD *)&a1[v74];
            v76 = v75 + 1;
            if (v75 == -1 || v76 > *(_QWORD *)&a1[*v3])
              goto LABEL_177;
            v77 = *(char *)(*(_QWORD *)&a1[*v5] + v75);
            *(_QWORD *)&a1[v74] = v76;
            if (v77 < 0)
            {
              v22 = v73++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_213;
          }
        case 0x19u:
          if ((v8 & 7) != 0)
            goto LABEL_237;
          v78 = 0;
          while (1)
          {
            v79 = *v2;
            v80 = *(_QWORD *)&a1[v79];
            v81 = v80 + 1;
            if (v80 == -1 || v81 > *(_QWORD *)&a1[*v3])
              goto LABEL_177;
            v82 = *(char *)(*(_QWORD *)&a1[*v5] + v80);
            *(_QWORD *)&a1[v79] = v81;
            if (v82 < 0)
            {
              v22 = v78++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_213;
          }
        case 0x1Au:
          if ((v8 & 7) != 0)
            goto LABEL_237;
          v83 = 0;
          while (1)
          {
            v84 = *v2;
            v85 = *(_QWORD *)&a1[v84];
            v86 = v85 + 1;
            if (v85 == -1 || v86 > *(_QWORD *)&a1[*v3])
              goto LABEL_177;
            v87 = *(char *)(*(_QWORD *)&a1[*v5] + v85);
            *(_QWORD *)&a1[v84] = v86;
            if (v87 < 0)
            {
              v22 = v83++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_213;
          }
        case 0x1Bu:
          if ((v8 & 7) != 0)
            goto LABEL_237;
          v88 = 0;
          while (1)
          {
            v89 = *v2;
            v90 = *(_QWORD *)&a1[v89];
            v91 = v90 + 1;
            if (v90 == -1 || v91 > *(_QWORD *)&a1[*v3])
              goto LABEL_177;
            v92 = *(char *)(*(_QWORD *)&a1[*v5] + v90);
            *(_QWORD *)&a1[v89] = v91;
            if (v92 < 0)
            {
              v22 = v88++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_213;
          }
        case 0x1Cu:
          if ((v8 & 7) != 0)
            goto LABEL_237;
          v93 = 0;
          while (1)
          {
            v94 = *v2;
            v95 = *(_QWORD *)&a1[v94];
            v96 = v95 + 1;
            if (v95 == -1 || v96 > *(_QWORD *)&a1[*v3])
              goto LABEL_177;
            v97 = *(char *)(*(_QWORD *)&a1[*v5] + v95);
            *(_QWORD *)&a1[v94] = v96;
            if (v97 < 0)
            {
              v22 = v93++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_213;
          }
        case 0x1Du:
          if ((v8 & 7) != 0)
            goto LABEL_237;
          v98 = 0;
          while (1)
          {
            v99 = *v2;
            v100 = *(_QWORD *)&a1[v99];
            v101 = v100 + 1;
            if (v100 == -1 || v101 > *(_QWORD *)&a1[*v3])
              goto LABEL_177;
            v102 = *(char *)(*(_QWORD *)&a1[*v5] + v100);
            *(_QWORD *)&a1[v99] = v101;
            if (v102 < 0)
            {
              v22 = v98++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_213;
          }
        case 0x1Eu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitBaseFareIsValid(a1))
            goto LABEL_237;
          goto LABEL_212;
        case 0x1Fu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitSurchargeIsValid(a1))
            goto LABEL_237;
          goto LABEL_212;
        case 0x20u:
          if (v15 == 2)
            goto LABEL_187;
          goto LABEL_237;
        case 0x21u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitVehiclePositionInfoIsValid(a1))
            goto LABEL_237;
          goto LABEL_212;
        case 0x22u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitScheduleInfoIsValid(a1))
            goto LABEL_237;
          goto LABEL_212;
        case 0x23u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitBoardingInfoIsValid(a1))
            goto LABEL_237;
          goto LABEL_212;
        case 0x24u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitStepBadgeIsValid(a1))
            goto LABEL_237;
          goto LABEL_212;
        case 0x25u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitRegionAlertIsValid(a1))
            goto LABEL_237;
          goto LABEL_212;
        case 0x26u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOAdvisoriesInfoIsValid(a1))
            goto LABEL_212;
          goto LABEL_237;
        default:
LABEL_187:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_237;
          goto LABEL_213;
      }
    }
  }
LABEL_235:
  v113 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v113;
}

void sub_1889B1B68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitDecoderDataIsDirty(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[128];
  _BYTE v93[128];
  _BYTE v94[128];
  _BYTE v95[128];
  _BYTE v96[128];
  _BYTE v97[128];
  _BYTE v98[128];
  _BYTE v99[128];
  _BYTE v100[128];
  _BYTE v101[128];
  _BYTE v102[128];
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 136));
  v2 = *(_WORD *)(a1 + 140);
  if ((v2 & 0x7FFE) == 0)
  {
    if ((v2 & 0x10) != 0)
    {
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v4 = *(id *)(a1 + 48);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v88, v102, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v89;
LABEL_6:
        v8 = 0;
        while (1)
        {
          if (*(_QWORD *)v89 != v7)
            objc_enumerationMutation(v4);
          if ((GEOPBTransitLineIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v88 + 1) + 8 * v8)) & 1) != 0)
            goto LABEL_114;
          if (v6 == ++v8)
          {
            v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v88, v102, 16);
            if (v6)
              goto LABEL_6;
            break;
          }
        }
      }

      v2 = *(_WORD *)(a1 + 140);
    }
    if ((v2 & 2) != 0)
    {
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v4 = *(id *)(a1 + 24);
      v9 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v84, v101, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v85;
LABEL_16:
        v12 = 0;
        while (1)
        {
          if (*(_QWORD *)v85 != v11)
            objc_enumerationMutation(v4);
          if ((GEOPBTransitAccessPointIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v84 + 1) + 8 * v12)) & 1) != 0)
            goto LABEL_114;
          if (v10 == ++v12)
          {
            v10 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v84, v101, 16);
            if (v10)
              goto LABEL_16;
            break;
          }
        }
      }

      v2 = *(_WORD *)(a1 + 140);
    }
    if ((v2 & 0x1000) != 0)
    {
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v4 = *(id *)(a1 + 112);
      v13 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v80, v100, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v81;
LABEL_26:
        v16 = 0;
        while (1)
        {
          if (*(_QWORD *)v81 != v15)
            objc_enumerationMutation(v4);
          if ((GEORouteIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v80 + 1) + 8 * v16)) & 1) != 0)
            goto LABEL_114;
          if (v14 == ++v16)
          {
            v14 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v80, v100, 16);
            if (v14)
              goto LABEL_26;
            break;
          }
        }
      }

      v2 = *(_WORD *)(a1 + 140);
    }
    if ((v2 & 0x100) != 0)
    {
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v4 = *(id *)(a1 + 80);
      v17 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v76, v99, 16);
      if (v17)
      {
        v18 = v17;
        v19 = *(_QWORD *)v77;
LABEL_36:
        v20 = 0;
        while (1)
        {
          if (*(_QWORD *)v77 != v19)
            objc_enumerationMutation(v4);
          if (GEOPBTransitStopIsDirty(*(_QWORD *)(*((_QWORD *)&v76 + 1) + 8 * v20)))
            goto LABEL_114;
          if (v18 == ++v20)
          {
            v18 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v76, v99, 16);
            if (v18)
              goto LABEL_36;
            break;
          }
        }
      }

      v2 = *(_WORD *)(a1 + 140);
    }
    if ((v2 & 0x200) != 0)
    {
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v4 = *(id *)(a1 + 88);
      v21 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v72, v98, 16);
      if (v21)
      {
        v22 = v21;
        v23 = *(_QWORD *)v73;
LABEL_46:
        v24 = 0;
        while (1)
        {
          if (*(_QWORD *)v73 != v23)
            objc_enumerationMutation(v4);
          if ((GEOPBTransitSystemIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v72 + 1) + 8 * v24)) & 1) != 0)
            goto LABEL_114;
          if (v22 == ++v24)
          {
            v22 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v72, v98, 16);
            if (v22)
              goto LABEL_46;
            break;
          }
        }
      }

      v2 = *(_WORD *)(a1 + 140);
    }
    if ((v2 & 0x800) != 0)
    {
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v4 = *(id *)(a1 + 104);
      v25 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v68, v97, 16);
      if (v25)
      {
        v26 = v25;
        v27 = *(_QWORD *)v69;
LABEL_56:
        v28 = 0;
        while (1)
        {
          if (*(_QWORD *)v69 != v27)
            objc_enumerationMutation(v4);
          if ((GEOPBTransitIncidentIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v68 + 1) + 8 * v28)) & 1) != 0)
            goto LABEL_114;
          if (v26 == ++v28)
          {
            v26 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v68, v97, 16);
            if (v26)
              goto LABEL_56;
            break;
          }
        }
      }

      v2 = *(_WORD *)(a1 + 140);
    }
    if ((v2 & 8) != 0)
    {
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v4 = *(id *)(a1 + 40);
      v29 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v64, v96, 16);
      if (v29)
      {
        v30 = v29;
        v31 = *(_QWORD *)v65;
LABEL_66:
        v32 = 0;
        while (1)
        {
          if (*(_QWORD *)v65 != v31)
            objc_enumerationMutation(v4);
          if (GEOPBTransitHallIsDirty(*(_QWORD *)(*((_QWORD *)&v64 + 1) + 8 * v32)))
            goto LABEL_114;
          if (v30 == ++v32)
          {
            v30 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v64, v96, 16);
            if (v30)
              goto LABEL_66;
            break;
          }
        }
      }

      v2 = *(_WORD *)(a1 + 140);
    }
    if ((v2 & 4) != 0)
    {
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v4 = *(id *)(a1 + 32);
      v33 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v60, v95, 16);
      if (v33)
      {
        v34 = v33;
        v35 = *(_QWORD *)v61;
LABEL_76:
        v36 = 0;
        while (1)
        {
          if (*(_QWORD *)v61 != v35)
            objc_enumerationMutation(v4);
          if ((GEOPBTransitArtworkIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v60 + 1) + 8 * v36)) & 1) != 0)
            goto LABEL_114;
          if (v34 == ++v36)
          {
            v34 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v60, v95, 16);
            if (v34)
              goto LABEL_76;
            break;
          }
        }
      }

      v2 = *(_WORD *)(a1 + 140);
    }
    if ((v2 & 0x400) != 0)
    {
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v4 = *(id *)(a1 + 96);
      v37 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v56, v94, 16);
      if (v37)
      {
        v38 = v37;
        v39 = *(_QWORD *)v57;
LABEL_86:
        v40 = 0;
        while (1)
        {
          if (*(_QWORD *)v57 != v39)
            objc_enumerationMutation(v4);
          if (GEOPBTransitRoutingIncidentMessageIsDirty(*(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * v40)))
            goto LABEL_114;
          if (v38 == ++v40)
          {
            v38 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v56, v94, 16);
            if (v38)
              goto LABEL_86;
            break;
          }
        }
      }

      v2 = *(_WORD *)(a1 + 140);
    }
    if ((v2 & 0x80) != 0)
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v4 = *(id *)(a1 + 72);
      v41 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v52, v93, 16);
      if (v41)
      {
        v42 = v41;
        v43 = *(_QWORD *)v53;
LABEL_96:
        v44 = 0;
        while (1)
        {
          if (*(_QWORD *)v53 != v43)
            objc_enumerationMutation(v4);
          if ((GEOTransitStepIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v52 + 1) + 8 * v44)) & 1) != 0)
            goto LABEL_114;
          if (v42 == ++v44)
          {
            v42 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v52, v93, 16);
            if (v42)
              goto LABEL_96;
            break;
          }
        }
      }

      v2 = *(_WORD *)(a1 + 140);
    }
    if ((v2 & 0x20) == 0)
      return 0;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v4 = *(id *)(a1 + 56);
    v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v48, v92, 16);
    if (!v3)
    {
LABEL_115:

      return v3;
    }
    v45 = *(_QWORD *)v49;
LABEL_107:
    v46 = 0;
    while (1)
    {
      if (*(_QWORD *)v49 != v45)
        objc_enumerationMutation(v4);
      if (GEOPBTransitPaymentMethodIsDirty(*(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * v46)))
        break;
      if (v3 == ++v46)
      {
        v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v48, v92, 16);
        if (v3)
          goto LABEL_107;
        goto LABEL_115;
      }
    }
LABEL_114:
    v3 = 1;
    goto LABEL_115;
  }
  return 1;
}

os_unfair_lock_s *GEOTransitDecoderDataIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTransitDecoderDataIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 34);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1889B3708(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889B4318(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitDepartureEntryReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  id v32;
  void *v33;
  _BOOL8 v34;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (1)
          {
            v28 = *v4;
            v29 = *(_QWORD *)&v3[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&v3[*v5])
              break;
            v31 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
            *(_QWORD *)&v3[v28] = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if ((v31 & 0x80) == 0)
              goto LABEL_44;
            v25 += 7;
            v15 = v26++ >= 9;
            if (v15)
            {
              LODWORD(v27) = 0;
              goto LABEL_46;
            }
          }
          v3[*v6] = 1;
LABEL_44:
          if (v3[*v6])
            LODWORD(v27) = 0;
LABEL_46:
          *(_DWORD *)(a1 + 24) = v27;
        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_40;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_42;
            }
          }
          v3[*v6] = 1;
LABEL_40:
          if (v3[*v6])
            v20 = 0;
LABEL_42:
          *(_QWORD *)(a1 + 16) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v32 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v33 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v32;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_49;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v34 = v3[*v6] == 0;
  }
  else
  {
LABEL_49:
    v34 = 0;
  }
  objc_sync_exit(v3);

  return v34;
}

void sub_1889B5458(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitDepartureEntryReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitDepartureEntryReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889B54B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitDepartureEntryIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_39;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_39;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_41;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0)
          {
            v21 = v16++ > 8;
            if (!v21)
              continue;
          }
          goto LABEL_38;
        }
LABEL_36:
        a1[*v4] = 1;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        v27 = 0;
        goto LABEL_40;
      }
LABEL_38:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_39;
    }
    if ((v8 & 7) != 0)
      goto LABEL_41;
    v22 = 0;
    while (1)
    {
      v23 = *v2;
      v24 = *(_QWORD *)&a1[v23];
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
        goto LABEL_36;
      v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
      *(_QWORD *)&a1[v23] = v25;
      if (v26 < 0)
      {
        v21 = v22++ > 8;
        if (!v21)
          continue;
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  v27 = a1[*v4] == 0;
LABEL_40:
  PBReaderRecallMark();
  return v27;
}

BOOL GEOTransitEngineDebugDataReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  _BOOL8 v23;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          *(_BYTE *)(a1 + 24) |= 1u;
          v18 = *v4;
          v19 = *(_QWORD *)&v3[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v19);
            *(_QWORD *)&v3[v18] = v19 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v20 = 0;
          }
          *(_QWORD *)(a1 + 16) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v21 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v22 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v21;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_31;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v23 = v3[*v6] == 0;
  }
  else
  {
LABEL_31:
    v23 = 0;
  }
  objc_sync_exit(v3);

  return v23;
}

void sub_1889B6104(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitEngineDebugDataReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitEngineDebugDataReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889B6164(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitEngineDebugDataIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v16 != 1)
          goto LABEL_29;
        v18 = *v2;
        v19 = *(_QWORD *)&a1[v18];
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && (v20 = v19 + 8, v20 <= *(_QWORD *)&a1[*v3]))
          *(_QWORD *)&a1[v18] = v20;
        else
          a1[v14] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_29:
        v21 = 0;
        goto LABEL_28;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v21 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v21;
}

BOOL GEOTransitEnterExitInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  id v38;
  void *v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  _BOOL8 v56;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                goto LABEL_60;
              v18 += 7;
              v15 = v19++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_62;
              }
            }
            v3[*v6] = 1;
LABEL_60:
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_62:
            v53 = 16;
            goto LABEL_75;
          case 2u:
            v25 = 0;
            v26 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 2u;
            while (2)
            {
              v27 = *v4;
              v28 = *(_QWORD *)&v3[v27];
              v29 = v28 + 1;
              if (v28 == -1 || v29 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v30 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v28);
                *(_QWORD *)&v3[v27] = v29;
                v20 |= (unint64_t)(v30 & 0x7F) << v25;
                if (v30 < 0)
                {
                  v25 += 7;
                  v15 = v26++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_66;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_66:
            v53 = 20;
            goto LABEL_75;
          case 3u:
            v31 = 0;
            v32 = 0;
            v33 = 0;
            *(_BYTE *)(a1 + 32) |= 8u;
            while (2)
            {
              v34 = *v4;
              v35 = *(_QWORD *)&v3[v34];
              v36 = v35 + 1;
              if (v35 == -1 || v36 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v37 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v35);
                *(_QWORD *)&v3[v34] = v36;
                v33 |= (unint64_t)(v37 & 0x7F) << v31;
                if (v37 < 0)
                {
                  v31 += 7;
                  v15 = v32++ >= 9;
                  if (v15)
                  {
                    v33 = 0;
                    goto LABEL_70;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v33 = 0;
LABEL_70:
            v54 = v33 != 0;
            v55 = 28;
            goto LABEL_80;
          case 5u:
            v40 = 0;
            v41 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 4u;
            while (2)
            {
              v42 = *v4;
              v43 = *(_QWORD *)&v3[v42];
              v44 = v43 + 1;
              if (v43 == -1 || v44 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v45 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v43);
                *(_QWORD *)&v3[v42] = v44;
                v20 |= (unint64_t)(v45 & 0x7F) << v40;
                if (v45 < 0)
                {
                  v40 += 7;
                  v15 = v41++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_74;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_74:
            v53 = 24;
LABEL_75:
            *(_DWORD *)(a1 + v53) = v20;
            continue;
          case 7u:
            v46 = 0;
            v47 = 0;
            v48 = 0;
            *(_BYTE *)(a1 + 32) |= 0x10u;
            break;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v38 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v39 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v38;

            }
            if (!PBUnknownFieldAdd())
              goto LABEL_83;
            continue;
        }
        while (1)
        {
          v49 = *v4;
          v50 = *(_QWORD *)&v3[v49];
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)&v3[*v5])
            break;
          v52 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v50);
          *(_QWORD *)&v3[v49] = v51;
          v48 |= (unint64_t)(v52 & 0x7F) << v46;
          if ((v52 & 0x80) == 0)
            goto LABEL_77;
          v46 += 7;
          v15 = v47++ >= 9;
          if (v15)
          {
            v48 = 0;
            goto LABEL_79;
          }
        }
        v3[*v6] = 1;
LABEL_77:
        if (v3[*v6])
          v48 = 0;
LABEL_79:
        v54 = v48 != 0;
        v55 = 29;
LABEL_80:
        *(_BYTE *)(a1 + v55) = v54;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v56 = v3[*v6] == 0;
  }
  else
  {
LABEL_83:
    v56 = 0;
  }
  objc_sync_exit(v3);

  return v56;
}

void sub_1889B7488(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitEnterExitInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitEnterExitInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889B74E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitEnterExitInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _BOOL8 v42;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            v19 = v18 + 1;
            if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v32 = 0;
          while (1)
          {
            v33 = *v2;
            v34 = *(_QWORD *)&a1[v33];
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
            *(_QWORD *)&a1[v33] = v35;
            if (v36 < 0)
            {
              v21 = v32++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 7u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v37 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_65:
          v42 = 0;
          goto LABEL_64;
      }
      while (1)
      {
        v38 = *v2;
        v39 = *(_QWORD *)&a1[v38];
        v40 = v39 + 1;
        if (v39 == -1 || v40 > *(_QWORD *)&a1[*v3])
          break;
        v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
        *(_QWORD *)&a1[v38] = v40;
        if (v41 < 0)
        {
          v21 = v37++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_62;
      }
LABEL_61:
      a1[*v4] = 1;
LABEL_62:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v42 = a1[*v4] == 0;
LABEL_64:
  PBReaderRecallMark();
  return v42;
}

BOOL GEOTransitEntryReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL8 v50;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 48) |= 2u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                goto LABEL_54;
              v18 += 7;
              v15 = v19++ >= 9;
              if (v15)
              {
                v20 = 0;
                goto LABEL_56;
              }
            }
            v3[*v6] = 1;
LABEL_54:
            if (v3[*v6])
              v20 = 0;
LABEL_56:
            v48 = 32;
            goto LABEL_61;
          case 2u:
            v27 = 0;
            v28 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 48) |= 1u;
            while (2)
            {
              v29 = *v4;
              v30 = *(_QWORD *)&v3[v29];
              v31 = v30 + 1;
              if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
                *(_QWORD *)&v3[v29] = v31;
                v20 |= (unint64_t)(v32 & 0x7F) << v27;
                if (v32 < 0)
                {
                  v27 += 7;
                  v15 = v28++ >= 9;
                  if (v15)
                  {
                    v20 = 0;
                    goto LABEL_60;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v20 = 0;
LABEL_60:
            v48 = 16;
LABEL_61:
            *(_QWORD *)(a1 + v48) = v20;
            continue;
          case 3u:
            v33 = 0;
            v34 = 0;
            v35 = 0;
            *(_BYTE *)(a1 + 48) |= 4u;
            while (2)
            {
              v36 = *v4;
              v37 = *(_QWORD *)&v3[v36];
              v38 = v37 + 1;
              if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
                *(_QWORD *)&v3[v36] = v38;
                v35 |= (unint64_t)(v39 & 0x7F) << v33;
                if (v39 < 0)
                {
                  v33 += 7;
                  v15 = v34++ >= 9;
                  if (v15)
                  {
                    LODWORD(v35) = 0;
                    goto LABEL_65;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v35) = 0;
LABEL_65:
            v49 = 40;
            goto LABEL_70;
          case 4u:
            v40 = 0;
            v41 = 0;
            v35 = 0;
            *(_BYTE *)(a1 + 48) |= 8u;
            break;
          case 5u:
            PBReaderReadData();
            v46 = objc_claimAutoreleasedReturnValue();
            v47 = *(void **)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v46;

            continue;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v26 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v25;

            }
            if (!PBUnknownFieldAdd())
              goto LABEL_73;
            continue;
        }
        while (1)
        {
          v42 = *v4;
          v43 = *(_QWORD *)&v3[v42];
          v44 = v43 + 1;
          if (v43 == -1 || v44 > *(_QWORD *)&v3[*v5])
            break;
          v45 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v43);
          *(_QWORD *)&v3[v42] = v44;
          v35 |= (unint64_t)(v45 & 0x7F) << v40;
          if ((v45 & 0x80) == 0)
            goto LABEL_67;
          v40 += 7;
          v15 = v41++ >= 9;
          if (v15)
          {
            LODWORD(v35) = 0;
            goto LABEL_69;
          }
        }
        v3[*v6] = 1;
LABEL_67:
        if (v3[*v6])
          LODWORD(v35) = 0;
LABEL_69:
        v49 = 44;
LABEL_70:
        *(_DWORD *)(a1 + v49) = v35;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v50 = v3[*v6] == 0;
  }
  else
  {
LABEL_73:
    v50 = 0;
  }
  objc_sync_exit(v3);

  return v50;
}

void sub_1889B8C3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitEntryReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitEntryReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889B8C9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitEntryIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  _BOOL8 v38;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_51;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_54;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_51;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_54;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_51;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_54;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v33 = 0;
          break;
        case 5u:
          if (v15 == 2)
            goto LABEL_53;
          goto LABEL_57;
        default:
LABEL_53:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_57:
          v38 = 0;
          goto LABEL_56;
      }
      while (1)
      {
        v34 = *v2;
        v35 = *(_QWORD *)&a1[v34];
        v36 = v35 + 1;
        if (v35 == -1 || v36 > *(_QWORD *)&a1[*v3])
          break;
        v37 = *(char *)(*(_QWORD *)&a1[*v5] + v35);
        *(_QWORD *)&a1[v34] = v36;
        if (v37 < 0)
        {
          v22 = v33++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_54;
      }
LABEL_51:
      a1[*v4] = 1;
LABEL_54:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v38 = a1[*v4] == 0;
LABEL_56:
  PBReaderRecallMark();
  return v38;
}

void sub_1889B98B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitExitPlanInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  char v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  int v32;
  int v33;
  int *v35;
  unint64_t v36;
  BOOL v37;
  int *v38;
  int v39;
  int v40;
  BOOL v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  GEOFormattedString *v50;
  void *v51;
  int v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  id v60;
  void *v61;
  int v62;
  char v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  int v72;
  int v73;
  char v74;
  void *v75;
  char v77;
  char v78;
  int v79;
  char v80;
  char v81;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 72) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 1) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_BYTE)v11 | v7;
        v18 = v16 | v11;
        if ((((v16 | v11) | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v79 = 1;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = v17;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_99;
        v77 = v17;
        v80 = v18 | v17;
        v81 = (v19 == 0) | v18;
        v23 = (int *)MEMORY[0x1E0D82BB8];
        v78 = v18;
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v7;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v9;
        v7 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_BYTE *)(v3 + *v21))
      goto LABEL_97;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v20;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      v31 = v25++ >= 9;
      if (v31)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v26 = 0;
LABEL_27:
    v33 = v26 & 7;
    if (v32 || v33 == 4)
    {
LABEL_97:
      v79 = 1;
      goto LABEL_98;
    }
    v35 = v21;
    v36 = v26 >> 3;
    v37 = v18;
    if ((v81 & 1) == 0)
    {
      v38 = v19;
      do
      {
        v40 = *v38++;
        v39 = v40;
        v37 = v40 != 0;
        if (v40)
          v41 = v39 == (_DWORD)v36;
        else
          v41 = 1;
      }
      while (!v41);
    }
    if ((_DWORD)v36 == 3)
      break;
    if ((_DWORD)v36 == 2)
    {
      if (v37 && (*(_BYTE *)(a1 + 72) & 4) == 0)
      {
        v21 = v35;
        if (v33 == 2)
        {
          v52 = PBReaderPlaceMark();
          v6 = (int *)MEMORY[0x1E0D82BD8];
          if (!v52)
            goto LABEL_119;
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if (*(_QWORD *)(v3 + *v20) < *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]))
          {
            do
            {
              if (*(_BYTE *)(v3 + *v21))
                break;
              v53 = 0;
              v54 = 0;
              v55 = 0;
              while (1)
              {
                v56 = *v20;
                v57 = *(_QWORD *)(v3 + v56);
                v58 = v57 + 1;
                if (v57 == -1 || v58 > *(_QWORD *)(v3 + *v6))
                  break;
                v59 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v57);
                *(_QWORD *)(v3 + v56) = v58;
                v55 |= (unint64_t)(v59 & 0x7F) << v53;
                if (v59 < 0)
                {
                  v53 += 7;
                  v31 = v54++ >= 9;
                  if (!v31)
                    continue;
                }
                goto LABEL_68;
              }
              *(_BYTE *)(v3 + *v21) = 1;
LABEL_68:
              PBRepeatedUInt32Add();
            }
            while (*(_QWORD *)(v3 + *v20) < *(_QWORD *)(v3 + *v6));
          }
          PBReaderRecallMark();
        }
        else
        {
          v65 = 0;
          v66 = 0;
          v67 = 0;
          v6 = (int *)MEMORY[0x1E0D82BD8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v68 = *v20;
            v69 = *(_QWORD *)(v3 + v68);
            v70 = v69 + 1;
            if (v69 == -1 || v70 > *(_QWORD *)(v3 + *v6))
              break;
            v71 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v69);
            *(_QWORD *)(v3 + v68) = v70;
            v67 |= (unint64_t)(v71 & 0x7F) << v65;
            if (v71 < 0)
            {
              v65 += 7;
              v31 = v66++ >= 9;
              if (!v31)
                continue;
            }
            goto LABEL_95;
          }
          *(_BYTE *)(v3 + *v21) = 1;
LABEL_95:
          PBRepeatedUInt32Add();
        }
        v18 = v78;
        goto LABEL_77;
      }
      goto LABEL_76;
    }
    if ((_DWORD)v36 == 1)
    {
      if ((v8 & 1) != 0)
      {
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_BYTE *)(a1 + 72) |= 1u;
        v21 = v35;
        v6 = (int *)MEMORY[0x1E0D82BD8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        while (1)
        {
          v45 = *v20;
          v46 = *(_QWORD *)(v3 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(v3 + *v6))
            break;
          v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v46);
          *(_QWORD *)(v3 + v45) = v47;
          v44 |= (unint64_t)(v48 & 0x7F) << v42;
          if ((v48 & 0x80) == 0)
            goto LABEL_81;
          v42 += 7;
          v31 = v43++ >= 9;
          if (v31)
          {
            LODWORD(v44) = 0;
            goto LABEL_83;
          }
        }
        *(_BYTE *)(v3 + *v21) = 1;
LABEL_81:
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v44) = 0;
LABEL_83:
        *(_DWORD *)(a1 + 68) = v44;
        goto LABEL_77;
      }
      goto LABEL_76;
    }
    if ((v77 & 1) == 0 || (*(_BYTE *)(a1 + 72) & 2) != 0)
      goto LABEL_76;
    if (!*(_QWORD *)(a1 + 16))
    {
      v60 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v61 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v60;

    }
    v62 = PBUnknownFieldAdd();
    v18 = v78;
    v21 = v35;
    v6 = (int *)MEMORY[0x1E0D82BD8];
    v23 = (int *)MEMORY[0x1E0D82BB8];
    if (!v62)
    {
      v79 = 0;
      goto LABEL_100;
    }
LABEL_77:
    if (!(v80 & 1 | (v9 != 0)) || *(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6))
      goto LABEL_97;
  }
  if (!v37)
  {
LABEL_76:
    v63 = PBReaderSkipValueWithTag();
    v18 = v78;
    v21 = v35;
    v6 = (int *)MEMORY[0x1E0D82BD8];
    v23 = (int *)MEMORY[0x1E0D82BB8];
    if ((v63 & 1) == 0)
    {
      v79 = 0;
      goto LABEL_98;
    }
    goto LABEL_77;
  }
  v21 = v35;
  if ((*(_BYTE *)(a1 + 72) & 8) != 0)
  {
    v64 = PBReaderSkipValueWithTag();
    v6 = (int *)MEMORY[0x1E0D82BD8];
    if ((v64 & 1) == 0)
      goto LABEL_119;
    v9 += *(unsigned __int8 *)(a1 + 72) << 28 >> 31;
    goto LABEL_86;
  }
  v49 = PBReaderPlaceMark();
  v6 = (int *)MEMORY[0x1E0D82BD8];
  if ((v49 & 1) == 0)
    goto LABEL_119;
  v50 = objc_alloc_init(GEOFormattedString);
  if (GEOFormattedStringReadAllFrom((uint64_t)v50, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    v51 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v50;

    --v9;
LABEL_86:
    v18 = v78;
    v23 = (int *)MEMORY[0x1E0D82BB8];
    goto LABEL_77;
  }

LABEL_119:
  v79 = 0;
  v18 = v78;
LABEL_98:
  v22 = v77;
LABEL_99:
  if ((v22 & 1) != 0)
LABEL_100:
    *(_BYTE *)(a1 + 72) |= 2u;
  if (v18 & 1 | ((v79 & 1) == 0))
  {
    *(_BYTE *)(a1 + 72) |= 4u;
    *(_BYTE *)(a1 + 72) |= 8u;
    goto LABEL_111;
  }
  if (v19)
  {
    while (2)
    {
      while (1)
      {
        v73 = *v19++;
        v72 = v73;
        if (v73 == 2)
          break;
        if (v72 == 3)
        {
          v74 = 8;
          goto LABEL_110;
        }
        if (!v72)
          goto LABEL_111;
      }
      v74 = 4;
LABEL_110:
      *(_BYTE *)(a1 + 72) |= v74;
      continue;
    }
  }
LABEL_111:
  if (v79)
  {
    v3 = *(_BYTE *)(v3 + *v21) == 0;
    if ((v18 & 1) == 0)
      return v3;
LABEL_115:
    v75 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  else
  {
    v3 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_115;
  }
  return v3;
}

void sub_1889BA3D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889BAAFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitExitPlanInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitExitPlanInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitExitPlanInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitExitPlanInfoReadAllFrom_initialTag;
  Specified = GEOTransitExitPlanInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 48), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1889BACA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitExitPlanInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitExitPlanInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889BAD00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889BAED0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *_GEOTransitExitPlanInfoIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  if ((*(_BYTE *)(a1 + 72) & 0x14) != 0)
    return (os_unfair_lock_s *)1;
  if ((*(_BYTE *)(a1 + 72) & 8) != 0)
    return GEOFormattedStringIsDirty(*(os_unfair_lock_s **)(a1 + 48));
  return 0;
}

os_unfair_lock_s *GEOTransitExitPlanInfoIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    v2 = _GEOTransitExitPlanInfoIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 16);
    return v2;
  }
  return result;
}

void sub_1889BB25C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889BB544(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitLegReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  void *v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  _BOOL8 v42;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        v17 = v10 & 7;
        if (v16 || v17 == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          if (v17 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_61;
            while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5] && !v3[*v6])
            {
              v26 = 0;
              v27 = 0;
              v28 = 0;
              while (1)
              {
                v29 = *v4;
                v30 = *(_QWORD *)&v3[v29];
                v31 = v30 + 1;
                if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
                  break;
                v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
                *(_QWORD *)&v3[v29] = v31;
                v28 |= (unint64_t)(v32 & 0x7F) << v26;
                if (v32 < 0)
                {
                  v26 += 7;
                  v15 = v27++ >= 9;
                  if (!v15)
                    continue;
                }
                goto LABEL_40;
              }
              v3[*v6] = 1;
LABEL_40:
              PBRepeatedInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v35 = 0;
            v36 = 0;
            v37 = 0;
            while (1)
            {
              v38 = *v4;
              v39 = *(_QWORD *)&v3[v38];
              v40 = v39 + 1;
              if (v39 == -1 || v40 > *(_QWORD *)&v3[*v5])
                break;
              v41 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v39);
              *(_QWORD *)&v3[v38] = v40;
              v37 |= (unint64_t)(v41 & 0x7F) << v35;
              if (v41 < 0)
              {
                v35 += 7;
                v15 = v36++ >= 9;
                if (!v15)
                  continue;
              }
              goto LABEL_58;
            }
            v3[*v6] = 1;
LABEL_58:
            PBRepeatedInt32Add();
          }
        }
        else if ((v10 >> 3) == 1)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 44) |= 1u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
              break;
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_46;
            v19 += 7;
            v15 = v20++ >= 9;
            if (v15)
            {
              LODWORD(v21) = 0;
              goto LABEL_48;
            }
          }
          v3[*v6] = 1;
LABEL_46:
          if (v3[*v6])
            LODWORD(v21) = 0;
LABEL_48:
          *(_DWORD *)(a1 + 40) = v21;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v33 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v34 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v33;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_61;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v42 = v3[*v6] == 0;
  }
  else
  {
LABEL_61:
    v42 = 0;
  }
  objc_sync_exit(v3);

  return v42;
}

void sub_1889BC124(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitLegReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitLegReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889BC188(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitLegIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if (v15 != 2)
        {
          if ((v8 & 7) != 0)
            goto LABEL_52;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
              goto LABEL_37;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v27 = v15++;
              if (v27 <= 8)
                continue;
            }
            goto LABEL_49;
          }
        }
        if (!PBReaderPlaceMark())
        {
LABEL_52:
          PBReaderRecallMark();
          return 0;
        }
LABEL_39:
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
        {
          v28 = a1[*v4];
          if (a1[*v4])
            break;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              break;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v13 = v28++ >= 9;
              if (!v13)
                continue;
            }
            goto LABEL_39;
          }
          a1[*v4] = 1;
        }
        PBReaderRecallMark();
      }
      else
      {
        if ((v8 >> 3) == 1)
        {
          if ((v8 & 7) != 0)
            goto LABEL_52;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              break;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0 && v17++ <= 8)
              continue;
            goto LABEL_49;
          }
LABEL_37:
          a1[*v4] = 1;
          continue;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_52;
      }
LABEL_49:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v33 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v33;
}

BOOL GEOTransitOccupancyInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_34:
          *(_DWORD *)(a1 + 16) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_1889BD138(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitOccupancyInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitOccupancyInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889BD198(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitPathReadAllFrom(_QWORD *a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  GEOTransitLeg *v18;
  id v19;
  void *v20;
  _BOOL8 v21;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_29;
          v18 = objc_alloc_init(GEOTransitLeg);
          if (!GEOTransitLegReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addLeg:", v18, 0, 0);

        }
        else
        {
          if (!a1[1])
          {
            v19 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v20 = (void *)a1[1];
            a1[1] = v19;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_29;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v21 = v3[*v6] == 0;
  }
  else
  {
LABEL_29:
    v21 = 0;
  }
  objc_sync_exit(v3);

  return v21;
}

void sub_1889BDD68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitPathReadFrom(_QWORD *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitPathReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889BDDC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitPathIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitLegIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOTransitPriceReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  _BOOL8 v37;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_51;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          goto LABEL_51;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
          break;
        if ((_DWORD)v18 == 2)
        {
          PBReaderReadString();
          v32 = objc_claimAutoreleasedReturnValue();
          v33 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v32;

        }
        else
        {
          if ((_DWORD)v18 == 1)
          {
            v19 = 0;
            v20 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            while (1)
            {
              v22 = *v4;
              v23 = *(_QWORD *)&v3[v22];
              v24 = v23 + 1;
              if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
                break;
              v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
              *(_QWORD *)&v3[v22] = v24;
              v21 |= (unint64_t)(v25 & 0x7F) << v19;
              if ((v25 & 0x80) == 0)
                goto LABEL_42;
              v19 += 7;
              v15 = v20++ >= 9;
              if (v15)
              {
                LODWORD(v21) = 0;
                goto LABEL_44;
              }
            }
            v3[*v6] = 1;
LABEL_42:
            if (v3[*v6])
              LODWORD(v21) = 0;
LABEL_44:
            v36 = 24;
LABEL_49:
            *(_DWORD *)(a1 + v36) = v21;
            goto LABEL_50;
          }
          if (!*(_QWORD *)(a1 + 8))
          {
            v34 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v35 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v34;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_52;
        }
LABEL_50:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_51;
      }
      v26 = 0;
      v27 = 0;
      v21 = 0;
      *(_BYTE *)(a1 + 32) |= 2u;
      while (1)
      {
        v28 = *v4;
        v29 = *(_QWORD *)&v3[v28];
        v30 = v29 + 1;
        if (v29 == -1 || v30 > *(_QWORD *)&v3[*v5])
          break;
        v31 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
        *(_QWORD *)&v3[v28] = v30;
        v21 |= (unint64_t)(v31 & 0x7F) << v26;
        if ((v31 & 0x80) == 0)
          goto LABEL_46;
        v26 += 7;
        v15 = v27++ >= 9;
        if (v15)
        {
          LODWORD(v21) = 0;
          goto LABEL_48;
        }
      }
      v3[*v6] = 1;
LABEL_46:
      if (v3[*v6])
        LODWORD(v21) = 0;
LABEL_48:
      v36 = 28;
      goto LABEL_49;
    }
LABEL_51:
    v37 = v3[*v6] == 0;
  }
  else
  {
LABEL_52:
    v37 = 0;
  }
  objc_sync_exit(v3);

  return v37;
}

void sub_1889BEF40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitPriceReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitPriceReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889BEFA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889BF614(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitRegionAlertReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEOTransitBanner *v39;
  void *v40;
  id v41;
  void *v42;
  int v43;
  char v44;
  char v45;
  int v46;
  int v47;
  void *v48;
  int v50;
  unint64_t v51;
  char v52;
  char v53;
  char v54;
  BOOL v55;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v7 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v52 = v17;
        v53 = v18 | v17;
        if (((v18 | v7) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v54 = (v19 == 0) | v18;
        v55 = v18;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v8;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_62;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_62:
      v50 = 1;
      goto LABEL_63;
    }
    v33 = v25 >> 3;
    v34 = v55;
    if ((v54 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    if ((_DWORD)v33 == 2)
      break;
    if ((_DWORD)v33 == 1)
    {
      if (!v34)
        goto LABEL_56;
      if ((*(_BYTE *)(a1 + 52) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_82;
        v8 += *(unsigned __int8 *)(a1 + 52) << 30 >> 31;
      }
      else
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_82;
        v39 = objc_alloc_init(GEOTransitBanner);
        if (!GEOTransitBannerReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_81;
        PBReaderRecallMark();
        v40 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v39;

        --v8;
      }
      goto LABEL_60;
    }
    if ((v52 & 1) == 0 || (*(_BYTE *)(a1 + 52) & 1) != 0)
      goto LABEL_56;
    if (!*(_QWORD *)(a1 + 16))
    {
      v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v42 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v41;

    }
    v43 = PBUnknownFieldAdd();
    v21 = (int *)MEMORY[0x1E0D82BC8];
    if (!v43)
    {
      v50 = 0;
      v51 = 0x1ECDA9000;
      goto LABEL_64;
    }
LABEL_61:
    if (!(v53 & 1 | (v8 != 0)))
      goto LABEL_62;
  }
  if (!v34 || (*(_BYTE *)(a1 + 52) & 4) != 0)
  {
LABEL_56:
    v44 = PBReaderSkipValueWithTag();
    v21 = (int *)MEMORY[0x1E0D82BC8];
    if ((v44 & 1) == 0)
    {
      v50 = 0;
      goto LABEL_63;
    }
    goto LABEL_61;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_82;
  v39 = objc_alloc_init(GEOPBTransitTriggerRegion);
  if (GEOPBTransitTriggerRegionReadAllFrom((uint64_t)v39, (void *)v3))
  {
    PBReaderRecallMark();
    -[GEOTransitRegionAlert _addNoFlagsTriggerRegion:](a1, v39);

LABEL_60:
    v21 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_61;
  }
LABEL_81:

LABEL_82:
  v50 = 0;
  v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_63:
  v51 = 0x1ECDA9000uLL;
  if ((v52 & 1) == 0)
    goto LABEL_65;
LABEL_64:
  *(_BYTE *)(a1 + *(int *)(v51 + 3500)) |= 1u;
LABEL_65:
  if (v55 || (v50 & 1) == 0)
  {
    *(_BYTE *)(a1 + *(int *)(v51 + 3500)) |= 2u;
    *(_BYTE *)(a1 + *(int *)(v51 + 3500)) |= 4u;
    goto LABEL_75;
  }
  if (v19)
  {
    while (1)
    {
      v47 = *v19++;
      v46 = v47;
      if (v47 == 1)
        break;
      if (v46 == 2)
      {
        v45 = 4;
LABEL_71:
        *(_BYTE *)(a1 + *(int *)(v51 + 3500)) |= v45;
      }
      else if (!v46)
      {
        goto LABEL_75;
      }
    }
    v45 = 2;
    goto LABEL_71;
  }
LABEL_75:
  if (v50)
    v3 = *(_BYTE *)(v3 + *v21) == 0;
  else
    v3 = 0;
  if (v55)
  {
    v48 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1889BFC88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889C0620(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOTransitRegionAlertCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v7);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

unint64_t GEOTransitRegionAlertReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitRegionAlertReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitRegionAlertReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitRegionAlertReadAllFrom_initialTag;
  Specified = GEOTransitRegionAlertReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitRegionAlertCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1889C08C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitRegionAlertReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitRegionAlertReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889C0924(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitRegionAlertIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_30;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_30;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitBannerIsValid(a1))
          goto LABEL_31;
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_31;
LABEL_29:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_30;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOPBTransitTriggerRegionIsValid(a1))
    {
LABEL_31:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_27;
  }
LABEL_30:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_1889C0D50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitRegionAlertIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = *(unsigned __int8 *)(a1 + 52);
  if ((v2 & 8) != 0)
    return 1;
  if ((v2 & 2) != 0)
  {
    if ((GEOTransitBannerIsDirty(*(os_unfair_lock_s **)(a1 + 24)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 52);
  }
  return (v2 >> 2) & 1;
}

os_unfair_lock_s *GEOTransitRegionAlertIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTransitRegionAlertIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1889C1274(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889C1570(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889C18A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitRouteDisplayStringsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEOFormattedString *v39;
  uint64_t v40;
  id v41;
  void *v42;
  int v43;
  void *v44;
  char v45;
  char v46;
  int v47;
  char v48;
  void *v49;
  int v51;
  unint64_t v52;
  char v53;
  char v54;
  char v55;
  BOOL v56;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 76);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 72));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 84)), (uint16x4_t)0xFFFAFFFDFFFBFFFCLL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 84) & 1)+ ((*(_BYTE *)(a1 + 84) & 2) != 0)+ ((*(_BYTE *)(a1 + 84) & 4) != 0));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 3;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v53 = v17;
        v54 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v55 = (v19 == 0) | v18;
        v56 = v18;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_91;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_91:
      v51 = 1;
      goto LABEL_92;
    }
    v33 = v25 >> 3;
    v34 = v56;
    if ((v55 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 7:
        if (!v34)
          goto LABEL_76;
        if ((*(_BYTE *)(a1 + 84) & 0x20) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_111;
          v39 = objc_alloc_init(GEOFormattedString);
          if (GEOFormattedStringReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            v40 = 56;
            goto LABEL_75;
          }
          goto LABEL_110;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_111;
        v46 = 4 * *(_BYTE *)(a1 + 84);
        goto LABEL_88;
      case 8:
        if (!v34)
          goto LABEL_76;
        if ((*(_BYTE *)(a1 + 84) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_111;
          v46 = 8 * *(_BYTE *)(a1 + 84);
          goto LABEL_88;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_111;
        v39 = objc_alloc_init(GEOFormattedString);
        if (!GEOFormattedStringReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_110;
        PBReaderRecallMark();
        v40 = 48;
        goto LABEL_75;
      case 9:
        if (!v34)
          goto LABEL_76;
        if ((*(_BYTE *)(a1 + 84) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_111;
          v46 = 16 * *(_BYTE *)(a1 + 84);
          goto LABEL_88;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_111;
        v39 = objc_alloc_init(GEOFormattedString);
        if (!GEOFormattedStringReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_110;
        PBReaderRecallMark();
        v40 = 40;
        goto LABEL_75;
      case 13:
        if (!v34)
          goto LABEL_76;
        if ((*(_BYTE *)(a1 + 84) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_111;
          v46 = 2 * *(_BYTE *)(a1 + 84);
          goto LABEL_88;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_111;
        v39 = objc_alloc_init(GEOFormattedString);
        if (!GEOFormattedStringReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_110;
        PBReaderRecallMark();
        v40 = 64;
        goto LABEL_75;
      case 14:
        if (!v34 || (*(_BYTE *)(a1 + 84) & 2) != 0)
          goto LABEL_76;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_111;
        v39 = objc_alloc_init(GEOTransitAdvisory);
        if (!GEOTransitAdvisoryReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_110;
        PBReaderRecallMark();
        -[GEOTransitRouteDisplayStrings _addNoFlagsAdvisory:](a1, v39);

        goto LABEL_89;
      case 15:
        if (!v34)
          goto LABEL_76;
        if ((*(_BYTE *)(a1 + 84) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_111;
          v46 = 32 * *(_BYTE *)(a1 + 84);
LABEL_88:
          v7 += v46 >> 7;
LABEL_89:
          v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_90:
          if (!(v54 & 1 | (v7 != 0)))
            goto LABEL_91;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_111;
        v39 = objc_alloc_init(GEOFormattedString);
        if (GEOFormattedStringReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v40 = 32;
LABEL_75:
          v44 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v39;

          --v7;
          goto LABEL_89;
        }
LABEL_110:

LABEL_111:
        v51 = 0;
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_92:
        v52 = 0x1ECDA9000uLL;
        if ((v53 & 1) != 0)
LABEL_93:
          *(_BYTE *)(a1 + *(int *)(v52 + 3528)) |= 1u;
        if (v56 || (v51 & 1) == 0)
        {
          *(_BYTE *)(a1 + *(int *)(v52 + 3528)) |= 0x20u;
          *(_BYTE *)(a1 + *(int *)(v52 + 3528)) |= 0x10u;
          *(_BYTE *)(a1 + *(int *)(v52 + 3528)) |= 8u;
          *(_BYTE *)(a1 + *(int *)(v52 + 3528)) |= 0x40u;
          *(_BYTE *)(a1 + *(int *)(v52 + 3528)) |= 2u;
          *(_BYTE *)(a1 + *(int *)(v52 + 3528)) |= 4u;
        }
        else if (v19)
        {
          while (1)
          {
            v47 = *v19++;
            v48 = 32;
            switch(v47)
            {
              case 0:
                goto LABEL_104;
              case 7:
                goto LABEL_103;
              case 8:
                v48 = 16;
                goto LABEL_103;
              case 9:
                v48 = 8;
                goto LABEL_103;
              case 13:
                v48 = 64;
                goto LABEL_103;
              case 14:
                v48 = 2;
                goto LABEL_103;
              case 15:
                v48 = 4;
LABEL_103:
                *(_BYTE *)(a1 + *(int *)(v52 + 3528)) |= v48;
                break;
              default:
                continue;
            }
          }
        }
LABEL_104:
        if (v51)
          v3 = *(_BYTE *)(v3 + *v21) == 0;
        else
          v3 = 0;
        if (v56)
        {
          v49 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v53 & 1) == 0 || (*(_BYTE *)(a1 + 84) & 1) != 0)
        {
LABEL_76:
          v45 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if ((v45 & 1) == 0)
          {
            v51 = 0;
            goto LABEL_92;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v42 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v41;

          }
          v43 = PBUnknownFieldAdd();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if (!v43)
          {
            v51 = 0;
            v52 = 0x1ECDA9000;
            goto LABEL_93;
          }
        }
        goto LABEL_90;
    }
  }
}

void sub_1889C2208(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889C2348(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889C2484(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889C25C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889C28F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889C33B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitRouteDisplayStringsCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[7], "readAll:", 1);
  objc_msgSend(a1[6], "readAll:", 1);
  objc_msgSend(a1[5], "readAll:", 1);
  objc_msgSend(a1[8], "readAll:", 1);
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v2 = a1[3];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v8);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  return objc_msgSend(a1[4], "readAll:", 1);
}

unint64_t GEOTransitRouteDisplayStringsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 76))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitRouteDisplayStringsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 76) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitRouteDisplayStringsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitRouteDisplayStringsReadAllFrom_initialTag;
  Specified = GEOTransitRouteDisplayStringsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitRouteDisplayStringsCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_1889C3698(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitRouteDisplayStringsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitRouteDisplayStringsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889C36F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitRouteDisplayStringsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
LABEL_31:
    v17 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v17;
  }
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (a1[*v4])
      goto LABEL_31;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *v2;
      v10 = *(_QWORD *)&a1[v9];
      v11 = v10 + 1;
      if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
        break;
      v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
      *(_QWORD *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0)
        goto LABEL_12;
      v6 += 7;
      if (v7++ >= 9)
      {
        v8 = 0;
        v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v14 = a1[*v4];
    if (a1[*v4])
      v8 = 0;
LABEL_14:
    v15 = v8 & 7;
    if (v14 || v15 == 4)
      goto LABEL_31;
    switch((v8 >> 3))
    {
      case 7u:
      case 8u:
      case 9u:
      case 0xDu:
      case 0xFu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringIsValid(a1))
          goto LABEL_30;
        goto LABEL_22;
      case 0xEu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitAdvisoryIsValid(a1))
          goto LABEL_30;
LABEL_22:
        PBReaderRecallMark();
        goto LABEL_23;
      default:
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
LABEL_23:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_31;
          continue;
        }
LABEL_30:
        PBReaderRecallMark();
        return 0;
    }
  }
}

void sub_1889C3BB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitRouteDisplayStringsIsDirty(uint64_t a1)
{
  int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v2 = *(char *)(a1 + 84);
  if (v2 < 0)
    return 1;
  if ((v2 & 0x20) != 0)
  {
    if ((GEOFormattedStringIsDirty(*(os_unfair_lock_s **)(a1 + 56)) & 1) != 0)
      return 1;
    LOBYTE(v2) = *(_BYTE *)(a1 + 84);
  }
  if ((v2 & 0x10) != 0)
  {
    if ((GEOFormattedStringIsDirty(*(os_unfair_lock_s **)(a1 + 48)) & 1) != 0)
      return 1;
    LOBYTE(v2) = *(_BYTE *)(a1 + 84);
  }
  if ((v2 & 8) != 0)
  {
    if ((GEOFormattedStringIsDirty(*(os_unfair_lock_s **)(a1 + 40)) & 1) != 0)
      return 1;
    LOBYTE(v2) = *(_BYTE *)(a1 + 84);
  }
  if ((v2 & 0x40) == 0)
    goto LABEL_14;
  if ((GEOFormattedStringIsDirty(*(os_unfair_lock_s **)(a1 + 64)) & 1) != 0)
    return 1;
  LOBYTE(v2) = *(_BYTE *)(a1 + 84);
LABEL_14:
  if ((v2 & 2) != 0)
    return 1;
  if ((v2 & 4) != 0)
    return (uint64_t)GEOFormattedStringIsDirty(*(os_unfair_lock_s **)(a1 + 32));
  else
    return 0;
}

os_unfair_lock_s *GEOTransitRouteDisplayStringsIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTransitRouteDisplayStringsIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 20);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1889C4118(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889C458C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitRouteUpdateConfigurationReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            v20 = 0;
LABEL_34:
          *(_QWORD *)(a1 + 16) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_1889C4E50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitRouteUpdateConfigurationReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitRouteUpdateConfigurationReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889C4EB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitRouteUpdateConfigurationIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_33;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8)
            continue;
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        v22 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v22;
}

BOOL GEOTransitScheduleInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  GEOTransitEntry *v18;
  void *v19;
  id v20;
  void *v21;
  _BOOL8 v22;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_29;
          v18 = objc_alloc_init(GEOTransitEntry);
          if (!GEOTransitEntryReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          v19 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v18;

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v20 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v21 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v20;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_29;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v22 = v3[*v6] == 0;
  }
  else
  {
LABEL_29:
    v22 = 0;
  }
  objc_sync_exit(v3);

  return v22;
}

void sub_1889C59E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitScheduleInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitScheduleInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889C5A40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitScheduleInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitEntryIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_1889C6124(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitSectionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  char v18;
  int *v19;
  int *v20;
  char v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  int v32;
  int v33;
  int *v35;
  unint64_t v36;
  BOOL v37;
  int *v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  GEOTransitTicketingSegment *v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  void *v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  id v81;
  void *v82;
  int v83;
  char v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  int v106;
  int v107;
  __int16 v108;
  void *v109;
  char v111;
  char v112;
  int v113;
  char v114;
  char v115;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 116);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 112));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 132)), (uint16x4_t)0xFFFCFFFDFFFBFFFALL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 132) >> 7) & 1)+ ((*(_WORD *)(a1 + 132) >> 2) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 3;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        if ((((v16 | v11) | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v113 = 1;
        v21 = v17;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_165;
        v111 = v17;
        v114 = v18 | v17;
        v115 = (v20 == 0) | v18;
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        v112 = v18;
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v22))
      goto LABEL_163;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v19;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      v31 = v25++ >= 9;
      if (v31)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    v33 = v26 & 7;
    if (v32 || v33 == 4)
    {
LABEL_163:
      v113 = 1;
      goto LABEL_164;
    }
    v35 = v22;
    v36 = v26 >> 3;
    v37 = v18;
    if ((v115 & 1) == 0)
    {
      v38 = v20;
      do
      {
        v40 = *v38++;
        v39 = v40;
        v37 = v40 != 0;
        if (v40)
          v41 = v39 == (_DWORD)v36;
        else
          v41 = 1;
      }
      while (!v41);
    }
    v42 = v36 - 1;
    v22 = v35;
    switch(v42)
    {
      case 0:
        if (!v37 || (*(_WORD *)(a1 + 132) & 0x20) != 0)
          goto LABEL_123;
        if (v33 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_185;
          v6 = (int *)MEMORY[0x1E0D82BD8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if (*(_QWORD *)(v3 + *v19) < *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]))
          {
            while (1)
            {
              if (*(_BYTE *)(v3 + *v22))
                goto LABEL_103;
              v43 = 0;
              v44 = 0;
              v45 = 0;
              while (1)
              {
                v46 = *v19;
                v47 = *(_QWORD *)(v3 + v46);
                v48 = v47 + 1;
                if (v47 == -1 || v48 > *(_QWORD *)(v3 + *v6))
                  break;
                v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v47);
                *(_QWORD *)(v3 + v46) = v48;
                v45 |= (unint64_t)(v49 & 0x7F) << v43;
                if (v49 < 0)
                {
                  v43 += 7;
                  v31 = v44++ >= 9;
                  if (!v31)
                    continue;
                }
                goto LABEL_53;
              }
              *(_BYTE *)(v3 + *v22) = 1;
LABEL_53:
              PBRepeatedUInt32Add();
              if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6))
                goto LABEL_103;
            }
          }
          goto LABEL_103;
        }
        v85 = 0;
        v86 = 0;
        v87 = 0;
        v6 = (int *)MEMORY[0x1E0D82BD8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        while (1)
        {
          v88 = *v19;
          v89 = *(_QWORD *)(v3 + v88);
          v90 = v89 + 1;
          if (v89 == -1 || v90 > *(_QWORD *)(v3 + *v6))
            goto LABEL_160;
          v91 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v89);
          *(_QWORD *)(v3 + v88) = v90;
          v87 |= (unint64_t)(v91 & 0x7F) << v85;
          if (v91 < 0)
          {
            v85 += 7;
            v31 = v86++ >= 9;
            if (!v31)
              continue;
          }
          goto LABEL_161;
        }
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_123;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        *(_WORD *)(a1 + 132) |= 1u;
        v6 = (int *)MEMORY[0x1E0D82BD8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        while (2)
        {
          v54 = *v19;
          v55 = *(_QWORD *)(v3 + v54);
          v56 = v55 + 1;
          if (v55 == -1 || v56 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v55);
            *(_QWORD *)(v3 + v54) = v56;
            v53 |= (unint64_t)(v57 & 0x7F) << v51;
            if (v57 < 0)
            {
              v51 += 7;
              v31 = v52++ >= 9;
              if (v31)
              {
                LODWORD(v53) = 0;
                goto LABEL_131;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          LODWORD(v53) = 0;
LABEL_131:
        *(_DWORD *)(a1 + 124) = v53;
        goto LABEL_125;
      case 2:
        if (!v37)
          goto LABEL_123;
        if ((*(_WORD *)(a1 + 132) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_185;
          v7 += *(unsigned __int16 *)(a1 + 132) << 25 >> 31;
          v18 = v112;
        }
        else
        {
          PBReaderReadString();
          v58 = objc_claimAutoreleasedReturnValue();
          v59 = *(void **)(a1 + 96);
          *(_QWORD *)(a1 + 96) = v58;

          v18 = v112;
          --v7;
        }
        goto LABEL_138;
      case 3:
        if (!v37 || (*(_WORD *)(a1 + 132) & 8) != 0)
          goto LABEL_123;
        if (v33 != 2)
        {
          v92 = 0;
          v93 = 0;
          v94 = 0;
          v6 = (int *)MEMORY[0x1E0D82BD8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v95 = *v19;
            v96 = *(_QWORD *)(v3 + v95);
            v97 = v96 + 1;
            if (v96 == -1 || v97 > *(_QWORD *)(v3 + *v6))
              goto LABEL_160;
            v98 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v96);
            *(_QWORD *)(v3 + v95) = v97;
            v94 |= (unint64_t)(v98 & 0x7F) << v92;
            if (v98 < 0)
            {
              v92 += 7;
              v31 = v93++ >= 9;
              if (!v31)
                continue;
            }
            goto LABEL_161;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_185;
        v6 = (int *)MEMORY[0x1E0D82BD8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        if (*(_QWORD *)(v3 + *v19) < *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]))
        {
          do
          {
            if (*(_BYTE *)(v3 + *v22))
              break;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            while (1)
            {
              v63 = *v19;
              v64 = *(_QWORD *)(v3 + v63);
              v65 = v64 + 1;
              if (v64 == -1 || v65 > *(_QWORD *)(v3 + *v6))
                break;
              v66 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v64);
              *(_QWORD *)(v3 + v63) = v65;
              v62 |= (unint64_t)(v66 & 0x7F) << v60;
              if (v66 < 0)
              {
                v60 += 7;
                v31 = v61++ >= 9;
                if (!v31)
                  continue;
              }
              goto LABEL_86;
            }
            *(_BYTE *)(v3 + *v22) = 1;
LABEL_86:
            PBRepeatedUInt32Add();
          }
          while (*(_QWORD *)(v3 + *v19) < *(_QWORD *)(v3 + *v6));
        }
        goto LABEL_103;
      case 4:
        if (!v37 || (*(_WORD *)(a1 + 132) & 0x10) != 0)
          goto LABEL_123;
        if (v33 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_185;
          v6 = (int *)MEMORY[0x1E0D82BD8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if (*(_QWORD *)(v3 + *v19) < *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]))
          {
            do
            {
              if (*(_BYTE *)(v3 + *v22))
                break;
              v67 = 0;
              v68 = 0;
              v69 = 0;
              while (1)
              {
                v70 = *v19;
                v71 = *(_QWORD *)(v3 + v70);
                v72 = v71 + 1;
                if (v71 == -1 || v72 > *(_QWORD *)(v3 + *v6))
                  break;
                v73 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v71);
                *(_QWORD *)(v3 + v70) = v72;
                v69 |= (unint64_t)(v73 & 0x7F) << v67;
                if (v73 < 0)
                {
                  v67 += 7;
                  v31 = v68++ >= 9;
                  if (!v31)
                    continue;
                }
                goto LABEL_102;
              }
              *(_BYTE *)(v3 + *v22) = 1;
LABEL_102:
              PBRepeatedUInt32Add();
            }
            while (*(_QWORD *)(v3 + *v19) < *(_QWORD *)(v3 + *v6));
          }
LABEL_103:
          PBReaderRecallMark();
        }
        else
        {
          v99 = 0;
          v100 = 0;
          v101 = 0;
          v6 = (int *)MEMORY[0x1E0D82BD8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v102 = *v19;
            v103 = *(_QWORD *)(v3 + v102);
            v104 = v103 + 1;
            if (v103 == -1 || v104 > *(_QWORD *)(v3 + *v6))
              break;
            v105 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v103);
            *(_QWORD *)(v3 + v102) = v104;
            v101 |= (unint64_t)(v105 & 0x7F) << v99;
            if (v105 < 0)
            {
              v99 += 7;
              v31 = v100++ >= 9;
              if (!v31)
                continue;
            }
            goto LABEL_161;
          }
LABEL_160:
          *(_BYTE *)(v3 + *v22) = 1;
LABEL_161:
          PBRepeatedUInt32Add();
        }
        v18 = v112;
        goto LABEL_125;
      case 5:
        if ((v8 & 1) == 0)
        {
LABEL_123:
          v84 = PBReaderSkipValueWithTag();
          v18 = v112;
          goto LABEL_124;
        }
        v74 = 0;
        v75 = 0;
        v76 = 0;
        *(_WORD *)(a1 + 132) |= 2u;
        v6 = (int *)MEMORY[0x1E0D82BD8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        while (1)
        {
          v77 = *v19;
          v78 = *(_QWORD *)(v3 + v77);
          v79 = v78 + 1;
          if (v78 == -1 || v79 > *(_QWORD *)(v3 + *v6))
            break;
          v80 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v78);
          *(_QWORD *)(v3 + v77) = v79;
          v76 |= (unint64_t)(v80 & 0x7F) << v74;
          if ((v80 & 0x80) == 0)
            goto LABEL_133;
          v74 += 7;
          v31 = v75++ >= 9;
          if (v31)
          {
            v76 = 0;
            goto LABEL_135;
          }
        }
        *(_BYTE *)(v3 + *v22) = 1;
LABEL_133:
        if (*(_BYTE *)(v3 + *v22))
          v76 = 0;
LABEL_135:
        *(_BYTE *)(a1 + 128) = v76 != 0;
        goto LABEL_125;
      default:
        if ((_DWORD)v35 != 22)
        {
          if ((v111 & 1) == 0 || (*(_WORD *)(a1 + 132) & 4) != 0)
            goto LABEL_122;
          if (!*(_QWORD *)(a1 + 16))
          {
            v81 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v82 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v81;

          }
          v83 = PBUnknownFieldAdd();
          v18 = v112;
          v22 = v35;
          v6 = (int *)MEMORY[0x1E0D82BD8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if (!v83)
          {
            v113 = 0;
            goto LABEL_166;
          }
LABEL_125:
          if (!(v114 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_163;
          continue;
        }
        if (!v37 || (*(_WORD *)(a1 + 132) & 0x80) != 0)
        {
LABEL_122:
          v84 = PBReaderSkipValueWithTag();
          v18 = v112;
          v22 = v35;
LABEL_124:
          v6 = (int *)MEMORY[0x1E0D82BD8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if ((v84 & 1) == 0)
          {
            v113 = 0;
            goto LABEL_164;
          }
          goto LABEL_125;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_185;
        v50 = objc_alloc_init(GEOTransitTicketingSegment);
        if (GEOTransitTicketingSegmentReadAllFrom((uint64_t)v50, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          -[GEOTransitSection _addNoFlagsTicketingSegment:](a1, v50);

          v18 = v112;
          v22 = v35;
LABEL_138:
          v6 = (int *)MEMORY[0x1E0D82BD8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          goto LABEL_125;
        }

LABEL_185:
        v113 = 0;
        v18 = v112;
LABEL_164:
        v21 = v111;
LABEL_165:
        if ((v21 & 1) != 0)
LABEL_166:
          *(_WORD *)(a1 + 132) |= 4u;
        if (v18 & 1 | ((v113 & 1) == 0))
        {
          *(_WORD *)(a1 + 132) |= 0x20u;
          *(_WORD *)(a1 + 132) |= 0x40u;
          *(_WORD *)(a1 + 132) |= 8u;
          *(_WORD *)(a1 + 132) |= 0x10u;
          *(_WORD *)(a1 + 132) |= 0x80u;
        }
        else if (v20)
        {
          while (1)
          {
            v107 = *v20++;
            v106 = v107;
            v108 = 32;
            switch(v107)
            {
              case 0:
                goto LABEL_177;
              case 1:
                goto LABEL_176;
              case 2:
                continue;
              case 3:
                v108 = 64;
                goto LABEL_176;
              case 4:
                v108 = 8;
                goto LABEL_176;
              case 5:
                v108 = 16;
                goto LABEL_176;
              default:
                if (v106 != 22)
                  continue;
                v108 = 128;
LABEL_176:
                *(_WORD *)(a1 + 132) |= v108;
                break;
            }
          }
        }
LABEL_177:
        if (v113)
        {
          v3 = *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]) == 0;
          if ((v18 & 1) == 0)
            return v3;
LABEL_181:
          v109 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v18 & 1) != 0)
            goto LABEL_181;
        }
        return v3;
    }
  }
}

void sub_1889C71F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889C7334(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889C7674(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889C7A2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889C88C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOTransitSectionCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 104);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOTransitSectionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 116))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitSectionReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 112) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 116) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitSectionReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitSectionReadAllFrom_initialTag;
  Specified = GEOTransitSectionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitSectionCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
  return Specified;
}

void sub_1889C8B54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitSectionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitSectionReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889C8BB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitSectionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  _BOOL8 v58;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_99;
            while (1)
            {
LABEL_68:
              if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
                goto LABEL_30;
              v43 = a1[*v4];
              if (a1[*v4])
                goto LABEL_30;
              while (1)
              {
                v44 = *v2;
                v45 = *(_QWORD *)&a1[v44];
                v46 = v45 + 1;
                if (v45 == -1 || v46 > *(_QWORD *)&a1[*v3])
                  break;
                v47 = *(char *)(*(_QWORD *)&a1[*v5] + v45);
                *(_QWORD *)&a1[v44] = v46;
                if (v47 < 0)
                {
                  v13 = v43++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_68;
              }
              a1[*v4] = 1;
            }
          }
          if ((v8 & 7) != 0)
            goto LABEL_99;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            v19 = v18 + 1;
            if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
              goto LABEL_63;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v15++;
              if (v21 <= 8)
                continue;
            }
            goto LABEL_65;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_99;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
              goto LABEL_63;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v27 = v22++ > 8;
              if (!v27)
                continue;
            }
            goto LABEL_65;
          }
        case 3u:
          if (v15 == 2)
            goto LABEL_64;
          goto LABEL_99;
        case 4u:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_99;
            while (1)
            {
              v28 = *v2;
              v29 = *(_QWORD *)&a1[v28];
              v30 = v29 + 1;
              if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
                goto LABEL_63;
              v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
              *(_QWORD *)&a1[v28] = v30;
              if (v31 < 0)
              {
                v32 = v15++;
                if (v32 <= 8)
                  continue;
              }
              goto LABEL_65;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_99;
LABEL_78:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v48 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v49 = *v2;
              v50 = *(_QWORD *)&a1[v49];
              v51 = v50 + 1;
              if (v50 == -1 || v51 > *(_QWORD *)&a1[*v3])
                break;
              v52 = *(char *)(*(_QWORD *)&a1[*v5] + v50);
              *(_QWORD *)&a1[v49] = v51;
              if (v52 < 0)
              {
                v13 = v48++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_78;
            }
            a1[*v4] = 1;
          }
          goto LABEL_30;
        case 5u:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_99;
            while (1)
            {
              v33 = *v2;
              v34 = *(_QWORD *)&a1[v33];
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
                break;
              v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
              *(_QWORD *)&a1[v33] = v35;
              if (v36 < 0)
              {
                v37 = v15++;
                if (v37 <= 8)
                  continue;
              }
              goto LABEL_65;
            }
LABEL_63:
            a1[*v4] = 1;
            goto LABEL_65;
          }
          if (!PBReaderPlaceMark())
            goto LABEL_99;
LABEL_88:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v53 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v54 = *v2;
              v55 = *(_QWORD *)&a1[v54];
              v56 = v55 + 1;
              if (v55 == -1 || v56 > *(_QWORD *)&a1[*v3])
                break;
              v57 = *(char *)(*(_QWORD *)&a1[*v5] + v55);
              *(_QWORD *)&a1[v54] = v56;
              if (v57 < 0)
              {
                v13 = v53++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_88;
            }
            a1[*v4] = 1;
          }
          goto LABEL_30;
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_99;
          v38 = 0;
          while (1)
          {
            v39 = *v2;
            v40 = *(_QWORD *)&a1[v39];
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)&a1[*v3])
              goto LABEL_63;
            v42 = *(char *)(*(_QWORD *)&a1[*v5] + v40);
            *(_QWORD *)&a1[v39] = v41;
            if (v42 < 0)
            {
              v27 = v38++ > 8;
              if (!v27)
                continue;
            }
            goto LABEL_65;
          }
        default:
          if ((v8 >> 3) == 22)
          {
            if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitTicketingSegmentIsValid(a1))
            {
LABEL_99:
              PBReaderRecallMark();
              return 0;
            }
LABEL_30:
            PBReaderRecallMark();
          }
          else
          {
LABEL_64:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_99;
          }
LABEL_65:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_97;
          break;
      }
    }
  }
LABEL_97:
  v58 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v58;
}

BOOL GEOTransitTicketingSegmentIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  _BOOL8 v18;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitPathIsValid(a1))
        {
LABEL_31:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          if (v15 != 2)
            goto LABEL_31;
        }
        else if ((_DWORD)v17 == 1 && v15 != 2)
        {
          goto LABEL_31;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_31;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

void sub_1889C96AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitSectionIsDirty(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  v2 = *(_WORD *)(a1 + 132);
  if ((v2 & 0x1F8) != 0)
    return 1;
  if ((v2 & 0x80) == 0)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v4 = *(id *)(a1 + 104);
  v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v5 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v4);
        if (GEOTransitTicketingSegmentIsDirty(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * i)))
        {
          v3 = 1;
          goto LABEL_15;
        }
      }
      v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_15:

  return v3;
}

os_unfair_lock_s *GEOTransitSectionIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTransitSectionIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 30);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1889C9D64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889CA2AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitSectionOptionReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  void *v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  _BOOL8 v42;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        v17 = v10 & 7;
        if (v16 || v17 == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 44) |= 1u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v28 |= (unint64_t)(v32 & 0x7F) << v26;
            if ((v32 & 0x80) == 0)
              goto LABEL_46;
            v26 += 7;
            v15 = v27++ >= 9;
            if (v15)
            {
              LODWORD(v28) = 0;
              goto LABEL_48;
            }
          }
          v3[*v6] = 1;
LABEL_46:
          if (v3[*v6])
            LODWORD(v28) = 0;
LABEL_48:
          *(_DWORD *)(a1 + 40) = v28;
        }
        else if ((v10 >> 3) == 1)
        {
          if (v17 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_61;
            while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5] && !v3[*v6])
            {
              v19 = 0;
              v20 = 0;
              v21 = 0;
              while (1)
              {
                v22 = *v4;
                v23 = *(_QWORD *)&v3[v22];
                v24 = v23 + 1;
                if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
                  break;
                v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
                *(_QWORD *)&v3[v22] = v24;
                v21 |= (unint64_t)(v25 & 0x7F) << v19;
                if (v25 < 0)
                {
                  v19 += 7;
                  v15 = v20++ >= 9;
                  if (!v15)
                    continue;
                }
                goto LABEL_33;
              }
              v3[*v6] = 1;
LABEL_33:
              PBRepeatedUInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v35 = 0;
            v36 = 0;
            v37 = 0;
            while (1)
            {
              v38 = *v4;
              v39 = *(_QWORD *)&v3[v38];
              v40 = v39 + 1;
              if (v39 == -1 || v40 > *(_QWORD *)&v3[*v5])
                break;
              v41 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v39);
              *(_QWORD *)&v3[v38] = v40;
              v37 |= (unint64_t)(v41 & 0x7F) << v35;
              if (v41 < 0)
              {
                v35 += 7;
                v15 = v36++ >= 9;
                if (!v15)
                  continue;
              }
              goto LABEL_58;
            }
            v3[*v6] = 1;
LABEL_58:
            PBRepeatedUInt32Add();
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v33 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v34 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v33;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_61;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v42 = v3[*v6] == 0;
  }
  else
  {
LABEL_61:
    v42 = 0;
  }
  objc_sync_exit(v3);

  return v42;
}

void sub_1889CAF30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitSectionOptionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitSectionOptionReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889CAF94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitSectionOptionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_50;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_50;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2)
        {
          if ((v8 & 7) != 0)
            goto LABEL_52;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            v19 = v18 + 1;
            if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
              break;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v15++;
              if (v21 <= 8)
                continue;
            }
            goto LABEL_49;
          }
LABEL_37:
          a1[*v4] = 1;
          goto LABEL_49;
        }
        if (!PBReaderPlaceMark())
        {
LABEL_52:
          PBReaderRecallMark();
          return 0;
        }
LABEL_39:
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
        {
          v28 = a1[*v4];
          if (a1[*v4])
            break;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              break;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v13 = v28++ >= 9;
              if (!v13)
                continue;
            }
            goto LABEL_39;
          }
          a1[*v4] = 1;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_52;
      }
LABEL_49:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_50;
    }
    if ((v8 & 7) != 0)
      goto LABEL_52;
    v22 = 0;
    while (1)
    {
      v23 = *v2;
      v24 = *(_QWORD *)&a1[v23];
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
        goto LABEL_37;
      v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
      *(_QWORD *)&a1[v23] = v25;
      if (v26 < 0 && v22++ <= 8)
        continue;
      goto LABEL_49;
    }
  }
LABEL_50:
  v33 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v33;
}

void sub_1889CB8B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitSegmentArtworkSetReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  int v17;
  int *v18;
  int *v19;
  int v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  BOOL v30;
  int v31;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  GEOTransitClusterArtworkSet *v47;
  id v48;
  void *v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  int v57;
  int v58;
  char v59;
  void *v60;
  char v62;
  int v63;
  int v64;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 68) >> 2) & 1)
      + (*(_BYTE *)(a1 + 68) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 1) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_DWORD)v11 | v7;
        v64 = v16 | v11;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        if ((((v16 | v11) | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = 1;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_82;
        v62 = v17;
        v63 = (v9 != 0) | v64 | v17;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v7;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v9;
        v7 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_BYTE *)(v3 + *v21))
      goto LABEL_80;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v18;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      v30 = v24++ >= 9;
      if (v30)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    v32 = v25 & 7;
    if (v31 || v32 == 4)
    {
LABEL_80:
      v20 = 1;
      goto LABEL_81;
    }
    v34 = v25 >> 3;
    v35 = v64;
    if (!((v19 == 0) | v64 & 1))
    {
      v36 = v19;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    if ((_DWORD)v34 == 2)
      break;
    if ((_DWORD)v34 == 1)
    {
      if (v35 && (*(_BYTE *)(a1 + 68) & 2) == 0)
      {
        if (v32 == 2)
        {
          v20 = PBReaderPlaceMark();
          if (!v20)
            goto LABEL_81;
          while (*(_QWORD *)(v3 + *v18) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v21))
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            while (1)
            {
              v43 = *v18;
              v44 = *(_QWORD *)(v3 + v43);
              v45 = v44 + 1;
              if (v44 == -1 || v45 > *(_QWORD *)(v3 + *v6))
                break;
              v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v44);
              *(_QWORD *)(v3 + v43) = v45;
              v42 |= (unint64_t)(v46 & 0x7F) << v40;
              if (v46 < 0)
              {
                v40 += 7;
                v30 = v41++ >= 9;
                if (!v30)
                  continue;
              }
              goto LABEL_54;
            }
            *(_BYTE *)(v3 + *v21) = 1;
LABEL_54:
            PBRepeatedUInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          while (1)
          {
            v53 = *v18;
            v54 = *(_QWORD *)(v3 + v53);
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v6))
              break;
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              v30 = v51++ >= 9;
              if (!v30)
                continue;
            }
            goto LABEL_77;
          }
          *(_BYTE *)(v3 + *v21) = 1;
LABEL_77:
          PBRepeatedUInt32Add();
        }
LABEL_78:
        if ((v63 & 1) == 0)
          goto LABEL_80;
        goto LABEL_79;
      }
    }
    else if ((v62 & 1) != 0 && (*(_BYTE *)(a1 + 68) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v48 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v49 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v48;

      }
      v20 = PBUnknownFieldAdd();
      if (!v20)
        goto LABEL_83;
      goto LABEL_78;
    }
LABEL_66:
    v20 = PBReaderSkipValueWithTag();
    if ((v20 & v63 & 1) == 0)
      goto LABEL_81;
LABEL_79:
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6))
      goto LABEL_80;
  }
  if (!v35 || (*(_BYTE *)(a1 + 68) & 4) != 0)
    goto LABEL_66;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_101;
  v47 = objc_alloc_init(GEOTransitClusterArtworkSet);
  if (GEOTransitClusterArtworkSetReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOTransitSegmentArtworkSet _addNoFlagsCluster:](a1, v47);

    goto LABEL_78;
  }

LABEL_101:
  v20 = 0;
LABEL_81:
  LOBYTE(v17) = v62;
LABEL_82:
  if ((v17 & 1) != 0)
LABEL_83:
    *(_BYTE *)(a1 + 68) |= 1u;
  if (v64 & 1 | ((v20 & 1) == 0))
  {
    *(_BYTE *)(a1 + 68) |= 2u;
    *(_BYTE *)(a1 + 68) |= 4u;
    goto LABEL_94;
  }
  if (v19)
  {
    while (2)
    {
      while (1)
      {
        v58 = *v19++;
        v57 = v58;
        if (v58 == 1)
          break;
        if (v57 == 2)
        {
          v59 = 4;
          goto LABEL_93;
        }
        if (!v57)
          goto LABEL_94;
      }
      v59 = 2;
LABEL_93:
      *(_BYTE *)(a1 + 68) |= v59;
      continue;
    }
  }
LABEL_94:
  if (v20)
    v3 = *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]) == 0;
  else
    v3 = 0;
  if ((v64 & 1) != 0)
  {
    v60 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1889CC220(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889CCC24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOTransitSegmentArtworkSetCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 48);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOTransitSegmentArtworkSetReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitSegmentArtworkSetReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitSegmentArtworkSetReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitSegmentArtworkSetReadAllFrom_initialTag;
  Specified = GEOTransitSegmentArtworkSetReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitSegmentArtworkSetCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1889CCEB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitSegmentArtworkSetReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitSegmentArtworkSetReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889CCF10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitSegmentArtworkSetIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_45;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_45;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_47;
LABEL_34:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v22 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v23 = *v2;
              v24 = *(_QWORD *)&a1[v23];
              v25 = v24 + 1;
              if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
                break;
              v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
              *(_QWORD *)&a1[v23] = v25;
              if (v26 < 0)
              {
                v13 = v22++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_34;
            }
            a1[*v4] = 1;
          }
LABEL_30:
          PBReaderRecallMark();
          goto LABEL_44;
        }
        if ((v8 & 7) != 0)
          goto LABEL_47;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0)
          {
            v21 = v15++;
            if (v21 <= 8)
              continue;
          }
          goto LABEL_44;
        }
        a1[*v4] = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_47;
      }
LABEL_44:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_45;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitClusterArtworkSetIsValid(a1))
    {
LABEL_47:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_30;
  }
LABEL_45:
  v27 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v27;
}

void sub_1889CD41C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitSegmentArtworkSetIsDirty(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  if ((*(_BYTE *)(a1 + 68) & 0xE) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 68) & 4) == 0)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v3 = *(id *)(a1 + 48);
  v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v3);
        if (GEOTransitClusterArtworkSetIsDirty(*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * i)))
        {
          v2 = 1;
          goto LABEL_15;
        }
      }
      v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEOTransitSegmentArtworkSetIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTransitSegmentArtworkSetIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 16);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1889CD928(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889CDC28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitServiceGapReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  id v27;
  void *v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  GEOFormattedString *v41;
  void *v42;
  uint64_t v43;
  _BOOL8 v44;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      while (!v5[*v8])
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v17 = v11++ >= 9;
          if (v17)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        switch((v12 >> 3))
        {
          case 1u:
            v20 = 0;
            v21 = 0;
            v22 = 0;
            *(_BYTE *)(a1 + 36) |= 4u;
            while (1)
            {
              v23 = *v6;
              v24 = *(_QWORD *)&v5[v23];
              v25 = v24 + 1;
              if (v24 == -1 || v25 > *(_QWORD *)&v5[*v7])
                break;
              v26 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v24);
              *(_QWORD *)&v5[v23] = v25;
              v22 |= (unint64_t)(v26 & 0x7F) << v20;
              if ((v26 & 0x80) == 0)
                goto LABEL_49;
              v20 += 7;
              v17 = v21++ >= 9;
              if (v17)
              {
                LODWORD(v22) = 0;
                goto LABEL_51;
              }
            }
            v5[*v8] = 1;
LABEL_49:
            if (v5[*v8])
              LODWORD(v22) = 0;
LABEL_51:
            v43 = 32;
            goto LABEL_60;
          case 2u:
            v29 = 0;
            v30 = 0;
            v22 = 0;
            *(_BYTE *)(a1 + 36) |= 2u;
            while (2)
            {
              v31 = *v6;
              v32 = *(_QWORD *)&v5[v31];
              v33 = v32 + 1;
              if (v32 == -1 || v33 > *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v34 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v32);
                *(_QWORD *)&v5[v31] = v33;
                v22 |= (unint64_t)(v34 & 0x7F) << v29;
                if (v34 < 0)
                {
                  v29 += 7;
                  v17 = v30++ >= 9;
                  if (v17)
                  {
                    LODWORD(v22) = 0;
                    goto LABEL_55;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              LODWORD(v22) = 0;
LABEL_55:
            v43 = 28;
            goto LABEL_60;
          case 3u:
            v35 = 0;
            v36 = 0;
            v22 = 0;
            *(_BYTE *)(a1 + 36) |= 1u;
            while (2)
            {
              v37 = *v6;
              v38 = *(_QWORD *)&v5[v37];
              v39 = v38 + 1;
              if (v38 == -1 || v39 > *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v40 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v38);
                *(_QWORD *)&v5[v37] = v39;
                v22 |= (unint64_t)(v40 & 0x7F) << v35;
                if (v40 < 0)
                {
                  v35 += 7;
                  v17 = v36++ >= 9;
                  if (v17)
                  {
                    LODWORD(v22) = 0;
                    goto LABEL_59;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              LODWORD(v22) = 0;
LABEL_59:
            v43 = 24;
LABEL_60:
            *(_DWORD *)(a1 + v43) = v22;
            goto LABEL_61;
          case 4u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_64;
            v41 = objc_alloc_init(GEOFormattedString);
            if (!GEOFormattedStringReadAllFrom((uint64_t)v41, v5, a3))
            {

              goto LABEL_64;
            }
            PBReaderRecallMark();
            v42 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v41;

LABEL_61:
            if (*(_QWORD *)&v5[*v6] >= *(_QWORD *)&v5[*v7])
              goto LABEL_62;
            break;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v27 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v28 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v27;

            }
            if (!PBUnknownFieldAdd())
              goto LABEL_64;
            goto LABEL_61;
        }
      }
    }
LABEL_62:
    v44 = v5[*v8] == 0;
  }
  else
  {
LABEL_64:
    v44 = 0;
  }
  objc_sync_exit(v5);

  return v44;
}

void sub_1889CE978(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitServiceGapReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitServiceGapReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889CE9D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitServiceGapIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_53;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_45;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_50;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_53;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_45;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_50;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_53;
          v28 = 0;
          break;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringIsValid(a1))
            goto LABEL_53;
          PBReaderRecallMark();
          continue;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_53:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v29 = *v2;
        v30 = *(_QWORD *)&a1[v29];
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
          break;
        v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
        *(_QWORD *)&a1[v29] = v31;
        if (v32 < 0)
        {
          v22 = v28++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_50;
      }
LABEL_45:
      a1[*v4] = 1;
LABEL_50:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v33 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v33;
}

void sub_1889CF840(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitStepReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint32x4_t v13;
  int8x16_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  char v21;
  int *v22;
  int *v23;
  int v24;
  char v25;
  int *v26;
  int *v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  BOOL v35;
  int v36;
  int v37;
  unint64_t v39;
  BOOL v40;
  int *v41;
  int v42;
  int v43;
  BOOL v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  GEOTransitVehicleInfo *v64;
  id v65;
  void *v66;
  int v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  char v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  int *v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  int *v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  char v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  char v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  char v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  uint64_t v160;
  void *v161;
  char v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  char v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char v179;
  int v180;
  uint64_t v181;
  void *v182;
  char v184;
  char v185;
  char v186;
  char v187;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 200));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 196);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 192));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 264);
  v13 = (uint32x4_t)vdupq_n_s32(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  v15 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CC40B0), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CC40C0), v14)), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CC40D0), v14)))+ ((v12 >> 21) & 1)+ ((v12 >> 28) & 1)+ ((v12 >> 30) & 1)+ (*(_DWORD *)(a1 + 268) & 1)+ ((v12 >> 15) & 1)+ (v12 >> 31);
  while (2)
  {
    v16 = 1;
    v17 = 1;
    v18 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v17 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v19 = v15 > 0xC;
        v20 = v19 & ~(_BYTE)v11 | v9;
        v21 = v19 | v11;
        v22 = (int *)MEMORY[0x1E0D82BF0];
        if ((((v19 | v11) | v8) & 1) != 0)
          v23 = 0;
        else
          v23 = a3;
        v24 = 1;
        v25 = v20;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_391;
        v184 = v20;
        v185 = v21 | v20;
        v187 = (v23 == 0) | v21;
        v26 = (int *)MEMORY[0x1E0D82BC8];
        v27 = (int *)MEMORY[0x1E0D82BB8];
        v186 = v21;
        break;
      default:
        ++v15;
LABEL_7:
        v16 = v9;
LABEL_8:
        v17 = v10;
        v18 = v11;
LABEL_10:
        ++v7;
        v9 = v16;
        v10 = v17;
        v11 = v18;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v26))
      goto LABEL_385;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    while (1)
    {
      v31 = *v22;
      v32 = *(_QWORD *)(v3 + v31);
      v33 = v32 + 1;
      if (v32 == -1 || v33 > *(_QWORD *)(v3 + *v6))
        break;
      v34 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v32);
      *(_QWORD *)(v3 + v31) = v33;
      v30 |= (unint64_t)(v34 & 0x7F) << v28;
      if ((v34 & 0x80) == 0)
        goto LABEL_25;
      v28 += 7;
      v35 = v29++ >= 9;
      if (v35)
      {
        v30 = 0;
        v36 = *(unsigned __int8 *)(v3 + *v26);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v26) = 1;
LABEL_25:
    v36 = *(unsigned __int8 *)(v3 + *v26);
    if (*(_BYTE *)(v3 + *v26))
      v30 = 0;
LABEL_27:
    v37 = v30 & 7;
    if (v36 || v37 == 4)
    {
LABEL_385:
      v24 = 1;
      goto LABEL_390;
    }
    v39 = v30 >> 3;
    v40 = v21;
    if ((v187 & 1) == 0)
    {
      v41 = v23;
      do
      {
        v43 = *v41++;
        v42 = v43;
        v40 = v43 != 0;
        if (v43)
          v44 = v42 == (_DWORD)v39;
        else
          v44 = 1;
      }
      while (!v44);
    }
    switch((int)v39)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_279;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        *(_QWORD *)(a1 + 264) |= 0x40uLL;
        while (1)
        {
          v48 = *v22;
          v49 = *(_QWORD *)(v3 + v48);
          v50 = v49 + 1;
          if (v49 == -1 || v50 > *(_QWORD *)(v3 + *v6))
            break;
          v51 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v49);
          *(_QWORD *)(v3 + v48) = v50;
          v47 |= (unint64_t)(v51 & 0x7F) << v45;
          if ((v51 & 0x80) == 0)
            goto LABEL_282;
          v45 += 7;
          v35 = v46++ >= 9;
          if (v35)
          {
            LODWORD(v47) = 0;
            goto LABEL_284;
          }
        }
        *(_BYTE *)(v3 + *v26) = 1;
LABEL_282:
        if (*(_BYTE *)(v3 + *v26))
          LODWORD(v47) = 0;
LABEL_284:
        v164 = 228;
        goto LABEL_341;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_279;
        v52 = 0;
        v53 = 0;
        v47 = 0;
        *(_QWORD *)(a1 + 264) |= 0x200uLL;
        while (2)
        {
          v54 = *v22;
          v55 = *(_QWORD *)(v3 + v54);
          v56 = v55 + 1;
          if (v55 == -1 || v56 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v26) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v55);
            *(_QWORD *)(v3 + v54) = v56;
            v47 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              v35 = v53++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_288;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v26))
          LODWORD(v47) = 0;
LABEL_288:
        v164 = 240;
        goto LABEL_341;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_279;
        v58 = 0;
        v59 = 0;
        v47 = 0;
        *(_QWORD *)(a1 + 264) |= 0x10uLL;
        while (2)
        {
          v60 = *v22;
          v61 = *(_QWORD *)(v3 + v60);
          v62 = v61 + 1;
          if (v61 == -1 || v62 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v26) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v61);
            *(_QWORD *)(v3 + v60) = v62;
            v47 |= (unint64_t)(v63 & 0x7F) << v58;
            if (v63 < 0)
            {
              v58 += 7;
              v35 = v59++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_292;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v26))
          LODWORD(v47) = 0;
LABEL_292:
        v164 = 220;
        goto LABEL_341;
      case 4:
        if (!v40 || (*(_BYTE *)(a1 + 267) & 0x80) != 0)
          goto LABEL_277;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_388;
        v64 = objc_alloc_init(GEOTransitVehicleInfo);
        if (!GEOTransitVehicleInfoReadAllFrom((uint64_t)v64, (void *)v3, v10 & 1))
          goto LABEL_387;
        PBReaderRecallMark();
        -[GEOTransitStep _addNoFlagsVehicleInfo:](a1, v64);
        goto LABEL_263;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_279;
        v68 = 0;
        v69 = 0;
        v70 = 0;
        *(_QWORD *)(a1 + 264) |= 0x4000uLL;
        while (2)
        {
          v71 = *v22;
          v72 = *(_QWORD *)(v3 + v71);
          v73 = v72 + 1;
          if (v72 == -1 || v73 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v26) = 1;
          }
          else
          {
            v74 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v72);
            *(_QWORD *)(v3 + v71) = v73;
            v70 |= (unint64_t)(v74 & 0x7F) << v68;
            if (v74 < 0)
            {
              v68 += 7;
              v35 = v69++ >= 9;
              if (v35)
              {
                v70 = 0;
                goto LABEL_296;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v26))
          v70 = 0;
LABEL_296:
        *(_BYTE *)(a1 + 260) = v70 != 0;
        goto LABEL_365;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_279;
        v75 = 0;
        v76 = 0;
        v47 = 0;
        *(_QWORD *)(a1 + 264) |= 0x1000uLL;
        while (2)
        {
          v77 = *v22;
          v78 = *(_QWORD *)(v3 + v77);
          v79 = v78 + 1;
          if (v78 == -1 || v79 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v26) = 1;
          }
          else
          {
            v80 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v78);
            *(_QWORD *)(v3 + v77) = v79;
            v47 |= (unint64_t)(v80 & 0x7F) << v75;
            if (v80 < 0)
            {
              v75 += 7;
              v35 = v76++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_300;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v26))
          LODWORD(v47) = 0;
LABEL_300:
        v164 = 252;
        goto LABEL_341;
      case 9:
        if (!v40 || (*(_BYTE *)(a1 + 266) & 0x80) != 0)
          goto LABEL_277;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_388;
        v64 = objc_alloc_init(GEOTransitEnterExitInfo);
        if (!GEOTransitEnterExitInfoReadAllFrom((uint64_t)v64, (void *)v3))
          goto LABEL_387;
        PBReaderRecallMark();
        -[GEOTransitStep _addNoFlagsEnterExitInfo:](a1, v64);
        goto LABEL_263;
      case 10:
        if (!v40 || (*(_BYTE *)(a1 + 267) & 0x20) != 0)
          goto LABEL_277;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_388;
        v64 = objc_alloc_init(GEOTransitTransferInfo);
        if (!GEOTransitTransferInfoReadAllFrom((uint64_t)v64, (void *)v3))
          goto LABEL_387;
        PBReaderRecallMark();
        -[GEOTransitStep _addNoFlagsTransferInfo:](a1, v64);
        goto LABEL_263;
      case 11:
        if ((v8 & 1) == 0)
          goto LABEL_279;
        v81 = 0;
        v82 = 0;
        v47 = 0;
        *(_QWORD *)(a1 + 264) |= 0x400uLL;
        while (2)
        {
          v83 = *v22;
          v84 = *(_QWORD *)(v3 + v83);
          v85 = v84 + 1;
          if (v84 == -1 || v85 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v26) = 1;
          }
          else
          {
            v86 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v84);
            *(_QWORD *)(v3 + v83) = v85;
            v47 |= (unint64_t)(v86 & 0x7F) << v81;
            if (v86 < 0)
            {
              v81 += 7;
              v35 = v82++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_304;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v26))
          LODWORD(v47) = 0;
LABEL_304:
        v164 = 244;
        goto LABEL_341;
      case 12:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 266) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_388;
          v165 = *(_QWORD *)(a1 + 264) << 44;
          goto LABEL_362;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_388;
        v64 = objc_alloc_init(GEOTransitArrivalInfo);
        if (!GEOTransitArrivalInfoReadAllFrom((uint64_t)v64, (void *)v3))
          goto LABEL_387;
        PBReaderRecallMark();
        v87 = 80;
        goto LABEL_269;
      case 14:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 267) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_388;
          v165 = *(_QWORD *)(a1 + 264) << 38;
          goto LABEL_362;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_388;
        v64 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v64, (void *)v3))
          goto LABEL_387;
        PBReaderRecallMark();
        v87 = 128;
        goto LABEL_269;
      case 15:
        if ((v8 & 1) == 0)
          goto LABEL_279;
        v88 = 0;
        v89 = 0;
        v47 = 0;
        *(_QWORD *)(a1 + 264) |= 0x100uLL;
        while (2)
        {
          v90 = *v22;
          v91 = *(_QWORD *)(v3 + v90);
          v92 = v91 + 1;
          if (v91 == -1 || v92 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v26) = 1;
          }
          else
          {
            v93 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v91);
            *(_QWORD *)(v3 + v90) = v92;
            v47 |= (unint64_t)(v93 & 0x7F) << v88;
            if (v93 < 0)
            {
              v88 += 7;
              v35 = v89++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_308;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v26))
          LODWORD(v47) = 0;
LABEL_308:
        v164 = 236;
        goto LABEL_341;
      case 17:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 267) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_388;
          v165 = *(_QWORD *)(a1 + 264) << 39;
          goto LABEL_362;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_388;
        v64 = objc_alloc_init(GEOInstructionSet);
        if (!GEOInstructionSetReadAllFrom((uint64_t)v64, (void *)v3, v10 & 1))
          goto LABEL_387;
        PBReaderRecallMark();
        v87 = 120;
        goto LABEL_269;
      case 19:
        if ((v8 & 1) == 0)
          goto LABEL_279;
        v94 = 0;
        v95 = 0;
        v47 = 0;
        *(_QWORD *)(a1 + 264) |= 0x2000uLL;
        while (2)
        {
          v96 = *v22;
          v97 = *(_QWORD *)(v3 + v96);
          v98 = v97 + 1;
          if (v97 == -1 || v98 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v26) = 1;
          }
          else
          {
            v99 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v97);
            *(_QWORD *)(v3 + v96) = v98;
            v47 |= (unint64_t)(v99 & 0x7F) << v94;
            if (v99 < 0)
            {
              v94 += 7;
              v35 = v95++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_312;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v26))
          LODWORD(v47) = 0;
LABEL_312:
        v164 = 256;
        goto LABEL_341;
      case 20:
        if ((v8 & 1) == 0)
          goto LABEL_279;
        v100 = 0;
        v101 = 0;
        v47 = 0;
        *(_QWORD *)(a1 + 264) |= 8uLL;
        while (2)
        {
          v102 = *v22;
          v103 = *(_QWORD *)(v3 + v102);
          v104 = v103 + 1;
          if (v103 == -1 || v104 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v26) = 1;
          }
          else
          {
            v105 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v103);
            *(_QWORD *)(v3 + v102) = v104;
            v47 |= (unint64_t)(v105 & 0x7F) << v100;
            if (v105 < 0)
            {
              v100 += 7;
              v35 = v101++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_316;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v26))
          LODWORD(v47) = 0;
LABEL_316:
        v164 = 216;
        goto LABEL_341;
      case 22:
        if (!v40 || (*(_BYTE *)(a1 + 266) & 1) != 0)
          goto LABEL_279;
        if (v37 != 2)
        {
          v166 = 0;
          v167 = 0;
          v168 = 0;
          while (1)
          {
            v169 = *v22;
            v170 = *(_QWORD *)(v3 + v169);
            v171 = v170 + 1;
            if (v170 == -1 || v171 > *(_QWORD *)(v3 + *v6))
              goto LABEL_383;
            v172 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v170);
            *(_QWORD *)(v3 + v169) = v171;
            v168 |= (unint64_t)(v172 & 0x7F) << v166;
            if (v172 < 0)
            {
              v166 += 7;
              v35 = v167++ >= 9;
              if (!v35)
                continue;
            }
            goto LABEL_384;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_388;
        while (1)
        {
          v106 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v22) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            goto LABEL_368;
          v107 = 0;
          v108 = 0;
          v109 = 0;
          v110 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v111 = *v22;
            v112 = *(_QWORD *)(v3 + v111);
            v113 = v112 + 1;
            if (v112 == -1 || v113 > *(_QWORD *)(v3 + *v6))
              break;
            v114 = *(_BYTE *)(*(_QWORD *)(v3 + *v110) + v112);
            *(_QWORD *)(v3 + v111) = v113;
            v109 |= (unint64_t)(v114 & 0x7F) << v107;
            if (v114 < 0)
            {
              v107 += 7;
              v35 = v108++ >= 9;
              if (!v35)
                continue;
            }
            goto LABEL_161;
          }
          *(_BYTE *)(v3 + *v106) = 1;
LABEL_161:
          PBRepeatedUInt32Add();
        }
      case 23:
        if (!v40 || (*(_BYTE *)(a1 + 266) & 2) != 0)
          goto LABEL_279;
        if (v37 != 2)
        {
          v173 = 0;
          v174 = 0;
          v175 = 0;
          while (1)
          {
            v176 = *v22;
            v177 = *(_QWORD *)(v3 + v176);
            v178 = v177 + 1;
            if (v177 == -1 || v178 > *(_QWORD *)(v3 + *v6))
              break;
            v179 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v177);
            *(_QWORD *)(v3 + v176) = v178;
            v175 |= (unint64_t)(v179 & 0x7F) << v173;
            if (v179 < 0)
            {
              v173 += 7;
              v35 = v174++ >= 9;
              if (!v35)
                continue;
            }
            goto LABEL_384;
          }
LABEL_383:
          *(_BYTE *)(v3 + *v26) = 1;
LABEL_384:
          PBRepeatedUInt32Add();
          goto LABEL_363;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_388;
        while (1)
        {
          v115 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v22) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v116 = 0;
          v117 = 0;
          v118 = 0;
          v119 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v120 = *v22;
            v121 = *(_QWORD *)(v3 + v120);
            v122 = v121 + 1;
            if (v121 == -1 || v122 > *(_QWORD *)(v3 + *v6))
              break;
            v123 = *(_BYTE *)(*(_QWORD *)(v3 + *v119) + v121);
            *(_QWORD *)(v3 + v120) = v122;
            v118 |= (unint64_t)(v123 & 0x7F) << v116;
            if (v123 < 0)
            {
              v116 += 7;
              v35 = v117++ >= 9;
              if (!v35)
                continue;
            }
            goto LABEL_176;
          }
          *(_BYTE *)(v3 + *v115) = 1;
LABEL_176:
          PBRepeatedUInt32Add();
        }
LABEL_368:
        PBReaderRecallMark();
        v26 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_364;
      case 24:
        if ((v8 & 1) == 0)
          goto LABEL_279;
        v124 = 0;
        v125 = 0;
        v47 = 0;
        *(_QWORD *)(a1 + 264) |= 0x80uLL;
        while (2)
        {
          v126 = *v22;
          v127 = *(_QWORD *)(v3 + v126);
          v128 = v127 + 1;
          if (v127 == -1 || v128 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v26) = 1;
          }
          else
          {
            v129 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v127);
            *(_QWORD *)(v3 + v126) = v128;
            v47 |= (unint64_t)(v129 & 0x7F) << v124;
            if (v129 < 0)
            {
              v124 += 7;
              v35 = v125++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_320;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v26))
          LODWORD(v47) = 0;
LABEL_320:
        v164 = 232;
        goto LABEL_341;
      case 25:
        if ((v8 & 1) == 0)
          goto LABEL_279;
        v130 = 0;
        v131 = 0;
        v47 = 0;
        *(_QWORD *)(a1 + 264) |= 1uLL;
        while (2)
        {
          v132 = *v22;
          v133 = *(_QWORD *)(v3 + v132);
          v134 = v133 + 1;
          if (v133 == -1 || v134 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v26) = 1;
          }
          else
          {
            v135 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v133);
            *(_QWORD *)(v3 + v132) = v134;
            v47 |= (unint64_t)(v135 & 0x7F) << v130;
            if (v135 < 0)
            {
              v130 += 7;
              v35 = v131++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_324;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v26))
          LODWORD(v47) = 0;
LABEL_324:
        v164 = 204;
        goto LABEL_341;
      case 26:
        if ((v8 & 1) == 0)
          goto LABEL_279;
        v136 = 0;
        v137 = 0;
        v47 = 0;
        *(_QWORD *)(a1 + 264) |= 2uLL;
        while (2)
        {
          v138 = *v22;
          v139 = *(_QWORD *)(v3 + v138);
          v140 = v139 + 1;
          if (v139 == -1 || v140 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v26) = 1;
          }
          else
          {
            v141 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v139);
            *(_QWORD *)(v3 + v138) = v140;
            v47 |= (unint64_t)(v141 & 0x7F) << v136;
            if (v141 < 0)
            {
              v136 += 7;
              v35 = v137++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_328;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v26))
          LODWORD(v47) = 0;
LABEL_328:
        v164 = 208;
        goto LABEL_341;
      case 27:
        if ((v8 & 1) == 0)
          goto LABEL_279;
        v142 = 0;
        v143 = 0;
        v47 = 0;
        *(_QWORD *)(a1 + 264) |= 4uLL;
        while (2)
        {
          v144 = *v22;
          v145 = *(_QWORD *)(v3 + v144);
          v146 = v145 + 1;
          if (v145 == -1 || v146 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v26) = 1;
          }
          else
          {
            v147 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v145);
            *(_QWORD *)(v3 + v144) = v146;
            v47 |= (unint64_t)(v147 & 0x7F) << v142;
            if (v147 < 0)
            {
              v142 += 7;
              v35 = v143++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_332;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v26))
          LODWORD(v47) = 0;
LABEL_332:
        v164 = 212;
        goto LABEL_341;
      case 28:
        if ((v8 & 1) == 0)
          goto LABEL_279;
        v148 = 0;
        v149 = 0;
        v47 = 0;
        *(_QWORD *)(a1 + 264) |= 0x800uLL;
        while (2)
        {
          v150 = *v22;
          v151 = *(_QWORD *)(v3 + v150);
          v152 = v151 + 1;
          if (v151 == -1 || v152 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v26) = 1;
          }
          else
          {
            v153 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v151);
            *(_QWORD *)(v3 + v150) = v152;
            v47 |= (unint64_t)(v153 & 0x7F) << v148;
            if (v153 < 0)
            {
              v148 += 7;
              v35 = v149++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_336;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v26))
          LODWORD(v47) = 0;
LABEL_336:
        v164 = 248;
        goto LABEL_341;
      case 29:
        if ((v8 & 1) == 0)
          goto LABEL_279;
        v154 = 0;
        v155 = 0;
        v47 = 0;
        *(_QWORD *)(a1 + 264) |= 0x20uLL;
        while (2)
        {
          v156 = *v22;
          v157 = *(_QWORD *)(v3 + v156);
          v158 = v157 + 1;
          if (v157 == -1 || v158 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v26) = 1;
          }
          else
          {
            v159 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v157);
            *(_QWORD *)(v3 + v156) = v158;
            v47 |= (unint64_t)(v159 & 0x7F) << v154;
            if (v159 < 0)
            {
              v154 += 7;
              v35 = v155++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_340;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v26))
          LODWORD(v47) = 0;
LABEL_340:
        v164 = 224;
LABEL_341:
        *(_DWORD *)(a1 + v164) = v47;
        goto LABEL_365;
      case 30:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 266) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_388;
          v165 = *(_QWORD *)(a1 + 264) << 42;
          goto LABEL_362;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_388;
        v64 = objc_alloc_init(GEOTransitBaseFare);
        if (!GEOTransitBaseFareReadAllFrom((uint64_t)v64, (void *)v3, v10 & 1))
          goto LABEL_387;
        PBReaderRecallMark();
        v87 = 96;
        goto LABEL_269;
      case 31:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 267) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_388;
          v165 = *(_QWORD *)(a1 + 264) << 35;
          goto LABEL_362;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_388;
        v64 = objc_alloc_init(GEOTransitSurcharge);
        if (!GEOTransitSurchargeReadAllFrom((uint64_t)v64, (void *)v3))
          goto LABEL_387;
        PBReaderRecallMark();
        v87 = 152;
        goto LABEL_269;
      case 32:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 267) & 0x40) == 0)
        {
          PBReaderReadData();
          v160 = objc_claimAutoreleasedReturnValue();
          v161 = *(void **)(a1 + 168);
          *(_QWORD *)(a1 + 168) = v160;
          goto LABEL_270;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_388;
        v165 = *(_QWORD *)(a1 + 264) << 33;
        goto LABEL_362;
      case 33:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 268) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_388;
          v165 = *(_QWORD *)(a1 + 264) << 31;
          goto LABEL_362;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_388;
        v64 = objc_alloc_init(GEOTransitVehiclePositionInfo);
        if (!GEOTransitVehiclePositionInfoReadAllFrom(v64, (void *)v3))
          goto LABEL_387;
        PBReaderRecallMark();
        v87 = 184;
        goto LABEL_269;
      case 34:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 267) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_388;
          v165 = *(_QWORD *)(a1 + 264) << 36;
          goto LABEL_362;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_388;
        v64 = objc_alloc_init(GEOTransitScheduleInfo);
        if (!GEOTransitScheduleInfoReadAllFrom((uint64_t)v64, (void *)v3))
          goto LABEL_387;
        PBReaderRecallMark();
        v87 = 144;
        goto LABEL_269;
      case 35:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 266) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_388;
          v165 = *(_QWORD *)(a1 + 264) << 41;
          goto LABEL_362;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_388;
        v64 = objc_alloc_init(GEOTransitBoardingInfo);
        if (!GEOTransitBoardingInfoReadAllFrom((uint64_t)v64, (void *)v3, v10 & 1))
          goto LABEL_387;
        PBReaderRecallMark();
        v87 = 104;
        goto LABEL_269;
      case 36:
        if (!v40 || (*(_BYTE *)(a1 + 266) & 0x10) != 0)
          goto LABEL_277;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_388;
        v64 = objc_alloc_init(GEOTransitStepBadge);
        if (!GEOTransitStepBadgeReadAllFrom((uint64_t)v64, (void *)v3, v10 & 1))
          goto LABEL_387;
        PBReaderRecallMark();
        -[GEOTransitStep _addNoFlagsBadge:](a1, v64);
        goto LABEL_263;
      case 37:
        if (!v40 || (*(_BYTE *)(a1 + 267) & 4) != 0)
        {
LABEL_277:
          v162 = PBReaderSkipValueWithTag();
          v26 = (int *)MEMORY[0x1E0D82BC8];
          v27 = (int *)MEMORY[0x1E0D82BB8];
          if ((v162 & 1) == 0)
            goto LABEL_388;
          goto LABEL_365;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_388;
        v64 = objc_alloc_init(GEOTransitRegionAlert);
        if (!GEOTransitRegionAlertReadAllFrom((uint64_t)v64, (void *)v3, v10 & 1))
          goto LABEL_387;
        PBReaderRecallMark();
        -[GEOTransitStep _addNoFlagsRegionAlert:](a1, v64);
LABEL_263:

        goto LABEL_363;
      case 38:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 266) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_388;
          v165 = *(_QWORD *)(a1 + 264) << 45;
LABEL_362:
          v7 += v165 >> 63;
LABEL_363:
          v26 = (int *)MEMORY[0x1E0D82BC8];
LABEL_364:
          v27 = (int *)MEMORY[0x1E0D82BB8];
LABEL_365:
          if (!(v185 & 1 | (v7 != 0)))
          {
            v24 = 1;
            goto LABEL_389;
          }
          v21 = v186;
          if (*(_QWORD *)(v3 + *v22) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_385;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_388;
        v64 = objc_alloc_init(GEOAdvisoriesInfo);
        if (GEOAdvisoriesInfoReadAllFrom((uint64_t)v64, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v87 = 72;
LABEL_269:
          v161 = *(void **)(a1 + v87);
          *(_QWORD *)(a1 + v87) = v64;
LABEL_270:

          --v7;
          goto LABEL_363;
        }
LABEL_387:

LABEL_388:
        v24 = 0;
LABEL_389:
        v21 = v186;
LABEL_390:
        v25 = v184;
LABEL_391:
        if ((v25 & 1) != 0)
LABEL_392:
          *(_QWORD *)(a1 + 264) |= 0x8000uLL;
        if (v21 & 1 | ((v24 & 1) == 0))
        {
          *(_QWORD *)(a1 + 264) |= 0x1FFFF0000uLL;
        }
        else if (v23)
        {
          while (1)
          {
            v180 = *v23++;
            v181 = 0x80000000;
            switch(v180)
            {
              case 0:
                goto LABEL_414;
              case 4:
                goto LABEL_413;
              case 9:
                v181 = 0x800000;
                goto LABEL_413;
              case 10:
                v181 = 0x20000000;
                goto LABEL_413;
              case 12:
                v181 = 0x80000;
                goto LABEL_413;
              case 14:
                v181 = 0x2000000;
                goto LABEL_413;
              case 17:
                v181 = 0x1000000;
                goto LABEL_413;
              case 22:
                v181 = 0x10000;
                goto LABEL_413;
              case 23:
                v181 = 0x20000;
                goto LABEL_413;
              case 30:
                v181 = 0x200000;
                goto LABEL_413;
              case 31:
                v181 = 0x10000000;
                goto LABEL_413;
              case 32:
                v181 = 0x40000000;
                goto LABEL_413;
              case 33:
                v181 = 0x100000000;
                goto LABEL_413;
              case 34:
                v181 = 0x8000000;
                goto LABEL_413;
              case 35:
                v181 = 0x400000;
                goto LABEL_413;
              case 36:
                v181 = 0x100000;
                goto LABEL_413;
              case 37:
                v181 = 0x4000000;
                goto LABEL_413;
              case 38:
                v181 = 0x40000;
LABEL_413:
                *(_QWORD *)(a1 + 264) |= v181;
                break;
              default:
                continue;
            }
          }
        }
LABEL_414:
        if (v24)
        {
          v3 = *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]) == 0;
          if ((v21 & 1) == 0)
            return v3;
LABEL_418:
          v182 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v21 & 1) != 0)
            goto LABEL_418;
        }
        return v3;
      default:
        if ((v184 & 1) == 0 || (*(_BYTE *)(a1 + 265) & 0x80) != 0)
        {
LABEL_279:
          v163 = PBReaderSkipValueWithTag();
          v27 = (int *)MEMORY[0x1E0D82BB8];
          v26 = (int *)MEMORY[0x1E0D82BC8];
          if ((v163 & 1) == 0)
            goto LABEL_388;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v65 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v66 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v65;

          }
          v67 = PBUnknownFieldAdd();
          v26 = (int *)MEMORY[0x1E0D82BC8];
          v27 = (int *)MEMORY[0x1E0D82BB8];
          if (!v67)
          {
            v24 = 0;
            v21 = v186;
            goto LABEL_392;
          }
        }
        goto LABEL_365;
    }
  }
}

void sub_1889D16DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D1B1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D1ED8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D2024(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D236C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D25BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D2900(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D2F30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D307C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D31C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D3314(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D3460(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D35A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D36F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D383C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D3B74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889D64E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOTransitStepCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  _BYTE v48[128];
  _BYTE v49[128];
  _BYTE v50[128];
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v2 = a1[22];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v44;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v44 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
    }
    while (v4);
  }

  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v7 = a1[14];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v39, v50, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v40;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v40 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v39 + 1) + 8 * v11++), "readAll:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v39, v50, 16);
    }
    while (v9);
  }

  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v12 = a1[20];
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v35, v49, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v36;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v36 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * v16++), "readAll:", 1);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v35, v49, 16);
    }
    while (v14);
  }

  objc_msgSend(a1[10], "readAll:", 1);
  objc_msgSend(a1[16], "readAll:", 1);
  objc_msgSend(a1[15], "readAll:", 1);
  objc_msgSend(a1[9], "readAll:", 1);
  objc_msgSend(a1[12], "readAll:", 1);
  objc_msgSend(a1[19], "readAll:", 1);
  objc_msgSend(a1[23], "readAll:", 1);
  objc_msgSend(a1[18], "readAll:", 1);
  objc_msgSend(a1[13], "readAll:", 1);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v17 = a1[11];
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v31, v48, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v32;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v32 != v20)
          objc_enumerationMutation(v17);
        objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * v21++), "readAll:", 1);
      }
      while (v19 != v21);
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v31, v48, 16);
    }
    while (v19);
  }

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v22 = a1[17];
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v27, v47, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v28;
    do
    {
      v26 = 0;
      do
      {
        if (*(_QWORD *)v28 != v25)
          objc_enumerationMutation(v22);
        objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * v26++), "readAll:", 1, (_QWORD)v27);
      }
      while (v24 != v26);
      v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v27, v47, 16);
    }
    while (v24);
  }

}

unint64_t GEOTransitStepReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 196))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitStepReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 200));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 192) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 196) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitStepReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitStepReadAllFrom_initialTag;
  Specified = GEOTransitStepReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitStepCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 200));
  return Specified;
}

void sub_1889D6A64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitStepReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitStepReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889D6AC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitVehicleInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  _BOOL8 v58;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitVehicleTimeIsValid(a1))
            goto LABEL_95;
          goto LABEL_22;
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_95;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_78;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_81;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_95;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_78;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_81;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_95;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_78;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_81;
          }
        case 6u:
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_95:
              PBReaderRecallMark();
              return 0;
            }
LABEL_84:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v53 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v54 = *v2;
                v55 = *(_QWORD *)&a1[v54];
                v56 = v55 + 1;
                if (v55 == -1 || v56 > *(_QWORD *)&a1[*v3])
                  break;
                v57 = *(char *)(*(_QWORD *)&a1[*v5] + v55);
                *(_QWORD *)&a1[v54] = v56;
                if (v57 < 0)
                {
                  v13 = v53++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_84;
              }
              a1[*v4] = 1;
            }
LABEL_22:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_95;
            while (1)
            {
              v33 = *v2;
              v34 = *(_QWORD *)&a1[v33];
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
                break;
              v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
              *(_QWORD *)&a1[v33] = v35;
              if (v36 < 0)
              {
                v37 = v15++;
                if (v37 <= 8)
                  continue;
              }
              goto LABEL_81;
            }
LABEL_78:
            a1[*v4] = 1;
          }
LABEL_81:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_93;
          break;
        case 7u:
          if ((v8 & 7) != 0)
            goto LABEL_95;
          v38 = 0;
          while (1)
          {
            v39 = *v2;
            v40 = *(_QWORD *)&a1[v39];
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)&a1[*v3])
              goto LABEL_78;
            v42 = *(char *)(*(_QWORD *)&a1[*v5] + v40);
            *(_QWORD *)&a1[v39] = v41;
            if (v42 < 0)
            {
              v22 = v38++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_81;
          }
        case 8u:
          if ((v8 & 7) != 0)
            goto LABEL_95;
          v43 = 0;
          while (1)
          {
            v44 = *v2;
            v45 = *(_QWORD *)&a1[v44];
            v46 = v45 + 1;
            if (v45 == -1 || v46 > *(_QWORD *)&a1[*v3])
              goto LABEL_78;
            v47 = *(char *)(*(_QWORD *)&a1[*v5] + v45);
            *(_QWORD *)&a1[v44] = v46;
            if (v47 < 0)
            {
              v22 = v43++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_81;
          }
        case 0xCu:
          if ((v8 & 7) != 0)
            goto LABEL_95;
          v48 = 0;
          while (1)
          {
            v49 = *v2;
            v50 = *(_QWORD *)&a1[v49];
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)&a1[*v3])
              goto LABEL_78;
            v52 = *(char *)(*(_QWORD *)&a1[*v5] + v50);
            *(_QWORD *)&a1[v49] = v51;
            if (v52 < 0)
            {
              v22 = v48++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_81;
          }
        case 0xEu:
          if (v15 == 2)
            goto LABEL_80;
          goto LABEL_95;
        default:
LABEL_80:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            goto LABEL_81;
          goto LABEL_95;
      }
    }
  }
LABEL_93:
  v58 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v58;
}

BOOL GEOTransitTransferInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_39;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_39;
      if ((v8 >> 3) == 4)
        break;
      if ((v8 >> 3) == 6)
      {
        if ((v8 & 7) != 0)
          goto LABEL_41;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0)
          {
            v21 = v16++ > 8;
            if (!v21)
              continue;
          }
          goto LABEL_38;
        }
LABEL_36:
        a1[*v4] = 1;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        v27 = 0;
        goto LABEL_40;
      }
LABEL_38:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_39;
    }
    if ((v8 & 7) != 0)
      goto LABEL_41;
    v22 = 0;
    while (1)
    {
      v23 = *v2;
      v24 = *(_QWORD *)&a1[v23];
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
        goto LABEL_36;
      v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
      *(_QWORD *)&a1[v23] = v25;
      if (v26 < 0)
      {
        v21 = v22++ > 8;
        if (!v21)
          continue;
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  v27 = a1[*v4] == 0;
LABEL_40:
  PBReaderRecallMark();
  return v27;
}

BOOL GEOTransitSurchargeIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  _BOOL8 v29;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_44;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_44;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_46;
        v24 = 0;
        while (1)
        {
          v25 = *v2;
          v26 = *(_QWORD *)&a1[v25];
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
            goto LABEL_41;
          v28 = *(char *)(*(_QWORD *)&a1[*v5] + v26);
          *(_QWORD *)&a1[v25] = v27;
          if (v28 < 0)
          {
            v23 = v24++ > 8;
            if (!v23)
              continue;
          }
          goto LABEL_43;
        }
      }
      if ((_DWORD)v17 == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitSurchargeUnitIsValid(a1))
        {
LABEL_46:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_46;
      }
LABEL_43:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_44;
    }
    if ((v8 & 7) != 0)
      goto LABEL_46;
    v18 = 0;
    while (1)
    {
      v19 = *v2;
      v20 = *(_QWORD *)&a1[v19];
      v21 = v20 + 1;
      if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
        break;
      v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
      *(_QWORD *)&a1[v19] = v21;
      if (v22 < 0)
      {
        v23 = v18++ > 8;
        if (!v23)
          continue;
      }
      goto LABEL_43;
    }
LABEL_41:
    a1[*v4] = 1;
    goto LABEL_43;
  }
LABEL_44:
  v29 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v29;
}

BOOL GEOTransitVehiclePositionInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitDepartureEntryIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOTransitStepBadgeIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_30;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_30;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPBTransitArtworkIsValid(a1))
          goto LABEL_31;
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_31;
LABEL_29:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_30;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringIsValid(a1))
    {
LABEL_31:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_27;
  }
LABEL_30:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_1889D8014(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitStepIsDirty(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 200));
  v2 = *(_QWORD *)(a1 + 264);
  if ((v2 & 0x2A2880000) != 0)
    return 1;
  if ((v2 & 0x1000000) == 0)
  {
LABEL_5:
    if ((v2 & 0x30000) != 0)
      return 1;
    if ((v2 & 0x40000) != 0)
    {
      if ((GEOAdvisoriesInfoIsDirty(*(os_unfair_lock_s **)(a1 + 72)) & 1) != 0)
        return 1;
      v2 = *(_QWORD *)(a1 + 264);
    }
    if ((v2 & 0x200000) != 0)
    {
      if (GEOTransitBaseFareIsDirty(*(_QWORD *)(a1 + 96)))
        return 1;
      v2 = *(_QWORD *)(a1 + 264);
    }
    if ((v2 & 0x158000000) != 0)
      return 1;
    if ((v2 & 0x400000) != 0)
    {
      if ((GEOTransitBoardingInfoIsDirty(*(os_unfair_lock_s **)(a1 + 104)) & 1) != 0)
        return 1;
      v2 = *(_QWORD *)(a1 + 264);
    }
    if ((v2 & 0x4100000) != 0)
      return 1;
    if ((v2 & 0x80000000) != 0)
    {
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v5 = *(id *)(a1 + 176);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v25;
LABEL_22:
        v9 = 0;
        while (1)
        {
          if (*(_QWORD *)v25 != v8)
            objc_enumerationMutation(v5);
          if (GEOTransitVehicleInfoIsDirty(*(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * v9)))
            goto LABEL_50;
          if (v7 == ++v9)
          {
            v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
            if (v7)
              goto LABEL_22;
            break;
          }
        }
      }

      v2 = *(_QWORD *)(a1 + 264);
    }
    if ((v2 & 0x100000) != 0)
    {
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v5 = *(id *)(a1 + 88);
      v10 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v29, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v21;
LABEL_32:
        v13 = 0;
        while (1)
        {
          if (*(_QWORD *)v21 != v12)
            objc_enumerationMutation(v5);
          if ((GEOTransitStepBadgeIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v20 + 1) + 8 * v13)) & 1) != 0)
            goto LABEL_50;
          if (v11 == ++v13)
          {
            v11 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v29, 16);
            if (v11)
              goto LABEL_32;
            break;
          }
        }
      }

      v2 = *(_QWORD *)(a1 + 264);
    }
    if ((v2 & 0x4000000) == 0)
      return 0;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v5 = *(id *)(a1 + 136);
    v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v28, 16);
    if (!v3)
    {
LABEL_51:

      return v3;
    }
    v14 = *(_QWORD *)v17;
LABEL_43:
    v15 = 0;
    while (1)
    {
      if (*(_QWORD *)v17 != v14)
        objc_enumerationMutation(v5);
      if ((GEOTransitRegionAlertIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v16 + 1) + 8 * v15)) & 1) != 0)
        break;
      if (v3 == ++v15)
      {
        v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v28, 16);
        if (v3)
          goto LABEL_43;
        goto LABEL_51;
      }
    }
LABEL_50:
    v3 = 1;
    goto LABEL_51;
  }
  if ((GEOInstructionSetIsDirty(*(os_unfair_lock_s **)(a1 + 120)) & 1) == 0)
  {
    v2 = *(_QWORD *)(a1 + 264);
    goto LABEL_5;
  }
  return 1;
}

os_unfair_lock_s *GEOTransitStepIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTransitStepIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 50);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1889D93F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889DA590(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889DAC7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitStepBadgeReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  GEOPBTransitArtwork *v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  char v47;
  char v48;
  int v49;
  int v50;
  void *v51;
  int v53;
  unint64_t v54;
  char v55;
  char v56;
  char v57;
  BOOL v58;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v7 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v55 = v17;
        v19 = v18 | v17;
        if (((v18 | v7) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v58 = v18;
        v56 = v19;
        v57 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v8;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_66;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_66:
      v53 = 1;
      goto LABEL_67;
    }
    v34 = v26 >> 3;
    v35 = v58;
    if ((v57 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    if ((_DWORD)v34 == 2)
      break;
    if ((_DWORD)v34 == 1)
    {
      if (!v35)
        goto LABEL_57;
      if ((*(_BYTE *)(a1 + 52) & 2) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_86;
        v40 = objc_alloc_init(GEOPBTransitArtwork);
        if (!GEOPBTransitArtworkReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
          goto LABEL_85;
        PBReaderRecallMark();
        v41 = 24;
LABEL_50:
        v42 = *(void **)(a1 + v41);
        *(_QWORD *)(a1 + v41) = v40;

        --v8;
LABEL_64:
        v22 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_65;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_86;
      v47 = *(_BYTE *)(a1 + 52) << 6;
LABEL_63:
      v8 += v47 >> 7;
      goto LABEL_64;
    }
    if ((v55 & 1) == 0 || (*(_BYTE *)(a1 + 52) & 1) != 0)
    {
LABEL_57:
      v46 = PBReaderSkipValueWithTag();
      v22 = (int *)MEMORY[0x1E0D82BC8];
      if ((v46 & 1) == 0)
      {
        v53 = 0;
        goto LABEL_67;
      }
      goto LABEL_65;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v44 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v43;

    }
    v45 = PBUnknownFieldAdd();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if (!v45)
    {
      v53 = 0;
      v54 = 0x1ECDA9000;
      goto LABEL_68;
    }
LABEL_65:
    if (!(v56 & 1 | (v8 != 0)))
      goto LABEL_66;
  }
  if (!v35)
    goto LABEL_57;
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_86;
    v47 = 32 * *(_BYTE *)(a1 + 52);
    goto LABEL_63;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_86;
  v40 = objc_alloc_init(GEOFormattedString);
  if (GEOFormattedStringReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    v41 = 32;
    goto LABEL_50;
  }
LABEL_85:

LABEL_86:
  v53 = 0;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_67:
  v54 = 0x1ECDA9000uLL;
  if ((v55 & 1) == 0)
    goto LABEL_69;
LABEL_68:
  *(_BYTE *)(a1 + *(int *)(v54 + 3872)) |= 1u;
LABEL_69:
  if (v58 || (v53 & 1) == 0)
  {
    *(_BYTE *)(a1 + *(int *)(v54 + 3872)) |= 2u;
    *(_BYTE *)(a1 + *(int *)(v54 + 3872)) |= 4u;
    goto LABEL_79;
  }
  if (v20)
  {
    while (1)
    {
      v50 = *v20++;
      v49 = v50;
      if (v50 == 1)
        break;
      if (v49 == 2)
      {
        v48 = 4;
LABEL_75:
        *(_BYTE *)(a1 + *(int *)(v54 + 3872)) |= v48;
      }
      else if (!v49)
      {
        goto LABEL_79;
      }
    }
    v48 = 2;
    goto LABEL_75;
  }
LABEL_79:
  if (v53)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v58)
  {
    v51 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1889DB310(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889DB8CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitStepBadgeReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitStepBadgeReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitStepBadgeReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitStepBadgeReadAllFrom_initialTag;
  Specified = GEOTransitStepBadgeReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1889DBA84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitStepBadgeReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitStepBadgeReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889DBAE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889DBC68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitStepBadgeIsDirty(uint64_t a1)
{
  char v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = *(_BYTE *)(a1 + 52);
  if ((v2 & 8) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
  {
    if ((GEOPBTransitArtworkIsDirty(*(os_unfair_lock_s **)(a1 + 24)) & 1) != 0)
      return 1;
    v2 = *(_BYTE *)(a1 + 52);
  }
  if ((v2 & 4) != 0)
    return (uint64_t)GEOFormattedStringIsDirty(*(os_unfair_lock_s **)(a1 + 32));
  else
    return 0;
}

os_unfair_lock_s *GEOTransitStepBadgeIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTransitStepBadgeIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1889DBF78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889DC1C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889DC57C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitSuggestedRouteReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint32x4_t v13;
  int8x16_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  char v21;
  int *v22;
  int *v23;
  int *v24;
  char v25;
  int *v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  BOOL v34;
  int v35;
  int v36;
  unint64_t v38;
  BOOL v39;
  int *v40;
  int v41;
  int v42;
  BOOL v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  id v57;
  void *v58;
  int v59;
  GEOTransitStep *v60;
  uint64_t v61;
  void *v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  int *v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  char v99;
  uint64_t v100;
  int v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  int v109;
  int v110;
  void *v111;
  char v113;
  char v114;
  int v115;
  char v116;
  char v117;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 124);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 120));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 156);
  v13 = (uint32x4_t)vdupq_n_s32(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  v15 = vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CC40E0), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CC40F0), v14)))+ ((v12 >> 14) & 1)+ ((v12 >> 10) & 1)+ ((v12 >> 6) & 1);
  while (2)
  {
    v16 = 1;
    v17 = 1;
    v18 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v17 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v19 = v15 > 7;
        v20 = v19 & ~(_BYTE)v11 | v9;
        v21 = v19 | v11;
        if ((((v19 | v11) | v8) & 1) != 0)
          v22 = 0;
        else
          v22 = a3;
        v23 = (int *)MEMORY[0x1E0D82BF0];
        v115 = 1;
        v24 = (int *)MEMORY[0x1E0D82BC8];
        v25 = v19 & ~(_BYTE)v11 | v9;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_215;
        v113 = v20;
        v116 = v21 | v20;
        v117 = (v22 == 0) | v21;
        v26 = (int *)MEMORY[0x1E0D82BB8];
        v114 = v21;
        break;
      default:
        ++v15;
LABEL_7:
        v16 = v9;
LABEL_8:
        v17 = v10;
        v18 = v11;
LABEL_10:
        ++v7;
        v9 = v16;
        v10 = v17;
        v11 = v18;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v24))
      goto LABEL_213;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    while (1)
    {
      v30 = *v23;
      v31 = *(_QWORD *)(v3 + v30);
      v32 = v31 + 1;
      if (v31 == -1 || v32 > *(_QWORD *)(v3 + *v6))
        break;
      v33 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v31);
      *(_QWORD *)(v3 + v30) = v32;
      v29 |= (unint64_t)(v33 & 0x7F) << v27;
      if ((v33 & 0x80) == 0)
        goto LABEL_25;
      v27 += 7;
      v34 = v28++ >= 9;
      if (v34)
      {
        v29 = 0;
        v35 = *(unsigned __int8 *)(v3 + *v24);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v24) = 1;
LABEL_25:
    v35 = *(unsigned __int8 *)(v3 + *v24);
    if (*(_BYTE *)(v3 + *v24))
      v29 = 0;
LABEL_27:
    v36 = v29 & 7;
    if (v35 || v36 == 4)
    {
LABEL_213:
      v115 = 1;
      goto LABEL_214;
    }
    v38 = v29 >> 3;
    v39 = v21;
    if ((v117 & 1) == 0)
    {
      v40 = v22;
      do
      {
        v42 = *v40++;
        v41 = v42;
        v39 = v42 != 0;
        if (v42)
          v43 = v41 == (_DWORD)v38;
        else
          v43 = 1;
      }
      while (!v43);
    }
    switch((int)v38)
    {
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_160;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_DWORD *)(a1 + 156) |= 2u;
        while (1)
        {
          v47 = *v23;
          v48 = *(_QWORD *)(v3 + v47);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(v3 + *v6))
            break;
          v50 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v48);
          *(_QWORD *)(v3 + v47) = v49;
          v46 |= (unint64_t)(v50 & 0x7F) << v44;
          if ((v50 & 0x80) == 0)
            goto LABEL_163;
          v44 += 7;
          v34 = v45++ >= 9;
          if (v34)
          {
            LODWORD(v46) = 0;
            goto LABEL_165;
          }
        }
        *(_BYTE *)(v3 + *v24) = 1;
LABEL_163:
        if (*(_BYTE *)(v3 + *v24))
          LODWORD(v46) = 0;
LABEL_165:
        v100 = 136;
        goto LABEL_182;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_160;
        v51 = 0;
        v52 = 0;
        v46 = 0;
        *(_DWORD *)(a1 + 156) |= 1u;
        while (2)
        {
          v53 = *v23;
          v54 = *(_QWORD *)(v3 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v46 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              v34 = v52++ >= 9;
              if (v34)
              {
                LODWORD(v46) = 0;
                goto LABEL_169;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          LODWORD(v46) = 0;
LABEL_169:
        v100 = 132;
        goto LABEL_182;
      case 7:
        if (!v39 || (*(_BYTE *)(a1 + 157) & 0x80) != 0)
          goto LABEL_158;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_239;
        v60 = objc_alloc_init(GEOTransitStep);
        if (!GEOTransitStepReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1))
          goto LABEL_238;
        PBReaderRecallMark();
        -[GEOTransitSuggestedRoute _addNoFlagsSteps:](a1, v60);
        goto LABEL_117;
      case 8:
        if (!v39)
          goto LABEL_160;
        if ((*(_BYTE *)(a1 + 157) & 8) == 0)
        {
          PBReaderReadData();
          v61 = objc_claimAutoreleasedReturnValue();
          v62 = *(void **)(a1 + 72);
          *(_QWORD *)(a1 + 72) = v61;
          goto LABEL_153;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_239;
        v101 = (int)(*(_DWORD *)(a1 + 156) << 20) >> 31;
        goto LABEL_197;
      case 10:
        if ((v8 & 1) == 0)
          goto LABEL_160;
        v63 = 0;
        v64 = 0;
        v46 = 0;
        *(_DWORD *)(a1 + 156) |= 4u;
        while (2)
        {
          v65 = *v23;
          v66 = *(_QWORD *)(v3 + v65);
          v67 = v66 + 1;
          if (v66 == -1 || v67 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v68 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v66);
            *(_QWORD *)(v3 + v65) = v67;
            v46 |= (unint64_t)(v68 & 0x7F) << v63;
            if (v68 < 0)
            {
              v63 += 7;
              v34 = v64++ >= 9;
              if (v34)
              {
                LODWORD(v46) = 0;
                goto LABEL_173;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          LODWORD(v46) = 0;
LABEL_173:
        v100 = 140;
        goto LABEL_182;
      case 11:
        if (!v39)
          goto LABEL_160;
        if ((*(_BYTE *)(a1 + 158) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_239;
          v101 = (int)(*(_DWORD *)(a1 + 156) << 15) >> 31;
          goto LABEL_197;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_239;
        v60 = objc_alloc_init(GEOPBTransitRoutingIncidentMessage);
        if (!GEOPBTransitRoutingIncidentMessageReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1))
          goto LABEL_238;
        PBReaderRecallMark();
        v69 = 112;
        goto LABEL_152;
      case 13:
        if (!v39 || (*(_BYTE *)(a1 + 157) & 0x10) != 0)
          goto LABEL_158;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_239;
        v60 = objc_alloc_init(GEOTransitSegmentArtworkSet);
        if (!GEOTransitSegmentArtworkSetReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1))
          goto LABEL_238;
        PBReaderRecallMark();
        -[GEOTransitSuggestedRoute _addNoFlagsRoutePlanningArtwork:](a1, v60);
        goto LABEL_117;
      case 14:
        if (!v39)
          goto LABEL_160;
        if ((*(_BYTE *)(a1 + 157) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_239;
          v101 = (int)(*(_DWORD *)(a1 + 156) << 22) >> 31;
          goto LABEL_197;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_239;
        v60 = objc_alloc_init(GEOTransitRouteDisplayStrings);
        if (!GEOTransitRouteDisplayStringsReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1))
          goto LABEL_238;
        PBReaderRecallMark();
        v69 = 56;
        goto LABEL_152;
      case 15:
        if (!v39 || (*(_BYTE *)(a1 + 156) & 0x80) != 0)
          goto LABEL_160;
        if (v36 != 2)
        {
          v102 = 0;
          v103 = 0;
          v104 = 0;
          while (1)
          {
            v105 = *v23;
            v106 = *(_QWORD *)(v3 + v105);
            v107 = v106 + 1;
            if (v106 == -1 || v107 > *(_QWORD *)(v3 + *v6))
              break;
            v108 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v106);
            *(_QWORD *)(v3 + v105) = v107;
            v104 |= (unint64_t)(v108 & 0x7F) << v102;
            if (v108 < 0)
            {
              v102 += 7;
              v34 = v103++ >= 9;
              if (!v34)
                continue;
            }
            goto LABEL_212;
          }
          *(_BYTE *)(v3 + *v24) = 1;
LABEL_212:
          PBRepeatedInt32Add();
          goto LABEL_198;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_239;
        while (1)
        {
          v70 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v23) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v71 = 0;
          v72 = 0;
          v73 = 0;
          v74 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v75 = *v23;
            v76 = *(_QWORD *)(v3 + v75);
            v77 = v76 + 1;
            if (v76 == -1 || v77 > *(_QWORD *)(v3 + *v6))
              break;
            v78 = *(_BYTE *)(*(_QWORD *)(v3 + *v74) + v76);
            *(_QWORD *)(v3 + v75) = v77;
            v73 |= (unint64_t)(v78 & 0x7F) << v71;
            if (v78 < 0)
            {
              v71 += 7;
              v34 = v72++ >= 9;
              if (!v34)
                continue;
            }
            goto LABEL_106;
          }
          *(_BYTE *)(v3 + *v70) = 1;
LABEL_106:
          PBRepeatedInt32Add();
        }
        PBReaderRecallMark();
        v24 = (int *)MEMORY[0x1E0D82BC8];
        v21 = v114;
        goto LABEL_199;
      case 18:
        if (!v39 || (*(_BYTE *)(a1 + 157) & 0x20) != 0)
          goto LABEL_158;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_239;
        v60 = objc_alloc_init(GEOTransitSectionOption);
        if (!GEOTransitSectionOptionReadAllFrom((uint64_t)v60, (void *)v3))
          goto LABEL_238;
        PBReaderRecallMark();
        -[GEOTransitSuggestedRoute _addNoFlagsSectionOption:](a1, v60);
        goto LABEL_117;
      case 19:
        if (!v39 || (*(_BYTE *)(a1 + 157) & 0x40) != 0)
        {
LABEL_158:
          v98 = PBReaderSkipValueWithTag();
          v21 = v114;
          v24 = (int *)MEMORY[0x1E0D82BC8];
          v26 = (int *)MEMORY[0x1E0D82BB8];
          if ((v98 & 1) == 0)
            goto LABEL_237;
          goto LABEL_200;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_239;
        v60 = objc_alloc_init(GEOTransitSection);
        if (!GEOTransitSectionReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1))
          goto LABEL_238;
        PBReaderRecallMark();
        -[GEOTransitSuggestedRoute _addNoFlagsSection:](a1, v60);
LABEL_117:

        goto LABEL_198;
      case 20:
        if ((v8 & 1) == 0)
          goto LABEL_160;
        v79 = 0;
        v80 = 0;
        v46 = 0;
        *(_DWORD *)(a1 + 156) |= 8u;
        while (2)
        {
          v81 = *v23;
          v82 = *(_QWORD *)(v3 + v81);
          v83 = v82 + 1;
          if (v82 == -1 || v83 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v84 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v82);
            *(_QWORD *)(v3 + v81) = v83;
            v46 |= (unint64_t)(v84 & 0x7F) << v79;
            if (v84 < 0)
            {
              v79 += 7;
              v34 = v80++ >= 9;
              if (v34)
              {
                LODWORD(v46) = 0;
                goto LABEL_177;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          LODWORD(v46) = 0;
LABEL_177:
        v100 = 144;
        goto LABEL_182;
      case 21:
        if ((v8 & 1) == 0)
          goto LABEL_160;
        v85 = 0;
        v86 = 0;
        v46 = 0;
        *(_DWORD *)(a1 + 156) |= 0x10u;
        while (2)
        {
          v87 = *v23;
          v88 = *(_QWORD *)(v3 + v87);
          v89 = v88 + 1;
          if (v88 == -1 || v89 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v90 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v88);
            *(_QWORD *)(v3 + v87) = v89;
            v46 |= (unint64_t)(v90 & 0x7F) << v85;
            if (v90 < 0)
            {
              v85 += 7;
              v34 = v86++ >= 9;
              if (v34)
              {
                LODWORD(v46) = 0;
                goto LABEL_181;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          LODWORD(v46) = 0;
LABEL_181:
        v100 = 148;
LABEL_182:
        *(_DWORD *)(a1 + v100) = v46;
        goto LABEL_200;
      case 22:
        if (!v39)
          goto LABEL_160;
        if ((*(_BYTE *)(a1 + 157) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_239;
          v101 = (int)(*(_DWORD *)(a1 + 156) << 21) >> 31;
          goto LABEL_197;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_239;
        v60 = objc_alloc_init(GEOTransitEngineDebugData);
        if (!GEOTransitEngineDebugDataReadAllFrom((uint64_t)v60, (void *)v3))
          goto LABEL_238;
        PBReaderRecallMark();
        v69 = 64;
        goto LABEL_152;
      case 23:
        if ((v8 & 1) == 0)
          goto LABEL_160;
        v91 = 0;
        v92 = 0;
        v93 = 0;
        *(_DWORD *)(a1 + 156) |= 0x20u;
        while (2)
        {
          v94 = *v23;
          v95 = *(_QWORD *)(v3 + v94);
          v96 = v95 + 1;
          if (v95 == -1 || v96 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v97 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v95);
            *(_QWORD *)(v3 + v94) = v96;
            v93 |= (unint64_t)(v97 & 0x7F) << v91;
            if (v97 < 0)
            {
              v91 += 7;
              v34 = v92++ >= 9;
              if (v34)
              {
                v93 = 0;
                goto LABEL_186;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          v93 = 0;
LABEL_186:
        *(_BYTE *)(a1 + 152) = v93 != 0;
        goto LABEL_200;
      case 24:
        if (!v39)
          goto LABEL_160;
        if ((*(_BYTE *)(a1 + 157) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_239;
          v101 = (int)(*(_DWORD *)(a1 + 156) << 23) >> 31;
LABEL_197:
          v7 += v101;
LABEL_198:
          v21 = v114;
          v24 = (int *)MEMORY[0x1E0D82BC8];
LABEL_199:
          v26 = (int *)MEMORY[0x1E0D82BB8];
LABEL_200:
          if (!(v116 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v23) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_213;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_239;
        v60 = objc_alloc_init(GEOAdvisoriesInfo);
        if (GEOAdvisoriesInfoReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v69 = 48;
LABEL_152:
          v62 = *(void **)(a1 + v69);
          *(_QWORD *)(a1 + v69) = v60;
LABEL_153:

          --v7;
          goto LABEL_198;
        }
LABEL_238:

LABEL_239:
        v115 = 0;
        v21 = v114;
        v24 = (int *)MEMORY[0x1E0D82BC8];
LABEL_214:
        v25 = v113;
LABEL_215:
        if ((v25 & 1) != 0)
LABEL_216:
          *(_DWORD *)(a1 + 156) |= 0x40u;
        if (v21 & 1 | ((v115 & 1) == 0))
        {
          *(_DWORD *)(a1 + 156) |= 0x8000u;
          *(_DWORD *)(a1 + 156) |= 0x800u;
          *(_DWORD *)(a1 + 156) |= 0x10000u;
          *(_DWORD *)(a1 + 156) |= 0x100u;
          *(_DWORD *)(a1 + 156) |= 0x1000u;
          *(_DWORD *)(a1 + 156) |= 0x200u;
          *(_DWORD *)(a1 + 156) |= 0x80u;
          *(_DWORD *)(a1 + 156) |= 0x2000u;
          *(_DWORD *)(a1 + 156) |= 0x4000u;
          *(_DWORD *)(a1 + 156) |= 0x400u;
        }
        else if (v22)
        {
          while (1)
          {
            v109 = *v22++;
            v110 = 0x8000;
            switch(v109)
            {
              case 0:
                goto LABEL_231;
              case 7:
                goto LABEL_230;
              case 8:
                v110 = 2048;
                goto LABEL_230;
              case 11:
                v110 = 0x10000;
                goto LABEL_230;
              case 13:
                v110 = 4096;
                goto LABEL_230;
              case 14:
                v110 = 512;
                goto LABEL_230;
              case 15:
                v110 = 128;
                goto LABEL_230;
              case 18:
                v110 = 0x2000;
                goto LABEL_230;
              case 19:
                v110 = 0x4000;
                goto LABEL_230;
              case 22:
                v110 = 1024;
                goto LABEL_230;
              case 24:
                v110 = 256;
LABEL_230:
                *(_DWORD *)(a1 + 156) |= v110;
                break;
              default:
                continue;
            }
          }
        }
LABEL_231:
        if (v115)
        {
          v3 = *(_BYTE *)(v3 + *v24) == 0;
          if ((v21 & 1) == 0)
            return v3;
LABEL_235:
          v111 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v21 & 1) != 0)
            goto LABEL_235;
        }
        return v3;
      default:
        if ((v113 & 1) == 0 || (*(_BYTE *)(a1 + 156) & 0x40) != 0)
        {
LABEL_160:
          v99 = PBReaderSkipValueWithTag();
          v26 = (int *)MEMORY[0x1E0D82BB8];
          v24 = (int *)MEMORY[0x1E0D82BC8];
          v21 = v114;
          if ((v99 & 1) == 0)
          {
LABEL_237:
            v115 = 0;
            goto LABEL_214;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v57 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v58 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v57;

          }
          v59 = PBUnknownFieldAdd();
          v21 = v114;
          v24 = (int *)MEMORY[0x1E0D82BC8];
          v26 = (int *)MEMORY[0x1E0D82BB8];
          if (!v59)
          {
            v115 = 0;
            goto LABEL_216;
          }
        }
        goto LABEL_200;
    }
  }
}

void sub_1889DD91C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889DDAE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889DDC24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889DDD6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889DE0A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889DE1EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889DE638(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889DE974(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889DEDB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889E0678(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitSuggestedRouteCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];
  _BYTE v41[128];
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v2 = *(id *)(a1 + 104);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v35, v42, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v36;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v36 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v35, v42, 16);
    }
    while (v4);
  }

  -[GEOPBTransitRoutingIncidentMessage readAll:](*(_QWORD *)(a1 + 112), 1);
  objc_msgSend(*(id *)(a1 + 48), "readAll:", 1);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v7 = *(id *)(a1 + 80);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v32;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v32 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * v11++), "readAll:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
    }
    while (v9);
  }

  objc_msgSend(*(id *)(a1 + 56), "readAll:", 1);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v12 = *(id *)(a1 + 88);
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v27, v40, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v28;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v28 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * v16++), "readAll:", 1);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v27, v40, 16);
    }
    while (v14);
  }

  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v17 = *(id *)(a1 + 96);
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v23, v39, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v24;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v24 != v20)
          objc_enumerationMutation(v17);
        objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * v21++), "readAll:", 1, (_QWORD)v23);
      }
      while (v19 != v21);
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v23, v39, 16);
    }
    while (v19);
  }

  return objc_msgSend(*(id *)(a1 + 64), "readAll:", 1);
}

unint64_t GEOTransitSuggestedRouteReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 124))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitSuggestedRouteReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 120) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 124) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitSuggestedRouteReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitSuggestedRouteReadAllFrom_initialTag;
  Specified = GEOTransitSuggestedRouteReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitSuggestedRouteCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  return Specified;
}

void sub_1889E0B18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitSuggestedRouteReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitSuggestedRouteReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889E0B78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitSuggestedRouteIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  _BOOL8 v58;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_124;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_105;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_110;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_124;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_105;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_110;
          }
        case 7u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitStepIsValid(a1))
            goto LABEL_124;
          goto LABEL_109;
        case 8u:
          if (v15 == 2)
            goto LABEL_40;
          goto LABEL_124;
        case 0xAu:
          if ((v8 & 7) != 0)
            goto LABEL_124;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_105;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_110;
          }
        case 0xBu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPBTransitRoutingIncidentMessageIsValid(a1))
            goto LABEL_124;
          goto LABEL_109;
        case 0xDu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitSegmentArtworkSetIsValid(a1))
            goto LABEL_124;
          goto LABEL_109;
        case 0xEu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitRouteDisplayStringsIsValid(a1))
            goto LABEL_124;
          goto LABEL_109;
        case 0xFu:
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_124:
              PBReaderRecallMark();
              return 0;
            }
LABEL_113:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v53 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v54 = *v2;
                v55 = *(_QWORD *)&a1[v54];
                v56 = v55 + 1;
                if (v55 == -1 || v56 > *(_QWORD *)&a1[*v3])
                  break;
                v57 = *(char *)(*(_QWORD *)&a1[*v5] + v55);
                *(_QWORD *)&a1[v54] = v56;
                if (v57 < 0)
                {
                  v13 = v53++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_113;
              }
              a1[*v4] = 1;
            }
LABEL_109:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_124;
            while (1)
            {
              v33 = *v2;
              v34 = *(_QWORD *)&a1[v33];
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
                break;
              v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
              *(_QWORD *)&a1[v33] = v35;
              if (v36 < 0)
              {
                v37 = v15++;
                if (v37 <= 8)
                  continue;
              }
              goto LABEL_110;
            }
LABEL_105:
            a1[*v4] = 1;
          }
LABEL_110:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_122;
          break;
        case 0x12u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitSectionOptionIsValid(a1))
            goto LABEL_124;
          goto LABEL_109;
        case 0x13u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitSectionIsValid(a1))
            goto LABEL_124;
          goto LABEL_109;
        case 0x14u:
          if ((v8 & 7) != 0)
            goto LABEL_124;
          v38 = 0;
          while (1)
          {
            v39 = *v2;
            v40 = *(_QWORD *)&a1[v39];
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)&a1[*v3])
              goto LABEL_105;
            v42 = *(char *)(*(_QWORD *)&a1[*v5] + v40);
            *(_QWORD *)&a1[v39] = v41;
            if (v42 < 0)
            {
              v22 = v38++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_110;
          }
        case 0x15u:
          if ((v8 & 7) != 0)
            goto LABEL_124;
          v43 = 0;
          while (1)
          {
            v44 = *v2;
            v45 = *(_QWORD *)&a1[v44];
            v46 = v45 + 1;
            if (v45 == -1 || v46 > *(_QWORD *)&a1[*v3])
              goto LABEL_105;
            v47 = *(char *)(*(_QWORD *)&a1[*v5] + v45);
            *(_QWORD *)&a1[v44] = v46;
            if (v47 < 0)
            {
              v22 = v43++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_110;
          }
        case 0x16u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitEngineDebugDataIsValid(a1))
            goto LABEL_124;
          goto LABEL_109;
        case 0x17u:
          if ((v8 & 7) != 0)
            goto LABEL_124;
          v48 = 0;
          while (1)
          {
            v49 = *v2;
            v50 = *(_QWORD *)&a1[v49];
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)&a1[*v3])
              goto LABEL_105;
            v52 = *(char *)(*(_QWORD *)&a1[*v5] + v50);
            *(_QWORD *)&a1[v49] = v51;
            if (v52 < 0)
            {
              v22 = v48++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_110;
          }
        case 0x18u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOAdvisoriesInfoIsValid(a1))
            goto LABEL_109;
          goto LABEL_124;
        default:
LABEL_40:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_124;
          goto LABEL_110;
      }
    }
  }
LABEL_122:
  v58 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v58;
}

void sub_1889E16F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOTransitSuggestedRouteIsDirty(uint64_t a1)
{
  int v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  v2 = *(_DWORD *)(a1 + 156);
  if ((v2 & 0x28800) != 0)
    return 1;
  if ((v2 & 0x10000) != 0)
  {
    if (GEOPBTransitRoutingIncidentMessageIsDirty(*(_QWORD *)(a1 + 112)))
      return 1;
    v2 = *(_DWORD *)(a1 + 156);
  }
  if ((v2 & 0x100) != 0)
  {
    if ((GEOAdvisoriesInfoIsDirty(*(os_unfair_lock_s **)(a1 + 48)) & 1) != 0)
      return 1;
    v2 = *(_DWORD *)(a1 + 156);
  }
  if ((v2 & 0x1000) == 0)
  {
    if ((v2 & 0x200) != 0)
    {
      if ((GEOTransitRouteDisplayStringsIsDirty(*(os_unfair_lock_s **)(a1 + 56)) & 1) != 0)
        return 1;
      v2 = *(_DWORD *)(a1 + 156);
    }
    if ((v2 & 0x6480) == 0)
    {
      if ((v2 & 0x8000) != 0)
      {
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v5 = *(id *)(a1 + 104);
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
        if (v6)
        {
          v7 = v6;
          v8 = *(_QWORD *)v25;
LABEL_18:
          v9 = 0;
          while (1)
          {
            if (*(_QWORD *)v25 != v8)
              objc_enumerationMutation(v5);
            if ((GEOTransitStepIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v24 + 1) + 8 * v9)) & 1) != 0)
              goto LABEL_46;
            if (v7 == ++v9)
            {
              v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
              if (v7)
                goto LABEL_18;
              break;
            }
          }
        }

        v2 = *(_DWORD *)(a1 + 156);
      }
      if ((v2 & 0x1000) != 0)
      {
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        v5 = *(id *)(a1 + 80);
        v10 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v29, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v21;
LABEL_28:
          v13 = 0;
          while (1)
          {
            if (*(_QWORD *)v21 != v12)
              objc_enumerationMutation(v5);
            if ((GEOTransitSegmentArtworkSetIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v20 + 1)
                                                                                           + 8 * v13)) & 1) != 0)
              goto LABEL_46;
            if (v11 == ++v13)
            {
              v11 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v29, 16);
              if (v11)
                goto LABEL_28;
              break;
            }
          }
        }

        v2 = *(_DWORD *)(a1 + 156);
      }
      if ((v2 & 0x4000) == 0)
        return 0;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v5 = *(id *)(a1 + 96);
      v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v28, 16);
      if (!v3)
      {
LABEL_47:

        return v3;
      }
      v14 = *(_QWORD *)v17;
LABEL_39:
      v15 = 0;
      while (1)
      {
        if (*(_QWORD *)v17 != v14)
          objc_enumerationMutation(v5);
        if ((GEOTransitSectionIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v16 + 1) + 8 * v15)) & 1) != 0)
          break;
        if (v3 == ++v15)
        {
          v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v28, 16);
          if (v3)
            goto LABEL_39;
          goto LABEL_47;
        }
      }
LABEL_46:
      v3 = 1;
      goto LABEL_47;
    }
  }
  return 1;
}

os_unfair_lock_s *GEOTransitSuggestedRouteIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTransitSuggestedRouteIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 32);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1889E2510(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889E2F90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitSurchargeReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  GEOTransitSurchargeUnit *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  void *v34;
  uint64_t v35;
  _BOOL8 v36;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_53;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          goto LABEL_53;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
          break;
        if ((_DWORD)v18 == 2)
        {
          v27 = 0;
          v28 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v22 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
              goto LABEL_48;
            v27 += 7;
            v15 = v28++ >= 9;
            if (v15)
            {
              LODWORD(v22) = 0;
              goto LABEL_50;
            }
          }
          v3[*v6] = 1;
LABEL_48:
          if (v3[*v6])
            LODWORD(v22) = 0;
LABEL_50:
          v35 = 28;
LABEL_51:
          *(_DWORD *)(a1 + v35) = v22;
          goto LABEL_52;
        }
        if ((_DWORD)v18 == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_55;
          v19 = objc_alloc_init(GEOTransitSurchargeUnit);
          if (!GEOTransitSurchargeUnitReadAllFrom((uint64_t)v19, v3))
          {

            goto LABEL_55;
          }
          PBReaderRecallMark();
          objc_msgSend((id)a1, "addSurchargeUnit:", v19, 0, 0);

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v33 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v34 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v33;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_55;
        }
LABEL_52:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_53;
      }
      v20 = 0;
      v21 = 0;
      v22 = 0;
      *(_BYTE *)(a1 + 32) |= 1u;
      while (1)
      {
        v23 = *v4;
        v24 = *(_QWORD *)&v3[v23];
        v25 = v24 + 1;
        if (v24 == -1 || v25 > *(_QWORD *)&v3[*v5])
          break;
        v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
        *(_QWORD *)&v3[v23] = v25;
        v22 |= (unint64_t)(v26 & 0x7F) << v20;
        if ((v26 & 0x80) == 0)
          goto LABEL_44;
        v20 += 7;
        v15 = v21++ >= 9;
        if (v15)
        {
          LODWORD(v22) = 0;
          goto LABEL_46;
        }
      }
      v3[*v6] = 1;
LABEL_44:
      if (v3[*v6])
        LODWORD(v22) = 0;
LABEL_46:
      v35 = 24;
      goto LABEL_51;
    }
LABEL_53:
    v36 = v3[*v6] == 0;
  }
  else
  {
LABEL_55:
    v36 = 0;
  }
  objc_sync_exit(v3);

  return v36;
}

void sub_1889E4178(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitSurchargeReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitSurchargeReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889E41D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitSurchargeUnitIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitPriceIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOTransitSurchargeUnitReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  GEOTransitPrice *v18;
  void *v19;
  id v20;
  void *v21;
  _BOOL8 v22;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_29;
          v18 = objc_alloc_init(GEOTransitPrice);
          if (!GEOTransitPriceReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          v19 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v18;

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v20 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v21 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v20;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_29;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v22 = v3[*v6] == 0;
  }
  else
  {
LABEL_29:
    v22 = 0;
  }
  objc_sync_exit(v3);

  return v22;
}

void sub_1889E5218(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitSurchargeUnitReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitSurchargeUnitReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889E5278(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889E572C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitTicketingSegmentReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  GEOTransitPath *v39;
  void *v40;
  id v41;
  void *v42;
  int v43;
  char v44;
  char v45;
  int v46;
  char v47;
  void *v48;
  int v50;
  char v51;
  char v52;
  char v53;
  BOOL v54;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 > 1;
        v15 = v14 & ~(_BYTE)v10 | v7;
        v16 = v14 | v10;
        v51 = v15;
        v52 = v16 | v15;
        if (((v16 | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v53 = (v17 == 0) | v16;
        v54 = v16;
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_67;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_67:
      v50 = 1;
      goto LABEL_68;
    }
    v31 = v23 >> 3;
    v32 = v54;
    if ((v53 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 == 3)
      break;
    if ((_DWORD)v31 == 2)
    {
      if (!v32)
        goto LABEL_58;
      if ((*(_BYTE *)(a1 + 60) & 4) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_84;
        v45 = 32 * *(_BYTE *)(a1 + 60);
        goto LABEL_64;
      }
      PBReaderReadString();
      v37 = objc_claimAutoreleasedReturnValue();
      v38 = 32;
LABEL_51:
      v40 = *(void **)(a1 + v38);
      *(_QWORD *)(a1 + v38) = v37;

      --v9;
LABEL_65:
      v19 = (int *)MEMORY[0x1E0D82BC8];
      goto LABEL_66;
    }
    if ((_DWORD)v31 == 1)
    {
      if (!v32)
        goto LABEL_58;
      if ((*(_BYTE *)(a1 + 60) & 8) == 0)
      {
        PBReaderReadString();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = 40;
        goto LABEL_51;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_84;
      v45 = 16 * *(_BYTE *)(a1 + 60);
LABEL_64:
      v9 += v45 >> 7;
      goto LABEL_65;
    }
    if ((v51 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 1) != 0)
      goto LABEL_58;
    if (!*(_QWORD *)(a1 + 16))
    {
      v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v42 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v41;

    }
    v43 = PBUnknownFieldAdd();
    v19 = (int *)MEMORY[0x1E0D82BC8];
    if (!v43)
    {
      v50 = 0;
      goto LABEL_69;
    }
LABEL_66:
    if (!(v52 & 1 | (v9 != 0)))
      goto LABEL_67;
  }
  if (!v32 || (*(_BYTE *)(a1 + 60) & 2) != 0)
  {
LABEL_58:
    v44 = PBReaderSkipValueWithTag();
    v19 = (int *)MEMORY[0x1E0D82BC8];
    if ((v44 & 1) == 0)
    {
      v50 = 0;
      goto LABEL_68;
    }
    goto LABEL_66;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_84;
  v39 = objc_alloc_init(GEOTransitPath);
  if (GEOTransitPathReadAllFrom(v39, (void *)v3))
  {
    PBReaderRecallMark();
    -[GEOTransitTicketingSegment _addNoFlagsPath:](a1, v39);

    goto LABEL_65;
  }

LABEL_84:
  v50 = 0;
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_68:
  if ((v51 & 1) == 0)
    goto LABEL_70;
LABEL_69:
  *(_BYTE *)(a1 + 60) |= 1u;
LABEL_70:
  if (v54 || (v50 & 1) == 0)
  {
    *(_BYTE *)(a1 + 60) |= 8u;
    *(_BYTE *)(a1 + 60) |= 4u;
    *(_BYTE *)(a1 + 60) |= 2u;
  }
  else if (v17)
  {
    while (1)
    {
      v46 = *v17++;
      v47 = 8;
      switch(v46)
      {
        case 0:
          goto LABEL_77;
        case 1:
          goto LABEL_76;
        case 2:
          v47 = 4;
          goto LABEL_76;
        case 3:
          v47 = 2;
LABEL_76:
          *(_BYTE *)(a1 + 60) |= v47;
          break;
        default:
          continue;
      }
    }
  }
LABEL_77:
  if (v50)
    v3 = *(_BYTE *)(v3 + *v19) == 0;
  else
    v3 = 0;
  if (v54)
  {
    v48 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1889E5DC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889E5F04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889E6900(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOTransitTicketingSegmentCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 24);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOTransitTicketingSegmentReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitTicketingSegmentReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitTicketingSegmentReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitTicketingSegmentReadAllFrom_initialTag;
  Specified = GEOTransitTicketingSegmentReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTransitTicketingSegmentCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_1889E6B8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitTicketingSegmentReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitTicketingSegmentReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889E6BEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889E6E4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitTicketingSegmentIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = (*(_BYTE *)(a1 + 60) & 0x1E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_1889E7234(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889E7564(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitTransferInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  id v32;
  void *v33;
  _BOOL8 v34;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 4)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (1)
          {
            v28 = *v4;
            v29 = *(_QWORD *)&v3[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&v3[*v5])
              break;
            v31 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
            *(_QWORD *)&v3[v28] = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if ((v31 & 0x80) == 0)
              goto LABEL_44;
            v25 += 7;
            v15 = v26++ >= 9;
            if (v15)
            {
              LODWORD(v27) = 0;
              goto LABEL_46;
            }
          }
          v3[*v6] = 1;
LABEL_44:
          if (v3[*v6])
            LODWORD(v27) = 0;
LABEL_46:
          *(_DWORD *)(a1 + 24) = v27;
        }
        else if ((v10 >> 3) == 6)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_40;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_42;
            }
          }
          v3[*v6] = 1;
LABEL_40:
          if (v3[*v6])
            v20 = 0;
LABEL_42:
          *(_QWORD *)(a1 + 16) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v32 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v33 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v32;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_49;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v34 = v3[*v6] == 0;
  }
  else
  {
LABEL_49:
    v34 = 0;
  }
  objc_sync_exit(v3);

  return v34;
}

void sub_1889E7F74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitTransferInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitTransferInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889E7FD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889E85A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitVehicleInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  char v16;
  int *v17;
  int *v18;
  int v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  BOOL v29;
  int v30;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEOTransitVehicleTime *v39;
  uint64_t v40;
  void *v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  int *v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  id v81;
  void *v82;
  int v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  void *v92;
  char v93;
  uint64_t v94;
  __int16 v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  int v103;
  int v104;
  __int16 v105;
  void *v106;
  char v108;
  char v109;
  char v110;
  char v111;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 84);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 80));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 112)), (uint16x4_t)0xFFF6FFF9FFF8FFF7), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 112) >> 6) & 1));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 > 2;
        v15 = v14 & ~(_BYTE)v10 | v9;
        v16 = v14 | v10;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        if ((((v14 | v10) | v8) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v19 = 1;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_171;
        v108 = v14 & ~(_BYTE)v10 | v9;
        v110 = v16 | v15;
        v111 = (v18 == 0) | v16;
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        v109 = v14 | v10;
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v9;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v20))
      goto LABEL_169;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v17;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v6))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_24;
      v22 += 7;
      v29 = v23++ >= 9;
      if (v29)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_24:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_26:
    v31 = v24 & 7;
    if (v30 || v31 == 4)
    {
LABEL_169:
      v19 = 1;
      goto LABEL_170;
    }
    v33 = v24 >> 3;
    v34 = v16;
    if ((v111 & 1) == 0)
    {
      v35 = v18;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34)
          goto LABEL_121;
        if ((*(_WORD *)(a1 + 112) & 0x100) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_189;
          v39 = objc_alloc_init(GEOTransitVehicleTime);
          if (GEOTransitVehicleTimeReadAllFrom((uint64_t)v39, (void *)v3))
          {
            PBReaderRecallMark();
            v40 = 48;
            goto LABEL_48;
          }
          goto LABEL_188;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_189;
        v95 = *(_WORD *)(a1 + 112) << 7;
        goto LABEL_154;
      case 2:
        if (!v34)
          goto LABEL_121;
        if ((*(_WORD *)(a1 + 112) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_189;
          v95 = *(_WORD *)(a1 + 112) << 6;
LABEL_154:
          v7 += v95 >> 15;
          goto LABEL_155;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_189;
        v39 = objc_alloc_init(GEOTransitVehicleTime);
        if (GEOTransitVehicleTimeReadAllFrom((uint64_t)v39, (void *)v3))
        {
          PBReaderRecallMark();
          v40 = 56;
LABEL_48:
          v41 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v39;

          --v7;
LABEL_155:
          v16 = v109;
          v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_156:
          if (!(v110 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_169;
          continue;
        }
LABEL_188:

LABEL_189:
        v19 = 0;
        v16 = v109;
LABEL_170:
        v15 = v108;
LABEL_171:
        if ((v15 & 1) != 0)
LABEL_172:
          *(_WORD *)(a1 + 112) |= 0x40u;
        if (v16 & 1 | ((v19 & 1) == 0))
        {
          *(_WORD *)(a1 + 112) |= 0x100u;
          *(_WORD *)(a1 + 112) |= 0x200u;
          *(_WORD *)(a1 + 112) |= 0x80u;
          *(_WORD *)(a1 + 112) |= 0x400u;
        }
        else if (v18)
        {
          while (1)
          {
            v104 = *v18++;
            v103 = v104;
            v105 = 256;
            switch(v104)
            {
              case 0:
                goto LABEL_182;
              case 1:
                goto LABEL_181;
              case 2:
                v105 = 512;
                goto LABEL_181;
              case 3:
              case 4:
              case 5:
                continue;
              case 6:
                v105 = 128;
                goto LABEL_181;
              default:
                if (v103 != 14)
                  continue;
                v105 = 1024;
LABEL_181:
                *(_WORD *)(a1 + 112) |= v105;
                break;
            }
          }
        }
LABEL_182:
        if (v19)
        {
          v3 = *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]) == 0;
          if ((v16 & 1) == 0)
            return v3;
LABEL_186:
          v106 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v16 & 1) != 0)
            goto LABEL_186;
        }
        return v3;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_121;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 112) |= 8u;
        while (2)
        {
          v45 = *v17;
          v46 = *(_QWORD *)(v3 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v46);
            *(_QWORD *)(v3 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              v29 = v43++ >= 9;
              if (v29)
              {
                LODWORD(v44) = 0;
                goto LABEL_126;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v44) = 0;
LABEL_126:
        v94 = 100;
        goto LABEL_143;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_121;
        v49 = 0;
        v50 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 112) |= 0x20u;
        while (2)
        {
          v51 = *v17;
          v52 = *(_QWORD *)(v3 + v51);
          v53 = v52 + 1;
          if (v52 == -1 || v53 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v52);
            *(_QWORD *)(v3 + v51) = v53;
            v44 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              v29 = v50++ >= 9;
              if (v29)
              {
                LODWORD(v44) = 0;
                goto LABEL_130;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v44) = 0;
LABEL_130:
        v94 = 108;
        goto LABEL_143;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_121;
        v55 = 0;
        v56 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 112) |= 2u;
        while (2)
        {
          v57 = *v17;
          v58 = *(_QWORD *)(v3 + v57);
          v59 = v58 + 1;
          if (v58 == -1 || v59 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v60 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v58);
            *(_QWORD *)(v3 + v57) = v59;
            v44 |= (unint64_t)(v60 & 0x7F) << v55;
            if (v60 < 0)
            {
              v55 += 7;
              v29 = v56++ >= 9;
              if (v29)
              {
                LODWORD(v44) = 0;
                goto LABEL_134;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v44) = 0;
LABEL_134:
        v94 = 92;
        goto LABEL_143;
      case 6:
        if (!v34 || (*(_WORD *)(a1 + 112) & 0x80) != 0)
          goto LABEL_121;
        if (v31 != 2)
        {
          v96 = 0;
          v97 = 0;
          v98 = 0;
          while (1)
          {
            v99 = *v17;
            v100 = *(_QWORD *)(v3 + v99);
            v101 = v100 + 1;
            if (v100 == -1 || v101 > *(_QWORD *)(v3 + *v6))
              break;
            v102 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v100);
            *(_QWORD *)(v3 + v99) = v101;
            v98 |= (unint64_t)(v102 & 0x7F) << v96;
            if (v102 < 0)
            {
              v96 += 7;
              v29 = v97++ >= 9;
              if (!v29)
                continue;
            }
            goto LABEL_168;
          }
          *(_BYTE *)(v3 + *v20) = 1;
LABEL_168:
          PBRepeatedUInt32Add();
          goto LABEL_155;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_189;
        while (1)
        {
          v61 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v62 = 0;
          v63 = 0;
          v64 = 0;
          while (1)
          {
            v65 = *v17;
            v66 = *(_QWORD *)(v3 + v65);
            v67 = v66 + 1;
            if (v66 == -1 || v67 > *(_QWORD *)(v3 + *v6))
              break;
            v68 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v66);
            *(_QWORD *)(v3 + v65) = v67;
            v64 |= (unint64_t)(v68 & 0x7F) << v62;
            if (v68 < 0)
            {
              v62 += 7;
              v29 = v63++ >= 9;
              if (!v29)
                continue;
            }
            goto LABEL_87;
          }
          *(_BYTE *)(v3 + *v61) = 1;
LABEL_87:
          PBRepeatedUInt32Add();
        }
        PBReaderRecallMark();
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v16 = v109;
        goto LABEL_156;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_121;
        v69 = 0;
        v70 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 112) |= 0x10u;
        while (2)
        {
          v71 = *v17;
          v72 = *(_QWORD *)(v3 + v71);
          v73 = v72 + 1;
          if (v72 == -1 || v73 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v74 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v72);
            *(_QWORD *)(v3 + v71) = v73;
            v44 |= (unint64_t)(v74 & 0x7F) << v69;
            if (v74 < 0)
            {
              v69 += 7;
              v29 = v70++ >= 9;
              if (v29)
              {
                LODWORD(v44) = 0;
                goto LABEL_138;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v44) = 0;
LABEL_138:
        v94 = 104;
        goto LABEL_143;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_121;
        v75 = 0;
        v76 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 112) |= 4u;
        while (2)
        {
          v77 = *v17;
          v78 = *(_QWORD *)(v3 + v77);
          v79 = v78 + 1;
          if (v78 == -1 || v79 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v80 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v78);
            *(_QWORD *)(v3 + v77) = v79;
            v44 |= (unint64_t)(v80 & 0x7F) << v75;
            if (v80 < 0)
            {
              v75 += 7;
              v29 = v76++ >= 9;
              if (v29)
              {
                LODWORD(v44) = 0;
                goto LABEL_142;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v44) = 0;
LABEL_142:
        v94 = 96;
LABEL_143:
        *(_DWORD *)(a1 + v94) = v44;
        goto LABEL_156;
      case 12:
        if ((v8 & 1) == 0)
          goto LABEL_121;
        v84 = 0;
        v85 = 0;
        v86 = 0;
        *(_WORD *)(a1 + 112) |= 1u;
        while (2)
        {
          v87 = *v17;
          v88 = *(_QWORD *)(v3 + v87);
          v89 = v88 + 1;
          if (v88 == -1 || v89 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v90 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v88);
            *(_QWORD *)(v3 + v87) = v89;
            v86 |= (unint64_t)(v90 & 0x7F) << v84;
            if (v90 < 0)
            {
              v84 += 7;
              v29 = v85++ >= 9;
              if (v29)
              {
                v86 = 0;
                goto LABEL_147;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          v86 = 0;
LABEL_147:
        *(_QWORD *)(a1 + 64) = v86;
        goto LABEL_156;
      case 14:
        if (!v34)
          goto LABEL_121;
        if ((*(_WORD *)(a1 + 112) & 0x400) == 0)
        {
          PBReaderReadString();
          v91 = objc_claimAutoreleasedReturnValue();
          v92 = *(void **)(a1 + 72);
          *(_QWORD *)(a1 + 72) = v91;

          v20 = (int *)MEMORY[0x1E0D82BC8];
          v16 = v109;
          --v7;
          goto LABEL_156;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_189;
        v95 = 32 * *(_WORD *)(a1 + 112);
        goto LABEL_154;
      default:
        if ((v108 & 1) == 0 || (*(_WORD *)(a1 + 112) & 0x40) != 0)
        {
LABEL_121:
          v93 = PBReaderSkipValueWithTag();
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v16 = v109;
          if ((v93 & 1) == 0)
          {
            v19 = 0;
            goto LABEL_170;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v81 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v82 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v81;

          }
          v83 = PBUnknownFieldAdd();
          v16 = v109;
          v20 = (int *)MEMORY[0x1E0D82BC8];
          if (!v83)
          {
            v19 = 0;
            goto LABEL_172;
          }
        }
        goto LABEL_156;
    }
  }
}

void sub_1889E9330(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889E9560(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889E9C1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889EA968(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitVehicleInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 84))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTransitVehicleInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 80) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 84) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTransitVehicleInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTransitVehicleInfoReadAllFrom_initialTag;
  Specified = GEOTransitVehicleInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 48), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 56), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
  return Specified;
}

void sub_1889EAB20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTransitVehicleInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitVehicleInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889EAB80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitVehicleTimeIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_33;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8)
            continue;
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        v22 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v22;
}

void sub_1889EB048(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitVehicleInfoIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  v2 = (*(_WORD *)(a1 + 112) & 0xF80) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
  return v2;
}

void sub_1889EB57C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889EBB70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitVehiclePositionInfoReadAllFrom(_QWORD *a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  GEOTransitDepartureEntry *v18;
  id v19;
  void *v20;
  _BOOL8 v21;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_29;
          v18 = objc_alloc_init(GEOTransitDepartureEntry);
          if (!GEOTransitDepartureEntryReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addDepartureEntry:", v18, 0, 0);

        }
        else
        {
          if (!a1[1])
          {
            v19 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v20 = (void *)a1[1];
            a1[1] = v19;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_29;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v21 = v3[*v6] == 0;
  }
  else
  {
LABEL_29:
    v21 = 0;
  }
  objc_sync_exit(v3);

  return v21;
}

void sub_1889EC548(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitVehiclePositionInfoReadFrom(_QWORD *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitVehiclePositionInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889EC5A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitVehicleTimeReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_34:
          *(_DWORD *)(a1 + 16) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_1889ED28C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTransitVehicleTimeReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTransitVehicleTimeReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1889ED2EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889ED6D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1889ED728(_Unwind_Exception *a1)
{
  maps::path_codec::geo3::RoutingPathLeg *v1;

  maps::path_codec::geo3::RoutingPathLeg::~RoutingPathLeg(v1);
  _Unwind_Resume(a1);
}

void sub_1889ED798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1889ED888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1889ED974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1889EDA14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1889EDACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1889EDB24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1889EDCF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1889EDE1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t GEODefaultsSetUseServer(uint64_t result)
{
  _GEODefaultsUseServer = result;
  return result;
}

void GEODefaultsDisableServer()
{
  _MergedGlobals_194 = 1;
}

void _GEOConfigSetProxy(void *a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  __int16 v5;
  __int16 v6;

  if (qword_1ECDBBA68)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      v6 = 0;
      v2 = MEMORY[0x1E0C81028];
      v3 = "Assertion failed: _proxyClass == ((void *)0)";
      v4 = (uint8_t *)&v6;
LABEL_9:
      _os_log_fault_impl(&dword_1885A9000, v2, OS_LOG_TYPE_FAULT, v3, v4, 2u);
    }
  }
  else
  {
    if ((objc_msgSend(a1, "conformsToProtocol:", &unk_1EDF62E58) & 1) != 0)
    {
      qword_1ECDBBA68 = (uint64_t)a1;
      return;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      v5 = 0;
      v2 = MEMORY[0x1E0C81028];
      v3 = "Assertion failed: [clas conformsToProtocol:@protocol(GEOConfigProxy)]";
      v4 = (uint8_t *)&v5;
      goto LABEL_9;
    }
  }
}

__CFString *GEODefaultsSourceAsString(unint64_t a1)
{
  if (a1 < 0xA)
    return off_1E1C035E0[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("GEODefaultsSourceUnknown(%d)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

id GEOConfig_getCountryAwareValueForKeyFromDictionary(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!objc_msgSend(v5, "length"))
    goto LABEL_8;
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("CountryProviders"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_7;
  objc_msgSend(v8, "objectForKeyedSubscript:", v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

LABEL_7:
LABEL_8:
    objc_msgSend(v7, "objectForKeyedSubscript:", v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  GEOConfig_stripEntitlement(v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKeyedSubscript:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
    goto LABEL_8;
LABEL_9:

  return v11;
}

id GEOConfig_stripEntitlement(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;

  v1 = a1;
  if ((objc_msgSend(v1, "hasPrefix:", CFSTR("entitled/")) & 1) != 0)
  {
    GEOConfig_splitKeyPathComponents(v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if ((unint64_t)objc_msgSend(v2, "count") < 3)
    {
      v4 = 0;
    }
    else
    {
      objc_msgSend(v2, "subarrayWithRange:", 2, objc_msgSend(v2, "count") - 2);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "componentsJoinedByString:", CFSTR("/"));
      v4 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v4 = v1;
  }

  return v4;
}

id GEOCalculateChangedKeys(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v41 = v6;
  v42 = v5;
  v40 = v7;
  if (objc_msgSend(v7, "length"))
  {
    v8 = (id)objc_msgSend(v5, "mutableCopy");
    objc_msgSend(v8, "setObject:forKeyedSubscript:", 0, CFSTR("CountryProviders"));
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("CountryProviders"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "objectForKeyedSubscript:", v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "addEntriesFromDictionary:", v10);
    v11 = (id)objc_msgSend(v6, "mutableCopy");
    objc_msgSend(v11, "setObject:forKeyedSubscript:", 0, CFSTR("CountryProviders"));
    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("CountryProviders"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectForKeyedSubscript:", v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "addEntriesFromDictionary:", v13);
  }
  else
  {
    v8 = v5;
    v11 = v6;
  }
  v14 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend(v8, "allKeys");
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)v15;
  v17 = MEMORY[0x1E0C9AA60];
  if (v15)
    v18 = v15;
  else
    v18 = MEMORY[0x1E0C9AA60];
  objc_msgSend(v14, "setWithArray:", v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend(v11, "allKeys");
  v21 = objc_claimAutoreleasedReturnValue();
  v22 = (void *)v21;
  if (v21)
    v23 = v21;
  else
    v23 = v17;
  objc_msgSend(v20, "setWithArray:", v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(v24, "count"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = (void *)objc_msgSend(v19, "mutableCopy");
  objc_msgSend(v26, "minusSet:", v24);
  objc_msgSend(v25, "unionSet:", v26);

  v27 = (void *)objc_msgSend(v24, "mutableCopy");
  objc_msgSend(v27, "minusSet:", v19);
  objc_msgSend(v25, "unionSet:", v27);

  v38 = v24;
  v28 = (void *)objc_msgSend(v24, "mutableCopy");
  v39 = v19;
  objc_msgSend(v28, "intersectSet:", v19);
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v29 = v28;
  v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  if (v30)
  {
    v31 = v30;
    v32 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v31; ++i)
      {
        if (*(_QWORD *)v44 != v32)
          objc_enumerationMutation(v29);
        v34 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * i);
        objc_msgSend(v8, "objectForKeyedSubscript:", v34);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "objectForKeyedSubscript:", v34);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v35, "isEqual:", v36) & 1) == 0)
          objc_msgSend(v25, "addObject:", v34);

      }
      v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
    }
    while (v31);
  }

  return v25;
}

uint64_t _GEOConfigOptionsForDefaultsSource(unint64_t a1)
{
  if (a1 > 9)
    return 983040;
  else
    return qword_189CC4108[a1];
}

void GEOUserDefaultsTriggerWatchSync(void *a1)
{
  id v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (NanoPreferencesSyncLibraryCore() && getNPSManagerClass())
  {
    j__GEOGetUserDefaultsLog();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v6 = 138543362;
      v7 = v1;
      _os_log_impl(&dword_1885A9000, v2, OS_LOG_TYPE_INFO, "Synchronizing key '%{public}@' to paired watch (if applicable)", (uint8_t *)&v6, 0xCu);
    }

    v3 = objc_alloc_init((Class)getNPSManagerClass());
    if (qword_1ECDBBA88 != -1)
      dispatch_once(&qword_1ECDBBA88, &__block_literal_global_57);
    v4 = qword_1ECDBBA80;
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", v1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject synchronizeUserDefaultsDomain:keys:](v3, "synchronizeUserDefaultsDomain:keys:", v4, v5);

  }
  else
  {
    j__GEOGetUserDefaultsLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v6 = 138543362;
      v7 = v1;
      _os_log_impl(&dword_1885A9000, v3, OS_LOG_TYPE_ERROR, "Unable to synchronizing key '%{public}@' to paired watch (missing NPSManager)", (uint8_t *)&v6, 0xCu);
    }
  }

}

void _GEOResetAllDefaults(int a1)
{
  void *v2;
  void *v3;
  const __CFString *v4;
  const __CFString *v5;
  CFArrayRef v6;
  const __CFArray *v7;
  void *v8;
  void *v9;
  id empty;

  if ((_MergedGlobals_194 & 1) == 0)
  {
    if (_GEODefaultsUseServer)
    {
      empty = xpc_dictionary_create_empty();
      xpc_dictionary_set_string(empty, "message", "defaults.resetAllDefaults");
      _GEODefaultsServerConnection();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      if (a1)
        objc_msgSend(v2, "sendMessageSync:", empty);
      else
        objc_msgSend(v2, "sendMessage:", empty);

    }
    else
    {
      if (qword_1ECDBBA98 != -1)
        dispatch_once(&qword_1ECDBBA98, &__block_literal_global_60);
      v4 = (const __CFString *)*MEMORY[0x1E0C9B260];
      v5 = (const __CFString *)*MEMORY[0x1E0C9B230];
      v6 = CFPreferencesCopyKeyList((CFStringRef)qword_1ECDBBA90, (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
      if (v6)
      {
        v7 = v6;
        if (qword_1ECDBBA98 != -1)
          dispatch_once(&qword_1ECDBBA98, &__block_literal_global_60);
        CFPreferencesSetMultiple(0, v7, (CFStringRef)qword_1ECDBBA90, v4, v5);
        _GEOConfigProxy();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "configStoreForSource:", 2);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "resync");

        CFRelease(v7);
      }
    }
  }
}

void _GEOSetAllValuesInStore(uint64_t a1, void *a2)
{
  GEOConfigSetAllValueInStoreRequest *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  GEOConfigSetAllValueInStoreRequest *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  if ((_MergedGlobals_194 & 1) != 0)
    goto LABEL_19;
  if (_GEODefaultsUseServer)
  {
    v3 = -[GEOConfigSetAllValueInStoreRequest initWithTraits:auditToken:throttleToken:]([GEOConfigSetAllValueInStoreRequest alloc], "initWithTraits:auditToken:throttleToken:", 0, 0, 0);
    -[GEOConfigSetAllValueInStoreRequest setKeyOptions:](v3, "setKeyOptions:", a1);
    -[GEOConfigSetAllValueInStoreRequest setKeyStringsAndValues:](v3, "setKeyStringsAndValues:", v12);
    _GEODefaultsServerConnection();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[GEOXPCRequest send:](v3, "send:", v4);
LABEL_18:

    goto LABEL_19;
  }
  v5 = a1 & 0xFF0000;
  if ((a1 & 0xFF0000uLL) < 0x40000)
  {
    if (v5 == 0x10000)
    {
      v6 = 3;
      goto LABEL_16;
    }
    if (v5 == 0x20000)
    {
      v6 = 6;
      goto LABEL_16;
    }
  }
  else
  {
    if ((a1 & 0xFF0000) == 0x40000)
    {
      v6 = 7;
      goto LABEL_16;
    }
    if (v5 == 0x80000)
    {
      v6 = 8;
      goto LABEL_16;
    }
    if (v5 == 983040)
    {
      v6 = 2;
      goto LABEL_16;
    }
  }
  v6 = 0;
LABEL_16:
  _directStoreForSource(v6);
  v7 = (GEOConfigSetAllValueInStoreRequest *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v3 = v7;
    -[GEOConfigSetAllValueInStoreRequest getConfigValueForKey:countryCode:options:source:](v7, "getConfigValueForKey:countryCode:options:source:", 0, 0, 0, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[GEOConfigSetAllValueInStoreRequest setConfigValue:forKey:options:synchronous:](v3, "setConfigValue:forKey:options:synchronous:", v12, CFSTR("/"), 0, 1);
    +[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "countryCode");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    GEOCalculateChangedKeys(v4, v12, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "allObjects");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    _GEOConfigPostKeysChangedNotification(v11, a1);

    goto LABEL_18;
  }
LABEL_19:

}

id GEOGetValuesForKeysForCompanionSync(void *a1)
{
  id v1;
  GEOConfigGetCompanionSyncValuesForKeysRequest *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  id v10;
  uint8_t buf[4];
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((_MergedGlobals_194 & 1) != 0)
  {
    v8 = (void *)MEMORY[0x1E0C9AA70];
  }
  else if (_GEODefaultsUseServer)
  {
    v2 = -[GEOConfigGetCompanionSyncValuesForKeysRequest initWithTraits:auditToken:throttleToken:]([GEOConfigGetCompanionSyncValuesForKeysRequest alloc], "initWithTraits:auditToken:throttleToken:", 0, 0, 0);
    objc_msgSend(v1, "allObjects");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[GEOConfigGetCompanionSyncValuesForKeysRequest setKeyStrings:](v2, "setKeyStrings:", v3);

    _GEODefaultsServerConnection();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 0;
    -[GEOXPCRequest sendSync:error:](v2, "sendSync:error:", v4, &v10);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v10;

    if (v6)
    {
      j__GEOGetUserDefaultsLog();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v12 = v6;
        _os_log_impl(&dword_1885A9000, v7, OS_LOG_TYPE_ERROR, "Received error: \"%@\"", buf, 0xCu);
      }

    }
    objc_msgSend(v5, "keyStringsAndValues");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("___static_key___"));
    _populateMissingKeysFromStore(v1, 0x40000, v8);
    _populateMissingKeysFromStore(v1, 0x20000, v8);
    _populateMissingKeysFromStore(v1, 0x80000, v8);
  }

  return v8;
}

void _populateMissingKeysFromStore(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  _GEOConfigProxy();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "configStoreForOptions:", a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v9 = v5;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v18 != v12)
          objc_enumerationMutation(v9);
        v14 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i);
        objc_msgSend(v6, "objectForKeyedSubscript:", v14, (_QWORD)v17);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v15)
        {
          objc_msgSend(v8, "getConfigValueForKey:countryCode:options:source:", v14, 0, a2, 0);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if (v16)
            objc_msgSend(v6, "setObject:forKeyedSubscript:", v16, v14);

        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v11);
  }

}

void GEOResetAllDefaults()
{
  _GEOResetAllDefaults(0);
}

uint64_t GEOConfig_configEntitlementsForAuditToken(void *a1, const char *a2)
{
  return objc_msgSend(a1, "valuesForEntitlement:", CFSTR("com.apple.GeoServices.Config"));
}

uint64_t GEOConfig_validateEntitlementForKey(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v5 = a1;
  v6 = a2;
  if (objc_msgSend(v5, "hasPrefix:", CFSTR("entitled/")))
  {
    objc_msgSend(v6, "valuesForEntitlement:", CFSTR("com.apple.GeoServices.Config"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v7, "containsObject:", CFSTR("*")) & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      GEOConfig_getRequiredEntitlement(v5);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "containsObject:", v9);
      if ((v8 & 1) == 0)
      {
        v10 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v6, "bundleId");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "stringWithFormat:", CFSTR("Client %@ does not have required GEOConfig entitlement \"%@\" to access key \"%@\""), v11, v9, v5);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:reason:", -10, v12);
        *a3 = (id)objc_claimAutoreleasedReturnValue();

      }
    }

  }
  else
  {
    v8 = 1;
  }

  return v8;
}

uint64_t GEOConfig_keyRequiresEntitlement(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasPrefix:", CFSTR("entitled/"));
}

id GEOConfig_getRequiredEntitlement(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  if (objc_msgSend(v1, "hasPrefix:", CFSTR("entitled/")))
  {
    GEOConfig_splitKeyPathComponents(v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if ((unint64_t)objc_msgSend(v2, "count") < 3)
    {
      v3 = 0;
    }
    else
    {
      objc_msgSend(v2, "objectAtIndexedSubscript:", 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void GEOConfig_createEntitledKeyPathForKey(void *a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a1;
  v5 = a3;
  if (v5 && objc_msgSend(v10, "hasPrefix:", CFSTR("entitled/")))
  {
    objc_msgSend(v5, "getConfigValueForKey:countryCode:options:source:", CFSTR("entitled"), 0, a2, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      objc_msgSend(v5, "setConfigValue:forKey:options:synchronous:", MEMORY[0x1E0C9AA70], CFSTR("entitled"), a2, 1);
    GEOConfig_getRequiredEntitlement(v10);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKeyedSubscript:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(CFSTR("entitled/"), "stringByAppendingString:", v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setConfigValue:forKey:options:synchronous:", MEMORY[0x1E0C9AA70], v9, a2, 1);

    }
  }

}

id GEOConfig_pruneEntitledKeysForAuditToken(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("entitled"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    v17 = v3;
    goto LABEL_19;
  }
  objc_msgSend(v4, "valuesForEntitlement:", CFSTR("com.apple.GeoServices.Config"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "containsObject:", CFSTR("*")))
  {
    v17 = v3;
    goto LABEL_18;
  }
  if (objc_msgSend(v6, "count"))
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("entitled"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v7, "mutableCopy");

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v8, "allKeys");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v21;
        do
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v21 != v12)
              objc_enumerationMutation(v9);
            v14 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * i);
            if ((objc_msgSend(v6, "containsObject:", v14) & 1) == 0)
              objc_msgSend(v8, "setObject:forKeyedSubscript:", 0, v14);
          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        }
        while (v11);
      }
      v15 = (void *)objc_msgSend(v3, "mutableCopy");
      v16 = (void *)objc_msgSend(v8, "copy");
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v16, CFSTR("entitled"));

      v17 = (id)objc_msgSend(v15, "copy");
      goto LABEL_17;
    }
    v18 = v3;
  }
  else
  {
    v8 = (void *)objc_msgSend(v3, "mutableCopy");
    objc_msgSend(v8, "setObject:forKeyedSubscript:", 0, CFSTR("entitled"));
    v18 = (id)objc_msgSend(v8, "copy");
  }
  v17 = v18;
LABEL_17:

LABEL_18:
LABEL_19:

  return v17;
}

id GEOConfig_migrateEntitledKey(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v7 = a1;
  v8 = a3;
  if (objc_msgSend(v7, "hasPrefix:", CFSTR("entitled/")))
  {
    GEOConfig_stripEntitlement(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "getConfigValueForKey:countryCode:options:source:", v9, 0, a2, a4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v8, "setConfigValue:forKey:options:synchronous:", 0, v9, a2, 1);
      GEOConfig_createEntitledKeyPathForKey(v7, a2, v8);
      objc_msgSend(v8, "setConfigValue:forKey:options:synchronous:", v10, v7, a2, 1);
      v11 = v10;
    }
    else
    {
      v11 = 0;
    }

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

uint64_t GEOQuadKeyForCoordinate(char a1, double a2, double a3, uint64_t a4, uint64_t a5, const unsigned __int8 *a6)
{
  unsigned __int8 v6;
  uint64_t v7;
  _BYTE v9[9];
  double v10;

  *(double *)&v9[1] = a2;
  v10 = a3;
  v9[0] = a1;
  gloria::TileId::FromLatLng((gloria::TileId *)&v9[1], &v10, (const double *)v9, a6);
  return v7 | gloria::LEADING_BITS_VALUE_LUT[v6];
}

unint64_t GEOQuadKeyAncestorAt(unint64_t a1, unsigned int a2)
{
  int v2;
  int v3;
  unint64_t v4;
  __int16 v6[8];

  v2 = __clz(a1);
  v3 = (int)((63 - v2 + (((63 - v2) & 0x80u) >> 7)) << 24) >> 25;
  if (a2 >= v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      v6[0] = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: zoom < tileID.zoom()", (uint8_t *)v6, 2u);
    }
    return 0;
  }
  else
  {
    v4 = (a1 - gloria::LEADING_BITS_VALUE_LUT[v3]) >> (2 * (v3 - a2));
    if (!a2)
      v4 = 0;
    return v4 | gloria::LEADING_BITS_VALUE_LUT[a2];
  }
}

void sub_1889EFA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;

  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1889EFB70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1889EFBE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1889EFC54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1889EFCA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1889F0070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20)
{
  void *v20;
  void *v21;

  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&a19, a20);

  _Unwind_Resume(a1);
}

BOOL _quadKeySetsMatch(void *a1, _QWORD *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _BOOL8 v13;

  v3 = a1;
  if (objc_msgSend(v3, "count") && objc_msgSend(v3, "count") == a2[2])
  {
    v6 = (_QWORD *)*a2;
    v4 = a2 + 1;
    v5 = v6;
    if (v6 == v4)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      do
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v5[4]);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v3, "containsObject:", v8);

        if ((v9 & 1) == 0)
          break;
        v10 = (_QWORD *)v5[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v5[2];
            v12 = *v11 == (_QWORD)v5;
            v5 = v11;
          }
          while (!v12);
        }
        v7 += v9;
        v5 = v11;
      }
      while (v11 != v4);
    }
    v13 = v7 == objc_msgSend(v3, "count");
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_1889F01E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1889F044C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void *v24;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1889F0970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  uint64_t v29;

  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(v29 - 160, *(_QWORD **)(v29 - 152));
  _Block_object_dispose(&a28, 8);

  _Unwind_Resume(a1);
}

void sub_1889F0B28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void geo::DbReaderTarFileDescriptor::absolutePath(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

std::string::size_type geo::GloriaDB::QuadKey::ReadFrom(uint64_t a1, std::string *this)
{
  return std::string::copy(this, (std::string::value_type *)(a1 + 8), 8uLL, 0);
}

std::string *geo::GloriaDB::QuadKey::WriteTo(uint64_t a1, std::string *this)
{
  return std::string::replace(this, 0, 8uLL, (const std::string::value_type *)(a1 + 8));
}

_QWORD *geo::GloriaDB::QuadKey::clone(geo::GloriaDB::QuadKey *this)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *((_QWORD *)this + 1);
  *result = off_1E1BF6978;
  result[1] = v3;
  return result;
}

void geo::TarBuffer::~TarBuffer(void **this)
{
  *this = &unk_1E1BF7248;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
}

{
  *this = &unk_1E1BF7248;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  JUMPOUT(0x18D76437CLL);
}

void std::__shared_ptr_pointer<geo::GloriaDB::QuadKey *,std::shared_ptr<gloria::RecordAttribute>::__shared_ptr_default_delete<gloria::RecordAttribute,geo::GloriaDB::QuadKey>,std::allocator<geo::GloriaDB::QuadKey>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D76437CLL);
}

uint64_t std::__shared_ptr_pointer<geo::GloriaDB::QuadKey *,std::shared_ptr<gloria::RecordAttribute>::__shared_ptr_default_delete<gloria::RecordAttribute,geo::GloriaDB::QuadKey>,std::allocator<geo::GloriaDB::QuadKey>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<geo::DbReaderTarFileDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB4F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::DbReaderTarFileDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB4F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D76437CLL);
}

void sub_1889F10FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1889F1268(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1889F12D4(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1889F13D4(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1889F1560(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1889F15E0(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKey64Value32PairReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _BOOL8 v32;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 20) |= 2u;
          while (1)
          {
            v28 = *v4;
            v29 = *(_QWORD *)&v3[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&v3[*v5])
              break;
            v31 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
            *(_QWORD *)&v3[v28] = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if ((v31 & 0x80) == 0)
              goto LABEL_42;
            v25 += 7;
            v15 = v26++ >= 9;
            if (v15)
            {
              LODWORD(v27) = 0;
              goto LABEL_44;
            }
          }
          v3[*v6] = 1;
LABEL_42:
          if (v3[*v6])
            LODWORD(v27) = 0;
LABEL_44:
          *(_DWORD *)(a1 + 16) = v27;
        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_38;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_40;
            }
          }
          v3[*v6] = 1;
LABEL_38:
          if (v3[*v6])
            v20 = 0;
LABEL_40:
          *(_QWORD *)(a1 + 8) = v20;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_47;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v32 = v3[*v6] == 0;
  }
  else
  {
LABEL_47:
    v32 = 0;
  }
  objc_sync_exit(v3);

  return v32;
}

void sub_1889F43D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889F4AA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKey64Value64PairReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _BOOL8 v33;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v27 = 0;
          v28 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v20 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
            {
              v26 = &OBJC_IVAR___GEOPDSearchKey64Value64Pair__value;
              goto LABEL_40;
            }
            v27 += 7;
            v25 = v28++ > 8;
            if (v25)
            {
              v20 = 0;
              v26 = &OBJC_IVAR___GEOPDSearchKey64Value64Pair__value;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOPDSearchKey64Value64Pair__value;
LABEL_39:
          v3[*v6] = 1;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_48;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEOPDSearchKey64Value64Pair__key;
              goto LABEL_39;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              v20 = 0;
              v26 = &OBJC_IVAR___GEOPDSearchKey64Value64Pair__key;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOPDSearchKey64Value64Pair__key;
        }
LABEL_40:
        if (v3[*v6])
          v20 = 0;
LABEL_42:
        *(_QWORD *)(a1 + *v26) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_1889F51DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889F58A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKey64ValueBoolPairReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _BOOL8 v32;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 20) |= 2u;
          while (1)
          {
            v28 = *v4;
            v29 = *(_QWORD *)&v3[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&v3[*v5])
              break;
            v31 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
            *(_QWORD *)&v3[v28] = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if ((v31 & 0x80) == 0)
              goto LABEL_42;
            v25 += 7;
            v15 = v26++ >= 9;
            if (v15)
            {
              v27 = 0;
              goto LABEL_44;
            }
          }
          v3[*v6] = 1;
LABEL_42:
          if (v3[*v6])
            v27 = 0;
LABEL_44:
          *(_BYTE *)(a1 + 16) = v27 != 0;
        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_38;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_40;
            }
          }
          v3[*v6] = 1;
LABEL_38:
          if (v3[*v6])
            v20 = 0;
LABEL_40:
          *(_QWORD *)(a1 + 8) = v20;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_47;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v32 = v3[*v6] == 0;
  }
  else
  {
LABEL_47:
    v32 = 0;
  }
  objc_sync_exit(v3);

  return v32;
}

void sub_1889F5FDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889F66AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKey64ValueDoublePairReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          *(_BYTE *)(a1 + 24) |= 2u;
          v25 = *v4;
          v26 = *(_QWORD *)&v3[v25];
          if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v27 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v26);
            *(_QWORD *)&v3[v25] = v26 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v27 = 0;
          }
          *(_QWORD *)(a1 + 16) = v27;
        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_34;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6])
            v20 = 0;
LABEL_36:
          *(_QWORD *)(a1 + 8) = v20;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_41;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v28 = v3[*v6] == 0;
  }
  else
  {
LABEL_41:
    v28 = 0;
  }
  objc_sync_exit(v3);

  return v28;
}

void sub_1889F6DA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889F74D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKey64ValuePairReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          PBReaderReadString();
          v25 = objc_claimAutoreleasedReturnValue();
          v26 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v25;

        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            v20 = 0;
LABEL_34:
          *(_QWORD *)(a1 + 8) = v20;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_1889F7B60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889F8240(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKeyDoubleValue64PairReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  _BOOL8 v28;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v24 = *v4;
            v25 = *(_QWORD *)&v3[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&v3[*v5])
              break;
            v27 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v25);
            *(_QWORD *)&v3[v24] = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if ((v27 & 0x80) == 0)
              goto LABEL_34;
            v21 += 7;
            v15 = v22++ >= 9;
            if (v15)
            {
              v23 = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6])
            v23 = 0;
LABEL_36:
          *(_QWORD *)(a1 + 16) = v23;
        }
        else if ((v10 >> 3) == 1)
        {
          *(_BYTE *)(a1 + 24) |= 1u;
          v18 = *v4;
          v19 = *(_QWORD *)&v3[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v19);
            *(_QWORD *)&v3[v18] = v19 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v20 = 0;
          }
          *(_QWORD *)(a1 + 8) = v20;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_41;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v28 = v3[*v6] == 0;
  }
  else
  {
LABEL_41:
    v28 = 0;
  }
  objc_sync_exit(v3);

  return v28;
}

void sub_1889F8934(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889F9078(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKeyDoubleValueDoublePairReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  _BOOL8 v24;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          *(_BYTE *)(a1 + 24) |= 2u;
          v21 = *v4;
          v22 = *(_QWORD *)&v3[v21];
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v22 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v20 = 0;
          }
          v23 = &OBJC_IVAR___GEOPDSearchKeyDoubleValueDoublePair__value;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_36;
            continue;
          }
          *(_BYTE *)(a1 + 24) |= 1u;
          v18 = *v4;
          v19 = *(_QWORD *)&v3[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v19);
            *(_QWORD *)&v3[v18] = v19 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v20 = 0;
          }
          v23 = &OBJC_IVAR___GEOPDSearchKeyDoubleValueDoublePair__key;
        }
        *(_QWORD *)(a1 + *v23) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v24 = v3[*v6] == 0;
  }
  else
  {
LABEL_36:
    v24 = 0;
  }
  objc_sync_exit(v3);

  return v24;
}

void sub_1889F9738(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889F9ED0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKeyValue32PairReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&v3[*v5])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
            *(_QWORD *)&v3[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_32;
            v20 += 7;
            v15 = v21++ >= 9;
            if (v15)
            {
              LODWORD(v22) = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            LODWORD(v22) = 0;
LABEL_34:
          *(_DWORD *)(a1 + 16) = v22;
        }
        else if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v18;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_1889FA550(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889FAC40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKeyValue64PairReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&v3[*v5])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
            *(_QWORD *)&v3[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_32;
            v20 += 7;
            v15 = v21++ >= 9;
            if (v15)
            {
              v22 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            v22 = 0;
LABEL_34:
          *(_QWORD *)(a1 + 16) = v22;
        }
        else if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v18;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_1889FB2C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889FB9B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKeyValueBoolPairReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&v3[*v5])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
            *(_QWORD *)&v3[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_32;
            v20 += 7;
            v15 = v21++ >= 9;
            if (v15)
            {
              v22 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            v22 = 0;
LABEL_34:
          *(_BYTE *)(a1 + 16) = v22 != 0;
        }
        else if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v18;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_1889FC038(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889FC730(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchKeyValueBytesPairReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  BOOL v15;
  int *v16;
  int *v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  int v38;
  char v39;
  char v40;
  char v41;
  int v42;
  int v43;
  void *v44;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v7 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1)
    v14 = 0;
  else
    v14 = a3;
  if (v12)
    v15 = 1;
  else
    v15 = v14 == 0;
  v16 = (int *)MEMORY[0x1E0D82BF0];
  v17 = (int *)MEMORY[0x1E0D82BC8];
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_62;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v16;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      if (v20++ >= 9)
      {
        v21 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_27:
    v27 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v21 = 0;
LABEL_29:
    if (v27 || (v21 & 7) == 4)
    {
LABEL_62:
      if (v13)
      {
        v41 = 1;
        goto LABEL_72;
      }
      if (v14)
      {
        do
        {
          while (1)
          {
            v43 = *v14++;
            v42 = v43;
            if (v43 != 1 && v42 != 2)
              break;
            *(_BYTE *)(a1 + 44) |= v42;
          }
        }
        while (v42);
      }
      goto LABEL_73;
    }
    v29 = v21 >> 3;
    v30 = v13;
    if (!v15)
    {
      v31 = v14;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 != 2)
    {
      if ((_DWORD)v29 != 1)
      {
        v38 = PBReaderSkipValueWithTag();
        v17 = (int *)MEMORY[0x1E0D82BC8];
        if (!v38)
          goto LABEL_70;
        goto LABEL_58;
      }
      if (v30)
      {
        if ((*(_BYTE *)(a1 + 44) & 1) == 0)
        {
          PBReaderReadString();
          v35 = objc_claimAutoreleasedReturnValue();
          v36 = 16;
          goto LABEL_48;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_71;
        v9 -= *(_BYTE *)(a1 + 44) & 1;
LABEL_57:
        v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_58:
        if (v9)
          v40 = 1;
        else
          v40 = v13;
        if ((v40 & 1) == 0)
          goto LABEL_62;
        continue;
      }
LABEL_51:
      v39 = PBReaderSkipValueWithTag();
      v17 = (int *)MEMORY[0x1E0D82BC8];
      if ((v39 & 1) == 0)
      {
LABEL_70:
        v41 = 0;
        goto LABEL_72;
      }
      goto LABEL_58;
    }
    break;
  }
  if (!v30)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    PBReaderReadData();
    v35 = objc_claimAutoreleasedReturnValue();
    v36 = 24;
LABEL_48:
    v37 = *(void **)(a1 + v36);
    *(_QWORD *)(a1 + v36) = v35;

    v17 = (int *)MEMORY[0x1E0D82BC8];
    --v9;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
    goto LABEL_57;
  }
LABEL_71:
  v41 = 0;
  v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_72:
  *(_BYTE *)(a1 + 44) |= 1u;
  *(_BYTE *)(a1 + 44) |= 2u;
  if ((v41 & 1) != 0)
  {
LABEL_73:
    v3 = *(_BYTE *)(v3 + *v17) == 0;
    if (!v13)
      return v3;
    goto LABEL_74;
  }
  v3 = 0;
  if (v13)
  {
LABEL_74:
    v44 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1889FD0F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889FD1BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchKeyValueBytesPairReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDSearchKeyValueBytesPairReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 32) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 36) = objc_msgSend(v6, "length");
      Specified = GEOPDSearchKeyValueBytesPairReadSpecified(a1, (unint64_t)v6, (int *)&GEOPDSearchKeyValueBytesPairReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_1889FD334(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889FD4A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889FD5F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1889FDC00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKeyValueDoublePairReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          *(_BYTE *)(a1 + 24) |= 1u;
          v20 = *v4;
          v21 = *(_QWORD *)&v3[v20];
          if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v22 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v21);
            *(_QWORD *)&v3[v20] = v21 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v22 = 0;
          }
          *(_QWORD *)(a1 + 16) = v22;
        }
        else if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v18;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_31;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v23 = v3[*v6] == 0;
  }
  else
  {
LABEL_31:
    v23 = 0;
  }
  objc_sync_exit(v3);

  return v23;
}

void sub_1889FE360(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKeyValueDoublePairIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if (v16 != 1)
          goto LABEL_33;
        v18 = *v2;
        v19 = *(_QWORD *)&a1[v18];
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && (v20 = v19 + 8, v20 <= *(_QWORD *)&a1[*v3]))
          *(_QWORD *)&a1[v18] = v20;
        else
          a1[v14] = 1;
      }
      else if ((v8 >> 3) == 1)
      {
        if (v16 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_33:
          v21 = 0;
          goto LABEL_32;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_33;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v21 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v21;
}

void sub_1889FECA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKeyValueFloatPairReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  _BOOL8 v23;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          *(_BYTE *)(a1 + 20) |= 1u;
          v20 = *v4;
          v21 = *(_QWORD *)&v3[v20];
          if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)&v3[*v5])
          {
            v22 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v21);
            *(_QWORD *)&v3[v20] = v21 + 4;
          }
          else
          {
            v3[*v6] = 1;
            v22 = 0;
          }
          *(_DWORD *)(a1 + 16) = v22;
        }
        else if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v18;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_31;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v23 = v3[*v6] == 0;
  }
  else
  {
LABEL_31:
    v23 = 0;
  }
  objc_sync_exit(v3);

  return v23;
}

void sub_1889FF404(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKeyValueFloatPairIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if (v16 != 5)
          goto LABEL_33;
        v18 = *v2;
        v19 = *(_QWORD *)&a1[v18];
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && (v20 = v19 + 4, v20 <= *(_QWORD *)&a1[*v3]))
          *(_QWORD *)&a1[v18] = v20;
        else
          a1[v14] = 1;
      }
      else if ((v8 >> 3) == 1)
      {
        if (v16 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_33:
          v21 = 0;
          goto LABEL_32;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_33;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v21 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v21;
}

unint64_t GEOPDSearchKeyValuePairReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  int *v15;
  int *v16;
  BOOL v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  int v38;
  char v39;
  char v40;
  char v41;
  int v42;
  int v43;
  void *v44;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v7 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1)
    v14 = 0;
  else
    v14 = a3;
  v15 = (int *)MEMORY[0x1E0D82BF0];
  v16 = (int *)MEMORY[0x1E0D82BC8];
  if (v12)
    v17 = 1;
  else
    v17 = v14 == 0;
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v16))
      goto LABEL_62;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v15;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      if (v20++ >= 9)
      {
        v21 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v16);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v16) = 1;
LABEL_27:
    v27 = *(unsigned __int8 *)(v3 + *v16);
    if (*(_BYTE *)(v3 + *v16))
      v21 = 0;
LABEL_29:
    if (v27 || (v21 & 7) == 4)
    {
LABEL_62:
      if (v13)
      {
        v41 = 1;
        goto LABEL_72;
      }
      if (v14)
      {
        do
        {
          while (1)
          {
            v43 = *v14++;
            v42 = v43;
            if (v43 != 1 && v42 != 2)
              break;
            *(_BYTE *)(a1 + 44) |= v42;
          }
        }
        while (v42);
      }
      goto LABEL_73;
    }
    v29 = v21 >> 3;
    v30 = v13;
    if (!v17)
    {
      v31 = v14;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 != 2)
    {
      if ((_DWORD)v29 != 1)
      {
        v38 = PBReaderSkipValueWithTag();
        v16 = (int *)MEMORY[0x1E0D82BC8];
        if (!v38)
          goto LABEL_70;
        goto LABEL_58;
      }
      if (v30)
      {
        if ((*(_BYTE *)(a1 + 44) & 1) == 0)
        {
          PBReaderReadString();
          v35 = objc_claimAutoreleasedReturnValue();
          v36 = 16;
          goto LABEL_48;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_71;
        v9 -= *(_BYTE *)(a1 + 44) & 1;
LABEL_57:
        v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_58:
        if (v9)
          v40 = 1;
        else
          v40 = v13;
        if ((v40 & 1) == 0)
          goto LABEL_62;
        continue;
      }
LABEL_51:
      v39 = PBReaderSkipValueWithTag();
      v16 = (int *)MEMORY[0x1E0D82BC8];
      if ((v39 & 1) == 0)
      {
LABEL_70:
        v41 = 0;
        goto LABEL_72;
      }
      goto LABEL_58;
    }
    break;
  }
  if (!v30)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    PBReaderReadString();
    v35 = objc_claimAutoreleasedReturnValue();
    v36 = 24;
LABEL_48:
    v37 = *(void **)(a1 + v36);
    *(_QWORD *)(a1 + v36) = v35;

    v16 = (int *)MEMORY[0x1E0D82BC8];
    --v9;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
    goto LABEL_57;
  }
LABEL_71:
  v41 = 0;
  v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_72:
  *(_BYTE *)(a1 + 44) |= 1u;
  *(_BYTE *)(a1 + 44) |= 2u;
  if ((v41 & 1) != 0)
  {
LABEL_73:
    v3 = *(_BYTE *)(v3 + *v16) == 0;
    if (!v13)
      return v3;
    goto LABEL_74;
  }
  v3 = 0;
  if (v13)
  {
LABEL_74:
    v44 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1889FFF50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A0001C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchKeyValuePairReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDSearchKeyValuePairReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDSearchKeyValuePairReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDSearchKeyValuePairReadAllFrom_initialTag;
  Specified = GEOPDSearchKeyValuePairReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_188A00314(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKeyValuePairIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_27;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_27;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2)
          goto LABEL_29;
        goto LABEL_23;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_29:
        v17 = 0;
        goto LABEL_28;
      }
LABEL_26:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_27;
    }
    if (v15 != 2)
      goto LABEL_29;
LABEL_23:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_29;
    goto LABEL_26;
  }
LABEL_27:
  v17 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v17;
}

void sub_188A00640(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKeyValuePairIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 44) & 7) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_188A0080C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKeyValuePairListReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v18;
  GEOPDSearchKeyValuePair *v20;
  _BOOL8 v21;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          if (v11++ >= 9)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v20 = objc_alloc_init(GEOPDSearchKeyValuePair);
          if (!GEOPDSearchKeyValuePairReadAllFrom((uint64_t)v20, v5, a3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          -[GEOPDSearchKeyValuePairList addPairs:](a1, v20);

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v21 = v5[*v8] == 0;
  }
  else
  {
LABEL_27:
    v21 = 0;
  }
  objc_sync_exit(v5);

  return v21;
}

void sub_188A00FC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKeyValuePairListIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDSearchKeyValuePairIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_188A0166C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_188A02000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_188A020F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_188A02304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_188A02540(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t GEOPDFeatureBuildingReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  GEOPDVenueLevel *v38;
  uint64_t v39;
  void *v40;
  id v41;
  void *v42;
  int v43;
  char v44;
  char v45;
  int v46;
  char v47;
  void *v48;
  int v50;
  int *v51;
  char v52;
  char v53;
  char v54;
  BOOL v55;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v52 = v17;
        v53 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v54 = (v19 == 0) | v18;
        v55 = v18;
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_72;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      if (v27 == -1 || v27 >= *(_QWORD *)(v3 + *v6))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v27 + 1;
      v25 |= (unint64_t)(v28 & 0x7F) << v23;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v30 || (v25 & 7) == 4)
    {
LABEL_72:
      v50 = 1;
      goto LABEL_73;
    }
    v32 = v25 >> 3;
    v33 = v55;
    if ((v54 & 1) == 0)
    {
      v34 = v19;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    if ((_DWORD)v32 == 3)
    {
      if (!v33 || (*(_BYTE *)(a1 + 60) & 4) != 0)
      {
LABEL_63:
        v44 = PBReaderSkipValueWithTag();
        v21 = (int *)MEMORY[0x1E0D82BC8];
        if ((v44 & 1) == 0)
        {
          v50 = 0;
          goto LABEL_73;
        }
        goto LABEL_71;
      }
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_89;
      v38 = objc_alloc_init(GEOPDVenueLevel);
      if (!GEOPDVenueLevelReadAllFrom((uint64_t)v38, (void *)v3, v10 & 1))
        goto LABEL_88;
      PBReaderRecallMark();
      -[GEOPDFeatureBuilding _addNoFlagsLevel:](a1, v38);

      goto LABEL_70;
    }
    if ((_DWORD)v32 == 2)
      break;
    if ((_DWORD)v32 == 1)
    {
      if (!v33)
        goto LABEL_63;
      if ((*(_BYTE *)(a1 + 60) & 8) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_89;
        v38 = objc_alloc_init(GEOPDVenueContainer);
        if (!GEOPDVenueContainerReadAllFrom((uint64_t)v38, (void *)v3, v10 & 1))
          goto LABEL_88;
        PBReaderRecallMark();
        v39 = 40;
LABEL_56:
        v40 = *(void **)(a1 + v39);
        *(_QWORD *)(a1 + v39) = v38;

        --v7;
LABEL_70:
        v21 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_71;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_89;
      v45 = 16 * *(_BYTE *)(a1 + 60);
LABEL_69:
      v7 += v45 >> 7;
      goto LABEL_70;
    }
    if ((v52 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 1) != 0)
      goto LABEL_63;
    if (!*(_QWORD *)(a1 + 16))
    {
      v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v42 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v41;

    }
    v43 = PBUnknownFieldAdd();
    v21 = (int *)MEMORY[0x1E0D82BC8];
    if (!v43)
    {
      v50 = 0;
      v51 = &OBJC_IVAR___GEOTransitVehicleInfo__pickupDropoffType;
      goto LABEL_74;
    }
LABEL_71:
    if (!(v53 & 1 | (v7 != 0)))
      goto LABEL_72;
  }
  if (!v33)
    goto LABEL_63;
  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_89;
    v45 = *(_BYTE *)(a1 + 60) << 6;
    goto LABEL_69;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_89;
  v38 = objc_alloc_init(GEOPDVenueBuilding);
  if (GEOPDVenueBuildingReadAllFrom((uint64_t)v38, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    v39 = 24;
    goto LABEL_56;
  }
LABEL_88:

LABEL_89:
  v50 = 0;
  v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_73:
  v51 = &OBJC_IVAR___GEOTransitVehicleInfo__pickupDropoffType;
  if ((v52 & 1) == 0)
    goto LABEL_75;
LABEL_74:
  *(_BYTE *)(a1 + v51[61]) |= 1u;
LABEL_75:
  if (v55 || (v50 & 1) == 0)
  {
    *(_BYTE *)(a1 + v51[61]) |= 8u;
    *(_BYTE *)(a1 + v51[61]) |= 2u;
    *(_BYTE *)(a1 + v51[61]) |= 4u;
  }
  else if (v19)
  {
    while (1)
    {
      v46 = *v19++;
      v47 = 8;
      switch(v46)
      {
        case 0:
          goto LABEL_82;
        case 1:
          goto LABEL_81;
        case 2:
          v47 = 2;
          goto LABEL_81;
        case 3:
          v47 = 4;
LABEL_81:
          *(_BYTE *)(a1 + v51[61]) |= v47;
          break;
        default:
          continue;
      }
    }
  }
LABEL_82:
  if (v50)
    v3 = *(_BYTE *)(v3 + *v21) == 0;
  else
    v3 = 0;
  if (v55)
  {
    v48 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_188A04164(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A04244(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPDFeatureBuildingCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  -[GEOPDVenueContainer readAll:](*(_QWORD *)(a1 + 40), 1);
  -[GEOPDVenueBuilding readAll:](*(_QWORD *)(a1 + 24), 1);
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v7;
    while (1)
    {
      if (*(_QWORD *)v7 != v5)
        objc_enumerationMutation(v2);
      if (!--v4)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
        if (!v4)
          break;
      }
    }
  }

}

unint64_t GEOPDFeatureBuildingReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDFeatureBuildingReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDFeatureBuildingReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDFeatureBuildingReadAllFrom_initialTag;
  Specified = GEOPDFeatureBuildingReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDFeatureBuildingCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_188A045A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A047E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDFeatureBuildingIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = *(unsigned __int8 *)(a1 + 60);
  if ((v2 & 0x10) != 0)
    return 1;
  if ((v2 & 8) != 0)
  {
    if ((GEOPDVenueContainerIsDirty(*(os_unfair_lock_s **)(a1 + 40)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 60);
  }
  if ((v2 & 2) != 0)
  {
    if ((GEOPDVenueBuildingIsDirty(*(os_unfair_lock_s **)(a1 + 24)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 60);
  }
  return (v2 >> 2) & 1;
}

void sub_188A04B7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDFeaturePOIReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  GEOPDVenueContainer *v38;
  uint64_t v39;
  id v40;
  void *v41;
  int v42;
  void *v43;
  char v44;
  char v45;
  int v46;
  char v47;
  void *v48;
  int v50;
  int *v51;
  char v52;
  char v53;
  char v54;
  BOOL v55;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 68)), (uint16x4_t)0xFFFEFFFDFFFCFFFFLL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 68) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 2;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v52 = v17;
        v53 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v54 = (v19 == 0) | v18;
        v55 = v18;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_77;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      if (v27 == -1 || v27 >= *(_QWORD *)(v3 + *v6))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v27 + 1;
      v25 |= (unint64_t)(v28 & 0x7F) << v23;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v30 || (v25 & 7) == 4)
    {
LABEL_77:
      v50 = 1;
      goto LABEL_78;
    }
    v32 = v25 >> 3;
    v33 = v55;
    if ((v54 & 1) == 0)
    {
      v34 = v19;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if (!v33)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 68) & 0x10) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_95;
          v38 = objc_alloc_init(GEOPDVenueContainer);
          if (GEOPDVenueContainerReadAllFrom((uint64_t)v38, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            v39 = 48;
            goto LABEL_65;
          }
          goto LABEL_94;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_95;
        v45 = 8 * *(_BYTE *)(a1 + 68);
        goto LABEL_74;
      case 2:
        if (!v33)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 68) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_95;
          v45 = *(_BYTE *)(a1 + 68) << 6;
          goto LABEL_74;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_95;
        v38 = objc_alloc_init(GEOPDVenueBuilding);
        if (!GEOPDVenueBuildingReadAllFrom((uint64_t)v38, (void *)v3, v10 & 1))
          goto LABEL_94;
        PBReaderRecallMark();
        v39 = 24;
        goto LABEL_65;
      case 3:
        if (!v33 || (*(_BYTE *)(a1 + 68) & 8) != 0)
          goto LABEL_66;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_95;
        v38 = objc_alloc_init(GEOPDVenueLevel);
        if (!GEOPDVenueLevelReadAllFrom((uint64_t)v38, (void *)v3, v10 & 1))
          goto LABEL_94;
        PBReaderRecallMark();
        -[GEOPDFeaturePOI _addNoFlagsLevel:](a1, v38);

        goto LABEL_75;
      case 4:
        if (!v33)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 68) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_95;
          v45 = 32 * *(_BYTE *)(a1 + 68);
LABEL_74:
          v7 += v45 >> 7;
LABEL_75:
          v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_76:
          if (!(v53 & 1 | (v7 != 0)))
            goto LABEL_77;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_95;
        v38 = objc_alloc_init(GEOPDVenueDirectoryGroup);
        if (GEOPDVenueDirectoryGroupReadAllFrom((uint64_t)v38, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v39 = 32;
LABEL_65:
          v43 = *(void **)(a1 + v39);
          *(_QWORD *)(a1 + v39) = v38;

          --v7;
          goto LABEL_75;
        }
LABEL_94:

LABEL_95:
        v50 = 0;
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_78:
        v51 = &OBJC_IVAR___GEOTransitVehicleInfo__pickupDropoffType;
        if ((v52 & 1) != 0)
LABEL_79:
          *(_BYTE *)(a1 + v51[70]) |= 1u;
        if (v55 || (v50 & 1) == 0)
        {
          *(_BYTE *)(a1 + v51[70]) |= 0x10u;
          *(_BYTE *)(a1 + v51[70]) |= 2u;
          *(_BYTE *)(a1 + v51[70]) |= 8u;
          *(_BYTE *)(a1 + v51[70]) |= 4u;
        }
        else if (v19)
        {
          while (1)
          {
            v46 = *v19++;
            v47 = 16;
            switch(v46)
            {
              case 0:
                goto LABEL_88;
              case 1:
                goto LABEL_87;
              case 2:
                v47 = 2;
                goto LABEL_87;
              case 3:
                v47 = 8;
                goto LABEL_87;
              case 4:
                v47 = 4;
LABEL_87:
                *(_BYTE *)(a1 + v51[70]) |= v47;
                break;
              default:
                continue;
            }
          }
        }
LABEL_88:
        if (v50)
          v3 = *(_BYTE *)(v3 + *v21) == 0;
        else
          v3 = 0;
        if (v55)
        {
          v48 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v52 & 1) == 0 || (*(_BYTE *)(a1 + 68) & 1) != 0)
        {
LABEL_66:
          v44 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if ((v44 & 1) == 0)
          {
            v50 = 0;
            goto LABEL_78;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v41 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v40;

          }
          v42 = PBUnknownFieldAdd();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if (!v42)
          {
            v50 = 0;
            v51 = &OBJC_IVAR___GEOTransitVehicleInfo__pickupDropoffType;
            goto LABEL_79;
          }
        }
        goto LABEL_76;
    }
  }
}

void sub_188A05A88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A05B6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPDFeaturePOICallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  -[GEOPDVenueContainer readAll:](*(_QWORD *)(a1 + 48), 1);
  -[GEOPDVenueBuilding readAll:](*(_QWORD *)(a1 + 24), 1);
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  v2 = *(id *)(a1 + 40);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v7;
    while (1)
    {
      if (*(_QWORD *)v7 != v5)
        objc_enumerationMutation(v2);
      if (!--v4)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
        if (!v4)
          break;
      }
    }
  }

}

unint64_t GEOPDFeaturePOIReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t v6;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDFeaturePOIReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDFeaturePOIReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDFeaturePOIReadAllFrom_initialTag;
  v6 = GEOPDFeaturePOIReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDFeaturePOICallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v6;
}

void sub_188A05EC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A0612C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDFeaturePOIIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = *(unsigned __int8 *)(a1 + 68);
  if ((v2 & 0x20) != 0)
    return 1;
  if ((v2 & 0x10) != 0)
  {
    if ((GEOPDVenueContainerIsDirty(*(os_unfair_lock_s **)(a1 + 48)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 68);
  }
  if ((v2 & 2) != 0)
  {
    if ((GEOPDVenueBuildingIsDirty(*(os_unfair_lock_s **)(a1 + 24)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 68);
  }
  if ((v2 & 8) == 0)
    return (v2 >> 2) & 1;
  return 1;
}

void sub_188A064E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDFeatureVenueReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEOPDVenueLevel *v39;
  void *v40;
  id v41;
  void *v42;
  int v43;
  char v44;
  int v45;
  char v46;
  void *v47;
  int v49;
  int *v50;
  char v51;
  char v52;
  char v53;
  BOOL v54;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v51 = v17;
        v19 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v54 = v18;
        v52 = v19;
        v53 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_69;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v28 + 1;
      v26 |= (unint64_t)(v29 & 0x7F) << v24;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v31 || (v26 & 7) == 4)
    {
LABEL_69:
      v49 = 1;
      goto LABEL_70;
    }
    v33 = v26 >> 3;
    v34 = v54;
    if ((v53 & 1) == 0)
    {
      v35 = v20;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    if ((_DWORD)v33 == 3)
    {
      if (!v34 || (*(_BYTE *)(a1 + 60) & 4) != 0)
      {
LABEL_63:
        v44 = PBReaderSkipValueWithTag();
        v22 = (int *)MEMORY[0x1E0D82BC8];
        if ((v44 & 1) == 0)
        {
          v49 = 0;
          goto LABEL_70;
        }
        goto LABEL_68;
      }
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_86;
      v39 = objc_alloc_init(GEOPDVenueLevel);
      if (!GEOPDVenueLevelReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
        goto LABEL_85;
      PBReaderRecallMark();
      -[GEOPDFeatureVenue _addNoFlagsLevel:](a1, v39);
      goto LABEL_56;
    }
    if ((_DWORD)v33 == 2)
      break;
    if ((_DWORD)v33 == 1)
    {
      if (!v34)
        goto LABEL_63;
      if ((*(_BYTE *)(a1 + 60) & 8) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_86;
        v7 += *(unsigned __int8 *)(a1 + 60) << 28 >> 31;
      }
      else
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_86;
        v39 = objc_alloc_init(GEOPDVenueContainer);
        if (!GEOPDVenueContainerReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_85;
        PBReaderRecallMark();
        v40 = *(void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v39;

        --v7;
      }
      goto LABEL_67;
    }
    if ((v51 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 1) != 0)
      goto LABEL_63;
    if (!*(_QWORD *)(a1 + 16))
    {
      v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v42 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v41;

    }
    v43 = PBUnknownFieldAdd();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if (!v43)
    {
      v49 = 0;
      v50 = &OBJC_IVAR___GEOTransitVehicleInfo__pickupDropoffType;
      goto LABEL_71;
    }
LABEL_68:
    if (!(v52 & 1 | (v7 != 0)))
      goto LABEL_69;
  }
  if (!v34 || (*(_BYTE *)(a1 + 60) & 2) != 0)
    goto LABEL_63;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_86;
  v39 = objc_alloc_init(GEOPDVenueBuilding);
  if (GEOPDVenueBuildingReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOPDFeatureVenue _addNoFlagsBuilding:](a1, v39);
LABEL_56:

LABEL_67:
    v22 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_68;
  }
LABEL_85:

LABEL_86:
  v49 = 0;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_70:
  v50 = &OBJC_IVAR___GEOTransitVehicleInfo__pickupDropoffType;
  if ((v51 & 1) == 0)
    goto LABEL_72;
LABEL_71:
  *(_BYTE *)(a1 + v50[80]) |= 1u;
LABEL_72:
  if (v54 || (v49 & 1) == 0)
  {
    *(_BYTE *)(a1 + v50[80]) |= 8u;
    *(_BYTE *)(a1 + v50[80]) |= 2u;
    *(_BYTE *)(a1 + v50[80]) |= 4u;
  }
  else if (v20)
  {
    while (1)
    {
      v45 = *v20++;
      v46 = 8;
      switch(v45)
      {
        case 0:
          goto LABEL_79;
        case 1:
          goto LABEL_78;
        case 2:
          v46 = 2;
          goto LABEL_78;
        case 3:
          v46 = 4;
LABEL_78:
          *(_BYTE *)(a1 + v50[80]) |= v46;
          break;
        default:
          continue;
      }
    }
  }
LABEL_79:
  if (v49)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v54)
  {
    v47 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_188A07358(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A07434(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPDFeatureVenueCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  -[GEOPDVenueContainer readAll:](*(_QWORD *)(a1 + 40), 1);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v2 = *(id *)(a1 + 24);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v16;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v16 != v5)
          objc_enumerationMutation(v2);
        -[GEOPDVenueBuilding readAll:](*(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v6++), 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
    }
    while (v4);
  }

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v7 = *(id *)(a1 + 32);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v11, v19, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v12;
    while (1)
    {
      if (*(_QWORD *)v12 != v10)
        objc_enumerationMutation(v7);
      if (!--v9)
      {
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v11, v19, 16);
        if (!v9)
          break;
      }
    }
  }

}

unint64_t GEOPDFeatureVenueReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDFeatureVenueReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDFeatureVenueReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDFeatureVenueReadAllFrom_initialTag;
  Specified = GEOPDFeatureVenueReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDFeatureVenueCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_188A07820(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A07AE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDFeatureVenueIsDirty(uint64_t a1)
{
  char v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = *(_BYTE *)(a1 + 60);
  if ((v2 & 0x10) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 60) & 8) != 0)
  {
    if ((GEOPDVenueContainerIsDirty(*(os_unfair_lock_s **)(a1 + 40)) & 1) != 0)
      return 1;
    v2 = *(_BYTE *)(a1 + 60);
  }
  if ((v2 & 6) != 0)
    return 1;
  if ((v2 & 2) == 0)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v5 = *(id *)(a1 + 24);
  v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v6 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v5);
        if ((GEOPDVenueBuildingIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v8 + 1) + 8 * i)) & 1) != 0)
        {
          v3 = 1;
          goto LABEL_20;
        }
      }
      v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_20:

  return v3;
}

void sub_188A080B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A083E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDFilterElementInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEOPDVenueIdentifier *v39;
  void *v40;
  id v41;
  void *v42;
  int v43;
  char v44;
  char v45;
  int v46;
  int v47;
  void *v48;
  int v50;
  int *v51;
  char v52;
  char v53;
  char v54;
  BOOL v55;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v7 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v52 = v17;
        v19 = v18 | v17;
        if (((v18 | v7) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v55 = v18;
        v53 = v19;
        v54 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v8;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_62;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v28 + 1;
      v26 |= (unint64_t)(v29 & 0x7F) << v24;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v31 || (v26 & 7) == 4)
    {
LABEL_62:
      v50 = 1;
      goto LABEL_63;
    }
    v33 = v26 >> 3;
    v34 = v55;
    if ((v54 & 1) == 0)
    {
      v35 = v20;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    if ((_DWORD)v33 == 2)
      break;
    if ((_DWORD)v33 == 1)
    {
      if (v34 && (*(_BYTE *)(a1 + 52) & 2) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_83;
        v39 = objc_alloc_init(GEOPDVenueIdentifier);
        if (!GEOPDVenueIdentifierReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_82;
        PBReaderRecallMark();
        -[GEOPDFilterElementInfo _addNoFlagsFilterId:](a1, v39);

        goto LABEL_60;
      }
    }
    else if ((v52 & 1) != 0 && (*(_BYTE *)(a1 + 52) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v42 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v41;

      }
      v43 = PBUnknownFieldAdd();
      v22 = (int *)MEMORY[0x1E0D82BC8];
      if (!v43)
      {
        v50 = 0;
        v51 = &OBJC_IVAR___GEORawPathGeometry__pathMatcherInstructions;
        goto LABEL_65;
      }
      goto LABEL_61;
    }
LABEL_56:
    v44 = PBReaderSkipValueWithTag();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if ((v44 & 1) == 0)
    {
      v50 = 0;
LABEL_63:
      v51 = &OBJC_IVAR___GEORawPathGeometry__pathMatcherInstructions;
      goto LABEL_64;
    }
LABEL_61:
    if (!(v53 & 1 | (v8 != 0)))
      goto LABEL_62;
  }
  if (!v34)
    goto LABEL_56;
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_83;
    v8 += *(unsigned __int8 *)(a1 + 52) << 29 >> 31;
    goto LABEL_60;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_83;
  v39 = objc_alloc_init(GEOPDVenueLabel);
  if (GEOPDVenueLabelReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    v40 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v39;

    --v8;
LABEL_60:
    v22 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_61;
  }
LABEL_82:

LABEL_83:
  v50 = 0;
  v51 = &OBJC_IVAR___GEORawPathGeometry__pathMatcherInstructions;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_64:
  if ((v52 & 1) == 0)
    goto LABEL_66;
LABEL_65:
  *(_BYTE *)(a1 + v51[42]) |= 1u;
LABEL_66:
  if (v55 || (v50 & 1) == 0)
  {
    *(_BYTE *)(a1 + v51[42]) |= 2u;
    *(_BYTE *)(a1 + v51[42]) |= 4u;
    goto LABEL_76;
  }
  if (v20)
  {
    while (1)
    {
      v47 = *v20++;
      v46 = v47;
      if (v47 == 1)
        break;
      if (v46 == 2)
      {
        v45 = 4;
LABEL_72:
        *(_BYTE *)(a1 + v51[42]) |= v45;
      }
      else if (!v46)
      {
        goto LABEL_76;
      }
    }
    v45 = 2;
    goto LABEL_72;
  }
LABEL_76:
  if (v50)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v55)
  {
    v48 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_188A08B0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A08F74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPDFilterElementInfoCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(a1 + 24);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        -[GEOPDVenueIdentifier readAll:](*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6++), 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

  -[GEOPDVenueLabel readAll:](*(_QWORD *)(a1 + 32), 1);
}

unint64_t GEOPDFilterElementInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDFilterElementInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDFilterElementInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDFilterElementInfoReadAllFrom_initialTag;
  Specified = GEOPDFilterElementInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDFilterElementInfoCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188A092DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A09508(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDFilterElementInfoIsDirty(uint64_t a1)
{
  char v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = *(_BYTE *)(a1 + 52);
  if ((v2 & 0xA) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if (GEOPDVenueLabelIsDirty(*(_QWORD *)(a1 + 32)))
      return 1;
    v2 = *(_BYTE *)(a1 + 52);
  }
  if ((v2 & 2) == 0)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v5 = *(id *)(a1 + 24);
  v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v6 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v5);
        if (GEOPDVenueIdentifierIsDirty(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * i)))
        {
          v3 = 1;
          goto LABEL_19;
        }
      }
      v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_19:

  return v3;
}

void sub_188A098B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDLocatedInsideInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  id v29;
  void *v30;
  _BOOL8 v31;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (1)
          {
            v26 = *v4;
            v27 = *(_QWORD *)&v3[v26];
            if (v27 == -1 || v27 >= *(_QWORD *)&v3[*v5])
              break;
            v28 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v27);
            *(_QWORD *)&v3[v26] = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if ((v28 & 0x80) == 0)
              goto LABEL_44;
            v23 += 7;
            v14 = v24++ >= 9;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          v3[*v6] = 1;
LABEL_44:
          if (v3[*v6])
            LODWORD(v25) = 0;
LABEL_46:
          *(_DWORD *)(a1 + 24) = v25;
        }
        else if ((v10 >> 3) == 1)
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
              break;
            v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
            *(_QWORD *)&v3[v20] = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_40;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_42;
            }
          }
          v3[*v6] = 1;
LABEL_40:
          if (v3[*v6])
            v19 = 0;
LABEL_42:
          *(_QWORD *)(a1 + 16) = v19;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v29 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v30 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v29;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_49;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v31 = v3[*v6] == 0;
  }
  else
  {
LABEL_49:
    v31 = 0;
  }
  objc_sync_exit(v3);

  return v31;
}

void sub_188A0A08C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDVenueBuildingReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  char v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  BOOL v30;
  int v31;
  int v32;
  int *v34;
  int *v35;
  unint64_t v36;
  BOOL v37;
  int *v38;
  int v39;
  int v40;
  BOOL v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  id v48;
  void *v49;
  int v50;
  int v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  GEOPDVenueLabel *v59;
  void *v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  int v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  int v88;
  char v89;
  void *v90;
  char v92;
  char v93;
  int v94;
  char v95;
  char v96;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 100);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 96));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 108)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFDFFFCFFFBLL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        if ((((v16 | v11) | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v94 = 1;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = v17;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_134;
        v92 = v17;
        v95 = v18 | v17;
        v96 = (v19 == 0) | v18;
        v23 = (int *)MEMORY[0x1E0D82BB8];
        v93 = v18;
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v21))
      goto LABEL_132;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v20;
      v28 = *(_QWORD *)(v3 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v28 + 1;
      v26 |= (unint64_t)(v29 & 0x7F) << v24;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      v30 = v25++ >= 9;
      if (v30)
      {
        v26 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v26 = 0;
LABEL_27:
    v32 = v26 & 7;
    if (v31 || v32 == 4)
    {
LABEL_132:
      v94 = 1;
      goto LABEL_133;
    }
    v34 = v6;
    v35 = v21;
    v36 = v26 >> 3;
    v37 = v18;
    if ((v96 & 1) == 0)
    {
      v38 = v19;
      do
      {
        v40 = *v38++;
        v39 = v40;
        v37 = v40 != 0;
        if (v40)
          v41 = v39 == (_DWORD)v36;
        else
          v41 = 1;
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        v21 = v35;
        if ((v8 & 1) == 0)
          goto LABEL_98;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_BYTE *)(a1 + 108) |= 1u;
        v6 = v34;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        while (1)
        {
          v45 = *v20;
          v46 = *(_QWORD *)(v3 + v45);
          if (v46 == -1 || v46 >= *(_QWORD *)(v3 + *v6))
            break;
          v47 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v46);
          *(_QWORD *)(v3 + v45) = v46 + 1;
          v44 |= (unint64_t)(v47 & 0x7F) << v42;
          if ((v47 & 0x80) == 0)
            goto LABEL_102;
          v42 += 7;
          v30 = v43++ >= 9;
          if (v30)
          {
            v44 = 0;
            goto LABEL_104;
          }
        }
        *(_BYTE *)(v3 + *v21) = 1;
LABEL_102:
        if (*(_BYTE *)(v3 + *v21))
          v44 = 0;
LABEL_104:
        v74 = 72;
        goto LABEL_109;
      case 2:
        v21 = v35;
        if (!v37 || (*(_BYTE *)(a1 + 108) & 0x10) != 0)
          goto LABEL_98;
        v6 = v34;
        if (v32 != 2)
        {
          v76 = 0;
          v77 = 0;
          v78 = 0;
          v20 = (int *)MEMORY[0x1E0D82BF0];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v79 = *v20;
            v80 = *(_QWORD *)(v3 + v79);
            if (v80 == -1 || v80 >= *(_QWORD *)(v3 + *v6))
              goto LABEL_127;
            v81 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v80);
            *(_QWORD *)(v3 + v79) = v80 + 1;
            v78 |= (unint64_t)(v81 & 0x7F) << v76;
            if (v81 < 0)
            {
              v76 += 7;
              v30 = v77++ >= 9;
              if (!v30)
                continue;
            }
            goto LABEL_128;
          }
        }
        v51 = PBReaderPlaceMark();
        v20 = (int *)MEMORY[0x1E0D82BF0];
        if (!v51)
          goto LABEL_150;
        v23 = (int *)MEMORY[0x1E0D82BB8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(v3 + *v6))
        {
          do
          {
            if (*(_BYTE *)(v3 + *v21))
              break;
            v52 = 0;
            v53 = 0;
            v54 = 0;
            while (1)
            {
              v55 = *v20;
              v56 = *(_QWORD *)(v3 + v55);
              if (v56 == -1 || v56 >= *(_QWORD *)(v3 + *v6))
                break;
              v57 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v56);
              *(_QWORD *)(v3 + v55) = v56 + 1;
              v54 |= (unint64_t)(v57 & 0x7F) << v52;
              if (v57 < 0)
              {
                v52 += 7;
                v30 = v53++ >= 9;
                if (!v30)
                  continue;
              }
              goto LABEL_67;
            }
            *(_BYTE *)(v3 + *v21) = 1;
LABEL_67:
            PBRepeatedUInt64Add();
          }
          while (*(_QWORD *)(v3 + *v20) < *(_QWORD *)(v3 + *v6));
        }
        goto LABEL_68;
      case 3:
        v21 = v35;
        if (!v37)
          goto LABEL_98;
        v6 = v34;
        if ((*(_BYTE *)(a1 + 108) & 0x20) != 0)
        {
          v75 = PBReaderSkipValueWithTag();
          v20 = (int *)MEMORY[0x1E0D82BF0];
          if ((v75 & 1) == 0)
            goto LABEL_150;
          v7 += *(unsigned __int8 *)(a1 + 108) << 26 >> 31;
          goto LABEL_112;
        }
        v58 = PBReaderPlaceMark();
        v20 = (int *)MEMORY[0x1E0D82BF0];
        if ((v58 & 1) == 0)
          goto LABEL_150;
        v59 = objc_alloc_init(GEOPDVenueLabel);
        if (GEOPDVenueLabelReadAllFrom((uint64_t)v59, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v60 = *(void **)(a1 + 80);
          *(_QWORD *)(a1 + 80) = v59;

          --v7;
LABEL_112:
          v18 = v93;
          v23 = (int *)MEMORY[0x1E0D82BB8];
LABEL_130:
          if (!(v95 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_132;
          continue;
        }

LABEL_150:
        v94 = 0;
        v18 = v93;
LABEL_133:
        v22 = v92;
LABEL_134:
        if ((v22 & 1) != 0)
LABEL_135:
          *(_BYTE *)(a1 + 108) |= 4u;
        if (v18 & 1 | ((v94 & 1) == 0))
        {
          *(_BYTE *)(a1 + 108) |= 0x10u;
          *(_BYTE *)(a1 + 108) |= 0x20u;
          *(_BYTE *)(a1 + 108) |= 8u;
        }
        else if (v19)
        {
          while (1)
          {
            v88 = *v19++;
            v89 = 16;
            switch(v88)
            {
              case 0:
                goto LABEL_143;
              case 2:
                goto LABEL_142;
              case 3:
                v89 = 32;
                goto LABEL_142;
              case 5:
                v89 = 8;
LABEL_142:
                *(_BYTE *)(a1 + 108) |= v89;
                break;
              default:
                continue;
            }
          }
        }
LABEL_143:
        if (v94)
        {
          v3 = *(_BYTE *)(v3 + *v21) == 0;
          if ((v18 & 1) == 0)
            return v3;
LABEL_147:
          v90 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v18 & 1) != 0)
            goto LABEL_147;
        }
        return v3;
      case 4:
        v21 = v35;
        if ((v8 & 1) == 0)
          goto LABEL_98;
        v61 = 0;
        v62 = 0;
        v44 = 0;
        *(_BYTE *)(a1 + 108) |= 2u;
        v6 = v34;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        while (2)
        {
          v63 = *v20;
          v64 = *(_QWORD *)(v3 + v63);
          if (v64 == -1 || v64 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v64);
            *(_QWORD *)(v3 + v63) = v64 + 1;
            v44 |= (unint64_t)(v65 & 0x7F) << v61;
            if (v65 < 0)
            {
              v61 += 7;
              v30 = v62++ >= 9;
              if (v30)
              {
                v44 = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v44 = 0;
LABEL_108:
        v74 = 88;
LABEL_109:
        *(_QWORD *)(a1 + v74) = v44;
        goto LABEL_130;
      case 5:
        v21 = v35;
        if (!v37 || (*(_BYTE *)(a1 + 108) & 8) != 0)
        {
LABEL_98:
          v73 = PBReaderSkipValueWithTag();
          v18 = v93;
          goto LABEL_99;
        }
        v6 = v34;
        if (v32 == 2)
        {
          v66 = PBReaderPlaceMark();
          v20 = (int *)MEMORY[0x1E0D82BF0];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if (!v66)
            goto LABEL_150;
          while (*(_QWORD *)(v3 + *v20) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v21))
          {
            v67 = 0;
            v68 = 0;
            v69 = 0;
            while (1)
            {
              v70 = *v20;
              v71 = *(_QWORD *)(v3 + v70);
              if (v71 == -1 || v71 >= *(_QWORD *)(v3 + *v6))
                break;
              v72 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v71);
              *(_QWORD *)(v3 + v70) = v71 + 1;
              v69 |= (unint64_t)(v72 & 0x7F) << v67;
              if (v72 < 0)
              {
                v67 += 7;
                v30 = v68++ >= 9;
                if (!v30)
                  continue;
              }
              goto LABEL_96;
            }
            *(_BYTE *)(v3 + *v21) = 1;
LABEL_96:
            PBRepeatedUInt64Add();
          }
LABEL_68:
          PBReaderRecallMark();
        }
        else
        {
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v20 = (int *)MEMORY[0x1E0D82BF0];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v85 = *v20;
            v86 = *(_QWORD *)(v3 + v85);
            if (v86 == -1 || v86 >= *(_QWORD *)(v3 + *v6))
              break;
            v87 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v86);
            *(_QWORD *)(v3 + v85) = v86 + 1;
            v84 |= (unint64_t)(v87 & 0x7F) << v82;
            if (v87 < 0)
            {
              v82 += 7;
              v30 = v83++ >= 9;
              if (!v30)
                continue;
            }
            goto LABEL_128;
          }
LABEL_127:
          *(_BYTE *)(v3 + *v21) = 1;
LABEL_128:
          PBRepeatedUInt64Add();
        }
        v18 = v93;
        goto LABEL_130;
      default:
        if ((v92 & 1) == 0 || (*(_BYTE *)(a1 + 108) & 4) != 0)
        {
          v73 = PBReaderSkipValueWithTag();
          v18 = v93;
          v21 = v35;
LABEL_99:
          v6 = v34;
          v20 = (int *)MEMORY[0x1E0D82BF0];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if ((v73 & 1) == 0)
          {
            v94 = 0;
            goto LABEL_133;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v48 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v49 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v48;

          }
          v50 = PBUnknownFieldAdd();
          v18 = v93;
          v21 = v35;
          v6 = v34;
          v20 = (int *)MEMORY[0x1E0D82BF0];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if (!v50)
          {
            v94 = 0;
            goto LABEL_135;
          }
        }
        goto LABEL_130;
    }
  }
}

void sub_188A0B264(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A0B344(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDVenueBuildingReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 100))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDVenueBuildingReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 96) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 100) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDVenueBuildingReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDVenueBuildingReadAllFrom_initialTag;
  Specified = GEOPDVenueBuildingReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    -[GEOPDVenueLabel readAll:](*(_QWORD *)(a1 + 80), 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
  return Specified;
}

void sub_188A0B5B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A0B7DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDVenueBuildingIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  v2 = *(unsigned __int8 *)(a1 + 108);
  if ((v2 & 0x50) != 0)
    return 1;
  if ((v2 & 0x20) != 0)
  {
    if (GEOPDVenueLabelIsDirty(*(_QWORD *)(a1 + 80)))
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 108);
  }
  return (v2 >> 3) & 1;
}

os_unfair_lock_s *GEOPDVenueBuildingIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPDVenueBuildingIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 26);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_188A0BA84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDVenueContainerReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  char v18;
  int *v19;
  int *v20;
  char v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  BOOL v30;
  int v31;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  id v46;
  void *v47;
  int v48;
  int *v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  GEOPDVenueLabel *v57;
  void *v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  int v78;
  int v79;
  char v80;
  void *v81;
  char v83;
  char v84;
  int v85;
  char v86;
  char v87;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 76);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 72));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 88) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 88) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 88) >> 3) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_BYTE)v11 | v7;
        v18 = v16 | v11;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        if ((((v16 | v11) | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v85 = 1;
        v21 = v17;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_122;
        v83 = v17;
        v86 = v18 | v17;
        v87 = (v20 == 0) | v18;
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        v84 = v18;
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v7;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v9;
        v7 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v22))
      goto LABEL_120;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v19;
      v28 = *(_QWORD *)(v3 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v28 + 1;
      v26 |= (unint64_t)(v29 & 0x7F) << v24;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      v30 = v25++ >= 9;
      if (v30)
      {
        v26 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    v32 = v26 & 7;
    if (v31 || v32 == 4)
    {
LABEL_120:
      v85 = 1;
      goto LABEL_121;
    }
    v34 = v26 >> 3;
    v35 = v18;
    if ((v87 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_89;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        *(_BYTE *)(a1 + 88) |= 2u;
        while (1)
        {
          v43 = *v19;
          v44 = *(_QWORD *)(v3 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(v3 + *v6))
            break;
          v45 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v44);
          *(_QWORD *)(v3 + v43) = v44 + 1;
          v42 |= (unint64_t)(v45 & 0x7F) << v40;
          if ((v45 & 0x80) == 0)
            goto LABEL_92;
          v40 += 7;
          v30 = v41++ >= 9;
          if (v30)
          {
            v42 = 0;
            goto LABEL_94;
          }
        }
        *(_BYTE *)(v3 + *v22) = 1;
LABEL_92:
        if (*(_BYTE *)(v3 + *v22))
          v42 = 0;
LABEL_94:
        v71 = 64;
        goto LABEL_103;
      case 2:
        if (!v35 || (*(_BYTE *)(a1 + 88) & 0x10) != 0)
          goto LABEL_89;
        if (v32 != 2)
        {
          v72 = 0;
          v73 = 0;
          v74 = 0;
          while (1)
          {
            v75 = *v19;
            v76 = *(_QWORD *)(v3 + v75);
            if (v76 == -1 || v76 >= *(_QWORD *)(v3 + *v6))
              break;
            v77 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v76);
            *(_QWORD *)(v3 + v75) = v76 + 1;
            v74 |= (unint64_t)(v77 & 0x7F) << v72;
            if (v77 < 0)
            {
              v72 += 7;
              v30 = v73++ >= 9;
              if (!v30)
                continue;
            }
            goto LABEL_115;
          }
          *(_BYTE *)(v3 + *v22) = 1;
LABEL_115:
          PBRepeatedUInt64Add();
          goto LABEL_116;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_141;
        while (1)
        {
          v49 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v53 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v54 = *v19;
            v55 = *(_QWORD *)(v3 + v54);
            if (v55 == -1 || v55 >= *(_QWORD *)(v3 + *v6))
              break;
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v53) + v55);
            *(_QWORD *)(v3 + v54) = v55 + 1;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              v30 = v51++ >= 9;
              if (!v30)
                continue;
            }
            goto LABEL_67;
          }
          *(_BYTE *)(v3 + *v49) = 1;
LABEL_67:
          PBRepeatedUInt64Add();
        }
        PBReaderRecallMark();
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v18 = v84;
        goto LABEL_117;
      case 3:
        if (!v35)
          goto LABEL_89;
        if ((*(_BYTE *)(a1 + 88) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_141;
          v9 += *(unsigned __int8 *)(a1 + 88) << 26 >> 31;
          goto LABEL_116;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_141;
        v57 = objc_alloc_init(GEOPDVenueLabel);
        if (GEOPDVenueLabelReadAllFrom((uint64_t)v57, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v58 = *(void **)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v57;

          --v9;
LABEL_116:
          v18 = v84;
          v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_117:
          v23 = (int *)MEMORY[0x1E0D82BB8];
LABEL_118:
          if (!(v86 & 1 | (v9 != 0)) || *(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_120;
          continue;
        }

LABEL_141:
        v85 = 0;
        v18 = v84;
LABEL_121:
        v21 = v83;
LABEL_122:
        if ((v21 & 1) != 0)
LABEL_123:
          *(_BYTE *)(a1 + 88) |= 8u;
        if (v18 & 1 | ((v85 & 1) == 0))
        {
          *(_BYTE *)(a1 + 88) |= 0x10u;
          *(_BYTE *)(a1 + 88) |= 0x20u;
          goto LABEL_134;
        }
        if (v20)
        {
          while (2)
          {
            while (1)
            {
              v79 = *v20++;
              v78 = v79;
              if (v79 == 2)
                break;
              if (v78 == 3)
              {
                v80 = 32;
                goto LABEL_133;
              }
              if (!v78)
                goto LABEL_134;
            }
            v80 = 16;
LABEL_133:
            *(_BYTE *)(a1 + 88) |= v80;
            continue;
          }
        }
LABEL_134:
        if (v85)
        {
          v3 = *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]) == 0;
          if ((v18 & 1) == 0)
            return v3;
LABEL_138:
          v81 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v18 & 1) != 0)
            goto LABEL_138;
        }
        return v3;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_89;
        v59 = 0;
        v60 = 0;
        v61 = 0;
        *(_BYTE *)(a1 + 88) |= 4u;
        while (2)
        {
          v62 = *v19;
          v63 = *(_QWORD *)(v3 + v62);
          if (v63 == -1 || v63 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v63);
            *(_QWORD *)(v3 + v62) = v63 + 1;
            v61 |= (unint64_t)(v64 & 0x7F) << v59;
            if (v64 < 0)
            {
              v59 += 7;
              v30 = v60++ >= 9;
              if (v30)
              {
                LODWORD(v61) = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          LODWORD(v61) = 0;
LABEL_98:
        *(_DWORD *)(a1 + 84) = v61;
        goto LABEL_118;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_89;
        v65 = 0;
        v66 = 0;
        v42 = 0;
        *(_BYTE *)(a1 + 88) |= 1u;
        while (2)
        {
          v67 = *v19;
          v68 = *(_QWORD *)(v3 + v67);
          if (v68 == -1 || v68 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v69 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v68);
            *(_QWORD *)(v3 + v67) = v68 + 1;
            v42 |= (unint64_t)(v69 & 0x7F) << v65;
            if (v69 < 0)
            {
              v65 += 7;
              v30 = v66++ >= 9;
              if (v30)
              {
                v42 = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          v42 = 0;
LABEL_102:
        v71 = 56;
LABEL_103:
        *(_QWORD *)(a1 + v71) = v42;
        goto LABEL_118;
      default:
        if ((v83 & 1) == 0 || (*(_BYTE *)(a1 + 88) & 8) != 0)
        {
LABEL_89:
          v70 = PBReaderSkipValueWithTag();
          v23 = (int *)MEMORY[0x1E0D82BB8];
          v22 = (int *)MEMORY[0x1E0D82BC8];
          v18 = v84;
          if ((v70 & 1) == 0)
          {
            v85 = 0;
            goto LABEL_121;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v46 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v47 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v46;

          }
          v48 = PBUnknownFieldAdd();
          v18 = v84;
          v22 = (int *)MEMORY[0x1E0D82BC8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if (!v48)
          {
            v85 = 0;
            goto LABEL_123;
          }
        }
        goto LABEL_118;
    }
  }
}

void sub_188A0CAE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A0CBC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDVenueContainerReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 76))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDVenueContainerReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 76) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDVenueContainerReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDVenueContainerReadAllFrom_initialTag;
  Specified = GEOPDVenueContainerReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    -[GEOPDVenueLabel readAll:](*(_QWORD *)(a1 + 48), 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_188A0CE30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A0D040(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL _GEOPDVenueContainerIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  if ((*(_BYTE *)(a1 + 88) & 0x50) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 88) & 0x20) != 0)
    return GEOPDVenueLabelIsDirty(*(_QWORD *)(a1 + 48));
  return 0;
}

os_unfair_lock_s *GEOPDVenueContainerIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  _BOOL8 IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPDVenueContainerIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 20);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_188A0D2F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDVenueDirectoryGroupReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  GEOPDVenueLabel *v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  _BOOL8 v36;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v5[*v8])
          goto LABEL_53;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          if (v14 == -1 || v14 >= *(_QWORD *)&v5[*v7])
            break;
          v15 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v14 + 1;
          v12 |= (unint64_t)(v15 & 0x7F) << v10;
          if ((v15 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v16 = v11++ >= 9;
          if (v16)
          {
            v12 = 0;
            v17 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v17 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v17 || (v12 & 7) == 4)
          goto LABEL_53;
        v19 = v12 >> 3;
        if ((v12 >> 3) == 3)
          break;
        if ((_DWORD)v19 == 2)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_55;
          v31 = objc_alloc_init(GEOPDVenueLabel);
          if (!GEOPDVenueLabelReadAllFrom((uint64_t)v31, v5, a3))
          {

            goto LABEL_55;
          }
          PBReaderRecallMark();
          v32 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v31;

        }
        else
        {
          if ((_DWORD)v19 == 1)
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
            *(_BYTE *)(a1 + 40) |= 1u;
            while (1)
            {
              v23 = *v6;
              v24 = *(_QWORD *)&v5[v23];
              if (v24 == -1 || v24 >= *(_QWORD *)&v5[*v7])
                break;
              v25 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v24);
              *(_QWORD *)&v5[v23] = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if ((v25 & 0x80) == 0)
                goto LABEL_44;
              v20 += 7;
              v16 = v21++ >= 9;
              if (v16)
              {
                v22 = 0;
                goto LABEL_46;
              }
            }
            v5[*v8] = 1;
LABEL_44:
            if (v5[*v8])
              v22 = 0;
LABEL_46:
            v35 = 16;
LABEL_51:
            *(_QWORD *)(a1 + v35) = v22;
            goto LABEL_52;
          }
          if (!*(_QWORD *)(a1 + 8))
          {
            v33 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v34 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v33;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_55;
        }
LABEL_52:
        if (*(_QWORD *)&v5[*v6] >= *(_QWORD *)&v5[*v7])
          goto LABEL_53;
      }
      v26 = 0;
      v27 = 0;
      v22 = 0;
      *(_BYTE *)(a1 + 40) |= 2u;
      while (1)
      {
        v28 = *v6;
        v29 = *(_QWORD *)&v5[v28];
        if (v29 == -1 || v29 >= *(_QWORD *)&v5[*v7])
          break;
        v30 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v29);
        *(_QWORD *)&v5[v28] = v29 + 1;
        v22 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0)
          goto LABEL_48;
        v26 += 7;
        v16 = v27++ >= 9;
        if (v16)
        {
          v22 = 0;
          goto LABEL_50;
        }
      }
      v5[*v8] = 1;
LABEL_48:
      if (v5[*v8])
        v22 = 0;
LABEL_50:
      v35 = 32;
      goto LABEL_51;
    }
LABEL_53:
    v36 = v5[*v8] == 0;
  }
  else
  {
LABEL_55:
    v36 = 0;
  }
  objc_sync_exit(v5);

  return v36;
}

void sub_188A0DC68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDVenueFeatureValueReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEOPDFeaturePOI *v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  int v44;
  char v45;
  char v46;
  int v47;
  char v48;
  void *v49;
  int v51;
  int *v52;
  char v53;
  char v54;
  char v55;
  BOOL v56;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v53 = v17;
        v19 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v56 = v18;
        v54 = v19;
        v55 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_74;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v28 + 1;
      v26 |= (unint64_t)(v29 & 0x7F) << v24;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v31 || (v26 & 7) == 4)
    {
LABEL_74:
      v51 = 1;
      goto LABEL_75;
    }
    v33 = v26 >> 3;
    v34 = v56;
    if ((v55 & 1) == 0)
    {
      v35 = v20;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    if ((_DWORD)v33 == 4)
    {
      if (!v34)
        goto LABEL_63;
      if ((*(_BYTE *)(a1 + 60) & 4) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_91;
        v46 = 32 * *(_BYTE *)(a1 + 60);
        goto LABEL_71;
      }
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_91;
      v39 = objc_alloc_init(GEOPDFeaturePOI);
      if (!GEOPDFeaturePOIReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
        goto LABEL_90;
      PBReaderRecallMark();
      v40 = 32;
LABEL_56:
      v41 = *(void **)(a1 + v40);
      *(_QWORD *)(a1 + v40) = v39;

      --v7;
      goto LABEL_72;
    }
    if ((_DWORD)v33 == 2)
      break;
    if ((_DWORD)v33 == 1)
    {
      if (!v34)
        goto LABEL_63;
      if ((*(_BYTE *)(a1 + 60) & 8) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_91;
        v39 = objc_alloc_init(GEOPDFeatureVenue);
        if (!GEOPDFeatureVenueReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_90;
        PBReaderRecallMark();
        v40 = 40;
        goto LABEL_56;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_91;
      v46 = 16 * *(_BYTE *)(a1 + 60);
LABEL_71:
      v7 += v46 >> 7;
LABEL_72:
      v22 = (int *)MEMORY[0x1E0D82BC8];
      goto LABEL_73;
    }
    if ((v53 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 1) != 0)
    {
LABEL_63:
      v45 = PBReaderSkipValueWithTag();
      v22 = (int *)MEMORY[0x1E0D82BC8];
      if ((v45 & 1) == 0)
      {
        v51 = 0;
        goto LABEL_75;
      }
      goto LABEL_73;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v42 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v43 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v42;

    }
    v44 = PBUnknownFieldAdd();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if (!v44)
    {
      v51 = 0;
      v52 = &OBJC_IVAR___GEOTransitVehicleInfo__pickupDropoffType;
      goto LABEL_76;
    }
LABEL_73:
    if (!(v54 & 1 | (v7 != 0)))
      goto LABEL_74;
  }
  if (!v34)
    goto LABEL_63;
  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_91;
    v46 = *(_BYTE *)(a1 + 60) << 6;
    goto LABEL_71;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_91;
  v39 = objc_alloc_init(GEOPDFeatureBuilding);
  if (GEOPDFeatureBuildingReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    v40 = 24;
    goto LABEL_56;
  }
LABEL_90:

LABEL_91:
  v51 = 0;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_75:
  v52 = &OBJC_IVAR___GEOTransitVehicleInfo__pickupDropoffType;
  if ((v53 & 1) == 0)
    goto LABEL_77;
LABEL_76:
  *(_BYTE *)(a1 + v52[120]) |= 1u;
LABEL_77:
  if (v56 || (v51 & 1) == 0)
  {
    *(_BYTE *)(a1 + v52[120]) |= 8u;
    *(_BYTE *)(a1 + v52[120]) |= 2u;
    *(_BYTE *)(a1 + v52[120]) |= 4u;
  }
  else if (v20)
  {
    while (1)
    {
      v47 = *v20++;
      v48 = 8;
      switch(v47)
      {
        case 0:
          goto LABEL_84;
        case 1:
          goto LABEL_83;
        case 2:
          v48 = 2;
          goto LABEL_83;
        case 4:
          v48 = 4;
LABEL_83:
          *(_BYTE *)(a1 + v52[120]) |= v48;
          break;
        default:
          continue;
      }
    }
  }
LABEL_84:
  if (v51)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v56)
  {
    v49 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_188A0EA80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A0EB8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDVenueFeatureValueReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDVenueFeatureValueReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 48) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 52) = objc_msgSend(v6, "length");
      Specified = GEOPDVenueFeatureValueReadSpecified(a1, (unint64_t)v6, (int *)&GEOPDVenueFeatureValueReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_188A0EDCC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A0F054(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A0F1D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A0F4EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDVenueInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  GEOPDVenueIdentifier *v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  uint64_t v47;
  char v48;
  void *v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  int v60;
  char v61;
  void *v62;
  int v64;
  int *v65;
  char v66;
  char v67;
  char v68;
  char v69;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 76)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFDFFFBFFFAFFFCLL) & 0xFF01FF01FF01FF01))+ ((*(_BYTE *)(a1 + 76) & 4) != 0));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 2;
        v66 = v16 & ~(_BYTE)v11 | v9;
        v67 = v16 | v11 | v66;
        if ((((v16 | v11) | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v68 = (v17 == 0) | v16 | v11;
        v69 = v16 | v11;
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_101;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      if (v25 == -1 || v25 >= *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v25 + 1;
      v23 |= (unint64_t)(v26 & 0x7F) << v21;
      if ((v26 & 0x80) == 0)
        goto LABEL_25;
      v21 += 7;
      v27 = v22++ >= 9;
      if (v27)
      {
        v23 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v28 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_27:
    if (v28 || (v23 & 7) == 4)
    {
LABEL_101:
      v64 = 1;
LABEL_102:
      v65 = &OBJC_IVAR___GEORawPathGeometry__pathMatcherInstructions;
      goto LABEL_103;
    }
    v30 = v23 >> 3;
    v31 = v69;
    if ((v68 & 1) == 0)
    {
      v32 = v17;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31 || (*(_BYTE *)(a1 + 76) & 0x40) != 0)
          goto LABEL_83;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_121;
        v36 = objc_alloc_init(GEOPDVenueIdentifier);
        if (!GEOPDVenueIdentifierReadAllFrom((uint64_t)v36, (void *)v3, v10 & 1))
          goto LABEL_120;
        PBReaderRecallMark();
        -[GEOPDVenueInfo _addNoFlagsVenueFeatureId:](a1, v36);
        goto LABEL_74;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_83;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 76) |= 1u;
        v6 = (int *)MEMORY[0x1E0D82BD8];
        while (2)
        {
          v40 = *v18;
          v41 = *(_QWORD *)(v3 + v40);
          if (v41 == -1 || v41 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v41);
            *(_QWORD *)(v3 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              v27 = v38++ >= 9;
              if (v27)
              {
                LODWORD(v39) = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v39) = 0;
LABEL_89:
        v56 = 68;
        goto LABEL_94;
      case 4:
        if (!v31)
          goto LABEL_83;
        if ((*(_BYTE *)(a1 + 76) & 0x10) != 0)
        {
          v57 = PBReaderSkipValueWithTag();
          v6 = (int *)MEMORY[0x1E0D82BD8];
          if ((v57 & 1) == 0)
            goto LABEL_121;
          v58 = 8 * *(_BYTE *)(a1 + 76);
          goto LABEL_99;
        }
        v46 = PBReaderPlaceMark();
        v6 = (int *)MEMORY[0x1E0D82BD8];
        if ((v46 & 1) == 0)
          goto LABEL_121;
        v36 = objc_alloc_init(GEOPDVenueItemList);
        if (!GEOPDVenueItemListReadAllFrom((uint64_t)v36, (void *)v3, v10 & 1))
          goto LABEL_120;
        PBReaderRecallMark();
        v47 = 32;
        goto LABEL_68;
      case 6:
        if (!v31)
          goto LABEL_83;
        if ((*(_BYTE *)(a1 + 76) & 0x20) != 0)
        {
          v59 = PBReaderSkipValueWithTag();
          v6 = (int *)MEMORY[0x1E0D82BD8];
          if ((v59 & 1) == 0)
            goto LABEL_121;
          v58 = 4 * *(_BYTE *)(a1 + 76);
LABEL_99:
          v7 += v58 >> 7;
LABEL_100:
          v19 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_84;
        }
        v48 = PBReaderPlaceMark();
        v6 = (int *)MEMORY[0x1E0D82BD8];
        if ((v48 & 1) == 0)
          goto LABEL_121;
        v36 = objc_alloc_init(GEOPDLocatedInsideInfo);
        if (GEOPDLocatedInsideInfoReadAllFrom((uint64_t)v36, (void *)v3))
        {
          PBReaderRecallMark();
          v47 = 40;
LABEL_68:
          v49 = *(void **)(a1 + v47);
          *(_QWORD *)(a1 + v47) = v36;

          --v7;
          goto LABEL_100;
        }
LABEL_120:

LABEL_121:
        v64 = 0;
        v65 = &OBJC_IVAR___GEORawPathGeometry__pathMatcherInstructions;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_103:
        if ((v66 & 1) != 0)
LABEL_104:
          *(_BYTE *)(a1 + v65[50]) |= 4u;
        if (v69 & 1 | ((v64 & 1) == 0))
        {
          *(_BYTE *)(a1 + v65[50]) |= 0x40u;
          *(_BYTE *)(a1 + v65[50]) |= 0x10u;
          *(_BYTE *)(a1 + v65[50]) |= 0x20u;
          *(_BYTE *)(a1 + v65[50]) |= 8u;
        }
        else if (v17)
        {
          while (1)
          {
            v60 = *v17++;
            v61 = 64;
            switch(v60)
            {
              case 0:
                goto LABEL_113;
              case 1:
                goto LABEL_112;
              case 4:
                v61 = 16;
                goto LABEL_112;
              case 6:
                v61 = 32;
                goto LABEL_112;
              case 7:
                v61 = 8;
LABEL_112:
                *(_BYTE *)(a1 + v65[50]) |= v61;
                break;
              default:
                continue;
            }
          }
        }
LABEL_113:
        if (v64)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if ((v69 & 1) != 0)
        {
          v62 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 7:
        if (!v31 || (*(_BYTE *)(a1 + 76) & 8) != 0)
          goto LABEL_83;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_121;
        v36 = objc_alloc_init(GEOPDFilterElementInfo);
        if (!GEOPDFilterElementInfoReadAllFrom((uint64_t)v36, (void *)v3, v10 & 1))
          goto LABEL_120;
        PBReaderRecallMark();
        -[GEOPDVenueInfo _addNoFlagsFilterElement:](a1, v36);
LABEL_74:

        v19 = (int *)MEMORY[0x1E0D82BC8];
        v6 = (int *)MEMORY[0x1E0D82BD8];
        goto LABEL_84;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_83;
        v50 = 0;
        v51 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 76) |= 2u;
        v6 = (int *)MEMORY[0x1E0D82BD8];
        while (2)
        {
          v52 = *v18;
          v53 = *(_QWORD *)(v3 + v52);
          if (v53 == -1 || v53 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v53);
            *(_QWORD *)(v3 + v52) = v53 + 1;
            v39 |= (unint64_t)(v54 & 0x7F) << v50;
            if (v54 < 0)
            {
              v50 += 7;
              v27 = v51++ >= 9;
              if (v27)
              {
                LODWORD(v39) = 0;
                goto LABEL_93;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v39) = 0;
LABEL_93:
        v56 = 72;
LABEL_94:
        *(_DWORD *)(a1 + v56) = v39;
        goto LABEL_84;
      default:
        if ((v66 & 1) == 0 || (*(_BYTE *)(a1 + 76) & 4) != 0)
        {
LABEL_83:
          v55 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          v6 = (int *)MEMORY[0x1E0D82BD8];
          if ((v55 & 1) == 0)
          {
            v64 = 0;
            goto LABEL_102;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v44 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v43;

          }
          v45 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          v6 = (int *)MEMORY[0x1E0D82BD8];
          if (!v45)
          {
            v64 = 0;
            v65 = &OBJC_IVAR___GEORawPathGeometry__pathMatcherInstructions;
            goto LABEL_104;
          }
        }
LABEL_84:
        if (!(v67 & 1 | (v7 != 0)))
          goto LABEL_101;
        continue;
    }
  }
}

void sub_188A0FFA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A100FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A10250(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A10A14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPDVenueInfoCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = *(id *)(a1 + 48);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        -[GEOPDVenueIdentifier readAll:](*(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v6++), 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v4);
  }

  -[GEOPDVenueItemList readAll:](*(_QWORD *)(a1 + 32), 1);
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = *(id *)(a1 + 24);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        -[GEOPDFilterElementInfo readAll:](*(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v11++), 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    }
    while (v9);
  }

}

unint64_t GEOPDVenueInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDVenueInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDVenueInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDVenueInfoReadAllFrom_initialTag;
  Specified = GEOPDVenueInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDVenueInfoCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_188A11A84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDVenueInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v28;
  int v29;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  int v37;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  int v56;
  int v57;
  char v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  int v65;
  int v66;
  unint64_t v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  int v75;
  _BOOL8 v76;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
LABEL_175:
    v76 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v76;
  }
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (a1[*v4])
      goto LABEL_175;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *v2;
      v10 = *(_QWORD *)&a1[v9];
      if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
        break;
      v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
      *(_QWORD *)&a1[v9] = v10 + 1;
      v8 |= (unint64_t)(v11 & 0x7F) << v6;
      if ((v11 & 0x80) == 0)
        goto LABEL_12;
      v6 += 7;
      v12 = v7++ >= 9;
      if (v12)
      {
        v8 = 0;
        v13 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v13 = a1[*v4];
    if (a1[*v4])
      v8 = 0;
LABEL_14:
    v14 = v8 & 7;
    if (v13 || v14 == 4)
      goto LABEL_175;
    switch((v8 >> 3))
    {
      case 1u:
        if (v14 != 2 || !PBReaderPlaceMark() || !GEOPDVenueIdentifierIsValid(a1))
          goto LABEL_179;
        goto LABEL_173;
      case 2u:
        if ((v8 & 7) != 0)
          goto LABEL_179;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
            goto LABEL_171;
          v19 = v18 + 1;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0)
          {
            v21 = v16++ > 8;
            if (!v21)
              continue;
          }
          goto LABEL_174;
        }
      case 4u:
        if (v14 != 2 || !PBReaderPlaceMark())
          goto LABEL_179;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
          {
            v22 = 0;
            v23 = 0;
            v24 = 0;
            while (1)
            {
              v25 = *v2;
              v26 = *(_QWORD *)&a1[v25];
              if (v26 == -1 || v26 >= *(_QWORD *)&a1[*v3])
                break;
              v27 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v26);
              *(_QWORD *)&a1[v25] = v26 + 1;
              v24 |= (unint64_t)(v27 & 0x7F) << v22;
              if ((v27 & 0x80) == 0)
                goto LABEL_46;
              v22 += 7;
              v12 = v23++ >= 9;
              if (v12)
              {
                v24 = 0;
                v28 = a1[*v4];
                goto LABEL_48;
              }
            }
            a1[*v4] = 1;
LABEL_46:
            v28 = a1[*v4];
            if (a1[*v4])
              v24 = 0;
LABEL_48:
            v29 = v24 & 7;
            if (!v28 && v29 != 4)
            {
              if ((v24 >> 3) == 2)
              {
                if (v29 != 2)
                  goto LABEL_178;
              }
              else
              {
                if ((v24 >> 3) != 1)
                {
                  if (!PBReaderSkipValueWithTag())
                    goto LABEL_178;
                  continue;
                }
                if (v29 != 2)
                  goto LABEL_178;
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_178;
              continue;
            }
          }
          goto LABEL_101;
        }
      case 6u:
        if (v14 != 2 || !PBReaderPlaceMark())
          goto LABEL_179;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_64:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
          {
            v31 = 0;
            v32 = 0;
            v33 = 0;
            while (1)
            {
              v34 = *v2;
              v35 = *(_QWORD *)&a1[v34];
              if (v35 == -1 || v35 >= *(_QWORD *)&a1[*v3])
                break;
              v36 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v35);
              *(_QWORD *)&a1[v34] = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if ((v36 & 0x80) == 0)
                goto LABEL_74;
              v31 += 7;
              v12 = v32++ >= 9;
              if (v12)
              {
                v33 = 0;
                v37 = a1[*v4];
                goto LABEL_76;
              }
            }
            a1[*v4] = 1;
LABEL_74:
            v37 = a1[*v4];
            if (a1[*v4])
              v33 = 0;
LABEL_76:
            if (!v37 && (v33 & 7) != 4)
            {
              if ((v33 >> 3) == 2)
              {
                if ((v33 & 7) == 0)
                {
                  v44 = 0;
                  while (1)
                  {
                    v45 = *v2;
                    v46 = *(_QWORD *)&a1[v45];
                    if (v46 == -1 || v46 >= *(_QWORD *)&a1[*v3])
                      break;
                    v47 = v46 + 1;
                    v48 = *(char *)(*(_QWORD *)&a1[*v5] + v46);
                    *(_QWORD *)&a1[v45] = v47;
                    if (v48 < 0)
                    {
                      v21 = v44++ > 8;
                      if (!v21)
                        continue;
                    }
                    goto LABEL_64;
                  }
LABEL_98:
                  a1[*v4] = 1;
                  continue;
                }
              }
              else
              {
                if ((v33 >> 3) != 1)
                {
                  if ((PBReaderSkipValueWithTag() & 1) == 0)
                    goto LABEL_178;
                  continue;
                }
                if ((v33 & 7) == 0)
                {
                  v39 = 0;
                  while (1)
                  {
                    v40 = *v2;
                    v41 = *(_QWORD *)&a1[v40];
                    if (v41 == -1 || v41 >= *(_QWORD *)&a1[*v3])
                      goto LABEL_98;
                    v42 = v41 + 1;
                    v43 = *(char *)(*(_QWORD *)&a1[*v5] + v41);
                    *(_QWORD *)&a1[v40] = v42;
                    if (v43 < 0)
                    {
                      v21 = v39++ > 8;
                      if (!v21)
                        continue;
                    }
                    goto LABEL_64;
                  }
                }
              }
              goto LABEL_178;
            }
          }
          break;
        }
LABEL_101:
        v49 = a1[*v4];
        PBReaderRecallMark();
        if (v49)
          goto LABEL_179;
        goto LABEL_173;
      case 7u:
        if (v14 != 2 || !PBReaderPlaceMark())
          goto LABEL_179;
        objc_msgSend(a1, "position", 0, 0);
        objc_msgSend(a1, "length");
LABEL_106:
        if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
          goto LABEL_172;
        v50 = 0;
        v51 = 0;
        v52 = 0;
        while (1)
        {
          v53 = *v2;
          v54 = *(_QWORD *)&a1[v53];
          if (v54 == -1 || v54 >= *(_QWORD *)&a1[*v3])
            break;
          v55 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v54);
          *(_QWORD *)&a1[v53] = v54 + 1;
          v52 |= (unint64_t)(v55 & 0x7F) << v50;
          if ((v55 & 0x80) == 0)
            goto LABEL_116;
          v50 += 7;
          v12 = v51++ >= 9;
          if (v12)
          {
            v52 = 0;
            v56 = a1[*v4];
            goto LABEL_118;
          }
        }
        a1[*v4] = 1;
LABEL_116:
        v56 = a1[*v4];
        if (a1[*v4])
          v52 = 0;
LABEL_118:
        v57 = v52 & 7;
        if (v56 || v57 == 4)
        {
LABEL_172:
          v75 = a1[*v4];
          PBReaderRecallMark();
          if (v75)
            goto LABEL_179;
LABEL_173:
          PBReaderRecallMark();
LABEL_174:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_175;
          continue;
        }
        if ((v52 >> 3) != 2)
        {
          if ((v52 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_178;
            goto LABEL_106;
          }
          if (v57 == 2 && PBReaderPlaceMark() && GEOPDVenueIdentifierIsValid(a1))
            goto LABEL_162;
          goto LABEL_178;
        }
        if (v57 == 2 && PBReaderPlaceMark())
        {
          objc_msgSend(a1, "position");
          objc_msgSend(a1, "length");
          while (1)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_161;
            v59 = 0;
            v60 = 0;
            v61 = 0;
            while (1)
            {
              v62 = *v2;
              v63 = *(_QWORD *)&a1[v62];
              if (v63 == -1 || v63 >= *(_QWORD *)&a1[*v3])
                break;
              v64 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v63);
              *(_QWORD *)&a1[v62] = v63 + 1;
              v61 |= (unint64_t)(v64 & 0x7F) << v59;
              if ((v64 & 0x80) == 0)
                goto LABEL_141;
              v59 += 7;
              v12 = v60++ >= 9;
              if (v12)
              {
                v61 = 0;
                v65 = a1[*v4];
                goto LABEL_143;
              }
            }
            a1[*v4] = 1;
LABEL_141:
            v65 = a1[*v4];
            if (a1[*v4])
              v61 = 0;
LABEL_143:
            v66 = v61 & 7;
            if (v65 || v66 == 4)
            {
LABEL_161:
              v69 = a1[*v4];
              PBReaderRecallMark();
              if (v69)
                goto LABEL_178;
LABEL_162:
              PBReaderRecallMark();
              goto LABEL_106;
            }
            v68 = v61 >> 3;
            if ((v61 >> 3) == 3)
              break;
            if ((_DWORD)v68 == 2)
            {
              if (v66 != 2)
                goto LABEL_177;
              goto LABEL_155;
            }
            if ((_DWORD)v68 == 1)
            {
              if (v66 != 2)
                goto LABEL_177;
LABEL_155:
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_177;
            }
            else if (!PBReaderSkipValueWithTag())
            {
LABEL_177:
              PBReaderRecallMark();
              goto LABEL_178;
            }
          }
          if (v66 != 2)
            goto LABEL_177;
          goto LABEL_155;
        }
LABEL_178:
        PBReaderRecallMark();
LABEL_179:
        PBReaderRecallMark();
        return 0;
      case 8u:
        if ((v8 & 7) != 0)
          goto LABEL_179;
        v70 = 0;
        while (1)
        {
          v71 = *v2;
          v72 = *(_QWORD *)&a1[v71];
          if (v72 == -1 || v72 >= *(_QWORD *)&a1[*v3])
            break;
          v73 = v72 + 1;
          v74 = *(char *)(*(_QWORD *)&a1[*v5] + v72);
          *(_QWORD *)&a1[v71] = v73;
          if (v74 < 0)
          {
            v21 = v70++ > 8;
            if (!v21)
              continue;
          }
          goto LABEL_174;
        }
LABEL_171:
        a1[*v4] = 1;
        goto LABEL_174;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_179;
        goto LABEL_174;
    }
  }
}

void sub_188A128A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A12C14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDVenueInfoFilterReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  int v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  BOOL v17;
  id v18;
  void *v19;
  _BOOL8 v20;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v8 = v3[*v6];
      if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
        break;
      if (v3[*v6])
      {
        v8 = 1;
        break;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)&v3[v12];
        if (v13 == -1 || v13 >= *(_QWORD *)&v3[*v5])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v13);
        *(_QWORD *)&v3[v12] = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0)
          goto LABEL_13;
        v9 += 7;
        if (v10++ >= 9)
        {
          v16 = 0;
          v8 = v3[*v6];
          goto LABEL_16;
        }
      }
      v3[*v6] = 1;
LABEL_13:
      v8 = v3[*v6];
      if (v3[*v6])
        v16 = 0;
      else
        v16 = v11;
LABEL_16:
      if (v8)
        v17 = 1;
      else
        v17 = (v16 & 7) == 4;
      if (v17)
        break;
      if (!*(_QWORD *)(a1 + 8))
      {
        v18 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v19 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v18;

      }
      if ((PBUnknownFieldAdd() & 1) == 0)
        goto LABEL_23;
    }
    v20 = v8 == 0;
  }
  else
  {
LABEL_23:
    v20 = 0;
  }
  objc_sync_exit(v3);

  return v20;
}

void sub_188A13730(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDVenueInfoFilterIsValid(unsigned __int8 *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  int v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v14;
  _BOOL8 v15;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v6 = a1[*v4];
    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
      break;
    if (a1[*v4])
    {
      v6 = 1;
      break;
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *v2;
      v11 = *(_QWORD *)&a1[v10];
      if (v11 == -1 || v11 >= *(_QWORD *)&a1[*v3])
        break;
      v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v11);
      *(_QWORD *)&a1[v10] = v11 + 1;
      v9 |= (unint64_t)(v12 & 0x7F) << v7;
      if ((v12 & 0x80) == 0)
        goto LABEL_12;
      v7 += 7;
      if (v8++ >= 9)
      {
        LOBYTE(v9) = 0;
        v6 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v6 = a1[*v4];
    if (a1[*v4])
      LOBYTE(v9) = 0;
LABEL_14:
    if (v6)
      v14 = 1;
    else
      v14 = (v9 & 7) == 4;
    if (v14)
      break;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
      v15 = 0;
      goto LABEL_22;
    }
  }
  v15 = v6 == 0;
LABEL_22:
  PBReaderRecallMark();
  return v15;
}

void sub_188A13AC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDVenueItemListReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v29;
  BOOL v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  int v40;
  char v41;
  int v42;
  int v43;
  void *v44;
  int v46;
  int *v47;
  unsigned __int8 v48;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 | v7;
        v48 = v14 & ~(_BYTE)v7 | v8;
        if ((((v14 | v7) | v9) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_58;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v27 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v27 || (v22 & 7) == 4)
    {
LABEL_58:
      v46 = 1;
      goto LABEL_59;
    }
    v29 = v22 >> 3;
    v30 = v15;
    if (!((v16 == 0) | v15 & 1))
    {
      v31 = v16;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 != 2)
      break;
    if (v30 && (*(_BYTE *)(a1 + 52) & 2) == 0)
    {
      PBReaderReadString();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      if (v37)
        -[GEOPDVenueItemList _addNoFlagsItem:](a1, v37);

      goto LABEL_56;
    }
LABEL_52:
    v41 = PBReaderSkipValueWithTag();
    v18 = (int *)MEMORY[0x1E0D82BC8];
    if ((v41 & 1) == 0)
    {
      v46 = 0;
LABEL_59:
      v47 = &OBJC_IVAR___GEORawPathGeometry__pathMatcherInstructions;
      goto LABEL_60;
    }
LABEL_57:
    if (!((v15 | v48) & 1 | (v10 != 0)))
      goto LABEL_58;
  }
  if ((_DWORD)v29 != 1)
  {
    if ((v48 & 1) != 0 && (*(_BYTE *)(a1 + 52) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v38 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v39 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v38;

      }
      v40 = PBUnknownFieldAdd();
      v18 = (int *)MEMORY[0x1E0D82BC8];
      if (!v40)
      {
        v46 = 0;
        v47 = &OBJC_IVAR___GEORawPathGeometry__pathMatcherInstructions;
        goto LABEL_61;
      }
      goto LABEL_57;
    }
    goto LABEL_52;
  }
  if (!v30)
    goto LABEL_52;
  if ((*(_BYTE *)(a1 + 52) & 4) == 0)
  {
    PBReaderReadString();
    v35 = objc_claimAutoreleasedReturnValue();
    v36 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v35;

    v18 = (int *)MEMORY[0x1E0D82BC8];
    --v10;
    goto LABEL_57;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v10 += *(unsigned __int8 *)(a1 + 52) << 29 >> 31;
LABEL_56:
    v18 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_57;
  }
  v46 = 0;
  v47 = &OBJC_IVAR___GEORawPathGeometry__pathMatcherInstructions;
  v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_60:
  if ((v48 & 1) == 0)
    goto LABEL_62;
LABEL_61:
  *(_BYTE *)(a1 + v47[59]) |= 1u;
LABEL_62:
  if (v15 & 1 | ((v46 & 1) == 0))
  {
    *(_BYTE *)(a1 + v47[59]) |= 4u;
    *(_BYTE *)(a1 + v47[59]) |= 2u;
    goto LABEL_71;
  }
  if (v16)
  {
    while (1)
    {
      v43 = *v16++;
      v42 = v43;
      if (v43 == 1)
        break;
      if (v42 == 2)
      {
LABEL_67:
        *(_BYTE *)(a1 + v47[59]) |= v42;
      }
      else if (!v42)
      {
        goto LABEL_71;
      }
    }
    LOBYTE(v42) = 4;
    goto LABEL_67;
  }
LABEL_71:
  if (v46)
  {
    v3 = *(_BYTE *)(v3 + *v18) == 0;
    if ((v15 & 1) == 0)
      return v3;
LABEL_75:
    v44 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  else
  {
    v3 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_75;
  }
  return v3;
}

void sub_188A140DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A144F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDVenueItemListReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDVenueItemListReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDVenueItemListReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDVenueItemListReadAllFrom_initialTag;
  Specified = GEOPDVenueItemListReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188A14740(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A1497C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A14BC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A14EA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDVenueLabelReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  char v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  char v42;
  int v43;
  char v44;
  void *v45;
  int v47;
  char v48;
  char v49;
  char v50;
  BOOL v51;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 1;
        v15 = v14 & ~(_BYTE)v7;
        v16 = v14 | v7;
        v48 = v15 | v8;
        v17 = v16 | v15 | v8;
        if (((v16 | v9) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v51 = v16;
        v49 = v17;
        v50 = (v18 == 0) | v16;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v20))
      goto LABEL_65;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      if (v26 == -1 || v26 >= *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v26 + 1;
      v24 |= (unint64_t)(v27 & 0x7F) << v22;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v22 += 7;
      if (v23++ >= 9)
      {
        v24 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_25:
    if (v29 || (v24 & 7) == 4)
    {
LABEL_65:
      v47 = 1;
      goto LABEL_66;
    }
    v31 = v24 >> 3;
    v32 = v51;
    if ((v50 & 1) == 0)
    {
      v33 = v18;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 == 3)
    {
      if (!v32)
        goto LABEL_55;
      if ((*(_BYTE *)(a1 + 60) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_81;
        v42 = *(_BYTE *)(a1 + 60) << 6;
        goto LABEL_63;
      }
      PBReaderReadString();
      v37 = objc_claimAutoreleasedReturnValue();
      v38 = 24;
      goto LABEL_48;
    }
    if ((_DWORD)v31 == 2)
      break;
    if ((_DWORD)v31 == 1)
    {
      if (!v32)
        goto LABEL_55;
      if ((*(_BYTE *)(a1 + 60) & 8) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_81;
        v42 = 16 * *(_BYTE *)(a1 + 60);
        goto LABEL_63;
      }
      PBReaderReadString();
      v37 = objc_claimAutoreleasedReturnValue();
      v38 = 40;
      goto LABEL_48;
    }
    if ((v48 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 1) != 0)
    {
LABEL_55:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_81;
      goto LABEL_64;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v41 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v40;

    }
    if (!PBUnknownFieldAdd())
    {
      v47 = 0;
      v20 = (int *)MEMORY[0x1E0D82BC8];
      goto LABEL_67;
    }
LABEL_64:
    v20 = (int *)MEMORY[0x1E0D82BC8];
    if (!(v49 & 1 | (v10 != 0)))
      goto LABEL_65;
  }
  if (!v32)
    goto LABEL_55;
  if ((*(_BYTE *)(a1 + 60) & 4) == 0)
  {
    PBReaderReadString();
    v37 = objc_claimAutoreleasedReturnValue();
    v38 = 32;
LABEL_48:
    v39 = *(void **)(a1 + v38);
    *(_QWORD *)(a1 + v38) = v37;

    --v10;
    goto LABEL_64;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v42 = 32 * *(_BYTE *)(a1 + 60);
LABEL_63:
    v10 += v42 >> 7;
    goto LABEL_64;
  }
LABEL_81:
  v47 = 0;
  v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_66:
  if ((v48 & 1) == 0)
    goto LABEL_68;
LABEL_67:
  *(_BYTE *)(a1 + 60) |= 1u;
LABEL_68:
  if (v51 || (v47 & 1) == 0)
  {
    *(_BYTE *)(a1 + 60) |= 8u;
    *(_BYTE *)(a1 + 60) |= 4u;
    *(_BYTE *)(a1 + 60) |= 2u;
  }
  else if (v18)
  {
    while (1)
    {
      v43 = *v18++;
      v44 = 8;
      switch(v43)
      {
        case 0:
          goto LABEL_75;
        case 1:
          goto LABEL_74;
        case 2:
          v44 = 4;
          goto LABEL_74;
        case 3:
          v44 = 2;
LABEL_74:
          *(_BYTE *)(a1 + 60) |= v44;
          break;
        default:
          continue;
      }
    }
  }
LABEL_75:
  if (v47)
    v3 = *(_BYTE *)(v3 + *v20) == 0;
  else
    v3 = 0;
  if (v51)
  {
    v45 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_188A154C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A155A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A158EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDVenueLabelReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDVenueLabelReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDVenueLabelReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDVenueLabelReadAllFrom_initialTag;
  Specified = GEOPDVenueLabelReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_188A15B3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A15CE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDVenueLabelIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = (*(_BYTE *)(a1 + 60) & 0x1E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_188A15EEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDVenueLevelReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  GEOPDVenueLabel *v26;
  void *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  id v34;
  void *v35;
  _BOOL8 v36;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          if (v14 == -1 || v14 >= *(_QWORD *)&v5[*v7])
            break;
          v15 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v14 + 1;
          v12 |= (unint64_t)(v15 & 0x7F) << v10;
          if ((v15 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v16 = v11++ >= 9;
          if (v16)
          {
            v12 = 0;
            v17 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v17 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v17 || (v12 & 7) == 4)
          break;
        v19 = v12 >> 3;
        if ((v12 >> 3) == 3)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_54;
          v26 = objc_alloc_init(GEOPDVenueLabel);
          if (!GEOPDVenueLabelReadAllFrom((uint64_t)v26, v5, a3))
          {

            goto LABEL_54;
          }
          PBReaderRecallMark();
          v27 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v26;

        }
        else if ((_DWORD)v19 == 2)
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (1)
          {
            v31 = *v6;
            v32 = *(_QWORD *)&v5[v31];
            if (v32 == -1 || v32 >= *(_QWORD *)&v5[*v7])
              break;
            v33 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v32);
            *(_QWORD *)&v5[v31] = v32 + 1;
            v30 |= (unint64_t)(v33 & 0x7F) << v28;
            if ((v33 & 0x80) == 0)
              goto LABEL_48;
            v28 += 7;
            v16 = v29++ >= 9;
            if (v16)
            {
              LODWORD(v30) = 0;
              goto LABEL_50;
            }
          }
          v5[*v8] = 1;
LABEL_48:
          if (v5[*v8])
            LODWORD(v30) = 0;
LABEL_50:
          *(_DWORD *)(a1 + 32) = v30;
        }
        else if ((_DWORD)v19 == 1)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v23 = *v6;
            v24 = *(_QWORD *)&v5[v23];
            if (v24 == -1 || v24 >= *(_QWORD *)&v5[*v7])
              break;
            v25 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v24);
            *(_QWORD *)&v5[v23] = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if ((v25 & 0x80) == 0)
              goto LABEL_44;
            v20 += 7;
            v16 = v21++ >= 9;
            if (v16)
            {
              v22 = 0;
              goto LABEL_46;
            }
          }
          v5[*v8] = 1;
LABEL_44:
          if (v5[*v8])
            v22 = 0;
LABEL_46:
          *(_QWORD *)(a1 + 24) = v22;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v34 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v35 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v34;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_54;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v36 = v5[*v8] == 0;
  }
  else
  {
LABEL_54:
    v36 = 0;
  }
  objc_sync_exit(v5);

  return v36;
}

void sub_188A167AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchLocationScopeReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  const float *v11;
  uint32x4_t v12;
  int8x16_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  BOOL v30;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  int v103;
  int v104;
  void *v105;
  GEOLatLng *v107;
  char v108;
  char v109;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (const float *)(a1 + 112);
  v12 = (uint32x4_t)vld1q_dup_f32(v11);
  v13.i64[0] = 0x100000001;
  v13.i64[1] = 0x100000001;
  v14 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_189CC4670), v13));
  while (2)
  {
    v15 = 1;
    v16 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v15 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v17 = v14 > 2;
        v18 = v10 | v17;
        if ((((v10 | v17) | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v109 = (v19 == 0) | v18;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        v108 = v10 | v17;
        break;
      default:
        ++v14;
LABEL_6:
        v15 = v9;
        v16 = v10;
LABEL_8:
        ++v7;
        v9 = v15;
        v10 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_184;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_23;
      v23 += 7;
      v30 = v24++ >= 9;
      if (v30)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_23:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_25:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_184:
      if ((v18 & 1) != 0)
      {
        v102 = 1;
        goto LABEL_186;
      }
      if (v19)
      {
        while (1)
        {
          v103 = *v19++;
          v104 = 0x2000;
          switch(v103)
          {
            case 0:
              goto LABEL_195;
            case 1:
              goto LABEL_194;
            case 2:
              v104 = 0x4000;
              goto LABEL_194;
            case 6:
              v104 = 0x8000;
              goto LABEL_194;
            case 11:
              v104 = 0x10000;
LABEL_194:
              *(_DWORD *)(a1 + 112) |= v104;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_195;
    }
    v33 = v25 >> 3;
    v34 = v18;
    if ((v109 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34)
          goto LABEL_131;
        if ((*(_BYTE *)(a1 + 113) & 0x20) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_200;
          v107 = objc_alloc_init(GEOLatLng);
          if (GEOLatLngReadAllFrom((uint64_t)v107, (void *)v3))
          {
            PBReaderRecallMark();
            v39 = 16;
            goto LABEL_74;
          }
          goto LABEL_199;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_200;
        v99 = (int)(*(_DWORD *)(a1 + 112) << 18) >> 31;
        goto LABEL_163;
      case 2:
        if (!v34)
          goto LABEL_131;
        if ((*(_BYTE *)(a1 + 113) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_200;
          v99 = (int)(*(_DWORD *)(a1 + 112) << 17) >> 31;
          goto LABEL_163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_200;
        v107 = objc_alloc_init(GEOMapRegion);
        if (!GEOMapRegionReadAllFrom((uint64_t)v107, (void *)v3))
          goto LABEL_199;
        PBReaderRecallMark();
        v39 = 32;
        goto LABEL_74;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_131;
        *(_DWORD *)(a1 + 112) |= 2u;
        v41 = *v20;
        v42 = *(_QWORD *)(v3 + v41);
        if (v42 <= 0xFFFFFFFFFFFFFFF7 && v42 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v43 = *(_QWORD *)(*(_QWORD *)(v3 + *v22) + v42);
          *(_QWORD *)(v3 + v41) = v42 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v21) = 1;
          v43 = 0;
        }
        v100 = 48;
        goto LABEL_169;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_131;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_DWORD *)(a1 + 112) |= 8u;
        while (2)
        {
          v47 = *v20;
          v48 = *(_QWORD *)(v3 + v47);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v48);
            *(_QWORD *)(v3 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              v30 = v45++ >= 9;
              if (v30)
              {
                LODWORD(v46) = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v46) = 0;
LABEL_136:
        v96 = 80;
        goto LABEL_141;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_131;
        v51 = 0;
        v52 = 0;
        v46 = 0;
        *(_DWORD *)(a1 + 112) |= 4u;
        while (2)
        {
          v53 = *v20;
          v54 = *(_QWORD *)(v3 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v46 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              v30 = v52++ >= 9;
              if (v30)
              {
                LODWORD(v46) = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v46) = 0;
LABEL_140:
        v96 = 76;
LABEL_141:
        *(_DWORD *)(a1 + v96) = v46;
        goto LABEL_183;
      case 6:
        if (!v34)
          goto LABEL_131;
        if ((*(_BYTE *)(a1 + 113) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_200;
          v99 = (int)(*(_DWORD *)(a1 + 112) << 16) >> 31;
LABEL_163:
          v7 += v99;
LABEL_164:
          v18 = v108;
          v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_183:
          if (!(v18 & 1 | (v7 != 0)))
            goto LABEL_184;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_200;
        v107 = objc_alloc_init(GEOPDSearchMultiMapRegion);
        if (GEOPDSearchMultiMapRegionReadAllFrom((uint64_t)v107, (void *)v3))
        {
          PBReaderRecallMark();
          v39 = 40;
LABEL_74:
          v57 = *(void **)(a1 + v39);
          *(_QWORD *)(a1 + v39) = v107;
LABEL_106:

          --v7;
          goto LABEL_164;
        }
LABEL_199:

LABEL_200:
        v102 = 0;
        v18 = v108;
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_186:
        *(_DWORD *)(a1 + 112) |= 0x2000u;
        *(_DWORD *)(a1 + 112) |= 0x4000u;
        *(_DWORD *)(a1 + 112) |= 0x8000u;
        *(_DWORD *)(a1 + 112) |= 0x10000u;
        if ((v102 & 1) != 0)
        {
LABEL_195:
          v3 = *(_BYTE *)(v3 + *v21) == 0;
          if ((v18 & 1) != 0)
            goto LABEL_196;
          return v3;
        }
        v3 = 0;
        if ((v18 & 1) == 0)
          return v3;
LABEL_196:
        v105 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_131;
        *(_DWORD *)(a1 + 112) |= 1u;
        v58 = *v20;
        v59 = *(_QWORD *)(v3 + v58);
        if (v59 <= 0xFFFFFFFFFFFFFFF7 && v59 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v43 = *(_QWORD *)(*(_QWORD *)(v3 + *v22) + v59);
          *(_QWORD *)(v3 + v58) = v59 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v21) = 1;
          v43 = 0;
        }
        v100 = 24;
LABEL_169:
        *(_QWORD *)(a1 + v100) = v43;
        goto LABEL_183;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_131;
        v60 = 0;
        v61 = 0;
        v62 = 0;
        *(_DWORD *)(a1 + 112) |= 0x800u;
        while (2)
        {
          v63 = *v20;
          v64 = *(_QWORD *)(v3 + v63);
          v65 = v64 + 1;
          if (v64 == -1 || v65 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v66 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v64);
            *(_QWORD *)(v3 + v63) = v65;
            v62 |= (unint64_t)(v66 & 0x7F) << v60;
            if (v66 < 0)
            {
              v60 += 7;
              v30 = v61++ >= 9;
              if (v30)
              {
                v62 = 0;
                goto LABEL_145;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v62 = 0;
LABEL_145:
        v97 = v62 != 0;
        v98 = 109;
        goto LABEL_154;
      case 9:
        if ((v8 & 1) == 0)
          goto LABEL_131;
        v67 = 0;
        v68 = 0;
        v69 = 0;
        *(_DWORD *)(a1 + 112) |= 0x1000u;
        while (2)
        {
          v70 = *v20;
          v71 = *(_QWORD *)(v3 + v70);
          v72 = v71 + 1;
          if (v71 == -1 || v72 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v73 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v71);
            *(_QWORD *)(v3 + v70) = v72;
            v69 |= (unint64_t)(v73 & 0x7F) << v67;
            if (v73 < 0)
            {
              v67 += 7;
              v30 = v68++ >= 9;
              if (v30)
              {
                v69 = 0;
                goto LABEL_149;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v69 = 0;
LABEL_149:
        v97 = v69 != 0;
        v98 = 110;
        goto LABEL_154;
      case 10:
        if ((v8 & 1) == 0)
          goto LABEL_131;
        v74 = 0;
        v75 = 0;
        v76 = 0;
        *(_DWORD *)(a1 + 112) |= 0x400u;
        while (2)
        {
          v77 = *v20;
          v78 = *(_QWORD *)(v3 + v77);
          v79 = v78 + 1;
          if (v78 == -1 || v79 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v80 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v78);
            *(_QWORD *)(v3 + v77) = v79;
            v76 |= (unint64_t)(v80 & 0x7F) << v74;
            if (v80 < 0)
            {
              v74 += 7;
              v30 = v75++ >= 9;
              if (v30)
              {
                v76 = 0;
                goto LABEL_153;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v76 = 0;
LABEL_153:
        v97 = v76 != 0;
        v98 = 108;
LABEL_154:
        *(_BYTE *)(a1 + v98) = v97;
        goto LABEL_183;
      case 11:
        if (!v34)
          goto LABEL_131;
        if ((*(_BYTE *)(a1 + 114) & 1) == 0)
        {
          PBReaderReadString();
          v81 = objc_claimAutoreleasedReturnValue();
          v57 = *(void **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v81;
          goto LABEL_106;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_200;
        v99 = (int)(*(_DWORD *)(a1 + 112) << 15) >> 31;
        goto LABEL_163;
      case 12:
        if ((v8 & 1) == 0)
          goto LABEL_131;
        *(_DWORD *)(a1 + 112) |= 0x10u;
        v82 = *v20;
        v83 = *(_QWORD *)(v3 + v82);
        if (v83 <= 0xFFFFFFFFFFFFFFFBLL && v83 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v84 = *(_DWORD *)(*(_QWORD *)(v3 + *v22) + v83);
          *(_QWORD *)(v3 + v82) = v83 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v21) = 1;
          v84 = 0;
        }
        v101 = 84;
        goto LABEL_182;
      case 13:
        if ((v8 & 1) == 0)
          goto LABEL_131;
        *(_DWORD *)(a1 + 112) |= 0x20u;
        v85 = *v20;
        v86 = *(_QWORD *)(v3 + v85);
        if (v86 <= 0xFFFFFFFFFFFFFFFBLL && v86 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v84 = *(_DWORD *)(*(_QWORD *)(v3 + *v22) + v86);
          *(_QWORD *)(v3 + v85) = v86 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v21) = 1;
          v84 = 0;
        }
        v101 = 88;
        goto LABEL_182;
      case 14:
        if ((v8 & 1) == 0)
          goto LABEL_131;
        *(_DWORD *)(a1 + 112) |= 0x40u;
        v87 = *v20;
        v88 = *(_QWORD *)(v3 + v87);
        if (v88 <= 0xFFFFFFFFFFFFFFFBLL && v88 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v84 = *(_DWORD *)(*(_QWORD *)(v3 + *v22) + v88);
          *(_QWORD *)(v3 + v87) = v88 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v21) = 1;
          v84 = 0;
        }
        v101 = 92;
        goto LABEL_182;
      case 15:
        if ((v8 & 1) == 0)
          goto LABEL_131;
        *(_DWORD *)(a1 + 112) |= 0x80u;
        v89 = *v20;
        v90 = *(_QWORD *)(v3 + v89);
        if (v90 <= 0xFFFFFFFFFFFFFFFBLL && v90 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v84 = *(_DWORD *)(*(_QWORD *)(v3 + *v22) + v90);
          *(_QWORD *)(v3 + v89) = v90 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v21) = 1;
          v84 = 0;
        }
        v101 = 96;
        goto LABEL_182;
      case 16:
        if ((v8 & 1) == 0)
          goto LABEL_131;
        *(_DWORD *)(a1 + 112) |= 0x100u;
        v91 = *v20;
        v92 = *(_QWORD *)(v3 + v91);
        if (v92 <= 0xFFFFFFFFFFFFFFFBLL && v92 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v84 = *(_DWORD *)(*(_QWORD *)(v3 + *v22) + v92);
          *(_QWORD *)(v3 + v91) = v92 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v21) = 1;
          v84 = 0;
        }
        v101 = 100;
        goto LABEL_182;
      case 17:
        if ((v8 & 1) != 0)
        {
          *(_DWORD *)(a1 + 112) |= 0x200u;
          v93 = *v20;
          v94 = *(_QWORD *)(v3 + v93);
          if (v94 <= 0xFFFFFFFFFFFFFFFBLL && v94 + 4 <= *(_QWORD *)(v3 + *v6))
          {
            v84 = *(_DWORD *)(*(_QWORD *)(v3 + *v22) + v94);
            *(_QWORD *)(v3 + v93) = v94 + 4;
          }
          else
          {
            *(_BYTE *)(v3 + *v21) = 1;
            v84 = 0;
          }
          v101 = 104;
LABEL_182:
          *(_DWORD *)(a1 + v101) = v84;
        }
        else
        {
LABEL_131:
          v95 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          v18 = v108;
          if ((v95 & 1) == 0)
          {
LABEL_198:
            v102 = 0;
            goto LABEL_186;
          }
        }
        goto LABEL_183;
      default:
        v40 = PBReaderSkipValueWithTag();
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v18 = v108;
        if (!v40)
          goto LABEL_198;
        goto LABEL_183;
    }
  }
}

void sub_188A18170(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A18270(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchLocationScopeReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDSearchLocationScopeReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 64) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 68) = objc_msgSend(v6, "length");
      Specified = GEOPDSearchLocationScopeReadSpecified(a1, (unint64_t)v6, (int *)&GEOPDSearchLocationScopeReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_188A183E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A18768(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A18B1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchMultiMapRegionReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  GEOMapRegion *v18;
  _BOOL8 v19;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v18 = objc_alloc_init(GEOMapRegion);
          if (!GEOMapRegionReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          -[GEOPDSearchMultiMapRegion addMapRegion:](a1, v18);

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v19 = v3[*v6] == 0;
  }
  else
  {
LABEL_27:
    v19 = 0;
  }
  objc_sync_exit(v3);

  return v19;
}

void sub_188A198E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchTaggedSpanReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  BOOL v15;
  int *v16;
  int *v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  int v38;
  char v39;
  char v40;
  char v41;
  int v42;
  int v43;
  void *v44;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v7 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1)
    v14 = 0;
  else
    v14 = a3;
  if (v12)
    v15 = 1;
  else
    v15 = v14 == 0;
  v16 = (int *)MEMORY[0x1E0D82BF0];
  v17 = (int *)MEMORY[0x1E0D82BC8];
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_62;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v16;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      if (v20++ >= 9)
      {
        v21 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_27:
    v27 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v21 = 0;
LABEL_29:
    if (v27 || (v21 & 7) == 4)
    {
LABEL_62:
      if (v13)
      {
        v41 = 1;
        goto LABEL_72;
      }
      if (v14)
      {
        do
        {
          while (1)
          {
            v43 = *v14++;
            v42 = v43;
            if (v43 != 1 && v42 != 2)
              break;
            *(_BYTE *)(a1 + 44) |= v42;
          }
        }
        while (v42);
      }
      goto LABEL_73;
    }
    v29 = v21 >> 3;
    v30 = v13;
    if (!v15)
    {
      v31 = v14;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 != 2)
    {
      if ((_DWORD)v29 != 1)
      {
        v38 = PBReaderSkipValueWithTag();
        v17 = (int *)MEMORY[0x1E0D82BC8];
        if (!v38)
          goto LABEL_70;
        goto LABEL_58;
      }
      if (v30)
      {
        if ((*(_BYTE *)(a1 + 44) & 1) == 0)
        {
          PBReaderReadString();
          v35 = objc_claimAutoreleasedReturnValue();
          v36 = 16;
          goto LABEL_48;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_71;
        v9 -= *(_BYTE *)(a1 + 44) & 1;
LABEL_57:
        v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_58:
        if (v9)
          v40 = 1;
        else
          v40 = v13;
        if ((v40 & 1) == 0)
          goto LABEL_62;
        continue;
      }
LABEL_51:
      v39 = PBReaderSkipValueWithTag();
      v17 = (int *)MEMORY[0x1E0D82BC8];
      if ((v39 & 1) == 0)
      {
LABEL_70:
        v41 = 0;
        goto LABEL_72;
      }
      goto LABEL_58;
    }
    break;
  }
  if (!v30)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    PBReaderReadString();
    v35 = objc_claimAutoreleasedReturnValue();
    v36 = 24;
LABEL_48:
    v37 = *(void **)(a1 + v36);
    *(_QWORD *)(a1 + v36) = v35;

    v17 = (int *)MEMORY[0x1E0D82BC8];
    --v9;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
    goto LABEL_57;
  }
LABEL_71:
  v41 = 0;
  v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_72:
  *(_BYTE *)(a1 + 44) |= 1u;
  *(_BYTE *)(a1 + 44) |= 2u;
  if ((v41 & 1) != 0)
  {
LABEL_73:
    v3 = *(_BYTE *)(v3 + *v17) == 0;
    if (!v13)
      return v3;
    goto LABEL_74;
  }
  v3 = 0;
  if (v13)
  {
LABEL_74:
    v44 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_188A1A274(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A1A33C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchTaggedSpanReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDSearchTaggedSpanReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 32) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 36) = objc_msgSend(v6, "length");
      Specified = GEOPDSearchTaggedSpanReadSpecified(a1, (unint64_t)v6, (int *)&GEOPDSearchTaggedSpanReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_188A1A4B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A1A624(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A1A778(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A1B63C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPAccessPointCorrectionsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  int v17;
  int v18;
  int *v19;
  int *v20;
  _BOOL4 v21;
  int v22;
  int *v23;
  int *v24;
  char v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  int v33;
  unint64_t v35;
  BOOL v36;
  int *v37;
  int v38;
  int v39;
  BOOL v40;
  GEORPEditedAccessPoint *v41;
  id v42;
  void *v43;
  int v44;
  char v45;
  void *v46;
  char v48;
  int v49;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v17 = v16 & ~(_DWORD)v11 | v9;
        v18 = v16 | v11;
        if ((((v16 | v11) | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = v7 != 0;
        v22 = 1;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_68;
        v48 = v17;
        v49 = v21 | v18 | v17;
        v23 = (int *)MEMORY[0x1E0D82BC8];
        v24 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_BYTE *)(v3 + *v23))
      goto LABEL_66;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    while (1)
    {
      v28 = *v20;
      v29 = *(_QWORD *)(v3 + v28);
      v30 = v29 + 1;
      if (v29 == -1 || v30 > *(_QWORD *)(v3 + *v6))
        break;
      v31 = *(_BYTE *)(*(_QWORD *)(v3 + *v24) + v29);
      *(_QWORD *)(v3 + v28) = v30;
      v27 |= (unint64_t)(v31 & 0x7F) << v25;
      if ((v31 & 0x80) == 0)
        goto LABEL_25;
      v25 += 7;
      if (v26++ >= 9)
      {
        v27 = 0;
        v33 = *(unsigned __int8 *)(v3 + *v23);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v23) = 1;
LABEL_25:
    v33 = *(unsigned __int8 *)(v3 + *v23);
    if (*(_BYTE *)(v3 + *v23))
      v27 = 0;
LABEL_27:
    if (v33 || (v27 & 7) == 4)
    {
LABEL_66:
      v22 = 1;
      goto LABEL_67;
    }
    v35 = v27 >> 3;
    v36 = v18;
    if (!((v19 == 0) | v18 & 1))
    {
      v37 = v19;
      do
      {
        v39 = *v37++;
        v38 = v39;
        v36 = v39 != 0;
        if (v39)
          v40 = v38 == (_DWORD)v35;
        else
          v40 = 1;
      }
      while (!v40);
    }
    if ((_DWORD)v35 == 3)
    {
      if (!v36 || (*(_BYTE *)(a1 + 60) & 4) != 0)
      {
LABEL_64:
        v22 = PBReaderSkipValueWithTag();
        if ((v22 & v49 & 1) == 0)
          goto LABEL_67;
        goto LABEL_65;
      }
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_84;
      v41 = objc_alloc_init(GEORPEditedAccessPoint);
      if (!GEORPEditedAccessPointReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1))
        goto LABEL_83;
      PBReaderRecallMark();
      -[GEORPAccessPointCorrections _addNoFlagsEdited:](a1, v41);
      goto LABEL_56;
    }
    if ((_DWORD)v35 == 2)
      break;
    if ((_DWORD)v35 == 1)
    {
      if (!v36 || (*(_BYTE *)(a1 + 60) & 2) != 0)
        goto LABEL_64;
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_84;
      v41 = objc_alloc_init(GEORoadAccessPoint);
      if (!GEORoadAccessPointReadAllFrom((uint64_t)v41, (void *)v3))
        goto LABEL_83;
      PBReaderRecallMark();
      -[GEORPAccessPointCorrections _addNoFlagsAdded:](a1, v41);
      goto LABEL_56;
    }
    if ((v48 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 1) != 0)
      goto LABEL_64;
    if (!*(_QWORD *)(a1 + 16))
    {
      v42 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v43 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v42;

    }
    v22 = PBUnknownFieldAdd();
    if (!v22)
      goto LABEL_69;
LABEL_62:
    if ((v49 & 1) == 0)
      goto LABEL_66;
LABEL_65:
    v23 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6))
      goto LABEL_66;
  }
  if (!v36 || (*(_BYTE *)(a1 + 60) & 8) != 0)
    goto LABEL_64;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_84;
  v41 = objc_alloc_init(GEORoadAccessPoint);
  if (GEORoadAccessPointReadAllFrom((uint64_t)v41, (void *)v3))
  {
    PBReaderRecallMark();
    -[GEORPAccessPointCorrections _addNoFlagsRemoved:](a1, v41);
LABEL_56:

    goto LABEL_62;
  }
LABEL_83:

LABEL_84:
  v22 = 0;
LABEL_67:
  LOBYTE(v17) = v48;
LABEL_68:
  if ((v17 & 1) != 0)
LABEL_69:
    *(_BYTE *)(a1 + 60) |= 1u;
  if (v18 & 1 | ((v22 & 1) == 0))
  {
    *(_BYTE *)(a1 + 60) |= 2u;
    *(_BYTE *)(a1 + 60) |= 8u;
    *(_BYTE *)(a1 + 60) |= 4u;
  }
  else if (v19)
  {
    while (1)
    {
      v44 = *v19++;
      v45 = 2;
      switch(v44)
      {
        case 0:
          goto LABEL_77;
        case 1:
          goto LABEL_76;
        case 2:
          v45 = 8;
          goto LABEL_76;
        case 3:
          v45 = 4;
LABEL_76:
          *(_BYTE *)(a1 + 60) |= v45;
          break;
        default:
          continue;
      }
    }
  }
LABEL_77:
  if (v22)
  {
    v3 = *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]) == 0;
    if ((v18 & 1) == 0)
      return v3;
LABEL_81:
    v46 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  else
  {
    v3 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_81;
  }
  return v3;
}

void sub_188A1BF08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A1C23C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A1CF44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEORPAccessPointCorrectionsCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v2 = a1[3];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v26;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v26 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
    }
    while (v4);
  }

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v7 = a1[5];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v22;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v22 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * v11++), "readAll:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
    }
    while (v9);
  }

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v12 = a1[4];
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v18;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v18 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v16++), "readAll:", 1, (_QWORD)v17);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
    }
    while (v14);
  }

}

unint64_t GEORPAccessPointCorrectionsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPAccessPointCorrectionsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPAccessPointCorrectionsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPAccessPointCorrectionsReadAllFrom_initialTag;
  Specified = GEORPAccessPointCorrectionsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEORPAccessPointCorrectionsCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_188A1D304(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPAccessPointCorrectionsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPAccessPointCorrectionsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_188A1D364(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPAccessPointCorrectionsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  _BOOL8 v18;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_31;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_31;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2 || (_DWORD)v17 == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEORoadAccessPointIsValid(a1))
          goto LABEL_32;
LABEL_28:
        PBReaderRecallMark();
        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_32;
LABEL_30:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_31;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEORPEditedAccessPointIsValid(a1))
    {
LABEL_32:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_28;
  }
LABEL_31:
  v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

BOOL GEORPEditedAccessPointIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  _BOOL8 v18;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_31;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_31;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2 || (_DWORD)v17 == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEORoadAccessPointIsValid(a1))
          goto LABEL_32;
LABEL_28:
        PBReaderRecallMark();
        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_32;
LABEL_30:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_31;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEORPCorrectedStringIsValid(a1))
    {
LABEL_32:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_28;
  }
LABEL_31:
  v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

void sub_188A1DAB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPAccessPointCorrectionsIsDirty(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  if ((*(_BYTE *)(a1 + 60) & 0x1E) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 60) & 4) == 0)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v3 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v3);
        if ((GEORPEditedAccessPointIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v7 + 1) + 8 * i)) & 1) != 0)
        {
          v2 = 1;
          goto LABEL_15;
        }
      }
      v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEORPAccessPointCorrectionsIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPAccessPointCorrectionsIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_188A1E3CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188A1E7FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPAddToMapFeedbackReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            v20 = 0;
LABEL_34:
          *(_BYTE *)(a1 + 16) = v20 != 0;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_188A1F16C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPAddToMapFeedbackReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPAddToMapFeedbackReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_188A1F1CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPAddToMapFeedbackIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_33;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8)
            continue;
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        v22 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v22;
}

void sub_188A1F85C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPAddressCorrectionsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEORPFeedbackAddressFields *v39;
  uint64_t v40;
  id v41;
  void *v42;
  int v43;
  void *v44;
  char v45;
  char v46;
  int v47;
  char v48;
  void *v49;
  int v51;
  int *v52;
  char v53;
  char v54;
  char v55;
  BOOL v56;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 76)), (uint16x4_t)0xFFFFFFFCFFFEFFFDLL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 76) & 1)+ ((*(_BYTE *)(a1 + 76) & 0x20) != 0));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 3;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v53 = v17;
        v54 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v55 = (v19 == 0) | v18;
        v56 = v18;
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_86;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_86:
      v51 = 1;
      goto LABEL_87;
    }
    v33 = v25 >> 3;
    v34 = v56;
    if ((v55 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 2:
        if (!v34)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 76) & 4) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_105;
          v39 = objc_alloc_init(GEORPFeedbackAddressFields);
          if (GEORPFeedbackAddressFieldsReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            v40 = 32;
            goto LABEL_70;
          }
          goto LABEL_104;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_105;
        v46 = 32 * *(_BYTE *)(a1 + 76);
        goto LABEL_83;
      case 3:
        if (!v34)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 76) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_105;
          v46 = 16 * *(_BYTE *)(a1 + 76);
          goto LABEL_83;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_105;
        v39 = objc_alloc_init(GEORPCorrectedCoordinate);
        if (!GEORPCorrectedCoordinateReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_104;
        PBReaderRecallMark();
        v40 = 40;
        goto LABEL_70;
      case 4:
        if (!v34)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 76) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_105;
          v46 = 8 * *(_BYTE *)(a1 + 76);
          goto LABEL_83;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_105;
        v39 = objc_alloc_init(GEORPMapLocation);
        if (!GEORPMapLocationReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_104;
        PBReaderRecallMark();
        v40 = 48;
        goto LABEL_70;
      case 5:
        if (!v34)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 76) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_105;
          v46 = *(_BYTE *)(a1 + 76) << 6;
          goto LABEL_83;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_105;
        v39 = objc_alloc_init(GEORPAccessPointCorrections);
        if (!GEORPAccessPointCorrectionsReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_104;
        PBReaderRecallMark();
        v40 = 24;
        goto LABEL_70;
      case 6:
        if (!v34)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 76) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_105;
          v46 = 4 * *(_BYTE *)(a1 + 76);
LABEL_83:
          v7 += v46 >> 7;
LABEL_84:
          v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_85:
          if (!(v54 & 1 | (v7 != 0)))
            goto LABEL_86;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_105;
        v39 = objc_alloc_init(GEORPFeedbackAddressFields);
        if (GEORPFeedbackAddressFieldsReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v40 = 56;
LABEL_70:
          v44 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v39;

          --v7;
          goto LABEL_84;
        }
LABEL_104:

LABEL_105:
        v51 = 0;
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_87:
        v52 = &OBJC_IVAR___GEOTransitVehicleInfo__pickupDropoffType;
        if ((v53 & 1) != 0)
LABEL_88:
          *(_BYTE *)(a1 + v52[191]) |= 1u;
        if (v56 || (v51 & 1) == 0)
        {
          *(_BYTE *)(a1 + v52[191]) |= 4u;
          *(_BYTE *)(a1 + v52[191]) |= 8u;
          *(_BYTE *)(a1 + v52[191]) |= 0x10u;
          *(_BYTE *)(a1 + v52[191]) |= 2u;
          *(_BYTE *)(a1 + v52[191]) |= 0x20u;
        }
        else if (v19)
        {
          while (1)
          {
            v47 = *v19++;
            v48 = 4;
            switch(v47)
            {
              case 0:
                goto LABEL_98;
              case 2:
                goto LABEL_97;
              case 3:
                v48 = 8;
                goto LABEL_97;
              case 4:
                v48 = 16;
                goto LABEL_97;
              case 5:
                v48 = 2;
                goto LABEL_97;
              case 6:
                v48 = 32;
LABEL_97:
                *(_BYTE *)(a1 + v52[191]) |= v48;
                break;
              default:
                continue;
            }
          }
        }
LABEL_98:
        if (v51)
          v3 = *(_BYTE *)(v3 + *v21) == 0;
        else
          v3 = 0;
        if (v56)
        {
          v49 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v53 & 1) == 0 || (*(_BYTE *)(a1 + 76) & 1) != 0)
        {
LABEL_71:
          v45 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if ((v45 & 1) == 0)
          {
            v51 = 0;
            goto LABEL_87;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v42 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v41;

          }
          v43 = PBUnknownFieldAdd();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if (!v43)
          {
            v51 = 0;
            v52 = &OBJC_IVAR___GEOTransitVehicleInfo__pickupDropoffType;
            goto LABEL_88;
          }
        }
        goto LABEL_85;
    }
  }
}

