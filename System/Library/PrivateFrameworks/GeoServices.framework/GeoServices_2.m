void sub_1886E573C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  void *v34;
  void *v35;
  void *v37;

  v37 = *(void **)(v33 - 216);
  if (v37)
  {
    *(_QWORD *)(v33 - 208) = v37;
    operator delete(v37);
    v34 = *(void **)(v33 - 192);
    if (v34)
    {
LABEL_7:
      *(_QWORD *)(v33 - 184) = v34;
      operator delete(v34);
      v35 = *(void **)(v33 - 160);
      if (!v35)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else
  {
    v34 = *(void **)(v33 - 192);
    if (v34)
      goto LABEL_7;
  }
  v35 = *(void **)(v33 - 160);
  if (!v35)
  {
LABEL_9:
    std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a25);
    std::vector<VMP4Material,geo::StdAllocator<VMP4Material,geo::codec::Allocator>>::~vector[abi:ne180100](&a29);
    std::vector<unsigned long,geo::StdAllocator<unsigned long,geo::codec::Allocator>>::~vector[abi:ne180100](&a33);
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v33 - 256));
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(v35);
  goto LABEL_9;
}

uint64_t geo::codec::_readPOIMzrOverrides(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::chrono::steady_clock::time_point v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  FILE *v18;
  int v19;
  void *v20;
  size_t v21;
  int8x16_t *v22;
  int8x16_t *v23;
  int8x16_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned __int8 *v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  size_t v38;
  uint16x8_t *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  uint16x8_t *v44;
  float v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  int8x8_t *v52;
  uint64_t v53;
  _DWORD *v54;
  int8x8_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unsigned __int8 *v62;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  float *v77;
  uint16x8_t *v78;
  float v79;
  int v80;
  int8x8_t *v81;
  uint64_t v82;
  _DWORD *v83;
  int8x8_t v84;
  unint64_t v85;
  uint64_t v86;
  void *__pc;
  uint64_t __p;
  int8x16_t *__pa;
  uint16x8_t *__pb;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  __int128 v94;
  __int128 v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int __sz[3];
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  const char *v104;

  v2 = a1[1];
  if (!v2)
    goto LABEL_8;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 151)
  {
    v4 = ++v5;
    if (v2 <= v5)
      goto LABEL_8;
  }
  v6 = geo::codec::chapterAt((uint64_t)a1, v5, 151, *a2 + 1912);
  if (!v6 || (v7 = (_QWORD *)v6, *(_DWORD *)(v6 + 64) < 2u))
  {
LABEL_8:
    v8 = 1;
    return v8 & 1;
  }
  v11 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&__sz[1] = "ChapterPOIMzrOverrides";
  v101 = v11;
  v102 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v14.__d_.__rep_;
  LODWORD(v104) = 0;
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v104) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6508;
    goto LABEL_130;
  }
  __sz[0] = 0;
  if ((geo::codec::chapterReadVarUint32(v7, __sz) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6511;
    goto LABEL_130;
  }
  v98 = 0;
  v99 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v99) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6515;
    goto LABEL_130;
  }
  if ((geo::codec::chapterReadVarUint32(v7, &v98) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6516;
    goto LABEL_130;
  }
  v97 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v97) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6519;
    goto LABEL_130;
  }
  if (!v97)
    goto LABEL_48;
  v96 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v96) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6523;
    goto LABEL_130;
  }
  v15 = v96;
  v16 = v7[6];
  v17 = v16 + v96;
  if (v17 > v7[7])
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6526;
LABEL_130:
    v34 = fprintf(v18, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v19);
    goto LABEL_131;
  }
  v20 = (void *)v7[5];
  v7[6] = v17;
  v21 = __sz[0];
  if (__sz[0])
  {
    __pc = v20;
    v22 = (int8x16_t *)operator new(__sz[0]);
    bzero(v22, v21);
    v23 = v22;
    v20 = __pc;
  }
  else
  {
    v23 = 0;
  }
  v94 = 0u;
  v95 = 0u;
  v24 = v23;
  if (mgcl::ints::IntDecompressor<BOOL>::decompress((uint64_t *)&v94, (unsigned __int8 *)v20 + v16, v15, v99, v98, v21, v23))
  {
    v25 = 6531;
    goto LABEL_44;
  }
  v26 = __sz[0];
  v27 = *(_QWORD *)(*a2 + 504);
  if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*a2 + 512) - v27) >> 5) != __sz[0])
  {
    v25 = 6533;
LABEL_44:
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v25);
    v33 = 6;
    v34 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v94);
    if (!v24)
      goto LABEL_46;
    goto LABEL_45;
  }
  if (__sz[0])
  {
    if (__sz[0] < 0x10
      || v27 + 168 < (unint64_t)v24->u64 + __sz[0]
      && (unint64_t)v24 < v27 + 224 * (unint64_t)__sz[0] - 52)
    {
      v28 = 0;
LABEL_39:
      v29 = v26 - v28;
      v30 = (_DWORD *)(v27 + 224 * v28 + 168);
      v31 = &v24->u8[v28];
      do
      {
        if (*v31++)
          *v30 = 1120403456;
        v30 += 56;
        --v29;
      }
      while (v29);
LABEL_105:
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v94);
      v33 = 0;
      goto LABEL_45;
    }
    v28 = __sz[0] & 0xFFFFFFF8;
    v52 = (int8x8_t *)v24;
    v53 = v28;
    v54 = *(_DWORD **)(*a2 + 504);
    while (1)
    {
      v55 = vtst_s8(*v52, *v52);
      if ((v55.i8[0] & 1) != 0)
      {
        v54[42] = 1120403456;
        if ((v55.i8[1] & 1) == 0)
          goto LABEL_89;
      }
      else if ((v55.i8[1] & 1) == 0)
      {
LABEL_89:
        if ((v55.i8[2] & 1) != 0)
          goto LABEL_90;
        goto LABEL_98;
      }
      v54[98] = 1120403456;
      if ((v55.i8[2] & 1) != 0)
      {
LABEL_90:
        v54[154] = 1120403456;
        if ((v55.i8[3] & 1) == 0)
          goto LABEL_91;
        goto LABEL_99;
      }
LABEL_98:
      if ((v55.i8[3] & 1) == 0)
      {
LABEL_91:
        if ((v55.i8[4] & 1) != 0)
          goto LABEL_92;
        goto LABEL_100;
      }
LABEL_99:
      v54[210] = 1120403456;
      if ((v55.i8[4] & 1) != 0)
      {
LABEL_92:
        v54[266] = 1120403456;
        if ((v55.i8[5] & 1) == 0)
          goto LABEL_93;
        goto LABEL_101;
      }
LABEL_100:
      if ((v55.i8[5] & 1) == 0)
      {
LABEL_93:
        if ((v55.i8[6] & 1) != 0)
          goto LABEL_94;
        goto LABEL_102;
      }
LABEL_101:
      v54[322] = 1120403456;
      if ((v55.i8[6] & 1) != 0)
      {
LABEL_94:
        v54[378] = 1120403456;
        if ((v55.i8[7] & 1) != 0)
          goto LABEL_103;
        goto LABEL_86;
      }
LABEL_102:
      if ((v55.i8[7] & 1) != 0)
LABEL_103:
        v54[434] = 1120403456;
LABEL_86:
      v54 += 448;
      ++v52;
      v53 -= 8;
      if (!v53)
      {
        if (v28 == v26)
          goto LABEL_105;
        goto LABEL_39;
      }
    }
  }
  v33 = 0;
  v34 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v94);
  if (v24)
LABEL_45:
    operator delete(v24);
LABEL_46:
  if (v33)
    goto LABEL_131;
LABEL_48:
  v93 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v93) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6543;
    goto LABEL_130;
  }
  if (!v93)
    goto LABEL_74;
  v96 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v96) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6547;
    goto LABEL_130;
  }
  v35 = v7[6];
  v36 = v35 + v96;
  if (v36 > v7[7])
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6550;
    goto LABEL_130;
  }
  __p = v96;
  v37 = v7[5];
  v7[6] = v36;
  v85 = __sz[0];
  if (__sz[0])
  {
    v38 = 2 * __sz[0];
    v39 = (uint16x8_t *)operator new(v38);
    bzero(v39, v38);
  }
  else
  {
    v39 = 0;
  }
  v94 = 0u;
  v95 = 0u;
  if (mgcl::ints::IntDecompressor<unsigned short>::decompress((uint64_t *)&v94, (unsigned __int8 *)(v37 + v35), __p, v99, v98, v85, v39))
  {
    v40 = 6555;
    goto LABEL_70;
  }
  v41 = __sz[0];
  v42 = *(_QWORD *)(*a2 + 504);
  if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*a2 + 512) - v42) >> 5) != __sz[0])
  {
    v40 = 6557;
LABEL_70:
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v40);
    v46 = 6;
    v34 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v94);
    if (!v39)
      goto LABEL_72;
    goto LABEL_71;
  }
  if (__sz[0])
  {
    v43 = (float *)(v42 + 168);
    v44 = v39;
    v45 = 1.0 / (float)v104;
    do
    {
      if (*v43 != 100.0 && v44->i16[0])
        *v43 = (float)v44->u16[0] * v45;
      v44 = (uint16x8_t *)((char *)v44 + 2);
      v43 += 56;
      --v41;
    }
    while (v41);
  }
  v46 = 0;
  v34 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v94);
  if (v39)
LABEL_71:
    operator delete(v39);
LABEL_72:
  if (v46)
    goto LABEL_131;
LABEL_74:
  v92 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v92) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6567;
    goto LABEL_130;
  }
  if (!v92)
    goto LABEL_123;
  v96 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v96) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6571;
    goto LABEL_130;
  }
  v47 = v96;
  v48 = v7[6];
  v49 = v48 + v96;
  if (v49 > v7[7])
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6574;
    goto LABEL_130;
  }
  v50 = v7[5];
  v7[6] = v49;
  v51 = __sz[0];
  if (__sz[0])
  {
    __pa = (int8x16_t *)operator new(__sz[0]);
    bzero(__pa, v51);
  }
  else
  {
    __pa = 0;
  }
  v94 = 0u;
  v95 = 0u;
  if (mgcl::ints::IntDecompressor<BOOL>::decompress((uint64_t *)&v94, (unsigned __int8 *)(v50 + v48), v47, v99, v98, v51, __pa))
  {
    v56 = 6579;
    goto LABEL_120;
  }
  v57 = __sz[0];
  v58 = *(_QWORD *)(*a2 + 504);
  if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*a2 + 512) - v58) >> 5) != __sz[0])
  {
    v56 = 6581;
LABEL_120:
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v56);
    v64 = 6;
    v34 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v94);
    if (!__pa)
      goto LABEL_122;
    goto LABEL_121;
  }
  if (__sz[0])
  {
    if (__sz[0] < 0x10
      || v58 + 172 < (unint64_t)__pa->u64 + __sz[0]
      && (unint64_t)__pa < v58 + 224 * (unint64_t)__sz[0] - 48)
    {
      v59 = 0;
LABEL_115:
      v60 = v57 - v59;
      v61 = (_DWORD *)(v58 + 224 * v59 + 172);
      v62 = &__pa->u8[v59];
      do
      {
        if (*v62++)
          *v61 = 1120403456;
        v61 += 56;
        --v60;
      }
      while (v60);
LABEL_180:
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v94);
      v64 = 0;
      goto LABEL_121;
    }
    v59 = __sz[0] & 0xFFFFFFF8;
    v81 = (int8x8_t *)__pa;
    v82 = v59;
    v83 = *(_DWORD **)(*a2 + 504);
    while (1)
    {
      v84 = vtst_s8(*v81, *v81);
      if ((v84.i8[0] & 1) != 0)
      {
        v83[43] = 1120403456;
        if ((v84.i8[1] & 1) == 0)
          goto LABEL_164;
      }
      else if ((v84.i8[1] & 1) == 0)
      {
LABEL_164:
        if ((v84.i8[2] & 1) != 0)
          goto LABEL_165;
        goto LABEL_173;
      }
      v83[99] = 1120403456;
      if ((v84.i8[2] & 1) != 0)
      {
LABEL_165:
        v83[155] = 1120403456;
        if ((v84.i8[3] & 1) == 0)
          goto LABEL_166;
        goto LABEL_174;
      }
LABEL_173:
      if ((v84.i8[3] & 1) == 0)
      {
LABEL_166:
        if ((v84.i8[4] & 1) != 0)
          goto LABEL_167;
        goto LABEL_175;
      }
LABEL_174:
      v83[211] = 1120403456;
      if ((v84.i8[4] & 1) != 0)
      {
LABEL_167:
        v83[267] = 1120403456;
        if ((v84.i8[5] & 1) == 0)
          goto LABEL_168;
        goto LABEL_176;
      }
LABEL_175:
      if ((v84.i8[5] & 1) == 0)
      {
LABEL_168:
        if ((v84.i8[6] & 1) != 0)
          goto LABEL_169;
        goto LABEL_177;
      }
LABEL_176:
      v83[323] = 1120403456;
      if ((v84.i8[6] & 1) != 0)
      {
LABEL_169:
        v83[379] = 1120403456;
        if ((v84.i8[7] & 1) != 0)
          goto LABEL_178;
        goto LABEL_161;
      }
LABEL_177:
      if ((v84.i8[7] & 1) != 0)
LABEL_178:
        v83[435] = 1120403456;
LABEL_161:
      v83 += 448;
      ++v81;
      v82 -= 8;
      if (!v82)
      {
        if (v59 == v57)
          goto LABEL_180;
        goto LABEL_115;
      }
    }
  }
  v64 = 0;
  v34 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v94);
  if (__pa)
LABEL_121:
    operator delete(__pa);
LABEL_122:
  if (v64)
    goto LABEL_131;
LABEL_123:
  v91 = 0;
  v34 = geo::codec::chapterReadVarUint32(v7, &v91);
  if ((v34 & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6591;
    goto LABEL_130;
  }
  if (!v91)
  {
LABEL_156:
    v8 = 1;
    if (!*(_BYTE *)v7)
      goto LABEL_133;
    goto LABEL_132;
  }
  v96 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v96) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6595;
    goto LABEL_130;
  }
  v65 = v96;
  v66 = v7[6];
  v67 = v66 + v96;
  if (v67 > v7[7])
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 6598;
    goto LABEL_130;
  }
  v86 = v7[5];
  v7[6] = v67;
  v73 = __sz[0];
  if (__sz[0])
  {
    __pb = (uint16x8_t *)operator new(2 * __sz[0]);
    bzero(__pb, 2 * v73);
  }
  else
  {
    __pb = 0;
  }
  v94 = 0u;
  v95 = 0u;
  if (mgcl::ints::IntDecompressor<unsigned short>::decompress((uint64_t *)&v94, (unsigned __int8 *)(v86 + v66), v65, v99, v98, v73, __pb))
  {
    v74 = 6603;
    goto LABEL_153;
  }
  v75 = __sz[0];
  v76 = *(_QWORD *)(*a2 + 504);
  if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*a2 + 512) - v76) >> 5) != __sz[0])
  {
    v74 = 6605;
LABEL_153:
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v74);
    v80 = 6;
    v34 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v94);
    if (!__pb)
      goto LABEL_155;
    goto LABEL_154;
  }
  if (__sz[0])
  {
    v77 = (float *)(v76 + 172);
    v78 = __pb;
    v79 = 1.0 / (float)v104;
    do
    {
      if (*v77 != 100.0 && v78->i16[0])
        *v77 = (float)v78->u16[0] * v79;
      v78 = (uint16x8_t *)((char *)v78 + 2);
      v77 += 56;
      --v75;
    }
    while (v75);
  }
  v80 = 0;
  v34 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v94);
  if (__pb)
LABEL_154:
    operator delete(__pb);
LABEL_155:
  if (!v80)
    goto LABEL_156;
LABEL_131:
  v8 = 0;
  if (*(_BYTE *)v7)
  {
LABEL_132:
    v68 = geo::codec::Allocator::instance((geo::codec::Allocator *)v34);
    v34 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v68 + 40))(v68, v7[5], 0);
  }
LABEL_133:
  v69 = geo::codec::Allocator::instance((geo::codec::Allocator *)v34);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v69 + 40))(v69, v7, 0);
  v70 = std::chrono::steady_clock::now().__d_.__rep_;
  v104 = "ChapterPOIMzrOverrides";
  *(_QWORD *)&v94 = &v104;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v11 + 1912, (uint64_t *)&v104, (uint64_t)&std::piecewise_construct, (uint64_t **)&v94)+ 4) = (double)((v70 - v14.__d_.__rep_) / 1000) * 0.001;
  if (v10)
  {
    v71 = (unint64_t *)&v10->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v8 & 1;
}

void sub_1886E63FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&a22);
  _Unwind_Resume(a1);
}

BOOL geo::codec::_readMaterialRasters(_QWORD *a1, uint64_t *a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned __int16 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v31 = a1;
  result = 1;
  v30 = 1;
  v4 = a1[1];
  if (v4)
  {
    v6 = *a1;
    if (v4 == 1)
    {
      v7 = 0;
      v8 = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
      v11 = (unsigned __int16 *)(v6 + 16);
      v12 = v4 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v13 = *(v11 - 8);
        v15 = *v11;
        v11 += 16;
        v14 = v15;
        if (v13 == 155)
          ++v9;
        if (v14 == 155)
          ++v10;
        v12 -= 2;
      }
      while (v12);
      v8 = v10 + v9;
      if (v4 == v7)
      {
LABEL_15:
        v29 = v8;
        if (!v8)
          return 1;
        *(_WORD *)(*a2 + 2856) = 0;
        v19 = geo::codec::Allocator::instance((geo::codec::Allocator *)1);
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 24))(v19, v8, 80);
        v21 = *a2;
        *(_QWORD *)(*a2 + 2848) = v20;
        v28 = v20;
        v22 = operator new(0x30uLL);
        *v22 = &off_1E1BFAA18;
        v22[1] = a2;
        v22[2] = &v28;
        v22[3] = &v29;
        v22[4] = &v30;
        v22[5] = &v31;
        v34 = v22;
        v24 = a1[1];
        if (v24)
        {
          v25 = 0;
          for (i = 0; i < v24; v25 = ++i)
          {
            if (*(_WORD *)(*a1 + 16 * v25) == 155)
            {
              v32 = geo::codec::chapterAt((uint64_t)a1, i, 155, v21 + 1912);
              if (!v34)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v34 + 48))(v34, &v32);
              v24 = a1[1];
            }
          }
          v22 = v34;
          if (v34 == v33)
          {
            v27 = 4;
            v22 = v33;
            goto LABEL_27;
          }
          if (!v34)
            return v30 != 0;
        }
        v27 = 5;
LABEL_27:
        (*(void (**)(_QWORD *, uint64_t))(*v22 + 8 * v27))(v22, v23);
        return v30 != 0;
      }
    }
    v16 = v4 - v7;
    v17 = (unsigned __int16 *)(v6 + 16 * v7);
    do
    {
      v18 = *v17;
      v17 += 8;
      if (v18 == 155)
        ++v8;
      --v16;
    }
    while (v16);
    goto LABEL_15;
  }
  return result;
}

void sub_1886E66C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t geo::codec::_readElevationRaster(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  geo::codec::Allocator *v22;
  uint64_t v23;
  uint64_t v24;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  const char *v42;
  const char **v43;

  v4 = *a2;
  v5 = a1[1];
  if (!v5)
  {
LABEL_5:
    v8 = 0;
    v9 = (std::__shared_weak_count *)a2[1];
    if (!v9)
      goto LABEL_10;
    goto LABEL_8;
  }
  v6 = 0;
  v7 = 0;
  while (*(_WORD *)(*a1 + 16 * v6) != 101)
  {
    v6 = ++v7;
    if (v5 <= v7)
      goto LABEL_5;
  }
  v8 = geo::codec::chapterAt((uint64_t)a1, v7, 101, v4 + 1912);
  v4 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
LABEL_8:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
LABEL_10:
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v12.__d_.__rep_;
  if (!v8)
  {
    v18 = 1;
    goto LABEL_22;
  }
  v14 = *(_QWORD *)(v8 + 48);
  v15 = *(_QWORD *)(v8 + 56);
  v16 = v14 + 4;
  if (v14 + 4 > v15)
  {
    v17 = 1905;
    goto LABEL_18;
  }
  v19 = *(_QWORD *)(v8 + 40);
  v20 = *(_DWORD *)(v19 + v14);
  *(_DWORD *)(v8 + 64) = v20;
  *(_QWORD *)(v8 + 48) = v16;
  if (v20 < 0x10)
  {
    v17 = 1907;
    goto LABEL_18;
  }
  v21 = v14 + 6;
  if (v14 + 6 > v15)
  {
    v17 = 1909;
    goto LABEL_18;
  }
  v29 = *a2;
  *(_WORD *)(*a2 + 2866) = *(_WORD *)(v19 + v16);
  *(_QWORD *)(v8 + 48) = v21;
  v30 = v14 + 8;
  if (v14 + 8 > v15)
  {
    v17 = 1910;
    goto LABEL_18;
  }
  *(_WORD *)(v29 + 2864) = *(_WORD *)(v19 + v21);
  *(_QWORD *)(v8 + 48) = v30;
  if (v14 + 12 > v15)
  {
    v17 = 1911;
    goto LABEL_18;
  }
  *(_DWORD *)(v29 + 2868) = *(_DWORD *)(v19 + v30);
  v31 = *(_QWORD *)(v8 + 48);
  v32 = *(_QWORD *)(v8 + 56);
  *(_QWORD *)(v8 + 48) = v31 + 4;
  v33 = v31 + 6;
  if (v31 + 6 > v32)
  {
    v17 = 1912;
    goto LABEL_18;
  }
  v34 = *a2;
  v35 = *(_QWORD *)(v8 + 40);
  *(_WORD *)(*a2 + 2872) = *(_WORD *)(v35 + v31 + 4);
  *(_QWORD *)(v8 + 48) = v33;
  v36 = v31 + 10;
  if (v36 > v32)
  {
    v17 = 1913;
    goto LABEL_18;
  }
  *(_DWORD *)(v34 + 2876) = *(_DWORD *)(v35 + v33);
  *(_QWORD *)(v8 + 48) = v36;
  v37 = geo::codec::Allocator::instance((geo::codec::Allocator *)v12.__d_.__rep_);
  v38 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v37 + 16))(v37, *(unsigned int *)(*a2 + 2876), 8);
  v39 = *a2;
  *(_QWORD *)(v39 + 2880) = v38;
  v40 = *(unsigned int *)(v39 + 2876);
  v41 = *(_QWORD *)(v8 + 48);
  if (v41 + v40 > *(_QWORD *)(v8 + 56))
  {
    v17 = 1916;
LABEL_18:
    v22 = (geo::codec::Allocator *)fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v17);
    v18 = 0;
    if (!a1)
      goto LABEL_22;
    goto LABEL_19;
  }
  v22 = (geo::codec::Allocator *)memcpy(v38, (const void *)(*(_QWORD *)(v8 + 40) + v41), v40);
  *(_QWORD *)(v8 + 48) += v40;
  v18 = 1;
  if (!a1)
    goto LABEL_22;
LABEL_19:
  if (*(_BYTE *)v8)
  {
    v23 = geo::codec::Allocator::instance(v22);
    v22 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 40))(v23, *(_QWORD *)(v8 + 40), 0);
  }
  v24 = geo::codec::Allocator::instance(v22);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 40))(v24, v8, 0);
LABEL_22:
  v25 = std::chrono::steady_clock::now().__d_.__rep_;
  v42 = "ChapterElevationRaster";
  v43 = &v42;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v4 + 1912, (uint64_t *)&v42, (uint64_t)&std::piecewise_construct, (uint64_t **)&v43)+ 4) = (double)((v25 - rep) / 1000) * 0.001;
  if (v9)
  {
    v26 = (unint64_t *)&v9->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v18;
}

void sub_1886E6A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readTransitNetwork(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::chrono::steady_clock::time_point v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v22;
  int v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  FILE *v29;
  int v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  __n128 v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  unint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  __int128 v118;
  _QWORD *v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unsigned int v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned __int8 v162;
  uint64_t v163;
  uint64_t i;
  unint64_t v165;
  unsigned int v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t *v174;
  std::__shared_weak_count *v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _DWORD *v182;
  int *v183;
  unint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t *v193;
  std::__shared_weak_count *v194;
  unint64_t v195;
  unint64_t v196;
  int v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  int v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unsigned int v220;
  int v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unsigned int v235;
  int v236;
  unint64_t v237;
  unint64_t v238;
  int v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  int v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unsigned __int8 v249;
  uint64_t v250;
  _QWORD *v251;
  unsigned __int8 v252;
  uint64_t v253;
  _QWORD *v254;
  unsigned __int8 v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unsigned int v265;
  unsigned int v266;
  unint64_t v267;
  unint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  unsigned int v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  unsigned int v296;
  _QWORD *v297;
  uint64_t v298;
  unint64_t v299;
  unsigned int v300;
  unint64_t v301;
  unsigned int v302;
  unint64_t v303;
  unsigned int v304;
  unsigned int v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t *v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unsigned int v314;
  unint64_t v315;
  unsigned int v316;
  unsigned int v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unsigned int v326;
  int v327;
  unint64_t v328;
  unint64_t v329;
  int v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  uint64_t v334;
  geo::read_write_lock *v335;
  const char *v336;
  malloc_zone_t *v337;
  int v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v343;
  geo::read_write_lock *v344;
  const char *v345;
  malloc_zone_t *v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unsigned __int8 v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  unsigned int v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  int v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int v369;
  unint64_t v370;
  unsigned int v371;
  unsigned int v372;
  unsigned __int8 v373;
  int v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t v385;
  unsigned int v386;
  unsigned int v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unsigned int v394;
  uint64_t v395;
  unsigned int v396;
  int v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t v400;
  int v401;
  unint64_t v402;
  unint64_t v403;
  int v404;
  uint64_t v405;
  unint64_t v406;
  unint64_t v407;
  int v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unsigned int v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unint64_t v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  std::__shared_weak_count *v430;
  uint64_t v431;
  unint64_t v432;
  unsigned __int8 v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  uint64_t v459;
  uint64_t v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  std::__shared_weak_count *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  uint64_t v472;
  unsigned int v473;
  unint64_t v474;
  int v475;
  unsigned int v476;
  unint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unsigned int v482;
  int v483;
  unsigned int v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  unsigned int v489;
  uint64_t v490;
  _QWORD *v491;
  uint64_t v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unsigned int v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t v501;
  int v502;
  uint64_t v503;
  unint64_t v504;
  unint64_t v505;
  int v506;
  unint64_t v507;
  unint64_t v508;
  unint64_t v509;
  int v510;
  unint64_t v511;
  unint64_t v512;
  int v513;
  unint64_t v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  int v518;
  unint64_t v519;
  unint64_t v520;
  int v521;
  unint64_t v522;
  unint64_t v523;
  int v524;
  unint64_t v525;
  unint64_t v526;
  int v527;
  unint64_t v528;
  unint64_t v529;
  int v530;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  uint64_t v534;
  geo::read_write_lock *v535;
  const char *v536;
  malloc_zone_t *zone;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  unint64_t *v542;
  unint64_t v543;
  uint64_t *v544;
  std::__shared_weak_count *v545;
  unint64_t v546;
  unint64_t v547;
  _QWORD *v548;
  unint64_t v549;
  uint64_t v550;
  unint64_t v551;
  unint64_t v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  unsigned int v556;
  unsigned int v557;
  unint64_t v558;
  unint64_t v559;
  unint64_t *v560;
  unint64_t v561;
  unint64_t v562;
  unint64_t v563;
  unint64_t v564;
  unint64_t v565;
  uint64_t v566;
  unsigned int v567;
  unint64_t v568;
  char v569;
  int v570;
  unsigned int v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  unsigned int v575;
  int v576;
  unint64_t v577;
  unint64_t v578;
  unint64_t v579;
  int v580;
  unint64_t v581;
  unint64_t v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unsigned __int8 v590;
  unsigned __int8 v591;
  unsigned __int8 v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  std::__shared_weak_count *v596;
  uint64_t v597;
  uint64_t v598;
  char *v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  std::__shared_weak_count *v603;
  std::__shared_weak_count *v604;
  std::__shared_weak_count *v605;
  unint64_t *v606;
  unint64_t v607;
  std::__shared_weak_count *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unint64_t *v614;
  unint64_t v615;
  uint64_t *v616;
  std::__shared_weak_count *v617;
  unint64_t v618;
  unint64_t v619;
  int v620;
  uint64_t v621;
  unint64_t v622;
  unint64_t v623;
  unsigned int v624;
  uint64_t v625;
  unint64_t v626;
  unint64_t v627;
  uint64_t v628;
  int v629;
  unint64_t v630;
  unsigned int v631;
  unint64_t v632;
  unint64_t v633;
  unint64_t v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  unint64_t v638;
  uint64_t v639;
  geo::read_write_lock *v640;
  const char *v641;
  malloc_zone_t *v642;
  uint64_t v643;
  geo::read_write_lock *v644;
  const char *v645;
  malloc_zone_t *v646;
  uint64_t v647;
  geo::read_write_lock *v648;
  const char *v649;
  malloc_zone_t *v650;
  unsigned int v651;
  uint64_t v652;
  uint64_t v653;
  char *v654;
  char *v655;
  float v656;
  uint64_t v657;
  _QWORD *v658;
  uint64_t v659;
  BOOL v660;
  _QWORD *v661;
  _QWORD *v662;
  _QWORD *v663;
  uint64_t v664;
  uint64_t v665;
  std::__shared_weak_count *v666;
  std::__shared_weak_count *v667;
  std::__shared_weak_count *v668;
  uint64_t v669;
  _QWORD *v670;
  unint64_t *v671;
  unint64_t v672;
  uint64_t v673;
  std::__shared_weak_count *v674;
  uint64_t v675;
  std::__shared_weak_count *v676;
  std::__shared_weak_count *v677;
  uint64_t v678;
  _QWORD *v679;
  unint64_t *v680;
  unint64_t v681;
  std::__shared_weak_count *v682;
  uint64_t v683;
  std::__shared_weak_count *v684;
  std::__shared_weak_count *v685;
  uint64_t v686;
  uint64_t v687;
  unint64_t *v688;
  unint64_t v689;
  unint64_t v690;
  unint64_t v691;
  std::__shared_weak_count *v692;
  std::__shared_weak_count *v693;
  std::__shared_weak_count *v694;
  uint64_t v695;
  _QWORD *v696;
  uint64_t v697;
  unint64_t *v698;
  unint64_t v699;
  uint64_t v700;
  uint64_t v701;
  float v702;
  uint64_t v703;
  std::__shared_weak_count *v704;
  uint64_t v705;
  std::__shared_weak_count *v706;
  std::__shared_weak_count *v707;
  uint64_t v708;
  unint64_t *v709;
  unint64_t v710;
  std::__shared_weak_count *v711;
  uint64_t m;
  std::__shared_weak_count *v713;
  std::__shared_weak_count *v714;
  uint64_t v715;
  _QWORD *v716;
  unint64_t *v717;
  unint64_t v718;
  uint64_t v719;
  unsigned __int8 v720;
  uint64_t v721;
  _QWORD *v722;
  unsigned int v723;
  _QWORD *v724;
  void *v725;
  unint64_t v726;
  unint64_t v727;
  unint64_t v728;
  _QWORD *v729;
  _QWORD *v730;
  _QWORD *v731;
  void *v732;
  _QWORD *v733;
  _QWORD *v734;
  void *v735;
  uint64_t v736;
  unsigned int v737;
  int v738;
  unint64_t v739;
  unint64_t v740;
  int v741;
  unint64_t v742;
  unint64_t v743;
  unint64_t v744;
  int v745;
  unint64_t v746;
  unint64_t v747;
  int v748;
  unint64_t v749;
  unint64_t v750;
  unint64_t v751;
  uint64_t v752;
  _QWORD *n;
  _QWORD *v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  unsigned int *v762;
  uint64_t v763;
  std::__shared_weak_count *v764;
  std::__shared_weak_count *v765;
  uint64_t v766;
  unint64_t *v767;
  unint64_t v768;
  unsigned int v769;
  unint64_t v770;
  int v771;
  unint64_t v772;
  unint64_t v773;
  unint64_t v774;
  uint64_t v775;
  unint64_t v776;
  uint64_t v777;
  unsigned __int8 v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  GeoCodecsVectorTilePoint *var1;
  uint64_t v784;
  uint64_t v785;
  uint8x8_t v786;
  unint64_t v787;
  unint64_t v788;
  unint64_t v789;
  uint64_t **v790;
  uint64_t *v791;
  uint64_t v792;
  unint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  unsigned __int8 v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  unint64_t v802;
  unint64_t v803;
  int v804;
  _QWORD *v805;
  uint64_t v806;
  unint64_t v807;
  unint64_t v808;
  unint64_t v809;
  unsigned int v810;
  char v811;
  _QWORD *v812;
  unsigned int v813;
  unint64_t v814;
  unint64_t v815;
  unint64_t v816;
  unsigned int v817;
  unint64_t v818;
  unint64_t v819;
  unint64_t v820;
  unsigned int v821;
  unint64_t v822;
  unint64_t v823;
  uint64_t v824;
  const void *v825;
  size_t v826;
  _QWORD *v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  const void *v831;
  size_t v832;
  _QWORD *v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  const void *v838;
  size_t v839;
  _QWORD *v840;
  uint64_t v841;
  int v842;
  unint64_t v843;
  uint64_t v844;
  unint64_t v845;
  uint64_t v846;
  int v847;
  int *v848;
  int v849;
  int v850;
  uint64_t v851;
  unint64_t v852;
  unint64_t v853;
  uint64_t v854;
  unint64_t v855;
  unint64_t v856;
  uint64_t v857;
  unsigned int v858;
  int v859;
  unint64_t v860;
  unint64_t v861;
  int v862;
  unint64_t v863;
  unint64_t v864;
  unint64_t v865;
  uint64_t v866;
  unsigned int v867;
  int v868;
  unint64_t v869;
  unint64_t v870;
  unint64_t v871;
  uint64_t v872;
  unint64_t v873;
  unsigned __int8 v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  unsigned int v882;
  unint64_t v883;
  uint64_t v884;
  unint64_t v885;
  unint64_t v886;
  unint64_t v887;
  uint64_t v888;
  unsigned int v889;
  uint64_t v890;
  unint64_t v891;
  unint64_t v892;
  uint64_t v893;
  unsigned int v894;
  unint64_t v895;
  uint64_t v896;
  unint64_t v897;
  unint64_t v898;
  uint64_t v899;
  char v900;
  _QWORD *v901;
  uint64_t v902;
  uint64_t v903;
  unint64_t v904;
  unint64_t v905;
  unint64_t v906;
  unsigned int v907;
  uint64_t v908;
  unsigned __int8 v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  unint64_t v913;
  _QWORD *v914;
  unint64_t v915;
  uint64_t v916;
  unsigned int v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  _QWORD *v922;
  unint64_t v923;
  int v924;
  int v925;
  int v926;
  char v927;
  unsigned int v928;
  unsigned __int8 v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  _DWORD *v933;
  uint64_t v934;
  uint64_t v935;
  _DWORD *v936;
  unint64_t v937;
  int v938;
  uint64_t v939;
  unint64_t v940;
  unint64_t v941;
  unint64_t v942;
  float v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  unint64_t v949;
  unint64_t v950;
  unint64_t v951;
  float v952;
  unint64_t v953;
  uint64_t v954;
  unsigned int v955;
  uint64_t v956;
  int v957;
  uint64_t v958;
  int v959;
  float *v960;
  unint64_t v961;
  unsigned int v962;
  unsigned int v963;
  unint64_t v964;
  unint64_t v965;
  unsigned int v966;
  unsigned int v967;
  unint64_t v968;
  unint64_t v969;
  unsigned __int8 *v970;
  unint64_t v971;
  uint64_t v972;
  _QWORD *v973;
  uint64_t v974;
  unsigned __int8 v975;
  uint64_t k;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  _QWORD *v980;
  uint64_t v981;
  uint64_t v982;
  geo::read_write_lock *v983;
  const char *v984;
  malloc_zone_t *v985;
  uint64_t v986;
  uint64_t v987;
  unint64_t v988;
  unint64_t v989;
  unint64_t v990;
  uint64_t v991;
  unsigned int v992;
  uint64_t v993;
  uint64_t v994;
  unint64_t v995;
  _BYTE *v996;
  unint64_t v997;
  unsigned int v998;
  unint64_t v999;
  unsigned int v1000;
  int v1001;
  unint64_t v1002;
  unint64_t v1003;
  uint64_t v1004;
  geo::read_write_lock *v1005;
  const char *v1006;
  malloc_zone_t *v1007;
  int v1008;
  unint64_t v1009;
  unint64_t v1010;
  int v1011;
  unint64_t v1012;
  unint64_t v1013;
  unint64_t v1014;
  uint64_t v1015;
  unint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  geo::read_write_lock *v1023;
  const char *v1024;
  malloc_zone_t *v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  unint64_t v1029;
  unint64_t v1030;
  unint64_t v1031;
  uint64_t v1032;
  unsigned int v1033;
  unsigned int v1034;
  unint64_t v1035;
  unint64_t v1036;
  _QWORD *v1037;
  uint64_t v1038;
  uint64_t v1039;
  unint64_t v1040;
  unsigned int v1041;
  unsigned int v1042;
  unint64_t v1043;
  unint64_t v1044;
  const void *v1045;
  size_t v1046;
  unint64_t v1047;
  uint64_t v1048;
  unsigned int v1049;
  int v1050;
  unint64_t v1051;
  unint64_t v1052;
  int v1053;
  unint64_t v1054;
  unint64_t v1055;
  unint64_t v1056;
  int v1057;
  unint64_t v1058;
  unint64_t v1059;
  int v1060;
  unint64_t v1061;
  unint64_t v1062;
  unint64_t v1063;
  int v1064;
  unint64_t v1065;
  int v1066;
  unint64_t v1067;
  unint64_t v1068;
  unint64_t v1069;
  unsigned __int8 v1070;
  unsigned int v1071;
  unint64_t v1072;
  unsigned __int8 v1073;
  _QWORD *v1074;
  int v1075;
  unsigned int v1076;
  unsigned int v1077;
  unint64_t v1078;
  uint64_t v1079;
  unint64_t v1080;
  unsigned int v1081;
  uint64_t v1082;
  unint64_t v1083;
  unint64_t v1084;
  unint64_t v1085;
  uint64_t v1086;
  unint64_t v1087;
  uint64_t v1088;
  unsigned int v1089;
  unint64_t v1090;
  uint64_t v1091;
  unsigned int v1092;
  unsigned int v1093;
  unint64_t v1094;
  unint64_t v1095;
  unint64_t v1096;
  unint64_t v1097;
  unint64_t v1098;
  unint64_t v1099;
  uint64_t v1100;
  unsigned int v1101;
  int v1102;
  unint64_t v1103;
  unint64_t v1104;
  int v1105;
  unint64_t v1106;
  unint64_t v1107;
  unint64_t v1108;
  unint64_t v1109;
  uint64_t v1110;
  unint64_t v1111;
  _QWORD *v1112;
  unsigned __int8 v1113;
  uint64_t v1114;
  unint64_t v1115;
  unsigned int v1116;
  int *v1117;
  unint64_t v1118;
  unint64_t v1119;
  uint64_t v1120;
  unint64_t v1121;
  uint64_t v1122;
  unsigned int v1123;
  uint64_t v1124;
  uint64_t v1125;
  unint64_t v1126;
  BOOL *v1127;
  unint64_t v1128;
  unsigned int v1129;
  unsigned int v1130;
  unint64_t v1131;
  unsigned int v1132;
  unint64_t v1133;
  uint64_t v1134;
  unsigned int v1135;
  int v1136;
  unint64_t v1137;
  unint64_t v1138;
  unsigned int v1139;
  int v1140;
  int v1141;
  unint64_t v1142;
  unint64_t v1143;
  int v1144;
  unint64_t v1145;
  unint64_t v1146;
  int v1147;
  unint64_t v1148;
  unint64_t v1149;
  int v1150;
  unint64_t v1151;
  unint64_t v1152;
  unint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  geo::codec::Allocator *v1156;
  uint64_t v1157;
  _QWORD *v1158;
  uint64_t v1159;
  unint64_t v1160;
  unint64_t v1161;
  unsigned int v1162;
  uint64_t v1163;
  int v1164;
  _QWORD *v1165;
  uint64_t v1166;
  int v1167;
  unint64_t v1168;
  unsigned int v1169;
  unint64_t v1170;
  unsigned int v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  geo::read_write_lock *v1175;
  const char *v1176;
  malloc_zone_t *v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  unint64_t v1185;
  unsigned int v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  GeoCodecsRange **v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  unint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  float *v1202;
  uint64_t v1203;
  unint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  _QWORD *v1207;
  _DWORD *v1208;
  unsigned int v1209;
  std::__shared_weak_count *v1210;
  std::__shared_weak_count *v1211;
  unsigned int v1212;
  std::__shared_weak_count *v1213;
  std::__shared_weak_count *v1214;
  std::__shared_weak_count *v1215;
  _QWORD *v1216;
  unint64_t v1217;
  uint64_t v1218;
  unint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  unint64_t *v1222;
  uint64_t v1223;
  unint64_t v1224;
  _QWORD *v1225;
  float *v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  unint64_t *v1231;
  unint64_t v1232;
  unint64_t v1233;
  unint64_t v1234;
  char v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  unint64_t v1244;
  unint64_t v1245;
  unint64_t var2;
  unint64_t v1247;
  _DWORD *v1248;
  uint64_t v1249;
  unsigned int v1250;
  uint64_t v1251;
  unint64_t v1252;
  unint64_t v1253;
  unint64_t v1254;
  unint64_t v1255;
  unint64_t v1256;
  unint64_t v1257;
  _QWORD *v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  unint64_t v1264;
  unsigned int v1265;
  uint64_t v1266;
  unint64_t v1267;
  unint64_t v1268;
  unint64_t var7_low;
  uint64_t v1270;
  unint64_t v1271;
  uint64_t v1272;
  unint64_t v1273;
  uint64_t v1274;
  uint64_t j;
  unint64_t v1276;
  unint64_t v1277;
  unint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  unsigned int v1284;
  unint64_t v1285;
  unint64_t v1286;
  unint64_t v1287;
  unint64_t v1288;
  uint64_t *v1289;
  int v1290;
  unsigned int v1291;
  GeoCodecsVertexPool __p;
  uint64_t *v1293;
  GeoCodecsRange **p_var8;
  _QWORD v1295[3];
  _QWORD *v1296;
  _QWORD v1297[3];
  _QWORD *v1298;
  _QWORD v1299[3];
  _QWORD *v1300;
  _QWORD v1301[3];
  _QWORD *v1302;
  _QWORD v1303[3];
  _QWORD *v1304;
  _QWORD v1305[3];
  _QWORD *v1306;
  uint64_t v1307;

  v1307 = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  if (!v3)
    return 1;
  v6 = 0;
  v7 = 0;
  while (*(_WORD *)(*a1 + 16 * v6) != 129)
  {
    v6 = ++v7;
    if (v3 <= v7)
      return 1;
  }
  v8 = geo::codec::chapterAt((uint64_t)a1, v7, 129, *a3 + 1912);
  if (!v8)
    return 1;
  v9 = v8;
  v11 = *a3;
  v10 = (std::__shared_weak_count *)a3[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v16 = *(_QWORD *)(v9 + 48);
  v15 = *(_QWORD *)(v9 + 56);
  v17 = v15 - v16;
  if (v15 >= v16)
  {
    v18 = 0;
    *(_BYTE *)(v9 + 32) = 1;
    v22 = *(_QWORD *)(v9 + 40) + v16;
    *(_QWORD *)(v9 + 16) = v17;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 8) = v22;
    v19 = 8 * v17;
    if (8 * v17 < 5)
    {
LABEL_21:
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4460;
      goto LABEL_22;
    }
  }
  else
  {
    v18 = *(_QWORD *)(v9 + 24);
    v19 = 8 * *(_QWORD *)(v9 + 16);
    if (v18 + 5 > v19)
      goto LABEL_21;
  }
  v23 = 0;
  v24 = (unint64_t *)(v9 + 24);
  v25 = *(_QWORD *)(v9 + 8);
  v26 = 5;
  do
  {
    v27 = 8 - (v18 & 7);
    if (v26 < v27)
      v27 = v26;
    v23 = (*(unsigned __int8 *)(v25 + (v18 >> 3)) >> (8 - (v18 & 7) - v27)) & ~(-1 << v27) | (v23 << v27);
    v18 += v27;
    *v24 = v18;
    v26 -= v27;
  }
  while (v26);
  v28 = (v23 + 1);
  if (v18 + v28 > v19)
    goto LABEL_21;
  v36 = 0;
  if (v23 != -1)
  {
    do
    {
      v37 = 8 - (v18 & 7);
      if (v28 < v37)
        v37 = v28;
      v36 = (*(unsigned __int8 *)(v25 + (v18 >> 3)) >> (8 - (v18 & 7) - v37)) & ~(-1 << v37) | (v36 << v37);
      v18 += v37;
      *v24 = v18;
      v28 -= v37;
    }
    while (v28);
  }
  if (v18 + 5 > v19)
    goto LABEL_41;
  v38 = 0;
  v39 = 5;
  do
  {
    v40 = 8 - (v18 & 7);
    if (v39 < v40)
      v40 = v39;
    v38 = (*(unsigned __int8 *)(v25 + (v18 >> 3)) >> (8 - (v18 & 7) - v40)) & ~(-1 << v40) | (v38 << v40);
    v18 += v40;
    *v24 = v18;
    v39 -= v40;
  }
  while (v39);
  v41 = (v38 + 1);
  if (v18 + v41 > v19)
  {
LABEL_41:
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4461;
    goto LABEL_22;
  }
  v42 = 0;
  if (v38 != -1)
  {
    do
    {
      v43 = 8 - (v18 & 7);
      if (v41 < v43)
        v43 = v41;
      v42 = (*(unsigned __int8 *)(v25 + (v18 >> 3)) >> (8 - (v18 & 7) - v43)) & ~(-1 << v43) | (v42 << v43);
      v18 += v43;
      *v24 = v18;
      v41 -= v43;
    }
    while (v41);
  }
  v1289 = (uint64_t *)(v9 + 8);
  if ((geo::codec::decodeSectionEncoding((geo::codec::Allocator *)(v9 + 8), (GeoCodecsVertexPool *)(*a3 + 1400), 1, a2, 0) & 1) == 0)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4463;
    goto LABEL_22;
  }
  v45 = *(_QWORD *)(v9 + 24);
  v46 = 8 * *(_QWORD *)(v9 + 16);
  if (v45 + 5 > v46)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4466;
    goto LABEL_22;
  }
  v47 = 0;
  v48 = (uint64_t *)(v9 + 8);
  v49 = *v1289;
  v50 = 5;
  do
  {
    v51 = 8 - (v45 & 7);
    if (v50 < v51)
      v51 = v50;
    v47 = (*(unsigned __int8 *)(v49 + (v45 >> 3)) >> (8 - (v45 & 7) - v51)) & ~(-1 << v51) | (v47 << v51);
    v45 += v51;
    *v24 = v45;
    v50 -= v51;
  }
  while (v50);
  if (v45 + 5 > v46)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4468;
    goto LABEL_22;
  }
  v52 = 0;
  v53 = (v47 + 1);
  v54 = 5;
  do
  {
    v55 = 8 - (v45 & 7);
    if (v54 < v55)
      v55 = v54;
    v52 = (*(unsigned __int8 *)(v49 + (v45 >> 3)) >> (8 - (v45 & 7) - v55)) & ~(-1 << v55) | (v52 << v55);
    v45 += v55;
    *v24 = v45;
    v54 -= v55;
  }
  while (v54);
  if (v45 + 5 > v46)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4470;
    goto LABEL_22;
  }
  v56 = 0;
  v57 = 5;
  do
  {
    v58 = 8 - (v45 & 7);
    if (v57 < v58)
      v58 = v57;
    v56 = (*(unsigned __int8 *)(v49 + (v45 >> 3)) >> (8 - (v45 & 7) - v58)) & ~(-1 << v58) | (v56 << v58);
    v45 += v58;
    *v24 = v45;
    v57 -= v58;
  }
  while (v57);
  v1253 = v53;
  v1255 = (v56 + 1);
  v1256 = (v52 + 1);
  if (v36)
  {
    v59 = *a3;
    v60 = *(_QWORD *)(*a3 + 1352);
    v61 = *(_QWORD *)(*a3 + 1344);
    v62 = 0xD37A6F4DE9BD37A7 * ((v60 - v61) >> 3);
    v63 = v36 - v62;
    if (v36 <= v62)
    {
      if (v36 >= v62)
      {
LABEL_143:
        v142 = *(_QWORD *)(v9 + 24);
        v143 = 8 * *(_QWORD *)(v9 + 16);
        if (v142 + 5 > v143)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 4476;
          goto LABEL_22;
        }
        v144 = 0;
        v145 = *v1289;
        v146 = 5;
        do
        {
          v147 = 8 - (v142 & 7);
          if (v146 < v147)
            v147 = v146;
          v144 = (*(unsigned __int8 *)(v145 + (v142 >> 3)) >> (8 - (v142 & 7) - v147)) & ~(-1 << v147) | (v144 << v147);
          v142 += v147;
          *v24 = v142;
          v146 -= v147;
        }
        while (v146);
        if (v142 + 5 > v143)
        {
          v30 = 4478;
          goto LABEL_165;
        }
        v148 = 0;
        v149 = (v144 + 1);
        v150 = 5;
        do
        {
          v151 = 8 - (v142 & 7);
          if (v150 < v151)
            v151 = v150;
          v148 = (*(unsigned __int8 *)(v145 + (v142 >> 3)) >> (8 - (v142 & 7) - v151)) & ~(-1 << v151) | (v148 << v151);
          v142 += v151;
          *v24 = v142;
          v150 -= v151;
        }
        while (v150);
        v152 = 0;
        v153 = 0;
        v154 = (v148 + 1);
        v155 = *a3;
        do
        {
          if (v142 + v149 > v143)
          {
            v30 = 4482;
            goto LABEL_165;
          }
          v157 = 0;
          if ((_DWORD)v149)
          {
            v158 = v149;
            do
            {
              v159 = 8 - (v142 & 7);
              if (v158 < v159)
                v159 = v158;
              v157 = (*(unsigned __int8 *)(v145 + (v142 >> 3)) >> (8 - (v142 & 7) - v159)) & ~(-1 << v159) | (v157 << v159);
              v142 += v159;
              *v24 = v142;
              v158 -= v159;
            }
            while (v158);
          }
          v156 = *(_QWORD *)(v155 + 1344) + 184 * v152;
          *(_DWORD *)(v156 + 16) = v153;
          *(_DWORD *)(v156 + 20) = v157;
          v153 += v157;
          ++v152;
        }
        while (v152 != v36);
        v1250 = v153;
        if (v142 + v154 > v143)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 4489;
          goto LABEL_22;
        }
        if ((_DWORD)v154)
        {
          LODWORD(v160) = 0;
          do
          {
            v161 = 8 - (v142 & 7);
            if (v154 < v161)
              v161 = v154;
            v160 = (*(unsigned __int8 *)(v145 + (v142 >> 3)) >> (8 - (v142 & 7) - v161)) & ~(-1 << v161) | ((_DWORD)v160 << v161);
            v142 += v161;
            *v24 = v142;
            v154 -= v161;
          }
          while (v154);
          *(_QWORD *)(*a3 + 1392) = v160;
          if ((_DWORD)v160)
          {
            if ((v162 & 1) == 0
            {
              v534 = operator new();
              *(_QWORD *)(v534 + 16) = 0x99AFC36000000008;
              *(_QWORD *)(v534 + 24) = "GeoCodec";
              *(_OWORD *)(v534 + 32) = xmmword_189CFDB80;
              *(_QWORD *)v534 = &off_1E1BF6690;
              *(_QWORD *)(v534 + 8) = "GeoCodec";
              *(_OWORD *)(v534 + 56) = 0u;
              *(_OWORD *)(v534 + 72) = 0u;
              *(_OWORD *)(v534 + 88) = 0u;
              *(_OWORD *)(v534 + 104) = 0u;
              *(_OWORD *)(v534 + 120) = 0u;
              *(_OWORD *)(v534 + 136) = 0u;
              *(_OWORD *)(v534 + 152) = 0u;
              *(_OWORD *)(v534 + 168) = 0u;
              *(_OWORD *)(v534 + 184) = 0u;
              *(_OWORD *)(v534 + 200) = 0u;
              *(_OWORD *)(v534 + 216) = 0u;
              *(_OWORD *)(v534 + 232) = 0u;
              *(_QWORD *)(v534 + 248) = 0;
              v535 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v534 + 56), 0);
              if ((_DWORD)v535)
                geo::read_write_lock::logFailure(v535, (uint64_t)"initialization", v536);
              zone = malloc_create_zone(0, 0);
              *(_QWORD *)(v534 + 48) = zone;
              malloc_set_zone_name(zone, "GeoCodec");
              *(_QWORD *)(v534 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              geo::codec::Allocator::instance(void)::alloc = v534;
            }
            v163 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                                + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * *(_QWORD *)(*a3 + 1392), 8, v44);
            *(_QWORD *)(*a3 + 1376) = v163;
            if (!v163)
            {
              v29 = (FILE *)*MEMORY[0x1E0C80C10];
              v30 = 4494;
              goto LABEL_22;
            }
          }
        }
        else
        {
          *(_QWORD *)(*a3 + 1392) = 0;
        }
        v186 = 0;
        if (v36 <= 1)
          v187 = 1;
        else
          v187 = v36;
        v1262 = v187;
        v1270 = 0;
        do
        {
          v188 = *a3;
          v189 = a3[1];
          v190 = *(_QWORD *)(*a3 + 1344);
          if (v189)
          {
            v191 = (unint64_t *)(v189 + 16);
            do
              v192 = __ldxr(v191);
            while (__stxr(v192 + 1, v191));
          }
          v193 = (uint64_t *)(v190 + 184 * v186);
          v194 = (std::__shared_weak_count *)v193[1];
          *v193 = v188;
          v193[1] = v189;
          if (v194)
            std::__shared_weak_count::__release_weak(v194);
          v195 = *(_QWORD *)(v9 + 24);
          v196 = 8 * *(_QWORD *)(v9 + 16);
          if (v195 + v1253 > v196)
          {
            v29 = (FILE *)*MEMORY[0x1E0C80C10];
            v30 = 4502;
            goto LABEL_22;
          }
          v197 = 0;
          if ((_DWORD)v1253)
          {
            v198 = *v1289;
            v199 = v1253;
            do
            {
              v200 = 8 - (v195 & 7);
              if (v199 < v200)
                v200 = v199;
              v197 = (*(unsigned __int8 *)(v198 + (v195 >> 3)) >> (8 - (v195 & 7) - v200)) & ~(-1 << v200) | (v197 << v200);
              v195 += v200;
              *v24 = v195;
              v199 -= v200;
            }
            while (v199);
            if (v197)
            {
              v201 = v197 + v1270;
              v202 = *a3;
              if ((_DWORD)v1256)
              {
                v203 = v1270;
                while (v195 + v1256 <= v196)
                {
                  v204 = 0;
                  v205 = v1256;
                  do
                  {
                    v206 = 8 - (v195 & 7);
                    if (v205 < v206)
                      v206 = v205;
                    v204 = (*(unsigned __int8 *)(v198 + (v195 >> 3)) >> (8 - (v195 & 7) - v206)) & ~(-1 << v206) | (v204 << v206);
                    v195 += v206;
                    *v24 = v195;
                    v205 -= v206;
                  }
                  while (v205);
                  v207 = *(_QWORD *)(v202 + 1376);
                  *(_DWORD *)(v207 + 8 * v203) = v204;
                  if (v195 + v1255 > v196)
                    goto LABEL_262;
                  v208 = 0;
                  if ((_DWORD)v1255)
                  {
                    v209 = v1255;
                    do
                    {
                      v210 = 8 - (v195 & 7);
                      if (v209 < v210)
                        v210 = v209;
                      v208 = (*(unsigned __int8 *)(v198 + (v195 >> 3)) >> (8 - (v195 & 7) - v210)) & ~(-1 << v210) | (v208 << v210);
                      v195 += v210;
                      *v24 = v195;
                      v209 -= v210;
                    }
                    while (v209);
                  }
                  *(_DWORD *)(v207 + 8 * v203++ + 4) = v208;
                  if (v201 == (_DWORD)v203)
                    goto LABEL_248;
                }
              }
              else
              {
                v203 = v1270;
                while (v195 + v1256 <= v196)
                {
                  v212 = *(_QWORD *)(v202 + 1376);
                  *(_DWORD *)(v212 + 8 * v203) = 0;
                  if (v195 + v1255 > v196)
                  {
LABEL_262:
                    v30 = 4508;
                    goto LABEL_165;
                  }
                  v213 = 0;
                  if ((_DWORD)v1255)
                  {
                    v214 = v1255;
                    do
                    {
                      v215 = 8 - (v195 & 7);
                      if (v214 < v215)
                        v215 = v214;
                      v213 = (*(unsigned __int8 *)(v198 + (v195 >> 3)) >> (8 - (v195 & 7) - v215)) & ~(-1 << v215) | (v213 << v215);
                      v195 += v215;
                      *v24 = v195;
                      v214 -= v215;
                    }
                    while (v214);
                  }
                  *(_DWORD *)(v212 + 8 * v203++ + 4) = v213;
                  if (v201 == (_DWORD)v203)
                    goto LABEL_248;
                }
              }
              v30 = 4506;
              goto LABEL_165;
            }
          }
          v203 = v1270;
LABEL_248:
          v211 = *(_QWORD *)(*a3 + 1344) + 184 * v186;
          *(_QWORD *)(v211 + 24) = v1270;
          *(_QWORD *)(v211 + 32) = v203 - v1270;
          if (v203 - v1270 != v197)
          {
            v29 = (FILE *)*MEMORY[0x1E0C80C10];
            v30 = 4513;
            goto LABEL_22;
          }
          v1270 = v203;
          ++v186;
        }
        while (v186 != v1262);
        v48 = (uint64_t *)(v9 + 8);
        v72 = v1250;
        v73 = *a3;
        if (!v42)
          goto LABEL_266;
        goto LABEL_78;
      }
      v1259 = *a3;
      v88 = v61 + 184 * v36;
      if (v60 != v88)
      {
        do
        {
          v89 = *(std::__shared_weak_count **)(v60 - 176);
          if (v89)
            std::__shared_weak_count::__release_weak(v89);
          v60 -= 184;
        }
        while (v60 != v88);
        v60 = v88;
      }
      v59 = v1259;
    }
    else
    {
      v64 = *(_QWORD *)(v59 + 1360);
      if (0xD37A6F4DE9BD37A7 * ((v64 - v60) >> 3) < v63)
      {
        v65 = 0xD37A6F4DE9BD37A7 * ((v64 - v61) >> 3);
        v66 = 2 * v65;
        if (2 * v65 <= v36)
          v66 = v36;
        if (v65 >= 0xB21642C8590B21)
          v66 = 0x1642C8590B21642;
        v1258 = (_QWORD *)*a3;
        v1249 = v66;
        v67 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v59 + 1368) + 16))(*(_QWORD *)(v59 + 1368), 184 * v66, 8);
        v68 = v67 + 184 * v62;
        v69 = v67 + 184 * v36;
        v70 = 184 * v36 - 184 * v62;
        v44 = 0uLL;
        v71 = v68;
        do
        {
          if (v71)
          {
            *(_QWORD *)(v71 + 176) = 0;
            *(_OWORD *)(v71 + 144) = 0uLL;
            *(_OWORD *)(v71 + 160) = 0uLL;
            *(_OWORD *)(v71 + 112) = 0uLL;
            *(_OWORD *)(v71 + 128) = 0uLL;
            *(_OWORD *)(v71 + 80) = 0uLL;
            *(_OWORD *)(v71 + 96) = 0uLL;
            *(_OWORD *)(v71 + 48) = 0uLL;
            *(_OWORD *)(v71 + 64) = 0uLL;
            *(_OWORD *)(v71 + 16) = 0uLL;
            *(_OWORD *)(v71 + 32) = 0uLL;
            *(_OWORD *)v71 = 0uLL;
          }
          v71 += 184;
          v70 -= 184;
        }
        while (v70);
        v92 = v67 + 184 * v1249;
        v93 = v1258;
        v94 = v1258[169];
        v95 = v1258[168];
        if (v94 == v95)
        {
          v1258[168] = v68;
          v1258[169] = v69;
          v1251 = v1258[170];
          v1258[170] = v92;
        }
        else
        {
          do
          {
            v96 = *(_OWORD *)(v94 - 184);
            v94 -= 184;
            *(_OWORD *)(v68 - 184) = v96;
            v68 -= 184;
            *(_QWORD *)v94 = 0;
            *(_QWORD *)(v94 + 8) = 0;
            v97 = *(_OWORD *)(v94 + 112);
            v99 = *(_OWORD *)(v94 + 64);
            v98 = *(_OWORD *)(v94 + 80);
            *(_OWORD *)(v68 + 96) = *(_OWORD *)(v94 + 96);
            *(_OWORD *)(v68 + 112) = v97;
            *(_OWORD *)(v68 + 64) = v99;
            *(_OWORD *)(v68 + 80) = v98;
            v101 = *(_OWORD *)(v94 + 144);
            v100 = *(_OWORD *)(v94 + 160);
            v102 = *(_OWORD *)(v94 + 128);
            *(_QWORD *)(v68 + 176) = *(_QWORD *)(v94 + 176);
            *(_OWORD *)(v68 + 144) = v101;
            *(_OWORD *)(v68 + 160) = v100;
            *(_OWORD *)(v68 + 128) = v102;
            v44 = *(__n128 *)(v94 + 48);
            v103 = *(_OWORD *)(v94 + 16);
            *(_OWORD *)(v68 + 32) = *(_OWORD *)(v94 + 32);
            *(__n128 *)(v68 + 48) = v44;
            *(_OWORD *)(v68 + 16) = v103;
          }
          while (v94 != v95);
          v94 = v1258[168];
          v104 = v1258[169];
          v1258[168] = v68;
          v1258[169] = v69;
          v1251 = v1258[170];
          v1258[170] = v92;
          while (v104 != v94)
          {
            v105 = *(std::__shared_weak_count **)(v104 - 176);
            if (v105)
              std::__shared_weak_count::__release_weak(v105);
            v104 -= 184;
          }
          v93 = v1258;
        }
        if (v94)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v93[171] + 40))(v93[171], v94, v1251 - v94);
        goto LABEL_143;
      }
      v90 = v60 + 184 * v63;
      v91 = 184 * v36 - 184 * v62;
      v44 = 0uLL;
      do
      {
        if (v60)
        {
          *(_QWORD *)(v60 + 176) = 0;
          *(_OWORD *)(v60 + 144) = 0uLL;
          *(_OWORD *)(v60 + 160) = 0uLL;
          *(_OWORD *)(v60 + 112) = 0uLL;
          *(_OWORD *)(v60 + 128) = 0uLL;
          *(_OWORD *)(v60 + 80) = 0uLL;
          *(_OWORD *)(v60 + 96) = 0uLL;
          *(_OWORD *)(v60 + 48) = 0uLL;
          *(_OWORD *)(v60 + 64) = 0uLL;
          *(_OWORD *)(v60 + 16) = 0uLL;
          *(_OWORD *)(v60 + 32) = 0uLL;
          *(_OWORD *)v60 = 0uLL;
        }
        v60 += 184;
        v91 -= 184;
      }
      while (v91);
      v60 = v90;
    }
    *(_QWORD *)(v59 + 1352) = v60;
    goto LABEL_143;
  }
  v72 = 0;
  v73 = *a3;
  v1250 = 0;
  if (!v42)
  {
LABEL_266:
    v179 = *(_QWORD *)(v73 + 1416);
    v176 = *(_QWORD *)(v73 + 1408);
    goto LABEL_267;
  }
LABEL_78:
  v74 = *(_QWORD *)(v73 + 1416);
  v75 = *(_QWORD *)(v73 + 1408);
  v76 = 0x82FA0BE82FA0BE83 * ((v74 - v75) >> 3);
  v77 = v42 - v76;
  v1240 = v73;
  if (v42 > v76)
  {
    v78 = *(_QWORD *)(v73 + 1424);
    if (0x82FA0BE82FA0BE83 * ((v78 - v74) >> 3) < v77)
    {
      v79 = 0x82FA0BE82FA0BE83 * ((v78 - v75) >> 3);
      v80 = 2 * v79;
      if (2 * v79 <= v42)
        v80 = v42;
      if (v79 >= 0x5F417D05F417D0)
        v81 = 0xBE82FA0BE82FA0;
      else
        v81 = v80;
      v82 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v73 + 1432) + 16))(*(_QWORD *)(v73 + 1432), 344 * v81, 8);
      v83 = v82 + 344 * v76;
      v84 = v82 + 344 * v42;
      v85 = 344 * v42 - 344 * v76;
      v86 = 0uLL;
      v87 = v83;
      do
      {
        if (v87)
        {
          *(_QWORD *)(v87 + 336) = 0;
          *(_OWORD *)(v87 + 304) = 0uLL;
          *(_OWORD *)(v87 + 320) = 0uLL;
          *(_OWORD *)(v87 + 272) = 0uLL;
          *(_OWORD *)(v87 + 288) = 0uLL;
          *(_OWORD *)(v87 + 240) = 0uLL;
          *(_OWORD *)(v87 + 256) = 0uLL;
          *(_OWORD *)(v87 + 208) = 0uLL;
          *(_OWORD *)(v87 + 224) = 0uLL;
          *(_OWORD *)(v87 + 176) = 0uLL;
          *(_OWORD *)(v87 + 192) = 0uLL;
          *(_OWORD *)(v87 + 144) = 0uLL;
          *(_OWORD *)(v87 + 160) = 0uLL;
          *(_OWORD *)(v87 + 112) = 0uLL;
          *(_OWORD *)(v87 + 128) = 0uLL;
          *(_OWORD *)(v87 + 80) = 0uLL;
          *(_OWORD *)(v87 + 96) = 0uLL;
          *(_OWORD *)(v87 + 48) = 0uLL;
          *(_OWORD *)(v87 + 64) = 0uLL;
          *(_OWORD *)(v87 + 16) = 0uLL;
          *(_OWORD *)(v87 + 32) = 0uLL;
          *(_OWORD *)v87 = 0uLL;
        }
        v87 += 344;
        v85 -= 344;
      }
      while (v85);
      v113 = v82 + 344 * v81;
      v114 = *(_QWORD *)(v1240 + 1408);
      v1261 = *(_QWORD *)(v1240 + 1416);
      if (v1261 == v114)
      {
        *(_QWORD *)(v1240 + 1408) = v83;
        *(_QWORD *)(v1240 + 1416) = v84;
        v1230 = *(_QWORD *)(v1240 + 1424);
        *(_QWORD *)(v1240 + 1424) = v113;
      }
      else
      {
        v115 = 0;
        do
        {
          v116 = v83 + v115;
          v117 = (_OWORD *)(v1261 + v115 - 344);
          *(_OWORD *)(v83 + v115 - 344) = *v117;
          *(_QWORD *)(v1261 + v115 - 336) = 0;
          v118 = *(_OWORD *)(v1261 + v115 - 328);
          *(_QWORD *)v117 = 0;
          *(_OWORD *)(v83 + v115 - 328) = v118;
          v119 = (_QWORD *)(v1261 + v115 - 312);
          *(_QWORD *)(v83 + v115 - 312) = *v119;
          *v119 = 0;
          v120 = v83 + v115 - 304;
          v121 = *(_OWORD *)(v1261 + v115 - 304);
          v122 = *(_OWORD *)(v1261 + v115 - 288);
          LODWORD(v119) = *(_DWORD *)(v1261 + v115 - 272);
          *(_QWORD *)(v1261 + v115 - 320) = 0;
          *(_DWORD *)(v120 + 32) = (_DWORD)v119;
          *(_OWORD *)v120 = v121;
          *(_OWORD *)(v120 + 16) = v122;
          v123 = *(_OWORD *)(v1261 + v115 - 232);
          v124 = *(_OWORD *)(v1261 + v115 - 216);
          v125 = *(_OWORD *)(v1261 + v115 - 200);
          *(_OWORD *)(v116 - 248) = *(_OWORD *)(v1261 + v115 - 248);
          *(_OWORD *)(v116 - 200) = v125;
          *(_OWORD *)(v116 - 216) = v124;
          *(_OWORD *)(v116 - 232) = v123;
          v126 = *(_OWORD *)(v1261 + v115 - 168);
          v127 = *(_OWORD *)(v1261 + v115 - 152);
          v128 = *(_OWORD *)(v1261 + v115 - 143);
          *(_OWORD *)(v116 - 184) = *(_OWORD *)(v1261 + v115 - 184);
          *(_OWORD *)(v116 - 143) = v128;
          *(_OWORD *)(v116 - 152) = v127;
          *(_OWORD *)(v116 - 168) = v126;
          *(_OWORD *)(v83 + v115 - 264) = *(_OWORD *)(v1261 + v115 - 264);
          v129 = *(_OWORD *)(v1261 + v115 - 120);
          v130 = *(_OWORD *)(v1261 + v115 - 104);
          v131 = *(_OWORD *)(v1261 + v115 - 88);
          *(_OWORD *)(v116 - 72) = *(_OWORD *)(v1261 + v115 - 72);
          *(_OWORD *)(v116 - 88) = v131;
          *(_OWORD *)(v116 - 104) = v130;
          *(_OWORD *)(v116 - 120) = v129;
          v86 = *(__n128 *)(v1261 + v115 - 56);
          v132 = *(_OWORD *)(v1261 + v115 - 40);
          v133 = *(_OWORD *)(v1261 + v115 - 24);
          *(_QWORD *)(v116 - 8) = *(_QWORD *)(v1261 + v115 - 8);
          *(_OWORD *)(v116 - 24) = v133;
          *(_OWORD *)(v116 - 40) = v132;
          *(__n128 *)(v116 - 56) = v86;
          v115 -= 344;
        }
        while (v1261 + v115 != v114);
        v134 = *(_QWORD *)(v1240 + 1408);
        v135 = *(_QWORD *)(v1240 + 1416);
        *(_QWORD *)(v1240 + 1408) = v83 + v115;
        *(_QWORD *)(v1240 + 1416) = v84;
        v1230 = *(_QWORD *)(v1240 + 1424);
        *(_QWORD *)(v1240 + 1424) = v113;
        v1261 = v134;
        if (v135 != v134)
        {
          v136 = v134;
          do
          {
            v137 = v135 - 344;
            v138 = *(std::__shared_weak_count **)(v135 - 312);
            if (v138)
            {
              v139 = (unint64_t *)&v138->__shared_owners_;
              do
                v140 = __ldaxr(v139);
              while (__stlxr(v140 - 1, v139));
              if (!v140)
              {
                ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                std::__shared_weak_count::__release_weak(v138);
                v136 = v1261;
              }
            }
            v141 = *(std::__shared_weak_count **)(v135 - 336);
            if (v141)
            {
              std::__shared_weak_count::__release_weak(v141);
              v136 = v1261;
            }
            v135 -= 344;
          }
          while (v137 != v136);
        }
      }
      v72 = v1250;
      if (v1261)
        (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(**(_QWORD **)(v1240 + 1432) + 40))(*(_QWORD *)(v1240 + 1432), v1261, v1230 - v1261, v86);
      goto LABEL_182;
    }
    v111 = v74 + 344 * v77;
    v112 = 344 * v42 - 344 * v76;
    do
    {
      if (v74)
      {
        *(_QWORD *)(v74 + 336) = 0;
        *(_OWORD *)(v74 + 304) = 0uLL;
        *(_OWORD *)(v74 + 320) = 0uLL;
        *(_OWORD *)(v74 + 272) = 0uLL;
        *(_OWORD *)(v74 + 288) = 0uLL;
        *(_OWORD *)(v74 + 240) = 0uLL;
        *(_OWORD *)(v74 + 256) = 0uLL;
        *(_OWORD *)(v74 + 208) = 0uLL;
        *(_OWORD *)(v74 + 224) = 0uLL;
        *(_OWORD *)(v74 + 176) = 0uLL;
        *(_OWORD *)(v74 + 192) = 0uLL;
        *(_OWORD *)(v74 + 144) = 0uLL;
        *(_OWORD *)(v74 + 160) = 0uLL;
        *(_OWORD *)(v74 + 112) = 0uLL;
        *(_OWORD *)(v74 + 128) = 0uLL;
        *(_OWORD *)(v74 + 80) = 0uLL;
        *(_OWORD *)(v74 + 96) = 0uLL;
        *(_OWORD *)(v74 + 48) = 0uLL;
        *(_OWORD *)(v74 + 64) = 0uLL;
        *(_OWORD *)(v74 + 16) = 0uLL;
        *(_OWORD *)(v74 + 32) = 0uLL;
        *(_OWORD *)v74 = 0uLL;
      }
      v74 += 344;
      v112 -= 344;
    }
    while (v112);
    v74 = v111;
    goto LABEL_178;
  }
  if (v42 < v76)
  {
    v1260 = v75 + 344 * v42;
    if (v74 != v1260)
    {
      do
      {
        v106 = v74 - 344;
        v107 = *(std::__shared_weak_count **)(v74 - 312);
        if (v107)
        {
          v108 = (unint64_t *)&v107->__shared_owners_;
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        v110 = *(std::__shared_weak_count **)(v74 - 336);
        if (v110)
          std::__shared_weak_count::__release_weak(v110);
        v74 -= 344;
      }
      while (v106 != v1260);
      v74 = v1260;
    }
LABEL_178:
    *(_QWORD *)(v1240 + 1416) = v74;
    v72 = v1250;
  }
LABEL_182:
  for (i = 0; i != v42; ++i)
  {
    v165 = *(_QWORD *)(v9 + 24);
    if (v165 + 1 > 8 * *(_QWORD *)(v9 + 16))
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4526;
      goto LABEL_22;
    }
    v166 = *(unsigned __int8 *)(*v1289 + (v165 >> 3));
    *v24 = v165 + 1;
    v167 = ~(_BYTE)v165 & 7;
    v168 = *a3;
    if (((v166 >> v167) & 1) != 0)
    {
      v169 = 16 * v72;
      *(_QWORD *)(*(_QWORD *)(v168 + 1408) + 344 * i + 88) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v168 + 1400) + 8)
                                                                       + 8
                                                                       * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v168 + 1400)
                                                                                               + 32)
                                                                                   + v169));
      v168 = *a3;
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 + 1400) + 32) + v169 + 8) != 1)
      {
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 4529;
        goto LABEL_22;
      }
      ++v72;
      v170 = *(_QWORD *)(v168 + 1408);
    }
    else
    {
      v170 = *(_QWORD *)(v168 + 1408);
      *(_BYTE *)(v170 + 344 * i + 321) = 1;
    }
    v171 = a3[1];
    if (v171)
    {
      v172 = (unint64_t *)(v171 + 16);
      do
        v173 = __ldxr(v172);
      while (__stxr(v173 + 1, v172));
    }
    v174 = (uint64_t *)(v170 + 344 * i);
    v175 = (std::__shared_weak_count *)v174[1];
    *v174 = v168;
    v174[1] = v171;
    if (v175)
      std::__shared_weak_count::__release_weak(v175);
  }
  if (!geo::codec::decodeAttributeSet<GeoCodecsFeature>(3, v1289, v42, *a3 + 1112, *(_QWORD *)(*a3 + 1408), 344))
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4537;
    goto LABEL_22;
  }
  v176 = *(_QWORD *)(*a3 + 1408);
  if (*(_QWORD *)(*a3 + 1416) != v176)
  {
    v177 = 0;
    while (1)
    {
      v180 = *(_QWORD *)(v176 + 24);
      if (v180)
      {
        v181 = *(unsigned __int8 *)(v180 + 33);
        if (*(_BYTE *)(v180 + 33))
        {
          v182 = *(_DWORD **)v180;
          if (*v182 == 42)
          {
            v183 = v182 + 1;
LABEL_204:
            v178 = *v183;
            goto LABEL_199;
          }
          v184 = 0;
          v183 = v182 + 1;
          while (v181 - 1 != v184)
          {
            v185 = v183[1];
            v183 += 2;
            ++v184;
            if (v185 == 42)
            {
              if (v184 >= v181)
                break;
              goto LABEL_204;
            }
          }
        }
      }
      LOBYTE(v178) = -1;
LABEL_199:
      *(_BYTE *)(v176 + 272) = v178;
      ++v177;
      v176 += 344;
      v179 = *(_QWORD *)(*a3 + 1416);
      if (v177 >= 0x82FA0BE82FA0BE83 * ((v179 - *(_QWORD *)(*a3 + 1408)) >> 3))
      {
        v176 = *(_QWORD *)(*a3 + 1408);
        goto LABEL_214;
      }
    }
  }
  v179 = *(_QWORD *)(*a3 + 1408);
LABEL_214:
  v48 = (uint64_t *)(v9 + 8);
LABEL_267:
  if ((geo::codec::_decodeTransitLabelsFromStream(v48, 0x82FA0BE82FA0BE83 * ((v179 - v176) >> 3), v176, 344, a3) & 1) == 0)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4551;
    goto LABEL_22;
  }
  v216 = *(_QWORD *)(v9 + 24);
  v217 = v216 + 1;
  v218 = 8 * *(_QWORD *)(v9 + 16);
  if (v216 + 1 > v218)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4554;
    goto LABEL_22;
  }
  v219 = *v1289;
  v220 = *(unsigned __int8 *)(*v1289 + (v216 >> 3));
  *v24 = v217;
  if (((v220 >> (~(_BYTE)v216 & 7)) & 1) != 0)
  {
    if (v216 + 7 > v218)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4557;
      goto LABEL_22;
    }
    v221 = 0;
    v222 = 6;
    do
    {
      v223 = 8 - (v217 & 7);
      if (v222 < v223)
        v223 = v222;
      v221 = (*(unsigned __int8 *)(v219 + (v217 >> 3)) >> (8 - (v217 & 7) - v223)) & ~(-1 << v223) | (v221 << v223);
      v217 += v223;
      *v24 = v217;
      v222 -= v223;
    }
    while (v222);
    v224 = *(_QWORD *)(*a3 + 1416);
    v225 = *(_QWORD *)(*a3 + 1408);
    v226 = v224 - v225;
    if (v224 != v225)
    {
      v227 = 0;
      v228 = (v221 + 1);
      v229 = 0x82FA0BE82FA0BE83 * (v226 >> 3);
      do
      {
        if (v217 + v228 > v218)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 4559;
          goto LABEL_22;
        }
        v231 = 0;
        if ((_DWORD)v228)
        {
          v232 = v228;
          do
          {
            v233 = 8 - (v217 & 7);
            if (v232 < v233)
              v233 = v232;
            v231 = (*(unsigned __int8 *)(v219 + (v217 >> 3)) >> (8 - (v217 & 7) - v233)) & (unint64_t)~(-1 << v233) | (v231 << v233);
            v217 += v233;
            *v24 = v217;
            v232 -= v233;
          }
          while (v232);
        }
        *(_QWORD *)(v225 + 344 * v227 + 40) = v231;
        v230 = v225 + 344 * v227;
        *(_BYTE *)(v230 + 75) = 1;
        *(_QWORD *)(v230 + 48) = *(_QWORD *)(v230 + 40);
        ++v227;
      }
      while (v227 < v229);
    }
  }
  v234 = v217 + 1;
  if (v217 + 1 > v218)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4567;
    goto LABEL_22;
  }
  v235 = *(unsigned __int8 *)(v219 + (v217 >> 3));
  *v24 = v234;
  if (((v235 >> (~(_BYTE)v217 & 7)) & 1) != 0)
  {
    if (v217 + 7 > v218)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4570;
      goto LABEL_22;
    }
    v236 = 0;
    v237 = 6;
    do
    {
      v238 = 8 - (v234 & 7);
      if (v237 < v238)
        v238 = v237;
      v236 = (*(unsigned __int8 *)(v219 + (v234 >> 3)) >> (8 - (v234 & 7) - v238)) & ~(-1 << v238) | (v236 << v238);
      v234 += v238;
      *v24 = v234;
      v237 -= v238;
    }
    while (v237);
    if (v234 + 5 > v218)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4572;
      goto LABEL_22;
    }
    v239 = 0;
    v240 = (v236 + 1);
    v241 = 5;
    do
    {
      v242 = 8 - (v234 & 7);
      if (v241 < v242)
        v242 = v241;
      v239 = (*(unsigned __int8 *)(v219 + (v234 >> 3)) >> (8 - (v234 & 7) - v242)) & ~(-1 << v242) | (v239 << v242);
      v234 += v242;
      *v24 = v234;
      v241 -= v242;
    }
    while (v241);
    if (v234 + 5 > v218)
      goto LABEL_310;
    v243 = 0;
    v1271 = (v239 + 1);
    v244 = 5;
    do
    {
      v245 = 8 - (v234 & 7);
      if (v244 < v245)
        v245 = v244;
      v243 = (*(unsigned __int8 *)(v219 + (v234 >> 3)) >> (8 - (v234 & 7) - v245)) & ~(-1 << v245) | (v243 << v245);
      v234 += v245;
      *v24 = v234;
      v244 -= v245;
    }
    while (v244);
    v246 = (v243 + 1);
    if (v234 + v246 > v218)
    {
LABEL_310:
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4575;
      goto LABEL_22;
    }
    if (v243 == -1)
      goto LABEL_320;
    LODWORD(v247) = 0;
    do
    {
      v248 = 8 - (v234 & 7);
      if (v246 < v248)
        v248 = v246;
      v247 = (*(unsigned __int8 *)(v219 + (v234 >> 3)) >> (8 - (v234 & 7) - v248)) & ~(-1 << v248) | ((_DWORD)v247 << v248);
      v234 += v248;
      *v24 = v234;
      v246 -= v248;
    }
    while (v246);
    if (!(_DWORD)v247)
    {
LABEL_320:
      v251 = (_QWORD *)*a3;
    }
    else
    {
      {
        v647 = operator new();
        *(_QWORD *)(v647 + 16) = 0x99AFC36000000008;
        *(_QWORD *)(v647 + 24) = "GeoCodec";
        *(_OWORD *)(v647 + 32) = xmmword_189CFDB80;
        *(_QWORD *)v647 = &off_1E1BF6690;
        *(_QWORD *)(v647 + 8) = "GeoCodec";
        *(_OWORD *)(v647 + 56) = 0u;
        *(_OWORD *)(v647 + 72) = 0u;
        *(_OWORD *)(v647 + 88) = 0u;
        *(_OWORD *)(v647 + 104) = 0u;
        *(_OWORD *)(v647 + 120) = 0u;
        *(_OWORD *)(v647 + 136) = 0u;
        *(_OWORD *)(v647 + 152) = 0u;
        *(_OWORD *)(v647 + 168) = 0u;
        *(_OWORD *)(v647 + 184) = 0u;
        *(_OWORD *)(v647 + 200) = 0u;
        *(_OWORD *)(v647 + 216) = 0u;
        *(_OWORD *)(v647 + 232) = 0u;
        *(_QWORD *)(v647 + 248) = 0;
        v648 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v647 + 56), 0);
        if ((_DWORD)v648)
          geo::read_write_lock::logFailure(v648, (uint64_t)"initialization", v649);
        v650 = malloc_create_zone(0, 0);
        *(_QWORD *)(v647 + 48) = v650;
        malloc_set_zone_name(v650, "GeoCodec");
        *(_QWORD *)(v647 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        geo::codec::Allocator::instance(void)::alloc = v647;
      }
      v250 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                  + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * v247, 8);
      v251 = (_QWORD *)*a3;
      v251[208] = v250;
      v251[209] = v247;
      if (!v250)
      {
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 4579;
        goto LABEL_22;
      }
    }
    if (v251[174])
    {
      {
        v643 = operator new();
        *(_QWORD *)(v643 + 16) = 0x99AFC36000000008;
        *(_QWORD *)(v643 + 24) = "GeoCodec";
        *(_OWORD *)(v643 + 32) = xmmword_189CFDB80;
        *(_QWORD *)v643 = &off_1E1BF6690;
        *(_QWORD *)(v643 + 8) = "GeoCodec";
        *(_OWORD *)(v643 + 56) = 0u;
        *(_OWORD *)(v643 + 72) = 0u;
        *(_OWORD *)(v643 + 88) = 0u;
        *(_OWORD *)(v643 + 104) = 0u;
        *(_OWORD *)(v643 + 120) = 0u;
        *(_OWORD *)(v643 + 136) = 0u;
        *(_OWORD *)(v643 + 152) = 0u;
        *(_OWORD *)(v643 + 168) = 0u;
        *(_OWORD *)(v643 + 184) = 0u;
        *(_OWORD *)(v643 + 200) = 0u;
        *(_OWORD *)(v643 + 216) = 0u;
        *(_OWORD *)(v643 + 232) = 0u;
        *(_QWORD *)(v643 + 248) = 0;
        v644 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v643 + 56), 0);
        if ((_DWORD)v644)
          geo::read_write_lock::logFailure(v644, (uint64_t)"initialization", v645);
        v646 = malloc_create_zone(0, 0);
        *(_QWORD *)(v643 + 48) = v646;
        malloc_set_zone_name(v646, "GeoCodec");
        *(_QWORD *)(v643 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        geo::codec::Allocator::instance(void)::alloc = v643;
      }
      v253 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                  + 16))(geo::codec::Allocator::instance(void)::alloc, 16 * *(_QWORD *)(*a3 + 1392), 8);
      v254 = (_QWORD *)*a3;
      v254[210] = v253;
      v254[211] = 2 * v254[174];
      if (!v253)
      {
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 4586;
        goto LABEL_22;
      }
    }
    {
      v639 = operator new();
      *(_QWORD *)(v639 + 16) = 0x99AFC36000000008;
      *(_QWORD *)(v639 + 24) = "GeoCodec";
      *(_OWORD *)(v639 + 32) = xmmword_189CFDB80;
      *(_QWORD *)v639 = &off_1E1BF6690;
      *(_QWORD *)(v639 + 8) = "GeoCodec";
      *(_OWORD *)(v639 + 56) = 0u;
      *(_OWORD *)(v639 + 72) = 0u;
      *(_OWORD *)(v639 + 88) = 0u;
      *(_OWORD *)(v639 + 104) = 0u;
      *(_OWORD *)(v639 + 120) = 0u;
      *(_OWORD *)(v639 + 136) = 0u;
      *(_OWORD *)(v639 + 152) = 0u;
      *(_OWORD *)(v639 + 168) = 0u;
      *(_OWORD *)(v639 + 184) = 0u;
      *(_OWORD *)(v639 + 200) = 0u;
      *(_OWORD *)(v639 + 216) = 0u;
      *(_OWORD *)(v639 + 232) = 0u;
      *(_QWORD *)(v639 + 248) = 0;
      v640 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v639 + 56), 0);
      if ((_DWORD)v640)
        geo::read_write_lock::logFailure(v640, (uint64_t)"initialization", v641);
      v642 = malloc_create_zone(0, 0);
      *(_QWORD *)(v639 + 48) = v642;
      malloc_set_zone_name(v642, "GeoCodec");
      *(_QWORD *)(v639 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      geo::codec::Allocator::instance(void)::alloc = v639;
    }
    v256 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                + 16))(geo::codec::Allocator::instance(void)::alloc, 2 * *(_QWORD *)(*a3 + 1392), 8);
    v257 = *a3;
    *(_QWORD *)(*a3 + 1768) = v256;
    if (!v256)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4591;
      goto LABEL_22;
    }
    v258 = *(_QWORD *)(v257 + 1352);
    v259 = *(_QWORD *)(v257 + 1344);
    v234 = *(_QWORD *)(v9 + 24);
    v218 = 8 * *(_QWORD *)(v9 + 16);
    if (v258 != v259)
    {
      v260 = 0;
      v261 = 0;
      v1241 = 0;
      v262 = 0;
      do
      {
        v263 = v234 + 1;
        if (v234 + 1 > v218)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 4602;
          goto LABEL_22;
        }
        v1263 = *(_QWORD *)(*a3 + 1344);
        v264 = *v1289;
        v265 = *(unsigned __int8 *)(*v1289 + (v234 >> 3));
        *v24 = v263;
        if (((v265 >> (~(_BYTE)v234 & 7)) & 1) != 0)
        {
          if (v263 + v1271 > v218)
          {
            v30 = 4605;
            goto LABEL_165;
          }
          if ((_DWORD)v1271)
          {
            v266 = 0;
            v267 = v1271;
            do
            {
              v268 = 8 - (v263 & 7);
              if (v267 < v268)
                v268 = v267;
              v266 = (*(unsigned __int8 *)(v264 + (v263 >> 3)) >> (8 - (v263 & 7) - v268)) & ~(-1 << v268) | (v266 << v268);
              v263 += v268;
              *v24 = v263;
              v267 -= v268;
            }
            while (v267);
          }
          else
          {
            v266 = 0;
          }
          v275 = v266;
          v269 = (_QWORD *)*a3;
          v276 = *(_QWORD *)(*a3 + 1408);
          if (0x82FA0BE82FA0BE83 * ((*(_QWORD *)(*a3 + 1416) - v276) >> 3) <= v275)
          {
            v30 = 4606;
            goto LABEL_165;
          }
          v277 = v276 + 344 * v275;
          v274 = v269[168];
          *(_QWORD *)(v274 + 184 * v260 + 56) = *(_QWORD *)(v277 + 40);
        }
        else
        {
          if (v263 + v240 > v218)
          {
            v29 = (FILE *)*MEMORY[0x1E0C80C10];
            v30 = 4614;
            goto LABEL_22;
          }
          v269 = (_QWORD *)*a3;
          v270 = *(_QWORD *)(*a3 + 1344);
          v271 = 0;
          if ((_DWORD)v240)
          {
            v272 = v240;
            do
            {
              v273 = 8 - (v263 & 7);
              if (v272 < v273)
                v273 = v272;
              v271 = (*(unsigned __int8 *)(v264 + (v263 >> 3)) >> (8 - (v263 & 7) - v273)) & (unint64_t)~(-1 << v273) | (v271 << v273);
              v263 += v273;
              *v24 = v263;
              v272 -= v273;
            }
            while (v272);
            v269 = (_QWORD *)*a3;
            v274 = *(_QWORD *)(*a3 + 1344);
          }
          else
          {
            v274 = *(_QWORD *)(*a3 + 1344);
          }
          v277 = 0;
          *(_QWORD *)(v270 + 184 * v260 + 56) = v271;
        }
        *(_QWORD *)(v274 + 184 * v260 + 40) = v277;
        v234 = v263 + 1;
        if (v263 + 1 > v218)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 4619;
          goto LABEL_22;
        }
        v278 = *(unsigned __int8 *)(v264 + (v263 >> 3));
        *v24 = v234;
        if (((v278 >> (~(_BYTE)v263 & 7)) & 1) != 0)
        {
          if (v234 + v1271 > v218)
          {
            v30 = 4622;
            goto LABEL_165;
          }
          if ((_DWORD)v1271)
          {
            v279 = 0;
            v280 = v1271;
            do
            {
              v281 = 8 - (v234 & 7);
              if (v280 < v281)
                v281 = v280;
              v279 = (*(unsigned __int8 *)(v264 + (v234 >> 3)) >> (8 - (v234 & 7) - v281)) & ~(-1 << v281) | (v279 << v281);
              v234 += v281;
              *v24 = v234;
              v280 -= v281;
            }
            while (v280);
          }
          else
          {
            v279 = 0;
          }
          v286 = v269[176];
          if (0x82FA0BE82FA0BE83 * ((v269[177] - v286) >> 3) <= v279)
          {
            v30 = 4623;
            goto LABEL_165;
          }
          v285 = v286 + 344 * v279;
          *(_QWORD *)(v274 + 184 * v260 + 64) = *(_QWORD *)(v285 + 40);
        }
        else
        {
          if (v234 + v240 > v218)
          {
            v29 = (FILE *)*MEMORY[0x1E0C80C10];
            v30 = 4631;
            goto LABEL_22;
          }
          v282 = 0;
          if ((_DWORD)v240)
          {
            v283 = v240;
            do
            {
              v284 = 8 - (v234 & 7);
              if (v283 < v284)
                v284 = v283;
              v282 = (*(unsigned __int8 *)(v264 + (v234 >> 3)) >> (8 - (v234 & 7) - v284)) & (unint64_t)~(-1 << v284) | (v282 << v284);
              v234 += v284;
              *v24 = v234;
              v283 -= v284;
            }
            while (v283);
          }
          v285 = 0;
          *(_QWORD *)(v274 + 184 * v260 + 64) = v282;
        }
        *(_QWORD *)(v274 + 184 * v260 + 48) = v285;
        v287 = v1263 + 184 * v260;
        *(_QWORD *)(v287 + 104) = v261;
        v288 = *(_QWORD *)(v287 + 32);
        if (v288)
        {
          v289 = 0;
          v290 = v1263 + 184 * v260;
          v1231 = (unint64_t *)(v290 + 56);
          v1222 = (unint64_t *)(v290 + 64);
          v291 = v261;
          do
          {
            v294 = v234 + 1;
            if (v234 + 1 > v218)
            {
              v30 = 4638;
              goto LABEL_165;
            }
            v295 = *v1289;
            v296 = *(unsigned __int8 *)(*v1289 + (v234 >> 3));
            *v24 = v294;
            v297 = (_QWORD *)*a3;
            v298 = *(_QWORD *)(*a3 + 1768);
            *(_BYTE *)(v298 + v262) = (v296 >> (~(_BYTE)v234 & 7)) & 1;
            v299 = v234 + 2;
            if (v234 + 2 > v218)
            {
              v30 = 4640;
              goto LABEL_165;
            }
            v300 = *(unsigned __int8 *)(v295 + (v294 >> 3));
            *v24 = v299;
            *(_BYTE *)(v262 + v298 + 1) = (v300 >> (~(_BYTE)v294 & 7)) & 1;
            v301 = v234 + 3;
            if (v234 + 3 > v218)
            {
              v29 = (FILE *)*MEMORY[0x1E0C80C10];
              v30 = 4644;
              goto LABEL_22;
            }
            v302 = *(unsigned __int8 *)(v295 + (v299 >> 3));
            *v24 = v301;
            if (((v302 >> (~(_BYTE)v299 & 7)) & 1) != 0)
            {
              v303 = v234 + 4;
              if (v303 > v218)
              {
                v29 = (FILE *)*MEMORY[0x1E0C80C10];
                v30 = 4647;
                goto LABEL_22;
              }
              v304 = *(unsigned __int8 *)(v295 + (v301 >> 3));
              *v24 = v303;
              if (((v304 >> (~(_BYTE)v301 & 7)) & 1) != 0)
              {
                if (v303 + v1271 > v218)
                {
                  v29 = (FILE *)*MEMORY[0x1E0C80C10];
                  v30 = 4650;
                  goto LABEL_22;
                }
                if ((_DWORD)v1271)
                {
                  v305 = 0;
                  v306 = v1271;
                  do
                  {
                    v307 = 8 - (v303 & 7);
                    if (v306 < v307)
                      v307 = v306;
                    v305 = (*(unsigned __int8 *)(v295 + (v303 >> 3)) >> (8 - (v303 & 7) - v307)) & ~(-1 << v307) | (v305 << v307);
                    v303 += v307;
                    *v24 = v303;
                    v306 -= v307;
                  }
                  while (v306);
                }
                else
                {
                  v305 = 0;
                }
                v308 = (unint64_t *)(v297[176] + 344 * v305 + 40);
              }
              else
              {
                if (v303 + v240 > v218)
                {
                  v29 = (FILE *)*MEMORY[0x1E0C80C10];
                  v30 = 4653;
                  goto LABEL_22;
                }
                v309 = v297[208];
                v310 = 0;
                if ((_DWORD)v240)
                {
                  v311 = v240;
                  do
                  {
                    v312 = 8 - (v303 & 7);
                    if (v311 < v312)
                      v312 = v311;
                    v310 = (*(unsigned __int8 *)(v295 + (v303 >> 3)) >> (8 - (v303 & 7) - v312)) & (unint64_t)~(-1 << v312) | (v310 << v312);
                    v303 += v312;
                    *v24 = v303;
                    v311 -= v312;
                  }
                  while (v311);
                }
                v308 = (unint64_t *)(v309 + 8 * v1241);
                *v308 = v310;
                ++v1241;
              }
              v301 = v303;
            }
            else
            {
              v308 = v1231;
            }
            *(_QWORD *)(v297[210] + 8 * v291) = v308;
            v234 = v301 + 1;
            if (v301 + 1 > v218)
            {
              v29 = (FILE *)*MEMORY[0x1E0C80C10];
              v30 = 4661;
              goto LABEL_22;
            }
            v313 = *v1289;
            v314 = *(unsigned __int8 *)(*v1289 + (v301 >> 3));
            *v24 = v234;
            if (((v314 >> (~(_BYTE)v301 & 7)) & 1) != 0)
            {
              v315 = v301 + 2;
              if (v301 + 2 > v218)
              {
                v29 = (FILE *)*MEMORY[0x1E0C80C10];
                v30 = 4664;
                goto LABEL_22;
              }
              v316 = *(unsigned __int8 *)(v313 + (v234 >> 3));
              *v24 = v315;
              if (((v316 >> (~(_BYTE)v234 & 7)) & 1) != 0)
              {
                if (v315 + v1271 > v218)
                {
                  v29 = (FILE *)*MEMORY[0x1E0C80C10];
                  v30 = 4667;
                  goto LABEL_22;
                }
                if ((_DWORD)v1271)
                {
                  v317 = 0;
                  v318 = v1271;
                  do
                  {
                    v319 = 8 - (v315 & 7);
                    if (v318 < v319)
                      v319 = v318;
                    v317 = (*(unsigned __int8 *)(v313 + (v315 >> 3)) >> (8 - (v315 & 7) - v319)) & ~(-1 << v319) | (v317 << v319);
                    v315 += v319;
                    *v24 = v315;
                    v318 -= v319;
                  }
                  while (v318);
                }
                else
                {
                  v317 = 0;
                }
                v292 = *a3;
                v293 = (unint64_t *)(*(_QWORD *)(*a3 + 1408) + 344 * v317 + 40);
                v234 = v315;
              }
              else
              {
                if (v315 + v240 > v218)
                {
                  v29 = (FILE *)*MEMORY[0x1E0C80C10];
                  v30 = 4670;
                  goto LABEL_22;
                }
                v292 = *a3;
                v320 = *(_QWORD *)(*a3 + 1664);
                v321 = 0;
                if ((_DWORD)v240)
                {
                  v322 = v240;
                  do
                  {
                    v323 = 8 - (v315 & 7);
                    if (v322 < v323)
                      v323 = v322;
                    v321 = (*(unsigned __int8 *)(v313 + (v315 >> 3)) >> (8 - (v315 & 7) - v323)) & (unint64_t)~(-1 << v323) | (v321 << v323);
                    v315 += v323;
                    *v24 = v315;
                    v322 -= v323;
                  }
                  while (v322);
                }
                v293 = (unint64_t *)(v320 + 8 * v1241);
                *v293 = v321;
                ++v1241;
                v234 = v315;
              }
            }
            else
            {
              v292 = *a3;
              v293 = v1222;
            }
            v262 += 2;
            *(_QWORD *)(*(_QWORD *)(v292 + 1680) + 8 * (v291 + 1)) = v293;
            v291 += 2;
            ++v289;
          }
          while (v289 < v288);
          v269 = (_QWORD *)*a3;
        }
        else
        {
          v291 = v261;
        }
        *(_QWORD *)(v1263 + 184 * v260++ + 112) = v291 - v261;
        v261 = v291;
      }
      while (v260 < 0xD37A6F4DE9BD37A7 * ((uint64_t)(v269[169] - v269[168]) >> 3));
    }
  }
  v324 = v234 + 1;
  if (v234 + 1 > v218)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4683;
    goto LABEL_22;
  }
  v325 = *v1289;
  v326 = *(unsigned __int8 *)(*v1289 + (v234 >> 3));
  *v24 = v324;
  if (((v326 >> (~(_BYTE)v234 & 7)) & 1) != 0)
  {
    if (v234 + 6 > v218)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4686;
      goto LABEL_22;
    }
    v327 = 0;
    v328 = 5;
    do
    {
      v329 = 8 - (v324 & 7);
      if (v328 < v329)
        v329 = v328;
      v327 = (*(unsigned __int8 *)(v325 + (v324 >> 3)) >> (8 - (v324 & 7) - v329)) & ~(-1 << v329) | (v327 << v329);
      v324 += v329;
      *v24 = v324;
      v328 -= v329;
    }
    while (v328);
    if (v324 + 5 > v218)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4688;
      goto LABEL_22;
    }
    v330 = 0;
    v331 = (v327 + 1);
    v332 = 5;
    do
    {
      v333 = 8 - (v324 & 7);
      if (v332 < v333)
        v333 = v332;
      v330 = (*(unsigned __int8 *)(v325 + (v324 >> 3)) >> (8 - (v324 & 7) - v333)) & ~(-1 << v333) | (v330 << v333);
      v324 += v333;
      *v24 = v324;
      v332 -= v333;
    }
    while (v332);
    if (v324 + 5 > v218)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4690;
      goto LABEL_22;
    }
    v338 = 0;
    v339 = (v330 + 1);
    v340 = 5;
    do
    {
      v341 = 8 - (v324 & 7);
      if (v340 < v341)
        v341 = v340;
      v338 = (*(unsigned __int8 *)(v325 + (v324 >> 3)) >> (8 - (v324 & 7) - v341)) & ~(-1 << v341) | (v338 << v341);
      v324 += v341;
      *v24 = v324;
      v340 -= v341;
    }
    while (v340);
    v342 = (v338 + 1);
    if (v324 + v342 > v218)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4693;
      goto LABEL_22;
    }
    if (v338 == -1)
    {
      v349 = *a3;
      *(_QWORD *)(*a3 + 1448) = 0;
    }
    else
    {
      LODWORD(v347) = 0;
      do
      {
        v348 = 8 - (v324 & 7);
        if (v342 < v348)
          v348 = v342;
        v347 = (*(unsigned __int8 *)(v325 + (v324 >> 3)) >> (8 - (v324 & 7) - v348)) & ~(-1 << v348) | ((_DWORD)v347 << v348);
        v324 += v348;
        *v24 = v324;
        v342 -= v348;
      }
      while (v342);
      v349 = *a3;
      *(_QWORD *)(*a3 + 1448) = v347;
      if ((_DWORD)v347)
      {
        {
          v1004 = operator new();
          *(_QWORD *)(v1004 + 16) = 0x99AFC36000000008;
          *(_QWORD *)(v1004 + 24) = "GeoCodec";
          *(_OWORD *)(v1004 + 32) = xmmword_189CFDB80;
          *(_QWORD *)v1004 = &off_1E1BF6690;
          *(_QWORD *)(v1004 + 8) = "GeoCodec";
          *(_OWORD *)(v1004 + 56) = 0u;
          *(_OWORD *)(v1004 + 72) = 0u;
          *(_OWORD *)(v1004 + 88) = 0u;
          *(_OWORD *)(v1004 + 104) = 0u;
          *(_OWORD *)(v1004 + 120) = 0u;
          *(_OWORD *)(v1004 + 136) = 0u;
          *(_OWORD *)(v1004 + 152) = 0u;
          *(_OWORD *)(v1004 + 168) = 0u;
          *(_OWORD *)(v1004 + 184) = 0u;
          *(_OWORD *)(v1004 + 200) = 0u;
          *(_OWORD *)(v1004 + 216) = 0u;
          *(_OWORD *)(v1004 + 232) = 0u;
          *(_QWORD *)(v1004 + 248) = 0;
          v1005 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1004 + 56), 0);
          if ((_DWORD)v1005)
            geo::read_write_lock::logFailure(v1005, (uint64_t)"initialization", v1006);
          v1007 = malloc_create_zone(0, 0);
          *(_QWORD *)(v1004 + 48) = v1007;
          malloc_set_zone_name(v1007, "GeoCodec");
          *(_QWORD *)(v1004 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          geo::codec::Allocator::instance(void)::alloc = v1004;
        }
        v351 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                   + 24))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(*a3 + 1448), 8);
        v349 = *a3;
        *(_QWORD *)(*a3 + 1440) = v351;
        if (!v351)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 4698;
          goto LABEL_22;
        }
      }
    }
    if (*(_QWORD *)(v349 + 1416) != *(_QWORD *)(v349 + 1408))
    {
      v352 = 0;
      v353 = 0;
      v354 = *a3;
      do
      {
        v355 = *(_QWORD *)(v9 + 24);
        if (v355 + v331 > 8 * *(_QWORD *)(v9 + 16))
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 4704;
          goto LABEL_22;
        }
        v356 = 0;
        if ((_DWORD)v331)
        {
          v357 = *v1289;
          v358 = v331;
          do
          {
            v359 = 8 - (v355 & 7);
            if (v358 < v359)
              v359 = v358;
            v356 = (*(unsigned __int8 *)(v357 + (v355 >> 3)) >> (8 - (v355 & 7) - v359)) & ~(-1 << v359) | (v356 << v359);
            v355 += v359;
            *v24 = v355;
            v358 -= v359;
          }
          while (v358);
          v360 = *(_QWORD *)(v354 + 1408);
          *(_QWORD *)(v360 + 344 * v352 + 224) = v353;
          if (v356)
          {
            v361 = (_QWORD *)*a3;
            if ((_DWORD)v339)
            {
              v362 = v356 + v353;
              while (1)
              {
                v363 = *(_QWORD *)(v9 + 24);
                if (v363 + v339 > 8 * *(_QWORD *)(v9 + 16))
                  break;
                LODWORD(v364) = 0;
                v365 = v339;
                do
                {
                  v366 = 8 - (v363 & 7);
                  if (v365 < v366)
                    v366 = v365;
                  v364 = (*(unsigned __int8 *)(v357 + (v363 >> 3)) >> (8 - (v363 & 7) - v366)) & ~(-1 << v366) | ((_DWORD)v364 << v366);
                  v363 += v366;
                  *v24 = v363;
                  v365 -= v366;
                }
                while (v365);
                v367 = v353 + 1;
                *(_QWORD *)(v361[180] + 8 * v353) = v364;
                v353 = v367;
                if (v362 == (_DWORD)v367)
                  goto LABEL_486;
              }
LABEL_519:
              v29 = (FILE *)*MEMORY[0x1E0C80C10];
              v30 = 4708;
              goto LABEL_22;
            }
            v369 = v356;
            do
            {
              if (*(_QWORD *)(v9 + 24) + v339 > 8 * *(_QWORD *)(v9 + 16))
                goto LABEL_519;
              v367 = v353 + 1;
              *(_QWORD *)(v361[180] + 8 * v353++) = 0;
              --v369;
            }
            while (v369);
LABEL_486:
            v360 = v361[176];
            v368 = *(_QWORD *)(v360 + 344 * v352 + 224);
            v353 = v367;
            goto LABEL_487;
          }
        }
        else
        {
          v360 = *(_QWORD *)(v354 + 1408);
          *(_QWORD *)(v360 + 344 * v352 + 224) = v353;
        }
        v368 = v353;
        v361 = (_QWORD *)v354;
LABEL_487:
        *(_QWORD *)(v360 + 344 * v352 + 232) = v356;
        if (v368 + (unint64_t)v356 > v361[181])
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 4712;
          goto LABEL_22;
        }
        ++v352;
      }
      while (v352 < 0x82FA0BE82FA0BE83 * ((v361[177] - v360) >> 3));
    }
  }
  v370 = *(_QWORD *)(v9 + 24);
  if (*(_DWORD *)(v9 + 64) >= 9u)
  {
    if (v370 + 1 > 8 * *(_QWORD *)(v9 + 16))
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4723;
      goto LABEL_22;
    }
    v371 = *(unsigned __int8 *)(*v1289 + (v370 >> 3));
    *v24 = v370 + 1;
    v372 = v371 >> (~(_BYTE)v370++ & 7);
    if ((v372 & 1) != 0)
    {
      {
        v982 = operator new();
        *(_QWORD *)(v982 + 16) = 0x99AFC36000000008;
        *(_QWORD *)(v982 + 24) = "GeoCodec";
        *(_OWORD *)(v982 + 32) = xmmword_189CFDB80;
        *(_QWORD *)v982 = &off_1E1BF6690;
        *(_QWORD *)(v982 + 8) = "GeoCodec";
        *(_OWORD *)(v982 + 56) = 0u;
        *(_OWORD *)(v982 + 72) = 0u;
        *(_OWORD *)(v982 + 88) = 0u;
        *(_OWORD *)(v982 + 104) = 0u;
        *(_OWORD *)(v982 + 120) = 0u;
        *(_OWORD *)(v982 + 136) = 0u;
        *(_OWORD *)(v982 + 152) = 0u;
        *(_OWORD *)(v982 + 168) = 0u;
        *(_OWORD *)(v982 + 184) = 0u;
        *(_OWORD *)(v982 + 200) = 0u;
        *(_OWORD *)(v982 + 216) = 0u;
        *(_OWORD *)(v982 + 232) = 0u;
        *(_QWORD *)(v982 + 248) = 0;
        v983 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v982 + 56), 0);
        if ((_DWORD)v983)
          geo::read_write_lock::logFailure(v983, (uint64_t)"initialization", v984);
        v985 = malloc_create_zone(0, 0);
        *(_QWORD *)(v982 + 48) = v985;
        malloc_set_zone_name(v985, "GeoCodec");
        *(_QWORD *)(v982 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        geo::codec::Allocator::instance(void)::alloc = v982;
      }
      v1242 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                   + 16))(geo::codec::Allocator::instance(void)::alloc, 4 * *(_QWORD *)(*a3 + 1392), 8);
      v1216 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 1528) = v1242;
      if (!v1242)
      {
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 4726;
        goto LABEL_22;
      }
      v370 = *(_QWORD *)(v9 + 24);
      v1232 = 8 * *(_QWORD *)(v9 + 16);
      if (v370 + 5 > v1232)
      {
        v30 = 4729;
        goto LABEL_165;
      }
      v374 = 0;
      v1272 = *v1289;
      v375 = 5;
      do
      {
        v376 = 8 - (v370 & 7);
        if (v375 < v376)
          v376 = v375;
        v374 = (*(unsigned __int8 *)(v1272 + (v370 >> 3)) >> (8 - (v370 & 7) - v376)) & ~(-1 << v376) | (v374 << v376);
        v370 += v376;
        *v24 = v370;
        v375 -= v376;
      }
      while (v375);
      v1210 = (std::__shared_weak_count *)v1216[168];
      v377 = v1216[169] - (_QWORD)v1210;
      if (v377)
      {
        v1223 = 0;
        v378 = 0;
        v1264 = (v374 + 1);
        v379 = v377 / 184;
        if ((unint64_t)(v377 / 184) <= 1)
          v379 = 1;
        v1205 = v379;
        do
        {
          v380 = *(&v1210[1].__shared_owners_ + 23 * v1223);
          if (v380)
          {
            if ((_DWORD)v1264)
            {
              v381 = v378 + v380;
              do
              {
                if (v370 + v1264 > v1232)
                  goto LABEL_520;
                v382 = 0;
                v383 = v1264;
                do
                {
                  v384 = 8 - (v370 & 7);
                  if (v383 < v384)
                    v384 = v383;
                  v382 = (*(unsigned __int8 *)(v1272 + (v370 >> 3)) >> (8 - (v370 & 7) - v384)) & ~(-1 << v384) | (v382 << v384);
                  v370 += v384;
                  *v24 = v370;
                  v383 -= v384;
                }
                while (v383);
                *(_DWORD *)(v1242 + 4 * v378++) = v382;
              }
              while (v378 != v381);
              v378 = v381;
            }
            else
            {
              if (v370 + v1264 > v1232)
              {
LABEL_520:
                v30 = 4736;
                goto LABEL_165;
              }
              v1201 = v378;
              bzero((void *)(v1242 + 4 * v378), 4 * v380);
              v378 = v1201 + v380;
            }
          }
          ++v1223;
        }
        while (v1223 != v1205);
      }
      else
      {
        v378 = 0;
      }
      if (v378 != v1216[174])
      {
        v30 = 4739;
        goto LABEL_165;
      }
    }
  }
  v385 = *a3;
  if (*(_QWORD *)(*a3 + 1352) != *(_QWORD *)(*a3 + 1344))
  {
    if (v370 + 1 > 8 * *(_QWORD *)(v9 + 16))
    {
      v30 = 4745;
      goto LABEL_165;
    }
    v386 = *(unsigned __int8 *)(*v1289 + (v370 >> 3));
    *v24 = v370 + 1;
    v387 = v386 >> (~(_BYTE)v370++ & 7);
    if ((v387 & 1) != 0)
    {
      v30 = 4746;
      goto LABEL_165;
    }
  }
  if (*(_DWORD *)(v9 + 64) < 0xCu)
  {
    v1265 = 0;
    goto LABEL_532;
  }
  v388 = v370 + 1;
  v389 = 8 * *(_QWORD *)(v9 + 16);
  if (v370 + 1 > v389)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4752;
    goto LABEL_22;
  }
  v395 = *v1289;
  v396 = *(unsigned __int8 *)(*v1289 + (v370 >> 3));
  *v24 = v388;
  if (((v396 >> (~(_BYTE)v370 & 7)) & 1) == 0)
  {
    v1265 = 0;
    ++v370;
    goto LABEL_532;
  }
  if (v370 + 6 > v389)
    goto LABEL_544;
  v397 = 0;
  v398 = 5;
  do
  {
    v399 = 8 - (v388 & 7);
    if (v398 < v399)
      v399 = v398;
    v397 = (*(unsigned __int8 *)(v395 + (v388 >> 3)) >> (8 - (v388 & 7) - v399)) & ~(-1 << v399) | (v397 << v399);
    v388 += v399;
    *v24 = v388;
    v398 -= v399;
  }
  while (v398);
  v400 = (v397 + 1);
  if (v388 + v400 > v389)
  {
LABEL_544:
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4755;
    goto LABEL_22;
  }
  v412 = 0;
  if ((_DWORD)v400)
  {
    do
    {
      v413 = 8 - (v388 & 7);
      if (v400 < v413)
        v413 = v400;
      v412 = (*(unsigned __int8 *)(v395 + (v388 >> 3)) >> (8 - (v388 & 7) - v413)) & ~(-1 << v413) | (v412 << v413);
      v388 += v413;
      *v24 = v388;
      v400 -= v413;
    }
    while (v400);
  }
  v414 = *(_QWORD *)(v385 + 1568);
  v415 = *(_QWORD *)(v385 + 1560);
  v416 = 0xEF7BDEF7BDEF7BDFLL * ((v414 - v415) >> 3);
  v1266 = v412;
  v417 = v412 - v416;
  if (v412 > v416)
  {
    v418 = *(_QWORD *)(v385 + 1576);
    if (0xEF7BDEF7BDEF7BDFLL * ((v418 - v414) >> 3) < v417)
    {
      v419 = 0xEF7BDEF7BDEF7BDFLL * ((v418 - v415) >> 3);
      v420 = 2 * v419;
      if (2 * v419 <= v412)
        v420 = v412;
      if (v419 >= 0x84210842108421)
        v421 = 0x108421084210842;
      else
        v421 = v420;
      v422 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v385 + 1584) + 16))(*(_QWORD *)(v385 + 1584), 248 * v421, 8);
      v423 = v422 + 248 * v416;
      v424 = v422 + 248 * v1266;
      v425 = 248 * v1266 - 248 * v416;
      v426 = v423;
      do
      {
        if (v426)
        {
          *(_QWORD *)(v426 + 240) = 0;
          *(_OWORD *)(v426 + 208) = 0uLL;
          *(_OWORD *)(v426 + 224) = 0uLL;
          *(_OWORD *)(v426 + 176) = 0uLL;
          *(_OWORD *)(v426 + 192) = 0uLL;
          *(_OWORD *)(v426 + 144) = 0uLL;
          *(_OWORD *)(v426 + 160) = 0uLL;
          *(_OWORD *)(v426 + 112) = 0uLL;
          *(_OWORD *)(v426 + 128) = 0uLL;
          *(_OWORD *)(v426 + 80) = 0uLL;
          *(_OWORD *)(v426 + 96) = 0uLL;
          *(_OWORD *)(v426 + 48) = 0uLL;
          *(_OWORD *)(v426 + 64) = 0uLL;
          *(_OWORD *)(v426 + 16) = 0uLL;
          *(_OWORD *)(v426 + 32) = 0uLL;
          *(_OWORD *)v426 = 0uLL;
        }
        v426 += 248;
        v425 -= 248;
      }
      while (v425);
      v444 = v422 + 248 * v421;
      v445 = *(_QWORD *)(v385 + 1560);
      j = *(_QWORD *)(v385 + 1568);
      if (j == v445)
      {
        *(_QWORD *)(v385 + 1560) = v423;
        *(_QWORD *)(v385 + 1568) = v424;
        v1243 = *(_QWORD *)(v385 + 1576);
        *(_QWORD *)(v385 + 1576) = v444;
      }
      else
      {
        v446 = 0;
        do
        {
          v447 = v423 + v446;
          v448 = j + v446;
          *(_OWORD *)(v447 - 248) = *(_OWORD *)(j + v446 - 248);
          v449 = *(_OWORD *)(j + v446 - 232);
          *(_QWORD *)(v448 - 248) = 0;
          *(_QWORD *)(v448 - 240) = 0;
          *(_OWORD *)(v447 - 232) = v449;
          *(_QWORD *)(v447 - 216) = *(_QWORD *)(j + v446 - 216);
          *(_QWORD *)(v448 - 224) = 0;
          *(_QWORD *)(v448 - 216) = 0;
          v450 = *(_OWORD *)(j + v446 - 208);
          v451 = *(_OWORD *)(j + v446 - 192);
          *(_DWORD *)(v447 - 176) = *(_DWORD *)(j + v446 - 176);
          *(_OWORD *)(v447 - 208) = v450;
          *(_OWORD *)(v447 - 192) = v451;
          v452 = *(_OWORD *)(j + v446 - 136);
          v453 = *(_OWORD *)(j + v446 - 120);
          v454 = *(_OWORD *)(j + v446 - 104);
          *(_OWORD *)(v447 - 152) = *(_OWORD *)(j + v446 - 152);
          *(_OWORD *)(v447 - 104) = v454;
          *(_OWORD *)(v447 - 120) = v453;
          *(_OWORD *)(v447 - 136) = v452;
          v455 = *(_OWORD *)(j + v446 - 72);
          v456 = *(_OWORD *)(j + v446 - 56);
          v457 = *(_OWORD *)(j + v446 - 47);
          *(_OWORD *)(v447 - 88) = *(_OWORD *)(j + v446 - 88);
          *(_OWORD *)(v447 - 47) = v457;
          *(_OWORD *)(v447 - 56) = v456;
          *(_OWORD *)(v447 - 72) = v455;
          *(_OWORD *)(v447 - 168) = *(_OWORD *)(j + v446 - 168);
          v458 = *(_OWORD *)(j + v446 - 24);
          *(_QWORD *)(v447 - 8) = *(_QWORD *)(j + v446 - 8);
          *(_OWORD *)(v447 - 24) = v458;
          v446 -= 248;
        }
        while (j + v446 != v445);
        v459 = *(_QWORD *)(v385 + 1560);
        v460 = *(_QWORD *)(v385 + 1568);
        *(_QWORD *)(v385 + 1560) = v423 + v446;
        *(_QWORD *)(v385 + 1568) = v424;
        v1243 = *(_QWORD *)(v385 + 1576);
        *(_QWORD *)(v385 + 1576) = v444;
        for (j = v459; v460 != j; v460 -= 248)
        {
          v461 = *(std::__shared_weak_count **)(v460 - 216);
          if (v461)
          {
            v462 = (unint64_t *)&v461->__shared_owners_;
            do
              v463 = __ldaxr(v462);
            while (__stlxr(v463 - 1, v462));
            if (!v463)
            {
              ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
              std::__shared_weak_count::__release_weak(v461);
            }
          }
          v464 = *(std::__shared_weak_count **)(v460 - 240);
          if (v464)
            std::__shared_weak_count::__release_weak(v464);
        }
      }
      if (j)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v385 + 1584) + 40))(*(_QWORD *)(v385 + 1584), j, v1243 - j);
      goto LABEL_698;
    }
    v442 = v414 + 248 * v417;
    v443 = 248 * v412 - 248 * v416;
    do
    {
      if (v414)
      {
        *(_QWORD *)(v414 + 240) = 0;
        *(_OWORD *)(v414 + 208) = 0uLL;
        *(_OWORD *)(v414 + 224) = 0uLL;
        *(_OWORD *)(v414 + 176) = 0uLL;
        *(_OWORD *)(v414 + 192) = 0uLL;
        *(_OWORD *)(v414 + 144) = 0uLL;
        *(_OWORD *)(v414 + 160) = 0uLL;
        *(_OWORD *)(v414 + 112) = 0uLL;
        *(_OWORD *)(v414 + 128) = 0uLL;
        *(_OWORD *)(v414 + 80) = 0uLL;
        *(_OWORD *)(v414 + 96) = 0uLL;
        *(_OWORD *)(v414 + 48) = 0uLL;
        *(_OWORD *)(v414 + 64) = 0uLL;
        *(_OWORD *)(v414 + 16) = 0uLL;
        *(_OWORD *)(v414 + 32) = 0uLL;
        *(_OWORD *)v414 = 0uLL;
      }
      v414 += 248;
      v443 -= 248;
    }
    while (v443);
    v414 = v442;
    goto LABEL_694;
  }
  if (v412 < v416)
  {
    v1274 = v415 + 248 * v412;
    if (v414 != v1274)
    {
      do
      {
        v427 = *(std::__shared_weak_count **)(v414 - 216);
        if (v427)
        {
          v428 = (unint64_t *)&v427->__shared_owners_;
          do
            v429 = __ldaxr(v428);
          while (__stlxr(v429 - 1, v428));
          if (!v429)
          {
            ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
            std::__shared_weak_count::__release_weak(v427);
          }
        }
        v430 = *(std::__shared_weak_count **)(v414 - 240);
        if (v430)
          std::__shared_weak_count::__release_weak(v430);
        v414 -= 248;
      }
      while (v414 != v1274);
      v414 = v1274;
    }
LABEL_694:
    *(_QWORD *)(v385 + 1568) = v414;
  }
LABEL_698:
  v500 = *(_QWORD *)(v9 + 24);
  v501 = 8 * *(_QWORD *)(v9 + 16);
  if (v500 + 6 > v501)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4759;
    goto LABEL_22;
  }
  v502 = 0;
  v503 = *v1289;
  v504 = 6;
  do
  {
    v505 = 8 - (v500 & 7);
    if (v504 < v505)
      v505 = v504;
    v502 = (*(unsigned __int8 *)(v503 + (v500 >> 3)) >> (8 - (v500 & 7) - v505)) & ~(-1 << v505) | (v502 << v505);
    v500 += v505;
    *v24 = v500;
    v504 -= v505;
  }
  while (v504);
  if (v500 + 5 > v501)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4762;
    goto LABEL_22;
  }
  v506 = 0;
  v507 = (v502 + 1);
  v508 = 5;
  do
  {
    v509 = 8 - (v500 & 7);
    if (v508 < v509)
      v509 = v508;
    v506 = (*(unsigned __int8 *)(v503 + (v500 >> 3)) >> (8 - (v500 & 7) - v509)) & ~(-1 << v509) | (v506 << v509);
    v500 += v509;
    *v24 = v500;
    v508 -= v509;
  }
  while (v508);
  if (v500 + 6 > v501)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4765;
    goto LABEL_22;
  }
  v510 = 0;
  v1276 = (v506 + 1);
  v511 = 6;
  do
  {
    v512 = 8 - (v500 & 7);
    if (v511 < v512)
      v512 = v511;
    v510 = (*(unsigned __int8 *)(v503 + (v500 >> 3)) >> (8 - (v500 & 7) - v512)) & ~(-1 << v512) | (v510 << v512);
    v500 += v512;
    *v24 = v500;
    v511 -= v512;
  }
  while (v511);
  if (v500 + 5 > v501)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4768;
    goto LABEL_22;
  }
  v513 = 0;
  v1244 = (v510 + 1);
  v514 = 5;
  do
  {
    v515 = 8 - (v500 & 7);
    if (v514 < v515)
      v515 = v514;
    v513 = (*(unsigned __int8 *)(v503 + (v500 >> 3)) >> (8 - (v500 & 7) - v515)) & ~(-1 << v515) | (v513 << v515);
    v500 += v515;
    *v24 = v500;
    v514 -= v515;
  }
  while (v514);
  *(_QWORD *)&__p.var0 = 0;
  if ((geo::codec::decodeSectionEncoding((geo::codec::Allocator *)v1289, &__p, 0, 0, 0) & 1) == 0)
  {
    v30 = 4771;
    goto LABEL_165;
  }
  if (!*(_QWORD *)&__p.var0
    || !*(_QWORD *)(*(_QWORD *)&__p.var0 + 8)
    || (v516 = *(_QWORD *)(*a3 + 1560),
        *(_QWORD *)(*(_QWORD *)&__p.var0 + 16) != 0xEF7BDEF7BDEF7BDFLL * ((*(_QWORD *)(*a3 + 1568) - v516) >> 3)))
  {
    v30 = 4772;
    goto LABEL_165;
  }
  if (!geo::codec::decodeAttributeSet<GeoCodecsFeature>(3, v1289, v1266, *a3 + 1112, v516, 248))
  {
    v30 = 4773;
    goto LABEL_165;
  }
  v517 = *(_QWORD *)&__p.var0;
  if (*(_QWORD *)&__p.var0)
    v1265 = **(unsigned __int8 **)&__p.var0;
  else
    v1265 = 0;
  v538 = *(_QWORD *)(*a3 + 1560);
  if (*(_QWORD *)(*a3 + 1568) != v538)
  {
    v1234 = 0;
    do
    {
      *(_QWORD *)(v538 + 248 * v1234 + 88) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&__p.var0 + 8) + 8 * v1234);
      v539 = *a3;
      v540 = a3[1];
      v541 = *(_QWORD *)(*a3 + 1560);
      if (v540)
      {
        v542 = (unint64_t *)(v540 + 16);
        do
          v543 = __ldxr(v542);
        while (__stxr(v543 + 1, v542));
      }
      v544 = (uint64_t *)(v541 + 248 * v1234);
      v545 = (std::__shared_weak_count *)v544[1];
      *v544 = v539;
      v544[1] = v540;
      if (v545)
        std::__shared_weak_count::__release_weak(v545);
      v546 = *(_QWORD *)(v9 + 24);
      v547 = 8 * *(_QWORD *)(v9 + 16);
      if (v546 + v507 > v547)
      {
        v30 = 4779;
        goto LABEL_165;
      }
      v548 = (_QWORD *)*a3;
      v538 = *(_QWORD *)(*a3 + 1560);
      v549 = 0;
      if ((_DWORD)v507)
      {
        v550 = *v1289;
        v551 = v507;
        do
        {
          v552 = 8 - (v546 & 7);
          if (v551 < v552)
            v552 = v551;
          v549 = (*(unsigned __int8 *)(v550 + (v546 >> 3)) >> (8 - (v546 & 7) - v552)) & (unint64_t)~(-1 << v552) | (v549 << v552);
          v546 += v552;
          *v24 = v546;
          v551 -= v552;
        }
        while (v551);
      }
      v553 = v538 + 248 * v1234;
      *(_QWORD *)(v553 + 40) = v549;
      *(_BYTE *)(v553 + 75) = 1;
      *(_QWORD *)(v553 + 48) = v549;
      v554 = v546 + 1;
      if (v546 + 1 > v547)
      {
        v30 = 4784;
        goto LABEL_165;
      }
      v555 = *v1289;
      v556 = *(unsigned __int8 *)(*v1289 + (v546 >> 3));
      *v24 = v554;
      if (((v556 >> (~(_BYTE)v546 & 7)) & 1) != 0)
      {
        if (v554 + v1276 > v547)
        {
          v30 = 4787;
          goto LABEL_165;
        }
        if ((_DWORD)v1276)
        {
          v557 = 0;
          v558 = v1276;
          do
          {
            v559 = 8 - (v554 & 7);
            if (v558 < v559)
              v559 = v558;
            v557 = (*(unsigned __int8 *)(v555 + (v554 >> 3)) >> (8 - (v554 & 7) - v559)) & ~(-1 << v559) | (v557 << v559);
            v554 += v559;
            *v24 = v554;
            v558 -= v559;
          }
          while (v558);
        }
        else
        {
          v557 = 0;
        }
        v565 = v557;
        v566 = v548[176];
        if (0x82FA0BE82FA0BE83 * ((v548[177] - v566) >> 3) <= v565)
        {
          v30 = 4788;
          goto LABEL_165;
        }
        *(_QWORD *)(v538 + 248 * v1234 + 224) = *(_QWORD *)(v566 + 344 * v565 + 40);
        v564 = v554 + 1;
        if (v554 + 1 > v547)
        {
LABEL_838:
          v30 = 4794;
          goto LABEL_165;
        }
      }
      else
      {
        if (v554 + v1244 > v547)
        {
          v30 = 4791;
          goto LABEL_165;
        }
        v560 = (unint64_t *)(v538 + 248 * v1234 + 224);
        if ((_DWORD)v1244)
        {
          v561 = 0;
          v562 = v1244;
          do
          {
            v563 = 8 - (v554 & 7);
            if (v562 < v563)
              v563 = v562;
            v561 = (*(unsigned __int8 *)(v555 + (v554 >> 3)) >> (8 - (v554 & 7) - v563)) & (unint64_t)~(-1 << v563) | (v561 << v563);
            v554 += v563;
            *v24 = v554;
            v562 -= v563;
          }
          while (v562);
          *v560 = v561;
          v564 = v554 + 1;
          if (v554 + 1 > v547)
            goto LABEL_838;
        }
        else
        {
          *v560 = 0;
          v564 = v554 + 1;
          if (v554 + 1 > v547)
            goto LABEL_838;
        }
      }
      v567 = *(unsigned __int8 *)(v555 + (v554 >> 3));
      *v24 = v564;
      v568 = v554 + 2;
      if (v554 + 2 > v547)
      {
        v30 = 4795;
        goto LABEL_165;
      }
      v569 = ~(_BYTE)v554 & 7;
      v570 = *(unsigned __int8 *)(v555 + (v564 >> 3));
      *v24 = v568;
      if (((v567 >> v569) & 1) != 0)
        *(_BYTE *)(v538 + 248 * v1234 + 232) |= 1u;
      if (((1 << (~(_BYTE)v564 & 7)) & v570) != 0)
        *(_BYTE *)(v538 + 248 * v1234 + 232) |= 2u;
      if (v568 + (v513 + 1) > v547)
      {
        v30 = 4801;
        goto LABEL_165;
      }
      if (v513 == -1)
      {
        v571 = 0;
      }
      else
      {
        v571 = 0;
        v572 = (v513 + 1);
        do
        {
          v573 = 8 - (v568 & 7);
          if (v572 < v573)
            v573 = v572;
          v571 = (*(unsigned __int8 *)(v555 + (v568 >> 3)) >> (8 - (v568 & 7) - v573)) & ~(-1 << v573) | (v571 << v573);
          v568 += v573;
          *v24 = v568;
          v572 -= v573;
        }
        while (v572);
      }
      *(float *)(v538 + 248 * v1234 + 236) = (float)v571 * 0.1;
      v574 = v568 + 1;
      if (v568 + 1 > v547)
      {
        v30 = 4804;
        goto LABEL_165;
      }
      v575 = *(unsigned __int8 *)(v555 + (v568 >> 3));
      *v24 = v574;
      if (((v575 >> (~(_BYTE)v568 & 7)) & 1) != 0)
      {
        if (v568 + 5 > v547)
        {
          v30 = 4807;
          goto LABEL_165;
        }
        v576 = 0;
        v577 = 4;
        do
        {
          v578 = 8 - (v574 & 7);
          if (v577 < v578)
            v578 = v577;
          v576 = (*(unsigned __int8 *)(v555 + (v574 >> 3)) >> (8 - (v574 & 7) - v578)) & ~(-1 << v578) | (v576 << v578);
          v574 += v578;
          *v24 = v574;
          v577 -= v578;
        }
        while (v577);
        v579 = (v576 + 1);
        if (v574 + v579 > v547)
        {
          v30 = 4810;
          goto LABEL_165;
        }
        v580 = 0;
        if (v576 != -1)
        {
          do
          {
            v581 = 8 - (v574 & 7);
            if (v579 < v581)
              v581 = v579;
            v580 = (*(unsigned __int8 *)(v555 + (v574 >> 3)) >> (8 - (v574 & 7) - v581)) & ~(-1 << v581) | (v580 << v581);
            v574 += v581;
            *v24 = v574;
            v579 -= v581;
          }
          while (v579);
        }
        *(_WORD *)(v538 + 248 * v1234 + 240) = v580;
      }
      ++v1234;
    }
    while (v1234 < 0xEF7BDEF7BDEF7BDFLL * ((v548[196] - v538) >> 3));
    v517 = *(_QWORD *)&__p.var0;
  }
  if (v517)
  {
    if (*(_QWORD *)(v517 + 8))
    {
      {
        v1183 = operator new();
        geo::MallocZoneAllocator::MallocZoneAllocator(v1183, "GeoCodec", 0x99AFC36000000008, 0, 0);
        geo::codec::Allocator::instance(void)::alloc = v1183;
      }
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(*(_QWORD *)&__p.var0 + 8), 0);
      v517 = *(_QWORD *)&__p.var0;
    }
    if (*(_QWORD *)(v517 + 32))
    {
      {
        v1184 = operator new();
        geo::MallocZoneAllocator::MallocZoneAllocator(v1184, "GeoCodec", 0x99AFC36000000008, 0, 0);
        geo::codec::Allocator::instance(void)::alloc = v1184;
      }
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(*(_QWORD *)&__p.var0 + 32), 0);
    }
    {
      v1182 = operator new();
      geo::MallocZoneAllocator::MallocZoneAllocator(v1182, "GeoCodec", 0x99AFC36000000008, 0, 0);
      geo::codec::Allocator::instance(void)::alloc = v1182;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)&__p.var0, 0);
  }
  v370 = *v24;
LABEL_532:
  v390 = v370 + 1;
  v391 = *(_QWORD *)(v9 + 16);
  v392 = 8 * v391;
  if (v370 + 1 > 8 * v391)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4828;
    goto LABEL_22;
  }
  v393 = *v1289;
  v394 = *(unsigned __int8 *)(*v1289 + (v370 >> 3));
  *v24 = v390;
  if (((v394 >> (~(_BYTE)v370 & 7)) & 1) != 0)
  {
    if (v370 + 7 > v392)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4831;
      goto LABEL_22;
    }
    v401 = 0;
    v402 = 6;
    do
    {
      v403 = 8 - (v390 & 7);
      if (v402 < v403)
        v403 = v402;
      v401 = (*(unsigned __int8 *)(v393 + (v390 >> 3)) >> (8 - (v390 & 7) - v403)) & ~(-1 << v403) | (v401 << v403);
      v390 += v403;
      *v24 = v390;
      v402 -= v403;
    }
    while (v402);
    if (v390 + 5 > v392)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4834;
      goto LABEL_22;
    }
    v404 = 0;
    v405 = (v401 + 1);
    v406 = 5;
    do
    {
      v407 = 8 - (v390 & 7);
      if (v406 < v407)
        v407 = v406;
      v404 = (*(unsigned __int8 *)(v393 + (v390 >> 3)) >> (8 - (v390 & 7) - v407)) & ~(-1 << v407) | (v404 << v407);
      v390 += v407;
      *v24 = v390;
      v406 -= v407;
    }
    while (v406);
    if (v390 + 5 > v392)
      goto LABEL_566;
    v408 = 0;
    v1273 = (v404 + 1);
    v409 = 5;
    do
    {
      v410 = 8 - (v390 & 7);
      if (v409 < v410)
        v410 = v409;
      v408 = (*(unsigned __int8 *)(v393 + (v390 >> 3)) >> (8 - (v390 & 7) - v410)) & ~(-1 << v410) | (v408 << v410);
      v390 += v410;
      *v24 = v390;
      v409 -= v410;
    }
    while (v409);
    v411 = (v408 + 1);
    if (v390 + v411 > v392)
    {
LABEL_566:
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4837;
      goto LABEL_22;
    }
    if (v408 != -1)
    {
      LODWORD(v431) = 0;
      do
      {
        v432 = 8 - (v390 & 7);
        if (v411 < v432)
          v432 = v411;
        v431 = (*(unsigned __int8 *)(v393 + (v390 >> 3)) >> (8 - (v390 & 7) - v432)) & ~(-1 << v432) | ((_DWORD)v431 << v432);
        v390 += v432;
        *v24 = v390;
        v411 -= v432;
      }
      while (v411);
      if ((_DWORD)v431)
      {
        {
          v1022 = operator new();
          *(_QWORD *)(v1022 + 16) = 0x99AFC36000000008;
          *(_QWORD *)(v1022 + 24) = "GeoCodec";
          *(_OWORD *)(v1022 + 32) = xmmword_189CFDB80;
          *(_QWORD *)v1022 = &off_1E1BF6690;
          *(_QWORD *)(v1022 + 8) = "GeoCodec";
          *(_OWORD *)(v1022 + 56) = 0u;
          *(_OWORD *)(v1022 + 72) = 0u;
          *(_OWORD *)(v1022 + 88) = 0u;
          *(_OWORD *)(v1022 + 104) = 0u;
          *(_OWORD *)(v1022 + 120) = 0u;
          *(_OWORD *)(v1022 + 136) = 0u;
          *(_OWORD *)(v1022 + 152) = 0u;
          *(_OWORD *)(v1022 + 168) = 0u;
          *(_OWORD *)(v1022 + 184) = 0u;
          *(_OWORD *)(v1022 + 200) = 0u;
          *(_OWORD *)(v1022 + 216) = 0u;
          *(_OWORD *)(v1022 + 232) = 0u;
          *(_QWORD *)(v1022 + 248) = 0;
          v1023 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1022 + 56), 0);
          if ((_DWORD)v1023)
            geo::read_write_lock::logFailure(v1023, (uint64_t)"initialization", v1024);
          v1025 = malloc_create_zone(0, 0);
          *(_QWORD *)(v1022 + 48) = v1025;
          malloc_set_zone_name(v1025, "GeoCodec");
          *(_QWORD *)(v1022 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          geo::codec::Allocator::instance(void)::alloc = v1022;
        }
        v434 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                    + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * v431, 8);
        v435 = *a3;
        *(_QWORD *)(v435 + 1544) = v434;
        *(_QWORD *)(v435 + 1552) = v431;
        if (!v434)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 4841;
          goto LABEL_22;
        }
        v436 = 0;
        v437 = *(_QWORD *)(*a3 + 1544);
        v391 = *(_QWORD *)(v9 + 16);
        v390 = *(_QWORD *)(v9 + 24);
        do
        {
          if (v390 + v405 > 8 * v391)
          {
            v29 = (FILE *)*MEMORY[0x1E0C80C10];
            v30 = 4843;
            goto LABEL_22;
          }
          v438 = 0;
          if ((_DWORD)v405)
          {
            v439 = *v1289;
            v440 = v405;
            do
            {
              v441 = 8 - (v390 & 7);
              if (v440 < v441)
                v441 = v440;
              v438 = (*(unsigned __int8 *)(v439 + (v390 >> 3)) >> (8 - (v390 & 7) - v441)) & (unint64_t)~(-1 << v441) | (v438 << v441);
              v390 += v441;
              *v24 = v390;
              v440 -= v441;
            }
            while (v440);
          }
          *(_QWORD *)(v437 + 8 * v436++) = v438;
        }
        while (v436 != v431);
      }
    }
    v465 = *a3;
    v466 = *(_QWORD *)(*a3 + 1416);
    v467 = *(_QWORD *)(*a3 + 1408);
    v392 = 8 * v391;
    v468 = v466 - v467;
    if (v466 != v467)
    {
      v469 = 0;
      v470 = 0x82FA0BE82FA0BE83 * (v468 >> 3);
      do
      {
        v471 = v390 + 1;
        if (v390 + 1 > v392)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 4848;
          goto LABEL_22;
        }
        v472 = *v1289;
        v473 = *(unsigned __int8 *)(*v1289 + (v390 >> 3));
        *v24 = v471;
        if (((v473 >> (~(_BYTE)v390 & 7)) & 1) == 0)
        {
LABEL_645:
          v390 = v471;
          goto LABEL_646;
        }
        v474 = v390 + 2;
        if (v474 > 8 * v391)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 4851;
          goto LABEL_22;
        }
        v475 = *(unsigned __int8 *)(v472 + (v471 >> 3));
        *v24 = v474;
        if (v474 + v1273 > 8 * v391)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 4853;
          goto LABEL_22;
        }
        v476 = v1273;
        if ((_DWORD)v1273)
        {
          v476 = 0;
          v477 = v1273;
          do
          {
            v478 = 8 - (v474 & 7);
            if (v477 < v478)
              v478 = v477;
            v476 = (*(unsigned __int8 *)(v472 + (v474 >> 3)) >> (8 - (v474 & 7) - v478)) & ~(-1 << v478) | (v476 << v478);
            v474 += v478;
            *v24 = v474;
            v477 -= v478;
          }
          while (v477);
        }
        if (((1 << (~(_BYTE)v471 & 7)) & v475) != 0)
        {
          v479 = v467 + 344 * v476;
          *(_QWORD *)(v467 + 344 * v469 + 248) = v479;
          v480 = v479 + 40;
        }
        else
        {
          v481 = *(_QWORD *)(v465 + 1544);
          if (!v481)
            goto LABEL_661;
          v480 = v481 + 8 * v476;
        }
        *(_QWORD *)(v467 + 344 * v469 + 256) = v480;
LABEL_661:
        v471 = v474 + 1;
        if (v474 + 1 > 8 * v391)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 4862;
          goto LABEL_22;
        }
        v482 = *(unsigned __int8 *)(v472 + (v474 >> 3));
        *v24 = v471;
        if (((v482 >> (~(_BYTE)v474 & 7)) & 1) == 0)
          goto LABEL_645;
        v390 = v474 + 2;
        if (v390 > 8 * v391)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 4865;
          goto LABEL_22;
        }
        v483 = *(unsigned __int8 *)(v472 + (v471 >> 3));
        *v24 = v390;
        if (v390 + v1273 > v392)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 4867;
          goto LABEL_22;
        }
        v484 = v1273;
        if ((_DWORD)v1273)
        {
          v484 = 0;
          v485 = v1273;
          do
          {
            v486 = 8 - (v390 & 7);
            if (v485 < v486)
              v486 = v485;
            v484 = (*(unsigned __int8 *)(v472 + (v390 >> 3)) >> (8 - (v390 & 7) - v486)) & ~(-1 << v486) | (v484 << v486);
            v390 += v486;
            *v24 = v390;
            v485 -= v486;
          }
          while (v485);
        }
        if (((1 << (~(_BYTE)v471 & 7)) & v483) != 0)
        {
          v487 = v467 + 344 * v484 + 40;
LABEL_674:
          *(_QWORD *)(v467 + 344 * v469 + 264) = v487;
          goto LABEL_646;
        }
        v488 = *(_QWORD *)(v465 + 1544);
        if (v488)
        {
          v487 = v488 + 8 * v484;
          goto LABEL_674;
        }
LABEL_646:
        ++v469;
      }
      while (v469 < v470);
    }
  }
  if (v390 + 1 > v392)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4882;
    goto LABEL_22;
  }
  v489 = *(unsigned __int8 *)(*v1289 + (v390 >> 3));
  *v24 = v390 + 1;
  if (((v489 >> (~(_BYTE)v390 & 7)) & 1) == 0)
    goto LABEL_684;
  v490 = *(_QWORD *)(*a3 + 1416) - *(_QWORD *)(*a3 + 1408);
  if (!v490)
    goto LABEL_684;
  v1305[0] = &off_1E1BFA650;
  v1305[1] = a3;
  v1306 = v1305;
  geo::codec::decodeZoomRanks(v1289, 0x82FA0BE82FA0BE83 * (v490 >> 3), (uint64_t)v1305);
  v491 = v1306;
  if (v1306 == v1305)
  {
    v492 = 4;
    v491 = v1305;
  }
  else
  {
    if (!v1306)
      goto LABEL_684;
    v492 = 5;
  }
  (*(void (**)(void))(*v491 + 8 * v492))();
LABEL_684:
  if (*(_DWORD *)(v9 + 64) >= 0x11u)
  {
    v493 = *(_QWORD *)(v9 + 24);
    v494 = v493 + 1;
    v495 = 8 * *(_QWORD *)(v9 + 16);
    if (v493 + 1 > v495)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4897;
      goto LABEL_22;
    }
    v496 = *v1289;
    v497 = *(unsigned __int8 *)(*v1289 + (v493 >> 3));
    *v24 = v494;
    if (((v497 >> (~(_BYTE)v493 & 7)) & 1) != 0)
    {
      v498 = *a3;
      if (*(_QWORD *)(*a3 + 1456) || (v499 = *(_QWORD *)(v498 + 1464), v499 != *(_QWORD *)(v498 + 1472)))
      {
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 4900;
        goto LABEL_22;
      }
      if (v493 + 6 > v495)
      {
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 4902;
        goto LABEL_22;
      }
      v518 = 0;
      v519 = 5;
      do
      {
        v520 = 8 - (v494 & 7);
        if (v519 < v520)
          v520 = v519;
        v518 = (*(unsigned __int8 *)(v496 + (v494 >> 3)) >> (8 - (v494 & 7) - v520)) & ~(-1 << v520) | (v518 << v520);
        v494 += v520;
        *v24 = v494;
        v519 -= v520;
      }
      while (v519);
      if (v494 + 5 > v495)
      {
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 4905;
        goto LABEL_22;
      }
      v521 = 0;
      v1245 = (v518 + 1);
      v522 = 5;
      do
      {
        v523 = 8 - (v494 & 7);
        if (v522 < v523)
          v523 = v522;
        v521 = (*(unsigned __int8 *)(v496 + (v494 >> 3)) >> (8 - (v494 & 7) - v523)) & ~(-1 << v523) | (v521 << v523);
        v494 += v523;
        *v24 = v494;
        v522 -= v523;
      }
      while (v522);
      if (v494 + 6 > v495)
      {
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 4908;
        goto LABEL_22;
      }
      v524 = 0;
      v1217 = (v521 + 1);
      v525 = 6;
      do
      {
        v526 = 8 - (v494 & 7);
        if (v525 < v526)
          v526 = v525;
        v524 = (*(unsigned __int8 *)(v496 + (v494 >> 3)) >> (8 - (v494 & 7) - v526)) & ~(-1 << v526) | (v524 << v526);
        v494 += v526;
        *v24 = v494;
        v525 -= v526;
      }
      while (v525);
      if (v494 + 5 > v495)
      {
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 4911;
        goto LABEL_22;
      }
      v527 = 0;
      v1224 = (v524 + 1);
      v528 = 5;
      do
      {
        v529 = 8 - (v494 & 7);
        if (v528 < v529)
          v529 = v528;
        v527 = (*(unsigned __int8 *)(v496 + (v494 >> 3)) >> (8 - (v494 & 7) - v529)) & ~(-1 << v529) | (v527 << v529);
        v494 += v529;
        *v24 = v494;
        v528 -= v529;
      }
      while (v528);
      if (v494 + 5 > v495)
        goto LABEL_770;
      v530 = 0;
      v1233 = (v527 + 1);
      v531 = 5;
      do
      {
        v532 = 8 - (v494 & 7);
        if (v531 < v532)
          v532 = v531;
        v530 = (*(unsigned __int8 *)(v496 + (v494 >> 3)) >> (8 - (v494 & 7) - v532)) & ~(-1 << v532) | (v530 << v532);
        v494 += v532;
        *v24 = v494;
        v531 -= v532;
      }
      while (v531);
      v533 = (v530 + 1);
      if (v494 + v533 > v495)
      {
LABEL_770:
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 4914;
        goto LABEL_22;
      }
      if (v530 == -1)
        goto LABEL_855;
      LODWORD(v1277) = 0;
      do
      {
        v582 = 8 - (v494 & 7);
        if (v533 < v582)
          v582 = v533;
        v1277 = (*(unsigned __int8 *)(v496 + (v494 >> 3)) >> (8 - (v494 & 7) - v582)) & ~(-1 << v582) | ((_DWORD)v1277 << v582);
        v494 += v582;
        *v24 = v494;
        v533 -= v582;
      }
      while (v533);
      if (!(_DWORD)v1277)
      {
LABEL_855:
        LODWORD(v1277) = 0;
      }
      else
      {
        v583 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v498 + 1480) - v499) >> 3);
        if (v583 >= v1277)
        {
          v593 = v499 + 104 * v1277;
          v594 = 104 * v1277;
          do
          {
            if (v499)
            {
              *(_QWORD *)(v499 + 96) = 0;
              *(_OWORD *)(v499 + 64) = 0uLL;
              *(_OWORD *)(v499 + 80) = 0uLL;
              *(_OWORD *)(v499 + 32) = 0uLL;
              *(_OWORD *)(v499 + 48) = 0uLL;
              *(_OWORD *)v499 = 0uLL;
              *(_OWORD *)(v499 + 16) = 0uLL;
            }
            v499 += 104;
            v594 -= 104;
          }
          while (v594);
          *(_QWORD *)(v498 + 1472) = v593;
        }
        else
        {
          v584 = 0x9D89D89D89D89D8ALL * ((*(_QWORD *)(v498 + 1480) - v499) >> 3);
          if (2 * v583 <= v1277)
            v584 = v1277;
          if (v583 >= 0x13B13B13B13B13BLL)
            v585 = 0x276276276276276;
          else
            v585 = v584;
          v586 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v498 + 1488) + 16))(*(_QWORD *)(v498 + 1488), 104 * v585, 8);
          v587 = 0;
          v588 = v586 + 104 * v1277;
          do
          {
            v589 = v586 + v587;
            if (v586 + v587)
            {
              *(_QWORD *)(v589 + 96) = 0;
              *(_OWORD *)(v589 + 64) = 0uLL;
              *(_OWORD *)(v589 + 80) = 0uLL;
              *(_OWORD *)(v589 + 32) = 0uLL;
              *(_OWORD *)(v589 + 48) = 0uLL;
              *(_OWORD *)v589 = 0uLL;
              *(_OWORD *)(v589 + 16) = 0uLL;
            }
            v587 += 104;
          }
          while (104 * v1277 != v587);
          v595 = v586 + 104 * v585;
          v596 = *(std::__shared_weak_count **)(v498 + 1464);
          v1211 = *(std::__shared_weak_count **)(v498 + 1472);
          if (v1211 == v596)
          {
            *(_QWORD *)(v498 + 1464) = v586;
            *(_QWORD *)(v498 + 1472) = v588;
            v1206 = *(_QWORD *)(v498 + 1480);
            *(_QWORD *)(v498 + 1480) = v595;
          }
          else
          {
            v597 = 0;
            do
            {
              v598 = v586 + v597;
              v599 = (char *)v1211 + v597;
              *(_OWORD *)(v598 - 104) = *(_OWORD *)((char *)&v1211[-4] + v597 - 8);
              *((_QWORD *)v599 - 13) = 0;
              *((_QWORD *)v599 - 12) = 0;
              *(_OWORD *)(v598 - 88) = *(_OWORD *)((char *)&v1211[-3] + v597 - 16);
              *(_QWORD *)(v598 - 72) = *(std::__shared_weak_count_vtbl **)((char *)&v1211[-3].__vftable + v597);
              *((_QWORD *)v599 - 10) = 0;
              *((_QWORD *)v599 - 9) = 0;
              v600 = *(_OWORD *)((char *)&v1211[-2] + v597 - 16);
              v601 = *(__int128 *)((char *)&v1211[-2].std::__shared_count + v597);
              *(_DWORD *)(v598 - 32) = *(_DWORD *)((char *)&v1211[-1] + v597 - 8);
              *(_OWORD *)(v598 - 64) = v600;
              *(_OWORD *)(v598 - 48) = v601;
              v602 = *(__int128 *)((char *)&v1211[-1].std::__shared_count + v597);
              *(_DWORD *)(v598 - 8) = *(_DWORD *)((char *)v1211 + v597 - 8);
              *(_OWORD *)(v598 - 24) = v602;
              v597 -= 104;
            }
            while ((std::__shared_weak_count *)((char *)v1211 + v597) != v596);
            v603 = *(std::__shared_weak_count **)(v498 + 1464);
            v604 = *(std::__shared_weak_count **)(v498 + 1472);
            *(_QWORD *)(v498 + 1464) = v586 + v597;
            *(_QWORD *)(v498 + 1472) = v588;
            v1206 = *(_QWORD *)(v498 + 1480);
            v1211 = v603;
            for (*(_QWORD *)(v498 + 1480) = v595; v604 != v1211; v604 = (std::__shared_weak_count *)((char *)v604 - 104))
            {
              v605 = (std::__shared_weak_count *)v604[-3].__vftable;
              if (v605)
              {
                v606 = (unint64_t *)&v605->__shared_owners_;
                do
                  v607 = __ldaxr(v606);
                while (__stlxr(v607 - 1, v606));
                if (!v607)
                {
                  ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
                  std::__shared_weak_count::__release_weak(v605);
                }
              }
              v608 = (std::__shared_weak_count *)v604[-4].__vftable;
              if (v608)
                std::__shared_weak_count::__release_weak(v608);
            }
          }
          if (v1211)
            (*(void (**)(_QWORD, std::__shared_weak_count *, uint64_t))(**(_QWORD **)(v498 + 1488) + 40))(*(_QWORD *)(v498 + 1488), v1211, v1206 - (_QWORD)v1211);
        }
      }
      v609 = *a3;
      v610 = *(_QWORD *)(*a3 + 1464);
      if (*(_QWORD *)(*a3 + 1472) != v610)
      {
        v611 = 0;
        v1212 = 0;
        while (1)
        {
          v613 = *a3;
          v612 = a3[1];
          if (v612)
          {
            v614 = (unint64_t *)(v612 + 16);
            do
              v615 = __ldxr(v614);
            while (__stxr(v615 + 1, v614));
          }
          v616 = (uint64_t *)(v610 + 104 * v611);
          v617 = (std::__shared_weak_count *)v616[1];
          *v616 = v613;
          v616[1] = v612;
          if (v617)
            std::__shared_weak_count::__release_weak(v617);
          v618 = *(_QWORD *)(v9 + 24);
          v619 = 8 * *(_QWORD *)(v9 + 16);
          if (v618 + v1245 > v619)
          {
            v29 = (FILE *)*MEMORY[0x1E0C80C10];
            v30 = 4920;
            goto LABEL_22;
          }
          v620 = v1245;
          if ((_DWORD)v1245)
          {
            v620 = 0;
            v621 = *v1289;
            v622 = v1245;
            do
            {
              v623 = 8 - (v618 & 7);
              if (v622 < v623)
                v623 = v622;
              v620 = (*(unsigned __int8 *)(v621 + (v618 >> 3)) >> (8 - (v618 & 7) - v623)) & ~(-1 << v623) | (v620 << v623);
              v618 += v623;
              *v24 = v618;
              v622 -= v623;
            }
            while (v622);
          }
          if (v618 + v1217 > v619)
          {
            v29 = (FILE *)*MEMORY[0x1E0C80C10];
            v30 = 4922;
            goto LABEL_22;
          }
          if ((_DWORD)v1217)
          {
            v624 = 0;
            v625 = *v1289;
            v626 = v1217;
            do
            {
              v627 = 8 - (v618 & 7);
              if (v626 < v627)
                v627 = v626;
              v624 = (*(unsigned __int8 *)(v625 + (v618 >> 3)) >> (8 - (v618 & 7) - v627)) & ~(-1 << v627) | (v624 << v627);
              v618 += v627;
              *v24 = v618;
              v626 -= v627;
            }
            while (v626);
          }
          else
          {
            v624 = 0;
          }
          v609 = *a3;
          v610 = *(_QWORD *)(*a3 + 1464);
          v628 = v610 + 104 * v611;
          *(_QWORD *)(v628 + 80) = v1212;
          *(_QWORD *)(v628 + 88) = v624;
          if (v620)
            break;
LABEL_899:
          v1212 += v624;
          if (++v611 >= (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v609 + 1472) - v610) >> 3)))
            goto LABEL_940;
        }
        v629 = 0;
        while (1)
        {
          v630 = v618 + 1;
          if (v618 + 1 > v619)
          {
            v29 = (FILE *)*MEMORY[0x1E0C80C10];
            v30 = 4928;
            goto LABEL_22;
          }
          v631 = *(unsigned __int8 *)(*v1289 + (v618 >> 3));
          *v24 = v630;
          if (((v631 >> (~(_BYTE)v618 & 7)) & 1) != 0)
          {
            if (v630 + v1233 > v619)
            {
              v29 = (FILE *)*MEMORY[0x1E0C80C10];
              v30 = 4931;
              goto LABEL_22;
            }
            if (!(_DWORD)v1233)
              goto LABEL_922;
            v632 = v1233;
            do
            {
              v633 = 8 - (v630 & 7);
              if (v632 < v633)
                v633 = v632;
              v630 += v633;
              v632 -= v633;
            }
            while (v632);
          }
          else
          {
            if (v630 + v1224 > v619)
            {
              v29 = (FILE *)*MEMORY[0x1E0C80C10];
              v30 = 4934;
              goto LABEL_22;
            }
            if (!(_DWORD)v1224)
              goto LABEL_922;
            v634 = v1224;
            do
            {
              v635 = 8 - (v630 & 7);
              if (v634 < v635)
                v635 = v634;
              v630 += v635;
              v634 -= v635;
            }
            while (v634);
          }
          *v24 = v630;
LABEL_922:
          ++v629;
          v618 = v630;
          if (v629 == v620)
            goto LABEL_899;
        }
      }
      v1212 = 0;
LABEL_940:
      if ((geo::codec::decodeSectionEncoding((geo::codec::Allocator *)v1289, (GeoCodecsVertexPool *)(v609 + 1456), 0, 0, 0) & 1) == 0)
      {
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 4938;
        goto LABEL_22;
      }
      v636 = *a3;
      v637 = *(_QWORD *)(*a3 + 1456);
      if (!v637 || *(_QWORD *)(v637 + 40) != v1212)
      {
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 4939;
        goto LABEL_22;
      }
      v638 = *(_QWORD *)(v9 + 24);
      if (v638 + 1 > 8 * *(_QWORD *)(v9 + 16))
      {
        v30 = 4942;
        goto LABEL_165;
      }
      v651 = *(unsigned __int8 *)(*v1289 + (v638 >> 3));
      *v24 = v638 + 1;
      if (((v651 >> (~(_BYTE)v638 & 7)) & 1) != 0
        && !geo::codec::decodeAttributeSet<GeoCodecsFeature>(1, v1289, v1277, v636 + 1112, *(_QWORD *)(v636 + 1464), 104))
      {
        v30 = 4944;
        goto LABEL_165;
      }
    }
  }
  v652 = *(_QWORD *)(*a3 + 1344);
  if (v652 == *(_QWORD *)(*a3 + 1352))
    goto LABEL_1118;
  v653 = 0;
  v1278 = 0;
  memset(&__p, 0, 32);
  LODWORD(__p.var4) = 1065353216;
  do
  {
    v654 = std::__hash_table<std::__hash_value_type<unsigned long long,JunctionInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,JunctionInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,JunctionInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,JunctionInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t *)&__p, *(_QWORD *)(v652 + v653 + 56), (_QWORD *)(v652 + v653 + 56));
    std::__hash_table<GeoCodecsTransitLink *,std::hash<GeoCodecsTransitLink *>,std::equal_to<GeoCodecsTransitLink *>,std::allocator<GeoCodecsTransitLink *>>::__emplace_unique_key_args<GeoCodecsTransitLink *,GeoCodecsTransitLink *&>((float *)v654 + 16, v652 + v653, v652 + v653);
    v655 = std::__hash_table<std::__hash_value_type<unsigned long long,JunctionInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,JunctionInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,JunctionInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,JunctionInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t *)&__p, *(_QWORD *)(v652 + v653 + 64), (_QWORD *)(v652 + v653 + 64));
    std::__hash_table<GeoCodecsTransitLink *,std::hash<GeoCodecsTransitLink *>,std::equal_to<GeoCodecsTransitLink *>,std::allocator<GeoCodecsTransitLink *>>::__emplace_unique_key_args<GeoCodecsTransitLink *,GeoCodecsTransitLink *&>((float *)v655 + 6, v652 + v653, v652 + v653);
    v652 = *(_QWORD *)(*a3 + 1344);
    v653 += 184;
    ++v1278;
  }
  while (v1278 < 0xD37A6F4DE9BD37A7 * ((*(_QWORD *)(*a3 + 1352) - v652) >> 3));
  v1235 = 1;
  var2 = __p.var2;
  if (!__p.var2)
    goto LABEL_1114;
  v1213 = 0;
  v1218 = 0;
  v656 = 1.0 / (float)(1 << **(_BYTE **)(*a3 + 1400));
  do
  {
    *(_BYTE *)(var2 + 104) = 1;
    v657 = *(_QWORD *)(var2 + 48);
    if (v657)
    {
      v658 = *(_QWORD **)(var2 + 40);
      v1225 = (_QWORD *)(var2 + 40);
      v659 = *(_QWORD *)(v658[2] + 48);
      v660 = v658 == 0;
    }
    else
    {
      v658 = *(_QWORD **)(var2 + 40);
      v1225 = (_QWORD *)(var2 + 40);
      v661 = *(_QWORD **)(var2 + 80);
      v1207 = (_QWORD *)(var2 + 80);
      v659 = *(_QWORD *)(v661[2] + 40);
      if (!v658)
      {
        v660 = 1;
LABEL_981:
        v663 = v661;
        while (*(_QWORD *)(v663[2] + 40) == v659)
        {
          v663 = (_QWORD *)*v663;
          if (!v663)
            goto LABEL_984;
        }
LABEL_1113:
        v1235 = 0;
        goto LABEL_1114;
      }
      v660 = 0;
    }
    v662 = v658;
    do
    {
      if (*(_QWORD *)(v662[2] + 48) != v659)
        goto LABEL_1113;
      v662 = (_QWORD *)*v662;
    }
    while (v662);
    v661 = *(_QWORD **)(var2 + 80);
    v1207 = (_QWORD *)(var2 + 80);
    if (v661)
      goto LABEL_981;
    LOBYTE(v663) = 1;
LABEL_984:
    if (v659)
    {
      if (!*(_BYTE *)(v659 + 321))
        goto LABEL_1103;
      *(_BYTE *)(var2 + 104) = 0;
      if (!v660)
      {
        do
        {
          *(_QWORD *)(v658[2] + 48) = 0;
          v658 = (_QWORD *)*v658;
        }
        while (v658);
      }
      if ((v663 & 1) == 0)
      {
        do
        {
          *(_QWORD *)(v661[2] + 40) = 0;
          v661 = (_QWORD *)*v661;
        }
        while (v661);
      }
      goto LABEL_1104;
    }
    if (v657)
    {
      v664 = v658[2];
      v665 = *(unsigned int *)(v664 + 20);
      if (!(_DWORD)v665)
      {
        v1202 = 0;
        goto LABEL_1027;
      }
      while (1)
      {
        --v665;
        if (*(_DWORD *)(v664 + 20))
        {
          v666 = *(std::__shared_weak_count **)(v664 + 8);
          if (v666)
          {
            v667 = std::__shared_weak_count::lock(v666);
            if (v667)
            {
              v668 = v667;
              if (*(_QWORD *)v664 && (v669 = *(_QWORD *)(*(_QWORD *)v664 + 1400)) != 0)
              {
                v670 = (_QWORD *)(*(_QWORD *)(v669 + 32) + 16 * *(unsigned int *)(v664 + 16) + 16 * v665);
                v1279 = v670[1];
                v1203 = *(_QWORD *)(v669 + 8) + 8 * *v670;
              }
              else
              {
                v1279 = 0;
                v1203 = 0;
              }
              v671 = (unint64_t *)&v667->__shared_owners_;
              do
                v672 = __ldaxr(v671);
              while (__stlxr(v672 - 1, v671));
              if (!v672)
              {
                ((void (*)(std::__shared_weak_count *))v667->__on_zero_shared)(v667);
                std::__shared_weak_count::__release_weak(v668);
              }
              if (v1279)
                break;
            }
          }
        }
        if (!v665)
        {
          v1202 = 0;
          goto LABEL_1027;
        }
      }
      v1202 = (float *)(v1203 + 8 * v1279 - 8);
    }
    else
    {
      v673 = v661[2];
      if (*(_DWORD *)(v673 + 20))
      {
        v674 = *(std::__shared_weak_count **)(v673 + 8);
        if (v674)
        {
          v675 = 0;
          while (1)
          {
            v676 = std::__shared_weak_count::lock(v674);
            if (v676)
            {
              v677 = v676;
              if (*(_QWORD *)v673 && (v678 = *(_QWORD *)(*(_QWORD *)v673 + 1400)) != 0)
              {
                v679 = (_QWORD *)(*(_QWORD *)(v678 + 32) + 16 * *(unsigned int *)(v673 + 16) + 16 * v675);
                v1280 = v679[1];
                v1202 = (float *)(*(_QWORD *)(v678 + 8) + 8 * *v679);
              }
              else
              {
                v1280 = 0;
                v1202 = 0;
              }
              v680 = (unint64_t *)&v676->__shared_owners_;
              do
                v681 = __ldaxr(v680);
              while (__stlxr(v681 - 1, v680));
              if (!v681)
              {
                ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
                std::__shared_weak_count::__release_weak(v677);
              }
              if (v1280)
                break;
            }
            do
            {
              if (++v675 >= (unint64_t)*(unsigned int *)(v673 + 20))
              {
                v1202 = 0;
                goto LABEL_1027;
              }
              v674 = *(std::__shared_weak_count **)(v673 + 8);
            }
            while (!v674);
          }
        }
        else
        {
          v1202 = 0;
        }
      }
      else
      {
        v1202 = 0;
      }
    }
LABEL_1027:
    while (1)
    {
      v1225 = (_QWORD *)*v1225;
      if (!v1225)
        break;
      v1281 = v1225[2];
      if (!*(_DWORD *)(v1281 + 20))
        goto LABEL_1065;
      v682 = *(std::__shared_weak_count **)(v1281 + 8);
      if (!v682)
        goto LABEL_1065;
      v683 = 0;
LABEL_1032:
      v684 = std::__shared_weak_count::lock(v682);
      if (!v684)
      {
        v690 = *(unsigned int *)(v1281 + 20);
        goto LABEL_1044;
      }
      v685 = v684;
      if (*(_QWORD *)v1281 && (v686 = *(_QWORD *)(*(_QWORD *)v1281 + 1400)) != 0)
        v687 = *(_QWORD *)(*(_QWORD *)(v686 + 32) + 16 * *(unsigned int *)(v1281 + 16) + 16 * v683 + 8);
      else
        v687 = 0;
      v688 = (unint64_t *)&v684->__shared_owners_;
      do
        v689 = __ldaxr(v688);
      while (__stlxr(v689 - 1, v688));
      if (!v689)
      {
        ((void (*)(std::__shared_weak_count *))v684->__on_zero_shared)(v684);
        std::__shared_weak_count::__release_weak(v685);
      }
      v690 = *(unsigned int *)(v1281 + 20);
      if (!v687)
      {
LABEL_1044:
        while (++v683 < v690)
        {
          v682 = *(std::__shared_weak_count **)(v1281 + 8);
          if (v682)
            goto LABEL_1032;
        }
LABEL_1065:
        *(_BYTE *)(var2 + 104) = 0;
        goto LABEL_1104;
      }
      if (!*(_DWORD *)(v1281 + 20))
        goto LABEL_1061;
      v691 = v690 - 1;
LABEL_1049:
      v692 = *(std::__shared_weak_count **)(v1281 + 8);
      if (!v692)
        goto LABEL_1060;
      v693 = std::__shared_weak_count::lock(v692);
      if (!v693)
        goto LABEL_1060;
      v694 = v693;
      if (*(_QWORD *)v1281 && (v695 = *(_QWORD *)(*(_QWORD *)v1281 + 1400)) != 0)
      {
        v696 = (_QWORD *)(*(_QWORD *)(v695 + 32) + 16 * *(unsigned int *)(v1281 + 16) + 16 * v691);
        v697 = v696[1];
        v1200 = *(_QWORD *)(v695 + 8) + 8 * *v696;
      }
      else
      {
        v697 = 0;
        v1200 = 0;
      }
      v698 = (unint64_t *)&v693->__shared_owners_;
      do
        v699 = __ldaxr(v698);
      while (__stlxr(v699 - 1, v698));
      if (!v699)
      {
        ((void (*)(std::__shared_weak_count *))v693->__on_zero_shared)(v693);
        std::__shared_weak_count::__release_weak(v694);
      }
      if (!v697)
      {
LABEL_1060:
        while (v691)
        {
          --v691;
          if (*(_DWORD *)(v1281 + 20))
            goto LABEL_1049;
        }
LABEL_1061:
        v700 = 0;
        if (vabds_f32(MEMORY[0], *v1202) >= v656)
          goto LABEL_1065;
        goto LABEL_1062;
      }
      v701 = v1200 + 8 * v697;
      v702 = *(float *)(v701 - 8);
      v700 = v701 - 8;
      if (vabds_f32(v702, *v1202) >= v656)
        goto LABEL_1065;
LABEL_1062:
      if (vabds_f32(*(float *)(v700 + 4), v1202[1]) >= v656)
        goto LABEL_1065;
    }
    if (*(_BYTE *)(var2 + 104))
    {
      while (1)
      {
        v1207 = (_QWORD *)*v1207;
        if (!v1207)
          break;
        v703 = v1207[2];
        if (!*(_DWORD *)(v703 + 20))
          goto LABEL_1065;
        v704 = *(std::__shared_weak_count **)(v703 + 8);
        if (!v704)
          goto LABEL_1065;
        v705 = 0;
LABEL_1072:
        v706 = std::__shared_weak_count::lock(v704);
        if (!v706)
          goto LABEL_1903;
        v707 = v706;
        if (*(_QWORD *)v703 && (v708 = *(_QWORD *)(*(_QWORD *)v703 + 1400)) != 0)
          v1282 = *(_QWORD *)(*(_QWORD *)(v708 + 32) + 16 * *(unsigned int *)(v703 + 16) + 16 * v705 + 8);
        else
          v1282 = 0;
        v709 = (unint64_t *)&v706->__shared_owners_;
        do
          v710 = __ldaxr(v709);
        while (__stlxr(v710 - 1, v709));
        if (!v710)
        {
          ((void (*)(std::__shared_weak_count *))v706->__on_zero_shared)(v706);
          std::__shared_weak_count::__release_weak(v707);
        }
        if (!v1282)
        {
LABEL_1903:
          while (++v705 < (unint64_t)*(unsigned int *)(v703 + 20))
          {
            v704 = *(std::__shared_weak_count **)(v703 + 8);
            if (v704)
              goto LABEL_1072;
          }
          goto LABEL_1065;
        }
        v711 = *(std::__shared_weak_count **)(v703 + 8);
        if (!v711)
        {
          for (k = 1; ; ++k)
            ;
        }
        for (m = 0; ; ++m)
        {
          if (v711)
          {
            v713 = std::__shared_weak_count::lock(v711);
            if (v713)
            {
              v714 = v713;
              if (*(_QWORD *)v703 && (v715 = *(_QWORD *)(*(_QWORD *)v703 + 1400)) != 0)
              {
                v716 = (_QWORD *)(*(_QWORD *)(v715 + 32) + 16 * *(unsigned int *)(v703 + 16) + 16 * m);
                v1283 = v716[1];
                v1226 = (float *)(*(_QWORD *)(v715 + 8) + 8 * *v716);
              }
              else
              {
                v1283 = 0;
                v1226 = 0;
              }
              v717 = (unint64_t *)&v713->__shared_owners_;
              do
                v718 = __ldaxr(v717);
              while (__stlxr(v718 - 1, v717));
              if (!v718)
              {
                ((void (*)(std::__shared_weak_count *))v713->__on_zero_shared)(v713);
                std::__shared_weak_count::__release_weak(v714);
              }
              if (v1283)
                break;
            }
          }
          v711 = *(std::__shared_weak_count **)(v703 + 8);
        }
        if (vabds_f32(*v1226, *v1202) >= v656 || vabds_f32(v1226[1], v1202[1]) >= v656)
          goto LABEL_1065;
      }
      if (!*(_BYTE *)(var2 + 104))
        goto LABEL_1104;
      v657 = *(_QWORD *)(var2 + 48);
LABEL_1103:
      v1213 = (std::__shared_weak_count *)((char *)v1213 + v657 + *(_QWORD *)(var2 + 88));
      ++v1218;
    }
LABEL_1104:
    var2 = *(_QWORD *)var2;
  }
  while (var2);
  v1235 = 1;
  if (v1218 && v1213)
  {
    v719 = *a3;
    *(_QWORD *)(v719 + 1504) = v1218;
    *(_QWORD *)(v719 + 1520) = v1213;
    {
      v1178 = operator new();
      geo::MallocZoneAllocator::MallocZoneAllocator(v1178, "GeoCodec", 0x99AFC36000000008, 0, 0);
      geo::codec::Allocator::instance(void)::alloc = v1178;
    }
    *(_QWORD *)(*a3 + 1496) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                                   + 16))(geo::codec::Allocator::instance(void)::alloc, 32 * *(_QWORD *)(*a3 + 1504), 8);
    {
      v1179 = operator new();
      geo::MallocZoneAllocator::MallocZoneAllocator(v1179, "GeoCodec", 0x99AFC36000000008, 0, 0);
      geo::codec::Allocator::instance(void)::alloc = v1179;
    }
    v721 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                + 16))(geo::codec::Allocator::instance(void)::alloc, 16 * *(_QWORD *)(*a3 + 1520), 8);
    v1235 = 0;
    v722 = (_QWORD *)*a3;
    v722[189] = v721;
    if (v722[187])
    {
      if (v721)
      {
        v1219 = __p.var2;
        if (__p.var2)
        {
          v1284 = 0;
          v723 = 0;
          do
          {
            if (*(_BYTE *)(v1219 + 104))
            {
              v752 = *(_QWORD *)(*a3 + 1496) + 32 * v1284;
              *(_QWORD *)(v1219 + 112) = v752;
              *(_QWORD *)(v752 + 8) = 0;
              v1248 = (_DWORD *)v752;
              *(_DWORD *)(v752 + 4) = v723;
              v1208 = (_DWORD *)(v752 + 4);
              for (n = *(_QWORD **)(v1219 + 40); n; n = (_QWORD *)*n)
              {
                v761 = *a3;
                v1236 = *(_QWORD *)(*a3 + 1512);
                v762 = (unsigned int *)(v1236 + 16 * v723);
                *v762 = v1284;
                v763 = n[2];
                v762[1] = -373475417 * ((unint64_t)(v763 - *(_QWORD *)(v761 + 1344)) >> 3);
                LODWORD(v761) = *(_DWORD *)(v763 + 20);
                v1227 = (v761 - 1);
                v762[2] = v1227;
                if ((_DWORD)v761
                  && (v764 = *(std::__shared_weak_count **)(v763 + 8)) != 0
                  && (v765 = std::__shared_weak_count::lock(v764)) != 0)
                {
                  if (*(_QWORD *)v763 && (v766 = *(_QWORD *)(*(_QWORD *)v763 + 1400)) != 0)
                    v759 = *(_QWORD *)(*(_QWORD *)(v766 + 32) + 16 * *(unsigned int *)(v763 + 16) + 16 * v1227 + 8);
                  else
                    LODWORD(v759) = 0;
                  v767 = (unint64_t *)&v765->__shared_owners_;
                  do
                    v768 = __ldaxr(v767);
                  while (__stlxr(v768 - 1, v767));
                  if (!v768)
                  {
                    v1214 = v765;
                    ((void (*)(std::__shared_weak_count *))v765->__on_zero_shared)(v765);
                    std::__shared_weak_count::__release_weak(v1214);
                  }
                }
                else
                {
                  LODWORD(v759) = 0;
                }
                v760 = v723++;
                *(_DWORD *)(v1236 + 16 * v760 + 12) = v759 - 1;
                *(_QWORD *)(n[2] + 48) = v1248;
              }
              v754 = *(_QWORD **)(v1219 + 80);
              if (v754)
              {
                v755 = *(_QWORD *)(*a3 + 1512);
                v756 = *(_QWORD *)(*a3 + 1344);
                do
                {
                  v757 = v755 + 16 * v723;
                  *(_DWORD *)v757 = v1284;
                  v758 = v754[2];
                  ++v723;
                  *(_QWORD *)(v757 + 8) = 0;
                  *(_DWORD *)(v757 + 4) = -373475417 * ((unint64_t)(v758 - v756) >> 3);
                  *(_QWORD *)(v758 + 40) = v1248;
                  v754 = (_QWORD *)*v754;
                }
                while (v754);
              }
              *v1248 = v723 - *v1208;
              ++v1284;
            }
            v1219 = *(_QWORD *)v1219;
          }
          while (v1219);
          v722 = (_QWORD *)*a3;
        }
        v780 = v722[177];
        v781 = v722[176];
        v782 = v780 - v781;
        if (v780 == v781 || (var1 = __p.var1) == 0)
        {
          v1235 = 1;
        }
        else
        {
          v784 = 0;
          v785 = v782 / 344;
          v786 = (uint8x8_t)vcnt_s8((int8x8_t)__p.var1);
          v786.i16[0] = vaddlv_u8(v786);
          v787 = (unint64_t)&__p.var1[-1].var1 + 3;
          if ((unint64_t)(v782 / 344) <= 1)
            v785 = 1;
          do
          {
            v788 = *(_QWORD *)(v781 + 344 * v784 + 40);
            if (v786.u32[0] > 1uLL)
            {
              v789 = *(_QWORD *)(v781 + 344 * v784 + 40);
              if (v788 >= (unint64_t)var1)
                v789 = v788 % (unint64_t)var1;
            }
            else
            {
              v789 = v788 & v787;
            }
            v790 = *(uint64_t ***)(*(_QWORD *)&__p.var0 + 8 * v789);
            if (v790)
            {
              v791 = *v790;
              if (v791)
              {
                if (v786.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v792 = v791[1];
                    if (v792 == v788)
                    {
                      if (v791[2] == v788)
                        goto LABEL_1224;
                    }
                    else if ((v792 & v787) != v789)
                    {
                      goto LABEL_1203;
                    }
                    v791 = (uint64_t *)*v791;
                    if (!v791)
                      goto LABEL_1203;
                  }
                }
                do
                {
                  v793 = v791[1];
                  if (v793 == v788)
                  {
                    if (v791[2] == v788)
                    {
LABEL_1224:
                      if (*((_BYTE *)v791 + 104))
                        *(_QWORD *)(v781 + 344 * v784 + 240) = v791[14];
                      break;
                    }
                  }
                  else
                  {
                    if (v793 >= (unint64_t)var1)
                      v793 %= (unint64_t)var1;
                    if (v793 != v789)
                      break;
                  }
                  v791 = (uint64_t *)*v791;
                }
                while (v791);
              }
            }
LABEL_1203:
            ++v784;
            v1235 = 1;
          }
          while (v784 != v785);
        }
      }
    }
  }
LABEL_1114:
  v724 = (_QWORD *)__p.var2;
  if (__p.var2)
  {
    do
    {
      v729 = (_QWORD *)*v724;
      v730 = (_QWORD *)v724[10];
      if (v730)
      {
        do
        {
          v731 = (_QWORD *)*v730;
          operator delete(v730);
          v730 = v731;
        }
        while (v731);
      }
      v732 = (void *)v724[8];
      v724[8] = 0;
      if (v732)
        operator delete(v732);
      v733 = (_QWORD *)v724[5];
      if (v733)
      {
        do
        {
          v734 = (_QWORD *)*v733;
          operator delete(v733);
          v733 = v734;
        }
        while (v734);
      }
      v735 = (void *)v724[3];
      v724[3] = 0;
      if (v735)
        operator delete(v735);
      operator delete(v724);
      v724 = v729;
    }
    while (v729);
  }
  v725 = *(void **)&__p.var0;
  *(_QWORD *)&__p.var0 = 0;
  if (v725)
    operator delete(v725);
  if ((v1235 & 1) == 0)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4949;
    goto LABEL_22;
  }
LABEL_1118:
  v726 = *(_QWORD *)(v9 + 24);
  v727 = v726 + 1;
  v728 = 8 * *(_QWORD *)(v9 + 16);
  if (v726 + 1 > v728)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 4979;
    goto LABEL_22;
  }
  v736 = *v1289;
  v737 = *(unsigned __int8 *)(*v1289 + (v726 >> 3));
  *v24 = v727;
  if (((v737 >> (~(_BYTE)v726 & 7)) & 1) != 0)
  {
    if (v726 + 6 > v728)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4982;
      goto LABEL_22;
    }
    v738 = 0;
    v739 = 5;
    do
    {
      v740 = 8 - (v727 & 7);
      if (v739 < v740)
        v740 = v739;
      v738 = (*(unsigned __int8 *)(v736 + (v727 >> 3)) >> (8 - (v727 & 7) - v740)) & ~(-1 << v740) | (v738 << v740);
      v727 += v740;
      *v24 = v727;
      v739 -= v740;
    }
    while (v739);
    if (v727 + 5 > v728)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4985;
      goto LABEL_22;
    }
    v741 = 0;
    v742 = (v738 + 1);
    v743 = 5;
    do
    {
      v744 = 8 - (v727 & 7);
      if (v743 < v744)
        v744 = v743;
      v741 = (*(unsigned __int8 *)(v736 + (v727 >> 3)) >> (8 - (v727 & 7) - v744)) & ~(-1 << v744) | (v741 << v744);
      v727 += v744;
      *v24 = v727;
      v743 -= v744;
    }
    while (v743);
    if (v727 + 5 > v728)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4988;
      goto LABEL_22;
    }
    v745 = 0;
    v1285 = (v741 + 1);
    v746 = 5;
    do
    {
      v747 = 8 - (v727 & 7);
      if (v746 < v747)
        v747 = v746;
      v745 = (*(unsigned __int8 *)(v736 + (v727 >> 3)) >> (8 - (v727 & 7) - v747)) & ~(-1 << v747) | (v745 << v747);
      v727 += v747;
      *v24 = v727;
      v746 -= v747;
    }
    while (v746);
    if (v727 + 5 > v728)
      goto LABEL_1155;
    v748 = 0;
    v1247 = (v745 + 1);
    v749 = 5;
    do
    {
      v750 = 8 - (v727 & 7);
      if (v749 < v750)
        v750 = v749;
      v748 = (*(unsigned __int8 *)(v736 + (v727 >> 3)) >> (8 - (v727 & 7) - v750)) & ~(-1 << v750) | (v748 << v750);
      v727 += v750;
      *v24 = v727;
      v749 -= v750;
    }
    while (v749);
    v751 = (v748 + 1);
    if (v727 + v751 > v728)
    {
LABEL_1155:
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 4991;
      goto LABEL_22;
    }
    v769 = 0;
    if (v748 != -1)
    {
      do
      {
        v770 = 8 - (v727 & 7);
        if (v751 < v770)
          v770 = v751;
        v769 = (*(unsigned __int8 *)(v736 + (v727 >> 3)) >> (8 - (v727 & 7) - v770)) & ~(-1 << v770) | (v769 << v770);
        v727 += v770;
        *v24 = v727;
        v751 -= v770;
      }
      while (v751);
    }
    if (v727 + 5 > v728)
      goto LABEL_1187;
    v771 = 0;
    v772 = 5;
    do
    {
      v773 = 8 - (v727 & 7);
      if (v772 < v773)
        v773 = v772;
      v771 = (*(unsigned __int8 *)(v736 + (v727 >> 3)) >> (8 - (v727 & 7) - v773)) & ~(-1 << v773) | (v771 << v773);
      v727 += v773;
      *v24 = v727;
      v772 -= v773;
    }
    while (v772);
    v774 = (v771 + 1);
    if (v727 + v774 > v728)
    {
LABEL_1187:
      v30 = 4994;
      goto LABEL_165;
    }
    if (v771 == -1)
    {
      v777 = *a3;
      *(_QWORD *)(*a3 + 1632) = 0;
    }
    else
    {
      LODWORD(v775) = 0;
      do
      {
        v776 = 8 - (v727 & 7);
        if (v774 < v776)
          v776 = v774;
        v775 = (*(unsigned __int8 *)(v736 + (v727 >> 3)) >> (8 - (v727 & 7) - v776)) & ~(-1 << v776) | ((_DWORD)v775 << v776);
        v727 += v776;
        *v24 = v727;
        v774 -= v776;
      }
      while (v774);
      v777 = *a3;
      *(_QWORD *)(*a3 + 1632) = v775;
      if ((_DWORD)v775)
      {
        {
          v1239 = operator new();
          geo::MallocZoneAllocator::MallocZoneAllocator(v1239, "GeoCodec", 0x99AFC36000000008, 0, 0);
          geo::codec::Allocator::instance(void)::alloc = v1239;
        }
        v779 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                    + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * v775, 8);
        v777 = *a3;
        *(_QWORD *)(*a3 + 1616) = v779;
        if (!v779)
        {
          v30 = 4999;
          goto LABEL_165;
        }
      }
    }
    v1215 = *(std::__shared_weak_count **)(v777 + 856);
    v1220 = *(_QWORD *)(v777 + 864);
    v794 = *a3;
    v1237 = *(_QWORD *)(*a3 + 1056);
    if (v769)
    {
      v795 = v769;
      *(_QWORD *)(v794 + 1056) = v1237 + v769;
      v796 = *(_QWORD *)(v794 + 1048);
      {
        v1229 = operator new();
        geo::MallocZoneAllocator::MallocZoneAllocator(v1229, "GeoCodec", 0x99AFC36000000008, 0, 0);
        geo::codec::Allocator::instance(void)::alloc = v1229;
      }
      v798 = *a3;
      if (v796)
      {
        v799 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                   + 32))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v798 + 1048), 24 * *(_QWORD *)(v798 + 1056));
        if (v799)
        {
          *(_QWORD *)(*a3 + 1048) = v799;
          bzero((void *)(v799 + 24 * v1237), 24 * v795);
          v800 = *(_QWORD *)(*a3 + 1048);
          goto LABEL_1234;
        }
        {
          v1194 = operator new();
          geo::MallocZoneAllocator::MallocZoneAllocator(v1194, "GeoCodec", 0x99AFC36000000008, 0, 0);
          geo::codec::Allocator::instance(void)::alloc = v1194;
        }
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(*a3 + 1048), 0);
        *(_QWORD *)(*a3 + 1048) = 0;
LABEL_1468:
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 5006;
        goto LABEL_22;
      }
      v800 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                 + 24))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v798 + 1056), 24);
      *(_QWORD *)(*a3 + 1048) = v800;
LABEL_1234:
      if (!v800)
        goto LABEL_1468;
    }
    if (v42)
    {
      v1228 = 0;
      v1209 = 0;
      v1204 = v1220 - (_QWORD)v1215;
      v801 = *(_QWORD *)(v9 + 16);
      v802 = *(_QWORD *)(v9 + 24);
      do
      {
        v803 = 8 * v801;
        if (v802 + 2 > 8 * v801)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 5014;
          goto LABEL_22;
        }
        v804 = 0;
        v805 = (_QWORD *)*a3;
        v1221 = *(_QWORD *)(*a3 + 1408);
        v806 = *v1289;
        v807 = 2;
        do
        {
          v808 = 8 - (v802 & 7);
          if (v807 < v808)
            v808 = v807;
          v804 = (*(unsigned __int8 *)(v806 + (v802 >> 3)) >> (8 - (v802 & 7) - v808)) & ~(-1 << v808) | (v804 << v808);
          v802 += v808;
          *v24 = v802;
          v807 -= v808;
        }
        while (v807);
        *(_BYTE *)(v1221 + 344 * v1228 + 273) = v804;
        v809 = v802 + 1;
        if (v802 + 1 > v803)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 5020;
          goto LABEL_22;
        }
        v810 = *(unsigned __int8 *)(v806 + (v802 >> 3));
        *v24 = v809;
        v811 = ~(_BYTE)v802 & 7;
        v812 = (_QWORD *)(v1221 + 344 * v1228 + 280);
        if (((v810 >> v811) & 1) != 0)
        {
          *v812 = v1237;
          if (v809 + v742 > v803)
          {
            v30 = 5025;
            goto LABEL_165;
          }
          v813 = 0;
          if ((_DWORD)v742)
          {
            v814 = v742;
            do
            {
              v815 = 8 - (v809 & 7);
              if (v814 < v815)
                v815 = v814;
              v813 = (*(unsigned __int8 *)(v806 + (v809 >> 3)) >> (8 - (v809 & 7) - v815)) & ~(-1 << v815) | (v813 << v815);
              v809 += v815;
              *v24 = v809;
              v814 -= v815;
            }
            while (v814);
          }
          v816 = v813;
          if (v1204 <= v813)
          {
            v30 = 5026;
            goto LABEL_165;
          }
          if (v809 + v742 > v803)
          {
            v30 = 5029;
            goto LABEL_165;
          }
          v817 = 0;
          if ((_DWORD)v742)
          {
            v818 = v742;
            do
            {
              v819 = 8 - (v809 & 7);
              if (v818 < v819)
                v819 = v818;
              v817 = (*(unsigned __int8 *)(v806 + (v809 >> 3)) >> (8 - (v809 & 7) - v819)) & ~(-1 << v819) | (v817 << v819);
              v809 += v819;
              *v24 = v809;
              v818 -= v819;
            }
            while (v818);
          }
          v820 = v817;
          if (v1204 <= v817)
          {
            v30 = 5030;
            goto LABEL_165;
          }
          if (v809 + v742 > v803)
          {
            v30 = 5033;
            goto LABEL_165;
          }
          v821 = 0;
          if ((_DWORD)v742)
          {
            v822 = v742;
            do
            {
              v823 = 8 - (v809 & 7);
              if (v822 < v823)
                v823 = v822;
              v821 = (*(unsigned __int8 *)(v806 + (v809 >> 3)) >> (8 - (v809 & 7) - v823)) & ~(-1 << v823) | (v821 << v823);
              v809 += v823;
              *v24 = v809;
              v822 -= v823;
            }
            while (v822);
          }
          v1199 = v821;
          if (v1204 <= v821)
          {
            v30 = 5034;
            goto LABEL_165;
          }
          v824 = v805[131] + 24 * v1237;
          *(_QWORD *)v824 = (char *)v1215 + v816;
          *(_DWORD *)(v824 + 16) = 0;
          v825 = (const void *)v805[111];
          v826 = v805[112];
          __p.var6 = v816;
          v827 = bsearch(&__p.var6, v825, v826, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
          if (v827)
            v828 = v827[2];
          else
            v828 = 0;
          v829 = *a3;
          v830 = *(_QWORD *)(*a3 + 1048) + 24 * v1237;
          *(_QWORD *)(v830 + 8) = v828;
          *(_QWORD *)(v830 + 24) = (char *)v1215 + v820;
          *(_DWORD *)(v830 + 40) = 0;
          v831 = *(const void **)(v829 + 888);
          v832 = *(_QWORD *)(v829 + 896);
          __p.var6 = v820;
          v833 = bsearch(&__p.var6, v831, v832, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
          if (v833)
            v834 = v833[2];
          else
            v834 = 0;
          v835 = *a3;
          v836 = *(_QWORD *)(*a3 + 1048);
          *(_QWORD *)(v836 + 24 * (v1237 + 1) + 8) = v834;
          v837 = v836 + 24 * (v1237 + 2);
          *(_QWORD *)v837 = (char *)v1215 + v1199;
          *(_DWORD *)(v837 + 16) = 0;
          v838 = *(const void **)(v835 + 888);
          v839 = *(_QWORD *)(v835 + 896);
          __p.var6 = v1199;
          v840 = bsearch(&__p.var6, v838, v839, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
          if (v840)
            v841 = v840[2];
          else
            v841 = 0;
          *(_QWORD *)(*(_QWORD *)(*a3 + 1048) + 24 * (v1237 + 2) + 8) = v841;
          v801 = *(_QWORD *)(v9 + 16);
          v809 = *(_QWORD *)(v9 + 24);
          v803 = 8 * v801;
        }
        else
        {
          *v812 = 255;
        }
        if (v809 + v1285 > v803)
        {
          v30 = 5057;
          goto LABEL_165;
        }
        v842 = v1285;
        if ((_DWORD)v1285)
        {
          v842 = 0;
          v843 = v1285;
          v844 = *v1289;
          do
          {
            v845 = 8 - (v809 & 7);
            if (v843 < v845)
              v845 = v843;
            v842 = (*(unsigned __int8 *)(v844 + (v809 >> 3)) >> (8 - (v809 & 7) - v845)) & ~(-1 << v845) | (v842 << v845);
            v809 += v845;
            *v24 = v809;
            v843 -= v845;
          }
          while (v843);
        }
        v846 = v1221 + 344 * v1228;
        *(_DWORD *)(v846 + 292) = v1209;
        *(_BYTE *)(v846 + 274) = v842;
        if (*(_QWORD *)(*a3 + 1632) < (unint64_t)(v842 + v1209))
        {
          v30 = 5062;
          goto LABEL_165;
        }
        if (v842)
        {
          v847 = 0;
          v848 = (int *)(*(_QWORD *)(*a3 + 1616) + 8 * v1209);
          do
          {
            if (v809 + v1256 > v803)
            {
              v30 = 5066;
              goto LABEL_165;
            }
            if ((_DWORD)v1256)
            {
              v850 = 0;
              v851 = *v1289;
              v852 = v1256;
              do
              {
                v853 = 8 - (v809 & 7);
                if (v852 < v853)
                  v853 = v852;
                v850 = (*(unsigned __int8 *)(v851 + (v809 >> 3)) >> (8 - (v809 & 7) - v853)) & ~(-1 << v853) | (v850 << v853);
                v809 += v853;
                *v24 = v809;
                v852 -= v853;
              }
              while (v852);
            }
            else
            {
              v850 = 0;
            }
            *v848 = v850;
            if (v809 + v1255 > v803)
            {
              v30 = 5067;
              goto LABEL_165;
            }
            if ((_DWORD)v1255)
            {
              v849 = 0;
              v854 = *v1289;
              v855 = v1255;
              do
              {
                v856 = 8 - (v809 & 7);
                if (v855 < v856)
                  v856 = v855;
                v849 = (*(unsigned __int8 *)(v854 + (v809 >> 3)) >> (8 - (v809 & 7) - v856)) & ~(-1 << v856) | (v849 << v856);
                v809 += v856;
                *v24 = v809;
                v855 -= v856;
              }
              while (v855);
            }
            else
            {
              v849 = 0;
            }
            v848[1] = v849;
            ++v847;
            v848 += 2;
          }
          while (v847 != v842);
          v1209 += v842;
        }
        v802 = v809 + 1;
        if (v809 + 1 > v803)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 5071;
          goto LABEL_22;
        }
        v857 = *v1289;
        v858 = *(unsigned __int8 *)(*v1289 + (v809 >> 3));
        *v24 = v802;
        if (((v858 >> (~(_BYTE)v809 & 7)) & 1) != 0)
        {
          if (v802 + v1247 > v803)
          {
            v29 = (FILE *)*MEMORY[0x1E0C80C10];
            v30 = 5074;
            goto LABEL_22;
          }
          v859 = v1247;
          if ((_DWORD)v1247)
          {
            v859 = 0;
            v860 = v1247;
            do
            {
              v861 = 8 - (v802 & 7);
              if (v860 < v861)
                v861 = v860;
              v859 = (*(unsigned __int8 *)(v857 + (v802 >> 3)) >> (8 - (v802 & 7) - v861)) & ~(-1 << v861) | (v859 << v861);
              v802 += v861;
              *v24 = v802;
              v860 -= v861;
            }
            while (v860);
          }
          if (v802 + v1285 > v803)
          {
            v29 = (FILE *)*MEMORY[0x1E0C80C10];
            v30 = 5077;
            goto LABEL_22;
          }
          LOBYTE(v862) = v1285;
          if ((_DWORD)v1285)
          {
            v862 = 0;
            v863 = v1285;
            do
            {
              v864 = 8 - (v802 & 7);
              if (v863 < v864)
                v864 = v863;
              v862 = (*(unsigned __int8 *)(v857 + (v802 >> 3)) >> (8 - (v802 & 7) - v864)) & ~(-1 << v864) | (v862 << v864);
              v802 += v864;
              *v24 = v802;
              v863 -= v864;
            }
            while (v863);
          }
          *(_DWORD *)(v1221 + 344 * v1228 + 296) = v859;
        }
        else
        {
          *(_DWORD *)(v1221 + 344 * v1228 + 296) = -1;
          LOBYTE(v862) = -1;
        }
        v1237 += 3;
        *(_BYTE *)(v1221 + 344 * v1228++ + 275) = v862;
      }
      while (v1228 != v42);
    }
    else
    {
      v1209 = 0;
    }
    if (*(_QWORD *)(*a3 + 1632) != v1209)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5087;
      goto LABEL_22;
    }
    v727 = *(_QWORD *)(v9 + 24);
    v728 = 8 * *(_QWORD *)(v9 + 16);
  }
  v865 = v727 + 1;
  if (v727 + 1 > v728)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5094;
    goto LABEL_22;
  }
  v866 = *v1289;
  v867 = *(unsigned __int8 *)(*v1289 + (v727 >> 3));
  *v24 = v865;
  if (((v867 >> (~(_BYTE)v727 & 7)) & 1) != 0)
  {
    if (v727 + 6 > v728)
      goto LABEL_1333;
    v868 = 0;
    v869 = 5;
    do
    {
      v870 = 8 - (v865 & 7);
      if (v869 < v870)
        v870 = v869;
      v868 = (*(unsigned __int8 *)(v866 + (v865 >> 3)) >> (8 - (v865 & 7) - v870)) & ~(-1 << v870) | (v868 << v870);
      v865 += v870;
      *v24 = v865;
      v869 -= v870;
    }
    while (v869);
    v871 = (v868 + 1);
    if (v865 + v871 > v728)
    {
LABEL_1333:
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5098;
      goto LABEL_22;
    }
    LODWORD(v872) = 0;
    if (v868 != -1)
    {
      do
      {
        v873 = 8 - (v865 & 7);
        if (v871 < v873)
          v873 = v871;
        v872 = (*(unsigned __int8 *)(v866 + (v865 >> 3)) >> (8 - (v865 & 7) - v873)) & ~(-1 << v873) | ((_DWORD)v872 << v873);
        v865 += v873;
        *v24 = v865;
        v871 -= v873;
      }
      while (v871);
      if ((_DWORD)v872)
      {
        {
          v1174 = operator new();
          *(_QWORD *)(v1174 + 16) = 0x99AFC36000000008;
          *(_QWORD *)(v1174 + 24) = "GeoCodec";
          *(_OWORD *)(v1174 + 32) = xmmword_189CFDB80;
          *(_QWORD *)v1174 = &off_1E1BF6690;
          *(_QWORD *)(v1174 + 8) = "GeoCodec";
          *(_OWORD *)(v1174 + 56) = 0u;
          *(_OWORD *)(v1174 + 72) = 0u;
          *(_OWORD *)(v1174 + 88) = 0u;
          *(_OWORD *)(v1174 + 104) = 0u;
          *(_OWORD *)(v1174 + 120) = 0u;
          *(_OWORD *)(v1174 + 136) = 0u;
          *(_OWORD *)(v1174 + 152) = 0u;
          *(_OWORD *)(v1174 + 168) = 0u;
          *(_OWORD *)(v1174 + 184) = 0u;
          *(_OWORD *)(v1174 + 200) = 0u;
          *(_OWORD *)(v1174 + 216) = 0u;
          *(_OWORD *)(v1174 + 232) = 0u;
          *(_QWORD *)(v1174 + 248) = 0;
          v1175 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1174 + 56), 0);
          if ((_DWORD)v1175)
            geo::read_write_lock::logFailure(v1175, (uint64_t)"initialization", v1176);
          v1177 = malloc_create_zone(0, 0);
          *(_QWORD *)(v1174 + 48) = v1177;
          malloc_set_zone_name(v1177, "GeoCodec");
          *(_QWORD *)(v1174 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          geo::codec::Allocator::instance(void)::alloc = v1174;
        }
        v875 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                    + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * v872, 8);
        v876 = *a3;
        *(_QWORD *)(*a3 + 1640) = v875;
        if (!v875)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 5102;
          goto LABEL_22;
        }
        *(_QWORD *)(v876 + 1648) = v872;
      }
    }
    v877 = *a3;
    v878 = *(_QWORD *)(*a3 + 1352);
    v879 = *(_QWORD *)(*a3 + 1344);
    v880 = v878 - v879;
    if (v878 == v879)
    {
      v882 = 0;
    }
    else
    {
      v881 = 0;
      v882 = 0;
      v883 = v880 / 184;
      if (v883 <= 1)
        v883 = 1;
      do
      {
        v885 = *(_QWORD *)(v9 + 24);
        v886 = v885 + 1;
        v887 = 8 * *(_QWORD *)(v9 + 16);
        if (v885 + 1 > v887)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 5109;
          goto LABEL_22;
        }
        v888 = *v1289;
        v889 = *(unsigned __int8 *)(*v1289 + (v885 >> 3));
        *v24 = v886;
        if (((v889 >> (~(_BYTE)v885 & 7)) & 1) != 0)
        {
          if (v886 + v1253 > v887)
          {
            v29 = (FILE *)*MEMORY[0x1E0C80C10];
            v30 = 5112;
            goto LABEL_22;
          }
          if ((_DWORD)v1253)
          {
            LODWORD(v890) = 0;
            v891 = v1253;
            do
            {
              v892 = 8 - (v886 & 7);
              if (v891 < v892)
                v892 = v891;
              v890 = (*(unsigned __int8 *)(v888 + (v886 >> 3)) >> (8 - (v886 & 7) - v892)) & ~(-1 << v892) | ((_DWORD)v890 << v892);
              v886 += v892;
              *v24 = v886;
              v891 -= v892;
            }
            while (v891);
            v893 = v879 + 184 * v881;
            *(_QWORD *)(v893 + 88) = v882;
            *(_QWORD *)(v893 + 96) = v890;
            if ((_DWORD)v890)
            {
              v894 = v890 + v882;
              do
              {
                v895 = *(_QWORD *)(v9 + 24);
                if (v895 + v1253 > 8 * *(_QWORD *)(v9 + 16))
                {
                  v29 = (FILE *)*MEMORY[0x1E0C80C10];
                  v30 = 5119;
                  goto LABEL_22;
                }
                LODWORD(v896) = 0;
                v897 = v1253;
                do
                {
                  v898 = 8 - (v895 & 7);
                  if (v897 < v898)
                    v898 = v897;
                  v896 = (*(unsigned __int8 *)(v888 + (v895 >> 3)) >> (8 - (v895 & 7) - v898)) & ~(-1 << v898) | ((_DWORD)v896 << v898);
                  v895 += v898;
                  *v24 = v895;
                  v897 -= v898;
                }
                while (v897);
                *(_QWORD *)(*(_QWORD *)(v877 + 1640) + 8 * v882++) = v896;
              }
              while (v882 != v894);
              v882 = v894;
            }
          }
          else
          {
            v884 = v879 + 184 * v881;
            *(_QWORD *)(v884 + 88) = v882;
            *(_QWORD *)(v884 + 96) = 0;
          }
        }
        ++v881;
      }
      while (v881 != v883);
    }
    if (v882 != (_DWORD)v872)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5124;
      goto LABEL_22;
    }
  }
  v899 = 0x82FA0BE82FA0BE83 * ((uint64_t)(*(_QWORD *)(*a3 + 1416) - *(_QWORD *)(*a3 + 1408)) >> 3);
  v1303[0] = &off_1E1BFA6A8;
  v1303[1] = a3;
  v1304 = v1303;
  v900 = geo::codec::decodeZoomRanks(v1289, v899, (uint64_t)v1303);
  v901 = v1304;
  if (v1304 == v1303)
  {
    v902 = 4;
    v901 = v1303;
LABEL_1372:
    (*(void (**)(void))(*v901 + 8 * v902))();
  }
  else if (v1304)
  {
    v902 = 5;
    goto LABEL_1372;
  }
  if ((v900 & 1) == 0)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5132;
    goto LABEL_22;
  }
  v903 = *(_QWORD *)(v9 + 16);
  v904 = *(_QWORD *)(v9 + 24);
  v905 = v904 + 1;
  v906 = 8 * v903;
  if (v904 + 1 > 8 * v903)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5138;
    goto LABEL_22;
  }
  v907 = *(unsigned __int8 *)(*v1289 + (v904 >> 3));
  *v24 = v905;
  if (((v907 >> (~(_BYTE)v904 & 7)) & 1) != 0)
  {
    v908 = *a3;
    if (*(_QWORD *)(*a3 + 1392))
    {
      {
        v1180 = operator new();
        geo::MallocZoneAllocator::MallocZoneAllocator(v1180, "GeoCodec", 0x99AFC36000000008, 0, 0);
        geo::codec::Allocator::instance(void)::alloc = v1180;
      }
      v910 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                 + 24))(geo::codec::Allocator::instance(void)::alloc, 1, *(_QWORD *)(*a3 + 1392));
      v908 = *a3;
      *(_QWORD *)(*a3 + 1656) = v910;
      if (!v910)
      {
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 5142;
        goto LABEL_22;
      }
      v903 = *(_QWORD *)(v9 + 16);
      v905 = *(_QWORD *)(v9 + 24);
    }
    v911 = *(_QWORD *)(v908 + 1352);
    v912 = *(_QWORD *)(v908 + 1344);
    v906 = 8 * v903;
    if (v911 != v912)
    {
      v913 = 0;
      v914 = (_QWORD *)*a3;
      do
      {
        v915 = v905 + 1;
        if (v905 + 1 > v906)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 5146;
          goto LABEL_22;
        }
        v916 = *v1289;
        v917 = *(unsigned __int8 *)(*v1289 + (v905 >> 3));
        *v24 = v915;
        v918 = v914[168];
        if (((v917 >> (~(_BYTE)v905 & 7)) & 1) != 0 && (v919 = v918 + 184 * v913, (v920 = *(_QWORD *)(v919 + 32)) != 0))
        {
          v921 = 0;
          v922 = (_QWORD *)(v919 + 24);
          v923 = (v906 - v905) >> 1;
          do
          {
            if (v923 == v921)
            {
              v30 = 5151;
              goto LABEL_165;
            }
            v924 = *(unsigned __int8 *)(v916 + (v915 >> 3));
            *v24 = v915 + 1;
            v905 = v915 + 2;
            if (v915 + 2 > v906)
            {
              v30 = 5152;
              goto LABEL_165;
            }
            v925 = (1 << (~(_BYTE)v915 & 7)) & v924;
            v926 = (1 << (~(v915 + 1) & 7)) & *(unsigned __int8 *)(v916 + ((v915 + 1) >> 3));
            *v24 = v905;
            if (!(v925 | v926))
            {
              v30 = 5153;
              goto LABEL_165;
            }
            v927 = v926 == 0;
            if (!v925)
              v927 = 2;
            *(_BYTE *)(v914[207] + *v922 + v921++) = v927;
            v915 = v905;
          }
          while (v920 != v921);
        }
        else
        {
          ++v905;
        }
        ++v913;
      }
      while (v913 < 0xD37A6F4DE9BD37A7 * ((v914[169] - v918) >> 3));
    }
  }
  if (v905 + 1 > v906)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5185;
    goto LABEL_22;
  }
  v928 = *(unsigned __int8 *)(*v1289 + (v905 >> 3));
  *v24 = v905 + 1;
  if (((v928 >> (~(_BYTE)v905 & 7)) & 1) != 0)
  {
    {
      v1181 = operator new();
      geo::MallocZoneAllocator::MallocZoneAllocator(v1181, "GeoCodec", 0x99AFC36000000008, 0, 0);
      geo::codec::Allocator::instance(void)::alloc = v1181;
    }
    v930 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                               + 24))(geo::codec::Allocator::instance(void)::alloc, v1250, 8);
    v931 = *a3;
    *(_QWORD *)(v931 + 1696) = v930;
    *(_QWORD *)(v931 + 1704) = v1250;
    if (!v930)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5189;
      goto LABEL_22;
    }
    if (v1250)
    {
      if (v1250 == 1)
      {
        v932 = 0;
        goto LABEL_1417;
      }
      v932 = v1250 & 0xFFFFFFFE;
      v933 = (_DWORD *)(v930 + 12);
      v934 = v932;
      do
      {
        *(v933 - 2) = 1065353216;
        *v933 = 1065353216;
        v933 += 4;
        v934 -= 2;
      }
      while (v934);
      if (v932 != v1250)
      {
LABEL_1417:
        v935 = v1250 - v932;
        v936 = (_DWORD *)(v930 + 8 * v932 + 4);
        do
        {
          *v936 = 1065353216;
          v936 += 2;
          --v935;
        }
        while (v935);
      }
    }
    v937 = *(_QWORD *)(v9 + 24);
    if (v937 + 5 > 8 * *(_QWORD *)(v9 + 16))
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5195;
      goto LABEL_22;
    }
    v938 = 0;
    v939 = *v1289;
    v940 = 5;
    do
    {
      v941 = 8 - (v937 & 7);
      if (v940 < v941)
        v941 = v940;
      v938 = (*(unsigned __int8 *)(v939 + (v937 >> 3)) >> (8 - (v937 & 7) - v941)) & ~(-1 << v941) | (v938 << v941);
      v937 += v941;
      *v24 = v937;
      v940 -= v941;
    }
    while (v940);
    v942 = (v938 + 1);
    v943 = __exp10f(floorf((float)v942 * 0.30103));
    v944 = *a3;
    v945 = *(_QWORD *)(*a3 + 1352);
    v946 = *(_QWORD *)(*a3 + 1344);
    v947 = v945 - v946;
    if (v945 != v946)
    {
      v948 = 0;
      v949 = v947 / 184;
      v950 = *(_QWORD *)(v9 + 24);
      v951 = 8 * *(_QWORD *)(v9 + 16);
      if (v949 <= 1)
        v949 = 1;
      v952 = 1.0 / v943;
      do
      {
        v953 = v950 + 1;
        if (v950 + 1 > v951)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 5202;
          goto LABEL_22;
        }
        v954 = *v1289;
        v955 = *(unsigned __int8 *)(*v1289 + (v950 >> 3));
        *v24 = v953;
        if (((v955 >> (~(_BYTE)v950 & 7)) & 1) != 0)
        {
          v956 = v946 + 184 * v948;
          v958 = *(unsigned int *)(v956 + 16);
          v957 = *(_DWORD *)(v956 + 20);
          if (v957 + (int)v958 > v1250)
          {
            v29 = (FILE *)*MEMORY[0x1E0C80C10];
            v30 = 5205;
            goto LABEL_22;
          }
          if (v957)
          {
            v959 = 0;
            v960 = (float *)(*(_QWORD *)(v944 + 1696) + 8 * v958);
            do
            {
              v961 = v953 + 1;
              if (v953 + 1 > v951)
              {
                v29 = (FILE *)*MEMORY[0x1E0C80C10];
                v30 = 5209;
                goto LABEL_22;
              }
              v962 = *(unsigned __int8 *)(v954 + (v953 >> 3));
              *v24 = v961;
              if (((v962 >> (~(_BYTE)v953 & 7)) & 1) != 0)
              {
                if (v961 + v942 > v951)
                {
                  v29 = (FILE *)*MEMORY[0x1E0C80C10];
                  v30 = 5212;
                  goto LABEL_22;
                }
                v963 = 0;
                if ((_DWORD)v942)
                {
                  v964 = v942;
                  do
                  {
                    v965 = 8 - (v961 & 7);
                    if (v964 < v965)
                      v965 = v964;
                    v963 = (*(unsigned __int8 *)(v954 + (v961 >> 3)) >> (8 - (v961 & 7) - v965)) & ~(-1 << v965) | (v963 << v965);
                    v961 += v965;
                    *v24 = v961;
                    v964 -= v965;
                  }
                  while (v964);
                }
                *v960 = v952 * (float)v963;
              }
              v953 = v961 + 1;
              if (v961 + 1 > v951)
              {
                v29 = (FILE *)*MEMORY[0x1E0C80C10];
                v30 = 5216;
                goto LABEL_22;
              }
              v966 = *(unsigned __int8 *)(v954 + (v961 >> 3));
              *v24 = v953;
              if (((v966 >> (~(_BYTE)v961 & 7)) & 1) != 0)
              {
                if (v953 + v942 > v951)
                {
                  v29 = (FILE *)*MEMORY[0x1E0C80C10];
                  v30 = 5219;
                  goto LABEL_22;
                }
                v967 = 0;
                if ((_DWORD)v942)
                {
                  v968 = v942;
                  do
                  {
                    v969 = 8 - (v953 & 7);
                    if (v968 < v969)
                      v969 = v968;
                    v967 = (*(unsigned __int8 *)(v954 + (v953 >> 3)) >> (8 - (v953 & 7) - v969)) & ~(-1 << v969) | (v967 << v969);
                    v953 += v969;
                    *v24 = v953;
                    v968 -= v969;
                  }
                  while (v968);
                }
                v960[1] = v952 * (float)v967;
              }
              ++v959;
              v960 += 2;
            }
            while (v959 != v957);
          }
        }
        ++v948;
        v950 = v953;
      }
      while (v948 != v949);
    }
  }
  if ((geo::codec::_decodeTransitLabelsFromStream(v1289, 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(*a3 + 1568) - *(_QWORD *)(*a3 + 1560)) >> 3), *(_QWORD *)(*a3 + 1560), 248, a3) & 1) == 0)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5230;
    goto LABEL_22;
  }
  v970 = *(unsigned __int8 **)(*a3 + 1400);
  if (v970)
    LODWORD(v970) = *v970;
  if ((geo::codec::_decodeLabelTextPlacementsFromStream(v1289, 0x82FA0BE82FA0BE83 * ((uint64_t)(*(_QWORD *)(*a3 + 1416) - *(_QWORD *)(*a3 + 1408)) >> 3), *(_QWORD *)(*a3 + 1408), 344, v970, a3) & 1) == 0)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5236;
    goto LABEL_22;
  }
  v971 = geo::codec::_decodeLabelTextPlacementsFromStream(v1289, 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(*a3 + 1568) - *(_QWORD *)(*a3 + 1560)) >> 3), *(_QWORD *)(*a3 + 1560), 248, v1265, a3);
  if ((v971 & 1) == 0)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5241;
    goto LABEL_22;
  }
  if (*(_DWORD *)(v9 + 64) >= 0x1Fu)
  {
    v972 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(*a3 + 1472) - *(_QWORD *)(*a3 + 1464)) >> 3);
    v1301[0] = &off_1E1BFA700;
    v1301[1] = a3;
    v1302 = v1301;
    geo::codec::decodeZoomRanks(v1289, v972, (uint64_t)v1301);
    v973 = v1302;
    if (v1302 == v1301)
    {
      v974 = 4;
      v973 = v1301;
LABEL_1486:
      (*(void (**)(void))(*v973 + 8 * v974))();
    }
    else if (v1302)
    {
      v974 = 5;
      goto LABEL_1486;
    }
    v977 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(*a3 + 1472) - *(_QWORD *)(*a3 + 1464)) >> 3);
    v1299[0] = &off_1E1BFA758;
    v1299[1] = a3;
    v1300 = v1299;
    geo::codec::decodeZoomRanks(v1289, v977, (uint64_t)v1299);
    v971 = (unint64_t)v1300;
    if (v1300 == v1299)
    {
      v978 = 4;
      v971 = (unint64_t)v1299;
LABEL_1491:
      v971 = (*(uint64_t (**)(void))(*(_QWORD *)v971 + 8 * v978))();
    }
    else if (v1300)
    {
      v978 = 5;
      goto LABEL_1491;
    }
    if (*(_DWORD *)(v9 + 64) >= 0x20u)
    {
      v979 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(*a3 + 1568) - *(_QWORD *)(*a3 + 1560)) >> 3);
      v1297[0] = &off_1E1BFA7B0;
      v1297[1] = a3;
      v1298 = v1297;
      geo::codec::decodeZoomRanks(v1289, v979, (uint64_t)v1297);
      v980 = v1298;
      if (v1298 == v1297)
      {
        v981 = 4;
        v980 = v1297;
LABEL_1509:
        (*(void (**)(void))(*v980 + 8 * v981))();
      }
      else if (v1298)
      {
        v981 = 5;
        goto LABEL_1509;
      }
      v986 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(*a3 + 1568) - *(_QWORD *)(*a3 + 1560)) >> 3);
      v1295[0] = &off_1E1BFA808;
      v1295[1] = a3;
      v1296 = v1295;
      geo::codec::decodeZoomRanks(v1289, v986, (uint64_t)v1295);
      v971 = (unint64_t)v1296;
      if (v1296 == v1295)
      {
        v987 = 4;
        v971 = (unint64_t)v1295;
LABEL_1514:
        v971 = (*(uint64_t (**)(void))(*(_QWORD *)v971 + 8 * v987))();
      }
      else if (v1296)
      {
        v987 = 5;
        goto LABEL_1514;
      }
    }
  }
  v988 = *(_QWORD *)(v9 + 24);
  v989 = v988 + 1;
  v990 = 8 * *(_QWORD *)(v9 + 16);
  if (v988 + 1 > v990)
  {
    v30 = 5264;
    goto LABEL_165;
  }
  v991 = *v1289;
  v992 = *(unsigned __int8 *)(*v1289 + (v988 >> 3));
  *v24 = v989;
  if (((v992 >> (~(_BYTE)v988 & 7)) & 1) == 0
    || (v993 = *(_QWORD *)(*a3 + 1416), v994 = *(_QWORD *)(*a3 + 1408), v993 == v994))
  {
    v997 = v988 + 1;
  }
  else
  {
    v995 = (v993 - v994) / 344;
    if (v995 <= 1)
      v995 = 1;
    v996 = (_BYTE *)(v994 + 320);
    do
    {
      v997 = v989 + 1;
      if (v989 + 1 > v990)
      {
        v30 = 5267;
        goto LABEL_165;
      }
      v998 = *(unsigned __int8 *)(v991 + (v989 >> 3));
      *v24 = v997;
      *v996 = (v998 >> (~(_BYTE)v989 & 7)) & 1;
      v996 += 344;
      ++v989;
      --v995;
    }
    while (v995);
  }
  v999 = v997 + 1;
  if (v997 + 1 > v990)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5275;
    goto LABEL_22;
  }
  v1000 = *(unsigned __int8 *)(v991 + (v997 >> 3));
  *v24 = v999;
  if (((v1000 >> (~(_BYTE)v997 & 7)) & 1) != 0)
  {
    if (v997 + 6 > v990)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5278;
      goto LABEL_22;
    }
    v1001 = 0;
    v1002 = 5;
    do
    {
      v1003 = 8 - (v999 & 7);
      if (v1002 < v1003)
        v1003 = v1002;
      v1001 = (*(unsigned __int8 *)(v991 + (v999 >> 3)) >> (8 - (v999 & 7) - v1003)) & ~(-1 << v1003) | (v1001 << v1003);
      v999 += v1003;
      *v24 = v999;
      v1002 -= v1003;
    }
    while (v1002);
    if (v999 + 5 > v990)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5281;
      goto LABEL_22;
    }
    v1008 = 0;
    v1286 = (v1001 + 1);
    v1009 = 5;
    do
    {
      v1010 = 8 - (v999 & 7);
      if (v1009 < v1010)
        v1010 = v1009;
      v1008 = (*(unsigned __int8 *)(v991 + (v999 >> 3)) >> (8 - (v999 & 7) - v1010)) & ~(-1 << v1010) | (v1008 << v1010);
      v999 += v1010;
      *v24 = v999;
      v1009 -= v1010;
    }
    while (v1009);
    if (v999 + 5 > v990)
      goto LABEL_1555;
    v1011 = 0;
    v1254 = (v1008 + 1);
    v1012 = 5;
    do
    {
      v1013 = 8 - (v999 & 7);
      if (v1012 < v1013)
        v1013 = v1012;
      v1011 = (*(unsigned __int8 *)(v991 + (v999 >> 3)) >> (8 - (v999 & 7) - v1013)) & ~(-1 << v1013) | (v1011 << v1013);
      v999 += v1013;
      *v24 = v999;
      v1012 -= v1013;
    }
    while (v1012);
    v1014 = (v1011 + 1);
    if (v999 + v1014 > v990)
    {
LABEL_1555:
      v30 = 5284;
      goto LABEL_165;
    }
    if (v1011 == -1)
      goto LABEL_1566;
    LODWORD(v1015) = 0;
    do
    {
      v1016 = 8 - (v999 & 7);
      if (v1014 < v1016)
        v1016 = v1014;
      v1015 = (*(unsigned __int8 *)(v991 + (v999 >> 3)) >> (8 - (v999 & 7) - v1016)) & ~(-1 << v1016) | ((_DWORD)v1015 << v1016);
      v999 += v1016;
      *v24 = v999;
      v1014 -= v1016;
    }
    while (v1014);
    if (!(_DWORD)v1015)
    {
LABEL_1566:
      v30 = 5285;
      goto LABEL_165;
    }
    v1017 = *a3;
    v1238 = *(_QWORD *)(*a3 + 856);
    v1018 = *(_QWORD *)(*a3 + 864);
    v1267 = *(_QWORD *)(*a3 + 1072);
    *(_QWORD *)(v1017 + 1072) = v1267 + v1015;
    v1019 = *(_QWORD *)(v1017 + 1064);
    {
      v1195 = operator new();
      geo::MallocZoneAllocator::MallocZoneAllocator(v1195, "GeoCodec", 0x99AFC36000000008, 0, 0);
      geo::codec::Allocator::instance(void)::alloc = v1195;
    }
    v1020 = *a3;
    if (v1019)
    {
      v1021 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                  + 32))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v1020 + 1064), 32 * *(_QWORD *)(v1020 + 1072));
      if (v1021)
      {
        *(_QWORD *)(*a3 + 1064) = v1021;
        bzero((void *)(v1021 + 32 * v1267), 32 * v1015);
        v971 = *(_QWORD *)(*a3 + 1064);
        goto LABEL_1572;
      }
      {
        v1196 = operator new();
        geo::MallocZoneAllocator::MallocZoneAllocator(v1196, "GeoCodec", 0x99AFC36000000008, 0, 0);
        geo::codec::Allocator::instance(void)::alloc = v1196;
      }
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(*a3 + 1064), 0);
      *(_QWORD *)(*a3 + 1064) = 0;
LABEL_1646:
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5290;
      goto LABEL_22;
    }
    v971 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                               + 24))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v1020 + 1072), 32);
    *(_QWORD *)(*a3 + 1064) = v971;
LABEL_1572:
    if (!v971)
      goto LABEL_1646;
    v1026 = *a3;
    v1027 = *(_QWORD *)(*a3 + 1560);
    if (*(_QWORD *)(*a3 + 1568) != v1027)
    {
      v1252 = 0;
      do
      {
        v1029 = *(_QWORD *)(v9 + 24);
        v1030 = v1029 + 1;
        v1031 = 8 * *(_QWORD *)(v9 + 16);
        if (v1029 + 1 > v1031)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 5294;
          goto LABEL_22;
        }
        v1032 = *v1289;
        v1033 = *(unsigned __int8 *)(*v1289 + (v1029 >> 3));
        *v24 = v1030;
        if (((v1033 >> (~(_BYTE)v1029 & 7)) & 1) != 0)
        {
          if (v1030 + v1286 > v1031)
          {
            v30 = 5297;
            goto LABEL_165;
          }
          if ((_DWORD)v1286)
          {
            v1034 = 0;
            v1035 = v1286;
            do
            {
              v1036 = 8 - (v1030 & 7);
              if (v1035 < v1036)
                v1036 = v1035;
              v1034 = (*(unsigned __int8 *)(v1032 + (v1030 >> 3)) >> (8 - (v1030 & 7) - v1036)) & ~(-1 << v1036) | (v1034 << v1036);
              v1030 += v1036;
              *v24 = v1030;
              v1035 -= v1036;
            }
            while (v1035);
          }
          else
          {
            v1034 = 0;
          }
          v1037 = (_QWORD *)*a3;
          if (v1267 >= *(_QWORD *)(*a3 + 1072))
          {
            v30 = 5298;
            goto LABEL_165;
          }
          *(_BYTE *)(v1027 + 72) = 1;
          *(_DWORD *)(v1027 + 60) = v1267;
          v1038 = v1034;
          v1039 = v1037[133];
          *(_QWORD *)(v1039 + 32 * v1267 + 24) = v1038;
          v1040 = v1030 + 1;
          if (v1030 + 1 > v1031)
          {
            v29 = (FILE *)*MEMORY[0x1E0C80C10];
            v30 = 5305;
            goto LABEL_22;
          }
          v1041 = *(unsigned __int8 *)(v1032 + (v1030 >> 3));
          *v24 = v1040;
          if (((v1041 >> (~(_BYTE)v1030 & 7)) & 1) != 0)
          {
            if (v1040 + v1254 > v1031)
            {
              v30 = 5308;
              goto LABEL_165;
            }
            if ((_DWORD)v1254)
            {
              v1042 = 0;
              v1043 = v1254;
              do
              {
                v1044 = 8 - (v1040 & 7);
                if (v1043 < v1044)
                  v1044 = v1043;
                v1042 = (*(unsigned __int8 *)(v1032 + (v1040 >> 3)) >> (8 - (v1040 & 7) - v1044)) & ~(-1 << v1044) | (v1042 << v1044);
                v1040 += v1044;
                *v24 = v1040;
                v1043 -= v1044;
              }
              while (v1043);
            }
            else
            {
              v1042 = 0;
            }
            if (v1018 - v1238 <= (unint64_t)v1042)
            {
              v30 = 5309;
              goto LABEL_165;
            }
            *(_QWORD *)(v1039 + 32 * v1267) = v1238 + v1042;
            v1045 = (const void *)v1037[111];
            v1046 = v1037[112];
            __p.var6 = v1042;
            v971 = (unint64_t)bsearch(&__p.var6, v1045, v1046, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
            if (v971)
              v1028 = *(_QWORD *)(v971 + 16);
            else
              v1028 = 0;
            *(_QWORD *)(*(_QWORD *)(*a3 + 1064) + 32 * v1267 + 8) = v1028;
          }
          ++v1267;
        }
        v1027 += 248;
        v1026 = *a3;
        ++v1252;
      }
      while (v1252 < 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(*a3 + 1568) - *(_QWORD *)(*a3 + 1560)) >> 3));
    }
    if (v1267 != *(_QWORD *)(v1026 + 1072))
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5316;
      goto LABEL_22;
    }
    v999 = *(_QWORD *)(v9 + 24);
    v990 = 8 * *(_QWORD *)(v9 + 16);
  }
  v1047 = v999 + 1;
  if (v999 + 1 > v990)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5341;
    goto LABEL_22;
  }
  v1048 = *v1289;
  v1049 = *(unsigned __int8 *)(*v1289 + (v999 >> 3));
  *v24 = v1047;
  if (((v1049 >> (~(_BYTE)v999 & 7)) & 1) != 0)
  {
    if (v999 + 7 > v990)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5344;
      goto LABEL_22;
    }
    v1050 = 0;
    v1051 = 6;
    do
    {
      v1052 = 8 - (v1047 & 7);
      if (v1051 < v1052)
        v1052 = v1051;
      v1050 = (*(unsigned __int8 *)(v1048 + (v1047 >> 3)) >> (8 - (v1047 & 7) - v1052)) & ~(-1 << v1052) | (v1050 << v1052);
      v1047 += v1052;
      *v24 = v1047;
      v1051 -= v1052;
    }
    while (v1051);
    if (v1047 + 5 > v990)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5347;
      goto LABEL_22;
    }
    v1053 = 0;
    v1054 = (v1050 + 1);
    v1055 = 5;
    do
    {
      v1056 = 8 - (v1047 & 7);
      if (v1055 < v1056)
        v1056 = v1055;
      v1053 = (*(unsigned __int8 *)(v1048 + (v1047 >> 3)) >> (8 - (v1047 & 7) - v1056)) & ~(-1 << v1056) | (v1053 << v1056);
      v1047 += v1056;
      *v24 = v1047;
      v1055 -= v1056;
    }
    while (v1055);
    if (v1047 + 6 > v990)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5350;
      goto LABEL_22;
    }
    v1057 = 0;
    v1287 = (v1053 + 1);
    v1058 = 6;
    do
    {
      v1059 = 8 - (v1047 & 7);
      if (v1058 < v1059)
        v1059 = v1058;
      v1057 = (*(unsigned __int8 *)(v1048 + (v1047 >> 3)) >> (8 - (v1047 & 7) - v1059)) & ~(-1 << v1059) | (v1057 << v1059);
      v1047 += v1059;
      *v24 = v1047;
      v1058 -= v1059;
    }
    while (v1058);
    if (v1047 + 5 > v990)
      goto LABEL_1632;
    v1060 = 0;
    v1268 = (v1057 + 1);
    v1061 = 5;
    do
    {
      v1062 = 8 - (v1047 & 7);
      if (v1061 < v1062)
        v1062 = v1061;
      v1060 = (*(unsigned __int8 *)(v1048 + (v1047 >> 3)) >> (8 - (v1047 & 7) - v1062)) & ~(-1 << v1062) | (v1060 << v1062);
      v1047 += v1062;
      *v24 = v1047;
      v1061 -= v1062;
    }
    while (v1061);
    v1063 = (v1060 + 1);
    if (v1047 + v1063 > v990)
    {
LABEL_1632:
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5353;
      goto LABEL_22;
    }
    v1064 = 0;
    if (v1060 != -1)
    {
      do
      {
        v1065 = 8 - (v1047 & 7);
        if (v1063 < v1065)
          v1065 = v1063;
        v1064 = (*(unsigned __int8 *)(v1048 + (v1047 >> 3)) >> (8 - (v1047 & 7) - v1065)) & ~(-1 << v1065) | (v1064 << v1065);
        v1047 += v1065;
        *v24 = v1047;
        v1063 -= v1065;
      }
      while (v1063);
    }
    if (v1047 + 5 > v990)
      goto LABEL_1643;
    v1066 = 0;
    v1067 = 5;
    do
    {
      v1068 = 8 - (v1047 & 7);
      if (v1067 < v1068)
        v1068 = v1067;
      v1066 = (*(unsigned __int8 *)(v1048 + (v1047 >> 3)) >> (8 - (v1047 & 7) - v1068)) & ~(-1 << v1068) | (v1066 << v1068);
      v1047 += v1068;
      *v24 = v1047;
      v1067 -= v1068;
    }
    while (v1067);
    v1069 = (v1066 + 1);
    if (v1047 + v1069 > v990)
    {
LABEL_1643:
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5356;
      goto LABEL_22;
    }
    v1071 = 0;
    if (v1066 != -1)
    {
      do
      {
        v1072 = 8 - (v1047 & 7);
        if (v1069 < v1072)
          v1072 = v1069;
        v1071 = (*(unsigned __int8 *)(v1048 + (v1047 >> 3)) >> (8 - (v1047 & 7) - v1072)) & ~(-1 << v1072) | (v1071 << v1072);
        v1047 += v1072;
        *v24 = v1047;
        v1069 -= v1072;
      }
      while (v1069);
    }
    {
      v1197 = operator new();
      geo::MallocZoneAllocator::MallocZoneAllocator(v1197, "GeoCodec", 0x99AFC36000000008, 0, 0);
      geo::codec::Allocator::instance(void)::alloc = v1197;
    }
    v971 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * v1071, 8);
    v1074 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 1752) = v971;
    if (!v971)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5359;
      goto LABEL_22;
    }
    v1074[220] = v1071;
    v1047 = *(_QWORD *)(v9 + 24);
    v990 = 8 * *(_QWORD *)(v9 + 16);
    if (v1064)
    {
      v1075 = 0;
      v1076 = 0;
      do
      {
        if (v1047 + v1287 > v990)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 5366;
          goto LABEL_22;
        }
        if ((_DWORD)v1287)
        {
          v1077 = 0;
          v1078 = v1287;
          v1079 = *v1289;
          do
          {
            v1080 = 8 - (v1047 & 7);
            if (v1078 < v1080)
              v1080 = v1078;
            v1077 = (*(unsigned __int8 *)(v1079 + (v1047 >> 3)) >> (8 - (v1047 & 7) - v1080)) & ~(-1 << v1080) | (v1077 << v1080);
            v1047 += v1080;
            *v24 = v1047;
            v1078 -= v1080;
          }
          while (v1078);
        }
        else
        {
          v1077 = 0;
        }
        if (v1047 + v1268 > v990)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 5368;
          goto LABEL_22;
        }
        if ((_DWORD)v1268)
        {
          v1081 = 0;
          v1082 = *v1289;
          v1083 = v1268;
          do
          {
            v1084 = 8 - (v1047 & 7);
            if (v1083 < v1084)
              v1084 = v1083;
            v1081 = (*(unsigned __int8 *)(v1082 + (v1047 >> 3)) >> (8 - (v1047 & 7) - v1084)) & ~(-1 << v1084) | (v1081 << v1084);
            v1047 += v1084;
            *v24 = v1047;
            v1083 -= v1084;
          }
          while (v1083);
        }
        else
        {
          v1081 = 0;
        }
        v1085 = v1077;
        v1086 = v1074[176];
        v1087 = 0x82FA0BE82FA0BE83 * ((v1074[177] - v1086) >> 3);
        if (v1087 <= v1085)
        {
          v29 = (FILE *)*MEMORY[0x1E0C80C10];
          v30 = 5369;
          goto LABEL_22;
        }
        v1088 = v1086 + 344 * v1085;
        *(_QWORD *)(v1088 + 328) = v1076;
        *(_QWORD *)(v1088 + 336) = v1081;
        if (v1081)
        {
          v1089 = v1081 + v1076;
          do
          {
            v1090 = v1047 + 1;
            if (v1047 + 1 > v990)
            {
              v29 = (FILE *)*MEMORY[0x1E0C80C10];
              v30 = 5375;
              goto LABEL_22;
            }
            v1091 = *v1289;
            v1092 = *(unsigned __int8 *)(*v1289 + (v1047 >> 3));
            *v24 = v1090;
            if (((v1092 >> (~(_BYTE)v1047 & 7)) & 1) != 0)
            {
              if (v1090 + v1287 > v990)
              {
                v30 = 5378;
                goto LABEL_165;
              }
              if ((_DWORD)v1287)
              {
                v1093 = 0;
                v1094 = v1287;
                do
                {
                  v1095 = 8 - (v1090 & 7);
                  if (v1094 < v1095)
                    v1095 = v1094;
                  v1093 = (*(unsigned __int8 *)(v1091 + (v1090 >> 3)) >> (8 - (v1090 & 7) - v1095)) & ~(-1 << v1095) | (v1093 << v1095);
                  v1090 += v1095;
                  *v24 = v1090;
                  v1094 -= v1095;
                }
                while (v1094);
              }
              else
              {
                v1093 = 0;
              }
              if (v1087 <= v1093)
              {
                v30 = 5379;
                goto LABEL_165;
              }
              *(_QWORD *)(v971 + 8 * v1076) = *(_QWORD *)(v1086 + 344 * v1093 + 40);
            }
            else
            {
              if (v1090 + v1054 > v990)
              {
                v29 = (FILE *)*MEMORY[0x1E0C80C10];
                v30 = 5382;
                goto LABEL_22;
              }
              if ((_DWORD)v1054)
              {
                v1096 = 0;
                v1097 = v1054;
                do
                {
                  v1098 = 8 - (v1090 & 7);
                  if (v1097 < v1098)
                    v1098 = v1097;
                  v1096 = (*(unsigned __int8 *)(v1091 + (v1090 >> 3)) >> (8 - (v1090 & 7) - v1098)) & (unint64_t)~(-1 << v1098) | (v1096 << v1098);
                  v1090 += v1098;
                  *v24 = v1090;
                  v1097 -= v1098;
                }
                while (v1097);
                *(_QWORD *)(v971 + 8 * v1076) = v1096;
              }
              else
              {
                *(_QWORD *)(v971 + 8 * v1076) = 0;
              }
            }
            v1047 = v1090;
            ++v1076;
          }
          while (v1076 != v1089);
          v1076 = v1089;
        }
        ++v1075;
      }
      while (v1075 != v1064);
    }
  }
  v1099 = v1047 + 1;
  if (v1047 + 1 > v990)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5403;
    goto LABEL_22;
  }
  v1100 = *v1289;
  v1101 = *(unsigned __int8 *)(*v1289 + (v1047 >> 3));
  *v24 = v1099;
  if (((v1101 >> (~(_BYTE)v1047 & 7)) & 1) != 0)
  {
    if (v1047 + 6 > v990)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5406;
      goto LABEL_22;
    }
    v1102 = 0;
    v1103 = 5;
    do
    {
      v1104 = 8 - (v1099 & 7);
      if (v1103 < v1104)
        v1104 = v1103;
      v1102 = (*(unsigned __int8 *)(v1100 + (v1099 >> 3)) >> (8 - (v1099 & 7) - v1104)) & ~(-1 << v1104) | (v1102 << v1104);
      v1099 += v1104;
      *v24 = v1099;
      v1103 -= v1104;
    }
    while (v1103);
    if (v1099 + 5 > v990)
      goto LABEL_1714;
    v1105 = 0;
    v1106 = (v1102 + 1);
    v1107 = 5;
    do
    {
      v1108 = 8 - (v1099 & 7);
      if (v1107 < v1108)
        v1108 = v1107;
      v1105 = (*(unsigned __int8 *)(v1100 + (v1099 >> 3)) >> (8 - (v1099 & 7) - v1108)) & ~(-1 << v1108) | (v1105 << v1108);
      v1099 += v1108;
      *v24 = v1099;
      v1107 -= v1108;
    }
    while (v1107);
    v1109 = (v1105 + 1);
    if (v1099 + v1109 > v990)
    {
LABEL_1714:
      v30 = 5409;
      goto LABEL_165;
    }
    LODWORD(v1110) = 0;
    if (v1105 == -1)
    {
      v1112 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 1608) = 0;
    }
    else
    {
      do
      {
        v1111 = 8 - (v1099 & 7);
        if (v1109 < v1111)
          v1111 = v1109;
        v1110 = (*(unsigned __int8 *)(v1100 + (v1099 >> 3)) >> (8 - (v1099 & 7) - v1111)) & ~(-1 << v1111) | ((_DWORD)v1110 << v1111);
        v1099 += v1111;
        *v24 = v1099;
        v1109 -= v1111;
      }
      while (v1109);
      v1112 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 1608) = v1110;
      if ((_DWORD)v1110)
      {
        {
          v1198 = operator new();
          geo::MallocZoneAllocator::MallocZoneAllocator(v1198, "GeoCodec", 0x99AFC36000000008, 0, 0);
          geo::codec::Allocator::instance(void)::alloc = v1198;
        }
        v971 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                    + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * v1110, 8);
        v1112 = (_QWORD *)*a3;
        *(_QWORD *)(*a3 + 1592) = v971;
        if (!v971)
        {
          v30 = 5414;
          goto LABEL_165;
        }
      }
    }
    v1114 = v1112[176];
    if (v1112[177] != v1114)
    {
      v1115 = 0;
      v1116 = 0;
      v1117 = (int *)v1112[199];
      v1118 = *(_QWORD *)(v9 + 24);
      v1119 = 8 * *(_QWORD *)(v9 + 16);
      v1120 = *a3;
      while (1)
      {
        v1133 = v1118 + 1;
        if (v1118 + 1 > v1119)
        {
          v30 = 5423;
          goto LABEL_165;
        }
        v1134 = *v1289;
        v1135 = *(unsigned __int8 *)(*v1289 + (v1118 >> 3));
        *v24 = v1133;
        if (((v1135 >> (~(_BYTE)v1118 & 7)) & 1) != 0)
        {
          if (v1133 + v1106 > v1119)
          {
            v30 = 5425;
            goto LABEL_165;
          }
          if ((_DWORD)v1106)
          {
            v1136 = 0;
            v1137 = v1106;
            do
            {
              v1138 = 8 - (v1133 & 7);
              if (v1137 < v1138)
                v1138 = v1137;
              v1136 = (*(unsigned __int8 *)(v1134 + (v1133 >> 3)) >> (8 - (v1133 & 7) - v1138)) & ~(-1 << v1138) | (v1136 << v1138);
              v1133 += v1138;
              *v24 = v1133;
              v1137 -= v1138;
            }
            while (v1137);
            v1139 = v1136 + v1116;
            if (v1136 + v1116 > v1110)
            {
LABEL_1841:
              v30 = 5426;
              goto LABEL_165;
            }
            *(_DWORD *)(v1114 + 288) = v1116;
            *(_WORD *)(v1114 + 276) = v1136;
            if (v1136)
            {
              v1140 = 0;
              while (v1133 + v1256 <= v1119)
              {
                v1141 = v1256;
                if ((_DWORD)v1256)
                {
                  v1141 = 0;
                  v1142 = v1256;
                  do
                  {
                    v1143 = 8 - (v1133 & 7);
                    if (v1142 < v1143)
                      v1143 = v1142;
                    v1141 = (*(unsigned __int8 *)(v1134 + (v1133 >> 3)) >> (8 - (v1133 & 7) - v1143)) & ~(-1 << v1143) | (v1141 << v1143);
                    v1133 += v1143;
                    *v24 = v1133;
                    v1142 -= v1143;
                  }
                  while (v1142);
                }
                *v1117 = v1141;
                if (v1133 + v1255 > v1119)
                {
                  v30 = 5432;
                  goto LABEL_165;
                }
                v1144 = v1255;
                if ((_DWORD)v1255)
                {
                  v1144 = 0;
                  v1145 = v1255;
                  do
                  {
                    v1146 = 8 - (v1133 & 7);
                    if (v1145 < v1146)
                      v1146 = v1145;
                    v1144 = (*(unsigned __int8 *)(v1134 + (v1133 >> 3)) >> (8 - (v1133 & 7) - v1146)) & ~(-1 << v1146) | (v1144 << v1146);
                    v1133 += v1146;
                    *v24 = v1133;
                    v1145 -= v1146;
                  }
                  while (v1145);
                }
                v1117[1] = v1144;
                ++v1140;
                v1117 += 2;
                if (v1140 == v1136)
                {
                  v1116 = v1139;
                  goto LABEL_1752;
                }
              }
              v30 = 5431;
LABEL_165:
              v29 = (FILE *)*MEMORY[0x1E0C80C10];
              goto LABEL_22;
            }
          }
          else
          {
            if (v1116 > v1110)
              goto LABEL_1841;
            *(_DWORD *)(v1114 + 288) = v1116;
            *(_WORD *)(v1114 + 276) = 0;
          }
        }
LABEL_1752:
        ++v1115;
        v1114 += 344;
        v971 = 0x82FA0BE82FA0BE83 * ((uint64_t)(*(_QWORD *)(v1120 + 1416) - *(_QWORD *)(v1120 + 1408)) >> 3);
        v1118 = v1133;
        if (v1115 >= v971)
          goto LABEL_1727;
      }
    }
    v1116 = 0;
LABEL_1727:
    if (v1116 != (_DWORD)v1110)
    {
      v30 = 5436;
      goto LABEL_165;
    }
    v1099 = *(_QWORD *)(v9 + 24);
    v990 = 8 * *(_QWORD *)(v9 + 16);
  }
  v1121 = v1099 + 1;
  if (v1099 + 1 > v990)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5448;
    goto LABEL_22;
  }
  v1122 = *v1289;
  v1123 = *(unsigned __int8 *)(*v1289 + (v1099 >> 3));
  *v24 = v1121;
  if (((v1123 >> (~(_BYTE)v1099 & 7)) & 1) == 0
    || (v1124 = *(_QWORD *)(*a3 + 1416), v1125 = *(_QWORD *)(*a3 + 1408), v1124 == v1125))
  {
    v1128 = v1099 + 1;
  }
  else
  {
    v1126 = (v1124 - v1125) / 344;
    if (v1126 <= 1)
      v1126 = 1;
    v1127 = (BOOL *)(v1125 + 322);
    do
    {
      v1128 = v1121 + 1;
      if (v1121 + 1 > v990)
      {
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 5452;
        goto LABEL_22;
      }
      v1129 = *(unsigned __int8 *)(v1122 + (v1121 >> 3));
      *v24 = v1128;
      *v1127 = ((v1129 >> (~(_BYTE)v1121 & 7)) & 1) == 0;
      v1127 += 344;
      ++v1121;
      --v1126;
    }
    while (v1126);
  }
  v1130 = *(_DWORD *)(v9 + 64);
  if (v1130 < 0x32)
    goto LABEL_1878;
  v1131 = v1128 + 1;
  if (v1128 + 1 > v990)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5485;
    goto LABEL_22;
  }
  v1132 = *(unsigned __int8 *)(v1122 + (v1128 >> 3));
  *v24 = v1131;
  if (((v1132 >> (~(_BYTE)v1128 & 7)) & 1) == 0)
  {
LABEL_1867:
    if (v1130 >= 0x40)
    {
      v1185 = *(_QWORD *)(v9 + 24);
      if (v1185 + 1 > 8 * *(_QWORD *)(v9 + 16))
      {
        v30 = 5560;
        goto LABEL_165;
      }
      v1186 = *(unsigned __int8 *)(*v1289 + (v1185 >> 3));
      *v24 = v1185 + 1;
      if (((v1186 >> (~(_BYTE)v1185 & 7)) & 1) != 0)
      {
        v1187 = geo::codec::Allocator::instance((geo::codec::Allocator *)v971);
        v1188 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v1187 + 24))(v1187, *(_QWORD *)(*a3 + 1392), 4);
        v1189 = *a3;
        *(_QWORD *)(*a3 + 1536) = v1188;
        if (!v1188)
        {
          v30 = 5563;
          goto LABEL_165;
        }
        v1190 = *(_QWORD *)(v1189 + 1392);
        __p.var8 = (GeoCodecsRange *)&off_1E1BFA860;
        v1293 = a3;
        p_var8 = &__p.var8;
        geo::codec::decodeZoomRanks(v1289, v1190, (uint64_t)&__p.var8);
        v1191 = p_var8;
        if (p_var8 == &__p.var8)
        {
          v1192 = 4;
          v1191 = &__p.var8;
        }
        else
        {
          if (!p_var8)
            goto LABEL_1878;
          v1192 = 5;
        }
        (*((void (**)(void))&(*v1191)->var0 + v1192))();
      }
    }
LABEL_1878:
    v1193 = *(_QWORD *)(v9 + 48) + (*(_QWORD *)(v9 + 24) >> 3);
    if ((*(_QWORD *)(v9 + 24) & 7) != 0)
      ++v1193;
    *(_QWORD *)(v9 + 48) = v1193;
    *(_BYTE *)(v9 + 32) = 0;
    v20 = 1;
    if (*(_BYTE *)v9)
      goto LABEL_23;
    goto LABEL_25;
  }
  if (v1128 + 6 > v990)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5489;
    goto LABEL_22;
  }
  v1147 = 0;
  v1148 = 5;
  do
  {
    v1149 = 8 - (v1131 & 7);
    if (v1148 < v1149)
      v1149 = v1148;
    v1147 = (*(unsigned __int8 *)(v1122 + (v1131 >> 3)) >> (8 - (v1131 & 7) - v1149)) & ~(-1 << v1149) | (v1147 << v1149);
    v1131 += v1149;
    *v24 = v1131;
    v1148 -= v1149;
  }
  while (v1148);
  if (v1131 + 5 > v990)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5492;
    goto LABEL_22;
  }
  v1150 = 0;
  v1151 = (v1147 + 1);
  v1152 = 5;
  do
  {
    v1153 = 8 - (v1131 & 7);
    if (v1152 < v1153)
      v1153 = v1152;
    v1150 = (*(unsigned __int8 *)(v1122 + (v1131 >> 3)) >> (8 - (v1131 & 7) - v1153)) & ~(-1 << v1153) | (v1150 << v1153);
    v1131 += v1153;
    *v24 = v1131;
    v1152 -= v1153;
  }
  while (v1152);
  LODWORD(__p.var7) = 0;
  if (!BitstreamUnpackBitcount(v1289, &__p.var7, 6uLL))
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5495;
    goto LABEL_22;
  }
  LODWORD(__p.var6) = 0;
  if ((BitstreamUnpackVar32(v1289, (int *)&__p.var6) & 1) == 0)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5498;
    goto LABEL_22;
  }
  *(_QWORD *)(*a3 + 1784) = LODWORD(__p.var6);
  v1291 = 0;
  v1154 = BitstreamUnpackVar32(v1289, (int *)&v1291);
  if ((v1154 & 1) == 0)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5502;
    goto LABEL_22;
  }
  *(_QWORD *)(*a3 + 1800) = v1291;
  v1155 = geo::codec::Allocator::instance((geo::codec::Allocator *)v1154);
  v1156 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1155 + 16))(v1155, 8 * *(_QWORD *)(*a3 + 1784), 8);
  *(_QWORD *)(*a3 + 1776) = v1156;
  v1157 = geo::codec::Allocator::instance(v1156);
  v971 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1157 + 16))(v1157, 8 * *(_QWORD *)(*a3 + 1800), 8);
  v1158 = (_QWORD *)*a3;
  v1158[224] = v971;
  if (v1158[169] == v1158[168])
  {
    v1160 = 0;
    v1288 = 0;
LABEL_1864:
    if (v1160 != *(_QWORD *)(*a3 + 1784))
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5550;
      goto LABEL_22;
    }
    if (v1288 != *(_QWORD *)(*a3 + 1800))
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5551;
      goto LABEL_22;
    }
    v1130 = *(_DWORD *)(v9 + 64);
    goto LABEL_1867;
  }
  v1159 = 0;
  v1160 = 0;
  v1257 = (v1150 + 1);
  var7_low = LODWORD(__p.var7);
  v1288 = 0;
  while (1)
  {
    v1161 = *(_QWORD *)(v9 + 24);
    if (v1161 + 1 > 8 * *(_QWORD *)(v9 + 16))
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5513;
      goto LABEL_22;
    }
    v1162 = *(unsigned __int8 *)(*v1289 + (v1161 >> 3));
    *v24 = v1161 + 1;
    if (((v1162 >> (~(_BYTE)v1161 & 7)) & 1) == 0)
    {
      v1165 = (_QWORD *)*a3;
      goto LABEL_1826;
    }
    v1290 = 0;
    if (!BitstreamUnpack(v1289, &v1290, v1257))
      goto LABEL_1895;
    v1163 = *(_QWORD *)(*a3 + 1344) + 184 * v1159;
    *(_QWORD *)(v1163 + 120) = v1160;
    *(_QWORD *)(v1163 + 152) = v1288;
    v1164 = v1290;
    if (v1290)
      break;
LABEL_1804:
    v1290 = 0;
    v971 = BitstreamUnpack(v1289, &v1290, v1257);
    if (!(_DWORD)v971)
    {
LABEL_1895:
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5521;
      goto LABEL_22;
    }
    v1165 = (_QWORD *)*a3;
    v1166 = *(_QWORD *)(*a3 + 1344) + 184 * v1159;
    *(_QWORD *)(v1166 + 136) = v1160;
    *(_QWORD *)(v1166 + 168) = v1288;
    v1167 = v1290;
    if (v1290)
    {
      while (1)
      {
        v1168 = *(_QWORD *)(v9 + 24);
        if (v1168 + 1 > 8 * *(_QWORD *)(v9 + 16))
          goto LABEL_1896;
        v1169 = *(unsigned __int8 *)(*v1289 + (v1168 >> 3));
        *v24 = v1168 + 1;
        if (((v1169 >> (~(_BYTE)v1168 & 7)) & 1) != 0)
        {
          *(_DWORD *)&__p.var0 = 0;
          v971 = BitstreamUnpack(v1289, (int *)&__p, v1151);
          if (!(_DWORD)v971)
            goto LABEL_1884;
          v1165 = (_QWORD *)*a3;
          if (v1160 >= *(_QWORD *)(*a3 + 1784))
            goto LABEL_1897;
          *(_QWORD *)(v1165[222] + 8 * v1160++) = *(unsigned int *)&__p.var0;
          ++*(_QWORD *)(v1165[168] + 184 * v1159 + 144);
          if (!--v1167)
            break;
        }
        else
        {
          *(_QWORD *)&__p.var0 = 0;
          v971 = BitstreamUnpack64(v1289, (unint64_t *)&__p.var0, var7_low);
          if (!(_DWORD)v971)
            goto LABEL_1885;
          v1165 = (_QWORD *)*a3;
          if (v1288 >= *(_QWORD *)(*a3 + 1800))
            goto LABEL_1898;
          *(_QWORD *)(v1165[224] + 8 * v1288) = *(_QWORD *)&__p.var0;
          ++*(_QWORD *)(v1165[168] + 184 * v1159 + 176);
          ++v1288;
          if (!--v1167)
            break;
        }
      }
    }
LABEL_1826:
    if (++v1159 >= 0xD37A6F4DE9BD37A7 * ((uint64_t)(v1165[169] - v1165[168]) >> 3))
      goto LABEL_1864;
  }
  while (1)
  {
    v1170 = *(_QWORD *)(v9 + 24);
    if (v1170 + 1 > 8 * *(_QWORD *)(v9 + 16))
      break;
    v1171 = *(unsigned __int8 *)(*v1289 + (v1170 >> 3));
    *v24 = v1170 + 1;
    if (((v1171 >> (~(_BYTE)v1170 & 7)) & 1) != 0)
    {
      *(_DWORD *)&__p.var0 = 0;
      if (!BitstreamUnpack(v1289, (int *)&__p, v1151))
      {
LABEL_1884:
        v30 = 5532;
        goto LABEL_165;
      }
      v1172 = *a3;
      if (v1160 >= *(_QWORD *)(*a3 + 1784))
      {
LABEL_1897:
        v30 = 5533;
        goto LABEL_165;
      }
      *(_QWORD *)(*(_QWORD *)(v1172 + 1776) + 8 * v1160++) = *(unsigned int *)&__p.var0;
      ++*(_QWORD *)(*(_QWORD *)(v1172 + 1344) + 184 * v1159 + 128);
    }
    else
    {
      *(_QWORD *)&__p.var0 = 0;
      if (!BitstreamUnpack64(v1289, (unint64_t *)&__p.var0, var7_low))
      {
LABEL_1885:
        v30 = 5540;
        goto LABEL_165;
      }
      v1173 = *a3;
      if (v1288 >= *(_QWORD *)(*a3 + 1800))
      {
LABEL_1898:
        v30 = 5541;
        goto LABEL_165;
      }
      *(_QWORD *)(*(_QWORD *)(v1173 + 1792) + 8 * v1288) = *(_QWORD *)&__p.var0;
      ++*(_QWORD *)(*(_QWORD *)(v1173 + 1344) + 184 * v1159 + 160);
      ++v1288;
    }
    if (!--v1164)
      goto LABEL_1804;
  }
LABEL_1896:
  v29 = (FILE *)*MEMORY[0x1E0C80C10];
  v30 = 5528;
LABEL_22:
  fprintf(v29, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v30);
  v20 = 0;
  if (*(_BYTE *)v9)
  {
LABEL_23:
    {
      v343 = operator new();
      *(_QWORD *)(v343 + 16) = 0x99AFC36000000008;
      *(_QWORD *)(v343 + 24) = "GeoCodec";
      *(_OWORD *)(v343 + 32) = xmmword_189CFDB80;
      *(_QWORD *)v343 = &off_1E1BF6690;
      *(_QWORD *)(v343 + 8) = "GeoCodec";
      *(_OWORD *)(v343 + 56) = 0u;
      *(_OWORD *)(v343 + 72) = 0u;
      *(_OWORD *)(v343 + 88) = 0u;
      *(_OWORD *)(v343 + 104) = 0u;
      *(_OWORD *)(v343 + 120) = 0u;
      *(_OWORD *)(v343 + 136) = 0u;
      *(_OWORD *)(v343 + 152) = 0u;
      *(_OWORD *)(v343 + 168) = 0u;
      *(_OWORD *)(v343 + 184) = 0u;
      *(_OWORD *)(v343 + 200) = 0u;
      *(_OWORD *)(v343 + 216) = 0u;
      *(_OWORD *)(v343 + 232) = 0u;
      *(_QWORD *)(v343 + 248) = 0;
      v344 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v343 + 56), 0);
      if ((_DWORD)v344)
        geo::read_write_lock::logFailure(v344, (uint64_t)"initialization", v345);
      v346 = malloc_create_zone(0, 0);
      *(_QWORD *)(v343 + 48) = v346;
      malloc_set_zone_name(v346, "GeoCodec");
      *(_QWORD *)(v343 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      geo::codec::Allocator::instance(void)::alloc = v343;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v9 + 40), 0);
  }
LABEL_25:
  {
    v334 = operator new();
    *(_QWORD *)(v334 + 16) = 0x99AFC36000000008;
    *(_QWORD *)(v334 + 24) = "GeoCodec";
    *(_OWORD *)(v334 + 32) = xmmword_189CFDB80;
    *(_QWORD *)v334 = &off_1E1BF6690;
    *(_QWORD *)(v334 + 8) = "GeoCodec";
    *(_OWORD *)(v334 + 56) = 0u;
    *(_OWORD *)(v334 + 72) = 0u;
    *(_OWORD *)(v334 + 88) = 0u;
    *(_OWORD *)(v334 + 104) = 0u;
    *(_OWORD *)(v334 + 120) = 0u;
    *(_OWORD *)(v334 + 136) = 0u;
    *(_OWORD *)(v334 + 152) = 0u;
    *(_OWORD *)(v334 + 168) = 0u;
    *(_OWORD *)(v334 + 184) = 0u;
    *(_OWORD *)(v334 + 200) = 0u;
    *(_OWORD *)(v334 + 216) = 0u;
    *(_OWORD *)(v334 + 232) = 0u;
    *(_QWORD *)(v334 + 248) = 0;
    v335 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v334 + 56), 0);
    if ((_DWORD)v335)
      geo::read_write_lock::logFailure(v335, (uint64_t)"initialization", v336);
    v337 = malloc_create_zone(0, 0);
    *(_QWORD *)(v334 + 48) = v337;
    malloc_set_zone_name(v337, "GeoCodec");
    *(_QWORD *)(v334 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    geo::codec::Allocator::instance(void)::alloc = v334;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v9, 0);
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  __p.var7 = (GeoCodecsGhostPoint *)"ChapterTransitNetwork";
  *(_QWORD *)&__p.var0 = &__p.var7;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v11 + 1912, (uint64_t *)&__p.var7, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)+ 4) = (double)((rep - v14.__d_.__rep_) / 1000) * 0.001;
  if (v10)
  {
    v34 = (unint64_t *)&v10->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v20;
}

void sub_1886EFD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, geo::read_write_lock *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,geo::read_write_lock *a25,geo::read_write_lock *a26,uint64_t a27,int a28,char a29,const char **__p,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,const char *a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  std::__shared_weak_count *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *p_shared_owners;
  unint64_t v56;

  MEMORY[0x18D76437C](v51, 0x10F1C40DA10AB66);
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  a37 = "ChapterTransitNetwork";
  __p = &a37;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v52 + 1912, (uint64_t *)&a37, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)+ 4) = (double)((rep - v50) / 1000) * 0.001;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readTileReferences(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::chrono::steady_clock::time_point v14;
  uint64_t VarUint32;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  const char **v49;

  v3 = a1[1];
  if (!v3)
    return 1;
  v6 = 0;
  v7 = 0;
  while (*(_WORD *)(*a1 + 16 * v6) != 93)
  {
    v6 = ++v7;
    if (v3 <= v7)
      return 1;
  }
  v8 = geo::codec::chapterAt((uint64_t)a1, v7, 93, *a3 + 1912);
  if (!v8)
    return 1;
  v9 = v8;
  v11 = *a3;
  v10 = (std::__shared_weak_count *)a3[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  LODWORD(v49) = 0;
  VarUint32 = geo::codec::chapterReadVarUint32((_QWORD *)v9, (unsigned int *)&v49);
  if ((VarUint32 & 1) == 0)
  {
    v20 = 4419;
    goto LABEL_16;
  }
  v17 = *(_QWORD *)(v9 + 48);
  v16 = *(_QWORD *)(v9 + 56);
  v18 = v16 >= v17;
  v19 = v16 - v17;
  if (!v18)
  {
    v20 = 4420;
    goto LABEL_16;
  }
  *(_BYTE *)(v9 + 32) = 1;
  v29 = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v9 + 16) = v19;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = v29 + v17;
  *(_QWORD *)(*a3 + 1264) = v49;
  v30 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, 11 * *(_QWORD *)(*a3 + 1264), 8);
  *(_QWORD *)(*a3 + 1272) = v23;
  if (!(_DWORD)v49)
  {
LABEL_44:
    v21 = 1;
    if (*(_BYTE *)v9)
      goto LABEL_17;
    goto LABEL_18;
  }
  v31 = 0;
  while (1)
  {
    v38 = *(_QWORD *)(v9 + 24);
    v39 = 8 * *(_QWORD *)(v9 + 16);
    if (v38 + 5 > v39)
    {
      v20 = 4429;
      goto LABEL_16;
    }
    LODWORD(v40) = 0;
    v41 = *(_QWORD *)(v9 + 8);
    v42 = 5;
    do
    {
      v43 = 8 - (v38 & 7);
      if (v42 < v43)
        v43 = v42;
      v23 = (-1 << v43);
      v40 = (*(unsigned __int8 *)(v41 + (v38 >> 3)) >> (8 - (v38 & 7) - v43)) & ~(_DWORD)v23 | ((_DWORD)v40 << v43);
      v38 += v43;
      *(_QWORD *)(v9 + 24) = v38;
      v42 -= v43;
    }
    while (v42);
    if (v38 + v40 > v39)
    {
      v20 = 4430;
      goto LABEL_16;
    }
    if ((_DWORD)v40)
      break;
    v32 = 0;
    v33 = 0;
LABEL_26:
    v34 = *(_BYTE *)(a2 + 10);
    v35 = *(_WORD *)(a2 + 8) & 0xFFFC | BYTE3(v32) & 3;
    v36 = (*(_DWORD *)a2 & 0x7F | ((v40 & 0x3F) << 8)) & 0xFFFFFF0000003FFFLL | ((unint64_t)(v33 & 0x3FFFFFF) << 14) | (v32 << 40);
    v37 = *(_QWORD *)(*a3 + 1272) + 11 * v31;
    *(_QWORD *)v37 = v36;
    *(_WORD *)(v37 + 8) = v35;
    *(_BYTE *)(v37 + 10) = v34;
    if (++v31 >= (unint64_t)v49)
      goto LABEL_44;
  }
  v33 = 0;
  v44 = v40;
  do
  {
    v45 = 8 - (v38 & 7);
    if (v44 < v45)
      v45 = v44;
    v33 = (*(unsigned __int8 *)(v41 + (v38 >> 3)) >> (8 - (v38 & 7) - v45)) & ~(-1 << v45) | (v33 << v45);
    v38 += v45;
    *(_QWORD *)(v9 + 24) = v38;
    v44 -= v45;
  }
  while (v44);
  if (v38 + v40 <= v39)
  {
    LODWORD(v32) = 0;
    v46 = v40;
    do
    {
      v47 = 8 - (v38 & 7);
      if (v46 < v47)
        v47 = v46;
      v23 = (*(unsigned __int8 *)(v41 + (v38 >> 3)) >> (8 - (v38 & 7) - v47)) & ~(-1 << v47);
      v32 = v23 | ((_DWORD)v32 << v47);
      v38 += v47;
      *(_QWORD *)(v9 + 24) = v38;
      v46 -= v47;
    }
    while (v46);
    goto LABEL_26;
  }
  v20 = 4431;
LABEL_16:
  v23 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v20);
  v21 = 0;
  if (*(_BYTE *)v9)
  {
LABEL_17:
    v24 = geo::codec::Allocator::instance((geo::codec::Allocator *)v23);
    v23 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 40))(v24, *(_QWORD *)(v9 + 40), 0);
  }
LABEL_18:
  v25 = geo::codec::Allocator::instance((geo::codec::Allocator *)v23);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v25 + 40))(v25, v9, 0);
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v48 = "ChapterTileReferences";
  v49 = &v48;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v11 + 1912, (uint64_t *)&v48, (uint64_t)&std::piecewise_construct, (uint64_t **)&v49)+ 4) = (double)((rep - v14.__d_.__rep_) / 1000) * 0.001;
  if (v10)
  {
    v27 = (unint64_t *)&v10->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v21;
}

void sub_1886F0680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readStorefronts(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  FILE *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int64x2_t *v55;
  uint64_t v56;
  FILE *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int64x2_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  const char *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  const char *v78;
  uint64_t *v79[2];

  v2 = a1[1];
  if (!v2)
    return 1;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 138)
  {
    v4 = ++v5;
    if (v2 <= v5)
      return 1;
  }
  v6 = geo::codec::chapterAt((uint64_t)a1, v5, 138, *a2 + 1912);
  if (!v6)
    return 1;
  v7 = v6;
  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v74 = "ChapterStorefronts";
  v75 = v9;
  v76 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v12.__d_.__rep_;
  LODWORD(v79[0]) = 0;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)v79) & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 9354;
    goto LABEL_81;
  }
  if (!LODWORD(v79[0]))
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 9355;
    goto LABEL_81;
  }
  v73 = 0;
  v13 = geo::codec::chapterReadVarUint32((_QWORD *)v7, &v73);
  if ((v13 & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 9358;
    goto LABEL_81;
  }
  *(_DWORD *)(*a2 + 1864) = v73;
  v14 = geo::codec::Allocator::instance((geo::codec::Allocator *)v13);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 24))(v14, 8, v73);
  *(_QWORD *)(*a2 + 1872) = v15;
  if (!v15)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 9361;
    goto LABEL_81;
  }
  v17 = *(_QWORD *)(v7 + 48);
  v16 = *(_QWORD *)(v7 + 56);
  v18 = v17 + 8;
  v19 = v16 >= v17 + 8;
  v20 = v16 - (v17 + 8);
  if (!v19)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 9364;
    goto LABEL_81;
  }
  v25 = *(_QWORD *)(v7 + 40);
  v26 = *(_QWORD *)(v25 + v17);
  *(_QWORD *)(v7 + 8) = v25 + v18;
  *(_QWORD *)(v7 + 48) = v18;
  *(_BYTE *)(v7 + 32) = 1;
  *(_QWORD *)(v7 + 16) = v20;
  *(_QWORD *)(v7 + 24) = 0;
  if ((v20 & 0x1FFFFFFFFFFFFFFFLL) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 9370;
    goto LABEL_81;
  }
  v27 = *(unsigned __int8 *)(v25 + v18);
  *(_QWORD *)(v7 + 24) = 5;
  v72 = 0;
  if (!BitstreamUnpackBitcount((uint64_t *)(v7 + 8), &v72, 5uLL))
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 9372;
    goto LABEL_81;
  }
  v71 = 0;
  v28 = (uint64_t *)BitstreamUnpackBitcount((uint64_t *)(v7 + 8), &v71, 6uLL);
  if (!(_DWORD)v28)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 9374;
    goto LABEL_81;
  }
  if (!LODWORD(v79[0]))
  {
    if (v73)
      goto LABEL_80;
LABEL_65:
    v56 = *(_QWORD *)(v7 + 48) + (*(_QWORD *)(v7 + 24) >> 3);
    if ((*(_QWORD *)(v7 + 24) & 7) != 0)
      ++v56;
    *(_QWORD *)(v7 + 48) = v56;
    *(_BYTE *)(v7 + 32) = 0;
    v23 = 1;
    if (*(_BYTE *)v7)
      goto LABEL_82;
    goto LABEL_83;
  }
  v29 = 0;
  v30 = 0;
  v31 = (v27 >> 3) + 1;
  v67 = v71;
  v68 = v72;
  v28 = (uint64_t *)(v7 + 8);
  v64 = v31;
  v65 = v26;
  v66 = vdupq_n_s64(v26);
  do
  {
    v69 = v29;
    v32 = *(_QWORD *)(v7 + 24);
    if (v32 + v31 > 8 * *(_QWORD *)(v7 + 16))
    {
      v57 = (FILE *)*MEMORY[0x1E0C80C10];
      v58 = 9380;
      goto LABEL_74;
    }
    LODWORD(v33) = 0;
    v34 = *v28;
    v35 = v31;
    do
    {
      v36 = 8 - (v32 & 7);
      if (v35 < v36)
        v36 = v35;
      v33 = (*(unsigned __int8 *)(v34 + (v32 >> 3)) >> (8 - (v32 & 7) - v36)) & ~(-1 << v36) | ((_DWORD)v33 << v36);
      v32 += v36;
      *(_QWORD *)(v7 + 24) = v32;
      v35 -= v36;
    }
    while (v35);
    v37 = *(_QWORD *)(*a2 + 504);
    if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*a2 + 512) - v37) >> 5) <= v33)
    {
      v57 = (FILE *)*MEMORY[0x1E0C80C10];
      v58 = 9381;
      goto LABEL_74;
    }
    v70 = *(_QWORD *)(*a2 + 504);
    v38 = v37 + 224 * v33;
    v40 = *(unsigned __int8 *)(v38 + 206);
    v39 = (_BYTE *)(v38 + 206);
    if (v40)
    {
      v57 = (FILE *)*MEMORY[0x1E0C80C10];
      v58 = 9383;
LABEL_74:
      v28 = (uint64_t *)fprintf(v57, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v58);
      v23 = 0;
      if (*(_BYTE *)v7)
        goto LABEL_82;
      goto LABEL_83;
    }
    LODWORD(v78) = 0;
    if (!BitstreamUnpack(v28, (int *)&v78, v68))
    {
      v22 = 9386;
      goto LABEL_70;
    }
    v41 = v78;
    if (v78 > 0xFE)
    {
      v22 = 9387;
      goto LABEL_70;
    }
    *v39 = (_BYTE)v78;
    v28 = (uint64_t *)(v7 + 8);
    *(_DWORD *)(v70 + 224 * v33 + 188) = v30;
    v42 = v41 + v30;
    v43 = v73;
    if (v41 + v30 > v73)
    {
      v22 = 9390;
      goto LABEL_70;
    }
    if (!v41)
      goto LABEL_47;
    v44 = *(_QWORD *)(v7 + 24);
    v45 = 8 * *(_QWORD *)(v7 + 16);
    v46 = *a2;
    if ((_DWORD)v67)
    {
      while (v44 + v67 <= v45)
      {
        v47 = 0;
        v48 = *(_QWORD *)(v7 + 8);
        v49 = v67;
        do
        {
          if (v49 >= 8 - (v44 & 7))
            v50 = 8 - (v44 & 7);
          else
            v50 = v49;
          v47 = (*(unsigned __int8 *)(v48 + (v44 >> 3)) >> (8 - (v44 & 7) - v50)) & (unint64_t)~(-1 << v50) | (v47 << v50);
          v44 += v50;
          *(_QWORD *)(v7 + 24) = v44;
          v49 -= v50;
        }
        while (v49);
        *(_QWORD *)(*(_QWORD *)(v46 + 1872) + 8 * v30++) = v47 + v65;
        if (v30 == v42)
          goto LABEL_46;
      }
LABEL_69:
      v22 = 9394;
LABEL_70:
      v21 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_81;
    }
    if (v44 + v67 > v45)
      goto LABEL_69;
    v52 = *(_QWORD *)(v46 + 1872);
    if (v41 < 8 || __CFADD__(v30, v41 - 1))
    {
      v53 = v30;
    }
    else
    {
      v53 = v30 + (v41 & 0xFFFFFFFC);
      v54 = v41 & 0xFFFFFFFC;
      do
      {
        v55 = (int64x2_t *)(v52 + 8 * v30);
        *v55 = v66;
        v55[1] = v66;
        v30 += 4;
        v54 -= 4;
      }
      while (v54);
      if (v41 == (v41 & 0xFFFFFFFC))
      {
LABEL_46:
        v30 = v42;
LABEL_47:
        v51 = v69;
        v31 = v64;
        goto LABEL_56;
      }
    }
    v51 = v69;
    v31 = v64;
    do
      *(_QWORD *)(v52 + 8 * v53++) = v65;
    while (v42 != v53);
    v30 = v42;
LABEL_56:
    v29 = v51 + 1;
  }
  while (v29 < LODWORD(v79[0]));
  if (v30 == v43)
    goto LABEL_65;
LABEL_80:
  v21 = (FILE *)*MEMORY[0x1E0C80C10];
  v22 = 9399;
LABEL_81:
  v28 = (uint64_t *)fprintf(v21, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v22);
  v23 = 0;
  if (*(_BYTE *)v7)
  {
LABEL_82:
    v59 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
    v28 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v59 + 40))(v59, *(_QWORD *)(v7 + 40), 0);
  }
LABEL_83:
  v60 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v60 + 40))(v60, v7, 0);
  v61 = std::chrono::steady_clock::now().__d_.__rep_;
  v78 = "ChapterStorefronts";
  v79[0] = (uint64_t *)&v78;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)&v78, (uint64_t)&std::piecewise_construct, v79)+ 4) = (double)((v61 - v12.__d_.__rep_) / 1000) * 0.001;
  if (v8)
  {
    v62 = (unint64_t *)&v8->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v23;
}

void sub_1886F0D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readRoadNetwork(_QWORD *a1, _QWORD *a2, GeoCodecsVertexPool **a3)
{
  unint64_t v3;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  GeoCodecsVertexPool *v11;
  GeoCodecsVertexPool *v12;
  unint64_t *p_var1;
  unint64_t v14;
  GeoCodecsVertexPool *v15;
  uint64_t *p_var6;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  FILE *v21;
  int v22;
  char v23;
  uint64_t Connectivity;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  geo::codec::Allocator *v31;
  uint64_t v32;
  geo::codec::Allocator *v33;
  uint64_t v34;
  geo::codec::Allocator *v35;
  uint64_t v36;
  geo::codec::Allocator *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  GeoCodecsVertexPool *v43;
  char *v44;
  std::chrono::steady_clock::time_point v45;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  geo::codec::Allocator *v50;
  GeoCodecsVertexPool *v51;
  GeoCodecsRange *var4;
  unint64_t var5;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  char *v61;
  _OWORD *v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t p_var4;
  unint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  GeoCodecsVertexPool *v88;
  uint64_t v89;
  GeoCodecsVertexPool *v90;
  unint64_t *p_var2;
  unint64_t v92;
  __int128 v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  FILE *v103;
  int v104;
  int v105;
  int v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  _BOOL8 v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  FILE *v116;
  int v117;
  _BOOL4 v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  FILE *v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  unsigned int v129;
  int v130;
  _BYTE *v131;
  char v132;
  unint64_t v133;
  unsigned int v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int v139;
  unsigned int v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  unint64_t v144;
  FILE *v145;
  int v146;
  unsigned int v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  unint64_t v152;
  unsigned int v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unsigned int v161;
  int v162;
  unint64_t v163;
  unint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  const void *v172;
  size_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  const void *v186;
  size_t v187;
  _QWORD *v188;
  unint64_t v189;
  unsigned int v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unsigned int v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unsigned int v198;
  unint64_t v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  _BYTE *v203;
  int v204;
  int v205;
  uint64_t *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  unint64_t v210;
  FILE *v211;
  int v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  FILE *v216;
  int v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  unint64_t v223;
  unsigned int v224;
  int v225;
  unsigned int v226;
  unsigned int v227;
  _BOOL8 v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unsigned int v234;
  unint64_t v235;
  int v236;
  _DWORD *v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  int v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  _BOOL8 v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unsigned int v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unsigned int v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unsigned int v263;
  char v264;
  int v265;
  unint64_t v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  geo::codec::Allocator *v271;
  FILE *v272;
  int v273;
  int v274;
  int v275;
  FILE *v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unsigned int v282;
  unint64_t v283;
  unsigned int v284;
  uint64_t v285;
  unsigned int v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  const void *v296;
  size_t v297;
  _QWORD *v298;
  int32x4_t v299;
  int32x4_t *v300;
  float32x4_t *v301;
  unint64_t v302;
  int32x4_t v303;
  int32x4_t v304;
  int64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  unint64_t v309;
  uint64_t v310;
  float *v311;
  int *v312;
  int v313;
  float v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t *v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  FILE *v334;
  int v335;
  int v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  int v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  char *v348;
  _BYTE *v349;
  unint64_t v350;
  char v351;
  char v352;
  unint64_t v353;
  _BYTE *v354;
  char *v355;
  char v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  geo::codec::Allocator *v370;
  double v371;
  uint64_t *v372;
  uint64_t v373;
  void *__p;
  _BYTE *v375;
  int v376[2];
  __int128 __key;
  __int128 v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  int v382;
  unsigned int v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  uint64_t v387;
  __int128 v388;
  const char *v389;
  GeoCodecsVertexPool *v390;
  std::__shared_weak_count *v391;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;

  v3 = a1[1];
  if (!v3)
    goto LABEL_14;
  v7 = 0;
  v8 = 0;
  while (*(_WORD *)(*a1 + 16 * v7) != 135)
  {
    v7 = ++v8;
    if (v3 <= v8)
      goto LABEL_14;
  }
  v9 = geo::codec::chapterAt((uint64_t)a1, v8, 135, (uint64_t)&(*a3)[26].var5);
  if (!v9)
  {
LABEL_14:
    v23 = 1;
    return v23 & 1;
  }
  v10 = v9;
  v12 = *a3;
  v11 = a3[1];
  v389 = "ChapterRoadNetwork";
  v390 = v12;
  v391 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    p_var1 = (unint64_t *)&v11->var1;
    do
      v14 = __ldxr(p_var1);
    while (__stxr(v14 + 1, p_var1));
  }
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v388 = 0uLL;
  v387 = 0;
  v15 = *a3;
  p_var6 = (uint64_t *)&(*a3)[16].var6;
  v386 = 0;
  if ((geo::codec::decodePointCharacteristics(a1, 51, p_var6, (unint64_t *)&v15[16].var7, (uint64_t *)&v15[17].var1, &v15[17].var2, (uint64_t)&v15[26].var5) & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 6969;
    goto LABEL_18;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v387 + 1) & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 6971;
    goto LABEL_18;
  }
  v18 = *(_QWORD *)(v10 + 48);
  v17 = *(_QWORD *)(v10 + 56);
  v19 = v17 >= v18;
  v20 = v17 - v18;
  if (!v19)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 6973;
LABEL_18:
    Connectivity = fprintf(v21, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v22);
    v26 = 0;
LABEL_19:
    v27 = 0;
    v28 = 0;
    v29 = 0;
    goto LABEL_20;
  }
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v10 + 40) + v18;
  v50 = (geo::codec::Allocator *)(v10 + 8);
  *(_BYTE *)(v10 + 32) = 1;
  *(_QWORD *)(v10 + 16) = v20;
  *(_QWORD *)(v10 + 24) = 0;
  v51 = *a3;
  var4 = (*a3)->var4;
  var5 = (*a3)->var5;
  v54 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(var5 - (_QWORD)var4) >> 3);
  v55 = HIDWORD(v387) - v54;
  v373 = v10;
  if (HIDWORD(v387) <= v54)
  {
    if (HIDWORD(v387) < v54)
    {
      v56 = (char *)var4 + 168 * HIDWORD(v387);
      while ((char *)var5 != v56)
      {
        v57 = *(std::__shared_weak_count **)(var5 - 136);
        if (v57)
        {
          p_shared_owners = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(p_shared_owners);
          while (__stlxr(v59 - 1, p_shared_owners));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v57->__on_zero_shared)(v57, v55);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = *(std::__shared_weak_count **)(var5 - 160);
        if (v60)
          std::__shared_weak_count::__release_weak(v60);
        var5 -= 168;
      }
      v51->var5 = (unint64_t)v56;
      v10 = v373;
    }
  }
  else
  {
    std::vector<GeoCodecsRoadFeature,geo::StdAllocator<GeoCodecsRoadFeature,geo::codec::Allocator>>::__append((unint64_t *)&(*a3)->var4, v55);
  }
  v61 = (char *)operator new(0x40uLL);
  *((_QWORD *)v61 + 1) = 0;
  *((_QWORD *)v61 + 2) = 0;
  *(_QWORD *)v61 = &off_1E1BFB2F8;
  *(_OWORD *)(v61 + 24) = 0u;
  *(_OWORD *)(v61 + 40) = 0u;
  *(_DWORD *)(v61 + 55) = 0;
  v62 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *((_QWORD *)v61 + 3) = v62;
  if (v62)
  {
    *(_QWORD *)&v63 = -1;
    *((_QWORD *)&v63 + 1) = -1;
    v62[14] = v63;
    v62[15] = v63;
    v62[12] = v63;
    v62[13] = v63;
    v62[10] = v63;
    v62[11] = v63;
    v62[8] = v63;
    v62[9] = v63;
    v62[6] = v63;
    v62[7] = v63;
    v62[4] = v63;
    v62[5] = v63;
    v62[2] = v63;
    v62[3] = v63;
    *v62 = v63;
    v62[1] = v63;
  }
  *(_QWORD *)v62 = 0x100000005;
  *(_WORD *)(v61 + 57) = 257;
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
  *(_QWORD *)&v388 = v61 + 24;
  *((_QWORD *)&v388 + 1) = v61;
  if (!v64)
  {
    p_var4 = (uint64_t)&(*a3)[15].var4;
    *(_QWORD *)&__key = v61 + 24;
    *((_QWORD *)&__key + 1) = v61;
LABEL_59:
    v68 = (unint64_t *)(v61 + 8);
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
    goto LABEL_61;
  }
  v65 = (unint64_t *)&v64->__shared_owners_;
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v66 - 1, v65));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  p_var4 = (uint64_t)&(*a3)[15].var4;
  v61 = (char *)*((_QWORD *)&v388 + 1);
  __key = v388;
  if (*((_QWORD *)&v388 + 1))
    goto LABEL_59;
LABEL_61:
  v70 = FeatureStyleAttributesSet::insert(p_var4, (uint64_t *)&__key);
  v71 = (std::__shared_weak_count *)*((_QWORD *)&__key + 1);
  if (*((_QWORD *)&__key + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&__key + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *(_QWORD *)(v10 + 24);
  if (v74 + 5 > 8 * *(_QWORD *)(v10 + 16))
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 6982;
    goto LABEL_18;
  }
  v75 = 0;
  v76 = *(_QWORD *)v50;
  v77 = 5;
  do
  {
    v78 = 8 - (v74 & 7);
    if (v77 < v78)
      v78 = v77;
    v75 = (*(unsigned __int8 *)(v76 + (v74 >> 3)) >> (8 - (v74 & 7) - v78)) & ~(-1 << v78) | (v75 << v78);
    v74 += v78;
    *(_QWORD *)(v10 + 24) = v74;
    v77 -= v78;
  }
  while (v77);
  v369 = a1;
  v370 = v50;
  v372 = (uint64_t *)a3;
  if (HIDWORD(v387))
  {
    v79 = 0;
    v80 = 0;
    v81 = 0;
    v82 = (v75 + 1);
    while (1)
    {
      v83 = *(_QWORD *)(v10 + 24);
      if (v83 + v82 > 8 * *(_QWORD *)(v10 + 16))
        break;
      v84 = 0;
      if ((_DWORD)v82)
      {
        v85 = *(_QWORD *)v370;
        v86 = v82;
        do
        {
          v87 = 8 - (v83 & 7);
          if (v86 < v87)
            v87 = v86;
          v84 = (*(unsigned __int8 *)(v85 + (v83 >> 3)) >> (8 - (v83 & 7) - v87)) & ~(-1 << v87) | (v84 << v87);
          v83 += v87;
          *(_QWORD *)(v10 + 24) = v83;
          v86 -= v87;
        }
        while (v86);
      }
      v88 = *a3;
      v89 = (uint64_t)(*a3)->var4 + 168 * v81;
      *(_BYTE *)(v89 + 154) = 1;
      v90 = a3[1];
      if (v90)
      {
        p_var2 = &v90->var2;
        do
          v92 = __ldxr(p_var2);
        while (__stxr(v92 + 1, p_var2));
      }
      v70 = *(uint64_t **)(v89 + 8);
      *(_QWORD *)v89 = v88;
      *(_QWORD *)(v89 + 8) = v90;
      if (v70)
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v70);
      v93 = v388;
      if (*((_QWORD *)&v388 + 1))
      {
        v94 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
      }
      v96 = *(std::__shared_weak_count **)(v89 + 32);
      *(_OWORD *)(v89 + 24) = v93;
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      *(_DWORD *)(v89 + 96) = v80;
      *(_DWORD *)(v89 + 100) = v84;
      v80 += v84;
      v79 += v84;
      ++v81;
      v10 = v373;
      if (v81 >= HIDWORD(v387))
        goto LABEL_95;
    }
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 6986;
    goto LABEL_18;
  }
  v79 = 0;
LABEL_95:
  v99 = geo::codec::Allocator::instance((geo::codec::Allocator *)v70);
  v26 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v99 + 24))(v99, v79, 8);
  if (!v26)
  {
    v103 = (FILE *)*MEMORY[0x1E0C80C10];
    v104 = 7001;
    goto LABEL_102;
  }
  if ((geo::codec::decodeSectionEncoding(v370, *a3 + 11, 0, a2, v26) & 1) == 0)
  {
    v103 = (FILE *)*MEMORY[0x1E0C80C10];
    v104 = 7002;
    goto LABEL_102;
  }
  v100 = *(_QWORD *)(v10 + 24);
  v101 = v100 + 1;
  v102 = 8 * *(_QWORD *)(v10 + 16);
  if (v100 + 1 > v102)
  {
    v103 = (FILE *)*MEMORY[0x1E0C80C10];
    v104 = 7004;
LABEL_102:
    Connectivity = fprintf(v103, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v104);
    goto LABEL_19;
  }
  v105 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 8) + (v100 >> 3));
  *(_QWORD *)(v10 + 24) = v101;
  LOBYTE(v106) = 1;
  v107 = (1 << (~(_BYTE)v100 & 7)) & v105;
  if (!v107)
  {
    v118 = 0;
    v29 = 0;
    v119 = v100 + 2;
    if (v101 + 1 <= v102)
      goto LABEL_136;
    goto LABEL_114;
  }
  if (!BitstreamUnpack((uint64_t *)v370, (int *)&v387, 3uLL))
  {
    v103 = (FILE *)*MEMORY[0x1E0C80C10];
    v104 = 7007;
    goto LABEL_102;
  }
  LODWORD(v387) = v387 + 1;
  v108 = v387;
  if (!BitstreamUnpack((uint64_t *)v370, (int *)&v386, v387))
  {
    v103 = (FILE *)*MEMORY[0x1E0C80C10];
    v104 = 7010;
    goto LABEL_102;
  }
  v109 = ++v386;
  LODWORD(__key) = 0;
  v110 = BitstreamUnpack((uint64_t *)v370, (int *)&__key, 4uLL);
  if (!v110)
  {
    Connectivity = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 7014);
    v29 = 0;
    goto LABEL_174;
  }
  v111 = __key;
  v112 = geo::codec::Allocator::instance((geo::codec::Allocator *)v110);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v112 + 16))(v112, 4 * v109, 8);
  if ((_DWORD)v109)
  {
    v113 = 0;
    v114 = 4 * v109;
    while (1)
    {
      LODWORD(__p) = 0;
      if (!BitstreamUnpack((uint64_t *)v370, (int *)&__p, (v111 + 1)))
        break;
      *(_DWORD *)(v29 + v113) = (_DWORD)__p;
      v113 += 4;
      if (v114 == v113)
        goto LABEL_111;
    }
    v124 = (FILE *)*MEMORY[0x1E0C80C10];
    v125 = 7020;
LABEL_122:
    Connectivity = fprintf(v124, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v125);
    v10 = v373;
    goto LABEL_174;
  }
LABEL_111:
  v10 = v373;
  v115 = *(_QWORD *)(v373 + 24);
  v101 = v115 + 1;
  v102 = 8 * *(_QWORD *)(v373 + 16);
  if (v115 + 1 > v102)
  {
    v116 = (FILE *)*MEMORY[0x1E0C80C10];
    v117 = 7024;
    goto LABEL_173;
  }
  v120 = *(_QWORD *)(v373 + 8);
  v121 = *(unsigned __int8 *)(v120 + (v115 >> 3));
  *(_QWORD *)(v373 + 24) = v101;
  LOBYTE(v106) = 1;
  v122 = (1 << (~(_BYTE)v115 & 7)) & v121;
  if (v122)
  {
    v123 = v115 + 2;
    if (v123 > v102)
    {
      v124 = (FILE *)*MEMORY[0x1E0C80C10];
      v125 = 7026;
      goto LABEL_122;
    }
    v126 = *(unsigned __int8 *)(v120 + (v101 >> 3));
    *(_QWORD *)(v373 + 24) = v123;
    v106 = (v126 >> (~(_BYTE)v101 & 7)) & 1;
    v101 = v123;
  }
  if (!HIDWORD(v387))
    goto LABEL_135;
  v127 = 0;
  v128 = 0;
  do
  {
    LODWORD(__p) = 0;
    if (!BitstreamUnpack((uint64_t *)v370, (int *)&__p, v108))
    {
      v124 = (FILE *)*MEMORY[0x1E0C80C10];
      v125 = 7031;
      goto LABEL_122;
    }
    v132 = (char)__p;
    LOBYTE(v130) = v106;
    if (!v122)
    {
      LOBYTE(v130) = v106;
      if (*(_DWORD *)(v29 + 4 * __p))
      {
        v133 = *(_QWORD *)(v373 + 24);
        if (v133 + 1 > 8 * *(_QWORD *)(v373 + 16))
        {
          Connectivity = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 7037);
          v10 = v373;
          goto LABEL_174;
        }
        v129 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v133 >> 3));
        *(_QWORD *)(v373 + 24) = v133 + 1;
        v130 = (v129 >> (~(_BYTE)v133 & 7)) & 1;
      }
    }
    v131 = (char *)(*a3)->var4 + v127;
    v131[158] = v132;
    v131[161] = v132;
    v131[159] = v130;
    v131[162] = v130;
    ++v128;
    v127 += 168;
  }
  while (v128 < HIDWORD(v387));
  v101 = *(_QWORD *)(v373 + 24);
  v102 = 8 * *(_QWORD *)(v373 + 16);
LABEL_135:
  v10 = v373;
  v118 = v122 != 0;
  v119 = v101 + 1;
  if (v101 + 1 > v102)
  {
LABEL_114:
    v116 = (FILE *)*MEMORY[0x1E0C80C10];
    v117 = 7050;
LABEL_173:
    Connectivity = fprintf(v116, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v117);
LABEL_174:
    v27 = 0;
    v28 = 0;
LABEL_20:
    v23 = 0;
    goto LABEL_21;
  }
LABEL_136:
  v134 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 8) + (v101 >> 3));
  *(_QWORD *)(v10 + 24) = v119;
  if (((v134 >> (~(_BYTE)v101 & 7)) & 1) == 0)
    goto LABEL_143;
  LODWORD(__key) = 0;
  if (!BitstreamUnpack((uint64_t *)v370, (int *)&__key, 5uLL))
  {
    v116 = (FILE *)*MEMORY[0x1E0C80C10];
    v117 = 7053;
    goto LABEL_173;
  }
  if (HIDWORD(v387))
  {
    v135 = 0;
    v136 = (__key + 1);
    v137 = 148;
    while (1)
    {
      LODWORD(__p) = 0;
      if (!BitstreamUnpack((uint64_t *)v370, (int *)&__p, v136))
        break;
      *(_WORD *)((char *)&(*a3)->var4->var0 + v137) = (_WORD)__p;
      ++v135;
      v137 += 168;
      if (v135 >= HIDWORD(v387))
        goto LABEL_142;
    }
    v116 = (FILE *)*MEMORY[0x1E0C80C10];
    v117 = 7058;
    goto LABEL_173;
  }
LABEL_142:
  v119 = *(_QWORD *)(v10 + 24);
  v102 = 8 * *(_QWORD *)(v10 + 16);
LABEL_143:
  v138 = v119 + 1;
  if (v119 + 1 > v102)
  {
    v116 = (FILE *)*MEMORY[0x1E0C80C10];
    v117 = 7065;
    goto LABEL_173;
  }
  v139 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 8) + (v119 >> 3));
  *(_QWORD *)(v10 + 24) = v138;
  v140 = HIDWORD(v387);
  if (((v139 >> (~(_BYTE)v119 & 7)) & 1) != 0 && HIDWORD(v387))
  {
    v141 = 0;
    v142 = 153;
    do
    {
      LODWORD(__key) = 0;
      if (!BitstreamUnpack((uint64_t *)v370, (int *)&__key, 2uLL))
      {
        v145 = (FILE *)*MEMORY[0x1E0C80C10];
        v146 = 7069;
        goto LABEL_167;
      }
      if (__key >= 4)
        v143 = -1;
      else
        v143 = 0x20106u >> (8 * __key);
      *((_BYTE *)&(*a3)->var4->var0 + v142) = v143;
      ++v141;
      v140 = HIDWORD(v387);
      v142 += 168;
    }
    while (v141 < HIDWORD(v387));
    v138 = *(_QWORD *)(v373 + 24);
    v102 = 8 * *(_QWORD *)(v373 + 16);
  }
  v144 = v138 + 1;
  if (v138 + 1 > v102)
  {
    v145 = (FILE *)*MEMORY[0x1E0C80C10];
    v146 = 7093;
    goto LABEL_167;
  }
  v147 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v138 >> 3));
  *(_QWORD *)(v373 + 24) = v144;
  if (((v147 >> (~(_BYTE)v138 & 7)) & 1) != 0 && v140)
  {
    v148 = 0;
    v149 = 0;
    v10 = v373;
    while (1)
    {
      v150 = *(_QWORD *)(v373 + 24);
      if (v150 + 1 > 8 * *(_QWORD *)(v373 + 16))
        break;
      v151 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v150 >> 3));
      *(_QWORD *)(v373 + 24) = v150 + 1;
      geo::codec::accumulateStyleAttributeValue((uint64_t)&(*a3)[15].var4, (uint64_t *)((char *)&(*a3)->var4[1].var1 + v148), (uint64_t)(*a3)->var4 + v148, 24, (v151 >> (~(_BYTE)v150 & 7)) & 1);
      ++v149;
      v140 = HIDWORD(v387);
      v148 += 168;
      if (v149 >= HIDWORD(v387))
      {
        v144 = *(_QWORD *)(v373 + 24);
        v102 = 8 * *(_QWORD *)(v373 + 16);
        goto LABEL_163;
      }
    }
    v116 = (FILE *)*MEMORY[0x1E0C80C10];
    v117 = 7097;
    goto LABEL_173;
  }
LABEL_163:
  v152 = v144 + 1;
  if (v144 + 1 > v102)
  {
    v145 = (FILE *)*MEMORY[0x1E0C80C10];
    v146 = 7105;
    goto LABEL_167;
  }
  v153 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v144 >> 3));
  *(_QWORD *)(v373 + 24) = v152;
  if (((v153 >> (~(_BYTE)v144 & 7)) & 1) != 0)
  {
    LODWORD(__key) = 0;
    if (!BitstreamUnpack((uint64_t *)v370, (int *)&__key, 2uLL))
    {
      v145 = (FILE *)*MEMORY[0x1E0C80C10];
      v146 = 7108;
      goto LABEL_167;
    }
    v140 = HIDWORD(v387);
    if (HIDWORD(v387))
    {
      v154 = 0;
      v155 = (__key + 1);
      do
      {
        v156 = *(_QWORD *)(v373 + 24);
        if (v156 + 1 > 8 * *(_QWORD *)(v373 + 16))
        {
          v145 = (FILE *)*MEMORY[0x1E0C80C10];
          v146 = 7113;
          goto LABEL_167;
        }
        v157 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v156 >> 3));
        *(_QWORD *)(v373 + 24) = v156 + 1;
        if (((v157 >> (~(_BYTE)v156 & 7)) & 1) != 0)
        {
          LODWORD(__p) = 0;
          if (!BitstreamUnpack((uint64_t *)v370, (int *)&__p, v155))
          {
            v145 = (FILE *)*MEMORY[0x1E0C80C10];
            v146 = 7116;
            goto LABEL_167;
          }
          v158 = ((_DWORD)__p + 1);
          if ((_DWORD)__p != -1)
          {
            v159 = *(_QWORD *)(*v372 + 32) + 168 * v154;
            do
            {
              v376[0] = 0;
              if (!BitstreamUnpack((uint64_t *)v370, v376, v155))
              {
                v145 = (FILE *)*MEMORY[0x1E0C80C10];
                v146 = 7123;
                goto LABEL_167;
              }
              if (!v376[0])
                geo::codec::accumulateStyleAttributeValue(*v372 + 1112, (uint64_t *)(v159 + 24), v159, 12, 0);
              --v158;
            }
            while (v158);
          }
          v140 = HIDWORD(v387);
        }
        ++v154;
      }
      while (v154 < v140);
    }
    v152 = *(_QWORD *)(v373 + 24);
    v102 = 8 * *(_QWORD *)(v373 + 16);
  }
  v160 = v152 + 1;
  if (v152 + 1 > v102)
  {
    v145 = (FILE *)*MEMORY[0x1E0C80C10];
    v146 = 7137;
    goto LABEL_167;
  }
  v161 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v152 >> 3));
  *(_QWORD *)(v373 + 24) = v160;
  if (((v161 >> (~(_BYTE)v152 & 7)) & 1) != 0)
  {
    v376[0] = 0;
    if (!BitstreamUnpack((uint64_t *)v370, v376, 2uLL))
    {
      v145 = (FILE *)*MEMORY[0x1E0C80C10];
      v146 = 7140;
      goto LABEL_167;
    }
    v162 = v376[0];
    v385 = 0;
    if (!BitstreamUnpack((uint64_t *)v370, (int *)&v385, 5uLL))
    {
      v145 = (FILE *)*MEMORY[0x1E0C80C10];
      v146 = 7144;
      goto LABEL_167;
    }
    v140 = HIDWORD(v387);
    if (HIDWORD(v387))
    {
      v163 = 0;
      v360 = (v162 + 1);
      v364 = v385 + 1;
      do
      {
        v164 = *(_QWORD *)(v373 + 24);
        if (v164 + 1 > 8 * *(_QWORD *)(v373 + 16))
        {
          v145 = (FILE *)*MEMORY[0x1E0C80C10];
          v146 = 7149;
          goto LABEL_167;
        }
        v165 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v164 >> 3));
        *(_QWORD *)(v373 + 24) = v164 + 1;
        if (((v165 >> (~(_BYTE)v164 & 7)) & 1) != 0)
        {
          v384 = 0;
          if (!BitstreamUnpack((uint64_t *)v370, (int *)&v384, v360))
          {
            v145 = (FILE *)*MEMORY[0x1E0C80C10];
            v146 = 7152;
            goto LABEL_167;
          }
          __p = 0;
          v166 = v384;
          if ((geo::codec::_makeSpaceForLabels((geo::codec::Allocator *)v384, &__p, v372) & 1) == 0)
          {
            v145 = (FILE *)*MEMORY[0x1E0C80C10];
            v146 = 7155;
            goto LABEL_167;
          }
          if ((_DWORD)v166)
          {
            v367 = *(_QWORD *)(*v372 + 856);
            v167 = *(_QWORD *)(*v372 + 864);
            v168 = (unint64_t)__p;
            v383 = 0;
            if (!BitstreamUnpack((uint64_t *)v370, (int *)&v383, v364))
              goto LABEL_245;
            v169 = v383;
            v362 = v167 - v367;
            if (v167 - v367 <= (unint64_t)v383)
            {
LABEL_246:
              v146 = 7163;
              goto LABEL_249;
            }
            v170 = (_QWORD *)*v372;
            if (v168 >= *(_QWORD *)(*v372 + 1056))
            {
LABEL_248:
              v146 = 7164;
              goto LABEL_249;
            }
            v171 = v170[131] + 24 * v168;
            *(_QWORD *)v171 = v367 + v383;
            *(_DWORD *)(v171 + 16) = 0;
            v172 = (const void *)v170[111];
            v173 = v170[112];
            *(_QWORD *)&__key = v169;
            v174 = bsearch(&__key, v172, v173, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
            v175 = v174 ? v174[2] : 0;
            v176 = *v372;
            v177 = (_QWORD *)(*(_QWORD *)(*v372 + 1048) + 24 * v168);
            v177[1] = v175;
            v178 = *(_QWORD *)(v176 + 32) + 168 * v163;
            *(_BYTE *)(v178 + 73) = 1;
            *(_DWORD *)(v178 + 56) = v168;
            *(_QWORD *)(v178 + 16) = *v177;
            if ((_DWORD)v166 != 1)
            {
              v179 = v166 - 1;
              v180 = 24 * v168;
              v181 = (char *)(v168 + 1);
              while (1)
              {
                v383 = 0;
                if (!BitstreamUnpack((uint64_t *)v370, (int *)&v383, v364))
                  break;
                v183 = v383;
                if (v362 <= v383)
                  goto LABEL_246;
                v184 = (_QWORD *)*v372;
                if ((unint64_t)v181 >= *(_QWORD *)(*v372 + 1056))
                  goto LABEL_248;
                v185 = v184[131] + v180;
                *(_QWORD *)(v185 + 24) = v367 + v383;
                *(_DWORD *)(v185 + 40) = 0;
                v186 = (const void *)v184[111];
                v187 = v184[112];
                *(_QWORD *)&__key = v183;
                v188 = bsearch(&__key, v186, v187, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
                if (v188)
                  v182 = v188[2];
                else
                  v182 = 0;
                *(_QWORD *)(*(_QWORD *)(*v372 + 1048) + v180 + 32) = v182;
                v180 += 24;
                ++v181;
                if (!--v179)
                  goto LABEL_197;
              }
LABEL_245:
              v146 = 7162;
LABEL_249:
              v145 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_167:
              Connectivity = fprintf(v145, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v146);
              v27 = 0;
              v28 = 0;
              v23 = 0;
              v10 = v373;
              goto LABEL_21;
            }
          }
LABEL_197:
          v140 = HIDWORD(v387);
        }
        ++v163;
      }
      while (v163 < v140);
    }
    v160 = *(_QWORD *)(v373 + 24);
    v102 = 8 * *(_QWORD *)(v373 + 16);
  }
  v189 = v160 + 1;
  if (v160 + 1 > v102)
  {
    v145 = (FILE *)*MEMORY[0x1E0C80C10];
    v146 = 7185;
    goto LABEL_167;
  }
  v190 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v160 >> 3));
  *(_QWORD *)(v373 + 24) = v189;
  if (((v190 >> (~(_BYTE)v160 & 7)) & 1) != 0)
  {
    LODWORD(__key) = 0;
    if (!BitstreamUnpack((uint64_t *)v370, (int *)&__key, 3uLL))
    {
      v145 = (FILE *)*MEMORY[0x1E0C80C10];
      v146 = 7188;
      goto LABEL_167;
    }
    if (HIDWORD(v387))
    {
      v191 = 0;
      v192 = (__key + 1);
      v193 = 151;
      while (1)
      {
        LODWORD(__p) = 0;
        if (!BitstreamUnpack((uint64_t *)v370, (int *)&__p, v192))
          break;
        *(_BYTE *)(*(_QWORD *)(*v372 + 32) + v193) = (_BYTE)__p;
        ++v191;
        v140 = HIDWORD(v387);
        v193 += 168;
        if (v191 >= HIDWORD(v387))
          goto LABEL_234;
      }
      v145 = (FILE *)*MEMORY[0x1E0C80C10];
      v146 = 7193;
      goto LABEL_167;
    }
    v140 = 0;
LABEL_234:
    v189 = *(_QWORD *)(v373 + 24);
    v102 = 8 * *(_QWORD *)(v373 + 16);
  }
  if (v189 + 1 > v102)
  {
    v145 = (FILE *)*MEMORY[0x1E0C80C10];
    v146 = 7200;
    goto LABEL_167;
  }
  v194 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v189 >> 3));
  *(_QWORD *)(v373 + 24) = v189 + 1;
  if (((v194 >> (~(_BYTE)v189 & 7)) & 1) != 0)
  {
    LODWORD(__key) = 0;
    if (!BitstreamUnpack((uint64_t *)v370, (int *)&__key, 3uLL))
    {
      v145 = (FILE *)*MEMORY[0x1E0C80C10];
      v146 = 7203;
      goto LABEL_167;
    }
    if (HIDWORD(v387))
    {
      v195 = 0;
      v196 = (__key + 1);
      v197 = 152;
      while (1)
      {
        LODWORD(__p) = 0;
        if (!BitstreamUnpack((uint64_t *)v370, (int *)&__p, v196))
          break;
        *(_BYTE *)(*(_QWORD *)(*v372 + 32) + v197) = (_BYTE)__p;
        ++v195;
        v140 = HIDWORD(v387);
        v197 += 168;
        if (v195 >= HIDWORD(v387))
          goto LABEL_252;
      }
      v145 = (FILE *)*MEMORY[0x1E0C80C10];
      v146 = 7208;
      goto LABEL_167;
    }
    v140 = 0;
  }
LABEL_252:
  v198 = *(_DWORD *)(v373 + 64);
  if (v198 < 0x34)
    goto LABEL_260;
  v199 = *(_QWORD *)(v373 + 24);
  if (v199 + 1 > 8 * *(_QWORD *)(v373 + 16))
  {
    v145 = (FILE *)*MEMORY[0x1E0C80C10];
    v146 = 7217;
    goto LABEL_167;
  }
  v200 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v199 >> 3));
  *(_QWORD *)(v373 + 24) = v199 + 1;
  if (((v200 >> (~(_BYTE)v199 & 7)) & 1) != 0)
  {
    geo::codec::decodeAttributeSet<GeoCodecsFeature>(1, (uint64_t *)v370, v140, *v372 + 1112, *(_QWORD *)(*v372 + 32), 168);
    v198 = *(_DWORD *)(v373 + 64);
  }
  if (v198 < 0x35)
  {
LABEL_260:
    v368 = 0;
    goto LABEL_261;
  }
  v201 = *(_QWORD *)(v373 + 24);
  if (v201 + 1 > 8 * *(_QWORD *)(v373 + 16))
  {
    v145 = (FILE *)*MEMORY[0x1E0C80C10];
    v146 = 7225;
    goto LABEL_167;
  }
  v224 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v201 >> 3));
  *(_QWORD *)(v373 + 24) = v201 + 1;
  if (((v224 >> (~(_BYTE)v201 & 7)) & 1) == 0)
  {
    v368 = 0;
    if (!v107)
      goto LABEL_261;
    goto LABEL_306;
  }
  v376[0] = 0;
  if (!BitstreamUnpack((uint64_t *)v370, v376, 5uLL))
  {
    v145 = (FILE *)*MEMORY[0x1E0C80C10];
    v146 = 7228;
    goto LABEL_167;
  }
  v225 = v376[0];
  v385 = 0;
  if (!BitstreamUnpack((uint64_t *)v370, (int *)&v385, 5uLL))
  {
    v145 = (FILE *)*MEMORY[0x1E0C80C10];
    v146 = 7232;
    goto LABEL_167;
  }
  v226 = v385;
  v384 = 0;
  if (!BitstreamUnpack((uint64_t *)v370, (int *)&v384, 5uLL))
  {
    v145 = (FILE *)*MEMORY[0x1E0C80C10];
    v146 = 7236;
    goto LABEL_167;
  }
  v383 = 0;
  v366 = v384 + 1;
  if (!BitstreamUnpack((uint64_t *)v370, (int *)&v383, v366))
  {
    v145 = (FILE *)*MEMORY[0x1E0C80C10];
    v146 = 7240;
    goto LABEL_167;
  }
  v227 = v383;
  v382 = 0;
  v228 = BitstreamUnpack((uint64_t *)v370, &v382, 5uLL);
  if (!v228)
  {
    v276 = (FILE *)*MEMORY[0x1E0C80C10];
    v277 = 7244;
LABEL_376:
    Connectivity = fprintf(v276, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v277);
    v368 = 0;
    goto LABEL_381;
  }
  v229 = v382;
  v230 = geo::codec::Allocator::instance((geo::codec::Allocator *)v228);
  v363 = v227 + 1;
  v368 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v230 + 16))(v230, 4 * v363, 8);
  if (!v368)
  {
    v276 = (FILE *)*MEMORY[0x1E0C80C10];
    v277 = 7248;
    goto LABEL_376;
  }
  if ((_DWORD)v363)
  {
    v231 = 0;
    do
    {
      LODWORD(__key) = 0;
      if (!BitstreamUnpack((uint64_t *)v370, (int *)&__key, (v229 + 1)))
      {
        v216 = (FILE *)*MEMORY[0x1E0C80C10];
        v217 = 7251;
        goto LABEL_380;
      }
      *(_DWORD *)(v368 + v231) = __key;
      v231 += 4;
    }
    while (4 * v363 != v231);
  }
  v232 = HIDWORD(v387);
  if (HIDWORD(v387))
  {
    v357 = (v225 + 1);
    v358 = 0;
    v233 = v226 + 1;
    v359 = *(_QWORD *)(*v372 + 856);
    v361 = *(_QWORD *)(*v372 + 864) - v359;
    do
    {
      v283 = *(_QWORD *)(v373 + 24);
      if (v283 + 1 > 8 * *(_QWORD *)(v373 + 16))
      {
        v216 = (FILE *)*MEMORY[0x1E0C80C10];
        v217 = 7260;
        goto LABEL_380;
      }
      v284 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v283 >> 3));
      *(_QWORD *)(v373 + 24) = v283 + 1;
      if (((v284 >> (~(_BYTE)v283 & 7)) & 1) != 0)
      {
        v285 = *(_QWORD *)(*v372 + 32);
        v381 = 0;
        if (!BitstreamUnpack((uint64_t *)v370, (int *)&v381, v357))
        {
          v216 = (FILE *)*MEMORY[0x1E0C80C10];
          v217 = 7265;
          goto LABEL_380;
        }
        __p = 0;
        v286 = v381;
        if ((geo::codec::_makeSpaceForShields((geo::codec::Allocator *)v381, &__p, v372) & 1) == 0)
        {
          v216 = (FILE *)*MEMORY[0x1E0C80C10];
          v217 = 7268;
LABEL_380:
          Connectivity = fprintf(v216, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v217);
LABEL_381:
          v27 = 0;
          v23 = 0;
          v28 = v368;
          v10 = v373;
          goto LABEL_21;
        }
        v287 = __p;
        v288 = v285 + 168 * v358;
        *(_DWORD *)(v288 + 60) = (_DWORD)__p;
        *(_BYTE *)(v288 + 72) = v286;
        if (v286)
        {
          v289 = 32 * (_QWORD)v287;
          do
          {
            v380 = 0;
            if (!BitstreamUnpack((uint64_t *)v370, (int *)&v380, v233))
            {
              v217 = 7275;
              goto LABEL_379;
            }
            v292 = v380;
            if (v361 <= v380)
            {
              v217 = 7276;
              goto LABEL_379;
            }
            v379 = 0;
            if (!BitstreamUnpack((uint64_t *)v370, (int *)&v379, v366))
            {
              v217 = 7279;
              goto LABEL_379;
            }
            v293 = v379;
            if (v379 >= v363)
            {
              v217 = 7280;
              goto LABEL_379;
            }
            v294 = *v372;
            v295 = *(_QWORD *)(*v372 + 1064) + v289;
            *(_QWORD *)v295 = v359 + v292;
            *(_DWORD *)(v295 + 16) = 0;
            v296 = *(const void **)(v294 + 888);
            v297 = *(_QWORD *)(v294 + 896);
            *(_QWORD *)&__key = v292;
            v298 = bsearch(&__key, v296, v297, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
            if (v298)
              v290 = v298[2];
            else
              v290 = 0;
            v291 = *(_QWORD *)(*v372 + 1064) + v289;
            *(_QWORD *)(v291 + 8) = v290;
            *(_QWORD *)(v291 + 24) = *(unsigned int *)(v368 + 4 * v293);
            v289 += 32;
            --v286;
          }
          while (v286);
        }
        v232 = HIDWORD(v387);
      }
      ++v358;
    }
    while (v358 < v232);
  }
  v198 = *(_DWORD *)(v373 + 64);
  if (v107)
  {
LABEL_306:
    if (v198 >= 0x37)
    {
      v238 = *(_QWORD *)(v373 + 24);
      v239 = v238 + 1;
      v240 = 8 * *(_QWORD *)(v373 + 16);
      if (v238 + 1 > v240)
      {
        v216 = (FILE *)*MEMORY[0x1E0C80C10];
        v217 = 7297;
        goto LABEL_380;
      }
      v255 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v238 >> 3));
      *(_QWORD *)(v373 + 24) = v239;
      if (((v255 >> (~(_BYTE)v238 & 7)) & 1) != 0)
      {
        v256 = HIDWORD(v387);
        if (HIDWORD(v387))
        {
          v257 = 0;
          v258 = 0;
          v259 = v386;
          v260 = v387;
          do
          {
            v262 = *(_QWORD *)(v373 + 24);
            if (v262 + 1 > 8 * *(_QWORD *)(v373 + 16))
            {
              v216 = (FILE *)*MEMORY[0x1E0C80C10];
              v217 = 7301;
              goto LABEL_380;
            }
            v263 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v262 >> 3));
            *(_QWORD *)(v373 + 24) = v262 + 1;
            if (((v263 >> (~(_BYTE)v262 & 7)) & 1) != 0)
            {
              LODWORD(__key) = 0;
              if (!BitstreamUnpack((uint64_t *)v370, (int *)&__key, v260))
              {
                v217 = 7304;
                goto LABEL_379;
              }
              v264 = __key;
              if (__key >= v259)
              {
                v217 = 7305;
                goto LABEL_379;
              }
              LOBYTE(v265) = v106;
              if (!v118)
              {
                LOBYTE(v265) = v106;
                if (*(_DWORD *)(v29 + 4 * __key))
                {
                  v266 = *(_QWORD *)(v373 + 24);
                  if (v266 + 1 > 8 * *(_QWORD *)(v373 + 16))
                  {
                    v216 = (FILE *)*MEMORY[0x1E0C80C10];
                    v217 = 7311;
                    goto LABEL_380;
                  }
                  v267 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v266 >> 3));
                  *(_QWORD *)(v373 + 24) = v266 + 1;
                  v265 = (v267 >> (~(_BYTE)v266 & 7)) & 1;
                }
              }
              v261 = *(_QWORD *)(*v372 + 32) + v257;
              *(_BYTE *)(v261 + 161) = v264;
              *(_BYTE *)(v261 + 162) = v265;
              v256 = HIDWORD(v387);
            }
            ++v258;
            v257 += 168;
          }
          while (v258 < v256);
          v239 = *(_QWORD *)(v373 + 24);
          v240 = 8 * *(_QWORD *)(v373 + 16);
        }
      }
      if (v239 + 1 > v240)
      {
        v216 = (FILE *)*MEMORY[0x1E0C80C10];
        v217 = 7323;
        goto LABEL_380;
      }
      v282 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 8) + (v239 >> 3));
      *(_QWORD *)(v373 + 24) = v239 + 1;
      if (((v282 >> (~(_BYTE)v239 & 7)) & 1) != 0)
      {
        LODWORD(__key) = 0;
        if (!BitstreamUnpack((uint64_t *)v370, (int *)&__key, v387))
        {
          v217 = 7326;
LABEL_379:
          v216 = (FILE *)*MEMORY[0x1E0C80C10];
          goto LABEL_380;
        }
        if (__key >= v386)
        {
          v217 = 7327;
          goto LABEL_379;
        }
        *(_DWORD *)(v29 + 4 * __key) = -1;
      }
    }
  }
LABEL_261:
  if (!v107)
    goto LABEL_266;
  v202 = HIDWORD(v387);
  if (HIDWORD(v387))
  {
    v203 = (_BYTE *)(*(_QWORD *)(*v372 + 32) + 161);
    do
    {
      v204 = *(_DWORD *)(v29 + 4 * *(v203 - 3));
      *(v203 - 4) = v204 != -1;
      *(v203 - 3) = v204;
      v205 = *(_DWORD *)(v29 + 4 * *v203);
      *(v203 - 1) = v205 != -1;
      *v203 = v205;
      v203 += 168;
      --v202;
    }
    while (v202);
  }
  if (*(_DWORD *)(v373 + 64) < 0x3Bu)
    goto LABEL_266;
  v213 = *(_QWORD *)(v373 + 24);
  v214 = v213 + 1;
  v215 = 8 * *(_QWORD *)(v373 + 16);
  if (v213 + 1 > v215)
  {
    v216 = (FILE *)*MEMORY[0x1E0C80C10];
    v217 = 7346;
    goto LABEL_380;
  }
  v221 = *(_QWORD *)(v373 + 8);
  v222 = *(unsigned __int8 *)(v221 + (v213 >> 3));
  *(_QWORD *)(v373 + 24) = v214;
  if (((v222 >> (~(_BYTE)v213 & 7)) & 1) == 0)
    goto LABEL_266;
  v223 = v213 + 2;
  if (v223 > v215)
  {
    v216 = (FILE *)*MEMORY[0x1E0C80C10];
    v217 = 7349;
    goto LABEL_380;
  }
  v234 = *(unsigned __int8 *)(v221 + (v214 >> 3));
  *(_QWORD *)(v373 + 24) = v223;
  if (((v234 >> (~(_BYTE)v214 & 7)) & 1) != 0)
  {
    LODWORD(__key) = 0;
    if (!BitstreamUnpackVar32((uint64_t *)v370, (int *)&__key))
    {
      v216 = (FILE *)*MEMORY[0x1E0C80C10];
      v217 = 7352;
      goto LABEL_380;
    }
    if (HIDWORD(v387))
    {
      v235 = 0;
      v236 = __key;
      v237 = (_DWORD *)(*(_QWORD *)(*v372 + 32) + 128);
      do
      {
        *v237 = v236;
        v237 += 42;
        ++v235;
      }
      while (v235 < HIDWORD(v387));
    }
LABEL_266:
    v365 = 0;
LABEL_267:
    v206 = v372;
    v10 = v373;
    if ((*(_QWORD *)(v373 + 24) & 7) != 0)
      v207 = *(_QWORD *)(v373 + 48) + (*(_QWORD *)(v373 + 24) >> 3) + 1;
    else
      v207 = *(_QWORD *)(v373 + 48) + (*(_QWORD *)(v373 + 24) >> 3);
    *(_QWORD *)(v373 + 48) = v207;
    *(_BYTE *)(v373 + 32) = 0;
    v27 = v365;
    v28 = v368;
    v208 = v369;
    if (*(_DWORD *)(v373 + 64) >= 0x48u)
    {
      v209 = v207 + 1;
      v210 = *(_QWORD *)(v373 + 56);
      if (v207 + 1 > v210)
      {
        v211 = (FILE *)*MEMORY[0x1E0C80C10];
        v212 = 7394;
        goto LABEL_439;
      }
      v218 = *(_QWORD *)(v373 + 40);
      v219 = *(unsigned __int8 *)(v218 + v207);
      *(_QWORD *)(v373 + 48) = v209;
      if (!v219)
        goto LABEL_410;
      v220 = v207 + 9;
      if (v207 + 9 > v210)
      {
        v211 = (FILE *)*MEMORY[0x1E0C80C10];
        v212 = 7397;
        goto LABEL_439;
      }
      v371 = *(double *)(v218 + v209);
      *(_QWORD *)(v373 + 48) = v220;
      if (v207 + 10 > v210)
      {
        v211 = (FILE *)*MEMORY[0x1E0C80C10];
        v212 = 7400;
        goto LABEL_439;
      }
      v241 = *(unsigned __int8 *)(v218 + v220);
      *(_QWORD *)(v373 + 48) = v207 + 10;
      v385 = 0;
      if ((geo::codec::chapterReadVarUint32((_QWORD *)v373, &v385) & 1) == 0)
      {
        v211 = (FILE *)*MEMORY[0x1E0C80C10];
        v212 = 7403;
        goto LABEL_439;
      }
      if (v241 == 1)
        v242 = -v385;
      else
        v242 = v385;
      v384 = 0;
      if ((geo::codec::chapterReadVarUint32((_QWORD *)v373, &v384) & 1) == 0)
      {
        v211 = (FILE *)*MEMORY[0x1E0C80C10];
        v212 = 7408;
        goto LABEL_439;
      }
      v243 = *(_QWORD *)(v373 + 48);
      v244 = v243 + v384;
      if (v244 > *(_QWORD *)(v373 + 56))
      {
        v211 = (FILE *)*MEMORY[0x1E0C80C10];
        v212 = 7411;
        goto LABEL_439;
      }
      v269 = *(_QWORD *)(v373 + 40);
      *(_QWORD *)(v373 + 48) = v244;
      v270 = *(_QWORD *)(*(_QWORD *)(*v372 + 792) + 16);
      __p = 0;
      v376[0] = 0;
      std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&__key, v270, v376);
      mgcl::iarray::Decoder::Decoder((mgcl::iarray::Decoder *)v376);
      v271 = (geo::codec::Allocator *)mgcl::iarray::Decoder::decompress((uint64_t **)v376, (const unsigned __int8 *)(v269 + v243), v384, (unint64_t *)&__p, (int32x4_t *)__key);
      if ((_DWORD)v271)
      {
        v272 = (FILE *)*MEMORY[0x1E0C80C10];
        v273 = 7420;
        goto LABEL_356;
      }
      v278 = geo::codec::Allocator::instance(v271);
      v279 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v278 + 16))(v278, 4 * v270, 8);
      if (v279)
      {
        if (v270)
        {
          v280 = __key;
          if (v270 < 8)
          {
            v281 = 0;
            goto LABEL_405;
          }
          v281 = v270 & 0xFFFFFFFFFFFFFFF8;
          v299 = vdupq_n_s32(v242);
          v300 = (int32x4_t *)(__key + 16);
          v301 = (float32x4_t *)(v279 + 16);
          v302 = v270 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v303 = vaddq_s32(v300[-1], v299);
            v304 = vaddq_s32(*v300, v299);
            v305.i64[0] = v303.i32[0];
            v305.i64[1] = v303.i32[1];
            v306 = vcvtq_f64_s64(v305);
            v305.i64[0] = v303.i32[2];
            v305.i64[1] = v303.i32[3];
            v307 = vcvtq_f64_s64(v305);
            v305.i64[0] = v304.i32[0];
            v305.i64[1] = v304.i32[1];
            v308 = vcvtq_f64_s64(v305);
            v305.i64[0] = v304.i32[2];
            v305.i64[1] = v304.i32[3];
            v301[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v306, v371)), vmulq_n_f64(v307, v371));
            *v301 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v308, v371)), vmulq_n_f64(vcvtq_f64_s64(v305), v371));
            v300 += 2;
            v301 += 2;
            v302 -= 8;
          }
          while (v302);
          if (v270 != v281)
          {
LABEL_405:
            v309 = v270 - v281;
            v310 = 4 * v281;
            v311 = (float *)(v279 + 4 * v281);
            v312 = (int *)(v280 + v310);
            do
            {
              v313 = *v312++;
              v314 = v371 * (double)(int)(v313 + v242);
              *v311++ = v314;
              --v309;
            }
            while (v309);
          }
        }
        v275 = 0;
        *(_QWORD *)(*(_QWORD *)(*v372 + 792) + 24) = v279;
        v274 = 1;
      }
      else
      {
        v272 = (FILE *)*MEMORY[0x1E0C80C10];
        v273 = 7423;
LABEL_356:
        fprintf(v272, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v273);
        v274 = 0;
        v275 = 6;
      }
      mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)v376);
      Connectivity = (uint64_t)std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&__key);
      if (!v274)
        goto LABEL_447;
      v209 = *(_QWORD *)(v373 + 48);
      v210 = *(_QWORD *)(v373 + 56);
LABEL_410:
      v315 = v209 + 1;
      if (v209 + 1 > v210)
      {
        v211 = (FILE *)*MEMORY[0x1E0C80C10];
        v212 = 7434;
        goto LABEL_439;
      }
      v316 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 40) + v209);
      *(_QWORD *)(v373 + 48) = v315;
      if (v316)
      {
        v385 = 0;
        v317 = geo::codec::chapterReadVarUint32((_QWORD *)v373, &v385);
        if ((v317 & 1) == 0)
        {
          v211 = (FILE *)*MEMORY[0x1E0C80C10];
          v212 = 7437;
          goto LABEL_439;
        }
        v318 = *(_QWORD *)(v373 + 48);
        v319 = v318 + v385;
        if (v319 > *(_QWORD *)(v373 + 56))
        {
          v211 = (FILE *)*MEMORY[0x1E0C80C10];
          v212 = 7440;
          goto LABEL_439;
        }
        v320 = *(_QWORD *)(v373 + 40);
        *(_QWORD *)(v373 + 48) = v319;
        __key = 0uLL;
        *(_QWORD *)&v378 = 0;
        *((_QWORD *)&v378 + 1) = geo::codec::Allocator::instance((geo::codec::Allocator *)v317);
        std::vector<GeoCodecsVectorTileRawPoint,geo::StdAllocator<GeoCodecsVectorTileRawPoint,geo::codec::Allocator>>::reserve((uint64_t)&__key, 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(*v372 + 40) - *(_QWORD *)(*v372 + 32)) >> 3));
        v321 = *(_QWORD *)(*v372 + 32);
        if (*(_QWORD *)(*v372 + 40) == v321)
        {
          v324 = 0;
        }
        else
        {
          v322 = 0;
          v323 = 96;
          do
          {
            std::vector<GeoCodecsVectorTileRawPoint,geo::StdAllocator<GeoCodecsVectorTileRawPoint,geo::codec::Allocator>>::push_back[abi:ne180100]((uint64_t)&__key, (_QWORD *)(v26 + 8 * *(unsigned int *)(v321 + v323)));
            ++v322;
            v321 = *(_QWORD *)(*v372 + 32);
            v324 = 0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(*v372 + 40) - v321) >> 3);
            v323 += 168;
          }
          while (v322 < v324);
        }
        *(_QWORD *)v376 = 0;
        std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&__p, v324, v376);
        v325 = mgcl::muid::decompress((mgcl::muid *)(v320 + v318), (const char *)v385, __key, (const int *)8, (uint64_t)__p, (unint64_t *)8, (v375 - (_BYTE *)__p) >> 3);
        if (v325)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 7454);
          v275 = 6;
        }
        else
        {
          v327 = *(_QWORD *)(*v372 + 32);
          v326 = *(_QWORD *)(*v372 + 40);
          if (v326 != v327)
          {
            v328 = (v326 - v327) / 168;
            v329 = (uint64_t *)__p;
            if (v328 <= 1)
              v328 = 1;
            v330 = (_QWORD *)(v327 + 104);
            do
            {
              v331 = *v329++;
              *v330 = v331;
              v330 += 21;
              --v328;
            }
            while (v328);
          }
          v275 = 0;
        }
        std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&__p);
        Connectivity = (uint64_t)std::vector<GeoCodecsVectorTileRawPoint,geo::StdAllocator<GeoCodecsVectorTileRawPoint,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&__key);
        if (v325)
          goto LABEL_447;
      }
      v206 = v372;
      v10 = v373;
      v27 = v365;
      v28 = v368;
      v208 = v369;
      if (*(_DWORD *)(v373 + 64) >= 0x49u)
      {
        v376[0] = 0;
        v385 = 0;
        if ((geo::codec::chapterReadVarUint32((_QWORD *)v373, (unsigned int *)v376) & 1) == 0)
        {
          v212 = 7466;
          goto LABEL_438;
        }
        if (!geo::codec::chapterReadVarUint32((_QWORD *)v373, &v385))
        {
          v212 = 7467;
          goto LABEL_438;
        }
        v332 = *(_QWORD *)(v373 + 48);
        v333 = v332 + 1;
        if ((unint64_t)(v332 + 1) > *(_QWORD *)(v373 + 56))
        {
          v334 = (FILE *)*MEMORY[0x1E0C80C10];
          v335 = 7470;
          goto LABEL_446;
        }
        v336 = *(unsigned __int8 *)(*(_QWORD *)(v373 + 40) + v332);
        *(_QWORD *)(v373 + 48) = v333;
        if (!v336)
          goto LABEL_476;
        v384 = 0;
        if ((geo::codec::chapterReadVarUint32((_QWORD *)v373, &v384) & 1) != 0)
        {
          v337 = *(_QWORD *)(v373 + 48);
          v338 = v337 + v384;
          if (v338 > *(_QWORD *)(v373 + 56))
          {
            v334 = (FILE *)*MEMORY[0x1E0C80C10];
            v335 = 7476;
            goto LABEL_446;
          }
          v339 = *(_QWORD *)(v373 + 40);
          *(_QWORD *)(v373 + 48) = v338;
          v341 = *(_QWORD *)(*v372 + 32);
          v340 = *(_QWORD *)(*v372 + 40);
          v342 = 0xCF3CF3CF3CF3CF3DLL * ((v340 - v341) >> 3);
          *(_QWORD *)&__key = 0;
          std::vector<unsigned long long>::vector((int64x2_t **)&__p, v342, (unint64_t *)&__key);
          __key = 0u;
          v378 = 0u;
          v343 = mgcl::ints::IntDecompressor<unsigned long long>::decompress((uint64_t *)&__key, (unsigned __int8 *)(v339 + v337), v384, v376[0], v385, v342, (uint64x2_t *)__p);
          if (v343)
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 7483);
            v275 = 6;
            goto LABEL_473;
          }
          if (v340 != v341)
          {
            v344 = (char *)__p;
            v345 = *(_QWORD *)(*v372 + 32);
            if (v342 <= 1)
              v346 = 1;
            else
              v346 = 0xCF3CF3CF3CF3CF3DLL * ((v340 - v341) >> 3);
            if (v346 < 2)
            {
              v347 = 0;
              goto LABEL_470;
            }
            v347 = v346 & 0xFFFFFFFFFFFFFFFELL;
            v348 = (char *)__p + 8;
            v349 = (_BYTE *)(v345 + 323);
            v350 = v346 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v351 = *(v348 - 8);
              v352 = *v348;
              v348 += 16;
              *(v349 - 168) = v351 & 1;
              *v349 = v352 & 1;
              v349 += 336;
              v350 -= 2;
            }
            while (v350);
            if (v346 != v347)
            {
LABEL_470:
              v353 = v346 - v347;
              v354 = (_BYTE *)(v345 + 168 * v347 + 155);
              v355 = &v344[8 * v347];
              do
              {
                v356 = *v355;
                v355 += 8;
                *v354 = v356 & 1;
                v354 += 168;
                --v353;
              }
              while (v353);
            }
          }
          v275 = 0;
LABEL_473:
          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&__key);
          Connectivity = (uint64_t)__p;
          if (__p)
          {
            v375 = __p;
            operator delete(__p);
          }
          if (!v343)
          {
LABEL_476:
            v27 = v365;
            v28 = v368;
            v206 = v372;
            v10 = v373;
            v208 = v369;
            goto LABEL_449;
          }
        }
        else
        {
          v334 = (FILE *)*MEMORY[0x1E0C80C10];
          v335 = 7473;
LABEL_446:
          Connectivity = fprintf(v334, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v335);
          v275 = 6;
        }
LABEL_447:
        if (v275 == 6)
          goto LABEL_440;
        v27 = v365;
        v28 = v368;
        v206 = v372;
        v10 = v373;
        v208 = v369;
      }
    }
LABEL_449:
    Connectivity = geo::codec::_readConnectivity(v208, v206);
    v23 = Connectivity;
    goto LABEL_21;
  }
  LODWORD(__key) = 0;
  if (!BitstreamUnpackBitcount((uint64_t *)v370, &__key, 5uLL))
  {
    v216 = (FILE *)*MEMORY[0x1E0C80C10];
    v217 = 7362;
    goto LABEL_380;
  }
  LODWORD(__p) = 0;
  if (!BitstreamUnpackBitcount((uint64_t *)v370, &__p, 5uLL))
  {
    v216 = (FILE *)*MEMORY[0x1E0C80C10];
    v217 = 7364;
    goto LABEL_380;
  }
  v376[0] = 0;
  v245 = __key;
  v246 = BitstreamUnpack((uint64_t *)v370, v376, __key);
  if (!v246)
  {
    Connectivity = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 7367);
    v365 = 0;
    goto LABEL_440;
  }
  v247 = geo::codec::Allocator::instance((geo::codec::Allocator *)v246);
  v248 = v376[0];
  v249 = 4 * v376[0];
  v365 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v247 + 16))(v247, v249, 8);
  if (v248)
  {
    v250 = 0;
    v251 = __p;
    do
    {
      if (!BitstreamUnpack((uint64_t *)v370, (int *)(v365 + v250), v251))
      {
        v211 = (FILE *)*MEMORY[0x1E0C80C10];
        v212 = 7371;
        goto LABEL_439;
      }
      v250 += 4;
    }
    while (v249 != v250);
  }
  v252 = HIDWORD(v387);
  if (!HIDWORD(v387))
    goto LABEL_267;
  v253 = 0;
  v254 = 0;
  while (2)
  {
    v268 = *(_QWORD *)(*v372 + 32);
    if (!(*(unsigned __int8 *)(v268 + v253 + 157) | *(unsigned __int8 *)(v268 + v253 + 160)))
    {
LABEL_345:
      ++v254;
      v253 += 168;
      if (v254 >= v252)
        goto LABEL_267;
      continue;
    }
    break;
  }
  v385 = 0;
  if (!BitstreamUnpack((uint64_t *)v370, (int *)&v385, v245))
  {
    v212 = 7378;
    goto LABEL_438;
  }
  if (v385 <= v248)
  {
    if (v385 < v248)
      *(_DWORD *)(v268 + v253 + 128) = *(_DWORD *)(v365 + 4 * v385);
    v252 = HIDWORD(v387);
    goto LABEL_345;
  }
  v212 = 7379;
LABEL_438:
  v211 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_439:
  Connectivity = fprintf(v211, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v212);
LABEL_440:
  v23 = 0;
  v27 = v365;
  v28 = v368;
  v10 = v373;
LABEL_21:
  v30 = geo::codec::Allocator::instance((geo::codec::Allocator *)Connectivity);
  v31 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v30 + 40))(v30, v29, 0);
  v32 = geo::codec::Allocator::instance(v31);
  v33 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v32 + 40))(v32, v28, 0);
  v34 = geo::codec::Allocator::instance(v33);
  v35 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v34 + 40))(v34, v27, 0);
  v36 = geo::codec::Allocator::instance(v35);
  v37 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v36 + 40))(v36, v26, 0);
  if (*(_BYTE *)v10)
  {
    v38 = geo::codec::Allocator::instance(v37);
    v37 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v38 + 40))(v38, *(_QWORD *)(v10 + 40), 0);
  }
  v39 = geo::codec::Allocator::instance(v37);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v39 + 40))(v39, v10, 0);
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
  if (*((_QWORD *)&v388 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v44 = (char *)v389;
  v43 = v390;
  v45.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v46 = rep;
  __p = v44;
  if (v44)
  {
    *(_QWORD *)&__key = &__p;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>((uint64_t)&v43[26].var5, (uint64_t *)&__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&__key)+ 4) = (double)((v45.__d_.__rep_ - v46) / 1000) * 0.001;
  }
  v47 = v391;
  if (v391)
  {
    v48 = (unint64_t *)&v391->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  return v23 & 1;
}

void sub_1886F3364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a30);
  if (__p)
  {
    operator delete(__p);
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100](v32 - 136);
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v32 - 120));
    _Unwind_Resume(a1);
  }
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100](v32 - 136);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v32 - 120));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readCoverage(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25;
  unint64_t *v26;
  unint64_t v27;
  const char *v28;
  const char **v29;

  v2 = a1[1];
  if (!v2)
    return 1;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 119)
  {
    v4 = ++v5;
    if (v2 <= v5)
      return 1;
  }
  v6 = geo::codec::chapterAt((uint64_t)a1, v5, 119, *a2 + 1912);
  if (!v6)
    return 1;
  v7 = v6;
  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v12.__d_.__rep_;
  v14 = *(_QWORD *)(v7 + 48);
  v15 = *(_QWORD *)(v7 + 56);
  v16 = v15 >= v14;
  v17 = v15 - v14;
  if (v16)
  {
    *(_BYTE *)(v7 + 32) = 1;
    v21 = (unsigned __int8 *)(*(_QWORD *)(v7 + 40) + v14);
    *(_QWORD *)(v7 + 16) = v17;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 8) = v21;
    if ((v17 & 0x1FFFFFFFFFFFFFFFLL) != 0)
    {
      v22 = *v21;
      v19 = 1;
      *(_QWORD *)(v7 + 24) = 1;
      *(_BYTE *)(*a2 + 1712) = v22 >> 7;
      *(_QWORD *)(v7 + 48) = v14 + 1;
      *(_BYTE *)(v7 + 32) = 0;
      if (!*(_BYTE *)v7)
        goto LABEL_20;
      goto LABEL_19;
    }
    v18 = 6636;
  }
  else
  {
    v18 = 6632;
  }
  v12.__d_.__rep_ = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v18);
  v19 = 0;
  if (*(_BYTE *)v7)
  {
LABEL_19:
    v23 = geo::codec::Allocator::instance((geo::codec::Allocator *)v12.__d_.__rep_);
    v12.__d_.__rep_ = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 40))(v23, *(_QWORD *)(v7 + 40), 0);
  }
LABEL_20:
  v24 = geo::codec::Allocator::instance((geo::codec::Allocator *)v12.__d_.__rep_);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 40))(v24, v7, 0);
  v25 = std::chrono::steady_clock::now().__d_.__rep_;
  v28 = "ChapterCoverage";
  v29 = &v28;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)&v28, (uint64_t)&std::piecewise_construct, (uint64_t **)&v29)+ 4) = (double)((v25 - rep) / 1000) * 0.001;
  if (v8)
  {
    v26 = (unint64_t *)&v8->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v19;
}

void sub_1886F371C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readVenues(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  unint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  std::__shared_weak_count *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  unsigned int v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  FILE *v106;
  int v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned __int8 v113;
  FILE *v114;
  int v115;
  int v116;
  unint64_t v117;
  unsigned __int8 v118;
  unsigned __int8 v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __n128 v169;
  unint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unsigned __int8 v194;
  unsigned __int8 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  _QWORD *v202;
  std::__shared_weak_count *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  int v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  int v223;
  unint64_t v224;
  unsigned int v225;
  int v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  int v230;
  unint64_t v231;
  int v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  int v236;
  unint64_t v237;
  int v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  FILE *v243;
  int v244;
  int v245;
  unint64_t v246;
  int v247;
  _QWORD *v248;
  unsigned int v249;
  unint64_t v250;
  unint64_t v251;
  unsigned int v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  unint64_t v260;
  unint64_t v261;
  unsigned int v262;
  unint64_t v263;
  unint64_t v264;
  unsigned __int8 v265;
  uint64_t v266;
  geo::read_write_lock *v267;
  const char *v268;
  malloc_zone_t *v269;
  int v270;
  unint64_t v271;
  unint64_t v272;
  unsigned __int8 v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  const char *v277;
  _QWORD *v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  geo::read_write_lock *v282;
  const char *v283;
  malloc_zone_t *v284;
  int v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  int v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  int v302;
  unint64_t v303;
  unsigned int v304;
  unint64_t v305;
  unsigned int v306;
  unsigned int v307;
  unint64_t v308;
  unint64_t v309;
  unsigned int v310;
  unint64_t v311;
  unint64_t v312;
  const char *v313;
  uint64_t v314;
  geo::read_write_lock *v315;
  const char *v316;
  malloc_zone_t *v317;
  unint64_t v318;
  unsigned int v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  int v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  int v332;
  unint64_t v333;
  unsigned int v334;
  unint64_t v335;
  unsigned int v336;
  unsigned int v337;
  unint64_t v338;
  unint64_t v339;
  unsigned int v340;
  unint64_t v341;
  unint64_t v342;
  const char *v343;
  int v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  geo::read_write_lock *v349;
  const char *v350;
  malloc_zone_t *zone;
  uint64_t v352;
  geo::read_write_lock *v353;
  const char *v354;
  malloc_zone_t *v355;
  uint64_t v356;
  geo::read_write_lock *v357;
  const char *v358;
  malloc_zone_t *v359;
  uint64_t v360;
  geo::read_write_lock *v361;
  const char *v362;
  malloc_zone_t *v363;
  uint64_t v364;
  geo::read_write_lock *v365;
  const char *v366;
  malloc_zone_t *v367;
  int v368;
  unint64_t v369;
  int v370;
  unsigned int v371;
  unint64_t v372;
  unint64_t v373;
  unsigned int v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  int v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  int v382;
  unint64_t v383;
  int v384;
  unsigned int v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unsigned int v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unsigned int v402;
  unint64_t v403;
  unsigned __int8 v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  int v409;
  uint64_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  unsigned int v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  int v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  uint64_t v429;
  geo::read_write_lock *v430;
  const char *v431;
  malloc_zone_t *v432;
  uint64_t v433;
  geo::read_write_lock *v434;
  const char *v435;
  malloc_zone_t *v436;
  int v437;
  unint64_t v438;
  int v439;
  unsigned int v440;
  unint64_t v441;
  unint64_t v442;
  unsigned int v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  unsigned int v452;
  unint64_t v453;
  unint64_t v454;
  int v455;
  unsigned int v456;
  unsigned int v457;
  unint64_t v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t v463;
  int v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  uint64_t v468;
  geo::read_write_lock *v469;
  const char *v470;
  malloc_zone_t *v471;
  int v472;
  unint64_t v473;
  int v474;
  unsigned int v475;
  unint64_t v476;
  unint64_t v477;
  unsigned int v478;
  unint64_t v479;
  unint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  int v486;
  unint64_t v487;
  unint64_t v488;
  unint64_t v489;
  int v490;
  unint64_t v491;
  int v492;
  unsigned int v493;
  unint64_t v494;
  unint64_t v495;
  unsigned int v496;
  unint64_t v497;
  unint64_t v498;
  uint64_t v499;
  uint64_t v500;
  int v501;
  unint64_t v502;
  unint64_t v503;
  unint64_t v504;
  unsigned int v505;
  unint64_t v506;
  unint64_t v507;
  int v508;
  unsigned int v509;
  unsigned int v510;
  unint64_t v511;
  unint64_t v512;
  uint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  int v517;
  unint64_t v518;
  unint64_t v519;
  unint64_t v520;
  int v521;
  unint64_t v522;
  int v523;
  unsigned int v524;
  unint64_t v525;
  unint64_t v526;
  unsigned int v527;
  unint64_t v528;
  unint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  unint64_t v536;
  unint64_t v537;
  unint64_t v538;
  int v539;
  unint64_t v540;
  int v541;
  unsigned int v542;
  unint64_t v543;
  unint64_t v544;
  unsigned int v545;
  unint64_t v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  geo::read_write_lock *v551;
  const char *v552;
  malloc_zone_t *v553;
  int v554;
  unint64_t v555;
  unint64_t v556;
  unint64_t v557;
  unsigned int v558;
  unint64_t v559;
  unint64_t v560;
  int v561;
  unsigned int v562;
  unsigned int v563;
  unint64_t v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unint64_t v568;
  unint64_t v569;
  int v570;
  unint64_t v571;
  unint64_t v572;
  unint64_t v573;
  int v574;
  unint64_t v575;
  int v576;
  unsigned int v577;
  uint64_t v578;
  unint64_t v579;
  unint64_t v580;
  unsigned int v581;
  uint64_t v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  int v590;
  uint64_t v591;
  unint64_t v592;
  unint64_t v593;
  unint64_t v594;
  int v595;
  unint64_t v596;
  int v597;
  unsigned int v598;
  unint64_t v599;
  unint64_t v600;
  unsigned int v601;
  unint64_t v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unsigned int v607;
  int v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  unint64_t v613;
  unint64_t v614;
  unint64_t v615;
  int v616;
  unint64_t v617;
  uint64_t v618;
  unsigned int v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  int v623;
  unint64_t v624;
  unint64_t v625;
  unint64_t v626;
  int v627;
  unint64_t v628;
  _QWORD *v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t v632;
  unint64_t v633;
  unsigned int v634;
  uint64_t v635;
  uint64_t v636;
  unint64_t v637;
  unint64_t v638;
  unsigned int v639;
  uint64_t v643;
  uint64_t v644;
  float64x2_t v645;
  uint64_t v646;
  uint64_t v647;
  int64x2_t v648;
  float32x2_t v649;
  unint64_t v650;
  unint64_t v651;
  unint64_t v652;
  float32x4_t v653;
  float32x4_t v654;
  uint64_t v655;
  unint64_t v656;
  unint64_t v657;
  uint64_t v658;
  unint64_t v659;
  uint64_t v660;
  unint64_t v661;
  unint64_t v662;
  unint64_t v663;
  BOOL v664;
  unint64_t v666;
  float *v667;
  unint64_t v668;
  float *v669;
  unint64_t v670;
  float32x2_t *v671;
  uint64_t v672;
  uint64_t v673;
  double v674;
  float64x2_t v675;
  double v676;
  float v677;
  float v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  int64x2_t v686;
  float32x2_t v687;
  unint64_t v688;
  unint64_t v689;
  unint64_t v690;
  float32x4_t v691;
  float32x4_t v692;
  unint64_t v693;
  unint64_t v694;
  uint64_t v695;
  unint64_t v696;
  uint64_t v697;
  unint64_t v698;
  unint64_t v699;
  unint64_t v700;
  BOOL v701;
  BOOL v702;
  unint64_t v703;
  unint64_t v704;
  float32x2_t *v705;
  float *v706;
  unint64_t v707;
  float *v708;
  unint64_t v709;
  uint64_t v710;
  unint64_t v711;
  unsigned int v712;
  uint64_t v713;
  uint64_t v714;
  int v715;
  int v716;
  uint64_t v717;
  uint64_t v718;
  unsigned int v719;
  _QWORD *v720;
  uint64_t v721;
  unint64_t v722;
  uint64_t v723;
  unint64_t v724;
  unsigned int v725;
  uint64_t v726;
  unint64_t v727;
  uint64_t v728;
  unint64_t v729;
  unsigned int v730;
  uint64_t v731;
  unint64_t v732;
  uint64_t v733;
  unint64_t v734;
  unsigned int v735;
  uint64_t v736;
  int v737;
  unsigned int v738;
  uint64_t v739;
  uint64_t v740;
  unint64_t v741;
  unsigned int v742;
  _QWORD *v743;
  unint64_t v744;
  unsigned int v745;
  float v746;
  unint64_t v747;
  unsigned int v748;
  uint64_t v749;
  uint64_t v750;
  unint64_t v751;
  float v752;
  unint64_t v753;
  unsigned int v754;
  uint64_t v755;
  unint64_t v756;
  unsigned int v757;
  float v758;
  unint64_t v759;
  unsigned int v760;
  uint64_t v761;
  unsigned __int8 v762;
  unint64_t v763;
  unint64_t v764;
  unint64_t v765;
  unint64_t v766;
  uint64_t v767;
  uint64_t v768;
  unsigned int v769;
  unint64_t v770;
  uint64_t v771;
  unint64_t v772;
  std::__shared_weak_count *v773;
  std::__shared_weak_count *v774;
  unint64_t v775;
  geo::codec::Allocator *v776;
  uint64_t v777;
  uint64_t v778;
  std::chrono::steady_clock::time_point v779;
  uint64_t v780;
  int v781;
  int v782;
  const char *v783;
  uint64_t *v784[2];
  float32x4x2_t v785;
  float32x4x2_t v786;
  float32x4x2_t v787;
  float32x4x2_t v788;
  float32x4x2_t v789;
  float32x4x2_t v790;

  v3 = a1[1];
  if (!v3)
    return 1;
  v6 = 0;
  v7 = 0;
  while (*(_WORD *)(*a1 + 16 * v6) != 137)
  {
    v6 = ++v7;
    if (v3 <= v7)
      return 1;
  }
  v8 = geo::codec::chapterAt((uint64_t)a1, v7, 137, *a3 + 1912);
  if (!v8)
    return 1;
  v9 = v8;
  v10 = (std::__shared_weak_count *)a3[1];
  v780 = *a3;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v779.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v13 = *(_QWORD *)(v9 + 48);
  v14 = *(_QWORD *)(v9 + 56);
  v15 = v14 - v13;
  if (v14 < v13)
  {
    v16 = 3378;
LABEL_18:
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v16);
    v17 = 0;
    goto LABEL_19;
  }
  v19 = *a3;
  v20 = *(_QWORD *)(*a3 + 856);
  v21 = *(_QWORD *)(*a3 + 864);
  v22 = (unsigned __int8 *)(*(_QWORD *)(v9 + 40) + v13);
  *(_QWORD *)(v9 + 8) = v22;
  *(_BYTE *)(v9 + 32) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  v23 = (unint64_t *)(v9 + 24);
  *(_QWORD *)(v9 + 16) = v15;
  v24 = 8 * v15;
  if (!v24)
  {
    v16 = 3382;
    goto LABEL_18;
  }
  v25 = *v22;
  *v23 = 5;
  v26 = v25 >> 3;
  if (v26 + 6 > v24)
  {
    v16 = 3385;
    goto LABEL_18;
  }
  LODWORD(v32) = 0;
  v771 = v20;
  v772 = v21 - v20;
  v33 = v26 + 1;
  v34 = 5;
  v775 = v26 + 1;
  do
  {
    v35 = 8 - (v34 & 7);
    if (v33 < v35)
      v35 = v33;
    v32 = (v22[v34 >> 3] >> (8 - (v34 & 7) - v35)) & ~(-1 << v35) | ((_DWORD)v32 << v35);
    v34 += v35;
    *v23 = v34;
    v33 -= v35;
  }
  while (v33);
  v36 = *(_QWORD *)(v19 + 184);
  v37 = *(_OWORD **)(v19 + 192);
  v38 = 0x8E38E38E38E38E39 * (((uint64_t)v37 - v36) >> 4);
  v39 = v32 - v38;
  v776 = (geo::codec::Allocator *)(v9 + 8);
  if (v32 <= v38)
  {
    if (v32 >= v38)
      goto LABEL_76;
    v49 = (_OWORD *)(v36 + 144 * v32);
    while (v37 != v49)
    {
      v50 = (std::__shared_weak_count *)*((_QWORD *)v37 - 14);
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = (std::__shared_weak_count *)*((_QWORD *)v37 - 17);
      if (v53)
        std::__shared_weak_count::__release_weak(v53);
      v37 -= 9;
    }
LABEL_58:
    *(_QWORD *)(v19 + 192) = v49;
    goto LABEL_76;
  }
  v40 = *(_QWORD *)(v19 + 200);
  if (0x8E38E38E38E38E39 * ((v40 - (uint64_t)v37) >> 4) >= v39)
  {
    v49 = &v37[9 * v39];
    v54 = -16 * (((uint64_t)v37 - v36) >> 4) + 144 * v32;
    do
    {
      if (v37)
      {
        v37[7] = 0uLL;
        v37[8] = 0uLL;
        v37[5] = 0uLL;
        v37[6] = 0uLL;
        v37[3] = 0uLL;
        v37[4] = 0uLL;
        v37[1] = 0uLL;
        v37[2] = 0uLL;
        *v37 = 0uLL;
      }
      v37 += 9;
      v54 -= 144;
    }
    while (v54);
    goto LABEL_58;
  }
  v41 = 0x8E38E38E38E38E39 * ((v40 - v36) >> 4);
  v42 = 2 * v41;
  if (2 * v41 <= v32)
    v42 = v32;
  if (v41 >= 0xE38E38E38E38E3)
    v43 = 0x1C71C71C71C71C7;
  else
    v43 = v42;
  v44 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v19 + 208) + 16))(*(_QWORD *)(v19 + 208), 144 * v43, 8);
  v45 = (_OWORD *)(v44 + 144 * v38);
  v46 = v44 + 144 * v32;
  v47 = 144 * v32 - 144 * v38;
  v48 = v45;
  do
  {
    if (v48)
    {
      v48[7] = 0uLL;
      v48[8] = 0uLL;
      v48[5] = 0uLL;
      v48[6] = 0uLL;
      v48[3] = 0uLL;
      v48[4] = 0uLL;
      v48[1] = 0uLL;
      v48[2] = 0uLL;
      *v48 = 0uLL;
    }
    v48 += 9;
    v47 -= 144;
  }
  while (v47);
  v55 = v44 + 144 * v43;
  v56 = *(_QWORD *)(v19 + 184);
  v57 = *(_QWORD *)(v19 + 192);
  if (v57 == v56)
  {
    *(_QWORD *)(v19 + 184) = v45;
    *(_QWORD *)(v19 + 192) = v46;
    v67 = *(_QWORD *)(v19 + 200);
    *(_QWORD *)(v19 + 200) = v55;
  }
  else
  {
    v773 = v10;
    v58 = 0;
    do
    {
      v59 = &v45[v58 / 0x10];
      v60 = v57 + v58;
      *(v59 - 9) = *(_OWORD *)(v57 + v58 - 144);
      *(_QWORD *)(v60 - 144) = 0;
      *(_QWORD *)(v60 - 136) = 0;
      *(v59 - 8) = *(_OWORD *)(v57 + v58 - 128);
      *((_QWORD *)v59 - 14) = *(_QWORD *)(v57 + v58 - 112);
      *(_QWORD *)(v60 - 120) = 0;
      *(_QWORD *)(v60 - 112) = 0;
      v61 = *(_OWORD *)(v57 + v58 - 104);
      v62 = *(_OWORD *)(v57 + v58 - 88);
      *((_DWORD *)v59 - 18) = *(_DWORD *)(v57 + v58 - 72);
      *(_OWORD *)((char *)v59 - 88) = v62;
      *(_OWORD *)((char *)v59 - 104) = v61;
      v63 = *(_OWORD *)(v57 + v58 - 64);
      *((_QWORD *)v59 - 6) = *(_QWORD *)(v57 + v58 - 48);
      *(v59 - 4) = v63;
      v64 = *(_OWORD *)(v57 + v58 - 40);
      v65 = *(_OWORD *)(v57 + v58 - 24);
      *((_QWORD *)v59 - 1) = *(_QWORD *)(v57 + v58 - 8);
      *(_OWORD *)((char *)v59 - 24) = v65;
      *(_OWORD *)((char *)v59 - 40) = v64;
      v58 -= 144;
    }
    while (v57 + v58 != v56);
    v57 = *(_QWORD *)(v19 + 184);
    v66 = *(_QWORD *)(v19 + 192);
    *(_QWORD *)(v19 + 184) = &v45[v58 / 0x10];
    *(_QWORD *)(v19 + 192) = v46;
    v67 = *(_QWORD *)(v19 + 200);
    *(_QWORD *)(v19 + 200) = v55;
    while (v66 != v57)
    {
      v68 = *(std::__shared_weak_count **)(v66 - 112);
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = *(std::__shared_weak_count **)(v66 - 136);
      if (v71)
        std::__shared_weak_count::__release_weak(v71);
      v66 -= 144;
    }
    v10 = v773;
  }
  if (v57)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v19 + 208) + 40))(*(_QWORD *)(v19 + 208), v57, v67 - v57);
LABEL_76:
  {
    v348 = operator new();
    *(_QWORD *)(v348 + 16) = 0x99AFC36000000008;
    *(_QWORD *)(v348 + 24) = "GeoCodec";
    *(_OWORD *)(v348 + 32) = xmmword_189CFDB80;
    *(_QWORD *)v348 = &off_1E1BF6690;
    *(_QWORD *)(v348 + 8) = "GeoCodec";
    *(_OWORD *)(v348 + 56) = 0u;
    *(_OWORD *)(v348 + 72) = 0u;
    *(_OWORD *)(v348 + 88) = 0u;
    *(_OWORD *)(v348 + 104) = 0u;
    *(_OWORD *)(v348 + 120) = 0u;
    *(_OWORD *)(v348 + 136) = 0u;
    *(_OWORD *)(v348 + 152) = 0u;
    *(_OWORD *)(v348 + 168) = 0u;
    *(_OWORD *)(v348 + 184) = 0u;
    *(_OWORD *)(v348 + 200) = 0u;
    *(_OWORD *)(v348 + 216) = 0u;
    *(_OWORD *)(v348 + 232) = 0u;
    *(_QWORD *)(v348 + 248) = 0;
    v349 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v348 + 56), 0);
    if ((_DWORD)v349)
      geo::read_write_lock::logFailure(v349, (uint64_t)"initialization", v350);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v348 + 48) = zone;
    malloc_set_zone_name(zone, "GeoCodec");
    *(_QWORD *)(v348 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    geo::codec::Allocator::instance(void)::alloc = v348;
  }
  v777 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                              + 16))(geo::codec::Allocator::instance(void)::alloc, 0x71C71C71C71C71C8 * ((uint64_t)(*(_QWORD *)(*a3 + 192) - *(_QWORD *)(*a3 + 184)) >> 4), 8);
  {
    v352 = operator new();
    *(_QWORD *)(v352 + 16) = 0x99AFC36000000008;
    *(_QWORD *)(v352 + 24) = "GeoCodec";
    *(_OWORD *)(v352 + 32) = xmmword_189CFDB80;
    *(_QWORD *)v352 = &off_1E1BF6690;
    *(_QWORD *)(v352 + 8) = "GeoCodec";
    *(_OWORD *)(v352 + 56) = 0u;
    *(_OWORD *)(v352 + 72) = 0u;
    *(_OWORD *)(v352 + 88) = 0u;
    *(_OWORD *)(v352 + 104) = 0u;
    *(_OWORD *)(v352 + 120) = 0u;
    *(_OWORD *)(v352 + 136) = 0u;
    *(_OWORD *)(v352 + 152) = 0u;
    *(_OWORD *)(v352 + 168) = 0u;
    *(_OWORD *)(v352 + 184) = 0u;
    *(_OWORD *)(v352 + 200) = 0u;
    *(_OWORD *)(v352 + 216) = 0u;
    *(_OWORD *)(v352 + 232) = 0u;
    *(_QWORD *)(v352 + 248) = 0;
    v353 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v352 + 56), 0);
    if ((_DWORD)v353)
      geo::read_write_lock::logFailure(v353, (uint64_t)"initialization", v354);
    v355 = malloc_create_zone(0, 0);
    *(_QWORD *)(v352 + 48) = v355;
    malloc_set_zone_name(v355, "GeoCodec");
    *(_QWORD *)(v352 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    geo::codec::Allocator::instance(void)::alloc = v352;
  }
  v778 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                              + 16))(geo::codec::Allocator::instance(void)::alloc, 0x71C71C71C71C71C8 * ((uint64_t)(*(_QWORD *)(*a3 + 192) - *(_QWORD *)(*a3 + 184)) >> 4), 8);
  if (!v777)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 3389);
    v17 = 0;
    v104 = 0;
    v105 = 0;
    goto LABEL_152;
  }
  if (!v778)
  {
    v106 = (FILE *)*MEMORY[0x1E0C80C10];
    v107 = 3390;
    goto LABEL_139;
  }
  v774 = v10;
  if ((_DWORD)v32)
  {
    v74 = 0;
    while (1)
    {
      v77 = *a3;
      v78 = a3[1];
      v79 = *(_QWORD *)(*a3 + 184);
      if (v78)
      {
        v80 = (unint64_t *)(v78 + 16);
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      v82 = (_QWORD *)(v79 + 144 * v74);
      v83 = (std::__shared_weak_count *)v82[1];
      *v82 = v77;
      v82[1] = v78;
      if (v83)
        std::__shared_weak_count::__release_weak(v83);
      v84 = *(_QWORD *)(v9 + 24);
      v85 = 8 * *(_QWORD *)(v9 + 16);
      if (v84 + 64 > v85)
        break;
      v86 = 0;
      v87 = *(_QWORD *)v776;
      v88 = 64;
      do
      {
        v89 = 8 - (v84 & 7);
        if (v88 < v89)
          v89 = v88;
        v86 = (*(unsigned __int8 *)(v87 + (v84 >> 3)) >> (8 - (v84 & 7) - v89)) & (unint64_t)~(-1 << v89) | (v86 << v89);
        v84 += v89;
        *v23 = v84;
        v88 -= v89;
      }
      while (v88);
      *(_QWORD *)(v79 + 144 * v74 + 104) = v86;
      if (v84 + 5 > v85)
        goto LABEL_141;
      v90 = 0;
      v91 = 5;
      do
      {
        v92 = 8 - (v84 & 7);
        if (v91 < v92)
          v92 = v91;
        v90 = (*(unsigned __int8 *)(v87 + (v84 >> 3)) >> (8 - (v84 & 7) - v92)) & ~(-1 << v92) | (v90 << v92);
        v84 += v92;
        *v23 = v84;
        v91 -= v92;
      }
      while (v91);
      v93 = (v90 + 1);
      if (v84 + v93 > v85)
      {
LABEL_141:
        v114 = (FILE *)*MEMORY[0x1E0C80C10];
        v115 = 3400;
        goto LABEL_150;
      }
      if (v90 != -1)
      {
        v94 = 0;
        do
        {
          v95 = 8 - (v84 & 7);
          if (v93 < v95)
            v95 = v93;
          v94 = (*(unsigned __int8 *)(v87 + (v84 >> 3)) >> (8 - (v84 & 7) - v95)) & ~(-1 << v95) | (v94 << v95);
          v84 += v95;
          *v23 = v84;
          v93 -= v95;
        }
        while (v93);
        if (v94)
        {
          if (v84 + 1 > v85)
            goto LABEL_141;
          v96 = *(unsigned __int8 *)(v87 + (v84 >> 3));
          *v23 = v84 + 1;
          if (((v96 >> (~(_BYTE)v84 & 7)) & 1) != 0)
            LODWORD(v93) = -v94;
          else
            LODWORD(v93) = v94;
          ++v84;
        }
        else
        {
          LODWORD(v93) = 0;
        }
      }
      if (v84 + 5 > v85)
        goto LABEL_142;
      v97 = 0;
      v98 = 5;
      do
      {
        v99 = 8 - (v84 & 7);
        if (v98 < v99)
          v99 = v98;
        v97 = (*(unsigned __int8 *)(v87 + (v84 >> 3)) >> (8 - (v84 & 7) - v99)) & ~(-1 << v99) | (v97 << v99);
        v84 += v99;
        *v23 = v84;
        v98 -= v99;
      }
      while (v98);
      v100 = (v97 + 1);
      if (v84 + v100 > v85)
      {
LABEL_142:
        v114 = (FILE *)*MEMORY[0x1E0C80C10];
        v115 = 3401;
        goto LABEL_150;
      }
      if (v97 == -1)
        goto LABEL_82;
      v101 = 0;
      do
      {
        v102 = 8 - (v84 & 7);
        if (v100 < v102)
          v102 = v100;
        v101 = (*(unsigned __int8 *)(v87 + (v84 >> 3)) >> (8 - (v84 & 7) - v102)) & ~(-1 << v102) | (v101 << v102);
        v84 += v102;
        *v23 = v84;
        v100 -= v102;
      }
      while (v100);
      if (!v101)
      {
LABEL_82:
        v75 = 0;
      }
      else
      {
        if (v84 + 1 > v85)
          goto LABEL_142;
        v103 = *(unsigned __int8 *)(v87 + (v84 >> 3));
        *v23 = v84 + 1;
        if (((v103 >> (~(_BYTE)v84 & 7)) & 1) != 0)
          v75 = -v101;
        else
          v75 = v101;
        ++v84;
      }
      v76 = 8 * v74;
      *(_QWORD *)(v777 + v76) = (int)v93;
      ++v74;
      *(_QWORD *)(v778 + v76) = v75;
      if (v74 == v32)
        goto LABEL_132;
    }
    v114 = (FILE *)*MEMORY[0x1E0C80C10];
    v115 = 3397;
LABEL_150:
    fprintf(v114, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v115);
    v17 = 0;
    v104 = 0;
    v105 = 0;
    if ((v118 & 1) == 0)
      goto LABEL_371;
    goto LABEL_151;
  }
  v84 = *(_QWORD *)(v9 + 24);
  v85 = 8 * *(_QWORD *)(v9 + 16);
LABEL_132:
  if (v84 + 5 > v85)
    goto LABEL_138;
  v108 = 0;
  v109 = *(_QWORD *)v776;
  v110 = 5;
  do
  {
    v111 = 8 - (v84 & 7);
    if (v110 < v111)
      v111 = v110;
    v108 = (*(unsigned __int8 *)(v109 + (v84 >> 3)) >> (8 - (v84 & 7) - v111)) & ~(-1 << v111) | (v108 << v111);
    v84 += v111;
    *v23 = v84;
    v110 -= v111;
  }
  while (v110);
  v112 = (v108 + 1);
  if (v84 + v112 > v85)
  {
LABEL_138:
    v106 = (FILE *)*MEMORY[0x1E0C80C10];
    v107 = 3407;
    goto LABEL_139;
  }
  v116 = 0;
  if ((_DWORD)v112)
  {
    do
    {
      v117 = 8 - (v84 & 7);
      if (v112 < v117)
        v117 = v112;
      v116 = (*(unsigned __int8 *)(v109 + (v84 >> 3)) >> (8 - (v84 & 7) - v117)) & ~(-1 << v117) | (v116 << v117);
      v84 += v117;
      *v23 = v84;
      v112 -= v117;
    }
    while (v112);
  }
  if (v84 + 5 > v85)
  {
    v106 = (FILE *)*MEMORY[0x1E0C80C10];
    v107 = 3410;
    goto LABEL_139;
  }
  v122 = 0;
  v123 = 5;
  do
  {
    v124 = 8 - (v84 & 7);
    if (v123 < v124)
      v124 = v123;
    v122 = (*(unsigned __int8 *)(v109 + (v84 >> 3)) >> (8 - (v84 & 7) - v124)) & ~(-1 << v124) | (v122 << v124);
    v84 += v124;
    *v23 = v84;
    v123 -= v124;
  }
  while (v123);
  if (v84 + 5 > v85)
  {
    v106 = (FILE *)*MEMORY[0x1E0C80C10];
    v107 = 3412;
    goto LABEL_139;
  }
  v125 = 0;
  v126 = (v122 + 1);
  v127 = 5;
  do
  {
    v128 = 8 - (v84 & 7);
    if (v127 < v128)
      v128 = v127;
    v125 = (*(unsigned __int8 *)(v109 + (v84 >> 3)) >> (8 - (v84 & 7) - v128)) & ~(-1 << v128) | (v125 << v128);
    v84 += v128;
    *v23 = v84;
    v127 -= v128;
  }
  while (v127);
  if (v116)
  {
    v129 = 0;
    while (1)
    {
      v130 = *(_QWORD *)(v9 + 24);
      v131 = 8 * *(_QWORD *)(v9 + 16);
      if (v130 + v775 > v131)
      {
        v107 = 3418;
        goto LABEL_217;
      }
      LODWORD(v132) = 0;
      v133 = *(_QWORD *)v776;
      v134 = v775;
      do
      {
        v135 = 8 - (v130 & 7);
        if (v134 < v135)
          v135 = v134;
        v132 = (*(unsigned __int8 *)(v133 + (v130 >> 3)) >> (8 - (v130 & 7) - v135)) & ~(-1 << v135) | ((_DWORD)v132 << v135);
        v130 += v135;
        *v23 = v130;
        v134 -= v135;
      }
      while (v134);
      if (v130 + v126 > v131)
      {
        v107 = 3419;
        goto LABEL_217;
      }
      v136 = 0;
      if ((_DWORD)v126)
      {
        v137 = *(_QWORD *)v776;
        v138 = v126;
        do
        {
          v139 = 8 - (v130 & 7);
          if (v138 < v139)
            v139 = v138;
          v136 = (*(unsigned __int8 *)(v137 + (v130 >> 3)) >> (8 - (v130 & 7) - v139)) & ~(-1 << v139) | (v136 << v139);
          v130 += v139;
          *v23 = v130;
          v138 -= v139;
        }
        while (v138);
      }
      v140 = *a3;
      v141 = *(_QWORD *)(*a3 + 184);
      if (0x8E38E38E38E38E39 * ((*(_QWORD *)(*a3 + 192) - v141) >> 4) <= v132)
      {
        v107 = 3420;
        goto LABEL_217;
      }
      v143 = v140 + 504;
      v142 = *(_QWORD *)(v140 + 504);
      if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v143 + 8) - v142) >> 5) <= (unint64_t)v136)
        break;
      v144 = v141 + 144 * v132;
      v145 = v142 + 224 * v136;
      *(_QWORD *)(v145 + 120) = *(_QWORD *)(v144 + 104);
      *(_QWORD *)(v144 + 112) = *(_QWORD *)(v145 + 88);
      if (++v129 == v116)
      {
        v84 = *(_QWORD *)(v9 + 24);
        v85 = 8 * *(_QWORD *)(v9 + 16);
        goto LABEL_188;
      }
    }
    v107 = 3421;
LABEL_217:
    v106 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_139:
    fprintf(v106, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v107);
    v17 = 0;
    v104 = 0;
    v105 = 0;
    if ((v113 & 1) == 0)
      goto LABEL_371;
    goto LABEL_151;
  }
LABEL_188:
  if (v84 + 5 > v85)
  {
    v106 = (FILE *)*MEMORY[0x1E0C80C10];
    v107 = 3430;
    goto LABEL_139;
  }
  v766 = v126;
  v146 = 0;
  v764 = (v125 + 1);
  v147 = *(_QWORD *)v776;
  v148 = 5;
  do
  {
    v149 = 8 - (v84 & 7);
    if (v148 < v149)
      v149 = v148;
    v146 = (*(unsigned __int8 *)(v147 + (v84 >> 3)) >> (8 - (v84 & 7) - v149)) & ~(-1 << v149) | (v146 << v149);
    v84 += v149;
    *v23 = v84;
    v148 -= v149;
  }
  while (v148);
  v150 = (v146 + 1);
  if (v84 + v150 > v85)
  {
    v114 = (FILE *)*MEMORY[0x1E0C80C10];
    v115 = 3433;
    goto LABEL_150;
  }
  v765 = v150;
  v151 = 0;
  if ((_DWORD)v150)
  {
    v152 = v150;
    do
    {
      v153 = 8 - (v84 & 7);
      if (v152 < v153)
        v153 = v152;
      v151 = (*(unsigned __int8 *)(v147 + (v84 >> 3)) >> (8 - (v84 & 7) - v153)) & ~(-1 << v153) | (v151 << v153);
      v84 += v153;
      *v23 = v84;
      v152 -= v153;
    }
    while (v152);
  }
  v154 = *a3;
  v155 = v151;
  v156 = *(_QWORD *)(*a3 + 216);
  v157 = *(_QWORD *)(*a3 + 224);
  v158 = 0x86BCA1AF286BCA1BLL * ((v157 - v156) >> 3);
  _CF = v151 >= v158;
  v160 = v151 - v158;
  if (v160 != 0 && _CF)
  {
    v161 = *(_QWORD *)(v154 + 232);
    if (0x86BCA1AF286BCA1BLL * ((v161 - v157) >> 3) < v160)
    {
      v162 = 0x86BCA1AF286BCA1BLL * ((v161 - v156) >> 3);
      v163 = 2 * v162;
      if (2 * v162 <= v155)
        v163 = v155;
      if (v162 >= 0xD79435E50D7943)
        v164 = 0x1AF286BCA1AF286;
      else
        v164 = v163;
      v165 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v154 + 240) + 16))(*(_QWORD *)(v154 + 240), 152 * v164, 8);
      v166 = v165 + 152 * v158;
      v167 = v165 + 152 * v155;
      v168 = 152 * v155 - 152 * v158;
      v169 = 0uLL;
      v170 = v166;
      do
      {
        if (v170)
        {
          *(_QWORD *)(v170 + 144) = 0;
          *(_OWORD *)(v170 + 112) = 0uLL;
          *(_OWORD *)(v170 + 128) = 0uLL;
          *(_OWORD *)(v170 + 80) = 0uLL;
          *(_OWORD *)(v170 + 96) = 0uLL;
          *(_OWORD *)(v170 + 48) = 0uLL;
          *(_OWORD *)(v170 + 64) = 0uLL;
          *(_OWORD *)(v170 + 16) = 0uLL;
          *(_OWORD *)(v170 + 32) = 0uLL;
          *(_OWORD *)v170 = 0uLL;
        }
        v170 += 152;
        v168 -= 152;
      }
      while (v168);
      v178 = v165 + 152 * v164;
      v179 = *(_QWORD *)(v154 + 216);
      v180 = *(_QWORD *)(v154 + 224);
      if (v180 == v179)
      {
        *(_QWORD *)(v154 + 216) = v166;
        *(_QWORD *)(v154 + 224) = v167;
        v189 = *(_QWORD *)(v154 + 232);
        *(_QWORD *)(v154 + 232) = v178;
      }
      else
      {
        v181 = 0;
        do
        {
          v182 = v166 + v181;
          v183 = v180 + v181;
          *(_OWORD *)(v182 - 152) = *(_OWORD *)(v180 + v181 - 152);
          *(_QWORD *)(v183 - 152) = 0;
          *(_QWORD *)(v183 - 144) = 0;
          *(_OWORD *)(v182 - 136) = *(_OWORD *)(v180 + v181 - 136);
          *(_QWORD *)(v182 - 120) = *(_QWORD *)(v180 + v181 - 120);
          *(_QWORD *)(v183 - 128) = 0;
          *(_QWORD *)(v183 - 120) = 0;
          v184 = *(_OWORD *)(v180 + v181 - 112);
          v185 = *(_OWORD *)(v180 + v181 - 96);
          *(_DWORD *)(v182 - 80) = *(_DWORD *)(v180 + v181 - 80);
          *(_OWORD *)(v182 - 112) = v184;
          *(_OWORD *)(v182 - 96) = v185;
          v186 = *(_OWORD *)(v180 + v181 - 72);
          *(_QWORD *)(v182 - 56) = *(_QWORD *)(v180 + v181 - 56);
          *(_OWORD *)(v182 - 72) = v186;
          v169 = *(__n128 *)(v180 + v181 - 48);
          v187 = *(_OWORD *)(v180 + v181 - 16);
          *(_OWORD *)(v182 - 32) = *(_OWORD *)(v180 + v181 - 32);
          *(_OWORD *)(v182 - 16) = v187;
          *(__n128 *)(v182 - 48) = v169;
          v181 -= 152;
        }
        while (v180 + v181 != v179);
        v180 = *(_QWORD *)(v154 + 216);
        v188 = *(_QWORD *)(v154 + 224);
        *(_QWORD *)(v154 + 216) = v166 + v181;
        *(_QWORD *)(v154 + 224) = v167;
        v189 = *(_QWORD *)(v154 + 232);
        *(_QWORD *)(v154 + 232) = v178;
        while (v188 != v180)
        {
          v190 = *(std::__shared_weak_count **)(v188 - 120);
          if (v190)
          {
            v191 = (unint64_t *)&v190->__shared_owners_;
            do
              v192 = __ldaxr(v191);
            while (__stlxr(v192 - 1, v191));
            if (!v192)
            {
              ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
              std::__shared_weak_count::__release_weak(v190);
            }
          }
          v193 = *(std::__shared_weak_count **)(v188 - 144);
          if (v193)
            std::__shared_weak_count::__release_weak(v193);
          v188 -= 152;
        }
      }
      if (v180)
        (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(**(_QWORD **)(v154 + 240) + 40))(*(_QWORD *)(v154 + 240), v180, v189 - v180, v169);
      goto LABEL_252;
    }
    v176 = v157 + 152 * v160;
    v177 = 152 * v155 - 152 * v158;
    do
    {
      if (v157)
      {
        *(_QWORD *)(v157 + 144) = 0;
        *(_OWORD *)(v157 + 112) = 0uLL;
        *(_OWORD *)(v157 + 128) = 0uLL;
        *(_OWORD *)(v157 + 80) = 0uLL;
        *(_OWORD *)(v157 + 96) = 0uLL;
        *(_OWORD *)(v157 + 48) = 0uLL;
        *(_OWORD *)(v157 + 64) = 0uLL;
        *(_OWORD *)(v157 + 16) = 0uLL;
        *(_OWORD *)(v157 + 32) = 0uLL;
        *(_OWORD *)v157 = 0uLL;
      }
      v157 += 152;
      v177 -= 152;
    }
    while (v177);
    v157 = v176;
  }
  else
  {
    if (_CF)
      goto LABEL_252;
    v171 = v156 + 152 * v155;
    if (v157 != v171)
    {
      do
      {
        v172 = *(std::__shared_weak_count **)(v157 - 120);
        if (v172)
        {
          v173 = (unint64_t *)&v172->__shared_owners_;
          do
            v174 = __ldaxr(v173);
          while (__stlxr(v174 - 1, v173));
          if (!v174)
          {
            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
            std::__shared_weak_count::__release_weak(v172);
          }
        }
        v175 = *(std::__shared_weak_count **)(v157 - 144);
        if (v175)
          std::__shared_weak_count::__release_weak(v175);
        v157 -= 152;
      }
      while (v157 != v171);
      v157 = v171;
    }
  }
  *(_QWORD *)(v154 + 224) = v157;
LABEL_252:
  {
    v429 = operator new();
    *(_QWORD *)(v429 + 16) = 0x99AFC36000000008;
    *(_QWORD *)(v429 + 24) = "GeoCodec";
    *(_OWORD *)(v429 + 32) = xmmword_189CFDB80;
    *(_QWORD *)v429 = &off_1E1BF6690;
    *(_QWORD *)(v429 + 8) = "GeoCodec";
    *(_OWORD *)(v429 + 56) = 0u;
    *(_OWORD *)(v429 + 72) = 0u;
    *(_OWORD *)(v429 + 88) = 0u;
    *(_OWORD *)(v429 + 104) = 0u;
    *(_OWORD *)(v429 + 120) = 0u;
    *(_OWORD *)(v429 + 136) = 0u;
    *(_OWORD *)(v429 + 152) = 0u;
    *(_OWORD *)(v429 + 168) = 0u;
    *(_OWORD *)(v429 + 184) = 0u;
    *(_OWORD *)(v429 + 200) = 0u;
    *(_OWORD *)(v429 + 216) = 0u;
    *(_OWORD *)(v429 + 232) = 0u;
    *(_QWORD *)(v429 + 248) = 0;
    v430 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v429 + 56), 0);
    if ((_DWORD)v430)
      geo::read_write_lock::logFailure(v430, (uint64_t)"initialization", v431);
    v432 = malloc_create_zone(0, 0);
    *(_QWORD *)(v429 + 48) = v432;
    malloc_set_zone_name(v432, "GeoCodec");
    *(_QWORD *)(v429 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    geo::codec::Allocator::instance(void)::alloc = v429;
  }
  v768 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                              + 16))(geo::codec::Allocator::instance(void)::alloc, 0x1AF286BCA1AF286CLL * ((uint64_t)(*(_QWORD *)(*a3 + 224) - *(_QWORD *)(*a3 + 216)) >> 3), 8);
  {
    v433 = operator new();
    *(_QWORD *)(v433 + 16) = 0x99AFC36000000008;
    *(_QWORD *)(v433 + 24) = "GeoCodec";
    *(_OWORD *)(v433 + 32) = xmmword_189CFDB80;
    *(_QWORD *)v433 = &off_1E1BF6690;
    *(_QWORD *)(v433 + 8) = "GeoCodec";
    *(_OWORD *)(v433 + 56) = 0u;
    *(_OWORD *)(v433 + 72) = 0u;
    *(_OWORD *)(v433 + 88) = 0u;
    *(_OWORD *)(v433 + 104) = 0u;
    *(_OWORD *)(v433 + 120) = 0u;
    *(_OWORD *)(v433 + 136) = 0u;
    *(_OWORD *)(v433 + 152) = 0u;
    *(_OWORD *)(v433 + 168) = 0u;
    *(_OWORD *)(v433 + 184) = 0u;
    *(_OWORD *)(v433 + 200) = 0u;
    *(_OWORD *)(v433 + 216) = 0u;
    *(_OWORD *)(v433 + 232) = 0u;
    *(_QWORD *)(v433 + 248) = 0;
    v434 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v433 + 56), 0);
    if ((_DWORD)v434)
      geo::read_write_lock::logFailure(v434, (uint64_t)"initialization", v435);
    v436 = malloc_create_zone(0, 0);
    *(_QWORD *)(v433 + 48) = v436;
    malloc_set_zone_name(v436, "GeoCodec");
    *(_QWORD *)(v433 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    geo::codec::Allocator::instance(void)::alloc = v433;
  }
  v767 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                              + 16))(geo::codec::Allocator::instance(void)::alloc, 0x1AF286BCA1AF286CLL * ((uint64_t)(*(_QWORD *)(*a3 + 224) - *(_QWORD *)(*a3 + 216)) >> 3), 8);
  v196 = *a3;
  v197 = *(_QWORD *)(*a3 + 216);
  if (*(_QWORD *)(*a3 + 224) != v197)
  {
    v198 = 0;
    v769 = 0;
    while (1)
    {
      v199 = a3[1];
      if (v199)
      {
        v200 = (unint64_t *)(v199 + 16);
        do
          v201 = __ldxr(v200);
        while (__stxr(v201 + 1, v200));
      }
      v202 = (_QWORD *)(v197 + 152 * v198);
      v203 = (std::__shared_weak_count *)v202[1];
      *v202 = v196;
      v202[1] = v199;
      if (v203)
        std::__shared_weak_count::__release_weak(v203);
      v204 = *(_QWORD *)(v9 + 24);
      v205 = v775;
      v206 = 8 * *(_QWORD *)(v9 + 16);
      if (v204 + v775 > v206)
      {
        v244 = 3444;
        goto LABEL_369;
      }
      LODWORD(v207) = 0;
      v208 = *(_QWORD *)v776;
      do
      {
        v209 = 8 - (v204 & 7);
        if (v205 < v209)
          v209 = v205;
        v207 = (*(unsigned __int8 *)(v208 + (v204 >> 3)) >> (8 - (v204 & 7) - v209)) & ~(-1 << v209) | ((_DWORD)v207 << v209);
        v204 += v209;
        *v23 = v204;
        v205 -= v209;
      }
      while (v205);
      v210 = v197 + 152 * v198;
      *(_QWORD *)(v210 + 144) = v207;
      if (v204 + 64 > v206)
      {
        v244 = 3447;
        goto LABEL_369;
      }
      v211 = 0;
      v212 = (unint64_t *)(v210 + 104);
      v213 = *(_QWORD *)v776;
      v214 = 64;
      do
      {
        v215 = 8 - (v204 & 7);
        if (v214 < v215)
          v215 = v214;
        v211 = (*(unsigned __int8 *)(v213 + (v204 >> 3)) >> (8 - (v204 & 7) - v215)) & (unint64_t)~(-1 << v215) | (v211 << v215);
        v204 += v215;
        *v23 = v204;
        v214 -= v215;
      }
      while (v214);
      *v212 = v211;
      if (v204 + 64 > v206)
      {
        v244 = 3448;
        goto LABEL_369;
      }
      v216 = 0;
      v217 = 64;
      do
      {
        v218 = 8 - (v204 & 7);
        if (v217 < v218)
          v218 = v217;
        v216 = (*(unsigned __int8 *)(v213 + (v204 >> 3)) >> (8 - (v204 & 7) - v218)) & (unint64_t)~(-1 << v218) | (v216 << v218);
        v204 += v218;
        *v23 = v204;
        v217 -= v218;
      }
      while (v217);
      *(_QWORD *)(v197 + 152 * v198 + 112) = v216;
      if (v204 + 5 > v206)
        break;
      v219 = 0;
      v220 = 5;
      do
      {
        v221 = 8 - (v204 & 7);
        if (v220 < v221)
          v221 = v220;
        v219 = (*(unsigned __int8 *)(v213 + (v204 >> 3)) >> (8 - (v204 & 7) - v221)) & ~(-1 << v221) | (v219 << v221);
        v204 += v221;
        *v23 = v204;
        v220 -= v221;
      }
      while (v220);
      v222 = (v219 + 1);
      if (v204 + v222 > v206)
        break;
      v223 = 0;
      if ((_DWORD)v222)
      {
        do
        {
          v224 = 8 - (v204 & 7);
          if (v222 < v224)
            v224 = v222;
          v223 = (*(unsigned __int8 *)(v213 + (v204 >> 3)) >> (8 - (v204 & 7) - v224)) & ~(-1 << v224) | (v223 << v224);
          v204 += v224;
          *v23 = v204;
          v222 -= v224;
        }
        while (v222);
        if (v223)
        {
          if (v204 + 1 > v206)
            break;
          v225 = *(unsigned __int8 *)(v213 + (v204 >> 3));
          *v23 = v204 + 1;
          if (((v225 >> (~(_BYTE)v204 & 7)) & 1) != 0)
            v223 = -v223;
          ++v204;
          if (v223 > 32766)
          {
            v244 = 3451;
            goto LABEL_369;
          }
        }
      }
      *(_WORD *)(v197 + 152 * v198 + 120) = v223;
      if (v204 + 5 > v206)
        goto LABEL_322;
      v226 = 0;
      v227 = 5;
      do
      {
        v228 = 8 - (v204 & 7);
        if (v227 < v228)
          v228 = v227;
        v226 = (*(unsigned __int8 *)(v213 + (v204 >> 3)) >> (8 - (v204 & 7) - v228)) & ~(-1 << v228) | (v226 << v228);
        v204 += v228;
        *v23 = v204;
        v227 -= v228;
      }
      while (v227);
      v229 = (v226 + 1);
      if (v204 + v229 > v206)
      {
LABEL_322:
        v244 = 3453;
        goto LABEL_369;
      }
      v230 = 0;
      if ((_DWORD)v229)
      {
        do
        {
          v231 = 8 - (v204 & 7);
          if (v229 < v231)
            v231 = v229;
          v230 = (*(unsigned __int8 *)(v213 + (v204 >> 3)) >> (8 - (v204 & 7) - v231)) & ~(-1 << v231) | (v230 << v231);
          v204 += v231;
          *v23 = v204;
          v229 -= v231;
        }
        while (v229);
      }
      *(_DWORD *)(v768 + 4 * v198) = v230;
      if (v204 + 5 > v206)
        goto LABEL_347;
      v232 = 0;
      v233 = 5;
      do
      {
        v234 = 8 - (v204 & 7);
        if (v233 < v234)
          v234 = v233;
        v232 = (*(unsigned __int8 *)(v213 + (v204 >> 3)) >> (8 - (v204 & 7) - v234)) & ~(-1 << v234) | (v232 << v234);
        v204 += v234;
        *v23 = v204;
        v233 -= v234;
      }
      while (v233);
      v235 = (v232 + 1);
      if (v204 + v235 > v206)
      {
LABEL_347:
        v244 = 3454;
        goto LABEL_369;
      }
      v236 = 0;
      if ((_DWORD)v235)
      {
        do
        {
          v237 = 8 - (v204 & 7);
          if (v235 < v237)
            v237 = v235;
          v236 = (*(unsigned __int8 *)(v213 + (v204 >> 3)) >> (8 - (v204 & 7) - v237)) & ~(-1 << v237) | (v236 << v237);
          v204 += v237;
          *v23 = v204;
          v235 -= v237;
        }
        while (v235);
      }
      *(_DWORD *)(v767 + 4 * v198) = v236;
      v196 = *a3;
      v197 = *(_QWORD *)(*a3 + 216);
      v198 = ++v769;
      if (0x86BCA1AF286BCA1BLL * ((*(_QWORD *)(*a3 + 224) - v197) >> 3) <= v769)
        goto LABEL_314;
    }
    v244 = 3450;
LABEL_369:
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_370;
  }
  v204 = *(_QWORD *)(v9 + 24);
  v206 = 8 * *(_QWORD *)(v9 + 16);
LABEL_314:
  if (v204 + 5 > v206)
    goto LABEL_320;
  v238 = 0;
  v239 = *(_QWORD *)v776;
  v240 = 5;
  do
  {
    v241 = 8 - (v204 & 7);
    if (v240 < v241)
      v241 = v240;
    v238 = (*(unsigned __int8 *)(v239 + (v204 >> 3)) >> (8 - (v204 & 7) - v241)) & ~(-1 << v241) | (v238 << v241);
    v204 += v241;
    *v23 = v204;
    v240 -= v241;
  }
  while (v240);
  v242 = (v238 + 1);
  if (v204 + v242 > v206)
  {
LABEL_320:
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3458;
    goto LABEL_370;
  }
  if ((_DWORD)v242)
  {
    v245 = 0;
    do
    {
      v246 = 8 - (v204 & 7);
      if (v242 < v246)
        v246 = v242;
      v245 = (*(unsigned __int8 *)(v239 + (v204 >> 3)) >> (8 - (v204 & 7) - v246)) & ~(-1 << v246) | (v245 << v246);
      v204 += v246;
      *v23 = v204;
      v242 -= v246;
    }
    while (v242);
    if (v245)
    {
      v247 = 0;
      v248 = (_QWORD *)*a3;
      while (v204 + v765 <= v206)
      {
        v249 = v765;
        if ((_DWORD)v765)
        {
          v249 = 0;
          v250 = v765;
          do
          {
            v251 = 8 - (v204 & 7);
            if (v250 < v251)
              v251 = v250;
            v249 = (*(unsigned __int8 *)(v239 + (v204 >> 3)) >> (8 - (v204 & 7) - v251)) & ~(-1 << v251) | (v249 << v251);
            v204 += v251;
            *v23 = v204;
            v250 -= v251;
          }
          while (v250);
        }
        if (v204 + v766 > v206)
        {
          v244 = 3464;
          goto LABEL_369;
        }
        v252 = v766;
        if ((_DWORD)v766)
        {
          v252 = 0;
          v253 = v766;
          do
          {
            v254 = 8 - (v204 & 7);
            if (v253 < v254)
              v254 = v253;
            v252 = (*(unsigned __int8 *)(v239 + (v204 >> 3)) >> (8 - (v204 & 7) - v254)) & ~(-1 << v254) | (v252 << v254);
            v204 += v254;
            *v23 = v204;
            v253 -= v254;
          }
          while (v253);
        }
        v255 = v248[27];
        if (0x86BCA1AF286BCA1BLL * ((v248[28] - v255) >> 3) <= v249)
        {
          v244 = 3465;
          goto LABEL_369;
        }
        v256 = v248[63];
        if (0x6DB6DB6DB6DB6DB7 * ((v248[64] - v256) >> 5) <= (unint64_t)v252)
        {
          v244 = 3466;
          goto LABEL_369;
        }
        v257 = v255 + 152 * v249;
        v258 = v256 + 224 * v252;
        *(_QWORD *)(v258 + 128) = *(_QWORD *)(v257 + 104);
        *(_QWORD *)(v258 + 120) = *(_QWORD *)(v248[23] + 144 * *(_QWORD *)(v257 + 144) + 104);
        if (++v247 == v245)
          goto LABEL_345;
      }
      v244 = 3463;
      goto LABEL_369;
    }
  }
LABEL_345:
  if (v204 + 5 > v206)
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3474;
    goto LABEL_370;
  }
  v259 = 0;
  v260 = 5;
  do
  {
    v261 = 8 - (v204 & 7);
    if (v260 < v261)
      v261 = v260;
    v259 = (*(unsigned __int8 *)(v239 + (v204 >> 3)) >> (8 - (v204 & 7) - v261)) & ~(-1 << v261) | (v259 << v261);
    v204 += v261;
    *v23 = v204;
    v260 -= v261;
  }
  while (v260);
  v770 = (v259 + 1);
  if (v204 + v770 > v206)
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3478;
    goto LABEL_370;
  }
  if (v259 == -1)
  {
    v270 = 0;
    v262 = 0;
  }
  else
  {
    v262 = 0;
    v263 = (v259 + 1);
    do
    {
      v264 = 8 - (v204 & 7);
      if (v263 < v264)
        v264 = v263;
      v262 = (*(unsigned __int8 *)(v239 + (v204 >> 3)) >> (8 - (v204 & 7) - v264)) & ~(-1 << v264) | (v262 << v264);
      v204 += v264;
      *v23 = v204;
      v263 -= v264;
    }
    while (v263);
    if (v204 + v770 > v206)
    {
      v243 = (FILE *)*MEMORY[0x1E0C80C10];
      v244 = 3479;
      goto LABEL_370;
    }
    v270 = 0;
    v271 = (v259 + 1);
    do
    {
      v272 = 8 - (v204 & 7);
      if (v271 < v272)
        v272 = v271;
      v270 = (*(unsigned __int8 *)(v239 + (v204 >> 3)) >> (8 - (v204 & 7) - v272)) & ~(-1 << v272) | (v270 << v272);
      v204 += v272;
      *v23 = v204;
      v271 -= v272;
    }
    while (v271);
  }
  *(_QWORD *)(*a3 + 248) = v262 + v270;
  {
    v468 = operator new();
    *(_QWORD *)(v468 + 16) = 0x99AFC36000000008;
    *(_QWORD *)(v468 + 24) = "GeoCodec";
    *(_OWORD *)(v468 + 32) = xmmword_189CFDB80;
    *(_QWORD *)v468 = &off_1E1BF6690;
    *(_QWORD *)(v468 + 8) = "GeoCodec";
    *(_OWORD *)(v468 + 56) = 0u;
    *(_OWORD *)(v468 + 72) = 0u;
    *(_OWORD *)(v468 + 88) = 0u;
    *(_OWORD *)(v468 + 104) = 0u;
    *(_OWORD *)(v468 + 120) = 0u;
    *(_OWORD *)(v468 + 136) = 0u;
    *(_OWORD *)(v468 + 152) = 0u;
    *(_OWORD *)(v468 + 168) = 0u;
    *(_OWORD *)(v468 + 184) = 0u;
    *(_OWORD *)(v468 + 200) = 0u;
    *(_OWORD *)(v468 + 216) = 0u;
    *(_OWORD *)(v468 + 232) = 0u;
    *(_QWORD *)(v468 + 248) = 0;
    v469 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v468 + 56), 0);
    if ((_DWORD)v469)
      geo::read_write_lock::logFailure(v469, (uint64_t)"initialization", v470);
    v471 = malloc_create_zone(0, 0);
    *(_QWORD *)(v468 + 48) = v471;
    malloc_set_zone_name(v471, "GeoCodec");
    *(_QWORD *)(v468 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    geo::codec::Allocator::instance(void)::alloc = v468;
  }
  v274 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                             + 24))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(*a3 + 248), 64);
  v278 = (_QWORD *)*a3;
  *(_QWORD *)(*a3 + 256) = v274;
  if (!v274)
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3482;
    goto LABEL_370;
  }
  v279 = *(_QWORD *)(v9 + 24);
  v280 = 8 * *(_QWORD *)(v9 + 16);
  if (v279 + 5 > v280)
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3484;
    goto LABEL_370;
  }
  v285 = 0;
  v286 = *(_QWORD *)v776;
  v287 = 5;
  do
  {
    v288 = 8 - (v279 & 7);
    if (v287 < v288)
      v288 = v287;
    v285 = (*(unsigned __int8 *)(v286 + (v279 >> 3)) >> (8 - (v279 & 7) - v288)) & ~(-1 << v288) | (v285 << v288);
    v279 += v288;
    *v23 = v279;
    v287 -= v288;
  }
  while (v287);
  v763 = (v285 + 1);
  if (v262)
  {
    v289 = 0;
    v290 = v262;
    v275 = 32766;
    v276 = (unint64_t)"";
    while (1)
    {
      if (v279 + v775 > v280)
      {
        v244 = 3491;
        goto LABEL_369;
      }
      LODWORD(v291) = 0;
      v292 = v775;
      do
      {
        v293 = 8 - (v279 & 7);
        if (v292 < v293)
          v293 = v292;
        v291 = (*(unsigned __int8 *)(v286 + (v279 >> 3)) >> (8 - (v279 & 7) - v293)) & ~(-1 << v293) | ((_DWORD)v291 << v293);
        v279 += v293;
        *v23 = v279;
        v292 -= v293;
      }
      while (v292);
      if (0x8E38E38E38E38E39 * ((uint64_t)(v278[24] - v278[23]) >> 4) <= v291)
      {
        v244 = 3492;
        goto LABEL_369;
      }
      v294 = v274 + (v289 << 6);
      *(_QWORD *)(v294 + 48) = v291;
      *(_BYTE *)(v294 + 13) = 1;
      if (v279 + 64 > v280)
      {
        v244 = 3496;
        goto LABEL_369;
      }
      v295 = 0;
      v296 = 64;
      do
      {
        v297 = 8 - (v279 & 7);
        if (v296 < v297)
          v297 = v296;
        v295 = (*(unsigned __int8 *)(v286 + (v279 >> 3)) >> (8 - (v279 & 7) - v297)) & (unint64_t)~(-1 << v297) | (v295 << v297);
        v279 += v297;
        *v23 = v279;
        v296 -= v297;
      }
      while (v296);
      *(_QWORD *)(v274 + (v289 << 6)) = v295;
      if (v279 + 5 > v280)
        break;
      v298 = 0;
      v299 = 5;
      do
      {
        v300 = 8 - (v279 & 7);
        if (v299 < v300)
          v300 = v299;
        v298 = (*(unsigned __int8 *)(v286 + (v279 >> 3)) >> (8 - (v279 & 7) - v300)) & ~(-1 << v300) | (v298 << v300);
        v279 += v300;
        *v23 = v279;
        v299 -= v300;
      }
      while (v299);
      v301 = (v298 + 1);
      if (v279 + v301 > v280)
        break;
      v302 = 0;
      if ((_DWORD)v301)
      {
        do
        {
          v303 = 8 - (v279 & 7);
          if (v301 < v303)
            v303 = v301;
          v302 = (*(unsigned __int8 *)(v286 + (v279 >> 3)) >> (8 - (v279 & 7) - v303)) & ~(-1 << v303) | (v302 << v303);
          v279 += v303;
          *v23 = v279;
          v301 -= v303;
        }
        while (v301);
        if (v302)
        {
          if (v279 + 1 > v280)
            break;
          v304 = *(unsigned __int8 *)(v286 + (v279 >> 3));
          *v23 = v279 + 1;
          if (((v304 >> (~(_BYTE)v279 & 7)) & 1) != 0)
            v302 = -v302;
          ++v279;
          if (v302 > 32766)
          {
            v244 = 3499;
            goto LABEL_369;
          }
        }
      }
      *(_DWORD *)(v274 + (v289 << 6) + 8) = v302;
      v305 = v279 + 1;
      if (v279 + 1 > v280)
      {
        v243 = (FILE *)*MEMORY[0x1E0C80C10];
        v244 = 3503;
        goto LABEL_370;
      }
      v306 = *(unsigned __int8 *)(v286 + (v279 >> 3));
      *v23 = v305;
      if (((v306 >> (~(_BYTE)v279 & 7)) & 1) != 0)
      {
        if (v305 + v763 > v280)
        {
          v244 = 3507;
          goto LABEL_369;
        }
        v307 = v763;
        if ((_DWORD)v763)
        {
          v307 = 0;
          v308 = v763;
          do
          {
            v309 = 8 - (v305 & 7);
            if (v308 < v309)
              v309 = v308;
            v307 = (*(unsigned __int8 *)(v286 + (v305 >> 3)) >> (8 - (v305 & 7) - v309)) & ~(-1 << v309) | (v307 << v309);
            v305 += v309;
            *v23 = v305;
            v308 -= v309;
          }
          while (v308);
          if (v305 + v763 > v280)
          {
            v244 = 3508;
            goto LABEL_369;
          }
          v310 = 0;
          v311 = v763;
          do
          {
            v312 = 8 - (v305 & 7);
            if (v311 < v312)
              v312 = v311;
            v310 = (*(unsigned __int8 *)(v286 + (v305 >> 3)) >> (8 - (v305 & 7) - v312)) & ~(-1 << v312) | (v310 << v312);
            v305 += v312;
            *v23 = v305;
            v311 -= v312;
          }
          while (v311);
        }
        else
        {
          v310 = 0;
        }
        if (v772 <= v307)
        {
          v244 = 3509;
          goto LABEL_369;
        }
        if (v772 <= v310)
        {
          v244 = 3510;
          goto LABEL_369;
        }
        *(_QWORD *)(v274 + (v289 << 6) + 32) = v771 + v307;
        v313 = (const char *)(v771 + v310);
      }
      else
      {
        *(_QWORD *)(v274 + (v289 << 6) + 32) = "";
        v313 = "";
      }
      v279 = v305;
      v277 = (const char *)(v274 + (v289 << 6));
      *((_QWORD *)v277 + 3) = v313;
      if (++v289 == v262)
        goto LABEL_447;
    }
    v244 = 3498;
    goto LABEL_369;
  }
  v290 = 0;
LABEL_447:
  v318 = v278[31];
  if (v318 > v290)
  {
    v275 = 7;
    v276 = 32766;
    v277 = "";
    while (1)
    {
      if (v279 + v765 > v280)
      {
        v244 = 3521;
        goto LABEL_369;
      }
      if ((_DWORD)v765)
      {
        v319 = 0;
        v320 = v765;
        do
        {
          v321 = 8 - (v279 & 7);
          if (v320 < v321)
            v321 = v320;
          v319 = (*(unsigned __int8 *)(v286 + (v279 >> 3)) >> (8 - (v279 & 7) - v321)) & ~(-1 << v321) | (v319 << v321);
          v279 += v321;
          *v23 = v279;
          v320 -= v321;
        }
        while (v320);
      }
      else
      {
        v319 = 0;
      }
      v322 = v319;
      v323 = v278[27];
      if (0x86BCA1AF286BCA1BLL * ((v278[28] - v323) >> 3) <= v322)
      {
        v244 = 3522;
        goto LABEL_369;
      }
      v324 = v274 + (v290 << 6);
      *(_QWORD *)(v324 + 56) = v322;
      *(_QWORD *)(v324 + 48) = *(_QWORD *)(v323 + 152 * v322 + 144);
      *(_BYTE *)(v324 + 13) = 0;
      if (v279 + 64 > v280)
      {
        v244 = 3527;
        goto LABEL_369;
      }
      v325 = 0;
      v326 = 64;
      do
      {
        v327 = 8 - (v279 & 7);
        if (v326 < v327)
          v327 = v326;
        v325 = (*(unsigned __int8 *)(v286 + (v279 >> 3)) >> (8 - (v279 & 7) - v327)) & (unint64_t)~(-1 << v327) | (v325 << v327);
        v279 += v327;
        *v23 = v279;
        v326 -= v327;
      }
      while (v326);
      *(_QWORD *)(v274 + (v290 << 6)) = v325;
      if (v279 + 5 > v280)
        break;
      v328 = 0;
      v329 = 5;
      do
      {
        v330 = 8 - (v279 & 7);
        if (v329 < v330)
          v330 = v329;
        v328 = (*(unsigned __int8 *)(v286 + (v279 >> 3)) >> (8 - (v279 & 7) - v330)) & ~(-1 << v330) | (v328 << v330);
        v279 += v330;
        *v23 = v279;
        v329 -= v330;
      }
      while (v329);
      v331 = (v328 + 1);
      if (v279 + v331 > v280)
        break;
      v332 = 0;
      if ((_DWORD)v331)
      {
        do
        {
          v333 = 8 - (v279 & 7);
          if (v331 < v333)
            v333 = v331;
          v332 = (*(unsigned __int8 *)(v286 + (v279 >> 3)) >> (8 - (v279 & 7) - v333)) & ~(-1 << v333) | (v332 << v333);
          v279 += v333;
          *v23 = v279;
          v331 -= v333;
        }
        while (v331);
        if (v332)
        {
          if (v279 + 1 > v280)
            break;
          v334 = *(unsigned __int8 *)(v286 + (v279 >> 3));
          *v23 = v279 + 1;
          if (((v334 >> (~(_BYTE)v279 & 7)) & 1) != 0)
            v332 = -v332;
          ++v279;
          if (v332 > 32766)
          {
            v244 = 3530;
            goto LABEL_369;
          }
        }
      }
      *(_DWORD *)(v274 + (v290 << 6) + 8) = v332;
      v335 = v279 + 1;
      if (v279 + 1 > v280)
      {
        v243 = (FILE *)*MEMORY[0x1E0C80C10];
        v244 = 3534;
        goto LABEL_370;
      }
      v336 = *(unsigned __int8 *)(v286 + (v279 >> 3));
      *v23 = v335;
      if (((v336 >> (~(_BYTE)v279 & 7)) & 1) != 0)
      {
        if (v335 + v763 > v280)
        {
          v244 = 3538;
          goto LABEL_369;
        }
        v337 = v763;
        if ((_DWORD)v763)
        {
          v337 = 0;
          v338 = v763;
          do
          {
            v339 = 8 - (v335 & 7);
            if (v338 < v339)
              v339 = v338;
            v337 = (*(unsigned __int8 *)(v286 + (v335 >> 3)) >> (8 - (v335 & 7) - v339)) & ~(-1 << v339) | (v337 << v339);
            v335 += v339;
            *v23 = v335;
            v338 -= v339;
          }
          while (v338);
          if (v335 + v763 > v280)
          {
            v244 = 3539;
            goto LABEL_369;
          }
          v340 = 0;
          v341 = v763;
          do
          {
            v342 = 8 - (v335 & 7);
            if (v341 < v342)
              v342 = v341;
            v340 = (*(unsigned __int8 *)(v286 + (v335 >> 3)) >> (8 - (v335 & 7) - v342)) & ~(-1 << v342) | (v340 << v342);
            v335 += v342;
            *v23 = v335;
            v341 -= v342;
          }
          while (v341);
        }
        else
        {
          v340 = 0;
        }
        if (v772 <= v337)
        {
          v244 = 3540;
          goto LABEL_369;
        }
        if (v772 <= v340)
        {
          v244 = 3541;
          goto LABEL_369;
        }
        *(_QWORD *)(v274 + (v290 << 6) + 32) = v771 + v337;
        v343 = (const char *)(v771 + v340);
      }
      else
      {
        *(_QWORD *)(v274 + (v290 << 6) + 32) = "";
        v343 = "";
      }
      *(_QWORD *)(v274 + (v290 << 6) + 24) = v343;
      v279 = v335;
      v290 = ++v262;
      if (v318 <= v262)
        goto LABEL_500;
    }
    v244 = 3529;
    goto LABEL_369;
  }
  v335 = v279;
LABEL_500:
  if (v335 + 5 > v280)
    goto LABEL_506;
  v344 = 0;
  v345 = 5;
  do
  {
    v346 = 8 - (v335 & 7);
    if (v345 < v346)
      v346 = v345;
    v344 = (*(unsigned __int8 *)(v286 + (v335 >> 3)) >> (8 - (v335 & 7) - v346)) & ~(-1 << v346) | (v344 << v346);
    v335 += v346;
    *v23 = v335;
    v345 -= v346;
  }
  while (v345);
  v347 = (v344 + 1);
  if (v335 + v347 > v280)
  {
LABEL_506:
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3551;
    goto LABEL_370;
  }
  if (v344 != -1)
  {
    v368 = 0;
    do
    {
      v369 = 8 - (v335 & 7);
      if (v347 < v369)
        v369 = v347;
      v368 = (*(unsigned __int8 *)(v286 + (v335 >> 3)) >> (8 - (v335 & 7) - v369)) & ~(-1 << v369) | (v368 << v369);
      v335 += v369;
      *v23 = v335;
      v347 -= v369;
    }
    while (v347);
    if (v368)
    {
      v370 = 0;
      while (v335 + v770 <= v280)
      {
        v371 = v770;
        if ((_DWORD)v770)
        {
          v371 = 0;
          v372 = v770;
          do
          {
            v373 = 8 - (v335 & 7);
            if (v372 < v373)
              v373 = v372;
            v371 = (*(unsigned __int8 *)(v286 + (v335 >> 3)) >> (8 - (v335 & 7) - v373)) & ~(-1 << v373) | (v371 << v373);
            v335 += v373;
            *v23 = v335;
            v372 -= v373;
          }
          while (v372);
        }
        if (v318 <= v371)
        {
          v244 = 3555;
          goto LABEL_369;
        }
        if (v335 + v764 > v280)
        {
          v244 = 3557;
          goto LABEL_369;
        }
        if ((_DWORD)v764)
        {
          v374 = 0;
          v375 = v764;
          do
          {
            v376 = 8 - (v335 & 7);
            if (v375 < v376)
              v376 = v375;
            v374 = (*(unsigned __int8 *)(v286 + (v335 >> 3)) >> (8 - (v335 & 7) - v376)) & ~(-1 << v376) | (v374 << v376);
            v335 += v376;
            *v23 = v335;
            v375 -= v376;
          }
          while (v375);
        }
        else
        {
          v374 = 0;
        }
        v276 = v374;
        v277 = (const char *)v278[12];
        if (v276 >= (uint64_t)(v278[13] - (_QWORD)v277) >> 7)
        {
          v244 = 3558;
          goto LABEL_369;
        }
        v377 = v274 + ((unint64_t)v371 << 6);
        *(_BYTE *)(v377 + 12) = 1;
        *(_QWORD *)(v377 + 16) = v276;
        v275 = (uint64_t)&v277[128 * v276];
        *(_BYTE *)(v275 + 127) = 3;
        *(_DWORD *)(v275 + 120) = v371;
        if (++v370 == v368)
          goto LABEL_556;
      }
      v244 = 3554;
      goto LABEL_369;
    }
  }
LABEL_556:
  if (v335 + 5 > v280)
    goto LABEL_562;
  v378 = 0;
  v379 = 5;
  do
  {
    v380 = 8 - (v335 & 7);
    if (v379 < v380)
      v380 = v379;
    v378 = (*(unsigned __int8 *)(v286 + (v335 >> 3)) >> (8 - (v335 & 7) - v380)) & ~(-1 << v380) | (v378 << v380);
    v335 += v380;
    *v23 = v335;
    v379 -= v380;
  }
  while (v379);
  v381 = (v378 + 1);
  if (v335 + v381 > v280)
  {
LABEL_562:
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3567;
    goto LABEL_370;
  }
  if (v378 != -1)
  {
    v382 = 0;
    do
    {
      v383 = 8 - (v335 & 7);
      if (v381 < v383)
        v383 = v381;
      v382 = (*(unsigned __int8 *)(v286 + (v335 >> 3)) >> (8 - (v335 & 7) - v383)) & ~(-1 << v383) | (v382 << v383);
      v335 += v383;
      *v23 = v335;
      v381 -= v383;
    }
    while (v381);
    if (v382)
    {
      v384 = 0;
      v275 = 0xFFFFFFFFLL;
      while (v335 + v770 <= v280)
      {
        if ((_DWORD)v770)
        {
          v385 = 0;
          v386 = v770;
          do
          {
            v387 = 8 - (v335 & 7);
            if (v386 < v387)
              v387 = v386;
            v385 = (*(unsigned __int8 *)(v286 + (v335 >> 3)) >> (8 - (v335 & 7) - v387)) & ~(-1 << v387) | (v385 << v387);
            v335 += v387;
            *v23 = v335;
            v386 -= v387;
          }
          while (v386);
        }
        else
        {
          v385 = 0;
        }
        v388 = v385;
        if (v318 <= v385)
        {
          v244 = 3571;
          goto LABEL_369;
        }
        if (v335 + v766 > v280)
        {
          v244 = 3573;
          goto LABEL_369;
        }
        if ((_DWORD)v766)
        {
          v389 = 0;
          v390 = v766;
          do
          {
            v391 = 8 - (v335 & 7);
            if (v390 < v391)
              v391 = v390;
            v389 = (*(unsigned __int8 *)(v286 + (v335 >> 3)) >> (8 - (v335 & 7) - v391)) & ~(-1 << v391) | (v389 << v391);
            v335 += v391;
            *v23 = v335;
            v390 -= v391;
          }
          while (v390);
        }
        else
        {
          v389 = 0;
        }
        v392 = v389;
        v393 = v278[63];
        if (0x6DB6DB6DB6DB6DB7 * ((v278[64] - v393) >> 5) <= v392)
        {
          v244 = 3574;
          goto LABEL_369;
        }
        v394 = v274 + (v388 << 6);
        v395 = *(_QWORD *)(v394 + 56);
        v396 = v278[27];
        v277 = (const char *)(v393 + 224 * v392);
        *((_QWORD *)v277 + 17) = *(_QWORD *)v394;
        *((_WORD *)v277 + 76) = *(_DWORD *)(v394 + 8);
        v397 = v396 + 152 * v395;
        *((_QWORD *)v277 + 16) = *(_QWORD *)(v397 + 104);
        v276 = *(_QWORD *)(v278[23] + 144 * *(_QWORD *)(v397 + 144) + 104);
        *((_QWORD *)v277 + 15) = v276;
        if (++v384 == v382)
          goto LABEL_602;
      }
      v244 = 3570;
      goto LABEL_369;
    }
  }
LABEL_602:
  if (v335 + 5 > v280)
    goto LABEL_608;
  v398 = 0;
  v399 = 5;
  do
  {
    v400 = 8 - (v335 & 7);
    if (v399 < v400)
      v400 = v399;
    v398 = (*(unsigned __int8 *)(v286 + (v335 >> 3)) >> (8 - (v335 & 7) - v400)) & ~(-1 << v400) | (v398 << v400);
    v335 += v400;
    *v23 = v335;
    v399 -= v400;
  }
  while (v399);
  v401 = (v398 + 1);
  if (v335 + v401 > v280)
  {
LABEL_608:
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3586;
    goto LABEL_370;
  }
  v402 = 0;
  if (v398 != -1)
  {
    do
    {
      v403 = 8 - (v335 & 7);
      if (v401 < v403)
        v403 = v401;
      v402 = (*(unsigned __int8 *)(v286 + (v335 >> 3)) >> (8 - (v335 & 7) - v403)) & ~(-1 << v403) | (v402 << v403);
      v335 += v403;
      *v23 = v335;
      v401 -= v403;
    }
    while (v401);
  }
  v278[33] = v402;
  {
    v550 = operator new();
    *(_QWORD *)(v550 + 16) = 0x99AFC36000000008;
    *(_QWORD *)(v550 + 24) = "GeoCodec";
    *(_OWORD *)(v550 + 32) = xmmword_189CFDB80;
    *(_QWORD *)v550 = &off_1E1BF6690;
    *(_QWORD *)(v550 + 8) = "GeoCodec";
    *(_OWORD *)(v550 + 56) = 0u;
    *(_OWORD *)(v550 + 72) = 0u;
    *(_OWORD *)(v550 + 88) = 0u;
    *(_OWORD *)(v550 + 104) = 0u;
    *(_OWORD *)(v550 + 120) = 0u;
    *(_OWORD *)(v550 + 136) = 0u;
    *(_OWORD *)(v550 + 152) = 0u;
    *(_OWORD *)(v550 + 168) = 0u;
    *(_OWORD *)(v550 + 184) = 0u;
    *(_OWORD *)(v550 + 200) = 0u;
    *(_OWORD *)(v550 + 216) = 0u;
    *(_OWORD *)(v550 + 232) = 0u;
    *(_QWORD *)(v550 + 248) = 0;
    v551 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v550 + 56), 0);
    if ((_DWORD)v551)
      geo::read_write_lock::logFailure(v551, (uint64_t)"initialization", v552);
    v553 = malloc_create_zone(0, 0);
    *(_QWORD *)(v550 + 48) = v553;
    malloc_set_zone_name(v553, "GeoCodec");
    *(_QWORD *)(v550 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    geo::codec::Allocator::instance(void)::alloc = v550;
  }
  v405 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, unint64_t, const char *))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 24))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(*a3 + 264), 56, v275, v276, v277);
  v406 = *a3;
  *(_QWORD *)(*a3 + 272) = v405;
  v407 = *(_QWORD *)(v9 + 24);
  v408 = 8 * *(_QWORD *)(v9 + 16);
  if (v407 + 5 > v408)
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3593;
    goto LABEL_370;
  }
  v409 = 0;
  v410 = *(_QWORD *)v776;
  v411 = 5;
  do
  {
    v412 = 8 - (v407 & 7);
    if (v411 < v412)
      v412 = v411;
    v409 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v412)) & ~(-1 << v412) | (v409 << v412);
    v407 += v412;
    *v23 = v407;
    v411 -= v412;
  }
  while (v411);
  v413 = (v409 + 1);
  if (v407 + v413 > v408)
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3596;
    goto LABEL_370;
  }
  LODWORD(v414) = 0;
  if ((_DWORD)v413)
  {
    v415 = v413;
    do
    {
      v416 = 8 - (v407 & 7);
      if (v415 < v416)
        v416 = v415;
      v414 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v416)) & ~(-1 << v416) | ((_DWORD)v414 << v416);
      v407 += v416;
      *v23 = v407;
      v415 -= v416;
    }
    while (v415);
    if ((_DWORD)v414)
    {
      v417 = 0;
      while (v407 + v770 <= v408)
      {
        if ((_DWORD)v770)
        {
          v418 = 0;
          v419 = v770;
          do
          {
            v420 = 8 - (v407 & 7);
            if (v419 < v420)
              v420 = v419;
            v418 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v420)) & ~(-1 << v420) | (v418 << v420);
            v407 += v420;
            *v23 = v407;
            v419 -= v420;
          }
          while (v419);
        }
        else
        {
          v418 = 0;
        }
        if (*(_QWORD *)(v406 + 248) <= (unint64_t)v418)
        {
          v244 = 3600;
          goto LABEL_369;
        }
        if (*(_QWORD *)(v406 + 264) <= v417)
        {
          v244 = 3601;
          goto LABEL_369;
        }
        v421 = v405 + 56 * v417;
        *(_BYTE *)(v421 + 8) = 1;
        *(_QWORD *)(v421 + 48) = v418;
        *(_BYTE *)(v421 + 32) = 0;
        if (v407 + 64 > v408)
        {
          v244 = 3606;
          goto LABEL_369;
        }
        v422 = 0;
        v423 = 64;
        do
        {
          v424 = 8 - (v407 & 7);
          if (v423 < v424)
            v424 = v423;
          v422 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v424)) & (unint64_t)~(-1 << v424) | (v422 << v424);
          v407 += v424;
          *v23 = v407;
          v423 -= v424;
        }
        while (v423);
        *(_QWORD *)v421 = v422;
        if (++v417 == v414)
          goto LABEL_655;
      }
      v244 = 3599;
      goto LABEL_369;
    }
  }
LABEL_655:
  if (v407 + 5 > v408)
    goto LABEL_661;
  v425 = 0;
  v426 = 5;
  do
  {
    v427 = 8 - (v407 & 7);
    if (v426 < v427)
      v427 = v426;
    v425 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v427)) & ~(-1 << v427) | (v425 << v427);
    v407 += v427;
    *v23 = v407;
    v426 -= v427;
  }
  while (v426);
  v428 = (v425 + 1);
  if (v407 + v428 > v408)
  {
LABEL_661:
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3610;
    goto LABEL_370;
  }
  if (v425 != -1)
  {
    v437 = 0;
    do
    {
      v438 = 8 - (v407 & 7);
      if (v428 < v438)
        v438 = v428;
      v437 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v438)) & ~(-1 << v438) | (v437 << v438);
      v407 += v438;
      *v23 = v407;
      v428 -= v438;
    }
    while (v428);
    if (v437)
    {
      v439 = 0;
      while (v407 + v413 <= v408)
      {
        v440 = 0;
        if ((_DWORD)v413)
        {
          v441 = v413;
          do
          {
            v442 = 8 - (v407 & 7);
            if (v441 < v442)
              v442 = v441;
            v440 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v442)) & ~(-1 << v442) | (v440 << v442);
            v407 += v442;
            *v23 = v407;
            v441 -= v442;
          }
          while (v441);
        }
        if (v407 + v764 > v408)
        {
          v244 = 3616;
          goto LABEL_369;
        }
        v443 = v764;
        if ((_DWORD)v764)
        {
          v443 = 0;
          v444 = v764;
          do
          {
            v445 = 8 - (v407 & 7);
            if (v444 < v445)
              v445 = v444;
            v443 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v445)) & ~(-1 << v445) | (v443 << v445);
            v407 += v445;
            *v23 = v407;
            v444 -= v445;
          }
          while (v444);
        }
        if (v440 >= v414)
        {
          v244 = 3617;
          goto LABEL_369;
        }
        v446 = *(_QWORD *)(v406 + 96);
        if (v443 >= (unint64_t)((*(_QWORD *)(v406 + 104) - v446) >> 7))
        {
          v244 = 3618;
          goto LABEL_369;
        }
        v447 = v446 + ((unint64_t)v443 << 7);
        *(_BYTE *)(v447 + 127) = 2;
        *(_DWORD *)(v447 + 120) = v440;
        if (++v439 == v437)
          goto LABEL_692;
      }
      v244 = 3615;
      goto LABEL_369;
    }
  }
LABEL_692:
  if (v407 + 5 > v408)
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3625;
    goto LABEL_370;
  }
  v448 = 0;
  v449 = 5;
  do
  {
    v450 = 8 - (v407 & 7);
    if (v449 < v450)
      v450 = v449;
    v448 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v450)) & ~(-1 << v450) | (v448 << v450);
    v407 += v450;
    *v23 = v407;
    v449 -= v450;
  }
  while (v449);
  v451 = (v448 + 1);
  if (v407 + v451 > v408)
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3628;
    goto LABEL_370;
  }
  v452 = 0;
  if (v448 != -1)
  {
    v453 = (v448 + 1);
    do
    {
      v454 = 8 - (v407 & 7);
      if (v453 < v454)
        v454 = v453;
      v452 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v454)) & ~(-1 << v454) | (v452 << v454);
      v407 += v454;
      *v23 = v407;
      v453 -= v454;
    }
    while (v453);
    if (v452)
    {
      v455 = 0;
      v456 = v414;
      while (v407 + v770 <= v408)
      {
        if ((_DWORD)v770)
        {
          v457 = 0;
          v458 = v770;
          do
          {
            v459 = 8 - (v407 & 7);
            if (v458 < v459)
              v459 = v458;
            v457 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v459)) & ~(-1 << v459) | (v457 << v459);
            v407 += v459;
            *v23 = v407;
            v458 -= v459;
          }
          while (v458);
        }
        else
        {
          v457 = 0;
        }
        if (*(_QWORD *)(v406 + 248) <= (unint64_t)v457)
        {
          v244 = 3632;
          goto LABEL_369;
        }
        if (*(_QWORD *)(v406 + 264) <= (unint64_t)v456)
        {
          v244 = 3633;
          goto LABEL_369;
        }
        v460 = v405 + 56 * v456;
        *(_BYTE *)(v460 + 8) = 2;
        *(_QWORD *)(v460 + 48) = v457;
        *(_BYTE *)(v460 + 32) = 0;
        if (v407 + 64 > v408)
        {
          v244 = 3638;
          goto LABEL_369;
        }
        v461 = 0;
        v462 = 64;
        do
        {
          v463 = 8 - (v407 & 7);
          if (v462 < v463)
            v463 = v462;
          v461 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v463)) & (unint64_t)~(-1 << v463) | (v461 << v463);
          v407 += v463;
          *v23 = v407;
          v462 -= v463;
        }
        while (v462);
        *(_QWORD *)v460 = v461;
        ++v455;
        ++v456;
        if (v455 == v452)
          goto LABEL_729;
      }
      v244 = 3631;
      goto LABEL_369;
    }
  }
  v456 = v414;
LABEL_729:
  if (v407 + 5 > v408)
    goto LABEL_735;
  v464 = 0;
  v465 = 5;
  do
  {
    v466 = 8 - (v407 & 7);
    if (v465 < v466)
      v466 = v465;
    v464 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v466)) & ~(-1 << v466) | (v464 << v466);
    v407 += v466;
    *v23 = v407;
    v465 -= v466;
  }
  while (v465);
  v467 = (v464 + 1);
  if (v407 + v467 > v408)
  {
LABEL_735:
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3642;
    goto LABEL_370;
  }
  if (v464 != -1)
  {
    v472 = 0;
    do
    {
      v473 = 8 - (v407 & 7);
      if (v467 < v473)
        v473 = v467;
      v472 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v473)) & ~(-1 << v473) | (v472 << v473);
      v407 += v473;
      *v23 = v407;
      v467 -= v473;
    }
    while (v467);
    if (v472)
    {
      v474 = 0;
      while (v407 + v451 <= v408)
      {
        v475 = 0;
        if ((_DWORD)v451)
        {
          v476 = v451;
          do
          {
            v477 = 8 - (v407 & 7);
            if (v476 < v477)
              v477 = v476;
            v475 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v477)) & ~(-1 << v477) | (v475 << v477);
            v407 += v477;
            *v23 = v407;
            v476 -= v477;
          }
          while (v476);
        }
        if (v407 + v766 > v408)
        {
          v244 = 3648;
          goto LABEL_369;
        }
        if ((_DWORD)v766)
        {
          v478 = 0;
          v479 = v766;
          do
          {
            v480 = 8 - (v407 & 7);
            if (v479 < v480)
              v480 = v479;
            v478 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v480)) & ~(-1 << v480) | (v478 << v480);
            v407 += v480;
            *v23 = v407;
            v479 -= v480;
          }
          while (v479);
        }
        else
        {
          v478 = 0;
        }
        if (v475 >= v452)
        {
          v244 = 3649;
          goto LABEL_369;
        }
        v481 = *(_QWORD *)(v406 + 504);
        if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v406 + 512) - v481) >> 5) <= (unint64_t)v478)
        {
          v244 = 3650;
          goto LABEL_369;
        }
        v482 = v405 + 56 * v414 + 56 * v475;
        *(_BYTE *)(v482 + 32) = 1;
        *(_QWORD *)(v482 + 40) = v478;
        v483 = *(_QWORD *)(v406 + 256) + (*(_QWORD *)(v482 + 48) << 6);
        v484 = *(_QWORD *)(v406 + 216) + 152 * *(_QWORD *)(v483 + 56);
        v485 = v481 + 224 * v478;
        *(_QWORD *)(v485 + 120) = *(_QWORD *)(*(_QWORD *)(v406 + 184) + 144 * *(_QWORD *)(v484 + 144) + 104);
        *(_QWORD *)(v485 + 128) = *(_QWORD *)(v484 + 104);
        *(_QWORD *)(v485 + 136) = *(_QWORD *)v483;
        *(_QWORD *)(v485 + 144) = *(_QWORD *)v482;
        *(_WORD *)(v485 + 152) = *(_DWORD *)(v483 + 8);
        *(_BYTE *)(v485 + 156) = 2;
        if (++v474 == v472)
          goto LABEL_768;
      }
      v244 = 3647;
      goto LABEL_369;
    }
  }
LABEL_768:
  if (v407 + 5 > v408)
    goto LABEL_774;
  v486 = 0;
  v487 = 5;
  do
  {
    v488 = 8 - (v407 & 7);
    if (v487 < v488)
      v488 = v487;
    v486 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v488)) & ~(-1 << v488) | (v486 << v488);
    v407 += v488;
    *v23 = v407;
    v487 -= v488;
  }
  while (v487);
  v489 = (v486 + 1);
  if (v407 + v489 > v408)
  {
LABEL_774:
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3667;
    goto LABEL_370;
  }
  if (v486 != -1)
  {
    v490 = 0;
    do
    {
      v491 = 8 - (v407 & 7);
      if (v489 < v491)
        v491 = v489;
      v490 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v491)) & ~(-1 << v491) | (v490 << v491);
      v407 += v491;
      *v23 = v407;
      v489 -= v491;
    }
    while (v489);
    if (v490)
    {
      v492 = 0;
      while (v407 + v451 <= v408)
      {
        v493 = 0;
        if ((_DWORD)v451)
        {
          v494 = v451;
          do
          {
            v495 = 8 - (v407 & 7);
            if (v494 < v495)
              v495 = v494;
            v493 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v495)) & ~(-1 << v495) | (v493 << v495);
            v407 += v495;
            *v23 = v407;
            v494 -= v495;
          }
          while (v494);
        }
        if (v407 + v764 > v408)
        {
          v244 = 3673;
          goto LABEL_369;
        }
        v496 = v764;
        if ((_DWORD)v764)
        {
          v496 = 0;
          v497 = v764;
          do
          {
            v498 = 8 - (v407 & 7);
            if (v497 < v498)
              v498 = v497;
            v496 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v498)) & ~(-1 << v498) | (v496 << v498);
            v407 += v498;
            *v23 = v407;
            v497 -= v498;
          }
          while (v497);
        }
        if (v493 >= v452)
        {
          v244 = 3674;
          goto LABEL_369;
        }
        v499 = *(_QWORD *)(v406 + 96);
        if (v496 >= (unint64_t)((*(_QWORD *)(v406 + 104) - v499) >> 7))
        {
          v244 = 3675;
          goto LABEL_369;
        }
        v500 = v499 + ((unint64_t)v496 << 7);
        *(_BYTE *)(v500 + 127) = 2;
        *(_DWORD *)(v500 + 120) = v493 + v414;
        if (++v492 == v490)
          goto LABEL_801;
      }
      v244 = 3672;
      goto LABEL_369;
    }
  }
LABEL_801:
  if (v407 + 5 > v408)
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3682;
    goto LABEL_370;
  }
  v501 = 0;
  v502 = 5;
  do
  {
    v503 = 8 - (v407 & 7);
    if (v502 < v503)
      v503 = v502;
    v501 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v503)) & ~(-1 << v503) | (v501 << v503);
    v407 += v503;
    *v23 = v407;
    v502 -= v503;
  }
  while (v502);
  v504 = (v501 + 1);
  if (v407 + v504 > v408)
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3685;
    goto LABEL_370;
  }
  v505 = 0;
  if (v501 != -1)
  {
    v506 = (v501 + 1);
    do
    {
      v507 = 8 - (v407 & 7);
      if (v506 < v507)
        v507 = v506;
      v505 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v507)) & ~(-1 << v507) | (v505 << v507);
      v407 += v507;
      *v23 = v407;
      v506 -= v507;
    }
    while (v506);
    if (v505)
    {
      v508 = 0;
      v509 = v456;
      while (v407 + v770 <= v408)
      {
        if ((_DWORD)v770)
        {
          v510 = 0;
          v511 = v770;
          do
          {
            v512 = 8 - (v407 & 7);
            if (v511 < v512)
              v512 = v511;
            v510 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v512)) & ~(-1 << v512) | (v510 << v512);
            v407 += v512;
            *v23 = v407;
            v511 -= v512;
          }
          while (v511);
        }
        else
        {
          v510 = 0;
        }
        if (*(_QWORD *)(v406 + 248) <= (unint64_t)v510)
        {
          v244 = 3689;
          goto LABEL_369;
        }
        if (*(_QWORD *)(v406 + 264) <= (unint64_t)v509)
        {
          v244 = 3690;
          goto LABEL_369;
        }
        v513 = v405 + 56 * v509;
        *(_BYTE *)(v513 + 8) = 3;
        *(_QWORD *)(v513 + 48) = v510;
        *(_BYTE *)(v513 + 32) = 0;
        if (v407 + 64 > v408)
        {
          v244 = 3695;
          goto LABEL_369;
        }
        v514 = 0;
        v515 = 64;
        do
        {
          v516 = 8 - (v407 & 7);
          if (v515 < v516)
            v516 = v515;
          v514 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v516)) & (unint64_t)~(-1 << v516) | (v514 << v516);
          v407 += v516;
          *v23 = v407;
          v515 -= v516;
        }
        while (v515);
        *(_QWORD *)v513 = v514;
        ++v508;
        ++v509;
        if (v508 == v505)
          goto LABEL_838;
      }
      v244 = 3688;
      goto LABEL_369;
    }
  }
  v509 = v456;
LABEL_838:
  if (v407 + 5 > v408)
    goto LABEL_844;
  v517 = 0;
  v518 = 5;
  do
  {
    v519 = 8 - (v407 & 7);
    if (v518 < v519)
      v519 = v518;
    v517 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v519)) & ~(-1 << v519) | (v517 << v519);
    v407 += v519;
    *v23 = v407;
    v518 -= v519;
  }
  while (v518);
  v520 = (v517 + 1);
  if (v407 + v520 > v408)
  {
LABEL_844:
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3699;
    goto LABEL_370;
  }
  if (v517 != -1)
  {
    v521 = 0;
    do
    {
      v522 = 8 - (v407 & 7);
      if (v520 < v522)
        v522 = v520;
      v521 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v522)) & ~(-1 << v522) | (v521 << v522);
      v407 += v522;
      *v23 = v407;
      v520 -= v522;
    }
    while (v520);
    if (v521)
    {
      v523 = 0;
      while (v407 + v504 <= v408)
      {
        v524 = 0;
        if ((_DWORD)v504)
        {
          v525 = v504;
          do
          {
            v526 = 8 - (v407 & 7);
            if (v525 < v526)
              v526 = v525;
            v524 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v526)) & ~(-1 << v526) | (v524 << v526);
            v407 += v526;
            *v23 = v407;
            v525 -= v526;
          }
          while (v525);
        }
        if (v407 + v766 > v408)
        {
          v244 = 3705;
          goto LABEL_369;
        }
        if ((_DWORD)v766)
        {
          v527 = 0;
          v528 = v766;
          do
          {
            v529 = 8 - (v407 & 7);
            if (v528 < v529)
              v529 = v528;
            v527 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v529)) & ~(-1 << v529) | (v527 << v529);
            v407 += v529;
            *v23 = v407;
            v528 -= v529;
          }
          while (v528);
        }
        else
        {
          v527 = 0;
        }
        if (v524 >= v505)
        {
          v244 = 3706;
          goto LABEL_369;
        }
        v530 = *(_QWORD *)(v406 + 504);
        if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v406 + 512) - v530) >> 5) <= (unint64_t)v527)
        {
          v244 = 3707;
          goto LABEL_369;
        }
        v531 = v405 + 56 * v456 + 56 * v524;
        *(_BYTE *)(v531 + 32) = 1;
        *(_QWORD *)(v531 + 40) = v527;
        v532 = *(_QWORD *)(v406 + 256) + (*(_QWORD *)(v531 + 48) << 6);
        v533 = *(_QWORD *)(v406 + 216) + 152 * *(_QWORD *)(v532 + 56);
        v534 = v530 + 224 * v527;
        *(_QWORD *)(v534 + 120) = *(_QWORD *)(*(_QWORD *)(v406 + 184) + 144 * *(_QWORD *)(v533 + 144) + 104);
        *(_QWORD *)(v534 + 128) = *(_QWORD *)(v533 + 104);
        *(_QWORD *)(v534 + 136) = *(_QWORD *)v532;
        *(_QWORD *)(v534 + 144) = *(_QWORD *)v531;
        *(_WORD *)(v534 + 152) = *(_DWORD *)(v532 + 8);
        *(_BYTE *)(v534 + 156) = 3;
        if (++v523 == v521)
          goto LABEL_873;
      }
      v244 = 3704;
      goto LABEL_369;
    }
  }
LABEL_873:
  if (v407 + 5 > v408)
    goto LABEL_879;
  v535 = 0;
  v536 = 5;
  do
  {
    v537 = 8 - (v407 & 7);
    if (v536 < v537)
      v537 = v536;
    v535 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v537)) & ~(-1 << v537) | (v535 << v537);
    v407 += v537;
    *v23 = v407;
    v536 -= v537;
  }
  while (v536);
  v538 = (v535 + 1);
  if (v407 + v538 > v408)
  {
LABEL_879:
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3724;
    goto LABEL_370;
  }
  if (v535 != -1)
  {
    v539 = 0;
    do
    {
      v540 = 8 - (v407 & 7);
      if (v538 < v540)
        v540 = v538;
      v539 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v540)) & ~(-1 << v540) | (v539 << v540);
      v407 += v540;
      *v23 = v407;
      v538 -= v540;
    }
    while (v538);
    if (v539)
    {
      v541 = 0;
      while (v407 + v504 <= v408)
      {
        v542 = 0;
        if ((_DWORD)v504)
        {
          v543 = v504;
          do
          {
            v544 = 8 - (v407 & 7);
            if (v543 < v544)
              v544 = v543;
            v542 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v544)) & ~(-1 << v544) | (v542 << v544);
            v407 += v544;
            *v23 = v407;
            v543 -= v544;
          }
          while (v543);
        }
        if (v407 + v764 > v408)
        {
          v244 = 3730;
          goto LABEL_369;
        }
        v545 = v764;
        if ((_DWORD)v764)
        {
          v545 = 0;
          v546 = v764;
          do
          {
            v547 = 8 - (v407 & 7);
            if (v546 < v547)
              v547 = v546;
            v545 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v547)) & ~(-1 << v547) | (v545 << v547);
            v407 += v547;
            *v23 = v407;
            v546 -= v547;
          }
          while (v546);
        }
        if (v542 >= v505)
        {
          v244 = 3731;
          goto LABEL_369;
        }
        v548 = *(_QWORD *)(v406 + 96);
        if (v545 >= (unint64_t)((*(_QWORD *)(v406 + 104) - v548) >> 7))
        {
          v244 = 3732;
          goto LABEL_369;
        }
        v549 = v548 + ((unint64_t)v545 << 7);
        *(_BYTE *)(v549 + 127) = 2;
        *(_DWORD *)(v549 + 120) = v542 + v456;
        if (++v541 == v539)
          goto LABEL_906;
      }
      v244 = 3729;
      goto LABEL_369;
    }
  }
LABEL_906:
  if (v407 + 5 > v408)
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3739;
    goto LABEL_370;
  }
  v554 = 0;
  v555 = 5;
  do
  {
    v556 = 8 - (v407 & 7);
    if (v555 < v556)
      v556 = v555;
    v554 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v556)) & ~(-1 << v556) | (v554 << v556);
    v407 += v556;
    *v23 = v407;
    v555 -= v556;
  }
  while (v555);
  v557 = (v554 + 1);
  if (v407 + v557 > v408)
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3742;
    goto LABEL_370;
  }
  v558 = 0;
  if (v554 != -1)
  {
    v559 = (v554 + 1);
    do
    {
      v560 = 8 - (v407 & 7);
      if (v559 < v560)
        v560 = v559;
      v558 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v560)) & ~(-1 << v560) | (v558 << v560);
      v407 += v560;
      *v23 = v407;
      v559 -= v560;
    }
    while (v559);
    if (v558)
    {
      v561 = 0;
      v562 = v509;
      while (v407 + v770 <= v408)
      {
        if ((_DWORD)v770)
        {
          v563 = 0;
          v564 = v770;
          do
          {
            v565 = 8 - (v407 & 7);
            if (v564 < v565)
              v565 = v564;
            v563 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v565)) & ~(-1 << v565) | (v563 << v565);
            v407 += v565;
            *v23 = v407;
            v564 -= v565;
          }
          while (v564);
        }
        else
        {
          v563 = 0;
        }
        if (*(_QWORD *)(v406 + 248) <= (unint64_t)v563)
        {
          v244 = 3746;
          goto LABEL_369;
        }
        if (*(_QWORD *)(v406 + 264) <= (unint64_t)v562)
        {
          v244 = 3747;
          goto LABEL_369;
        }
        v566 = v405 + 56 * v562;
        *(_BYTE *)(v566 + 8) = 4;
        *(_QWORD *)(v566 + 48) = v563;
        *(_BYTE *)(v566 + 32) = 0;
        if (v407 + 64 > v408)
        {
          v244 = 3752;
          goto LABEL_369;
        }
        v567 = 0;
        v568 = 64;
        do
        {
          v569 = 8 - (v407 & 7);
          if (v568 < v569)
            v569 = v568;
          v567 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v569)) & (unint64_t)~(-1 << v569) | (v567 << v569);
          v407 += v569;
          *v23 = v407;
          v568 -= v569;
        }
        while (v568);
        *(_QWORD *)v566 = v567;
        ++v561;
        ++v562;
        if (v561 == v558)
          goto LABEL_945;
      }
      v244 = 3745;
      goto LABEL_369;
    }
  }
LABEL_945:
  if (v407 + 5 > v408)
    goto LABEL_951;
  v570 = 0;
  v571 = 5;
  do
  {
    v572 = 8 - (v407 & 7);
    if (v571 < v572)
      v572 = v571;
    v570 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v572)) & ~(-1 << v572) | (v570 << v572);
    v407 += v572;
    *v23 = v407;
    v571 -= v572;
  }
  while (v571);
  v573 = (v570 + 1);
  if (v407 + v573 > v408)
  {
LABEL_951:
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3756;
    goto LABEL_370;
  }
  if (v570 != -1)
  {
    v574 = 0;
    do
    {
      v575 = 8 - (v407 & 7);
      if (v573 < v575)
        v575 = v573;
      v574 = (*(unsigned __int8 *)(v410 + (v407 >> 3)) >> (8 - (v407 & 7) - v575)) & ~(-1 << v575) | (v574 << v575);
      v407 += v575;
      *v23 = v407;
      v573 -= v575;
    }
    while (v573);
    if (v574)
    {
      v576 = 0;
      while (v407 + v557 <= v408)
      {
        v577 = 0;
        if ((_DWORD)v557)
        {
          v578 = *(_QWORD *)v776;
          v579 = v557;
          do
          {
            v580 = 8 - (v407 & 7);
            if (v579 < v580)
              v580 = v579;
            v577 = (*(unsigned __int8 *)(v578 + (v407 >> 3)) >> (8 - (v407 & 7) - v580)) & ~(-1 << v580) | (v577 << v580);
            v407 += v580;
            *v23 = v407;
            v579 -= v580;
          }
          while (v579);
        }
        if (v407 + v766 > v408)
        {
          v244 = 3762;
          goto LABEL_369;
        }
        v581 = v766;
        if ((_DWORD)v766)
        {
          v581 = 0;
          v582 = *(_QWORD *)v776;
          v583 = v766;
          do
          {
            v584 = 8 - (v407 & 7);
            if (v583 < v584)
              v584 = v583;
            v581 = (*(unsigned __int8 *)(v582 + (v407 >> 3)) >> (8 - (v407 & 7) - v584)) & ~(-1 << v584) | (v581 << v584);
            v407 += v584;
            *v23 = v407;
            v583 -= v584;
          }
          while (v583);
        }
        if (v577 >= v558)
        {
          v244 = 3763;
          goto LABEL_369;
        }
        v585 = *(_QWORD *)(v406 + 504);
        if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v406 + 512) - v585) >> 5) <= (unint64_t)v581)
        {
          v244 = 3764;
          goto LABEL_369;
        }
        v586 = v405 + 56 * v509 + 56 * v577;
        *(_BYTE *)(v586 + 32) = 1;
        *(_QWORD *)(v586 + 40) = v581;
        v587 = *(_QWORD *)(v406 + 256) + (*(_QWORD *)(v586 + 48) << 6);
        v588 = *(_QWORD *)(v406 + 216) + 152 * *(_QWORD *)(v587 + 56);
        v589 = v585 + 224 * v581;
        *(_QWORD *)(v589 + 120) = *(_QWORD *)(*(_QWORD *)(v406 + 184) + 144 * *(_QWORD *)(v588 + 144) + 104);
        *(_QWORD *)(v589 + 128) = *(_QWORD *)(v588 + 104);
        *(_QWORD *)(v589 + 136) = *(_QWORD *)v587;
        *(_QWORD *)(v589 + 144) = *(_QWORD *)v586;
        *(_WORD *)(v589 + 152) = *(_DWORD *)(v587 + 8);
        *(_BYTE *)(v589 + 156) = 4;
        if (++v576 == v574)
          goto LABEL_978;
      }
      v244 = 3761;
      goto LABEL_369;
    }
  }
LABEL_978:
  if (v407 + 5 > v408)
    goto LABEL_984;
  v590 = 0;
  v591 = *(_QWORD *)v776;
  v592 = 5;
  do
  {
    v593 = 8 - (v407 & 7);
    if (v592 < v593)
      v593 = v592;
    v590 = (*(unsigned __int8 *)(v591 + (v407 >> 3)) >> (8 - (v407 & 7) - v593)) & ~(-1 << v593) | (v590 << v593);
    v407 += v593;
    *v23 = v407;
    v592 -= v593;
  }
  while (v592);
  v594 = (v590 + 1);
  if (v407 + v594 > v408)
  {
LABEL_984:
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3781;
    goto LABEL_370;
  }
  if ((_DWORD)v594)
  {
    v595 = 0;
    do
    {
      v596 = 8 - (v407 & 7);
      if (v594 < v596)
        v596 = v594;
      v595 = (*(unsigned __int8 *)(v591 + (v407 >> 3)) >> (8 - (v407 & 7) - v596)) & ~(-1 << v596) | (v595 << v596);
      v407 += v596;
      *v23 = v407;
      v594 -= v596;
    }
    while (v594);
    if (v595)
    {
      v597 = 0;
      while (v407 + v557 <= v408)
      {
        v598 = 0;
        if ((_DWORD)v557)
        {
          v599 = v557;
          do
          {
            v600 = 8 - (v407 & 7);
            if (v599 < v600)
              v600 = v599;
            v598 = (*(unsigned __int8 *)(v591 + (v407 >> 3)) >> (8 - (v407 & 7) - v600)) & ~(-1 << v600) | (v598 << v600);
            v407 += v600;
            *v23 = v407;
            v599 -= v600;
          }
          while (v599);
        }
        if (v407 + v764 > v408)
        {
          v244 = 3787;
          goto LABEL_369;
        }
        v601 = v764;
        if ((_DWORD)v764)
        {
          v601 = 0;
          v602 = v764;
          do
          {
            v603 = 8 - (v407 & 7);
            if (v602 < v603)
              v603 = v602;
            v601 = (*(unsigned __int8 *)(v591 + (v407 >> 3)) >> (8 - (v407 & 7) - v603)) & ~(-1 << v603) | (v601 << v603);
            v407 += v603;
            *v23 = v407;
            v602 -= v603;
          }
          while (v602);
        }
        if (v598 >= v558)
        {
          v244 = 3788;
          goto LABEL_369;
        }
        v604 = *(_QWORD *)(v406 + 96);
        if (v601 >= (unint64_t)((*(_QWORD *)(v406 + 104) - v604) >> 7))
        {
          v244 = 3789;
          goto LABEL_369;
        }
        v605 = v604 + ((unint64_t)v601 << 7);
        *(_BYTE *)(v605 + 127) = 2;
        *(_DWORD *)(v605 + 120) = v598 + v509;
        if (++v597 == v595)
          goto LABEL_1011;
      }
      v244 = 3786;
      goto LABEL_369;
    }
  }
LABEL_1011:
  if (*(_QWORD *)(v406 + 192) == *(_QWORD *)(v406 + 184))
  {
    v608 = 0;
  }
  else
  {
    v606 = 0;
    v607 = 0;
    v608 = 0;
    v609 = 8 * *(_QWORD *)(v9 + 16);
    v406 = *a3;
    do
    {
      if (v407 + 5 > v609)
        goto LABEL_1048;
      v612 = 0;
      v613 = 5;
      do
      {
        v614 = 8 - (v407 & 7);
        if (v613 < v614)
          v614 = v613;
        v612 = (*(unsigned __int8 *)(v591 + (v407 >> 3)) >> (8 - (v407 & 7) - v614)) & ~(-1 << v614) | (v612 << v614);
        v407 += v614;
        *v23 = v407;
        v613 -= v614;
      }
      while (v613);
      v615 = (v612 + 1);
      if (v407 + v615 > v609)
      {
LABEL_1048:
        v243 = (FILE *)*MEMORY[0x1E0C80C10];
        v244 = 3796;
        goto LABEL_370;
      }
      v616 = 0;
      if ((_DWORD)v615)
      {
        do
        {
          v617 = 8 - (v407 & 7);
          if (v615 < v617)
            v617 = v615;
          v616 = (*(unsigned __int8 *)(v591 + (v407 >> 3)) >> (8 - (v407 & 7) - v617)) & ~(-1 << v617) | (v616 << v617);
          v407 += v617;
          *v23 = v407;
          v615 -= v617;
        }
        while (v615);
      }
      v610 = *(_QWORD *)(v406 + 184);
      v611 = v610 + 144 * v606;
      *(_DWORD *)(v611 + 96) = v608;
      *(_DWORD *)(v611 + 100) = v616;
      v608 += v616;
      v606 = ++v607;
    }
    while (0x8E38E38E38E38E39 * ((*(_QWORD *)(v406 + 192) - v610) >> 4) > v607);
  }
  if (*(_QWORD *)(v406 + 224) != *(_QWORD *)(v406 + 216))
  {
    v618 = 0;
    v619 = 0;
    v620 = 8 * *(_QWORD *)(v9 + 16);
    v406 = *a3;
    do
    {
      if (v407 + 5 > v620)
        goto LABEL_1111;
      v623 = 0;
      v624 = 5;
      do
      {
        v625 = 8 - (v407 & 7);
        if (v624 < v625)
          v625 = v624;
        v623 = (*(unsigned __int8 *)(v591 + (v407 >> 3)) >> (8 - (v407 & 7) - v625)) & ~(-1 << v625) | (v623 << v625);
        v407 += v625;
        *v23 = v407;
        v624 -= v625;
      }
      while (v624);
      v626 = (v623 + 1);
      if (v407 + v626 > v620)
      {
LABEL_1111:
        v243 = (FILE *)*MEMORY[0x1E0C80C10];
        v244 = 3803;
        goto LABEL_370;
      }
      v627 = 0;
      if ((_DWORD)v626)
      {
        do
        {
          v628 = 8 - (v407 & 7);
          if (v626 < v628)
            v628 = v626;
          v627 = (*(unsigned __int8 *)(v591 + (v407 >> 3)) >> (8 - (v407 & 7) - v628)) & ~(-1 << v628) | (v627 << v628);
          v407 += v628;
          *v23 = v407;
          v626 -= v628;
        }
        while (v626);
      }
      v621 = *(_QWORD *)(v406 + 216);
      v622 = v621 + 152 * v618;
      *(_DWORD *)(v622 + 96) = v608;
      *(_DWORD *)(v622 + 100) = v627;
      v608 += v627;
      v618 = ++v619;
    }
    while (0x86BCA1AF286BCA1BLL * ((*(_QWORD *)(v406 + 224) - v621) >> 3) > v619);
  }
  if (!geo::codec::decodeSectionEncoding(v776, (GeoCodecsVertexPool *)(v406 + 840), 0, a2, 0))
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3809;
    goto LABEL_370;
  }
  v629 = (_QWORD *)*a3;
  v631 = *(_QWORD *)(*a3 + 184);
  v630 = *(_QWORD *)(*a3 + 192);
  v632 = 0x8E38E38E38E38E39 * ((v630 - v631) >> 4);
  if (v630 != v631)
  {
    v633 = 0;
    v634 = 1;
    do
    {
      if (*(_QWORD *)(v629[105] + 40) < (unint64_t)(*(_DWORD *)(v631 + 144 * v633 + 100)
                                                                          + *(_DWORD *)(v631 + 144 * v633 + 96)))
      {
        v243 = (FILE *)*MEMORY[0x1E0C80C10];
        v244 = 3812;
        goto LABEL_370;
      }
      v633 = v634++;
    }
    while (v632 > v633);
  }
  v635 = v629[27];
  v636 = v629[28];
  v637 = (v636 - v635) / 152;
  if (v636 != v635)
  {
    v638 = 0;
    v639 = 1;
    do
    {
      if (*(_QWORD *)(v629[105] + 40) < (unint64_t)(*(_DWORD *)(v635 + 152 * v638 + 100)
                                                                          + *(_DWORD *)(v635 + 152 * v638 + 96)))
      {
        v243 = (FILE *)*MEMORY[0x1E0C80C10];
        v244 = 3815;
        goto LABEL_370;
      }
      v638 = v639++;
    }
    while (v637 > v638);
  }
  __asm { FMOV            V0.2D, #1.0 }
  if (v630 != v631)
  {
    v643 = 0;
    v644 = v629[105];
    v645 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)~(-1 << *(_BYTE *)v644)), 0));
    while (1)
    {
      v646 = v631 + 144 * v643;
      v647 = *(unsigned int *)(v646 + 100);
      if ((_DWORD)v647)
        break;
LABEL_1082:
      if (++v643 >= v632)
        goto LABEL_1083;
    }
    v648.i64[0] = *(_QWORD *)(v777 + 8 * v643);
    v648.i64[1] = *(_QWORD *)(v778 + 8 * v643);
    v649 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_s64(v648), v645));
    v650 = *(unsigned int *)(v646 + 96);
    v651 = v647 + v650;
    v652 = *(_QWORD *)(v644 + 40);
    if (v652 <= v650)
      v652 = v650;
    v653 = (float32x4_t)vdupq_lane_s32((int32x2_t)v649, 0);
    v654 = (float32x4_t)vdupq_lane_s32((int32x2_t)v649, 1);
    while (1)
    {
      if (v650 == v652
        || (v655 = *(_QWORD *)(v644 + 32), v656 = *(_QWORD *)(v655 + 16 * v650), v656 >= *(_QWORD *)(v644 + 16)))
      {
        v243 = (FILE *)*MEMORY[0x1E0C80C10];
        v244 = 3831;
        goto LABEL_370;
      }
      v657 = *(_QWORD *)(v655 + 16 * v650 + 8);
      if (!v657)
        goto LABEL_1081;
      v658 = *(_QWORD *)(v644 + 8);
      if (v657 >= 0x10
        && ((v659 = v658 + 8 * v656,
             v660 = 8 * (v657 - 1),
             v661 = v659 + v660,
             v662 = v659,
             v663 = v659 + 4 + v660,
             v661 >= v659)
          ? (v664 = v663 >= v659 + 4)
          : (v664 = 0),
            v664 ? (_ZF = (v657 - 1) >> 61 == 0) : (_ZF = 0),
            _ZF))
      {
        v666 = v657 & 0xFFFFFFFFFFFFFFF8;
        v667 = (float *)(v662 + 32);
        v668 = v657 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v669 = v667 - 8;
          v785 = vld2q_f32(v669);
          v787 = vld2q_f32(v667);
          v789.val[0] = vaddq_f32(v785.val[0], v653);
          v789.val[1] = vaddq_f32(v785.val[1], v654);
          v785.val[0] = vaddq_f32(v787.val[0], v653);
          v785.val[1] = vaddq_f32(v787.val[1], v654);
          vst2q_f32(v669, v789);
          vst2q_f32(v667, v785);
          v667 += 16;
          v668 -= 8;
        }
        while (v668);
        if (v657 == v666)
          goto LABEL_1081;
      }
      else
      {
        v666 = 0;
      }
      v670 = v657 - v666;
      v671 = (float32x2_t *)(v658 + 8 * v666 + 8 * v656);
      do
      {
        *v671 = vadd_f32(*v671, v649);
        ++v671;
        --v670;
      }
      while (v670);
LABEL_1081:
      if (++v650 >= v651)
        goto LABEL_1082;
    }
  }
LABEL_1083:
  if (v636 != v635)
  {
    v672 = 0;
    v673 = v629[105];
    v674 = (double)~(-1 << *(_BYTE *)v673);
    if (v637 <= 1)
      v637 = 1;
    v675 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v674, 0));
    v676 = 1.0 / v674;
    while (1)
    {
      v680 = v635 + 152 * v672;
      v681 = 8 * *(_QWORD *)(v680 + 144);
      v682 = *(_QWORD *)(v777 + v681);
      v683 = *(_QWORD *)(v778 + v681);
      v684 = *(unsigned int *)(v680 + 100);
      if ((_DWORD)v684)
      {
        v685 = *(_QWORD *)(v673 + 32);
        if (v685)
          break;
      }
LABEL_1087:
      v677 = (double)(v682 + *(unsigned int *)(v768 + 4 * v672)) * v676;
      v678 = (double)(v683 + *(unsigned int *)(v767 + 4 * v672)) * v676;
      v679 = v635 + 152 * v672;
      *(float *)(v679 + 124) = v677;
      *(float *)(v679 + 128) = v678;
      if (++v672 == v637)
        goto LABEL_1116;
    }
    v686.i64[0] = v682;
    v686.i64[1] = v683;
    v687 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_s64(v686), v675));
    v688 = *(unsigned int *)(v680 + 96);
    v689 = v684 + v688;
    v690 = *(_QWORD *)(v673 + 40);
    v691 = (float32x4_t)vdupq_lane_s32((int32x2_t)v687, 0);
    v692 = (float32x4_t)vdupq_lane_s32((int32x2_t)v687, 1);
    while (1)
    {
      if (v690 <= v688)
        goto LABEL_1091;
      v693 = *(_QWORD *)(v685 + 16 * v688);
      if (v693 >= *(_QWORD *)(v673 + 16))
        goto LABEL_1091;
      v694 = *(_QWORD *)(v685 + 16 * v688 + 8);
      if (!v694)
        goto LABEL_1091;
      v695 = *(_QWORD *)(v673 + 8);
      if (v694 >= 0x10
        && ((v696 = v695 + 8 * v693,
             v697 = 8 * (v694 - 1),
             v698 = v696 + v697,
             v699 = v696,
             v700 = v696 + 4 + v697,
             v698 >= v696)
          ? (v701 = v700 >= v696 + 4)
          : (v701 = 0),
            v701 ? (v702 = (v694 - 1) >> 61 == 0) : (v702 = 0),
            v702))
      {
        v703 = v694 & 0xFFFFFFFFFFFFFFF8;
        v706 = (float *)(v699 + 32);
        v707 = v694 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v708 = v706 - 8;
          v786 = vld2q_f32(v708);
          v788 = vld2q_f32(v706);
          v790.val[0] = vaddq_f32(v786.val[0], v691);
          v790.val[1] = vaddq_f32(v786.val[1], v692);
          v786.val[0] = vaddq_f32(v788.val[0], v691);
          v786.val[1] = vaddq_f32(v788.val[1], v692);
          vst2q_f32(v708, v790);
          vst2q_f32(v706, v786);
          v706 += 16;
          v707 -= 8;
        }
        while (v707);
        if (v694 == v703)
          goto LABEL_1091;
      }
      else
      {
        v703 = 0;
      }
      v704 = v694 - v703;
      v705 = (float32x2_t *)(v695 + 8 * v703 + 8 * v693);
      do
      {
        *v705 = vadd_f32(*v705, v687);
        ++v705;
        --v704;
      }
      while (v704);
LABEL_1091:
      if (++v688 >= v689)
        goto LABEL_1087;
    }
  }
LABEL_1116:
  if (v630 != v631)
  {
    v709 = 0;
    v710 = 128;
    do
    {
      v711 = *(_QWORD *)(v9 + 24);
      if (v711 + 1 > 8 * *(_QWORD *)(v9 + 16))
      {
        v243 = (FILE *)*MEMORY[0x1E0C80C10];
        v244 = 3872;
        goto LABEL_370;
      }
      v712 = *(unsigned __int8 *)(*(_QWORD *)v776 + (v711 >> 3));
      *v23 = v711 + 1;
      if (((v712 >> (~(_BYTE)v711 & 7)) & 1) != 0)
      {
        LODWORD(v784[0]) = 0;
        if (!BitstreamUnpack((uint64_t *)v776, (int *)v784, v763))
        {
          v244 = 3875;
          goto LABEL_369;
        }
        if (v772 <= LODWORD(v784[0]))
        {
          v244 = 3876;
          goto LABEL_369;
        }
        v713 = *a3;
        v714 = *(_QWORD *)(*a3 + 184);
        *(_QWORD *)(v714 + v710) = v771 + LODWORD(v784[0]);
      }
      else
      {
        v713 = *a3;
        v714 = *(_QWORD *)(*a3 + 184);
      }
      ++v709;
      v710 += 144;
    }
    while (v709 < 0x8E38E38E38E38E39 * ((*(_QWORD *)(v713 + 192) - v714) >> 4));
  }
  v782 = 0;
  if (!BitstreamUnpackVar32((uint64_t *)v776, &v782))
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3882;
    goto LABEL_370;
  }
  v715 = v782;
  if (v782)
  {
    while (1)
    {
      LODWORD(v784[0]) = 0;
      LODWORD(v783) = 0;
      if (!BitstreamUnpack((uint64_t *)v776, (int *)v784, v770))
        break;
      v716 = (int)v784[0];
      if (*(_QWORD *)(*a3 + 248) <= (unint64_t)LODWORD(v784[0]))
      {
        v244 = 3887;
        goto LABEL_369;
      }
      if (!BitstreamUnpack((uint64_t *)v776, (int *)&v783, v764))
      {
        v244 = 3888;
        goto LABEL_369;
      }
      v717 = *(_QWORD *)(*a3 + 96);
      if (v783 >= (unint64_t)((*(_QWORD *)(*a3 + 104) - v717) >> 7))
      {
        v244 = 3889;
        goto LABEL_369;
      }
      v718 = v717 + ((unint64_t)v783 << 7);
      *(_BYTE *)(v718 + 127) = 3;
      *(_DWORD *)(v718 + 120) = v716;
      if (!--v715)
        goto LABEL_1132;
    }
    v244 = 3886;
    goto LABEL_369;
  }
LABEL_1132:
  v719 = *(_DWORD *)(v9 + 64);
  if (v719 < 0x3C)
    goto LABEL_1211;
  v720 = (_QWORD *)*a3;
  v721 = *(_QWORD *)(*a3 + 192);
  if (v721 != *(_QWORD *)(*a3 + 184))
  {
    v722 = 0;
    v723 = 136;
    while (1)
    {
      v724 = *(_QWORD *)(v9 + 24);
      if (v724 + 1 > 8 * *(_QWORD *)(v9 + 16))
      {
        v243 = (FILE *)*MEMORY[0x1E0C80C10];
        v244 = 3897;
        goto LABEL_370;
      }
      v725 = *(unsigned __int8 *)(*(_QWORD *)v776 + (v724 >> 3));
      *v23 = v724 + 1;
      if (((v725 >> (~(_BYTE)v724 & 7)) & 1) != 0)
      {
        LODWORD(v784[0]) = 0;
        if (!BitstreamUnpack((uint64_t *)v776, (int *)v784, v763))
        {
          v244 = 3900;
          goto LABEL_369;
        }
        if (v772 <= LODWORD(v784[0]))
        {
          v244 = 3901;
          goto LABEL_369;
        }
        v720 = (_QWORD *)*a3;
        v721 = *(_QWORD *)(*a3 + 184);
        *(_QWORD *)(v721 + v723) = v771 + LODWORD(v784[0]);
      }
      else
      {
        v720 = (_QWORD *)*a3;
        v721 = *(_QWORD *)(*a3 + 184);
      }
      ++v722;
      v726 = v720[24];
      v723 += 144;
      if (v722 >= 0x8E38E38E38E38E39 * ((v726 - v721) >> 4))
      {
        v719 = *(_DWORD *)(v9 + 64);
        goto LABEL_1152;
      }
    }
  }
  v726 = *(_QWORD *)(*a3 + 192);
LABEL_1152:
  if (v719 < 0x3D)
    goto LABEL_1211;
  if (v726 != v721)
  {
    v727 = 0;
    v728 = 75;
    while (1)
    {
      v729 = *(_QWORD *)(v9 + 24);
      if (v729 + 1 > 8 * *(_QWORD *)(v9 + 16))
        break;
      v730 = *(unsigned __int8 *)(*(_QWORD *)v776 + (v729 >> 3));
      *v23 = v729 + 1;
      if (((v730 >> (~(_BYTE)v729 & 7)) & 1) != 0)
      {
        v731 = *(_QWORD *)(*a3 + 184);
        *(_BYTE *)(v731 + v728) = 1;
        if (!BitstreamUnpack64((uint64_t *)v776, (unint64_t *)(v731 + v728 - 27), 0x40uLL))
        {
          v244 = 3914;
          goto LABEL_369;
        }
      }
      ++v727;
      v720 = (_QWORD *)*a3;
      v728 += 144;
      if (v727 >= 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(*a3 + 192) - *(_QWORD *)(*a3 + 184)) >> 4))
        goto LABEL_1159;
    }
    v244 = 3910;
    goto LABEL_369;
  }
LABEL_1159:
  if (v720[28] != v720[27])
  {
    v732 = 0;
    v733 = 75;
    while (1)
    {
      v734 = *(_QWORD *)(v9 + 24);
      if (v734 + 1 > 8 * *(_QWORD *)(v9 + 16))
        break;
      v735 = *(unsigned __int8 *)(*(_QWORD *)v776 + (v734 >> 3));
      *v23 = v734 + 1;
      if (((v735 >> (~(_BYTE)v734 & 7)) & 1) != 0)
      {
        v736 = *(_QWORD *)(*a3 + 216);
        *(_BYTE *)(v736 + v733) = 1;
        if (!BitstreamUnpack64((uint64_t *)v776, (unint64_t *)(v736 + v733 - 27), 0x40uLL))
        {
          v244 = 3924;
          goto LABEL_369;
        }
      }
      ++v732;
      v733 += 152;
      if (v732 >= 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(*a3 + 224) - *(_QWORD *)(*a3 + 216)) >> 3))
        goto LABEL_1165;
    }
    v244 = 3920;
    goto LABEL_369;
  }
LABEL_1165:
  if (*(_DWORD *)(v9 + 64) < 0x43u)
    goto LABEL_1211;
  LODWORD(v784[0]) = 0;
  if (!BitstreamUnpackVar32((uint64_t *)v776, (int *)v784))
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3931;
    goto LABEL_370;
  }
  v737 = (int)v784[0];
  if (LODWORD(v784[0]))
  {
    while (1)
    {
      LODWORD(v783) = 0;
      if (!BitstreamUnpack((uint64_t *)v776, (int *)&v783, v766))
        break;
      v738 = v783;
      v739 = *(_QWORD *)(*a3 + 504);
      if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*a3 + 512) - v739) >> 5) <= (unint64_t)v783)
      {
        v244 = 3935;
        goto LABEL_369;
      }
      v781 = 0;
      if (!BitstreamUnpackSignedVar32((uint64_t *)v776, &v781))
      {
        v244 = 3939;
        goto LABEL_369;
      }
      if ((v781 + 0x7FFF) >= 0xFFFE)
      {
        v244 = 3940;
        goto LABEL_369;
      }
      v740 = v739 + 224 * v738;
      *(_WORD *)(v740 + 154) = v781;
      *(_BYTE *)(v740 + 216) = 1;
      if (!--v737)
        goto LABEL_1173;
    }
    v244 = 3934;
    goto LABEL_369;
  }
LABEL_1173:
  if (*(_DWORD *)(v9 + 64) < 0x45u)
    goto LABEL_1211;
  v741 = *(_QWORD *)(v9 + 24);
  if (v741 + 1 > 8 * *(_QWORD *)(v9 + 16))
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3948;
    goto LABEL_370;
  }
  v742 = *(unsigned __int8 *)(*(_QWORD *)v776 + (v741 >> 3));
  *v23 = v741 + 1;
  if (((v742 >> (~(_BYTE)v741 & 7)) & 1) == 0)
    goto LABEL_1211;
  LODWORD(v784[0]) = 0;
  if (!BitstreamUnpackVar32((uint64_t *)v776, (int *)v784))
  {
    v243 = (FILE *)*MEMORY[0x1E0C80C10];
    v244 = 3951;
    goto LABEL_370;
  }
  v743 = (_QWORD *)*a3;
  if (*(_QWORD *)(*a3 + 192) != *(_QWORD *)(*a3 + 184))
  {
    v744 = 0;
    v745 = 1;
    v746 = 1.0 / (float)LODWORD(v784[0]);
    do
    {
      v747 = *(_QWORD *)(v9 + 24);
      if (v747 + 1 > 8 * *(_QWORD *)(v9 + 16))
      {
        v243 = (FILE *)*MEMORY[0x1E0C80C10];
        v244 = 3954;
        goto LABEL_370;
      }
      v748 = *(unsigned __int8 *)(*(_QWORD *)v776 + (v747 >> 3));
      *v23 = v747 + 1;
      if (((v748 >> (~(_BYTE)v747 & 7)) & 1) != 0)
      {
        v749 = *(_QWORD *)(*a3 + 184);
        *(_BYTE *)(v749 + 144 * v744 + 120) = 1;
        LODWORD(v783) = 0;
        if (!BitstreamUnpackSignedVar32((uint64_t *)v776, (int *)&v783))
        {
          v243 = (FILE *)*MEMORY[0x1E0C80C10];
          v244 = 3960;
          goto LABEL_370;
        }
        *(float *)(v749 + 144 * v744 + 124) = (float)(int)v783 * v746;
      }
      v744 = v745;
      v743 = (_QWORD *)*a3;
      ++v745;
    }
    while (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(*a3 + 192) - *(_QWORD *)(*a3 + 184)) >> 4) > v744);
  }
  if (v743[28] != v743[27])
  {
    v750 = 0;
    v751 = 0;
    v752 = 1.0 / (float)LODWORD(v784[0]);
    do
    {
      v753 = *(_QWORD *)(v9 + 24);
      if (v753 + 1 > 8 * *(_QWORD *)(v9 + 16))
      {
        v243 = (FILE *)*MEMORY[0x1E0C80C10];
        v244 = 3967;
        goto LABEL_370;
      }
      v754 = *(unsigned __int8 *)(*(_QWORD *)v776 + (v753 >> 3));
      *v23 = v753 + 1;
      if (((v754 >> (~(_BYTE)v753 & 7)) & 1) != 0)
      {
        v755 = *(_QWORD *)(*a3 + 216) + v750;
        *(_BYTE *)(v755 + 132) = 1;
        LODWORD(v783) = 0;
        if (!BitstreamUnpackSignedVar32((uint64_t *)v776, (int *)&v783))
        {
          v243 = (FILE *)*MEMORY[0x1E0C80C10];
          v244 = 3973;
          goto LABEL_370;
        }
        *(float *)(v755 + 136) = (float)(int)v783 * v752;
      }
      ++v751;
      v743 = (_QWORD *)*a3;
      v750 += 152;
    }
    while (v751 < 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(*a3 + 224) - *(_QWORD *)(*a3 + 216)) >> 3));
  }
  if (!v743[31])
  {
LABEL_1211:
    v17 = 1;
    v10 = v774;
    v105 = v767;
    v104 = v768;
    if ((v762 & 1) == 0)
      goto LABEL_371;
    goto LABEL_151;
  }
  v756 = 0;
  v757 = 1;
  v758 = 1.0 / (float)LODWORD(v784[0]);
  while (1)
  {
    v759 = *(_QWORD *)(v9 + 24);
    if (v759 + 1 > 8 * *(_QWORD *)(v9 + 16))
    {
      v243 = (FILE *)*MEMORY[0x1E0C80C10];
      v244 = 3980;
      goto LABEL_370;
    }
    v760 = *(unsigned __int8 *)(*(_QWORD *)v776 + (v759 >> 3));
    *v23 = v759 + 1;
    if (((v760 >> (~(_BYTE)v759 & 7)) & 1) != 0)
      break;
LABEL_1210:
    v756 = v757++;
    if (*(_QWORD *)(*a3 + 248) <= v756)
      goto LABEL_1211;
  }
  v761 = *(_QWORD *)(*a3 + 256) + (v756 << 6);
  *(_BYTE *)(v761 + 40) = 1;
  LODWORD(v783) = 0;
  if (BitstreamUnpackSignedVar32((uint64_t *)v776, (int *)&v783))
  {
    *(float *)(v761 + 44) = (float)(int)v783 * v758;
    goto LABEL_1210;
  }
  v243 = (FILE *)*MEMORY[0x1E0C80C10];
  v244 = 3986;
LABEL_370:
  fprintf(v243, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v244);
  v17 = 0;
  v10 = v774;
  v105 = v767;
  v104 = v768;
  if ((v265 & 1) == 0)
  {
LABEL_371:
    {
      v266 = operator new();
      *(_QWORD *)(v266 + 16) = 0x99AFC36000000008;
      *(_QWORD *)(v266 + 24) = "GeoCodec";
      *(_OWORD *)(v266 + 32) = xmmword_189CFDB80;
      *(_QWORD *)v266 = &off_1E1BF6690;
      *(_QWORD *)(v266 + 8) = "GeoCodec";
      *(_OWORD *)(v266 + 56) = 0u;
      *(_OWORD *)(v266 + 72) = 0u;
      *(_OWORD *)(v266 + 88) = 0u;
      *(_OWORD *)(v266 + 104) = 0u;
      *(_OWORD *)(v266 + 120) = 0u;
      *(_OWORD *)(v266 + 136) = 0u;
      *(_OWORD *)(v266 + 152) = 0u;
      *(_OWORD *)(v266 + 168) = 0u;
      *(_OWORD *)(v266 + 184) = 0u;
      *(_OWORD *)(v266 + 200) = 0u;
      *(_OWORD *)(v266 + 216) = 0u;
      *(_OWORD *)(v266 + 232) = 0u;
      *(_QWORD *)(v266 + 248) = 0;
      v267 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v266 + 56), 0);
      if ((_DWORD)v267)
        geo::read_write_lock::logFailure(v267, (uint64_t)"initialization", v268);
      v269 = malloc_create_zone(0, 0);
      *(_QWORD *)(v266 + 48) = v269;
      malloc_set_zone_name(v269, "GeoCodec");
      *(_QWORD *)(v266 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      geo::codec::Allocator::instance(void)::alloc = v266;
    }
  }
LABEL_151:
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v777, 0);
LABEL_152:
  if (v778)
  {
    {
      v356 = operator new();
      *(_QWORD *)(v356 + 16) = 0x99AFC36000000008;
      *(_QWORD *)(v356 + 24) = "GeoCodec";
      *(_OWORD *)(v356 + 32) = xmmword_189CFDB80;
      *(_QWORD *)v356 = &off_1E1BF6690;
      *(_QWORD *)(v356 + 8) = "GeoCodec";
      *(_OWORD *)(v356 + 56) = 0u;
      *(_OWORD *)(v356 + 72) = 0u;
      *(_OWORD *)(v356 + 88) = 0u;
      *(_OWORD *)(v356 + 104) = 0u;
      *(_OWORD *)(v356 + 120) = 0u;
      *(_OWORD *)(v356 + 136) = 0u;
      *(_OWORD *)(v356 + 152) = 0u;
      *(_OWORD *)(v356 + 168) = 0u;
      *(_OWORD *)(v356 + 184) = 0u;
      *(_OWORD *)(v356 + 200) = 0u;
      *(_OWORD *)(v356 + 216) = 0u;
      *(_OWORD *)(v356 + 232) = 0u;
      *(_QWORD *)(v356 + 248) = 0;
      v357 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v356 + 56), 0);
      if ((_DWORD)v357)
        geo::read_write_lock::logFailure(v357, (uint64_t)"initialization", v358);
      v359 = malloc_create_zone(0, 0);
      *(_QWORD *)(v356 + 48) = v359;
      malloc_set_zone_name(v359, "GeoCodec");
      *(_QWORD *)(v356 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      geo::codec::Allocator::instance(void)::alloc = v356;
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v778, 0);
  }
  if (v104)
  {
    {
      v360 = operator new();
      *(_QWORD *)(v360 + 16) = 0x99AFC36000000008;
      *(_QWORD *)(v360 + 24) = "GeoCodec";
      *(_OWORD *)(v360 + 32) = xmmword_189CFDB80;
      *(_QWORD *)v360 = &off_1E1BF6690;
      *(_QWORD *)(v360 + 8) = "GeoCodec";
      *(_OWORD *)(v360 + 56) = 0u;
      *(_OWORD *)(v360 + 72) = 0u;
      *(_OWORD *)(v360 + 88) = 0u;
      *(_OWORD *)(v360 + 104) = 0u;
      *(_OWORD *)(v360 + 120) = 0u;
      *(_OWORD *)(v360 + 136) = 0u;
      *(_OWORD *)(v360 + 152) = 0u;
      *(_OWORD *)(v360 + 168) = 0u;
      *(_OWORD *)(v360 + 184) = 0u;
      *(_OWORD *)(v360 + 200) = 0u;
      *(_OWORD *)(v360 + 216) = 0u;
      *(_OWORD *)(v360 + 232) = 0u;
      *(_QWORD *)(v360 + 248) = 0;
      v361 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v360 + 56), 0);
      if ((_DWORD)v361)
        geo::read_write_lock::logFailure(v361, (uint64_t)"initialization", v362);
      v363 = malloc_create_zone(0, 0);
      *(_QWORD *)(v360 + 48) = v363;
      malloc_set_zone_name(v363, "GeoCodec");
      *(_QWORD *)(v360 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      geo::codec::Allocator::instance(void)::alloc = v360;
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v104, 0);
  }
  if (v105)
  {
    {
      v364 = operator new();
      *(_QWORD *)(v364 + 16) = 0x99AFC36000000008;
      *(_QWORD *)(v364 + 24) = "GeoCodec";
      *(_OWORD *)(v364 + 32) = xmmword_189CFDB80;
      *(_QWORD *)v364 = &off_1E1BF6690;
      *(_QWORD *)(v364 + 8) = "GeoCodec";
      *(_OWORD *)(v364 + 56) = 0u;
      *(_OWORD *)(v364 + 72) = 0u;
      *(_OWORD *)(v364 + 88) = 0u;
      *(_OWORD *)(v364 + 104) = 0u;
      *(_OWORD *)(v364 + 120) = 0u;
      *(_OWORD *)(v364 + 136) = 0u;
      *(_OWORD *)(v364 + 152) = 0u;
      *(_OWORD *)(v364 + 168) = 0u;
      *(_OWORD *)(v364 + 184) = 0u;
      *(_OWORD *)(v364 + 200) = 0u;
      *(_OWORD *)(v364 + 216) = 0u;
      *(_OWORD *)(v364 + 232) = 0u;
      *(_QWORD *)(v364 + 248) = 0;
      v365 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v364 + 56), 0);
      if ((_DWORD)v365)
        geo::read_write_lock::logFailure(v365, (uint64_t)"initialization", v366);
      v367 = malloc_create_zone(0, 0);
      *(_QWORD *)(v364 + 48) = v367;
      malloc_set_zone_name(v367, "GeoCodec");
      *(_QWORD *)(v364 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      geo::codec::Allocator::instance(void)::alloc = v364;
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v105, 0);
  }
LABEL_19:
  if (*(_BYTE *)v9)
  {
    {
      v314 = operator new();
      *(_QWORD *)(v314 + 16) = 0x99AFC36000000008;
      *(_QWORD *)(v314 + 24) = "GeoCodec";
      *(_OWORD *)(v314 + 32) = xmmword_189CFDB80;
      *(_QWORD *)v314 = &off_1E1BF6690;
      *(_QWORD *)(v314 + 8) = "GeoCodec";
      *(_OWORD *)(v314 + 56) = 0u;
      *(_OWORD *)(v314 + 72) = 0u;
      *(_OWORD *)(v314 + 88) = 0u;
      *(_OWORD *)(v314 + 104) = 0u;
      *(_OWORD *)(v314 + 120) = 0u;
      *(_OWORD *)(v314 + 136) = 0u;
      *(_OWORD *)(v314 + 152) = 0u;
      *(_OWORD *)(v314 + 168) = 0u;
      *(_OWORD *)(v314 + 184) = 0u;
      *(_OWORD *)(v314 + 200) = 0u;
      *(_OWORD *)(v314 + 216) = 0u;
      *(_OWORD *)(v314 + 232) = 0u;
      *(_QWORD *)(v314 + 248) = 0;
      v315 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v314 + 56), 0);
      if ((_DWORD)v315)
        geo::read_write_lock::logFailure(v315, (uint64_t)"initialization", v316);
      v317 = malloc_create_zone(0, 0);
      *(_QWORD *)(v314 + 48) = v317;
      malloc_set_zone_name(v317, "GeoCodec");
      *(_QWORD *)(v314 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      geo::codec::Allocator::instance(void)::alloc = v314;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v9 + 40), 0);
  }
  {
    v281 = operator new();
    *(_QWORD *)(v281 + 16) = 0x99AFC36000000008;
    *(_QWORD *)(v281 + 24) = "GeoCodec";
    *(_OWORD *)(v281 + 32) = xmmword_189CFDB80;
    *(_QWORD *)v281 = &off_1E1BF6690;
    *(_QWORD *)(v281 + 8) = "GeoCodec";
    *(_OWORD *)(v281 + 56) = 0u;
    *(_OWORD *)(v281 + 72) = 0u;
    *(_OWORD *)(v281 + 88) = 0u;
    *(_OWORD *)(v281 + 104) = 0u;
    *(_OWORD *)(v281 + 120) = 0u;
    *(_OWORD *)(v281 + 136) = 0u;
    *(_OWORD *)(v281 + 152) = 0u;
    *(_OWORD *)(v281 + 168) = 0u;
    *(_OWORD *)(v281 + 184) = 0u;
    *(_OWORD *)(v281 + 200) = 0u;
    *(_OWORD *)(v281 + 216) = 0u;
    *(_OWORD *)(v281 + 232) = 0u;
    *(_QWORD *)(v281 + 248) = 0;
    v282 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v281 + 56), 0);
    if ((_DWORD)v282)
      geo::read_write_lock::logFailure(v282, (uint64_t)"initialization", v283);
    v284 = malloc_create_zone(0, 0);
    *(_QWORD *)(v281 + 48) = v284;
    malloc_set_zone_name(v284, "GeoCodec");
    *(_QWORD *)(v281 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    geo::codec::Allocator::instance(void)::alloc = v281;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v9, 0);
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v783 = "ChapterVenues";
  v784[0] = (uint64_t *)&v783;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v780 + 1912, (uint64_t *)&v783, (uint64_t)&std::piecewise_construct, v784)+ 4) = (double)((rep - v779.__d_.__rep_) / 1000) * 0.001;
  if (v10)
  {
    v30 = (unint64_t *)&v10->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v17;
}

void sub_1886F9508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  pthread_rwlock_t *v27;
  uint64_t v28;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *p_shared_owners;
  unint64_t v32;

  geo::read_write_lock::~read_write_lock(v27);
  MEMORY[0x18D76437C](v26, 0x10F1C40DA10AB66);
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  *(_QWORD *)(v28 - 120) = "ChapterVenues";
  *(_QWORD *)(v28 - 112) = v28 - 120;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(a26 + 1912, (uint64_t *)(v28 - 120), (uint64_t)&std::piecewise_construct, (uint64_t **)(v28 - 112))+ 4) = (double)((rep - a25) / 1000) * 0.001;
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readDaVinciAssetMetadata(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  geo::codec::Allocator *v6;
  geo::codec::Allocator *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  FILE *v26;
  int v27;
  geo::codec::Allocator *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  geo::codec::Allocator *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::chrono::steady_clock::time_point v39;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int v44;
  FILE *v45;
  int v46;
  size_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t **v57;
  unsigned int v58;
  _BYTE *v59;
  uint64_t *v60;
  uint64_t *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _OWORD *v79;
  char *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  _QWORD *v84;
  unsigned __int16 *v85;
  unsigned __int16 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t **v91;
  uint64_t **v92;
  unsigned int v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  uint64_t *v105;
  int64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  _OWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  char **v118;
  uint64_t v119;
  unint64_t v120;
  BOOL v121;
  unint64_t v122;
  char *v123;
  _BYTE *v124;
  geo::codec::Allocator *v125;
  uint64_t v126;
  unsigned __int16 *v127;
  void *v128;
  _BYTE *v129;
  char *v130;
  uint64_t v131;
  unsigned int v132;
  void *__p[2];
  __int128 v134;
  void *v135[3];
  _OWORD v136[2];
  void *v137;
  void *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141[5];
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int v149;
  const char *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;

  v2 = a1[1];
  if (!v2)
    goto LABEL_32;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 156)
  {
    v4 = ++v5;
    if (v2 <= v5)
      goto LABEL_32;
  }
  v6 = (geo::codec::Allocator *)geo::codec::chapterAt((uint64_t)a1, v5, 156, *a2 + 1912);
  if (!v6)
  {
LABEL_32:
    v24 = 1;
    return v24 & 1;
  }
  v7 = v6;
  v8 = geo::codec::Allocator::instance(v6);
  v9 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 48, 48);
  if (v9)
  {
    v9[1] = 0;
    *v9 = v9 + 1;
    v9[5] = 0;
    v9[4] = 0;
    v9[2] = 0;
    v9[3] = v9 + 4;
  }
  v10 = *a2;
  *(_QWORD *)(v10 + 2240) = v9;
  v150 = "ChapterDaVinciAssetMetadata";
  v151 = v10;
  v11 = (std::__shared_weak_count *)a2[1];
  v152 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v149 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v149) & 1) == 0)
  {
    v26 = (FILE *)*MEMORY[0x1E0C80C10];
    v27 = 10316;
LABEL_39:
    v28 = (geo::codec::Allocator *)fprintf(v26, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v27);
    goto LABEL_40;
  }
  v148 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v148 + 1) & 1) == 0)
  {
    v26 = (FILE *)*MEMORY[0x1E0C80C10];
    v27 = 10320;
    goto LABEL_39;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v148) & 1) == 0)
  {
    v26 = (FILE *)*MEMORY[0x1E0C80C10];
    v27 = 10321;
    goto LABEL_39;
  }
  v147 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v147) & 1) == 0)
  {
    v26 = (FILE *)*MEMORY[0x1E0C80C10];
    v27 = 10324;
    goto LABEL_39;
  }
  v146 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v146) & 1) == 0)
  {
    v26 = (FILE *)*MEMORY[0x1E0C80C10];
    v27 = 10328;
    goto LABEL_39;
  }
  v14 = v146;
  v143 = 0;
  v144 = 0;
  v142 = 0;
  if (v146)
  {
    v15 = 8 * v146;
    v142 = (uint64_t *)operator new(v15);
    v144 = &v142[v14];
    bzero(v142, v15);
    v143 = v144;
  }
  v145 = 0;
  memset(v141, 0, 32);
  if ((geo::codec::decodeIntCompressorArray<unsigned long long>(v7, v141, SBYTE4(v148), v148, (uint64_t)&v142) & 1) == 0)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10332);
    v44 = 6;
    goto LABEL_159;
  }
  v16 = v147;
  v138 = 0;
  v139 = 0;
  v137 = 0;
  if (v147)
  {
    v17 = 2 * v147;
    v137 = operator new(v17);
    v139 = (char *)v137 + 2 * v16;
    bzero(v137, v17);
    v138 = v139;
  }
  v140 = 0;
  memset(v136, 0, sizeof(v136));
  if ((geo::codec::decodeIntCompressorArray<unsigned short>(v7, (uint64_t *)v136, SBYTE4(v148), v148, (uint64_t)&v137) & 1) != 0)
  {
    memset(v135, 0, sizeof(v135));
    v18 = v147;
    __p[1] = 0;
    *(_QWORD *)&v134 = 0;
    __p[0] = 0;
    if (v147)
    {
      v19 = 2 * v147;
      __p[0] = operator new(v19);
      *(_QWORD *)&v134 = (char *)__p[0] + 2 * v18;
      bzero(__p[0], v19);
      __p[1] = (void *)v134;
    }
    *((_QWORD *)&v134 + 1) = 0;
    if ((geo::codec::decodeIntCompressorArray<unsigned short>(v7, (uint64_t *)v136, SBYTE4(v148), v148, (uint64_t)__p) & 1) != 0)
    {
      v132 = 0;
      if ((geo::codec::chapterReadVarUint32(v7, &v132) & 1) != 0)
      {
        v20 = v132;
        v129 = 0;
        v130 = 0;
        v128 = 0;
        if (v132)
        {
          v21 = 2 * v132;
          v128 = operator new(v21);
          v130 = (char *)v128 + 2 * v20;
          bzero(v128, v21);
          v129 = v130;
        }
        v131 = 0;
        if ((geo::codec::decodeIntCompressorArray<unsigned short>(v7, (uint64_t *)v136, SBYTE4(v148), v148, (uint64_t)&v128) & 1) != 0)
        {
          std::vector<std::vector<unsigned short>>::resize((uint64_t)v135, v147);
          if (!v147)
          {
            v44 = 0;
            v124 = v128;
            if (!v128)
              goto LABEL_61;
            goto LABEL_151;
          }
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v117 = *((unsigned __int16 *)__p[0] + v22);
            v118 = (char **)((char *)v135[0] + 24 * v22);
            std::vector<unsigned short>::resize(v118, v117);
            if ((_DWORD)v117)
              break;
LABEL_140:
            v44 = 0;
            if (++v22 >= (unint64_t)v147)
              goto LABEL_150;
          }
          v119 = 0;
          v120 = (v129 - (_BYTE *)v128) >> 1;
          v121 = v120 >= v23;
          v122 = v120 - v23;
          if (!v121)
            v122 = 0;
          v123 = (char *)v128 + 2 * v23;
          while (v122 != v119)
          {
            *(_WORD *)&(*v118)[2 * v119] = *(_WORD *)&v123[2 * v119];
            if (v117 == ++v119)
            {
              v23 += v119;
              goto LABEL_140;
            }
          }
          v116 = 10358;
        }
        else
        {
          v116 = 10349;
        }
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v116);
        v44 = 6;
LABEL_150:
        v124 = v128;
        if (!v128)
          goto LABEL_61;
LABEL_151:
        v129 = v124;
        operator delete(v124);
        goto LABEL_61;
      }
      v45 = (FILE *)*MEMORY[0x1E0C80C10];
      v46 = 10346;
    }
    else
    {
      v45 = (FILE *)*MEMORY[0x1E0C80C10];
      v46 = 10343;
    }
    fprintf(v45, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v46);
    v44 = 6;
LABEL_61:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (!v44)
    {
      *(_OWORD *)__p = 0u;
      v134 = 0u;
      v47 = v147;
      v129 = 0;
      v130 = 0;
      v128 = 0;
      if (v147)
      {
        v48 = (char *)operator new(v147);
        v49 = &v48[v47];
        v128 = v48;
        v130 = &v48[v47];
        bzero(v48, v47);
        v129 = v49;
      }
      v131 = 0;
      if (!geo::codec::decodeIntCompressorArray<unsigned char>(v7, (uint64_t *)__p, SBYTE4(v148), v148, (uint64_t)&v128))
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10366);
        v44 = 6;
        goto LABEL_153;
      }
      if (v147)
      {
        v125 = v7;
        v50 = 0;
        while (1)
        {
          v51 = v142[*((unsigned __int16 *)v137 + v50)];
          v126 = v50;
          v52 = *((unsigned __int8 *)v128 + v50);
          v53 = v135[0];
          v54 = *(uint64_t ***)(*a2 + 2240);
          v56 = v54 + 1;
          v55 = v54[1];
          if (v55)
          {
            while (1)
            {
              while (1)
              {
                v57 = (uint64_t **)v55;
                v58 = *((unsigned __int8 *)v55 + 32);
                if (v52 >= v58)
                  break;
                v55 = *v57;
                v56 = v57;
                if (!*v57)
                  goto LABEL_77;
              }
              if (v58 >= v52)
                break;
              v55 = v57[1];
              if (!v55)
              {
                v56 = v57 + 1;
                goto LABEL_77;
              }
            }
            v59 = v57;
          }
          else
          {
            v57 = v54 + 1;
LABEL_77:
            v59 = operator new(0x40uLL);
            v59[32] = v52;
            *((_QWORD *)v59 + 6) = 0;
            *((_QWORD *)v59 + 7) = 0;
            *((_QWORD *)v59 + 5) = 0;
            *(_QWORD *)v59 = 0;
            *((_QWORD *)v59 + 1) = 0;
            *((_QWORD *)v59 + 2) = v57;
            *v56 = (uint64_t *)v59;
            v60 = (uint64_t *)**v54;
            v61 = (uint64_t *)v59;
            if (v60)
            {
              *v54 = v60;
              v61 = *v56;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v54[1], v61);
            v54[2] = (uint64_t *)((char *)v54[2] + 1);
          }
          v63 = (char *)*((_QWORD *)v59 + 6);
          v62 = *((_QWORD *)v59 + 7);
          if ((unint64_t)v63 >= v62)
          {
            v67 = (char *)*((_QWORD *)v59 + 5);
            v68 = (v63 - v67) >> 3;
            v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 61)
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v70 = v62 - (_QWORD)v67;
            if (v70 >> 2 > v69)
              v69 = v70 >> 2;
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
              v71 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v71 = v69;
            if (v71)
            {
              if (v71 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v72 = operator new(8 * v71);
              v73 = v51;
              v65 = v53;
            }
            else
            {
              v73 = v51;
              v65 = v53;
              v72 = 0;
            }
            v74 = (uint64_t *)&v72[8 * v68];
            *v74 = v73;
            v66 = v74 + 1;
            if (v63 != v67)
            {
              v75 = v63 - v67 - 8;
              if (v75 < 0x58)
                goto LABEL_172;
              if ((unint64_t)(v67 - v72) < 0x20)
                goto LABEL_172;
              v76 = (v75 >> 3) + 1;
              v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
              v78 = &v63[-v77];
              v74 = (uint64_t *)((char *)v74 - v77);
              v79 = &v72[8 * v68 - 16];
              v80 = v63 - 16;
              v81 = v76 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v82 = *(_OWORD *)v80;
                *(v79 - 1) = *((_OWORD *)v80 - 1);
                *v79 = v82;
                v79 -= 2;
                v80 -= 32;
                v81 -= 4;
              }
              while (v81);
              v63 = v78;
              if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_172:
                do
                {
                  v83 = *((_QWORD *)v63 - 1);
                  v63 -= 8;
                  *--v74 = v83;
                }
                while (v63 != v67);
              }
            }
            *((_QWORD *)v59 + 5) = v74;
            *((_QWORD *)v59 + 6) = v66;
            *((_QWORD *)v59 + 7) = &v72[8 * v71];
            if (v67)
              operator delete(v67);
          }
          else
          {
            v64 = v51;
            v65 = v53;
            *(_QWORD *)v63 = v64;
            v66 = v63 + 8;
          }
          v84 = v65;
          *((_QWORD *)v59 + 6) = v66;
          v85 = (unsigned __int16 *)v65[3 * v126];
          v86 = (unsigned __int16 *)v84[3 * v126 + 1];
          v127 = v86;
          while (v85 != v86)
          {
            v88 = v142[*v85];
            v89 = *(_QWORD *)(*a2 + 2240);
            v91 = (uint64_t **)(v89 + 32);
            v90 = *(uint64_t **)(v89 + 32);
            if (v90)
            {
              while (1)
              {
                while (1)
                {
                  v92 = (uint64_t **)v90;
                  v93 = *((unsigned __int8 *)v90 + 32);
                  if (v52 >= v93)
                    break;
                  v90 = *v92;
                  v91 = v92;
                  if (!*v92)
                    goto LABEL_113;
                }
                if (v93 >= v52)
                  break;
                v90 = v92[1];
                if (!v90)
                {
                  v91 = v92 + 1;
                  goto LABEL_113;
                }
              }
              v94 = v92;
              v98 = v92[6];
              v97 = (unint64_t)v92[7];
              if ((unint64_t)v98 < v97)
              {
LABEL_103:
                *v98 = v88;
                v87 = (uint64_t)(v98 + 1);
                goto LABEL_104;
              }
            }
            else
            {
              v92 = (uint64_t **)(v89 + 32);
LABEL_113:
              v94 = operator new(0x40uLL);
              v94[32] = v52;
              *((_QWORD *)v94 + 6) = 0;
              *((_QWORD *)v94 + 7) = 0;
              *((_QWORD *)v94 + 5) = 0;
              *(_QWORD *)v94 = 0;
              *((_QWORD *)v94 + 1) = 0;
              *((_QWORD *)v94 + 2) = v92;
              *v91 = (uint64_t *)v94;
              v95 = **(_QWORD **)(v89 + 24);
              v96 = (uint64_t *)v94;
              if (v95)
              {
                *(_QWORD *)(v89 + 24) = v95;
                v96 = *v91;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v89 + 32), v96);
              ++*(_QWORD *)(v89 + 40);
              v98 = (uint64_t *)*((_QWORD *)v94 + 6);
              v97 = *((_QWORD *)v94 + 7);
              if ((unint64_t)v98 < v97)
                goto LABEL_103;
            }
            v99 = (uint64_t *)*((_QWORD *)v94 + 5);
            v100 = v98 - v99;
            v101 = v100 + 1;
            if ((unint64_t)(v100 + 1) >> 61)
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v102 = v97 - (_QWORD)v99;
            if (v102 >> 2 > v101)
              v101 = v102 >> 2;
            if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
              v103 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v103 = v101;
            if (v103)
            {
              if (v103 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v104 = operator new(8 * v103);
              v105 = (uint64_t *)&v104[8 * v100];
              *v105 = v88;
              v87 = (uint64_t)(v105 + 1);
              v106 = (char *)v98 - (char *)v99;
              if (v98 == v99)
                goto LABEL_135;
LABEL_129:
              v107 = v106 - 8;
              if (v107 < 0x58)
                goto LABEL_173;
              if ((unint64_t)((char *)v99 - v104) < 0x20)
                goto LABEL_173;
              v108 = (v107 >> 3) + 1;
              v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
              v110 = &v98[v109 / 0xFFFFFFFFFFFFFFF8];
              v105 = (uint64_t *)((char *)v105 - v109);
              v111 = &v104[8 * v100 - 16];
              v112 = v98 - 2;
              v113 = v108 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v114 = *(_OWORD *)v112;
                *(v111 - 1) = *((_OWORD *)v112 - 1);
                *v111 = v114;
                v111 -= 2;
                v112 -= 4;
                v113 -= 4;
              }
              while (v113);
              v98 = v110;
              if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_173:
                do
                {
                  v115 = *--v98;
                  *--v105 = v115;
                }
                while (v98 != v99);
              }
              goto LABEL_135;
            }
            v104 = 0;
            v105 = (uint64_t *)(8 * v100);
            *(_QWORD *)(8 * v100) = v88;
            v87 = 8 * v100 + 8;
            v106 = (char *)v98 - (char *)v99;
            if (v98 != v99)
              goto LABEL_129;
LABEL_135:
            *((_QWORD *)v94 + 5) = v105;
            *((_QWORD *)v94 + 6) = v87;
            *((_QWORD *)v94 + 7) = &v104[8 * v103];
            if (v99)
              operator delete(v99);
LABEL_104:
            *((_QWORD *)v94 + 6) = v87;
            ++v85;
            v86 = v127;
          }
          v50 = v126 + 1;
          if (v126 + 1 >= (unint64_t)v147)
          {
            v44 = 0;
            v7 = v125;
            goto LABEL_153;
          }
        }
      }
      v44 = 0;
LABEL_153:
      if (v128)
      {
        v129 = v128;
        operator delete(v128);
      }
      mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)__p);
    }
    std::vector<std::vector<unsigned short>>::~vector[abi:ne180100](v135);
    goto LABEL_157;
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10337);
  v44 = 6;
LABEL_157:
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v136);
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
LABEL_159:
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v141);
  v28 = (geo::codec::Allocator *)v142;
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (v44 != 6)
  {
    v29 = 1;
    if (!*(_BYTE *)v7)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_40:
  v29 = 0;
  if (*(_BYTE *)v7)
  {
LABEL_41:
    v30 = geo::codec::Allocator::instance(v28);
    v28 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v30 + 40))(v30, *((_QWORD *)v7 + 5), 0);
  }
LABEL_42:
  v31 = geo::codec::Allocator::instance(v28);
  v32 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v31 + 40))(v31, v7, 0);
  if ((v29 & 1) != 0)
  {
    v24 = 1;
  }
  else if (*(_QWORD *)(*a2 + 2240))
  {
    v33 = geo::codec::Allocator::instance(v32);
    v34 = *a2;
    v35 = *(_QWORD *)(*a2 + 2240);
    if (v35)
    {
      v36 = v33;
      std::__tree<std::__value_type<unsigned char,std::vector<unsigned long long>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned long long>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned long long>>>>::destroy(v35 + 24, *(_QWORD **)(v35 + 32));
      std::__tree<std::__value_type<unsigned char,std::vector<unsigned long long>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned long long>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned long long>>>>::destroy(v35, *(_QWORD **)(v35 + 8));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 40))(v36, v35, 48);
      v34 = *a2;
    }
    v24 = 0;
    *(_QWORD *)(v34 + 2240) = 0;
  }
  else
  {
    v24 = 0;
  }
  v38 = (uint64_t)v150;
  v37 = v151;
  v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v40 = rep;
  v141[0] = v38;
  if (v38)
  {
    v142 = v141;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v37 + 1912, v141, (uint64_t)&std::piecewise_construct, &v142)+ 4) = (double)((v39.__d_.__rep_ - v40) / 1000) * 0.001;
  }
  v41 = v152;
  if (v152)
  {
    v42 = (unint64_t *)&v152->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  return v24 & 1;
}

void sub_1886FA39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  void *v37;

  if (__p)
    operator delete(__p);
  std::vector<std::vector<unsigned short>>::~vector[abi:ne180100](&a24);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a27);
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a35);
    v37 = *(void **)(v35 - 184);
    if (!v37)
    {
LABEL_5:
      geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v35 - 128));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a35);
    v37 = *(void **)(v35 - 184);
    if (!v37)
      goto LABEL_5;
  }
  *(_QWORD *)(v35 - 176) = v37;
  operator delete(v37);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v35 - 128));
  _Unwind_Resume(a1);
}

void sub_1886FA4E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readSupplementalFeatureIDs(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  unsigned int v9;
  size_t v10;
  char *v11;
  char *v12;
  char v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  FILE *v22;
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  FILE *v28;
  int v29;
  unint64_t v30;
  char *v31;
  char *v32;
  FILE *v33;
  int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  FILE *v38;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  FILE *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t i;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  FILE *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  _BYTE *v68;
  char *v69;
  unint64_t v70;
  void *v71;
  _BYTE *v72;
  char *v73;
  unint64_t v74;
  void *v75;
  _BYTE *v76;
  char *v77;
  unint64_t v78;
  void *v79;
  void *v80;
  char *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  char *v85;
  uint64_t v86;
  void *__p;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91[4];
  uint64_t v92[4];
  uint64_t v93[5];
  unsigned int v94;
  uint64_t v95;
  unsigned int v96[6];

  v2 = a1[1];
  if (v2)
  {
    v4 = 0;
    v5 = 0;
    while (*(_WORD *)(*a1 + 16 * v4) != 162)
    {
      v4 = ++v5;
      if (v2 <= v5)
        goto LABEL_14;
    }
    v6 = (_QWORD *)geo::codec::chapterAt((uint64_t)a1, v5, 162, *a2 + 1912);
    if (v6)
    {
      v7 = v6;
      v95 = 0;
      *(_QWORD *)v96 = 0;
      v94 = 0;
      if (geo::codec::chapterReadVarUint32(v6, &v96[1]))
      {
        if (geo::codec::chapterReadVarUint32(v7, v96))
        {
          if (geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v95 + 1))
          {
            if (geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v95))
            {
              if (geo::codec::chapterReadVarUint32(v7, &v94))
              {
                v9 = v94;
                v8 = v95;
                memset(v93, 0, 32);
                memset(v92, 0, sizeof(v92));
                memset(v91, 0, sizeof(v91));
                v10 = HIDWORD(v95);
                v88 = 0;
                v89 = 0;
                __p = 0;
                if (HIDWORD(v95))
                {
                  v11 = (char *)operator new(HIDWORD(v95));
                  v12 = &v11[v10];
                  __p = v11;
                  v89 = &v11[v10];
                  bzero(v11, v10);
                  v88 = &v11[v10];
                }
                else
                {
                  v11 = 0;
                  v12 = 0;
                }
                v90 = 0;
                if (v12 - v11 == v10)
                {
                  if ((geo::codec::decodeIntCompressorArray<unsigned char>(v7, v93, v96[1], v96[0], (uint64_t)&__p) & 1) != 0)
                  {
                    v19 = HIDWORD(v95);
                    v84 = 0;
                    v85 = 0;
                    v83 = 0;
                    if (HIDWORD(v95))
                    {
                      v20 = (char *)operator new(4 * HIDWORD(v95));
                      v21 = &v20[4 * v19];
                      v83 = v20;
                      v85 = v21;
                      bzero(v20, 4 * v19);
                      v84 = v21;
                    }
                    else
                    {
                      v20 = 0;
                      v21 = 0;
                    }
                    v86 = 0;
                    if (v19 == (v21 - v20) >> 2)
                    {
                      if ((geo::codec::decodeIntCompressorArray<unsigned int>(v7, v92, v96[1], v96[0], (uint64_t)&v83) & 1) != 0)
                      {
                        v25 = HIDWORD(v95);
                        v80 = 0;
                        v81 = 0;
                        v79 = 0;
                        if (HIDWORD(v95))
                        {
                          v26 = (char *)operator new(4 * HIDWORD(v95));
                          v27 = &v26[4 * v25];
                          v79 = v26;
                          v81 = v27;
                          bzero(v26, 4 * v25);
                          v80 = v27;
                        }
                        else
                        {
                          v26 = 0;
                          v27 = 0;
                        }
                        v82 = 0;
                        if (v25 == (v27 - v26) >> 2)
                        {
                          if ((geo::codec::decodeIntCompressorArray<unsigned int>(v7, v92, v96[1], v96[0], (uint64_t)&v79) & 1) != 0)
                          {
                            v75 = 0;
                            v76 = 0;
                            v77 = 0;
                            v30 = v9 + v8;
                            if ((_DWORD)v30)
                            {
                              v31 = (char *)operator new(4 * v30);
                              v32 = &v31[4 * v30];
                              v75 = v31;
                              v77 = v32;
                              bzero(v31, 4 * v30);
                              v76 = v32;
                            }
                            else
                            {
                              v31 = 0;
                              v32 = 0;
                            }
                            v78 = 0;
                            if (v30 == (v32 - v31) >> 2)
                            {
                              if ((geo::codec::decodeIntCompressorArray<unsigned int>(v7, v92, v96[1], v96[0], (uint64_t)&v75) & 1) != 0)
                              {
                                v35 = v95;
                                v72 = 0;
                                v73 = 0;
                                v71 = 0;
                                if ((_DWORD)v95)
                                {
                                  v36 = (char *)operator new(8 * v95);
                                  v37 = &v36[8 * v35];
                                  v71 = v36;
                                  v73 = v37;
                                  bzero(v36, 8 * v35);
                                  v72 = v37;
                                }
                                else
                                {
                                  v36 = 0;
                                  v37 = 0;
                                }
                                v74 = 0;
                                if (v35 == (v37 - v36) >> 3)
                                {
                                  if ((geo::codec::decodeIntCompressorArray<unsigned long long>(v7, v91, v96[1], v96[0], (uint64_t)&v71) & 1) != 0)
                                  {
                                    v40 = v94;
                                    v68 = 0;
                                    v69 = 0;
                                    v67 = 0;
                                    if (v94)
                                    {
                                      v41 = (char *)operator new(8 * v94);
                                      v42 = &v41[8 * v40];
                                      v67 = v41;
                                      v69 = v42;
                                      bzero(v41, 8 * v40);
                                      v68 = v42;
                                    }
                                    else
                                    {
                                      v41 = 0;
                                      v42 = 0;
                                    }
                                    v70 = 0;
                                    if (v40 != (v42 - v41) >> 3)
                                    {
                                      v62 = (FILE *)*MEMORY[0x1E0C80C10];
                                      v63 = 12244;
                                      goto LABEL_110;
                                    }
                                    if ((geo::codec::decodeIntCompressorArray<unsigned long long>(v7, v91, v96[1], v96[0], (uint64_t)&v67) & 1) == 0)
                                    {
                                      v62 = (FILE *)*MEMORY[0x1E0C80C10];
                                      v63 = 12245;
                                      goto LABEL_110;
                                    }
                                    v45 = *a2;
                                    v46 = *a2 + 3528;
                                    std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::reserve(v46, v30);
                                    if (HIDWORD(v95))
                                    {
                                      v47 = 0;
                                      while (1)
                                      {
                                        v48 = v90++;
                                        v49 = *((unsigned __int8 *)__p + v48);
                                        v50 = v86++;
                                        v51 = *((unsigned int *)v83 + v50);
                                        v52 = *(_QWORD *)(v45 + 3536);
                                        v53 = v82++;
                                        v64 = *(_QWORD *)(v45 + 3528);
                                        v65 = v52;
                                        v54 = *((_DWORD *)v79 + v53);
                                        if (v54)
                                        {
                                          for (i = *((unsigned int *)v79 + v53); i; --i)
                                          {
                                            v56 = v78;
                                            if (v78 >= (v76 - (_BYTE *)v75) >> 2)
                                            {
                                              v63 = 12259;
                                              goto LABEL_109;
                                            }
                                            ++v78;
                                            if ((*((_DWORD *)v75 + v56) & 1) != 0)
                                            {
                                              v57 = v70;
                                              v58 = v67;
                                              if (v70 >= (v68 - (_BYTE *)v67) >> 3)
                                              {
                                                v63 = 12261;
                                                goto LABEL_109;
                                              }
                                              ++v70;
                                            }
                                            else
                                            {
                                              v57 = v74;
                                              v58 = v71;
                                              if (v74 >= (v72 - (_BYTE *)v71) >> 3)
                                              {
                                                v63 = 12263;
                                                goto LABEL_109;
                                              }
                                              ++v74;
                                            }
                                            v66 = v58[v57];
                                            std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::push_back[abi:ne180100](v46, &v66);
                                          }
                                        }
                                        if (!v49)
                                          break;
                                        if (v49 == 1)
                                        {
                                          v59 = *(_QWORD *)(*a2 + 32);
                                          if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(*a2 + 40) - v59) >> 3) <= v51)
                                          {
                                            v63 = 12271;
                                            goto LABEL_109;
                                          }
                                          v60 = 168;
LABEL_98:
                                          v61 = v59 + v51 * (unint64_t)v60;
                                          if (v61)
                                          {
                                            *(_DWORD *)(v61 + 64) = (unint64_t)(v65 - v64) >> 3;
                                            *(_BYTE *)(v61 + 74) = v54;
                                          }
                                        }
                                        if (++v47 >= (unint64_t)HIDWORD(v95))
                                          goto LABEL_101;
                                      }
                                      v59 = *(_QWORD *)(*a2 + 504);
                                      if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*a2 + 512) - v59) >> 5) <= v51)
                                      {
                                        v63 = 12276;
LABEL_109:
                                        v62 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_110:
                                        fprintf(v62, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v63);
                                        v24 = 6;
                                        goto LABEL_111;
                                      }
                                      v60 = 224;
                                      goto LABEL_98;
                                    }
LABEL_101:
                                    if (v30 != (uint64_t)(*(_QWORD *)(v45 + 3536) - *(_QWORD *)(v45 + 3528)) >> 3)
                                    {
                                      v62 = (FILE *)*MEMORY[0x1E0C80C10];
                                      v63 = 12290;
                                      goto LABEL_110;
                                    }
                                    v24 = 0;
LABEL_111:
                                    if (v67)
                                    {
                                      v68 = v67;
                                      operator delete(v67);
                                    }
                                    goto LABEL_76;
                                  }
                                  v43 = (FILE *)*MEMORY[0x1E0C80C10];
                                  v44 = 12241;
                                }
                                else
                                {
                                  v43 = (FILE *)*MEMORY[0x1E0C80C10];
                                  v44 = 12240;
                                }
                                fprintf(v43, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v44);
                                v24 = 6;
LABEL_76:
                                if (v71)
                                {
                                  v72 = v71;
                                  operator delete(v71);
                                }
                                goto LABEL_66;
                              }
                              v38 = (FILE *)*MEMORY[0x1E0C80C10];
                              v39 = 12237;
                            }
                            else
                            {
                              v38 = (FILE *)*MEMORY[0x1E0C80C10];
                              v39 = 12236;
                            }
                            fprintf(v38, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v39);
                            v24 = 6;
LABEL_66:
                            if (v75)
                            {
                              v76 = v75;
                              operator delete(v75);
                            }
                            goto LABEL_56;
                          }
                          v33 = (FILE *)*MEMORY[0x1E0C80C10];
                          v34 = 12233;
                        }
                        else
                        {
                          v33 = (FILE *)*MEMORY[0x1E0C80C10];
                          v34 = 12232;
                        }
                        fprintf(v33, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v34);
                        v24 = 6;
LABEL_56:
                        if (v79)
                        {
                          v80 = v79;
                          operator delete(v79);
                        }
                        goto LABEL_46;
                      }
                      v28 = (FILE *)*MEMORY[0x1E0C80C10];
                      v29 = 12229;
                    }
                    else
                    {
                      v28 = (FILE *)*MEMORY[0x1E0C80C10];
                      v29 = 12228;
                    }
                    fprintf(v28, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v29);
                    v24 = 6;
LABEL_46:
                    if (v83)
                    {
                      v84 = v83;
                      operator delete(v83);
                    }
LABEL_33:
                    if (__p)
                    {
                      v88 = (char *)__p;
                      operator delete(__p);
                    }
                    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v91);
                    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v92);
                    v16 = mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)v93);
                    if (v24 != 6)
                    {
                      v13 = 1;
                      if (!*(_BYTE *)v7)
                        goto LABEL_24;
                      goto LABEL_23;
                    }
LABEL_22:
                    v13 = 0;
                    if (!*(_BYTE *)v7)
                    {
LABEL_24:
                      v18 = geo::codec::Allocator::instance((geo::codec::Allocator *)v16);
                      (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v18 + 40))(v18, v7, 0);
                      return v13 & 1;
                    }
LABEL_23:
                    v17 = geo::codec::Allocator::instance((geo::codec::Allocator *)v16);
                    v16 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 40))(v17, v7[5], 0);
                    goto LABEL_24;
                  }
                  v22 = (FILE *)*MEMORY[0x1E0C80C10];
                  v23 = 12225;
                }
                else
                {
                  v22 = (FILE *)*MEMORY[0x1E0C80C10];
                  v23 = 12224;
                }
                fprintf(v22, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v23);
                v24 = 6;
                goto LABEL_33;
              }
              v15 = 12216;
            }
            else
            {
              v15 = 12215;
            }
          }
          else
          {
            v15 = 12214;
          }
        }
        else
        {
          v15 = 12213;
        }
      }
      else
      {
        v15 = 12212;
      }
      v16 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v15);
      goto LABEL_22;
    }
  }
LABEL_14:
  v13 = 1;
  return v13 & 1;
}

void sub_1886FAD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  uint64_t v36;
  void *v37;
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  if (a15)
  {
    operator delete(a15);
    v39 = __p;
    if (!__p)
    {
LABEL_6:
      v37 = a23;
      if (!a23)
      {
LABEL_7:
        v40 = a27;
        if (!a27)
          goto LABEL_8;
        goto LABEL_14;
      }
LABEL_13:
      operator delete(v37);
      v40 = a27;
      if (!a27)
      {
LABEL_8:
        v41 = a31;
        if (!a31)
          goto LABEL_9;
        goto LABEL_15;
      }
LABEL_14:
      operator delete(v40);
      v41 = a31;
      if (!a31)
      {
LABEL_9:
        v42 = a35;
        if (!a35)
        {
LABEL_17:
          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v36 - 224);
          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v36 - 192);
          mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor(v36 - 160);
          _Unwind_Resume(a1);
        }
LABEL_16:
        operator delete(v42);
        goto LABEL_17;
      }
LABEL_15:
      operator delete(v41);
      v42 = a35;
      if (!a35)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    v39 = __p;
    if (!__p)
      goto LABEL_6;
  }
  operator delete(v39);
  v37 = a23;
  if (!a23)
    goto LABEL_7;
  goto LABEL_13;
}

uint64_t geo::codec::_readLiveFeaturesMetadatas(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  size_t v13;
  uint8x8_t *v14;
  char *v15;
  char v16;
  FILE *v18;
  int v19;
  uint8x8_t *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  geo::codec::Allocator *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t j;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *v33;
  unint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  int v41;
  _QWORD **v42;
  _QWORD *v43;
  int v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  size_t v49;
  char *v50;
  unint64_t v51;
  size_t v52;
  int v53;
  FILE *v54;
  int v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint8x8_t v59;
  void **v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  float v64;
  _BOOL8 v65;
  unint64_t v66;
  unint64_t v67;
  size_t prime;
  void *v69;
  void *v70;
  uint64_t v71;
  _QWORD **v72;
  size_t v73;
  size_t v74;
  size_t v75;
  _QWORD *i;
  size_t v77;
  uint64_t v78;
  unint64_t v79;
  uint8x8_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  size_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  void *v88;
  FILE *v89;
  int v90;
  uint64_t v91;
  size_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  size_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  size_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unsigned __int16 v112;
  uint64_t *v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  FILE *v126;
  int v127;
  char *v128;
  int v129;
  int v130;
  unint64_t v131;
  unsigned int v132;
  uint8x8_t *__p;
  uint64_t v134;
  unsigned __int16 v135;
  void *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  _OWORD v140[2];
  void *v141;
  void *v142;
  char *v143;
  uint64_t v144;
  void *v145;
  void *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  float v151;
  unsigned int v152;
  char *v153;
  char *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157[4];
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  _QWORD v165[7];

  v2 = a1[1];
  if (!v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 165)
  {
    v4 = ++v5;
    if (v2 <= v5)
      goto LABEL_16;
  }
  v6 = geo::codec::chapterAt((uint64_t)a1, v5, 165, *a2 + 1912);
  if (!v6)
  {
LABEL_16:
    v16 = 1;
    return v16 & 1;
  }
  v7 = (_QWORD *)v6;
  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v165[1] = "ChapterLiveFeaturesMetadatas";
  v165[2] = v9;
  v165[3] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v165[4] = v12.__d_.__rep_;
  v165[0] = 0;
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)v165 + 1) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 11756;
LABEL_22:
    v20 = (uint8x8_t *)fprintf(v18, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v19);
    goto LABEL_23;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)v165) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 11757;
    goto LABEL_22;
  }
  v164 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v164 + 1) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 11761;
    goto LABEL_22;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v164) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 11762;
    goto LABEL_22;
  }
  v13 = HIDWORD(v164);
  if (HIDWORD(v164))
  {
    v14 = (uint8x8_t *)operator new(HIDWORD(v164));
    v15 = (char *)v14 + v13;
    __p = v14;
    bzero(v14, v13);
  }
  else
  {
    v15 = 0;
    __p = 0;
  }
  v162 = 0u;
  v163 = 0u;
  v36 = v165[0];
  v35 = BYTE4(v165[0]);
  LODWORD(v149) = 0;
  if (!geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v149)
    || (v37 = v149, v38 = v7[6], v39 = v38 + v149, v39 > v7[7])
    || (v40 = (unsigned __int8 *)(v7[5] + v38),
        v7[6] = v39,
        mgcl::ints::IntDecompressor<unsigned char>::decompress((uint64_t *)&v162, v40, v37, v35, v36, v15 - (char *)__p, __p)))
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11767);
    v41 = 6;
    goto LABEL_49;
  }
  v48 = HIDWORD(v164);
  v159 = 0;
  v160 = 0;
  v158 = 0;
  if (HIDWORD(v164))
  {
    v49 = 2 * HIDWORD(v164);
    v158 = (char *)operator new(v49);
    v50 = &v158[2 * v48];
    v160 = v50;
    bzero(v158, v49);
    v159 = v50;
  }
  v161 = 0;
  memset(v157, 0, sizeof(v157));
  if ((geo::codec::decodeIntCompressorArray<unsigned short>(v7, v157, SBYTE4(v165[0]), v165[0], (uint64_t)&v158) & 1) != 0)
  {
    v51 = HIDWORD(v164);
    v154 = 0;
    v155 = 0;
    v153 = 0;
    if (HIDWORD(v164))
    {
      v52 = 2 * HIDWORD(v164);
      v153 = (char *)operator new(v52);
      v51 = (unint64_t)&v153[2 * v51];
      v155 = v51;
      bzero(v153, v52);
      v154 = (char *)v51;
    }
    v156 = 0;
    if ((geo::codec::decodeIntCompressorArray<unsigned short>(v7, v157, SBYTE4(v165[0]), v165[0], (uint64_t)&v153) & 1) != 0)
    {
      v152 = 0;
      if ((geo::codec::chapterReadVarUint32(v7, &v152) & 1) != 0)
      {
        v149 = 0u;
        v150 = 0u;
        v151 = 1.0;
        if (v152)
        {
          v53 = 0;
          while (1)
          {
            v129 = v53;
            v56 = v7[6];
            if ((unint64_t)(v56 + 4) > v7[7])
            {
              v89 = (FILE *)*MEMORY[0x1E0C80C10];
              v90 = 11784;
              goto LABEL_176;
            }
            v57 = *(_DWORD *)(v7[5] + v56);
            v7[6] = v56 + 4;
            LODWORD(v145) = 0;
            if (!geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v145))
            {
              v89 = (FILE *)*MEMORY[0x1E0C80C10];
              v90 = 11787;
              goto LABEL_176;
            }
            if ((_DWORD)v145)
              break;
LABEL_77:
            v53 = v129 + 1;
            if (v129 + 1 >= v152)
              goto LABEL_177;
          }
          v130 = 0;
          while (1)
          {
            LODWORD(v141) = 0;
            if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v141) & 1) == 0)
              break;
            v131 = v141;
            v58 = *((_QWORD *)&v149 + 1);
            if (*((_QWORD *)&v149 + 1))
            {
              v59 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v149 + 8));
              v59.i16[0] = vaddlv_u8(v59);
              if (v59.u32[0] > 1uLL)
              {
                v51 = v141;
                if (*((_QWORD *)&v149 + 1) <= (unint64_t)v141)
                  v51 = (unint64_t)v141 % *((_QWORD *)&v149 + 1);
              }
              else
              {
                v51 = (DWORD2(v149) - 1) & v141;
              }
              v60 = *(void ***)(v149 + 8 * v51);
              if (v60)
              {
                v61 = *v60;
                if (*v60)
                {
                  if (v59.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v63 = v61[1];
                      if (v63 == v141)
                      {
                        if (*((_DWORD *)v61 + 4) == (_DWORD)v141)
                          goto LABEL_162;
                      }
                      else if ((v63 & (*((_QWORD *)&v149 + 1) - 1)) != v51)
                      {
                        goto LABEL_103;
                      }
                      v61 = (_QWORD *)*v61;
                      if (!v61)
                        goto LABEL_103;
                    }
                  }
                  do
                  {
                    v62 = v61[1];
                    if (v62 == v141)
                    {
                      if (*((_DWORD *)v61 + 4) == (_DWORD)v141)
                        goto LABEL_162;
                    }
                    else
                    {
                      if (v62 >= *((_QWORD *)&v149 + 1))
                        v62 %= *((_QWORD *)&v149 + 1);
                      if (v62 != v51)
                        break;
                    }
                    v61 = (_QWORD *)*v61;
                  }
                  while (v61);
                }
              }
            }
LABEL_103:
            v61 = operator new(0x18uLL);
            *v61 = 0;
            v61[1] = v131;
            v61[2] = v131;
            v64 = (float)(unint64_t)(*((_QWORD *)&v150 + 1) + 1);
            if (!v58 || (float)(v151 * (float)v58) < v64)
            {
              v65 = (v58 & (v58 - 1)) != 0;
              if (v58 < 3)
                v65 = 1;
              v66 = v65 | (2 * v58);
              v67 = vcvtps_u32_f32(v64 / v151);
              if (v66 <= v67)
                prime = v67;
              else
                prime = v66;
              if (prime == 1)
              {
                prime = 2;
              }
              else if ((prime & (prime - 1)) != 0)
              {
                prime = std::__next_prime(prime);
                v58 = *((_QWORD *)&v149 + 1);
              }
              if (prime <= v58)
              {
                if (prime < v58)
                {
                  v79 = vcvtps_u32_f32((float)*((unint64_t *)&v150 + 1) / v151);
                  if (v58 < 3
                    || (v80 = (uint8x8_t)vcnt_s8((int8x8_t)v58), v80.i16[0] = vaddlv_u8(v80), v80.u32[0] > 1uLL))
                  {
                    v79 = std::__next_prime(v79);
                  }
                  else
                  {
                    v81 = 1 << -(char)__clz(v79 - 1);
                    if (v79 >= 2)
                      v79 = v81;
                  }
                  if (prime <= v79)
                    prime = v79;
                  if (prime >= v58)
                  {
                    v58 = *((_QWORD *)&v149 + 1);
                  }
                  else
                  {
                    if (prime)
                      goto LABEL_115;
                    v88 = (void *)v149;
                    *(_QWORD *)&v149 = 0;
                    if (v88)
                      operator delete(v88);
                    v58 = 0;
                    *((_QWORD *)&v149 + 1) = 0;
                  }
                }
LABEL_148:
                v51 = v131;
                if ((v58 & (v58 - 1)) != 0)
                {
                  if (v58 <= v131)
                    v51 = v131 % v58;
                }
                else
                {
                  v51 = ((_DWORD)v58 - 1) & v131;
                }
                goto LABEL_152;
              }
LABEL_115:
              if (prime >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v69 = operator new(8 * prime);
              v70 = (void *)v149;
              *(_QWORD *)&v149 = v69;
              if (v70)
                operator delete(v70);
              v71 = 0;
              *((_QWORD *)&v149 + 1) = prime;
              do
                *(_QWORD *)(v149 + 8 * v71++) = 0;
              while (prime != v71);
              v72 = (_QWORD **)v150;
              if (!(_QWORD)v150)
                goto LABEL_147;
              v73 = *(_QWORD *)(v150 + 8);
              v74 = prime - 1;
              if ((prime & (prime - 1)) == 0)
              {
                v75 = v73 & v74;
                *(_QWORD *)(v149 + 8 * v75) = &v150;
                for (i = *v72; *v72; i = *v72)
                {
                  v77 = i[1] & v74;
                  if (v77 == v75)
                  {
                    v72 = (_QWORD **)i;
                  }
                  else if (*(_QWORD *)(v149 + 8 * v77))
                  {
                    *v72 = (_QWORD *)*i;
                    v78 = 8 * v77;
                    *i = **(_QWORD **)(v149 + v78);
                    **(_QWORD **)(v149 + v78) = i;
                  }
                  else
                  {
                    *(_QWORD *)(v149 + 8 * v77) = v72;
                    v72 = (_QWORD **)i;
                    v75 = v77;
                  }
                }
                goto LABEL_147;
              }
              if (v73 >= prime)
                v73 %= prime;
              *(_QWORD *)(v149 + 8 * v73) = &v150;
              v82 = *v72;
              if (!*v72)
              {
LABEL_147:
                v58 = prime;
                goto LABEL_148;
              }
              while (1)
              {
LABEL_142:
                v84 = v82[1];
                if (v84 >= prime)
                  v84 %= prime;
                if (v84 == v73)
                  goto LABEL_141;
                if (*(_QWORD *)(v149 + 8 * v84))
                  break;
                *(_QWORD *)(v149 + 8 * v84) = v72;
                v72 = (_QWORD **)v82;
                v82 = (_QWORD *)*v82;
                v73 = v84;
                if (!v82)
                  goto LABEL_147;
              }
              *v72 = (_QWORD *)*v82;
              v83 = 8 * v84;
              *v82 = **(_QWORD **)(v149 + v83);
              **(_QWORD **)(v149 + v83) = v82;
              v82 = v72;
LABEL_141:
              v72 = (_QWORD **)v82;
              v82 = (_QWORD *)*v82;
              if (!v82)
                goto LABEL_147;
              goto LABEL_142;
            }
LABEL_152:
            v85 = v149;
            v86 = *(_QWORD **)(v149 + 8 * v51);
            if (v86)
            {
              *v61 = *v86;
            }
            else
            {
              *v61 = v150;
              *(_QWORD *)&v150 = v61;
              *(_QWORD *)(v85 + 8 * v51) = &v150;
              if (!*v61)
                goto LABEL_161;
              v87 = *(_QWORD *)(*v61 + 8);
              if ((v58 & (v58 - 1)) != 0)
              {
                if (v87 >= v58)
                  v87 %= v58;
              }
              else
              {
                v87 &= v58 - 1;
              }
              v86 = (_QWORD *)(v149 + 8 * v87);
            }
            *v86 = v61;
LABEL_161:
            ++*((_QWORD *)&v150 + 1);
LABEL_162:
            *((_DWORD *)v61 + 5) = v57;
            if (++v130 >= v145)
              goto LABEL_77;
          }
          v89 = (FILE *)*MEMORY[0x1E0C80C10];
          v90 = 11791;
LABEL_176:
          fprintf(v89, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v90);
          v41 = 6;
          goto LABEL_218;
        }
LABEL_177:
        v91 = HIDWORD(v164);
        v146 = 0;
        v147 = 0;
        v145 = 0;
        if (HIDWORD(v164))
        {
          v92 = 2 * HIDWORD(v164);
          v93 = (char *)operator new(v92);
          v94 = &v93[2 * v91];
          v145 = v93;
          v147 = v94;
          bzero(v93, v92);
          v146 = v94;
        }
        v148 = 0;
        if ((geo::codec::decodeIntCompressorArray<unsigned short>(v7, v157, SBYTE4(v165[0]), v165[0], (uint64_t)&v145) & 1) == 0)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11797);
          v106 = 6;
LABEL_215:
          if (v145)
          {
            v146 = v145;
            operator delete(v145);
          }
          v41 = v106;
LABEL_218:
          std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table((uint64_t)&v149);
LABEL_219:
          if (v153)
          {
            v154 = v153;
            operator delete(v153);
          }
          goto LABEL_221;
        }
        v95 = v164;
        v142 = 0;
        v143 = 0;
        v141 = 0;
        if ((_DWORD)v164)
        {
          v96 = 8 * v164;
          v97 = (char *)operator new(v96);
          v98 = &v97[8 * v95];
          v141 = v97;
          v143 = v98;
          bzero(v97, v96);
          v142 = v98;
        }
        v144 = 0;
        memset(v140, 0, sizeof(v140));
        if ((geo::codec::decodeIntCompressorArray<unsigned long long>(v7, (uint64_t *)v140, SBYTE4(v165[0]), v165[0], (uint64_t)&v141) & 1) == 0)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11801);
          v106 = 6;
          goto LABEL_213;
        }
        v99 = v164;
        v137 = 0;
        v138 = 0;
        v136 = 0;
        if ((_DWORD)v164)
        {
          v100 = 8 * v164;
          v136 = operator new(v100);
          v138 = (char *)v136 + 8 * v99;
          bzero(v136, v100);
          v137 = v138;
        }
        v139 = 0;
        v101 = geo::codec::decodeIntCompressorArray<unsigned long long>(v7, (uint64_t *)v140, SBYTE4(v165[0]), v165[0], (uint64_t)&v136);
        if ((v101 & 1) != 0)
        {
          v102 = geo::codec::Allocator::instance((geo::codec::Allocator *)v101);
          v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v102 + 16))(v102, 16 * v164, 8);
          *(_QWORD *)(*a2 + 656) = v103;
          if (v103)
          {
            v104 = HIDWORD(v164);
            if (HIDWORD(v164))
            {
              v105 = 0;
              v132 = 0;
              while (1)
              {
                v107 = __p->u8[v105];
                v108 = v161++;
                if (v107 == 1)
                {
                  v109 = *(unsigned __int16 *)&v158[2 * v108];
                  if (*(_DWORD *)(*a2 + 608) <= v109)
                  {
                    v126 = (FILE *)*MEMORY[0x1E0C80C10];
                    v127 = 11815;
                    goto LABEL_210;
                  }
                  v110 = std::__hash_table<std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t *)(*a2 + 616), *(_QWORD *)(*(_QWORD *)(*a2 + 600) + 8 * v109), (_QWORD *)(*(_QWORD *)(*a2 + 600) + 8 * v109));
                  v111 = v156++;
                  v112 = *(_WORD *)&v153[2 * v111];
                  v113 = std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::find[abi:ne180100](v149, *((unint64_t *)&v149 + 1), v112);
                  if (v113)
                    v114 = *((float *)v113 + 5);
                  else
                    v114 = 1.0;
                  LOBYTE(v134) = v112;
                  v115 = v148++;
                  v135 = *((_WORD *)v145 + v115);
                  v116 = v135;
                  HIDWORD(v134) = v132;
                  if (v135)
                  {
                    v117 = 0;
                    v118 = *a2;
                    v119 = 16 * v132;
                    LODWORD(v120) = v164 - v132;
                    if (v164 >= v132)
                      v120 = v120;
                    else
                      v120 = 0;
                    v121 = (char *)v136 + 8 * v139;
                    v122 = v139 + 1;
                    v123 = (char *)v141 + 8 * v144;
                    v124 = v144 + 1;
                    while (v120 != v117)
                    {
                      v125 = *(_QWORD *)(v118 + 656) + v119;
                      v144 = v124 + v117;
                      *(_QWORD *)v125 = *(_QWORD *)&v123[8 * v117];
                      v139 = v122 + v117;
                      *(float *)(v125 + 8) = v114 * (float)*(unint64_t *)&v121[8 * v117++];
                      v119 += 16;
                      if (v116 == v117)
                        goto LABEL_204;
                    }
                    v126 = (FILE *)*MEMORY[0x1E0C80C10];
                    v127 = 11829;
                    goto LABEL_210;
                  }
LABEL_204:
                  geo::small_vector_base<GeoCodecsMetadata>::emplace_back<GeoCodecsMetadata&>((uint64_t)(v110 + 3), &v134);
                  v132 += v116;
                  v104 = HIDWORD(v164);
                }
                v106 = 0;
                if (v104 <= ++v105)
                  goto LABEL_211;
              }
            }
            v106 = 0;
            v128 = (char *)v136;
            if (!v136)
              goto LABEL_213;
LABEL_212:
            v137 = v128;
            operator delete(v128);
LABEL_213:
            mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v140);
            if (v141)
            {
              v142 = v141;
              operator delete(v141);
            }
            goto LABEL_215;
          }
          v126 = (FILE *)*MEMORY[0x1E0C80C10];
          v127 = 11807;
        }
        else
        {
          v126 = (FILE *)*MEMORY[0x1E0C80C10];
          v127 = 11804;
        }
LABEL_210:
        fprintf(v126, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v127);
        v106 = 6;
LABEL_211:
        v128 = (char *)v136;
        if (!v136)
          goto LABEL_213;
        goto LABEL_212;
      }
      v54 = (FILE *)*MEMORY[0x1E0C80C10];
      v55 = 11780;
    }
    else
    {
      v54 = (FILE *)*MEMORY[0x1E0C80C10];
      v55 = 11774;
    }
    fprintf(v54, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v55);
    v41 = 6;
    goto LABEL_219;
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11771);
  v41 = 6;
LABEL_221:
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v157);
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
LABEL_49:
  v42 = (_QWORD **)*((_QWORD *)&v163 + 1);
  *((_QWORD *)&v163 + 1) = 0;
  if (v42)
  {
    v43 = *v42;
    *v42 = 0;
    if (v43)
    {
      v44 = v41;
      v45 = (_QWORD *)*v43;
      *v43 = 0;
      if (v45)
      {
        v46 = (void *)v45[13];
        if (v46)
        {
          v45[14] = v46;
          operator delete(v46);
        }
        v47 = (void *)v45[10];
        if (v47)
        {
          v45[11] = v47;
          operator delete(v47);
        }
        MEMORY[0x18D76437C](v45, 0x1070C40ADA6D0DELL);
      }
      MEMORY[0x18D76437C](v43, 0x20C4093837F09);
      v41 = v44;
    }
    MEMORY[0x18D76437C](v42, 0x20C4093837F09);
  }
  if ((_QWORD)v162)
  {
    *((_QWORD *)&v162 + 1) = v162;
    operator delete((void *)v162);
  }
  v20 = __p;
  if (__p)
    operator delete(__p);
  if (v41 != 6)
  {
    v21 = 1;
    if (!*(_BYTE *)v7)
      goto LABEL_25;
    goto LABEL_24;
  }
LABEL_23:
  v21 = 0;
  if (*(_BYTE *)v7)
  {
LABEL_24:
    v22 = geo::codec::Allocator::instance((geo::codec::Allocator *)v20);
    v20 = (uint8x8_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v22 + 40))(v22, v7[5], 0);
  }
LABEL_25:
  v23 = geo::codec::Allocator::instance((geo::codec::Allocator *)v20);
  v24 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v23 + 40))(v23, v7, 0);
  if ((v21 & 1) != 0)
  {
    v16 = 1;
  }
  else
  {
    v25 = (_QWORD *)*a2;
    if (*(_QWORD *)(*a2 + 640))
    {
      v26 = (_QWORD *)v25[79];
      if (v26)
      {
        do
        {
          v30 = (_QWORD *)*v26;
          v31 = (void *)v26[3];
          if (v31 != (void *)v26[5])
            free(v31);
          operator delete(v26);
          v26 = v30;
        }
        while (v30);
      }
      v25[79] = 0;
      v27 = v25[78];
      if (v27)
      {
        for (j = 0; j != v27; ++j)
          *(_QWORD *)(v25[77] + 8 * j) = 0;
      }
      v25[80] = 0;
      v25 = (_QWORD *)*a2;
    }
    if (v25[82])
    {
      v29 = geo::codec::Allocator::instance(v24);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 40))(v29, *(_QWORD *)(*a2 + 656), 0);
      v16 = 0;
      *(_QWORD *)(*a2 + 656) = 0;
    }
    else
    {
      v16 = 0;
    }
  }
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  *(_QWORD *)&v162 = "ChapterLiveFeaturesMetadatas";
  *(_QWORD *)&v149 = &v162;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)&v162, (uint64_t)&std::piecewise_construct, (uint64_t **)&v149)+ 4) = (double)((rep - v12.__d_.__rep_) / 1000) * 0.001;
  if (v8)
  {
    v33 = (unint64_t *)&v8->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v16 & 1;
}

void sub_1886FBD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _QWORD *v35;
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
  {
    operator delete(__p);
    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a23);
    v38 = a27;
    if (!a27)
    {
LABEL_3:
      v39 = a31;
      if (!a31)
      {
LABEL_8:
        std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table((uint64_t)&a35);
        v40 = (void *)v35[10];
        if (v40)
        {
          v35[11] = v40;
          operator delete(v40);
          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v36 - 256);
          v41 = (void *)v35[18];
          if (!v41)
          {
LABEL_10:
            mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor(v36 - 192);
            if (!a16)
              goto LABEL_11;
            goto LABEL_14;
          }
        }
        else
        {
          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v36 - 256);
          v41 = (void *)v35[18];
          if (!v41)
            goto LABEL_10;
        }
        v35[19] = v41;
        operator delete(v41);
        mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor(v36 - 192);
        if (!a16)
        {
LABEL_11:
          geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v36 - 144));
          _Unwind_Resume(a1);
        }
LABEL_14:
        operator delete(a16);
        geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v36 - 144));
        _Unwind_Resume(a1);
      }
LABEL_7:
      a32 = (uint64_t)v39;
      operator delete(v39);
      goto LABEL_8;
    }
  }
  else
  {
    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a23);
    v38 = a27;
    if (!a27)
      goto LABEL_3;
  }
  a28 = (uint64_t)v38;
  operator delete(v38);
  v39 = a31;
  if (!a31)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_1886FBF4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readCompressedPolygons(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  geo::codec::Allocator *v6;
  geo::codec::Allocator *v7;
  unint64_t v8;
  FILE *v9;
  int v10;
  char v11;
  uint64_t v13;
  geo::codec::Allocator *v14;
  uint64_t v15;
  uint64_t v16;
  GeoCodecsVertexPool *v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  FILE *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  geo::codec::Allocator *v33;
  uint64_t v34;
  geo::codec::Allocator *v35;
  uint64_t v36;
  geo::codec::Allocator *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int v41;
  uint16x8_t *v42;
  uint16x8_t *v43;
  unsigned int v44;
  float v45;
  uint64_t *v46;
  __int32 v47;
  int8x16_t *v48;
  unsigned int v49;
  unsigned int v50;
  int32x2_t v51;
  FILE *v52;
  int v53;
  FILE *v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint16x8_t *v59;
  uint64_t v60;
  __int16 v61;
  unint64_t v62;
  geo::codec::Allocator *v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  geo::codec::Allocator *v67;
  char v68;
  unint64_t v69;
  geo::codec::Allocator *v70;
  uint64_t v71;
  uint64_t v72;
  FILE *v73;
  int v74;
  int v75;
  unint64_t v76;
  int v77;
  FILE *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  geo::codec::Allocator *v85;
  unint64_t v86;
  BOOL v87;
  _QWORD v88[4];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int16 v95;
  __int128 v96;
  __int128 v97;
  uint64_t *v98;
  uint16x8_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int8x16_t *v103;
  uint64_t v104;
  uint64_t v105;
  geo::codec::Allocator *v106;
  uint16x8_t *v107;
  uint64_t v108;
  uint64_t v109;
  geo::codec::Allocator *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  uint8x8_t *v116;
  uint8x8_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint16x8_t *v120;
  uint16x8_t *v121;
  uint64_t v122;
  geo::codec::Allocator *v123;
  uint16x8_t *v124;
  uint16x8_t *v125;
  uint64_t v126;
  geo::codec::Allocator *v127;
  uint16x8_t *v128;
  uint16x8_t *v129;
  uint64_t v130;
  geo::codec::Allocator *v131;
  uint16x8_t *v132;
  uint16x8_t *v133;
  uint64_t v134;
  geo::codec::Allocator *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD v140[3];

  v2 = a1[1];
  if (!v2)
    goto LABEL_12;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 169)
  {
    v4 = ++v5;
    if (v2 <= v5)
      goto LABEL_12;
  }
  v6 = (geo::codec::Allocator *)geo::codec::chapterAt((uint64_t)a1, v5, 169, *(_QWORD *)a2 + 1912);
  if (!v6)
  {
LABEL_12:
    v11 = 1;
    return v11 & 1;
  }
  v7 = v6;
  v139 = 0;
  v140[0] = 0;
  v137 = 0;
  v138 = 0;
  v136 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v135 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v6);
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v131 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v135);
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v127 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v131);
  v121 = 0;
  v120 = 0;
  v122 = 0;
  v123 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v127);
  v117 = 0;
  v116 = 0;
  v118 = 0;
  v119 = geo::codec::Allocator::instance(v123);
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)v140 + 1) & 1) == 0)
  {
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    v10 = 11964;
    goto LABEL_17;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)v140) & 1) == 0)
  {
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    v10 = 11965;
    goto LABEL_17;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v139 + 1) & 1) == 0)
  {
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    v10 = 11966;
    goto LABEL_17;
  }
  v8 = *((_QWORD *)v7 + 6) + 8;
  if (v8 <= *((_QWORD *)v7 + 7))
  {
    *((_QWORD *)v7 + 6) = v8;
    if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v139) & 1) == 0)
    {
      v9 = (FILE *)*MEMORY[0x1E0C80C10];
      v10 = 11971;
      goto LABEL_17;
    }
    v115 = 0u;
    v114 = 0u;
    std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize(&v132, v139);
    v19 = ((char *)v133 - (char *)v132) >> 1;
    if (v19 == v139)
    {
      if ((geo::codec::decodeIntCompressorArray<unsigned short>(v7, (uint64_t *)&v114, SBYTE4(v140[0]), v140[0], v19, v132) & 1) != 0)
      {
        mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v114);
        if (v139 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 3496) - *(_QWORD *)(*(_QWORD *)a2 + 3488)) >> 7)
        {
          v9 = (FILE *)*MEMORY[0x1E0C80C10];
          v10 = 11978;
          goto LABEL_17;
        }
        if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v138 + 1) & 1) == 0)
        {
          v9 = (FILE *)*MEMORY[0x1E0C80C10];
          v10 = 11982;
          goto LABEL_17;
        }
        v115 = 0u;
        v114 = 0u;
        std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize(&v128, HIDWORD(v138));
        v20 = ((char *)v129 - (char *)v128) >> 1;
        if (v20 == HIDWORD(v138))
        {
          if ((geo::codec::decodeIntCompressorArray<unsigned short>(v7, (uint64_t *)&v114, SBYTE4(v140[0]), v140[0], v20, v128) & 1) != 0)
          {
            mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v114);
            if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v138) & 1) == 0)
            {
              v9 = (FILE *)*MEMORY[0x1E0C80C10];
              v10 = 11991;
              goto LABEL_17;
            }
            v115 = 0u;
            v114 = 0u;
            std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize(&v124, v138);
            v21 = ((char *)v125 - (char *)v124) >> 1;
            if (v21 == v138)
            {
              if ((geo::codec::decodeIntCompressorArray<unsigned short>(v7, (uint64_t *)&v114, SBYTE4(v140[0]), v140[0], v21, v124) & 1) != 0)
              {
                mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v114);
                if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v137 + 1) & 1) == 0)
                {
                  v28 = (FILE *)*MEMORY[0x1E0C80C10];
                  v29 = 12000;
                  goto LABEL_74;
                }
                v115 = 0u;
                v114 = 0u;
                std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize(&v120, HIDWORD(v137));
                v22 = ((char *)v121 - (char *)v120) >> 1;
                if (v22 == HIDWORD(v137))
                {
                  if ((geo::codec::decodeIntCompressorArray<unsigned short>(v7, (uint64_t *)&v114, SBYTE4(v140[0]), v140[0], v22, v120) & 1) != 0)
                  {
                    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v114);
                    v115 = 0u;
                    v114 = 0u;
                    std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::resize(&v116, HIDWORD(v137));
                    if ((char *)v117 - (char *)v116 == HIDWORD(v137))
                    {
                      if ((geo::codec::decodeIntCompressorArray<unsigned char>(v7, (uint64_t *)&v114, SBYTE4(v140[0]), v140[0], (char *)v117 - (char *)v116, v116) & 1) != 0)
                      {
                        mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&v114);
                        if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v137) & 1) != 0)
                        {
                          v112 = 0;
                          v111 = 0;
                          v113 = 0;
                          mgcl::polyline::Decoder::getPositionsInfo(*((_QWORD *)v7 + 5) + *((_QWORD *)v7 + 6), v137, (uint64_t)&v111);
                          if (HIDWORD(v113) == 1)
                          {
                            v23 = v113;
                            if ((_DWORD)v113 == HIDWORD(v137))
                            {
                              v24 = HIDWORD(v112);
                              std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v114, 1uLL);
                              if (*((_QWORD *)&v114 + 1) - (_QWORD)v114 == 4)
                              {
                                std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v107, v23);
                                if (v23 == (v108 - (uint64_t)v107) >> 2)
                                {
                                  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v103, (3 * v24));
                                  if (3 * (_DWORD)v24 == (v104 - (uint64_t)v103) >> 2)
                                  {
                                    std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v99, v24);
                                    if (v24 != (v100 - (uint64_t)v99) >> 3)
                                    {
                                      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 12035);
                                      v85 = 0;
                                      v25 = 6;
                                      goto LABEL_148;
                                    }
                                    mgcl::polyline::Decoder::Decoder((mgcl::polyline::Decoder *)&v98);
                                    if (mgcl::polyline::Decoder::decompressPositions(&v98, (const unsigned __int8 *)(*((_QWORD *)v7 + 5)+ *((_QWORD *)v7 + 6)), v137, &v136, v103->i32, v107->i32, (int *)v114))
                                    {
                                      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 12039);
                                      v85 = 0;
                                      v25 = 6;
LABEL_147:
                                      mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)&v98);
LABEL_148:
                                      std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v99);
                                      std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v103);
                                      std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v107);
                                      v13 = (uint64_t)std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v114);
                                      if (v25 == 6)
                                        goto LABEL_169;
                                      LODWORD(v88[0]) = 0;
                                      LODWORD(v111) = 0;
                                      v114 = 0uLL;
                                      *(_QWORD *)&v115 = 0;
                                      *((_QWORD *)&v115 + 1) = geo::codec::Allocator::instance((geo::codec::Allocator *)v13);
                                      v108 = 0;
                                      v107 = 0;
                                      v109 = 0;
                                      v110 = (geo::codec::Allocator *)geo::codec::Allocator::instance(*((geo::codec::Allocator **)&v115 + 1));
                                      v104 = 0;
                                      v103 = 0;
                                      v105 = 0;
                                      v106 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v110);
                                      v100 = 0;
                                      v99 = 0;
                                      v101 = 0;
                                      v102 = geo::codec::Allocator::instance(v106);
                                      if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)v88) & 1) != 0)
                                      {
                                        if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v111) & 1) != 0)
                                        {
                                          std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::resize(&v114, LODWORD(v88[0]));
                                          if (*((_QWORD *)&v114 + 1) - (_QWORD)v114 == LODWORD(v88[0]))
                                          {
                                            std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize(&v107, v111);
                                            v76 = (v108 - (uint64_t)v107) >> 1;
                                            if (v76 == v111)
                                            {
                                              std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::resize((uint64_t)&v103, v76);
                                              if (v111 == (v104 - (uint64_t)v103) >> 2)
                                              {
                                                std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize(&v99, v139);
                                                if (v139 == (v100 - (uint64_t)v99) >> 1)
                                                {
                                                  v97 = 0u;
                                                  v96 = 0u;
                                                  if ((geo::codec::decodeIntCompressorArray<unsigned char>(v7, (uint64_t *)&v96, SBYTE4(v140[0]), v140[0], LODWORD(v88[0]), (uint8x8_t *)v114) & 1) != 0)
                                                  {
                                                    v93 = 0u;
                                                    v94 = 0u;
                                                    if ((geo::codec::decodeIntCompressorArray<unsigned short>(v7, (uint64_t *)&v93, SBYTE4(v140[0]), v140[0], v111, v107) & 1) != 0)
                                                    {
                                                      v91 = 0u;
                                                      v92 = 0u;
                                                      if ((geo::codec::decodeIntCompressorArray<unsigned int>(v7, (uint64_t *)&v91, SBYTE4(v140[0]), v140[0], v111, v103) & 1) != 0)
                                                      {
                                                        v89 = 0u;
                                                        v90 = 0u;
                                                        if ((geo::codec::decodeIntCompressorArray<unsigned short>(v7, (uint64_t *)&v89, SBYTE4(v140[0]), v140[0], v139, v99) & 1) != 0)
                                                        {
                                                          v77 = 0;
                                                        }
                                                        else
                                                        {
                                                          fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 12173);
                                                          v77 = 6;
                                                        }
                                                        mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v89);
                                                      }
                                                      else
                                                      {
                                                        fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 12170);
                                                        v77 = 6;
                                                      }
                                                      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v91);
                                                    }
                                                    else
                                                    {
                                                      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 12167);
                                                      v77 = 6;
                                                    }
                                                    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v93);
                                                  }
                                                  else
                                                  {
                                                    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 12164);
                                                    v77 = 6;
                                                  }
                                                  mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&v96);
LABEL_167:
                                                  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v99);
                                                  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v103);
                                                  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v107);
                                                  v13 = (uint64_t)std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v114);
                                                  if (v77 != 6)
                                                  {
                                                    v14 = v85;
                                                    v11 = 1;
                                                    goto LABEL_19;
                                                  }
LABEL_169:
                                                  v11 = 0;
                                                  v14 = v85;
                                                  goto LABEL_19;
                                                }
                                                v78 = (FILE *)*MEMORY[0x1E0C80C10];
                                                v79 = 12161;
                                              }
                                              else
                                              {
                                                v78 = (FILE *)*MEMORY[0x1E0C80C10];
                                                v79 = 12159;
                                              }
                                            }
                                            else
                                            {
                                              v78 = (FILE *)*MEMORY[0x1E0C80C10];
                                              v79 = 12157;
                                            }
                                          }
                                          else
                                          {
                                            v78 = (FILE *)*MEMORY[0x1E0C80C10];
                                            v79 = 12155;
                                          }
                                        }
                                        else
                                        {
                                          v78 = (FILE *)*MEMORY[0x1E0C80C10];
                                          v79 = 12152;
                                        }
                                      }
                                      else
                                      {
                                        v78 = (FILE *)*MEMORY[0x1E0C80C10];
                                        v79 = 12151;
                                      }
                                      fprintf(v78, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v79);
                                      v77 = 6;
                                      goto LABEL_167;
                                    }
                                    *((_QWORD *)v7 + 6) += v137;
                                    v97 = 0u;
                                    v96 = 0u;
                                    v31 = geo::codec::decodeIntCompressorArray<unsigned long long>(v7, (uint64_t *)&v96, SBYTE4(v140[0]), v140[0], v24, (uint64x2_t *)v99);
                                    if ((v31 & 1) != 0)
                                    {
                                      v32 = geo::codec::Allocator::instance((geo::codec::Allocator *)v31);
                                      v33 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 24))(v32, 1, 72);
                                      v85 = v33;
                                      if (v33)
                                      {
                                        *((_QWORD *)v33 + 2) = v24;
                                        v34 = geo::codec::Allocator::instance(v33);
                                        v35 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, 8 * v24, 8);
                                        *((_QWORD *)v85 + 1) = v35;
                                        if (v35)
                                        {
                                          v36 = geo::codec::Allocator::instance(v35);
                                          v37 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, 4 * v24, 8);
                                          *((_QWORD *)v85 + 3) = v37;
                                          if (v37)
                                          {
                                            *((_QWORD *)v85 + 5) = v23;
                                            v38 = geo::codec::Allocator::instance(v37);
                                            v39 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, 16 * v23, 8);
                                            *((_QWORD *)v85 + 4) = v39;
                                            if (v39)
                                            {
                                              if ((_DWORD)v23)
                                              {
                                                v40 = 0;
                                                v41 = 0;
                                                v42 = v107;
                                                v43 = v99;
                                                v44 = 0;
                                                v45 = 1.0 / (float)HIDWORD(v139);
                                                do
                                                {
                                                  v47 = v42->i32[v40];
                                                  if (v47)
                                                  {
                                                    v48 = v103;
                                                    v44 = v47 + v41;
                                                    v49 = 3 * v41;
                                                    v50 = v41;
                                                    do
                                                    {
                                                      if ((v43->i64[v50] & 2) == 0)
                                                      {
                                                        v51.i32[0] = v48->i32[v49];
                                                        v51.i32[1] = v48->i32[v49 + 1];
                                                        *(float32x2_t *)(*((_QWORD *)v85 + 1) + 8 * v50) = vmul_n_f32(vcvt_f32_s32(v51), v45);
                                                        *(float *)(*((_QWORD *)v85 + 3) + 4 * v50) = v45 * (float)v48->i32[v49 + 2];
                                                      }
                                                      ++v50;
                                                      v49 += 3;
                                                      --v47;
                                                    }
                                                    while (v47);
                                                  }
                                                  v46 = &v39[2 * v40];
                                                  *v46 = v41;
                                                  v46[1] = v44 - v41;
                                                  ++v40;
                                                  v41 = v44;
                                                }
                                                while (v40 != v23);
                                              }
                                              *(_QWORD *)(*(_QWORD *)a2 + 3520) = v85;
                                              v95 = 0;
                                              v56 = v139;
                                              if ((_DWORD)v139)
                                              {
                                                v81 = 0;
                                                v57 = 0;
                                                v58 = 0;
                                                v86 = 0;
                                                v59 = v132;
                                                while (1)
                                                {
                                                  v60 = *(_QWORD *)(*(_QWORD *)a2 + 3488) + (v81 << 7);
                                                  *(_WORD *)(v60 + 24) = v59->i16[v81];
                                                  if (v59->i16[v81])
                                                    break;
LABEL_137:
                                                  if (++v81 >= v56)
                                                    goto LABEL_138;
                                                }
                                                v82 = 0;
                                                v83 = v60 + 64;
                                                v84 = v60 + 32;
                                                v80 = v60 + 96;
                                                while (1)
                                                {
                                                  if (v86 >= HIDWORD(v138))
                                                  {
                                                    v75 = 12094;
                                                    goto LABEL_144;
                                                  }
                                                  if (v138 <= v58)
                                                    break;
                                                  v61 = v128->i16[v86];
                                                  v95 = v61;
                                                  v62 = v124->u16[v58];
                                                  v93 = 0uLL;
                                                  *(_QWORD *)&v94 = 0;
                                                  *((_QWORD *)&v94 + 1) = geo::codec::Allocator::instance((geo::codec::Allocator *)v39);
                                                  v63 = (geo::codec::Allocator *)std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::reserve((uint64_t)&v93, v62);
                                                  v91 = 0uLL;
                                                  *(_QWORD *)&v92 = 0;
                                                  *((_QWORD *)&v92 + 1) = geo::codec::Allocator::instance(v63);
                                                  std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>::reserve((uint64_t)&v91, v62);
                                                  ++v58;
                                                  if ((_DWORD)v62)
                                                  {
                                                    v64 = 0;
                                                    v65 = v57;
                                                    while (v57 + v64 < (unint64_t)HIDWORD(v137))
                                                    {
                                                      std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::push_back[abi:ne180100]((uint64_t)&v93, &v120->i16[v65]);
                                                      LOBYTE(v89) = v116->i8[v57 + v64] != 0;
                                                      std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>::push_back((uint64_t)&v91, &v89);
                                                      LODWORD(v62) = v62 - 1;
                                                      ++v64;
                                                      ++v65;
                                                      if (!(_WORD)v62)
                                                      {
                                                        v57 = (v57 + v64);
                                                        goto LABEL_118;
                                                      }
                                                    }
                                                    v57 = (v57 + v64);
                                                    v73 = (FILE *)*MEMORY[0x1E0C80C10];
                                                    v74 = 12106;
                                                  }
                                                  else
                                                  {
LABEL_118:
                                                    std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::push_back[abi:ne180100](v84, (uint64_t)&v93);
                                                    std::vector<std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>,geo::StdAllocator<std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>,geo::codec::Allocator>>::push_back[abi:ne180100](v83, (uint64_t)&v91);
                                                    v66 = v61 - 1;
                                                    v95 = v66;
                                                    v67 = (geo::codec::Allocator *)std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::push_back[abi:ne180100](v80, &v95);
                                                    while (1)
                                                    {
                                                      if (!v66)
                                                      {
                                                        v66 = 0;
                                                        v25 = 0;
LABEL_130:
                                                        v95 = v66;
                                                        v58 = v58;
                                                        goto LABEL_134;
                                                      }
                                                      if (v58 >= v138)
                                                        break;
                                                      v69 = v124->u16[v58];
                                                      v89 = 0uLL;
                                                      *(_QWORD *)&v90 = 0;
                                                      *((_QWORD *)&v90 + 1) = geo::codec::Allocator::instance(v67);
                                                      v70 = (geo::codec::Allocator *)std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::reserve((uint64_t)&v89, v69);
                                                      memset(v88, 0, 24);
                                                      v88[3] = geo::codec::Allocator::instance(v70);
                                                      std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>::reserve((uint64_t)v88, v69);
                                                      if ((_DWORD)v69)
                                                      {
                                                        v71 = 0;
                                                        v72 = v57;
                                                        do
                                                        {
                                                          if (v57 + v71 >= (unint64_t)HIDWORD(v137))
                                                          {
                                                            v57 = (v57 + v71);
                                                            fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 12128);
                                                            v68 = 0;
                                                            v25 = 6;
                                                            goto LABEL_120;
                                                          }
                                                          std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::push_back[abi:ne180100]((uint64_t)&v89, &v120->i16[v72]);
                                                          v87 = v116->i8[v57 + v71] != 0;
                                                          std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>::push_back((uint64_t)v88, &v87);
                                                          LODWORD(v69) = v69 - 1;
                                                          ++v71;
                                                          ++v72;
                                                        }
                                                        while ((_WORD)v69);
                                                        v57 = (v57 + v71);
                                                      }
                                                      std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::push_back[abi:ne180100](v84, (uint64_t)&v89);
                                                      std::vector<std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>,geo::StdAllocator<std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>,geo::codec::Allocator>>::push_back[abi:ne180100](v83, (uint64_t)v88);
                                                      v25 = 0;
                                                      --v66;
                                                      v68 = 1;
LABEL_120:
                                                      ++v58;
                                                      std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t)v88);
                                                      v67 = (geo::codec::Allocator *)std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v89);
                                                      if ((v68 & 1) == 0)
                                                        goto LABEL_130;
                                                    }
                                                    v95 = v66;
                                                    v58 = v58;
                                                    v73 = (FILE *)*MEMORY[0x1E0C80C10];
                                                    v74 = 12120;
                                                  }
                                                  fprintf(v73, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v74);
                                                  v25 = 6;
LABEL_134:
                                                  std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t)&v91);
                                                  v39 = std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v93);
                                                  if (v25)
                                                    goto LABEL_145;
                                                  ++v86;
                                                  v59 = v132;
                                                  if (++v82 >= v132->u16[v81])
                                                  {
                                                    v86 = v86;
                                                    v56 = v139;
                                                    goto LABEL_137;
                                                  }
                                                }
                                                v75 = 12095;
LABEL_144:
                                                fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v75);
                                                v25 = 6;
                                              }
                                              else
                                              {
LABEL_138:
                                                v25 = 0;
                                              }
LABEL_145:
                                              v85 = 0;
                                              goto LABEL_146;
                                            }
                                            v54 = (FILE *)*MEMORY[0x1E0C80C10];
                                            v55 = 12058;
                                          }
                                          else
                                          {
                                            v54 = (FILE *)*MEMORY[0x1E0C80C10];
                                            v55 = 12054;
                                          }
                                        }
                                        else
                                        {
                                          v54 = (FILE *)*MEMORY[0x1E0C80C10];
                                          v55 = 12052;
                                        }
                                        fprintf(v54, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v55);
                                        v25 = 6;
LABEL_146:
                                        mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v96);
                                        goto LABEL_147;
                                      }
                                      v52 = (FILE *)*MEMORY[0x1E0C80C10];
                                      v53 = 12049;
                                    }
                                    else
                                    {
                                      v52 = (FILE *)*MEMORY[0x1E0C80C10];
                                      v53 = 12044;
                                    }
                                    fprintf(v52, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v53);
                                    v85 = 0;
                                    v25 = 6;
                                    goto LABEL_146;
                                  }
                                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 12033);
                                  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v103);
                                }
                                else
                                {
                                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 12031);
                                }
                                std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v107);
                              }
                              else
                              {
                                fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 12029);
                              }
                              v13 = (uint64_t)std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v114);
LABEL_72:
                              v14 = 0;
                              v11 = 0;
                              goto LABEL_19;
                            }
                            v29 = 12026;
                          }
                          else
                          {
                            v29 = 12025;
                          }
                          v28 = (FILE *)*MEMORY[0x1E0C80C10];
                        }
                        else
                        {
                          v28 = (FILE *)*MEMORY[0x1E0C80C10];
                          v29 = 12015;
                        }
LABEL_74:
                        v13 = fprintf(v28, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v29);
                        goto LABEL_72;
                      }
                      v30 = 12012;
                    }
                    else
                    {
                      v30 = 12011;
                    }
                    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v30);
                    v13 = mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&v114);
                    goto LABEL_72;
                  }
                  v27 = 12004;
                }
                else
                {
                  v27 = 12003;
                }
              }
              else
              {
                v27 = 11995;
              }
            }
            else
            {
              v27 = 11994;
            }
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v27);
            v13 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v114);
            goto LABEL_72;
          }
          v26 = 11986;
        }
        else
        {
          v26 = 11985;
        }
      }
      else
      {
        v26 = 11975;
      }
    }
    else
    {
      v26 = 11974;
    }
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v26);
    v13 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v114);
    goto LABEL_18;
  }
  v9 = (FILE *)*MEMORY[0x1E0C80C10];
  v10 = 11967;
LABEL_17:
  v13 = fprintf(v9, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v10);
LABEL_18:
  v14 = 0;
  v11 = 0;
LABEL_19:
  if (*(_BYTE *)v7)
  {
    v15 = geo::codec::Allocator::instance((geo::codec::Allocator *)v13);
    v13 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 40))(v15, *((_QWORD *)v7 + 5), 0);
  }
  v16 = geo::codec::Allocator::instance((geo::codec::Allocator *)v13);
  (*(void (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v16 + 40))(v16, v7, 0);
  if (v14)
    v18 = v11;
  else
    v18 = 1;
  if ((v18 & 1) == 0)
  {
    geo::codec::VertexPoolDealloc(v14, v17);
    v11 = 0;
  }
  if (v116)
  {
    v117 = v116;
    (*(void (**)(uint64_t, uint8x8_t *, uint64_t))(*(_QWORD *)v119 + 40))(v119, v116, v118 - (_QWORD)v116);
  }
  if (v120)
  {
    v121 = v120;
    (*(void (**)(geo::codec::Allocator *, uint16x8_t *, uint64_t))(*(_QWORD *)v123 + 40))(v123, v120, v122 - (_QWORD)v120);
  }
  if (v124)
  {
    v125 = v124;
    (*(void (**)(geo::codec::Allocator *, uint16x8_t *, uint64_t))(*(_QWORD *)v127 + 40))(v127, v124, v126 - (_QWORD)v124);
  }
  if (v128)
  {
    v129 = v128;
    (*(void (**)(geo::codec::Allocator *, uint16x8_t *, uint64_t))(*(_QWORD *)v131 + 40))(v131, v128, v130 - (_QWORD)v128);
  }
  if (v132)
  {
    v133 = v132;
    (*(void (**)(geo::codec::Allocator *, uint16x8_t *, uint64_t))(*(_QWORD *)v135 + 40))(v135, v132, v134 - (_QWORD)v132);
  }
  return v11 & 1;
}

void sub_1886FD178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  uint64_t v66;

  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a23);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a27);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a31);
  mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&a37);
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100](&a42);
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100](&a46);
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100](&a50);
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100](&a57);
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100](&a62);
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100](&a66);
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v66 - 232));
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v66 - 200));
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v66 - 168));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readLineAttributesOld(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::chrono::steady_clock::time_point v14;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v16;
  FILE *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  FILE *v25;
  int v26;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v27;
  unint64_t *v28;
  unint64_t v29;
  _BOOL8 v31;
  char v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  FILE *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  int v72;
  int v73;
  int v74;
  unint64_t i;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  double v79;
  double v80;
  float v81;
  float v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  float v88;
  unint64_t v89;
  uint64_t v90;
  NSObject *v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  geo::codec::Allocator *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  geo::codec::Allocator *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  geo::codec::Allocator *v115;
  const char *v116;
  const char *v117;
  uint64_t v118;
  geo::codec::Allocator *v119;
  int v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  const char *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v131;
  __int128 buf;
  unsigned int v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = a1[1];
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    while (*(_WORD *)(*a1 + 16 * v8) != 148)
    {
      v8 = ++v9;
      if (v7 <= v9)
        goto LABEL_5;
    }
    v10 = geo::codec::chapterAt((uint64_t)a1, v9, 148, v6 + 1912);
    v6 = *a3;
    v11 = (std::__shared_weak_count *)a3[1];
    v128 = "ChapterLineWidths1";
    v129 = v6;
    v130 = v11;
    if (!v11)
      goto LABEL_10;
    goto LABEL_8;
  }
LABEL_5:
  v10 = 0;
  v128 = "ChapterLineWidths1";
  v129 = v6;
  v11 = (std::__shared_weak_count *)a3[1];
  v130 = v11;
  if (v11)
  {
LABEL_8:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
LABEL_10:
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v14.__d_.__rep_;
  v131 = v14.__d_.__rep_;
  if (!v10)
    goto LABEL_35;
  if (*(_QWORD *)(*a3 + 2960) != *(_QWORD *)(*a3 + 2952))
  {
    v16 = 1;
    if (!a1)
      goto LABEL_36;
    goto LABEL_21;
  }
  v127 = 0;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, &v127) & 1) == 0)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 10980;
    goto LABEL_20;
  }
  v126 = 0;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, &v126) & 1) == 0)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 10982;
    goto LABEL_20;
  }
  if (v127 < v126)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 10983;
    goto LABEL_20;
  }
  if (v126 != 2)
  {
LABEL_35:
    v16 = 1;
    goto LABEL_36;
  }
  v125 = 0;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, &v125) & 1) == 0)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 10988;
    goto LABEL_20;
  }
  v124 = 0;
  v123 = 0;
  v122 = 0;
  v121 = 0;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v124 + 1) & 1) == 0)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 10998;
    goto LABEL_20;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v124) & 1) == 0)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 10999;
    goto LABEL_20;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v123 + 1) & 1) == 0)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 11000;
    goto LABEL_20;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v123) & 1) == 0)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 11001;
    goto LABEL_20;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, &v122) & 1) == 0)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 11002;
    goto LABEL_20;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v121 + 1) & 1) == 0)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 11003;
    goto LABEL_20;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v121) & 1) == 0)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 11004;
LABEL_20:
    v14.__d_.__rep_ = fprintf(v17, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v18);
    v16 = 0;
    if (!a1)
      goto LABEL_36;
    goto LABEL_21;
  }
  v99 = v6;
  v22 = *(_QWORD *)(v10 + 48);
  v21 = *(_QWORD *)(v10 + 56);
  v23 = v21 >= v22;
  v24 = v21 - v22;
  if (!v23)
  {
    v25 = (FILE *)*MEMORY[0x1E0C80C10];
    v26 = 11005;
LABEL_96:
    v14.__d_.__rep_ = fprintf(v25, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v26);
    v16 = 0;
    goto LABEL_105;
  }
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v10 + 40) + v22;
  *(_BYTE *)(v10 + 32) = 1;
  *(_QWORD *)(v10 + 16) = v24;
  *(_QWORD *)(v10 + 24) = 0;
  v120 = 0;
  v31 = BitstreamUnpack((uint64_t *)(v10 + 8), &v120, 5uLL);
  if (!v31)
  {
    v25 = (FILE *)*MEMORY[0x1E0C80C10];
    v26 = 11011;
    goto LABEL_96;
  }
  v32 = ++v120;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v119 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)v31);
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v115 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v119);
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v111 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v115);
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v111);
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = geo::codec::Allocator::instance(v107);
  if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), v124, (uint64_t)&v116) & 1) == 0)
  {
    v55 = (FILE *)*MEMORY[0x1E0C80C10];
    v56 = 11023;
    goto LABEL_102;
  }
  if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), HIDWORD(v123), (uint64_t)&v112) & 1) == 0)
  {
    v55 = (FILE *)*MEMORY[0x1E0C80C10];
    v56 = 11024;
    goto LABEL_102;
  }
  if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), v123, (uint64_t)&v108) & 1) == 0)
  {
    v55 = (FILE *)*MEMORY[0x1E0C80C10];
    v56 = 11025;
    goto LABEL_102;
  }
  if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), v122, (uint64_t)&v104) & 1) == 0)
  {
    v55 = (FILE *)*MEMORY[0x1E0C80C10];
    v56 = 11026;
    goto LABEL_102;
  }
  if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), HIDWORD(v121), (uint64_t)&v100) & 1) == 0)
  {
    v55 = (FILE *)*MEMORY[0x1E0C80C10];
    v56 = 11027;
    goto LABEL_102;
  }
  if (v116 != v117)
  {
    v33 = (char *)(v117 - 8);
    if (v117 - 8 > v116)
    {
      v34 = v116 + 8;
      do
      {
        v35 = *((_QWORD *)v34 - 1);
        *((_QWORD *)v34 - 1) = *(_QWORD *)v33;
        *(_QWORD *)v33 = v35;
        v33 -= 8;
        v23 = v34 >= v33;
        v34 += 8;
      }
      while (!v23);
    }
  }
  v36 = (_QWORD *)(v113 - 8);
  if (v112 != v113 && (unint64_t)v36 > v112)
  {
    v38 = v112 + 8;
    do
    {
      v39 = *(_QWORD *)(v38 - 8);
      *(_QWORD *)(v38 - 8) = *v36;
      *v36-- = v39;
      v23 = v38 >= (unint64_t)v36;
      v38 += 8;
    }
    while (!v23);
  }
  v40 = (_QWORD *)(v109 - 8);
  if (v108 != v109 && (unint64_t)v40 > v108)
  {
    v42 = v108 + 8;
    do
    {
      v43 = *(_QWORD *)(v42 - 8);
      *(_QWORD *)(v42 - 8) = *v40;
      *v40-- = v43;
      v23 = v42 >= (unint64_t)v40;
      v42 += 8;
    }
    while (!v23);
  }
  v44 = (_QWORD *)(v105 - 8);
  if (v104 != v105 && (unint64_t)v44 > v104)
  {
    v46 = v104 + 8;
    do
    {
      v47 = *(_QWORD *)(v46 - 8);
      *(_QWORD *)(v46 - 8) = *v44;
      *v44-- = v47;
      v23 = v46 >= (unint64_t)v44;
      v46 += 8;
    }
    while (!v23);
  }
  v48 = (_QWORD *)(v101 - 8);
  if (v100 != v101 && (unint64_t)v48 > v100)
  {
    v50 = v100 + 8;
    do
    {
      v51 = *(_QWORD *)(v50 - 8);
      *(_QWORD *)(v50 - 8) = *v48;
      *v48-- = v51;
      v23 = v50 >= (unint64_t)v48;
      v50 += 8;
    }
    while (!v23);
  }
  v98 = *(_QWORD **)(*a3 + 792);
  std::vector<GeoCodecsRoadOffsets,geo::StdAllocator<GeoCodecsRoadOffsets,geo::codec::Allocator>>::reserve(*a3 + 2952, v98[2]);
  v52 = *a3;
  v96 = *(_QWORD *)(*a3 + 32);
  if ((uint64_t)(*(_QWORD *)(*a3 + 40) - v96) < 1)
  {
    v57 = 1;
  }
  else
  {
    v53 = (double)~(-1 << v32);
    v54 = 1.0 / v53;
    do
    {
      v58 = *(unsigned int *)(v96 + 96);
      if (v58 < *(_DWORD *)(v96 + 100) + (int)v58)
      {
        v59 = (_QWORD *)(v98[4] + 16 * v58);
        do
        {
          v60 = *(_QWORD *)(v10 + 24);
          v61 = v60 + 1;
          v62 = 8 * *(_QWORD *)(v10 + 16);
          if (v60 + 1 > v62)
          {
            v55 = (FILE *)*MEMORY[0x1E0C80C10];
            v56 = 11051;
            goto LABEL_102;
          }
          v63 = *(_QWORD *)(v10 + 8);
          v64 = *(unsigned __int8 *)(v63 + (v60 >> 3));
          *(_QWORD *)(v10 + 24) = v61;
          if (((v64 >> (~(_BYTE)v60 & 7)) & 1) != 0)
          {
            v65 = *((_QWORD *)v117 - 1);
            v117 -= 8;
            v66 = v59[1];
            if (v65 != v66)
            {
              if (qword_1ECDBCDF8 == -1)
              {
                v91 = _MergedGlobals_352;
                if (!os_log_type_enabled((os_log_t)_MergedGlobals_352, OS_LOG_TYPE_ERROR))
                  goto LABEL_103;
              }
              else
              {
                dispatch_once(&qword_1ECDBCDF8, &__block_literal_global_217);
                v91 = _MergedGlobals_352;
                if (!os_log_type_enabled((os_log_t)_MergedGlobals_352, OS_LOG_TYPE_ERROR))
                  goto LABEL_103;
              }
              v92 = *((unsigned __int16 *)a2 + 4);
              v93 = *a2;
              v94 = ((unint64_t)*a2 >> 14) & 0x3FFFFFF;
              v95 = (unint64_t)*a2 >> 40;
              LODWORD(buf) = 67110144;
              DWORD1(buf) = v94;
              WORD4(buf) = 1024;
              *(_DWORD *)((char *)&buf + 10) = (v95 | (v92 << 24)) & 0x3FFFFFF;
              HIWORD(buf) = 1024;
              v133 = (v93 >> 8) & 0x3F;
              v134 = 2048;
              v135 = v66;
              v136 = 2048;
              v137 = v65;
              _os_log_impl(&dword_1885A9000, v91, OS_LOG_TYPE_ERROR, "Line Width decoding, section length doesn't match pointCount (%d, %d, %d). Section Length = %lld, Point Count = %lld)", (uint8_t *)&buf, 0x28u);
              goto LABEL_103;
            }
            v67 = v60 + 2;
            if (v60 + 2 > v62)
            {
              v55 = (FILE *)*MEMORY[0x1E0C80C10];
              v56 = 11062;
              goto LABEL_102;
            }
            v68 = *(unsigned __int8 *)(v63 + (v61 >> 3));
            *(_QWORD *)(v10 + 24) = v67;
            v69 = v60 + 3;
            if (v60 + 3 > v62)
            {
              v55 = (FILE *)*MEMORY[0x1E0C80C10];
              v56 = 11064;
              goto LABEL_102;
            }
            v70 = *(unsigned __int8 *)(v63 + (v67 >> 3));
            *(_QWORD *)(v10 + 24) = v69;
            v71 = v60 + 4;
            if (v71 > v62)
            {
              v55 = (FILE *)*MEMORY[0x1E0C80C10];
              v56 = 11066;
LABEL_102:
              fprintf(v55, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v56);
LABEL_103:
              v57 = 0;
              goto LABEL_104;
            }
            v72 = *(unsigned __int8 *)(v63 + (v69 >> 3));
            *(_QWORD *)(v10 + 24) = v71;
            if (*v59 < *v59 + v65)
            {
              v73 = (1 << (~(_BYTE)v61 & 7)) & v68;
              v74 = (1 << (~(_BYTE)v67 & 7)) & v70;
              v97 = (1 << (~(_BYTE)v69 & 7)) & v72;
              for (i = v98[1] + 8 * *v59; i < v98[1] + 8 * (v59[1] + *v59); i += 8)
              {
                buf = 0uLL;
                if (v73)
                  goto LABEL_124;
                v76 = *(_QWORD *)(v10 + 24);
                if (v76 + 1 > 8 * *(_QWORD *)(v10 + 16))
                {
                  v55 = (FILE *)*MEMORY[0x1E0C80C10];
                  v56 = 11072;
                  goto LABEL_102;
                }
                v77 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 8) + (v76 >> 3));
                *(_QWORD *)(v10 + 24) = v76 + 1;
                if (((v77 >> (~(_BYTE)v76 & 7)) & 1) != 0)
                {
LABEL_124:
                  v78 = *(_QWORD *)(v113 - 8);
                  v113 -= 8;
                  LODWORD(v53) = v121;
                  v79 = (double)*(unint64_t *)&v53;
                  v80 = (double)*(unint64_t *)&v53 * v54;
                  v81 = 0.0;
                  v82 = 0.0;
                  if (v74)
                  {
                    v83 = *(_QWORD *)(v109 - 8);
                    v109 -= 8;
                    v82 = (double)v83 * v80;
                  }
                  v84 = v80 * (double)v78;
                  if (!v97)
                  {
                    v85 = *(_QWORD *)(v105 - 8);
                    v105 -= 8;
                    if (v74)
                    {
                      v86 = *(_QWORD *)(v101 - 8);
                      v101 -= 8;
                      v87 = (double)v86 * v79 * v54;
                    }
                    else
                    {
                      v87 = 0.0;
                    }
                    v88 = v82 + v84;
                    v84 = (double)v85 * v80;
                    v81 = v88 * 0.5;
                    *(float *)&buf = v88 * 0.5;
                    v82 = v87;
                  }
                  *((float *)&buf + 1) = v81;
                  *((float *)&buf + 2) = (float)(v82 + v84) * 0.5;
                  *((float *)&buf + 3) = *((float *)&buf + 2);
                }
                std::vector<GeoCodecsRoadOffsets,geo::StdAllocator<GeoCodecsRoadOffsets,geo::codec::Allocator>>::emplace_back<GeoCodecsRoadOffsets&>(*a3 + 2952, &buf);
              }
            }
          }
          else if (*v59 < v59[1] + *v59)
          {
            v89 = v98[1] + 8 * *v59;
            do
            {
              v90 = *a3 + 2952;
              buf = 0uLL;
              std::vector<GeoCodecsRoadOffsets,geo::StdAllocator<GeoCodecsRoadOffsets,geo::codec::Allocator>>::emplace_back<GeoCodecsRoadOffsets>(v90, &buf);
              v89 += 8;
            }
            while (v89 < v98[1] + 8 * (v59[1] + *v59));
          }
          v59 += 2;
        }
        while ((unint64_t)v59 < v98[4]
                                      + 16
                                      * (unint64_t)(*(_DWORD *)(v96 + 100) + *(_DWORD *)(v96 + 96)));
        v52 = *a3;
      }
      v57 = 1;
      v96 += 168;
    }
    while (v96 < *(_QWORD *)(v52 + 40));
  }
LABEL_104:
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v100);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v104);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v108);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v112);
  v14.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v116);
  v16 = v57;
LABEL_105:
  v6 = v99;
  if (!a1)
    goto LABEL_36;
LABEL_21:
  if (*(_BYTE *)v10)
  {
    v19 = geo::codec::Allocator::instance((geo::codec::Allocator *)v14.__d_.__rep_);
    v14.__d_.__rep_ = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v19 + 40))(v19, *(_QWORD *)(v10 + 40), 0);
  }
  v20 = geo::codec::Allocator::instance((geo::codec::Allocator *)v14.__d_.__rep_);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v20 + 40))(v20, v10, 0);
LABEL_36:
  v27 = std::chrono::steady_clock::now().__d_.__rep_;
  v116 = "ChapterLineWidths1";
  *(_QWORD *)&buf = &v116;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6 + 1912, (uint64_t *)&v116, (uint64_t)&std::piecewise_construct, (uint64_t **)&buf)+ 4) = (double)((v27 - rep) / 1000) * 0.001;
  if (v11)
  {
    v28 = (unint64_t *)&v11->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v16;
}

void sub_1886FDEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a15);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a19);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a23);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a27);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a31);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v31 - 192));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readAnnotationLabels(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char v13;
  FILE *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  FILE *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  FILE *v29;
  int v30;
  int v31;
  size_t v32;
  char *v33;
  char *v34;
  FILE *v35;
  int v36;
  size_t v37;
  char *v38;
  char *v39;
  FILE *v40;
  int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  FILE *v45;
  int v46;
  size_t v47;
  char *v48;
  char *v49;
  FILE *v50;
  int v51;
  size_t v52;
  char *v53;
  char *v54;
  FILE *v55;
  int v56;
  uint64_t v57;
  char *v58;
  char *v59;
  FILE *v60;
  int v61;
  uint64_t v62;
  char *v63;
  char *v64;
  FILE *v65;
  int v66;
  unsigned int *v67;
  unsigned int *v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  FILE *v75;
  int v76;
  FILE *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  geo::codec::Allocator *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  const void *v85;
  size_t v86;
  _QWORD *v87;
  FILE *v88;
  int v89;
  unint64_t i;
  int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  unsigned int v109;
  double v110;
  _QWORD *v111;
  uint64_t v112;
  unsigned int v113;
  unint64_t v114;
  uint64_t v115;
  geo::codec::Allocator *v116;
  uint64_t v117;
  unsigned __int8 *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  unsigned __int16 *v123;
  uint64_t v124;
  double v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  char v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  unsigned int v139;
  char *v140;
  int v141;
  uint64_t v142;
  unsigned __int8 *v143;
  uint64_t v144;
  unsigned __int8 *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  double *v149;
  int *v150;
  unsigned int v151;
  int v152;
  int v153;
  unint64_t v154;
  geo::codec::Allocator *__key[4];
  uint64_t v156;
  uint64_t v157[4];
  uint64_t v158[4];
  void *v159;
  void *v160;
  char *v161;
  uint64_t v162;
  void *v163;
  void *v164;
  char *v165;
  uint64_t v166;
  void *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  void *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  void *v175;
  void *v176;
  char *v177;
  uint64_t v178;
  void *v179;
  char *v180;
  char *v181;
  unint64_t v182;
  void *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  void *v187;
  void *v188;
  char *v189;
  uint64_t v190;
  void *__p;
  void *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195[4];
  uint64_t v196[4];
  uint64_t v197[4];
  uint64_t v198[4];
  unsigned int v199;
  unsigned int v200;
  unsigned int *v201;
  unsigned int *v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206[6];

  v2 = a1[1];
  if (v2)
  {
    v4 = 0;
    v5 = 0;
    while (*(_WORD *)(*a1 + 16 * v4) != 160)
    {
      v4 = ++v5;
      if (v2 <= v5)
        goto LABEL_18;
    }
    v6 = (_QWORD *)geo::codec::chapterAt((uint64_t)a1, v5, 160, *a2 + 1912);
    if (v6)
    {
      v7 = v6;
      *(_QWORD *)v206 = 0;
      if ((geo::codec::chapterReadVarUint32(v6, &v206[1]) & 1) != 0)
      {
        if ((geo::codec::chapterReadVarUint32(v7, v206) & 1) != 0)
        {
          v205 = 0;
          if ((geo::codec::chapterReadVarUint32(v7, &v205) & 1) != 0)
          {
            v204 = 0;
            if ((geo::codec::chapterReadVarUint32(v7, &v204) & 1) != 0)
            {
              v203 = 0;
              if ((geo::codec::chapterReadVarUint32(v7, &v203) & 1) != 0)
              {
                std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::vector((uint64_t *)&v201, v203);
                v8 = v201;
                v9 = v202;
                if (0xAAAAAAAAAAAAAAABLL * (v202 - v201) == v203)
                {
                  if (v201 != v202)
                  {
                    v10 = 0;
                    while (1)
                    {
                      *v8 = v10;
                      v11 = v8 + 1;
                      if ((geo::codec::chapterReadVarUint32(v7, v11) & 1) == 0)
                        break;
                      v12 = *v11;
                      v8 = v11 + 2;
                      v10 += v12;
                      if (v8 == v9)
                        goto LABEL_31;
                    }
                    v20 = 11510;
                    goto LABEL_40;
                  }
                  v10 = 0;
LABEL_31:
                  v200 = 0;
                  if ((geo::codec::chapterReadVarUint32(v7, &v200) & 1) == 0)
                  {
                    v25 = (FILE *)*MEMORY[0x1E0C80C10];
                    v20 = 11515;
                    goto LABEL_41;
                  }
                  v199 = 0;
                  if ((geo::codec::chapterReadVarUint32(v7, &v199) & 1) != 0)
                  {
                    v21 = v199;
                    if (v199)
                    {
                      memset(v198, 0, sizeof(v198));
                      memset(v197, 0, sizeof(v197));
                      memset(v196, 0, sizeof(v196));
                      memset(v195, 0, sizeof(v195));
                      v22 = v205;
                      v192 = 0;
                      v193 = 0;
                      __p = 0;
                      if (v205)
                      {
                        v23 = (char *)operator new(2 * v205);
                        v24 = &v23[2 * v22];
                        __p = v23;
                        v193 = v24;
                        bzero(v23, 2 * v22);
                        v192 = v24;
                      }
                      else
                      {
                        v23 = 0;
                        v24 = 0;
                      }
                      v194 = 0;
                      if (v22 == (v24 - v23) >> 1)
                      {
                        if ((geo::codec::decodeIntCompressorArray<unsigned short>(v7, v197, v206[1], v206[0], (uint64_t)&__p) & 1) != 0)
                        {
                          v26 = v205;
                          v188 = 0;
                          v189 = 0;
                          v187 = 0;
                          if (v205)
                          {
                            v27 = (char *)operator new(4 * v205);
                            v28 = &v27[4 * v26];
                            v187 = v27;
                            v189 = v28;
                            bzero(v27, 4 * v26);
                            v188 = v28;
                          }
                          else
                          {
                            v27 = 0;
                            v28 = 0;
                          }
                          v190 = 0;
                          if (v26 == (v28 - v27) >> 2)
                          {
                            if ((geo::codec::decodeIntCompressorArray<unsigned int>(v7, v196, v206[1], v206[0], (uint64_t)&v187) & 1) != 0)
                            {
                              v32 = v205;
                              v184 = 0;
                              v185 = 0;
                              v183 = 0;
                              if (v205)
                              {
                                v33 = (char *)operator new(v205);
                                v34 = &v33[v32];
                                v183 = v33;
                                v185 = &v33[v32];
                                bzero(v33, v32);
                                v184 = &v33[v32];
                              }
                              else
                              {
                                v33 = 0;
                                v34 = 0;
                              }
                              v186 = 0;
                              if (v34 - v33 == v32)
                              {
                                if ((geo::codec::decodeIntCompressorArray<unsigned char>(v7, v198, v206[1], v206[0], (uint64_t)&v183) & 1) != 0)
                                {
                                  v37 = v204;
                                  v180 = 0;
                                  v181 = 0;
                                  v179 = 0;
                                  if (v204)
                                  {
                                    v38 = (char *)operator new(v204);
                                    v39 = &v38[v37];
                                    v179 = v38;
                                    v181 = &v38[v37];
                                    bzero(v38, v37);
                                    v180 = &v38[v37];
                                  }
                                  else
                                  {
                                    v38 = 0;
                                    v39 = 0;
                                  }
                                  v182 = 0;
                                  if (v39 - v38 == v37)
                                  {
                                    if ((geo::codec::decodeIntCompressorArray<unsigned char>(v7, v198, v206[1], v206[0], (uint64_t)&v179) & 1) != 0)
                                    {
                                      v42 = v204;
                                      v176 = 0;
                                      v177 = 0;
                                      v175 = 0;
                                      if (v204)
                                      {
                                        v43 = (char *)operator new(4 * v204);
                                        v44 = &v43[4 * v42];
                                        v175 = v43;
                                        v177 = v44;
                                        bzero(v43, 4 * v42);
                                        v176 = v44;
                                      }
                                      else
                                      {
                                        v43 = 0;
                                        v44 = 0;
                                      }
                                      v178 = 0;
                                      if (v42 == (v44 - v43) >> 2)
                                      {
                                        if ((geo::codec::decodeIntCompressorArray<unsigned int>(v7, v196, v206[1], v206[0], (uint64_t)&v175) & 1) != 0)
                                        {
                                          v47 = v204;
                                          v172 = 0;
                                          v173 = 0;
                                          v171 = 0;
                                          if (v204)
                                          {
                                            v48 = (char *)operator new(v204);
                                            v49 = &v48[v47];
                                            v171 = v48;
                                            v173 = &v48[v47];
                                            bzero(v48, v47);
                                            v172 = &v48[v47];
                                          }
                                          else
                                          {
                                            v48 = 0;
                                            v49 = 0;
                                          }
                                          v174 = 0;
                                          if (v49 - v48 == v47)
                                          {
                                            if ((geo::codec::decodeIntCompressorArray<unsigned char>(v7, v198, v206[1], v206[0], (uint64_t)&v171) & 1) != 0)
                                            {
                                              v52 = v200;
                                              v168 = 0;
                                              v169 = 0;
                                              v167 = 0;
                                              if (v200)
                                              {
                                                v53 = (char *)operator new(v200);
                                                v54 = &v53[v52];
                                                v167 = v53;
                                                v169 = &v53[v52];
                                                bzero(v53, v52);
                                                v168 = &v53[v52];
                                              }
                                              else
                                              {
                                                v53 = 0;
                                                v54 = 0;
                                              }
                                              v170 = 0;
                                              if (v54 - v53 == v52)
                                              {
                                                if ((geo::codec::decodeIntCompressorArray<unsigned char>(v7, v198, v206[1], v206[0], (uint64_t)&v167) & 1) != 0)
                                                {
                                                  v57 = v200;
                                                  v164 = 0;
                                                  v165 = 0;
                                                  v163 = 0;
                                                  if (v200)
                                                  {
                                                    v58 = (char *)operator new(4 * v200);
                                                    v59 = &v58[4 * v57];
                                                    v163 = v58;
                                                    v165 = v59;
                                                    bzero(v58, 4 * v57);
                                                    v164 = v59;
                                                  }
                                                  else
                                                  {
                                                    v58 = 0;
                                                    v59 = 0;
                                                  }
                                                  v166 = 0;
                                                  if (v57 == (v59 - v58) >> 2)
                                                  {
                                                    if ((geo::codec::decodeIntCompressorArray<unsigned int>(v7, v196, v206[1], v206[0], (uint64_t)&v163) & 1) != 0)
                                                    {
                                                      v62 = v200;
                                                      v160 = 0;
                                                      v161 = 0;
                                                      v159 = 0;
                                                      if (v200)
                                                      {
                                                        v63 = (char *)operator new(2 * v200);
                                                        v64 = &v63[2 * v62];
                                                        v159 = v63;
                                                        v161 = v64;
                                                        bzero(v63, 2 * v62);
                                                        v160 = v64;
                                                      }
                                                      else
                                                      {
                                                        v63 = 0;
                                                        v64 = 0;
                                                      }
                                                      v162 = 0;
                                                      if (v62 == (v64 - v63) >> 1)
                                                      {
                                                        if ((geo::codec::decodeIntCompressorArray<unsigned short>(v7, v197, v206[1], v206[0], (uint64_t)&v159) & 1) != 0)
                                                        {
                                                          std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::vector((geo::codec::Allocator *)v158, v10);
                                                          if (v10 != (v158[1] - v158[0]) >> 3)
                                                          {
                                                            v77 = (FILE *)*MEMORY[0x1E0C80C10];
                                                            v78 = 11563;
LABEL_149:
                                                            fprintf(v77, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v78);
                                                            v31 = 6;
LABEL_153:
                                                            std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](v158);
LABEL_154:
                                                            if (v159)
                                                            {
                                                              v160 = v159;
                                                              operator delete(v159);
                                                            }
                                                            goto LABEL_124;
                                                          }
                                                          v67 = v201;
                                                          v68 = v202;
                                                          if (v201 != v202)
                                                          {
                                                            while ((geo::codec::decodeIntCompressorArray<long long>(v7, v195, v206[1], v206[0], v67[1], (uint64x2_t *)(v158[0] + 8 * *v67)) & 1) != 0)
                                                            {
                                                              v67 += 3;
                                                              if (v67 == v68)
                                                                goto LABEL_133;
                                                            }
                                                            v77 = (FILE *)*MEMORY[0x1E0C80C10];
                                                            v78 = 11565;
                                                            goto LABEL_149;
                                                          }
LABEL_133:
                                                          std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)v157, v205);
                                                          v69 = (v157[1] - v157[0]) >> 2;
                                                          if (v69 == v205)
                                                          {
                                                            v156 = 0;
                                                            if ((geo::codec::_makeSpaceForLabels((geo::codec::Allocator *)v69, &v156, a2) & 1) != 0)
                                                            {
                                                              v70 = v205;
                                                              if (v205)
                                                              {
                                                                v71 = 0;
                                                                v72 = *(_QWORD *)(*a2 + 856);
                                                                v154 = *(_QWORD *)(*a2 + 864) - v72;
                                                                v73 = v156;
                                                                v74 = 24 * v156;
                                                                while (1)
                                                                {
                                                                  v80 = v190++;
                                                                  v81 = (geo::codec::Allocator *)*((unsigned int *)v187
                                                                                                 + v80);
                                                                  if (v154 <= (unint64_t)v81)
                                                                  {
                                                                    v88 = (FILE *)*MEMORY[0x1E0C80C10];
                                                                    v89 = 11578;
                                                                    goto LABEL_151;
                                                                  }
                                                                  v82 = (_QWORD *)*a2;
                                                                  if (v73 + v71 >= *(_QWORD *)(*a2 + 1056))
                                                                    break;
                                                                  v83 = v82[131];
                                                                  v84 = v83 + v74;
                                                                  *(_QWORD *)v84 = (char *)v81 + v72;
                                                                  *(_DWORD *)(v84 + 16) = 0;
                                                                  v85 = (const void *)v82[111];
                                                                  v86 = v82[112];
                                                                  __key[0] = v81;
                                                                  v87 = bsearch(__key, v85, v86, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
                                                                  if (v87)
                                                                    v79 = v87[2];
                                                                  else
                                                                    v79 = 0;
                                                                  *(_QWORD *)(v83 + v74 + 8) = v79;
                                                                  *(_DWORD *)(v157[0] + 4 * v71) = v73 + v71;
                                                                  ++v71;
                                                                  v70 = v205;
                                                                  v74 += 24;
                                                                  if (v71 >= v205)
                                                                    goto LABEL_156;
                                                                }
                                                                v88 = (FILE *)*MEMORY[0x1E0C80C10];
                                                                v89 = 11579;
                                                                goto LABEL_151;
                                                              }
LABEL_156:
                                                              std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::codec::Allocator>>::vector(__key, v70);
                                                              if (0xCCCCCCCCCCCCCCCDLL * ((__key[1] - __key[0]) >> 3) != v205)
                                                              {
                                                                v91 = 11590;
                                                                goto LABEL_209;
                                                              }
                                                              if (v205)
                                                              {
                                                                for (i = 0; i < v205; ++i)
                                                                {
                                                                  v92 = (char *)__key[0] + 40 * i;
                                                                  v93 = v194++;
                                                                  *((_WORD *)v92 + 2) = *((_WORD *)__p + v93);
                                                                  *(_DWORD *)v92 = *(_DWORD *)(v157[0] + 4 * i);
                                                                  v94 = v186++;
                                                                  v95 = *((unsigned __int8 *)v183 + v94);
                                                                  v96 = (uint64_t *)(v92 + 8);
                                                                  std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplateValue,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplateValue,geo::codec::Allocator>>::resize((uint64_t)(v92 + 8), v95);
                                                                  v97 = *v96;
                                                                  v98 = v96[1];
                                                                  if (v95 != (v98 - *v96) >> 3)
                                                                  {
                                                                    v91 = 11597;
                                                                    goto LABEL_209;
                                                                  }
                                                                  if (v97 != v98)
                                                                  {
                                                                    v99 = 0;
                                                                    v100 = v203;
                                                                    v101 = v182;
                                                                    v102 = v174;
                                                                    if (v182 <= v180 - (_BYTE *)v179)
                                                                      v103 = v180 - (_BYTE *)v179;
                                                                    else
                                                                      v103 = v182;
                                                                    v104 = (char *)v171 + v174;
                                                                    v105 = (char *)v175 + 4 * v178;
                                                                    v106 = v178 + 1;
                                                                    v107 = (char *)v179 + v182;
                                                                    v108 = v182 - v103;
                                                                    do
                                                                    {
                                                                      if (!(v108 + v99))
                                                                      {
                                                                        v91 = 11599;
                                                                        goto LABEL_209;
                                                                      }
                                                                      v182 = v101 + v99 + 1;
                                                                      *(_BYTE *)(v97 + 1) = v107[v99];
                                                                      v178 = v106 + v99;
                                                                      *(_DWORD *)(v97 + 4) = *(_DWORD *)&v105[4 * v99];
                                                                      v174 = v102 + v99 + 1;
                                                                      v109 = v104[v99];
                                                                      *(_BYTE *)v97 = v109;
                                                                      if (v100 <= v109)
                                                                      {
                                                                        v91 = 11603;
                                                                        goto LABEL_209;
                                                                      }
                                                                      v97 += 8;
                                                                      ++v99;
                                                                    }
                                                                    while (v97 != v98);
                                                                  }
                                                                }
                                                              }
                                                              std::vector<GeoCodecsAnnotation,geo::StdAllocator<GeoCodecsAnnotation,geo::codec::Allocator>>::resize(*a2 + 536, v200);
                                                              if (v200 != (uint64_t)(*(_QWORD *)(*a2 + 544)
                                                                                   - *(_QWORD *)(*a2 + 536)) >> 4)
                                                              {
                                                                v91 = 11608;
                                                                goto LABEL_209;
                                                              }
                                                              std::vector<GeoCodecsAnnotationValue,geo::StdAllocator<GeoCodecsAnnotationValue,geo::codec::Allocator>>::resize(*a2 + 568, v10);
                                                              v111 = (_QWORD *)*a2;
                                                              v112 = *(_QWORD *)(*a2 + 568);
                                                              if (v10 != (*(_QWORD *)(*a2 + 576) - v112) >> 4)
                                                              {
                                                                v91 = 11611;
                                                                goto LABEL_209;
                                                              }
                                                              v113 = v200;
                                                              if (!v200)
                                                              {
LABEL_197:
                                                                if (v113 != v10)
                                                                {
                                                                  v91 = 11663;
                                                                  goto LABEL_209;
                                                                }
                                                                v31 = 0;
LABEL_210:
                                                                std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)__key);
                                                                goto LABEL_152;
                                                              }
                                                              v114 = 0;
                                                              v113 = 0;
                                                              v115 = v111[67];
                                                              v116 = __key[0];
                                                              v117 = (uint64_t)v201;
                                                              v119 = v166;
                                                              v118 = (unsigned __int8 *)v167;
                                                              v120 = v170;
                                                              v122 = v162;
                                                              v121 = (unsigned int *)v163;
                                                              v123 = (unsigned __int16 *)v159;
                                                              v124 = v112 + 8;
                                                              v125 = 1.0 / (double)v21;
                                                              while (1)
                                                              {
                                                                v126 = v120 + 1;
                                                                v170 = v120 + 1;
                                                                v127 = v118[v120];
                                                                v128 = v119 + 1;
                                                                v166 = v119 + 1;
                                                                v129 = v121[v119];
                                                                if (v127 == 1)
                                                                {
                                                                  v135 = v111[4];
                                                                  if (0xCF3CF3CF3CF3CF3DLL * ((v111[5] - v135) >> 3) <= v129)
                                                                  {
                                                                    v91 = 11634;
                                                                    goto LABEL_209;
                                                                  }
                                                                  v136 = v135 + 168 * v129;
                                                                  v137 = *(unsigned __int8 *)(v136 + 150);
                                                                  v132 = (_BYTE *)(v136 + 150);
                                                                  v133 = v137;
                                                                  if (!v137)
                                                                    *(_DWORD *)(v135 + 168 * v129 + 140) = v114;
                                                                }
                                                                else
                                                                {
                                                                  if (v127)
                                                                    goto LABEL_186;
                                                                  v130 = v111[63];
                                                                  if (0x6DB6DB6DB6DB6DB7 * ((v111[64] - v130) >> 5) <= v129)
                                                                  {
                                                                    v91 = 11623;
                                                                    goto LABEL_209;
                                                                  }
                                                                  v131 = v130 + 224 * v129;
                                                                  v134 = *(unsigned __int8 *)(v131 + 204);
                                                                  v132 = (_BYTE *)(v131 + 204);
                                                                  v133 = v134;
                                                                  if (!v134)
                                                                    *(_DWORD *)(v130 + 224 * v129 + 200) = v114;
                                                                }
                                                                *v132 = v133 + 1;
LABEL_186:
                                                                v138 = v122 + 1;
                                                                v162 = v122 + 1;
                                                                v139 = v123[v122];
                                                                if (v205 <= v139)
                                                                {
                                                                  v91 = 11648;
                                                                  goto LABEL_209;
                                                                }
                                                                v140 = (char *)v116 + 40 * v139;
                                                                *(_DWORD *)(v115 + 16 * v114) = *(_DWORD *)v140;
                                                                v141 = *((unsigned __int16 *)v140 + 2);
                                                                v142 = v115 + 16 * v114;
                                                                v143 = (unsigned __int8 *)*((_QWORD *)v140 + 1);
                                                                v144 = *((_QWORD *)v140 + 2) - (_QWORD)v143;
                                                                *(_BYTE *)(v142 + 12) = (unint64_t)v144 >> 3;
                                                                v145 = (unsigned __int8 *)(v142 + 12);
                                                                *((_DWORD *)v145 - 2) = v141;
                                                                *((_DWORD *)v145 - 1) = v113;
                                                                if (v144)
                                                                {
                                                                  v146 = v144 >> 3;
                                                                  v147 = v158[0];
                                                                  if (v146 <= 1)
                                                                    v148 = 1;
                                                                  else
                                                                    v148 = v146;
                                                                  v149 = (double *)(v124 + 16 * v113);
                                                                  while (1)
                                                                  {
                                                                    *((_BYTE *)v149 - 8) = v143[1];
                                                                    v150 = (int *)(v117 + 12 * *v143);
                                                                    v151 = v150[2];
                                                                    if (v151 >= v150[1])
                                                                      break;
                                                                    v152 = *v150;
                                                                    *(_DWORD *)(v117 + 12 * *v143 + 8) = v151 + 1;
                                                                    LODWORD(v110) = *((_DWORD *)v143 + 1);
                                                                    v110 = 1000.0
                                                                         * (double)*(unint64_t *)&v110
                                                                         * v125;
                                                                    *v149 = (double)*(uint64_t *)(v147
                                                                                               + 8 * (v152 + v151))
                                                                          * v110;
                                                                    v149 += 2;
                                                                    v143 += 8;
                                                                    if (!--v148)
                                                                    {
                                                                      v153 = *v145;
                                                                      goto LABEL_196;
                                                                    }
                                                                  }
                                                                  v91 = 11658;
LABEL_209:
                                                                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v91);
                                                                  v31 = 6;
                                                                  goto LABEL_210;
                                                                }
                                                                v153 = 0;
LABEL_196:
                                                                v113 += v153;
                                                                ++v114;
                                                                v122 = v138;
                                                                v119 = v128;
                                                                v120 = v126;
                                                                if (v114 >= v200)
                                                                  goto LABEL_197;
                                                              }
                                                            }
                                                            v88 = (FILE *)*MEMORY[0x1E0C80C10];
                                                            v89 = 11572;
                                                          }
                                                          else
                                                          {
                                                            v88 = (FILE *)*MEMORY[0x1E0C80C10];
                                                            v89 = 11570;
                                                          }
LABEL_151:
                                                          fprintf(v88, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v89);
                                                          v31 = 6;
LABEL_152:
                                                          std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100](v157);
                                                          goto LABEL_153;
                                                        }
                                                        v75 = (FILE *)*MEMORY[0x1E0C80C10];
                                                        v76 = 11560;
                                                      }
                                                      else
                                                      {
                                                        v75 = (FILE *)*MEMORY[0x1E0C80C10];
                                                        v76 = 11559;
                                                      }
                                                      fprintf(v75, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v76);
                                                      v31 = 6;
                                                      goto LABEL_154;
                                                    }
                                                    v65 = (FILE *)*MEMORY[0x1E0C80C10];
                                                    v66 = 11556;
                                                  }
                                                  else
                                                  {
                                                    v65 = (FILE *)*MEMORY[0x1E0C80C10];
                                                    v66 = 11555;
                                                  }
                                                  fprintf(v65, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v66);
                                                  v31 = 6;
LABEL_124:
                                                  if (v163)
                                                  {
                                                    v164 = v163;
                                                    operator delete(v163);
                                                  }
                                                  goto LABEL_114;
                                                }
                                                v60 = (FILE *)*MEMORY[0x1E0C80C10];
                                                v61 = 11552;
                                              }
                                              else
                                              {
                                                v60 = (FILE *)*MEMORY[0x1E0C80C10];
                                                v61 = 11551;
                                              }
                                              fprintf(v60, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v61);
                                              v31 = 6;
LABEL_114:
                                              if (v167)
                                              {
                                                v168 = (char *)v167;
                                                operator delete(v167);
                                              }
                                              goto LABEL_104;
                                            }
                                            v55 = (FILE *)*MEMORY[0x1E0C80C10];
                                            v56 = 11548;
                                          }
                                          else
                                          {
                                            v55 = (FILE *)*MEMORY[0x1E0C80C10];
                                            v56 = 11547;
                                          }
                                          fprintf(v55, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v56);
                                          v31 = 6;
LABEL_104:
                                          if (v171)
                                          {
                                            v172 = (char *)v171;
                                            operator delete(v171);
                                          }
                                          goto LABEL_94;
                                        }
                                        v50 = (FILE *)*MEMORY[0x1E0C80C10];
                                        v51 = 11544;
                                      }
                                      else
                                      {
                                        v50 = (FILE *)*MEMORY[0x1E0C80C10];
                                        v51 = 11543;
                                      }
                                      fprintf(v50, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v51);
                                      v31 = 6;
LABEL_94:
                                      if (v175)
                                      {
                                        v176 = v175;
                                        operator delete(v175);
                                      }
                                      goto LABEL_84;
                                    }
                                    v45 = (FILE *)*MEMORY[0x1E0C80C10];
                                    v46 = 11540;
                                  }
                                  else
                                  {
                                    v45 = (FILE *)*MEMORY[0x1E0C80C10];
                                    v46 = 11539;
                                  }
                                  fprintf(v45, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v46);
                                  v31 = 6;
LABEL_84:
                                  if (v179)
                                  {
                                    v180 = (char *)v179;
                                    operator delete(v179);
                                  }
                                  goto LABEL_74;
                                }
                                v40 = (FILE *)*MEMORY[0x1E0C80C10];
                                v41 = 11536;
                              }
                              else
                              {
                                v40 = (FILE *)*MEMORY[0x1E0C80C10];
                                v41 = 11535;
                              }
                              fprintf(v40, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v41);
                              v31 = 6;
LABEL_74:
                              if (v183)
                              {
                                v184 = (char *)v183;
                                operator delete(v183);
                              }
                              goto LABEL_64;
                            }
                            v35 = (FILE *)*MEMORY[0x1E0C80C10];
                            v36 = 11532;
                          }
                          else
                          {
                            v35 = (FILE *)*MEMORY[0x1E0C80C10];
                            v36 = 11531;
                          }
                          fprintf(v35, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v36);
                          v31 = 6;
LABEL_64:
                          if (v187)
                          {
                            v188 = v187;
                            operator delete(v187);
                          }
LABEL_51:
                          if (__p)
                          {
                            v192 = __p;
                            operator delete(__p);
                          }
                          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v195);
                          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v196);
                          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v197);
                          mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)v198);
                          v17 = std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v201);
                          if (v31 != 6)
                          {
                            v13 = 1;
                            if (!*(_BYTE *)v7)
                              goto LABEL_28;
                            goto LABEL_27;
                          }
LABEL_26:
                          v13 = 0;
                          if (!*(_BYTE *)v7)
                          {
LABEL_28:
                            v19 = geo::codec::Allocator::instance((geo::codec::Allocator *)v17);
                            (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v19 + 40))(v19, v7, 0);
                            return v13 & 1;
                          }
LABEL_27:
                          v18 = geo::codec::Allocator::instance((geo::codec::Allocator *)v17);
                          v17 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v18 + 40))(v18, v7[5], 0);
                          goto LABEL_28;
                        }
                        v29 = (FILE *)*MEMORY[0x1E0C80C10];
                        v30 = 11528;
                      }
                      else
                      {
                        v29 = (FILE *)*MEMORY[0x1E0C80C10];
                        v30 = 11527;
                      }
                      fprintf(v29, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v30);
                      v31 = 6;
                      goto LABEL_51;
                    }
                    v20 = 11518;
                  }
                  else
                  {
                    v20 = 11517;
                  }
                }
                else
                {
                  v20 = 11506;
                }
LABEL_40:
                v25 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_41:
                fprintf(v25, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v20);
                v17 = std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v201);
                v13 = 0;
                if (!*(_BYTE *)v7)
                  goto LABEL_28;
                goto LABEL_27;
              }
              v15 = (FILE *)*MEMORY[0x1E0C80C10];
              v16 = 11504;
            }
            else
            {
              v15 = (FILE *)*MEMORY[0x1E0C80C10];
              v16 = 11500;
            }
          }
          else
          {
            v15 = (FILE *)*MEMORY[0x1E0C80C10];
            v16 = 11498;
          }
        }
        else
        {
          v15 = (FILE *)*MEMORY[0x1E0C80C10];
          v16 = 11495;
        }
      }
      else
      {
        v15 = (FILE *)*MEMORY[0x1E0C80C10];
        v16 = 11494;
      }
      v17 = (uint64_t *)fprintf(v15, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v16);
      goto LABEL_26;
    }
  }
LABEL_18:
  v13 = 1;
  return v13 & 1;
}

void sub_1886FEF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;

  std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::codec::Allocator>>::~vector[abi:ne180100](&a12);
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100](&a17);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a21);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
    v63 = a29;
    if (!a29)
    {
LABEL_3:
      v64 = a33;
      if (!a33)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v63 = a29;
    if (!a29)
      goto LABEL_3;
  }
  a30 = (uint64_t)v63;
  operator delete(v63);
  v64 = a33;
  if (!a33)
  {
LABEL_4:
    v65 = a37;
    if (!a37)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  a34 = (uint64_t)v64;
  operator delete(v64);
  v65 = a37;
  if (!a37)
  {
LABEL_5:
    v66 = a41;
    if (!a41)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  a38 = (uint64_t)v65;
  operator delete(v65);
  v66 = a41;
  if (!a41)
  {
LABEL_6:
    v67 = a45;
    if (!a45)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  a42 = (uint64_t)v66;
  operator delete(v66);
  v67 = a45;
  if (!a45)
  {
LABEL_7:
    v68 = a49;
    if (!a49)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  a46 = (uint64_t)v67;
  operator delete(v67);
  v68 = a49;
  if (!a49)
  {
LABEL_8:
    v69 = a53;
    if (!a53)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  a50 = (uint64_t)v68;
  operator delete(v68);
  v69 = a53;
  if (!a53)
  {
LABEL_9:
    v70 = a57;
    if (!a57)
    {
LABEL_20:
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a61);
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v61 - 256);
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v61 - 224);
      mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor(v61 - 192);
      std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v61 - 152));
      _Unwind_Resume(a1);
    }
LABEL_19:
    a58 = (uint64_t)v70;
    operator delete(v70);
    goto LABEL_20;
  }
LABEL_18:
  a54 = (uint64_t)v69;
  operator delete(v69);
  v70 = a57;
  if (!a57)
    goto LABEL_20;
  goto LABEL_19;
}

void sub_1886FF164(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_1886FF178(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_1886FF18C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 152));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readHillShadeRaster(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v12;
  uint64_t VarUint32;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  unsigned int v29;
  size_t __n;

  v2 = a1[1];
  if (!v2)
    return 1;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 158)
  {
    v4 = ++v5;
    if (v2 <= v5)
      return 1;
  }
  v6 = (_QWORD *)geo::codec::chapterAt((uint64_t)a1, v5, 158, *a2 + 1912);
  if (!v6)
    return 1;
  v7 = v6;
  LODWORD(__n) = 0;
  v8 = v6[6];
  if ((unint64_t)(v8 + 1) <= v6[7])
  {
    v12 = *(unsigned __int8 *)(v6[5] + v8);
    v6[6] = v8 + 1;
    if (!geo::codec::chapterReadVarUint32(v6, (unsigned int *)(*a2 + 3000)))
    {
      v9 = 1849;
      goto LABEL_19;
    }
    VarUint32 = geo::codec::chapterReadVarUint32(v7, (unsigned int *)&__n);
    if (!(_DWORD)VarUint32)
    {
      v9 = 1850;
      goto LABEL_19;
    }
    if ((_DWORD)__n)
    {
      v14 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
      v15 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 16))(v14, __n, 8);
      if (!v15)
      {
        v9 = 1854;
        goto LABEL_19;
      }
      v16 = __n;
      v17 = v7[6];
      if (v17 + (unint64_t)__n > v7[7])
      {
        v9 = 1855;
        goto LABEL_19;
      }
      v20 = v15;
      VarUint32 = (uint64_t)memcpy(v15, (const void *)(v7[5] + v17), __n);
      v7[6] += v16;
      v21 = *a2;
      *(_BYTE *)(v21 + 3004) = __n;
      *(_QWORD *)(v21 + 3008) = v20;
    }
    if ((v12 | 2) == 2)
    {
      v10 = 1;
      goto LABEL_20;
    }
    v29 = 0;
    if (geo::codec::chapterReadVarUint32(v7, &v29))
    {
      v22 = v7[6];
      if ((unint64_t)(v22 + 1) <= v7[7])
      {
        v23 = *(unsigned __int8 *)(v7[5] + v22);
        v7[6] = v22 + 1;
        VarUint32 = geo::codec::chapterReadVarUint32(v7, (unsigned int *)(*a2 + 2992));
        if ((_DWORD)VarUint32)
        {
          *(_BYTE *)(*a2 + 3016) = v23;
          v10 = 1;
          if (v23 > 5 || ((1 << v23) & 0x2A) == 0)
            goto LABEL_20;
          v24 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
          v25 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v24 + 16))(v24, *(unsigned int *)(*a2 + 2992), 8);
          v26 = *a2;
          *(_QWORD *)(*a2 + 2984) = v25;
          if (v25)
          {
            v27 = *(unsigned int *)(v26 + 2992);
            v28 = v7[6];
            if (v28 + v27 <= v7[7])
            {
              VarUint32 = (uint64_t)memcpy(v25, (const void *)(v7[5] + v28), v27);
              v7[6] += v27;
              goto LABEL_20;
            }
            v9 = 1886;
          }
          else
          {
            v9 = 1885;
          }
        }
        else
        {
          v9 = 1875;
        }
      }
      else
      {
        v9 = 1874;
      }
    }
    else
    {
      v9 = 1873;
    }
  }
  else
  {
    v9 = 1848;
  }
LABEL_19:
  VarUint32 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v9);
  v10 = 0;
LABEL_20:
  if (*(_BYTE *)v7)
  {
    v18 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
    VarUint32 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v18 + 40))(v18, v7[5], 0);
  }
  v19 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v19 + 40))(v19, v7, 0);
  return v10;
}

uint64_t geo::codec::_readRegionMetadata(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  geo::codec::Allocator *v6;
  geo::codec::Allocator *v7;
  unsigned int v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64x2_t *v13;
  uint64x2_t *v14;
  uint64x2_t *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  char v21;
  int v22;
  _QWORD **v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64x2_t **v35;
  __int128 v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  char v41;
  FILE *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  void *v53;
  void *v54;
  unint64_t v55;
  uint64x2_t *v56;
  __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  int v74;
  int v75;
  void *__p[2];
  __int128 v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;

  v2 = a1[1];
  if (!v2)
    goto LABEL_58;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 168)
  {
    v4 = ++v5;
    if (v2 <= v5)
      goto LABEL_58;
  }
  v6 = (geo::codec::Allocator *)geo::codec::chapterAt((uint64_t)a1, v5, 168, *(_QWORD *)a2 + 1912);
  if (!v6)
  {
LABEL_58:
    v41 = 1;
    return v41 & 1;
  }
  v7 = v6;
  v87 = 0;
  v86 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = geo::codec::Allocator::instance(v6);
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v87 + 1) & 1) == 0)
  {
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 11873;
LABEL_64:
    v28 = fprintf(v43, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v44);
    goto LABEL_65;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v87) & 1) == 0)
  {
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 11874;
    goto LABEL_64;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v86 + 1) & 1) == 0)
  {
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 11876;
    goto LABEL_64;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v86) & 1) == 0)
  {
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 11878;
    goto LABEL_64;
  }
  v8 = v86;
  if (!(_DWORD)v86)
    goto LABEL_81;
  v9 = (char *)operator new(24 * v86);
  v10 = 0;
  v83 = v9;
  v84 = v9;
  v85 = &v9[24 * v8];
  v78 = 0;
  while (1)
  {
    if ((geo::codec::chapterReadVarUint32(v7, &v78) & 1) == 0)
    {
      v28 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11884);
      goto LABEL_65;
    }
    *(_OWORD *)__p = 0u;
    v77 = 0u;
    v11 = v78;
    if (v78)
    {
      v12 = 8 * v78;
      v13 = (uint64x2_t *)operator new(v12);
      v14 = (uint64x2_t *)((char *)v13 + 8 * v11);
      bzero(v13, 8 * v11);
      v15 = (uint64x2_t *)((char *)v13 + v12);
    }
    else
    {
      v13 = 0;
      v15 = 0;
      v14 = 0;
    }
    v17 = v87;
    v16 = BYTE4(v87);
    v88 = 0;
    if (geo::codec::chapterReadVarUint32(v7, &v88)
      && (v18 = v88, v19 = *((_QWORD *)v7 + 6), v19 + (unint64_t)v88 <= *((_QWORD *)v7 + 7))
      && (v20 = (unsigned __int8 *)(*((_QWORD *)v7 + 5) + v19),
          *((_QWORD *)v7 + 6) = v19 + v88,
          !mgcl::ints::IntDecompressor<unsigned long long>::decompress((uint64_t *)__p, v20, v18, v16, v17, v11, v13)))
    {
      if (v9 >= v85)
      {
        v30 = (char *)v83;
        v31 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (_BYTE *)v83) >> 3);
        v32 = v31 + 1;
        if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((v85 - (_BYTE *)v83) >> 3) > v32)
          v32 = 0x5555555555555556 * ((v85 - (_BYTE *)v83) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v85 - (_BYTE *)v83) >> 3) >= 0x555555555555555)
          v33 = 0xAAAAAAAAAAAAAAALL;
        else
          v33 = v32;
        if (v33 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v34 = (char *)operator new(24 * v33);
        v35 = (uint64x2_t **)&v34[24 * v31];
        *v35 = v13;
        v35[1] = v15;
        v35[2] = v14;
        v29 = (char *)(v35 + 3);
        if (v9 == v30)
        {
          v83 = &v34[24 * v31];
          v84 = (char *)(v35 + 3);
          v85 = &v34[24 * v33];
        }
        else
        {
          do
          {
            v36 = *(_OWORD *)(v9 - 24);
            v9 -= 24;
            *(_OWORD *)(v35 - 3) = v36;
            v35 -= 3;
            v35[2] = (uint64x2_t *)*((_QWORD *)v9 + 2);
            *(_QWORD *)v9 = 0;
            *((_QWORD *)v9 + 1) = 0;
            *((_QWORD *)v9 + 2) = 0;
          }
          while (v9 != v30);
          v9 = (char *)v83;
          v37 = v84;
          v83 = v35;
          v84 = v29;
          v85 = &v34[24 * v33];
          if (v37 != v9)
          {
            v38 = v37;
            do
            {
              v40 = (void *)*((_QWORD *)v38 - 3);
              v38 -= 24;
              v39 = v40;
              if (v40)
              {
                *((_QWORD *)v37 - 2) = v39;
                operator delete(v39);
              }
              v37 = v38;
            }
            while (v38 != v9);
          }
        }
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_QWORD *)v9 = v13;
        *((_QWORD *)v9 + 1) = v15;
        v29 = v9 + 24;
        *((_QWORD *)v9 + 2) = v14;
      }
      v22 = 0;
      v84 = v29;
      v21 = 1;
      v9 = v29;
      v23 = (_QWORD **)*((_QWORD *)&v77 + 1);
      *((_QWORD *)&v77 + 1) = 0;
      if (v23)
      {
LABEL_23:
        v24 = *v23;
        *v23 = 0;
        if (v24)
        {
          v25 = (_QWORD *)*v24;
          *v24 = 0;
          if (v25)
          {
            v26 = (void *)v25[13];
            if (v26)
            {
              v25[14] = v26;
              operator delete(v26);
            }
            v27 = (void *)v25[10];
            if (v27)
            {
              v25[11] = v27;
              operator delete(v27);
            }
            MEMORY[0x18D76437C](v25, 0x1070C40ADA6D0DELL);
          }
          MEMORY[0x18D76437C](v24, 0x20C4093837F09);
        }
        MEMORY[0x18D76437C](v23, 0x20C4093837F09);
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11887);
      if (v13)
        operator delete(v13);
      v21 = 0;
      v22 = 6;
      v23 = (_QWORD **)*((_QWORD *)&v77 + 1);
      *((_QWORD *)&v77 + 1) = 0;
      if (v23)
        goto LABEL_23;
    }
    v28 = (uint64_t)__p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v21 & 1) == 0)
      break;
    if (++v10 >= (unint64_t)v86)
      goto LABEL_81;
  }
  if (v22)
    goto LABEL_65;
LABEL_81:
  v55 = HIDWORD(v86);
  if (HIDWORD(v86))
  {
    v56 = (uint64x2_t *)operator new(8 * HIDWORD(v86));
    bzero(v56, 8 * v55);
    v57 = &v56->i8[8 * v55];
  }
  else
  {
    v55 = 0;
    v56 = 0;
    v57 = 0;
  }
  if (v55 != (v57 - (__int8 *)v56) >> 3)
  {
    v28 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11895);
    v74 = 6;
    goto LABEL_107;
  }
  *(_OWORD *)__p = 0u;
  v77 = 0u;
  if (!geo::codec::decodeIntCompressorArray<unsigned long long>(v7, (uint64_t *)__p, SBYTE4(v87), v87, v55, v56))
  {
    v75 = 11897;
LABEL_104:
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v75);
    v74 = 6;
    goto LABEL_106;
  }
  std::vector<GeoCodecsMultiPolygonFeature,geo::StdAllocator<GeoCodecsMultiPolygonFeature,geo::codec::Allocator>>::resize((uint64_t)&v79, HIDWORD(v86));
  v58 = v79;
  v59 = (v80 - v79) >> 7;
  if (v59 != HIDWORD(v86))
  {
    v75 = 11900;
    goto LABEL_104;
  }
  if (HIDWORD(v86))
  {
    v60 = v86;
    if ((_DWORD)v86)
    {
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = v83;
      v66 = (char *)v83 + 48;
      v67 = (char *)v83 + 24;
      do
      {
        v68 = 0;
        v69 = v56->i64[v61];
        v70 = v58 + (v61 << 7);
        do
        {
          if ((v69 & (1 << v68)) != 0)
          {
            switch(v68)
            {
              case 0:
                v71 = v64++;
                v72 = v65;
                v73 = (_QWORD *)(v58 + (v61 << 7));
                goto LABEL_93;
              case 1:
                v71 = v63++;
                v72 = v67;
                v73 = (_QWORD *)(v70 + 8);
LABEL_93:
                *v73 = *(_QWORD *)(*v72 + 8 * v71);
                break;
              case 2:
                v71 = v62++;
                v72 = v66;
                v73 = (_QWORD *)(v70 + 16);
                goto LABEL_93;
            }
          }
          ++v68;
        }
        while (v60 != v68);
        ++v61;
      }
      while (v61 != v59);
    }
  }
  v74 = 0;
LABEL_106:
  v28 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)__p);
LABEL_107:
  if (v56)
    operator delete(v56);
  if (v74 == 6)
  {
LABEL_65:
    v41 = 0;
    if (!*(_BYTE *)v7)
      goto LABEL_67;
    goto LABEL_66;
  }
  v28 = (uint64_t)std::vector<GeoCodecsMultiPolygonFeature,geo::StdAllocator<GeoCodecsMultiPolygonFeature,geo::codec::Allocator>>::operator=[abi:ne180100]((uint64_t *)(*(_QWORD *)a2 + 3488), (uint64_t)&v79);
  v41 = 1;
  if (*(_BYTE *)v7)
  {
LABEL_66:
    v45 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
    v28 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v45 + 40))(v45, *((_QWORD *)v7 + 5), 0);
  }
LABEL_67:
  v46 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
  (*(void (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v46 + 40))(v46, v7, 0);
  v47 = v79;
  if (v79)
  {
    v48 = v80;
    v49 = v79;
    if (v80 != v79)
    {
      do
        GeoCodecsMultiPolygonFeature::~GeoCodecsMultiPolygonFeature((GeoCodecsMultiPolygonFeature *)(v48 - 128));
      while (v48 != v47);
      v49 = v79;
    }
    v80 = v47;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v82 + 40))(v82, v49, v81 - v49);
  }
  v50 = (char *)v83;
  if (v83)
  {
    v51 = v84;
    if (v84 != v83)
    {
      v52 = v84;
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 3);
        v52 -= 24;
        v53 = v54;
        if (v54)
        {
          *((_QWORD *)v51 - 2) = v53;
          operator delete(v53);
        }
        v51 = v52;
      }
      while (v52 != v50);
    }
    operator delete(v50);
  }
  return v41 & 1;
}

void sub_1886FFBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::vector<GeoCodecsMultiPolygonFeature,geo::StdAllocator<GeoCodecsMultiPolygonFeature,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  std::vector<std::vector<unsigned short>>::~vector[abi:ne180100]((void **)va1);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readRunningTracks(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  uint64_t v13;
  FILE *v14;
  int v15;
  char v16;
  uint64_t VarUint32;
  uint64_t v18;
  uint64_t v19;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  size_t v28;
  size_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  FILE *v33;
  int v34;
  int v35;
  size_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  _BYTE *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  FILE *v60;
  int v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int v66;
  unint64_t v67;
  FILE *v68;
  int v69;
  FILE *v70;
  int v71;
  int v72;
  int *v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t *v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t *v80;
  int *v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int *v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  int v103;
  int v104;
  int *v105;
  uint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  unsigned int v113;
  uint64_t v114[4];
  int *v115[3];
  geo::codec::Allocator *v116;
  int *v117;
  uint64_t v118;
  uint64_t v119;
  geo::codec::Allocator *v120;
  void *v121;
  void *v122;
  char *v123;
  uint64_t v124;
  void *v125;
  void *v126;
  char *v127;
  uint64_t v128;
  _OWORD v129[2];
  unint64_t v130;
  int *v131;
  int *v132;
  int *v133[4];
  int *v134[4];
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  unsigned int v139[3];
  char *v140;
  char *v141;
  uint64_t v142;
  void *v143;
  void *v144;
  char *v145;
  uint64_t v146;
  _OWORD v147[2];
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  _OWORD v152[2];
  __int128 *v153;
  __int128 *v154;
  int v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  const char *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;

  v4 = *a2;
  v5 = a1[1];
  if (!v5)
  {
LABEL_5:
    v8 = 0;
    v159 = "ChapterLineWidths2";
    v160 = v4;
    v9 = (std::__shared_weak_count *)a2[1];
    v161 = v9;
    if (!v9)
      goto LABEL_10;
    goto LABEL_8;
  }
  v6 = 0;
  v7 = 0;
  while (*(_WORD *)(*a1 + 16 * v6) != 157)
  {
    v6 = ++v7;
    if (v5 <= v7)
      goto LABEL_5;
  }
  v8 = geo::codec::chapterAt((uint64_t)a1, v7, 157, v4 + 1912);
  v4 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  v159 = "ChapterLineWidths2";
  v160 = v4;
  v161 = v9;
  if (v9)
  {
LABEL_8:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
LABEL_10:
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v12.__d_.__rep_;
  if (!v8)
  {
    v16 = 1;
    *(_DWORD *)(*a2 + 3736) = 1;
    goto LABEL_25;
  }
  v158 = 0;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v8, (unsigned int *)&v158 + 1) & 1) == 0)
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 11242;
    goto LABEL_20;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v8, (unsigned int *)&v158) & 1) == 0)
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 11243;
    goto LABEL_20;
  }
  v157 = 0;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v8, &v157) & 1) == 0)
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 11246;
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v8 + 48);
  if ((unint64_t)(v13 + 8) > *(_QWORD *)(v8 + 56))
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 11249;
LABEL_20:
    VarUint32 = fprintf(v14, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v15);
    goto LABEL_21;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + v13);
  *(_QWORD *)(v8 + 48) = v13 + 8;
  if (*(_DWORD *)(v8 + 64) >= 4u)
  {
    LODWORD(v153) = 0;
    if ((geo::codec::chapterReadVarUint32((_QWORD *)v8, (unsigned int *)&v153) & 1) == 0)
    {
      v15 = 11253;
      goto LABEL_38;
    }
    v25 = (int)v153;
    if (!(_DWORD)v153)
    {
      v15 = 11254;
      goto LABEL_38;
    }
    v26 = 2 * (_DWORD)v153;
    LODWORD(v153) = 2 * (_DWORD)v153;
    if ((~v25 & 3) == 0)
    {
      v15 = 11260;
LABEL_38:
      v14 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_20;
    }
    *(_DWORD *)(*a2 + 3736) = v26;
  }
  v156 = 0;
  VarUint32 = geo::codec::chapterReadVarUint32((_QWORD *)v8, (unsigned int *)&v156);
  if ((VarUint32 & 1) == 0)
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 11266;
    goto LABEL_20;
  }
  if (v156)
  {
    v155 = 0;
    if ((geo::codec::chapterReadVarUint32((_QWORD *)v8, (unsigned int *)&v155) & 1) == 0)
    {
      v14 = (FILE *)*MEMORY[0x1E0C80C10];
      v15 = 11272;
      goto LABEL_20;
    }
    std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::vector((geo::codec::Allocator **)&v153, v156);
    memset(v152, 0, sizeof(v152));
    v27 = v156;
    v149 = 0;
    v150 = 0;
    v148 = 0;
    if (v156)
    {
      v28 = 8 * v156;
      v148 = (char *)operator new(v28);
      v150 = &v148[8 * v27];
      bzero(v148, v28);
      v149 = v150;
    }
    v151 = 0;
    if ((geo::codec::decodeIntCompressorArray<unsigned long long>((_QWORD *)v8, (uint64_t *)v152, SBYTE4(v158), v158, (uint64_t)&v148) & 1) == 0)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11278);
      v35 = 2;
      goto LABEL_89;
    }
    memset(v147, 0, sizeof(v147));
    v29 = v156;
    v144 = 0;
    v145 = 0;
    v143 = 0;
    if (v156)
    {
      v30 = (char *)operator new(v156);
      v31 = &v30[v29];
      v143 = v30;
      v145 = &v30[v29];
      bzero(v30, v29);
      v144 = v31;
    }
    v146 = 0;
    if ((geo::codec::decodeIntCompressorArray<unsigned char>((_QWORD *)v8, (uint64_t *)v147, SBYTE4(v158), v158, (uint64_t)&v143) & 1) == 0)
    {
      v33 = (FILE *)*MEMORY[0x1E0C80C10];
      v34 = 11283;
      goto LABEL_59;
    }
    if (*(_DWORD *)(v8 + 64) <= 3u)
    {
      v139[1] = 0;
      if ((geo::codec::chapterReadVarUint32((_QWORD *)v8, &v139[1]) & 1) == 0)
      {
        v33 = (FILE *)*MEMORY[0x1E0C80C10];
        v34 = 11287;
        goto LABEL_59;
      }
      v32 = *(_QWORD *)(v8 + 48) + v139[1];
      if (v32 > *(_QWORD *)(v8 + 56))
      {
        v33 = (FILE *)*MEMORY[0x1E0C80C10];
        v34 = 11290;
LABEL_59:
        fprintf(v33, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v34);
        v35 = 2;
LABEL_86:
        if (v143)
        {
          v144 = v143;
          operator delete(v143);
        }
        mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)v147);
LABEL_89:
        if (v148)
        {
          v149 = v148;
          operator delete(v148);
        }
        mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v152);
        VarUint32 = (uint64_t)std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v153);
        if (v35)
        {
LABEL_21:
          v16 = 0;
          if (!a1)
            goto LABEL_25;
          goto LABEL_22;
        }
        goto LABEL_92;
      }
      *(_QWORD *)(v8 + 48) = v32;
    }
    v36 = v155;
    v140 = 0;
    v141 = 0;
    *(_QWORD *)&v139[1] = 0;
    if (v155)
    {
      v37 = (char *)operator new(v155);
      v38 = &v37[v36];
      *(_QWORD *)&v139[1] = v37;
      v141 = &v37[v36];
      bzero(v37, v36);
      v140 = v38;
    }
    v142 = 0;
    if (!geo::codec::decodeIntCompressorArray<unsigned char>((_QWORD *)v8, (uint64_t *)v147, SBYTE4(v158), v158, (uint64_t)&v139[1]))
    {
      v60 = (FILE *)*MEMORY[0x1E0C80C10];
      v61 = 11294;
      goto LABEL_84;
    }
    if (v156)
    {
      v39 = 0;
      v41 = *(_QWORD *)(v8 + 48);
      v40 = *(_QWORD *)(v8 + 56);
      v42 = (uint64_t *)v153;
      v43 = (uint64_t *)v148;
      v44 = v143;
      v45 = 32 * v156;
      v46 = v157;
      while (1)
      {
        v47 = v41 + v39;
        v48 = v41 + v39 + 8;
        if (v48 > v40)
        {
          v61 = 11301;
          goto LABEL_83;
        }
        v49 = *(_QWORD *)(v8 + 40);
        v50 = *(_QWORD *)(v47 + v49);
        *(_QWORD *)(v8 + 48) = v48;
        if (v47 + 16 > v40)
        {
          v61 = 11302;
          goto LABEL_83;
        }
        v51 = v41 + v39 + v49;
        v52 = *(_QWORD *)(v51 + 8);
        *(_QWORD *)(v8 + 48) = v47 + 16;
        v53 = v41 + v39 + 24;
        if (v53 > v40)
        {
          v61 = 11303;
          goto LABEL_83;
        }
        v54 = *(_QWORD *)(v51 + 16);
        *(_QWORD *)(v8 + 48) = v53;
        v55 = v41 + v39 + 32;
        if (v55 > v40)
          break;
        v56 = *(_QWORD *)(v49 + v41 + v39 + 24);
        *(_QWORD *)(v8 + 48) = v55;
        v57 = *v43++;
        *v42 = v57;
        LOBYTE(v57) = *v44++;
        *((_BYTE *)v42 + 8) = v57;
        v42[2] = v50;
        v42[3] = v54;
        v42[4] = v52;
        v42[5] = v56;
        *((_BYTE *)v42 + 80) = v46;
        v42[11] = v24;
        v39 += 32;
        v42 += 16;
        if (v45 == v39)
          goto LABEL_72;
      }
      v61 = 11304;
LABEL_83:
      v60 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_84:
      fprintf(v60, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v61);
      v35 = 2;
      v62 = *(char **)&v139[1];
      if (!*(_QWORD *)&v139[1])
        goto LABEL_86;
LABEL_85:
      v140 = v62;
      operator delete(v62);
      goto LABEL_86;
    }
LABEL_72:
    v139[0] = 0;
    if ((geo::codec::chapterReadVarUint32((_QWORD *)v8, v139) & 1) == 0)
    {
      v60 = (FILE *)*MEMORY[0x1E0C80C10];
      v61 = 11315;
      goto LABEL_84;
    }
    mgcl::polyline::Decoder::Decoder((mgcl::polyline::Decoder *)&v138);
    v135 = 0;
    v136 = 0;
    v137 = 0;
    mgcl::polyline::Decoder::getPositionsInfo(*(_QWORD *)(v8 + 40) + *(_QWORD *)(v8 + 48), v139[0], (uint64_t)&v135);
    v58 = v155;
    if (v155 != (_DWORD)v137)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11320);
      v35 = 2;
      goto LABEL_168;
    }
    std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)v134, 3 * SHIDWORD(v136));
    std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)v133, v58);
    std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v131, SHIDWORD(v137));
    v130 = 0;
    v59 = mgcl::polyline::Decoder::decompressPositions(&v138, (const unsigned __int8 *)(*(_QWORD *)(v8 + 40) + *(_QWORD *)(v8 + 48)), v139[0], &v130, v134[0], v133[0], v131);
    if ((_DWORD)v59)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11331);
      v35 = 2;
LABEL_167:
      std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v131);
      std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)v133);
      std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)v134);
LABEL_168:
      mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)&v138);
      v62 = *(char **)&v139[1];
      if (!*(_QWORD *)&v139[1])
        goto LABEL_86;
      goto LABEL_85;
    }
    *(_QWORD *)(v8 + 48) += v139[0];
    memset(v129, 0, sizeof(v129));
    v63 = v155;
    v126 = 0;
    v127 = 0;
    v125 = 0;
    if (v155)
    {
      v64 = (char *)operator new(4 * v155);
      v65 = &v64[4 * v63];
      v125 = v64;
      v127 = v65;
      bzero(v64, 4 * v63);
      v126 = v65;
    }
    v128 = 0;
    if (*(_DWORD *)(v8 + 64) < 2u)
    {
      v66 = 0;
    }
    else
    {
      v59 = geo::codec::decodeIntCompressorArray<unsigned int>((_QWORD *)v8, (uint64_t *)v129, SBYTE4(v158), v158, (uint64_t)&v125);
      if (!(_DWORD)v59)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11340);
        v35 = 2;
LABEL_164:
        if (v125)
        {
          v126 = v125;
          operator delete(v125);
        }
        mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v129);
        goto LABEL_167;
      }
      v63 = v155;
      v66 = 1;
    }
    v121 = 0;
    v122 = 0;
    v123 = 0;
    if ((_DWORD)v63)
    {
      v121 = operator new(4 * v63);
      v123 = (char *)v121 + 4 * v63;
      bzero(v121, 4 * v63);
      v122 = v123;
    }
    v124 = 0;
    if (*(_DWORD *)(v8 + 64) >= 3u)
    {
      v59 = geo::codec::decodeIntCompressorArray<unsigned int>((_QWORD *)v8, (uint64_t *)v129, SBYTE4(v158), v158, (uint64_t)&v121);
      if ((v59 & 1) == 0)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11346);
        v35 = 2;
        goto LABEL_162;
      }
      v66 |= 2u;
    }
    v117 = 0;
    v118 = 0;
    v119 = 0;
    v120 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)v59);
    memset(v115, 0, sizeof(v115));
    v116 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v120);
    memset(v114, 0, 24);
    v114[3] = geo::codec::Allocator::instance(v116);
    if (*(_DWORD *)(v8 + 64) >= 4u)
    {
      v113 = 0;
      if ((geo::codec::chapterReadVarUint32((_QWORD *)v8, &v113) & 1) == 0)
      {
        v70 = (FILE *)*MEMORY[0x1E0C80C10];
        v71 = 11355;
LABEL_159:
        fprintf(v70, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v71);
        goto LABEL_160;
      }
      mgcl::polyline::Decoder::Decoder((mgcl::polyline::Decoder *)&v112);
      v109 = 0;
      v110 = 0;
      v111 = 0;
      mgcl::polyline::Decoder::getPositionsInfo(*(_QWORD *)(v8 + 40) + *(_QWORD *)(v8 + 48), v113, (uint64_t)&v109);
      v67 = v156;
      if (v156 == (_DWORD)v111)
      {
        if (v156 == HIDWORD(v111))
        {
          if (HIDWORD(v110) == 4 * v156)
          {
            std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::resize(&v117, 12 * v156);
            std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::resize(v115, v67);
            std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::resize(v114, v67);
            v108 = 0;
            if (mgcl::polyline::Decoder::decompressPositions(&v112, (const unsigned __int8 *)(*(_QWORD *)(v8 + 40) + *(_QWORD *)(v8 + 48)), v113, &v108, v117, v115[0], (int *)v114[0]))
            {
              v68 = (FILE *)*MEMORY[0x1E0C80C10];
              v69 = 11373;
LABEL_119:
              fprintf(v68, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v69);
              mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)&v112);
LABEL_160:
              v35 = 2;
LABEL_161:
              std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](v114);
              std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)v115);
              std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v117);
LABEL_162:
              if (v121)
              {
                v122 = v121;
                operator delete(v121);
              }
              goto LABEL_164;
            }
            *(_QWORD *)(v8 + 48) += v113;
            v66 |= 4u;
            mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)&v112);
            goto LABEL_121;
          }
          v69 = 11362;
        }
        else
        {
          v69 = 11361;
        }
      }
      else
      {
        v69 = 11360;
      }
      v68 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_119;
    }
LABEL_121:
    v72 = v156;
    v73 = v131;
    if (v156 == v132 - v131)
    {
      if (v155 == v133[1] - v133[0])
      {
        if (v132 != v131)
        {
          v74 = 0;
          v75 = 1;
          do
          {
            v76 = (uint64_t *)&v153[8 * v74];
            *((_DWORD *)v76 + 3) = v66;
            std::vector<GeoCodecsRunningTrackLane,geo::StdAllocator<GeoCodecsRunningTrackLane,geo::codec::Allocator>>::resize((uint64_t)(v76 + 12), v73[v74]);
            v74 = v75;
            v73 = v131;
            ++v75;
          }
          while (v74 < v132 - v131);
          v72 = v156;
        }
        if ((v66 & 4) != 0 && v72)
        {
          v77 = 0;
          v78 = 11;
          v79 = 3;
          while (v115[0][v77] == 4)
          {
            v80 = (uint64_t *)&v153[v79];
            std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::resize((uint64_t)&v153[v79], 4uLL);
            v81 = v117;
            v82 = (v118 - (uint64_t)v117) >> 2;
            v83 = v78 - 9;
            if (v82 <= v83)
              goto LABEL_151;
            v84 = v117[v83];
            v85 = *v80;
            *(_QWORD *)v85 = *(_QWORD *)&v117[v78 - 11];
            *(_DWORD *)(v85 + 8) = v84;
            if (v82 <= v78 - 6
              || (v86 = *(_QWORD *)&v81[v78 - 7],
                  *(_DWORD *)(v85 + 12) = v81[v78 - 8],
                  *(_QWORD *)(v85 + 16) = v86,
                  v87 = v78 - 3,
                  v82 <= v87)
              || (v88 = v81[v87],
                  *(_QWORD *)(v85 + 24) = *(_QWORD *)&v81[v78 - 5],
                  *(_DWORD *)(v85 + 32) = v88,
                  v82 <= v78))
            {
LABEL_151:
              v70 = (FILE *)*MEMORY[0x1E0C80C10];
              v71 = 11395;
              goto LABEL_159;
            }
            v89 = v81[v78];
            *(_QWORD *)(v85 + 36) = *(_QWORD *)&v81[v78 - 2];
            *(_DWORD *)(v85 + 44) = v89;
            ++v77;
            v79 += 8;
            v78 += 12;
            if (v77 >= v156)
              goto LABEL_136;
          }
          v70 = (FILE *)*MEMORY[0x1E0C80C10];
          v71 = 11392;
        }
        else
        {
LABEL_136:
          if (!v155)
          {
LABEL_153:
            v106 = (uint64_t *)(*a2 + 3744);
            if (v106 != (uint64_t *)&v153)
              std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<GeoCodecsRunningTrack*,GeoCodecsRunningTrack*>(v106, v153, v154, ((char *)v154 - (char *)v153) >> 7);
            v35 = 0;
            goto LABEL_161;
          }
          v90 = 0;
          v107 = 0;
          v91 = 0;
          while (1)
          {
            if (HIDWORD(v107) >= v156)
            {
              v70 = (FILE *)*MEMORY[0x1E0C80C10];
              v71 = 11408;
              goto LABEL_159;
            }
            v94 = *(_QWORD *)&v153[8 * (unint64_t)HIDWORD(v107) + 6];
            if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)&v153[8 * (unint64_t)HIDWORD(v107) + 6] + 1) - v94) >> 4) <= v107)
            {
              v70 = (FILE *)*MEMORY[0x1E0C80C10];
              v71 = 11410;
              goto LABEL_159;
            }
            v95 = v94 + 48 * v107;
            *(_BYTE *)v95 = *(_BYTE *)(*(_QWORD *)&v139[1] + v90);
            *(_DWORD *)(v95 + 40) = *((_DWORD *)v125 + v90);
            *(_DWORD *)(v95 + 44) = *((_DWORD *)v121 + v90);
            v96 = v133[0][v90];
            v97 = (_QWORD *)(v95 + 8);
            std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::resize(v95 + 8, v96);
            if ((_DWORD)v96)
              break;
LABEL_140:
            v92 = HIDWORD(v107);
            if ((int)v107 + 1 < v131[HIDWORD(v107)])
            {
              v93 = v107 + 1;
            }
            else
            {
              v92 = HIDWORD(v107) + 1;
              v93 = 0;
            }
            v107 = __PAIR64__(v92, v93);
            if (++v90 >= (unint64_t)v155)
              goto LABEL_153;
          }
          v98 = 0;
          v99 = v134[0];
          v100 = v134[1] - v134[0];
          while (1)
          {
            v101 = (v91 + 2);
            if (v100 <= v101)
              break;
            v102 = v99[v91];
            v103 = v99[v91 + 1];
            v91 += 3;
            v104 = v99[v101];
            v105 = (int *)(*v97 + v98);
            *v105 = v102;
            v105[1] = v103;
            v105[2] = v104;
            v98 += 12;
            if (12 * v96 == v98)
              goto LABEL_140;
          }
          v70 = (FILE *)*MEMORY[0x1E0C80C10];
          v71 = 11420;
        }
      }
      else
      {
        v70 = (FILE *)*MEMORY[0x1E0C80C10];
        v71 = 11382;
      }
    }
    else
    {
      v70 = (FILE *)*MEMORY[0x1E0C80C10];
      v71 = 11381;
    }
    goto LABEL_159;
  }
  if (*(_DWORD *)(v8 + 64) <= 3u)
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 11268;
    goto LABEL_20;
  }
LABEL_92:
  v16 = 1;
  if (!a1)
    goto LABEL_25;
LABEL_22:
  if (*(_BYTE *)v8)
  {
    v18 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
    VarUint32 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v18 + 40))(v18, *(_QWORD *)(v8 + 40), 0);
  }
  v19 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v19 + 40))(v19, v8, 0);
LABEL_25:
  v20 = std::chrono::steady_clock::now().__d_.__rep_;
  *(_QWORD *)&v152[0] = "ChapterLineWidths2";
  v153 = v152;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v4 + 1912, (uint64_t *)v152, (uint64_t)&std::piecewise_construct, (uint64_t **)&v153)+ 4) = (double)((v20 - v12.__d_.__rep_) / 1000) * 0.001;
  if (v9)
  {
    v21 = (unint64_t *)&v9->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v16 & 1;
}

void sub_188700AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  uint64_t a66;
  char a69;
  uint64_t v69;
  void *v71;

  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a19);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a23);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a27);
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a39);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a44);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a48);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a52);
  mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)&a59);
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&a69);
  v71 = *(void **)(v69 - 256);
  if (v71)
  {
    *(_QWORD *)(v69 - 248) = v71;
    operator delete(v71);
  }
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v69 - 224);
  std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v69 - 192));
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v69 - 136));
  _Unwind_Resume(a1);
}

void sub_188700C30(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_188700C44(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_188700C58(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_188700C70(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readLiveFeatures(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  unint64_t v13;
  FILE *v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  geo::codec::Allocator *v22;
  uint64_t v23;
  uint64_t v24;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t VarUint32;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64x2_t *v35;
  _OWORD v36[2];
  int v37;
  unsigned int v38;
  int v39;
  const char *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  const char *v44;

  v2 = a1[1];
  if (!v2)
    return 1;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 159)
  {
    v4 = ++v5;
    if (v2 <= v5)
      return 1;
  }
  v6 = geo::codec::chapterAt((uint64_t)a1, v5, 159, *a2 + 1912);
  if (!v6)
    return 1;
  v7 = (_QWORD *)v6;
  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v40 = "ChapterLiveFeatures";
  v41 = v9;
  v42 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v12.__d_.__rep_;
  LODWORD(v44) = 0;
  v39 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v44) & 1) == 0)
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 11685;
    goto LABEL_18;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v39) & 1) == 0)
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 11686;
    goto LABEL_18;
  }
  v13 = v7[6] + 4;
  if (v13 > v7[7])
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 11689;
    goto LABEL_18;
  }
  v7[6] = v13;
  v38 = 0;
  if (!geo::codec::chapterReadVarUint32(v7, &v38))
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 11692;
    goto LABEL_18;
  }
  if (!v38)
    goto LABEL_21;
  v28 = 0;
  LODWORD(v29) = 0;
  do
  {
    LODWORD(v36[0]) = 0;
    v37 = 0;
    if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)v36) & 1) == 0)
    {
      v15 = 11700;
      goto LABEL_43;
    }
    if (!geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v37))
    {
      v15 = 11701;
      goto LABEL_43;
    }
    v29 = (v37 + v29);
    ++v28;
  }
  while (v28 < v38);
  if (!(_DWORD)v29)
    goto LABEL_21;
  *(_DWORD *)(*a2 + 608) = v29;
  v37 = 0;
  VarUint32 = geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v37);
  if ((VarUint32 & 1) == 0)
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 11713;
LABEL_18:
    v18 = fprintf(v14, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v15);
    v19 = 0;
    if (!*(_BYTE *)v7)
      goto LABEL_20;
    goto LABEL_19;
  }
  v31 = v7[6];
  v32 = v31 + v37;
  if (v32 > v7[7])
  {
    v15 = 11716;
LABEL_43:
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_18;
  }
  v33 = v7[5];
  v7[6] = v32;
  v34 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
  v35 = (uint64x2_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, 8 * v29, 8);
  *(_QWORD *)(*a2 + 600) = v35;
  if (!v35)
  {
    v15 = 11719;
    goto LABEL_43;
  }
  memset(v36, 0, sizeof(v36));
  if (mgcl::ints::IntDecompressor<unsigned long long>::decompress((uint64_t *)v36, (unsigned __int8 *)(v33 + v31), v37, (char)v44, v39, v29, v35))
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11722);
    v18 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v36);
    v19 = 0;
    if (!*(_BYTE *)v7)
      goto LABEL_20;
LABEL_19:
    v20 = geo::codec::Allocator::instance((geo::codec::Allocator *)v18);
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 40))(v20, v7[5], 0);
    goto LABEL_20;
  }
  v18 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v36);
  v19 = 1;
  if (*(_BYTE *)v7)
    goto LABEL_19;
LABEL_20:
  v21 = geo::codec::Allocator::instance((geo::codec::Allocator *)v18);
  v22 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v21 + 40))(v21, v7, 0);
  if ((v19 & 1) != 0)
  {
LABEL_21:
    v16 = 1;
    goto LABEL_25;
  }
  v23 = *a2;
  *(_DWORD *)(v23 + 608) = 0;
  if (*(_QWORD *)(v23 + 600))
  {
    v24 = geo::codec::Allocator::instance(v22);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 40))(v24, *(_QWORD *)(*a2 + 600), 0);
    v16 = 0;
    *(_QWORD *)(*a2 + 600) = 0;
  }
  else
  {
    v16 = 0;
  }
LABEL_25:
  v25 = std::chrono::steady_clock::now().__d_.__rep_;
  v44 = "ChapterLiveFeatures";
  *(_QWORD *)&v36[0] = &v44;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)&v44, (uint64_t)&std::piecewise_construct, (uint64_t **)v36)+ 4) = (double)((v25 - v12.__d_.__rep_) / 1000) * 0.001;
  if (v8)
  {
    v26 = (unint64_t *)&v8->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v16;
}

void sub_1887010A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va1);
  _Unwind_Resume(a1);
}

void sub_1887010C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

void sub_1887010D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

void sub_1887010E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

void sub_188701100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readPOIUpdates(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  FILE *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;

  v2 = a1[1];
  if (!v2)
    return 1;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 166)
  {
    v4 = ++v5;
    if (v2 <= v5)
      return 1;
  }
  v6 = (_QWORD *)geo::codec::chapterAt((uint64_t)a1, v5, 166, *a2 + 1912);
  if (!v6)
    return 1;
  v7 = v6;
  v49 = 0;
  v48 = 0;
  if ((geo::codec::chapterReadVarInt64(v6, &v49) & 1) == 0)
  {
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = 12311;
LABEL_67:
    v8 = fprintf(v24, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v25);
    v22 = 0;
    goto LABEL_68;
  }
  v8 = geo::codec::chapterReadVarUint32(v7, &v48);
  if ((v8 & 1) == 0)
  {
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = 12313;
    goto LABEL_67;
  }
  v9 = *a2;
  v10 = v48;
  v11 = *(_QWORD **)(*a2 + 3784);
  v12 = *(_QWORD *)(*a2 + 3776);
  v13 = ((uint64_t)v11 - v12) >> 4;
  v14 = v48 - v13;
  if (v48 <= v13)
  {
    if (v48 < v13)
    {
      v11 = (_QWORD *)(v12 + 16 * v48);
      *(_QWORD *)(v9 + 3784) = v11;
    }
  }
  else
  {
    v15 = *(_QWORD *)(v9 + 3792);
    if (v14 <= (v15 - (uint64_t)v11) >> 4)
    {
      v19 = &v11[2 * v14];
      v26 = 16 * v48 - 16 * v13;
      do
      {
        if (v11)
        {
          *v11 = 0;
          v11[1] = 0;
        }
        v11 += 2;
        v26 -= 16;
      }
      while (v26);
      *(_QWORD *)(v9 + 3784) = v19;
    }
    else
    {
      v16 = (v15 - v12) >> 3;
      if (v16 <= v48)
        v16 = v48;
      if ((unint64_t)(v15 - v12) >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v9 + 3800) + 16))(*(_QWORD *)(v9 + 3800), 16 * v17, 8);
      v18 = (_QWORD *)(v8 + 16 * v13);
      v19 = (_QWORD *)(v8 + 16 * v10);
      v20 = 16 * v10 - 16 * v13;
      v21 = v18;
      do
      {
        if (v21)
        {
          *v21 = 0;
          v21[1] = 0;
        }
        v21 += 2;
        v20 -= 16;
      }
      while (v20);
      v27 = *(_QWORD *)(v9 + 3784);
      v28 = *(_QWORD *)(v9 + 3776);
      if (v27 != v28)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *(_OWORD *)(v27 - 16);
          v18 -= 2;
          v27 -= 16;
        }
        while (v27 != v28);
        v27 = *(_QWORD *)(v9 + 3776);
      }
      *(_QWORD *)(v9 + 3776) = v18;
      *(_QWORD *)(v9 + 3784) = v19;
      v29 = *(_QWORD *)(v9 + 3792);
      *(_QWORD *)(v9 + 3792) = v8 + 16 * v17;
      if (v27)
      {
        v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v9 + 3800) + 40))(*(_QWORD *)(v9 + 3800), v27, v29 - v27);
        v19 = *(_QWORD **)(v9 + 3784);
      }
    }
    v12 = *(_QWORD *)(v9 + 3776);
    v10 = v48;
    v11 = v19;
  }
  if (v10 != ((uint64_t)v11 - v12) >> 4)
  {
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = 12316;
    goto LABEL_67;
  }
  if ((_DWORD)v10)
  {
    v30 = 0;
    v32 = v7[6];
    v31 = v7[7];
    while (1)
    {
      v33 = v32 + 8;
      if (v32 + 8 > v31)
        break;
      v34 = *(_QWORD *)(v7[5] + v32);
      v7[6] = v33;
      *(_QWORD *)(*(_QWORD *)(v9 + 3776) + v30) = v34;
      v30 += 16;
      v32 = v33;
      if (16 * v10 == v30)
        goto LABEL_42;
    }
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = 12320;
    goto LABEL_67;
  }
LABEL_42:
  v35 = *(_QWORD *)(*a2 + 504);
  v36 = *(_QWORD *)(*a2 + 512);
  v37 = (v36 - v35) / 224;
  if (*((_DWORD *)v7 + 16) < 2u)
  {
    if ((_DWORD)v10)
    {
      v38 = v10;
      v39 = (_QWORD *)(*(_QWORD *)(v9 + 3776) + 8);
      do
      {
        *v39 = v49;
        v39 += 2;
        --v38;
      }
      while (v38);
    }
    if (v36 != v35)
    {
      v40 = (_QWORD *)(v35 + 176);
      do
      {
        *v40 = v49;
        v40 += 28;
        --v37;
      }
      while (v37);
    }
    goto LABEL_49;
  }
  if ((_DWORD)v10)
  {
    v41 = 0;
    v42 = 8;
    while (1)
    {
      v47 = 0;
      if (!geo::codec::chapterReadVarInt64(v7, &v47))
        break;
      *(_QWORD *)(*(_QWORD *)(v9 + 3776) + v42) = v47;
      ++v41;
      v42 += 16;
      if (v41 >= v48)
        goto LABEL_55;
    }
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = 12337;
    goto LABEL_67;
  }
LABEL_55:
  v46 = 0;
  v8 = geo::codec::chapterReadVarUint32(v7, &v46);
  if ((v8 & 1) == 0)
  {
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = 12342;
    goto LABEL_67;
  }
  if (v37 != v46)
  {
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = 12343;
    goto LABEL_67;
  }
  if (v36 != v35)
  {
    v43 = (_QWORD *)(v35 + 176);
    while (1)
    {
      v47 = 0;
      v8 = geo::codec::chapterReadVarInt64(v7, &v47);
      if (!(_DWORD)v8)
        break;
      *v43 = v47;
      v43 += 28;
      if (!--v37)
        goto LABEL_49;
    }
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = 12346;
    goto LABEL_67;
  }
LABEL_49:
  v22 = 1;
LABEL_68:
  if (*(_BYTE *)v7)
  {
    v44 = geo::codec::Allocator::instance((geo::codec::Allocator *)v8);
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v44 + 40))(v44, v7[5], 0);
  }
  v45 = geo::codec::Allocator::instance((geo::codec::Allocator *)v8);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v45 + 40))(v45, v7, 0);
  return v22;
}

void geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer(geo::codec::ChapterDecodeTimer *this)
{
  uint64_t v2;
  uint64_t v3;
  std::chrono::steady_clock::time_point v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  v4.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v5 = *((_QWORD *)this + 3);
  v9 = v3;
  if (v3)
  {
    v10 = &v9;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v2 + 1912, &v9, (uint64_t)&std::piecewise_construct, &v10)+ 4) = (double)((v4.__d_.__rep_ - v5) / 1000) * 0.001;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t *std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::at(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  if (!a2)
    goto LABEL_22;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
LABEL_22:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == a3)
      {
        if (*((_DWORD *)v6 + 4) == a3)
          return v6 + 3;
      }
      else if ((v8 & (a2 - 1)) != v4)
      {
        goto LABEL_22;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == a3)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v4)
      goto LABEL_22;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_22;
  }
  if (*((_DWORD *)v6 + 4) != a3)
    goto LABEL_11;
  return v6 + 3;
}

uint64_t mgcl::ints::IntDecompressor<BOOL>::decompress(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, char a4, char a5, size_t a6, int8x16_t *a7)
{
  int8x16_t *v7;
  size_t v12;
  uint64_t result;
  size_t v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD **v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  BOOL v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  char *v51;
  char *v52;
  size_t v53;
  size_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  size_t v60;
  size_t v61;
  char *v62;
  char *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  size_t v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD **v80;
  _QWORD *v81;
  _QWORD *v82;
  void *v83;
  void *v84;
  unsigned int v85;
  unsigned __int8 *v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  size_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  size_t v96;
  size_t v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  _BYTE *v102;
  unint64_t v103;
  char *v104;
  _BYTE *v105;
  char *v106;
  char *v107;
  char *v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  size_t v122;
  unint64_t v123;
  char *v124;
  unsigned int v125;
  int v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  size_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  size_t v137;
  size_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  _BYTE *v144;
  unint64_t v145;
  char *v146;
  _BYTE *v147;
  char *v148;
  char *v149;
  char *v150;
  char v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  int v155;
  uint64_t *v156;
  unint64_t v157;
  char *v158;
  unsigned int v159;
  int v160;
  int v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  unint64_t v166;
  uint64_t *v167;
  size_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  size_t v172;
  size_t v173;
  uint64_t *v174;
  char *v175;
  char *v176;
  size_t v177;
  uint64_t *v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  size_t v183;
  unsigned int v184;
  size_t v185;
  char *v186;
  char *v187;
  _BYTE *v188;
  int v189;
  int v190;
  int v191;
  int v192;
  uint64_t i;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  size_t v198;
  _BYTE *v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  size_t v205;
  uint64_t v206;
  char v207;
  int v208;
  char v209;
  unsigned int v210;
  uint64_t v211;
  int v212;
  int v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unsigned int v217;
  int v218;
  uint64_t v219;
  unint64_t v221;
  char v222;
  int v223;
  char v224;
  char v225;
  unsigned int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  char *v231;
  int v232;
  unsigned int v233;
  uint64_t v234;
  char v235;
  int v236;
  char v237;
  unsigned int v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  char v243;
  char v244;
  int v245;
  char v246;
  char v247;
  unsigned int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  char *v253;
  int v254;
  BOOL v255;
  unsigned int v256;
  char *v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  int v261;
  unsigned int v262;
  int v263;
  int v264;
  BOOL *v265;
  size_t v266;
  unint64_t v267;
  unint64_t v268;
  char *v269;
  unint64_t v270;
  unint64_t v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  size_t v277;
  unint64_t v278;
  char *v279;
  char *v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  unint64_t v284;
  char *v285;
  _OWORD *v286;
  __int128 *v287;
  unint64_t v288;
  __int128 v289;
  _QWORD *v290;
  uint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  _OWORD *v297;
  __int128 *v298;
  unint64_t v299;
  __int128 v300;
  _QWORD *v301;
  uint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  char *v305;
  char *v306;
  unint64_t v307;
  __int128 v308;
  char *v309;
  char *v310;
  unint64_t v311;
  uint64_t v312;
  char *v313;
  char *v314;
  unint64_t v315;
  __int128 v316;
  char *v317;
  char *v318;
  unint64_t v319;
  uint64_t v320;
  char *v321;
  char *v322;
  unint64_t v323;
  __int128 v324;
  char *v325;
  char *v326;
  unint64_t v327;
  uint64_t v328;
  char *v329;
  char *v330;
  unint64_t v331;
  __int128 v332;
  char *v333;
  char *v334;
  unint64_t v335;
  uint64_t v336;
  char *v337;
  char *v338;
  unint64_t v339;
  __int128 v340;
  char *v341;
  char *v342;
  unint64_t v343;
  uint64_t v344;
  char *v345;
  char v346;
  uint64_t *v347;
  BOOL *v348;
  size_t v349;
  uint64_t v350;
  unint64_t v351;
  char *v352;
  char v353;
  char *v354;
  char v355;
  uint64_t v356;
  uint64_t *v357;
  char v358;
  char v359;
  uint64_t v360;
  char *v361;
  char v362;
  int v363;
  unint64_t v364;
  uint64_t *v365;
  char v366;
  char v367;
  uint64_t v368;
  int16x8_t v369;
  unint64_t v370;
  uint64x2_t v371;
  unint64_t v372;
  uint64_t *v373;
  int8x8_t *v374;
  unint64_t v375;
  uint64_t v376;
  uint32x4_t v377;
  uint32x4_t v378;
  uint16x8_t v379;
  uint32x4_t v380;
  int8x16_t v381;
  int8x16_t v382;
  int8x16_t v383;
  uint32x4_t v384;
  int8x16_t v385;
  int8x16_t v386;
  unint64_t v387;
  int8x16_t *v388;
  int8x16_t *v389;
  int8x16_t v390;
  int8x16_t v391;
  uint32x4_t v392;
  uint32x4_t v393;
  uint32x4_t v394;
  uint32x4_t v395;
  uint8x16_t v396;
  uint16x8_t v397;
  uint32x4_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  uint32x4_t v402;
  int8x16_t v403;
  int8x16_t v404;
  uint16x8_t v405;
  uint32x4_t v406;
  int8x16_t v407;
  int8x16_t v408;
  uint32x4_t v409;
  int8x16_t v410;
  int8x16_t v411;
  size_t v412;
  BOOL *v413;
  char *v414;
  char v415;
  char *v416;
  char v417;
  int32x4_t *v418;
  uint64_t *v419;
  char v420;
  char v421;
  uint64_t v422;
  BOOL *v423;
  size_t v424;
  uint64_t v425;
  unint64_t v426;
  char *v427;
  char *v428;
  char *v429;
  char *v430;
  char *v431;
  size_t v432;
  unsigned int v433;
  char *v434;
  unsigned int v435;
  int v436;
  char *v437;
  int v438;
  unsigned int v439;
  char *v440;
  char *v441;
  char *v442;
  char *v443;
  char *v444;
  int v445;
  BOOL v446;
  int v447;
  unint64_t v448;
  char *v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v454;
  uint64_t v455;
  size_t v456;
  unint64_t __sz;
  int8x16_t *v458;
  uint64_t *v459;
  uint64_t v460;
  unsigned __int8 *v461;
  __int128 v462;
  uint64_t v463;
  __int16 v464;
  char v465;
  int v466;
  char v467;
  char v468;
  uint64_t v469;
  uint64_t v470;
  _BYTE __dst[65];
  uint64_t v472;

  v472 = *MEMORY[0x1E0C80C00];
  if (!a6)
    return 0;
  v7 = a7;
  bzero(a7, a6);
  v12 = *a2;
  if ((v12 - 66) < 0xFFFFFFBF)
    return 3;
  if (v12 <= 0x40)
    v14 = 65 - v12;
  else
    v14 = 0;
  bzero(&__dst[v12], v14);
  v15 = a6;
  memcpy(__dst, a2 + 1, v12);
  v16 = 0;
  v17 = v12 + 1;
  __sz = 8 * a6;
  v444 = &v7->i8[a6];
  v454 = a3 - 1;
  v445 = a3 - 1;
  v455 = 8 * a3 - 24;
  v450 = 4 * a6;
  v451 = 25 - 8 * a3;
  v458 = v7;
  v459 = a1;
  v461 = a2;
  v456 = v12;
  while (1)
  {
    v19 = __dst[v16];
    v20 = a2[v17];
    v21 = v17 + 1;
    v460 = v16;
    v22 = 0;
    if (!__dst[v16])
      break;
    v23 = 0;
    v24 = 0;
    v25 = &a2[v21];
    v26 = 1;
    v27 = v455 - 8 * v17;
    do
    {
      v28 = v26;
      v29 = v27;
      v30 = (char)v25[v23];
      v24 |= (unint64_t)(v25[v23] & 0x7F) << v22;
      if (v23 > 8)
        break;
      ++v23;
      LOBYTE(v22) = v22 + 7;
      ++v26;
      v27 -= 8;
    }
    while (v30 < 0);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = &v461[v17];
    do
    {
      v35 = v29;
      v36 = (char)v34[v28 + 1];
      v33 |= (unint64_t)(v34[++v28] & 0x7F) << v31;
      if (v32 > 8)
        break;
      ++v32;
      v31 += 7;
      v29 -= 8;
    }
    while (v36 < 0);
    switch(v20)
    {
      case 1:
        if (!a1[3])
        {
          v37 = (_QWORD *)operator new();
          v38 = (_QWORD *)operator new();
          v39 = operator new();
          a1 = v459;
          *(_QWORD *)(v39 + 20) = 0;
          *(_QWORD *)(v39 + 12) = 0;
          *(_DWORD *)(v39 + 36) = 0;
          *(_QWORD *)(v39 + 28) = 0;
          *(_WORD *)(v39 + 40) = 257;
          *(_QWORD *)(v39 + 44) = 0;
          *(_QWORD *)(v39 + 60) = 0;
          *(_QWORD *)(v39 + 52) = 0;
          *(_DWORD *)(v39 + 67) = 0;
          *(_DWORD *)(v39 + 72) = 0;
          *(_WORD *)(v39 + 76) = 257;
          *(_QWORD *)(v39 + 136) = 0;
          *(_OWORD *)(v39 + 80) = 0u;
          *(_OWORD *)(v39 + 96) = 0u;
          *(_OWORD *)(v39 + 112) = 0u;
          *v38 = v39;
          *v37 = v38;
          v40 = (_QWORD **)v459[3];
          v459[3] = (uint64_t)v37;
          if (v40)
          {
            v41 = *v40;
            *v40 = 0;
            if (v41)
            {
              v42 = (_QWORD *)*v41;
              *v41 = 0;
              if (v42)
              {
                v43 = (void *)v42[13];
                if (v43)
                {
                  v42[14] = v43;
                  operator delete(v43);
                }
                v44 = (void *)v42[10];
                if (v44)
                {
                  v42[11] = v44;
                  operator delete(v44);
                }
                MEMORY[0x18D76437C](v42, 0x1070C40ADA6D0DELL);
              }
              MEMORY[0x18D76437C](v41, 0x20C4093837F09);
              a1 = v459;
            }
            MEMORY[0x18D76437C](v40, 0x20C4093837F09);
          }
        }
        v45 = v19 == 1;
        v46 = v33 - 2;
        if (v33 < 2)
          return 3;
        v47 = &v461[v17 + v28];
        v48 = v47[1];
        v49 = v47[2];
        v50 = *a1;
        v51 = (char *)a1[1];
        v52 = &v51[-*a1];
        if (v19 != 1)
        {
          v177 = v450 - (_QWORD)v52;
          if (v450 <= (unint64_t)v52)
          {
            v178 = v459;
            v184 = a6;
            if (v450 < (unint64_t)v52)
              v459[1] = v50 + v450;
          }
          else
          {
            v178 = v459;
            v179 = v459[2];
            if (v179 - (uint64_t)v51 >= v177)
            {
              v443 = &v51[v177];
              v257 = v51;
              v258 = v49;
              v259 = v48;
              bzero(v257, v450 - (_QWORD)v52);
              v48 = v259;
              v45 = v19 == 1;
              v49 = v258;
              v46 = v33 - 2;
              v459[1] = (uint64_t)v443;
              v184 = a6;
            }
            else
            {
              v435 = v48;
              v438 = v49;
              if ((v450 & 0x8000000000000000) != 0)
LABEL_414:
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              v180 = (unint64_t)v52;
              v181 = v179 - v50;
              v182 = 2 * v181;
              if (2 * v181 <= v450)
                v182 = 4 * a6;
              if (v181 >= 0x3FFFFFFFFFFFFFFFLL)
                v183 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v183 = v182;
              v432 = v183;
              v429 = (char *)operator new(v183);
              v427 = &v429[v180];
              bzero(&v429[v180], v177);
              if (v51 == (char *)v50)
              {
                v178 = v459;
                v184 = a6;
                v46 = v33 - 2;
                v49 = v438;
                v45 = v19 == 1;
                v48 = v435;
                v186 = v429;
                v185 = v432;
                v285 = v427;
              }
              else
              {
                if (v180 < 8)
                {
                  v178 = v459;
                  v184 = a6;
                  v46 = v33 - 2;
                  v49 = v438;
                  v45 = v19 == 1;
                  v48 = v435;
                  v186 = v429;
                  v185 = v432;
                  v187 = v427;
                  goto LABEL_391;
                }
                v295 = v180;
                v186 = v429;
                v185 = v432;
                v178 = v459;
                v184 = a6;
                v46 = v33 - 2;
                v49 = v438;
                v45 = v19 == 1;
                v48 = v435;
                v187 = v427;
                if ((unint64_t)(v50 - (_QWORD)v429) < 0x20)
                  goto LABEL_391;
                if (v295 >= 0x20)
                {
                  v296 = v295 & 0xFFFFFFFFFFFFFFE0;
                  v337 = &v429[v295 - 16];
                  v338 = v51 - 16;
                  v339 = v295 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v340 = *(_OWORD *)v338;
                    *((_OWORD *)v337 - 1) = *((_OWORD *)v338 - 1);
                    *(_OWORD *)v337 = v340;
                    v337 -= 32;
                    v338 -= 32;
                    v339 -= 32;
                  }
                  while (v339);
                  if (v295 != v296)
                  {
                    if ((v295 & 0x18) == 0)
                    {
                      v187 = &v427[-v296];
                      v51 -= v296;
                      goto LABEL_391;
                    }
                    goto LABEL_315;
                  }
                }
                else
                {
                  v296 = 0;
LABEL_315:
                  v187 = &v427[-(v295 & 0xFFFFFFFFFFFFFFF8)];
                  v341 = &v51[-v296 - v50 - 8 + (_QWORD)v429];
                  v342 = &v51[-v296 - 8];
                  v343 = v296 - (v295 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v344 = *(_QWORD *)v342;
                    v342 -= 8;
                    *(_QWORD *)v341 = v344;
                    v341 -= 8;
                    v343 += 8;
                  }
                  while (v343);
                  v51 -= v295 & 0xFFFFFFFFFFFFFFF8;
                  if (v295 != (v295 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_391:
                    v416 = v187 - 1;
                    do
                    {
                      v417 = *--v51;
                      *v416-- = v417;
                    }
                    while (v51 != (char *)v50);
                  }
                }
                v51 = (char *)v50;
                v285 = v186;
              }
              *v178 = (uint64_t)v285;
              v178[1] = (uint64_t)&v186[v450];
              v178[2] = (uint64_t)&v186[v185];
              if (v51)
              {
                operator delete(v51);
                v48 = v435;
                v45 = v19 == 1;
                v49 = v438;
                v46 = v33 - 2;
              }
            }
          }
          v418 = (int32x4_t *)*v178;
          v419 = *(uint64_t **)v178[3];
          LODWORD(v462) = 0;
          BYTE4(v462) = a4;
          BYTE5(v462) = a5;
          WORD3(v462) = 0;
          v463 = 1;
          v464 = 0;
          v465 = v45;
          v466 = 0;
          if (v48 >= 4)
            v420 = 1;
          else
            v420 = v48;
          v467 = v420;
          if (v49 == 2)
            v421 = 4;
          else
            v421 = 1;
          if (!v49)
            v421 = 0;
          v468 = v421;
          *((_QWORD *)&v462 + 1) = __PAIR64__(v184, v46);
          v422 = *v419;
          v469 = (uint64_t)&v461[v17 + 3 + v28];
          v470 = v46;
          result = gcl::polyline::DecoderImpl::decompressAttributes(v422, (uint64_t)&v469, v418, 0, &v462);
          if ((_DWORD)result)
            goto LABEL_410;
          v423 = (BOOL *)v458;
          a1 = v459;
          v15 = a6;
          v424 = a6;
          do
          {
            v425 = v418->i32[0];
            v418 = (int32x4_t *)((char *)v418 + 4);
            v426 = v24 + v425;
            if (v19 <= 0x3F)
              v426 = ((unint64_t)*v423 << v19) | v426 & ~(-1 << v19);
            *v423++ = v426 != 0;
            --v424;
          }
          while (v424);
          goto LABEL_389;
        }
        LODWORD(v53) = a6;
        v54 = a6 - (_QWORD)v52;
        if (a6 <= (unint64_t)v52)
        {
          v55 = v459;
          if (a6 >= (unint64_t)v52)
            goto LABEL_363;
          v198 = v50 + a6;
          goto LABEL_219;
        }
        v55 = v459;
        v56 = v459[2];
        if (v56 - (uint64_t)v51 >= v54)
        {
          v442 = &v51[v54];
          v253 = v51;
          v254 = v49;
          v255 = v45;
          v256 = v48;
          bzero(v253, a6 - (_QWORD)v52);
          LODWORD(v53) = a6;
          v48 = v256;
          v45 = v255;
          v49 = v254;
          v46 = v33 - 2;
          v198 = (size_t)v442;
LABEL_219:
          v55[1] = v198;
          goto LABEL_363;
        }
        v433 = v48;
        v446 = v45;
        v436 = v49;
        if ((a6 & 0x8000000000000000) != 0)
          goto LABEL_414;
        v57 = (unint64_t)v52;
        v58 = v56 - v50;
        v59 = 2 * v58;
        if (2 * v58 <= a6)
          v59 = a6;
        if (v58 >= 0x3FFFFFFFFFFFFFFFLL)
          v60 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v60 = v59;
        v430 = (char *)operator new(v60);
        v428 = &v430[v57];
        bzero(&v430[v57], v54);
        v61 = v60;
        if (v51 == (char *)v50)
        {
          v55 = v459;
          v53 = a6;
          v46 = v33 - 2;
          v49 = v436;
          v45 = v446;
          v48 = v433;
          v283 = &v430[v57];
          v62 = v430;
          goto LABEL_361;
        }
        if (v57 < 8)
        {
          v55 = v459;
          v53 = a6;
          v46 = v33 - 2;
          v49 = v436;
          v45 = v446;
          v48 = v433;
          v63 = &v430[v57];
          v62 = v430;
          goto LABEL_358;
        }
        v63 = &v430[v57];
        v62 = v430;
        v55 = v459;
        v53 = a6;
        v46 = v33 - 2;
        v49 = v436;
        v45 = v446;
        v48 = v433;
        if ((unint64_t)(v50 - (_QWORD)v430) < 0x20)
          goto LABEL_358;
        if (v57 >= 0x20)
        {
          v294 = v57 & 0xFFFFFFFFFFFFFFE0;
          v329 = &v430[v57 - 16];
          v330 = v51 - 16;
          v331 = v57 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v332 = *(_OWORD *)v330;
            *((_OWORD *)v329 - 1) = *((_OWORD *)v330 - 1);
            *(_OWORD *)v329 = v332;
            v329 -= 32;
            v330 -= 32;
            v331 -= 32;
          }
          while (v331);
          if (v57 == v294)
            goto LABEL_360;
          if ((v57 & 0x18) == 0)
          {
            v63 = &v428[-v294];
            v51 -= v294;
LABEL_358:
            v361 = v63 - 1;
            do
            {
              v362 = *--v51;
              *v361-- = v362;
            }
            while (v51 != (char *)v50);
            goto LABEL_360;
          }
        }
        else
        {
          v294 = 0;
        }
        v63 = &v428[-(v57 & 0xFFFFFFFFFFFFFFF8)];
        v333 = &v51[-v294 - v50 - 8 + (_QWORD)v430];
        v334 = &v51[-v294 - 8];
        v335 = v294 - (v57 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v336 = *(_QWORD *)v334;
          v334 -= 8;
          *(_QWORD *)v333 = v336;
          v333 -= 8;
          v335 += 8;
        }
        while (v335);
        v51 -= v57 & 0xFFFFFFFFFFFFFFF8;
        if (v57 != (v57 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_358;
LABEL_360:
        v51 = (char *)v50;
        v283 = v62;
LABEL_361:
        *v55 = (uint64_t)v283;
        v55[1] = (uint64_t)&v62[v53];
        v55[2] = (uint64_t)&v62[v61];
        if (v51)
        {
          v363 = v53;
          operator delete(v51);
          LODWORD(v53) = v363;
          v48 = v433;
          v45 = v446;
          v49 = v436;
          v46 = v33 - 2;
        }
LABEL_363:
        v364 = *v55;
        v365 = *(uint64_t **)v55[3];
        LODWORD(v462) = 0;
        BYTE4(v462) = a4;
        BYTE5(v462) = a5;
        WORD3(v462) = 0;
        v463 = 1;
        v464 = 0;
        v465 = v45;
        v466 = 0;
        if (v48 >= 4)
          v366 = 1;
        else
          v366 = v48;
        v467 = v366;
        if (v49 == 2)
          v367 = 4;
        else
          v367 = 1;
        if (!v49)
          v367 = 0;
        v468 = v367;
        *((_QWORD *)&v462 + 1) = __PAIR64__(v53, v46);
        v368 = *v365;
        v469 = (uint64_t)&v461[v17 + 3 + v28];
        v470 = v46;
        result = gcl::polyline::DecoderImpl::decompressAttributes(v368, (uint64_t)&v469, v364, 0, &v462);
        if ((_DWORD)result)
          goto LABEL_410;
        v15 = a6;
        if (a6 < 8)
        {
          v370 = 0;
          a1 = v459;
          goto LABEL_387;
        }
        a1 = v459;
        if (v364 + a6 > (unint64_t)v458 && v364 < (unint64_t)v444)
        {
          v370 = 0;
LABEL_387:
          v412 = a6 - v370;
          v413 = (BOOL *)&v458->i8[v370];
          v414 = (char *)(v364 + v370);
          do
          {
            v415 = *v414++;
            *v413 = (((_BYTE)v24 + v415) & 1 | (2 * *v413)) != 0;
            ++v413;
            --v412;
          }
          while (v412);
          goto LABEL_389;
        }
        v371 = (uint64x2_t)vdupq_n_s64(v24);
        if (a6 >= 0x10)
        {
          v387 = a6 & 0xFFFFFFFFFFFFFFF0;
          v388 = v458;
          v389 = (int8x16_t *)v364;
          v390.i64[0] = 0x101010101010101;
          v390.i64[1] = 0x101010101010101;
          do
          {
            v391 = *v389++;
            v392 = (uint32x4_t)vqtbl1q_s8(v391, (int8x16_t)xmmword_189CFB5A0);
            v393 = (uint32x4_t)vqtbl1q_s8(v391, (int8x16_t)xmmword_189CFB5B0);
            v394 = (uint32x4_t)vqtbl1q_s8(v391, (int8x16_t)xmmword_189CFB5C0);
            v395 = (uint32x4_t)vqtbl1q_s8(v391, (int8x16_t)xmmword_189CFB5D0);
            v396 = (uint8x16_t)vaddq_s8(*v388, *v388);
            v397 = vmovl_u8(*(uint8x8_t *)v396.i8);
            v398 = vmovl_high_u16(v397);
            v399.i64[0] = v398.u32[2];
            v399.i64[1] = v398.u32[3];
            v400 = v399;
            v399.i64[0] = v398.u32[0];
            v399.i64[1] = v398.u32[1];
            v401 = v399;
            v402 = vmovl_u16(*(uint16x4_t *)v397.i8);
            v399.i64[0] = v402.u32[2];
            v399.i64[1] = v402.u32[3];
            v403 = v399;
            v399.i64[0] = v402.u32[0];
            v399.i64[1] = v402.u32[1];
            v404 = v399;
            v405 = vmovl_high_u8(v396);
            v406 = vmovl_u16(*(uint16x4_t *)v405.i8);
            v399.i64[0] = v406.u32[2];
            v399.i64[1] = v406.u32[3];
            v407 = v399;
            v399.i64[0] = v406.u32[0];
            v399.i64[1] = v406.u32[1];
            v408 = v399;
            v409 = vmovl_high_u16(v405);
            v399.i64[0] = v409.u32[0];
            v399.i64[1] = v409.u32[1];
            v410 = v399;
            v399.i64[0] = v409.u32[2];
            v399.i64[1] = v409.u32[3];
            v411 = (int8x16_t)vdupq_n_s64(1uLL);
            v369 = (int16x8_t)vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_u32(v371, *(uint32x2_t *)v394.i8), v411), v404)), (int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_high_u32(v371, v394), v411), v403))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_u32(v371, *(uint32x2_t *)v395.i8), v411), v401)), (int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_high_u32(v371, v395), v411), v400))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_u32(v371, *(uint32x2_t *)v393.i8), v411), v408)), (int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_high_u32(v371, v393), v411), v407))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_u32(v371, *(uint32x2_t *)v392.i8), v411), v410)), (int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_high_u32(v371, v392), v411), v399)))))), v390);
            *v388++ = (int8x16_t)v369;
            v387 -= 16;
          }
          while (v387);
          if ((a6 & 0xFFFFFFFFFFFFFFF0) == a6)
            goto LABEL_389;
          v370 = a6 & 0xFFFFFFFFFFFFFFF0;
          v372 = a6 & 0xFFFFFFFFFFFFFFF0;
          if ((a6 & 8) == 0)
            goto LABEL_387;
        }
        else
        {
          v372 = 0;
        }
        v373 = (uint64_t *)(v364 + v372);
        v374 = (int8x8_t *)&v458->i8[v372];
        v375 = v372 - (a6 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v376 = *v373++;
          v369.i64[0] = v376;
          v377 = (uint32x4_t)vqtbl1q_s8((int8x16_t)v369, (int8x16_t)xmmword_189CFB5C0);
          v378 = (uint32x4_t)vqtbl1q_s8((int8x16_t)v369, (int8x16_t)xmmword_189CFB5D0);
          v379 = vmovl_u8((uint8x8_t)vadd_s8(*v374, *v374));
          v380 = vmovl_high_u16(v379);
          v381.i64[0] = v380.u32[2];
          v381.i64[1] = v380.u32[3];
          v382 = v381;
          v381.i64[0] = v380.u32[0];
          v381.i64[1] = v380.u32[1];
          v383 = v381;
          v384 = vmovl_u16(*(uint16x4_t *)v379.i8);
          v381.i64[0] = v384.u32[2];
          v381.i64[1] = v384.u32[3];
          v385 = v381;
          v381.i64[0] = v384.u32[0];
          v381.i64[1] = v384.u32[1];
          v386 = (int8x16_t)vdupq_n_s64(1uLL);
          v369 = (int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_u32(v371, *(uint32x2_t *)v377.i8), v386), v381)), (int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_high_u32(v371, v377), v386), v385))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_u32(v371, *(uint32x2_t *)v378.i8), v386), v383)), (int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8(
                                                                                                    (int8x16_t)vaddw_high_u32(v371, v378),
                                                                                                    v386),
                                                                                                  v382)))));
          *v374++ = vand_s8(vmovn_s16(v369), (int8x8_t)0x101010101010101);
          v375 += 8;
        }
        while (v375);
        v370 = a6 & 0xFFFFFFFFFFFFFFF8;
        if ((a6 & 0xFFFFFFFFFFFFFFF8) != a6)
          goto LABEL_387;
LABEL_389:
        v17 += v33 + v28 + 1;
        v7 = v458;
        goto LABEL_9;
      case 2:
        v130 = (char *)*a1;
        v131 = (char *)a1[1];
        v132 = &v131[-*a1];
        v133 = __sz - (_QWORD)v132;
        if (__sz > (unint64_t)v132)
        {
          v134 = a1[2];
          if (v134 - (uint64_t)v131 >= v133)
          {
            bzero((void *)a1[1], __sz - (_QWORD)v132);
            a1[1] = (uint64_t)&v131[v133];
            v139 = a6;
            goto LABEL_327;
          }
          v448 = (unint64_t)&v131[-*a1];
          if ((__sz & 0x8000000000000000) != 0)
            goto LABEL_414;
          v135 = v134 - (_QWORD)v130;
          v136 = 2 * v135;
          if (2 * v135 <= __sz)
            v136 = 8 * a6;
          if (v135 >= 0x3FFFFFFFFFFFFFFFLL)
            v137 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v137 = v136;
          v440 = (char *)operator new(v137);
          v437 = &v440[v448];
          bzero(&v440[v448], v133);
          v138 = v137;
          if (v131 == v130)
          {
            a1 = v459;
            v139 = a6;
            v269 = &v440[v448];
            v140 = v440;
          }
          else
          {
            if (v448 < 8)
            {
              a1 = v459;
              v139 = a6;
              v141 = &v440[v448];
              v140 = v440;
              goto LABEL_322;
            }
            v141 = &v440[v448];
            v140 = v440;
            a1 = v459;
            v139 = a6;
            if ((unint64_t)(v130 - v440) < 0x20)
              goto LABEL_322;
            if (v448 >= 0x20)
            {
              v271 = v448 & 0xFFFFFFFFFFFFFFE0;
              v305 = &v440[v448 - 16];
              v306 = v131 - 16;
              v307 = v448 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v308 = *(_OWORD *)v306;
                *((_OWORD *)v305 - 1) = *((_OWORD *)v306 - 1);
                *(_OWORD *)v305 = v308;
                v305 -= 32;
                v306 -= 32;
                v307 -= 32;
              }
              while (v307);
              if (v448 != v271)
              {
                if ((v448 & 0x18) == 0)
                {
                  v141 = &v437[-v271];
                  v131 -= v271;
                  goto LABEL_322;
                }
                goto LABEL_283;
              }
            }
            else
            {
              v271 = 0;
LABEL_283:
              v141 = &v437[-(v448 & 0xFFFFFFFFFFFFFFF8)];
              v309 = &v440[&v131[-v271] - v130 - 8];
              v310 = &v131[-v271 - 8];
              v311 = v271 - (v448 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v312 = *(_QWORD *)v310;
                v310 -= 8;
                *(_QWORD *)v309 = v312;
                v309 -= 8;
                v311 += 8;
              }
              while (v311);
              v131 -= v448 & 0xFFFFFFFFFFFFFFF8;
              if (v448 != (v448 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_322:
                v345 = v141 - 1;
                do
                {
                  v346 = *--v131;
                  *v345-- = v346;
                }
                while (v131 != v130);
              }
            }
            v131 = v130;
            v269 = v140;
          }
          *a1 = (uint64_t)v269;
          a1[1] = (uint64_t)&v140[__sz];
          a1[2] = (uint64_t)&v140[v138];
          if (v131)
            operator delete(v131);
          goto LABEL_327;
        }
        v139 = a6;
        if (__sz < (unint64_t)v132)
          a1[1] = (uint64_t)&v130[__sz];
LABEL_327:
        v347 = (uint64_t *)*a1;
        result = mgcl::muid::decompress((mgcl::muid *)&v461[v17 + 1 + v28], (const char *)v33, 0, 0, *a1, (unint64_t *)8, v139);
        if ((_DWORD)result)
          return result;
        v7 = v458;
        v348 = (BOOL *)v458;
        v15 = a6;
        v349 = a6;
        do
        {
          v350 = *v347++;
          v351 = v350 + v24;
          if (v19 <= 0x3F)
            v351 = ((unint64_t)*v348 << v19) | v351 & ~(-1 << v19);
          *v348++ = v351 != 0;
          --v349;
        }
        while (v349);
        v17 += v33 + v28 + 1;
        a1 = v459;
        goto LABEL_9;
      case 3:
        v101 = (char *)*a1;
        v100 = (char *)a1[1];
        if (v100 != (char *)*a1)
        {
          a1[1] = (uint64_t)v101;
          v100 = v101;
        }
        if (a1[2] - (uint64_t)v101 >= __sz)
          goto LABEL_86;
        if ((__sz & 0x8000000000000000) != 0)
          goto LABEL_414;
        v102 = operator new(__sz);
        v103 = v100 - v101;
        v104 = &v102[v100 - v101];
        v105 = v104;
        a1 = v459;
        v15 = a6;
        if (v100 == v101)
          goto LABEL_84;
        v105 = v102;
        if (v103 < 8 || (unint64_t)(v101 - v102) < 0x20)
        {
          v106 = v100;
          v107 = &v102[v100 - v101];
          goto LABEL_82;
        }
        if (v103 >= 0x20)
        {
          v270 = v103 & 0xFFFFFFFFFFFFFFE0;
          v286 = &v102[v103 - 16];
          v287 = (__int128 *)(v100 - 16);
          v288 = v103 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v289 = *v287;
            *(v286 - 1) = *(v287 - 1);
            *v286 = v289;
            v286 -= 2;
            v287 -= 2;
            v288 -= 32;
          }
          while (v288);
          if (v103 == v270)
          {
LABEL_84:
            v7 = v458;
            *v459 = (uint64_t)v105;
            v459[1] = (uint64_t)v104;
            v459[2] = (uint64_t)&v102[__sz];
            if (v101)
              operator delete(v101);
LABEL_86:
            v110 = 0;
            v111 = v17 + v28 + 1;
            a2 = v461;
            v18 = v460;
            do
            {
              v112 = 0;
              v113 = 0;
              v114 = 0;
              v115 = v111;
              v116 = &v461[v111];
              do
              {
                v117 = (char)v116[v113];
                v114 |= (unint64_t)(v116[v113] & 0x7F) << v112;
                v118 = v113 + 1;
                if (v113 > 8)
                  break;
                v112 += 7;
                ++v113;
              }
              while (v117 < 0);
              v119 = v114 + v24;
              if (v19 <= 0x3F)
                v119 = ((unint64_t)v7->u8[v110] << v19) | v119 & ~(-1 << v19);
              v111 = v115 + v118;
              v7->i8[v110++] = v119 != 0;
            }
            while (v110 != v15);
            v17 = v115 + v118;
            v12 = v456;
            goto LABEL_11;
          }
          if ((v103 & 0x18) == 0)
          {
            v107 = &v104[-v270];
            v106 = &v100[-v270];
LABEL_82:
            v108 = v107 - 1;
            do
            {
              v109 = *--v106;
              *v108-- = v109;
            }
            while (v106 != v101);
            goto LABEL_84;
          }
        }
        else
        {
          v270 = 0;
        }
        v106 = &v100[-(v103 & 0xFFFFFFFFFFFFFFF8)];
        v107 = &v104[-(v103 & 0xFFFFFFFFFFFFFFF8)];
        v290 = &v102[&v100[-v270] - v101 - 8];
        v291 = (uint64_t *)&v100[-v270 - 8];
        v292 = v270 - (v103 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v293 = *v291--;
          *v290-- = v293;
          v292 += 8;
        }
        while (v292);
        if (v103 != (v103 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_82;
        goto LABEL_84;
      case 4:
        v120 = (uint64_t *)operator new();
        v121 = v120;
        v122 = v454 - v17 - v28;
        *v120 = (uint64_t)&v461[v17 + 1 + v28];
        v120[1] = v122;
        v120[2] = 0;
        v123 = 8 * v122;
        if (!v123)
        {
          v128 = 0;
          v7 = v458;
          v15 = a6;
LABEL_98:
          v129 = 1;
          goto LABEL_161;
        }
        v124 = (char *)*v120;
        v125 = *(unsigned __int8 *)*v120;
        v120[2] = 1;
        v126 = (v125 >> 6) & 2 | (*v124 >> 6) & 1;
        v120[2] = 2;
        v127 = (*v124 >> 5) & 1 | (2 * v126);
        v120[2] = 3;
        v15 = a6;
        if (v127 == 2)
        {
          v222 = *v124;
          v120[2] = 4;
          v223 = v222 & 0x10 | *v124 & 0xF;
          v120[2] = 5;
          v224 = *v124;
          v120[2] = 6;
          v225 = *v124;
          v120[2] = 7;
          v226 = v223 & 0xFFFFFFF8 | v224 & 4 | v225 & 2 | *v124 & 1;
          v120[2] = 8;
          LODWORD(v462) = v226;
          v7 = v458;
          if (v123 < 0xD)
          {
            DWORD1(v462) = 0;
            goto LABEL_222;
          }
          v260 = v124[1];
          v120[2] = 9;
          v261 = (v260 >> 6) & 2 | (v124[1] >> 6) & 1;
          v120[2] = 10;
          v262 = v124[1];
          v120[2] = 11;
          v263 = (4 * v261) | (v262 >> 4) & 2 | (v124[1] >> 4) & 1;
          v120[2] = 12;
          v264 = (2 * v263) | (v124[1] >> 3) & 1;
          v120[2] = 13;
          DWORD1(v462) = v264;
          if (v123 >= 0x12)
          {
            v227 = v124[1] >> 2;
            v120[2] = 14;
            v228 = (v124[1] >> 1) & 1 | (2 * (v227 & 1));
            v120[2] = 15;
            LOBYTE(v227) = v124[1];
            v120[2] = 16;
            v229 = (4 * v228) | (2 * (v227 & 1)) | (v124[2] >> 7) & 1;
            v120[2] = 17;
            v230 = (v124[2] >> 6) & 1 | (2 * v229);
            v120[2] = 18;
          }
          else
          {
LABEL_222:
            v230 = 0;
          }
          DWORD2(v462) = v230;
          v265 = (BOOL *)v458;
          v266 = a6;
          do
          {
            v267 = v24 + geo::ReadBitstream::unpackRice2(v121, &v462);
            if (v19 <= 0x3F)
              v267 = ((unint64_t)*v265 << v19) | v267 & ~(-1 << v19);
            *v265++ = v267 != 0;
            --v266;
          }
          while (v266);
          v128 = v121[2];
          a1 = v459;
          v15 = a6;
          goto LABEL_228;
        }
        v7 = v458;
        if (v127 == 1)
        {
          v206 = 0;
          v207 = *v124;
          v120[2] = 4;
          v208 = v207 & 0x10 | *v124 & 0xF;
          v120[2] = 5;
          v209 = *v124;
          v120[2] = 6;
          v210 = v208 & 0xFFFFFFF8 | v209 & 4 | *v124 & 3;
          v120[2] = 7;
          v211 = v210 & 0xFFFFFFFE | *v124 & 1;
          v120[2] = 8;
          v128 = 8;
          a1 = v459;
          while (v128 + 1 > v123)
          {
            v212 = 0;
            v213 = 0;
            if ((_DWORD)v211)
              goto LABEL_195;
LABEL_199:
            v221 = v24 + (v213 | (v212 << v211));
            if (v19 <= 0x3F)
              v221 = ((unint64_t)v458->u8[v206] << v19) | v221 & ~(-1 << v19);
            v458->i8[v206++] = v221 != 0;
            if (v206 == a6)
              goto LABEL_228;
          }
          v214 = 0;
          v212 = 8 * (v445 - v17 - v28) - v128;
          v215 = v35 - v128;
          while (1)
          {
            v216 = v128++;
            v217 = v124[v216 >> 3];
            v121[2] = v128;
            if (((v217 >> (~(_BYTE)v216 & 7)) & 1) == 0)
              break;
            if (v215 == ++v214)
            {
              v128 = v216 + 1;
              v213 = 0;
              if ((_DWORD)v211)
                goto LABEL_195;
              goto LABEL_199;
            }
          }
          v212 = v214;
          v128 = v216 + 1;
          v213 = 0;
          if (!(_DWORD)v211)
            goto LABEL_199;
LABEL_195:
          if (v128 + v211 <= v123)
          {
            v218 = 0;
            v219 = -v211;
            do
            {
              v213 = (v124[v128 >> 3] >> (~(_BYTE)v128 & 7)) & 1 | (2 * v218);
              v121[2] = ++v128;
              v218 = v213;
            }
            while (!__CFADD__(v219++, 1));
          }
          goto LABEL_199;
        }
        v128 = 3;
        if (v127)
          goto LABEL_413;
        if (v123 < 8)
          goto LABEL_98;
        v188 = (_BYTE *)*v120;
        v189 = *(unsigned __int8 *)*v120 >> 4;
        v120[2] = 4;
        v190 = (*v188 >> 3) & 1 | (2 * (v189 & 1));
        v120[2] = 5;
        v191 = *v188 >> 2;
        v120[2] = 6;
        v192 = (4 * v190) | (2 * (v191 & 1)) | (*v188 >> 1) & 1;
        v120[2] = 7;
        LODWORD(v188) = *v188 & 1;
        v120[2] = 8;
        v129 = (v188 | (2 * v192)) + 1;
        v128 = 8;
LABEL_161:
        a1 = v459;
        for (i = 0; i != v15; ++i)
        {
          if (v128 + v129 <= v123)
          {
            v194 = 0;
            v195 = *v120;
            v196 = v129;
            do
            {
              v194 = (*(unsigned __int8 *)(v195 + (v128 >> 3)) >> (~(_BYTE)v128 & 7)) & 1 | (2 * v194);
              v120[2] = ++v128;
              --v196;
            }
            while (v196);
          }
          else
          {
            v194 = 0;
          }
          v197 = v194 + v24;
          if (v19 <= 0x3F)
            v197 = ((unint64_t)v7->u8[i] << v19) | v197 & ~(-1 << v19);
          v7->i8[i] = v197 != 0;
        }
LABEL_228:
        v268 = v128 >> 3;
        if ((v128 & 7) != 0)
          ++v268;
        v17 += v28 + v268 + 1;
        MEMORY[0x18D76437C](v121, 0x1050C40E4AAA758);
LABEL_9:
        a2 = v461;
        v12 = v456;
LABEL_10:
        v18 = v460;
LABEL_11:
        v16 = v18 + 1;
        if (v16 == v12)
          return 0;
        break;
      default:
        return 3;
    }
  }
  v64 = &a2[v21];
  v65 = v451 + 8 * v17;
  do
  {
    v66 = v65;
    v67 = v22 + 1;
    if (v22 > 8)
      break;
    v68 = (char)v64[v22];
    v65 += 8;
    ++v22;
  }
  while (v68 < 0);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = &v461[v17 + v67];
  v73 = v454 - v17;
  do
  {
    v74 = v66;
    v75 = (char)v72[v70 + 1];
    v71 |= (unint64_t)(v72[v70 + 1] & 0x7F) << v69;
    v76 = v70 + 1;
    --v73;
    if (v70 > 8)
      break;
    v69 += 7;
    v66 += 8;
    ++v70;
  }
  while (v75 < 0);
  switch(v20)
  {
    case 1:
      if (!a1[3])
      {
        v77 = (_QWORD *)operator new();
        v78 = (_QWORD *)operator new();
        v79 = operator new();
        a1 = v459;
        *(_QWORD *)(v79 + 20) = 0;
        *(_QWORD *)(v79 + 12) = 0;
        *(_DWORD *)(v79 + 36) = 0;
        *(_QWORD *)(v79 + 28) = 0;
        *(_WORD *)(v79 + 40) = 257;
        *(_QWORD *)(v79 + 44) = 0;
        *(_QWORD *)(v79 + 60) = 0;
        *(_QWORD *)(v79 + 52) = 0;
        *(_DWORD *)(v79 + 67) = 0;
        *(_DWORD *)(v79 + 72) = 0;
        *(_WORD *)(v79 + 76) = 257;
        *(_QWORD *)(v79 + 136) = 0;
        *(_OWORD *)(v79 + 80) = 0u;
        *(_OWORD *)(v79 + 96) = 0u;
        *(_OWORD *)(v79 + 112) = 0u;
        *v78 = v79;
        *v77 = v78;
        v80 = (_QWORD **)v459[3];
        v459[3] = (uint64_t)v77;
        if (v80)
        {
          v81 = *v80;
          *v80 = 0;
          if (v81)
          {
            v82 = (_QWORD *)*v81;
            *v81 = 0;
            if (v82)
            {
              v83 = (void *)v82[13];
              if (v83)
              {
                v82[14] = v83;
                operator delete(v83);
              }
              v84 = (void *)v82[10];
              if (v84)
              {
                v82[11] = v84;
                operator delete(v84);
              }
              MEMORY[0x18D76437C](v82, 0x1070C40ADA6D0DELL);
            }
            MEMORY[0x18D76437C](v81, 0x20C4093837F09);
            a1 = v459;
          }
          MEMORY[0x18D76437C](v80, 0x20C4093837F09);
        }
      }
      v85 = v71 - 2;
      if (v71 < 2)
        return 3;
      v86 = &v461[v17 + v67 + v76];
      v87 = v86[1];
      v88 = v86[2];
      v89 = *a1;
      v90 = (char *)a1[1];
      v91 = (unint64_t)&v90[-*a1];
      v92 = a6 - v91;
      if (a6 > v91)
      {
        v93 = a1[2];
        if (v93 - (uint64_t)v90 >= v92)
        {
          v231 = &v90[v92];
          v232 = v88;
          v233 = v87;
          bzero((void *)a1[1], a6 - v91);
          v85 = v71 - 2;
          v87 = v233;
          v88 = v232;
          a1[1] = (uint64_t)v231;
          LODWORD(v92) = a6;
          goto LABEL_346;
        }
        v439 = v87;
        v447 = v88;
        if ((a6 & 0x8000000000000000) != 0)
          goto LABEL_415;
        v94 = v93 - v89;
        v95 = 2 * v94;
        if (2 * v94 <= a6)
          v95 = a6;
        if (v94 >= 0x3FFFFFFFFFFFFFFFLL)
          v96 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v96 = v95;
        v434 = (char *)operator new(v96);
        v431 = &v434[v91];
        bzero(&v434[v91], v92);
        v97 = v96;
        if (v90 == (char *)v89)
        {
          a1 = v459;
          v92 = a6;
          v88 = v447;
          v87 = v439;
          v98 = v434;
          v280 = &v434[v91];
          goto LABEL_344;
        }
        if (v91 < 8)
        {
          a1 = v459;
          v92 = a6;
          v88 = v447;
          v87 = v439;
          v98 = v434;
          v99 = &v434[v91];
          goto LABEL_341;
        }
        v98 = v434;
        a1 = v459;
        v92 = a6;
        v88 = v447;
        v87 = v439;
        v99 = &v434[v91];
        if ((unint64_t)(v89 - (_QWORD)v434) >= 0x20)
        {
          if (v91 < 0x20)
          {
            v284 = 0;
            goto LABEL_299;
          }
          v284 = v91 & 0xFFFFFFFFFFFFFFE0;
          v321 = &v434[v91 - 16];
          v322 = v90 - 16;
          v323 = v91 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v324 = *(_OWORD *)v322;
            *((_OWORD *)v321 - 1) = *((_OWORD *)v322 - 1);
            *(_OWORD *)v321 = v324;
            v321 -= 32;
            v322 -= 32;
            v323 -= 32;
          }
          while (v323);
          if (v91 == v284)
            goto LABEL_343;
          if ((v91 & 0x18) != 0)
          {
LABEL_299:
            v99 = &v431[-(v91 & 0xFFFFFFFFFFFFFFF8)];
            v325 = &v90[-v284 - v89 - 8 + (_QWORD)v434];
            v326 = &v90[-v284 - 8];
            v327 = v284 - (v91 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v328 = *(_QWORD *)v326;
              v326 -= 8;
              *(_QWORD *)v325 = v328;
              v325 -= 8;
              v327 += 8;
            }
            while (v327);
            v90 -= v91 & 0xFFFFFFFFFFFFFFF8;
            if (v91 == (v91 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_343;
            goto LABEL_341;
          }
          v99 = &v431[-v284];
          v90 -= v284;
        }
LABEL_341:
        v354 = v99 - 1;
        do
        {
          v355 = *--v90;
          *v354-- = v355;
        }
        while (v90 != (char *)v89);
LABEL_343:
        v90 = (char *)v89;
        v280 = v98;
LABEL_344:
        v85 = v71 - 2;
        *a1 = (uint64_t)v280;
        a1[1] = (uint64_t)&v98[v92];
        a1[2] = (uint64_t)&v98[v97];
        if (v90)
        {
          operator delete(v90);
          v85 = v71 - 2;
          v87 = v439;
          v88 = v447;
        }
        goto LABEL_346;
      }
      LODWORD(v92) = a6;
      if (a6 < v91)
        a1[1] = v89 + a6;
LABEL_346:
      v356 = *a1;
      v357 = *(uint64_t **)a1[3];
      LODWORD(v462) = 0;
      BYTE4(v462) = a4;
      BYTE5(v462) = a5;
      WORD3(v462) = 0;
      v463 = 1;
      v464 = 0;
      v465 = 1;
      v466 = 0;
      if (v87 >= 4)
        v358 = 1;
      else
        v358 = v87;
      v467 = v358;
      if (v88 == 2)
        v359 = 4;
      else
        v359 = 1;
      if (!v88)
        v359 = 0;
      v468 = v359;
      *((_QWORD *)&v462 + 1) = __PAIR64__(v92, v85);
      v360 = *v357;
      v469 = (uint64_t)&v461[v17 + 3 + v67 + v76];
      v470 = v85;
      result = gcl::polyline::DecoderImpl::decompressAttributes(v360, (uint64_t)&v469, v356, 0, &v462);
      v12 = v456;
      if (!(_DWORD)result)
      {
        v17 += v67 + v71 + v76 + 1;
        v7 = v458;
        a1 = v459;
        v15 = a6;
LABEL_356:
        a2 = v461;
        goto LABEL_10;
      }
LABEL_410:
      if ((result - 1) >= 4)
        return 5;
      return result;
    case 2:
      v164 = *a1;
      v165 = (char *)a1[1];
      v166 = (unint64_t)&v165[-*a1];
      v167 = a1;
      v168 = __sz - v166;
      if (__sz > v166)
      {
        v169 = v167[2];
        if (v169 - (uint64_t)v165 >= v168)
        {
          bzero(v165, __sz - v166);
          v167[1] = (uint64_t)&v165[v168];
          v174 = v167;
          goto LABEL_338;
        }
        if ((__sz & 0x8000000000000000) != 0)
LABEL_415:
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v170 = v169 - v164;
        v171 = 2 * v170;
        if (2 * v170 <= __sz)
          v171 = 8 * a6;
        if (v170 >= 0x3FFFFFFFFFFFFFFFLL)
          v172 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v172 = v171;
        v173 = v172;
        v449 = (char *)operator new(v172);
        v441 = &v449[v166];
        bzero(&v449[v166], v168);
        if (v165 == (char *)v164)
        {
          v174 = v459;
          v175 = v449;
          v279 = &v449[v166];
        }
        else
        {
          if (v166 < 8)
          {
            v174 = v459;
            v175 = v449;
            v176 = &v449[v166];
            goto LABEL_333;
          }
          v175 = v449;
          v174 = v459;
          v176 = &v449[v166];
          if ((unint64_t)(v164 - (_QWORD)v449) < 0x20)
            goto LABEL_333;
          if (v166 >= 0x20)
          {
            v282 = v166 & 0xFFFFFFFFFFFFFFE0;
            v313 = &v449[v166 - 16];
            v314 = v165 - 16;
            v315 = v166 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v316 = *(_OWORD *)v314;
              *((_OWORD *)v313 - 1) = *((_OWORD *)v314 - 1);
              *(_OWORD *)v313 = v316;
              v313 -= 32;
              v314 -= 32;
              v315 -= 32;
            }
            while (v315);
            if (v166 != v282)
            {
              if ((v166 & 0x18) == 0)
              {
                v176 = &v441[-v282];
                v165 -= v282;
                goto LABEL_333;
              }
              goto LABEL_291;
            }
          }
          else
          {
            v282 = 0;
LABEL_291:
            v176 = &v441[-(v166 & 0xFFFFFFFFFFFFFFF8)];
            v317 = &v165[-v282 - v164 - 8 + (_QWORD)v449];
            v318 = &v165[-v282 - 8];
            v319 = v282 - (v166 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v320 = *(_QWORD *)v318;
              v318 -= 8;
              *(_QWORD *)v317 = v320;
              v317 -= 8;
              v319 += 8;
            }
            while (v319);
            v165 -= v166 & 0xFFFFFFFFFFFFFFF8;
            if (v166 != (v166 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_333:
              v352 = v176 - 1;
              do
              {
                v353 = *--v165;
                *v352-- = v353;
              }
              while (v165 != (char *)v164);
            }
          }
          v165 = (char *)v164;
          v279 = v175;
        }
        *v174 = (uint64_t)v279;
        v174[1] = (uint64_t)&v175[__sz];
        v174[2] = (uint64_t)&v175[v173];
        if (v165)
          operator delete(v165);
        goto LABEL_338;
      }
      v174 = v167;
      if (__sz < v166)
        v167[1] = v164 + __sz;
LABEL_338:
      result = mgcl::muid::decompress((mgcl::muid *)&v461[v17 + 1 + v67 + v76], (const char *)v71, 0, 0, *v174, (unint64_t *)8, a6);
      if ((_DWORD)result)
        return result;
      v17 += v67 + v71 + v76 + 1;
      v7 = v458;
      a1 = v459;
      v15 = a6;
      goto LABEL_9;
    case 3:
      v143 = (char *)*a1;
      v142 = (char *)a1[1];
      if (v142 != (char *)*a1)
      {
        a1[1] = (uint64_t)v143;
        v142 = v143;
      }
      v15 = a6;
      if (a1[2] - (uint64_t)v143 >= __sz)
        goto LABEL_123;
      if ((__sz & 0x8000000000000000) != 0)
        goto LABEL_415;
      v144 = operator new(__sz);
      v145 = v142 - v143;
      v146 = &v144[v142 - v143];
      v147 = v146;
      a1 = v459;
      v15 = a6;
      v12 = v456;
      if (v142 == v143)
        goto LABEL_121;
      v147 = v144;
      if (v145 < 8 || (unint64_t)(v143 - v144) < 0x20)
      {
        v148 = v142;
        v149 = &v144[v142 - v143];
        goto LABEL_119;
      }
      if (v145 >= 0x20)
      {
        v281 = v145 & 0xFFFFFFFFFFFFFFE0;
        v297 = &v144[v145 - 16];
        v298 = (__int128 *)(v142 - 16);
        v299 = v145 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v300 = *v298;
          *(v297 - 1) = *(v298 - 1);
          *v297 = v300;
          v297 -= 2;
          v298 -= 2;
          v299 -= 32;
        }
        while (v299);
        if (v145 == v281)
        {
LABEL_121:
          *v459 = (uint64_t)v147;
          v459[1] = (uint64_t)v146;
          v459[2] = (uint64_t)&v144[__sz];
          if (v143)
            operator delete(v143);
LABEL_123:
          v152 = 0;
          v17 += v67 + v76 + 1;
          v7 = v458;
          a2 = v461;
          v18 = v460;
          do
          {
            v153 = 0;
            do
            {
              v154 = v153 + 1;
              if (v153 > 8)
                break;
              v155 = (char)v461[v17 + v153++];
            }
            while (v155 < 0);
            ++v152;
            v17 += v154;
          }
          while (v152 != v15);
          goto LABEL_11;
        }
        if ((v145 & 0x18) == 0)
        {
          v149 = &v146[-v281];
          v148 = &v142[-v281];
LABEL_119:
          v150 = v149 - 1;
          do
          {
            v151 = *--v148;
            *v150-- = v151;
          }
          while (v148 != v143);
          goto LABEL_121;
        }
      }
      else
      {
        v281 = 0;
      }
      v148 = &v142[-(v145 & 0xFFFFFFFFFFFFFFF8)];
      v149 = &v146[-(v145 & 0xFFFFFFFFFFFFFFF8)];
      v301 = &v144[&v142[-v281] - v143 - 8];
      v302 = (uint64_t *)&v142[-v281 - 8];
      v303 = v281 - (v145 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v304 = *v302--;
        *v301-- = v304;
        v303 += 8;
      }
      while (v303);
      if (v145 != (v145 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_119;
      goto LABEL_121;
    case 4:
      v156 = (uint64_t *)operator new();
      v121 = v156;
      *v156 = (uint64_t)&v461[v17 + 1 + v67 + v76];
      v156[1] = v73 - v67;
      v156[2] = 0;
      v157 = 8 * (v73 - v67);
      if (!v157)
      {
        v162 = 0;
        v15 = a6;
        v12 = v456;
        goto LABEL_134;
      }
      v158 = (char *)*v156;
      v159 = *(unsigned __int8 *)*v156;
      v156[2] = 1;
      v160 = (v159 >> 6) & 2 | (*v158 >> 6) & 1;
      v156[2] = 2;
      v161 = (*v158 >> 5) & 1 | (2 * v160);
      v156[2] = 3;
      v15 = a6;
      v12 = v456;
      if (v161 != 2)
      {
        if (v161 == 1)
        {
          v234 = 0;
          v235 = *v158;
          v156[2] = 4;
          v236 = v235 & 0x10 | *v158 & 0xF;
          v156[2] = 5;
          v237 = *v158;
          v156[2] = 6;
          v238 = v236 & 0xFFFFFFF8 | v237 & 4 | *v158 & 3;
          v156[2] = 7;
          v239 = v238 & 0xFFFFFFFE | *v158 & 1;
          v156[2] = 8;
          v162 = 8;
          v7 = v458;
          a1 = v459;
          do
          {
            if (v162 + 1 <= v157)
            {
              v240 = v74 + v162;
              do
              {
                v241 = v240;
                v242 = v162 >> 3;
                v243 = ~(_BYTE)v162++ & 7;
                LODWORD(v242) = v158[v242];
                v156[2] = v162;
                if (((v242 >> v243) & 1) == 0)
                  break;
                v240 = v241 + 1;
              }
              while (v241);
            }
            if ((_DWORD)v239 && v162 + v239 <= v157)
            {
              v156[2] = v162 + v239;
              v162 += v239;
            }
            ++v234;
          }
          while (v234 != a6);
          goto LABEL_242;
        }
        v162 = 3;
        if (v161)
        {
LABEL_413:
          MEMORY[0x18D76437C](v121, 0x1050C40E4AAA758);
          return 3;
        }
        if (v157 >= 8)
        {
          v199 = (_BYTE *)*v156;
          v200 = *(unsigned __int8 *)*v156 >> 4;
          v156[2] = 4;
          v201 = (*v199 >> 3) & 1 | (2 * (v200 & 1));
          v156[2] = 5;
          v202 = *v199 >> 2;
          v156[2] = 6;
          v203 = (4 * v201) | (2 * (v202 & 1)) | (*v199 >> 1) & 1;
          v156[2] = 7;
          v204 = *v199 & 1;
          v156[2] = 8;
          v163 = (v204 | (2 * v203)) + 1;
          v162 = 8;
LABEL_180:
          v7 = v458;
          a1 = v459;
          v205 = v15;
          do
          {
            if (v162 + v163 <= v157)
            {
              v156[2] = v162 + v163;
              v162 += v163;
            }
            --v205;
          }
          while (v205);
LABEL_242:
          v278 = v162 >> 3;
          if ((v162 & 7) != 0)
            ++v278;
          v17 += v67 + v278 + v76 + 1;
          MEMORY[0x18D76437C](v121, 0x1050C40E4AAA758);
          goto LABEL_356;
        }
LABEL_134:
        v163 = 1;
        goto LABEL_180;
      }
      v244 = *v158;
      v156[2] = 4;
      v245 = v244 & 0x10 | *v158 & 0xF;
      v156[2] = 5;
      v246 = *v158;
      v156[2] = 6;
      v247 = *v158;
      v156[2] = 7;
      v248 = v245 & 0xFFFFFFF8 | v246 & 4 | v247 & 2 | *v158 & 1;
      v156[2] = 8;
      LODWORD(v462) = v248;
      if (v157 >= 0xD)
      {
        v272 = v158[1];
        v156[2] = 9;
        v273 = (v272 >> 6) & 2 | (v158[1] >> 6) & 1;
        v156[2] = 10;
        v274 = v158[1];
        v156[2] = 11;
        v275 = (4 * v273) | (v274 >> 4) & 2 | (v158[1] >> 4) & 1;
        v156[2] = 12;
        v276 = (2 * v275) | (v158[1] >> 3) & 1;
        v156[2] = 13;
        v7 = v458;
        a1 = v459;
        DWORD1(v462) = v276;
        if (v157 >= 0x12)
        {
          v249 = v158[1] >> 2;
          v156[2] = 14;
          v250 = (v158[1] >> 1) & 1 | (2 * (v249 & 1));
          v156[2] = 15;
          LOBYTE(v249) = v158[1];
          v156[2] = 16;
          v251 = (4 * v250) | (2 * (v249 & 1)) | (v158[2] >> 7) & 1;
          v156[2] = 17;
          v252 = (v158[2] >> 6) & 1 | (2 * v251);
          v156[2] = 18;
          goto LABEL_239;
        }
      }
      else
      {
        v7 = v458;
        a1 = v459;
        DWORD1(v462) = 0;
      }
      v252 = 0;
LABEL_239:
      DWORD2(v462) = v252;
      v277 = a6;
      do
      {
        geo::ReadBitstream::unpackRice2(v121, &v462);
        --v277;
      }
      while (v277);
      v162 = v121[2];
      goto LABEL_242;
    default:
      return 3;
  }
}

void sub_188703A34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D76437C](v2, 0x20C4093837F09);
  MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::MercatorDequantizer::readInfo(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64x2_t v21;
  int8x16_t v22;
  float64x2_t v23;

  v2 = a2[6];
  v3 = a2[7];
  v4 = v2 + 2;
  if (v2 + 2 > v3)
    return 0;
  v6 = a2[5];
  *(_WORD *)a1 = *(_WORD *)(v6 + v2);
  a2[6] = v4;
  v7 = v2 + 4;
  if (v2 + 4 > v3)
    return 0;
  v8 = *(unsigned __int16 *)(v6 + v4);
  *(_WORD *)(a1 + 2) = v8;
  a2[6] = v7;
  v9 = v2 + 8;
  if (v2 + 8 > v3)
    return 0;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(v6 + v7);
  a2[6] = v9;
  v10 = v2 + 10;
  if (v2 + 10 > v3)
    return 0;
  *(_WORD *)(a1 + 8) = *(_WORD *)(v6 + v9);
  a2[6] = v10;
  v11 = v2 + 12;
  if (v2 + 12 > v3)
    return 0;
  *(_WORD *)(a1 + 10) = *(_WORD *)(v6 + v10);
  a2[6] = v11;
  if (v2 + 16 > v3)
    return 0;
  v12 = *(float *)(v6 + v11);
  *(float *)(a1 + 12) = v12;
  v13 = a2[6];
  v14 = a2[7];
  a2[6] = v13 + 4;
  v15 = 1.0 / v12;
  *(double *)(a1 + 16) = v15;
  v16 = v13 + 6;
  if (v13 + 6 > v14)
    return 0;
  v17 = a2[5];
  *(_WORD *)(a1 + 40) = *(_WORD *)(v17 + v13 + 4);
  a2[6] = v16;
  v18 = v13 + 8;
  if (v13 + 8 > v14)
    return 0;
  v19 = *(unsigned __int16 *)(v17 + v16);
  *(_WORD *)(a1 + 42) = v19;
  a2[6] = v18;
  v20 = v13 + 12;
  if (v20 > v14)
    return 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(v17 + v18);
  a2[6] = v20;
  v21.i64[0] = -1;
  v21.i64[1] = -1;
  v22 = (int8x16_t)vaddw_u32(v21, (uint32x2_t)__PAIR64__(v19, v8));
  v21.i64[0] = 0xFFFFFFFFLL;
  v21.i64[1] = 0xFFFFFFFFLL;
  v23 = vcvtq_f64_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(1uLL), (uint64x2_t)vandq_s8(v22, (int8x16_t)v21)));
  __asm { FMOV            V2.2D, #1.0 }
  *(float64x2_t *)(a1 + 24) = vdivq_f64(_Q2, v23);
  *(double *)(a1 + 16) = v15;
  *(_BYTE *)(a1 + 48) = 1;
  return 1;
}

void std::vector<GeoCodecsDaVinciAttributedMesh,geo::StdAllocator<GeoCodecsDaVinciAttributedMesh,geo::codec::Allocator>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  _OWORD *v17;
  _OWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;

  v4 = *a1;
  v5 = (_OWORD *)a1[1];
  v6 = ((uint64_t)v5 - *a1) >> 5;
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return;
    v18 = (_OWORD *)(v4 + 32 * a2);
    while (v5 != v18)
    {
      v19 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v5 -= 2;
    }
LABEL_26:
    a1[1] = (uint64_t)v18;
    return;
  }
  v8 = a1[2];
  if (v7 <= (v8 - (uint64_t)v5) >> 5)
  {
    v18 = &v5[2 * v7];
    v22 = 32 * a2 - 32 * v6;
    do
    {
      if (v5)
      {
        *v5 = 0uLL;
        v5[1] = 0uLL;
      }
      v5 += 2;
      v22 -= 32;
    }
    while (v22);
    goto LABEL_26;
  }
  if (a2 >> 59)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v9 = v8 - v4;
  v10 = v9 >> 4;
  if (v9 >> 4 <= a2)
    v10 = a2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 32 * v11, 8);
  v13 = (_OWORD *)(v12 + 32 * v6);
  v14 = v12 + 32 * a2;
  v15 = 32 * a2 - 32 * v6;
  v16 = 0uLL;
  v17 = v13;
  do
  {
    if (v17)
    {
      *v17 = 0uLL;
      v17[1] = 0uLL;
    }
    v17 += 2;
    v15 -= 32;
  }
  while (v15);
  v23 = v12 + 32 * v11;
  v24 = *a1;
  v25 = a1[1];
  if (v25 == *a1)
  {
    *a1 = (uint64_t)v13;
    a1[1] = v14;
    v27 = a1[2];
    a1[2] = v23;
  }
  else
  {
    do
    {
      *(v13 - 2) = *(_OWORD *)(v25 - 32);
      v16 = *(__n128 *)(v25 - 16);
      *(v13 - 1) = v16;
      v13 -= 2;
      *(_QWORD *)(v25 - 16) = 0;
      *(_QWORD *)(v25 - 8) = 0;
      v25 -= 32;
    }
    while (v25 != v24);
    v25 = *a1;
    v26 = a1[1];
    *a1 = (uint64_t)v13;
    a1[1] = v14;
    v27 = a1[2];
    a1[2] = v23;
    while (v26 != v25)
    {
      v28 = *(std::__shared_weak_count **)(v26 - 8);
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v26 -= 32;
    }
  }
  if (v25)
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)a1[3] + 40))(a1[3], v25, v27 - v25, v16);
}

void std::vector<GeoCodecsDaVinciBuilding,geo::StdAllocator<GeoCodecsDaVinciBuilding,geo::codec::Allocator>>::__append(unint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  v4 = a1[1];
  v5 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = v4 + 40 * a2;
      v12 = 40 * a2;
      do
      {
        if (v4)
        {
          *(_QWORD *)(v4 + 32) = 0;
          *(_OWORD *)v4 = 0uLL;
          *(_OWORD *)(v4 + 16) = 0uLL;
        }
        v4 += 40;
        v12 -= 40;
      }
      while (v12);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x666666666666666)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x333333333333333)
      v9 = 0x666666666666666;
    else
      v9 = v7;
    if (v9)
      v10 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 40 * v9, 8);
    else
      v10 = 0;
    v13 = v10 + 40 * v6;
    v14 = 40 * a2;
    v15 = v13 + 40 * a2;
    v16 = 0uLL;
    v17 = v13;
    do
    {
      if (v17)
      {
        *(_QWORD *)(v17 + 32) = 0;
        *(_OWORD *)v17 = 0uLL;
        *(_OWORD *)(v17 + 16) = 0uLL;
      }
      v17 += 40;
      v14 -= 40;
    }
    while (v14);
    v18 = v10 + 40 * v9;
    v19 = *a1;
    v20 = a1[1];
    if (v20 == *a1)
    {
      *a1 = v13;
      a1[1] = v15;
      v23 = a1[2];
      a1[2] = v18;
    }
    else
    {
      do
      {
        v21 = *(_OWORD *)(v20 - 40);
        v20 -= 40;
        *(_OWORD *)(v13 - 40) = v21;
        v13 -= 40;
        *(_QWORD *)v20 = 0;
        *(_QWORD *)(v20 + 8) = 0;
        v16 = *(__n128 *)(v20 + 16);
        *(_QWORD *)(v13 + 29) = *(_QWORD *)(v20 + 29);
        *(__n128 *)(v13 + 16) = v16;
      }
      while (v20 != v19);
      v20 = *a1;
      v22 = a1[1];
      *a1 = v13;
      a1[1] = v15;
      v23 = a1[2];
      a1[2] = v18;
      while (v22 != v20)
      {
        v24 = *(std::__shared_weak_count **)(v22 - 32);
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 40;
      }
    }
    if (v20)
      (*(void (**)(unint64_t, unint64_t, unint64_t, __n128))(*(_QWORD *)a1[3] + 40))(a1[3], v20, v23 - v20, v16);
  }
}

uint64_t std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplateValue,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplateValue,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *(_QWORD **)(result + 8);
  v6 = (uint64_t)v4 - *(_QWORD *)result;
  v7 = v6 >> 3;
  v8 = a2 - (v6 >> 3);
  if (a2 <= v6 >> 3)
  {
    if (a2 >= v6 >> 3)
      return result;
    v16 = (_QWORD *)(v5 + 8 * a2);
    goto LABEL_14;
  }
  v9 = *(_QWORD *)(result + 16);
  if (v8 <= (v9 - (uint64_t)v4) >> 3)
  {
    v16 = &v4[v8];
    v17 = 8 * a2 - 8 * v7;
    do
    {
      if (v4)
        *v4 = 0;
      ++v4;
      v17 -= 8;
    }
    while (v17);
LABEL_14:
    *(_QWORD *)(result + 8) = v16;
    return result;
  }
  v10 = v9 - v5;
  v11 = (v9 - v5) >> 2;
  if (v11 <= a2)
    v11 = a2;
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v11;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * v12, 4);
  v13 = (_QWORD *)(result + 8 * v7);
  v14 = 8 * a2 - 8 * v7;
  v15 = v13;
  do
  {
    if (v15)
      *v15 = 0;
    ++v15;
    v14 -= 8;
  }
  while (v14);
  v19 = *(_QWORD *)v3;
  v18 = *(_QWORD *)(v3 + 8);
  if (v18 != *(_QWORD *)v3)
  {
    v20 = v18 - *(_QWORD *)v3 - 8;
    if (v20 < 0x58)
      goto LABEL_31;
    if ((unint64_t)(v18 - (v6 + result)) < 0x20)
      goto LABEL_31;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = v18 - v22;
    v13 = (_QWORD *)((char *)v13 - v22);
    v24 = (_OWORD *)(result + 8 * v7 - 16);
    v25 = (__int128 *)(v18 - 16);
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 2;
      v26 -= 4;
    }
    while (v26);
    v18 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v28 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *--v13 = v28;
      }
      while (v18 != v19);
    }
    v18 = *(_QWORD *)v3;
  }
  *(_QWORD *)v3 = v13;
  *(_QWORD *)(v3 + 8) = result + 8 * a2;
  v29 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = result + 8 * v12;
  if (v18)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v18, v29 - v18);
  return result;
}

geo::codec::Allocator **std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::codec::Allocator>>::vector(geo::codec::Allocator **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  geo::codec::Allocator *v6;
  geo::codec::Allocator *v7;
  geo::codec::Allocator *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  a1[3] = (geo::codec::Allocator *)v4;
  if (a2)
  {
    v5 = 40 * a2;
    v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5, 8);
    v7 = v6;
    *a1 = v6;
    a1[1] = v6;
    v8 = (geo::codec::Allocator *)((char *)v6 + v5);
    a1[2] = (geo::codec::Allocator *)((char *)v6 + v5);
    do
    {
      if (v7)
      {
        *((_QWORD *)v7 + 4) = 0;
        *(_OWORD *)v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
        v6 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v6);
        *((_QWORD *)v7 + 4) = v6;
      }
      v7 = (geo::codec::Allocator *)((char *)v7 + 40);
      v5 -= 40;
    }
    while (v5);
    a1[1] = v8;
  }
  return a1;
}

void sub_1887042D0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = *(_QWORD *)(v4 - 32);
        if (v6)
        {
          *(_QWORD *)(v4 - 24) = v6;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 - 8) + 40))(*(_QWORD *)(v4 - 8), v6, *(_QWORD *)(v4 - 16) - v6);
        }
        v4 -= 40;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v5, v1[2] - v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::vector(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  a1[3] = v4;
  if (a2)
  {
    v5 = 12 * a2;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5, 4);
    *a1 = v6;
    a1[1] = v6;
    v7 = v6 + v5;
    a1[2] = v6 + v5;
    do
    {
      if (v6)
      {
        *(_DWORD *)(v6 + 8) = 0;
        *(_QWORD *)v6 = 0;
      }
      v6 += 12;
      v5 -= 12;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1887043D8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<GeoCodecsAnnotationValue,geo::StdAllocator<GeoCodecsAnnotationValue,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *(_QWORD **)(result + 8);
  v6 = ((uint64_t)v4 - *(_QWORD *)result) >> 4;
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return result;
    v15 = (_QWORD *)(v5 + 16 * a2);
LABEL_15:
    *(_QWORD *)(result + 8) = v15;
    return result;
  }
  v8 = *(_QWORD *)(result + 16);
  if (v7 <= (v8 - (uint64_t)v4) >> 4)
  {
    v15 = &v4[2 * v7];
    v16 = 16 * a2 - 16 * v6;
    do
    {
      if (v4)
      {
        *v4 = 0;
        v4[1] = 0;
      }
      v4 += 2;
      v16 -= 16;
    }
    while (v16);
    goto LABEL_15;
  }
  if (a2 >> 60)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v9 = v8 - v5;
  v10 = (v8 - v5) >> 3;
  if (v10 <= a2)
    v10 = a2;
  if (v9 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 16 * v11, 8);
  v12 = (_QWORD *)(result + 16 * v6);
  v13 = 16 * a2 - 16 * v6;
  v14 = v12;
  do
  {
    if (v14)
    {
      *v14 = 0;
      v14[1] = 0;
    }
    v14 += 2;
    v13 -= 16;
  }
  while (v13);
  v18 = *(_QWORD *)v3;
  v17 = *(_QWORD *)(v3 + 8);
  if (v17 != *(_QWORD *)v3)
  {
    do
    {
      *((_OWORD *)v12 - 1) = *(_OWORD *)(v17 - 16);
      v12 -= 2;
      v17 -= 16;
    }
    while (v17 != v18);
    v17 = *(_QWORD *)v3;
  }
  *(_QWORD *)v3 = v12;
  *(_QWORD *)(v3 + 8) = result + 16 * a2;
  v19 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = result + 16 * v11;
  if (v17)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v17, v19 - v17);
  return result;
}

uint64_t std::vector<GeoCodecsAnnotation,geo::StdAllocator<GeoCodecsAnnotation,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *(_QWORD **)(result + 8);
  v6 = ((uint64_t)v4 - *(_QWORD *)result) >> 4;
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return result;
    v15 = (_QWORD *)(v5 + 16 * a2);
LABEL_15:
    *(_QWORD *)(result + 8) = v15;
    return result;
  }
  v8 = *(_QWORD *)(result + 16);
  if (v7 <= (v8 - (uint64_t)v4) >> 4)
  {
    v15 = &v4[2 * v7];
    v16 = 16 * a2 - 16 * v6;
    do
    {
      if (v4)
      {
        *v4 = 0;
        v4[1] = 0;
      }
      v4 += 2;
      v16 -= 16;
    }
    while (v16);
    goto LABEL_15;
  }
  if (a2 >> 60)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v9 = v8 - v5;
  v10 = (v8 - v5) >> 3;
  if (v10 <= a2)
    v10 = a2;
  if (v9 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 16 * v11, 4);
  v12 = (_QWORD *)(result + 16 * v6);
  v13 = 16 * a2 - 16 * v6;
  v14 = v12;
  do
  {
    if (v14)
    {
      *v14 = 0;
      v14[1] = 0;
    }
    v14 += 2;
    v13 -= 16;
  }
  while (v13);
  v18 = *(_QWORD *)v3;
  v17 = *(_QWORD *)(v3 + 8);
  if (v17 != *(_QWORD *)v3)
  {
    do
    {
      *((_OWORD *)v12 - 1) = *(_OWORD *)(v17 - 16);
      v12 -= 2;
      v17 -= 16;
    }
    while (v17 != v18);
    v17 = *(_QWORD *)v3;
  }
  *(_QWORD *)v3 = v12;
  *(_QWORD *)(v3 + 8) = result + 16 * a2;
  v19 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = result + 16 * v11;
  if (v17)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v17, v19 - v17);
  return result;
}

uint64_t geo::codec::decodeIntCompressorArray<long long>(_QWORD *a1, uint64_t *a2, char a3, char a4, unint64_t a5, uint64x2_t *a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;

  v17 = 0;
  if (!a2)
    return 0;
  result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v17);
  if ((_DWORD)result)
  {
    v13 = v17;
    v14 = a1[6];
    v15 = v14 + v17;
    if (v15 <= a1[7])
    {
      v16 = (unsigned __int8 *)(a1[5] + v14);
      a1[6] = v15;
      return mgcl::ints::IntDecompressor<long long>::decompress(a2, v16, v13, a3, a4, a5, a6) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::vector<GeoCodecsPhysicalFeature,geo::StdAllocator<GeoCodecsPhysicalFeature,geo::codec::Allocator>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  _OWORD *v17;
  _OWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;

  v4 = *a1;
  v5 = (_OWORD *)a1[1];
  v6 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v5 - *a1) >> 4);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return;
    v18 = (_OWORD *)(v4 + 176 * a2);
    while (1)
    {
      if (v5 == v18)
        goto LABEL_29;
      v19 = (std::__shared_weak_count *)*((_QWORD *)v5 - 18);
      if (!v19)
        break;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (v21)
        break;
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v22 = (std::__shared_weak_count *)*((_QWORD *)v5 - 21);
      if (v22)
        goto LABEL_22;
LABEL_15:
      v5 -= 11;
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)v5 - 21);
    if (!v22)
      goto LABEL_15;
LABEL_22:
    std::__shared_weak_count::__release_weak(v22);
    goto LABEL_15;
  }
  v8 = a1[2];
  if (0x2E8BA2E8BA2E8BA3 * ((v8 - (uint64_t)v5) >> 4) >= v7)
  {
    v18 = &v5[11 * v7];
    v23 = 176 * a2 - 16 * (((uint64_t)v5 - *a1) >> 4);
    do
    {
      if (v5)
      {
        v5[9] = 0uLL;
        v5[10] = 0uLL;
        v5[7] = 0uLL;
        v5[8] = 0uLL;
        v5[5] = 0uLL;
        v5[6] = 0uLL;
        v5[3] = 0uLL;
        v5[4] = 0uLL;
        v5[1] = 0uLL;
        v5[2] = 0uLL;
        *v5 = 0uLL;
      }
      v5 += 11;
      v23 -= 176;
    }
    while (v23);
LABEL_29:
    a1[1] = (uint64_t)v18;
  }
  else
  {
    if (a2 > 0x1745D1745D1745DLL)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v9 = 0x2E8BA2E8BA2E8BA3 * ((v8 - v4) >> 4);
    v10 = 2 * v9;
    if (2 * v9 <= a2)
      v10 = a2;
    if (v9 >= 0xBA2E8BA2E8BA2ELL)
      v11 = 0x1745D1745D1745DLL;
    else
      v11 = v10;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 176 * v11, 8);
    v13 = (_OWORD *)(v12 + 176 * v6);
    v14 = v12 + 176 * a2;
    v15 = 176 * a2 - 176 * v6;
    v16 = 0uLL;
    v17 = v13;
    do
    {
      if (v17)
      {
        v17[9] = 0uLL;
        v17[10] = 0uLL;
        v17[7] = 0uLL;
        v17[8] = 0uLL;
        v17[5] = 0uLL;
        v17[6] = 0uLL;
        v17[3] = 0uLL;
        v17[4] = 0uLL;
        v17[1] = 0uLL;
        v17[2] = 0uLL;
        *v17 = 0uLL;
      }
      v17 += 11;
      v15 -= 176;
    }
    while (v15);
    v24 = v12 + 176 * v11;
    v25 = *a1;
    v26 = a1[1];
    if (v26 != *a1)
    {
      v27 = 0;
      do
      {
        v28 = &v13[v27 / 0x10];
        v29 = v26 + v27;
        *(v28 - 11) = *(_OWORD *)(v26 + v27 - 176);
        *(_QWORD *)(v29 - 176) = 0;
        *(_QWORD *)(v29 - 168) = 0;
        *(v28 - 10) = *(_OWORD *)(v26 + v27 - 160);
        *((_QWORD *)v28 - 18) = *(_QWORD *)(v26 + v27 - 144);
        *(_QWORD *)(v29 - 152) = 0;
        *(_QWORD *)(v29 - 144) = 0;
        v30 = *(_OWORD *)(v26 + v27 - 136);
        v31 = *(_OWORD *)(v26 + v27 - 120);
        *((_DWORD *)v28 - 26) = *(_DWORD *)(v26 + v27 - 104);
        *(_OWORD *)((char *)v28 - 120) = v31;
        *(_OWORD *)((char *)v28 - 136) = v30;
        v32 = *(_OWORD *)(v26 + v27 - 96);
        *((_QWORD *)v28 - 10) = *(_QWORD *)(v26 + v27 - 80);
        *(v28 - 6) = v32;
        v16 = *(__n128 *)(v26 + v27 - 72);
        v33 = *(_OWORD *)(v26 + v27 - 56);
        v34 = *(_OWORD *)(v26 + v27 - 40);
        *(_OWORD *)((char *)v28 - 29) = *(_OWORD *)(v26 + v27 - 29);
        *(_OWORD *)((char *)v28 - 40) = v34;
        *(_OWORD *)((char *)v28 - 56) = v33;
        *(__n128 *)((char *)v28 - 72) = v16;
        *(_QWORD *)((char *)v28 - 12) = *(_QWORD *)(v26 + v27 - 12);
        v27 -= 176;
      }
      while (v26 + v27 != v25);
      v26 = *a1;
      v35 = a1[1];
      *a1 = (uint64_t)&v13[v27 / 0x10];
      a1[1] = v14;
      v36 = a1[2];
      a1[2] = v24;
      while (1)
      {
        if (v35 == v26)
          goto LABEL_45;
        v37 = *(std::__shared_weak_count **)(v35 - 144);
        if (!v37)
          break;
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (v39)
          break;
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
        v40 = *(std::__shared_weak_count **)(v35 - 168);
        if (v40)
          goto LABEL_41;
LABEL_34:
        v35 -= 176;
      }
      v40 = *(std::__shared_weak_count **)(v35 - 168);
      if (!v40)
        goto LABEL_34;
LABEL_41:
      std::__shared_weak_count::__release_weak(v40);
      goto LABEL_34;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v14;
    v36 = a1[2];
    a1[2] = v24;
LABEL_45:
    if (v26)
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)a1[3] + 40))(a1[3], v26, v36 - v26, v16);
  }
}

uint64_t mgcl::bldg::decompress(unsigned __int8 *a1, uint64_t a2, uint64_t a3, __int128 *a4, _DWORD *a5, uint64_t (**a6)())
{
  uint64_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v18[137];
  uint64_t v19;
  _BYTE v20[6];
  _BYTE v21[46];
  void *__p;
  _BYTE *v23;
  uint64_t v24;
  _BYTE v25[24];

  *a5 = 0;
  v18[3] = 0;
  v18[136] = 0x8000800080008000;
  memset_pattern16(&v19, &memset_pattern, 0xAuLL);
  memset_pattern16(v20, &memset_pattern_272, 0x10uLL);
  memset_pattern16(v21, &memset_pattern_273, 0xAuLL);
  *(_DWORD *)&v21[26] = 16843009;
  v21[30] = 0;
  __p = 0;
  v24 = 0;
  v23 = 0;
  *(_OWORD *)v25 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  *(_QWORD *)&v25[16] = *((_QWORD *)a4 + 2);
  *((_QWORD *)a4 + 2) = 0;
  v12 = mgcl::bldg::BldgDecoderV1::decode((unint64_t)v18, a3, a1, a2, a6);
  v13 = *(void **)v25;
  if (!(_DWORD)v12)
  {
    v14 = *a4;
    *(_QWORD *)a4 = *(_QWORD *)v25;
    v15 = *((_QWORD *)a4 + 2);
    v16 = *(_OWORD *)&v25[8];
    *(_OWORD *)v25 = v14;
    *(_QWORD *)&v25[16] = v15;
    *(__int128 *)((char *)a4 + 8) = v16;
    *a5 = (unint64_t)(v23 - (_BYTE *)__p) >> 5;
    v13 = (void *)v14;
  }
  if (v13)
  {
    *(_QWORD *)&v25[8] = v13;
    operator delete(v13);
  }
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_188704C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  mgcl::bldg::BldgDecoderV1::~BldgDecoderV1((mgcl::bldg::BldgDecoderV1 *)&a9);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::decodeSectionZEncoding(geo::codec::Allocator *a1, _QWORD *a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  double v18;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int32x4_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  float v51;
  _BOOL4 v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  int v58;
  float v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int32x4_t *v71;
  unint64_t v72;
  _DWORD *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int32x4_t v77;
  unsigned int v78;

  if (!a2)
    return 0;
  v3 = *((_QWORD *)a1 + 2);
  if (v3 + 1 > 8 * *((_QWORD *)a1 + 1))
    return 0;
  v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + (v3 >> 3));
  *((_QWORD *)a1 + 2) = v3 + 1;
  if (((v4 >> (~(_BYTE)v3 & 7)) & 1) == 0)
    return 1;
  v6 = geo::codec::Allocator::instance(a1);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 24))(v6, 4, a2[2]);
  a2[3] = v7;
  v8 = *((_QWORD *)a1 + 2);
  v9 = 8 * *((_QWORD *)a1 + 1);
  if (v8 + 5 > v9)
    return 0;
  v10 = v7;
  v11 = 0;
  v12 = *(_QWORD *)a1;
  v13 = 5;
  do
  {
    v14 = 8 - (v8 & 7);
    if (v13 < v14)
      v14 = v13;
    v11 = (*(unsigned __int8 *)(v12 + (v8 >> 3)) >> (8 - (v8 & 7) - v14)) & ~(-1 << v14) | (v11 << v14);
    v8 += v14;
    *((_QWORD *)a1 + 2) = v8;
    v13 -= v14;
  }
  while (v13);
  v15 = (v11 + 1);
  if (v8 + v15 > v9)
    return 0;
  if (v11 == -1)
  {
    v18 = 0.0;
    if (v8 + 6 > v9)
      return 0;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = 8 - (v8 & 7);
      if (v15 < v17)
        v17 = v15;
      v16 = (*(unsigned __int8 *)(v12 + (v8 >> 3)) >> (8 - (v8 & 7) - v17)) & ~(-1 << v17) | (v16 << v17);
      v8 += v17;
      *((_QWORD *)a1 + 2) = v8;
      v15 -= v17;
    }
    while (v15);
    v18 = (double)v16 * 0.001;
    if (v8 + 6 > v9)
      return 0;
  }
  v20 = 0;
  v21 = 6;
  do
  {
    v22 = 8 - (v8 & 7);
    if (v21 < v22)
      v22 = v21;
    v20 = (*(unsigned __int8 *)(v12 + (v8 >> 3)) >> (8 - (v8 & 7) - v22)) & ~(-1 << v22) | (v20 << v22);
    v8 += v22;
    *((_QWORD *)a1 + 2) = v8;
    v21 -= v22;
  }
  while (v21);
  v23 = (v20 + 1);
  if (v8 + v23 > v9)
    return 0;
  if (v20 != -1)
  {
    v24 = 0;
    do
    {
      v25 = 8 - (v8 & 7);
      if (v23 < v25)
        v25 = v23;
      v24 = (*(unsigned __int8 *)(v12 + (v8 >> 3)) >> (8 - (v8 & 7) - v25)) & (unint64_t)~(-1 << v25) | (v24 << v25);
      v8 += v25;
      *((_QWORD *)a1 + 2) = v8;
      v23 -= v25;
    }
    while (v23);
    if (v24)
    {
      if (v8 + 1 <= v9)
      {
        v26 = *(unsigned __int8 *)(v12 + (v8 >> 3));
        *((_QWORD *)a1 + 2) = v8 + 1;
        if (((v26 >> (~(_BYTE)v8 & 7)) & 1) != 0)
          v27 = -(uint64_t)v24;
        else
          v27 = v24;
        ++v8;
        goto LABEL_37;
      }
      return 0;
    }
  }
  v27 = 0;
LABEL_37:
  if (v8 + 6 > v9)
    return 0;
  v28 = 0;
  v29 = 6;
  do
  {
    v30 = 8 - (v8 & 7);
    if (v29 < v30)
      v30 = v29;
    v28 = (*(unsigned __int8 *)(v12 + (v8 >> 3)) >> (8 - (v8 & 7) - v30)) & ~(-1 << v30) | (v28 << v30);
    v8 += v30;
    *((_QWORD *)a1 + 2) = v8;
    v29 -= v30;
  }
  while (v29);
  if (v8 + 6 > v9)
    return 0;
  v31 = 0;
  v32 = (v28 + 1);
  v33 = 6;
  do
  {
    v34 = 8 - (v8 & 7);
    if (v33 < v34)
      v34 = v33;
    v31 = (*(unsigned __int8 *)(v12 + (v8 >> 3)) >> (8 - (v8 & 7) - v34)) & ~(-1 << v34) | (v31 << v34);
    v8 += v34;
    *((_QWORD *)a1 + 2) = v8;
    v33 -= v34;
  }
  while (v33);
  v35 = a2[5];
  if (v35)
  {
    v36 = 0;
    v37 = 0;
    v38 = (v31 + 1);
    v74 = v38;
    v39 = vdupq_n_s32(0x7F7FFFFFu);
    v75 = v32;
    v77 = v39;
    while (1)
    {
      v40 = *((_QWORD *)a1 + 2);
      v41 = v40 + 1;
      v42 = 8 * *((_QWORD *)a1 + 1);
      if (v40 + 1 > v42)
        return 0;
      v43 = (unint64_t *)(a2[4] + 16 * v36);
      v44 = *v43;
      v45 = v43[1];
      v46 = *(_QWORD *)a1;
      v47 = *(unsigned __int8 *)(*(_QWORD *)a1 + (v40 >> 3));
      *((_QWORD *)a1 + 2) = v41;
      if (((v47 >> (~(_BYTE)v40 & 7)) & 1) != 0)
      {
        if (v41 + v32 > v42)
          return 0;
        v76 = v36;
        v48 = 0;
        if ((_DWORD)v32)
        {
          v49 = v32;
          do
          {
            v50 = 8 - (v41 & 7);
            if (v49 < v50)
              v50 = v49;
            v48 = (*(unsigned __int8 *)(v46 + (v41 >> 3)) >> (8 - (v41 & 7) - v50)) & ~(-1 << v50) | (v48 << v50);
            v41 += v50;
            *((_QWORD *)a1 + 2) = v41;
            v49 -= v50;
          }
          while (v49);
        }
        if (v37 >= a2[2])
          return 0;
        v51 = v18 * (double)(uint64_t)(v27 + v48);
        *(float *)(v10 + 4 * v44) = v51;
        v78 = 0;
        v52 = BitstreamUnpack((uint64_t *)a1, (int *)&v78, v38);
        v39 = v77;
        if (!v52)
          return 0;
        v53 = v37 + 1;
        v54 = v44 + 1;
        if (v44 + 1 < v45 + v44)
        {
          v55 = a2[2];
          v56 = v78;
          v57 = 32 - v78;
          while (v53 < v55)
          {
            v60 = *((_QWORD *)a1 + 2);
            if (v60 + v56 > 8 * *((_QWORD *)a1 + 1))
              break;
            if ((_DWORD)v56)
            {
              v61 = 0;
              v62 = *(_QWORD *)a1;
              v63 = v56;
              do
              {
                v64 = 8 - (v60 & 7);
                if (v63 < v64)
                  v64 = v63;
                v61 = (*(unsigned __int8 *)(v62 + (v60 >> 3)) >> (8 - (v60 & 7) - v64)) & ~(-1 << v64) | (v61 << v64);
                v60 += v64;
                *((_QWORD *)a1 + 2) = v60;
                v63 -= v64;
              }
              while (v63);
              v58 = v61 << v57 >> v57;
            }
            else
            {
              v58 = 0;
            }
            v48 += v58;
            v59 = v18 * (double)(uint64_t)(v27 + v48);
            *(float *)(v10 + 4 * v54) = v59;
            ++v53;
            if (++v54 == v45 + v44)
            {
              v53 = v45 + v37;
              goto LABEL_80;
            }
          }
          return 0;
        }
LABEL_80:
        v35 = a2[5];
        v37 = v53;
        v38 = v74;
        v32 = v75;
        v36 = v76;
      }
      else if (v44 < v45 + v44)
      {
        v65 = a2[2];
        if (v37 > v65)
          v65 = v37;
        v66 = v45 - 1;
        if (v45 - 1 >= v65 - v37)
          v66 = v65 - v37;
        v67 = v66 + 1;
        if (v67 > 8)
        {
          v69 = v67 & 7;
          if ((v67 & 7) == 0)
            v69 = 8;
          v70 = v67 - v69;
          v68 = v44 + v70;
          v37 += v70;
          v71 = (int32x4_t *)(v10 + 16 + 4 * v44);
          do
          {
            v71[-1] = v39;
            *v71 = v39;
            v71 += 2;
            v70 -= 8;
          }
          while (v70);
        }
        else
        {
          v68 = v44;
        }
        v72 = v45 + v44 - v68;
        v73 = (_DWORD *)(v10 + 4 * v68);
        while (v65 != v37)
        {
          *v73++ = 2139095039;
          ++v37;
          if (!--v72)
            goto LABEL_88;
        }
        return 0;
      }
LABEL_88:
      if (++v36 >= v35)
        return v37 == a2[2];
    }
  }
  v37 = 0;
  return v37 == a2[2];
}

BOOL geo::codec::decodeAttributeSet<GeoCodecsFeature>(int a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  _OWORD *v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  int *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  BOOL v110;
  unint64_t v112;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  __int128 v120;
  uint64_t v121;
  std::__shared_weak_count *v122;

  v121 = 0;
  v122 = 0;
  v120 = 0uLL;
  v118 = 0;
  v119 = 0;
  v6 = a2[2];
  v7 = 8 * a2[1];
  if (v6 + 5 > v7)
    goto LABEL_17;
  LODWORD(v9) = 0;
  v10 = *a2;
  v11 = 5;
  do
  {
    v12 = 8 - (v6 & 7);
    if (v11 < v12)
      v12 = v11;
    v9 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v12)) & ~(-1 << v12) | ((_DWORD)v9 << v12);
    v6 += v12;
    a2[2] = v6;
    v11 -= v12;
  }
  while (v11);
  if (v6 + 5 > v7)
    goto LABEL_17;
  LODWORD(v13) = 0;
  v14 = 5;
  do
  {
    v15 = 8 - (v6 & 7);
    if (v14 < v15)
      v15 = v14;
    v13 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v15)) & ~(-1 << v15) | ((_DWORD)v13 << v15);
    v6 += v15;
    a2[2] = v6;
    v14 -= v15;
  }
  while (v14);
  if (v6 + 5 > v7)
    goto LABEL_17;
  LODWORD(v16) = 0;
  v17 = 5;
  do
  {
    v18 = 8 - (v6 & 7);
    if (v17 < v18)
      v18 = v17;
    v16 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v18)) & ~(-1 << v18) | ((_DWORD)v16 << v18);
    v6 += v18;
    a2[2] = v6;
    v17 -= v18;
  }
  while (v17);
  if (v6 + 5 > v7)
  {
LABEL_17:
    v19 = 0;
    goto LABEL_18;
  }
  LODWORD(v30) = 0;
  v31 = 5;
  do
  {
    v32 = 8 - (v6 & 7);
    if (v31 < v32)
      v32 = v31;
    v30 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v32)) & ~(-1 << v32) | ((_DWORD)v30 << v32);
    v6 += v32;
    a2[2] = v6;
    v31 -= v32;
  }
  while (v31);
  if (!a3)
  {
    v19 = 1;
    goto LABEL_18;
  }
  v116 = 0;
  v19 = 0;
  v112 = a3;
  while (1)
  {
    if (v121)
    {
      geo::codec::copyFeatureStyleAttributes(&v117, v121);
      v33 = v117;
      v117 = 0uLL;
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
      v120 = v33;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
      if (*((_QWORD *)&v117 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
LABEL_60:
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    else
    {
      v40 = (char *)operator new(0x40uLL);
      *((_QWORD *)v40 + 1) = 0;
      *((_QWORD *)v40 + 2) = 0;
      *(_QWORD *)v40 = &off_1E1BFB2F8;
      *(_OWORD *)(v40 + 24) = 0u;
      *(_OWORD *)(v40 + 40) = 0u;
      *(_DWORD *)(v40 + 55) = 0;
      v41 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
      *((_QWORD *)v40 + 3) = v41;
      if (v41)
      {
        *(_QWORD *)&v42 = -1;
        *((_QWORD *)&v42 + 1) = -1;
        v41[14] = v42;
        v41[15] = v42;
        v41[12] = v42;
        v41[13] = v42;
        v41[10] = v42;
        v41[11] = v42;
        v41[8] = v42;
        v41[9] = v42;
        v41[6] = v42;
        v41[7] = v42;
        v41[4] = v42;
        v41[5] = v42;
        v41[2] = v42;
        v41[3] = v42;
        *v41 = v42;
        v41[1] = v42;
      }
      if (a1 != -1)
      {
        *(_DWORD *)v41 = 5;
        *((_DWORD *)v41 + 1) = a1;
        v40[57] = 1;
      }
      v40[58] = a1;
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
      *(_QWORD *)&v120 = v40 + 24;
      *((_QWORD *)&v120 + 1) = v40;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          v37 = v43;
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          goto LABEL_60;
        }
      }
    }
    v46 = a2[2];
    v47 = 8 * a2[1];
    if (v46 + v16 > v47)
      goto LABEL_18;
    if ((_DWORD)v16)
    {
      v48 = 0;
      v49 = *a2;
      v50 = v16;
      do
      {
        v51 = 8 - (v46 & 7);
        if (v50 < v51)
          v51 = v50;
        v48 = (*(unsigned __int8 *)(v49 + (v46 >> 3)) >> (8 - (v46 & 7) - v51)) & ~(-1 << v51) | (v48 << v51);
        v46 += v51;
        a2[2] = v46;
        v50 -= v51;
      }
      while (v50);
      if (v48)
      {
        v52 = 0;
        v53 = (uint64_t *)v120;
        do
        {
          if (v46 + v9 > v47)
            goto LABEL_18;
          v54 = 0;
          if ((_DWORD)v9)
          {
            v55 = v9;
            do
            {
              v56 = 8 - (v46 & 7);
              if (v55 < v56)
                v56 = v55;
              v54 = (*(unsigned __int8 *)(v49 + (v46 >> 3)) >> (8 - (v46 & 7) - v56)) & ~(-1 << v56) | (v54 << v56);
              v46 += v56;
              a2[2] = v46;
              v55 -= v56;
            }
            while (v55);
          }
          if (v46 + v13 > v47)
            goto LABEL_18;
          v57 = 0;
          if ((_DWORD)v13)
          {
            v58 = v13;
            do
            {
              v59 = 8 - (v46 & 7);
              if (v58 < v59)
                v59 = v58;
              v57 = (*(unsigned __int8 *)(v49 + (v46 >> 3)) >> (8 - (v46 & 7) - v59)) & ~(-1 << v59) | (v57 << v59);
              v46 += v59;
              a2[2] = v46;
              v58 -= v59;
            }
            while (v58);
          }
          v60 = *((unsigned __int8 *)v53 + 33);
          v61 = *v53;
          if (*((_BYTE *)v53 + 33))
          {
            v62 = *((unsigned __int8 *)v53 + 33);
            v63 = (int *)(v61 + 4);
            v64 = v62;
            do
            {
              if (*(v63 - 1) == v54)
              {
                *v63 = v57;
                goto LABEL_70;
              }
              v63 += 2;
              --v64;
            }
            while (v64);
            if (v60 > 0x1F)
              goto LABEL_70;
          }
          else
          {
            v62 = 0;
          }
          v65 = (int *)(v61 + 8 * v62);
          *v65 = v54;
          v65[1] = v57;
          *((_BYTE *)v53 + 33) = v60 + 1;
LABEL_70:
          ++v52;
        }
        while (v52 != v48);
      }
    }
    if (v46 + v30 > v47)
      goto LABEL_18;
    if ((_DWORD)v30)
    {
      v66 = 0;
      v67 = *a2;
      v68 = v30;
      do
      {
        v69 = 8 - (v46 & 7);
        if (v68 < v69)
          v69 = v68;
        v66 = (*(unsigned __int8 *)(v67 + (v46 >> 3)) >> (8 - (v46 & 7) - v69)) & ~(-1 << v69) | (v66 << v69);
        v46 += v69;
        a2[2] = v46;
        v68 -= v69;
      }
      while (v68);
      if (v66)
        break;
    }
    v77 = v120;
    LODWORD(v71) = *(unsigned __int8 *)(v120 + 33);
LABEL_113:
    qsort(*(void **)v77, v71, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    *(_QWORD *)&v117 = v77;
    *((_QWORD *)&v117 + 1) = *((_QWORD *)&v120 + 1);
    v81 = v116;
    if (*((_QWORD *)&v120 + 1))
    {
      v82 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    v84 = FeatureStyleAttributesSet::insert(a4, (uint64_t *)&v117);
    v86 = *v84;
    v85 = v84[1];
    if (v85)
    {
      v87 = (unint64_t *)(v85 + 8);
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    v89 = v119;
    v118 = v86;
    v119 = (std::__shared_weak_count *)v85;
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v92 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
    if (*((_QWORD *)&v117 + 1))
    {
      v93 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v96 = v118;
    v95 = v119;
    if (v119)
    {
      v97 = (unint64_t *)&v119->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    v99 = a5 + v116 * a6;
    v100 = *(std::__shared_weak_count **)(v99 + 32);
    *(_QWORD *)(v99 + 24) = v96;
    *(_QWORD *)(v99 + 32) = v95;
    if (v100)
    {
      v101 = (unint64_t *)&v100->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v104 = v118;
    v103 = v119;
    if (v119)
    {
      v105 = (unint64_t *)&v119->__shared_owners_;
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
    v107 = v122;
    v121 = v104;
    v122 = v103;
    if (v107)
    {
      v108 = (unint64_t *)&v107->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    ++v116;
    v110 = v81 + 1 == v112;
    v19 = v81 + 1 >= v112;
    if (v110)
      goto LABEL_18;
  }
  v70 = 0;
  while (1)
  {
    v72 = a2[2];
    if (v72 + v9 > 8 * a2[1])
      break;
    v73 = 0;
    if ((_DWORD)v9)
    {
      v74 = *a2;
      v75 = v9;
      do
      {
        v76 = 8 - (v72 & 7);
        if (v75 < v76)
          v76 = v75;
        v73 = (*(unsigned __int8 *)(v74 + (v72 >> 3)) >> (8 - (v72 & 7) - v76)) & ~(-1 << v76) | (v73 << v76);
        v72 += v76;
        a2[2] = v72;
        v75 -= v76;
      }
      while (v75);
    }
    v77 = v120;
    LODWORD(v71) = *(unsigned __int8 *)(v120 + 33);
    if (*(_BYTE *)(v120 + 33))
    {
      v78 = *(_QWORD *)v120;
      v79 = *(unsigned __int8 *)(v120 + 33);
      v80 = *(_DWORD **)v120;
      while (*v80 != v73)
      {
        v80 += 2;
        if (!--v79)
          goto LABEL_100;
      }
      *(_BYTE *)(v120 + 33) = v71 - 1;
      *(_QWORD *)v80 = *(_QWORD *)(v78 + 8 * (v71 - 1));
      v71 = *(unsigned __int8 *)(v77 + 33);
      *(_QWORD *)(*(_QWORD *)v77 + 8 * v71) = -1;
    }
LABEL_100:
    if (++v70 == v66)
      goto LABEL_113;
  }
LABEL_18:
  v20 = v119;
  if (v119)
  {
    v21 = (unint64_t *)&v119->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
  if (*((_QWORD *)&v120 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v122;
  if (v122)
  {
    v27 = (unint64_t *)&v122->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  return v19;
}

void sub_188705AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *v26;

  shared_weak_owners = (std::__shared_weak_count *)v21[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v26);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t std::vector<GeoCodecsVectorTilePoint3D,geo::StdAllocator<GeoCodecsVectorTilePoint3D,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)result) >> 2);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return result;
    v15 = v5 + 12 * a2;
LABEL_15:
    *(_QWORD *)(result + 8) = v15;
    return result;
  }
  v8 = *(_QWORD *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 2) >= v7)
  {
    v15 = v4 + 12 * v7;
    v16 = 12 * a2 - 4 * ((v4 - *(_QWORD *)result) >> 2);
    do
    {
      if (v4)
      {
        *(_DWORD *)(v4 + 8) = 0;
        *(_QWORD *)v4 = 0;
      }
      v4 += 12;
      v16 -= 12;
    }
    while (v16);
    goto LABEL_15;
  }
  if (a2 > 0x1555555555555555)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v5) >> 2);
  v10 = 2 * v9;
  if (2 * v9 <= a2)
    v10 = a2;
  if (v9 >= 0xAAAAAAAAAAAAAAALL)
    v11 = 0x1555555555555555;
  else
    v11 = v10;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 12 * v11, 4);
  v12 = result + 12 * v6;
  v13 = 12 * a2 - 12 * v6;
  v14 = v12;
  do
  {
    if (v14)
    {
      *(_DWORD *)(v14 + 8) = 0;
      *(_QWORD *)v14 = 0;
    }
    v14 += 12;
    v13 -= 12;
  }
  while (v13);
  v18 = *(_QWORD *)v3;
  v17 = *(_QWORD *)(v3 + 8);
  if (v17 != *(_QWORD *)v3)
  {
    do
    {
      v19 = *(_QWORD *)(v17 - 12);
      v17 -= 12;
      v20 = *(_DWORD *)(v17 + 8);
      *(_QWORD *)(v12 - 12) = v19;
      v12 -= 12;
      *(_DWORD *)(v12 + 8) = v20;
    }
    while (v17 != v18);
    v17 = *(_QWORD *)v3;
  }
  *(_QWORD *)v3 = v12;
  *(_QWORD *)(v3 + 8) = result + 12 * a2;
  v21 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = result + 12 * v11;
  if (v17)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v17, v21 - v17);
  return result;
}

uint64_t geo::codec::_decodeMaterialModifiers(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v48 = 0;
  if (!geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v48 + 1))
  {
    v5 = 7959;
    goto LABEL_6;
  }
  if (HIDWORD(v48))
  {
    v4 = a1[6];
    if ((unint64_t)(v4 + 1) > a1[7])
    {
      v5 = 7964;
      goto LABEL_6;
    }
    v7 = *(unsigned __int8 *)(a1[5] + v4);
    a1[6] = v4 + 1;
    if (!geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v48))
    {
      v5 = 7965;
      goto LABEL_6;
    }
    v22 = v48;
    if ((_DWORD)v48)
    {
      v23 = a1[7];
      v24 = a1[6] + 1;
      do
      {
        if (v24 > v23)
        {
          v5 = 7969;
          goto LABEL_6;
        }
        a1[6] = v24;
        if (v24 + 1 > v23)
        {
          v5 = 7970;
          goto LABEL_6;
        }
        a1[6] = v24 + 1;
        v24 += 2;
        --v22;
      }
      while (v22);
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = *a2;
  v9 = HIDWORD(v48);
  v10 = *(_QWORD **)(*a2 + 2112);
  v11 = *(_QWORD *)(*a2 + 2104);
  v12 = ((uint64_t)v10 - v11) >> 4;
  v13 = HIDWORD(v48) - v12;
  if (HIDWORD(v48) <= v12)
  {
    if (HIDWORD(v48) >= v12)
      goto LABEL_41;
    *(_QWORD *)(v8 + 2112) = v11 + 16 * HIDWORD(v48);
    if (v9)
      goto LABEL_42;
    return 1;
  }
  v14 = *(_QWORD *)(v8 + 2120);
  if (v13 <= (v14 - (uint64_t)v10) >> 4)
  {
    v25 = &v10[2 * v13];
    v26 = 16 * HIDWORD(v48) - 16 * v12;
    do
    {
      if (v10)
      {
        *v10 = 0;
        v10[1] = 0;
      }
      v10 += 2;
      v26 -= 16;
    }
    while (v26);
    *(_QWORD *)(v8 + 2112) = v25;
    v9 = HIDWORD(v48);
    if (HIDWORD(v48))
      goto LABEL_42;
    return 1;
  }
  v15 = v14 - v11;
  v16 = (v14 - v11) >> 3;
  if (v16 <= HIDWORD(v48))
    v16 = HIDWORD(v48);
  if (v15 >= 0x7FFFFFFFFFFFFFF0)
    v17 = 0xFFFFFFFFFFFFFFFLL;
  else
    v17 = v16;
  v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 + 2128) + 16))(*(_QWORD *)(v8 + 2128), 16 * v17, 8);
  v19 = (_QWORD *)(v18 + 16 * v12);
  v20 = 16 * v9 - 16 * v12;
  v21 = v19;
  do
  {
    if (v21)
    {
      *v21 = 0;
      v21[1] = 0;
    }
    v21 += 2;
    v20 -= 16;
  }
  while (v20);
  v27 = *(_QWORD *)(v8 + 2112);
  v28 = *(_QWORD *)(v8 + 2104);
  if (v27 != v28)
  {
    do
    {
      *((_OWORD *)v19 - 1) = *(_OWORD *)(v27 - 16);
      v19 -= 2;
      v27 -= 16;
    }
    while (v27 != v28);
    v27 = *(_QWORD *)(v8 + 2104);
  }
  *(_QWORD *)(v8 + 2104) = v19;
  *(_QWORD *)(v8 + 2112) = v18 + 16 * v9;
  v29 = *(_QWORD *)(v8 + 2120);
  *(_QWORD *)(v8 + 2120) = v18 + 16 * v17;
  if (v27)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 + 2128) + 40))(*(_QWORD *)(v8 + 2128), v27, v29 - v27);
  v9 = HIDWORD(v48);
LABEL_41:
  if (!v9)
    return 1;
LABEL_42:
  v5 = 8005;
  if (v7 <= 8 && ((1 << v7) & 0x116) != 0)
  {
    v30 = 0;
    v31 = 0;
    result = 1;
    while (1)
    {
      v32 = *(_QWORD *)(*a2 + 2104);
      switch(v7)
      {
        case 4u:
          v38 = a1[6];
          v33 = a1[7];
          v35 = v38 + 4;
          if (v38 + 4 > v33)
          {
            v5 = 7993;
            goto LABEL_6;
          }
          v36 = a1[5];
          v37 = *(unsigned int *)(v36 + v38);
          a1[6] = v35;
          *(_QWORD *)(v32 + v30) = v37;
          if ((v37 & 1) != 0)
            goto LABEL_60;
          break;
        case 2u:
          v39 = a1[6];
          v33 = a1[7];
          v35 = v39 + 2;
          if (v39 + 2 > v33)
          {
            v5 = 7987;
            goto LABEL_6;
          }
          v36 = a1[5];
          v37 = *(unsigned __int16 *)(v36 + v39);
          a1[6] = v35;
          *(_QWORD *)(v32 + v30) = v37;
          if ((v37 & 1) != 0)
            goto LABEL_60;
          break;
        case 1u:
          v34 = a1[6];
          v33 = a1[7];
          v35 = v34 + 1;
          if (v34 + 1 > v33)
          {
            v5 = 7981;
            goto LABEL_6;
          }
          v36 = a1[5];
          v37 = *(unsigned __int8 *)(v36 + v34);
          a1[6] = v35;
          *(_QWORD *)(v32 + v30) = v37;
          if ((v37 & 1) != 0)
            goto LABEL_60;
          break;
        default:
          v40 = a1[6];
          v33 = a1[7];
          v35 = v40 + 8;
          if (v40 + 8 > v33)
          {
            v5 = 7999;
            goto LABEL_6;
          }
          v36 = a1[5];
          v37 = *(_QWORD *)(v36 + v40);
          a1[6] = v35;
          *(_QWORD *)(v32 + v30) = v37;
          if ((v37 & 1) != 0)
LABEL_60:
            *(_BYTE *)(v32 + v30 + 12) = 1;
          break;
      }
      if ((v37 & 4) != 0)
      {
        *(_BYTE *)(v32 + v30 + 13) = 1;
        if ((v37 & 2) == 0)
          goto LABEL_45;
      }
      else if ((v37 & 2) == 0)
      {
        goto LABEL_45;
      }
      if (v35 + 1 > v33)
      {
        v5 = 8019;
        break;
      }
      *(_BYTE *)(v32 + v30 + 8) = *(_BYTE *)(v36 + v35);
      v41 = a1[6];
      v42 = a1[7];
      a1[6] = v41 + 1;
      if (v41 + 2 > v42)
      {
        v5 = 8020;
        break;
      }
      *(_BYTE *)(v32 + v30 + 9) = *(_BYTE *)(a1[5] + v41 + 1);
      v43 = a1[6];
      v44 = a1[7];
      a1[6] = v43 + 1;
      if (v43 + 2 > v44)
      {
        v5 = 8021;
        break;
      }
      v45 = v32 + v30;
      *(_BYTE *)(v45 + 10) = *(_BYTE *)(a1[5] + v43 + 1);
      v46 = a1[6];
      v47 = a1[7];
      a1[6] = v46 + 1;
      if (v46 + 2 > v47)
      {
        v5 = 8022;
        break;
      }
      *(_BYTE *)(v45 + 11) = *(_BYTE *)(a1[5] + v46 + 1);
      ++a1[6];
      v9 = HIDWORD(v48);
LABEL_45:
      ++v31;
      v30 += 16;
      if (v31 >= v9)
        return result;
    }
  }
LABEL_6:
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v5);
  return 0;
}

void std::vector<GeoCodecsDaVinciBuilding,geo::StdAllocator<GeoCodecsDaVinciBuilding,geo::codec::Allocator>>::resize(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<GeoCodecsDaVinciBuilding,geo::StdAllocator<GeoCodecsDaVinciBuilding,geo::codec::Allocator>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (v3 != v7)
    {
      v8 = *(std::__shared_weak_count **)(v3 - 32);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v3 -= 40;
    }
    a1[1] = v7;
  }
}

void std::vector<GeoCodecsDaVinciDecal,geo::StdAllocator<GeoCodecsDaVinciDecal,geo::codec::Allocator>>::resize(unint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return;
    v18 = v4 + 72 * a2;
    while (v5 != v18)
    {
      v19 = *(std::__shared_weak_count **)(v5 - 16);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v5 -= 72;
    }
LABEL_26:
    a1[1] = v18;
    return;
  }
  v8 = a1[2];
  if (0x8E38E38E38E38E39 * ((uint64_t)(v8 - v5) >> 3) >= v7)
  {
    v18 = v5 + 72 * v7;
    v22 = 72 * a2 - 8 * ((uint64_t)(v5 - *a1) >> 3);
    do
    {
      if (v5)
      {
        *(_QWORD *)(v5 + 64) = 0;
        *(_OWORD *)(v5 + 32) = 0uLL;
        *(_OWORD *)(v5 + 48) = 0uLL;
        *(_OWORD *)v5 = 0uLL;
        *(_OWORD *)(v5 + 16) = 0uLL;
      }
      v5 += 72;
      v22 -= 72;
    }
    while (v22);
    goto LABEL_26;
  }
  if (a2 > 0x38E38E38E38E38ELL)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v9 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - v4) >> 3);
  v10 = 2 * v9;
  if (2 * v9 <= a2)
    v10 = a2;
  if (v9 >= 0x1C71C71C71C71C7)
    v11 = 0x38E38E38E38E38ELL;
  else
    v11 = v10;
  v12 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 72 * v11, 8);
  v13 = v12 + 72 * v6;
  v14 = v12 + 72 * a2;
  v15 = 72 * a2 - 72 * v6;
  v16 = 0uLL;
  v17 = v13;
  do
  {
    if (v17)
    {
      *(_QWORD *)(v17 + 64) = 0;
      *(_OWORD *)(v17 + 32) = 0uLL;
      *(_OWORD *)(v17 + 48) = 0uLL;
      *(_OWORD *)v17 = 0uLL;
      *(_OWORD *)(v17 + 16) = 0uLL;
    }
    v17 += 72;
    v15 -= 72;
  }
  while (v15);
  v23 = v12 + 72 * v11;
  v24 = *a1;
  v25 = a1[1];
  if (v25 == *a1)
  {
    *a1 = v13;
    a1[1] = v14;
    v32 = a1[2];
    a1[2] = v23;
  }
  else
  {
    v26 = 0;
    do
    {
      v27 = v13 + v26;
      v28 = v25 + v26;
      v29 = *(_OWORD *)(v25 + v26 - 72);
      v30 = *(_OWORD *)(v25 + v26 - 56);
      *(_OWORD *)(v27 - 44) = *(_OWORD *)(v25 + v26 - 44);
      *(_OWORD *)(v27 - 56) = v30;
      *(_OWORD *)(v27 - 72) = v29;
      v16 = *(__n128 *)(v25 + v26 - 24);
      *(__n128 *)(v27 - 24) = v16;
      *(_QWORD *)(v28 - 24) = 0;
      *(_QWORD *)(v28 - 16) = 0;
      *(_DWORD *)(v27 - 8) = *(_DWORD *)(v25 + v26 - 8);
      v26 -= 72;
    }
    while (v25 + v26 != v24);
    v25 = *a1;
    v31 = a1[1];
    *a1 = v13 + v26;
    a1[1] = v14;
    v32 = a1[2];
    a1[2] = v23;
    while (v31 != v25)
    {
      v33 = *(std::__shared_weak_count **)(v31 - 16);
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v31 -= 72;
    }
  }
  if (v25)
    (*(void (**)(unint64_t, unint64_t, unint64_t, __n128))(*(_QWORD *)a1[3] + 40))(a1[3], v25, v32 - v25, v16);
}

uint64_t std::vector<GeoCodecsDaVinciAsset,geo::StdAllocator<GeoCodecsDaVinciAsset,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;

  v3 = result;
  v4 = *(_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *(_QWORD *)result) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return result;
    v18 = v4 + 40 * a2;
    while (v5 != v18)
    {
      v20 = *(_QWORD *)(v5 - 32);
      if (v20)
      {
        v21 = *(_QWORD *)(v5 - 24);
        v19 = *(_QWORD *)(v5 - 32);
        if (v21 != v20)
        {
          do
          {
            v22 = *(std::__shared_weak_count **)(v21 - 8);
            if (v22)
            {
              p_shared_owners = (unint64_t *)&v22->__shared_owners_;
              do
                v24 = __ldaxr(p_shared_owners);
              while (__stlxr(v24 - 1, p_shared_owners));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v22->__on_zero_shared)(v22, v19);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            v21 -= 32;
          }
          while (v21 != v20);
          v19 = *(_QWORD *)(v5 - 32);
        }
        *(_QWORD *)(v5 - 24) = v20;
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 - 8) + 40))(*(_QWORD *)(v5 - 8), v19, *(_QWORD *)(v5 - 16) - v19);
      }
      v5 -= 40;
    }
LABEL_32:
    *(_QWORD *)(v3 + 8) = v18;
    return result;
  }
  v8 = *(_QWORD *)(result + 16);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3) >= v7)
  {
    v18 = v5 + 40 * v7;
    v25 = 40 * a2 - 8 * ((v5 - *(_QWORD *)result) >> 3);
    do
    {
      if (v5)
      {
        *(_QWORD *)(v5 + 32) = 0;
        *(_OWORD *)v5 = 0u;
        *(_OWORD *)(v5 + 16) = 0u;
        result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
        *(_QWORD *)(v5 + 32) = result;
      }
      v5 += 40;
      v25 -= 40;
    }
    while (v25);
    goto LABEL_32;
  }
  if (a2 > 0x666666666666666)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3);
  v10 = 2 * v9;
  if (2 * v9 <= a2)
    v10 = a2;
  if (v9 >= 0x333333333333333)
    v11 = 0x666666666666666;
  else
    v11 = v10;
  v12 = 40 * v11;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 40 * v11, 8);
  v13 = result + 40 * v6;
  v14 = result + v12;
  v15 = result + 40 * a2;
  v16 = 40 * a2 - 40 * v6;
  v17 = v13;
  do
  {
    if (v17)
    {
      *(_QWORD *)(v17 + 32) = 0;
      *(_OWORD *)v17 = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
      result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
      *(_QWORD *)(v17 + 32) = result;
    }
    v17 += 40;
    v16 -= 40;
  }
  while (v16);
  v26 = *(_QWORD *)v3;
  v27 = *(_QWORD *)(v3 + 8);
  if (v27 == *(_QWORD *)v3)
  {
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v15;
    v32 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v14;
  }
  else
  {
    v28 = 0;
    do
    {
      v29 = v13 + v28;
      v30 = v27 + v28;
      *(_WORD *)(v29 - 40) = *(_WORD *)(v27 + v28 - 40);
      *(_QWORD *)(v29 - 24) = 0;
      *(_QWORD *)(v29 - 16) = 0;
      *(_QWORD *)(v29 - 32) = 0;
      *(_QWORD *)(v29 - 8) = *(_QWORD *)(v27 + v28 - 8);
      *(_OWORD *)(v29 - 32) = *(_OWORD *)(v27 + v28 - 32);
      *(_QWORD *)(v29 - 16) = *(_QWORD *)(v27 + v28 - 16);
      *(_QWORD *)(v30 - 32) = 0;
      *(_QWORD *)(v30 - 24) = 0;
      *(_QWORD *)(v30 - 16) = 0;
      v28 -= 40;
    }
    while (v27 + v28 != v26);
    v27 = *(_QWORD *)v3;
    v31 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)v3 = v13 + v28;
    *(_QWORD *)(v3 + 8) = v15;
    v32 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v14;
    while (v31 != v27)
    {
      v34 = *(_QWORD *)(v31 - 32);
      if (v34)
      {
        v35 = *(_QWORD *)(v31 - 24);
        v33 = *(_QWORD *)(v31 - 32);
        if (v35 != v34)
        {
          do
          {
            v36 = *(std::__shared_weak_count **)(v35 - 8);
            if (v36)
            {
              v37 = (unint64_t *)&v36->__shared_owners_;
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v36->__on_zero_shared)(v36, v33);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            v35 -= 32;
          }
          while (v35 != v34);
          v33 = *(_QWORD *)(v31 - 32);
        }
        *(_QWORD *)(v31 - 24) = v34;
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v31 - 8) + 40))(*(_QWORD *)(v31 - 8), v33, *(_QWORD *)(v31 - 16) - v33);
      }
      v31 -= 40;
    }
  }
  if (v27)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v27, v32 - v27);
  return result;
}

uint64_t geo::codec::DepthDequantizer::readInfo(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  v3 = a2[7];
  v4 = v2 + 4;
  if (v2 + 4 > v3)
    return 0;
  v6 = a2[5];
  *(_DWORD *)a1 = *(_DWORD *)(v6 + v2);
  a2[6] = v4;
  if (v2 + 8 > v3)
    return 0;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(v6 + v4);
  v7 = a2[6];
  v8 = a2[7];
  a2[6] = v7 + 4;
  if (v7 + 8 > v8)
    return 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2[5] + v7 + 4);
  a2[6] += 4;
  *(_BYTE *)(a1 + 12) = 1;
  return 1;
}

uint64_t std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  if (a2 > (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 3)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
    v4 = 8 * a2;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * a2, 8);
    v5 = result + (v3 & 0xFFFFFFFFFFFFFFF8);
    v6 = *(_QWORD *)v2;
    v7 = *(_QWORD *)(v2 + 8);
    v8 = v5;
    if (v7 != *(_QWORD *)v2)
    {
      v9 = v7 - *(_QWORD *)v2 - 8;
      if (v9 >= 0x58)
      {
        v8 = result + (v3 & 0xFFFFFFFFFFFFFFF8);
        if (v7 - v8 >= 0x20)
        {
          v10 = (v9 >> 3) + 1;
          v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
          v12 = v7 - v11;
          v8 = v5 - v11;
          v13 = (_OWORD *)(result + 8 * (v3 >> 3) - 16);
          v14 = (__int128 *)(v7 - 16);
          v15 = v10 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v16 = *v14;
            *(v13 - 1) = *(v14 - 1);
            *v13 = v16;
            v13 -= 2;
            v14 -= 2;
            v15 -= 4;
          }
          while (v15);
          v7 = v12;
          if (v10 == (v10 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_10;
        }
      }
      else
      {
        v8 = result + (v3 & 0xFFFFFFFFFFFFFFF8);
      }
      do
      {
        v17 = *(_QWORD *)(v7 - 8);
        v7 -= 8;
        *(_QWORD *)(v8 - 8) = v17;
        v8 -= 8;
      }
      while (v7 != v6);
    }
LABEL_10:
    *(_QWORD *)v2 = v8;
    *(_QWORD *)(v2 + 8) = v5;
    v18 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = result + v4;
    if (v6)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), v6, v18 - v6);
  }
  return result;
}

long double GEOCalculateDistanceRadius(double a1, double a2, double a3, double a4, double a5)
{
  double v8;
  long double v9;
  long double v10;
  double v11;
  long double v12;
  long double v13;
  long double v14;

  v8 = (a4 - a2) * 0.0174532925;
  v9 = sin((a3 - a1) * 0.0174532925 * 0.5);
  v10 = v9 * v9;
  v11 = cos(a1 * 0.0174532925);
  v12 = v11 * cos(a3 * 0.0174532925);
  v13 = sin(v8 * 0.5);
  v14 = atan2(sqrt(v10 + v12 * (v13 * v13)), sqrt(1.0 - (v10 + v12 * (v13 * v13))));
  return (v14 + v14) * a5;
}

void sub_18870700C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1887070CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *GEOPDPlaceResponseIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPDPlaceResponseIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 32);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

double std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::operator()@<D0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  double result;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24))
  {
    v7 = *(_QWORD *)(a1 + 16);
    for (i = *(_QWORD *)(v7 + 8); i != v7; i = *(_QWORD *)(i + 8))
    {
      v9 = *(_QWORD *)(a1 + 8);
      v31 = v4;
      v10 = *(_QWORD *)(v9 + 24);
      if (!v10)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v10 + 48))(&v29, v10, &v31, i + 20);
      *(_OWORD *)(i + 40) = v29;
      *(_QWORD *)(i + 56) = v30;
      if (*(_QWORD *)(i + 40))
      {
        if (*(_DWORD *)(i + 52))
        {
          v11 = *(unsigned int *)(i + 16);
          if ((v11 & 0x80000000) == 0)
          {
            v12 = **(_QWORD **)(a1 + 24);
            if (v12)
            {
              if (*(_QWORD *)(v12 + 16) > v11)
                *(_QWORD *)(*(_QWORD *)(v12 + 8) + ((v11 >> 3) & 0x1FFFFFF8)) |= 1 << v11;
            }
          }
        }
      }
    }
  }
  v13 = *(char **)(v5 + 1176);
  v14 = *(_BYTE **)(v5 + 1168);
  v15 = (v13 - v14) >> 5;
  v16 = v4 - v15;
  if (v4 <= v15)
  {
    if (v4 < v15)
    {
      v13 = &v14[32 * v4];
      *(_QWORD *)(v5 + 1176) = v13;
    }
  }
  else
  {
    v17 = *(_QWORD *)(v5 + 1184);
    if (v16 <= (v17 - (uint64_t)v13) >> 5)
    {
      bzero(*(void **)(v5 + 1176), 32 * v16);
      v26 = &v13[32 * v16];
      *(_QWORD *)(v5 + 1176) = v26;
    }
    else
    {
      if (v4 >> 59)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v18 = v17 - (_QWORD)v14;
      v19 = v18 >> 4;
      if (v18 >> 4 <= v4)
        v19 = v4;
      v20 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0;
      v21 = 0x7FFFFFFFFFFFFFFLL;
      if (!v20)
        v21 = v19;
      if (v21 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = 32 * v21;
      v23 = (char *)operator new(32 * v21);
      v24 = &v23[32 * v15];
      v25 = &v23[v22];
      bzero(v24, 32 * v16);
      v26 = &v24[32 * v16];
      if (v13 != v14)
      {
        do
        {
          v27 = *((_OWORD *)v13 - 1);
          *((_OWORD *)v24 - 2) = *((_OWORD *)v13 - 2);
          *((_OWORD *)v24 - 1) = v27;
          v24 -= 32;
          v13 -= 32;
        }
        while (v13 != v14);
        v13 = *(char **)(v5 + 1168);
      }
      *(_QWORD *)(v5 + 1168) = v24;
      *(_QWORD *)(v5 + 1176) = v26;
      *(_QWORD *)(v5 + 1184) = v25;
      if (v13)
      {
        operator delete(v13);
        v26 = *(char **)(v5 + 1176);
      }
    }
    v14 = *(_BYTE **)(v5 + 1168);
    v13 = v26;
  }
  *(_QWORD *)a3 = v14 + 8;
  *(_QWORD *)(a3 + 8) = ((v13 - v14) >> 4) + ((v13 - v14) >> 5);
  *(_QWORD *)&result = 0x2000000004;
  *(_QWORD *)(a3 + 16) = 0x2000000004;
  *(_BYTE *)(a3 + 24) = 0;
  return result;
}

uint64_t std::vector<GeoCodecsDaVinciBuildingColor,geo::StdAllocator<GeoCodecsDaVinciBuildingColor,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;

  v5 = result;
  v6 = *(_DWORD **)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  if (a2 <= (v7 - (uint64_t)v6) >> 2)
  {
    v13 = 4 * a2;
    v14 = &v6[a2];
    do
    {
      if (v6)
        *v6 = *a3;
      ++v6;
      v13 -= 4;
    }
    while (v13);
    *(_QWORD *)(result + 8) = v14;
  }
  else
  {
    v8 = (uint64_t)v6 - *(_QWORD *)result;
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v11 = v7 - *(_QWORD *)result;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 4 * v12, 1);
    else
      result = 0;
    v15 = (_DWORD *)(result + 4 * v9);
    v16 = 4 * a2;
    v17 = &v15[a2];
    v18 = v15;
    do
    {
      if (v18)
        *v18 = *a3;
      ++v18;
      v16 -= 4;
    }
    while (v16);
    v20 = *(_QWORD *)v5;
    v19 = *(_QWORD *)(v5 + 8);
    if (v19 != *(_QWORD *)v5)
    {
      v21 = v19 - *(_QWORD *)v5 - 4;
      if (v21 < 0x2C)
        goto LABEL_34;
      if ((unint64_t)(v19 - (v8 + result)) < 0x20)
        goto LABEL_34;
      v22 = (v21 >> 2) + 1;
      v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      v24 = v19 - v23;
      v15 = (_DWORD *)((char *)v15 - v23);
      v25 = (_OWORD *)(result + 4 * v9 - 16);
      v26 = (__int128 *)(v19 - 16);
      v27 = v22 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v28 = *v26;
        *(v25 - 1) = *(v26 - 1);
        *v25 = v28;
        v25 -= 2;
        v26 -= 2;
        v27 -= 8;
      }
      while (v27);
      v19 = v24;
      if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_34:
        do
        {
          v29 = *(_DWORD *)(v19 - 4);
          v19 -= 4;
          *--v15 = v29;
        }
        while (v19 != v20);
      }
      v19 = *(_QWORD *)v5;
    }
    *(_QWORD *)v5 = v15;
    *(_QWORD *)(v5 + 8) = v17;
    v30 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 16) = result + 4 * v12;
    if (v19)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), v19, v30 - v19);
  }
  return result;
}

uint64_t addr_obj::VenueFormatterProto::default_instance_(addr_obj::VenueFormatterProto *this)
{
  unsigned __int8 v1;
  addr_obj::VenueFormatterProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF504C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF504C8))
  {
    v3 = (addr_obj::VenueFormatterProto *)operator new();
    addr_obj::VenueFormatterProto::VenueFormatterProto(v3);
    qword_1EDF504C0 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF504C8);
  }
  return qword_1EDF504C0;
}

void sub_188707610(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40F1948F29);
  __cxa_guard_abort(&qword_1EDF504C8);
  _Unwind_Resume(a1);
}

addr_obj::VenueFormatterProto *addr_obj::VenueFormatterProto::VenueFormatterProto(addr_obj::VenueFormatterProto *this)
{
  *(_QWORD *)this = &off_1E1BF9BB0;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_188707684(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;

  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_188707B7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188707C58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOMapServiceTraitsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 612))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOMapServiceTraitsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 616));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 608) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 612) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOMapServiceTraitsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOMapServiceTraitsReadAllFrom_initialTag;
  Specified = GEOMapServiceTraitsReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOMapServiceTraitsCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 616));
  return Specified;
}

void sub_188707DF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _MapItemPlaceTypeForPDPlaceType(uint64_t result)
{
  if ((int)result <= 15)
  {
    if ((_DWORD)result != 1 && (_DWORD)result != 2)
    {
      if ((_DWORD)result == 4)
        return 3;
      else
        return 0;
    }
  }
  else
  {
    switch((int)result)
    {
      case '#':
        result = 5;
        break;
      case '$':
      case '%':
      case '&':
      case '\'':
      case '(':
      case ')':
      case '*':
      case '4':
      case '5':
      case '8':
      case ':':
      case ';':
      case '<':
      case '>':
        return 0;
      case '+':
        result = 6;
        break;
      case ',':
        result = 7;
        break;
      case '-':
        result = 8;
        break;
      case '.':
        result = 9;
        break;
      case '/':
        result = 10;
        break;
      case '0':
        result = 11;
        break;
      case '1':
        result = 12;
        break;
      case '2':
        result = 13;
        break;
      case '3':
        result = 14;
        break;
      case '6':
        result = 15;
        break;
      case '7':
        result = 16;
        break;
      case '9':
        result = 17;
        break;
      case '=':
        result = 18;
        break;
      case '?':
        result = 19;
        break;
      case '@':
        result = 20;
        break;
      default:
        if ((_DWORD)result != 16)
          return 0;
        result = 4;
        break;
    }
  }
  return result;
}

void sub_188708078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::VenueDecoratorProto::default_instance_(addr_obj::VenueDecoratorProto *this)
{
  unsigned __int8 v1;
  addr_obj::VenueDecoratorProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF504B8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF504B8))
  {
    v3 = (addr_obj::VenueDecoratorProto *)operator new();
    addr_obj::VenueDecoratorProto::VenueDecoratorProto(v3);
    qword_1EDF504B0 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF504B8);
  }
  return qword_1EDF504B0;
}

void sub_188708104(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C4093195C21);
  __cxa_guard_abort(&qword_1EDF504B8);
  _Unwind_Resume(a1);
}

addr_obj::VenueDecoratorProto *addr_obj::VenueDecoratorProto::VenueDecoratorProto(addr_obj::VenueDecoratorProto *this)
{
  *(_QWORD *)this = &off_1E1BF9B00;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  addr_obj::VenueDecoratorProto::SharedCtor(this);
  return this;
}

void sub_188708184(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;

  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t *addr_obj::VenueDecoratorProto::SharedCtor(addr_obj::VenueDecoratorProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *result;

  *((_DWORD *)this + 12) = 0;
  v2 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  *((_QWORD *)this + 2) = v2;
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v2);
  *((_QWORD *)this + 3) = v3;
  v4 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((_QWORD *)this + 4) = v4;
  result = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v4);
  *((_QWORD *)this + 5) = result;
  *((_DWORD *)this + 13) = 0;
  return result;
}

id MapsFeature_AddBlockListener(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v17[4];
  id v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  _QWORD v22[3];
  char IsEnabled;
  _QWORD v24[5];

  v24[4] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2020000000;
  IsEnabled = 0;
  IsEnabled = MapsFeature_IsEnabled(a1, a2);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __MapsFeature_AddBlockListener_block_invoke;
  v17[3] = &unk_1E1C20760;
  v20 = a1;
  v21 = a2;
  v19 = v22;
  v9 = v8;
  v18 = v9;
  v10 = (void *)MEMORY[0x18D765024](v17);
  _GEOConfigAddBlockListenerForKey(a1, (uint64_t)a2, v7, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  _GEOConfigAddBlockListenerForKey(MapsFeaturesConfig_RemoteFeatureFlags, (uint64_t)off_1EDF4AF38, v7, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  _GEOConfigAddBlockListenerForKey(GeoServicesConfig_ClientAuthFeatureFlagsStateInfo, (uint64_t)off_1EDF4DE08, v7, v10);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  _GEOConfigAddBlockListenerForKey(GeoServicesConfig_MapsAuthClientFeatureFlagsLastUpdated, (uint64_t)off_1EDF4DE58, v7, v10);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v24[0] = v11;
  v24[1] = v12;
  v24[2] = v13;
  v24[3] = v14;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v24, 4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  _Block_object_dispose(v22, 8);
  return v15;
}

void sub_1887083BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MapsFeature_IsEnabled(int a1, void *a2)
{
  int v2;
  void *v3;
  BOOL v4;
  uint64_t result;

  switch(a1)
  {
    case 4:
      v2 = MapsFeaturesConfig_IsMuninEnabled;
      v3 = off_1EDF4AF48;
      v4 = (_DWORD)MapsFeaturesConfig_IsMuninEnabled == 4;
      goto LABEL_66;
    case 5:
      v2 = MapsFeaturesConfig_EnableEVRouting;
      v3 = off_1EDF4AF58;
      v4 = (_DWORD)MapsFeaturesConfig_EnableEVRouting == 5;
      goto LABEL_66;
    case 6:
      v2 = MapsFeaturesConfig_ShouldEnableLagunaBeach;
      v3 = off_1EDF4AF68;
      v4 = (_DWORD)MapsFeaturesConfig_ShouldEnableLagunaBeach == 6;
      goto LABEL_66;
    case 7:
      v2 = MapsFeaturesConfig_EnableAlberta;
      v3 = off_1EDF4AF78;
      v4 = (_DWORD)MapsFeaturesConfig_EnableAlberta == 7;
      goto LABEL_66;
    case 8:
      if ((_DWORD)MapsFeaturesConfig_Watermarking != 8 || a2 != off_1EDF4AF88)
        goto LABEL_70;
      return MapsFeature_IsEnabled_Watermarking();
    case 9:
      v2 = MapsFeaturesConfig_ShelbyvilleGlobe;
      v3 = off_1EDF4AF98;
      v4 = (_DWORD)MapsFeaturesConfig_ShelbyvilleGlobe == 9;
      goto LABEL_66;
    case 10:
      v2 = MapsFeaturesConfig_ShelbyvilleAdvancedWater;
      v3 = off_1EDF4AFA8;
      v4 = (_DWORD)MapsFeaturesConfig_ShelbyvilleAdvancedWater == 10;
      goto LABEL_66;
    case 11:
      v2 = MapsFeaturesConfig_ShelbyvilleAdvancedLighting;
      v3 = off_1EDF4AFB8;
      v4 = (_DWORD)MapsFeaturesConfig_ShelbyvilleAdvancedLighting == 11;
      goto LABEL_66;
    case 12:
      v2 = MapsFeaturesConfig_ShelbyvilleRoundedBuildings;
      v3 = off_1EDF4AFC8;
      v4 = (_DWORD)MapsFeaturesConfig_ShelbyvilleRoundedBuildings == 12;
      goto LABEL_66;
    case 13:
      v2 = MapsFeaturesConfig_ShelbyvilleColorizedBuildings;
      v3 = off_1EDF4AFD8;
      v4 = (_DWORD)MapsFeaturesConfig_ShelbyvilleColorizedBuildings == 13;
      goto LABEL_66;
    case 14:
      v2 = MapsFeaturesConfig_ShelbyvilleBuildingHeights;
      v3 = off_1EDF4AFE8;
      v4 = (_DWORD)MapsFeaturesConfig_ShelbyvilleBuildingHeights == 14;
      goto LABEL_66;
    case 15:
      v2 = MapsFeaturesConfig_ShelbyvilleTerrain;
      v3 = off_1EDF4AFF8;
      v4 = (_DWORD)MapsFeaturesConfig_ShelbyvilleTerrain == 15;
      goto LABEL_66;
    case 16:
      v2 = MapsFeaturesConfig_ShelbyvilleStonehenge;
      v3 = off_1EDF4B008;
      v4 = (_DWORD)MapsFeaturesConfig_ShelbyvilleStonehenge == 16;
      goto LABEL_66;
    case 17:
      v2 = MapsFeaturesConfig_ShelbyvilleSearch;
      v3 = off_1EDF4B018;
      v4 = (_DWORD)MapsFeaturesConfig_ShelbyvilleSearch == 17;
      goto LABEL_66;
    case 18:
      v2 = MapsFeaturesConfig_ShelbyvillePuck;
      v3 = off_1EDF4B028;
      v4 = (_DWORD)MapsFeaturesConfig_ShelbyvillePuck == 18;
      goto LABEL_66;
    case 19:
      v2 = MapsFeaturesConfig_EnableBakersfield;
      v3 = off_1EDF4B038;
      v4 = (_DWORD)MapsFeaturesConfig_EnableBakersfield == 19;
      goto LABEL_66;
    case 20:
      v2 = MapsFeaturesConfig_Maps269Enabled;
      v3 = off_1EDF4B048;
      v4 = (_DWORD)MapsFeaturesConfig_Maps269Enabled == 20;
      goto LABEL_66;
    case 21:
      v2 = MapsFeaturesConfig_PedestrianAREnabled;
      v3 = off_1EDF4B058;
      v4 = (_DWORD)MapsFeaturesConfig_PedestrianAREnabled == 21;
      goto LABEL_66;
    case 22:
      v2 = MapsFeaturesConfig_Maps298Enabled;
      v3 = off_1EDF4B068;
      v4 = (_DWORD)MapsFeaturesConfig_Maps298Enabled == 22;
      goto LABEL_66;
    case 23:
      v2 = MapsFeaturesConfig_Maps357RoutePlanningEnabled;
      v3 = off_1EDF4B078;
      v4 = (_DWORD)MapsFeaturesConfig_Maps357RoutePlanningEnabled == 23;
      goto LABEL_66;
    case 24:
      v2 = MapsFeaturesConfig_PlaceCardShowcase;
      v3 = off_1EDF4B088;
      v4 = (_DWORD)MapsFeaturesConfig_PlaceCardShowcase == 24;
      goto LABEL_66;
    case 25:
      v2 = MapsFeaturesConfig_GuidesMediaIntegrationEnabled;
      v3 = off_1EDF4B098;
      v4 = (_DWORD)MapsFeaturesConfig_GuidesMediaIntegrationEnabled == 25;
      goto LABEL_66;
    case 26:
      v2 = MapsFeaturesConfig_GuidesMediaIntegrationThirdPartyLinksEnabled;
      v3 = off_1EDF4B0A8;
      v4 = (_DWORD)MapsFeaturesConfig_GuidesMediaIntegrationThirdPartyLinksEnabled == 26;
      goto LABEL_66;
    case 27:
      v2 = MapsFeaturesConfig_ShelbyvilleMapKitEnabled;
      v3 = off_1EDF4B0B8;
      v4 = (_DWORD)MapsFeaturesConfig_ShelbyvilleMapKitEnabled == 27;
      goto LABEL_66;
    case 28:
      v2 = MapsFeaturesConfig_DrivingMultiWaypointRoutesEnabled;
      v3 = off_1EDF4B0C8;
      v4 = (_DWORD)MapsFeaturesConfig_DrivingMultiWaypointRoutesEnabled == 28;
      goto LABEL_66;
    case 29:
      v2 = MapsFeaturesConfig_Maps420;
      v3 = off_1EDF4B0D8;
      v4 = (_DWORD)MapsFeaturesConfig_Maps420 == 29;
      goto LABEL_66;
    case 30:
      v2 = MapsFeaturesConfig_TransitPayEnabled;
      v3 = off_1EDF4B0E8;
      v4 = (_DWORD)MapsFeaturesConfig_TransitPayEnabled == 30;
      goto LABEL_66;
    case 31:
      v2 = MapsFeaturesConfig_RAPSydneyEnabled;
      v3 = off_1EDF4B0F8;
      v4 = (_DWORD)MapsFeaturesConfig_RAPSydneyEnabled == 31;
      goto LABEL_66;
    case 32:
      v2 = MapsFeaturesConfig_PlaceCardWebViewEnabled;
      v3 = off_1EDF4B108;
      v4 = (_DWORD)MapsFeaturesConfig_PlaceCardWebViewEnabled == 32;
      goto LABEL_66;
    case 33:
      v2 = MapsFeaturesConfig_SydneyARPEnabled;
      v3 = off_1EDF4B118;
      v4 = (_DWORD)MapsFeaturesConfig_SydneyARPEnabled == 33;
      goto LABEL_66;
    case 34:
      v2 = MapsFeaturesConfig_VisualLocalizationCrowdsourcingEnabled;
      v3 = off_1EDF4B128;
      v4 = (_DWORD)MapsFeaturesConfig_VisualLocalizationCrowdsourcingEnabled == 34;
      goto LABEL_66;
    case 35:
      v2 = MapsFeaturesConfig_ElevatedPolygonsEnabled;
      v3 = off_1EDF4B138;
      v4 = (_DWORD)MapsFeaturesConfig_ElevatedPolygonsEnabled == 35;
      goto LABEL_66;
    case 36:
      v2 = MapsFeaturesConfig_SearchResultsImpressions;
      v3 = off_1EDF4B148;
      v4 = (_DWORD)MapsFeaturesConfig_SearchResultsImpressions == 36;
      goto LABEL_66;
    case 37:
      v2 = MapsFeaturesConfig_StandaloneWatchOffline;
      v3 = off_1EDF4B158;
      v4 = (_DWORD)MapsFeaturesConfig_StandaloneWatchOffline == 37;
      goto LABEL_66;
    case 38:
      v2 = MapsFeaturesConfig_RAPCommunityIDEnabled;
      v3 = off_1EDF4B168;
      v4 = (_DWORD)MapsFeaturesConfig_RAPCommunityIDEnabled == 38;
      goto LABEL_66;
    case 39:
      v2 = MapsFeaturesConfig_RealTimeEVCharger;
      v3 = off_1EDF4B178;
      v4 = (_DWORD)MapsFeaturesConfig_RealTimeEVCharger == 39;
      goto LABEL_66;
    case 40:
      v2 = MapsFeaturesConfig_HikingWatchEnabled;
      v3 = off_1EDF4B188;
      v4 = (_DWORD)MapsFeaturesConfig_HikingWatchEnabled == 40;
      goto LABEL_66;
    case 41:
      v2 = MapsFeaturesConfig_HikingiOSEnabled;
      v3 = off_1EDF4B198;
      v4 = (_DWORD)MapsFeaturesConfig_HikingiOSEnabled == 41;
      goto LABEL_66;
    case 42:
      v2 = MapsFeaturesConfig_EVRoutingEnhancements;
      v3 = off_1EDF4B1A8;
      v4 = (_DWORD)MapsFeaturesConfig_EVRoutingEnhancements == 42;
      goto LABEL_66;
    case 43:
      v2 = MapsFeaturesConfig_MapsWally;
      v3 = off_1EDF4B1B8;
      v4 = (_DWORD)MapsFeaturesConfig_MapsWally == 43;
      goto LABEL_66;
    case 44:
      v2 = MapsFeaturesConfig_ARPCommunityIDEnabled;
      v3 = off_1EDF4B1C8;
      v4 = (_DWORD)MapsFeaturesConfig_ARPCommunityIDEnabled == 44;
      goto LABEL_66;
    case 45:
      v2 = MapsFeaturesConfig_SSAOEnabled;
      v3 = off_1EDF4B1D8;
      v4 = (_DWORD)MapsFeaturesConfig_SSAOEnabled == 45;
      goto LABEL_66;
    case 46:
      v2 = MapsFeaturesConfig_OrderPickupEnabled;
      v3 = off_1EDF4B1E8;
      v4 = (_DWORD)MapsFeaturesConfig_OrderPickupEnabled == 46;
      goto LABEL_66;
    case 47:
      v2 = MapsFeaturesConfig_SPRForMapSnapshots;
      v3 = off_1EDF4B1F8;
      v4 = (_DWORD)MapsFeaturesConfig_SPRForMapSnapshots == 47;
      goto LABEL_66;
    case 48:
      v2 = MapsFeaturesConfig_OptimizeSearchResultComponents;
      v3 = off_1EDF4B208;
      v4 = (_DWORD)MapsFeaturesConfig_OptimizeSearchResultComponents == 48;
      goto LABEL_66;
    case 49:
      v2 = MapsFeaturesConfig_SearchAndDiscovery;
      v3 = off_1EDF4B218;
      v4 = (_DWORD)MapsFeaturesConfig_SearchAndDiscovery == 49;
      goto LABEL_66;
    case 50:
      v2 = MapsFeaturesConfig_MyPlacesFeatures;
      v3 = off_1EDF4B228;
      v4 = (_DWORD)MapsFeaturesConfig_MyPlacesFeatures == 50;
      goto LABEL_66;
    case 51:
      if ((_DWORD)MapsFeaturesConfig_Maps102 != 51 || a2 != off_1EDF4B238)
        goto LABEL_70;
      return MapsFeature_IsEnabled_Maps102();
    case 52:
      v2 = MapsFeaturesConfig_FlexibleActionLinksEnabled;
      v3 = off_1EDF4B248;
      v4 = (_DWORD)MapsFeaturesConfig_FlexibleActionLinksEnabled == 52;
      goto LABEL_66;
    case 53:
      v2 = MapsFeaturesConfig_FrenchClimateLaw;
      v3 = off_1EDF4B258;
      v4 = (_DWORD)MapsFeaturesConfig_FrenchClimateLaw == 53;
      goto LABEL_66;
    case 54:
      v2 = MapsFeaturesConfig_VKMLayoutEnabled_SPR;
      v3 = off_1EDF4B268;
      v4 = (_DWORD)MapsFeaturesConfig_VKMLayoutEnabled_SPR == 54;
      goto LABEL_66;
    case 55:
      v2 = MapsFeaturesConfig_VKMLayoutEnabled_Navigation;
      v3 = off_1EDF4B278;
      v4 = (_DWORD)MapsFeaturesConfig_VKMLayoutEnabled_Navigation == 55;
      goto LABEL_66;
    case 56:
      v2 = MapsFeaturesConfig_VKMLayoutEnabled_Flyover;
      v3 = off_1EDF4B288;
      v4 = (_DWORD)MapsFeaturesConfig_VKMLayoutEnabled_Flyover == 56;
      goto LABEL_66;
    case 58:
      v2 = MapsFeaturesConfig_Maps182;
      v3 = off_1EDF4B2A8;
      v4 = (_DWORD)MapsFeaturesConfig_Maps182 == 58;
LABEL_66:
      if (!v4 || a2 != v3)
        goto LABEL_70;
      result = GEOConfigGetBOOL(v2, (uint64_t)v3);
      break;
    default:
LABEL_70:
      result = 0;
      break;
  }
  return result;
}

uint64_t addr_obj::VenueTemplateProto::default_instance_(addr_obj::VenueTemplateProto *this)
{
  unsigned __int8 v1;
  addr_obj::VenueTemplateProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF504A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF504A8))
  {
    v3 = (addr_obj::VenueTemplateProto *)operator new();
    addr_obj::VenueTemplateProto::VenueTemplateProto(v3);
    qword_1EDF504A0 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF504A8);
  }
  return qword_1EDF504A0;
}

void sub_188708A30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10B1C40B7099809);
  __cxa_guard_abort(&qword_1EDF504A8);
  _Unwind_Resume(a1);
}

addr_obj::VenueTemplateProto *addr_obj::VenueTemplateProto::VenueTemplateProto(addr_obj::VenueTemplateProto *this)
{
  *(_QWORD *)this = &off_1E1BF9A50;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_188708AB4(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;

  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_188708C18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL geo::codec::decompressiArray(uint64_t a1, uint64_t a2, int32x4_t **a3)
{
  unint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  int32x4_t *v10;
  unsigned int v11;
  _BOOL8 v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = 0;
  v18 = 0;
  *(_DWORD *)((char *)v19 + 7) = 0;
  v19[0] = 0;
  if (gcl::polyline::Decoder::getAttributeInfo(a1, a2, (uint64_t)&v17) || LODWORD(v19[0]) != 1)
    return 0;
  v6 = ((char *)a3[1] - (char *)*a3) >> 2;
  if (SHIDWORD(v18) <= v6)
  {
    if (SHIDWORD(v18) < v6)
      a3[1] = (int32x4_t *)((char *)*a3 + 4 * SHIDWORD(v18));
  }
  else
  {
    std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::__append((uint64_t)a3, SHIDWORD(v18) - v6);
  }
  v8 = (_QWORD *)operator new();
  v9 = operator new();
  *(_QWORD *)(v9 + 20) = 0;
  *(_QWORD *)(v9 + 12) = 0;
  *(_DWORD *)(v9 + 36) = 0;
  *(_QWORD *)(v9 + 28) = 0;
  *(_WORD *)(v9 + 40) = 257;
  *(_QWORD *)(v9 + 44) = 0;
  *(_QWORD *)(v9 + 60) = 0;
  *(_QWORD *)(v9 + 52) = 0;
  *(_DWORD *)(v9 + 67) = 0;
  *(_DWORD *)(v9 + 72) = 0;
  *(_WORD *)(v9 + 76) = 257;
  *(_QWORD *)(v9 + 136) = 0;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *v8 = v9;
  v17 = a1;
  v10 = *a3;
  v18 = a2;
  v11 = gcl::polyline::DecoderImpl::decompressAttributes(v9, (uint64_t)&v17, v10, 0, 0);
  v13 = (v11 & 0x1F) == 0 && v11 < 5;
  v14 = (_QWORD *)*v8;
  *v8 = 0;
  if (v14)
  {
    v15 = (void *)v14[13];
    if (v15)
    {
      v14[14] = v15;
      operator delete(v15);
    }
    v16 = (void *)v14[10];
    if (v16)
    {
      v14[11] = v16;
      operator delete(v16);
    }
    MEMORY[0x18D76437C](v14, 0x1070C40ADA6D0DELL);
  }
  MEMORY[0x18D76437C](v8, 0x20C4093837F09);
  return v13;
}

void sub_1887090B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)va);
  _Unwind_Resume(a1);
}

void sub_1887090C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

BOOL geo::codec::decompressBinaryBlob(_DWORD *a1, unsigned int a2, uint64_t *a3, uint64_t *a4, int **a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  gcl::tmesh::DecoderImpl *v17;
  int16x8_t v18;
  _BOOL8 v19;
  gcl::tmesh::DecoderImpl *v20;
  uint64_t v22;
  int16x8_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int *v30;
  unint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  int v34;
  geo::codec::Allocator *AttributeInfo;
  char v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  geo::codec::Allocator *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  geo::codec::Allocator *v47;
  geo::codec::Allocator *v48;
  uint64_t v49;
  char *v50;
  _DWORD *v51;
  char *v52;
  geo::codec::Allocator *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int **v66;
  unint64_t v67;
  BOOL *v68;
  unint64_t v69;
  int v70;
  int v71;
  char v72;
  int v73;
  unint64_t v74;
  uint64_t *v75;
  __int128 v76;
  __int128 v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v12 = *a6;
  for (i = a6[1]; i != v12; i -= 72)
  {
    v14 = *(_QWORD *)(i - 32);
    if (v14)
    {
      *(_QWORD *)(i - 24) = v14;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i - 8) + 40))(*(_QWORD *)(i - 8), v14, *(_QWORD *)(i - 16) - v14);
    }
    v15 = *(_QWORD *)(i - 64);
    if (v15)
    {
      *(_QWORD *)(i - 56) = v15;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i - 40) + 40))(*(_QWORD *)(i - 40), v15, *(_QWORD *)(i - 48) - v15);
    }
  }
  a6[1] = v12;
  v16 = (uint64_t *)operator new();
  v17 = (gcl::tmesh::DecoderImpl *)operator new();
  gcl::tmesh::DecoderImpl::DecoderImpl(v17);
  *v16 = (uint64_t)v17;
  v75 = v16;
  *(_QWORD *)&v76 = 0xEEB6CC7FFAA28E71;
  if (gcl::hls::checkBitstream(a1, a2, &v76, 2)
    || (v76 = 0uLL,
        BYTE8(v77) = 0,
        *(_QWORD *)&v77 = 0,
        !gcl::tmesh::DecoderImpl::parsePositionsAndConnectivityInfo((uint64_t)a1, a2, (uint64_t)&v76, v18))
    || v22 < 0)
  {
    v19 = 0;
    goto LABEL_10;
  }
  v24 = (int)v77;
  v25 = BYTE8(v77);
  v26 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2);
  if (SHIDWORD(v76) <= v26)
  {
    if (SHIDWORD(v76) < v26)
      a3[1] = *a3 + 12 * SHIDWORD(v76);
  }
  else
  {
    std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::__append((uint64_t)a3, SHIDWORD(v76) - v26);
  }
  v27 = *a4;
  v28 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 2);
  if (v24 <= v28)
  {
    if (v24 < v28)
      a4[1] = v27 + 12 * (int)v24;
  }
  else
  {
    std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::__append((uint64_t)a4, v24 - v28);
    v27 = *a4;
  }
  v29 = *a3;
  if (v25)
  {
    v30 = *a5;
    v31 = a5[1] - *a5;
    if (v24 <= v31)
    {
      if (v24 < v31)
        a5[1] = &v30[v24];
    }
    else
    {
      std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::__append((uint64_t)a5, v24 - v31);
      v30 = *a5;
    }
  }
  else
  {
    v30 = 0;
  }
  v74 = 0;
  if (gcl::tmesh::DecoderImpl::decompressPositionsAndConnectivity(*v16, (unint64_t)a1, a2, &v74, v29, v27, v30, v23))
  {
LABEL_31:
    v19 = 0;
    v16 = v75;
    if (!v75)
      return v19;
    goto LABEL_10;
  }
  if (v74 < a2)
  {
    if (a2 >= v74)
      v32 = a2 - v74;
    else
      v32 = 0;
    v33 = (_DWORD *)((char *)a1 + v74);
    while (1)
    {
      *(_QWORD *)&v76 = 0xEEB6CC7FFAA28E71;
      v34 = gcl::hls::checkBitstream(v33, v32, &v76, 2);
      v19 = v34 == 0;
      if (v34)
        goto LABEL_89;
      v78 = 0;
      v76 = 0u;
      v77 = 0u;
      AttributeInfo = (geo::codec::Allocator *)gcl::tmesh::Decoder::getAttributeInfo((uint64_t)v33, v32, (uint64_t)&v76);
      if ((_DWORD)AttributeInfo)
        goto LABEL_31;
      if ((HIDWORD(v77) - 1) >= 0x12)
      {
        v36 = 0;
        v37 = v77;
        v38 = (int)v77 * (uint64_t)SHIDWORD(v76);
        if (!(_DWORD)v38)
          goto LABEL_38;
      }
      else
      {
        v36 = byte_189CFC5A3[HIDWORD(v77) - 1];
        v37 = v77;
        v38 = (int)v77 * (uint64_t)SHIDWORD(v76);
        if (!(_DWORD)v38)
          goto LABEL_38;
      }
      *(_QWORD *)&v76 = 0;
      v40 = a6[1];
      v39 = a6[2];
      v73 = v78;
      if (v40 < v39)
      {
        if (v40)
        {
          *(_QWORD *)(v40 + 64) = 0;
          *(_OWORD *)(v40 + 32) = 0u;
          *(_OWORD *)(v40 + 48) = 0u;
          *(_OWORD *)v40 = 0u;
          *(_OWORD *)(v40 + 16) = 0u;
          v41 = (geo::codec::Allocator *)geo::codec::Allocator::instance(AttributeInfo);
          *(_QWORD *)(v40 + 32) = v41;
          *(_QWORD *)(v40 + 40) = 0;
          *(_QWORD *)(v40 + 48) = 0;
          *(_QWORD *)(v40 + 56) = 0;
          *(_QWORD *)(v40 + 64) = geo::codec::Allocator::instance(v41);
        }
        v42 = v40 + 72;
        goto LABEL_71;
      }
      v72 = v36;
      v43 = 0x8E38E38E38E38E39 * ((uint64_t)(v40 - *a6) >> 3);
      v44 = v43 + 1;
      if (v43 + 1 > 0x38E38E38E38E38ELL)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v45 = 0x8E38E38E38E38E39 * ((uint64_t)(v39 - *a6) >> 3);
      if (2 * v45 > v44)
        v44 = 2 * v45;
      if (v45 >= 0x1C71C71C71C71C7)
        v46 = 0x38E38E38E38E38ELL;
      else
        v46 = v44;
      if (v46)
      {
        v47 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6[3] + 16))(a6[3], 72 * v46, 8);
        v48 = v47;
        v49 = (uint64_t)v47 + 72 * v43;
        v50 = (char *)v47 + 72 * v46;
        if (v47)
        {
          v71 = v37;
          v51 = v33;
          v52 = (char *)v47 + 72 * v46;
          *(_QWORD *)(v49 + 64) = 0;
          *(_OWORD *)(v49 + 32) = 0u;
          *(_OWORD *)(v49 + 48) = 0u;
          *(_OWORD *)v49 = 0u;
          *(_OWORD *)(v49 + 16) = 0u;
          v53 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v47);
          v54 = (_QWORD *)((char *)v48 + 72 * v43);
          v54[4] = v53;
          v54[5] = 0;
          v54[6] = 0;
          v54[7] = 0;
          v54[8] = geo::codec::Allocator::instance(v53);
          v36 = v72;
          v50 = v52;
          v33 = v51;
          v37 = v71;
          v42 = v49 + 72;
          v55 = *a6;
          v56 = a6[1];
          if (v56 == *a6)
            goto LABEL_70;
        }
        else
        {
          v36 = v72;
          v42 = v49 + 72;
          v55 = *a6;
          v56 = a6[1];
          if (v56 == *a6)
          {
LABEL_70:
            *a6 = v49;
            a6[1] = v42;
            v62 = a6[2];
            a6[2] = (uint64_t)v50;
            if (!v56)
              goto LABEL_71;
            goto LABEL_68;
          }
        }
      }
      else
      {
        v50 = 0;
        v49 = 8 * ((uint64_t)(v40 - *a6) >> 3);
        v36 = v72;
        v42 = v49 + 72;
        v55 = *a6;
        v56 = a6[1];
        if (v56 == *a6)
          goto LABEL_70;
      }
      v57 = 0;
      do
      {
        v58 = v49 + v57;
        v59 = v56 + v57;
        v60 = *(_QWORD *)(v56 + v57 - 72);
        *(_QWORD *)(v58 - 56) = 0;
        *(_QWORD *)(v58 - 48) = 0;
        *(_QWORD *)(v58 - 72) = v60;
        *(_QWORD *)(v58 - 64) = 0;
        *(_QWORD *)(v58 - 40) = *(_QWORD *)(v56 + v57 - 40);
        *(_OWORD *)(v58 - 64) = *(_OWORD *)(v56 + v57 - 64);
        *(_QWORD *)(v58 - 48) = *(_QWORD *)(v56 + v57 - 48);
        *(_QWORD *)(v59 - 64) = 0;
        *(_QWORD *)(v59 - 56) = 0;
        *(_QWORD *)(v59 - 48) = 0;
        *(_QWORD *)(v58 - 32) = 0;
        *(_QWORD *)(v58 - 24) = 0;
        *(_QWORD *)(v58 - 16) = 0;
        *(_QWORD *)(v58 - 8) = *(_QWORD *)(v56 + v57 - 8);
        *(_OWORD *)(v58 - 32) = *(_OWORD *)(v56 + v57 - 32);
        *(_QWORD *)(v58 - 16) = *(_QWORD *)(v56 + v57 - 16);
        *(_QWORD *)(v59 - 32) = 0;
        *(_QWORD *)(v59 - 24) = 0;
        *(_QWORD *)(v59 - 16) = 0;
        v57 -= 72;
      }
      while (v56 + v57 != v55);
      v56 = *a6;
      v61 = a6[1];
      *a6 = v49 + v57;
      a6[1] = v42;
      v62 = a6[2];
      a6[2] = (uint64_t)v50;
      while (v61 != v56)
      {
        v63 = *(_QWORD *)(v61 - 32);
        if (v63)
        {
          *(_QWORD *)(v61 - 24) = v63;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v61 - 8) + 40))(*(_QWORD *)(v61 - 8), v63, *(_QWORD *)(v61 - 16) - v63);
        }
        v64 = *(_QWORD *)(v61 - 64);
        if (v64)
        {
          *(_QWORD *)(v61 - 56) = v64;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v61 - 40) + 40))(*(_QWORD *)(v61 - 40), v64, *(_QWORD *)(v61 - 48) - v64);
        }
        v61 -= 72;
      }
      v36 = v72;
      if (!v56)
        goto LABEL_71;
LABEL_68:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6[3] + 40))(a6[3], v56, v62 - v56);
LABEL_71:
      a6[1] = v42;
      *(_DWORD *)(v42 - 68) = v37;
      v66 = (int **)(v42 - 64);
      v65 = *(_QWORD *)(v42 - 64);
      v67 = (*(_QWORD *)(v42 - 56) - v65) >> 2;
      if (v38 <= v67)
      {
        if (v38 < v67)
          *(_QWORD *)(v42 - 56) = v65 + 4 * v38;
      }
      else
      {
        std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::__append(v42 - 64, v38 - v67);
      }
      *(_BYTE *)(v42 - 72) = v36;
      if (v73 == 1)
      {
        v68 = *(BOOL **)(v42 - 32);
        v69 = *(_QWORD *)(v42 - 24) - (_QWORD)v68;
        if (v38 <= v69)
        {
          if (v38 < v69)
            *(_QWORD *)(v42 - 24) = &v68[v38];
        }
        else
        {
          std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::__append(v42 - 32, v38 - v69);
          v68 = *(BOOL **)(v42 - 32);
        }
        v70 = gcl::tmesh::DecoderImpl::decompressVertexAttributes(*v75, (unint64_t)v33, v32, &v76, *v66, v68);
      }
      else
      {
        v70 = gcl::tmesh::DecoderImpl::decompressVertexAttributes(*v75, (unint64_t)v33, v32, &v76, *v66, 0);
      }
      if (v70)
        goto LABEL_31;
      v33 = (_DWORD *)((char *)v33 + v76);
      if (v32 >= (unint64_t)v76)
        v32 -= v76;
      else
        v32 = 0;
LABEL_38:
      if (!v32)
        goto LABEL_89;
    }
  }
  v19 = 1;
LABEL_89:
  v16 = v75;
  if (v75)
  {
LABEL_10:
    v20 = (gcl::tmesh::DecoderImpl *)*v16;
    *v16 = 0;
    if (v20)
    {
      gcl::tmesh::DecoderImpl::~DecoderImpl(v20);
      MEMORY[0x18D76437C]();
    }
    MEMORY[0x18D76437C](v16, 0x20C4093837F09);
  }
  return v19;
}

void sub_1887097E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;

  v3 = result;
  v4 = *(_DWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 2)
  {
    if (a2)
    {
      v11 = 4 * a2;
      v12 = &v4[a2];
      do
      {
        if (v4)
          *v4 = 0;
        ++v4;
        v11 -= 4;
      }
      while (v11);
      v4 = v12;
    }
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v6 = (uint64_t)v4 - *(_QWORD *)result;
    v7 = v6 >> 2;
    v8 = (v6 >> 2) + a2;
    if (v8 >> 62)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v9 = v5 - *(_QWORD *)result;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 4 * v10, 4);
    else
      result = 0;
    v13 = (_DWORD *)(result + 4 * v7);
    v14 = 4 * a2;
    v15 = &v13[a2];
    v16 = v13;
    do
    {
      if (v16)
        *v16 = 0;
      ++v16;
      v14 -= 4;
    }
    while (v14);
    v17 = *(_QWORD *)v3;
    v18 = *(_QWORD *)(v3 + 8);
    if (v18 != *(_QWORD *)v3)
    {
      v19 = v18 - *(_QWORD *)v3 - 4;
      if (v19 < 0x2C)
        goto LABEL_35;
      if ((unint64_t)(v18 - (v6 + result)) < 0x20)
        goto LABEL_35;
      v20 = (v19 >> 2) + 1;
      v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      v22 = v18 - v21;
      v13 = (_DWORD *)((char *)v13 - v21);
      v23 = (_OWORD *)(result + 4 * v7 - 16);
      v24 = (__int128 *)(v18 - 16);
      v25 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 8;
      }
      while (v25);
      v18 = v22;
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_35:
        do
        {
          v27 = *(_DWORD *)(v18 - 4);
          v18 -= 4;
          *--v13 = v27;
        }
        while (v18 != v17);
      }
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v15;
    v28 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 4 * v10;
    if (v17)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v17, v28 - v17);
  }
  return result;
}

uint64_t std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 2) >= a2)
  {
    *(_QWORD *)(result + 8) = v4 + 12 * (12 * a2 / 0xC);
  }
  else
  {
    v6 = *(_QWORD *)result;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)result) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 12 * v10, 4);
      v6 = *(_QWORD *)v3;
      v4 = *(_QWORD *)(v3 + 8);
    }
    else
    {
      result = 0;
    }
    v11 = result + 12 * v7;
    v12 = v11 + 12 * (12 * a2 / 0xC);
    if (v4 != v6)
    {
      do
      {
        v13 = *(_QWORD *)(v4 - 12);
        v4 -= 12;
        v14 = *(_DWORD *)(v4 + 8);
        *(_QWORD *)(v11 - 12) = v13;
        v11 -= 12;
        *(_DWORD *)(v11 + 8) = v14;
      }
      while (v4 != v6);
      v6 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v11;
    *(_QWORD *)(v3 + 8) = v12;
    v15 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 12 * v10;
    if (v6)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v6, v15 - v6);
  }
  return result;
}

uint64_t gcl::hls::checkBitstream(_DWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  unint64_t i;
  int v12;

  if (!a1 || a2 < 0 || (unint64_t)a2 < 4)
    return 3;
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4 || (unint64_t)a2 < 0x10 || a1 == (_DWORD *)-16 || !a4)
    return 3;
  v4 = (unsigned __int8 *)(a1 + 2);
  v5 = 4 * a4;
  v6 = a1[3];
  while (*a3 != *a1)
  {
    ++a3;
    v5 -= 4;
    if (!v5)
      return 3;
  }
  v8 = 16;
  if (a2 > 16)
    v8 = a2;
  v9 = (a2 & (unint64_t)~(a2 >> 63)) - v8 + 16 > v6 || a2 < (uint64_t)v6;
  if (v9 || a1 == (_DWORD *)-8 || (unsigned __int8 *)((char *)a1 + v6) < v4)
    return 3;
  v10 = -1;
  for (i = v6 - 8; i; --i)
  {
    v12 = *v4++;
    v10 = __const__ZN3gcl12computeCRC32EPKhm_table[v12 ^ HIBYTE(v10)] ^ (v10 << 8);
  }
  if (a1[1] == v10)
    return 0;
  else
    return 3;
}

uint64_t gcl::tmesh::DecoderImpl::decompressPositionsAndConnectivity(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, int *a7, int16x8_t a8)
{
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t result;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned __int8 *inited;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  int v55;
  int v56;
  _DWORD *v57;

  *(_DWORD *)(a1 + 3872) = 0;
  if (!a5 || !a6)
    goto LABEL_59;
  v15 = (_DWORD *)gcl::tmesh::DecoderImpl::parsePositionsAndConnectivityInfo(a2, a3, a1 + 3776, a8);
  if (!v15)
    goto LABEL_16;
  if (v16 < 0)
    goto LABEL_16;
  v17 = *(unsigned int *)(a1 + 3784);
  if (a3 - v17 < 0)
    goto LABEL_16;
  if (!a2)
    goto LABEL_16;
  if ((unint64_t)v15 + v16 < a2)
    goto LABEL_16;
  v18 = a2 + v17;
  if (v18 < (unint64_t)v15)
    goto LABEL_16;
  v19 = v18 - (_QWORD)v15;
  if (v19 < 0)
    goto LABEL_16;
  if (*(_BYTE *)(a1 + 3780)
    || (v20 = *(_BYTE *)(a1 + 3781), (v20 & 0xFC) != 4)
    || (v21 = *(_DWORD *)(a1 + 3808), (v20 & 0xFE) == 4) && (v21 | 4) != 4 && *(_BYTE *)(a1 + 3800))
  {
    result = 4;
    goto LABEL_60;
  }
  if ((*(_DWORD *)(a1 + 3812) - 3) < 2 || (v21 | 2) == 3)
  {
LABEL_16:
    result = 3;
LABEL_60:
    *(_DWORD *)(a1 + 3872) = result;
    return result;
  }
  if ((unint64_t)v19 >= 4)
  {
    v24 = *v15;
    if ((v19 & 0xFFFFFFFFFFFFFFFCLL) == 4)
    {
      v23 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = *(unsigned __int8 *)(a1 + 3820);
      if (!*(_BYTE *)(a1 + 3820))
        goto LABEL_21;
    }
    else
    {
      v23 = v15[1];
      if ((v19 & 0xFFFFFFFFFFFFFFFCLL) == 8)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = *(unsigned __int8 *)(a1 + 3820);
        if (!*(_BYTE *)(a1 + 3820))
          goto LABEL_21;
      }
      else
      {
        v26 = v19 - 12;
        v27 = (unsigned __int8 *)(v15 + 3);
        v25 = v15[2];
        v28 = *(unsigned __int8 *)(a1 + 3820);
        if (!*(_BYTE *)(a1 + 3820))
          goto LABEL_21;
      }
    }
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = *(unsigned __int8 *)(a1 + 3820);
    if (!*(_BYTE *)(a1 + 3820))
    {
LABEL_21:
      v29 = 0;
      v30 = 0;
      goto LABEL_36;
    }
  }
  if (v26)
  {
    v28 = *v27;
    if (v26 == 1)
    {
      v29 = 0;
    }
    else
    {
      v29 = v27[1];
      if (v26 != 2)
      {
        v26 -= 3;
        v30 = v27[2];
        v27 += 3;
        goto LABEL_36;
      }
    }
    v30 = 0;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    v29 = 0;
    v28 = 0;
    v30 = 0;
    v27 = 0;
  }
LABEL_36:
  if (!v27)
    goto LABEL_16;
  v31 = (int)v28 <= (int)v29 ? v29 : v28;
  v32 = v28 <= v29 ? v29 : v28;
  v33 = v31 >= v30 ? v32 : v30;
  if (v33 >= 0x1D)
    goto LABEL_16;
  *(_DWORD *)(a1 + 2688) = v28;
  *(_DWORD *)(a1 + 2692) = v29;
  *(_DWORD *)(a1 + 2696) = v30;
  gcl::tmesh::DecoderImpl::init((gcl::tmesh::DecoderImpl *)a1, *(_DWORD *)(a1 + 3788), *(_DWORD *)(a1 + 3792));
  inited = gcl::tmesh::DecoderImpl::initArithmeticDecoder(a1, v27, v26);
  if (!inited)
    goto LABEL_16;
  v36 = v35;
  if (v35 < 0)
    goto LABEL_16;
  v37 = inited;
  v38 = a6;
  if (*(_BYTE *)(a1 + 3800))
    v38 = *(_QWORD *)(a1 + 128);
  v39 = *(_QWORD *)(a1 + 104);
  if (*(_BYTE *)(a1 + 3816))
    gcl::tmesh::DecoderImpl::decompressAdaptiveTraversal((_DWORD *)a1, v39, v38);
  else
    gcl::tmesh::DecoderImpl::decompress(a1, v39, v38);
  if (!*(_BYTE *)(a1 + 3800))
  {
    std::vector<int>::resize((std::vector<int> *)(a1 + 56), 2uLL);
    v41 = *(_DWORD **)(a1 + 56);
    *v41 = 0;
    v41[1] = *(_DWORD *)(a1 + 3792);
    goto LABEL_63;
  }
  if (!a7)
  {
LABEL_59:
    result = 5;
    goto LABEL_60;
  }
  if (!gcl::tmesh::DecoderImpl::initArithmeticDecoder(a1, v37, v36) || v40 < 0)
    goto LABEL_16;
  gcl::tmesh::DecoderImpl::decompressTriangleOrder((gcl::tmesh::DecoderImpl *)a1, a7);
  gcl::tmesh::DecoderImpl::updateMappingInformation((std::vector<int> *)a1, a7, a6);
LABEL_63:
  result = *(unsigned int *)(a1 + 3872);
  if (!(_DWORD)result)
  {
    if (*(int *)(a1 + 3792) >= 1)
    {
      v42 = 0;
      v43 = 0;
      do
      {
        v44 = *(_QWORD *)(a1 + 128) + v42;
        v45 = *(_QWORD *)(a6 + v42);
        *(_DWORD *)(v44 + 8) = *(_DWORD *)(a6 + v42 + 8);
        *(_QWORD *)v44 = v45;
        ++v43;
        v42 += 12;
      }
      while (v43 < *(int *)(a1 + 3792));
    }
    v46 = *(_DWORD *)(a1 + 3788);
    if (v24 || v23 || v25)
    {
      if (v46 >= 1)
      {
        v52 = 0;
        v53 = 0;
        do
        {
          v54 = (_DWORD *)(*(_QWORD *)(a1 + 104) + v52);
          v55 = *v54 + v24;
          v56 = v54[1] + v23;
          LODWORD(v54) = v54[2] + v25;
          v57 = (_DWORD *)(a5 + v52);
          *v57 = v55;
          v57[1] = v56;
          v57[2] = (_DWORD)v54;
          ++v53;
          v52 += 12;
        }
        while (v53 < *(int *)(a1 + 3788));
      }
    }
    else if (v46 >= 1)
    {
      v47 = 0;
      v48 = 0;
      do
      {
        v49 = (uint64_t *)(*(_QWORD *)(a1 + 104) + v47);
        v50 = a5 + v47;
        v51 = *v49;
        *(_DWORD *)(v50 + 8) = *((_DWORD *)v49 + 2);
        *(_QWORD *)v50 = v51;
        ++v48;
        v47 += 12;
      }
      while (v48 < *(int *)(a1 + 3788));
    }
    result = 0;
    *a4 = *(unsigned int *)(a1 + 3784);
  }
  return result;
}

unsigned __int8 *gcl::tmesh::DecoderImpl::initArithmeticDecoder(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  __int128 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;

  if (a3 < 4)
    return 0;
  v10 = *a2;
  v8 = (unsigned __int8 *)(a2 + 1);
  v9 = (unsigned __int8 *)v10;
  if (v8)
  {
    v11 = &v9[(_QWORD)v8];
    if (!&v9[(_QWORD)v8])
      return 0;
  }
  else
  {
    v11 = v9;
    v8 = 0;
    if (!v9)
      return 0;
  }
  if (a3 - 4 - (_QWORD)v9 < 0)
    return 0;
  *(_DWORD *)(a1 + 2704) = (_DWORD)v9;
  *(_QWORD *)(a1 + 2712) = v8;
  *(_QWORD *)&v3 = 0xFFFF000000000000;
  *((_QWORD *)&v3 + 1) = 0xFFFF000000000000;
  *(_OWORD *)(a1 + 2728) = v3;
  *(_QWORD *)(a1 + 2744) = 16;
  if (!(_DWORD)v9)
  {
    v4 = -16777216;
    goto LABEL_13;
  }
  v4 = *v8 << 24;
  *(_DWORD *)(a1 + 2736) = v4;
  if ((_DWORD)v9 == 1)
  {
LABEL_13:
    v5 = v4 | 0xFF0000;
    goto LABEL_14;
  }
  v5 = v4 | (v8[1] << 16);
  *(_DWORD *)(a1 + 2736) = v5;
  if (v9 <= 2)
  {
LABEL_14:
    v6 = v5 | 0xFF00;
    goto LABEL_15;
  }
  v6 = v5 | (v8[2] << 8);
  *(_DWORD *)(a1 + 2736) = v6;
  if ((_DWORD)v9 == 3)
  {
LABEL_15:
    v7 = 255;
    goto LABEL_16;
  }
  v7 = v8[3];
LABEL_16:
  *(_DWORD *)(a1 + 2736) = v7 | v6;
  *(_QWORD *)(a1 + 2720) = 3;
  memcpy((void *)(a1 + 2752), &gcl::ArithmeticDecoder::probUpdateLutInterleaved, 0x400uLL);
  return v11;
}

uint64_t gcl::tmesh::DecoderImpl::parsePositionsAndConnectivityInfo(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t a4)
{
  unint64_t v4;
  int v6;
  char v7;
  char v8;
  __int16 v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;

  if (a2 < 4)
    return 0;
  v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4
    || a2 == 8
    || a2 == 9
    || (a2 & 0xFFFFFFFFFFFFFFFELL) == 0xA
    || v4 == 12
    || v4 == 16
    || v4 == 20
    || a2 == 24
    || a2 == 25
    || a2 == 26
    || a2 == 27)
  {
    return 0;
  }
  if ((unint64_t)a2 < 0x20)
    return 0;
  if (*(_DWORD *)a1 != -90009999)
    return 0;
  v6 = *(_DWORD *)(a1 + 4);
  v7 = *(_BYTE *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 9);
  v9 = *(_WORD *)(a1 + 10);
  v10 = *(_DWORD *)(a1 + 12);
  v11 = *(_DWORD *)(a1 + 16) & 0x7FFFFFFF;
  v12 = *(_DWORD *)(a1 + 20) & 0x7FFFFFFF;
  v13 = *(unsigned __int8 *)(a1 + 24);
  v14 = *(unsigned __int8 *)(a1 + 25);
  v15 = *(unsigned __int8 *)(a1 + 26);
  v16 = *(unsigned __int8 *)(a1 + 27);
  *(uint16x4_t *)a4.i8 = vshl_u16((uint16x4_t)vdup_n_s16(v15), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL);
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 4) = v7;
  *(_BYTE *)(a3 + 5) = v8;
  *(_WORD *)(a3 + 6) = v9;
  *(_DWORD *)(a3 + 8) = v10;
  *(_DWORD *)(a3 + 12) = v11;
  *(_DWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 20) = v16;
  *(_BYTE *)(a3 + 24) = v15 & 1;
  *(_DWORD *)(a3 + 28) = v6;
  *(_DWORD *)(a3 + 32) = v13;
  *(_DWORD *)(a3 + 36) = v14;
  a4.i32[0] &= 0xFF01FF01;
  a4.i16[2] &= 0xFF01u;
  a4.i16[3] &= 0xFF01u;
  *(_DWORD *)(a3 + 40) = vmovn_s16(a4).u32[0];
  *(_BYTE *)(a3 + 44) = (v15 & 0x20) != 0;
  return a1 + 32;
}

void gcl::tmesh::DecoderImpl::updateMappingInformation(std::vector<int> *this, int *a2, uint64_t a3)
{
  int begin;
  int *v7;
  int *v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int *end;
  std::vector<int>::pointer *p_end;
  int *value;
  unint64_t v24;
  uint64_t v25;
  std::vector<int>::pointer v26;
  uint64_t v27;
  std::vector<int>::pointer v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::vector<int>::pointer v36;
  uint64_t v37;
  int v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  std::vector<int>::pointer v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  int32x4_t v48;
  int32x4_t *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;

  begin = (int)this[158].__begin_;
  if (!begin)
    return;
  v7 = a2;
  v8 = a2;
  if (begin != 1)
  {
    v8 = a2 + 1;
    v9 = a2[1];
    v10 = *a2;
    if (v9 >= *a2)
      v7 = a2;
    else
      v7 = a2 + 1;
    if (v9 < v10)
      v8 = a2;
    if (begin != 2)
    {
      v11 = a2 + 2;
      if (v9 <= v10)
        v12 = *a2;
      else
        v12 = a2[1];
      if (v9 < v10)
        v10 = a2[1];
      v13 = 4 * begin - 12;
      while (v13)
      {
        v16 = *v11;
        v15 = v11[1];
        if (v15 >= *v11)
        {
          if (v16 < v10)
          {
            v10 = *v11;
            v7 = v11;
          }
          v14 = v15 < v12;
          if (v15 > v12)
            v12 = v11[1];
          if (!v14)
            v8 = v11 + 1;
          v11 += 2;
          v13 -= 8;
          if (v13 == -4)
            goto LABEL_35;
        }
        else
        {
          v10 = *v7;
          if (v15 < *v7)
          {
            v10 = v11[1];
            v7 = v11 + 1;
          }
          v12 = *v8;
          if (v16 > *v8)
            v12 = *v11;
          if (v16 >= *v8)
            v8 = v11;
          v11 += 2;
          v13 -= 8;
          if (v13 == -4)
            goto LABEL_35;
        }
      }
      v17 = *v11;
      if (*v11 < *v7)
        goto LABEL_36;
      if (v17 >= *v8)
        v8 = v11;
    }
  }
LABEL_35:
  v17 = *v7;
LABEL_36:
  if (v17 < 0 || (v18 = *v8, v19 = v18 - v17, v18 - v17 > begin))
  {
    LODWORD(this[161].__end_) = 3;
  }
  else
  {
    v20 = v19 + 2;
    LODWORD(this->__begin_) = v18;
    HIDWORD(this->__begin_) = v17;
    p_end = &this[2].__end_;
    end = this[2].__end_;
    value = this[2].__end_cap_.__value_;
    if (value != end)
    {
      this[2].__end_cap_.__value_ = end;
      value = end;
    }
    v24 = value - end;
    if (v20 <= v24)
    {
      if (v20 < v24)
        this[2].__end_cap_.__value_ = &end[v20];
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 56), v20 - v24);
      begin = (int)this[158].__begin_;
    }
    if (begin >= 1)
    {
      v25 = 0;
      v26 = *p_end;
      do
      {
        v27 = a2[v25] - v17 + 1;
        ++v26[v27];
        ++v25;
      }
      while (v25 < SLODWORD(this[158].__begin_));
      begin = (int)this[158].__begin_;
    }
    if ((v19 & 0x80000000) == 0)
    {
      v28 = *p_end;
      if (v20 <= 2)
        v29 = 2;
      else
        v29 = v20;
      v32 = *v28;
      v30 = v28 + 1;
      v31 = v32;
      v33 = v29 - 1;
      do
      {
        v31 += *v30;
        *v30++ = v31;
        --v33;
      }
      while (v33);
      begin = (int)this[158].__begin_;
    }
    if (begin >= 1)
    {
      v34 = 0;
      v35 = 0;
      do
      {
        v36 = this[2].__end_;
        v37 = a2[v35] - v17;
        v38 = v36[v37];
        v36[v37] = v38 + 1;
        v39 = &this[5].__end_[v34];
        LODWORD(v36) = v39[2];
        v40 = a3 + 12 * v38;
        *(_QWORD *)v40 = *(_QWORD *)v39;
        *(_DWORD *)(v40 + 8) = (_DWORD)v36;
        ++v35;
        v34 += 3;
      }
      while (v35 < SLODWORD(this[158].__begin_));
    }
    if ((v19 & 0x80000000) == 0)
    {
      v41 = 0;
      v42 = 0;
      v43 = *p_end;
      do
      {
        v44 = v43[v41];
        if (v42 < v44)
        {
          v45 = v17 + v41;
          v46 = v44 - (uint64_t)v42;
          v47 = v42;
          if (v46 < 8)
            goto LABEL_68;
          v47 = (v46 & 0xFFFFFFFFFFFFFFF8) + v42;
          v48 = vdupq_n_s32(v45);
          v49 = (int32x4_t *)&a2[v42 + 4];
          v50 = v46 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v49[-1] = v48;
            *v49 = v48;
            v49 += 2;
            v50 -= 8;
          }
          while (v50);
          if (v46 != (v46 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_68:
            v51 = v44 - v47;
            v52 = (unsigned int *)&a2[v47];
            do
            {
              *v52++ = v45;
              --v51;
            }
            while (v51);
          }
        }
        v43[v41++] = v42;
        v42 = v44;
      }
      while (v41 != v19 + 1);
    }
  }
}

void gcl::tmesh::DecoderImpl::~DecoderImpl(gcl::tmesh::DecoderImpl *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v2 = (void *)*((_QWORD *)this + 333);
  if (v2)
  {
    *((_QWORD *)this + 334) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 330);
  if (v3)
  {
    *((_QWORD *)this + 331) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 327);
  if (v4)
  {
    *((_QWORD *)this + 328) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 324);
  if (v5)
  {
    *((_QWORD *)this + 325) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 321);
  if (v6)
  {
    *((_QWORD *)this + 322) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 318);
  if (v7)
  {
    *((_QWORD *)this + 319) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 315);
  if (v8)
  {
    *((_QWORD *)this + 316) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 312);
  if (v9)
  {
    *((_QWORD *)this + 313) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 309);
  if (v10)
  {
    *((_QWORD *)this + 310) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 306);
  if (v11)
  {
    *((_QWORD *)this + 307) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 303);
  if (v12)
  {
    *((_QWORD *)this + 304) = v12;
    operator delete(v12);
  }
  v13 = 1536;
  do
  {
    v14 = *(void **)((char *)this + v13 + 232);
    if (v14)
    {
      *(_QWORD *)((char *)this + v13 + 240) = v14;
      operator delete(v14);
    }
    v13 -= 24;
  }
  while (v13);
  v15 = (void *)*((_QWORD *)this + 28);
  if (v15)
  {
    *((_QWORD *)this + 29) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 25);
  if (v16)
  {
    *((_QWORD *)this + 26) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 22);
  if (v17)
  {
    *((_QWORD *)this + 23) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 19);
  if (v18)
  {
    *((_QWORD *)this + 20) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 16);
  if (v19)
  {
    *((_QWORD *)this + 17) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 13);
  if (v20)
  {
    *((_QWORD *)this + 14) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 10);
  if (v21)
  {
    *((_QWORD *)this + 11) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 7);
  if (v22)
  {
    *((_QWORD *)this + 8) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 4);
  if (v23)
  {
    *((_QWORD *)this + 5) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 1);
  if (v24)
  {
    *((_QWORD *)this + 2) = v24;
    operator delete(v24);
  }
}

gcl::tmesh::DecoderImpl *gcl::tmesh::DecoderImpl::DecoderImpl(gcl::tmesh::DecoderImpl *this)
{
  *(_OWORD *)((char *)this + 236) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 63) = -1;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  bzero((char *)this + 256, 0x700uLL);
  memset_pattern16((char *)this + 2048, &memset_pattern_20, 0xAuLL);
  *((_WORD *)this + 1029) = 0x8000;
  memset_pattern16((char *)this + 2060, &memset_pattern_21, 0x50uLL);
  memset_pattern16((char *)this + 2140, &memset_pattern_22, 0x60uLL);
  *((_DWORD *)this + 559) = -2147450880;
  memset_pattern16((char *)this + 2240, &memset_pattern_23, 0x20uLL);
  *((_QWORD *)this + 284) = 0x8000800080008000;
  memset_pattern16((char *)this + 2280, &memset_pattern_24, 0x80uLL);
  memset_pattern16((char *)this + 2408, &memset_pattern_25, 6uLL);
  *((_WORD *)this + 1207) = 0x8000;
  memset_pattern16((char *)this + 2416, &memset_pattern_26, 6uLL);
  *((_QWORD *)this + 339) = 0;
  *((_QWORD *)this + 472) = 0;
  *((_QWORD *)this + 474) = 0;
  *((_QWORD *)this + 473) = 0;
  *((_BYTE *)this + 3800) = 0;
  *((_DWORD *)this + 951) = 0;
  *(_OWORD *)((char *)this + 2424) = 0u;
  *(_OWORD *)((char *)this + 2440) = 0u;
  *(_OWORD *)((char *)this + 2456) = 0u;
  *(_OWORD *)((char *)this + 2472) = 0u;
  *(_OWORD *)((char *)this + 2488) = 0u;
  *(_OWORD *)((char *)this + 2504) = 0u;
  *(_OWORD *)((char *)this + 2520) = 0u;
  *(_OWORD *)((char *)this + 2536) = 0u;
  *(_OWORD *)((char *)this + 2552) = 0u;
  *(_OWORD *)((char *)this + 2568) = 0u;
  *(_OWORD *)((char *)this + 2584) = 0u;
  *(_OWORD *)((char *)this + 2600) = 0u;
  *(_OWORD *)((char *)this + 2616) = 0u;
  *(_OWORD *)((char *)this + 2632) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *((_QWORD *)this + 335) = 0;
  *((_QWORD *)this + 476) = 0x200000004;
  *((_DWORD *)this + 954) = 16843009;
  *((_BYTE *)this + 3820) = 1;
  *((_OWORD *)this + 239) = 0u;
  *((_OWORD *)this + 240) = 0u;
  *((_QWORD *)this + 482) = 0;
  *((_QWORD *)this + 483) = 0x200000004;
  *((_DWORD *)this + 968) = 6;
  return this;
}

void gcl::tmesh::DecoderImpl::init(gcl::tmesh::DecoderImpl *this, int a2, int a3)
{
  char **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  __int128 v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  int v79;
  char *v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  const void **v85;
  char *v86;
  _BYTE *v87;
  const void *v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  unint64_t v93;

  v7 = *((_QWORD *)this + 13);
  v8 = *((_QWORD *)this + 14);
  v6 = (char **)((char *)this + 104);
  v9 = a2;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 2);
  v11 = a2 >= v10;
  v12 = a2 - v10;
  if (v12 != 0 && v11)
  {
    std::vector<gcl::Vector3<int>>::__append(v6, v12);
  }
  else if (!v11)
  {
    *((_QWORD *)this + 14) = v7 + 12 * (int)v9;
  }
  *(_QWORD *)this = 0;
  v13 = *((_QWORD *)this + 7);
  if (*((_QWORD *)this + 8) != v13)
    *((_QWORD *)this + 8) = v13;
  v14 = *((_QWORD *)this + 16);
  *(_QWORD *)((char *)this + 3836) = 0;
  *((_DWORD *)this + 947) = a2;
  *((_DWORD *)this + 948) = a3;
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 17) - v14) >> 2);
  if (a3 <= v15)
  {
    if (a3 < v15)
      *((_QWORD *)this + 17) = v14 + 12 * a3;
  }
  else
  {
    std::vector<gcl::Vector3<int>>::__append((char **)this + 16, a3 - v15);
  }
  v17 = (char *)*((_QWORD *)this + 4);
  v16 = (char *)*((_QWORD *)this + 5);
  v18 = v16 - v17;
  if ((unint64_t)(v16 - v17) <= 0x3F)
  {
    v19 = *((_QWORD *)this + 6);
    if (v19 - (uint64_t)v16 >= 64 - v18)
    {
      bzero(*((void **)this + 5), 64 - v18);
      *((_QWORD *)this + 5) = v17 + 64;
      goto LABEL_41;
    }
    v20 = v19 - (_QWORD)v17;
    v21 = 2 * v20;
    if (2 * v20 <= 0x40)
      v21 = 64;
    if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
      v22 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    v23 = (char *)operator new(v22);
    v24 = &v23[v18];
    v25 = &v23[v22];
    bzero(&v23[v18], 64 - v18);
    if (v16 == v17)
      goto LABEL_39;
    if (v18 >= 8 && (unint64_t)(v17 - v23) >= 0x20)
    {
      if (v18 < 0x20)
      {
        v26 = 0;
        goto LABEL_31;
      }
      v26 = v18 & 0xFFFFFFFFFFFFFFE0;
      v27 = v16 - 16;
      v28 = &v23[v16 - 16 - v17];
      v29 = v18 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v30 = *(_OWORD *)v27;
        *((_OWORD *)v28 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)v28 = v30;
        v28 -= 32;
        v27 -= 32;
        v29 -= 32;
      }
      while (v29);
      if (v18 == v26)
        goto LABEL_38;
      if ((v18 & 0x18) != 0)
      {
LABEL_31:
        v24 -= v18 & 0xFFFFFFFFFFFFFFF8;
        v31 = &v16[-v26 - 8];
        v32 = (char *)(v31 - v17);
        v33 = v26 - (v18 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v34 = *(_QWORD *)v31;
          v31 -= 8;
          *(_QWORD *)&v32[(_QWORD)v23] = v34;
          v32 -= 8;
          v33 += 8;
        }
        while (v33);
        v16 -= v18 & 0xFFFFFFFFFFFFFFF8;
        if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_38;
        goto LABEL_36;
      }
      v24 -= v26;
      v16 -= v26;
    }
LABEL_36:
    v35 = v24 - 1;
    do
    {
      v36 = *--v16;
      *v35-- = v36;
    }
    while (v16 != v17);
LABEL_38:
    v16 = v17;
    v24 = v23;
LABEL_39:
    *((_QWORD *)this + 4) = v24;
    *((_QWORD *)this + 5) = v23 + 64;
    *((_QWORD *)this + 6) = v25;
    if (v16)
      operator delete(v16);
    goto LABEL_41;
  }
  if (v18 != 64)
    *((_QWORD *)this + 5) = v17 + 64;
LABEL_41:
  v37 = *((_QWORD *)this + 1);
  v38 = *((_QWORD *)this + 2) - v37;
  if (v38 > 0xFF)
  {
    if (v38 != 256)
      *((_QWORD *)this + 2) = v37 + 256;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 8), 64 - (v38 >> 2));
  }
  v40 = (char *)*((_QWORD *)this + 19);
  v39 = (char *)*((_QWORD *)this + 20);
  v41 = (v39 - v40) >> 4;
  v42 = v9 - v41;
  if (v9 <= v41)
  {
    if (v9 < v41)
    {
      v39 = &v40[16 * v9];
      *((_QWORD *)this + 20) = v39;
    }
  }
  else
  {
    v43 = *((_QWORD *)this + 21);
    if (v42 <= (v43 - (uint64_t)v39) >> 4)
    {
      bzero(*((void **)this + 20), 16 * v42);
      v51 = &v39[16 * v42];
      *((_QWORD *)this + 20) = v51;
    }
    else
    {
      if (a2 < 0)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v44 = v43 - (_QWORD)v40;
      v45 = v44 >> 3;
      if (v44 >> 3 <= v9)
        v45 = v9;
      v11 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0;
      v46 = 0xFFFFFFFFFFFFFFFLL;
      if (!v11)
        v46 = v45;
      if (v46 >> 60)
        goto LABEL_128;
      v47 = 16 * v46;
      v48 = (char *)operator new(16 * v46);
      v49 = &v48[16 * v41];
      v50 = &v48[v47];
      bzero(v49, 16 * v42);
      v51 = &v49[16 * v42];
      if (v39 != v40)
      {
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v39 - 1);
          v49 -= 16;
          v39 -= 16;
        }
        while (v39 != v40);
        v39 = (char *)*((_QWORD *)this + 19);
      }
      *((_QWORD *)this + 19) = v49;
      *((_QWORD *)this + 20) = v51;
      *((_QWORD *)this + 21) = v50;
      if (v39)
      {
        operator delete(v39);
        v51 = (char *)*((_QWORD *)this + 20);
      }
    }
    v40 = (char *)*((_QWORD *)this + 19);
    v39 = v51;
  }
  if (v40 != v39)
    memset(v40, 255, (v39 - v40) & 0xFFFFFFFFFFFFFFF0);
  v52 = (char *)*((_QWORD *)this + 22);
  v53 = (char *)*((_QWORD *)this + 23);
  v54 = 0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 2);
  if (v9 <= v54)
  {
    if (v9 < v54)
    {
      v53 = &v52[12 * (int)v9];
      *((_QWORD *)this + 23) = v53;
    }
  }
  else
  {
    std::vector<gcl::Vector3<int>>::__append((char **)this + 22, v9 - v54);
    v52 = (char *)*((_QWORD *)this + 22);
    v53 = (char *)*((_QWORD *)this + 23);
  }
  if (v53 - v52 >= 1)
    memset(v52, 255, 12 * ((v53 - v52) / 0xCuLL - ((unint64_t)(v53 - v52) > 0xB)) + 12);
  v55 = (char *)*((_QWORD *)this + 25);
  v56 = (char *)*((_QWORD *)this + 26);
  v57 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v55) >> 2);
  if (v9 <= v57)
  {
    if (v9 < v57)
    {
      v56 = &v55[12 * (int)v9];
      *((_QWORD *)this + 26) = v56;
    }
  }
  else
  {
    std::vector<gcl::Vector3<int>>::__append((char **)this + 25, v9 - v57);
    v55 = (char *)*((_QWORD *)this + 25);
    v56 = (char *)*((_QWORD *)this + 26);
  }
  if (v56 - v55 >= 1)
    memset(v55, 255, 12 * ((v56 - v55) / 0xCuLL - ((unint64_t)(v56 - v55) > 0xB)) + 12);
  if (!*((_BYTE *)this + 3817) || !*((_BYTE *)this + 3816))
  {
    v58 = (char *)*((_QWORD *)this + 10);
    v59 = (char *)*((_QWORD *)this + 11);
    v60 = (v59 - v58) >> 2;
    if (v9 <= v60)
    {
      if (v9 < v60)
      {
        v59 = &v58[4 * v9];
        *((_QWORD *)this + 11) = v59;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 80), v9 - v60);
      v58 = (char *)*((_QWORD *)this + 10);
      v59 = (char *)*((_QWORD *)this + 11);
    }
    if (v59 - v58 >= 1)
      bzero(v58, 4 * (((unint64_t)(v59 - v58) >> 2) - ((unint64_t)(v59 - v58) > 3)) + 4);
  }
  if (*((_BYTE *)this + 3816))
  {
    v62 = (char *)*((_QWORD *)this + 28);
    v61 = (char *)*((_QWORD *)this + 29);
    v63 = (char *)(v61 - v62);
    v64 = 0xAAAAAAAAAAAAAAABLL * ((v61 - v62) >> 2);
    v65 = v9 - v64;
    if (v9 <= v64)
    {
      if (v9 >= v64)
      {
LABEL_113:
        v85 = (const void **)((char *)this + 256);
        while (1)
        {
          v88 = *v85;
          v87 = v85[1];
          v89 = v87 - (_BYTE *)*v85;
          if (v87 == *v85)
          {
            v91 = 0;
            v90 = 0;
          }
          else
          {
            if ((v89 & 0x8000000000000000) != 0)
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v90 = (char *)operator new(v87 - (_BYTE *)*v85);
            memcpy(v90, v88, v89);
            if (v89 > 0x1FF)
            {
              v86 = v90;
              goto LABEL_115;
            }
            v89 >>= 3;
            v91 = &v90[8 * v89];
          }
          v92 = (char *)operator new(0x200uLL);
          if (v91 != v90)
          {
            v93 = (v91 - 8 - v90) & 0xFFFFFFFFFFFFFFF8;
            v86 = &v92[8 * v89 - v93 - 8];
            memcpy(v86, &v91[-v93 - 8], v93 + 8);
            if (!v90)
              goto LABEL_115;
LABEL_125:
            operator delete(v90);
            goto LABEL_115;
          }
          v86 = &v92[8 * v89];
          if (v90)
            goto LABEL_125;
LABEL_115:
          operator delete(v86);
          v85 += 3;
          if (v85 == (const void **)((char *)this + 1792))
            goto LABEL_126;
        }
      }
      v80 = &v62[12 * (int)v9];
    }
    else
    {
      v66 = *((_QWORD *)this + 30);
      if (0xAAAAAAAAAAAAAAABLL * ((v66 - (uint64_t)v61) >> 2) < v65)
      {
        if (a2 < 0)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v67 = 0xAAAAAAAAAAAAAAABLL * ((v66 - (uint64_t)v62) >> 2);
        v68 = 0x5555555555555556 * ((v66 - (uint64_t)v62) >> 2);
        if (v68 <= v9)
          v68 = v9;
        if (v67 >= 0xAAAAAAAAAAAAAAALL)
          v69 = 0x1555555555555555;
        else
          v69 = v68;
        if (v69 <= 0x1555555555555555)
        {
          v70 = (char *)operator new(12 * v69);
          v71 = &v70[4 * ((v61 - v62) >> 2)];
          v72 = &v70[12 * v9];
          v73 = 12 * v9 - (_QWORD)v63 - 12;
          v74 = v71;
          if (v73 < 0x54)
            goto LABEL_133;
          v75 = v73 / 0xC + 1;
          v74 = &v71[12 * (v75 & 0x3FFFFFFFFFFFFFF8)];
          v76 = v75 & 0x3FFFFFFFFFFFFFF8;
          v77 = &v70[4 * ((v61 - v62) >> 2)];
          do
          {
            *(_OWORD *)v77 = xmmword_189CFB2D0;
            *((_OWORD *)v77 + 1) = xmmword_189CFB2C0;
            *((_OWORD *)v77 + 4) = xmmword_189CFB2C0;
            *((_OWORD *)v77 + 5) = xmmword_189CBCB10;
            *((_OWORD *)v77 + 2) = xmmword_189CBCB10;
            *((_OWORD *)v77 + 3) = xmmword_189CFB2D0;
            v77 += 96;
            v76 -= 8;
          }
          while (v76);
          if (v75 != (v75 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_133:
            do
            {
              *(_QWORD *)v74 = 0xFFFFFFFF00000000;
              *((_DWORD *)v74 + 2) = -1;
              v74 += 12;
            }
            while (v74 != v72);
          }
          if (v61 != v62)
          {
            do
            {
              v78 = *(_QWORD *)(v61 - 12);
              v61 -= 12;
              v79 = *((_DWORD *)v61 + 2);
              *(_QWORD *)(v71 - 12) = v78;
              v71 -= 12;
              *((_DWORD *)v71 + 2) = v79;
            }
            while (v61 != v62);
            v61 = (char *)*((_QWORD *)this + 28);
          }
          *((_QWORD *)this + 28) = v71;
          *((_QWORD *)this + 29) = v72;
          *((_QWORD *)this + 30) = &v70[12 * v69];
          if (v61)
            operator delete(v61);
          goto LABEL_113;
        }
LABEL_128:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v80 = &v61[12 * v65];
      v81 = 12 * (int)v9 - (_QWORD)v63 - 12;
      if (v81 >= 0x54)
      {
        v83 = v81 / 0xC + 1;
        v82 = &v61[12 * (v83 & 0x3FFFFFFFFFFFFFF8)];
        v84 = v83 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          *(_OWORD *)v61 = xmmword_189CFB2D0;
          *((_OWORD *)v61 + 1) = xmmword_189CFB2C0;
          *((_OWORD *)v61 + 4) = xmmword_189CFB2C0;
          *((_OWORD *)v61 + 5) = xmmword_189CBCB10;
          *((_OWORD *)v61 + 2) = xmmword_189CBCB10;
          *((_OWORD *)v61 + 3) = xmmword_189CFB2D0;
          v61 += 96;
          v84 -= 8;
        }
        while (v84);
        if (v83 == (v83 & 0x3FFFFFFFFFFFFFF8))
          goto LABEL_112;
      }
      else
      {
        v82 = (char *)*((_QWORD *)this + 29);
      }
      do
      {
        *(_QWORD *)v82 = 0xFFFFFFFF00000000;
        *((_DWORD *)v82 + 2) = -1;
        v82 += 12;
      }
      while (v82 != v80);
    }
LABEL_112:
    *((_QWORD *)this + 29) = v80;
    goto LABEL_113;
  }
LABEL_126:
  memset_pattern16((char *)this + 2048, &memset_pattern_26, 0xAuLL);
  *((_WORD *)this + 1029) = 0x8000;
  memset_pattern16((char *)this + 2060, &memset_pattern_26, 0x10uLL);
  memset_pattern16((char *)this + 2076, &memset_pattern_26, 0x10uLL);
  memset_pattern16((char *)this + 2092, &memset_pattern_26, 0x10uLL);
  memset_pattern16((char *)this + 2108, &memset_pattern_26, 0x10uLL);
  memset_pattern16((char *)this + 2124, &memset_pattern_26, 0x10uLL);
  memset_pattern16((char *)this + 2140, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2146, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2152, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2158, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2164, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2170, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2176, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2182, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2188, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2194, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2200, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2206, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2212, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2218, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2224, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2230, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2240, &memset_pattern_26, 0x20uLL);
  *((_DWORD *)this + 559) = -2147450880;
  *((_QWORD *)this + 284) = 0x8000800080008000;
  memset_pattern16((char *)this + 2416, &memset_pattern_26, 6uLL);
  gcl::tmesh::ACContext::init((std::vector<int> *)this + 101, 3);
  gcl::tmesh::ACContext::init((std::vector<int> *)this + 106, 3);
}

void sub_18870B364(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::vector<gcl::Vector3<int>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  const float *v24;
  float *v25;
  uint64_t v26;
  int v27;
  float32x4x3_t v28;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(v5, v13);
      v6 = &v5[v13];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2) + a2;
    if (v9 > 0x1555555555555555)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v7) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(12 * v11);
    }
    else
    {
      v12 = 0;
    }
    v14 = &v12[4 * (v8 >> 2)];
    v15 = &v12[12 * v11];
    v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    v17 = &v14[v16];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v15;
      if (v7)
LABEL_28:
        operator delete(v7);
    }
    else
    {
      v18 = v5 - v7 - 12;
      if (v18 < 0xB4)
        goto LABEL_25;
      v19 = v18 / 0xC;
      if (&v12[v8 - 12 * v19 - 12] < v5 && &v5[-12 * v19 - 12] < v14)
        goto LABEL_25;
      v21 = v19 + 1;
      v22 = (v19 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v6 = &v5[-12 * v22];
      v23 = &v14[-12 * v22];
      v24 = (const float *)(v5 - 48);
      v25 = (float *)(v14 - 48);
      v26 = v22;
      do
      {
        v28 = vld3q_f32(v24);
        vst3q_f32(v25, v28);
        v25 -= 12;
        v24 -= 12;
        v26 -= 4;
      }
      while (v26);
      v14 -= 12 * v22;
      if (v21 != v22)
      {
LABEL_25:
        v23 = v14;
        do
        {
          v27 = *((_DWORD *)v6 - 3);
          v6 -= 12;
          *((_DWORD *)v23 - 3) = v27;
          v23 -= 12;
          *((_DWORD *)v23 + 1) = *((_DWORD *)v6 + 1);
          *((_DWORD *)v23 + 2) = *((_DWORD *)v6 + 2);
        }
        while (v6 != v7);
      }
      *a1 = v23;
      a1[1] = v17;
      a1[2] = v15;
      if (v7)
        goto LABEL_28;
    }
  }
}

void gcl::tmesh::DecoderImpl::decompressTriangleOrder(gcl::tmesh::DecoderImpl *this, int *a2)
{
  int *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _BOOL4 v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  int v61;
  unsigned int v62;
  _BOOL4 v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  unsigned int v77;
  _BOOL4 v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  unsigned int v92;
  _BOOL4 v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  unsigned int v122;
  unsigned int v123;
  _BOOL4 v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int *v135;
  uint64_t v136;
  int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  int v145;
  unsigned int v146;
  uint64_t v147;
  unint64_t v148;
  int v149;
  unint64_t v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  int v158;
  int v159;
  unsigned int v160;
  uint64_t v161;
  unint64_t v162;
  int v163;
  unint64_t v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  unint64_t v176;
  unsigned int v177;
  unsigned int v178;
  _BOOL4 v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  int v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  _BOOL4 v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  uint64_t v200;
  unsigned int v201;
  int v202;
  int v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  int v207;
  unint64_t v208;
  unsigned int v209;
  unsigned int v210;
  _BOOL4 v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  uint64_t v216;
  unsigned int v217;
  int v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  int v223;
  unint64_t v224;
  unsigned int v225;
  unsigned int v226;
  _BOOL4 v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  uint64_t v232;
  unsigned int v233;
  int v234;
  int v235;
  unsigned int v236;
  uint64_t v237;
  unint64_t v238;
  int v239;
  unint64_t v240;
  unsigned int v241;
  unsigned int v242;
  _BOOL4 v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  int v247;
  uint64_t v248;
  unsigned int v249;
  int v250;
  int v251;
  unsigned int v252;
  uint64_t v253;
  unint64_t v254;
  int v255;
  unint64_t v256;
  unsigned int v257;
  unsigned int v258;
  _BOOL4 v259;
  unsigned int v260;
  unsigned int v261;
  int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  unsigned int v270;
  unsigned int v271;
  uint64_t v272;
  __int16 v274;
  _WORD __b[64];
  uint64_t v276;

  v276 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 952))
  {
    memset_pattern16(__b, &memset_pattern_26, 0x80uLL);
    v274 = 0x8000;
    v135 = a2;
    if (*((int *)this + 948) < 1)
      return;
    v136 = 0;
    v137 = 0;
    v138 = __b[0];
    v139 = 0x8000;
    v140 = 0x8000;
    while (1)
    {
      v142 = *((_DWORD *)this + 683);
      v143 = *((_DWORD *)this + 684);
      if (v142 < 0x40000001)
      {
        v144 = *((_DWORD *)this + 686);
        while (1)
        {
          v143 *= 2;
          *((_DWORD *)this + 686) = --v144;
          if (v144)
            goto LABEL_167;
          v147 = *((_QWORD *)this + 340);
          *((_QWORD *)this + 340) = v147 + 1;
          v148 = *((unsigned int *)this + 676);
          if (v147 + 1 >= v148)
          {
            v149 = 65280;
            v150 = v147 + 2;
            *((_QWORD *)this + 340) = v150;
            if (v150 >= v148)
            {
LABEL_173:
              v145 = 255;
              goto LABEL_166;
            }
          }
          else
          {
            v149 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v147 + 1) << 8;
            v150 = v147 + 2;
            *((_QWORD *)this + 340) = v150;
            if (v150 >= v148)
              goto LABEL_173;
          }
          v145 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v150);
LABEL_166:
          v143 |= v149 | v145;
          v144 = 16;
          *((_DWORD *)this + 686) = 16;
LABEL_167:
          v146 = 2 * v142;
          v23 = v142 >= 0x20000001;
          v142 *= 2;
          if (v23)
            goto LABEL_175;
        }
      }
      v146 = *((_DWORD *)this + 683);
LABEL_175:
      v151 = (HIWORD(v146) * (unsigned __int16)v140) & 0xFFFF0000;
      if (v143 < v151)
        v152 = 0;
      else
        v152 = (HIWORD(v146) * (unsigned __int16)v140) & 0xFFFF0000;
      v153 = v143 - v152;
      *((_DWORD *)this + 684) = v143 - v152;
      v154 = v143 >= v151;
      v155 = (v140 >> 7) & 0x1FE | (v143 >= v151);
      v156 = v146 - v151;
      v157 = *((unsigned __int16 *)this + v155 + 1376);
      if (v154)
        v151 = v146 - v151;
      *((_DWORD *)this + 683) = v151;
      if (v154)
        break;
      v141 = 0;
LABEL_162:
      v140 += v157;
      v137 += v141;
      v135[v136++] = v137;
      if (v136 >= *((int *)this + 948))
        return;
    }
    if (v156 < 0x40000001)
    {
      v158 = *((_DWORD *)this + 686);
      while (1)
      {
        v153 *= 2;
        *((_DWORD *)this + 686) = --v158;
        if (v158)
          goto LABEL_186;
        v161 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v161 + 1;
        v162 = *((unsigned int *)this + 676);
        if (v161 + 1 >= v162)
        {
          v163 = 65280;
          v164 = v161 + 2;
          *((_QWORD *)this + 340) = v164;
          if (v164 >= v162)
          {
LABEL_192:
            v159 = 255;
            goto LABEL_185;
          }
        }
        else
        {
          v163 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v161 + 1) << 8;
          v164 = v161 + 2;
          *((_QWORD *)this + 340) = v164;
          if (v164 >= v162)
            goto LABEL_192;
        }
        v159 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v164);
LABEL_185:
        v153 |= v163 | v159;
        v158 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_186:
        v160 = 2 * v156;
        v23 = v156 >= 0x20000001;
        v156 *= 2;
        if (v23)
          goto LABEL_194;
      }
    }
    v160 = v156;
LABEL_194:
    v165 = (HIWORD(v160) * (unsigned __int16)v139) & 0xFFFF0000;
    v166 = *((unsigned __int16 *)this + ((v139 >> 7) & 0x1FE | (v153 >= v165)) + 1376);
    if (v153 < v165)
      v167 = (HIWORD(v160) * (unsigned __int16)v139) & 0xFFFF0000;
    else
      v167 = v160 - v165;
    if (v153 < v165)
      v168 = 0;
    else
      v168 = (HIWORD(v160) * (unsigned __int16)v139) & 0xFFFF0000;
    v169 = v153 - v168;
    *((_DWORD *)this + 683) = v167;
    *((_DWORD *)this + 684) = v169;
    if (v167 < 0x40000001)
    {
      v170 = *((_DWORD *)this + 686);
      while (1)
      {
        v169 *= 2;
        *((_DWORD *)this + 686) = --v170;
        if (v170)
          goto LABEL_204;
        v173 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v173 + 1;
        v174 = *((unsigned int *)this + 676);
        if (v173 + 1 >= v174)
        {
          v175 = 65280;
          v176 = v173 + 2;
          *((_QWORD *)this + 340) = v176;
          if (v176 >= v174)
          {
LABEL_210:
            v171 = 255;
            goto LABEL_203;
          }
        }
        else
        {
          v175 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v173 + 1) << 8;
          v176 = v173 + 2;
          *((_QWORD *)this + 340) = v176;
          if (v176 >= v174)
            goto LABEL_210;
        }
        v171 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v176);
LABEL_203:
        v169 |= v175 | v171;
        v170 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_204:
        v172 = 2 * v167;
        v23 = v167 >= 0x20000001;
        v167 *= 2;
        if (v23)
          goto LABEL_212;
      }
    }
    v172 = v167;
LABEL_212:
    v177 = (HIWORD(v172) * (unsigned __int16)v138) & 0xFFFF0000;
    v178 = v172 - v177;
    v179 = v169 >= v177;
    v180 = *((unsigned __int16 *)this + ((v138 >> 7) & 0x1FE | v179) + 1376);
    if (v169 < v177)
      v181 = v177;
    else
      v181 = v178;
    if (v169 < v177)
      v182 = 0;
    else
      v182 = v177;
    if (v169 < v177)
      v183 = 1;
    else
      v183 = 2;
    v184 = v169 - v182;
    *((_DWORD *)this + 683) = v181;
    *((_DWORD *)this + 684) = v184;
    v185 = (unsigned __int16)__b[v183];
    if (v181 < 0x40000001)
    {
      v186 = *((_DWORD *)this + 686);
      while (1)
      {
        v184 *= 2;
        *((_DWORD *)this + 686) = --v186;
        if (v186)
          goto LABEL_225;
        v189 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v189 + 1;
        v190 = *((unsigned int *)this + 676);
        if (v189 + 1 >= v190)
        {
          v191 = 65280;
          v192 = v189 + 2;
          *((_QWORD *)this + 340) = v192;
          if (v192 >= v190)
          {
LABEL_231:
            v187 = 255;
            goto LABEL_224;
          }
        }
        else
        {
          v191 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v189 + 1) << 8;
          v192 = v189 + 2;
          *((_QWORD *)this + 340) = v192;
          if (v192 >= v190)
            goto LABEL_231;
        }
        v187 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v192);
LABEL_224:
        v184 |= v191 | v187;
        v186 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_225:
        v188 = 2 * v181;
        v23 = v181 >= 0x20000001;
        v181 *= 2;
        if (v23)
          goto LABEL_233;
      }
    }
    v188 = v181;
LABEL_233:
    v193 = (HIWORD(v188) * v185) & 0xFFFF0000;
    v194 = v188 - v193;
    v195 = v184 >= v193;
    __b[v183] = *((_WORD *)this + ((v185 >> 7) & 0x1FE | v195) + 1376) + v185;
    if (v184 < v193)
      v196 = v193;
    else
      v196 = v194;
    if (v184 < v193)
      v197 = 0;
    else
      v197 = v193;
    v198 = v184 - v197;
    *((_DWORD *)this + 683) = v196;
    *((_DWORD *)this + 684) = v198;
    v199 = v179 | (2 * v195);
    v200 = (v199 + 3);
    v201 = (unsigned __int16)__b[v200];
    if (v196 < 0x40000001)
    {
      v202 = *((_DWORD *)this + 686);
      while (1)
      {
        v198 *= 2;
        *((_DWORD *)this + 686) = --v202;
        if (v202)
          goto LABEL_243;
        v205 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v205 + 1;
        v206 = *((unsigned int *)this + 676);
        if (v205 + 1 >= v206)
        {
          v207 = 65280;
          v208 = v205 + 2;
          *((_QWORD *)this + 340) = v208;
          if (v208 >= v206)
          {
LABEL_249:
            v203 = 255;
            goto LABEL_242;
          }
        }
        else
        {
          v207 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v205 + 1) << 8;
          v208 = v205 + 2;
          *((_QWORD *)this + 340) = v208;
          if (v208 >= v206)
            goto LABEL_249;
        }
        v203 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v208);
LABEL_242:
        v198 |= v207 | v203;
        v202 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_243:
        v204 = 2 * v196;
        v23 = v196 >= 0x20000001;
        v196 *= 2;
        if (v23)
          goto LABEL_251;
      }
    }
    v204 = v196;
LABEL_251:
    v209 = (HIWORD(v204) * v201) & 0xFFFF0000;
    v210 = v204 - v209;
    v211 = v198 >= v209;
    __b[v200] = *((_WORD *)this + ((v201 >> 7) & 0x1FE | v211) + 1376) + v201;
    if (v198 < v209)
      v212 = v209;
    else
      v212 = v210;
    if (v198 < v209)
      v213 = 0;
    else
      v213 = v209;
    v214 = v198 - v213;
    *((_DWORD *)this + 683) = v212;
    *((_DWORD *)this + 684) = v214;
    v215 = v199 | (4 * v211);
    v216 = (v215 + 7);
    v217 = (unsigned __int16)__b[v216];
    if (v212 < 0x40000001)
    {
      v218 = *((_DWORD *)this + 686);
      while (1)
      {
        v214 *= 2;
        *((_DWORD *)this + 686) = --v218;
        if (v218)
          goto LABEL_261;
        v221 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v221 + 1;
        v222 = *((unsigned int *)this + 676);
        if (v221 + 1 >= v222)
        {
          v223 = 65280;
          v224 = v221 + 2;
          *((_QWORD *)this + 340) = v224;
          if (v224 >= v222)
          {
LABEL_267:
            v219 = 255;
            goto LABEL_260;
          }
        }
        else
        {
          v223 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v221 + 1) << 8;
          v224 = v221 + 2;
          *((_QWORD *)this + 340) = v224;
          if (v224 >= v222)
            goto LABEL_267;
        }
        v219 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v224);
LABEL_260:
        v214 |= v223 | v219;
        v218 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_261:
        v220 = 2 * v212;
        v23 = v212 >= 0x20000001;
        v212 *= 2;
        if (v23)
          goto LABEL_269;
      }
    }
    v220 = v212;
LABEL_269:
    v225 = (HIWORD(v220) * v217) & 0xFFFF0000;
    v226 = v220 - v225;
    v227 = v214 >= v225;
    __b[v216] = *((_WORD *)this + ((v217 >> 7) & 0x1FE | v227) + 1376) + v217;
    if (v214 < v225)
      v228 = v225;
    else
      v228 = v226;
    if (v214 < v225)
      v229 = 0;
    else
      v229 = v225;
    v230 = v214 - v229;
    *((_DWORD *)this + 683) = v228;
    *((_DWORD *)this + 684) = v230;
    v231 = v215 | (8 * v227);
    v232 = (v231 + 15);
    v233 = (unsigned __int16)__b[v232];
    if (v228 < 0x40000001)
    {
      v234 = *((_DWORD *)this + 686);
      while (1)
      {
        v230 *= 2;
        *((_DWORD *)this + 686) = --v234;
        if (v234)
          goto LABEL_279;
        v237 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v237 + 1;
        v238 = *((unsigned int *)this + 676);
        if (v237 + 1 >= v238)
        {
          v239 = 65280;
          v240 = v237 + 2;
          *((_QWORD *)this + 340) = v240;
          if (v240 >= v238)
          {
LABEL_285:
            v235 = 255;
            goto LABEL_278;
          }
        }
        else
        {
          v239 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v237 + 1) << 8;
          v240 = v237 + 2;
          *((_QWORD *)this + 340) = v240;
          if (v240 >= v238)
            goto LABEL_285;
        }
        v235 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v240);
LABEL_278:
        v230 |= v239 | v235;
        v234 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_279:
        v236 = 2 * v228;
        v23 = v228 >= 0x20000001;
        v228 *= 2;
        if (v23)
          goto LABEL_287;
      }
    }
    v236 = v228;
LABEL_287:
    v241 = (HIWORD(v236) * v233) & 0xFFFF0000;
    v242 = v236 - v241;
    v243 = v230 >= v241;
    __b[v232] = *((_WORD *)this + ((v233 >> 7) & 0x1FE | v243) + 1376) + v233;
    if (v230 < v241)
      v244 = v241;
    else
      v244 = v242;
    if (v230 < v241)
      v245 = 0;
    else
      v245 = v241;
    v246 = v230 - v245;
    *((_DWORD *)this + 683) = v244;
    *((_DWORD *)this + 684) = v246;
    v247 = v231 | (16 * v243);
    v248 = (v247 + 31);
    v249 = (unsigned __int16)__b[v248];
    if (v244 >= 0x40000001)
    {
      v252 = v244;
LABEL_305:
      v257 = (HIWORD(v252) * v249) & 0xFFFF0000;
      v258 = v252 - v257;
      v259 = v246 >= v257;
      __b[v248] = *((_WORD *)this + ((v249 >> 7) & 0x1FE | v259) + 1376) + v249;
      if (v246 < v257)
        v260 = v257;
      else
        v260 = v258;
      if (v246 < v257)
        v261 = 0;
      else
        v261 = v257;
      *((_DWORD *)this + 683) = v260;
      *((_DWORD *)this + 684) = v246 - v261;
      v262 = v247 | (32 * v259);
      if (v262 == 63)
      {
        v272 = v136;
        v263 = v139;
        v270 = v138;
        v264 = v157;
        v265 = v165;
        v266 = v137;
        v267 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)this + 676, 6, &v274);
        v137 = v266;
        v165 = v265;
        v157 = v264;
        v139 = v263;
        v136 = v272;
        v135 = a2;
        v262 = v267 + 63;
        v138 = v270;
      }
      v139 += v166;
      v138 += v180;
      v141 = ~v262;
      if (v153 >= v165)
        v141 = v262 + 1;
      goto LABEL_162;
    }
    v250 = *((_DWORD *)this + 686);
    while (1)
    {
      v246 *= 2;
      *((_DWORD *)this + 686) = --v250;
      if (v250)
        goto LABEL_297;
      v253 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v253 + 1;
      v254 = *((unsigned int *)this + 676);
      if (v253 + 1 >= v254)
      {
        v255 = 65280;
        v256 = v253 + 2;
        *((_QWORD *)this + 340) = v256;
        if (v256 >= v254)
        {
LABEL_303:
          v251 = 255;
          goto LABEL_296;
        }
      }
      else
      {
        v255 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v253 + 1) << 8;
        v256 = v253 + 2;
        *((_QWORD *)this + 340) = v256;
        if (v256 >= v254)
          goto LABEL_303;
      }
      v251 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v256);
LABEL_296:
      v246 |= v255 | v251;
      v250 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_297:
      v252 = 2 * v244;
      v23 = v244 >= 0x20000001;
      v244 *= 2;
      if (v23)
        goto LABEL_305;
    }
  }
  memset_pattern16(__b, &memset_pattern_26, 0x80uLL);
  v274 = 0x8000;
  v3 = a2;
  if (*((int *)this + 948) >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = __b[0];
    v7 = 0x8000;
    v8 = 6;
    v9 = 0x8000;
    while (1)
    {
      v11 = *((_DWORD *)this + 683);
      v12 = *((_DWORD *)this + 684);
      if (v11 < 0x40000001)
      {
        v13 = *((_DWORD *)this + 686);
        while (1)
        {
          v12 *= 2;
          *((_DWORD *)this + 686) = --v13;
          if (v13)
            goto LABEL_9;
          v16 = *((_QWORD *)this + 340);
          *((_QWORD *)this + 340) = v16 + 1;
          v17 = *((unsigned int *)this + 676);
          if (v16 + 1 >= v17)
          {
            v18 = 65280;
            v19 = v16 + 2;
            *((_QWORD *)this + 340) = v19;
            if (v19 >= v17)
            {
LABEL_15:
              v14 = 255;
              goto LABEL_8;
            }
          }
          else
          {
            v18 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v16 + 1) << 8;
            v19 = v16 + 2;
            *((_QWORD *)this + 340) = v19;
            if (v19 >= v17)
              goto LABEL_15;
          }
          v14 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v19);
LABEL_8:
          v12 |= v18 | v14;
          v13 = 16;
          *((_DWORD *)this + 686) = 16;
LABEL_9:
          v15 = 2 * v11;
          v23 = v11 >= 0x20000001;
          v11 *= 2;
          if (v23)
            goto LABEL_17;
        }
      }
      v15 = *((_DWORD *)this + 683);
LABEL_17:
      v20 = (HIWORD(v15) * (unsigned __int16)v9) & 0xFFFF0000;
      if (v12 < v20)
        v21 = 0;
      else
        v21 = (HIWORD(v15) * (unsigned __int16)v9) & 0xFFFF0000;
      v22 = v12 - v21;
      *((_DWORD *)this + 684) = v12 - v21;
      v23 = v12 >= v20;
      v24 = (v9 >> 7) & 0x1FE | (v12 >= v20);
      v25 = v15 - v20;
      v26 = *((unsigned __int16 *)this + v24 + 1376);
      if (v23)
        v20 = v15 - v20;
      *((_DWORD *)this + 683) = v20;
      if (v23)
        break;
      v10 = 0;
LABEL_4:
      v9 += v26;
      v5 += v10;
      v3[v4++] = v5;
      if (v4 >= *((int *)this + 948))
        return;
    }
    if (v25 < 0x40000001)
    {
      v27 = *((_DWORD *)this + 686);
      while (1)
      {
        v22 *= 2;
        *((_DWORD *)this + 686) = --v27;
        if (v27)
          goto LABEL_28;
        v30 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v30 + 1;
        v31 = *((unsigned int *)this + 676);
        if (v30 + 1 >= v31)
        {
          v32 = 65280;
          v33 = v30 + 2;
          *((_QWORD *)this + 340) = v33;
          if (v33 >= v31)
          {
LABEL_34:
            v28 = 255;
            goto LABEL_27;
          }
        }
        else
        {
          v32 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v30 + 1) << 8;
          v33 = v30 + 2;
          *((_QWORD *)this + 340) = v33;
          if (v33 >= v31)
            goto LABEL_34;
        }
        v28 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v33);
LABEL_27:
        v22 |= v32 | v28;
        v27 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_28:
        v29 = 2 * v25;
        v23 = v25 >= 0x20000001;
        v25 *= 2;
        if (v23)
          goto LABEL_36;
      }
    }
    v29 = v25;
LABEL_36:
    v34 = (HIWORD(v29) * (unsigned __int16)v7) & 0xFFFF0000;
    v35 = v29 - v34;
    v36 = *((unsigned __int16 *)this + ((v7 >> 7) & 0x1FE | (v22 >= v34)) + 1376);
    if (v22 >= v34)
    {
      v37 = (HIWORD(v29) * (unsigned __int16)v7) & 0xFFFF0000;
    }
    else
    {
      v35 = (HIWORD(v29) * (unsigned __int16)v7) & 0xFFFF0000;
      v37 = 0;
    }
    v38 = v22 - v37;
    *((_DWORD *)this + 683) = v35;
    *((_DWORD *)this + 684) = v38;
    if (v35 < 0x40000001)
    {
      v39 = *((_DWORD *)this + 686);
      while (1)
      {
        v38 *= 2;
        *((_DWORD *)this + 686) = --v39;
        if (v39)
          goto LABEL_43;
        v42 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v42 + 1;
        v43 = *((unsigned int *)this + 676);
        if (v42 + 1 >= v43)
        {
          v44 = 65280;
          v45 = v42 + 2;
          *((_QWORD *)this + 340) = v45;
          if (v45 >= v43)
          {
LABEL_49:
            v40 = 255;
            goto LABEL_42;
          }
        }
        else
        {
          v44 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v42 + 1) << 8;
          v45 = v42 + 2;
          *((_QWORD *)this + 340) = v45;
          if (v45 >= v43)
            goto LABEL_49;
        }
        v40 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v45);
LABEL_42:
        v38 |= v44 | v40;
        v39 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_43:
        v41 = 2 * v35;
        v23 = v35 >= 0x20000001;
        v35 *= 2;
        if (v23)
          goto LABEL_51;
      }
    }
    v41 = v35;
LABEL_51:
    v46 = (HIWORD(v41) * (unsigned __int16)v6) & 0xFFFF0000;
    v47 = v41 - v46;
    v48 = v38 >= v46;
    v49 = *((unsigned __int16 *)this + ((v6 >> 7) & 0x1FE | v48) + 1376);
    if (v38 < v46)
      v50 = v46;
    else
      v50 = v47;
    if (v38 < v46)
      v46 = 0;
    v51 = v38 - v46;
    *((_DWORD *)this + 683) = v50;
    *((_DWORD *)this + 684) = v51;
    v52 = (v48 & 0x7FFFFFFu) + 1;
    v53 = (unsigned __int16)__b[v52];
    if (v50 < 0x40000001)
    {
      v54 = *((_DWORD *)this + 686);
      while (1)
      {
        v51 *= 2;
        *((_DWORD *)this + 686) = --v54;
        if (v54)
          goto LABEL_60;
        v57 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v57 + 1;
        v58 = *((unsigned int *)this + 676);
        if (v57 + 1 >= v58)
        {
          v59 = 65280;
          v60 = v57 + 2;
          *((_QWORD *)this + 340) = v60;
          if (v60 >= v58)
          {
LABEL_66:
            v55 = 255;
            goto LABEL_59;
          }
        }
        else
        {
          v59 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v57 + 1) << 8;
          v60 = v57 + 2;
          *((_QWORD *)this + 340) = v60;
          if (v60 >= v58)
            goto LABEL_66;
        }
        v55 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v60);
LABEL_59:
        v51 |= v59 | v55;
        v54 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_60:
        v56 = 2 * v50;
        v23 = v50 >= 0x20000001;
        v50 *= 2;
        if (v23)
          goto LABEL_68;
      }
    }
    v56 = v50;
LABEL_68:
    v61 = 32 * v48;
    v62 = (HIWORD(v56) * v53) & 0xFFFF0000;
    v63 = v51 >= v62;
    __b[v52] = *((_WORD *)this + ((v53 >> 7) & 0x1FE | v63) + 1376) + v53;
    if (v51 < v62)
      v64 = (HIWORD(v56) * v53) & 0xFFFF0000;
    else
      v64 = v56 - v62;
    if (v51 < v62)
      v65 = 0;
    else
      v65 = (HIWORD(v56) * v53) & 0xFFFF0000;
    v66 = v51 - v65;
    *((_DWORD *)this + 683) = v64;
    *((_DWORD *)this + 684) = v66;
    v67 = v61 | (16 * v63);
    v68 = (v67 >> 4) + 3;
    v69 = (unsigned __int16)__b[v68];
    if (v64 < 0x40000001)
    {
      v70 = *((_DWORD *)this + 686);
      while (1)
      {
        v66 *= 2;
        *((_DWORD *)this + 686) = --v70;
        if (v70)
          goto LABEL_78;
        v73 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v73 + 1;
        v74 = *((unsigned int *)this + 676);
        if (v73 + 1 >= v74)
        {
          v75 = 65280;
          v76 = v73 + 2;
          *((_QWORD *)this + 340) = v76;
          if (v76 >= v74)
          {
LABEL_84:
            v71 = 255;
            goto LABEL_77;
          }
        }
        else
        {
          v75 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v73 + 1) << 8;
          v76 = v73 + 2;
          *((_QWORD *)this + 340) = v76;
          if (v76 >= v74)
            goto LABEL_84;
        }
        v71 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v76);
LABEL_77:
        v66 |= v75 | v71;
        v70 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_78:
        v72 = 2 * v64;
        v23 = v64 >= 0x20000001;
        v64 *= 2;
        if (v23)
          goto LABEL_86;
      }
    }
    v72 = v64;
LABEL_86:
    v77 = (HIWORD(v72) * v69) & 0xFFFF0000;
    v78 = v66 >= v77;
    __b[v68] = *((_WORD *)this + ((v69 >> 7) & 0x1FE | v78) + 1376) + v69;
    if (v66 < v77)
      v79 = (HIWORD(v72) * v69) & 0xFFFF0000;
    else
      v79 = v72 - v77;
    if (v66 < v77)
      v80 = 0;
    else
      v80 = (HIWORD(v72) * v69) & 0xFFFF0000;
    v81 = v66 - v80;
    *((_DWORD *)this + 683) = v79;
    *((_DWORD *)this + 684) = v81;
    v82 = v67 | (8 * v78);
    v83 = (v82 >> 3) + 7;
    v84 = (unsigned __int16)__b[v83];
    if (v79 < 0x40000001)
    {
      v85 = *((_DWORD *)this + 686);
      while (1)
      {
        v81 *= 2;
        *((_DWORD *)this + 686) = --v85;
        if (v85)
          goto LABEL_96;
        v88 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v88 + 1;
        v89 = *((unsigned int *)this + 676);
        if (v88 + 1 >= v89)
        {
          v90 = 65280;
          v91 = v88 + 2;
          *((_QWORD *)this + 340) = v91;
          if (v91 >= v89)
          {
LABEL_102:
            v86 = 255;
            goto LABEL_95;
          }
        }
        else
        {
          v90 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v88 + 1) << 8;
          v91 = v88 + 2;
          *((_QWORD *)this + 340) = v91;
          if (v91 >= v89)
            goto LABEL_102;
        }
        v86 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v91);
LABEL_95:
        v81 |= v90 | v86;
        v85 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_96:
        v87 = 2 * v79;
        v23 = v79 >= 0x20000001;
        v79 *= 2;
        if (v23)
          goto LABEL_104;
      }
    }
    v87 = v79;
LABEL_104:
    v92 = (HIWORD(v87) * v84) & 0xFFFF0000;
    v93 = v81 >= v92;
    __b[v83] = *((_WORD *)this + ((v84 >> 7) & 0x1FE | v93) + 1376) + v84;
    if (v81 < v92)
      v94 = (HIWORD(v87) * v84) & 0xFFFF0000;
    else
      v94 = v87 - v92;
    if (v81 < v92)
      v95 = 0;
    else
      v95 = (HIWORD(v87) * v84) & 0xFFFF0000;
    v96 = v81 - v95;
    *((_DWORD *)this + 683) = v94;
    *((_DWORD *)this + 684) = v96;
    v97 = v82 | (4 * v93);
    v98 = (v97 >> 2) + 15;
    v99 = (unsigned __int16)__b[v98];
    if (v94 < 0x40000001)
    {
      v100 = *((_DWORD *)this + 686);
      while (1)
      {
        v96 *= 2;
        *((_DWORD *)this + 686) = --v100;
        if (v100)
          goto LABEL_114;
        v103 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v103 + 1;
        v104 = *((unsigned int *)this + 676);
        if (v103 + 1 >= v104)
        {
          v105 = 65280;
          v106 = v103 + 2;
          *((_QWORD *)this + 340) = v106;
          if (v106 >= v104)
          {
LABEL_120:
            v101 = 255;
            goto LABEL_113;
          }
        }
        else
        {
          v105 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v103 + 1) << 8;
          v106 = v103 + 2;
          *((_QWORD *)this + 340) = v106;
          if (v106 >= v104)
            goto LABEL_120;
        }
        v101 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v106);
LABEL_113:
        v96 |= v105 | v101;
        v100 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_114:
        v102 = 2 * v94;
        v23 = v94 >= 0x20000001;
        v94 *= 2;
        if (v23)
          goto LABEL_122;
      }
    }
    v102 = v94;
LABEL_122:
    v107 = (HIWORD(v102) * v99) & 0xFFFF0000;
    v108 = v96 >= v107;
    __b[v98] = *((_WORD *)this + ((v99 >> 7) & 0x1FE | v108) + 1376) + v99;
    if (v96 < v107)
      v109 = (HIWORD(v102) * v99) & 0xFFFF0000;
    else
      v109 = v102 - v107;
    if (v96 < v107)
      v110 = 0;
    else
      v110 = (HIWORD(v102) * v99) & 0xFFFF0000;
    v111 = v96 - v110;
    *((_DWORD *)this + 683) = v109;
    *((_DWORD *)this + 684) = v111;
    v112 = v97 | (2 * v108);
    v113 = (v112 >> 1) + 31;
    v114 = (unsigned __int16)__b[v113];
    if (v109 >= 0x40000001)
    {
      v117 = v109;
LABEL_140:
      v122 = (HIWORD(v117) * v114) & 0xFFFF0000;
      v123 = v117 - v122;
      v124 = v111 >= v122;
      __b[v113] = *((_WORD *)this + ((v114 >> 7) & 0x1FE | v124) + 1376) + v114;
      if (v111 < v122)
        v125 = v122;
      else
        v125 = v123;
      if (v111 < v122)
        v126 = 0;
      else
        v126 = v122;
      *((_DWORD *)this + 683) = v125;
      *((_DWORD *)this + 684) = v111 - v126;
      v127 = v112 | v124;
      if (v127 == 63)
      {
        v268 = v49;
        v269 = v36;
        v271 = v9;
        v128 = v4;
        v129 = v26;
        v130 = v7;
        v131 = v8;
        v132 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)this + 676, v8, &v274);
        v127 = v132 + 63;
        v133 = -63 - v132;
        if (v132 >= -63)
          v133 = v132 + 63;
        v134 = v133 >> v131;
        if (!v131 || v134)
        {
          if (v134 <= 1)
            v8 = v131;
          else
            v8 = v131 + 1;
        }
        else
        {
          v8 = v131 - 1;
        }
        v3 = a2;
        v7 = v130;
        v26 = v129;
        v4 = v128;
        v36 = v269;
        v9 = v271;
        v49 = v268;
      }
      v7 += v36;
      v6 += v49;
      v10 = ~v127;
      if (v22 >= v34)
        v10 = v127 + 1;
      goto LABEL_4;
    }
    v115 = *((_DWORD *)this + 686);
    while (1)
    {
      v111 *= 2;
      *((_DWORD *)this + 686) = --v115;
      if (v115)
        goto LABEL_132;
      v118 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v118 + 1;
      v119 = *((unsigned int *)this + 676);
      if (v118 + 1 >= v119)
      {
        v120 = 65280;
        v121 = v118 + 2;
        *((_QWORD *)this + 340) = v121;
        if (v121 >= v119)
        {
LABEL_138:
          v116 = 255;
          goto LABEL_131;
        }
      }
      else
      {
        v120 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v118 + 1) << 8;
        v121 = v118 + 2;
        *((_QWORD *)this + 340) = v121;
        if (v121 >= v119)
          goto LABEL_138;
      }
      v116 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v121);
LABEL_131:
      v111 |= v120 | v116;
      v115 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_132:
      v117 = 2 * v109;
      v23 = v109 >= 0x20000001;
      v109 *= 2;
      if (v23)
        goto LABEL_140;
    }
  }
}

uint64_t gcl::tmesh::Decoder::getAttributeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;
  __int16 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  if (a2 < 4)
    return 3;
  result = 3;
  if (a2 != 8)
  {
    v5 = a2 & 0x7FFFFFFFFFFFFFFCLL;
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != 4
      && a2 != 9
      && (a2 & 0xFFFFFFFFFFFFFFFELL) != 0xA
      && v5 != 12
      && v5 != 16
      && (unint64_t)(a2 - 20) >= 5
      && (unint64_t)a2 >= 0x1C
      && a1 != -32
      && (unint64_t)a2 >= 0x20
      && *(_DWORD *)a1 == -290009985)
    {
      result = 0;
      v6 = *(_BYTE *)(a1 + 8);
      v7 = *(_BYTE *)(a1 + 9);
      v8 = *(_WORD *)(a1 + 10);
      v9 = *(_DWORD *)(a1 + 12);
      v10 = *(_DWORD *)(a1 + 16);
      v11 = *(unsigned __int8 *)(a1 + 20);
      v12 = *(unsigned __int8 *)(a1 + 21);
      v13 = *(unsigned __int8 *)(a1 + 22);
      v14 = *(unsigned __int8 *)(a1 + 26);
      v15 = *(unsigned __int8 *)(a1 + 27);
      *(_BYTE *)(a3 + 4) = v6;
      *(_DWORD *)a3 = 0;
      *(_BYTE *)(a3 + 5) = v7;
      *(_WORD *)(a3 + 6) = v8;
      *(_DWORD *)(a3 + 8) = v9;
      *(_DWORD *)(a3 + 12) = v10 & 0x7FFFFFFF;
      *(_DWORD *)(a3 + 16) = v13;
      *(_DWORD *)(a3 + 20) = v12;
      *(_DWORD *)(a3 + 24) = v15;
      *(_DWORD *)(a3 + 28) = v11;
      *(_DWORD *)(a3 + 32) = v14;
    }
  }
  return result;
}

void sub_18870C9E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

geo::codec::Allocator *geo::codec::VectorTile::DaVinciReadDebugBlobDealloc(geo::codec::Allocator **this)
{
  geo::codec::Allocator *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  geo::codec::Allocator *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  geo::codec::Allocator *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  geo::codec::Allocator *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  geo::codec::Allocator *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  geo::codec::Allocator *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t i;
  uint64_t v36;
  _QWORD *v37;
  geo::codec::Allocator *v38;
  uint64_t v39;
  geo::codec::Allocator *v40;
  uint64_t v41;
  geo::codec::Allocator *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  geo::codec::Allocator *v48;
  uint64_t v49;
  uint64_t v50;
  geo::codec::Allocator *result;

  v2 = geo::codec::DaVinciExplicitTextureMappingDataDealloc(this[251], (GeoCodecsDaVinciExplicitTextureMappingData *)*((unsigned __int16 *)this + 1000));
  this[251] = 0;
  *((_WORD *)this + 1000) = 0;
  if (this[253])
  {
    v3 = geo::codec::Allocator::instance(v2);
    v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v3 + 40))(v3, this[253], 0);
    this[253] = 0;
  }
  if (this[255])
  {
    v4 = geo::codec::Allocator::instance(v2);
    v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v4 + 40))(v4, this[255], 0);
    this[255] = 0;
  }
  if (this[257])
  {
    v5 = *((unsigned __int16 *)this + 1024);
    if (*((_WORD *)this + 1024))
    {
      v6 = 0;
      v7 = 0;
      do
      {
        if (!*((_BYTE *)this[257] + v6 + 24))
        {
          v8 = geo::codec::Allocator::instance(v2);
          v9 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)((char *)this[257] + v6 + 40), 0);
          v10 = geo::codec::Allocator::instance(v9);
          v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)((char *)this[257] + v6 + 32), 0);
          v5 = *((unsigned __int16 *)this + 1024);
        }
        ++v7;
        v6 += 64;
      }
      while (v7 < v5);
    }
    v11 = geo::codec::Allocator::instance(v2);
    v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v11 + 40))(v11, this[257], 0);
    this[257] = 0;
    *((_WORD *)this + 1024) = 0;
  }
  if (this[258])
  {
    v12 = geo::codec::Allocator::instance(v2);
    v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v12 + 40))(v12, this[258], 0);
    this[258] = 0;
  }
  v13 = this[272];
  if (v13)
  {
    v14 = *((unsigned __int16 *)this + 1084);
    if (*((_WORD *)this + 1084))
    {
      v15 = (uint64_t *)((char *)v13 + 8);
      do
      {
        v16 = geo::codec::Allocator::instance(v2);
        v17 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 40))(v16, *(v15 - 1), 0);
        v18 = geo::codec::Allocator::instance(v17);
        v19 = *v15;
        v15 += 6;
        v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v18 + 40))(v18, v19, 0);
        --v14;
      }
      while (v14);
    }
    v20 = geo::codec::Allocator::instance(v2);
    v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v20 + 40))(v20, v13, 0);
  }
  this[272] = 0;
  *((_WORD *)this + 1084) = 0;
  v21 = this[274];
  if (v21)
  {
    v22 = *((unsigned __int16 *)this + 1092);
    if (*((_WORD *)this + 1092))
    {
      v23 = (uint64_t *)((char *)v21 + 8);
      do
      {
        v24 = geo::codec::Allocator::instance(v2);
        v25 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 40))(v24, *(v23 - 1), 0);
        v26 = geo::codec::Allocator::instance(v25);
        v27 = *v23;
        v23 += 6;
        v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v26 + 40))(v26, v27, 0);
        --v22;
      }
      while (v22);
    }
    v28 = geo::codec::Allocator::instance(v2);
    v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v28 + 40))(v28, v21, 0);
  }
  this[274] = 0;
  *((_WORD *)this + 1092) = 0;
  if (this[287])
  {
    v29 = geo::codec::Allocator::instance(v2);
    v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v29 + 40))(v29, this[287], 0);
    this[287] = 0;
  }
  if (this[289])
  {
    v30 = geo::codec::Allocator::instance(v2);
    v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v30 + 40))(v30, this[289], 0);
    this[289] = 0;
  }
  if (this[351])
  {
    v31 = geo::codec::Allocator::instance(v2);
    v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v31 + 40))(v31, this[351], 0);
    this[351] = 0;
  }
  if (this[352])
  {
    v32 = geo::codec::Allocator::instance(v2);
    v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v32 + 40))(v32, this[352], 0);
    this[352] = 0;
  }
  if (this[353])
  {
    v33 = geo::codec::Allocator::instance(v2);
    v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v33 + 40))(v33, this[353], 0);
    this[353] = 0;
  }
  if (this[356])
  {
    if (*((_WORD *)this + 1428))
    {
      v34 = 0;
      for (i = 0; i < *((unsigned __int16 *)this + 1428); ++i)
      {
        v42 = this[356];
        if (*((_BYTE *)v42 + v34 + 20) != 1)
        {
          if (!*((_BYTE *)v42 + v34 + 20))
          {
            v43 = geo::codec::Allocator::instance(v2);
            v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v43 + 40))(v43, *(_QWORD *)((char *)v42 + v34 + 8), 0);
          }
          goto LABEL_38;
        }
        v44 = *((unsigned __int8 *)v42 + v34 + 26);
        if (v44 == 16)
        {
          v2 = *(geo::codec::Allocator **)((char *)v42 + v34 + 8);
          if (!v2)
            goto LABEL_38;
        }
        else
        {
          if (v44 != 8)
            goto LABEL_38;
          v2 = *(geo::codec::Allocator **)((char *)v42 + v34 + 8);
          if (!v2)
            goto LABEL_38;
        }
        v2 = (geo::codec::Allocator *)MEMORY[0x18D764364]();
LABEL_38:
        v36 = geo::codec::Allocator::instance(v2);
        v37 = (_QWORD *)((char *)v42 + v34);
        v38 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v36 + 40))(v36, v37[6], 0);
        v39 = geo::codec::Allocator::instance(v38);
        v40 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v39 + 40))(v39, v37[8], 0);
        v41 = geo::codec::Allocator::instance(v40);
        v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v41 + 40))(v41, v37[4], 0);
        v34 += 80;
      }
    }
    v45 = geo::codec::Allocator::instance(v2);
    v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v45 + 40))(v45, this[356], 0);
    this[356] = 0;
    *((_WORD *)this + 1428) = 0;
  }
  if (this[354])
  {
    if (*((_WORD *)this + 1420))
    {
      v46 = 0;
      v47 = 0;
      do
      {
        v48 = this[354];
        if (*((_BYTE *)v48 + v46 + 16) == 1)
        {
          v2 = *(geo::codec::Allocator **)((char *)v48 + v46);
          if (v2)
            v2 = (geo::codec::Allocator *)MEMORY[0x18D764364](v2, 0x1000C8077774924);
        }
        else if (!*((_BYTE *)v48 + v46 + 16))
        {
          v49 = geo::codec::Allocator::instance(v2);
          v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v49 + 40))(v49, *(_QWORD *)((char *)this[354] + v46), 0);
        }
        ++v47;
        v46 += 24;
      }
      while (v47 < *((unsigned __int16 *)this + 1420));
    }
    v50 = geo::codec::Allocator::instance(v2);
    (*(void (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v50 + 40))(v50, this[354], 0);
    this[354] = 0;
    *((_WORD *)this + 1420) = 0;
  }
  geo::codec::DaVinciMaterialSheetsDealloc(this[268], (GeoCodecsDaVinciMaterialSheet *)*((unsigned __int16 *)this + 1068));
  this[268] = 0;
  *((_WORD *)this + 1068) = 0;
  result = geo::codec::DaVinciScenesDealloc(this[270], (GeoCodecsDaVinciScene *)*((unsigned __int16 *)this + 1076));
  this[270] = 0;
  *((_WORD *)this + 1076) = 0;
  return result;
}

geo::codec::Allocator *geo::codec::DaVinciExplicitTextureMappingDataDealloc(geo::codec::Allocator *this, GeoCodecsDaVinciExplicitTextureMappingData *a2)
{
  geo::codec::Allocator *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned __int16 *v6;
  int v7;
  unsigned int v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;

  if (this)
  {
    v2 = this;
    if ((_DWORD)a2)
    {
      v3 = 0;
      v4 = a2;
      do
      {
        v5 = (char *)v2 + 16 * v3;
        v7 = *((unsigned __int16 *)v5 + 2);
        v6 = (unsigned __int16 *)(v5 + 4);
        if (v7)
        {
          v8 = 0;
          do
          {
            if ((v9 & 1) == 0)
            {
              {
                v11 = operator new();
                geo::MallocZoneAllocator::MallocZoneAllocator(v11, "GeoCodec", 0x99AFC36000000008, 0, 0);
                geo::codec::Allocator::instance(void)::alloc = v11;
              }
            }
            this = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                                               + 40))(geo::codec::Allocator::instance(void)::alloc, *((_QWORD *)v2 + 2 * v3 + 1), 0);
            ++v8;
          }
          while (v8 < *v6);
        }
        ++v3;
      }
      while (v3 != v4);
    }
    v10 = geo::codec::Allocator::instance(this);
    return (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v10 + 40))(v10, v2, 0);
  }
  return this;
}

void sub_18870D018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x18D76437C](a10, 0x10F1C40DA10AB66);
  _Unwind_Resume(a1);
}

void sub_18870D048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

geo::codec::Allocator *geo::codec::DaVinciMaterialSheetsDealloc(geo::codec::Allocator *this, GeoCodecsDaVinciMaterialSheet *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int16 *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  geo::codec::Allocator *v54;
  uint64_t v55;
  uint64_t *v56;
  _WORD *v57;

  v54 = this;
  if (this)
  {
    if ((_DWORD)a2)
    {
      v2 = 0;
      v53 = a2;
      do
      {
        v55 = v2;
        v4 = (char *)v54 + 40 * v2;
        v6 = v4[12];
        v5 = (unsigned __int8 *)(v4 + 12);
        if (v6)
        {
          v7 = 0;
          v8 = (uint64_t *)((char *)v54 + 40 * v2 + 32);
          v9 = 8;
          do
          {
            v10 = *v8;
            if ((v11 & 1) == 0
            {
              v13 = operator new();
              geo::MallocZoneAllocator::MallocZoneAllocator(v13, "GeoCodec", 0x99AFC36000000008, 0, 0);
              geo::codec::Allocator::instance(void)::alloc = v13;
            }
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                            + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v10 + v9), 0);
            if ((v12 & 1) == 0
            {
              v14 = operator new();
              geo::MallocZoneAllocator::MallocZoneAllocator(v14, "GeoCodec", 0x99AFC36000000008, 0, 0);
              geo::codec::Allocator::instance(void)::alloc = v14;
            }
            this = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                                                + 40))(geo::codec::Allocator::instance(void)::alloc, v10 + v9 - 8, 0);
            ++v7;
            v9 += 16;
          }
          while (v7 < *v5);
        }
        v57 = (_WORD *)((char *)v54 + 40 * v55 + 10);
        if (*v57)
        {
          v15 = 0;
          v56 = (uint64_t *)((char *)v54 + 40 * v55 + 24);
          do
          {
            v16 = *v56;
            v17 = *v56 + 24 * v15;
            if (*(_WORD *)(v17 + 18))
            {
              v18 = 0;
              v19 = 0;
              do
              {
                v20 = *(_QWORD *)(v16 + 24 * v15 + 8);
                if ((v21 & 1) == 0
                {
                  v52 = operator new();
                  geo::MallocZoneAllocator::MallocZoneAllocator(v52, "GeoCodec", 0x99AFC36000000008, 0, 0);
                  geo::codec::Allocator::instance(void)::alloc = v52;
                }
                (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                 + 40))(geo::codec::Allocator::instance(void)::alloc, v20 + v18, 0);
                ++v19;
                v18 += 8;
              }
              while (v19 < *(unsigned __int16 *)(v17 + 18));
            }
            v22 = v16 + 24 * v15;
            v24 = *(unsigned __int16 *)(v22 + 16);
            v23 = (unsigned __int16 *)(v22 + 16);
            if (v24)
            {
              v25 = 0;
              v26 = 0;
              do
              {
                v27 = *(_QWORD *)v17;
                if ((v28 & 1) == 0
                {
                  v31 = operator new();
                  geo::MallocZoneAllocator::MallocZoneAllocator(v31, "GeoCodec", 0x99AFC36000000008, 0, 0);
                  geo::codec::Allocator::instance(void)::alloc = v31;
                }
                (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v27 + v25 + 8), 0);
                if ((v29 & 1) == 0
                {
                  v32 = operator new();
                  geo::MallocZoneAllocator::MallocZoneAllocator(v32, "GeoCodec", 0x99AFC36000000008, 0, 0);
                  geo::codec::Allocator::instance(void)::alloc = v32;
                }
                (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v27 + v25 + 16), 0);
                if ((v30 & 1) == 0
                {
                  v33 = operator new();
                  geo::MallocZoneAllocator::MallocZoneAllocator(v33, "GeoCodec", 0x99AFC36000000008, 0, 0);
                  geo::codec::Allocator::instance(void)::alloc = v33;
                }
                (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v27 + v25 + 24), 0);
                ++v26;
                v25 += 32;
              }
              while (v26 < *v23);
            }
            if ((v34 & 1) == 0
            {
              v35 = operator new();
              geo::MallocZoneAllocator::MallocZoneAllocator(v35, "GeoCodec", 0x99AFC36000000008, 0, 0);
              geo::codec::Allocator::instance(void)::alloc = v35;
            }
            this = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                                                + 40))(geo::codec::Allocator::instance(void)::alloc, v17, 0);
            ++v15;
          }
          while (v15 < (unsigned __int16)*v57);
        }
        v36 = (uint64_t *)*((_QWORD *)v54 + 5 * v55 + 2);
        if (*((_WORD *)v36 + 9))
        {
          v37 = 0;
          v38 = 0;
          do
          {
            v39 = v36[1];
            if ((v40 & 1) == 0
            {
              v41 = operator new();
              geo::MallocZoneAllocator::MallocZoneAllocator(v41, "GeoCodec", 0x99AFC36000000008, 0, 0);
              geo::codec::Allocator::instance(void)::alloc = v41;
            }
            this = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                                                + 40))(geo::codec::Allocator::instance(void)::alloc, v39 + v37, 0);
            ++v38;
            v37 += 8;
          }
          while (v38 < *((unsigned __int16 *)v36 + 9));
        }
        if (*((_WORD *)v36 + 8))
        {
          v42 = 0;
          v43 = 0;
          do
          {
            v44 = *v36;
            if ((v45 & 1) == 0
            {
              v48 = operator new();
              geo::MallocZoneAllocator::MallocZoneAllocator(v48, "GeoCodec", 0x99AFC36000000008, 0, 0);
              geo::codec::Allocator::instance(void)::alloc = v48;
            }
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                            + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v44 + v42 + 8), 0);
            if ((v46 & 1) == 0
            {
              v49 = operator new();
              geo::MallocZoneAllocator::MallocZoneAllocator(v49, "GeoCodec", 0x99AFC36000000008, 0, 0);
              geo::codec::Allocator::instance(void)::alloc = v49;
            }
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                            + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v44 + v42 + 16), 0);
            if ((v47 & 1) == 0)
            {
              {
                v50 = operator new();
                geo::MallocZoneAllocator::MallocZoneAllocator(v50, "GeoCodec", 0x99AFC36000000008, 0, 0);
                geo::codec::Allocator::instance(void)::alloc = v50;
              }
            }
            this = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                                               + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v44 + v42 + 24), 0);
            ++v43;
            v42 += 32;
          }
          while (v43 < *((unsigned __int16 *)v36 + 8));
        }
        v3 = geo::codec::Allocator::instance(this);
        this = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v3 + 40))(v3, v36, 0);
        v2 = v55 + 1;
      }
      while (v55 + 1 != v53);
    }
    v51 = geo::codec::Allocator::instance(this);
    return (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v51 + 40))(v51, v54, 0);
  }
  return this;
}

void sub_18870D7E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10F1C40DA10AB66);
  _Unwind_Resume(a1);
}

void sub_18870D948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

geo::codec::Allocator *geo::codec::DaVinciScenesDealloc(geo::codec::Allocator *this, GeoCodecsDaVinciScene *a2)
{
  geo::codec::Allocator *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  geo::codec::Allocator *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  geo::codec::Allocator *v10;
  unsigned __int16 *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  char *v18;
  geo::codec::Allocator *v19;
  unsigned __int16 *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  char *v27;
  geo::codec::Allocator *v28;
  unsigned __int16 *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (this)
  {
    v2 = this;
    if ((_DWORD)a2)
    {
      v3 = 0;
      v43 = a2;
      do
      {
        v8 = (char *)v2 + 56 * v3;
        v9 = geo::codec::Allocator::instance(this);
        v10 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)v8, 0);
        v12 = *((unsigned __int16 *)v8 + 21);
        v11 = (unsigned __int16 *)(v8 + 42);
        if (v12)
        {
          v13 = 0;
          v14 = 8;
          do
          {
            v15 = *((_QWORD *)v2 + 7 * v3 + 1);
            if ((v16 & 1) == 0
            {
              v38 = operator new();
              geo::MallocZoneAllocator::MallocZoneAllocator(v38, "GeoCodec", 0x99AFC36000000008, 0, 0);
              geo::codec::Allocator::instance(void)::alloc = v38;
            }
            v10 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                                              + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v15 + v14), 0);
            ++v13;
            v14 += 16;
          }
          while (v13 < *v11);
        }
        v17 = geo::codec::Allocator::instance(v10);
        v18 = (char *)v2 + 56 * v3;
        v19 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 40))(v17, *((_QWORD *)v18 + 1), 0);
        v21 = *((unsigned __int16 *)v18 + 23);
        v20 = (unsigned __int16 *)(v18 + 46);
        if (v21)
        {
          v22 = 0;
          v23 = 0;
          do
          {
            v24 = *((_QWORD *)v2 + 7 * v3 + 3);
            if ((v25 & 1) == 0
            {
              v39 = operator new();
              geo::MallocZoneAllocator::MallocZoneAllocator(v39, "GeoCodec", 0x99AFC36000000008, 0, 0);
              geo::codec::Allocator::instance(void)::alloc = v39;
            }
            v19 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                                              + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v24 + v22), 0);
            ++v23;
            v22 += 16;
          }
          while (v23 < *v20);
        }
        v26 = geo::codec::Allocator::instance(v19);
        v27 = (char *)v2 + 56 * v3;
        v28 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v26 + 40))(v26, *((_QWORD *)v27 + 3), 0);
        v30 = *((unsigned __int16 *)v27 + 22);
        v29 = (unsigned __int16 *)(v27 + 44);
        if (v30)
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *((_QWORD *)v2 + 7 * v3 + 2);
            if ((v34 & 1) == 0
            {
              v40 = operator new();
              geo::MallocZoneAllocator::MallocZoneAllocator(v40, "GeoCodec", 0x99AFC36000000008, 0, 0);
              geo::codec::Allocator::instance(void)::alloc = v40;
            }
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                            + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v33 + v31 + 8), 0);
            if ((v35 & 1) == 0
            {
              v41 = operator new();
              geo::MallocZoneAllocator::MallocZoneAllocator(v41, "GeoCodec", 0x99AFC36000000008, 0, 0);
              geo::codec::Allocator::instance(void)::alloc = v41;
            }
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                            + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v33 + v31 + 16), 0);
            if ((v36 & 1) == 0)
            {
              {
                v42 = operator new();
                geo::MallocZoneAllocator::MallocZoneAllocator(v42, "GeoCodec", 0x99AFC36000000008, 0, 0);
                geo::codec::Allocator::instance(void)::alloc = v42;
              }
            }
            v28 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                                              + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v33 + v31 + 24), 0);
            ++v32;
            v31 += 32;
          }
          while (v32 < *v29);
        }
        v4 = geo::codec::Allocator::instance(v28);
        v5 = (char *)v2 + 56 * v3;
        v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)v5 + 2), 0);
        v7 = geo::codec::Allocator::instance(v6);
        this = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)v5 + 4), 0);
        ++v3;
      }
      while (v3 != v43);
    }
    v37 = geo::codec::Allocator::instance(this);
    return (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v37 + 40))(v37, v2, 0);
  }
  return this;
}

void sub_18870DDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x18D76437C](a9, 0x10F1C40DA10AB66);
  _Unwind_Resume(a1);
}

void sub_18870DE50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18870E0B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18870E19C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18870E868(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18870E9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void addr_obj::AddressObjectBase::toBytes(addr_obj::AddressObjectBase *this@<X0>, std::string *a2@<X8>)
{
  AddrObjGoogle::protobuf::Message *v4;
  uint64_t v5;
  addr_obj *isInitialized;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  void *v12[2];
  char v13;
  void *v14;
  char v15;
  void *v16[2];
  char v17;
  void *__p[2];
  unsigned __int8 v19;
  _QWORD v20[11];
  char v21;
  uint64_t v22;
  __int128 v23;
  std::string::size_type v24;

  v4 = (addr_obj::AddressObjectBase *)((char *)this + 136);
  addr_obj::AddressObjectProto::Clear((addr_obj::AddressObjectBase *)((char *)this + 136));
  (*(void (**)(addr_obj::AddressObjectBase *, AddrObjGoogle::protobuf::Message *))(*(_QWORD *)this + 304))(this, v4);
  v23 = 0uLL;
  v24 = 0;
  v5 = AddrObjGoogle::protobuf::MessageLite::SerializeToString((uint64_t)v4, (uint64_t)&v23);
  if ((v5 & 1) != 0)
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v23;
    a2->__r_.__value_.__r.__words[2] = v24;
    v24 = 0;
    v23 = 0uLL;
  }
  else
  {
    isInitialized = (addr_obj *)addr_obj::Logger::isInitialized((addr_obj::Logger *)v5);
    if ((_DWORD)isInitialized)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"failed SerializeToString() for :", 32);
      AddrObjGoogle::protobuf::Message::ShortDebugString(v4, (uint64_t)__p);
      if ((v19 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((v19 & 0x80u) == 0)
        v9 = v19;
      else
        v9 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      if ((char)v19 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
      std::string::basic_string[abi:ne180100]<0>(v16, "toBytes");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v12, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 50, (uint64_t)v16, (uint64_t)&v14, (uint64_t)v12);
      if (v13 < 0)
        operator delete(v12[0]);
      if (v15 < 0)
        operator delete(v14);
      if (v17 < 0)
        operator delete(v16[0]);
      if ((char)v19 < 0)
        operator delete(__p[0]);
      v20[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v20[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v21 < 0)
        operator delete((void *)v20[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      isInitialized = (addr_obj *)MEMORY[0x18D764310](&v22);
    }
    v10 = addr_obj::emptyString(isInitialized);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *v10;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v11;
    }
  }
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
}

void sub_18870EC44(void *__p, int a2, int a3, __int16 a4, char a5, char a6, std::string *a7, void *a8, void *__pa, int a10, __int16 a11, char a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,__int128 a21,std::string::size_type a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v41;
  void *v42;
  const std::string::value_type *v43;
  std::string *v44;
  __int128 v45;

  if (SHIBYTE(a14) < 0)
    operator delete(__pa);
  if (a20 < 0)
    operator delete(a15);
  if (SHIBYTE(a22) < 0)
    operator delete((void *)a21);
  if (a32 < 0)
    operator delete(a27);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  v41 = __cxa_begin_catch(__p);
  if (a2 == 2)
  {
    v42 = v41;
    std::string::basic_string[abi:ne180100]<0>(&a34, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a27, "toBytes");
    std::string::basic_string[abi:ne180100]<0>(&a15, "Exception caught during formatting of the log line: ");
    v43 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v42 + 16))(v42);
    v44 = std::string::append((std::string *)&a15, v43);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    a22 = v44->__r_.__value_.__r.__words[2];
    a21 = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a34, 50, (uint64_t)&a27, (uint64_t)&a21, (uint64_t)&__pa);
    if (SHIBYTE(a14) < 0)
      operator delete(__pa);
    if (SHIBYTE(a22) < 0)
      operator delete((void *)a21);
    if (a20 < 0)
      operator delete(a15);
    if (a32 < 0)
      operator delete(a27);
    if (a39 < 0)
      operator delete(a34);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a34, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a27, "toBytes");
    std::string::basic_string[abi:ne180100]<0>(&a21, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a15, "");
    addr_obj::Logger::log(16, (uint64_t)&a34, 50, (uint64_t)&a27, (uint64_t)&a21, (uint64_t)&a15);
    if (a20 < 0)
      operator delete(a15);
    if (SHIBYTE(a22) < 0)
      operator delete((void *)a21);
    if (a32 < 0)
      operator delete(a27);
    if (a39 < 0)
      operator delete(a34);
  }
  __cxa_end_catch();
  JUMPOUT(0x18870EBF0);
}

void sub_18870EE80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (a33 < 0)
    operator delete(a28);
  if (a40 < 0)
    operator delete(a35);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18870EDD4);
}

void sub_18870EF94()
{
  __cxa_end_catch();
  JUMPOUT(0x18870EFB8);
}

void sub_18870EFA4()
{
  JUMPOUT(0x18870EFC8);
}

void sub_18870F32C(void *a1, int a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, std::string *a10, uint64_t a11, void *__pa, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,__int128 a25,std::string::size_type a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  int v33;
  uint64_t v34;
  void *v37;
  void *v38;
  const std::string::value_type *v39;
  std::string *v40;
  __int128 v41;

  if (a17 < 0)
    operator delete(__pa);
  if (SHIBYTE(a20) < 0)
    operator delete(a18);
  if (SHIBYTE(a26) < 0)
    operator delete((void *)a25);
  if (*(char *)(v34 - 49) < 0)
    operator delete(*(void **)(v34 - 72));
  std::ostringstream::~ostringstream((uint64_t)&a28);
  v37 = __cxa_begin_catch(a1);
  if (a2 == v33)
  {
    v38 = v37;
    std::string::basic_string[abi:ne180100]<0>(&a28, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v34 - 72), "toBytes");
    std::string::basic_string[abi:ne180100]<0>(&a18, "Exception caught during formatting of the log line: ");
    v39 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
    v40 = std::string::append((std::string *)&a18, v39);
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    a26 = v40->__r_.__value_.__r.__words[2];
    a25 = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a28, 55, v34 - 72, (uint64_t)&a25, (uint64_t)&__pa);
    if (a17 < 0)
      operator delete(__pa);
    if (SHIBYTE(a26) < 0)
      operator delete((void *)a25);
    if (SHIBYTE(a20) < 0)
      operator delete(a18);
    if (*(char *)(v34 - 49) < 0)
      operator delete(*(void **)(v34 - 72));
    if (a33 < 0)
LABEL_27:
      operator delete(a28);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a28, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v34 - 72), "toBytes");
    std::string::basic_string[abi:ne180100]<0>(&a25, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a18, "");
    addr_obj::Logger::log(16, (uint64_t)&a28, 55, v34 - 72, (uint64_t)&a25, (uint64_t)&a18);
    if (SHIBYTE(a20) < 0)
      operator delete(a18);
    if (SHIBYTE(a26) < 0)
      operator delete((void *)a25);
    if (*(char *)(v34 - 49) < 0)
      operator delete(*(void **)(v34 - 72));
    if (a33 < 0)
      goto LABEL_27;
  }
  __cxa_end_catch();
  __cxa_rethrow();
}

void sub_18870F494()
{
  JUMPOUT(0x18870F4A4);
}

void sub_18870F63C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a17 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v37 - 49) < 0)
    operator delete(*(void **)(v37 - 72));
  if (a37 < 0)
    operator delete(a32);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18870F748);
}

void sub_18870F72C()
{
  __cxa_end_catch();
  __cxa_end_catch();
  JUMPOUT(0x18870FA5CLL);
}

void sub_18870F758()
{
  __cxa_end_catch();
  __cxa_end_catch();
  JUMPOUT(0x18870FA5CLL);
}

void sub_18870F904(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a17 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v37 - 49) < 0)
    operator delete(*(void **)(v37 - 72));
  if (a37 < 0)
    operator delete(a32);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18870FA10);
}

void sub_18870F9F4()
{
  __cxa_end_catch();
  __cxa_end_catch();
  JUMPOUT(0x18870FA5CLL);
}

void sub_18870FA1C()
{
  __cxa_end_catch();
  JUMPOUT(0x18870FA5CLL);
}

void addr_obj::V2AddressObject::toProto(addr_obj::V2AddressObject *this, uint64_t ***a2)
{
  std::string *v4;
  uint64_t **v5;
  addr_obj::V2AddressObjectProto *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  std::string *v11;
  uint64_t **v12;
  addr_obj::V2AddressObjectProto *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t **v19;
  addr_obj::V2AddressObjectProto *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  std::string *v25;
  uint64_t **v26;
  addr_obj::V2AddressObjectProto *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  std::string *v32;
  uint64_t **v33;
  addr_obj::V2AddressObjectProto *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  std::string *v39;
  uint64_t **v40;
  addr_obj::V2AddressObjectProto *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  std::string *v46;
  uint64_t **v47;
  addr_obj::V2AddressObjectProto *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  std::string *v53;
  uint64_t **v54;
  addr_obj::V2AddressObjectProto *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  std::string *v60;
  uint64_t **v61;
  addr_obj::V2AddressObjectProto *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  std::string *v67;
  uint64_t **v68;
  addr_obj::V2AddressObjectProto *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  std::string *v74;
  uint64_t **v75;
  addr_obj::V2AddressObjectProto *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  std::string *v81;
  uint64_t **v82;
  const std::string *v83;
  addr_obj::V2AddressObjectProto *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  std::string *v89;

  addr_obj::V1AddressObject::toProto(this, (addr_obj::AddressObjectProto *)a2);
  if (*((char *)this + 751) < 0)
  {
    if (!*((_QWORD *)this + 92))
      goto LABEL_11;
  }
  else if (!*((_BYTE *)this + 751))
  {
    goto LABEL_11;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  v5 = a2[8];
  if (!v5)
  {
    v5 = (uint64_t **)operator new();
    v4 = (std::string *)addr_obj::V1AddressObjectProto::V1AddressObjectProto((addr_obj::V1AddressObjectProto *)v5);
    a2[8] = v5;
  }
  v6 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  v7 = *(_DWORD *)v6;
  v8 = addr_obj::V2AddressObjectProto::default_instance(v6);
  v9 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(v5 + 1, v7, 11, v8, 0);
  *(_DWORD *)(v9 + 140) |= 1u;
  v10 = *(uint64_t **)(v9 + 40);
  if (v10 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9))
  {
    v11 = (std::string *)operator new();
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v9 + 40) = v11;
  }
  else
  {
    v11 = *(std::string **)(v9 + 40);
  }
  v4 = std::string::operator=(v11, (const std::string *)((char *)this + 728));
LABEL_11:
  if (*((char *)this + 847) < 0)
  {
    if (!*((_QWORD *)this + 104))
      goto LABEL_21;
  }
  else if (!*((_BYTE *)this + 847))
  {
    goto LABEL_21;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  v12 = a2[8];
  if (!v12)
  {
    v12 = (uint64_t **)operator new();
    v4 = (std::string *)addr_obj::V1AddressObjectProto::V1AddressObjectProto((addr_obj::V1AddressObjectProto *)v12);
    a2[8] = v12;
  }
  v13 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  v14 = *(_DWORD *)v13;
  v15 = addr_obj::V2AddressObjectProto::default_instance(v13);
  v16 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(v12 + 1, v14, 11, v15, 0);
  *(_DWORD *)(v16 + 140) |= 2u;
  v17 = *(uint64_t **)(v16 + 48);
  if (v17 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v16))
  {
    v18 = (std::string *)operator new();
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v16 + 48) = v18;
  }
  else
  {
    v18 = *(std::string **)(v16 + 48);
  }
  v4 = std::string::operator=(v18, (const std::string *)((char *)this + 824));
LABEL_21:
  if (*((char *)this + 775) < 0)
  {
    if (!*((_QWORD *)this + 95))
      goto LABEL_31;
  }
  else if (!*((_BYTE *)this + 775))
  {
    goto LABEL_31;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  v19 = a2[8];
  if (!v19)
  {
    v19 = (uint64_t **)operator new();
    v4 = (std::string *)addr_obj::V1AddressObjectProto::V1AddressObjectProto((addr_obj::V1AddressObjectProto *)v19);
    a2[8] = v19;
  }
  v20 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  v21 = *(_DWORD *)v20;
  v22 = addr_obj::V2AddressObjectProto::default_instance(v20);
  v23 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(v19 + 1, v21, 11, v22, 0);
  *(_DWORD *)(v23 + 140) |= 4u;
  v24 = *(uint64_t **)(v23 + 56);
  if (v24 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v23))
  {
    v25 = (std::string *)operator new();
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v23 + 56) = v25;
  }
  else
  {
    v25 = *(std::string **)(v23 + 56);
  }
  v4 = std::string::operator=(v25, (const std::string *)((char *)this + 752));
LABEL_31:
  if (*((char *)this + 871) < 0)
  {
    if (!*((_QWORD *)this + 107))
      goto LABEL_41;
  }
  else if (!*((_BYTE *)this + 871))
  {
    goto LABEL_41;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  v26 = a2[8];
  if (!v26)
  {
    v26 = (uint64_t **)operator new();
    v4 = (std::string *)addr_obj::V1AddressObjectProto::V1AddressObjectProto((addr_obj::V1AddressObjectProto *)v26);
    a2[8] = v26;
  }
  v27 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  v28 = *(_DWORD *)v27;
  v29 = addr_obj::V2AddressObjectProto::default_instance(v27);
  v30 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(v26 + 1, v28, 11, v29, 0);
  *(_DWORD *)(v30 + 140) |= 8u;
  v31 = *(uint64_t **)(v30 + 64);
  if (v31 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v30))
  {
    v32 = (std::string *)operator new();
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v30 + 64) = v32;
  }
  else
  {
    v32 = *(std::string **)(v30 + 64);
  }
  v4 = std::string::operator=(v32, (const std::string *)((char *)this + 848));
LABEL_41:
  if (*((char *)this + 895) < 0)
  {
    if (!*((_QWORD *)this + 110))
      goto LABEL_51;
  }
  else if (!*((_BYTE *)this + 895))
  {
    goto LABEL_51;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  v33 = a2[8];
  if (!v33)
  {
    v33 = (uint64_t **)operator new();
    v4 = (std::string *)addr_obj::V1AddressObjectProto::V1AddressObjectProto((addr_obj::V1AddressObjectProto *)v33);
    a2[8] = v33;
  }
  v34 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  v35 = *(_DWORD *)v34;
  v36 = addr_obj::V2AddressObjectProto::default_instance(v34);
  v37 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(v33 + 1, v35, 11, v36, 0);
  *(_DWORD *)(v37 + 140) |= 0x10u;
  v38 = *(uint64_t **)(v37 + 72);
  if (v38 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v37))
  {
    v39 = (std::string *)operator new();
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v37 + 72) = v39;
  }
  else
  {
    v39 = *(std::string **)(v37 + 72);
  }
  v4 = std::string::operator=(v39, (const std::string *)((char *)this + 872));
LABEL_51:
  if (*((char *)this + 919) < 0)
  {
    if (!*((_QWORD *)this + 113))
      goto LABEL_61;
  }
  else if (!*((_BYTE *)this + 919))
  {
    goto LABEL_61;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  v40 = a2[8];
  if (!v40)
  {
    v40 = (uint64_t **)operator new();
    v4 = (std::string *)addr_obj::V1AddressObjectProto::V1AddressObjectProto((addr_obj::V1AddressObjectProto *)v40);
    a2[8] = v40;
  }
  v41 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  v42 = *(_DWORD *)v41;
  v43 = addr_obj::V2AddressObjectProto::default_instance(v41);
  v44 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(v40 + 1, v42, 11, v43, 0);
  *(_DWORD *)(v44 + 140) |= 0x20u;
  v45 = *(uint64_t **)(v44 + 80);
  if (v45 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v44))
  {
    v46 = (std::string *)operator new();
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v44 + 80) = v46;
  }
  else
  {
    v46 = *(std::string **)(v44 + 80);
  }
  v4 = std::string::operator=(v46, (const std::string *)((char *)this + 896));
LABEL_61:
  if (*((char *)this + 799) < 0)
  {
    if (!*((_QWORD *)this + 98))
      goto LABEL_71;
  }
  else if (!*((_BYTE *)this + 799))
  {
    goto LABEL_71;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  v47 = a2[8];
  if (!v47)
  {
    v47 = (uint64_t **)operator new();
    v4 = (std::string *)addr_obj::V1AddressObjectProto::V1AddressObjectProto((addr_obj::V1AddressObjectProto *)v47);
    a2[8] = v47;
  }
  v48 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  v49 = *(_DWORD *)v48;
  v50 = addr_obj::V2AddressObjectProto::default_instance(v48);
  v51 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(v47 + 1, v49, 11, v50, 0);
  *(_DWORD *)(v51 + 140) |= 0x40u;
  v52 = *(uint64_t **)(v51 + 88);
  if (v52 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v51))
  {
    v53 = (std::string *)operator new();
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v51 + 88) = v53;
  }
  else
  {
    v53 = *(std::string **)(v51 + 88);
  }
  v4 = std::string::operator=(v53, (const std::string *)((char *)this + 776));
LABEL_71:
  if (*((char *)this + 823) < 0)
  {
    if (!*((_QWORD *)this + 101))
      goto LABEL_81;
  }
  else if (!*((_BYTE *)this + 823))
  {
    goto LABEL_81;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  v54 = a2[8];
  if (!v54)
  {
    v54 = (uint64_t **)operator new();
    v4 = (std::string *)addr_obj::V1AddressObjectProto::V1AddressObjectProto((addr_obj::V1AddressObjectProto *)v54);
    a2[8] = v54;
  }
  v55 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  v56 = *(_DWORD *)v55;
  v57 = addr_obj::V2AddressObjectProto::default_instance(v55);
  v58 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(v54 + 1, v56, 11, v57, 0);
  *(_DWORD *)(v58 + 140) |= 0x80u;
  v59 = *(uint64_t **)(v58 + 96);
  if (v59 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v58))
  {
    v60 = (std::string *)operator new();
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v58 + 96) = v60;
  }
  else
  {
    v60 = *(std::string **)(v58 + 96);
  }
  v4 = std::string::operator=(v60, (const std::string *)((char *)this + 800));
LABEL_81:
  if (*((char *)this + 943) < 0)
  {
    if (!*((_QWORD *)this + 116))
      goto LABEL_91;
  }
  else if (!*((_BYTE *)this + 943))
  {
    goto LABEL_91;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  v61 = a2[8];
  if (!v61)
  {
    v61 = (uint64_t **)operator new();
    v4 = (std::string *)addr_obj::V1AddressObjectProto::V1AddressObjectProto((addr_obj::V1AddressObjectProto *)v61);
    a2[8] = v61;
  }
  v62 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  v63 = *(_DWORD *)v62;
  v64 = addr_obj::V2AddressObjectProto::default_instance(v62);
  v65 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(v61 + 1, v63, 11, v64, 0);
  *(_DWORD *)(v65 + 140) |= 0x100u;
  v66 = *(uint64_t **)(v65 + 104);
  if (v66 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v65))
  {
    v67 = (std::string *)operator new();
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v65 + 104) = v67;
  }
  else
  {
    v67 = *(std::string **)(v65 + 104);
  }
  v4 = std::string::operator=(v67, (const std::string *)((char *)this + 920));
LABEL_91:
  if (*((char *)this + 967) < 0)
  {
    if (!*((_QWORD *)this + 119))
      goto LABEL_101;
  }
  else if (!*((_BYTE *)this + 967))
  {
    goto LABEL_101;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  v68 = a2[8];
  if (!v68)
  {
    v68 = (uint64_t **)operator new();
    v4 = (std::string *)addr_obj::V1AddressObjectProto::V1AddressObjectProto((addr_obj::V1AddressObjectProto *)v68);
    a2[8] = v68;
  }
  v69 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  v70 = *(_DWORD *)v69;
  v71 = addr_obj::V2AddressObjectProto::default_instance(v69);
  v72 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(v68 + 1, v70, 11, v71, 0);
  *(_DWORD *)(v72 + 140) |= 0x200u;
  v73 = *(uint64_t **)(v72 + 112);
  if (v73 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v72))
  {
    v74 = (std::string *)operator new();
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v72 + 112) = v74;
  }
  else
  {
    v74 = *(std::string **)(v72 + 112);
  }
  v4 = std::string::operator=(v74, (const std::string *)((char *)this + 944));
LABEL_101:
  if (*((char *)this + 991) < 0)
  {
    if (!*((_QWORD *)this + 122))
      goto LABEL_111;
  }
  else if (!*((_BYTE *)this + 991))
  {
    goto LABEL_111;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  v75 = a2[8];
  if (!v75)
  {
    v75 = (uint64_t **)operator new();
    v4 = (std::string *)addr_obj::V1AddressObjectProto::V1AddressObjectProto((addr_obj::V1AddressObjectProto *)v75);
    a2[8] = v75;
  }
  v76 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  v77 = *(_DWORD *)v76;
  v78 = addr_obj::V2AddressObjectProto::default_instance(v76);
  v79 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(v75 + 1, v77, 11, v78, 0);
  *(_DWORD *)(v79 + 140) |= 0x400u;
  v80 = *(uint64_t **)(v79 + 120);
  if (v80 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v79))
  {
    v81 = (std::string *)operator new();
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v79 + 120) = v81;
  }
  else
  {
    v81 = *(std::string **)(v79 + 120);
  }
  v4 = std::string::operator=(v81, (const std::string *)((char *)this + 968));
LABEL_111:
  if (*((char *)this + 1015) < 0)
  {
    if (!*((_QWORD *)this + 125))
      return;
  }
  else if (!*((_BYTE *)this + 1015))
  {
    return;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  v82 = a2[8];
  if (!v82)
  {
    v82 = (uint64_t **)operator new();
    v4 = (std::string *)addr_obj::V1AddressObjectProto::V1AddressObjectProto((addr_obj::V1AddressObjectProto *)v82);
    a2[8] = v82;
  }
  v83 = (const std::string *)((char *)this + 992);
  v84 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  v85 = *(_DWORD *)v84;
  v86 = addr_obj::V2AddressObjectProto::default_instance(v84);
  v87 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(v82 + 1, v85, 11, v86, 0);
  *(_DWORD *)(v87 + 140) |= 0x800u;
  v88 = *(uint64_t **)(v87 + 128);
  if (v88 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v87))
  {
    v89 = (std::string *)operator new();
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v87 + 128) = v89;
  }
  else
  {
    v89 = *(std::string **)(v87 + 128);
  }
  std::string::operator=(v89, v83);
}

void sub_188710498(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40D9981018);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V2AddressObject::init(addr_obj::V2AddressObject *this, const addr_obj::AddressObjectProto *a2)
{
  addr_obj::V2AddressObject *v3;
  uint64_t v4;
  int *v5;
  uint64_t result;
  uint64_t v7;
  int *v8;
  const std::string **Message;
  _QWORD *v10;
  _QWORD *v11;
  addr_obj::Logger *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::runtime_error *exception;
  void *v18[2];
  char v19;
  std::string v20;
  void *v21[2];
  char v22;
  void *__p[2];
  unsigned __int8 v24;
  void *v25[2];
  _QWORD v26[33];

  if ((*((_BYTE *)a2 + 88) & 0x20) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"the incoming protobuf is missing the v1address field", 52);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; library version: ",
            19);
    v12 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v12))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
      std::stringbuf::str();
      if ((v24 & 0x80u) == 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if ((v24 & 0x80u) == 0)
        v14 = v24;
      else
        v14 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v13, v14);
      if ((char)v24 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V2AddressObject.cpp");
      std::string::basic_string[abi:ne180100]<0>(v21, "init");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v18, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 28, (uint64_t)v21, (uint64_t)&v20, (uint64_t)v18);
      if (v19 < 0)
        operator delete(v18[0]);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v22 < 0)
        operator delete(v21[0]);
      if ((char)v24 < 0)
        operator delete(__p[0]);
      std::ostringstream::~ostringstream((uint64_t)v25);
    }
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"; at ", 5);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V2AddressObject.cpp", 89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v25, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v25, (uint64_t)__p);
  }
  v3 = this;
  v4 = *((_QWORD *)a2 + 8);
  if (!v4)
  {
    this = (addr_obj::V2AddressObject *)addr_obj::AddressObjectProto::default_instance_(this);
    v4 = *((_QWORD *)this + 8);
  }
  v5 = addr_obj::V2AddressObjectProto::v2address(this);
  result = AddrObjGoogle::protobuf::internal::ExtensionSet::Has((AddrObjGoogle::protobuf::internal::ExtensionSet *)(v4 + 8), *v5);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)a2 + 8);
    if (!v7)
    {
      result = addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)result);
      v7 = *(_QWORD *)(result + 64);
    }
    v8 = addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)result);
    Message = (const std::string **)AddrObjGoogle::protobuf::internal::ExtensionSet::GetMessage(v7 + 8, *v8, *((_QWORD *)v8 + 1));
    std::string::operator=((std::string *)((char *)v3 + 728), Message[5]);
    std::string::operator=((std::string *)((char *)v3 + 752), Message[7]);
    std::string::operator=((std::string *)((char *)v3 + 776), Message[11]);
    std::string::operator=((std::string *)((char *)v3 + 800), Message[12]);
    std::string::operator=((std::string *)((char *)v3 + 824), Message[6]);
    std::string::operator=((std::string *)((char *)v3 + 848), Message[8]);
    std::string::operator=((std::string *)((char *)v3 + 872), Message[9]);
    std::string::operator=((std::string *)((char *)v3 + 896), Message[10]);
    std::string::operator=((std::string *)((char *)v3 + 920), Message[13]);
    std::string::operator=((std::string *)((char *)v3 + 944), Message[14]);
    std::string::operator=((std::string *)((char *)v3 + 968), Message[15]);
    return (uint64_t)std::string::operator=((std::string *)((char *)v3 + 992), Message[16]);
  }
  return result;
}

void sub_188710B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v32;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_188710B84(_Unwind_Exception *a1)
{
  uint64_t v2;

  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

int *addr_obj::V2AddressObjectProto::v2address(addr_obj::V2AddressObjectProto *this)
{
  unsigned __int8 v1;
  addr_obj::V2AddressObjectProto *v3;
  uint64_t v4;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF503B8);
  if ((v1 & 1) == 0)
  {
    v3 = (addr_obj::V2AddressObjectProto *)__cxa_guard_acquire(&qword_1EDF503B8);
    if ((_DWORD)v3)
    {
      v4 = addr_obj::V2AddressObjectProto::default_instance(v3);
      dword_1EDF503A8 = 100;
      qword_1EDF503B0 = v4;
      __cxa_guard_release(&qword_1EDF503B8);
    }
  }
  return &dword_1EDF503A8;
}

void sub_188710C14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EDF503B8);
  _Unwind_Resume(a1);
}

BOOL AddrObjGoogle::protobuf::internal::ExtensionSet::Has(AddrObjGoogle::protobuf::internal::ExtensionSet *this, int a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  int v6;
  BOOL v7;
  char **v8;

  v4 = (char *)*((_QWORD *)this + 1);
  v2 = (char *)this + 8;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = *((_DWORD *)v3 + 8);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (char **)v3;
    else
      v8 = (char **)(v3 + 8);
    if (!v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  return v5 != v2 && *((_DWORD *)v5 + 8) <= a2 && (v5[50] & 1) == 0;
}

uint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::GetMessage(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;

  v5 = *(_QWORD *)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  if (!v5)
    return a3;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a2)
    return a3;
  if ((*(_BYTE *)(v6 + 50) & 0x10) == 0)
    return *(_QWORD *)(v6 + 40);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 40) + 24))(*(_QWORD *)(v6 + 40), a3);
}

void addr_obj::V1AddressObject::toProto(addr_obj::V1AddressObject *this, addr_obj::AddressObjectProto *a2)
{
  const std::string **v4;
  uint64_t v5;
  uint64_t *v6;
  std::string *v7;
  addr_obj::geo3::Address *v8;
  std::string *v9;
  uint64_t *v10;
  std::string *v11;
  uint64_t *v12;
  std::string *v13;
  addr_obj::geo3::StructuredAddress *v14;
  AddrObjGoogle::protobuf::internal *v15;
  uint64_t *v16;
  std::string *v17;
  addr_obj::geo3::Address *v18;
  addr_obj::VenueInfo *v19;
  addr_obj::VenueInfoProto *v20;

  v4 = addr_obj::AddressObjectBase::toProto(this, a2);
  *((_DWORD *)a2 + 22) |= 0x20u;
  v5 = *((_QWORD *)a2 + 8);
  if (!v5)
  {
    v5 = operator new();
    v4 = (const std::string **)addr_obj::V1AddressObjectProto::V1AddressObjectProto((addr_obj::V1AddressObjectProto *)v5);
    *((_QWORD *)a2 + 8) = v5;
  }
  if (*((char *)this + 271) < 0)
  {
    if (!*((_QWORD *)this + 32))
      goto LABEL_11;
  }
  else if (!*((_BYTE *)this + 271))
  {
    goto LABEL_11;
  }
  *(_DWORD *)(v5 + 100) |= 1u;
  v6 = *(uint64_t **)(v5 + 40);
  if (v6 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v4))
  {
    v7 = (std::string *)operator new();
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v5 + 40) = v7;
  }
  else
  {
    v7 = *(std::string **)(v5 + 40);
  }
  std::string::operator=(v7, (const std::string *)((char *)this + 248));
LABEL_11:
  *(_DWORD *)(v5 + 100) |= 2u;
  v8 = *(addr_obj::geo3::Address **)(v5 + 48);
  if (!v8)
  {
    v8 = (addr_obj::geo3::Address *)operator new();
    addr_obj::geo3::Address::Address(v8);
    *(_QWORD *)(v5 + 48) = v8;
  }
  addr_obj::geo3::Address::CopyFrom(v8, (addr_obj::V1AddressObject *)((char *)this + 272));
  if (*((char *)this + 359) < 0)
  {
    if (!*((_QWORD *)this + 43))
      goto LABEL_21;
  }
  else if (!*((_BYTE *)this + 359))
  {
    goto LABEL_21;
  }
  *(_DWORD *)(v5 + 100) |= 4u;
  v10 = *(uint64_t **)(v5 + 56);
  if (v10 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9))
  {
    v11 = (std::string *)operator new();
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v5 + 56) = v11;
  }
  else
  {
    v11 = *(std::string **)(v5 + 56);
  }
  v9 = std::string::operator=(v11, (const std::string *)this + 14);
LABEL_21:
  if (*((char *)this + 383) < 0)
  {
    if (!*((_QWORD *)this + 46))
      goto LABEL_29;
  }
  else if (!*((_BYTE *)this + 383))
  {
    goto LABEL_29;
  }
  *(_DWORD *)(v5 + 100) |= 8u;
  v12 = *(uint64_t **)(v5 + 64);
  if (v12 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9))
  {
    v13 = (std::string *)operator new();
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v5 + 64) = v13;
  }
  else
  {
    v13 = *(std::string **)(v5 + 64);
  }
  std::string::operator=(v13, (const std::string *)this + 15);
LABEL_29:
  *(_DWORD *)(v5 + 100) |= 0x10u;
  v14 = *(addr_obj::geo3::StructuredAddress **)(v5 + 72);
  if (!v14)
  {
    v14 = (addr_obj::geo3::StructuredAddress *)operator new();
    addr_obj::geo3::StructuredAddress::StructuredAddress(v14);
    *(_QWORD *)(v5 + 72) = v14;
  }
  addr_obj::geo3::StructuredAddress::CopyFrom(v14, (addr_obj::V1AddressObject *)((char *)this + 384));
  if (*((char *)this + 655) < 0)
  {
    if (!*((_QWORD *)this + 80))
      goto LABEL_39;
  }
  else if (!*((_BYTE *)this + 655))
  {
    goto LABEL_39;
  }
  *(_DWORD *)(v5 + 100) |= 0x20u;
  v16 = *(uint64_t **)(v5 + 80);
  if (v16 == AddrObjGoogle::protobuf::internal::kEmptyString(v15))
  {
    v17 = (std::string *)operator new();
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v5 + 80) = v17;
  }
  else
  {
    v17 = *(std::string **)(v5 + 80);
  }
  std::string::operator=(v17, (const std::string *)((char *)this + 632));
LABEL_39:
  *(_DWORD *)(v5 + 100) |= 0x40u;
  v18 = *(addr_obj::geo3::Address **)(v5 + 88);
  if (!v18)
  {
    v18 = (addr_obj::geo3::Address *)operator new();
    addr_obj::geo3::Address::Address(v18);
    *(_QWORD *)(v5 + 88) = v18;
  }
  addr_obj::geo3::Address::CopyFrom(v18, (addr_obj::V1AddressObject *)((char *)this + 656));
  v19 = (addr_obj::VenueInfo *)*((_QWORD *)this + 90);
  if (v19 && !addr_obj::VenueInfo::empty(v19))
  {
    *((_DWORD *)a2 + 22) |= 0x40u;
    v20 = (addr_obj::VenueInfoProto *)*((_QWORD *)a2 + 9);
    if (!v20)
    {
      v20 = (addr_obj::VenueInfoProto *)operator new();
      addr_obj::VenueInfoProto::VenueInfoProto(v20);
      *((_QWORD *)a2 + 9) = v20;
    }
    addr_obj::VenueInfo::toProto(*((const std::string ***)this + 90), v20);
  }
}

void sub_188711040(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40A7563026);
  _Unwind_Resume(a1);
}

const std::string **addr_obj::AddressObjectBase::toProto(addr_obj::AddressObjectBase *this, addr_obj::AddressObjectProto *a2)
{
  int v4;
  uint64_t *v5;
  std::string *v6;

  v4 = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 20) = *((_DWORD *)this + 3);
  *((_DWORD *)a2 + 22) = v4 | 3;
  v5 = (uint64_t *)*((_QWORD *)a2 + 2);
  if (v5 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v6 = (std::string *)operator new();
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)a2 + 2) = v6;
  }
  else
  {
    v6 = (std::string *)*((_QWORD *)a2 + 2);
  }
  std::string::operator=(v6, (const std::string *)((char *)this + 16));
  addr_obj::Localization::toProto((std::string *)((char *)this + 40), a2);
  return addr_obj::Fingerprints::toProto((const std::string **)this + 14, a2);
}

std::string *addr_obj::Localization::toProto(std::string *this, addr_obj::AddressObjectProto *a2)
{
  const std::string *v2;
  uint64_t v3;
  uint64_t *v5;
  std::string *v6;
  std::string *v7;
  uint64_t *v8;
  std::string *v9;
  std::string *v10;
  uint64_t *v11;
  std::string *v12;

  v2 = this;
  *((_DWORD *)a2 + 22) |= 4u;
  v3 = *((_QWORD *)a2 + 3);
  if (!v3)
  {
    v3 = operator new();
    this = (std::string *)addr_obj::LocalizationProto::LocalizationProto((addr_obj::LocalizationProto *)v3);
    *((_QWORD *)a2 + 3) = v3;
  }
  *(_DWORD *)(v3 + 44) |= 1u;
  v5 = *(uint64_t **)(v3 + 16);
  if (v5 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
  {
    v6 = (std::string *)operator new();
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v3 + 16) = v6;
  }
  else
  {
    v6 = *(std::string **)(v3 + 16);
  }
  v7 = std::string::operator=(v6, v2);
  *(_DWORD *)(v3 + 44) |= 2u;
  v8 = *(uint64_t **)(v3 + 24);
  if (v8 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v7))
  {
    v9 = (std::string *)operator new();
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v3 + 24) = v9;
  }
  else
  {
    v9 = *(std::string **)(v3 + 24);
  }
  v10 = std::string::operator=(v9, v2 + 1);
  *(_DWORD *)(v3 + 44) |= 4u;
  v11 = *(uint64_t **)(v3 + 32);
  if (v11 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v10))
  {
    v12 = (std::string *)operator new();
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v3 + 32) = v12;
  }
  else
  {
    v12 = *(std::string **)(v3 + 32);
  }
  return std::string::operator=(v12, v2 + 2);
}

void sub_188711294(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40E7EDF326);
  _Unwind_Resume(a1);
}

const std::string **addr_obj::Fingerprints::toProto(const std::string **this, addr_obj::AddressObjectProto *a2)
{
  const std::string *v2;
  const std::string **v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const std::string **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  std::string *v13;
  std::string *v14;
  int v15;
  uint64_t *v16;
  std::string *v17;
  const std::string *v18;
  std::string *v19;
  uint64_t *v20;
  std::string *v21;

  v2 = *this;
  if (*this != this[1])
  {
    v4 = this;
    v5 = (int *)((char *)a2 + 32);
    do
    {
      v6 = *((_DWORD *)a2 + 11);
      v7 = *((int *)a2 + 10);
      if ((int)v7 >= v6)
      {
        if (v6 == *((_DWORD *)a2 + 12))
        {
          AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v6 + 1);
          v6 = *((_DWORD *)a2 + 11);
        }
        *((_DWORD *)a2 + 11) = v6 + 1;
        this = (const std::string **)AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::FingerprintProto>::New();
        v9 = this;
        v10 = *((_QWORD *)a2 + 4);
        v11 = *((int *)a2 + 10);
        *((_DWORD *)a2 + 10) = v11 + 1;
        *(_QWORD *)(v10 + 8 * v11) = this;
      }
      else
      {
        v8 = *((_QWORD *)a2 + 4);
        *((_DWORD *)a2 + 10) = v7 + 1;
        v9 = *(const std::string ***)(v8 + 8 * v7);
      }
      *((_DWORD *)v9 + 13) |= 1u;
      v12 = (uint64_t *)v9[2];
      if (v12 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
      {
        v13 = (std::string *)operator new();
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        v9[2] = v13;
      }
      else
      {
        v13 = (std::string *)v9[2];
      }
      v14 = std::string::operator=(v13, v2);
      v15 = *((_DWORD *)v9 + 13);
      v9[3] = (const std::string *)v2[1].__r_.__value_.__l.__data_;
      *((_DWORD *)v9 + 13) = v15 | 6;
      v16 = (uint64_t *)v9[4];
      if (v16 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v14))
      {
        v17 = (std::string *)operator new();
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        v9[4] = v17;
      }
      else
      {
        v17 = (std::string *)v9[4];
      }
      v18 = (const std::string *)((char *)v2 + 32);
      v19 = std::string::operator=(v17, v18);
      *((_DWORD *)v9 + 13) |= 8u;
      v20 = (uint64_t *)v9[5];
      if (v20 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v19))
      {
        v21 = (std::string *)operator new();
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v9[5] = v21;
      }
      else
      {
        v21 = (std::string *)v9[5];
      }
      this = (const std::string **)std::string::operator=(v21, v18 + 1);
      v2 = v18 + 2;
    }
    while (v2 != v4[1]);
  }
  return this;
}

void sub_1887117B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1887118BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDTransitScheduleFilterReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 56))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDTransitScheduleFilterReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 60));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDTransitScheduleFilterReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDTransitScheduleFilterReadAllFrom_initialTag;
  Specified = GEOPDTransitScheduleFilterReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 60));
  return Specified;
}

void sub_188711AC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDTransitScheduleFilterReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  GEOPDDeparturePredicate *v37;
  uint64_t v38;
  id v39;
  void *v40;
  int v41;
  void *v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  int v53;
  int v54;
  void *v55;
  int v57;
  int *v58;
  char v59;
  char v60;
  char v61;
  BOOL v62;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 60));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 56);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 52));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 68) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 2) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 != 0;
        v15 = v14 & ~(_BYTE)v10 | v9;
        v16 = v14 | v10;
        v59 = v15;
        v60 = v16 | v15;
        if (((v16 | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v61 = (v17 == 0) | v16;
        v62 = v16;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v9;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_80;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_80:
      v57 = 1;
      goto LABEL_81;
    }
    v31 = v23 >> 3;
    v32 = v62;
    if ((v61 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 5:
        if (!v32)
          goto LABEL_67;
        if ((*(_BYTE *)(a1 + 68) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_101;
          v37 = objc_alloc_init(GEOPDDeparturePredicate);
          if (GEOPDDeparturePredicateReadAllFrom((uint64_t)v37, (void *)v3))
          {
            PBReaderRecallMark();
            v38 = 24;
            goto LABEL_54;
          }
          goto LABEL_100;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_101;
        v51 = 16 * *(_BYTE *)(a1 + 68);
        goto LABEL_77;
      case 6:
        if (!v32)
          goto LABEL_67;
        if ((*(_BYTE *)(a1 + 68) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_101;
          v51 = 8 * *(_BYTE *)(a1 + 68);
LABEL_77:
          v7 += v51 >> 7;
          goto LABEL_78;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_101;
        v37 = objc_alloc_init(GEOPDDeparturePredicate);
        if (GEOPDDeparturePredicateReadAllFrom((uint64_t)v37, (void *)v3))
        {
          PBReaderRecallMark();
          v38 = 32;
LABEL_54:
          v42 = *(void **)(a1 + v38);
          *(_QWORD *)(a1 + v38) = v37;

          --v7;
LABEL_78:
          v19 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_79;
        }
LABEL_100:

LABEL_101:
        v57 = 0;
        v58 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_82:
        if ((v59 & 1) != 0)
LABEL_83:
          *(_BYTE *)(a1 + v58[533]) |= 4u;
        if (v62 || (v57 & 1) == 0)
        {
          *(_BYTE *)(a1 + v58[533]) |= 8u;
          *(_BYTE *)(a1 + v58[533]) |= 0x10u;
          goto LABEL_94;
        }
        if (v17)
        {
          while (1)
          {
            v54 = *v17++;
            v53 = v54;
            if (v54 == 5)
              break;
            if (v53 == 6)
            {
              v52 = 16;
LABEL_90:
              *(_BYTE *)(a1 + v58[533]) |= v52;
            }
            else if (!v53)
            {
              goto LABEL_94;
            }
          }
          v52 = 8;
          goto LABEL_90;
        }
LABEL_94:
        if (v57)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if (v62)
        {
          v55 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_67;
        if (!PBReaderPlaceMark() || !GEOPDTimeRangeReadAllFrom(a1 + 40, v3))
          goto LABEL_101;
        PBReaderRecallMark();
        *(_BYTE *)(a1 + 68) |= 1u;
        goto LABEL_78;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_67;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        *(_BYTE *)(a1 + 68) |= 2u;
        while (2)
        {
          v46 = *v18;
          v47 = *(_QWORD *)(v3 + v46);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v47);
            *(_QWORD *)(v3 + v46) = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              v28 = v44++ >= 9;
              if (v28)
              {
                v45 = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v45 = 0;
LABEL_72:
        *(_BYTE *)(a1 + 64) = v45 != 0;
        goto LABEL_79;
      default:
        if ((v59 & 1) == 0 || (*(_BYTE *)(a1 + 68) & 4) != 0)
        {
LABEL_67:
          v50 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v50 & 1) == 0)
          {
            v57 = 0;
LABEL_81:
            v58 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
            goto LABEL_82;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v40 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v39;

          }
          v41 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v41)
          {
            v57 = 0;
            v58 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
            goto LABEL_83;
          }
        }
LABEL_79:
        if (!(v60 & 1 | (v7 != 0)))
          goto LABEL_80;
        continue;
    }
  }
}

BOOL GEOPDDeparturePredicateReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_36;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_38;
            }
          }
          v3[*v6] = 1;
LABEL_36:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_38:
          *(_DWORD *)(a1 + 28) = v20;
        }
        else if ((v10 >> 3) == 1)
        {
          if (!PBReaderPlaceMark() || !GEOPDTimeRangeReadAllFrom(a1 + 16, (uint64_t)v3))
            goto LABEL_41;
          PBReaderRecallMark();
          *(_BYTE *)(a1 + 32) |= 1u;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_41;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_41:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_188712414(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDTimeRangeReadAllFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  _DWORD *v7;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  _DWORD *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (_DWORD *)(a1 + 4);
    v8 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v3;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v4))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        if (v10++ >= 9)
        {
          v11 = 0;
          v17 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v17 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v11 = 0;
LABEL_14:
      if (v17 || (v11 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v11 >> 3) == 2)
        break;
      if ((v11 >> 3) == 1)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 8) |= 2u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
          {
            v27 = v7;
            goto LABEL_38;
          }
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0)
            break;
          v19 += 7;
          v26 = v20++ > 8;
          if (v26)
          {
            LODWORD(v21) = 0;
            v27 = v7;
            goto LABEL_41;
          }
        }
        v27 = v7;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_41:
        *v27 = v21;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v28 = 0;
    v29 = 0;
    v21 = 0;
    *(_BYTE *)(a1 + 8) |= 1u;
    while (1)
    {
      v30 = *v3;
      v31 = *(_QWORD *)(a2 + v30);
      v32 = v31 + 1;
      if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
        break;
      v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v31);
      *(_QWORD *)(a2 + v30) = v32;
      v21 |= (unint64_t)(v33 & 0x7F) << v28;
      if ((v33 & 0x80) == 0)
      {
        v27 = (_DWORD *)a1;
        goto LABEL_39;
      }
      v28 += 7;
      v26 = v29++ > 8;
      if (v26)
      {
        LODWORD(v21) = 0;
        v27 = (_DWORD *)a1;
        goto LABEL_41;
      }
    }
    v27 = (_DWORD *)a1;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_188712DD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188712E94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *GEOABSecondPartyPlaceRequestClientMetaDataIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOABSecondPartyPlaceRequestClientMetaDataIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

BOOL GEOPDBoundsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  int v42;
  int v43;
  int v45;
  int v46;
  _BOOL8 v47;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
        case 2u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
            goto LABEL_97;
          goto LABEL_90;
        case 3u:
        case 4u:
          if (v16 != 5)
            goto LABEL_97;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFFBLL && (v20 = v19 + 4, v20 <= *(_QWORD *)&a1[*v3]))
            *(_QWORD *)&a1[v18] = v20;
          else
            a1[v14] = 1;
          continue;
        case 5u:
          if (v16 != 2 || !PBReaderPlaceMark())
            goto LABEL_97;
          objc_msgSend(a1, "position", 0, 0);
          objc_msgSend(a1, "length");
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_97;
          continue;
      }
      while (2)
      {
        if (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              break;
            v27 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if ((v27 & 0x80) == 0)
              goto LABEL_42;
            v21 += 7;
            v13 = v22++ >= 9;
            if (v13)
            {
              v23 = 0;
              v28 = *v4;
              v29 = a1[v28];
              goto LABEL_44;
            }
          }
          a1[*v4] = 1;
LABEL_42:
          v28 = *v4;
          v29 = a1[v28];
          if (a1[v28])
            v23 = 0;
LABEL_44:
          v30 = v23 & 7;
          if (!v29 && v30 != 4)
          {
            switch((v23 >> 3))
            {
              case 1u:
                if (v30 != 2 || !PBReaderPlaceMark() || !GEOPDGeographicCoordinateIsValid(a1))
                  goto LABEL_96;
                goto LABEL_87;
              case 2u:
              case 3u:
              case 4u:
                if (v30 != 5)
                  goto LABEL_96;
                v32 = *v2;
                v33 = *(_QWORD *)&a1[v32];
                if (v33 <= 0xFFFFFFFFFFFFFFFBLL && (v34 = v33 + 4, v34 <= *(_QWORD *)&a1[*v3]))
                  *(_QWORD *)&a1[v32] = v34;
                else
                  a1[v28] = 1;
                continue;
              case 5u:
                if (v30 != 2 || !PBReaderPlaceMark())
                  goto LABEL_96;
                objc_msgSend(a1, "position");
                objc_msgSend(a1, "length");
                break;
              default:
                if ((PBReaderSkipValueWithTag() & 1) != 0)
                  continue;
                goto LABEL_96;
            }
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
            {
              v35 = 0;
              v36 = 0;
              v37 = 0;
              while (1)
              {
                v38 = *v2;
                v39 = *(_QWORD *)&a1[v38];
                v40 = v39 + 1;
                if (v39 == -1 || v40 > *(_QWORD *)&a1[*v3])
                  break;
                v41 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v39);
                *(_QWORD *)&a1[v38] = v40;
                v37 |= (unint64_t)(v41 & 0x7F) << v35;
                if ((v41 & 0x80) == 0)
                  goto LABEL_72;
                v35 += 7;
                v13 = v36++ >= 9;
                if (v13)
                {
                  v37 = 0;
                  v42 = a1[*v4];
                  goto LABEL_74;
                }
              }
              a1[*v4] = 1;
LABEL_72:
              v42 = a1[*v4];
              if (a1[*v4])
                v37 = 0;
LABEL_74:
              v43 = v37 & 7;
              if (v42 || v43 == 4)
                break;
              if ((v37 >> 3) == 2 || (v37 >> 3) == 1)
              {
                if (v43 != 2 || !PBReaderPlaceMark() || !GEOPDGeographicCoordinateIsValid(a1))
                {
LABEL_95:
                  PBReaderRecallMark();
                  goto LABEL_96;
                }
                PBReaderRecallMark();
              }
              else if ((PBReaderSkipValueWithTag() & 1) == 0)
              {
                goto LABEL_95;
              }
            }
            v45 = a1[*v4];
            PBReaderRecallMark();
            if (!v45)
            {
LABEL_87:
              PBReaderRecallMark();
              continue;
            }
LABEL_96:
            PBReaderRecallMark();
LABEL_97:
            PBReaderRecallMark();
            return 0;
          }
        }
        break;
      }
      v46 = a1[*v4];
      PBReaderRecallMark();
      if (v46)
        goto LABEL_97;
LABEL_90:
      PBReaderRecallMark();
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v47 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v47;
}

BOOL GEOMapRegionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  _BOOL8 v27;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 5u:
        case 6u:
        case 7u:
        case 8u:
          if (v16 != 1)
            goto LABEL_42;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_38;
          v20 = v19 + 8;
          if (v20 > *(_QWORD *)&a1[*v3])
            goto LABEL_38;
          *(_QWORD *)&a1[v18] = v20;
          continue;
        case 9u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_42;
          PBReaderRecallMark();
          continue;
        case 0xAu:
          if ((v8 & 7) != 0)
            goto LABEL_42;
          v21 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_42:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v22 = *v2;
        v23 = *(_QWORD *)&a1[v22];
        v24 = v23 + 1;
        if (v23 == -1 || v24 > *(_QWORD *)&a1[*v3])
          break;
        v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
        *(_QWORD *)&a1[v22] = v24;
        if (v25 < 0 && v21++ <= 8)
          continue;
        goto LABEL_39;
      }
      v14 = *v4;
LABEL_38:
      a1[v14] = 1;
LABEL_39:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v27 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v27;
}

void sub_188713A28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDRelatedPlaceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDRelatedPlaceReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDRelatedPlaceReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDRelatedPlaceReadAllFrom_initialTag;
  Specified = GEOPDRelatedPlaceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDRelatedPlaceCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_188713BC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDRelatedPlaceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  int v18;
  int v19;
  int *v20;
  int *v21;
  int v22;
  int *v23;
  int *v24;
  char v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  BOOL v32;
  int v33;
  int v34;
  unint64_t v36;
  BOOL v37;
  int *v38;
  int v39;
  int v40;
  BOOL v41;
  GEOPDMapsIdentifier *v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  id v57;
  void *v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  int v66;
  int v67;
  char v68;
  void *v69;
  char v71;
  char v72;
  int v73;
  char v74;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
  v13 = ((*(unsigned __int8 *)(a1 + 72) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 1) & 1);
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v15 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 != 0;
        v18 = v17 & ~(_DWORD)v11 | v7;
        v19 = v17 | v11;
        if ((((v17 | v11) | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = 1;
        v23 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_97;
        v71 = v18;
        v73 = (v9 != 0) | v19 | v18;
        v74 = (v20 == 0) | v19;
        v24 = (int *)MEMORY[0x1E0D82BB8];
        v72 = v17 | v11;
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v7;
LABEL_8:
        v15 = v10;
        v16 = v11;
LABEL_10:
        ++v9;
        v7 = v14;
        v10 = v15;
        v11 = v16;
        continue;
    }
    break;
  }
  do
  {
    if (*(_BYTE *)(v3 + *v23))
      break;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    while (1)
    {
      v28 = *v21;
      v29 = *(_QWORD *)(v3 + v28);
      v30 = v29 + 1;
      if (v29 == -1 || v30 > *(_QWORD *)(v3 + *v6))
        break;
      v31 = *(_BYTE *)(*(_QWORD *)(v3 + *v24) + v29);
      *(_QWORD *)(v3 + v28) = v30;
      v27 |= (unint64_t)(v31 & 0x7F) << v25;
      if ((v31 & 0x80) == 0)
        goto LABEL_25;
      v25 += 7;
      v32 = v26++ >= 9;
      if (v32)
      {
        v27 = 0;
        v33 = *(unsigned __int8 *)(v3 + *v23);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v23) = 1;
LABEL_25:
    v33 = *(unsigned __int8 *)(v3 + *v23);
    if (*(_BYTE *)(v3 + *v23))
      v27 = 0;
LABEL_27:
    v34 = v27 & 7;
    if (v33 || v34 == 4)
      break;
    v36 = v27 >> 3;
    v37 = v19;
    if ((v74 & 1) == 0)
    {
      v38 = v20;
      do
      {
        v40 = *v38++;
        v39 = v40;
        v37 = v40 != 0;
        if (v40)
          v41 = v39 == (_DWORD)v36;
        else
          v41 = 1;
      }
      while (!v41);
    }
    switch((_DWORD)v36)
    {
      case 3:
        if (v37 && (*(_BYTE *)(a1 + 72) & 4) == 0)
        {
          if (v34 == 2)
          {
            v22 = PBReaderPlaceMark();
            v23 = (int *)MEMORY[0x1E0D82BC8];
            if (!v22)
            {
              v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
              LOBYTE(v19) = v72;
              goto LABEL_96;
            }
            while (*(_QWORD *)(v3 + *v21) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v23))
            {
              v43 = 0;
              v44 = 0;
              v45 = 0;
              while (1)
              {
                v46 = *v21;
                v47 = *(_QWORD *)(v3 + v46);
                v48 = v47 + 1;
                if (v47 == -1 || v48 > *(_QWORD *)(v3 + *v6))
                  break;
                v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v24) + v47);
                *(_QWORD *)(v3 + v46) = v48;
                v45 |= (unint64_t)(v49 & 0x7F) << v43;
                if (v49 < 0)
                {
                  v43 += 7;
                  v32 = v44++ >= 9;
                  if (!v32)
                    continue;
                }
                goto LABEL_60;
              }
              *(_BYTE *)(v3 + *v23) = 1;
LABEL_60:
              PBRepeatedUInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v59 = 0;
            v60 = 0;
            v61 = 0;
            v23 = (int *)MEMORY[0x1E0D82BC8];
            while (1)
            {
              v62 = *v21;
              v63 = *(_QWORD *)(v3 + v62);
              v64 = v63 + 1;
              if (v63 == -1 || v64 > *(_QWORD *)(v3 + *v6))
                break;
              v65 = *(_BYTE *)(*(_QWORD *)(v3 + *v24) + v63);
              *(_QWORD *)(v3 + v62) = v64;
              v61 |= (unint64_t)(v65 & 0x7F) << v59;
              if (v65 < 0)
              {
                v59 += 7;
                v32 = v60++ >= 9;
                if (!v32)
                  continue;
              }
              goto LABEL_90;
            }
            *(_BYTE *)(v3 + *v23) = 1;
LABEL_90:
            PBRepeatedUInt32Add();
          }
          LOBYTE(v19) = v72;
          goto LABEL_92;
        }
        break;
      case 2:
        if ((v8 & 1) != 0)
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          *(_BYTE *)(a1 + 72) |= 1u;
          v23 = (int *)MEMORY[0x1E0D82BC8];
          while (1)
          {
            v53 = *v21;
            v54 = *(_QWORD *)(v3 + v53);
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v6))
              break;
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v24) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if ((v56 & 0x80) == 0)
              goto LABEL_78;
            v50 += 7;
            v32 = v51++ >= 9;
            if (v32)
            {
              LODWORD(v52) = 0;
              goto LABEL_80;
            }
          }
          *(_BYTE *)(v3 + *v23) = 1;
LABEL_78:
          if (*(_BYTE *)(v3 + *v23))
            LODWORD(v52) = 0;
LABEL_80:
          *(_DWORD *)(a1 + 68) = v52;
LABEL_92:
          if ((v73 & 1) == 0)
            goto LABEL_94;
          continue;
        }
        break;
      case 1:
        if (v37 && (*(_BYTE *)(a1 + 72) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_116;
          v42 = objc_alloc_init(GEOPDMapsIdentifier);
          if (!GEOPDMapsIdentifierReadAllFrom((uint64_t)v42, (void *)v3))
          {

LABEL_116:
            v22 = 0;
            v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
            LOBYTE(v19) = v72;
            v23 = (int *)MEMORY[0x1E0D82BC8];
            goto LABEL_96;
          }
          PBReaderRecallMark();
          -[GEOPDRelatedPlace _addNoFlagsMapsId:](a1, v42);

          LOBYTE(v19) = v72;
          v23 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_92;
        }
        break;
      default:
        if ((v71 & 1) != 0 && (*(_BYTE *)(a1 + 72) & 2) == 0)
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v57 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v58 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v57;

          }
          v22 = PBUnknownFieldAdd();
          LOBYTE(v19) = v72;
          v23 = (int *)MEMORY[0x1E0D82BC8];
          if (!v22)
          {
            v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
            goto LABEL_98;
          }
          goto LABEL_92;
        }
        break;
    }
    v22 = PBReaderSkipValueWithTag();
    LOBYTE(v19) = v72;
    v23 = (int *)MEMORY[0x1E0D82BC8];
    if ((v22 & v73 & 1) == 0)
      goto LABEL_95;
  }
  while (*(_QWORD *)(v3 + *v21) < *(_QWORD *)(v3 + *v6));
LABEL_94:
  v22 = 1;
LABEL_95:
  v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
LABEL_96:
  LOBYTE(v18) = v71;
LABEL_97:
  if ((v18 & 1) != 0)
LABEL_98:
    *(_BYTE *)(a1 + v12[303]) |= 2u;
  if (v19 & 1 | ((v22 & 1) == 0))
  {
    *(_BYTE *)(a1 + v12[303]) |= 8u;
    *(_BYTE *)(a1 + v12[303]) |= 4u;
    goto LABEL_109;
  }
  if (v20)
  {
    while (2)
    {
      while (1)
      {
        v67 = *v20++;
        v66 = v67;
        if (v67 == 1)
          break;
        if (v66 == 3)
        {
          v68 = 4;
          goto LABEL_108;
        }
        if (!v66)
          goto LABEL_109;
      }
      v68 = 8;
LABEL_108:
      *(_BYTE *)(a1 + v12[303]) |= v68;
      continue;
    }
  }
LABEL_109:
  if (v22)
  {
    v3 = *(_BYTE *)(v3 + *v23) == 0;
    if ((v19 & 1) == 0)
      return v3;
LABEL_113:
    v69 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  else
  {
    v3 = 0;
    if ((v19 & 1) != 0)
      goto LABEL_113;
  }
  return v3;
}

void sub_1887149E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188714AC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVersionManifestReadAllFrom(_QWORD *a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  GEOServiceVersion *v17;
  id v18;
  void *v19;
  _BOOL8 v20;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_29;
          v17 = objc_alloc_init(GEOServiceVersion);
          if (!GEOServiceVersionReadAllFrom((uint64_t)v17, v3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addServiceVersion:", v17, 0, 0);

        }
        else
        {
          if (!a1[1])
          {
            v18 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v19 = (void *)a1[1];
            a1[1] = v18;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_29;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v20 = v3[*v6] == 0;
  }
  else
  {
LABEL_29:
    v20 = 0;
  }
  objc_sync_exit(v3);

  return v20;
}

void sub_188714E38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOServiceVersionReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  void *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  id v24;
  void *v25;
  _BOOL8 v26;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            if (v22 == -1 || v22 >= *(_QWORD *)&v3[*v5])
              break;
            v23 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0)
              goto LABEL_36;
            v18 += 7;
            v14 = v19++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_38;
            }
          }
          v3[*v6] = 1;
LABEL_36:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_38:
          *(_DWORD *)(a1 + 24) = v20;
        }
        else if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (v17)
            -[GEOServiceVersion addVersionDomain:](a1, v17);

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v24 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v25 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v24;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_41;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v26 = v3[*v6] == 0;
  }
  else
  {
LABEL_41:
    v26 = 0;
  }
  objc_sync_exit(v3);

  return v26;
}

void sub_1887150E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDPhotoPositionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  int v50;
  int v51;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  _BOOL8 v69;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
LABEL_140:
    v69 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v69;
  }
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (a1[*v4])
      goto LABEL_140;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *v2;
      v10 = *(_QWORD *)&a1[v9];
      v11 = v10 + 1;
      if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
        break;
      v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
      *(_QWORD *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0)
        goto LABEL_12;
      v6 += 7;
      v13 = v7++ >= 9;
      if (v13)
      {
        v8 = 0;
        v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v14 = a1[*v4];
    if (a1[*v4])
      v8 = 0;
LABEL_14:
    v15 = v8 & 7;
    if (v14 || v15 == 4)
      goto LABEL_140;
    switch((v8 >> 3))
    {
      case 1u:
        if ((v8 & 7) != 0)
          goto LABEL_142;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            goto LABEL_76;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0)
          {
            v22 = v17++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_85;
        }
      case 2u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDCameraMetadataIsValid(a1))
          goto LABEL_142;
        goto LABEL_84;
      case 3u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDOrientedPositionIsValid(a1))
          goto LABEL_142;
        goto LABEL_84;
      case 4u:
        if ((v8 & 7) != 0)
          goto LABEL_142;
        v23 = 0;
        while (1)
        {
          v24 = *v2;
          v25 = *(_QWORD *)&a1[v24];
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
            goto LABEL_76;
          v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
          *(_QWORD *)&a1[v24] = v26;
          if (v27 < 0)
          {
            v22 = v23++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_85;
        }
      case 5u:
        if ((v8 & 7) != 0)
          goto LABEL_142;
        v28 = 0;
        while (1)
        {
          v29 = *v2;
          v30 = *(_QWORD *)&a1[v29];
          v31 = v30 + 1;
          if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
            goto LABEL_76;
          v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
          *(_QWORD *)&a1[v29] = v31;
          if (v32 < 0)
          {
            v22 = v28++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_85;
        }
      case 6u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDGeographicCoordinateIsValid(a1))
          goto LABEL_142;
        goto LABEL_84;
      case 7u:
        if ((v8 & 7) != 0)
          goto LABEL_142;
        v33 = 0;
        while (1)
        {
          v34 = *v2;
          v35 = *(_QWORD *)&a1[v34];
          v36 = v35 + 1;
          if (v35 == -1 || v36 > *(_QWORD *)&a1[*v3])
            goto LABEL_76;
          v37 = *(char *)(*(_QWORD *)&a1[*v5] + v35);
          *(_QWORD *)&a1[v34] = v36;
          if (v37 < 0)
          {
            v22 = v33++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_85;
        }
      case 8u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDGroundDataBuildIsValid(a1))
          goto LABEL_142;
        goto LABEL_84;
      case 9u:
        if (v15 != 2)
        {
          if ((v8 & 7) != 0)
            goto LABEL_142;
          while (1)
          {
            v38 = *v2;
            v39 = *(_QWORD *)&a1[v38];
            v40 = v39 + 1;
            if (v39 == -1 || v40 > *(_QWORD *)&a1[*v3])
              break;
            v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
            *(_QWORD *)&a1[v38] = v40;
            if (v41 < 0)
            {
              v42 = v15++;
              if (v42 <= 8)
                continue;
            }
            goto LABEL_85;
          }
LABEL_76:
          a1[*v4] = 1;
          goto LABEL_85;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_142;
LABEL_131:
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
        {
          v64 = a1[*v4];
          if (a1[*v4])
            break;
          while (1)
          {
            v65 = *v2;
            v66 = *(_QWORD *)&a1[v65];
            v67 = v66 + 1;
            if (v66 == -1 || v67 > *(_QWORD *)&a1[*v3])
              break;
            v68 = *(char *)(*(_QWORD *)&a1[*v5] + v66);
            *(_QWORD *)&a1[v65] = v67;
            if (v68 < 0)
            {
              v13 = v64++ >= 9;
              if (!v13)
                continue;
            }
            goto LABEL_131;
          }
          a1[*v4] = 1;
        }
        goto LABEL_84;
      case 0xAu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDOrientedTilePositionIsValid(a1))
          goto LABEL_142;
        goto LABEL_84;
      case 0xBu:
        if (v15 == 2 && PBReaderPlaceMark() && GEOTileCoordinateIsValid(a1))
          goto LABEL_84;
        goto LABEL_142;
      case 0xCu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_142;
        objc_msgSend(a1, "position", 0, 0);
        objc_msgSend(a1, "length");
LABEL_90:
        if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
          goto LABEL_128;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        while (1)
        {
          v46 = *v2;
          v47 = *(_QWORD *)&a1[v46];
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)&a1[*v3])
            break;
          v49 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v47);
          *(_QWORD *)&a1[v46] = v48;
          v45 |= (unint64_t)(v49 & 0x7F) << v43;
          if ((v49 & 0x80) == 0)
            goto LABEL_100;
          v43 += 7;
          v13 = v44++ >= 9;
          if (v13)
          {
            v45 = 0;
            v50 = a1[*v4];
            goto LABEL_102;
          }
        }
        a1[*v4] = 1;
LABEL_100:
        v50 = a1[*v4];
        if (a1[*v4])
          v45 = 0;
LABEL_102:
        v51 = v45 & 7;
        if (v50 || v51 == 4)
        {
LABEL_128:
          v63 = a1[*v4];
          PBReaderRecallMark();
          if (v63)
            goto LABEL_142;
LABEL_84:
          PBReaderRecallMark();
LABEL_85:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_140;
          continue;
        }
        if ((v45 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_141;
          goto LABEL_90;
        }
        if (v51 == 2)
        {
          if (PBReaderPlaceMark())
          {
            while (1)
            {
LABEL_117:
              if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || (v58 = a1[*v4], a1[*v4]))
              {
                PBReaderRecallMark();
                goto LABEL_90;
              }
              while (1)
              {
                v59 = *v2;
                v60 = *(_QWORD *)&a1[v59];
                v61 = v60 + 1;
                if (v60 == -1 || v61 > *(_QWORD *)&a1[*v3])
                  break;
                v62 = *(char *)(*(_QWORD *)&a1[*v5] + v60);
                *(_QWORD *)&a1[v59] = v61;
                if (v62 < 0)
                {
                  v13 = v58++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_117;
              }
              a1[*v4] = 1;
            }
          }
        }
        else if ((v45 & 7) == 0)
        {
          do
          {
            v53 = *v2;
            v54 = *(_QWORD *)&a1[v53];
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
              goto LABEL_90;
            }
            v56 = *(char *)(*(_QWORD *)&a1[*v5] + v54);
            *(_QWORD *)&a1[v53] = v55;
            if ((v56 & 0x80000000) == 0)
              break;
            v57 = v51++;
          }
          while (v57 <= 8);
          goto LABEL_90;
        }
LABEL_141:
        PBReaderRecallMark();
LABEL_142:
        PBReaderRecallMark();
        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_142;
        goto LABEL_85;
    }
  }
}

BOOL GEOPDCameraMetadataIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  _BOOL8 v63;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_109;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_92;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_95;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_109;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_92;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_95;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_109;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_92;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_95;
          }
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark())
            goto LABEL_109;
          objc_msgSend(a1, "position", 0, 0);
          objc_msgSend(a1, "length");
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            while (2)
            {
              v36 = *v2;
              v37 = *(_QWORD *)&a1[v36];
              v38 = v37 + 1;
              if (v37 == -1 || v38 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v39 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v37);
                *(_QWORD *)&a1[v36] = v38;
                v35 |= (unint64_t)(v39 & 0x7F) << v33;
                if (v39 < 0)
                {
                  v33 += 7;
                  v13 = v34++ >= 9;
                  if (v13)
                  {
                    v35 = 0;
                    v40 = *v4;
                    v41 = a1[v40];
                    goto LABEL_60;
                  }
                  continue;
                }
              }
              break;
            }
            v40 = *v4;
            v41 = a1[v40];
            if (a1[v40])
              v35 = 0;
LABEL_60:
            v42 = v35 & 7;
            if (v41)
              v43 = 1;
            else
              v43 = v42 == 4;
            if (!v43)
            {
              switch((v35 >> 3))
              {
                case 1u:
                  if ((v35 & 7) != 0)
                    goto LABEL_108;
                  v47 = 0;
                  do
                  {
                    v48 = *v2;
                    v49 = *(_QWORD *)&a1[v48];
                    v50 = v49 + 1;
                    if (v49 == -1 || v50 > *(_QWORD *)&a1[*v3])
                    {
                      v40 = *v4;
                      goto LABEL_80;
                    }
                    v51 = *(char *)(*(_QWORD *)&a1[*v5] + v49);
                    *(_QWORD *)&a1[v48] = v50;
                    if ((v51 & 0x80000000) == 0)
                      break;
                    v22 = v47++ > 8;
                  }
                  while (!v22);
                  continue;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 6u:
                case 7u:
                case 8u:
                case 9u:
                case 0xAu:
                  if (v42 != 1)
                    goto LABEL_108;
                  v44 = *v2;
                  v45 = *(_QWORD *)&a1[v44];
                  if (v45 > 0xFFFFFFFFFFFFFFF7 || (v46 = v45 + 8, v46 > *(_QWORD *)&a1[*v3]))
LABEL_80:
                    a1[v40] = 1;
                  else
                    *(_QWORD *)&a1[v44] = v46;
                  continue;
                default:
                  if (PBReaderSkipValueWithTag())
                    continue;
LABEL_108:
                  PBReaderRecallMark();
                  goto LABEL_109;
              }
            }
            break;
          }
          v57 = a1[*v4];
          PBReaderRecallMark();
          if (!v57)
            goto LABEL_94;
          goto LABEL_109;
        case 5u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOPDOrientedPositionIsValid(a1))
            goto LABEL_94;
          goto LABEL_109;
        case 6u:
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_109:
              PBReaderRecallMark();
              return 0;
            }
LABEL_98:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v58 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v59 = *v2;
                v60 = *(_QWORD *)&a1[v59];
                v61 = v60 + 1;
                if (v60 == -1 || v61 > *(_QWORD *)&a1[*v3])
                  break;
                v62 = *(char *)(*(_QWORD *)&a1[*v5] + v60);
                *(_QWORD *)&a1[v59] = v61;
                if (v62 < 0)
                {
                  v13 = v58++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_98;
              }
              a1[*v4] = 1;
            }
LABEL_94:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_109;
            while (1)
            {
              v52 = *v2;
              v53 = *(_QWORD *)&a1[v52];
              v54 = v53 + 1;
              if (v53 == -1 || v54 > *(_QWORD *)&a1[*v3])
                break;
              v55 = *(char *)(*(_QWORD *)&a1[*v5] + v53);
              *(_QWORD *)&a1[v52] = v54;
              if (v55 < 0)
              {
                v56 = v15++;
                if (v56 <= 8)
                  continue;
              }
              goto LABEL_95;
            }
LABEL_92:
            a1[*v4] = 1;
          }
LABEL_95:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_107;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_109;
          goto LABEL_95;
      }
    }
  }
LABEL_107:
  v63 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v63;
}

BOOL GEOPDOrientedPositionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
          if (v16 != 1)
            goto LABEL_28;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && (v20 = v19 + 8, v20 <= *(_QWORD *)&a1[*v3]))
            *(_QWORD *)&a1[v18] = v20;
          else
            a1[v14] = 1;
          goto LABEL_25;
        default:
          if (!PBReaderSkipValueWithTag())
          {
LABEL_28:
            v21 = 0;
            goto LABEL_27;
          }
LABEL_25:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_26;
          break;
      }
    }
  }
LABEL_26:
  v21 = a1[*v4] == 0;
LABEL_27:
  PBReaderRecallMark();
  return v21;
}

BOOL GEOPDOrientedTilePositionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  _BOOL8 v47;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_73;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            v19 = v18 + 1;
            if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
              goto LABEL_69;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_70;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_73;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
              goto LABEL_69;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_70;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_73;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_69;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_70;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_73;
          v32 = 0;
          while (1)
          {
            v33 = *v2;
            v34 = *(_QWORD *)&a1[v33];
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
              goto LABEL_69;
            v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
            *(_QWORD *)&a1[v33] = v35;
            if (v36 < 0)
            {
              v21 = v32++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_70;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_73;
          v37 = 0;
          while (1)
          {
            v38 = *v2;
            v39 = *(_QWORD *)&a1[v38];
            v40 = v39 + 1;
            if (v39 == -1 || v40 > *(_QWORD *)&a1[*v3])
              goto LABEL_69;
            v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
            *(_QWORD *)&a1[v38] = v40;
            if (v41 < 0)
            {
              v21 = v37++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_70;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_73;
          v42 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_73:
          v47 = 0;
          goto LABEL_72;
      }
      while (1)
      {
        v43 = *v2;
        v44 = *(_QWORD *)&a1[v43];
        v45 = v44 + 1;
        if (v44 == -1 || v45 > *(_QWORD *)&a1[*v3])
          break;
        v46 = *(char *)(*(_QWORD *)&a1[*v5] + v44);
        *(_QWORD *)&a1[v43] = v45;
        if (v46 < 0)
        {
          v21 = v42++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_70;
      }
LABEL_69:
      a1[*v4] = 1;
LABEL_70:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v47 = a1[*v4] == 0;
LABEL_72:
  PBReaderRecallMark();
  return v47;
}

BOOL GEOPDGroundDataBuildIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  _BOOL8 v77;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_122;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              goto LABEL_95;
            v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0)
            {
              v23 = v18++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_97;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_122;
          v24 = 0;
          while (1)
          {
            v25 = *v2;
            v26 = *(_QWORD *)&a1[v25];
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
              goto LABEL_95;
            v28 = *(char *)(*(_QWORD *)&a1[*v5] + v26);
            *(_QWORD *)&a1[v25] = v27;
            if (v28 < 0)
            {
              v23 = v24++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_97;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_122;
          v29 = 0;
          while (1)
          {
            v30 = *v2;
            v31 = *(_QWORD *)&a1[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&a1[*v3])
              goto LABEL_95;
            v33 = *(char *)(*(_QWORD *)&a1[*v5] + v31);
            *(_QWORD *)&a1[v30] = v32;
            if (v33 < 0)
            {
              v23 = v29++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_97;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_122;
          v34 = 0;
          while (1)
          {
            v35 = *v2;
            v36 = *(_QWORD *)&a1[v35];
            v37 = v36 + 1;
            if (v36 == -1 || v37 > *(_QWORD *)&a1[*v3])
              goto LABEL_95;
            v38 = *(char *)(*(_QWORD *)&a1[*v5] + v36);
            *(_QWORD *)&a1[v35] = v37;
            if (v38 < 0)
            {
              v23 = v34++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_97;
          }
        case 7u:
          if (v16 != 5)
            goto LABEL_122;
          v39 = *v2;
          v40 = *(_QWORD *)&a1[v39];
          if (v40 > 0xFFFFFFFFFFFFFFFBLL)
            goto LABEL_96;
          v41 = v40 + 4;
          if (v41 > *(_QWORD *)&a1[*v3])
            goto LABEL_96;
          *(_QWORD *)&a1[v39] = v41;
          goto LABEL_97;
        case 8u:
          if (v16 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_122;
            while (1)
            {
              v42 = *v2;
              v43 = *(_QWORD *)&a1[v42];
              v44 = v43 + 1;
              if (v43 == -1 || v44 > *(_QWORD *)&a1[*v3])
                goto LABEL_95;
              v45 = *(char *)(*(_QWORD *)&a1[*v5] + v43);
              *(_QWORD *)&a1[v42] = v44;
              if (v45 < 0)
              {
                v46 = v16++;
                if (v46 <= 8)
                  continue;
              }
              goto LABEL_97;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_122;
LABEL_100:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v67 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v68 = *v2;
              v69 = *(_QWORD *)&a1[v68];
              v70 = v69 + 1;
              if (v69 == -1 || v70 > *(_QWORD *)&a1[*v3])
                break;
              v71 = *(char *)(*(_QWORD *)&a1[*v5] + v69);
              *(_QWORD *)&a1[v68] = v70;
              if (v71 < 0)
              {
                v13 = v67++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_100;
            }
            a1[*v4] = 1;
          }
          goto LABEL_119;
        case 9u:
          if ((v8 & 7) != 0)
            goto LABEL_122;
          v47 = 0;
          while (1)
          {
            v48 = *v2;
            v49 = *(_QWORD *)&a1[v48];
            v50 = v49 + 1;
            if (v49 == -1 || v50 > *(_QWORD *)&a1[*v3])
              goto LABEL_95;
            v51 = *(char *)(*(_QWORD *)&a1[*v5] + v49);
            *(_QWORD *)&a1[v48] = v50;
            if (v51 < 0)
            {
              v23 = v47++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_97;
          }
        case 0xAu:
          if (v16 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_122:
              PBReaderRecallMark();
              return 0;
            }
LABEL_110:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v72 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v73 = *v2;
                v74 = *(_QWORD *)&a1[v73];
                v75 = v74 + 1;
                if (v74 == -1 || v75 > *(_QWORD *)&a1[*v3])
                  break;
                v76 = *(char *)(*(_QWORD *)&a1[*v5] + v74);
                *(_QWORD *)&a1[v73] = v75;
                if (v76 < 0)
                {
                  v13 = v72++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_110;
              }
              a1[*v4] = 1;
            }
LABEL_119:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_122;
            while (1)
            {
              v52 = *v2;
              v53 = *(_QWORD *)&a1[v52];
              v54 = v53 + 1;
              if (v53 == -1 || v54 > *(_QWORD *)&a1[*v3])
                break;
              v55 = *(char *)(*(_QWORD *)&a1[*v5] + v53);
              *(_QWORD *)&a1[v52] = v54;
              if (v55 < 0)
              {
                v56 = v16++;
                if (v56 <= 8)
                  continue;
              }
              goto LABEL_97;
            }
LABEL_95:
            v14 = *v4;
LABEL_96:
            a1[v14] = 1;
          }
LABEL_97:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_120;
          break;
        case 0xBu:
          if ((v8 & 7) != 0)
            goto LABEL_122;
          v57 = 0;
          while (1)
          {
            v58 = *v2;
            v59 = *(_QWORD *)&a1[v58];
            v60 = v59 + 1;
            if (v59 == -1 || v60 > *(_QWORD *)&a1[*v3])
              goto LABEL_95;
            v61 = *(char *)(*(_QWORD *)&a1[*v5] + v59);
            *(_QWORD *)&a1[v58] = v60;
            if (v61 < 0)
            {
              v23 = v57++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_97;
          }
        case 0xCu:
          if ((v8 & 7) != 0)
            goto LABEL_122;
          v62 = 0;
          while (1)
          {
            v63 = *v2;
            v64 = *(_QWORD *)&a1[v63];
            v65 = v64 + 1;
            if (v64 == -1 || v65 > *(_QWORD *)&a1[*v3])
              goto LABEL_95;
            v66 = *(char *)(*(_QWORD *)&a1[*v5] + v64);
            *(_QWORD *)&a1[v63] = v65;
            if (v66 < 0)
            {
              v23 = v62++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_97;
          }
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_122;
          goto LABEL_97;
      }
    }
  }
LABEL_120:
  v77 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v77;
}

BOOL GEOPDStorefrontPresentationIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unint64_t v16;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_28;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        goto LABEL_28;
      v16 = v8 >> 3;
      if ((v8 >> 3) == 6)
        break;
      if ((_DWORD)v16 != 5 && (_DWORD)v16 != 4)
        goto LABEL_26;
      if (v14 != 2 || !PBReaderPlaceMark() || !GEOPDStorefrontViewIsValid(a1))
      {
LABEL_29:
        PBReaderRecallMark();
        return 0;
      }
      PBReaderRecallMark();
LABEL_27:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_28;
    }
    if (v14 != 2)
      goto LABEL_29;
LABEL_26:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_28:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOPDStorefrontViewIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 2u:
          if (v14 == 2 && PBReaderPlaceMark() && GEOPDPhotoPositionIsValid(a1))
            goto LABEL_40;
          goto LABEL_46;
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_46;
          v16 = 0;
          break;
        case 5u:
          if (v14 == 2 && PBReaderPlaceMark() && GEOPDOrientedPositionIsValid(a1))
            goto LABEL_40;
          goto LABEL_46;
        case 6u:
        case 7u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOPDGeographicCoordinateIsValid(a1))
            goto LABEL_46;
LABEL_40:
          PBReaderRecallMark();
          continue;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_46:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v17 = *v2;
        v18 = *(_QWORD *)&a1[v17];
        if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
          break;
        v19 = v18 + 1;
        v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
        *(_QWORD *)&a1[v17] = v19;
        if (v20 < 0 && v16++ <= 8)
          continue;
        goto LABEL_41;
      }
      a1[*v4] = 1;
LABEL_41:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v22;
}

BOOL GEOPDGeographicCoordinateIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL8 v22;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      v18 = v8 >> 3;
      if ((v8 >> 3) == 3 || (_DWORD)v18 == 2 || (_DWORD)v18 == 1)
      {
        if (v16 != 1)
          goto LABEL_31;
        v19 = *v2;
        v20 = *(_QWORD *)&a1[v19];
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && (v21 = v20 + 8, v21 <= *(_QWORD *)&a1[*v3]))
          *(_QWORD *)&a1[v19] = v21;
        else
          a1[v14] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_31:
        v22 = 0;
        goto LABEL_30;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
LABEL_30:
  PBReaderRecallMark();
  return v22;
}

BOOL GEOTileCoordinateIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_48;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_48;
      v16 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v16 == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_50;
        v28 = 0;
        while (1)
        {
          v29 = *v2;
          v30 = *(_QWORD *)&a1[v29];
          v31 = v30 + 1;
          if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
            goto LABEL_45;
          v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
          *(_QWORD *)&a1[v29] = v31;
          if (v32 < 0)
          {
            v22 = v28++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_47;
        }
      }
      if ((_DWORD)v16 == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_50;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0)
          {
            v22 = v17++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_47;
        }
LABEL_45:
        a1[*v4] = 1;
        goto LABEL_47;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_50:
        v33 = 0;
        goto LABEL_49;
      }
LABEL_47:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_48;
    }
    if ((v8 & 7) != 0)
      goto LABEL_50;
    v23 = 0;
    while (1)
    {
      v24 = *v2;
      v25 = *(_QWORD *)&a1[v24];
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
        goto LABEL_45;
      v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
      *(_QWORD *)&a1[v24] = v26;
      if (v27 < 0)
      {
        v22 = v23++ > 8;
        if (!v22)
          continue;
      }
      goto LABEL_47;
    }
  }
LABEL_48:
  v33 = a1[*v4] == 0;
LABEL_49:
  PBReaderRecallMark();
  return v33;
}

void sub_1887176F0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 120));
  _Unwind_Resume(a1);
}

BOOL GEOLocalizationCapabilitiesReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  void *v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  _BOOL8 v42;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        v17 = v10 & 7;
        if (v16 || v17 == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 44) |= 1u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v28 |= (unint64_t)(v32 & 0x7F) << v26;
            if ((v32 & 0x80) == 0)
              goto LABEL_46;
            v26 += 7;
            v15 = v27++ >= 9;
            if (v15)
            {
              v28 = 0;
              goto LABEL_48;
            }
          }
          v3[*v6] = 1;
LABEL_46:
          if (v3[*v6])
            v28 = 0;
LABEL_48:
          *(_BYTE *)(a1 + 40) = v28 != 0;
        }
        else if ((v10 >> 3) == 1)
        {
          if (v17 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_61;
            while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5] && !v3[*v6])
            {
              v19 = 0;
              v20 = 0;
              v21 = 0;
              while (1)
              {
                v22 = *v4;
                v23 = *(_QWORD *)&v3[v22];
                v24 = v23 + 1;
                if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
                  break;
                v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
                *(_QWORD *)&v3[v22] = v24;
                v21 |= (unint64_t)(v25 & 0x7F) << v19;
                if (v25 < 0)
                {
                  v19 += 7;
                  v15 = v20++ >= 9;
                  if (!v15)
                    continue;
                }
                goto LABEL_33;
              }
              v3[*v6] = 1;
LABEL_33:
              PBRepeatedInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v35 = 0;
            v36 = 0;
            v37 = 0;
            while (1)
            {
              v38 = *v4;
              v39 = *(_QWORD *)&v3[v38];
              v40 = v39 + 1;
              if (v39 == -1 || v40 > *(_QWORD *)&v3[*v5])
                break;
              v41 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v39);
              *(_QWORD *)&v3[v38] = v40;
              v37 |= (unint64_t)(v41 & 0x7F) << v35;
              if (v41 < 0)
              {
                v35 += 7;
                v15 = v36++ >= 9;
                if (!v15)
                  continue;
              }
              goto LABEL_58;
            }
            v3[*v6] = 1;
LABEL_58:
            PBRepeatedInt32Add();
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v33 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v34 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v33;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_61;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v42 = v3[*v6] == 0;
  }
  else
  {
LABEL_61:
    v42 = 0;
  }
  objc_sync_exit(v3);

  return v42;
}

void sub_188717B1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDPlaceIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  _BOOL8 v73;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_129;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_130;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_129;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_130;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v33 = 0;
          while (1)
          {
            v34 = *v2;
            v35 = *(_QWORD *)&a1[v34];
            v36 = v35 + 1;
            if (v35 == -1 || v36 > *(_QWORD *)&a1[*v3])
              goto LABEL_129;
            v37 = *(char *)(*(_QWORD *)&a1[*v5] + v35);
            *(_QWORD *)&a1[v34] = v36;
            if (v37 < 0)
            {
              v22 = v33++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_130;
          }
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDComponentIsValid(a1))
            goto LABEL_133;
          goto LABEL_117;
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v38 = 0;
          while (1)
          {
            v39 = *v2;
            v40 = *(_QWORD *)&a1[v39];
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)&a1[*v3])
              goto LABEL_129;
            v42 = *(char *)(*(_QWORD *)&a1[*v5] + v40);
            *(_QWORD *)&a1[v39] = v41;
            if (v42 < 0)
            {
              v22 = v38++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_130;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v43 = 0;
          while (1)
          {
            v44 = *v2;
            v45 = *(_QWORD *)&a1[v44];
            v46 = v45 + 1;
            if (v45 == -1 || v46 > *(_QWORD *)&a1[*v3])
              goto LABEL_129;
            v47 = *(char *)(*(_QWORD *)&a1[*v5] + v45);
            *(_QWORD *)&a1[v44] = v46;
            if (v47 < 0)
            {
              v22 = v43++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_130;
          }
        case 7u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1))
            goto LABEL_133;
          goto LABEL_117;
        case 8u:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v48 = 0;
          while (1)
          {
            v49 = *v2;
            v50 = *(_QWORD *)&a1[v49];
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)&a1[*v3])
              goto LABEL_129;
            v52 = *(char *)(*(_QWORD *)&a1[*v5] + v50);
            *(_QWORD *)&a1[v49] = v51;
            if (v52 < 0)
            {
              v22 = v48++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_130;
          }
        case 9u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlacecardLayoutDataIsValid(a1))
            goto LABEL_133;
LABEL_117:
          PBReaderRecallMark();
          continue;
        case 0xAu:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v53 = 0;
          while (1)
          {
            v54 = *v2;
            v55 = *(_QWORD *)&a1[v54];
            v56 = v55 + 1;
            if (v55 == -1 || v56 > *(_QWORD *)&a1[*v3])
              goto LABEL_129;
            v57 = *(char *)(*(_QWORD *)&a1[*v5] + v55);
            *(_QWORD *)&a1[v54] = v56;
            if (v57 < 0)
            {
              v22 = v53++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_130;
          }
        case 0xBu:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v58 = 0;
          while (1)
          {
            v59 = *v2;
            v60 = *(_QWORD *)&a1[v59];
            v61 = v60 + 1;
            if (v60 == -1 || v61 > *(_QWORD *)&a1[*v3])
              goto LABEL_129;
            v62 = *(char *)(*(_QWORD *)&a1[*v5] + v60);
            *(_QWORD *)&a1[v59] = v61;
            if (v62 < 0)
            {
              v22 = v58++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_130;
          }
        case 0xCu:
          if (v15 != 2)
            goto LABEL_133;
LABEL_119:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_133:
          PBReaderRecallMark();
          return 0;
        case 0xDu:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v63 = 0;
          while (1)
          {
            v64 = *v2;
            v65 = *(_QWORD *)&a1[v64];
            v66 = v65 + 1;
            if (v65 == -1 || v66 > *(_QWORD *)&a1[*v3])
              goto LABEL_129;
            v67 = *(char *)(*(_QWORD *)&a1[*v5] + v65);
            *(_QWORD *)&a1[v64] = v66;
            if (v67 < 0)
            {
              v22 = v63++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_130;
          }
        default:
          switch((v8 >> 3))
          {
            case 0xC8u:
              if ((v8 & 7) != 0)
                goto LABEL_133;
              v23 = 0;
              while (1)
              {
                v24 = *v2;
                v25 = *(_QWORD *)&a1[v24];
                v26 = v25 + 1;
                if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
                  goto LABEL_129;
                v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
                *(_QWORD *)&a1[v24] = v26;
                if (v27 < 0)
                {
                  v22 = v23++ > 8;
                  if (!v22)
                    continue;
                }
                goto LABEL_130;
              }
            case 0xC9u:
              if (v15 == 2 && PBReaderPlaceMark() && GEOMapItemInitialRequestDataIsValid(a1))
                goto LABEL_117;
              goto LABEL_133;
            case 0xCAu:
              if (v15 == 2)
                goto LABEL_119;
              goto LABEL_133;
            case 0xCBu:
              if ((v8 & 7) != 0)
                goto LABEL_133;
              v68 = 0;
              break;
            default:
              goto LABEL_119;
          }
          break;
      }
      while (1)
      {
        v69 = *v2;
        v70 = *(_QWORD *)&a1[v69];
        v71 = v70 + 1;
        if (v70 == -1 || v71 > *(_QWORD *)&a1[*v3])
          break;
        v72 = *(char *)(*(_QWORD *)&a1[*v5] + v70);
        *(_QWORD *)&a1[v69] = v71;
        if (v72 < 0)
        {
          v22 = v68++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_130;
      }
LABEL_129:
      a1[*v4] = 1;
LABEL_130:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v73 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v73;
}

BOOL GEOPDComponentIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  int v59;
  int v60;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  int v83;
  _BOOL8 v84;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
LABEL_151:
    v84 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v84;
  }
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (a1[*v4])
      goto LABEL_151;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *v2;
      v10 = *(_QWORD *)&a1[v9];
      v11 = v10 + 1;
      if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
        break;
      v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
      *(_QWORD *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0)
        goto LABEL_12;
      v6 += 7;
      v13 = v7++ >= 9;
      if (v13)
      {
        v8 = 0;
        v14 = *v4;
        v15 = a1[v14];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v14 = *v4;
    v15 = a1[v14];
    if (a1[v14])
      v8 = 0;
LABEL_14:
    v16 = v8 & 7;
    if (v15 || v16 == 4)
      goto LABEL_151;
    switch((v8 >> 3))
    {
      case 1u:
        if ((v8 & 7) != 0)
          goto LABEL_154;
        v21 = 0;
        while (1)
        {
          v22 = *v2;
          v23 = *(_QWORD *)&a1[v22];
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)&a1[*v3])
            goto LABEL_146;
          v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
          *(_QWORD *)&a1[v22] = v24;
          if (v25 < 0)
          {
            v26 = v21++ > 8;
            if (!v26)
              continue;
          }
          goto LABEL_150;
        }
      case 2u:
        if ((v8 & 7) != 0)
          goto LABEL_154;
        v27 = 0;
        while (1)
        {
          v28 = *v2;
          v29 = *(_QWORD *)&a1[v28];
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
            goto LABEL_146;
          v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
          *(_QWORD *)&a1[v28] = v30;
          if (v31 < 0)
          {
            v26 = v27++ > 8;
            if (!v26)
              continue;
          }
          goto LABEL_150;
        }
      case 3u:
        goto LABEL_74;
      case 4u:
        if ((v8 & 7) != 0)
          goto LABEL_154;
        v32 = 0;
        while (1)
        {
          v33 = *v2;
          v34 = *(_QWORD *)&a1[v33];
          v35 = v34 + 1;
          if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
            goto LABEL_146;
          v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
          *(_QWORD *)&a1[v33] = v35;
          if (v36 < 0)
          {
            v26 = v32++ > 8;
            if (!v26)
              continue;
          }
          goto LABEL_150;
        }
      case 5u:
        if ((v8 & 7) != 0)
          goto LABEL_154;
        v37 = 0;
        while (1)
        {
          v38 = *v2;
          v39 = *(_QWORD *)&a1[v38];
          v40 = v39 + 1;
          if (v39 == -1 || v40 > *(_QWORD *)&a1[*v3])
            goto LABEL_146;
          v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
          *(_QWORD *)&a1[v38] = v40;
          if (v41 < 0)
          {
            v26 = v37++ > 8;
            if (!v26)
              continue;
          }
          goto LABEL_150;
        }
      case 6u:
        if ((v8 & 7) != 0)
          goto LABEL_154;
        v42 = 0;
        while (1)
        {
          v43 = *v2;
          v44 = *(_QWORD *)&a1[v43];
          v45 = v44 + 1;
          if (v44 == -1 || v45 > *(_QWORD *)&a1[*v3])
            goto LABEL_146;
          v46 = *(char *)(*(_QWORD *)&a1[*v5] + v44);
          *(_QWORD *)&a1[v43] = v45;
          if (v46 < 0)
          {
            v26 = v42++ > 8;
            if (!v26)
              continue;
          }
          goto LABEL_150;
        }
      case 7u:
      case 0xEu:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDAttributionIsValid(a1))
          goto LABEL_154;
        goto LABEL_149;
      case 8u:
        if (v16 == 2 && PBReaderPlaceMark() && GEOPDComponentValueIsValid(a1))
          goto LABEL_149;
        goto LABEL_154;
      case 9u:
        if (v16 == 2)
          goto LABEL_74;
        goto LABEL_154;
      case 0xAu:
        if ((v8 & 7) != 0)
          goto LABEL_154;
        v47 = 0;
        while (1)
        {
          v48 = *v2;
          v49 = *(_QWORD *)&a1[v48];
          v50 = v49 + 1;
          if (v49 == -1 || v50 > *(_QWORD *)&a1[*v3])
            goto LABEL_146;
          v51 = *(char *)(*(_QWORD *)&a1[*v5] + v49);
          *(_QWORD *)&a1[v48] = v50;
          if (v51 < 0)
          {
            v26 = v47++ > 8;
            if (!v26)
              continue;
          }
          goto LABEL_150;
        }
      case 0xBu:
        if (v16 != 2 || !PBReaderPlaceMark())
          goto LABEL_154;
        objc_msgSend(a1, "position", 0, 0);
        objc_msgSend(a1, "length");
LABEL_87:
        if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
          goto LABEL_148;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        while (1)
        {
          v55 = *v2;
          v56 = *(_QWORD *)&a1[v55];
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)&a1[*v3])
            break;
          v58 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v56);
          *(_QWORD *)&a1[v55] = v57;
          v54 |= (unint64_t)(v58 & 0x7F) << v52;
          if ((v58 & 0x80) == 0)
            goto LABEL_97;
          v52 += 7;
          v13 = v53++ >= 9;
          if (v13)
          {
            v54 = 0;
            v59 = a1[*v4];
            goto LABEL_99;
          }
        }
        a1[*v4] = 1;
LABEL_97:
        v59 = a1[*v4];
        if (a1[*v4])
          v54 = 0;
LABEL_99:
        v60 = v54 & 7;
        if (v59 || v60 == 4)
        {
LABEL_148:
          v83 = a1[*v4];
          PBReaderRecallMark();
          if (v83)
            goto LABEL_154;
LABEL_149:
          PBReaderRecallMark();
LABEL_150:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_151;
          continue;
        }
        v62 = v54 >> 3;
        if ((v54 >> 3) == 3)
        {
          if (v60 != 2)
            goto LABEL_153;
          goto LABEL_117;
        }
        if ((_DWORD)v62 == 2)
        {
          if (v60 != 2)
            goto LABEL_153;
LABEL_117:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_153;
          goto LABEL_87;
        }
        if ((_DWORD)v62 != 1)
        {
          if (!PBReaderSkipValueWithTag())
            goto LABEL_153;
          goto LABEL_87;
        }
        if ((v54 & 7) == 0)
        {
          v63 = 0;
          do
          {
            v64 = *v2;
            v65 = *(_QWORD *)&a1[v64];
            v66 = v65 + 1;
            if (v65 == -1 || v66 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
              goto LABEL_87;
            }
            v67 = *(char *)(*(_QWORD *)&a1[*v5] + v65);
            *(_QWORD *)&a1[v64] = v66;
            if ((v67 & 0x80000000) == 0)
              break;
            v26 = v63++ > 8;
          }
          while (!v26);
          goto LABEL_87;
        }
LABEL_153:
        PBReaderRecallMark();
LABEL_154:
        PBReaderRecallMark();
        return 0;
      case 0xCu:
        if ((v8 & 7) != 0)
          goto LABEL_154;
        v68 = 0;
        while (1)
        {
          v69 = *v2;
          v70 = *(_QWORD *)&a1[v69];
          v71 = v70 + 1;
          if (v70 == -1 || v71 > *(_QWORD *)&a1[*v3])
            goto LABEL_146;
          v72 = *(char *)(*(_QWORD *)&a1[*v5] + v70);
          *(_QWORD *)&a1[v69] = v71;
          if (v72 < 0)
          {
            v26 = v68++ > 8;
            if (!v26)
              continue;
          }
          goto LABEL_150;
        }
      case 0xDu:
        if ((v8 & 7) != 0)
          goto LABEL_154;
        v73 = 0;
        while (1)
        {
          v74 = *v2;
          v75 = *(_QWORD *)&a1[v74];
          v76 = v75 + 1;
          if (v75 == -1 || v76 > *(_QWORD *)&a1[*v3])
            goto LABEL_146;
          v77 = *(char *)(*(_QWORD *)&a1[*v5] + v75);
          *(_QWORD *)&a1[v74] = v76;
          if (v77 < 0)
          {
            v26 = v73++ > 8;
            if (!v26)
              continue;
          }
          goto LABEL_150;
        }
      case 0xFu:
        if ((v8 & 7) != 0)
          goto LABEL_154;
        v78 = 0;
        while (1)
        {
          v79 = *v2;
          v80 = *(_QWORD *)&a1[v79];
          v81 = v80 + 1;
          if (v80 == -1 || v81 > *(_QWORD *)&a1[*v3])
            break;
          v82 = *(char *)(*(_QWORD *)&a1[*v5] + v80);
          *(_QWORD *)&a1[v79] = v81;
          if (v82 < 0)
          {
            v26 = v78++ > 8;
            if (!v26)
              continue;
          }
          goto LABEL_150;
        }
LABEL_146:
        v14 = *v4;
        goto LABEL_147;
      default:
        if ((v8 >> 3) == 2000)
        {
          if (v16 != 1)
            goto LABEL_154;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7 || (v20 = v19 + 8, v20 > *(_QWORD *)&a1[*v3]))
LABEL_147:
            a1[v14] = 1;
          else
            *(_QWORD *)&a1[v18] = v20;
        }
        else
        {
LABEL_74:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_154;
        }
        goto LABEL_150;
    }
  }
}

BOOL GEOPDComponentValueIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  int v24;
  int v25;
  char v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  int v44;
  int v45;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  BOOL v52;
  int v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  int v62;
  int v63;
  BOOL v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  int v75;
  int v76;
  int v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  int v86;
  int v87;
  BOOL v88;
  char v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  int v96;
  int v97;
  BOOL v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  char v109;
  unsigned int v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  int v116;
  int v117;
  unint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  int v130;
  char v131;
  unsigned int v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  int v138;
  int v139;
  BOOL v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  char v146;
  unsigned int v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char v152;
  int v153;
  int v154;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  int v170;
  int v171;
  char v172;
  unsigned int v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char v178;
  int v179;
  int v180;
  BOOL v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  int v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  int v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  int v206;
  char v207;
  unsigned int v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  int v214;
  int v215;
  char v217;
  unsigned int v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  int v224;
  int v225;
  char v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  char v233;
  int v234;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  int v240;
  char v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char v247;
  int v248;
  int v249;
  unint64_t v251;
  char v252;
  unsigned int v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  char v258;
  int v259;
  int v260;
  char v262;
  unsigned int v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  char v268;
  int v269;
  int v270;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  int v276;
  char v277;
  unsigned int v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  char v283;
  int v284;
  int v285;
  BOOL v286;
  int v287;
  char v288;
  unsigned int v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  char v294;
  int v295;
  int v296;
  BOOL v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  int v302;
  char v303;
  unsigned int v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  char v309;
  int v310;
  int v311;
  unint64_t v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  int v318;
  char v319;
  unsigned int v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  char v325;
  int v326;
  int v327;
  unsigned int v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  int v333;
  int v334;
  char v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  char v341;
  uint64_t v342;
  char v344;
  unsigned int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  char v350;
  uint64_t v351;
  char v353;
  unsigned int v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  char v359;
  int v360;
  int v361;
  char v363;
  unsigned int v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  char v369;
  int v370;
  int v371;
  int v373;
  char v374;
  unsigned int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  char v380;
  uint64_t v381;
  int v383;
  int v384;
  char v385;
  unsigned int v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  char v391;
  int v392;
  int v393;
  BOOL v394;
  char v395;
  unsigned int v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  char v401;
  int v402;
  int v403;
  int v405;
  char v406;
  unsigned int v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  char v412;
  int v413;
  int v414;
  BOOL v415;
  char v416;
  unsigned int v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  char v422;
  int v423;
  int v424;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t v429;
  int v430;
  unsigned int v431;
  unsigned int v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  int v436;
  int v437;
  char v438;
  unsigned int v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  char v444;
  int v445;
  int v446;
  BOOL v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  int v452;
  unsigned int v453;
  unsigned int v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  int v458;
  char v459;
  unsigned int v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  char v465;
  uint64_t v466;
  int v467;
  int v468;
  BOOL v469;
  uint64_t v470;
  unint64_t v471;
  unint64_t v472;
  char v473;
  unsigned int v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  char v479;
  int v480;
  int v481;
  int v483;
  char v484;
  unsigned int v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  char v490;
  int v491;
  int v492;
  char v494;
  unsigned int v495;
  unint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  char v500;
  int v501;
  int v502;
  BOOL v503;
  char v504;
  unsigned int v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  char v510;
  int v511;
  int v512;
  BOOL v513;
  unsigned int v514;
  uint64_t v515;
  uint64_t v516;
  unint64_t v517;
  int v518;
  unsigned int v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  int v523;
  char v524;
  unsigned int v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  char v530;
  int v531;
  int v532;
  BOOL v533;
  char v534;
  unsigned int v535;
  unint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  char v540;
  int v541;
  int v542;
  BOOL v543;
  unint64_t v544;
  char v545;
  unsigned int v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  char v551;
  uint64_t v552;
  int v553;
  int v554;
  BOOL v555;
  uint64_t v556;
  unint64_t v557;
  unint64_t v558;
  char v559;
  unsigned int v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  char v565;
  int v566;
  BOOL v567;
  unsigned int v568;
  uint64_t v569;
  uint64_t v570;
  unint64_t v571;
  int v572;
  unsigned int v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  int v577;
  char v578;
  unsigned int v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  unint64_t v583;
  char v584;
  int v585;
  int v586;
  BOOL v587;
  unsigned int v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t v591;
  int v592;
  char v593;
  unsigned int v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  char v599;
  int v600;
  BOOL v601;
  unint64_t v602;
  unsigned int v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  int v607;
  unsigned int v608;
  uint64_t v609;
  uint64_t v610;
  unint64_t v611;
  int v612;
  unsigned int v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t v616;
  int v617;
  char v618;
  unsigned int v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  unint64_t v623;
  char v624;
  int v625;
  int v626;
  BOOL v627;
  unsigned int v628;
  uint64_t v629;
  uint64_t v630;
  unint64_t v631;
  int v632;
  char v633;
  unsigned int v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  unint64_t v638;
  char v639;
  uint64_t v640;
  int v641;
  int v642;
  BOOL v643;
  uint64_t v644;
  unint64_t v645;
  unint64_t v646;
  int v647;
  char v648;
  unsigned int v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  char v654;
  int v655;
  int v656;
  BOOL v657;
  char v658;
  unsigned int v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t v662;
  unint64_t v663;
  char v664;
  int v665;
  int v666;
  char v668;
  unsigned int v669;
  unint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  char v674;
  int v675;
  int v676;
  unsigned int v678;
  uint64_t v679;
  uint64_t v680;
  unint64_t v681;
  int v682;
  unsigned int v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t v686;
  int v687;
  int v688;
  char v689;
  unsigned int v690;
  unint64_t v691;
  uint64_t v692;
  uint64_t v693;
  unint64_t v694;
  char v695;
  int v696;
  int v697;
  char v699;
  unsigned int v700;
  unint64_t v701;
  uint64_t v702;
  uint64_t v703;
  unint64_t v704;
  char v705;
  int v706;
  int v707;
  char v709;
  unsigned int v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  char v715;
  int v716;
  unsigned int v718;
  uint64_t v719;
  uint64_t v720;
  unint64_t v721;
  int v722;
  unsigned int v723;
  uint64_t v724;
  uint64_t v725;
  unint64_t v726;
  int v727;
  int v728;
  unsigned int v729;
  uint64_t v730;
  uint64_t v731;
  unint64_t v732;
  int v733;
  int v734;
  int v735;
  char v736;
  unsigned int v737;
  unint64_t v738;
  uint64_t v739;
  uint64_t v740;
  unint64_t v741;
  char v742;
  int v743;
  int v744;
  BOOL v745;
  char v746;
  unsigned int v747;
  unint64_t v748;
  uint64_t v749;
  uint64_t v750;
  unint64_t v751;
  char v752;
  int v753;
  int v754;
  unsigned int v756;
  uint64_t v757;
  uint64_t v758;
  unint64_t v759;
  int v760;
  char v761;
  unsigned int v762;
  unint64_t v763;
  uint64_t v764;
  uint64_t v765;
  unint64_t v766;
  char v767;
  int v768;
  int v769;
  BOOL v770;
  int v771;
  unsigned int v772;
  uint64_t v773;
  uint64_t v774;
  unint64_t v775;
  int v776;
  char v777;
  unsigned int v778;
  unint64_t v779;
  uint64_t v780;
  uint64_t v781;
  unint64_t v782;
  char v783;
  int v784;
  int v785;
  BOOL v786;
  char v787;
  unsigned int v788;
  unint64_t v789;
  uint64_t v790;
  uint64_t v791;
  unint64_t v792;
  char v793;
  int v794;
  int v795;
  unint64_t v797;
  int v798;
  char v799;
  unsigned int v800;
  unint64_t v801;
  uint64_t v802;
  uint64_t v803;
  unint64_t v804;
  char v805;
  int v806;
  int v807;
  BOOL v808;
  unint64_t v809;
  char v810;
  unsigned int v811;
  unint64_t v812;
  uint64_t v813;
  uint64_t v814;
  unint64_t v815;
  char v816;
  int v817;
  int v818;
  BOOL v819;
  unint64_t v820;
  uint64_t v821;
  uint64_t v822;
  unint64_t v823;
  int v824;
  unsigned int v825;
  unsigned int v826;
  uint64_t v827;
  uint64_t v828;
  unint64_t v829;
  int v830;
  unsigned int v831;
  uint64_t v832;
  uint64_t v833;
  unint64_t v834;
  int v835;
  char v836;
  unsigned int v837;
  unint64_t v838;
  uint64_t v839;
  uint64_t v840;
  unint64_t v841;
  char v842;
  int v843;
  int v844;
  BOOL v845;
  char v846;
  unsigned int v847;
  unint64_t v848;
  uint64_t v849;
  uint64_t v850;
  unint64_t v851;
  char v852;
  int v853;
  int v854;
  BOOL v855;
  char v856;
  unsigned int v857;
  unint64_t v858;
  uint64_t v859;
  uint64_t v860;
  unint64_t v861;
  char v862;
  int v863;
  int v864;
  BOOL v865;
  char v866;
  unsigned int v867;
  unint64_t v868;
  uint64_t v869;
  uint64_t v870;
  unint64_t v871;
  char v872;
  int v873;
  int v874;
  unsigned int v876;
  uint64_t v877;
  uint64_t v878;
  unint64_t v879;
  int v880;
  uint64_t v881;
  uint64_t v882;
  unint64_t v883;
  int v884;
  unsigned int v885;
  int v886;
  unsigned int v887;
  uint64_t v888;
  uint64_t v889;
  unint64_t v890;
  int v891;
  int v892;
  char v893;
  unsigned int v894;
  unint64_t v895;
  uint64_t v896;
  uint64_t v897;
  unint64_t v898;
  char v899;
  int v900;
  int v901;
  BOOL v902;
  char v903;
  unsigned int v904;
  unint64_t v905;
  uint64_t v906;
  uint64_t v907;
  unint64_t v908;
  char v909;
  int v910;
  int v911;
  int v913;
  char v914;
  unsigned int v915;
  unint64_t v916;
  uint64_t v917;
  uint64_t v918;
  unint64_t v919;
  char v920;
  int v921;
  int v922;
  BOOL v923;
  char v924;
  unsigned int v925;
  unint64_t v926;
  uint64_t v927;
  uint64_t v928;
  unint64_t v929;
  char v930;
  int v931;
  int v932;
  BOOL v933;
  unsigned int v934;
  uint64_t v935;
  uint64_t v936;
  unint64_t v937;
  int v938;
  char v939;
  unsigned int v940;
  unint64_t v941;
  uint64_t v942;
  uint64_t v943;
  unint64_t v944;
  char v945;
  int v946;
  int v947;
  BOOL v948;
  char v949;
  unsigned int v950;
  unint64_t v951;
  uint64_t v952;
  uint64_t v953;
  unint64_t v954;
  char v955;
  int v956;
  int v957;
  unint64_t v959;
  uint64_t v960;
  uint64_t v961;
  unint64_t v962;
  int v963;
  unsigned int v964;
  unsigned int v965;
  uint64_t v966;
  uint64_t v967;
  unint64_t v968;
  int v969;
  char v970;
  unsigned int v971;
  unint64_t v972;
  uint64_t v973;
  uint64_t v974;
  unint64_t v975;
  char v976;
  int v977;
  int v978;
  unsigned int v980;
  uint64_t v981;
  uint64_t v982;
  unint64_t v983;
  int v984;
  unsigned int v985;
  uint64_t v986;
  uint64_t v987;
  unint64_t v988;
  int v989;
  unsigned int v990;
  uint64_t v991;
  uint64_t v992;
  unint64_t v993;
  int v994;
  unsigned int v995;
  uint64_t v996;
  uint64_t v997;
  unint64_t v998;
  int v999;
  uint64_t v1000;
  uint64_t v1001;
  unint64_t v1002;
  int v1003;
  unsigned int v1004;
  uint64_t v1005;
  uint64_t v1006;
  unint64_t v1007;
  int v1008;
  unsigned int v1009;
  uint64_t v1010;
  uint64_t v1011;
  unint64_t v1012;
  int v1013;
  unsigned int v1014;
  unsigned int v1015;
  uint64_t v1016;
  uint64_t v1017;
  unint64_t v1018;
  int v1019;
  unsigned int v1020;
  uint64_t v1021;
  uint64_t v1022;
  unint64_t v1023;
  int v1024;
  unsigned int v1025;
  uint64_t v1026;
  uint64_t v1027;
  unint64_t v1028;
  int v1029;
  unsigned int v1030;
  uint64_t v1031;
  uint64_t v1032;
  unint64_t v1033;
  int v1034;
  int v1035;
  char v1036;
  unsigned int v1037;
  unint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  unint64_t v1041;
  char v1042;
  int v1043;
  int v1044;
  BOOL v1045;
  char v1046;
  unsigned int v1047;
  unint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  unint64_t v1051;
  char v1052;
  int v1053;
  int v1054;
  BOOL v1055;
  unint64_t v1056;
  unsigned int v1057;
  uint64_t v1058;
  uint64_t v1059;
  unint64_t v1060;
  int v1061;
  char v1062;
  unsigned int v1063;
  unint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  unint64_t v1067;
  char v1068;
  int v1069;
  int v1070;
  BOOL v1071;
  char v1072;
  unsigned int v1073;
  unint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  unint64_t v1077;
  char v1078;
  int v1079;
  int v1080;
  BOOL v1081;
  unsigned int v1082;
  uint64_t v1083;
  uint64_t v1084;
  unint64_t v1085;
  int v1086;
  char v1087;
  unsigned int v1088;
  unint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  unint64_t v1092;
  char v1093;
  int v1094;
  int v1095;
  BOOL v1096;
  char v1097;
  unsigned int v1098;
  unint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  unint64_t v1102;
  char v1103;
  int v1104;
  int v1105;
  BOOL v1106;
  char v1107;
  unsigned int v1108;
  unint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  unint64_t v1112;
  char v1113;
  int v1114;
  int v1115;
  unsigned int v1117;
  uint64_t v1118;
  uint64_t v1119;
  unint64_t v1120;
  int v1121;
  int v1122;
  char v1123;
  unsigned int v1124;
  unint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  unint64_t v1128;
  char v1129;
  uint64_t v1130;
  int v1131;
  int v1132;
  BOOL v1133;
  uint64_t v1134;
  unint64_t v1135;
  unint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  unint64_t v1139;
  int v1140;
  unsigned int v1141;
  unint64_t v1142;
  unsigned int v1143;
  uint64_t v1144;
  uint64_t v1145;
  unint64_t v1146;
  int v1147;
  char v1148;
  unsigned int v1149;
  unint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  unint64_t v1153;
  char v1154;
  int v1155;
  int v1156;
  BOOL v1157;
  unint64_t v1158;
  char v1159;
  unsigned int v1160;
  unint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  unint64_t v1164;
  char v1165;
  int v1166;
  int v1167;
  unsigned int v1169;
  uint64_t v1170;
  uint64_t v1171;
  unint64_t v1172;
  int v1173;
  char v1174;
  unsigned int v1175;
  unint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  unint64_t v1179;
  char v1180;
  int v1181;
  unsigned int v1183;
  uint64_t v1184;
  uint64_t v1185;
  unint64_t v1186;
  int v1187;
  unsigned int v1188;
  uint64_t v1189;
  uint64_t v1190;
  unint64_t v1191;
  int v1192;
  unsigned int v1193;
  uint64_t v1194;
  uint64_t v1195;
  unint64_t v1196;
  int v1197;
  int v1198;
  int v1199;
  char v1200;
  unsigned int v1201;
  unint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  unint64_t v1205;
  char v1206;
  uint64_t v1207;
  int v1208;
  int v1209;
  BOOL v1210;
  unint64_t v1211;
  uint64_t v1212;
  unint64_t v1213;
  unint64_t v1214;
  char v1215;
  unsigned int v1216;
  unint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  unint64_t v1220;
  char v1221;
  int v1222;
  int v1223;
  BOOL v1224;
  char v1225;
  unsigned int v1226;
  unint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  unint64_t v1230;
  char v1231;
  int v1232;
  int v1233;
  BOOL v1234;
  char v1235;
  unsigned int v1236;
  unint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  unint64_t v1240;
  char v1241;
  int v1242;
  int v1243;
  char v1245;
  unsigned int v1246;
  unint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  unint64_t v1250;
  char v1251;
  int v1252;
  int v1253;
  unsigned int v1255;
  uint64_t v1256;
  uint64_t v1257;
  unint64_t v1258;
  int v1259;
  char v1260;
  unsigned int v1261;
  unint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  unint64_t v1265;
  char v1266;
  int v1267;
  int v1268;
  BOOL v1269;
  char v1270;
  unsigned int v1271;
  unint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  unint64_t v1275;
  char v1276;
  int v1277;
  int v1278;
  BOOL v1279;
  int v1280;
  char v1281;
  unsigned int v1282;
  unint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  unint64_t v1286;
  char v1287;
  int v1288;
  int v1289;
  BOOL v1290;
  uint64_t v1291;
  uint64_t v1292;
  unint64_t v1293;
  int v1294;
  unsigned int v1295;
  unsigned int v1296;
  uint64_t v1297;
  uint64_t v1298;
  unint64_t v1299;
  int v1300;
  char v1301;
  unsigned int v1302;
  unint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  unint64_t v1306;
  char v1307;
  int v1308;
  int v1309;
  BOOL v1310;
  unsigned int v1311;
  uint64_t v1312;
  uint64_t v1313;
  unint64_t v1314;
  int v1315;
  int v1316;
  unsigned int v1317;
  uint64_t v1318;
  uint64_t v1319;
  unint64_t v1320;
  int v1321;
  int v1322;
  int v1323;
  int v1324;
  char v1325;
  unsigned int v1326;
  unint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  unint64_t v1330;
  char v1331;
  int v1332;
  int v1333;
  BOOL v1334;
  char v1335;
  unsigned int v1336;
  unint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  unint64_t v1340;
  char v1341;
  int v1342;
  int v1343;
  unsigned int v1345;
  uint64_t v1346;
  uint64_t v1347;
  unint64_t v1348;
  int v1349;
  int v1350;
  int v1351;
  char v1352;
  unsigned int v1353;
  unint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  unint64_t v1357;
  char v1358;
  int v1359;
  int v1360;
  BOOL v1361;
  unint64_t v1362;
  unsigned int v1363;
  uint64_t v1364;
  uint64_t v1365;
  unint64_t v1366;
  int v1367;
  unsigned int v1368;
  uint64_t v1369;
  uint64_t v1370;
  unint64_t v1371;
  int v1372;
  int v1373;
  char v1374;
  unsigned int v1375;
  unint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  unint64_t v1379;
  char v1380;
  int v1381;
  int v1382;
  BOOL v1383;
  unint64_t v1384;
  char v1385;
  unsigned int v1386;
  unint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  unint64_t v1390;
  char v1391;
  int v1392;
  int v1393;
  unsigned int v1395;
  uint64_t v1396;
  uint64_t v1397;
  unint64_t v1398;
  int v1399;
  unsigned int v1400;
  uint64_t v1401;
  uint64_t v1402;
  unint64_t v1403;
  int v1404;
  char v1405;
  unsigned int v1406;
  unint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  unint64_t v1410;
  char v1411;
  int v1412;
  int v1413;
  int v1415;
  unsigned int v1416;
  uint64_t v1417;
  uint64_t v1418;
  unint64_t v1419;
  int v1420;
  int v1421;
  char v1422;
  unsigned int v1423;
  unint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  unint64_t v1427;
  char v1428;
  int v1429;
  int v1430;
  BOOL v1431;
  char v1432;
  unsigned int v1433;
  unint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  unint64_t v1437;
  char v1438;
  int v1439;
  int v1440;
  BOOL v1441;
  char v1442;
  unsigned int v1443;
  unint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  unint64_t v1447;
  char v1448;
  int v1449;
  int v1450;
  unsigned int v1452;
  uint64_t v1453;
  uint64_t v1454;
  unint64_t v1455;
  int v1456;
  int v1457;
  unsigned int v1458;
  uint64_t v1459;
  uint64_t v1460;
  unint64_t v1461;
  int v1462;
  unsigned int v1463;
  uint64_t v1464;
  uint64_t v1465;
  unint64_t v1466;
  int v1467;
  int v1468;
  int v1469;
  char v1470;
  unsigned int v1471;
  unint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  unint64_t v1475;
  char v1476;
  int v1477;
  int v1478;
  BOOL v1479;
  unsigned int v1480;
  uint64_t v1481;
  uint64_t v1482;
  unint64_t v1483;
  int v1484;
  char v1485;
  unsigned int v1486;
  unint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  unint64_t v1490;
  char v1491;
  int v1492;
  int v1493;
  BOOL v1494;
  char v1495;
  unsigned int v1496;
  unint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  unint64_t v1500;
  char v1501;
  int v1502;
  int v1503;
  BOOL v1504;
  char v1505;
  unsigned int v1506;
  unint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  unint64_t v1510;
  char v1511;
  int v1512;
  int v1513;
  BOOL v1514;
  int v1515;
  int v1516;
  _BOOL8 v1517;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
LABEL_3794:
    v1517 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v1517;
  }
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    if (a1[*v4])
      goto LABEL_3794;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *v2;
      v10 = *(_QWORD *)&a1[v9];
      v11 = v10 + 1;
      if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
        break;
      v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
      *(_QWORD *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0)
        goto LABEL_12;
      v6 += 7;
      v13 = v7++ >= 9;
      if (v13)
      {
        v8 = 0;
        v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v14 = a1[*v4];
    if (a1[*v4])
      v8 = 0;
LABEL_14:
    v15 = v8 & 7;
    if (v14 || v15 == 4)
      goto LABEL_3794;
    switch((v8 >> 3))
    {
      case 1u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDEntityIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 2u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceInfoIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 3u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v17 = 0;
            v18 = 0;
            v19 = 0;
            while (1)
            {
              v20 = *v2;
              v21 = *(_QWORD *)&a1[v20];
              v22 = v21 + 1;
              if (v21 == -1 || v22 > *(_QWORD *)&a1[*v3])
                break;
              v23 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v21);
              *(_QWORD *)&a1[v20] = v22;
              v19 |= (unint64_t)(v23 & 0x7F) << v17;
              if ((v23 & 0x80) == 0)
                goto LABEL_48;
              v17 += 7;
              v13 = v18++ >= 9;
              if (v13)
              {
                v19 = 0;
                v24 = a1[*v4];
                goto LABEL_50;
              }
            }
            a1[*v4] = 1;
LABEL_48:
            v24 = a1[*v4];
            if (a1[*v4])
              v19 = 0;
LABEL_50:
            v25 = v19 & 7;
            if (v24 || v25 == 4)
              goto LABEL_3776;
            if ((v19 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            break;
          }
          if (v25 == 2 && PBReaderPlaceMark() && GEORoadAccessPointIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 4u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDBoundsIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 5u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_68:
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3366;
            v27 = 0;
            v28 = 0;
            v29 = 0;
            while (2)
            {
              v30 = *v2;
              v31 = *(_QWORD *)&a1[v30];
              v32 = v31 + 1;
              if (v31 == -1 || v32 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v33 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v31);
                *(_QWORD *)&a1[v30] = v32;
                v29 |= (unint64_t)(v33 & 0x7F) << v27;
                if (v33 < 0)
                {
                  v27 += 7;
                  v13 = v28++ >= 9;
                  if (v13)
                  {
                    v29 = 0;
                    v34 = a1[*v4];
                    goto LABEL_80;
                  }
                  continue;
                }
              }
              break;
            }
            v34 = a1[*v4];
            if (a1[*v4])
              v29 = 0;
LABEL_80:
            v35 = v29 & 7;
            if (v34)
              v36 = 1;
            else
              v36 = v35 == 4;
            if (v36)
              goto LABEL_3366;
            switch((v29 >> 3))
            {
              case 1u:
                if (v35 != 2 || !PBReaderPlaceMark() || !GEOPDLocalizedAddressIsValid(a1))
                  goto LABEL_3811;
                goto LABEL_133;
              case 2u:
                if (v35 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1))
                  goto LABEL_3811;
                goto LABEL_133;
              case 3u:
                if (v35 != 2 || !PBReaderPlaceMark())
                  goto LABEL_3811;
                objc_msgSend(a1, "position");
                objc_msgSend(a1, "length");
                break;
              case 4u:
                if ((v29 & 7) != 0)
                  goto LABEL_3811;
                v47 = 0;
                do
                {
                  v48 = *v2;
                  v49 = *(_QWORD *)&a1[v48];
                  v50 = v49 + 1;
                  if (v49 == -1 || v50 > *(_QWORD *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_68;
                  }
                  v51 = *(char *)(*(_QWORD *)&a1[*v5] + v49);
                  *(_QWORD *)&a1[v48] = v50;
                  if ((v51 & 0x80000000) == 0)
                    break;
                  v52 = v47++ > 8;
                }
                while (!v52);
                continue;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
            }
            break;
          }
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
          {
            v37 = 0;
            v38 = 0;
            v39 = 0;
            while (1)
            {
              v40 = *v2;
              v41 = *(_QWORD *)&a1[v40];
              v42 = v41 + 1;
              if (v41 == -1 || v42 > *(_QWORD *)&a1[*v3])
                break;
              v43 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v41);
              *(_QWORD *)&a1[v40] = v42;
              v39 |= (unint64_t)(v43 & 0x7F) << v37;
              if ((v43 & 0x80) == 0)
                goto LABEL_108;
              v37 += 7;
              v13 = v38++ >= 9;
              if (v13)
              {
                v39 = 0;
                v44 = a1[*v4];
                goto LABEL_110;
              }
            }
            a1[*v4] = 1;
LABEL_108:
            v44 = a1[*v4];
            if (a1[*v4])
              v39 = 0;
LABEL_110:
            v45 = v39 & 7;
            if (v44 || v45 == 4)
              break;
            if ((v39 >> 3) == 3)
            {
              if (v45 == 2 && PBReaderPlaceMark() && GEOStructuredAddressIsValid(a1))
              {
                PBReaderRecallMark();
                continue;
              }
              goto LABEL_3796;
            }
            if ((v39 >> 3) == 1 && v45 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_3796;
          }
          v53 = a1[*v4];
          PBReaderRecallMark();
          if (!v53)
          {
LABEL_133:
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 6u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDRatingIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 7u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3366;
            v54 = 0;
            v55 = 0;
            v56 = 0;
            while (2)
            {
              v57 = *v2;
              v58 = *(_QWORD *)&a1[v57];
              v59 = v58 + 1;
              if (v58 == -1 || v59 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v60 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v58);
                *(_QWORD *)&a1[v57] = v59;
                v56 |= (unint64_t)(v60 & 0x7F) << v54;
                if (v60 < 0)
                {
                  v54 += 7;
                  v13 = v55++ >= 9;
                  if (v13)
                  {
                    v56 = 0;
                    v61 = *v4;
                    v62 = a1[v61];
                    goto LABEL_154;
                  }
                  continue;
                }
              }
              break;
            }
            v61 = *v4;
            v62 = a1[v61];
            if (a1[v61])
              v56 = 0;
LABEL_154:
            v63 = v56 & 7;
            if (v62)
              v64 = 1;
            else
              v64 = v63 == 4;
            if (v64)
              goto LABEL_3366;
            switch((v56 >> 3))
            {
              case 1u:
                if (v63 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1))
                  goto LABEL_3811;
                goto LABEL_204;
              case 2u:
                if (v63 != 1)
                  goto LABEL_3811;
                v65 = *v2;
                v66 = *(_QWORD *)&a1[v65];
                if (v66 <= 0xFFFFFFFFFFFFFFF7 && (v67 = v66 + 8, v67 <= *(_QWORD *)&a1[*v3]))
                  *(_QWORD *)&a1[v65] = v67;
                else
                  a1[v61] = 1;
                continue;
              case 4u:
                if (v63 != 2 || !PBReaderPlaceMark())
                  goto LABEL_3811;
                objc_msgSend(a1, "position");
                objc_msgSend(a1, "length");
                break;
              case 5u:
                if (v63 == 2)
                  goto LABEL_197;
                goto LABEL_3811;
              case 6u:
                if (v63 == 2 && PBReaderPlaceMark() && GEOPDRatingIsValid(a1))
                  goto LABEL_204;
                goto LABEL_3811;
              default:
LABEL_197:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
            }
            break;
          }
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
          {
            v68 = 0;
            v69 = 0;
            v70 = 0;
            while (1)
            {
              v71 = *v2;
              v72 = *(_QWORD *)&a1[v71];
              v73 = v72 + 1;
              if (v72 == -1 || v73 > *(_QWORD *)&a1[*v3])
                break;
              v74 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v72);
              *(_QWORD *)&a1[v71] = v73;
              v70 |= (unint64_t)(v74 & 0x7F) << v68;
              if ((v74 & 0x80) == 0)
                goto LABEL_180;
              v68 += 7;
              v13 = v69++ >= 9;
              if (v13)
              {
                v70 = 0;
                v75 = a1[*v4];
                goto LABEL_182;
              }
            }
            a1[*v4] = 1;
LABEL_180:
            v75 = a1[*v4];
            if (a1[*v4])
              v70 = 0;
LABEL_182:
            v76 = v70 & 7;
            if (v75 || v76 == 4)
              break;
            if ((v70 >> 3) == 2)
            {
              if (v76 != 2 || !PBReaderPlaceMark() || !GEOPDPhotoIsValid(a1))
                goto LABEL_3796;
              PBReaderRecallMark();
            }
            else if ((v70 >> 3) == 1 && v76 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
            {
              goto LABEL_3796;
            }
          }
          v78 = a1[*v4];
          PBReaderRecallMark();
          if (!v78)
          {
LABEL_204:
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 8u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPhotoIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 9u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDHoursIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0xAu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_217:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3366;
          v79 = 0;
          v80 = 0;
          v81 = 0;
          while (2)
          {
            v82 = *v2;
            v83 = *(_QWORD *)&a1[v82];
            v84 = v83 + 1;
            if (v83 == -1 || v84 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v85 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v83);
              *(_QWORD *)&a1[v82] = v84;
              v81 |= (unint64_t)(v85 & 0x7F) << v79;
              if (v85 < 0)
              {
                v79 += 7;
                v13 = v80++ >= 9;
                if (v13)
                {
                  v81 = 0;
                  v86 = a1[*v4];
                  goto LABEL_229;
                }
                continue;
              }
            }
            break;
          }
          v86 = a1[*v4];
          if (a1[*v4])
            v81 = 0;
LABEL_229:
          v87 = v81 & 7;
          if (v86)
            v88 = 1;
          else
            v88 = v87 == 4;
          if (v88)
            goto LABEL_3366;
          switch((v81 >> 3))
          {
            case 1u:
              if (v87 != 2 || !PBReaderPlaceMark() || !GEOPBTransitLineIsValid(a1))
                goto LABEL_3811;
              goto LABEL_351;
            case 2u:
              if (v87 != 2 || !PBReaderPlaceMark() || !GEOPBTransitSystemIsValid(a1))
                goto LABEL_3811;
              goto LABEL_351;
            case 9u:
              if (v87 != 2 || !PBReaderPlaceMark() || !GEOPDTransitLabelIsValid(a1))
                goto LABEL_3811;
              goto LABEL_351;
            case 0xAu:
              if (v87 != 2 || !PBReaderPlaceMark())
                goto LABEL_3811;
              objc_msgSend(a1, "position");
              objc_msgSend(a1, "length");
LABEL_249:
              while (2)
              {
                if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                  goto LABEL_350;
                v89 = 0;
                v90 = 0;
                v91 = 0;
                while (2)
                {
                  v92 = *v2;
                  v93 = *(_QWORD *)&a1[v92];
                  v94 = v93 + 1;
                  if (v93 == -1 || v94 > *(_QWORD *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                  }
                  else
                  {
                    v95 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v93);
                    *(_QWORD *)&a1[v92] = v94;
                    v91 |= (unint64_t)(v95 & 0x7F) << v89;
                    if (v95 < 0)
                    {
                      v89 += 7;
                      v13 = v90++ >= 9;
                      if (v13)
                      {
                        v91 = 0;
                        v96 = a1[*v4];
                        goto LABEL_261;
                      }
                      continue;
                    }
                  }
                  break;
                }
                v96 = a1[*v4];
                if (a1[*v4])
                  v91 = 0;
LABEL_261:
                v97 = v91 & 7;
                if (v96)
                  v98 = 1;
                else
                  v98 = v97 == 4;
                if (!v98)
                {
                  switch((v91 >> 3))
                  {
                    case 1u:
                      if ((v91 & 7) != 0)
                        goto LABEL_3796;
                      v99 = 0;
                      break;
                    case 3u:
                      if (v97 != 2 || !PBReaderPlaceMark() || !GEOPDTransitLabelIsValid(a1))
                        goto LABEL_3796;
                      goto LABEL_284;
                    case 4u:
                      if (v97 == 2)
                        goto LABEL_279;
                      goto LABEL_3796;
                    case 5u:
                      if (v97 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1))
                        goto LABEL_3796;
LABEL_284:
                      PBReaderRecallMark();
                      continue;
                    default:
LABEL_279:
                      if ((PBReaderSkipValueWithTag() & 1) == 0)
                        goto LABEL_3796;
                      continue;
                  }
                  do
                  {
                    v100 = *v2;
                    v101 = *(_QWORD *)&a1[v100];
                    v102 = v101 + 1;
                    if (v101 == -1 || v102 > *(_QWORD *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_249;
                    }
                    v103 = *(char *)(*(_QWORD *)&a1[*v5] + v101);
                    *(_QWORD *)&a1[v100] = v102;
                    if ((v103 & 0x80000000) == 0)
                      break;
                    v52 = v99++ > 8;
                  }
                  while (!v52);
                  continue;
                }
                goto LABEL_350;
              }
            case 0xBu:
              if (v87 == 2)
                goto LABEL_295;
              goto LABEL_3811;
            case 0xCu:
              if (v87 == 2 && PBReaderPlaceMark() && GEOPDMapsIdentifierIsValid(a1))
                goto LABEL_351;
              goto LABEL_3811;
            case 0xDu:
              if (v87 == 2)
                goto LABEL_295;
              goto LABEL_3811;
            case 0xEu:
              if (v87 == 2)
                goto LABEL_295;
              goto LABEL_3811;
            case 0xFu:
              if ((v81 & 7) != 0)
                goto LABEL_3811;
              v104 = 0;
              do
              {
                v105 = *v2;
                v106 = *(_QWORD *)&a1[v105];
                v107 = v106 + 1;
                if (v106 == -1 || v107 > *(_QWORD *)&a1[*v3])
                {
                  a1[*v4] = 1;
                  goto LABEL_217;
                }
                v108 = *(char *)(*(_QWORD *)&a1[*v5] + v106);
                *(_QWORD *)&a1[v105] = v107;
                if ((v108 & 0x80000000) == 0)
                  break;
                v52 = v104++ > 8;
              }
              while (!v52);
              continue;
            case 0x10u:
              if (v87 != 2 || !PBReaderPlaceMark())
                goto LABEL_3811;
              objc_msgSend(a1, "position");
              objc_msgSend(a1, "length");
              break;
            default:
LABEL_295:
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
          }
          break;
        }
        while (1)
        {
LABEL_308:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_350;
          v109 = 0;
          v110 = 0;
          v111 = 0;
          while (1)
          {
            v112 = *v2;
            v113 = *(_QWORD *)&a1[v112];
            v114 = v113 + 1;
            if (v113 == -1 || v114 > *(_QWORD *)&a1[*v3])
              break;
            v115 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v113);
            *(_QWORD *)&a1[v112] = v114;
            v111 |= (unint64_t)(v115 & 0x7F) << v109;
            if ((v115 & 0x80) == 0)
              goto LABEL_318;
            v109 += 7;
            v13 = v110++ >= 9;
            if (v13)
            {
              v111 = 0;
              v116 = a1[*v4];
              goto LABEL_320;
            }
          }
          a1[*v4] = 1;
LABEL_318:
          v116 = a1[*v4];
          if (a1[*v4])
            v111 = 0;
LABEL_320:
          v117 = v111 & 7;
          if (v116 || v117 == 4)
          {
LABEL_350:
            v130 = a1[*v4];
            PBReaderRecallMark();
            if (!v130)
            {
LABEL_351:
              PBReaderRecallMark();
              goto LABEL_217;
            }
            goto LABEL_3811;
          }
          v119 = v111 >> 3;
          if ((v111 >> 3) == 4)
          {
            if (v117 == 2 && PBReaderPlaceMark() && GEOTimezoneIsValid(a1))
            {
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_3796;
          }
          if ((_DWORD)v119 == 3)
            break;
          if ((_DWORD)v119 == 1)
          {
            if ((v111 & 7) == 0)
            {
              v120 = 0;
              while (1)
              {
                v121 = *v2;
                v122 = *(_QWORD *)&a1[v121];
                v123 = v122 + 1;
                if (v122 == -1 || v123 > *(_QWORD *)&a1[*v3])
                  goto LABEL_347;
                v124 = *(char *)(*(_QWORD *)&a1[*v5] + v122);
                *(_QWORD *)&a1[v121] = v123;
                if (v124 < 0)
                {
                  v52 = v120++ > 8;
                  if (!v52)
                    continue;
                }
                goto LABEL_308;
              }
            }
            goto LABEL_3796;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_3796;
        }
        if ((v111 & 7) == 0)
        {
          v125 = 0;
          while (1)
          {
            v126 = *v2;
            v127 = *(_QWORD *)&a1[v126];
            v128 = v127 + 1;
            if (v127 == -1 || v128 > *(_QWORD *)&a1[*v3])
              break;
            v129 = *(char *)(*(_QWORD *)&a1[*v5] + v127);
            *(_QWORD *)&a1[v126] = v128;
            if (v129 < 0)
            {
              v52 = v125++ > 8;
              if (!v52)
                continue;
            }
            goto LABEL_308;
          }
LABEL_347:
          a1[*v4] = 1;
          goto LABEL_308;
        }
        goto LABEL_3796;
      case 0xBu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_356:
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3366;
            v131 = 0;
            v132 = 0;
            v133 = 0;
            while (2)
            {
              v134 = *v2;
              v135 = *(_QWORD *)&a1[v134];
              v136 = v135 + 1;
              if (v135 == -1 || v136 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v137 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v135);
                *(_QWORD *)&a1[v134] = v136;
                v133 |= (unint64_t)(v137 & 0x7F) << v131;
                if (v137 < 0)
                {
                  v131 += 7;
                  v13 = v132++ >= 9;
                  if (v13)
                  {
                    v133 = 0;
                    v138 = a1[*v4];
                    goto LABEL_368;
                  }
                  continue;
                }
              }
              break;
            }
            v138 = a1[*v4];
            if (a1[*v4])
              v133 = 0;
LABEL_368:
            v139 = v133 & 7;
            if (v138)
              v140 = 1;
            else
              v140 = v139 == 4;
            if (v140)
              goto LABEL_3366;
            switch((v133 >> 3))
            {
              case 1u:
                if (v139 != 2 || !PBReaderPlaceMark() || !GEOPDDepartureSequenceIsValid(a1))
                  goto LABEL_3811;
                goto LABEL_386;
              case 2u:
              case 3u:
                if (v139 != 2 || !PBReaderPlaceMark() || !GEOPDDeparturePredicateIsValid(a1))
                  goto LABEL_3811;
                goto LABEL_386;
              case 4u:
                if (v139 == 2 && PBReaderPlaceMark() && GEOPDTimeRangeIsValid(a1))
                  goto LABEL_386;
                goto LABEL_3811;
              case 5u:
                if ((v133 & 7) != 0)
                  goto LABEL_3811;
                v141 = 0;
                do
                {
                  v142 = *v2;
                  v143 = *(_QWORD *)&a1[v142];
                  v144 = v143 + 1;
                  if (v143 == -1 || v144 > *(_QWORD *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_356;
                  }
                  v145 = *(char *)(*(_QWORD *)&a1[*v5] + v143);
                  *(_QWORD *)&a1[v142] = v144;
                  if ((v145 & 0x80000000) == 0)
                    break;
                  v52 = v141++ > 8;
                }
                while (!v52);
                continue;
              case 6u:
                if (v139 != 2 || !PBReaderPlaceMark())
                  goto LABEL_3811;
                objc_msgSend(a1, "position");
                objc_msgSend(a1, "length");
                break;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
            }
            break;
          }
LABEL_398:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_448;
          v146 = 0;
          v147 = 0;
          v148 = 0;
          while (1)
          {
            v149 = *v2;
            v150 = *(_QWORD *)&a1[v149];
            v151 = v150 + 1;
            if (v150 == -1 || v151 > *(_QWORD *)&a1[*v3])
              break;
            v152 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v150);
            *(_QWORD *)&a1[v149] = v151;
            v148 |= (unint64_t)(v152 & 0x7F) << v146;
            if ((v152 & 0x80) == 0)
              goto LABEL_408;
            v146 += 7;
            v13 = v147++ >= 9;
            if (v13)
            {
              v148 = 0;
              v153 = a1[*v4];
              goto LABEL_410;
            }
          }
          a1[*v4] = 1;
LABEL_408:
          v153 = a1[*v4];
          if (a1[*v4])
            v148 = 0;
LABEL_410:
          v154 = v148 & 7;
          if (v153 || v154 == 4)
          {
LABEL_448:
            v171 = a1[*v4];
            PBReaderRecallMark();
            if (!v171)
            {
LABEL_386:
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_3811;
          }
          break;
        }
        switch((v148 >> 3))
        {
          case 1u:
            if (v154 == 2)
            {
              if (PBReaderPlaceMark())
              {
                while (1)
                {
LABEL_439:
                  if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || (v166 = a1[*v4], a1[*v4]))
                  {
LABEL_425:
                    PBReaderRecallMark();
                    goto LABEL_398;
                  }
                  while (1)
                  {
                    v167 = *v2;
                    v168 = *(_QWORD *)&a1[v167];
                    v169 = v168 + 1;
                    if (v168 == -1 || v169 > *(_QWORD *)&a1[*v3])
                      break;
                    v170 = *(char *)(*(_QWORD *)&a1[*v5] + v168);
                    *(_QWORD *)&a1[v167] = v169;
                    if (v170 < 0)
                    {
                      v13 = v166++ >= 9;
                      if (!v13)
                        continue;
                    }
                    goto LABEL_439;
                  }
                  a1[*v4] = 1;
                }
              }
            }
            else if ((v148 & 7) == 0)
            {
              while (1)
              {
                v156 = *v2;
                v157 = *(_QWORD *)&a1[v156];
                v158 = v157 + 1;
                if (v157 == -1 || v158 > *(_QWORD *)&a1[*v3])
                  break;
                v159 = *(char *)(*(_QWORD *)&a1[*v5] + v157);
                *(_QWORD *)&a1[v156] = v158;
                if (v159 < 0)
                {
                  v160 = v154++;
                  if (v160 <= 8)
                    continue;
                }
                goto LABEL_398;
              }
LABEL_437:
              a1[*v4] = 1;
              goto LABEL_398;
            }
            break;
          case 2u:
            if (v154 == 2 && PBReaderPlaceMark() && GEOPDTransitLabelIsValid(a1))
              goto LABEL_425;
            goto LABEL_3796;
          case 3u:
            if ((v148 & 7) != 0)
              goto LABEL_3796;
            v161 = 0;
            while (1)
            {
              v162 = *v2;
              v163 = *(_QWORD *)&a1[v162];
              v164 = v163 + 1;
              if (v163 == -1 || v164 > *(_QWORD *)&a1[*v3])
                goto LABEL_437;
              v165 = *(char *)(*(_QWORD *)&a1[*v5] + v163);
              *(_QWORD *)&a1[v162] = v164;
              if (v165 < 0)
              {
                v52 = v161++ > 8;
                if (!v52)
                  continue;
              }
              goto LABEL_398;
            }
          case 4u:
            if (v154 == 2)
              goto LABEL_435;
            goto LABEL_3796;
          default:
LABEL_435:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_3796;
            goto LABEL_398;
        }
        goto LABEL_3796;
      case 0xCu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_454:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3776;
          v172 = 0;
          v173 = 0;
          v174 = 0;
          while (2)
          {
            v175 = *v2;
            v176 = *(_QWORD *)&a1[v175];
            v177 = v176 + 1;
            if (v176 == -1 || v177 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v178 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v176);
              *(_QWORD *)&a1[v175] = v177;
              v174 |= (unint64_t)(v178 & 0x7F) << v172;
              if (v178 < 0)
              {
                v172 += 7;
                v13 = v173++ >= 9;
                if (v13)
                {
                  v174 = 0;
                  v179 = a1[*v4];
                  goto LABEL_466;
                }
                continue;
              }
            }
            break;
          }
          v179 = a1[*v4];
          if (a1[*v4])
            v174 = 0;
LABEL_466:
          v180 = v174 & 7;
          if (v179)
            v181 = 1;
          else
            v181 = v180 == 4;
          if (!v181)
          {
            switch((v174 >> 3))
            {
              case 1u:
                if ((v174 & 7) != 0)
                  goto LABEL_3811;
                v182 = 0;
                while (1)
                {
                  v183 = *v2;
                  v184 = *(_QWORD *)&a1[v183];
                  v185 = v184 + 1;
                  if (v184 == -1 || v185 > *(_QWORD *)&a1[*v3])
                    goto LABEL_517;
                  v186 = *(char *)(*(_QWORD *)&a1[*v5] + v184);
                  *(_QWORD *)&a1[v183] = v185;
                  if (v186 < 0)
                  {
                    v52 = v182++ > 8;
                    if (!v52)
                      continue;
                  }
                  goto LABEL_454;
                }
              case 2u:
                if ((v174 & 7) != 0)
                  goto LABEL_3811;
                v187 = 0;
                while (1)
                {
                  v188 = *v2;
                  v189 = *(_QWORD *)&a1[v188];
                  v190 = v189 + 1;
                  if (v189 == -1 || v190 > *(_QWORD *)&a1[*v3])
                    goto LABEL_517;
                  v191 = *(char *)(*(_QWORD *)&a1[*v5] + v189);
                  *(_QWORD *)&a1[v188] = v190;
                  if (v191 < 0)
                  {
                    v52 = v187++ > 8;
                    if (!v52)
                      continue;
                  }
                  goto LABEL_454;
                }
              case 3u:
                if ((v174 & 7) != 0)
                  goto LABEL_3811;
                v192 = 0;
                while (1)
                {
                  v193 = *v2;
                  v194 = *(_QWORD *)&a1[v193];
                  v195 = v194 + 1;
                  if (v194 == -1 || v195 > *(_QWORD *)&a1[*v3])
                    goto LABEL_517;
                  v196 = *(char *)(*(_QWORD *)&a1[*v5] + v194);
                  *(_QWORD *)&a1[v193] = v195;
                  if (v196 < 0)
                  {
                    v52 = v192++ > 8;
                    if (!v52)
                      continue;
                  }
                  goto LABEL_454;
                }
              case 4u:
                if ((v174 & 7) != 0)
                  goto LABEL_3811;
                v197 = 0;
                while (1)
                {
                  v198 = *v2;
                  v199 = *(_QWORD *)&a1[v198];
                  v200 = v199 + 1;
                  if (v199 == -1 || v200 > *(_QWORD *)&a1[*v3])
                    goto LABEL_517;
                  v201 = *(char *)(*(_QWORD *)&a1[*v5] + v199);
                  *(_QWORD *)&a1[v198] = v200;
                  if (v201 < 0)
                  {
                    v52 = v197++ > 8;
                    if (!v52)
                      continue;
                  }
                  goto LABEL_454;
                }
              case 5u:
                if (v180 != 2 || !PBReaderPlaceMark() || !GEORouteTrafficDetailIsValid(a1))
                  goto LABEL_3811;
                goto LABEL_521;
              case 6u:
                if ((v174 & 7) != 0)
                  goto LABEL_3811;
                v202 = 0;
                do
                {
                  v203 = *v2;
                  v204 = *(_QWORD *)&a1[v203];
                  v205 = v204 + 1;
                  if (v204 == -1 || v205 > *(_QWORD *)&a1[*v3])
                  {
LABEL_517:
                    a1[*v4] = 1;
                    goto LABEL_454;
                  }
                  v206 = *(char *)(*(_QWORD *)&a1[*v5] + v204);
                  *(_QWORD *)&a1[v203] = v205;
                  if ((v206 & 0x80000000) == 0)
                    break;
                  v52 = v202++ > 8;
                }
                while (!v52);
                break;
              case 7u:
                if (v180 != 2 || !PBReaderPlaceMark() || !GEOETARouteIncidentIsValid(a1))
                  goto LABEL_3811;
LABEL_521:
                PBReaderRecallMark();
                continue;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
            }
            continue;
          }
          goto LABEL_3776;
        }
      case 0xDu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDFlyoverIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0xEu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
          {
            v207 = 0;
            v208 = 0;
            v209 = 0;
            while (1)
            {
              v210 = *v2;
              v211 = *(_QWORD *)&a1[v210];
              v212 = v211 + 1;
              if (v211 == -1 || v212 > *(_QWORD *)&a1[*v3])
                break;
              v213 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v211);
              *(_QWORD *)&a1[v210] = v212;
              v209 |= (unint64_t)(v213 & 0x7F) << v207;
              if ((v213 & 0x80) == 0)
                goto LABEL_539;
              v207 += 7;
              v13 = v208++ >= 9;
              if (v13)
              {
                v209 = 0;
                v214 = a1[*v4];
                goto LABEL_541;
              }
            }
            a1[*v4] = 1;
LABEL_539:
            v214 = a1[*v4];
            if (a1[*v4])
              v209 = 0;
LABEL_541:
            v215 = v209 & 7;
            if (!v214 && v215 != 4)
            {
              if ((v209 >> 3) == 2)
              {
                if (v215 != 2)
                  goto LABEL_3811;
              }
              else
              {
                if ((v209 >> 3) != 1)
                {
                  if (!PBReaderSkipValueWithTag())
                    goto LABEL_3811;
                  continue;
                }
                if (v215 != 2)
                  goto LABEL_3811;
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
          }
          goto LABEL_3411;
        }
      case 0xFu:
      case 0x4Eu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAmenitiesIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x10u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOStyleAttributesIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x14u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v217 = 0;
            v218 = 0;
            v219 = 0;
            while (1)
            {
              v220 = *v2;
              v221 = *(_QWORD *)&a1[v220];
              v222 = v221 + 1;
              if (v221 == -1 || v222 > *(_QWORD *)&a1[*v3])
                break;
              v223 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v221);
              *(_QWORD *)&a1[v220] = v222;
              v219 |= (unint64_t)(v223 & 0x7F) << v217;
              if ((v223 & 0x80) == 0)
                goto LABEL_573;
              v217 += 7;
              v13 = v218++ >= 9;
              if (v13)
              {
                v219 = 0;
                v224 = a1[*v4];
                goto LABEL_575;
              }
            }
            a1[*v4] = 1;
LABEL_573:
            v224 = a1[*v4];
            if (a1[*v4])
              v219 = 0;
LABEL_575:
            v225 = v219 & 7;
            if (v224 || v225 == 4)
              goto LABEL_3776;
            if ((v219 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            break;
          }
          if (v225 == 2 && PBReaderPlaceMark() && GEOPBTransitIncidentIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x15u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_589:
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3411;
            v227 = 0;
            v228 = 0;
            v229 = 0;
            while (1)
            {
              v230 = *v2;
              v231 = *(_QWORD *)&a1[v230];
              v232 = v231 + 1;
              if (v231 == -1 || v232 > *(_QWORD *)&a1[*v3])
                break;
              v233 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v231);
              *(_QWORD *)&a1[v230] = v232;
              v229 |= (unint64_t)(v233 & 0x7F) << v227;
              if ((v233 & 0x80) == 0)
                goto LABEL_599;
              v227 += 7;
              v13 = v228++ >= 9;
              if (v13)
              {
                v229 = 0;
                v234 = a1[*v4];
                goto LABEL_601;
              }
            }
            a1[*v4] = 1;
LABEL_599:
            v234 = a1[*v4];
            if (a1[*v4])
              v229 = 0;
LABEL_601:
            if (v234 || (v229 & 7) == 4)
              goto LABEL_3411;
            if ((v229 >> 3) != 2)
            {
              if (!PBReaderSkipValueWithTag())
                goto LABEL_3811;
              continue;
            }
            break;
          }
          if ((v229 & 7) == 0)
          {
            v236 = 0;
            do
            {
              v237 = *v2;
              v238 = *(_QWORD *)&a1[v237];
              v239 = v238 + 1;
              if (v238 == -1 || v239 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_589;
              }
              v240 = *(char *)(*(_QWORD *)&a1[*v5] + v238);
              *(_QWORD *)&a1[v237] = v239;
              if ((v240 & 0x80000000) == 0)
                break;
              v52 = v236++ > 8;
            }
            while (!v52);
            continue;
          }
          goto LABEL_3811;
        }
      case 0x16u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
          {
            v241 = 0;
            v242 = 0;
            v243 = 0;
            while (1)
            {
              v244 = *v2;
              v245 = *(_QWORD *)&a1[v244];
              v246 = v245 + 1;
              if (v245 == -1 || v246 > *(_QWORD *)&a1[*v3])
                break;
              v247 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v245);
              *(_QWORD *)&a1[v244] = v246;
              v243 |= (unint64_t)(v247 & 0x7F) << v241;
              if ((v247 & 0x80) == 0)
                goto LABEL_630;
              v241 += 7;
              v13 = v242++ >= 9;
              if (v13)
              {
                v243 = 0;
                v248 = a1[*v4];
                goto LABEL_632;
              }
            }
            a1[*v4] = 1;
LABEL_630:
            v248 = a1[*v4];
            if (a1[*v4])
              v243 = 0;
LABEL_632:
            v249 = v243 & 7;
            if (!v248 && v249 != 4)
            {
              v251 = v243 >> 3;
              if ((v243 >> 3) == 3)
              {
                if (v249 != 2)
                  goto LABEL_3811;
              }
              else if ((_DWORD)v251 == 2)
              {
                if (v249 != 2)
                  goto LABEL_3811;
              }
              else
              {
                if ((_DWORD)v251 != 1)
                {
                  if (!PBReaderSkipValueWithTag())
                    goto LABEL_3811;
                  continue;
                }
                if (v249 != 2)
                  goto LABEL_3811;
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
          }
          goto LABEL_3411;
        }
      case 0x17u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDFactoidIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x18u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v252 = 0;
          v253 = 0;
          v254 = 0;
          while (1)
          {
            v255 = *v2;
            v256 = *(_QWORD *)&a1[v255];
            v257 = v256 + 1;
            if (v256 == -1 || v257 > *(_QWORD *)&a1[*v3])
              break;
            v258 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v256);
            *(_QWORD *)&a1[v255] = v257;
            v254 |= (unint64_t)(v258 & 0x7F) << v252;
            if ((v258 & 0x80) == 0)
              goto LABEL_665;
            v252 += 7;
            v13 = v253++ >= 9;
            if (v13)
            {
              v254 = 0;
              v259 = a1[*v4];
              goto LABEL_667;
            }
          }
          a1[*v4] = 1;
LABEL_665:
          v259 = a1[*v4];
          if (a1[*v4])
            v254 = 0;
LABEL_667:
          v260 = v254 & 7;
          if (v259 || v260 == 4)
            break;
          if ((v254 >> 3) != 1)
          {
            if (!PBReaderSkipValueWithTag())
              goto LABEL_3811;
            continue;
          }
          if (v260 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_3811;
        }
        goto LABEL_3411;
      case 0x19u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDBusinessClaimIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x1Au:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDCaptionedPhotoIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x1Bu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDTransitInfoSnippetIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x1Du:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_692:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_2246;
          v262 = 0;
          v263 = 0;
          v264 = 0;
          while (1)
          {
            v265 = *v2;
            v266 = *(_QWORD *)&a1[v265];
            v267 = v266 + 1;
            if (v266 == -1 || v267 > *(_QWORD *)&a1[*v3])
              break;
            v268 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v266);
            *(_QWORD *)&a1[v265] = v267;
            v264 |= (unint64_t)(v268 & 0x7F) << v262;
            if ((v268 & 0x80) == 0)
              goto LABEL_702;
            v262 += 7;
            v13 = v263++ >= 9;
            if (v13)
            {
              v264 = 0;
              v269 = a1[*v4];
              goto LABEL_704;
            }
          }
          a1[*v4] = 1;
LABEL_702:
          v269 = a1[*v4];
          if (a1[*v4])
            v264 = 0;
LABEL_704:
          v270 = v264 & 7;
          if (v269 || v270 == 4)
            goto LABEL_2246;
          if ((v264 >> 3) == 2)
          {
            if (v270 == 2 && PBReaderPlaceMark())
            {
              objc_msgSend(a1, "position");
              objc_msgSend(a1, "length");
              while (2)
              {
                if (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
                {
                  v277 = 0;
                  v278 = 0;
                  v279 = 0;
                  while (1)
                  {
                    v280 = *v2;
                    v281 = *(_QWORD *)&a1[v280];
                    v282 = v281 + 1;
                    if (v281 == -1 || v282 > *(_QWORD *)&a1[*v3])
                      break;
                    v283 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v281);
                    *(_QWORD *)&a1[v280] = v282;
                    v279 |= (unint64_t)(v283 & 0x7F) << v277;
                    if ((v283 & 0x80) == 0)
                      goto LABEL_731;
                    v277 += 7;
                    v13 = v278++ >= 9;
                    if (v13)
                    {
                      v279 = 0;
                      v284 = a1[*v4];
                      goto LABEL_733;
                    }
                  }
                  a1[*v4] = 1;
LABEL_731:
                  v284 = a1[*v4];
                  if (a1[*v4])
                    v279 = 0;
LABEL_733:
                  v285 = v279 & 7;
                  if (v284)
                    v286 = 1;
                  else
                    v286 = v285 == 4;
                  if (!v286)
                  {
                    switch((v279 >> 3))
                    {
                      case 1u:
                        if (v285 == 2)
                          goto LABEL_747;
                        goto LABEL_3798;
                      case 2u:
                        if (v285 == 2)
                          goto LABEL_747;
                        goto LABEL_3798;
                      case 3u:
                        if (v285 == 2)
                          goto LABEL_747;
                        goto LABEL_3798;
                      case 4u:
                        if (v285 != 2)
                          goto LABEL_3798;
LABEL_747:
                        if ((PBReaderSkipValueWithTag() & 1) == 0)
                          goto LABEL_3798;
                        continue;
                      default:
                        if (!PBReaderSkipValueWithTag())
                          goto LABEL_3798;
                        continue;
                    }
                  }
                }
                break;
              }
              v287 = a1[*v4];
              PBReaderRecallMark();
              if (!v287)
              {
                PBReaderRecallMark();
                continue;
              }
            }
          }
          else
          {
            if ((v264 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            if ((v264 & 7) == 0)
            {
              v272 = 0;
              do
              {
                v273 = *v2;
                v274 = *(_QWORD *)&a1[v273];
                v275 = v274 + 1;
                if (v274 == -1 || v275 > *(_QWORD *)&a1[*v3])
                {
                  a1[*v4] = 1;
                  goto LABEL_692;
                }
                v276 = *(char *)(*(_QWORD *)&a1[*v5] + v274);
                *(_QWORD *)&a1[v273] = v275;
                if ((v276 & 0x80000000) == 0)
                  break;
                v52 = v272++ > 8;
              }
              while (!v52);
              continue;
            }
          }
          goto LABEL_3811;
        }
      case 0x1Eu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position", 0, 0);
        objc_msgSend(a1, "length");
LABEL_757:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3298;
          v288 = 0;
          v289 = 0;
          v290 = 0;
          while (2)
          {
            v291 = *v2;
            v292 = *(_QWORD *)&a1[v291];
            v293 = v292 + 1;
            if (v292 == -1 || v293 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v294 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v292);
              *(_QWORD *)&a1[v291] = v293;
              v290 |= (unint64_t)(v294 & 0x7F) << v288;
              if (v294 < 0)
              {
                v288 += 7;
                v13 = v289++ >= 9;
                if (v13)
                {
                  v290 = 0;
                  v295 = a1[*v4];
                  goto LABEL_769;
                }
                continue;
              }
            }
            break;
          }
          v295 = a1[*v4];
          if (a1[*v4])
            v290 = 0;
LABEL_769:
          v296 = v290 & 7;
          if (v295)
            v297 = 1;
          else
            v297 = v296 == 4;
          if (!v297)
          {
            switch((v290 >> 3))
            {
              case 1u:
                if (v296 == 2)
                  goto LABEL_783;
                goto LABEL_3811;
              case 2u:
                if (v296 == 2)
                  goto LABEL_783;
                goto LABEL_3811;
              case 3u:
                if (v296 != 2 || !PBReaderPlaceMark() || !GEOPDRatingIsValid(a1))
                  goto LABEL_3811;
                goto LABEL_800;
              case 5u:
                if (v296 == 2)
                  goto LABEL_783;
                goto LABEL_3811;
              case 6u:
                if ((v290 & 7) != 0)
                  goto LABEL_3811;
                v298 = 0;
                do
                {
                  v299 = *v2;
                  v300 = *(_QWORD *)&a1[v299];
                  v301 = v300 + 1;
                  if (v300 == -1 || v301 > *(_QWORD *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_757;
                  }
                  v302 = *(char *)(*(_QWORD *)&a1[*v5] + v300);
                  *(_QWORD *)&a1[v299] = v301;
                  if ((v302 & 0x80000000) == 0)
                    break;
                  v52 = v298++ > 8;
                }
                while (!v52);
                continue;
              case 8u:
                if (v296 != 2 || !PBReaderPlaceMark() || !GEOPDChildPlaceIsValid(a1))
                  goto LABEL_3811;
                goto LABEL_800;
              case 9u:
                if (v296 == 2 && PBReaderPlaceMark() && GEOPDAdamAppIdentifierIsValid(a1))
                  goto LABEL_800;
                goto LABEL_3811;
              case 0xAu:
                if (v296 != 2 || !PBReaderPlaceMark())
                  goto LABEL_3811;
                objc_msgSend(a1, "position");
                objc_msgSend(a1, "length");
                break;
              default:
LABEL_783:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
            }
            while (1)
            {
LABEL_804:
              if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                goto LABEL_991;
              v303 = 0;
              v304 = 0;
              v305 = 0;
              while (1)
              {
                v306 = *v2;
                v307 = *(_QWORD *)&a1[v306];
                v308 = v307 + 1;
                if (v307 == -1 || v308 > *(_QWORD *)&a1[*v3])
                  break;
                v309 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v307);
                *(_QWORD *)&a1[v306] = v308;
                v305 |= (unint64_t)(v309 & 0x7F) << v303;
                if ((v309 & 0x80) == 0)
                  goto LABEL_814;
                v303 += 7;
                v13 = v304++ >= 9;
                if (v13)
                {
                  v305 = 0;
                  v310 = a1[*v4];
                  goto LABEL_816;
                }
              }
              a1[*v4] = 1;
LABEL_814:
              v310 = a1[*v4];
              if (a1[*v4])
                v305 = 0;
LABEL_816:
              v311 = v305 & 7;
              if (v310 || v311 == 4)
              {
LABEL_991:
                v384 = a1[*v4];
                PBReaderRecallMark();
                if (!v384)
                {
LABEL_800:
                  PBReaderRecallMark();
                  goto LABEL_757;
                }
                goto LABEL_3811;
              }
              v313 = v305 >> 3;
              if ((v305 >> 3) == 3)
                break;
              if ((_DWORD)v313 == 2)
              {
                if (v311 != 2 || !PBReaderPlaceMark() || !GEOPDChildPlaceIsValid(a1))
                  goto LABEL_3802;
                goto LABEL_989;
              }
              if ((_DWORD)v313 == 1)
              {
                if ((v305 & 7) == 0)
                {
                  v314 = 0;
                  do
                  {
                    v315 = *v2;
                    v316 = *(_QWORD *)&a1[v315];
                    v317 = v316 + 1;
                    if (v316 == -1 || v317 > *(_QWORD *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_804;
                    }
                    v318 = *(char *)(*(_QWORD *)&a1[*v5] + v316);
                    *(_QWORD *)&a1[v315] = v317;
                    if ((v318 & 0x80000000) == 0)
                      break;
                    v52 = v314++ > 8;
                  }
                  while (!v52);
                  continue;
                }
                goto LABEL_3802;
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3802;
            }
            if (v311 != 2 || !PBReaderPlaceMark())
              goto LABEL_3802;
            objc_msgSend(a1, "position");
            objc_msgSend(a1, "length");
LABEL_834:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
            {
              v319 = 0;
              v320 = 0;
              v321 = 0;
              while (1)
              {
                v322 = *v2;
                v323 = *(_QWORD *)&a1[v322];
                v324 = v323 + 1;
                if (v323 == -1 || v324 > *(_QWORD *)&a1[*v3])
                  break;
                v325 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v323);
                *(_QWORD *)&a1[v322] = v324;
                v321 |= (unint64_t)(v325 & 0x7F) << v319;
                if ((v325 & 0x80) == 0)
                  goto LABEL_844;
                v319 += 7;
                v13 = v320++ >= 9;
                if (v13)
                {
                  v321 = 0;
                  v326 = a1[*v4];
                  goto LABEL_846;
                }
              }
              a1[*v4] = 1;
LABEL_844:
              v326 = a1[*v4];
              if (a1[*v4])
                v321 = 0;
LABEL_846:
              v327 = v321 & 7;
              if (v326 || v327 == 4)
                break;
              switch((v321 >> 3))
              {
                case 1u:
                  if ((v321 & 7) != 0)
                    goto LABEL_3801;
                  v329 = 0;
                  while (1)
                  {
                    v330 = *v2;
                    v331 = *(_QWORD *)&a1[v330];
                    v332 = v331 + 1;
                    if (v331 == -1 || v332 > *(_QWORD *)&a1[*v3])
                      break;
                    v333 = *(char *)(*(_QWORD *)&a1[*v5] + v331);
                    *(_QWORD *)&a1[v330] = v332;
                    if (v333 < 0)
                    {
                      v52 = v329++ > 8;
                      if (!v52)
                        continue;
                    }
                    goto LABEL_834;
                  }
                  a1[*v4] = 1;
                  continue;
                case 2u:
                  if (v327 != 2 || !PBReaderPlaceMark())
                    goto LABEL_3801;
                  objc_msgSend(a1, "position");
                  objc_msgSend(a1, "length");
                  while (1)
                  {
                    v334 = a1[*v4];
                    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
                      goto LABEL_978;
                    if (a1[*v4])
                      goto LABEL_3800;
                    v335 = 0;
                    v336 = 0;
                    v337 = 0;
                    while (1)
                    {
                      v338 = *v2;
                      v339 = *(_QWORD *)&a1[v338];
                      v340 = v339 + 1;
                      if (v339 == -1 || v340 > *(_QWORD *)&a1[*v3])
                        break;
                      v341 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v339);
                      *(_QWORD *)&a1[v338] = v340;
                      v337 |= (unint64_t)(v341 & 0x7F) << v335;
                      if ((v341 & 0x80) == 0)
                        goto LABEL_874;
                      v335 += 7;
                      v13 = v336++ >= 9;
                      if (v13)
                      {
                        LOBYTE(v337) = 0;
                        v334 = a1[*v4];
                        goto LABEL_876;
                      }
                    }
                    a1[*v4] = 1;
LABEL_874:
                    v342 = *v4;
                    v334 = a1[v342];
                    if (a1[v342])
                      LOBYTE(v337) = 0;
LABEL_876:
                    if (v334 || (v337 & 7) == 4)
                      goto LABEL_978;
                    if ((PBReaderSkipValueWithTag() & 1) == 0)
                      goto LABEL_3800;
                  }
                case 3u:
                  if (v327 != 2 || !PBReaderPlaceMark())
                    goto LABEL_3801;
                  objc_msgSend(a1, "position");
                  objc_msgSend(a1, "length");
                  while (1)
                  {
                    v334 = a1[*v4];
                    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
                      goto LABEL_978;
                    if (a1[*v4])
                      goto LABEL_3800;
                    v344 = 0;
                    v345 = 0;
                    v346 = 0;
                    while (1)
                    {
                      v347 = *v2;
                      v348 = *(_QWORD *)&a1[v347];
                      v349 = v348 + 1;
                      if (v348 == -1 || v349 > *(_QWORD *)&a1[*v3])
                        break;
                      v350 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v348);
                      *(_QWORD *)&a1[v347] = v349;
                      v346 |= (unint64_t)(v350 & 0x7F) << v344;
                      if ((v350 & 0x80) == 0)
                        goto LABEL_895;
                      v344 += 7;
                      v13 = v345++ >= 9;
                      if (v13)
                      {
                        LOBYTE(v346) = 0;
                        v334 = a1[*v4];
                        goto LABEL_897;
                      }
                    }
                    a1[*v4] = 1;
LABEL_895:
                    v351 = *v4;
                    v334 = a1[v351];
                    if (a1[v351])
                      LOBYTE(v346) = 0;
LABEL_897:
                    if (v334 || (v346 & 7) == 4)
                      goto LABEL_978;
                    if ((PBReaderSkipValueWithTag() & 1) == 0)
                      goto LABEL_3800;
                  }
                case 4u:
                  if (v327 != 2 || !PBReaderPlaceMark())
                    goto LABEL_3801;
                  objc_msgSend(a1, "position");
                  objc_msgSend(a1, "length");
                  while (2)
                  {
                    while (2)
                    {
                      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                        goto LABEL_955;
                      v353 = 0;
                      v354 = 0;
                      v355 = 0;
                      while (1)
                      {
                        v356 = *v2;
                        v357 = *(_QWORD *)&a1[v356];
                        v358 = v357 + 1;
                        if (v357 == -1 || v358 > *(_QWORD *)&a1[*v3])
                          break;
                        v359 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v357);
                        *(_QWORD *)&a1[v356] = v358;
                        v355 |= (unint64_t)(v359 & 0x7F) << v353;
                        if ((v359 & 0x80) == 0)
                          goto LABEL_916;
                        v353 += 7;
                        v13 = v354++ >= 9;
                        if (v13)
                        {
                          v355 = 0;
                          v360 = a1[*v4];
                          goto LABEL_918;
                        }
                      }
                      a1[*v4] = 1;
LABEL_916:
                      v360 = a1[*v4];
                      if (a1[*v4])
                        v355 = 0;
LABEL_918:
                      v361 = v355 & 7;
                      if (v360 || v361 == 4)
                        goto LABEL_955;
                      if ((v355 >> 3) != 1)
                      {
                        if ((PBReaderSkipValueWithTag() & 1) == 0)
                          goto LABEL_3800;
                        continue;
                      }
                      break;
                    }
                    if (v361 == 2 && PBReaderPlaceMark() && GEOPDWarsawMerchantIdentifierIsValid(a1))
                    {
                      PBReaderRecallMark();
                      continue;
                    }
                    goto LABEL_3800;
                  }
                case 5u:
                  if (v327 != 2 || !PBReaderPlaceMark())
                    goto LABEL_3801;
                  objc_msgSend(a1, "position");
                  objc_msgSend(a1, "length");
                  while (2)
                  {
                    if (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
                    {
                      v363 = 0;
                      v364 = 0;
                      v365 = 0;
                      while (1)
                      {
                        v366 = *v2;
                        v367 = *(_QWORD *)&a1[v366];
                        v368 = v367 + 1;
                        if (v367 == -1 || v368 > *(_QWORD *)&a1[*v3])
                          break;
                        v369 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v367);
                        *(_QWORD *)&a1[v366] = v368;
                        v365 |= (unint64_t)(v369 & 0x7F) << v363;
                        if ((v369 & 0x80) == 0)
                          goto LABEL_942;
                        v363 += 7;
                        v13 = v364++ >= 9;
                        if (v13)
                        {
                          v365 = 0;
                          v370 = a1[*v4];
                          goto LABEL_944;
                        }
                      }
                      a1[*v4] = 1;
LABEL_942:
                      v370 = a1[*v4];
                      if (a1[*v4])
                        v365 = 0;
LABEL_944:
                      v371 = v365 & 7;
                      if (!v370 && v371 != 4)
                      {
                        if ((v365 >> 3) != 1)
                        {
                          if ((PBReaderSkipValueWithTag() & 1) == 0)
                            goto LABEL_3800;
                          continue;
                        }
                        if (v371 == 2 && PBReaderPlaceMark() && GEOPDGuidesLocationEntryIsValid(a1))
                        {
                          PBReaderRecallMark();
                          continue;
                        }
LABEL_3800:
                        PBReaderRecallMark();
LABEL_3801:
                        PBReaderRecallMark();
LABEL_3802:
                        PBReaderRecallMark();
                        goto LABEL_3811;
                      }
                    }
                    break;
                  }
LABEL_955:
                  v373 = a1[*v4];
                  PBReaderRecallMark();
                  if (v373)
                    goto LABEL_3801;
LABEL_979:
                  PBReaderRecallMark();
                  break;
                case 6u:
                  if (v327 != 2 || !PBReaderPlaceMark())
                    goto LABEL_3801;
                  objc_msgSend(a1, "position");
                  objc_msgSend(a1, "length");
                  while (1)
                  {
                    v334 = a1[*v4];
                    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
                      break;
                    if (a1[*v4])
                      goto LABEL_3800;
                    v374 = 0;
                    v375 = 0;
                    v376 = 0;
                    while (1)
                    {
                      v377 = *v2;
                      v378 = *(_QWORD *)&a1[v377];
                      v379 = v378 + 1;
                      if (v378 == -1 || v379 > *(_QWORD *)&a1[*v3])
                        break;
                      v380 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v378);
                      *(_QWORD *)&a1[v377] = v379;
                      v376 |= (unint64_t)(v380 & 0x7F) << v374;
                      if ((v380 & 0x80) == 0)
                        goto LABEL_970;
                      v374 += 7;
                      v13 = v375++ >= 9;
                      if (v13)
                      {
                        LOBYTE(v376) = 0;
                        v334 = a1[*v4];
                        goto LABEL_972;
                      }
                    }
                    a1[*v4] = 1;
LABEL_970:
                    v381 = *v4;
                    v334 = a1[v381];
                    if (a1[v381])
                      LOBYTE(v376) = 0;
LABEL_972:
                    if (v334 || (v376 & 7) == 4)
                      break;
                    if ((PBReaderSkipValueWithTag() & 1) == 0)
                      goto LABEL_3800;
                  }
LABEL_978:
                  PBReaderRecallMark();
                  if (!v334)
                    goto LABEL_979;
                  goto LABEL_3801;
                default:
                  if ((PBReaderSkipValueWithTag() & 1) == 0)
                    goto LABEL_3801;
                  continue;
              }
            }
            v383 = a1[*v4];
            PBReaderRecallMark();
            if (v383)
              goto LABEL_3802;
LABEL_989:
            PBReaderRecallMark();
            goto LABEL_804;
          }
          goto LABEL_3298;
        }
      case 0x1Fu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAdamAppIdentifierIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x20u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1000:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_2246;
          v385 = 0;
          v386 = 0;
          v387 = 0;
          while (2)
          {
            v388 = *v2;
            v389 = *(_QWORD *)&a1[v388];
            v390 = v389 + 1;
            if (v389 == -1 || v390 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v391 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v389);
              *(_QWORD *)&a1[v388] = v390;
              v387 |= (unint64_t)(v391 & 0x7F) << v385;
              if (v391 < 0)
              {
                v385 += 7;
                v13 = v386++ >= 9;
                if (v13)
                {
                  v387 = 0;
                  v392 = a1[*v4];
                  goto LABEL_1012;
                }
                continue;
              }
            }
            break;
          }
          v392 = a1[*v4];
          if (a1[*v4])
            v387 = 0;
LABEL_1012:
          v393 = v387 & 7;
          if (v392)
            v394 = 1;
          else
            v394 = v393 == 4;
          if (v394)
            goto LABEL_2246;
          if ((v387 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_3811;
            continue;
          }
          break;
        }
        if (v393 != 2 || !PBReaderPlaceMark())
          goto LABEL_3811;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (1)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_1047;
          v395 = 0;
          v396 = 0;
          v397 = 0;
          while (1)
          {
            v398 = *v2;
            v399 = *(_QWORD *)&a1[v398];
            v400 = v399 + 1;
            if (v399 == -1 || v400 > *(_QWORD *)&a1[*v3])
              break;
            v401 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v399);
            *(_QWORD *)&a1[v398] = v400;
            v397 |= (unint64_t)(v401 & 0x7F) << v395;
            if ((v401 & 0x80) == 0)
              goto LABEL_1030;
            v395 += 7;
            v13 = v396++ >= 9;
            if (v13)
            {
              v397 = 0;
              v402 = a1[*v4];
              goto LABEL_1032;
            }
          }
          a1[*v4] = 1;
LABEL_1030:
          v402 = a1[*v4];
          if (a1[*v4])
            v397 = 0;
LABEL_1032:
          v403 = v397 & 7;
          if (v402 || v403 == 4)
          {
LABEL_1047:
            v405 = a1[*v4];
            PBReaderRecallMark();
            if (!v405)
            {
              PBReaderRecallMark();
              goto LABEL_1000;
            }
            goto LABEL_3811;
          }
          if ((v397 >> 3) == 2)
            break;
          if ((v397 >> 3) == 1)
          {
            if (v403 != 2)
              goto LABEL_3798;
LABEL_1041:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_3798;
          }
          else if (!PBReaderSkipValueWithTag())
          {
            goto LABEL_3798;
          }
        }
        if (v403 != 2)
          goto LABEL_3798;
        goto LABEL_1041;
      case 0x21u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1052:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3366;
          v406 = 0;
          v407 = 0;
          v408 = 0;
          while (2)
          {
            v409 = *v2;
            v410 = *(_QWORD *)&a1[v409];
            v411 = v410 + 1;
            if (v410 == -1 || v411 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v412 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v410);
              *(_QWORD *)&a1[v409] = v411;
              v408 |= (unint64_t)(v412 & 0x7F) << v406;
              if (v412 < 0)
              {
                v406 += 7;
                v13 = v407++ >= 9;
                if (v13)
                {
                  v408 = 0;
                  v413 = a1[*v4];
                  goto LABEL_1064;
                }
                continue;
              }
            }
            break;
          }
          v413 = a1[*v4];
          if (a1[*v4])
            v408 = 0;
LABEL_1064:
          v414 = v408 & 7;
          if (v413)
            v415 = 1;
          else
            v415 = v414 == 4;
          if (v415)
            goto LABEL_3366;
          if ((v408 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_3811;
            continue;
          }
          break;
        }
        if (v414 == 2 && PBReaderPlaceMark())
        {
          objc_msgSend(a1, "position");
          objc_msgSend(a1, "length");
          while (1)
          {
            while (1)
            {
LABEL_1072:
              if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                goto LABEL_1117;
              v416 = 0;
              v417 = 0;
              v418 = 0;
              while (1)
              {
                v419 = *v2;
                v420 = *(_QWORD *)&a1[v419];
                v421 = v420 + 1;
                if (v420 == -1 || v421 > *(_QWORD *)&a1[*v3])
                  break;
                v422 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v420);
                *(_QWORD *)&a1[v419] = v421;
                v418 |= (unint64_t)(v422 & 0x7F) << v416;
                if ((v422 & 0x80) == 0)
                  goto LABEL_1082;
                v416 += 7;
                v13 = v417++ >= 9;
                if (v13)
                {
                  v418 = 0;
                  v423 = a1[*v4];
                  goto LABEL_1084;
                }
              }
              a1[*v4] = 1;
LABEL_1082:
              v423 = a1[*v4];
              if (a1[*v4])
                v418 = 0;
LABEL_1084:
              v424 = v418 & 7;
              if (v423 || v424 == 4)
              {
LABEL_1117:
                v437 = a1[*v4];
                PBReaderRecallMark();
                if (!v437)
                {
                  PBReaderRecallMark();
                  goto LABEL_1052;
                }
                goto LABEL_3811;
              }
              v426 = v418 >> 3;
              if ((v418 >> 3) != 3)
                break;
              if (v424 == 2)
              {
                if (!PBReaderPlaceMark())
                  goto LABEL_3796;
LABEL_1104:
                while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
                {
                  v432 = a1[*v4];
                  if (a1[*v4])
                    break;
                  while (1)
                  {
                    v433 = *v2;
                    v434 = *(_QWORD *)&a1[v433];
                    v435 = v434 + 1;
                    if (v434 == -1 || v435 > *(_QWORD *)&a1[*v3])
                      break;
                    v436 = *(char *)(*(_QWORD *)&a1[*v5] + v434);
                    *(_QWORD *)&a1[v433] = v435;
                    if (v436 < 0)
                    {
                      v13 = v432++ >= 9;
                      if (!v13)
                        continue;
                    }
                    goto LABEL_1104;
                  }
                  a1[*v4] = 1;
                }
                PBReaderRecallMark();
              }
              else
              {
                if ((v418 & 7) != 0)
                  goto LABEL_3796;
                while (1)
                {
                  v427 = *v2;
                  v428 = *(_QWORD *)&a1[v427];
                  v429 = v428 + 1;
                  if (v428 == -1 || v429 > *(_QWORD *)&a1[*v3])
                    break;
                  v430 = *(char *)(*(_QWORD *)&a1[*v5] + v428);
                  *(_QWORD *)&a1[v427] = v429;
                  if (v430 < 0)
                  {
                    v431 = v424++;
                    if (v431 <= 8)
                      continue;
                  }
                  goto LABEL_1072;
                }
                a1[*v4] = 1;
              }
            }
            if ((_DWORD)v426 == 2)
            {
              if (v424 != 2)
                goto LABEL_3796;
            }
            else if ((_DWORD)v426 == 1 && v424 != 2)
            {
              goto LABEL_3796;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_3796;
          }
        }
        goto LABEL_3811;
      case 0x22u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1122:
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v438 = 0;
            v439 = 0;
            v440 = 0;
            while (2)
            {
              v441 = *v2;
              v442 = *(_QWORD *)&a1[v441];
              v443 = v442 + 1;
              if (v442 == -1 || v443 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v444 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v442);
                *(_QWORD *)&a1[v441] = v443;
                v440 |= (unint64_t)(v444 & 0x7F) << v438;
                if (v444 < 0)
                {
                  v438 += 7;
                  v13 = v439++ >= 9;
                  if (v13)
                  {
                    v440 = 0;
                    v445 = a1[*v4];
                    goto LABEL_1134;
                  }
                  continue;
                }
              }
              break;
            }
            v445 = a1[*v4];
            if (a1[*v4])
              v440 = 0;
LABEL_1134:
            v446 = v440 & 7;
            if (v445)
              v447 = 1;
            else
              v447 = v446 == 4;
            if (v447)
              goto LABEL_3776;
            v448 = v440 >> 3;
            if ((v440 >> 3) == 3)
            {
              if (v446 != 2)
              {
                if ((v440 & 7) == 0)
                {
                  do
                  {
                    v449 = *v2;
                    v450 = *(_QWORD *)&a1[v449];
                    v451 = v450 + 1;
                    if (v450 == -1 || v451 > *(_QWORD *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_1122;
                    }
                    v452 = *(char *)(*(_QWORD *)&a1[*v5] + v450);
                    *(_QWORD *)&a1[v449] = v451;
                    if ((v452 & 0x80000000) == 0)
                      break;
                    v453 = v446++;
                  }
                  while (v453 <= 8);
                  continue;
                }
                goto LABEL_3811;
              }
              if (!PBReaderPlaceMark())
                goto LABEL_3811;
LABEL_1159:
              while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
              {
                v454 = a1[*v4];
                if (a1[*v4])
                  break;
                while (1)
                {
                  v455 = *v2;
                  v456 = *(_QWORD *)&a1[v455];
                  v457 = v456 + 1;
                  if (v456 == -1 || v457 > *(_QWORD *)&a1[*v3])
                    break;
                  v458 = *(char *)(*(_QWORD *)&a1[*v5] + v456);
                  *(_QWORD *)&a1[v455] = v457;
                  if (v458 < 0)
                  {
                    v13 = v454++ >= 9;
                    if (!v13)
                      continue;
                  }
                  goto LABEL_1159;
                }
                a1[*v4] = 1;
              }
            }
            else if ((_DWORD)v448 == 2)
            {
              if (v446 != 2 || !PBReaderPlaceMark() || !GEOPDBoundsIsValid(a1))
                goto LABEL_3811;
            }
            else
            {
              if ((_DWORD)v448 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
              }
              if (v446 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
                goto LABEL_3811;
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0x24u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1172:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3366;
          v459 = 0;
          v460 = 0;
          v461 = 0;
          while (2)
          {
            v462 = *v2;
            v463 = *(_QWORD *)&a1[v462];
            v464 = v463 + 1;
            if (v463 == -1 || v464 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v465 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v463);
              *(_QWORD *)&a1[v462] = v464;
              v461 |= (unint64_t)(v465 & 0x7F) << v459;
              if (v465 < 0)
              {
                v459 += 7;
                v13 = v460++ >= 9;
                if (v13)
                {
                  v461 = 0;
                  v466 = *v4;
                  v467 = a1[v466];
                  goto LABEL_1184;
                }
                continue;
              }
            }
            break;
          }
          v466 = *v4;
          v467 = a1[v466];
          if (a1[v466])
            v461 = 0;
LABEL_1184:
          v468 = v461 & 7;
          if (v467)
            v469 = 1;
          else
            v469 = v468 == 4;
          if (v469)
            goto LABEL_3366;
          switch((v461 >> 3))
          {
            case 1u:
              if (v468 == 2)
                goto LABEL_1225;
              goto LABEL_3811;
            case 2u:
              if (v468 != 1)
                goto LABEL_3811;
              v470 = *v2;
              v471 = *(_QWORD *)&a1[v470];
              if (v471 <= 0xFFFFFFFFFFFFFFF7 && (v472 = v471 + 8, v472 <= *(_QWORD *)&a1[*v3]))
                *(_QWORD *)&a1[v470] = v472;
              else
                a1[v466] = 1;
              continue;
            case 3u:
              if (v468 != 2 || !PBReaderPlaceMark())
                goto LABEL_3811;
              objc_msgSend(a1, "position");
              objc_msgSend(a1, "length");
              break;
            case 4u:
              if (v468 == 2)
                goto LABEL_1225;
              goto LABEL_3811;
            default:
LABEL_1225:
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
          }
          break;
        }
        do
        {
          while (1)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_1227;
            v473 = 0;
            v474 = 0;
            v475 = 0;
            while (1)
            {
              v476 = *v2;
              v477 = *(_QWORD *)&a1[v476];
              v478 = v477 + 1;
              if (v477 == -1 || v478 > *(_QWORD *)&a1[*v3])
                break;
              v479 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v477);
              *(_QWORD *)&a1[v476] = v478;
              v475 |= (unint64_t)(v479 & 0x7F) << v473;
              if ((v479 & 0x80) == 0)
                goto LABEL_1208;
              v473 += 7;
              v13 = v474++ >= 9;
              if (v13)
              {
                v475 = 0;
                v480 = a1[*v4];
                goto LABEL_1210;
              }
            }
            a1[*v4] = 1;
LABEL_1208:
            v480 = a1[*v4];
            if (a1[*v4])
              v475 = 0;
LABEL_1210:
            v481 = v475 & 7;
            if (v480 || v481 == 4)
            {
LABEL_1227:
              v483 = a1[*v4];
              PBReaderRecallMark();
              if (!v483)
              {
                PBReaderRecallMark();
                goto LABEL_1172;
              }
              goto LABEL_3811;
            }
            if ((v475 >> 3) != 2)
              break;
            if (v481 != 2 || !PBReaderPlaceMark() || !GEOPDPhotoIsValid(a1))
              goto LABEL_3796;
            PBReaderRecallMark();
          }
        }
        while (((v475 >> 3) != 1 || v481 == 2) && (PBReaderSkipValueWithTag() & 1) != 0);
        goto LABEL_3796;
      case 0x25u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v484 = 0;
          v485 = 0;
          v486 = 0;
          while (1)
          {
            v487 = *v2;
            v488 = *(_QWORD *)&a1[v487];
            v489 = v488 + 1;
            if (v488 == -1 || v489 > *(_QWORD *)&a1[*v3])
              break;
            v490 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v488);
            *(_QWORD *)&a1[v487] = v489;
            v486 |= (unint64_t)(v490 & 0x7F) << v484;
            if ((v490 & 0x80) == 0)
              goto LABEL_1243;
            v484 += 7;
            v13 = v485++ >= 9;
            if (v13)
            {
              v486 = 0;
              v491 = a1[*v4];
              goto LABEL_1245;
            }
          }
          a1[*v4] = 1;
LABEL_1243:
          v491 = a1[*v4];
          if (a1[*v4])
            v486 = 0;
LABEL_1245:
          v492 = v486 & 7;
          if (v491 || v492 == 4)
            break;
          if ((v486 >> 3) != 1)
          {
            if (!PBReaderSkipValueWithTag())
              goto LABEL_3811;
            continue;
          }
          if (v492 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_3811;
        }
        goto LABEL_3411;
      case 0x26u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3411;
            v494 = 0;
            v495 = 0;
            v496 = 0;
            while (2)
            {
              v497 = *v2;
              v498 = *(_QWORD *)&a1[v497];
              v499 = v498 + 1;
              if (v498 == -1 || v499 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v500 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v498);
                *(_QWORD *)&a1[v497] = v499;
                v496 |= (unint64_t)(v500 & 0x7F) << v494;
                if (v500 < 0)
                {
                  v494 += 7;
                  v13 = v495++ >= 9;
                  if (v13)
                  {
                    v496 = 0;
                    v501 = a1[*v4];
                    goto LABEL_1270;
                  }
                  continue;
                }
              }
              break;
            }
            v501 = a1[*v4];
            if (a1[*v4])
              v496 = 0;
LABEL_1270:
            v502 = v496 & 7;
            if (v501)
              v503 = 1;
            else
              v503 = v502 == 4;
            if (v503)
              goto LABEL_3411;
            if ((v496 >> 3) == 2)
            {
              if (v502 != 2)
                goto LABEL_3811;
LABEL_1279:
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            break;
          }
          if ((v496 >> 3) != 1)
          {
            if (!PBReaderSkipValueWithTag())
              goto LABEL_3811;
            continue;
          }
          break;
        }
        if (v502 == 2)
          goto LABEL_1279;
        goto LABEL_3811;
      case 0x27u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1286:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3776;
          v504 = 0;
          v505 = 0;
          v506 = 0;
          while (2)
          {
            v507 = *v2;
            v508 = *(_QWORD *)&a1[v507];
            v509 = v508 + 1;
            if (v508 == -1 || v509 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v510 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v508);
              *(_QWORD *)&a1[v507] = v509;
              v506 |= (unint64_t)(v510 & 0x7F) << v504;
              if (v510 < 0)
              {
                v504 += 7;
                v13 = v505++ >= 9;
                if (v13)
                {
                  v506 = 0;
                  v511 = a1[*v4];
                  goto LABEL_1298;
                }
                continue;
              }
            }
            break;
          }
          v511 = a1[*v4];
          if (a1[*v4])
            v506 = 0;
LABEL_1298:
          v512 = v506 & 7;
          if (v511)
            v513 = 1;
          else
            v513 = v512 == 4;
          if (!v513)
          {
            switch((v506 >> 3))
            {
              case 1u:
                if (v512 == 2)
                  goto LABEL_1335;
                goto LABEL_3811;
              case 2u:
                if (v512 == 2)
                  goto LABEL_1335;
                goto LABEL_3811;
              case 3u:
                if ((v506 & 7) != 0)
                  goto LABEL_3811;
                v514 = 0;
                while (1)
                {
                  v515 = *v2;
                  v516 = *(_QWORD *)&a1[v515];
                  v517 = v516 + 1;
                  if (v516 == -1 || v517 > *(_QWORD *)&a1[*v3])
                    goto LABEL_1331;
                  v518 = *(char *)(*(_QWORD *)&a1[*v5] + v516);
                  *(_QWORD *)&a1[v515] = v517;
                  if (v518 < 0)
                  {
                    v52 = v514++ > 8;
                    if (!v52)
                      continue;
                  }
                  goto LABEL_1286;
                }
              case 4u:
                if (v512 != 2 || !PBReaderPlaceMark() || !GEOPDHoursIsValid(a1))
                  goto LABEL_3811;
                goto LABEL_1322;
              case 5u:
                if (v512 != 2 || !PBReaderPlaceMark() || !GEOTimezoneIsValid(a1))
                  goto LABEL_3811;
LABEL_1322:
                PBReaderRecallMark();
                continue;
              case 6u:
                if ((v506 & 7) != 0)
                  goto LABEL_3811;
                v519 = 0;
                do
                {
                  v520 = *v2;
                  v521 = *(_QWORD *)&a1[v520];
                  v522 = v521 + 1;
                  if (v521 == -1 || v522 > *(_QWORD *)&a1[*v3])
                  {
LABEL_1331:
                    a1[*v4] = 1;
                    goto LABEL_1286;
                  }
                  v523 = *(char *)(*(_QWORD *)&a1[*v5] + v521);
                  *(_QWORD *)&a1[v520] = v522;
                  if ((v523 & 0x80000000) == 0)
                    break;
                  v52 = v519++ > 8;
                }
                while (!v52);
                break;
              case 7u:
                if (v512 == 2)
                  goto LABEL_1335;
                goto LABEL_3811;
              case 8u:
                if (v512 == 2)
                  goto LABEL_1335;
                goto LABEL_3811;
              default:
LABEL_1335:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
            }
            continue;
          }
          goto LABEL_3776;
        }
      case 0x28u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v524 = 0;
            v525 = 0;
            v526 = 0;
            while (2)
            {
              v527 = *v2;
              v528 = *(_QWORD *)&a1[v527];
              v529 = v528 + 1;
              if (v528 == -1 || v529 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v530 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v528);
                *(_QWORD *)&a1[v527] = v529;
                v526 |= (unint64_t)(v530 & 0x7F) << v524;
                if (v530 < 0)
                {
                  v524 += 7;
                  v13 = v525++ >= 9;
                  if (v13)
                  {
                    v526 = 0;
                    v531 = a1[*v4];
                    goto LABEL_1352;
                  }
                  continue;
                }
              }
              break;
            }
            v531 = a1[*v4];
            if (a1[*v4])
              v526 = 0;
LABEL_1352:
            v532 = v526 & 7;
            if (v531)
              v533 = 1;
            else
              v533 = v532 == 4;
            if (v533)
              goto LABEL_3776;
            if ((v526 >> 3) != 2 && (v526 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            break;
          }
          if (v532 == 2 && PBReaderPlaceMark() && GEOPDQuickLinkItemIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x29u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDGuideSummaryLayoutMetadataIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x2Au:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v534 = 0;
            v535 = 0;
            v536 = 0;
            while (2)
            {
              v537 = *v2;
              v538 = *(_QWORD *)&a1[v537];
              v539 = v538 + 1;
              if (v538 == -1 || v539 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v540 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v538);
                *(_QWORD *)&a1[v537] = v539;
                v536 |= (unint64_t)(v540 & 0x7F) << v534;
                if (v540 < 0)
                {
                  v534 += 7;
                  v13 = v535++ >= 9;
                  if (v13)
                  {
                    v536 = 0;
                    v541 = a1[*v4];
                    goto LABEL_1383;
                  }
                  continue;
                }
              }
              break;
            }
            v541 = a1[*v4];
            if (a1[*v4])
              v536 = 0;
LABEL_1383:
            v542 = v536 & 7;
            if (v541)
              v543 = 1;
            else
              v543 = v542 == 4;
            if (v543)
              goto LABEL_3776;
            v544 = v536 >> 3;
            if ((v536 >> 3) != 3 && (_DWORD)v544 != 2 && (_DWORD)v544 != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            break;
          }
          if (v542 == 2 && PBReaderPlaceMark() && GEOMapRegionIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x2Bu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3411;
          v545 = 0;
          v546 = 0;
          v547 = 0;
          while (2)
          {
            v548 = *v2;
            v549 = *(_QWORD *)&a1[v548];
            v550 = v549 + 1;
            if (v549 == -1 || v550 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v551 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v549);
              *(_QWORD *)&a1[v548] = v550;
              v547 |= (unint64_t)(v551 & 0x7F) << v545;
              if (v551 < 0)
              {
                v545 += 7;
                v13 = v546++ >= 9;
                if (v13)
                {
                  v547 = 0;
                  v552 = *v4;
                  v553 = a1[v552];
                  goto LABEL_1411;
                }
                continue;
              }
            }
            break;
          }
          v552 = *v4;
          v553 = a1[v552];
          if (a1[v552])
            v547 = 0;
LABEL_1411:
          v554 = v547 & 7;
          if (v553)
            v555 = 1;
          else
            v555 = v554 == 4;
          if (!v555)
          {
            switch((v547 >> 3))
            {
              case 1u:
                if (v554 == 2)
                  goto LABEL_1425;
                goto LABEL_3811;
              case 2u:
                if (v554 != 2)
                  goto LABEL_3811;
LABEL_1425:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
              case 3u:
              case 4u:
                if (v554 != 1)
                  goto LABEL_3811;
                v556 = *v2;
                v557 = *(_QWORD *)&a1[v556];
                if (v557 <= 0xFFFFFFFFFFFFFFF7 && (v558 = v557 + 8, v558 <= *(_QWORD *)&a1[*v3]))
                  *(_QWORD *)&a1[v556] = v558;
                else
                  a1[v552] = 1;
                continue;
              default:
                if (!PBReaderSkipValueWithTag())
                  goto LABEL_3811;
                continue;
            }
          }
          goto LABEL_3411;
        }
      case 0x2Cu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1431:
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3411;
            v559 = 0;
            v560 = 0;
            v561 = 0;
            while (2)
            {
              v562 = *v2;
              v563 = *(_QWORD *)&a1[v562];
              v564 = v563 + 1;
              if (v563 == -1 || v564 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v565 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v563);
                *(_QWORD *)&a1[v562] = v564;
                v561 |= (unint64_t)(v565 & 0x7F) << v559;
                if (v565 < 0)
                {
                  v559 += 7;
                  v13 = v560++ >= 9;
                  if (v13)
                  {
                    v561 = 0;
                    v566 = a1[*v4];
                    goto LABEL_1443;
                  }
                  continue;
                }
              }
              break;
            }
            v566 = a1[*v4];
            if (a1[*v4])
              v561 = 0;
LABEL_1443:
            if (v566)
              v567 = 1;
            else
              v567 = (v561 & 7) == 4;
            if (v567)
              goto LABEL_3411;
            if ((v561 >> 3) == 2)
            {
              if ((v561 & 7) != 0)
                goto LABEL_3811;
              v573 = 0;
              while (1)
              {
                v574 = *v2;
                v575 = *(_QWORD *)&a1[v574];
                v576 = v575 + 1;
                if (v575 == -1 || v576 > *(_QWORD *)&a1[*v3])
                  break;
                v577 = *(char *)(*(_QWORD *)&a1[*v5] + v575);
                *(_QWORD *)&a1[v574] = v576;
                if (v577 < 0)
                {
                  v52 = v573++ > 8;
                  if (!v52)
                    continue;
                }
                goto LABEL_1431;
              }
LABEL_1465:
              a1[*v4] = 1;
              continue;
            }
            break;
          }
          if ((v561 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_3811;
            continue;
          }
          break;
        }
        if ((v561 & 7) == 0)
        {
          v568 = 0;
          while (1)
          {
            v569 = *v2;
            v570 = *(_QWORD *)&a1[v569];
            v571 = v570 + 1;
            if (v570 == -1 || v571 > *(_QWORD *)&a1[*v3])
              goto LABEL_1465;
            v572 = *(char *)(*(_QWORD *)&a1[*v5] + v570);
            *(_QWORD *)&a1[v569] = v571;
            if (v572 < 0)
            {
              v52 = v568++ > 8;
              if (!v52)
                continue;
            }
            goto LABEL_1431;
          }
        }
        goto LABEL_3811;
      case 0x30u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDVenueInfoIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x32u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1475:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3776;
          v578 = 0;
          v579 = 0;
          v580 = 0;
          while (2)
          {
            v581 = *v2;
            v582 = *(_QWORD *)&a1[v581];
            v583 = v582 + 1;
            if (v582 == -1 || v583 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v584 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v582);
              *(_QWORD *)&a1[v581] = v583;
              v580 |= (unint64_t)(v584 & 0x7F) << v578;
              if (v584 < 0)
              {
                v578 += 7;
                v13 = v579++ >= 9;
                if (v13)
                {
                  v580 = 0;
                  v585 = a1[*v4];
                  goto LABEL_1487;
                }
                continue;
              }
            }
            break;
          }
          v585 = a1[*v4];
          if (a1[*v4])
            v580 = 0;
LABEL_1487:
          v586 = v580 & 7;
          if (v585)
            v587 = 1;
          else
            v587 = v586 == 4;
          if (!v587)
          {
            switch((v580 >> 3))
            {
              case 1u:
              case 2u:
              case 4u:
                if (v586 != 2 || !PBReaderPlaceMark() || !GEOPDLinkedPlaceIsValid(a1))
                  goto LABEL_3811;
                PBReaderRecallMark();
                continue;
              case 3u:
                if ((v580 & 7) != 0)
                  goto LABEL_3811;
                v588 = 0;
                break;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
            }
            do
            {
              v589 = *v2;
              v590 = *(_QWORD *)&a1[v589];
              v591 = v590 + 1;
              if (v590 == -1 || v591 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_1475;
              }
              v592 = *(char *)(*(_QWORD *)&a1[*v5] + v590);
              *(_QWORD *)&a1[v589] = v591;
              if ((v592 & 0x80000000) == 0)
                break;
              v52 = v588++ > 8;
            }
            while (!v52);
            continue;
          }
          goto LABEL_3776;
        }
      case 0x33u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1510:
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3411;
            v593 = 0;
            v594 = 0;
            v595 = 0;
            while (2)
            {
              v596 = *v2;
              v597 = *(_QWORD *)&a1[v596];
              v598 = v597 + 1;
              if (v597 == -1 || v598 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v599 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v597);
                *(_QWORD *)&a1[v596] = v598;
                v595 |= (unint64_t)(v599 & 0x7F) << v593;
                if (v599 < 0)
                {
                  v593 += 7;
                  v13 = v594++ >= 9;
                  if (v13)
                  {
                    v595 = 0;
                    v600 = a1[*v4];
                    goto LABEL_1522;
                  }
                  continue;
                }
              }
              break;
            }
            v600 = a1[*v4];
            if (a1[*v4])
              v595 = 0;
LABEL_1522:
            if (v600)
              v601 = 1;
            else
              v601 = (v595 & 7) == 4;
            if (v601)
              goto LABEL_3411;
            v602 = v595 >> 3;
            if ((v595 >> 3) == 3)
            {
              if ((v595 & 7) != 0)
                goto LABEL_3811;
              v608 = 0;
              while (1)
              {
                v609 = *v2;
                v610 = *(_QWORD *)&a1[v609];
                v611 = v610 + 1;
                if (v610 == -1 || v611 > *(_QWORD *)&a1[*v3])
                  break;
                v612 = *(char *)(*(_QWORD *)&a1[*v5] + v610);
                *(_QWORD *)&a1[v609] = v611;
                if (v612 < 0)
                {
                  v52 = v608++ > 8;
                  if (!v52)
                    continue;
                }
                goto LABEL_1510;
              }
LABEL_1553:
              a1[*v4] = 1;
              continue;
            }
            break;
          }
          if ((_DWORD)v602 == 2)
          {
            if ((v595 & 7) != 0)
              goto LABEL_3811;
            v613 = 0;
            while (1)
            {
              v614 = *v2;
              v615 = *(_QWORD *)&a1[v614];
              v616 = v615 + 1;
              if (v615 == -1 || v616 > *(_QWORD *)&a1[*v3])
                goto LABEL_1553;
              v617 = *(char *)(*(_QWORD *)&a1[*v5] + v615);
              *(_QWORD *)&a1[v614] = v616;
              if (v617 < 0)
              {
                v52 = v613++ > 8;
                if (!v52)
                  continue;
              }
              goto LABEL_1510;
            }
          }
          if ((_DWORD)v602 != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_3811;
            continue;
          }
          break;
        }
        if ((v595 & 7) == 0)
        {
          v603 = 0;
          while (1)
          {
            v604 = *v2;
            v605 = *(_QWORD *)&a1[v604];
            v606 = v605 + 1;
            if (v605 == -1 || v606 > *(_QWORD *)&a1[*v3])
              goto LABEL_1553;
            v607 = *(char *)(*(_QWORD *)&a1[*v5] + v605);
            *(_QWORD *)&a1[v604] = v606;
            if (v607 < 0)
            {
              v52 = v603++ > 8;
              if (!v52)
                continue;
            }
            goto LABEL_1510;
          }
        }
LABEL_3811:
        PBReaderRecallMark();
LABEL_3812:
        PBReaderRecallMark();
        return 0;
      case 0x34u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDIconIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x35u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAdamAppIdentifierIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x36u:
      case 0x46u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDSearchBrowseCategorySuggestionResultIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x37u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDStorefrontIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x38u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1571:
        while (2)
        {
          while (2)
          {
            while (2)
            {
              if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                goto LABEL_2246;
              v618 = 0;
              v619 = 0;
              v620 = 0;
              while (2)
              {
                v621 = *v2;
                v622 = *(_QWORD *)&a1[v621];
                v623 = v622 + 1;
                if (v622 == -1 || v623 > *(_QWORD *)&a1[*v3])
                {
                  a1[*v4] = 1;
                }
                else
                {
                  v624 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v622);
                  *(_QWORD *)&a1[v621] = v623;
                  v620 |= (unint64_t)(v624 & 0x7F) << v618;
                  if (v624 < 0)
                  {
                    v618 += 7;
                    v13 = v619++ >= 9;
                    if (v13)
                    {
                      v620 = 0;
                      v625 = a1[*v4];
                      goto LABEL_1583;
                    }
                    continue;
                  }
                }
                break;
              }
              v625 = a1[*v4];
              if (a1[*v4])
                v620 = 0;
LABEL_1583:
              v626 = v620 & 7;
              if (v625)
                v627 = 1;
              else
                v627 = v626 == 4;
              if (v627)
                goto LABEL_2246;
              if ((v620 >> 3) == 2)
              {
                if (v626 != 2 || !PBReaderPlaceMark())
                  goto LABEL_3811;
                objc_msgSend(a1, "position");
                objc_msgSend(a1, "length");
                while (2)
                {
                  if (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
                  {
                    v633 = 0;
                    v634 = 0;
                    v635 = 0;
                    while (1)
                    {
                      v636 = *v2;
                      v637 = *(_QWORD *)&a1[v636];
                      v638 = v637 + 1;
                      if (v637 == -1 || v638 > *(_QWORD *)&a1[*v3])
                        break;
                      v639 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v637);
                      *(_QWORD *)&a1[v636] = v638;
                      v635 |= (unint64_t)(v639 & 0x7F) << v633;
                      if ((v639 & 0x80) == 0)
                        goto LABEL_1610;
                      v633 += 7;
                      v13 = v634++ >= 9;
                      if (v13)
                      {
                        v635 = 0;
                        v640 = *v4;
                        v641 = a1[v640];
                        goto LABEL_1612;
                      }
                    }
                    a1[*v4] = 1;
LABEL_1610:
                    v640 = *v4;
                    v641 = a1[v640];
                    if (a1[v640])
                      v635 = 0;
LABEL_1612:
                    v642 = v635 & 7;
                    if (v641)
                      v643 = 1;
                    else
                      v643 = v642 == 4;
                    if (!v643)
                    {
                      switch((v635 >> 3))
                      {
                        case 1u:
                          if (v642 == 2)
                            goto LABEL_1628;
                          goto LABEL_3798;
                        case 2u:
                          if (v642 == 2)
                            goto LABEL_1628;
                          goto LABEL_3798;
                        case 3u:
                        case 4u:
                          if (v642 != 1)
                            goto LABEL_3798;
                          v644 = *v2;
                          v645 = *(_QWORD *)&a1[v644];
                          if (v645 <= 0xFFFFFFFFFFFFFFF7 && (v646 = v645 + 8, v646 <= *(_QWORD *)&a1[*v3]))
                            *(_QWORD *)&a1[v644] = v646;
                          else
                            a1[v640] = 1;
                          continue;
                        case 5u:
                          if (v642 != 2)
                            goto LABEL_3798;
LABEL_1628:
                          if ((PBReaderSkipValueWithTag() & 1) == 0)
                            goto LABEL_3798;
                          continue;
                        default:
                          if (!PBReaderSkipValueWithTag())
                            goto LABEL_3798;
                          continue;
                      }
                    }
                  }
                  break;
                }
                v647 = a1[*v4];
                PBReaderRecallMark();
                if (!v647)
                {
                  PBReaderRecallMark();
                  continue;
                }
                goto LABEL_3811;
              }
              break;
            }
            if ((v620 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            break;
          }
          if ((v620 & 7) == 0)
          {
            v628 = 0;
            do
            {
              v629 = *v2;
              v630 = *(_QWORD *)&a1[v629];
              v631 = v630 + 1;
              if (v630 == -1 || v631 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_1571;
              }
              v632 = *(char *)(*(_QWORD *)&a1[*v5] + v630);
              *(_QWORD *)&a1[v629] = v631;
              if ((v632 & 0x80000000) == 0)
                break;
              v52 = v628++ > 8;
            }
            while (!v52);
            continue;
          }
          goto LABEL_3811;
        }
      case 0x39u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1639:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3652;
          v648 = 0;
          v649 = 0;
          v650 = 0;
          while (2)
          {
            v651 = *v2;
            v652 = *(_QWORD *)&a1[v651];
            v653 = v652 + 1;
            if (v652 == -1 || v653 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v654 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v652);
              *(_QWORD *)&a1[v651] = v653;
              v650 |= (unint64_t)(v654 & 0x7F) << v648;
              if (v654 < 0)
              {
                v648 += 7;
                v13 = v649++ >= 9;
                if (v13)
                {
                  v650 = 0;
                  v655 = a1[*v4];
                  goto LABEL_1651;
                }
                continue;
              }
            }
            break;
          }
          v655 = a1[*v4];
          if (a1[*v4])
            v650 = 0;
LABEL_1651:
          v656 = v650 & 7;
          if (v655)
            v657 = 1;
          else
            v657 = v656 == 4;
          if (v657)
            goto LABEL_3652;
          switch((v650 >> 3))
          {
            case 1u:
              if (v656 == 2)
                goto LABEL_1657;
              goto LABEL_3811;
            case 2u:
              if (v656 != 2 || !PBReaderPlaceMark())
                goto LABEL_3811;
              objc_msgSend(a1, "position");
              objc_msgSend(a1, "length");
LABEL_1662:
              while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
              {
                v658 = 0;
                v659 = 0;
                v660 = 0;
                while (1)
                {
                  v661 = *v2;
                  v662 = *(_QWORD *)&a1[v661];
                  v663 = v662 + 1;
                  if (v662 == -1 || v663 > *(_QWORD *)&a1[*v3])
                    break;
                  v664 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v662);
                  *(_QWORD *)&a1[v661] = v663;
                  v660 |= (unint64_t)(v664 & 0x7F) << v658;
                  if ((v664 & 0x80) == 0)
                    goto LABEL_1672;
                  v658 += 7;
                  v13 = v659++ >= 9;
                  if (v13)
                  {
                    v660 = 0;
                    v665 = a1[*v4];
                    goto LABEL_1674;
                  }
                }
                a1[*v4] = 1;
LABEL_1672:
                v665 = a1[*v4];
                if (a1[*v4])
                  v660 = 0;
LABEL_1674:
                v666 = v660 & 7;
                if (v665 || v666 == 4)
                  break;
                if ((v660 >> 3) == 2)
                {
                  if ((v660 & 7) == 0)
                  {
                    v683 = 0;
                    do
                    {
                      v684 = *v2;
                      v685 = *(_QWORD *)&a1[v684];
                      v686 = v685 + 1;
                      if (v685 == -1 || v686 > *(_QWORD *)&a1[*v3])
                      {
                        a1[*v4] = 1;
                        goto LABEL_1662;
                      }
                      v687 = *(char *)(*(_QWORD *)&a1[*v5] + v685);
                      *(_QWORD *)&a1[v684] = v686;
                      if ((v687 & 0x80000000) == 0)
                        break;
                      v52 = v683++ > 8;
                    }
                    while (!v52);
                    continue;
                  }
                  goto LABEL_3807;
                }
                if ((v660 >> 3) == 1)
                {
                  if (v666 == 2 && PBReaderPlaceMark())
                  {
                    objc_msgSend(a1, "position");
                    objc_msgSend(a1, "length");
LABEL_1683:
                    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
                    {
                      v668 = 0;
                      v669 = 0;
                      v670 = 0;
                      while (1)
                      {
                        v671 = *v2;
                        v672 = *(_QWORD *)&a1[v671];
                        v673 = v672 + 1;
                        if (v672 == -1 || v673 > *(_QWORD *)&a1[*v3])
                          break;
                        v674 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v672);
                        *(_QWORD *)&a1[v671] = v673;
                        v670 |= (unint64_t)(v674 & 0x7F) << v668;
                        if ((v674 & 0x80) == 0)
                          goto LABEL_1693;
                        v668 += 7;
                        v13 = v669++ >= 9;
                        if (v13)
                        {
                          v670 = 0;
                          v675 = a1[*v4];
                          goto LABEL_1695;
                        }
                      }
                      a1[*v4] = 1;
LABEL_1693:
                      v675 = a1[*v4];
                      if (a1[*v4])
                        v670 = 0;
LABEL_1695:
                      v676 = v670 & 7;
                      if (v675 || v676 == 4)
                        break;
                      switch((v670 >> 3))
                      {
                        case 1u:
                          if (v676 != 2 || !PBReaderPlaceMark() || !GEOPDPhotoIsValid(a1))
                            goto LABEL_3804;
                          PBReaderRecallMark();
                          continue;
                        case 2u:
                          if (v676 == 2)
                            goto LABEL_1707;
                          goto LABEL_3804;
                        case 3u:
                          if (v676 == 2)
                            goto LABEL_1707;
                          goto LABEL_3804;
                        case 4u:
                          if ((v670 & 7) != 0)
                            goto LABEL_3804;
                          v678 = 0;
                          break;
                        default:
LABEL_1707:
                          if ((PBReaderSkipValueWithTag() & 1) == 0)
                            goto LABEL_3804;
                          continue;
                      }
                      while (1)
                      {
                        v679 = *v2;
                        v680 = *(_QWORD *)&a1[v679];
                        v681 = v680 + 1;
                        if (v680 == -1 || v681 > *(_QWORD *)&a1[*v3])
                          break;
                        v682 = *(char *)(*(_QWORD *)&a1[*v5] + v680);
                        *(_QWORD *)&a1[v679] = v681;
                        if (v682 < 0)
                        {
                          v52 = v678++ > 8;
                          if (!v52)
                            continue;
                        }
                        goto LABEL_1683;
                      }
                      a1[*v4] = 1;
                    }
                    v688 = a1[*v4];
                    PBReaderRecallMark();
                    if (!v688)
                    {
                      PBReaderRecallMark();
                      continue;
                    }
                  }
LABEL_3807:
                  PBReaderRecallMark();
                  goto LABEL_3811;
                }
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3807;
              }
              v734 = a1[*v4];
              PBReaderRecallMark();
              if (v734)
                goto LABEL_3811;
              goto LABEL_1833;
            case 3u:
              if (v656 != 2 || !PBReaderPlaceMark())
                goto LABEL_3811;
              objc_msgSend(a1, "position");
              objc_msgSend(a1, "length");
              break;
            case 4u:
              if ((v650 & 7) != 0)
                goto LABEL_3811;
              v729 = 0;
              do
              {
                v730 = *v2;
                v731 = *(_QWORD *)&a1[v730];
                v732 = v731 + 1;
                if (v731 == -1 || v732 > *(_QWORD *)&a1[*v3])
                {
                  a1[*v4] = 1;
                  goto LABEL_1639;
                }
                v733 = *(char *)(*(_QWORD *)&a1[*v5] + v731);
                *(_QWORD *)&a1[v730] = v732;
                if ((v733 & 0x80000000) == 0)
                  break;
                v52 = v729++ > 8;
              }
              while (!v52);
              continue;
            default:
LABEL_1657:
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
          }
          break;
        }
        while (1)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_1832;
          v689 = 0;
          v690 = 0;
          v691 = 0;
          while (1)
          {
            v692 = *v2;
            v693 = *(_QWORD *)&a1[v692];
            v694 = v693 + 1;
            if (v693 == -1 || v694 > *(_QWORD *)&a1[*v3])
              break;
            v695 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v693);
            *(_QWORD *)&a1[v692] = v694;
            v691 |= (unint64_t)(v695 & 0x7F) << v689;
            if ((v695 & 0x80) == 0)
              goto LABEL_1744;
            v689 += 7;
            v13 = v690++ >= 9;
            if (v13)
            {
              v691 = 0;
              v696 = a1[*v4];
              goto LABEL_1746;
            }
          }
          a1[*v4] = 1;
LABEL_1744:
          v696 = a1[*v4];
          if (a1[*v4])
            v691 = 0;
LABEL_1746:
          v697 = v691 & 7;
          if (v696 || v697 == 4)
          {
LABEL_1832:
            v735 = a1[*v4];
            PBReaderRecallMark();
            if (v735)
              goto LABEL_3811;
LABEL_1833:
            PBReaderRecallMark();
            goto LABEL_1639;
          }
          if ((v691 >> 3) == 2)
            break;
          if ((v691 >> 3) == 1)
          {
            if (v697 != 2 || !PBReaderPlaceMark())
              goto LABEL_3807;
            objc_msgSend(a1, "position");
            objc_msgSend(a1, "length");
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
            {
              v699 = 0;
              v700 = 0;
              v701 = 0;
              while (1)
              {
                v702 = *v2;
                v703 = *(_QWORD *)&a1[v702];
                v704 = v703 + 1;
                if (v703 == -1 || v704 > *(_QWORD *)&a1[*v3])
                  break;
                v705 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v703);
                *(_QWORD *)&a1[v702] = v704;
                v701 |= (unint64_t)(v705 & 0x7F) << v699;
                if ((v705 & 0x80) == 0)
                  goto LABEL_1765;
                v699 += 7;
                v13 = v700++ >= 9;
                if (v13)
                {
                  v701 = 0;
                  v706 = a1[*v4];
                  goto LABEL_1767;
                }
              }
              a1[*v4] = 1;
LABEL_1765:
              v706 = a1[*v4];
              if (a1[*v4])
                v701 = 0;
LABEL_1767:
              v707 = v701 & 7;
              if (v706 || v707 == 4)
                break;
              if ((v701 >> 3) == 1)
              {
                if (v707 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3806;
              }
              else if (!PBReaderSkipValueWithTag())
              {
                goto LABEL_3806;
              }
            }
LABEL_1817:
            v728 = a1[*v4];
            PBReaderRecallMark();
            if (!v728)
            {
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_3807;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_3807;
        }
        if (v697 != 2 || !PBReaderPlaceMark())
          goto LABEL_3807;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (1)
        {
          while (1)
          {
LABEL_1780:
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_1817;
            v709 = 0;
            v710 = 0;
            v711 = 0;
            while (1)
            {
              v712 = *v2;
              v713 = *(_QWORD *)&a1[v712];
              v714 = v713 + 1;
              if (v713 == -1 || v714 > *(_QWORD *)&a1[*v3])
                break;
              v715 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v713);
              *(_QWORD *)&a1[v712] = v714;
              v711 |= (unint64_t)(v715 & 0x7F) << v709;
              if ((v715 & 0x80) == 0)
                goto LABEL_1790;
              v709 += 7;
              v13 = v710++ >= 9;
              if (v13)
              {
                v711 = 0;
                v716 = a1[*v4];
                goto LABEL_1792;
              }
            }
            a1[*v4] = 1;
LABEL_1790:
            v716 = a1[*v4];
            if (a1[*v4])
              v711 = 0;
LABEL_1792:
            if (v716 || (v711 & 7) == 4)
              goto LABEL_1817;
            if ((v711 >> 3) != 2)
              break;
            if ((v711 & 7) != 0)
              goto LABEL_3806;
            v723 = 0;
            while (1)
            {
              v724 = *v2;
              v725 = *(_QWORD *)&a1[v724];
              v726 = v725 + 1;
              if (v725 == -1 || v726 > *(_QWORD *)&a1[*v3])
                break;
              v727 = *(char *)(*(_QWORD *)&a1[*v5] + v725);
              *(_QWORD *)&a1[v724] = v726;
              if (v727 < 0)
              {
                v52 = v723++ > 8;
                if (!v52)
                  continue;
              }
              goto LABEL_1780;
            }
LABEL_1814:
            a1[*v4] = 1;
          }
          if ((v711 >> 3) == 1)
          {
            if ((v711 & 7) != 0)
              goto LABEL_3806;
            v718 = 0;
            while (1)
            {
              v719 = *v2;
              v720 = *(_QWORD *)&a1[v719];
              v721 = v720 + 1;
              if (v720 == -1 || v721 > *(_QWORD *)&a1[*v3])
                goto LABEL_1814;
              v722 = *(char *)(*(_QWORD *)&a1[*v5] + v720);
              *(_QWORD *)&a1[v719] = v721;
              if (v722 < 0)
              {
                v52 = v718++ > 8;
                if (!v52)
                  continue;
              }
              goto LABEL_1780;
            }
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_3806:
            PBReaderRecallMark();
            goto LABEL_3807;
          }
        }
      case 0x3Au:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1837:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3366;
          v736 = 0;
          v737 = 0;
          v738 = 0;
          while (2)
          {
            v739 = *v2;
            v740 = *(_QWORD *)&a1[v739];
            v741 = v740 + 1;
            if (v740 == -1 || v741 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v742 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v740);
              *(_QWORD *)&a1[v739] = v741;
              v738 |= (unint64_t)(v742 & 0x7F) << v736;
              if (v742 < 0)
              {
                v736 += 7;
                v13 = v737++ >= 9;
                if (v13)
                {
                  v738 = 0;
                  v743 = a1[*v4];
                  goto LABEL_1849;
                }
                continue;
              }
            }
            break;
          }
          v743 = a1[*v4];
          if (a1[*v4])
            v738 = 0;
LABEL_1849:
          v744 = v738 & 7;
          if (v743)
            v745 = 1;
          else
            v745 = v744 == 4;
          if (!v745)
          {
            switch((v738 >> 3))
            {
              case 1u:
              case 4u:
                if (v744 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1))
                  goto LABEL_3811;
                goto LABEL_1940;
              case 2u:
                if (v744 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1))
                  goto LABEL_3811;
                goto LABEL_1940;
              case 3u:
                if (v744 != 2 || !PBReaderPlaceMark())
                  goto LABEL_3811;
                objc_msgSend(a1, "position");
                objc_msgSend(a1, "length");
                while (1)
                {
LABEL_1867:
                  if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                    goto LABEL_1939;
                  v746 = 0;
                  v747 = 0;
                  v748 = 0;
                  while (1)
                  {
                    v749 = *v2;
                    v750 = *(_QWORD *)&a1[v749];
                    v751 = v750 + 1;
                    if (v750 == -1 || v751 > *(_QWORD *)&a1[*v3])
                      break;
                    v752 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v750);
                    *(_QWORD *)&a1[v749] = v751;
                    v748 |= (unint64_t)(v752 & 0x7F) << v746;
                    if ((v752 & 0x80) == 0)
                      goto LABEL_1877;
                    v746 += 7;
                    v13 = v747++ >= 9;
                    if (v13)
                    {
                      v748 = 0;
                      v753 = a1[*v4];
                      goto LABEL_1879;
                    }
                  }
                  a1[*v4] = 1;
LABEL_1877:
                  v753 = a1[*v4];
                  if (a1[*v4])
                    v748 = 0;
LABEL_1879:
                  v754 = v748 & 7;
                  if (v753 || v754 == 4)
                    goto LABEL_1939;
                  if ((v748 >> 3) == 2)
                    break;
                  if ((v748 >> 3) == 1)
                  {
                    if ((v748 & 7) == 0)
                    {
                      v756 = 0;
                      do
                      {
                        v757 = *v2;
                        v758 = *(_QWORD *)&a1[v757];
                        v759 = v758 + 1;
                        if (v758 == -1 || v759 > *(_QWORD *)&a1[*v3])
                        {
                          a1[*v4] = 1;
                          goto LABEL_1867;
                        }
                        v760 = *(char *)(*(_QWORD *)&a1[*v5] + v758);
                        *(_QWORD *)&a1[v757] = v759;
                        if ((v760 & 0x80000000) == 0)
                          break;
                        v52 = v756++ > 8;
                      }
                      while (!v52);
                      continue;
                    }
                    goto LABEL_3796;
                  }
                  if ((PBReaderSkipValueWithTag() & 1) == 0)
                    goto LABEL_3796;
                }
                if (v754 == 2 && PBReaderPlaceMark() && GEOPDCategoryIsValid(a1))
                {
                  PBReaderRecallMark();
                  goto LABEL_1867;
                }
                goto LABEL_3796;
              case 5u:
                if (v744 != 2 || !PBReaderPlaceMark() || !GEOPDDateTimeRangeIsValid(a1))
                  goto LABEL_3811;
                goto LABEL_1940;
              case 6u:
                if (v744 == 2 && PBReaderPlaceMark() && GEOTimezoneIsValid(a1))
                  goto LABEL_1940;
                goto LABEL_3811;
              case 7u:
                if (v744 != 2 || !PBReaderPlaceMark())
                  goto LABEL_3811;
                objc_msgSend(a1, "position");
                objc_msgSend(a1, "length");
LABEL_1911:
                if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                  goto LABEL_1939;
                v761 = 0;
                v762 = 0;
                v763 = 0;
                break;
              case 8u:
                if ((v738 & 7) != 0)
                  goto LABEL_3811;
                v772 = 0;
                do
                {
                  v773 = *v2;
                  v774 = *(_QWORD *)&a1[v773];
                  v775 = v774 + 1;
                  if (v774 == -1 || v775 > *(_QWORD *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_1837;
                  }
                  v776 = *(char *)(*(_QWORD *)&a1[*v5] + v774);
                  *(_QWORD *)&a1[v773] = v775;
                  if ((v776 & 0x80000000) == 0)
                    break;
                  v52 = v772++ > 8;
                }
                while (!v52);
                continue;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
            }
            while (1)
            {
              v764 = *v2;
              v765 = *(_QWORD *)&a1[v764];
              v766 = v765 + 1;
              if (v765 == -1 || v766 > *(_QWORD *)&a1[*v3])
                break;
              v767 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v765);
              *(_QWORD *)&a1[v764] = v766;
              v763 |= (unint64_t)(v767 & 0x7F) << v761;
              if ((v767 & 0x80) == 0)
                goto LABEL_1921;
              v761 += 7;
              v13 = v762++ >= 9;
              if (v13)
              {
                v763 = 0;
                v768 = a1[*v4];
                goto LABEL_1923;
              }
            }
            a1[*v4] = 1;
LABEL_1921:
            v768 = a1[*v4];
            if (a1[*v4])
              v763 = 0;
LABEL_1923:
            v769 = v763 & 7;
            if (v768)
              v770 = 1;
            else
              v770 = v769 == 4;
            if (!v770)
            {
              switch((v763 >> 3))
              {
                case 1u:
                  if (v769 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1))
                    goto LABEL_3796;
                  PBReaderRecallMark();
                  goto LABEL_1911;
                case 2u:
                  if (v769 == 2)
                    goto LABEL_1937;
                  goto LABEL_3796;
                case 3u:
                  if (v769 == 2)
                    goto LABEL_1937;
                  goto LABEL_3796;
                case 4u:
                  if (v769 == 2)
                    goto LABEL_1937;
                  goto LABEL_3796;
                default:
LABEL_1937:
                  if ((PBReaderSkipValueWithTag() & 1) == 0)
                    goto LABEL_3796;
                  goto LABEL_1911;
              }
            }
LABEL_1939:
            v771 = a1[*v4];
            PBReaderRecallMark();
            if (!v771)
            {
LABEL_1940:
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_3811;
          }
          goto LABEL_3366;
        }
      case 0x3Bu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDStorefrontPresentationIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x3Cu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlacecardLayoutConfigurationIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x3Du:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1961:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_2246;
          v777 = 0;
          v778 = 0;
          v779 = 0;
          while (2)
          {
            v780 = *v2;
            v781 = *(_QWORD *)&a1[v780];
            v782 = v781 + 1;
            if (v781 == -1 || v782 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v783 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v781);
              *(_QWORD *)&a1[v780] = v782;
              v779 |= (unint64_t)(v783 & 0x7F) << v777;
              if (v783 < 0)
              {
                v777 += 7;
                v13 = v778++ >= 9;
                if (v13)
                {
                  v779 = 0;
                  v784 = a1[*v4];
                  goto LABEL_1973;
                }
                continue;
              }
            }
            break;
          }
          v784 = a1[*v4];
          if (a1[*v4])
            v779 = 0;
LABEL_1973:
          v785 = v779 & 7;
          if (v784)
            v786 = 1;
          else
            v786 = v785 == 4;
          if (v786)
            goto LABEL_2246;
          if ((v779 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_3811;
            continue;
          }
          break;
        }
        if (v785 != 2 || !PBReaderPlaceMark())
          goto LABEL_3811;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (1)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_2011;
          v787 = 0;
          v788 = 0;
          v789 = 0;
          while (1)
          {
            v790 = *v2;
            v791 = *(_QWORD *)&a1[v790];
            v792 = v791 + 1;
            if (v791 == -1 || v792 > *(_QWORD *)&a1[*v3])
              break;
            v793 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v791);
            *(_QWORD *)&a1[v790] = v792;
            v789 |= (unint64_t)(v793 & 0x7F) << v787;
            if ((v793 & 0x80) == 0)
              goto LABEL_1991;
            v787 += 7;
            v13 = v788++ >= 9;
            if (v13)
            {
              v789 = 0;
              v794 = a1[*v4];
              goto LABEL_1993;
            }
          }
          a1[*v4] = 1;
LABEL_1991:
          v794 = a1[*v4];
          if (a1[*v4])
            v789 = 0;
LABEL_1993:
          v795 = v789 & 7;
          if (v794 || v795 == 4)
          {
LABEL_2011:
            v798 = a1[*v4];
            PBReaderRecallMark();
            if (!v798)
            {
              PBReaderRecallMark();
              goto LABEL_1961;
            }
            goto LABEL_3811;
          }
          v797 = v789 >> 3;
          if ((v789 >> 3) == 3)
            break;
          if ((_DWORD)v797 == 2)
          {
            if (v795 != 2)
              goto LABEL_3798;
            goto LABEL_2005;
          }
          if ((_DWORD)v797 == 1)
          {
            if (v795 != 2)
              goto LABEL_3798;
LABEL_2005:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_3798;
          }
          else if (!PBReaderSkipValueWithTag())
          {
            goto LABEL_3798;
          }
        }
        if (v795 != 2)
          goto LABEL_3798;
        goto LABEL_2005;
      case 0x3Eu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPBTransitVehiclePositionIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x3Fu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v799 = 0;
            v800 = 0;
            v801 = 0;
            while (2)
            {
              v802 = *v2;
              v803 = *(_QWORD *)&a1[v802];
              v804 = v803 + 1;
              if (v803 == -1 || v804 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v805 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v803);
                *(_QWORD *)&a1[v802] = v804;
                v801 |= (unint64_t)(v805 & 0x7F) << v799;
                if (v805 < 0)
                {
                  v799 += 7;
                  v13 = v800++ >= 9;
                  if (v13)
                  {
                    v801 = 0;
                    v806 = a1[*v4];
                    goto LABEL_2032;
                  }
                  continue;
                }
              }
              break;
            }
            v806 = a1[*v4];
            if (a1[*v4])
              v801 = 0;
LABEL_2032:
            v807 = v801 & 7;
            if (v806)
              v808 = 1;
            else
              v808 = v807 == 4;
            if (v808)
              goto LABEL_3776;
            v809 = v801 >> 3;
            if ((v801 >> 3) == 3)
            {
              if (v807 != 2 || !PBReaderPlaceMark() || !GEOPDBusinessHoursIsValid(a1))
                goto LABEL_3811;
            }
            else if ((_DWORD)v809 == 2)
            {
              if (v807 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceInfoIsValid(a1))
                goto LABEL_3811;
            }
            else
            {
              if ((_DWORD)v809 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
              }
              if (v807 != 2 || !PBReaderPlaceMark() || !GEOPDEntityIsValid(a1))
                goto LABEL_3811;
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0x40u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDBusinessHoursIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x41u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceCollectionIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x42u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_2064:
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v810 = 0;
            v811 = 0;
            v812 = 0;
            while (2)
            {
              v813 = *v2;
              v814 = *(_QWORD *)&a1[v813];
              v815 = v814 + 1;
              if (v814 == -1 || v815 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v816 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v814);
                *(_QWORD *)&a1[v813] = v815;
                v812 |= (unint64_t)(v816 & 0x7F) << v810;
                if (v816 < 0)
                {
                  v810 += 7;
                  v13 = v811++ >= 9;
                  if (v13)
                  {
                    v812 = 0;
                    v817 = a1[*v4];
                    goto LABEL_2076;
                  }
                  continue;
                }
              }
              break;
            }
            v817 = a1[*v4];
            if (a1[*v4])
              v812 = 0;
LABEL_2076:
            v818 = v812 & 7;
            if (v817)
              v819 = 1;
            else
              v819 = v818 == 4;
            if (v819)
              goto LABEL_3776;
            v820 = v812 >> 3;
            if ((v812 >> 3) == 3)
            {
              if (v818 == 2)
              {
                if (!PBReaderPlaceMark())
                  goto LABEL_3811;
LABEL_2106:
                while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
                {
                  v831 = a1[*v4];
                  if (a1[*v4])
                    break;
                  while (1)
                  {
                    v832 = *v2;
                    v833 = *(_QWORD *)&a1[v832];
                    v834 = v833 + 1;
                    if (v833 == -1 || v834 > *(_QWORD *)&a1[*v3])
                      break;
                    v835 = *(char *)(*(_QWORD *)&a1[*v5] + v833);
                    *(_QWORD *)&a1[v832] = v834;
                    if (v835 < 0)
                    {
                      v13 = v831++ >= 9;
                      if (!v13)
                        continue;
                    }
                    goto LABEL_2106;
                  }
                  a1[*v4] = 1;
                }
                goto LABEL_2086;
              }
              if ((v812 & 7) != 0)
                goto LABEL_3811;
              while (1)
              {
                v821 = *v2;
                v822 = *(_QWORD *)&a1[v821];
                v823 = v822 + 1;
                if (v822 == -1 || v823 > *(_QWORD *)&a1[*v3])
                  break;
                v824 = *(char *)(*(_QWORD *)&a1[*v5] + v822);
                *(_QWORD *)&a1[v821] = v823;
                if (v824 < 0)
                {
                  v825 = v818++;
                  if (v825 <= 8)
                    continue;
                }
                goto LABEL_2064;
              }
            }
            else
            {
              if ((_DWORD)v820 != 2)
              {
                if ((_DWORD)v820 != 1)
                {
                  if ((PBReaderSkipValueWithTag() & 1) == 0)
                    goto LABEL_3811;
                  continue;
                }
                if (v818 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1))
                  goto LABEL_3811;
LABEL_2086:
                PBReaderRecallMark();
                continue;
              }
              if ((v812 & 7) != 0)
                goto LABEL_3811;
              v826 = 0;
              while (1)
              {
                v827 = *v2;
                v828 = *(_QWORD *)&a1[v827];
                v829 = v828 + 1;
                if (v828 == -1 || v829 > *(_QWORD *)&a1[*v3])
                  break;
                v830 = *(char *)(*(_QWORD *)&a1[*v5] + v828);
                *(_QWORD *)&a1[v827] = v829;
                if (v830 < 0)
                {
                  v52 = v826++ > 8;
                  if (!v52)
                    continue;
                }
                goto LABEL_2064;
              }
            }
            break;
          }
          a1[*v4] = 1;
          continue;
        }
      case 0x43u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v836 = 0;
            v837 = 0;
            v838 = 0;
            while (2)
            {
              v839 = *v2;
              v840 = *(_QWORD *)&a1[v839];
              v841 = v840 + 1;
              if (v840 == -1 || v841 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v842 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v840);
                *(_QWORD *)&a1[v839] = v841;
                v838 |= (unint64_t)(v842 & 0x7F) << v836;
                if (v842 < 0)
                {
                  v836 += 7;
                  v13 = v837++ >= 9;
                  if (v13)
                  {
                    v838 = 0;
                    v843 = a1[*v4];
                    goto LABEL_2130;
                  }
                  continue;
                }
              }
              break;
            }
            v843 = a1[*v4];
            if (a1[*v4])
              v838 = 0;
LABEL_2130:
            v844 = v838 & 7;
            if (v843)
              v845 = 1;
            else
              v845 = v844 == 4;
            if (v845)
              goto LABEL_3776;
            if ((v838 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            break;
          }
          if (v844 == 2 && PBReaderPlaceMark() && GEOPDTransitInfoSnippetIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x44u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v846 = 0;
            v847 = 0;
            v848 = 0;
            while (2)
            {
              v849 = *v2;
              v850 = *(_QWORD *)&a1[v849];
              v851 = v850 + 1;
              if (v850 == -1 || v851 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v852 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v850);
                *(_QWORD *)&a1[v849] = v851;
                v848 |= (unint64_t)(v852 & 0x7F) << v846;
                if (v852 < 0)
                {
                  v846 += 7;
                  v13 = v847++ >= 9;
                  if (v13)
                  {
                    v848 = 0;
                    v853 = a1[*v4];
                    goto LABEL_2156;
                  }
                  continue;
                }
              }
              break;
            }
            v853 = a1[*v4];
            if (a1[*v4])
              v848 = 0;
LABEL_2156:
            v854 = v848 & 7;
            if (v853)
              v855 = 1;
            else
              v855 = v854 == 4;
            if (v855)
              goto LABEL_3776;
            if ((v848 >> 3) != 2)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            break;
          }
          if (v854 == 2 && PBReaderPlaceMark() && GEOPDDepartureSequenceIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x45u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_2170:
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v856 = 0;
          v857 = 0;
          v858 = 0;
          while (2)
          {
            v859 = *v2;
            v860 = *(_QWORD *)&a1[v859];
            v861 = v860 + 1;
            if (v860 == -1 || v861 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v862 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v860);
              *(_QWORD *)&a1[v859] = v861;
              v858 |= (unint64_t)(v862 & 0x7F) << v856;
              if (v862 < 0)
              {
                v856 += 7;
                v13 = v857++ >= 9;
                if (v13)
                {
                  v858 = 0;
                  v863 = a1[*v4];
                  goto LABEL_2182;
                }
                continue;
              }
            }
            break;
          }
          v863 = a1[*v4];
          if (a1[*v4])
            v858 = 0;
LABEL_2182:
          v864 = v858 & 7;
          if (v863)
            v865 = 1;
          else
            v865 = v864 == 4;
          if (!v865)
          {
            if ((v858 >> 3) == 2)
            {
              if (v864 != 2)
              {
                if ((v858 & 7) == 0)
                {
                  do
                  {
                    v881 = *v2;
                    v882 = *(_QWORD *)&a1[v881];
                    v883 = v882 + 1;
                    if (v882 == -1 || v883 > *(_QWORD *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_2170;
                    }
                    v884 = *(char *)(*(_QWORD *)&a1[*v5] + v882);
                    *(_QWORD *)&a1[v881] = v883;
                    if ((v884 & 0x80000000) == 0)
                      break;
                    v885 = v864++;
                  }
                  while (v885 <= 8);
                  continue;
                }
                goto LABEL_3811;
              }
              if (!PBReaderPlaceMark())
                goto LABEL_3811;
LABEL_2235:
              while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
              {
                v887 = a1[*v4];
                if (a1[*v4])
                  break;
                while (1)
                {
                  v888 = *v2;
                  v889 = *(_QWORD *)&a1[v888];
                  v890 = v889 + 1;
                  if (v889 == -1 || v890 > *(_QWORD *)&a1[*v3])
                    break;
                  v891 = *(char *)(*(_QWORD *)&a1[*v5] + v889);
                  *(_QWORD *)&a1[v888] = v890;
                  if (v891 < 0)
                  {
                    v13 = v887++ >= 9;
                    if (!v13)
                      continue;
                  }
                  goto LABEL_2235;
                }
                a1[*v4] = 1;
              }
            }
            else
            {
              if ((v858 >> 3) != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
              }
              if (v864 != 2 || !PBReaderPlaceMark())
                goto LABEL_3811;
              objc_msgSend(a1, "position");
              objc_msgSend(a1, "length");
LABEL_2191:
              while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
              {
                v866 = 0;
                v867 = 0;
                v868 = 0;
                while (1)
                {
                  v869 = *v2;
                  v870 = *(_QWORD *)&a1[v869];
                  v871 = v870 + 1;
                  if (v870 == -1 || v871 > *(_QWORD *)&a1[*v3])
                    break;
                  v872 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v870);
                  *(_QWORD *)&a1[v869] = v871;
                  v868 |= (unint64_t)(v872 & 0x7F) << v866;
                  if ((v872 & 0x80) == 0)
                    goto LABEL_2201;
                  v866 += 7;
                  v13 = v867++ >= 9;
                  if (v13)
                  {
                    v868 = 0;
                    v873 = a1[*v4];
                    goto LABEL_2203;
                  }
                }
                a1[*v4] = 1;
LABEL_2201:
                v873 = a1[*v4];
                if (a1[*v4])
                  v868 = 0;
LABEL_2203:
                v874 = v868 & 7;
                if (v873 || v874 == 4)
                  break;
                if ((v868 >> 3) == 2)
                {
                  if (v874 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
                  {
LABEL_3798:
                    PBReaderRecallMark();
                    goto LABEL_3811;
                  }
                }
                else if ((v868 >> 3) == 1)
                {
                  if ((v868 & 7) != 0)
                    goto LABEL_3798;
                  v876 = 0;
                  while (1)
                  {
                    v877 = *v2;
                    v878 = *(_QWORD *)&a1[v877];
                    v879 = v878 + 1;
                    if (v878 == -1 || v879 > *(_QWORD *)&a1[*v3])
                      break;
                    v880 = *(char *)(*(_QWORD *)&a1[*v5] + v878);
                    *(_QWORD *)&a1[v877] = v879;
                    if (v880 < 0)
                    {
                      v52 = v876++ > 8;
                      if (!v52)
                        continue;
                    }
                    goto LABEL_2191;
                  }
                  a1[*v4] = 1;
                }
                else if (!PBReaderSkipValueWithTag())
                {
                  goto LABEL_3798;
                }
              }
              v886 = a1[*v4];
              PBReaderRecallMark();
              if (v886)
                goto LABEL_3811;
            }
            PBReaderRecallMark();
            continue;
          }
          break;
        }
LABEL_2246:
        v892 = a1[*v4];
        PBReaderRecallMark();
        if (v892)
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x47u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPublisherIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x48u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_2255:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3366;
          v893 = 0;
          v894 = 0;
          v895 = 0;
          while (2)
          {
            v896 = *v2;
            v897 = *(_QWORD *)&a1[v896];
            v898 = v897 + 1;
            if (v897 == -1 || v898 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v899 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v897);
              *(_QWORD *)&a1[v896] = v898;
              v895 |= (unint64_t)(v899 & 0x7F) << v893;
              if (v899 < 0)
              {
                v893 += 7;
                v13 = v894++ >= 9;
                if (v13)
                {
                  v895 = 0;
                  v900 = a1[*v4];
                  goto LABEL_2267;
                }
                continue;
              }
            }
            break;
          }
          v900 = a1[*v4];
          if (a1[*v4])
            v895 = 0;
LABEL_2267:
          v901 = v895 & 7;
          if (v900)
            v902 = 1;
          else
            v902 = v901 == 4;
          if (v902)
            goto LABEL_3366;
          if ((v895 >> 3) == 2)
          {
            if (v901 != 2)
              goto LABEL_3811;
          }
          else if ((v895 >> 3) == 1)
          {
            if (v901 != 2 || !PBReaderPlaceMark())
              goto LABEL_3811;
            objc_msgSend(a1, "position");
            objc_msgSend(a1, "length");
            while (1)
            {
              while (1)
              {
                if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                  goto LABEL_2302;
                v903 = 0;
                v904 = 0;
                v905 = 0;
                while (1)
                {
                  v906 = *v2;
                  v907 = *(_QWORD *)&a1[v906];
                  v908 = v907 + 1;
                  if (v907 == -1 || v908 > *(_QWORD *)&a1[*v3])
                    break;
                  v909 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v907);
                  *(_QWORD *)&a1[v906] = v908;
                  v905 |= (unint64_t)(v909 & 0x7F) << v903;
                  if ((v909 & 0x80) == 0)
                    goto LABEL_2286;
                  v903 += 7;
                  v13 = v904++ >= 9;
                  if (v13)
                  {
                    v905 = 0;
                    v910 = a1[*v4];
                    goto LABEL_2288;
                  }
                }
                a1[*v4] = 1;
LABEL_2286:
                v910 = a1[*v4];
                if (a1[*v4])
                  v905 = 0;
LABEL_2288:
                v911 = v905 & 7;
                if (v910 || v911 == 4)
                {
LABEL_2302:
                  v913 = a1[*v4];
                  PBReaderRecallMark();
                  if (!v913)
                  {
                    PBReaderRecallMark();
                    goto LABEL_2255;
                  }
                  goto LABEL_3811;
                }
                if ((v905 >> 3) == 1)
                  break;
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3796;
              }
              if (v911 != 2 || !PBReaderPlaceMark() || !GEOStyleAttributesIsValid(a1))
                break;
              PBReaderRecallMark();
            }
LABEL_3796:
            PBReaderRecallMark();
            goto LABEL_3811;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_3811;
          continue;
        }
      case 0x49u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceQuestionnaireResultIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x4Au:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceCollectionItemIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x4Cu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v914 = 0;
            v915 = 0;
            v916 = 0;
            while (2)
            {
              v917 = *v2;
              v918 = *(_QWORD *)&a1[v917];
              v919 = v918 + 1;
              if (v918 == -1 || v919 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v920 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v918);
                *(_QWORD *)&a1[v917] = v919;
                v916 |= (unint64_t)(v920 & 0x7F) << v914;
                if (v920 < 0)
                {
                  v914 += 7;
                  v13 = v915++ >= 9;
                  if (v13)
                  {
                    v916 = 0;
                    v921 = a1[*v4];
                    goto LABEL_2327;
                  }
                  continue;
                }
              }
              break;
            }
            v921 = a1[*v4];
            if (a1[*v4])
              v916 = 0;
LABEL_2327:
            v922 = v916 & 7;
            if (v921)
              v923 = 1;
            else
              v923 = v922 == 4;
            if (v923)
              goto LABEL_3776;
            if ((v916 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            break;
          }
          if (v922 == 2 && PBReaderPlaceMark() && GEOPDMapsIdentifierIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x4Du:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_2341:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3776;
          v924 = 0;
          v925 = 0;
          v926 = 0;
          while (2)
          {
            v927 = *v2;
            v928 = *(_QWORD *)&a1[v927];
            v929 = v928 + 1;
            if (v928 == -1 || v929 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v930 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v928);
              *(_QWORD *)&a1[v927] = v929;
              v926 |= (unint64_t)(v930 & 0x7F) << v924;
              if (v930 < 0)
              {
                v924 += 7;
                v13 = v925++ >= 9;
                if (v13)
                {
                  v926 = 0;
                  v931 = a1[*v4];
                  goto LABEL_2353;
                }
                continue;
              }
            }
            break;
          }
          v931 = a1[*v4];
          if (a1[*v4])
            v926 = 0;
LABEL_2353:
          v932 = v926 & 7;
          if (v931)
            v933 = 1;
          else
            v933 = v932 == 4;
          if (!v933)
          {
            switch((v926 >> 3))
            {
              case 1u:
                if (v932 != 2 || !PBReaderPlaceMark() || !GEOLatLngE7IsValid(a1))
                  goto LABEL_3811;
                PBReaderRecallMark();
                continue;
              case 2u:
                if (v932 == 2)
                  goto LABEL_2365;
                goto LABEL_3811;
              case 3u:
                if (v932 == 2)
                  goto LABEL_2365;
                goto LABEL_3811;
              case 4u:
                if ((v926 & 7) != 0)
                  goto LABEL_3811;
                v934 = 0;
                break;
              default:
LABEL_2365:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
            }
            do
            {
              v935 = *v2;
              v936 = *(_QWORD *)&a1[v935];
              v937 = v936 + 1;
              if (v936 == -1 || v937 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_2341;
              }
              v938 = *(char *)(*(_QWORD *)&a1[*v5] + v936);
              *(_QWORD *)&a1[v935] = v937;
              if ((v938 & 0x80000000) == 0)
                break;
              v52 = v934++ > 8;
            }
            while (!v52);
            continue;
          }
          goto LABEL_3776;
        }
      case 0x4Fu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_2379:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3366;
          v939 = 0;
          v940 = 0;
          v941 = 0;
          while (2)
          {
            v942 = *v2;
            v943 = *(_QWORD *)&a1[v942];
            v944 = v943 + 1;
            if (v943 == -1 || v944 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v945 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v943);
              *(_QWORD *)&a1[v942] = v944;
              v941 |= (unint64_t)(v945 & 0x7F) << v939;
              if (v945 < 0)
              {
                v939 += 7;
                v13 = v940++ >= 9;
                if (v13)
                {
                  v941 = 0;
                  v946 = a1[*v4];
                  goto LABEL_2391;
                }
                continue;
              }
            }
            break;
          }
          v946 = a1[*v4];
          if (a1[*v4])
            v941 = 0;
LABEL_2391:
          v947 = v941 & 7;
          if (v946)
            v948 = 1;
          else
            v948 = v947 == 4;
          if (v948)
            goto LABEL_3366;
          if ((v941 >> 3) != 2)
          {
            if ((v941 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            if (v947 != 2 || !PBReaderPlaceMark())
              goto LABEL_3811;
            objc_msgSend(a1, "position");
            objc_msgSend(a1, "length");
            while (1)
            {
              while (1)
              {
LABEL_2400:
                if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                  goto LABEL_2563;
                v949 = 0;
                v950 = 0;
                v951 = 0;
                while (1)
                {
                  v952 = *v2;
                  v953 = *(_QWORD *)&a1[v952];
                  v954 = v953 + 1;
                  if (v953 == -1 || v954 > *(_QWORD *)&a1[*v3])
                    break;
                  v955 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v953);
                  *(_QWORD *)&a1[v952] = v954;
                  v951 |= (unint64_t)(v955 & 0x7F) << v949;
                  if ((v955 & 0x80) == 0)
                    goto LABEL_2410;
                  v949 += 7;
                  v13 = v950++ >= 9;
                  if (v13)
                  {
                    v951 = 0;
                    v956 = a1[*v4];
                    goto LABEL_2412;
                  }
                }
                a1[*v4] = 1;
LABEL_2410:
                v956 = a1[*v4];
                if (a1[*v4])
                  v951 = 0;
LABEL_2412:
                v957 = v951 & 7;
                if (v956 || v957 == 4)
                  goto LABEL_2563;
                v959 = v951 >> 3;
                if ((v951 >> 3) != 3)
                  break;
                if (v957 != 2 || !PBReaderPlaceMark() || !GEOPBTransitArtworkIsValid(a1))
                  goto LABEL_3796;
LABEL_2424:
                PBReaderRecallMark();
              }
              if ((_DWORD)v959 == 2)
              {
                if (v957 == 2)
                {
                  if (!PBReaderPlaceMark())
                    goto LABEL_3796;
LABEL_2435:
                  while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
                  {
                    v965 = a1[*v4];
                    if (a1[*v4])
                      break;
                    while (1)
                    {
                      v966 = *v2;
                      v967 = *(_QWORD *)&a1[v966];
                      v968 = v967 + 1;
                      if (v967 == -1 || v968 > *(_QWORD *)&a1[*v3])
                        break;
                      v969 = *(char *)(*(_QWORD *)&a1[*v5] + v967);
                      *(_QWORD *)&a1[v966] = v968;
                      if (v969 < 0)
                      {
                        v13 = v965++ >= 9;
                        if (!v13)
                          continue;
                      }
                      goto LABEL_2435;
                    }
                    a1[*v4] = 1;
                  }
                  goto LABEL_2424;
                }
                if ((v951 & 7) != 0)
                  goto LABEL_3796;
                while (1)
                {
                  v960 = *v2;
                  v961 = *(_QWORD *)&a1[v960];
                  v962 = v961 + 1;
                  if (v961 == -1 || v962 > *(_QWORD *)&a1[*v3])
                    break;
                  v963 = *(char *)(*(_QWORD *)&a1[*v5] + v961);
                  *(_QWORD *)&a1[v960] = v962;
                  if (v963 < 0)
                  {
                    v964 = v957++;
                    if (v964 <= 8)
                      continue;
                  }
                  goto LABEL_2400;
                }
                a1[*v4] = 1;
              }
              else if ((_DWORD)v959 == 1 && v957 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
              {
                goto LABEL_3796;
              }
            }
          }
          break;
        }
        if (v947 != 2 || !PBReaderPlaceMark())
          goto LABEL_3811;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (1)
        {
LABEL_2448:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_2563;
          v970 = 0;
          v971 = 0;
          v972 = 0;
          while (1)
          {
            v973 = *v2;
            v974 = *(_QWORD *)&a1[v973];
            v975 = v974 + 1;
            if (v974 == -1 || v975 > *(_QWORD *)&a1[*v3])
              break;
            v976 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v974);
            *(_QWORD *)&a1[v973] = v975;
            v972 |= (unint64_t)(v976 & 0x7F) << v970;
            if ((v976 & 0x80) == 0)
              goto LABEL_2458;
            v970 += 7;
            v13 = v971++ >= 9;
            if (v13)
            {
              v972 = 0;
              v977 = a1[*v4];
              goto LABEL_2460;
            }
          }
          a1[*v4] = 1;
LABEL_2458:
          v977 = a1[*v4];
          if (a1[*v4])
            v972 = 0;
LABEL_2460:
          v978 = v972 & 7;
          if (v977 || v978 == 4)
          {
LABEL_2563:
            v1035 = a1[*v4];
            PBReaderRecallMark();
            if (!v1035)
            {
              PBReaderRecallMark();
              goto LABEL_2379;
            }
            goto LABEL_3811;
          }
          switch((v972 >> 3))
          {
            case 1u:
              if (v978 == 2)
                goto LABEL_2521;
              goto LABEL_3796;
            case 2u:
              if ((v972 & 7) != 0)
                goto LABEL_3796;
              v980 = 0;
              while (1)
              {
                v981 = *v2;
                v982 = *(_QWORD *)&a1[v981];
                v983 = v982 + 1;
                if (v982 == -1 || v983 > *(_QWORD *)&a1[*v3])
                  goto LABEL_2531;
                v984 = *(char *)(*(_QWORD *)&a1[*v5] + v982);
                *(_QWORD *)&a1[v981] = v983;
                if (v984 < 0)
                {
                  v52 = v980++ > 8;
                  if (!v52)
                    continue;
                }
                goto LABEL_2448;
              }
            case 3u:
              if ((v972 & 7) != 0)
                goto LABEL_3796;
              v985 = 0;
              while (1)
              {
                v986 = *v2;
                v987 = *(_QWORD *)&a1[v986];
                v988 = v987 + 1;
                if (v987 == -1 || v988 > *(_QWORD *)&a1[*v3])
                  goto LABEL_2531;
                v989 = *(char *)(*(_QWORD *)&a1[*v5] + v987);
                *(_QWORD *)&a1[v986] = v988;
                if (v989 < 0)
                {
                  v52 = v985++ > 8;
                  if (!v52)
                    continue;
                }
                goto LABEL_2448;
              }
            case 4u:
              if ((v972 & 7) != 0)
                goto LABEL_3796;
              v990 = 0;
              while (1)
              {
                v991 = *v2;
                v992 = *(_QWORD *)&a1[v991];
                v993 = v992 + 1;
                if (v992 == -1 || v993 > *(_QWORD *)&a1[*v3])
                  goto LABEL_2531;
                v994 = *(char *)(*(_QWORD *)&a1[*v5] + v992);
                *(_QWORD *)&a1[v991] = v993;
                if (v994 < 0)
                {
                  v52 = v990++ > 8;
                  if (!v52)
                    continue;
                }
                goto LABEL_2448;
              }
            case 5u:
              if ((v972 & 7) != 0)
                goto LABEL_3796;
              v995 = 0;
              while (1)
              {
                v996 = *v2;
                v997 = *(_QWORD *)&a1[v996];
                v998 = v997 + 1;
                if (v997 == -1 || v998 > *(_QWORD *)&a1[*v3])
                  goto LABEL_2531;
                v999 = *(char *)(*(_QWORD *)&a1[*v5] + v997);
                *(_QWORD *)&a1[v996] = v998;
                if (v999 < 0)
                {
                  v52 = v995++ > 8;
                  if (!v52)
                    continue;
                }
                goto LABEL_2448;
              }
            case 6u:
              if (v978 != 2)
              {
                if ((v972 & 7) != 0)
                  goto LABEL_3796;
                while (1)
                {
                  v1000 = *v2;
                  v1001 = *(_QWORD *)&a1[v1000];
                  v1002 = v1001 + 1;
                  if (v1001 == -1 || v1002 > *(_QWORD *)&a1[*v3])
                    goto LABEL_2531;
                  v1003 = *(char *)(*(_QWORD *)&a1[*v5] + v1001);
                  *(_QWORD *)&a1[v1000] = v1002;
                  if (v1003 < 0)
                  {
                    v1004 = v978++;
                    if (v1004 <= 8)
                      continue;
                  }
                  goto LABEL_2448;
                }
              }
              if (!PBReaderPlaceMark())
                goto LABEL_3796;
LABEL_2533:
              while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
              {
                v1020 = a1[*v4];
                if (a1[*v4])
                  break;
                while (1)
                {
                  v1021 = *v2;
                  v1022 = *(_QWORD *)&a1[v1021];
                  v1023 = v1022 + 1;
                  if (v1022 == -1 || v1023 > *(_QWORD *)&a1[*v3])
                    break;
                  v1024 = *(char *)(*(_QWORD *)&a1[*v5] + v1022);
                  *(_QWORD *)&a1[v1021] = v1023;
                  if (v1024 < 0)
                  {
                    v13 = v1020++ >= 9;
                    if (!v13)
                      continue;
                  }
                  goto LABEL_2533;
                }
                a1[*v4] = 1;
              }
              goto LABEL_2562;
            case 7u:
              if (v978 != 2)
              {
                if ((v972 & 7) != 0)
                  goto LABEL_3796;
                while (1)
                {
                  v1005 = *v2;
                  v1006 = *(_QWORD *)&a1[v1005];
                  v1007 = v1006 + 1;
                  if (v1006 == -1 || v1007 > *(_QWORD *)&a1[*v3])
                    goto LABEL_2531;
                  v1008 = *(char *)(*(_QWORD *)&a1[*v5] + v1006);
                  *(_QWORD *)&a1[v1005] = v1007;
                  if (v1008 < 0)
                  {
                    v1009 = v978++;
                    if (v1009 <= 8)
                      continue;
                  }
                  goto LABEL_2448;
                }
              }
              if (!PBReaderPlaceMark())
                goto LABEL_3796;
LABEL_2543:
              while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
              {
                v1025 = a1[*v4];
                if (a1[*v4])
                  break;
                while (1)
                {
                  v1026 = *v2;
                  v1027 = *(_QWORD *)&a1[v1026];
                  v1028 = v1027 + 1;
                  if (v1027 == -1 || v1028 > *(_QWORD *)&a1[*v3])
                    break;
                  v1029 = *(char *)(*(_QWORD *)&a1[*v5] + v1027);
                  *(_QWORD *)&a1[v1026] = v1028;
                  if (v1029 < 0)
                  {
                    v13 = v1025++ >= 9;
                    if (!v13)
                      continue;
                  }
                  goto LABEL_2543;
                }
                a1[*v4] = 1;
              }
              goto LABEL_2562;
            case 8u:
              if (v978 == 2)
              {
                if (!PBReaderPlaceMark())
                  goto LABEL_3796;
LABEL_2553:
                while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
                {
                  v1030 = a1[*v4];
                  if (a1[*v4])
                    break;
                  while (1)
                  {
                    v1031 = *v2;
                    v1032 = *(_QWORD *)&a1[v1031];
                    v1033 = v1032 + 1;
                    if (v1032 == -1 || v1033 > *(_QWORD *)&a1[*v3])
                      break;
                    v1034 = *(char *)(*(_QWORD *)&a1[*v5] + v1032);
                    *(_QWORD *)&a1[v1031] = v1033;
                    if (v1034 < 0)
                    {
                      v13 = v1030++ >= 9;
                      if (!v13)
                        continue;
                    }
                    goto LABEL_2553;
                  }
                  a1[*v4] = 1;
                }
LABEL_2562:
                PBReaderRecallMark();
              }
              else
              {
                if ((v972 & 7) != 0)
                  goto LABEL_3796;
                while (1)
                {
                  v1010 = *v2;
                  v1011 = *(_QWORD *)&a1[v1010];
                  v1012 = v1011 + 1;
                  if (v1011 == -1 || v1012 > *(_QWORD *)&a1[*v3])
                    break;
                  v1013 = *(char *)(*(_QWORD *)&a1[*v5] + v1011);
                  *(_QWORD *)&a1[v1010] = v1012;
                  if (v1013 < 0)
                  {
                    v1014 = v978++;
                    if (v1014 <= 8)
                      continue;
                  }
                  goto LABEL_2448;
                }
LABEL_2531:
                a1[*v4] = 1;
              }
              break;
            case 9u:
              if (v978 == 2)
                goto LABEL_2521;
              goto LABEL_3796;
            case 0xAu:
              if ((v972 & 7) != 0)
                goto LABEL_3796;
              v1015 = 0;
              while (1)
              {
                v1016 = *v2;
                v1017 = *(_QWORD *)&a1[v1016];
                v1018 = v1017 + 1;
                if (v1017 == -1 || v1018 > *(_QWORD *)&a1[*v3])
                  goto LABEL_2531;
                v1019 = *(char *)(*(_QWORD *)&a1[*v5] + v1017);
                *(_QWORD *)&a1[v1016] = v1018;
                if (v1019 < 0)
                {
                  v52 = v1015++ > 8;
                  if (!v52)
                    continue;
                }
                goto LABEL_2448;
              }
            default:
LABEL_2521:
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3796;
              continue;
          }
        }
      case 0x51u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v1036 = 0;
            v1037 = 0;
            v1038 = 0;
            while (2)
            {
              v1039 = *v2;
              v1040 = *(_QWORD *)&a1[v1039];
              v1041 = v1040 + 1;
              if (v1040 == -1 || v1041 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v1042 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1040);
                *(_QWORD *)&a1[v1039] = v1041;
                v1038 |= (unint64_t)(v1042 & 0x7F) << v1036;
                if (v1042 < 0)
                {
                  v1036 += 7;
                  v13 = v1037++ >= 9;
                  if (v13)
                  {
                    v1038 = 0;
                    v1043 = a1[*v4];
                    goto LABEL_2582;
                  }
                  continue;
                }
              }
              break;
            }
            v1043 = a1[*v4];
            if (a1[*v4])
              v1038 = 0;
LABEL_2582:
            v1044 = v1038 & 7;
            if (v1043)
              v1045 = 1;
            else
              v1045 = v1044 == 4;
            if (v1045)
              goto LABEL_3776;
            if ((v1038 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            break;
          }
          if (v1044 == 2 && PBReaderPlaceMark() && GEOPDStorefrontFaceIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x52u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_2596:
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v1046 = 0;
            v1047 = 0;
            v1048 = 0;
            while (2)
            {
              v1049 = *v2;
              v1050 = *(_QWORD *)&a1[v1049];
              v1051 = v1050 + 1;
              if (v1050 == -1 || v1051 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v1052 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1050);
                *(_QWORD *)&a1[v1049] = v1051;
                v1048 |= (unint64_t)(v1052 & 0x7F) << v1046;
                if (v1052 < 0)
                {
                  v1046 += 7;
                  v13 = v1047++ >= 9;
                  if (v13)
                  {
                    v1048 = 0;
                    v1053 = a1[*v4];
                    goto LABEL_2608;
                  }
                  continue;
                }
              }
              break;
            }
            v1053 = a1[*v4];
            if (a1[*v4])
              v1048 = 0;
LABEL_2608:
            v1054 = v1048 & 7;
            if (v1053)
              v1055 = 1;
            else
              v1055 = v1054 == 4;
            if (v1055)
              goto LABEL_3776;
            v1056 = v1048 >> 3;
            if ((v1048 >> 3) == 3)
            {
              if (v1054 != 2 || !PBReaderPlaceMark() || !GEOPDGuideLocationImageIsValid(a1))
                goto LABEL_3811;
            }
            else
            {
              if ((_DWORD)v1056 == 2)
              {
                if ((v1048 & 7) == 0)
                {
                  v1057 = 0;
                  do
                  {
                    v1058 = *v2;
                    v1059 = *(_QWORD *)&a1[v1058];
                    v1060 = v1059 + 1;
                    if (v1059 == -1 || v1060 > *(_QWORD *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_2596;
                    }
                    v1061 = *(char *)(*(_QWORD *)&a1[*v5] + v1059);
                    *(_QWORD *)&a1[v1058] = v1060;
                    if ((v1061 & 0x80000000) == 0)
                      break;
                    v52 = v1057++ > 8;
                  }
                  while (!v52);
                  continue;
                }
                goto LABEL_3811;
              }
              if ((_DWORD)v1056 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
              }
              if (v1054 != 2 || !PBReaderPlaceMark() || !GEOPDCaptionedPhotoIsValid(a1))
                goto LABEL_3811;
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0x53u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v1062 = 0;
            v1063 = 0;
            v1064 = 0;
            while (2)
            {
              v1065 = *v2;
              v1066 = *(_QWORD *)&a1[v1065];
              v1067 = v1066 + 1;
              if (v1066 == -1 || v1067 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v1068 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1066);
                *(_QWORD *)&a1[v1065] = v1067;
                v1064 |= (unint64_t)(v1068 & 0x7F) << v1062;
                if (v1068 < 0)
                {
                  v1062 += 7;
                  v13 = v1063++ >= 9;
                  if (v13)
                  {
                    v1064 = 0;
                    v1069 = a1[*v4];
                    goto LABEL_2649;
                  }
                  continue;
                }
              }
              break;
            }
            v1069 = a1[*v4];
            if (a1[*v4])
              v1064 = 0;
LABEL_2649:
            v1070 = v1064 & 7;
            if (v1069)
              v1071 = 1;
            else
              v1071 = v1070 == 4;
            if (v1071)
              goto LABEL_3776;
            if ((v1064 >> 3) == 2)
            {
              if (v1070 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringIsValid(a1))
                goto LABEL_3811;
            }
            else
            {
              if ((v1064 >> 3) != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
              }
              if (v1070 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1))
                goto LABEL_3811;
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0x54u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_2668:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3776;
          v1072 = 0;
          v1073 = 0;
          v1074 = 0;
          while (2)
          {
            v1075 = *v2;
            v1076 = *(_QWORD *)&a1[v1075];
            v1077 = v1076 + 1;
            if (v1076 == -1 || v1077 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v1078 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1076);
              *(_QWORD *)&a1[v1075] = v1077;
              v1074 |= (unint64_t)(v1078 & 0x7F) << v1072;
              if (v1078 < 0)
              {
                v1072 += 7;
                v13 = v1073++ >= 9;
                if (v13)
                {
                  v1074 = 0;
                  v1079 = a1[*v4];
                  goto LABEL_2680;
                }
                continue;
              }
            }
            break;
          }
          v1079 = a1[*v4];
          if (a1[*v4])
            v1074 = 0;
LABEL_2680:
          v1080 = v1074 & 7;
          if (v1079)
            v1081 = 1;
          else
            v1081 = v1080 == 4;
          if (!v1081)
          {
            switch((v1074 >> 3))
            {
              case 1u:
                if (v1080 == 2)
                  goto LABEL_2686;
                goto LABEL_3811;
              case 2u:
                if (v1080 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1))
                  goto LABEL_3811;
                goto LABEL_2695;
              case 3u:
                if (v1080 != 2 || !PBReaderPlaceMark() || !GEOPDCaptionedPhotoIsValid(a1))
                  goto LABEL_3811;
LABEL_2695:
                PBReaderRecallMark();
                continue;
              case 4u:
                if ((v1074 & 7) != 0)
                  goto LABEL_3811;
                v1082 = 0;
                break;
              default:
LABEL_2686:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
            }
            do
            {
              v1083 = *v2;
              v1084 = *(_QWORD *)&a1[v1083];
              v1085 = v1084 + 1;
              if (v1084 == -1 || v1085 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_2668;
              }
              v1086 = *(char *)(*(_QWORD *)&a1[*v5] + v1084);
              *(_QWORD *)&a1[v1083] = v1085;
              if ((v1086 & 0x80000000) == 0)
                break;
              v52 = v1082++ > 8;
            }
            while (!v52);
            continue;
          }
          goto LABEL_3776;
        }
      case 0x55u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDExploreGuidesIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x56u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v1087 = 0;
            v1088 = 0;
            v1089 = 0;
            while (2)
            {
              v1090 = *v2;
              v1091 = *(_QWORD *)&a1[v1090];
              v1092 = v1091 + 1;
              if (v1091 == -1 || v1092 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v1093 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1091);
                *(_QWORD *)&a1[v1090] = v1092;
                v1089 |= (unint64_t)(v1093 & 0x7F) << v1087;
                if (v1093 < 0)
                {
                  v1087 += 7;
                  v13 = v1088++ >= 9;
                  if (v13)
                  {
                    v1089 = 0;
                    v1094 = a1[*v4];
                    goto LABEL_2724;
                  }
                  continue;
                }
              }
              break;
            }
            v1094 = a1[*v4];
            if (a1[*v4])
              v1089 = 0;
LABEL_2724:
            v1095 = v1089 & 7;
            if (v1094)
              v1096 = 1;
            else
              v1096 = v1095 == 4;
            if (v1096)
              goto LABEL_3776;
            if ((v1089 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            break;
          }
          if (v1095 == 2 && PBReaderPlaceMark() && GEOLocalizedStringIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x57u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_2738:
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3366;
            v1097 = 0;
            v1098 = 0;
            v1099 = 0;
            while (2)
            {
              v1100 = *v2;
              v1101 = *(_QWORD *)&a1[v1100];
              v1102 = v1101 + 1;
              if (v1101 == -1 || v1102 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v1103 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1101);
                *(_QWORD *)&a1[v1100] = v1102;
                v1099 |= (unint64_t)(v1103 & 0x7F) << v1097;
                if (v1103 < 0)
                {
                  v1097 += 7;
                  v13 = v1098++ >= 9;
                  if (v13)
                  {
                    v1099 = 0;
                    v1104 = a1[*v4];
                    goto LABEL_2750;
                  }
                  continue;
                }
              }
              break;
            }
            v1104 = a1[*v4];
            if (a1[*v4])
              v1099 = 0;
LABEL_2750:
            v1105 = v1099 & 7;
            if (v1104)
              v1106 = 1;
            else
              v1106 = v1105 == 4;
            if (v1106)
              goto LABEL_3366;
            if ((v1099 >> 3) == 2)
            {
              if ((v1099 & 7) == 0)
              {
                v1117 = 0;
                do
                {
                  v1118 = *v2;
                  v1119 = *(_QWORD *)&a1[v1118];
                  v1120 = v1119 + 1;
                  if (v1119 == -1 || v1120 > *(_QWORD *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_2738;
                  }
                  v1121 = *(char *)(*(_QWORD *)&a1[*v5] + v1119);
                  *(_QWORD *)&a1[v1118] = v1120;
                  if ((v1121 & 0x80000000) == 0)
                    break;
                  v52 = v1117++ > 8;
                }
                while (!v52);
                continue;
              }
              goto LABEL_3811;
            }
            break;
          }
          if ((v1099 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_3811;
            continue;
          }
          break;
        }
        if (v1105 != 2 || !PBReaderPlaceMark())
          goto LABEL_3811;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (1)
        {
          while (1)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_2792;
            v1107 = 0;
            v1108 = 0;
            v1109 = 0;
            while (1)
            {
              v1110 = *v2;
              v1111 = *(_QWORD *)&a1[v1110];
              v1112 = v1111 + 1;
              if (v1111 == -1 || v1112 > *(_QWORD *)&a1[*v3])
                break;
              v1113 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1111);
              *(_QWORD *)&a1[v1110] = v1112;
              v1109 |= (unint64_t)(v1113 & 0x7F) << v1107;
              if ((v1113 & 0x80) == 0)
                goto LABEL_2769;
              v1107 += 7;
              v13 = v1108++ >= 9;
              if (v13)
              {
                v1109 = 0;
                v1114 = a1[*v4];
                goto LABEL_2771;
              }
            }
            a1[*v4] = 1;
LABEL_2769:
            v1114 = a1[*v4];
            if (a1[*v4])
              v1109 = 0;
LABEL_2771:
            v1115 = v1109 & 7;
            if (v1114 || v1115 == 4)
            {
LABEL_2792:
              v1122 = a1[*v4];
              PBReaderRecallMark();
              if (!v1122)
              {
                PBReaderRecallMark();
                goto LABEL_2738;
              }
              goto LABEL_3811;
            }
            if ((v1109 >> 3) == 1)
              break;
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_3796;
          }
          if (v1115 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_3796;
          PBReaderRecallMark();
        }
      case 0x58u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_2798:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3776;
          v1123 = 0;
          v1124 = 0;
          v1125 = 0;
          while (2)
          {
            v1126 = *v2;
            v1127 = *(_QWORD *)&a1[v1126];
            v1128 = v1127 + 1;
            if (v1127 == -1 || v1128 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v1129 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1127);
              *(_QWORD *)&a1[v1126] = v1128;
              v1125 |= (unint64_t)(v1129 & 0x7F) << v1123;
              if (v1129 < 0)
              {
                v1123 += 7;
                v13 = v1124++ >= 9;
                if (v13)
                {
                  v1125 = 0;
                  v1130 = *v4;
                  v1131 = a1[v1130];
                  goto LABEL_2810;
                }
                continue;
              }
            }
            break;
          }
          v1130 = *v4;
          v1131 = a1[v1130];
          if (a1[v1130])
            v1125 = 0;
LABEL_2810:
          v1132 = v1125 & 7;
          if (v1131)
            v1133 = 1;
          else
            v1133 = v1132 == 4;
          if (!v1133)
          {
            switch((v1125 >> 3))
            {
              case 1u:
                if (v1132 != 2)
                {
                  if ((v1125 & 7) == 0)
                  {
                    while (1)
                    {
                      v1137 = *v2;
                      v1138 = *(_QWORD *)&a1[v1137];
                      v1139 = v1138 + 1;
                      if (v1138 == -1 || v1139 > *(_QWORD *)&a1[*v3])
                        break;
                      v1140 = *(char *)(*(_QWORD *)&a1[*v5] + v1138);
                      *(_QWORD *)&a1[v1137] = v1139;
                      if (v1140 < 0)
                      {
                        v1141 = v1132++;
                        if (v1141 <= 8)
                          continue;
                      }
                      goto LABEL_2798;
                    }
                    v1130 = *v4;
LABEL_2844:
                    a1[v1130] = 1;
                    continue;
                  }
                  goto LABEL_3811;
                }
                if (!PBReaderPlaceMark())
                  goto LABEL_3811;
                break;
              case 2u:
                if (v1132 != 1)
                  goto LABEL_3811;
                v1134 = *v2;
                v1142 = *(_QWORD *)&a1[v1134];
                if (v1142 > 0xFFFFFFFFFFFFFFF7)
                  goto LABEL_2844;
                v1136 = v1142 + 8;
                goto LABEL_2830;
              case 3u:
              case 4u:
                if (v1132 != 5)
                  goto LABEL_3811;
                v1134 = *v2;
                v1135 = *(_QWORD *)&a1[v1134];
                if (v1135 > 0xFFFFFFFFFFFFFFFBLL)
                  goto LABEL_2844;
                v1136 = v1135 + 4;
LABEL_2830:
                if (v1136 > *(_QWORD *)&a1[*v3])
                  goto LABEL_2844;
                *(_QWORD *)&a1[v1134] = v1136;
                continue;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
            }
            while (1)
            {
LABEL_2833:
              if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || (v1143 = a1[*v4], a1[*v4]))
              {
                PBReaderRecallMark();
                goto LABEL_2798;
              }
              while (1)
              {
                v1144 = *v2;
                v1145 = *(_QWORD *)&a1[v1144];
                v1146 = v1145 + 1;
                if (v1145 == -1 || v1146 > *(_QWORD *)&a1[*v3])
                  break;
                v1147 = *(char *)(*(_QWORD *)&a1[*v5] + v1145);
                *(_QWORD *)&a1[v1144] = v1146;
                if (v1147 < 0)
                {
                  v13 = v1143++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_2833;
              }
              a1[*v4] = 1;
            }
          }
          goto LABEL_3776;
        }
      case 0x59u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_2848:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3366;
          v1148 = 0;
          v1149 = 0;
          v1150 = 0;
          while (2)
          {
            v1151 = *v2;
            v1152 = *(_QWORD *)&a1[v1151];
            v1153 = v1152 + 1;
            if (v1152 == -1 || v1153 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v1154 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1152);
              *(_QWORD *)&a1[v1151] = v1153;
              v1150 |= (unint64_t)(v1154 & 0x7F) << v1148;
              if (v1154 < 0)
              {
                v1148 += 7;
                v13 = v1149++ >= 9;
                if (v13)
                {
                  v1150 = 0;
                  v1155 = a1[*v4];
                  goto LABEL_2860;
                }
                continue;
              }
            }
            break;
          }
          v1155 = a1[*v4];
          if (a1[*v4])
            v1150 = 0;
LABEL_2860:
          v1156 = v1150 & 7;
          if (v1155)
            v1157 = 1;
          else
            v1157 = v1156 == 4;
          if (v1157)
            goto LABEL_3366;
          v1158 = v1150 >> 3;
          if ((v1150 >> 3) != 3)
          {
            if ((_DWORD)v1158 == 2)
            {
              if ((v1150 & 7) == 0)
              {
                v1193 = 0;
                do
                {
                  v1194 = *v2;
                  v1195 = *(_QWORD *)&a1[v1194];
                  v1196 = v1195 + 1;
                  if (v1195 == -1 || v1196 > *(_QWORD *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_2848;
                  }
                  v1197 = *(char *)(*(_QWORD *)&a1[*v5] + v1195);
                  *(_QWORD *)&a1[v1194] = v1196;
                  if ((v1197 & 0x80000000) == 0)
                    break;
                  v52 = v1193++ > 8;
                }
                while (!v52);
                continue;
              }
              goto LABEL_3811;
            }
            if ((_DWORD)v1158 != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            if (v1156 == 2 && PBReaderPlaceMark())
            {
              objc_msgSend(a1, "position");
              objc_msgSend(a1, "length");
LABEL_2870:
              while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
              {
                v1159 = 0;
                v1160 = 0;
                v1161 = 0;
                while (1)
                {
                  v1162 = *v2;
                  v1163 = *(_QWORD *)&a1[v1162];
                  v1164 = v1163 + 1;
                  if (v1163 == -1 || v1164 > *(_QWORD *)&a1[*v3])
                    break;
                  v1165 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1163);
                  *(_QWORD *)&a1[v1162] = v1164;
                  v1161 |= (unint64_t)(v1165 & 0x7F) << v1159;
                  if ((v1165 & 0x80) == 0)
                    goto LABEL_2880;
                  v1159 += 7;
                  v13 = v1160++ >= 9;
                  if (v13)
                  {
                    v1161 = 0;
                    v1166 = a1[*v4];
                    goto LABEL_2882;
                  }
                }
                a1[*v4] = 1;
LABEL_2880:
                v1166 = a1[*v4];
                if (a1[*v4])
                  v1161 = 0;
LABEL_2882:
                v1167 = v1161 & 7;
                if (v1166 || v1167 == 4)
                  break;
                switch((v1161 >> 3))
                {
                  case 1u:
                    if (v1167 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1))
                      goto LABEL_3796;
                    goto LABEL_2920;
                  case 2u:
                    if ((v1161 & 7) != 0)
                      goto LABEL_3796;
                    v1169 = 0;
                    break;
                  case 3u:
                    if (v1167 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1))
                      goto LABEL_3796;
                    goto LABEL_2920;
                  case 4u:
                  case 7u:
                    if (v1167 != 2 || !PBReaderPlaceMark() || !GEOPDDataItemIsValid(a1))
                      goto LABEL_3796;
                    goto LABEL_2920;
                  case 5u:
                    if (v1167 != 2 || !PBReaderPlaceMark() || !GEOStyleAttributesIsValid(a1))
                      goto LABEL_3796;
                    goto LABEL_2920;
                  case 6u:
                    if (v1167 != 2 || !PBReaderPlaceMark() || !GEOPDPhotoIsValid(a1))
                      goto LABEL_3796;
                    goto LABEL_2920;
                  case 8u:
                    if (v1167 != 2 || !PBReaderPlaceMark() || !GEOTimezoneIsValid(a1))
                      goto LABEL_3796;
LABEL_2920:
                    PBReaderRecallMark();
                    continue;
                  default:
                    if ((PBReaderSkipValueWithTag() & 1) == 0)
                      goto LABEL_3796;
                    continue;
                }
                while (1)
                {
                  v1170 = *v2;
                  v1171 = *(_QWORD *)&a1[v1170];
                  v1172 = v1171 + 1;
                  if (v1171 == -1 || v1172 > *(_QWORD *)&a1[*v3])
                    break;
                  v1173 = *(char *)(*(_QWORD *)&a1[*v5] + v1171);
                  *(_QWORD *)&a1[v1170] = v1172;
                  if (v1173 < 0)
                  {
                    v52 = v1169++ > 8;
                    if (!v52)
                      continue;
                  }
                  goto LABEL_2870;
                }
                a1[*v4] = 1;
              }
              v1199 = a1[*v4];
              PBReaderRecallMark();
              if (v1199)
                goto LABEL_3811;
LABEL_2975:
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_3811;
          }
          break;
        }
        if (v1156 != 2 || !PBReaderPlaceMark())
          goto LABEL_3811;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (1)
        {
          while (1)
          {
LABEL_2925:
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_2972;
            v1174 = 0;
            v1175 = 0;
            v1176 = 0;
            while (1)
            {
              v1177 = *v2;
              v1178 = *(_QWORD *)&a1[v1177];
              v1179 = v1178 + 1;
              if (v1178 == -1 || v1179 > *(_QWORD *)&a1[*v3])
                break;
              v1180 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1178);
              *(_QWORD *)&a1[v1177] = v1179;
              v1176 |= (unint64_t)(v1180 & 0x7F) << v1174;
              if ((v1180 & 0x80) == 0)
                goto LABEL_2935;
              v1174 += 7;
              v13 = v1175++ >= 9;
              if (v13)
              {
                v1176 = 0;
                v1181 = a1[*v4];
                goto LABEL_2937;
              }
            }
            a1[*v4] = 1;
LABEL_2935:
            v1181 = a1[*v4];
            if (a1[*v4])
              v1176 = 0;
LABEL_2937:
            if (v1181 || (v1176 & 7) == 4)
            {
LABEL_2972:
              v1198 = a1[*v4];
              PBReaderRecallMark();
              if (v1198)
                goto LABEL_3811;
              goto LABEL_2975;
            }
            if ((v1176 >> 3) != 2)
              break;
            if ((v1176 & 7) != 0)
              goto LABEL_3796;
            v1188 = 0;
            while (1)
            {
              v1189 = *v2;
              v1190 = *(_QWORD *)&a1[v1189];
              v1191 = v1190 + 1;
              if (v1190 == -1 || v1191 > *(_QWORD *)&a1[*v3])
                break;
              v1192 = *(char *)(*(_QWORD *)&a1[*v5] + v1190);
              *(_QWORD *)&a1[v1189] = v1191;
              if (v1192 < 0)
              {
                v52 = v1188++ > 8;
                if (!v52)
                  continue;
              }
              goto LABEL_2925;
            }
LABEL_2959:
            a1[*v4] = 1;
          }
          if ((v1176 >> 3) == 1)
          {
            if ((v1176 & 7) != 0)
              goto LABEL_3796;
            v1183 = 0;
            while (1)
            {
              v1184 = *v2;
              v1185 = *(_QWORD *)&a1[v1184];
              v1186 = v1185 + 1;
              if (v1185 == -1 || v1186 > *(_QWORD *)&a1[*v3])
                goto LABEL_2959;
              v1187 = *(char *)(*(_QWORD *)&a1[*v5] + v1185);
              *(_QWORD *)&a1[v1184] = v1186;
              if (v1187 < 0)
              {
                v52 = v1183++ > 8;
                if (!v52)
                  continue;
              }
              goto LABEL_2925;
            }
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_3796;
        }
      case 0x5Bu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v1200 = 0;
            v1201 = 0;
            v1202 = 0;
            while (2)
            {
              v1203 = *v2;
              v1204 = *(_QWORD *)&a1[v1203];
              v1205 = v1204 + 1;
              if (v1204 == -1 || v1205 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v1206 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1204);
                *(_QWORD *)&a1[v1203] = v1205;
                v1202 |= (unint64_t)(v1206 & 0x7F) << v1200;
                if (v1206 < 0)
                {
                  v1200 += 7;
                  v13 = v1201++ >= 9;
                  if (v13)
                  {
                    v1202 = 0;
                    v1207 = *v4;
                    v1208 = a1[v1207];
                    goto LABEL_2992;
                  }
                  continue;
                }
              }
              break;
            }
            v1207 = *v4;
            v1208 = a1[v1207];
            if (a1[v1207])
              v1202 = 0;
LABEL_2992:
            v1209 = v1202 & 7;
            if (v1208)
              v1210 = 1;
            else
              v1210 = v1209 == 4;
            if (v1210)
              goto LABEL_3776;
            v1211 = v1202 >> 3;
            if ((v1202 >> 3) == 1)
            {
              if (v1209 != 2 || !PBReaderPlaceMark() || !GEOPBTransitPaymentMethodIsValid(a1))
                goto LABEL_3811;
            }
            else
            {
              if ((_DWORD)v1211 == 3)
              {
                if (v1209 == 1)
                {
                  v1212 = *v2;
                  v1213 = *(_QWORD *)&a1[v1212];
                  if (v1213 <= 0xFFFFFFFFFFFFFFF7 && (v1214 = v1213 + 8, v1214 <= *(_QWORD *)&a1[*v3]))
                    *(_QWORD *)&a1[v1212] = v1214;
                  else
                    a1[v1207] = 1;
                  continue;
                }
                goto LABEL_3811;
              }
              if ((_DWORD)v1211 != 2)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
              }
              if (v1209 != 2 || !PBReaderPlaceMark() || !GEOPBTransitPaymentMethodSuggestionIsValid(a1))
                goto LABEL_3811;
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0x5Cu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v1215 = 0;
            v1216 = 0;
            v1217 = 0;
            while (2)
            {
              v1218 = *v2;
              v1219 = *(_QWORD *)&a1[v1218];
              v1220 = v1219 + 1;
              if (v1219 == -1 || v1220 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v1221 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1219);
                *(_QWORD *)&a1[v1218] = v1220;
                v1217 |= (unint64_t)(v1221 & 0x7F) << v1215;
                if (v1221 < 0)
                {
                  v1215 += 7;
                  v13 = v1216++ >= 9;
                  if (v13)
                  {
                    v1217 = 0;
                    v1222 = a1[*v4];
                    goto LABEL_3029;
                  }
                  continue;
                }
              }
              break;
            }
            v1222 = a1[*v4];
            if (a1[*v4])
              v1217 = 0;
LABEL_3029:
            v1223 = v1217 & 7;
            if (v1222)
              v1224 = 1;
            else
              v1224 = v1223 == 4;
            if (v1224)
              goto LABEL_3776;
            if ((v1217 >> 3) != 2 && (v1217 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            break;
          }
          if (v1223 == 2 && PBReaderPlaceMark() && GEOPDCaptionedPhotoIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x5Du:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDEnrichmentInfoIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x5Eu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position", 0, 0);
        objc_msgSend(a1, "length");
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v1225 = 0;
          v1226 = 0;
          v1227 = 0;
          while (2)
          {
            v1228 = *v2;
            v1229 = *(_QWORD *)&a1[v1228];
            v1230 = v1229 + 1;
            if (v1229 == -1 || v1230 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v1231 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1229);
              *(_QWORD *)&a1[v1228] = v1230;
              v1227 |= (unint64_t)(v1231 & 0x7F) << v1225;
              if (v1231 < 0)
              {
                v1225 += 7;
                v13 = v1226++ >= 9;
                if (v13)
                {
                  v1227 = 0;
                  v1232 = a1[*v4];
                  goto LABEL_3060;
                }
                continue;
              }
            }
            break;
          }
          v1232 = a1[*v4];
          if (a1[*v4])
            v1227 = 0;
LABEL_3060:
          v1233 = v1227 & 7;
          if (v1232)
            v1234 = 1;
          else
            v1234 = v1233 == 4;
          if (!v1234)
          {
            switch((v1227 >> 3))
            {
              case 1u:
                if (v1233 == 2 && PBReaderPlaceMark() && GEOLocalizedStringIsValid(a1))
                  goto LABEL_3297;
                goto LABEL_3811;
              case 2u:
                if (v1233 == 2)
                  goto LABEL_3294;
                goto LABEL_3811;
              case 3u:
                if (v1233 != 2 || !PBReaderPlaceMark())
                  goto LABEL_3811;
                objc_msgSend(a1, "position");
                objc_msgSend(a1, "length");
                break;
              case 4u:
                if (v1233 == 2)
                  goto LABEL_3294;
                goto LABEL_3811;
              case 5u:
                if (v1233 == 2)
                  goto LABEL_3294;
                goto LABEL_3811;
              case 6u:
                if (v1233 == 2)
                  goto LABEL_3294;
                goto LABEL_3811;
              default:
LABEL_3294:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
            }
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
            {
              v1235 = 0;
              v1236 = 0;
              v1237 = 0;
              while (1)
              {
                v1238 = *v2;
                v1239 = *(_QWORD *)&a1[v1238];
                v1240 = v1239 + 1;
                if (v1239 == -1 || v1240 > *(_QWORD *)&a1[*v3])
                  break;
                v1241 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1239);
                *(_QWORD *)&a1[v1238] = v1240;
                v1237 |= (unint64_t)(v1241 & 0x7F) << v1235;
                if ((v1241 & 0x80) == 0)
                  goto LABEL_3084;
                v1235 += 7;
                v13 = v1236++ >= 9;
                if (v13)
                {
                  v1237 = 0;
                  v1242 = a1[*v4];
                  goto LABEL_3086;
                }
              }
              a1[*v4] = 1;
LABEL_3084:
              v1242 = a1[*v4];
              if (a1[*v4])
                v1237 = 0;
LABEL_3086:
              v1243 = v1237 & 7;
              if (v1242 || v1243 == 4)
                break;
              if ((v1237 >> 3) == 2)
              {
                if (v1243 != 2 || !PBReaderPlaceMark())
                  goto LABEL_3802;
                objc_msgSend(a1, "position");
                objc_msgSend(a1, "length");
LABEL_3097:
                while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
                {
                  v1245 = 0;
                  v1246 = 0;
                  v1247 = 0;
                  while (1)
                  {
                    v1248 = *v2;
                    v1249 = *(_QWORD *)&a1[v1248];
                    v1250 = v1249 + 1;
                    if (v1249 == -1 || v1250 > *(_QWORD *)&a1[*v3])
                      break;
                    v1251 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1249);
                    *(_QWORD *)&a1[v1248] = v1250;
                    v1247 |= (unint64_t)(v1251 & 0x7F) << v1245;
                    if ((v1251 & 0x80) == 0)
                      goto LABEL_3107;
                    v1245 += 7;
                    v13 = v1246++ >= 9;
                    if (v13)
                    {
                      v1247 = 0;
                      v1252 = a1[*v4];
                      goto LABEL_3109;
                    }
                  }
                  a1[*v4] = 1;
LABEL_3107:
                  v1252 = a1[*v4];
                  if (a1[*v4])
                    v1247 = 0;
LABEL_3109:
                  v1253 = v1247 & 7;
                  if (v1252 || v1253 == 4)
                    break;
                  switch((v1247 >> 3))
                  {
                    case 1u:
                      if ((v1247 & 7) != 0)
                        goto LABEL_3801;
                      v1255 = 0;
                      while (1)
                      {
                        v1256 = *v2;
                        v1257 = *(_QWORD *)&a1[v1256];
                        v1258 = v1257 + 1;
                        if (v1257 == -1 || v1258 > *(_QWORD *)&a1[*v3])
                          goto LABEL_3284;
                        v1259 = *(char *)(*(_QWORD *)&a1[*v5] + v1257);
                        *(_QWORD *)&a1[v1256] = v1258;
                        if (v1259 < 0)
                        {
                          v52 = v1255++ > 8;
                          if (!v52)
                            continue;
                        }
                        goto LABEL_3097;
                      }
                    case 2u:
                      if (v1253 != 2 || !PBReaderPlaceMark())
                        goto LABEL_3801;
                      objc_msgSend(a1, "position");
                      objc_msgSend(a1, "length");
                      while (2)
                      {
                        if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                          goto LABEL_3188;
                        v1260 = 0;
                        v1261 = 0;
                        v1262 = 0;
                        while (1)
                        {
                          v1263 = *v2;
                          v1264 = *(_QWORD *)&a1[v1263];
                          v1265 = v1264 + 1;
                          if (v1264 == -1 || v1265 > *(_QWORD *)&a1[*v3])
                            break;
                          v1266 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1264);
                          *(_QWORD *)&a1[v1263] = v1265;
                          v1262 |= (unint64_t)(v1266 & 0x7F) << v1260;
                          if ((v1266 & 0x80) == 0)
                            goto LABEL_3137;
                          v1260 += 7;
                          v13 = v1261++ >= 9;
                          if (v13)
                          {
                            v1262 = 0;
                            v1267 = a1[*v4];
                            goto LABEL_3139;
                          }
                        }
                        a1[*v4] = 1;
LABEL_3137:
                        v1267 = a1[*v4];
                        if (a1[*v4])
                          v1262 = 0;
LABEL_3139:
                        v1268 = v1262 & 7;
                        if (v1267)
                          v1269 = 1;
                        else
                          v1269 = v1268 == 4;
                        if (!v1269)
                        {
                          switch((v1262 >> 3))
                          {
                            case 1u:
                              if (v1268 == 2)
                                goto LABEL_3153;
                              goto LABEL_3800;
                            case 2u:
                              if (v1268 == 2)
                                goto LABEL_3153;
                              goto LABEL_3800;
                            case 3u:
                              if (v1268 == 2)
                                goto LABEL_3153;
                              goto LABEL_3800;
                            case 4u:
                              if (v1268 != 2)
                                goto LABEL_3800;
LABEL_3153:
                              if ((PBReaderSkipValueWithTag() & 1) == 0)
                                goto LABEL_3800;
                              continue;
                            default:
                              if (!PBReaderSkipValueWithTag())
                                goto LABEL_3800;
                              continue;
                          }
                        }
                        goto LABEL_3188;
                      }
                    case 3u:
                      if (v1253 != 2 || !PBReaderPlaceMark())
                        goto LABEL_3801;
                      objc_msgSend(a1, "position");
                      objc_msgSend(a1, "length");
                      while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
                      {
                        v1270 = 0;
                        v1271 = 0;
                        v1272 = 0;
                        while (1)
                        {
                          v1273 = *v2;
                          v1274 = *(_QWORD *)&a1[v1273];
                          v1275 = v1274 + 1;
                          if (v1274 == -1 || v1275 > *(_QWORD *)&a1[*v3])
                            break;
                          v1276 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1274);
                          *(_QWORD *)&a1[v1273] = v1275;
                          v1272 |= (unint64_t)(v1276 & 0x7F) << v1270;
                          if ((v1276 & 0x80) == 0)
                            goto LABEL_3168;
                          v1270 += 7;
                          v13 = v1271++ >= 9;
                          if (v13)
                          {
                            v1272 = 0;
                            v1277 = a1[*v4];
                            goto LABEL_3170;
                          }
                        }
                        a1[*v4] = 1;
LABEL_3168:
                        v1277 = a1[*v4];
                        if (a1[*v4])
                          v1272 = 0;
LABEL_3170:
                        v1278 = v1272 & 7;
                        if (v1277)
                          v1279 = 1;
                        else
                          v1279 = v1278 == 4;
                        if (!v1279)
                        {
                          switch((v1272 >> 3))
                          {
                            case 1u:
                              if (v1278 == 2)
                                goto LABEL_3186;
                              goto LABEL_3800;
                            case 2u:
                              if (v1278 == 2)
                                goto LABEL_3186;
                              goto LABEL_3800;
                            case 3u:
                              if (v1278 == 2)
                                goto LABEL_3186;
                              goto LABEL_3800;
                            case 4u:
                              if (v1278 == 2)
                                goto LABEL_3186;
                              goto LABEL_3800;
                            case 5u:
                              if (v1278 != 2)
                                goto LABEL_3800;
LABEL_3186:
                              if ((PBReaderSkipValueWithTag() & 1) == 0)
                                goto LABEL_3800;
                              continue;
                            default:
                              if (!PBReaderSkipValueWithTag())
                                goto LABEL_3800;
                              continue;
                          }
                        }
                        break;
                      }
LABEL_3188:
                      v1280 = a1[*v4];
                      PBReaderRecallMark();
                      if (v1280)
                        goto LABEL_3801;
                      goto LABEL_3275;
                    case 4u:
                      if (v1253 != 2 || !PBReaderPlaceMark())
                        goto LABEL_3801;
                      objc_msgSend(a1, "position");
                      objc_msgSend(a1, "length");
LABEL_3193:
                      while (2)
                      {
                        if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                          goto LABEL_3274;
                        v1281 = 0;
                        v1282 = 0;
                        v1283 = 0;
                        while (1)
                        {
                          v1284 = *v2;
                          v1285 = *(_QWORD *)&a1[v1284];
                          v1286 = v1285 + 1;
                          if (v1285 == -1 || v1286 > *(_QWORD *)&a1[*v3])
                            break;
                          v1287 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1285);
                          *(_QWORD *)&a1[v1284] = v1286;
                          v1283 |= (unint64_t)(v1287 & 0x7F) << v1281;
                          if ((v1287 & 0x80) == 0)
                            goto LABEL_3203;
                          v1281 += 7;
                          v13 = v1282++ >= 9;
                          if (v13)
                          {
                            v1283 = 0;
                            v1288 = a1[*v4];
                            goto LABEL_3205;
                          }
                        }
                        a1[*v4] = 1;
LABEL_3203:
                        v1288 = a1[*v4];
                        if (a1[*v4])
                          v1283 = 0;
LABEL_3205:
                        v1289 = v1283 & 7;
                        if (v1288)
                          v1290 = 1;
                        else
                          v1290 = v1289 == 4;
                        if (!v1290)
                        {
                          switch((v1283 >> 3))
                          {
                            case 1u:
                              if (v1289 == 2)
                                goto LABEL_3222;
                              goto LABEL_3800;
                            case 2u:
                              if (v1289 == 2)
                                goto LABEL_3222;
                              goto LABEL_3800;
                            case 3u:
                              if (v1289 != 2)
                              {
                                if ((v1283 & 7) == 0)
                                {
                                  do
                                  {
                                    v1291 = *v2;
                                    v1292 = *(_QWORD *)&a1[v1291];
                                    v1293 = v1292 + 1;
                                    if (v1292 == -1 || v1293 > *(_QWORD *)&a1[*v3])
                                    {
                                      a1[*v4] = 1;
                                      goto LABEL_3193;
                                    }
                                    v1294 = *(char *)(*(_QWORD *)&a1[*v5] + v1292);
                                    *(_QWORD *)&a1[v1291] = v1293;
                                    if ((v1294 & 0x80000000) == 0)
                                      break;
                                    v1295 = v1289++;
                                  }
                                  while (v1295 <= 8);
                                  continue;
                                }
                                goto LABEL_3800;
                              }
                              if (!PBReaderPlaceMark())
                                goto LABEL_3800;
                              break;
                            case 4u:
                              if (v1289 == 2)
                                goto LABEL_3222;
                              goto LABEL_3800;
                            default:
LABEL_3222:
                              if ((PBReaderSkipValueWithTag() & 1) == 0)
                                goto LABEL_3800;
                              continue;
                          }
                          while (1)
                          {
LABEL_3225:
                            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3]
                              || (v1296 = a1[*v4], a1[*v4]))
                            {
                              PBReaderRecallMark();
                              goto LABEL_3193;
                            }
                            while (1)
                            {
                              v1297 = *v2;
                              v1298 = *(_QWORD *)&a1[v1297];
                              v1299 = v1298 + 1;
                              if (v1298 == -1 || v1299 > *(_QWORD *)&a1[*v3])
                                break;
                              v1300 = *(char *)(*(_QWORD *)&a1[*v5] + v1298);
                              *(_QWORD *)&a1[v1297] = v1299;
                              if (v1300 < 0)
                              {
                                v13 = v1296++ >= 9;
                                if (!v13)
                                  continue;
                              }
                              goto LABEL_3225;
                            }
                            a1[*v4] = 1;
                          }
                        }
                        goto LABEL_3274;
                      }
                    case 5u:
                      if (v1253 != 2 || !PBReaderPlaceMark())
                        goto LABEL_3801;
                      objc_msgSend(a1, "position");
                      objc_msgSend(a1, "length");
LABEL_3239:
                      while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
                      {
                        v1301 = 0;
                        v1302 = 0;
                        v1303 = 0;
                        while (1)
                        {
                          v1304 = *v2;
                          v1305 = *(_QWORD *)&a1[v1304];
                          v1306 = v1305 + 1;
                          if (v1305 == -1 || v1306 > *(_QWORD *)&a1[*v3])
                            break;
                          v1307 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1305);
                          *(_QWORD *)&a1[v1304] = v1306;
                          v1303 |= (unint64_t)(v1307 & 0x7F) << v1301;
                          if ((v1307 & 0x80) == 0)
                            goto LABEL_3249;
                          v1301 += 7;
                          v13 = v1302++ >= 9;
                          if (v13)
                          {
                            v1303 = 0;
                            v1308 = a1[*v4];
                            goto LABEL_3251;
                          }
                        }
                        a1[*v4] = 1;
LABEL_3249:
                        v1308 = a1[*v4];
                        if (a1[*v4])
                          v1303 = 0;
LABEL_3251:
                        v1309 = v1303 & 7;
                        if (v1308)
                          v1310 = 1;
                        else
                          v1310 = v1309 == 4;
                        if (!v1310)
                        {
                          switch((v1303 >> 3))
                          {
                            case 1u:
                              if (v1309 == 2)
                                goto LABEL_3259;
                              goto LABEL_3800;
                            case 2u:
                              if (v1309 == 2)
                                goto LABEL_3259;
                              goto LABEL_3800;
                            case 3u:
                              if (v1309 != 2 || !PBReaderPlaceMark() || !GEOPDIconIsValid(a1))
                                goto LABEL_3800;
                              PBReaderRecallMark();
                              continue;
                            case 4u:
                              if ((v1303 & 7) != 0)
                                goto LABEL_3800;
                              v1311 = 0;
                              break;
                            default:
LABEL_3259:
                              if ((PBReaderSkipValueWithTag() & 1) == 0)
                                goto LABEL_3800;
                              continue;
                          }
                          do
                          {
                            v1312 = *v2;
                            v1313 = *(_QWORD *)&a1[v1312];
                            v1314 = v1313 + 1;
                            if (v1313 == -1 || v1314 > *(_QWORD *)&a1[*v3])
                            {
                              a1[*v4] = 1;
                              goto LABEL_3239;
                            }
                            v1315 = *(char *)(*(_QWORD *)&a1[*v5] + v1313);
                            *(_QWORD *)&a1[v1312] = v1314;
                            if ((v1315 & 0x80000000) == 0)
                              break;
                            v52 = v1311++ > 8;
                          }
                          while (!v52);
                          continue;
                        }
                        break;
                      }
LABEL_3274:
                      v1316 = a1[*v4];
                      PBReaderRecallMark();
                      if (v1316)
                        goto LABEL_3801;
LABEL_3275:
                      PBReaderRecallMark();
                      continue;
                    case 6u:
                      if ((v1247 & 7) != 0)
                        goto LABEL_3801;
                      v1317 = 0;
                      break;
                    default:
                      if ((PBReaderSkipValueWithTag() & 1) == 0)
                        goto LABEL_3801;
                      continue;
                  }
                  while (1)
                  {
                    v1318 = *v2;
                    v1319 = *(_QWORD *)&a1[v1318];
                    v1320 = v1319 + 1;
                    if (v1319 == -1 || v1320 > *(_QWORD *)&a1[*v3])
                      break;
                    v1321 = *(char *)(*(_QWORD *)&a1[*v5] + v1319);
                    *(_QWORD *)&a1[v1318] = v1320;
                    if (v1321 < 0)
                    {
                      v52 = v1317++ > 8;
                      if (!v52)
                        continue;
                    }
                    goto LABEL_3097;
                  }
LABEL_3284:
                  a1[*v4] = 1;
                }
                v1322 = a1[*v4];
                PBReaderRecallMark();
                if (v1322)
                  goto LABEL_3802;
                PBReaderRecallMark();
              }
              else if ((v1237 >> 3) == 1 && v1243 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
              {
                goto LABEL_3802;
              }
            }
            v1323 = a1[*v4];
            PBReaderRecallMark();
            if (!v1323)
            {
LABEL_3297:
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_3811;
          }
          break;
        }
LABEL_3298:
        v1324 = a1[*v4];
        PBReaderRecallMark();
        if (!v1324)
          goto LABEL_3789;
        goto LABEL_3812;
      case 0x5Fu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v1325 = 0;
          v1326 = 0;
          v1327 = 0;
          while (2)
          {
            v1328 = *v2;
            v1329 = *(_QWORD *)&a1[v1328];
            v1330 = v1329 + 1;
            if (v1329 == -1 || v1330 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v1331 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1329);
              *(_QWORD *)&a1[v1328] = v1330;
              v1327 |= (unint64_t)(v1331 & 0x7F) << v1325;
              if (v1331 < 0)
              {
                v1325 += 7;
                v13 = v1326++ >= 9;
                if (v13)
                {
                  v1327 = 0;
                  v1332 = a1[*v4];
                  goto LABEL_3315;
                }
                continue;
              }
            }
            break;
          }
          v1332 = a1[*v4];
          if (a1[*v4])
            v1327 = 0;
LABEL_3315:
          v1333 = v1327 & 7;
          if (v1332)
            v1334 = 1;
          else
            v1334 = v1333 == 4;
          if (!v1334)
          {
            if ((v1327 >> 3) == 2)
            {
              if (v1333 != 2)
                goto LABEL_3811;
            }
            else if ((v1327 >> 3) == 1)
            {
              if (v1333 != 2 || !PBReaderPlaceMark())
                goto LABEL_3811;
              objc_msgSend(a1, "position");
              objc_msgSend(a1, "length");
LABEL_3324:
              while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
              {
                v1335 = 0;
                v1336 = 0;
                v1337 = 0;
                while (1)
                {
                  v1338 = *v2;
                  v1339 = *(_QWORD *)&a1[v1338];
                  v1340 = v1339 + 1;
                  if (v1339 == -1 || v1340 > *(_QWORD *)&a1[*v3])
                    break;
                  v1341 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1339);
                  *(_QWORD *)&a1[v1338] = v1340;
                  v1337 |= (unint64_t)(v1341 & 0x7F) << v1335;
                  if ((v1341 & 0x80) == 0)
                    goto LABEL_3334;
                  v1335 += 7;
                  v13 = v1336++ >= 9;
                  if (v13)
                  {
                    v1337 = 0;
                    v1342 = a1[*v4];
                    goto LABEL_3336;
                  }
                }
                a1[*v4] = 1;
LABEL_3334:
                v1342 = a1[*v4];
                if (a1[*v4])
                  v1337 = 0;
LABEL_3336:
                v1343 = v1337 & 7;
                if (v1342 || v1343 == 4)
                  break;
                switch((v1337 >> 3))
                {
                  case 1u:
                    if (v1343 != 2 || !PBReaderPlaceMark() || !GEOPDEnrichmentInfoIsValid(a1))
                      goto LABEL_3796;
                    PBReaderRecallMark();
                    continue;
                  case 2u:
                    if (v1343 == 2)
                      goto LABEL_3358;
                    goto LABEL_3796;
                  case 3u:
                    if (v1343 == 2)
                      goto LABEL_3358;
                    goto LABEL_3796;
                  case 4u:
                    if ((v1337 & 7) != 0)
                      goto LABEL_3796;
                    v1345 = 0;
                    break;
                  case 5u:
                    if (v1343 == 2)
                      goto LABEL_3358;
                    goto LABEL_3796;
                  default:
LABEL_3358:
                    if ((PBReaderSkipValueWithTag() & 1) == 0)
                      goto LABEL_3796;
                    continue;
                }
                while (1)
                {
                  v1346 = *v2;
                  v1347 = *(_QWORD *)&a1[v1346];
                  v1348 = v1347 + 1;
                  if (v1347 == -1 || v1348 > *(_QWORD *)&a1[*v3])
                    break;
                  v1349 = *(char *)(*(_QWORD *)&a1[*v5] + v1347);
                  *(_QWORD *)&a1[v1346] = v1348;
                  if (v1349 < 0)
                  {
                    v52 = v1345++ > 8;
                    if (!v52)
                      continue;
                  }
                  goto LABEL_3324;
                }
                a1[*v4] = 1;
              }
              v1350 = a1[*v4];
              PBReaderRecallMark();
              if (!v1350)
              {
                PBReaderRecallMark();
                continue;
              }
              goto LABEL_3811;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_3811;
            continue;
          }
          break;
        }
LABEL_3366:
        v1351 = a1[*v4];
        PBReaderRecallMark();
        if (!v1351)
          goto LABEL_3789;
        goto LABEL_3812;
      case 0x60u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_3371:
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v1352 = 0;
          v1353 = 0;
          v1354 = 0;
          while (2)
          {
            v1355 = *v2;
            v1356 = *(_QWORD *)&a1[v1355];
            v1357 = v1356 + 1;
            if (v1356 == -1 || v1357 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v1358 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1356);
              *(_QWORD *)&a1[v1355] = v1357;
              v1354 |= (unint64_t)(v1358 & 0x7F) << v1352;
              if (v1358 < 0)
              {
                v1352 += 7;
                v13 = v1353++ >= 9;
                if (v13)
                {
                  v1354 = 0;
                  v1359 = a1[*v4];
                  goto LABEL_3383;
                }
                continue;
              }
            }
            break;
          }
          v1359 = a1[*v4];
          if (a1[*v4])
            v1354 = 0;
LABEL_3383:
          v1360 = v1354 & 7;
          if (v1359)
            v1361 = 1;
          else
            v1361 = v1360 == 4;
          if (!v1361)
          {
            v1362 = v1354 >> 3;
            if ((v1354 >> 3) == 3)
            {
              if (v1360 != 2)
                goto LABEL_3811;
            }
            else
            {
              if ((_DWORD)v1362 == 2)
              {
                if ((v1354 & 7) != 0)
                  goto LABEL_3811;
                v1368 = 0;
                while (1)
                {
                  v1369 = *v2;
                  v1370 = *(_QWORD *)&a1[v1369];
                  v1371 = v1370 + 1;
                  if (v1370 == -1 || v1371 > *(_QWORD *)&a1[*v3])
                    break;
                  v1372 = *(char *)(*(_QWORD *)&a1[*v5] + v1370);
                  *(_QWORD *)&a1[v1369] = v1371;
                  if (v1372 < 0)
                  {
                    v52 = v1368++ > 8;
                    if (!v52)
                      continue;
                  }
                  goto LABEL_3371;
                }
LABEL_3408:
                a1[*v4] = 1;
                continue;
              }
              if ((_DWORD)v1362 == 1)
              {
                if ((v1354 & 7) != 0)
                  goto LABEL_3811;
                v1363 = 0;
                while (1)
                {
                  v1364 = *v2;
                  v1365 = *(_QWORD *)&a1[v1364];
                  v1366 = v1365 + 1;
                  if (v1365 == -1 || v1366 > *(_QWORD *)&a1[*v3])
                    goto LABEL_3408;
                  v1367 = *(char *)(*(_QWORD *)&a1[*v5] + v1365);
                  *(_QWORD *)&a1[v1364] = v1366;
                  if (v1367 < 0)
                  {
                    v52 = v1363++ > 8;
                    if (!v52)
                      continue;
                  }
                  goto LABEL_3371;
                }
              }
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_3811;
            continue;
          }
          break;
        }
LABEL_3411:
        v1373 = a1[*v4];
        PBReaderRecallMark();
        if (v1373)
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x61u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_3416:
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v1374 = 0;
          v1375 = 0;
          v1376 = 0;
          while (2)
          {
            v1377 = *v2;
            v1378 = *(_QWORD *)&a1[v1377];
            v1379 = v1378 + 1;
            if (v1378 == -1 || v1379 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v1380 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1378);
              *(_QWORD *)&a1[v1377] = v1379;
              v1376 |= (unint64_t)(v1380 & 0x7F) << v1374;
              if (v1380 < 0)
              {
                v1374 += 7;
                v13 = v1375++ >= 9;
                if (v13)
                {
                  v1376 = 0;
                  v1381 = a1[*v4];
                  goto LABEL_3428;
                }
                continue;
              }
            }
            break;
          }
          v1381 = a1[*v4];
          if (a1[*v4])
            v1376 = 0;
LABEL_3428:
          v1382 = v1376 & 7;
          if (v1381)
            v1383 = 1;
          else
            v1383 = v1382 == 4;
          if (!v1383)
          {
            v1384 = v1376 >> 3;
            if ((v1376 >> 3) == 3)
            {
              if ((v1376 & 7) == 0)
              {
                v1416 = 0;
                do
                {
                  v1417 = *v2;
                  v1418 = *(_QWORD *)&a1[v1417];
                  v1419 = v1418 + 1;
                  if (v1418 == -1 || v1419 > *(_QWORD *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_3416;
                  }
                  v1420 = *(char *)(*(_QWORD *)&a1[*v5] + v1418);
                  *(_QWORD *)&a1[v1417] = v1419;
                  if ((v1420 & 0x80000000) == 0)
                    break;
                  v52 = v1416++ > 8;
                }
                while (!v52);
                continue;
              }
              goto LABEL_3811;
            }
            if ((_DWORD)v1384 == 2)
            {
              if (v1382 != 2 || !PBReaderPlaceMark() || !GEOPDSSearchTierMetadataIsValid(a1))
                goto LABEL_3811;
            }
            else
            {
              if ((_DWORD)v1384 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
              }
              if (v1382 != 2 || !PBReaderPlaceMark())
                goto LABEL_3811;
              objc_msgSend(a1, "position");
              objc_msgSend(a1, "length");
LABEL_3438:
              while (2)
              {
                if (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
                {
                  v1385 = 0;
                  v1386 = 0;
                  v1387 = 0;
                  while (1)
                  {
                    v1388 = *v2;
                    v1389 = *(_QWORD *)&a1[v1388];
                    v1390 = v1389 + 1;
                    if (v1389 == -1 || v1390 > *(_QWORD *)&a1[*v3])
                      break;
                    v1391 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1389);
                    *(_QWORD *)&a1[v1388] = v1390;
                    v1387 |= (unint64_t)(v1391 & 0x7F) << v1385;
                    if ((v1391 & 0x80) == 0)
                      goto LABEL_3448;
                    v1385 += 7;
                    v13 = v1386++ >= 9;
                    if (v13)
                    {
                      v1387 = 0;
                      v1392 = a1[*v4];
                      goto LABEL_3450;
                    }
                  }
                  a1[*v4] = 1;
LABEL_3448:
                  v1392 = a1[*v4];
                  if (a1[*v4])
                    v1387 = 0;
LABEL_3450:
                  v1393 = v1387 & 7;
                  if (!v1392 && v1393 != 4)
                  {
                    switch((v1387 >> 3))
                    {
                      case 1u:
                        if ((v1387 & 7) != 0)
                          goto LABEL_3810;
                        v1395 = 0;
                        while (1)
                        {
                          v1396 = *v2;
                          v1397 = *(_QWORD *)&a1[v1396];
                          v1398 = v1397 + 1;
                          if (v1397 == -1 || v1398 > *(_QWORD *)&a1[*v3])
                            goto LABEL_3476;
                          v1399 = *(char *)(*(_QWORD *)&a1[*v5] + v1397);
                          *(_QWORD *)&a1[v1396] = v1398;
                          if (v1399 < 0)
                          {
                            v52 = v1395++ > 8;
                            if (!v52)
                              continue;
                          }
                          goto LABEL_3438;
                        }
                      case 2u:
                        if (v1393 == 2)
                          goto LABEL_3466;
                        goto LABEL_3810;
                      case 3u:
                        if (v1393 == 2)
                          goto LABEL_3466;
                        goto LABEL_3810;
                      case 4u:
                        if ((v1387 & 7) != 0)
                          goto LABEL_3810;
                        v1400 = 0;
                        while (1)
                        {
                          v1401 = *v2;
                          v1402 = *(_QWORD *)&a1[v1401];
                          v1403 = v1402 + 1;
                          if (v1402 == -1 || v1403 > *(_QWORD *)&a1[*v3])
                            break;
                          v1404 = *(char *)(*(_QWORD *)&a1[*v5] + v1402);
                          *(_QWORD *)&a1[v1401] = v1403;
                          if (v1404 < 0)
                          {
                            v52 = v1400++ > 8;
                            if (!v52)
                              continue;
                          }
                          goto LABEL_3438;
                        }
LABEL_3476:
                        a1[*v4] = 1;
                        continue;
                      case 5u:
                        if (v1393 == 2 && PBReaderPlaceMark() && GEOPDSSearchTierMetadataIsValid(a1))
                          goto LABEL_3510;
                        goto LABEL_3810;
                      case 6u:
                        if (v1393 != 2 || !PBReaderPlaceMark())
                          goto LABEL_3810;
                        objc_msgSend(a1, "position");
                        objc_msgSend(a1, "length");
                        break;
                      default:
LABEL_3466:
                        if ((PBReaderSkipValueWithTag() & 1) == 0)
                          goto LABEL_3810;
                        continue;
                    }
                    while (1)
                    {
                      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                        goto LABEL_3509;
                      v1405 = 0;
                      v1406 = 0;
                      v1407 = 0;
                      while (1)
                      {
                        v1408 = *v2;
                        v1409 = *(_QWORD *)&a1[v1408];
                        v1410 = v1409 + 1;
                        if (v1409 == -1 || v1410 > *(_QWORD *)&a1[*v3])
                          break;
                        v1411 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1409);
                        *(_QWORD *)&a1[v1408] = v1410;
                        v1407 |= (unint64_t)(v1411 & 0x7F) << v1405;
                        if ((v1411 & 0x80) == 0)
                          goto LABEL_3494;
                        v1405 += 7;
                        v13 = v1406++ >= 9;
                        if (v13)
                        {
                          v1407 = 0;
                          v1412 = a1[*v4];
                          goto LABEL_3496;
                        }
                      }
                      a1[*v4] = 1;
LABEL_3494:
                      v1412 = a1[*v4];
                      if (a1[*v4])
                        v1407 = 0;
LABEL_3496:
                      v1413 = v1407 & 7;
                      if (v1412 || v1413 == 4)
                      {
LABEL_3509:
                        v1415 = a1[*v4];
                        PBReaderRecallMark();
                        if (v1415)
                        {
LABEL_3810:
                          PBReaderRecallMark();
                          goto LABEL_3811;
                        }
LABEL_3510:
                        PBReaderRecallMark();
                        goto LABEL_3438;
                      }
                      if ((v1407 >> 3) == 2)
                        break;
                      if ((v1407 >> 3) == 1)
                      {
                        if (v1413 != 2)
                          goto LABEL_3809;
LABEL_3505:
                        if ((PBReaderSkipValueWithTag() & 1) == 0)
                          goto LABEL_3809;
                      }
                      else if (!PBReaderSkipValueWithTag())
                      {
LABEL_3809:
                        PBReaderRecallMark();
                        goto LABEL_3810;
                      }
                    }
                    if (v1413 != 2)
                      goto LABEL_3809;
                    goto LABEL_3505;
                  }
                }
                break;
              }
              v1421 = a1[*v4];
              PBReaderRecallMark();
              if (v1421)
                goto LABEL_3811;
            }
            PBReaderRecallMark();
            continue;
          }
          break;
        }
        v1516 = a1[*v4];
        PBReaderRecallMark();
        if (v1516)
          goto LABEL_3812;
LABEL_3789:
        PBReaderRecallMark();
LABEL_3790:
        if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
          goto LABEL_3794;
        break;
      case 0x62u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_3531:
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v1422 = 0;
          v1423 = 0;
          v1424 = 0;
          while (2)
          {
            v1425 = *v2;
            v1426 = *(_QWORD *)&a1[v1425];
            v1427 = v1426 + 1;
            if (v1426 == -1 || v1427 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v1428 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1426);
              *(_QWORD *)&a1[v1425] = v1427;
              v1424 |= (unint64_t)(v1428 & 0x7F) << v1422;
              if (v1428 < 0)
              {
                v1422 += 7;
                v13 = v1423++ >= 9;
                if (v13)
                {
                  v1424 = 0;
                  v1429 = a1[*v4];
                  goto LABEL_3543;
                }
                continue;
              }
            }
            break;
          }
          v1429 = a1[*v4];
          if (a1[*v4])
            v1424 = 0;
LABEL_3543:
          v1430 = v1424 & 7;
          if (v1429)
            v1431 = 1;
          else
            v1431 = v1430 == 4;
          if (!v1431)
          {
            switch((v1424 >> 3))
            {
              case 1u:
                if (v1430 != 2 || !PBReaderPlaceMark())
                  goto LABEL_3811;
                objc_msgSend(a1, "position");
                objc_msgSend(a1, "length");
LABEL_3551:
                if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                  goto LABEL_3650;
                v1432 = 0;
                v1433 = 0;
                v1434 = 0;
                while (1)
                {
                  v1435 = *v2;
                  v1436 = *(_QWORD *)&a1[v1435];
                  v1437 = v1436 + 1;
                  if (v1436 == -1 || v1437 > *(_QWORD *)&a1[*v3])
                    break;
                  v1438 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1436);
                  *(_QWORD *)&a1[v1435] = v1437;
                  v1434 |= (unint64_t)(v1438 & 0x7F) << v1432;
                  if ((v1438 & 0x80) == 0)
                    goto LABEL_3561;
                  v1432 += 7;
                  v13 = v1433++ >= 9;
                  if (v13)
                  {
                    v1434 = 0;
                    v1439 = a1[*v4];
                    goto LABEL_3563;
                  }
                }
                a1[*v4] = 1;
LABEL_3561:
                v1439 = a1[*v4];
                if (a1[*v4])
                  v1434 = 0;
LABEL_3563:
                v1440 = v1434 & 7;
                if (v1439)
                  v1441 = 1;
                else
                  v1441 = v1440 == 4;
                if (v1441)
                {
LABEL_3650:
                  v1468 = a1[*v4];
                  PBReaderRecallMark();
                  if (!v1468)
                  {
LABEL_3651:
                    PBReaderRecallMark();
                    continue;
                  }
                  goto LABEL_3811;
                }
                switch((v1434 >> 3))
                {
                  case 1u:
                    if (v1440 != 2 || !PBReaderPlaceMark() || !GEOPDEntityIsValid(a1))
                      goto LABEL_3807;
                    goto LABEL_3623;
                  case 2u:
                    if (v1440 != 2 || !PBReaderPlaceMark())
                      goto LABEL_3807;
                    objc_msgSend(a1, "position");
                    objc_msgSend(a1, "length");
                    break;
                  case 3u:
                    if (v1440 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1))
                      goto LABEL_3807;
                    goto LABEL_3623;
                  case 4u:
                    if (v1440 != 2 || !PBReaderPlaceMark() || !GEOPDPhotoIsValid(a1))
                      goto LABEL_3807;
                    goto LABEL_3623;
                  case 5u:
                    if ((v1434 & 7) != 0)
                      goto LABEL_3807;
                    v1452 = 0;
                    do
                    {
                      v1453 = *v2;
                      v1454 = *(_QWORD *)&a1[v1453];
                      v1455 = v1454 + 1;
                      if (v1454 == -1 || v1455 > *(_QWORD *)&a1[*v3])
                      {
                        a1[*v4] = 1;
                        goto LABEL_3551;
                      }
                      v1456 = *(char *)(*(_QWORD *)&a1[*v5] + v1454);
                      *(_QWORD *)&a1[v1453] = v1455;
                      if ((v1456 & 0x80000000) == 0)
                        break;
                      v52 = v1452++ > 8;
                    }
                    while (!v52);
                    goto LABEL_3551;
                  case 6u:
                    if (v1440 != 2 || !PBReaderPlaceMark() || !GEOPDHoursIsValid(a1))
                      goto LABEL_3807;
                    goto LABEL_3623;
                  case 7u:
                    if (v1440 == 2 && PBReaderPlaceMark() && GEOPDBusinessHoursIsValid(a1))
                      goto LABEL_3623;
                    goto LABEL_3807;
                  default:
                    if ((PBReaderSkipValueWithTag() & 1) == 0)
                      goto LABEL_3807;
                    goto LABEL_3551;
                }
                while (1)
                {
LABEL_3577:
                  if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                    goto LABEL_3624;
                  v1442 = 0;
                  v1443 = 0;
                  v1444 = 0;
                  while (1)
                  {
                    v1445 = *v2;
                    v1446 = *(_QWORD *)&a1[v1445];
                    v1447 = v1446 + 1;
                    if (v1446 == -1 || v1447 > *(_QWORD *)&a1[*v3])
                      break;
                    v1448 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1446);
                    *(_QWORD *)&a1[v1445] = v1447;
                    v1444 |= (unint64_t)(v1448 & 0x7F) << v1442;
                    if ((v1448 & 0x80) == 0)
                      goto LABEL_3587;
                    v1442 += 7;
                    v13 = v1443++ >= 9;
                    if (v13)
                    {
                      v1444 = 0;
                      v1449 = a1[*v4];
                      goto LABEL_3589;
                    }
                  }
                  a1[*v4] = 1;
LABEL_3587:
                  v1449 = a1[*v4];
                  if (a1[*v4])
                    v1444 = 0;
LABEL_3589:
                  v1450 = v1444 & 7;
                  if (v1449 || v1450 == 4)
                  {
LABEL_3624:
                    v1457 = a1[*v4];
                    PBReaderRecallMark();
                    if (!v1457)
                    {
LABEL_3623:
                      PBReaderRecallMark();
                      goto LABEL_3551;
                    }
                    goto LABEL_3807;
                  }
                  if ((v1444 >> 3) == 1)
                    break;
                  if ((PBReaderSkipValueWithTag() & 1) == 0)
                    goto LABEL_3804;
                }
                if (v1450 == 2 && PBReaderPlaceMark() && GEOPDFactoidIsValid(a1))
                {
                  PBReaderRecallMark();
                  goto LABEL_3577;
                }
LABEL_3804:
                PBReaderRecallMark();
                goto LABEL_3807;
              case 2u:
                if (v1430 == 2 && PBReaderPlaceMark() && GEOPDMapsIdentifierIsValid(a1))
                  goto LABEL_3651;
                goto LABEL_3811;
              case 3u:
                if ((v1424 & 7) != 0)
                  goto LABEL_3811;
                v1458 = 0;
                while (1)
                {
                  v1459 = *v2;
                  v1460 = *(_QWORD *)&a1[v1459];
                  v1461 = v1460 + 1;
                  if (v1460 == -1 || v1461 > *(_QWORD *)&a1[*v3])
                    goto LABEL_3649;
                  v1462 = *(char *)(*(_QWORD *)&a1[*v5] + v1460);
                  *(_QWORD *)&a1[v1459] = v1461;
                  if (v1462 < 0)
                  {
                    v52 = v1458++ > 8;
                    if (!v52)
                      continue;
                  }
                  goto LABEL_3531;
                }
              case 4u:
                if ((v1424 & 7) != 0)
                  goto LABEL_3811;
                v1463 = 0;
                do
                {
                  v1464 = *v2;
                  v1465 = *(_QWORD *)&a1[v1464];
                  v1466 = v1465 + 1;
                  if (v1465 == -1 || v1466 > *(_QWORD *)&a1[*v3])
                  {
LABEL_3649:
                    a1[*v4] = 1;
                    goto LABEL_3531;
                  }
                  v1467 = *(char *)(*(_QWORD *)&a1[*v5] + v1465);
                  *(_QWORD *)&a1[v1464] = v1466;
                  if ((v1467 & 0x80000000) == 0)
                    break;
                  v52 = v1463++ > 8;
                }
                while (!v52);
                break;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
            }
            continue;
          }
          break;
        }
LABEL_3652:
        v1469 = a1[*v4];
        PBReaderRecallMark();
        if (!v1469)
          goto LABEL_3789;
        goto LABEL_3812;
      case 0x63u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_3657:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_3776;
          v1470 = 0;
          v1471 = 0;
          v1472 = 0;
          while (2)
          {
            v1473 = *v2;
            v1474 = *(_QWORD *)&a1[v1473];
            v1475 = v1474 + 1;
            if (v1474 == -1 || v1475 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v1476 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1474);
              *(_QWORD *)&a1[v1473] = v1475;
              v1472 |= (unint64_t)(v1476 & 0x7F) << v1470;
              if (v1476 < 0)
              {
                v1470 += 7;
                v13 = v1471++ >= 9;
                if (v13)
                {
                  v1472 = 0;
                  v1477 = a1[*v4];
                  goto LABEL_3669;
                }
                continue;
              }
            }
            break;
          }
          v1477 = a1[*v4];
          if (a1[*v4])
            v1472 = 0;
LABEL_3669:
          v1478 = v1472 & 7;
          if (v1477)
            v1479 = 1;
          else
            v1479 = v1478 == 4;
          if (!v1479)
          {
            switch((v1472 >> 3))
            {
              case 1u:
              case 2u:
              case 3u:
                if (v1478 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1))
                  goto LABEL_3811;
                goto LABEL_3683;
              case 4u:
                if (v1478 != 2 || !PBReaderPlaceMark() || !GEOPDPhotoIsValid(a1))
                  goto LABEL_3811;
LABEL_3683:
                PBReaderRecallMark();
                continue;
              case 5u:
                if ((v1472 & 7) != 0)
                  goto LABEL_3811;
                v1480 = 0;
                break;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_3811;
                continue;
            }
            do
            {
              v1481 = *v2;
              v1482 = *(_QWORD *)&a1[v1481];
              v1483 = v1482 + 1;
              if (v1482 == -1 || v1483 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_3657;
              }
              v1484 = *(char *)(*(_QWORD *)&a1[*v5] + v1482);
              *(_QWORD *)&a1[v1481] = v1483;
              if ((v1484 & 0x80000000) == 0)
                break;
              v52 = v1480++ > 8;
            }
            while (!v52);
            continue;
          }
          goto LABEL_3776;
        }
      case 0x64u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v1485 = 0;
            v1486 = 0;
            v1487 = 0;
            while (2)
            {
              v1488 = *v2;
              v1489 = *(_QWORD *)&a1[v1488];
              v1490 = v1489 + 1;
              if (v1489 == -1 || v1490 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v1491 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1489);
                *(_QWORD *)&a1[v1488] = v1490;
                v1487 |= (unint64_t)(v1491 & 0x7F) << v1485;
                if (v1491 < 0)
                {
                  v1485 += 7;
                  v13 = v1486++ >= 9;
                  if (v13)
                  {
                    v1487 = 0;
                    v1492 = a1[*v4];
                    goto LABEL_3708;
                  }
                  continue;
                }
              }
              break;
            }
            v1492 = a1[*v4];
            if (a1[*v4])
              v1487 = 0;
LABEL_3708:
            v1493 = v1487 & 7;
            if (v1492)
              v1494 = 1;
            else
              v1494 = v1493 == 4;
            if (v1494)
              goto LABEL_3776;
            if ((v1487 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            break;
          }
          if (v1493 == 2 && PBReaderPlaceMark() && GEOPDMapsIdentifierIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x65u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAddressWithComponentsIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x66u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_3776;
            v1495 = 0;
            v1496 = 0;
            v1497 = 0;
            while (2)
            {
              v1498 = *v2;
              v1499 = *(_QWORD *)&a1[v1498];
              v1500 = v1499 + 1;
              if (v1499 == -1 || v1500 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v1501 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1499);
                *(_QWORD *)&a1[v1498] = v1500;
                v1497 |= (unint64_t)(v1501 & 0x7F) << v1495;
                if (v1501 < 0)
                {
                  v1495 += 7;
                  v13 = v1496++ >= 9;
                  if (v13)
                  {
                    v1497 = 0;
                    v1502 = a1[*v4];
                    goto LABEL_3738;
                  }
                  continue;
                }
              }
              break;
            }
            v1502 = a1[*v4];
            if (a1[*v4])
              v1497 = 0;
LABEL_3738:
            v1503 = v1497 & 7;
            if (v1502)
              v1504 = 1;
            else
              v1504 = v1503 == 4;
            if (v1504)
              goto LABEL_3776;
            if ((v1497 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            break;
          }
          if (v1503 == 2 && PBReaderPlaceMark() && GEOPDCaptionedPhotoIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x67u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_3812;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v1505 = 0;
          v1506 = 0;
          v1507 = 0;
          while (2)
          {
            v1508 = *v2;
            v1509 = *(_QWORD *)&a1[v1508];
            v1510 = v1509 + 1;
            if (v1509 == -1 || v1510 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v1511 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1509);
              *(_QWORD *)&a1[v1508] = v1510;
              v1507 |= (unint64_t)(v1511 & 0x7F) << v1505;
              if (v1511 < 0)
              {
                v1505 += 7;
                v13 = v1506++ >= 9;
                if (v13)
                {
                  v1507 = 0;
                  v1512 = a1[*v4];
                  goto LABEL_3764;
                }
                continue;
              }
            }
            break;
          }
          v1512 = a1[*v4];
          if (a1[*v4])
            v1507 = 0;
LABEL_3764:
          v1513 = v1507 & 7;
          if (v1512)
            v1514 = 1;
          else
            v1514 = v1513 == 4;
          if (!v1514)
          {
            if ((v1507 >> 3) != 2 && (v1507 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_3811;
              continue;
            }
            if (v1513 == 2 && PBReaderPlaceMark() && GEOPDMapsIdentifierIsValid(a1))
            {
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_3811;
          }
          break;
        }
LABEL_3776:
        v1515 = a1[*v4];
        PBReaderRecallMark();
        if (v1515)
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x68u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDHikeAssociatedInfoIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x69u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDHikeSummaryIsValid(a1))
          goto LABEL_3812;
        goto LABEL_3789;
      case 0x6Au:
        if (v15 == 2 && PBReaderPlaceMark() && GEOPDHikeGeometryIsValid(a1))
          goto LABEL_3789;
        goto LABEL_3812;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_3812;
        goto LABEL_3790;
    }
  }
}

BOOL GEOPDEntityIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  _BOOL8 v127;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0)
            {
              v23 = v18++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 2u:
          if (v16 == 2)
            goto LABEL_181;
          goto LABEL_240;
        case 3u:
          if (v16 == 2)
            goto LABEL_181;
          goto LABEL_240;
        case 4u:
          if (v16 == 2)
            goto LABEL_181;
          goto LABEL_240;
        case 5u:
          if (v16 == 2)
            goto LABEL_181;
          goto LABEL_240;
        case 6u:
          if (v16 == 2)
            goto LABEL_181;
          goto LABEL_240;
        case 7u:
          if (v16 == 2)
            goto LABEL_181;
          goto LABEL_240;
        case 8u:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v24 = 0;
          while (1)
          {
            v25 = *v2;
            v26 = *(_QWORD *)&a1[v25];
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v28 = *(char *)(*(_QWORD *)&a1[*v5] + v26);
            *(_QWORD *)&a1[v25] = v27;
            if (v28 < 0)
            {
              v23 = v24++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 9u:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v29 = 0;
          while (1)
          {
            v30 = *v2;
            v31 = *(_QWORD *)&a1[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v33 = *(char *)(*(_QWORD *)&a1[*v5] + v31);
            *(_QWORD *)&a1[v30] = v32;
            if (v33 < 0)
            {
              v23 = v29++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 0xAu:
        case 0xBu:
        case 0x17u:
        case 0x18u:
        case 0x1Du:
        case 0x29u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1))
            goto LABEL_240;
          goto LABEL_215;
        case 0xCu:
        case 0x22u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDCategoryIsValid(a1))
            goto LABEL_240;
          goto LABEL_215;
        case 0xEu:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v34 = 0;
          while (1)
          {
            v35 = *v2;
            v36 = *(_QWORD *)&a1[v35];
            v37 = v36 + 1;
            if (v36 == -1 || v37 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v38 = *(char *)(*(_QWORD *)&a1[*v5] + v36);
            *(_QWORD *)&a1[v35] = v37;
            if (v38 < 0)
            {
              v23 = v34++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 0xFu:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v39 = 0;
          while (1)
          {
            v40 = *v2;
            v41 = *(_QWORD *)&a1[v40];
            v42 = v41 + 1;
            if (v41 == -1 || v42 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v43 = *(char *)(*(_QWORD *)&a1[*v5] + v41);
            *(_QWORD *)&a1[v40] = v42;
            if (v43 < 0)
            {
              v23 = v39++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 0x10u:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v44 = 0;
          while (1)
          {
            v45 = *v2;
            v46 = *(_QWORD *)&a1[v45];
            v47 = v46 + 1;
            if (v46 == -1 || v47 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v48 = *(char *)(*(_QWORD *)&a1[*v5] + v46);
            *(_QWORD *)&a1[v45] = v47;
            if (v48 < 0)
            {
              v23 = v44++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 0x11u:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v49 = 0;
          while (1)
          {
            v50 = *v2;
            v51 = *(_QWORD *)&a1[v50];
            v52 = v51 + 1;
            if (v51 == -1 || v52 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v53 = *(char *)(*(_QWORD *)&a1[*v5] + v51);
            *(_QWORD *)&a1[v50] = v52;
            if (v53 < 0)
            {
              v23 = v49++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 0x12u:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v54 = 0;
          while (1)
          {
            v55 = *v2;
            v56 = *(_QWORD *)&a1[v55];
            v57 = v56 + 1;
            if (v56 == -1 || v57 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v58 = *(char *)(*(_QWORD *)&a1[*v5] + v56);
            *(_QWORD *)&a1[v55] = v57;
            if (v58 < 0)
            {
              v23 = v54++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 0x13u:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v59 = 0;
          while (1)
          {
            v60 = *v2;
            v61 = *(_QWORD *)&a1[v60];
            v62 = v61 + 1;
            if (v61 == -1 || v62 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v63 = *(char *)(*(_QWORD *)&a1[*v5] + v61);
            *(_QWORD *)&a1[v60] = v62;
            if (v63 < 0)
            {
              v23 = v59++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 0x14u:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v64 = 0;
          while (1)
          {
            v65 = *v2;
            v66 = *(_QWORD *)&a1[v65];
            v67 = v66 + 1;
            if (v66 == -1 || v67 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v68 = *(char *)(*(_QWORD *)&a1[*v5] + v66);
            *(_QWORD *)&a1[v65] = v67;
            if (v68 < 0)
            {
              v23 = v64++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 0x15u:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v69 = 0;
          while (1)
          {
            v70 = *v2;
            v71 = *(_QWORD *)&a1[v70];
            v72 = v71 + 1;
            if (v71 == -1 || v72 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v73 = *(char *)(*(_QWORD *)&a1[*v5] + v71);
            *(_QWORD *)&a1[v70] = v72;
            if (v73 < 0)
            {
              v23 = v69++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 0x16u:
          if (v16 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_240;
            while (1)
            {
              v74 = *v2;
              v75 = *(_QWORD *)&a1[v74];
              v76 = v75 + 1;
              if (v75 == -1 || v76 > *(_QWORD *)&a1[*v3])
                goto LABEL_210;
              v77 = *(char *)(*(_QWORD *)&a1[*v5] + v75);
              *(_QWORD *)&a1[v74] = v76;
              if (v77 < 0)
              {
                v78 = v16++;
                if (v78 <= 8)
                  continue;
              }
              goto LABEL_216;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_240;
LABEL_219:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v117 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v118 = *v2;
              v119 = *(_QWORD *)&a1[v118];
              v120 = v119 + 1;
              if (v119 == -1 || v120 > *(_QWORD *)&a1[*v3])
                break;
              v121 = *(char *)(*(_QWORD *)&a1[*v5] + v119);
              *(_QWORD *)&a1[v118] = v120;
              if (v121 < 0)
              {
                v13 = v117++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_219;
            }
            a1[*v4] = 1;
          }
          goto LABEL_215;
        case 0x19u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOStyleAttributesIsValid(a1))
            goto LABEL_240;
          goto LABEL_215;
        case 0x1Au:
          if (v16 == 2)
            goto LABEL_181;
          goto LABEL_240;
        case 0x1Bu:
          if (v16 == 2)
            goto LABEL_181;
          goto LABEL_240;
        case 0x1Cu:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v79 = 0;
          while (1)
          {
            v80 = *v2;
            v81 = *(_QWORD *)&a1[v80];
            v82 = v81 + 1;
            if (v81 == -1 || v82 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v83 = *(char *)(*(_QWORD *)&a1[*v5] + v81);
            *(_QWORD *)&a1[v80] = v82;
            if (v83 < 0)
            {
              v23 = v79++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 0x1Eu:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v84 = 0;
          while (1)
          {
            v85 = *v2;
            v86 = *(_QWORD *)&a1[v85];
            v87 = v86 + 1;
            if (v86 == -1 || v87 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v88 = *(char *)(*(_QWORD *)&a1[*v5] + v86);
            *(_QWORD *)&a1[v85] = v87;
            if (v88 < 0)
            {
              v23 = v84++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 0x1Fu:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v89 = 0;
          while (1)
          {
            v90 = *v2;
            v91 = *(_QWORD *)&a1[v90];
            v92 = v91 + 1;
            if (v91 == -1 || v92 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v93 = *(char *)(*(_QWORD *)&a1[*v5] + v91);
            *(_QWORD *)&a1[v90] = v92;
            if (v93 < 0)
            {
              v23 = v89++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 0x20u:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v94 = 0;
          while (1)
          {
            v95 = *v2;
            v96 = *(_QWORD *)&a1[v95];
            v97 = v96 + 1;
            if (v96 == -1 || v97 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v98 = *(char *)(*(_QWORD *)&a1[*v5] + v96);
            *(_QWORD *)&a1[v95] = v97;
            if (v98 < 0)
            {
              v23 = v94++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 0x21u:
          if (v16 == 2)
            goto LABEL_181;
          goto LABEL_240;
        case 0x23u:
          if (v16 != 5)
            goto LABEL_240;
          v99 = *v2;
          v100 = *(_QWORD *)&a1[v99];
          if (v100 > 0xFFFFFFFFFFFFFFFBLL)
            goto LABEL_211;
          v101 = v100 + 4;
          if (v101 > *(_QWORD *)&a1[*v3])
            goto LABEL_211;
          *(_QWORD *)&a1[v99] = v101;
          goto LABEL_216;
        case 0x24u:
          if (v16 == 2)
            goto LABEL_181;
          goto LABEL_240;
        case 0x25u:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v102 = 0;
          while (1)
          {
            v103 = *v2;
            v104 = *(_QWORD *)&a1[v103];
            v105 = v104 + 1;
            if (v104 == -1 || v105 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v106 = *(char *)(*(_QWORD *)&a1[*v5] + v104);
            *(_QWORD *)&a1[v103] = v105;
            if (v106 < 0)
            {
              v23 = v102++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 0x26u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDInlineRapEnablementIsValid(a1))
            goto LABEL_240;
          goto LABEL_215;
        case 0x27u:
          if ((v8 & 7) != 0)
            goto LABEL_240;
          v107 = 0;
          while (1)
          {
            v108 = *v2;
            v109 = *(_QWORD *)&a1[v108];
            v110 = v109 + 1;
            if (v109 == -1 || v110 > *(_QWORD *)&a1[*v3])
              goto LABEL_210;
            v111 = *(char *)(*(_QWORD *)&a1[*v5] + v109);
            *(_QWORD *)&a1[v108] = v110;
            if (v111 < 0)
            {
              v23 = v107++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_216;
          }
        case 0x28u:
          if (v16 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_240:
              PBReaderRecallMark();
              return 0;
            }
LABEL_229:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v122 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v123 = *v2;
                v124 = *(_QWORD *)&a1[v123];
                v125 = v124 + 1;
                if (v124 == -1 || v125 > *(_QWORD *)&a1[*v3])
                  break;
                v126 = *(char *)(*(_QWORD *)&a1[*v5] + v124);
                *(_QWORD *)&a1[v123] = v125;
                if (v126 < 0)
                {
                  v13 = v122++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_229;
              }
              a1[*v4] = 1;
            }
LABEL_215:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_240;
            while (1)
            {
              v112 = *v2;
              v113 = *(_QWORD *)&a1[v112];
              v114 = v113 + 1;
              if (v113 == -1 || v114 > *(_QWORD *)&a1[*v3])
                break;
              v115 = *(char *)(*(_QWORD *)&a1[*v5] + v113);
              *(_QWORD *)&a1[v112] = v114;
              if (v115 < 0)
              {
                v116 = v16++;
                if (v116 <= 8)
                  continue;
              }
              goto LABEL_216;
            }
LABEL_210:
            v14 = *v4;
LABEL_211:
            a1[v14] = 1;
          }
LABEL_216:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_238;
          break;
        case 0x2Au:
          if (v16 == 2 && PBReaderPlaceMark() && GEOPDURLDataIsValid(a1))
            goto LABEL_215;
          goto LABEL_240;
        default:
LABEL_181:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_240;
          goto LABEL_216;
      }
    }
  }
LABEL_238:
  v127 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v127;
}

BOOL GEOFormattedStringIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 3u:
          if (v15 != 2)
            goto LABEL_42;
          goto LABEL_26;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormatArgumentIsValid(a1))
            goto LABEL_42;
          goto LABEL_39;
        case 5u:
          if (v15 == 2)
            goto LABEL_26;
          goto LABEL_42;
        case 6u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormatStyleIsValid(a1))
            goto LABEL_42;
          goto LABEL_39;
        case 7u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOConditionalFormattedStringIsValid(a1))
            goto LABEL_42;
          goto LABEL_39;
        case 8u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringMetaDataIsValid(a1))
            goto LABEL_42;
LABEL_39:
          PBReaderRecallMark();
          goto LABEL_40;
        default:
LABEL_26:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_42:
            PBReaderRecallMark();
            return 0;
          }
LABEL_40:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_41;
          break;
      }
    }
  }
LABEL_41:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEORoadAccessPointIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  _BOOL8 v58;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_93;
          PBReaderRecallMark();
          continue;
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_93;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_89;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_90;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_93;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_89;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_90;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_93;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_89;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_90;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_93;
          v33 = 0;
          while (1)
          {
            v34 = *v2;
            v35 = *(_QWORD *)&a1[v34];
            v36 = v35 + 1;
            if (v35 == -1 || v36 > *(_QWORD *)&a1[*v3])
              goto LABEL_89;
            v37 = *(char *)(*(_QWORD *)&a1[*v5] + v35);
            *(_QWORD *)&a1[v34] = v36;
            if (v37 < 0)
            {
              v22 = v33++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_90;
          }
        case 0xBu:
          if ((v8 & 7) != 0)
            goto LABEL_93;
          v38 = 0;
          while (1)
          {
            v39 = *v2;
            v40 = *(_QWORD *)&a1[v39];
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)&a1[*v3])
              goto LABEL_89;
            v42 = *(char *)(*(_QWORD *)&a1[*v5] + v40);
            *(_QWORD *)&a1[v39] = v41;
            if (v42 < 0)
            {
              v22 = v38++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_90;
          }
        case 0xCu:
          if ((v8 & 7) != 0)
            goto LABEL_93;
          v43 = 0;
          while (1)
          {
            v44 = *v2;
            v45 = *(_QWORD *)&a1[v44];
            v46 = v45 + 1;
            if (v45 == -1 || v46 > *(_QWORD *)&a1[*v3])
              goto LABEL_89;
            v47 = *(char *)(*(_QWORD *)&a1[*v5] + v45);
            *(_QWORD *)&a1[v44] = v46;
            if (v47 < 0)
            {
              v22 = v43++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_90;
          }
        case 0xDu:
          if ((v8 & 7) != 0)
            goto LABEL_93;
          v48 = 0;
          while (1)
          {
            v49 = *v2;
            v50 = *(_QWORD *)&a1[v49];
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)&a1[*v3])
              goto LABEL_89;
            v52 = *(char *)(*(_QWORD *)&a1[*v5] + v50);
            *(_QWORD *)&a1[v49] = v51;
            if (v52 < 0)
            {
              v22 = v48++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_90;
          }
        case 0xEu:
          if ((v8 & 7) != 0)
            goto LABEL_93;
          v53 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_93:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v54 = *v2;
        v55 = *(_QWORD *)&a1[v54];
        v56 = v55 + 1;
        if (v55 == -1 || v56 > *(_QWORD *)&a1[*v3])
          break;
        v57 = *(char *)(*(_QWORD *)&a1[*v5] + v55);
        *(_QWORD *)&a1[v54] = v56;
        if (v57 < 0)
        {
          v22 = v53++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_90;
      }
LABEL_89:
      a1[*v4] = 1;
LABEL_90:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v58 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v58;
}

BOOL GEOPDGuideSummaryLayoutMetadataIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  _BOOL8 v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v13 || (v8 & 7) == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_33;
        v15 = 0;
        while (1)
        {
          v16 = *v2;
          v17 = *(_QWORD *)&a1[v16];
          if (v17 == -1 || v17 >= *(_QWORD *)&a1[*v3])
            break;
          v18 = v17 + 1;
          v19 = *(char *)(*(_QWORD *)&a1[*v5] + v17);
          *(_QWORD *)&a1[v16] = v18;
          if (v19 < 0 && v15++ <= 8)
            continue;
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        v21 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v21 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v21;
}

BOOL GEOPDAdamAppIdentifierIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_26:
          v17 = 0;
          goto LABEL_25;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_26;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
LABEL_25:
  PBReaderRecallMark();
  return v17;
}

BOOL GEOLocalizedStringIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_27;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_27;
      if ((v8 >> 3) == 3)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2)
          goto LABEL_29;
        goto LABEL_23;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_29:
        v17 = 0;
        goto LABEL_28;
      }
LABEL_26:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_27;
    }
    if (v15 != 2)
      goto LABEL_29;
LABEL_23:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_29;
    goto LABEL_26;
  }
LABEL_27:
  v17 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v17;
}

BOOL GEOLatLngE7IsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  char v19;
  char v20;
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BOOL4 v29;
  _BOOL8 v30;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v32[0] = 0;
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_40;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
      {
LABEL_40:
        v29 = HIDWORD(v32[0]) != 0;
        goto LABEL_42;
      }
      if ((v8 >> 3) == 1)
      {
        v22 = 0;
        v23 = 1;
        while (1)
        {
          v24 = v23;
          v25 = *((_DWORD *)v32 + v22);
          if (!v25)
            break;
          if (v25 != 1)
          {
            v23 = 0;
            v22 = 1;
            if ((v24 & 1) != 0)
              continue;
          }
          goto LABEL_46;
        }
        *((_DWORD *)v32 + v22) = 1;
      }
      else
      {
        if ((v8 >> 3) != 2)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_46;
          goto LABEL_39;
        }
        v18 = 0;
        v19 = 1;
        while (1)
        {
          v20 = v19;
          v21 = *((_DWORD *)v32 + v18);
          if (!v21)
            break;
          if (v21 != 2)
          {
            v19 = 0;
            v18 = 1;
            if ((v20 & 1) != 0)
              continue;
          }
          goto LABEL_46;
        }
        *((_DWORD *)v32 + v18) = 2;
      }
      if (v16 != 5)
      {
LABEL_46:
        PBReaderRecallMark();
        return 0;
      }
      v26 = *v2;
      v27 = *(_QWORD *)&a1[v26];
      if (v27 <= 0xFFFFFFFFFFFFFFFBLL && (v28 = v27 + 4, v28 <= *(_QWORD *)&a1[*v3]))
        *(_QWORD *)&a1[v26] = v28;
      else
        a1[v14] = 1;
LABEL_39:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_40;
    }
  }
  v29 = 0;
LABEL_42:
  if (a1[*v4])
    v30 = 0;
  else
    v30 = v29;
  PBReaderRecallMark();
  return v30;
}

BOOL GEOFormatStyleIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_37;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8)
            continue;
          goto LABEL_34;
        }
        a1[*v4] = 1;
      }
      else if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_37:
          v23 = 0;
          goto LABEL_36;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_37;
      }
LABEL_34:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v23 = a1[*v4] == 0;
LABEL_36:
  PBReaderRecallMark();
  return v23;
}

double GEOMapRectInset(double result, double a2, double a3, double a4, double a5)
{
  double v5;

  v5 = fabs(a2);
  if (fabs(result) != INFINITY && v5 != INFINITY)
    return result + a5;
  return result;
}

double GEOCoordinateRegionMakeWithDistance(double a1)
{
  long double v2;

  v2 = a1 * 0.0174532925;
  cos(v2 + v2);
  cos(v2 * 4.0);
  cos(v2 * 6.0);
  cos(v2);
  cos(v2 * 3.0);
  cos(v2 * 5.0);
  return a1;
}

void sub_188726580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL GEOCoarseLocationTileDataReadAllFrom(void *a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v18;
  GEOCoarseLocationTerritoryInfo *v20;
  _BOOL8 v21;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          if (v11++ >= 9)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v20 = objc_alloc_init(GEOCoarseLocationTerritoryInfo);
          if (!GEOCoarseLocationTerritoryInfoReadAllFrom((uint64_t)v20, v5, a3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addTerritory:", v20, 0, 0);

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v21 = v5[*v8] == 0;
  }
  else
  {
LABEL_27:
    v21 = 0;
  }
  objc_sync_exit(v5);

  return v21;
}

void sub_1887269FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOCoarseLocationTerritoryInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 116))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOCoarseLocationTerritoryInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 112) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 116) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOCoarseLocationTerritoryInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOCoarseLocationTerritoryInfoReadAllFrom_initialTag;
  Specified = GEOCoarseLocationTerritoryInfoReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 96), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
  return Specified;
}

void sub_188726BFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOCoarseLocationTerritoryInfoReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  const float *v11;
  uint32x4_t v12;
  int8x16_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  BOOL v30;
  int v31;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  int *v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  int v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  char v111;
  char v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  int v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  int v126;
  int v127;
  int v128;
  void *v129;
  GEOCoarseLocationPolygon *v131;
  char v132;
  char v133;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 116);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 112));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (const float *)(a1 + 148);
  v12 = (uint32x4_t)vld1q_dup_f32(v11);
  v13.i64[0] = 0x100000001;
  v13.i64[1] = 0x100000001;
  v14 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_189CC1510), v13));
  while (2)
  {
    v15 = 1;
    v16 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v15 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v17 = v14 > 2;
        v18 = v10 | v17;
        if ((((v10 | v17) | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_219;
        v133 = (v19 == 0) | v18;
        v22 = (int *)MEMORY[0x1E0D82BB8];
        v132 = v10 | v17;
        break;
      default:
        ++v14;
LABEL_6:
        v15 = v9;
        v16 = v10;
LABEL_8:
        ++v7;
        v9 = v15;
        v10 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v21))
      goto LABEL_219;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_23;
      v23 += 7;
      v30 = v24++ >= 9;
      if (v30)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_23:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_25:
    v32 = v25 & 7;
    if (v31 || v32 == 4)
    {
LABEL_219:
      if ((v18 & 1) != 0)
      {
        v125 = 1;
        goto LABEL_221;
      }
      if (!v19)
        goto LABEL_236;
      while (1)
      {
        while (1)
        {
          v127 = *v19++;
          v126 = v127;
          if (v127 <= 12)
            break;
          if (v126 == 13)
          {
            v128 = 0x2000;
LABEL_234:
            *(_DWORD *)(a1 + 148) |= v128;
          }
          else if (v126 == 14)
          {
            v128 = 0x4000;
            goto LABEL_234;
          }
        }
        switch(v126)
        {
          case 4:
            v128 = 4096;
            goto LABEL_234;
          case 12:
            v128 = 0x8000;
            goto LABEL_234;
          case 0:
            goto LABEL_236;
        }
      }
    }
    v34 = v25 >> 3;
    v35 = v18;
    if ((v133 & 1) == 0)
    {
      v36 = v19;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_155;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        *(_DWORD *)(a1 + 148) |= 0x200u;
        while (1)
        {
          v43 = *v20;
          v44 = *(_QWORD *)(v3 + v43);
          v45 = v44 + 1;
          if (v44 == -1 || v45 > *(_QWORD *)(v3 + *v6))
            break;
          v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v44);
          *(_QWORD *)(v3 + v43) = v45;
          v42 |= (unint64_t)(v46 & 0x7F) << v40;
          if ((v46 & 0x80) == 0)
            goto LABEL_158;
          v40 += 7;
          v30 = v41++ >= 9;
          if (v30)
          {
            LODWORD(v42) = 0;
            goto LABEL_160;
          }
        }
        *(_BYTE *)(v3 + *v21) = 1;
LABEL_158:
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v42) = 0;
LABEL_160:
        v113 = 140;
        goto LABEL_185;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_155;
        v47 = 0;
        v48 = 0;
        v42 = 0;
        *(_DWORD *)(a1 + 148) |= 0x40u;
        while (2)
        {
          v49 = *v20;
          v50 = *(_QWORD *)(v3 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v50);
            *(_QWORD *)(v3 + v49) = v51;
            v42 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              v30 = v48++ >= 9;
              if (v30)
              {
                LODWORD(v42) = 0;
                goto LABEL_164;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v42) = 0;
LABEL_164:
        v113 = 128;
        goto LABEL_185;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_155;
        v53 = 0;
        v54 = 0;
        v42 = 0;
        *(_DWORD *)(a1 + 148) |= 0x20u;
        while (2)
        {
          v55 = *v20;
          v56 = *(_QWORD *)(v3 + v55);
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v56);
            *(_QWORD *)(v3 + v55) = v57;
            v42 |= (unint64_t)(v58 & 0x7F) << v53;
            if (v58 < 0)
            {
              v53 += 7;
              v30 = v54++ >= 9;
              if (v30)
              {
                LODWORD(v42) = 0;
                goto LABEL_168;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v42) = 0;
LABEL_168:
        v113 = 124;
        goto LABEL_185;
      case 4:
        if (!v35 || (*(_BYTE *)(a1 + 149) & 0x10) != 0)
          goto LABEL_155;
        if (v32 != 2)
        {
          v117 = 0;
          v118 = 0;
          v119 = 0;
          while (1)
          {
            v120 = *v20;
            v121 = *(_QWORD *)(v3 + v120);
            v122 = v121 + 1;
            if (v121 == -1 || v122 > *(_QWORD *)(v3 + *v6))
              break;
            v123 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v121);
            *(_QWORD *)(v3 + v120) = v122;
            v119 |= (unint64_t)(v123 & 0x7F) << v117;
            if (v123 < 0)
            {
              v117 += 7;
              v30 = v118++ >= 9;
              if (!v30)
                continue;
            }
            goto LABEL_218;
          }
          *(_BYTE *)(v3 + *v21) = 1;
LABEL_218:
          PBRepeatedUInt32Add();
          goto LABEL_198;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_241;
        while (1)
        {
          v59 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v60 = 0;
          v61 = 0;
          v62 = 0;
          while (1)
          {
            v63 = *v20;
            v64 = *(_QWORD *)(v3 + v63);
            v65 = v64 + 1;
            if (v64 == -1 || v65 > *(_QWORD *)(v3 + *v6))
              break;
            v66 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v64);
            *(_QWORD *)(v3 + v63) = v65;
            v62 |= (unint64_t)(v66 & 0x7F) << v60;
            if (v66 < 0)
            {
              v60 += 7;
              v30 = v61++ >= 9;
              if (!v30)
                continue;
            }
            goto LABEL_75;
          }
          *(_BYTE *)(v3 + *v59) = 1;
LABEL_75:
          PBRepeatedUInt32Add();
        }
        PBReaderRecallMark();
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v18 = v132;
        goto LABEL_213;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_155;
        v67 = 0;
        v68 = 0;
        v69 = 0;
        *(_DWORD *)(a1 + 148) |= 0x400u;
        while (2)
        {
          v70 = *v20;
          v71 = *(_QWORD *)(v3 + v70);
          v72 = v71 + 1;
          if (v71 == -1 || v72 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v73 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v71);
            *(_QWORD *)(v3 + v70) = v72;
            v69 |= (unint64_t)(v73 & 0x7F) << v67;
            if (v73 < 0)
            {
              v67 += 7;
              v30 = v68++ >= 9;
              if (v30)
              {
                v69 = 0;
                goto LABEL_172;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v69 = 0;
LABEL_172:
        v114 = v69 != 0;
        v115 = 144;
        goto LABEL_190;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_155;
        v74 = 0;
        v75 = 0;
        v76 = 0;
        *(_DWORD *)(a1 + 148) |= 8u;
        while (2)
        {
          v77 = *v20;
          v78 = *(_QWORD *)(v3 + v77);
          v79 = v78 + 1;
          if (v78 == -1 || v79 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v80 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v78);
            *(_QWORD *)(v3 + v77) = v79;
            v76 |= (unint64_t)(v80 & 0x7F) << v74;
            if (v80 < 0)
            {
              v74 += 7;
              v30 = v75++ >= 9;
              if (v30)
              {
                v76 = 0;
                goto LABEL_176;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v76 = 0;
LABEL_176:
        *(_QWORD *)(a1 + 80) = v76;
        goto LABEL_213;
      case 7:
        if ((v8 & 1) == 0)
        {
          v111 = PBReaderSkipValueWithTag();
          v18 = v132;
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if ((v111 & 1) == 0)
            goto LABEL_239;
          goto LABEL_213;
        }
        if (!PBReaderPlaceMark()
          || (GEOCoarseLocationLatLngReadAllFrom((_QWORD *)(a1 + 40), v3) & 1) == 0)
        {
          goto LABEL_241;
        }
        PBReaderRecallMark();
        *(_DWORD *)(a1 + 148) |= 1u;
        goto LABEL_198;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_155;
        *(_DWORD *)(a1 + 148) |= 2u;
        v81 = *v20;
        v82 = *(_QWORD *)(v3 + v81);
        if (v82 <= 0xFFFFFFFFFFFFFFF7 && v82 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v83 = *(_QWORD *)(*(_QWORD *)(v3 + *v22) + v82);
          *(_QWORD *)(v3 + v81) = v82 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v21) = 1;
          v83 = 0;
        }
        v124 = 56;
        goto LABEL_212;
      case 9:
        if ((v8 & 1) == 0)
          goto LABEL_155;
        v84 = 0;
        v85 = 0;
        v42 = 0;
        *(_DWORD *)(a1 + 148) |= 0x100u;
        while (2)
        {
          v86 = *v20;
          v87 = *(_QWORD *)(v3 + v86);
          v88 = v87 + 1;
          if (v87 == -1 || v88 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v89 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v87);
            *(_QWORD *)(v3 + v86) = v88;
            v42 |= (unint64_t)(v89 & 0x7F) << v84;
            if (v89 < 0)
            {
              v84 += 7;
              v30 = v85++ >= 9;
              if (v30)
              {
                LODWORD(v42) = 0;
                goto LABEL_180;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v42) = 0;
LABEL_180:
        v113 = 136;
        goto LABEL_185;
      case 10:
        if ((v8 & 1) == 0)
          goto LABEL_155;
        *(_DWORD *)(a1 + 148) |= 4u;
        v90 = *v20;
        v91 = *(_QWORD *)(v3 + v90);
        if (v91 <= 0xFFFFFFFFFFFFFFF7 && v91 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v83 = *(_QWORD *)(*(_QWORD *)(v3 + *v22) + v91);
          *(_QWORD *)(v3 + v90) = v91 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v21) = 1;
          v83 = 0;
        }
        v124 = 64;
        goto LABEL_212;
      case 11:
        if ((v8 & 1) == 0)
          goto LABEL_155;
        *(_DWORD *)(a1 + 148) |= 0x10u;
        v92 = *v20;
        v93 = *(_QWORD *)(v3 + v92);
        if (v93 <= 0xFFFFFFFFFFFFFFF7 && v93 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v83 = *(_QWORD *)(*(_QWORD *)(v3 + *v22) + v93);
          *(_QWORD *)(v3 + v92) = v93 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v21) = 1;
          v83 = 0;
        }
        v124 = 88;
LABEL_212:
        *(_QWORD *)(a1 + v124) = v83;
        goto LABEL_213;
      case 12:
        if (!v35)
          goto LABEL_155;
        if ((*(_BYTE *)(a1 + 149) & 0x80) == 0)
        {
          PBReaderReadString();
          v94 = objc_claimAutoreleasedReturnValue();
          v95 = 104;
          goto LABEL_122;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_241;
        v116 = (int)(*(_DWORD *)(a1 + 148) << 16) >> 31;
        goto LABEL_197;
      case 13:
        if (!v35)
          goto LABEL_155;
        if ((*(_BYTE *)(a1 + 149) & 0x20) == 0)
        {
          PBReaderReadString();
          v94 = objc_claimAutoreleasedReturnValue();
          v95 = 72;
LABEL_122:
          v96 = *(void **)(a1 + v95);
          *(_QWORD *)(a1 + v95) = v94;
          goto LABEL_128;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_241;
        v116 = (int)(*(_DWORD *)(a1 + 148) << 18) >> 31;
        goto LABEL_197;
      case 14:
        if (!v35)
          goto LABEL_155;
        if ((*(_BYTE *)(a1 + 149) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_241;
          v116 = (int)(*(_DWORD *)(a1 + 148) << 17) >> 31;
LABEL_197:
          v7 += v116;
          goto LABEL_198;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_241;
        v131 = objc_alloc_init(GEOCoarseLocationPolygon);
        if (GEOCoarseLocationPolygonReadAllFrom((uint64_t)v131, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v96 = *(void **)(a1 + 96);
          *(_QWORD *)(a1 + 96) = v131;
LABEL_128:

          --v7;
LABEL_198:
          v18 = v132;
          v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_213:
          if (!(v18 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_219;
          continue;
        }

LABEL_241:
        v125 = 0;
        v18 = v132;
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_221:
        *(_DWORD *)(a1 + 148) |= 0x1000u;
        *(_DWORD *)(a1 + 148) |= 0x8000u;
        *(_DWORD *)(a1 + 148) |= 0x2000u;
        *(_DWORD *)(a1 + 148) |= 0x4000u;
        if ((v125 & 1) != 0)
        {
LABEL_236:
          v3 = *(_BYTE *)(v3 + *v21) == 0;
          if ((v18 & 1) != 0)
            goto LABEL_237;
          return v3;
        }
        v3 = 0;
        if ((v18 & 1) == 0)
          return v3;
LABEL_237:
        v129 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      case 16:
        if ((v8 & 1) == 0)
          goto LABEL_155;
        v98 = 0;
        v99 = 0;
        v42 = 0;
        *(_DWORD *)(a1 + 148) |= 0x80u;
        while (2)
        {
          v100 = *v20;
          v101 = *(_QWORD *)(v3 + v100);
          v102 = v101 + 1;
          if (v101 == -1 || v102 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v103 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v101);
            *(_QWORD *)(v3 + v100) = v102;
            v42 |= (unint64_t)(v103 & 0x7F) << v98;
            if (v103 < 0)
            {
              v98 += 7;
              v30 = v99++ >= 9;
              if (v30)
              {
                LODWORD(v42) = 0;
                goto LABEL_184;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v42) = 0;
LABEL_184:
        v113 = 132;
LABEL_185:
        *(_DWORD *)(a1 + v113) = v42;
        goto LABEL_213;
      case 17:
        if ((v8 & 1) != 0)
        {
          v104 = 0;
          v105 = 0;
          v106 = 0;
          *(_DWORD *)(a1 + 148) |= 0x800u;
          while (1)
          {
            v107 = *v20;
            v108 = *(_QWORD *)(v3 + v107);
            v109 = v108 + 1;
            if (v108 == -1 || v109 > *(_QWORD *)(v3 + *v6))
              break;
            v110 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v108);
            *(_QWORD *)(v3 + v107) = v109;
            v106 |= (unint64_t)(v110 & 0x7F) << v104;
            if ((v110 & 0x80) == 0)
              goto LABEL_187;
            v104 += 7;
            v30 = v105++ >= 9;
            if (v30)
            {
              v106 = 0;
              goto LABEL_189;
            }
          }
          *(_BYTE *)(v3 + *v21) = 1;
LABEL_187:
          if (*(_BYTE *)(v3 + *v21))
            v106 = 0;
LABEL_189:
          v114 = v106 != 0;
          v115 = 145;
LABEL_190:
          *(_BYTE *)(a1 + v115) = v114;
        }
        else
        {
LABEL_155:
          v112 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          v18 = v132;
          if ((v112 & 1) == 0)
          {
LABEL_239:
            v125 = 0;
            goto LABEL_221;
          }
        }
        goto LABEL_213;
      default:
        v97 = PBReaderSkipValueWithTag();
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v18 = v132;
        if (!v97)
          goto LABEL_239;
        goto LABEL_213;
    }
  }
}

uint64_t GEOCoarseLocationLatLngReadAllFrom(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v24 = 0;
        }
        a1[1] = v24;
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0;
        }
        *a1 = v21;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

unint64_t GEOCoarseLocationPolygonReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOCoarseLocationPolygonReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOCoarseLocationPolygonReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOCoarseLocationPolygonReadAllFrom_initialTag;
  Specified = GEOCoarseLocationPolygonReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOCoarseLocationPolygonCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_188727DE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1887283C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

id GEOGetCoarseLocationLog()
{
  if (qword_1ECDBC388 != -1)
    dispatch_once(&qword_1ECDBC388, &__block_literal_global_129);
  return (id)_MergedGlobals_269;
}

uint64_t GEOCoarseLocationTerritoryInfoContainsPoint(void *a1, double *a2, double *a3, int64x2_t *a4)
{
  id v7;
  int v8;
  int64x2_t *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  char v13;
  double v14;
  char v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char v23;
  double v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  double v29;
  char v30;
  void *v31;
  int64x2_t v33;
  int64x2_t v34;
  void *__p;
  void *v36;
  void *v37[2];
  int64x2_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43[3];
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = objc_msgSend(v7, "hasPolygon");
  *a4 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  a4[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v9 = a4 + 1;
  if (v8)
  {
    objc_msgSend(v7, "polygon");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "shell");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    _polygonForRing((uint64_t)v43, v11, a2, a4);

    v12 = 0;
    v13 = 1;
    do
    {
      v14 = a3[v12];
      if (v14 < *(double *)&a4->i64[v12] || v14 >= *(double *)&v9->i64[v12])
        goto LABEL_27;
      v15 = v13;
      v13 = 0;
      v12 = 1;
    }
    while ((v15 & 1) != 0);
    if (!geo::containsPoint<double>(v43, a3))
    {
LABEL_27:
      v26 = 0;
      goto LABEL_28;
    }
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    objc_msgSend(v7, "polygon");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "holes");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
    if (v18)
    {
      v19 = *(_QWORD *)v40;
      v33 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      v34 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      while (2)
      {
        v20 = 0;
        while (2)
        {
          if (*(_QWORD *)v40 != v19)
            objc_enumerationMutation(v17);
          v21 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * v20);
          *(int64x2_t *)v37 = v34;
          v38 = v33;
          _polygonForRing((uint64_t)&__p, v21, a2, (int64x2_t *)v37);
          v22 = 0;
          v23 = 1;
          while (1)
          {
            v24 = a3[v22];
            if (v24 < *(double *)&v37[v22] || v24 >= *(double *)&v38.i64[v22])
              break;
            v25 = v23;
            v23 = 0;
            v22 = 1;
            if ((v25 & 1) == 0)
            {
              if ((geo::containsPoint<double>((uint64_t *)&__p, a3) & 1) != 0)
              {
                if (__p)
                {
                  v36 = __p;
                  operator delete(__p);
                }
                v26 = 0;
                goto LABEL_38;
              }
              break;
            }
          }
          if (__p)
          {
            v36 = __p;
            operator delete(__p);
          }
          if (++v20 != v18)
            continue;
          break;
        }
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
        if (v18)
          continue;
        break;
      }
    }
    v26 = 1;
LABEL_38:

LABEL_28:
    v31 = (void *)v43[0];
    if (v43[0])
    {
      v43[1] = v43[0];
LABEL_33:
      operator delete(v31);
    }
  }
  else
  {
    _polygonForPackedPoints((char **)v37, objc_msgSend(v7, "coordinates"), objc_msgSend(v7, "coordinatesCount"), a2, 4, a4);
    v27 = 0;
    v28 = 1;
    while (1)
    {
      v29 = a3[v27];
      if (v29 < *(double *)&a4->i64[v27] || v29 >= *(double *)&v9->i64[v27])
        break;
      v30 = v28;
      v28 = 0;
      v27 = 1;
      if ((v30 & 1) == 0)
      {
        v26 = geo::containsPoint<double>((uint64_t *)v37, a3);
        goto LABEL_31;
      }
    }
    v26 = 0;
LABEL_31:
    v31 = v37[0];
    if (v37[0])
    {
      v37[1] = v37[0];
      goto LABEL_33;
    }
  }

  return v26;
}

void sub_188728870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  void *v30;
  void *v31;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1887289E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _polygonForRing(uint64_t a1, void *a2, double *a3, int64x2_t *a4)
{
  id v6;
  unint64_t v7;
  int64x2_t *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char v23;
  char v24;
  double v25;
  double v26;
  __int128 v28;
  __int128 v29;
  char *v30;

  v6 = a2;
  v29 = 0uLL;
  v30 = 0;
  std::vector<gm::Matrix<double,2,1>>::reserve((void **)&v29, objc_msgSend(v6, "pointsCount"));
  v7 = 0;
  *a4 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  a4[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v8 = a4 + 1;
  while (v7 < objc_msgSend(v6, "pointsCount"))
  {
    v9 = objc_msgSend(v6, "pointsAtIndex:", v7);
    v10 = a3[1];
    *(double *)&v28 = *a3 + (double)SHIDWORD(v9) * 0.00000001;
    *((double *)&v28 + 1) = v10 - (double)(int)v9 * 0.00000001;
    v11 = *((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1) >= (unint64_t)v30)
    {
      v13 = (uint64_t)(*((_QWORD *)&v29 + 1) - v29) >> 4;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v15 = (uint64_t)&v30[-v29];
      if ((uint64_t)&v30[-v29] >> 3 > v14)
        v14 = v15 >> 3;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)&v30, v16);
      else
        v17 = 0;
      v18 = &v17[16 * v13];
      *(_OWORD *)v18 = v28;
      v19 = (char *)*((_QWORD *)&v29 + 1);
      v20 = (char *)v29;
      v21 = v18;
      if (*((_QWORD *)&v29 + 1) != (_QWORD)v29)
      {
        do
        {
          *((_OWORD *)v21 - 1) = *((_OWORD *)v19 - 1);
          v21 -= 16;
          v19 -= 16;
        }
        while (v19 != v20);
        v19 = (char *)v29;
      }
      v12 = v18 + 16;
      *(_QWORD *)&v29 = v21;
      *((_QWORD *)&v29 + 1) = v18 + 16;
      v30 = &v17[16 * v16];
      if (v19)
        operator delete(v19);
    }
    else
    {
      **((_OWORD **)&v29 + 1) = v28;
      v12 = (_OWORD *)(v11 + 16);
    }
    v22 = 0;
    *((_QWORD *)&v29 + 1) = v12;
    v23 = 1;
    do
    {
      v24 = v23;
      v25 = *((double *)&v28 + v22);
      v26 = *(double *)&a4->i64[v22];
      if (v25 < v26)
        v26 = *((double *)&v28 + v22);
      *(double *)&a4->i64[v22] = v26;
      if (*(double *)&v8->i64[v22] >= v25)
        v25 = *(double *)&v8->i64[v22];
      *(double *)&v8->i64[v22] = v25;
      v22 = 1;
      v23 = 0;
    }
    while ((v24 & 1) != 0);
    ++v7;
  }
  *(_OWORD *)a1 = v29;
  *(_QWORD *)(a1 + 16) = v30;

}

void sub_188728C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_188728E00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCoarseLocationPolygonReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  BOOL v15;
  int *v16;
  int *v17;
  unint64_t v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  int v28;
  unint64_t v30;
  _BOOL4 v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  int *v36;
  GEOCoarseLocationRing *v37;
  void *v38;
  char v39;
  char v40;
  int v41;
  int v42;
  char v43;
  void *v44;
  BOOL v46;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (1)
  {
    v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1)
    v14 = 0;
  else
    v14 = a3;
  v15 = v14 == 0;
  if (v12)
    v15 = 1;
  v46 = v15;
  v16 = (int *)MEMORY[0x1E0D82BF0];
  v17 = (int *)MEMORY[0x1E0D82BC8];
  v18 = 0x1ECDA9000uLL;
  v19 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_62;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v16;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_26;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_28;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_26:
    v28 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v22 = 0;
LABEL_28:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_62:
      if (v13)
      {
        v40 = 1;
        goto LABEL_73;
      }
      if (!v14)
        goto LABEL_74;
      while (1)
      {
        v42 = *v14++;
        v41 = v42;
        if (v42 == 1)
          break;
        if (v41 == 2)
        {
          v43 = 1;
LABEL_71:
          *(_BYTE *)(a1 + *(int *)(v18 + 1640)) |= v43;
        }
        else if (!v41)
        {
          goto LABEL_74;
        }
      }
      v43 = 2;
      goto LABEL_71;
    }
    v30 = v22 >> 3;
    v31 = v13;
    if (!v46)
    {
      v32 = v14;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    if ((_DWORD)v30 != 2)
    {
      if ((_DWORD)v30 != 1)
      {
        if (!PBReaderSkipValueWithTag())
          goto LABEL_72;
        goto LABEL_55;
      }
      if (v31)
      {
        if ((*(_BYTE *)(a1 + *(int *)(v18 + 1640)) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_72:
            v40 = 0;
            goto LABEL_73;
          }
          v7 += *(unsigned __int8 *)(a1 + *(int *)(v18 + 1640)) << 30 >> 31;
        }
        else
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_72;
          v36 = v17;
          v37 = objc_alloc_init(GEOCoarseLocationRing);
          if (!GEOCoarseLocationRingReadAllFrom((uint64_t)v37, (void *)v3))
            goto LABEL_79;
          PBReaderRecallMark();
          v38 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v37;

          --v7;
LABEL_51:
          v17 = v36;
          v18 = 0x1ECDA9000;
        }
LABEL_55:
        if (v7)
          v39 = 1;
        else
          v39 = v13;
        if ((v39 & 1) == 0)
          goto LABEL_62;
        continue;
      }
LABEL_54:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_72;
      goto LABEL_55;
    }
    break;
  }
  if (!v31 || (*(_BYTE *)(a1 + *(int *)(v18 + 1640)) & 1) != 0)
    goto LABEL_54;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_72;
  v36 = v17;
  v37 = objc_alloc_init(GEOCoarseLocationRing);
  if (GEOCoarseLocationRingReadAllFrom((uint64_t)v37, (void *)v3))
  {
    PBReaderRecallMark();
    -[GEOCoarseLocationPolygon _addNoFlagsHoles:](a1, v37);

    goto LABEL_51;
  }
LABEL_79:

  v40 = 0;
  v17 = v36;
  v18 = 0x1ECDA9000;
LABEL_73:
  *(_BYTE *)(a1 + *(int *)(v18 + 1640)) |= 2u;
  *(_BYTE *)(a1 + *(int *)(v18 + 1640)) |= 1u;
  if ((v40 & 1) != 0)
  {
LABEL_74:
    v3 = *(_BYTE *)(v3 + *v17) == 0;
    if (v13)
      goto LABEL_75;
  }
  else
  {
    v3 = 0;
    if (v13)
    {
LABEL_75:
      v44 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

    }
  }
  return v3;
}

BOOL GEOCoarseLocationRingReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  _BOOL8 v18;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_26;
          -[GEOCoarseLocationRing _reservePoints:](a1, 1uLL);
          if (!GEOCoarseLocationPointReadAllFrom((_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * *(_QWORD *)(a1 + 16)), (uint64_t)v3))goto LABEL_26;
          PBReaderRecallMark();
          ++*(_QWORD *)(a1 + 16);
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_26;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v18 = v3[*v6] == 0;
  }
  else
  {
LABEL_26:
    v18 = 0;
  }
  objc_sync_exit(v3);

  return v18;
}

void sub_188729438(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCoarseLocationPointReadAllFrom(_DWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  _DWORD *v7;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  _DWORD *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = a1 + 1;
    v8 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v3;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v4))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        if (v10++ >= 9)
        {
          v11 = 0;
          v17 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v17 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v11 = 0;
LABEL_14:
      if (v17 || (v11 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v11 >> 3) == 1)
        break;
      if ((v11 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
          {
            v27 = v7;
            goto LABEL_38;
          }
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0)
            break;
          v19 += 7;
          v26 = v20++ > 8;
          if (v26)
          {
            LODWORD(v21) = 0;
            v27 = v7;
            goto LABEL_41;
          }
        }
        v27 = v7;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_41:
        *v27 = -(v21 & 1) ^ ((int)v21 >> 1);
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v28 = 0;
    v29 = 0;
    v21 = 0;
    while (1)
    {
      v30 = *v3;
      v31 = *(_QWORD *)(a2 + v30);
      v32 = v31 + 1;
      if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
        break;
      v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v31);
      *(_QWORD *)(a2 + v30) = v32;
      v21 |= (unint64_t)(v33 & 0x7F) << v28;
      if ((v33 & 0x80) == 0)
      {
        v27 = a1;
        goto LABEL_39;
      }
      v28 += 7;
      v26 = v29++ > 8;
      if (v26)
      {
        LODWORD(v21) = 0;
        v27 = a1;
        goto LABEL_41;
      }
    }
    v27 = a1;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18872986C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188729A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188729B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_188729CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t GEOActiveTileGroupReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 612))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOActiveTileGroupReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 616));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 608) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 612) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOActiveTileGroupReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOActiveTileGroupReadAllFrom_initialTag;
  Specified = GEOActiveTileGroupReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOActiveTileGroupCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 616));
  return Specified;
}

void sub_188729E98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOGetGEOPrivacyManagerLog()
{
  if (qword_1ECDBC110 != -1)
    dispatch_once(&qword_1ECDBC110, &__block_literal_global_101);
  return (id)qword_1ECDBC108;
}

void sub_18872A208(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18872A2C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18872A378(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18872A430(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceGlobalResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 436))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDPlaceGlobalResultReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 440));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 432) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 436) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDPlaceGlobalResultReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDPlaceGlobalResultReadAllFrom_initialTag;
  Specified = GEOPDPlaceGlobalResultReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDPlaceGlobalResultCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 440));
  return Specified;
}

void sub_18872A5C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceGlobalResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint32x4_t v13;
  int8x16_t v14;
  int32x4_t v15;
  uint64x2_t v16;
  int32x4_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unsigned __int8 v25;
  char v26;
  int *v27;
  int *v28;
  int *v29;
  int *v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  int v39;
  unint64_t v41;
  BOOL v42;
  int *v43;
  int v44;
  int v45;
  BOOL v46;
  GEOPDSearchResult *v47;
  uint64_t v48;
  id v49;
  void *v50;
  int v51;
  void *v52;
  char v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  void *v57;
  int v59;
  char v60;
  char v61;
  char v62;
  BOOL v63;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 440));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 436);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 432));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = *(_QWORD *)(a1 + 444);
  v13 = (uint32x4_t)vdupq_n_s32(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  v15 = (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CC9E60), v14);
  v16 = (uint64x2_t)vdupq_n_s64(v12);
  v17 = (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CC9E90), v14);
  v18 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v16, (uint64x2_t)xmmword_189CC9ED0), (int32x4_t)vshlq_u64(v16, (uint64x2_t)xmmword_189CC9EC0)), v14))+ (v12 >> 31)+ vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CC9EB0), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CC9EA0), v14)));
  *(int32x2_t *)v13.i8 = vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v16, (uint64x2_t)xmmword_189CC9F00)), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)__PAIR64__(v12 >> 33, v12 >> 3), (int8x8_t)0x100000001)), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v13.i8, (uint32x2_t)0xFFFFFFE8FFFFFFFCLL), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v16, (uint64x2_t)xmmword_189CC9EF0)),
                                              (int8x8_t)0x100000001)),
                               vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v13.i8, (uint32x2_t)0xFFFFFFF4FFFFFFEFLL), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v16, (uint64x2_t)xmmword_189CC9EE0)), (int8x8_t)0x100000001)))), vadd_s32((int32x2_t)__PAIR64__((v12 >> 22) & 1, vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v16, (uint64x2_t)xmmword_189CC9E80), (int32x4_t)vshlq_u64(
                                                                                            v16,
                                                                                            (uint64x2_t)xmmword_189CC9E70)),
                                                                  v14))),
                             (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v13.i8, (uint32x2_t)0xFFFFFFF5FFFFFFFELL), (int8x8_t)0x100000001)));
  v19 = vadd_s32(*(int32x2_t *)v13.i8, vdup_lane_s32(*(int32x2_t *)v13.i8, 1)).u32[0]
      + ((v12 >> 1) & 1)
      + ((v12 >> 30) & 1)
      + ((v12 >> 50) & 1)
      + ((v12 >> 9) & 1)
      + ((v12 >> 35) & 1)
      + ((v12 >> 29) & 1)
      + ((v12 >> 34) & 1)
      + ((v12 >> 41) & 1)
      + ((v12 >> 14) & 1)
      + ((v12 >> 44) & 1)
      + ((v12 >> 21) & 1)
      + (v12 & 1)
      + v18
      + vaddvq_s32(vaddq_s32(v15, v17));
  while (2)
  {
    v20 = 1;
    v21 = 1;
    v22 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v19;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v21 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v23 = v19 > 0x27;
        v24 = v23 & ~(_BYTE)v11;
        v25 = v23 | v11;
        v60 = v24 | v9;
        v26 = v25 | v24 | v9;
        if (((v25 | v8) & 1) != 0)
          v27 = 0;
        else
          v27 = a3;
        v63 = v25;
        v61 = v26;
        v62 = (v27 == 0) | v25;
        v28 = (int *)MEMORY[0x1E0D82BF0];
        v29 = (int *)MEMORY[0x1E0D82BC8];
        v30 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v19;
LABEL_7:
        v20 = v9;
LABEL_8:
        v21 = v10;
        v22 = v11;
LABEL_10:
        ++v7;
        v9 = v20;
        v10 = v21;
        v11 = v22;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v28) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v29))
      goto LABEL_408;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    while (1)
    {
      v34 = *v28;
      v35 = *(_QWORD *)(v3 + v34);
      v36 = v35 + 1;
      if (v35 == -1 || v36 > *(_QWORD *)(v3 + *v6))
        break;
      v37 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v35);
      *(_QWORD *)(v3 + v34) = v36;
      v33 |= (unint64_t)(v37 & 0x7F) << v31;
      if ((v37 & 0x80) == 0)
        goto LABEL_25;
      v31 += 7;
      if (v32++ >= 9)
      {
        v33 = 0;
        v39 = *(unsigned __int8 *)(v3 + *v29);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v29) = 1;
LABEL_25:
    v39 = *(unsigned __int8 *)(v3 + *v29);
    if (*(_BYTE *)(v3 + *v29))
      v33 = 0;
LABEL_27:
    if (v39 || (v33 & 7) == 4)
    {
LABEL_408:
      v59 = 1;
      goto LABEL_409;
    }
    v41 = v33 >> 3;
    v42 = v63;
    if ((v62 & 1) == 0)
    {
      v43 = v27;
      do
      {
        v45 = *v43++;
        v44 = v45;
        v42 = v45 != 0;
        if (v45)
          v46 = v44 == (_DWORD)v41;
        else
          v46 = 1;
      }
      while (!v46);
    }
    switch((int)v41)
    {
      case 1:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 449) & 0x10) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_473;
          v47 = objc_alloc_init(GEOPDSearchResult);
          if (GEOPDSearchResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            v48 = 368;
            goto LABEL_300;
          }
          goto LABEL_472;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_473;
        v54 = *(_QWORD *)(a1 + 444) << 19;
        goto LABEL_405;
      case 2:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 446) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 42;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDGeocodingResult);
        if (!GEOPDGeocodingResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 184;
        goto LABEL_300;
      case 3:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 445) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 49;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDCanonicalLocationSearchResult);
        if (!GEOPDCanonicalLocationSearchResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 128;
        goto LABEL_300;
      case 4:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 449) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 22;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDReverseGeocodingResult);
        if (!GEOPDReverseGeocodingResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 344;
        goto LABEL_300;
      case 5:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 448) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 29;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDPlaceLookupResult);
        if (!GEOPDPlaceLookupResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 288;
        goto LABEL_300;
      case 6:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 447) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 34;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDMerchantLookupResult);
        if (!GEOPDMerchantLookupResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 248;
        goto LABEL_300;
      case 7:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 448) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 28;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDPlaceRefinementResult);
        if (!GEOPDPlaceRefinementResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 296;
        goto LABEL_300;
      case 8:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 449) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 16;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDSiriSearchResult);
        if (!GEOPDSiriSearchResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 392;
        goto LABEL_300;
      case 9:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 447) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 38;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDLocationDirectedSearchResult);
        if (!GEOPDLocationDirectedSearchResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 216;
        goto LABEL_300;
      case 10:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 444) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 57;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDAutocompleteResult);
        if (!GEOPDAutocompleteResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 64;
        goto LABEL_300;
      case 11:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 445) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 50;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDSearchBrowseCategorySuggestionResult);
        if (!GEOPDSearchBrowseCategorySuggestionResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 120;
        goto LABEL_300;
      case 12:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 445) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 48;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDCategorySearchResult);
        if (!GEOPDCategorySearchResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 136;
        goto LABEL_300;
      case 13:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 448) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 25;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDPopularNearbySearchResult);
        if (!GEOPDPopularNearbySearchResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 320;
        goto LABEL_300;
      case 14:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 449) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 18;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDSearchZeroKeywordCategorySuggestionResult);
        if (!GEOPDSearchZeroKeywordCategorySuggestionResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 376;
        goto LABEL_300;
      case 15:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 449) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 20;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDSearchFieldPlaceholderResult);
        if (!GEOPDSearchFieldPlaceholderResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 360;
        goto LABEL_300;
      case 16:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 445) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 54;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDBatchPopularNearbySearchResult);
        if (!GEOPDBatchPopularNearbySearchResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 88;
        goto LABEL_300;
      case 17:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 450) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 13;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDVendorSpecificPlaceRefinementResult);
        if (!GEOPDVendorSpecificPlaceRefinementResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 416;
        goto LABEL_300;
      case 18:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 447) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 33;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDNearbySearchResult);
        if (!GEOPDNearbySearchResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 256;
        goto LABEL_300;
      case 19:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 444) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 62;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDAddressObjectGeocodingResult);
        if (!GEOPDAddressObjectGeocodingResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 24;
        goto LABEL_300;
      case 20:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 449) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 17;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDSearchZeroKeywordWithSearchResultsSuggestionResult);
        if (!GEOPDSearchZeroKeywordWithSearchResultsSuggestionResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 384;
        goto LABEL_300;
      case 21:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 446) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 44;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDExternalTransitLookupResult);
        if (!GEOPDExternalTransitLookupResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 168;
        goto LABEL_300;
      case 22:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 446) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 43;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDFeatureIdGeocodingResult);
        if (!GEOPDFeatureIdGeocodingResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 176;
        goto LABEL_300;
      case 23:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 447) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 36;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDMapsIdentifierPlaceLookupResult);
        if (!GEOPDMapsIdentifierPlaceLookupResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 232;
        goto LABEL_300;
      case 25:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 445) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 53;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDBatchReverseGeocodingResult);
        if (!GEOPDBatchReverseGeocodingResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 96;
        goto LABEL_300;
      case 30:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 445) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 51;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDBrandLookupResult);
        if (!GEOPDBrandLookupResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 112;
        goto LABEL_300;
      case 32:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 450) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 12;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDWifiFingerprintResult);
        if (!GEOPDWifiFingerprintResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 424;
        goto LABEL_300;
      case 34:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 447) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 39;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDIpGeoLookupResult);
        if (!GEOPDIpGeoLookupResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 208;
        goto LABEL_300;
      case 35:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 446) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 41;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDGroundViewLabelResult);
        if (!GEOPDGroundViewLabelResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 192;
        goto LABEL_300;
      case 36:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 445) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 52;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDBatchSpatialLookupResult);
        if (!GEOPDBatchSpatialLookupResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 104;
        goto LABEL_300;
      case 37:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 448) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 30;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDPlaceGlobalCommonResult);
        if (!GEOPDPlaceGlobalCommonResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 280;
        goto LABEL_300;
      case 38:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 448) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 31;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDPlaceCollectionLookupResult);
        if (!GEOPDPlaceCollectionLookupResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 272;
        goto LABEL_300;
      case 39:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 450) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 14;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDTransitScheduleLookupResult);
        if (!GEOPDTransitScheduleLookupResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 408;
        goto LABEL_300;
      case 40:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 444) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 56;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDBatchCategoryLookupResult);
        if (!GEOPDBatchCategoryLookupResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 72;
        goto LABEL_300;
      case 41:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 445) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 55;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDBatchMerchantLookupBrandResult);
        if (!GEOPDBatchMerchantLookupBrandResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 80;
        goto LABEL_300;
      case 42:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 446) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 47;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDChildPlaceLookupByCategoryResult);
        if (!GEOPDChildPlaceLookupByCategoryResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 144;
        goto LABEL_300;
      case 43:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 447) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 35;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDMapsSearchHomeResult);
        if (!GEOPDMapsSearchHomeResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 240;
        goto LABEL_300;
      case 44:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 446) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 46;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDCollectionSuggestionResult);
        if (!GEOPDCollectionSuggestionResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 152;
        goto LABEL_300;
      case 45:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 448) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 24;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDPublisherViewResult);
        if (!GEOPDPublisherViewResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 328;
        goto LABEL_300;
      case 46:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 444) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 59;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDAllCollectionsViewResult);
        if (!GEOPDAllCollectionsViewResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 48;
        goto LABEL_300;
      case 47:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 444) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 60;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDAirportEntityPlaceLookupResult);
        if (!GEOPDAirportEntityPlaceLookupResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 40;
        goto LABEL_300;
      case 48:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 450) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 15;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDTerritoryLookupResult);
        if (!GEOPDTerritoryLookupResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 400;
        goto LABEL_300;
      case 49:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 447) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 37;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDMapsHomeResult);
        if (!GEOPDMapsHomeResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 224;
        goto LABEL_300;
      case 50:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 444) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 58;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDAllGuidesLocationsViewResult);
        if (!GEOPDAllGuidesLocationsViewResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 56;
        goto LABEL_300;
      case 51:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 446) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 40;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDGuidesHomeResult);
        if (!GEOPDGuidesHomeResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 200;
        goto LABEL_300;
      case 54:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 446) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 45;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDExtendedGeoLookupResult);
        if (!GEOPDExtendedGeoLookupResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 160;
        goto LABEL_300;
      case 55:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 449) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 23;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDQueryUnderstandingResult);
        if (!GEOPDQueryUnderstandingResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 336;
        goto LABEL_300;
      case 56:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 448) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 26;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDPoiAtAddressLookupResult);
        if (!GEOPDPoiAtAddressLookupResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 312;
        goto LABEL_300;
      case 58:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 448) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 27;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDPlacecardEnrichmentResult);
        if (!GEOPDPlacecardEnrichmentResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 304;
        goto LABEL_300;
      case 59:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 447) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 32;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDOfflineRegionNameResult);
        if (!GEOPDOfflineRegionNameResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 264;
        goto LABEL_300;
      case 60:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 449) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 21;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDSearchCapabilitiesResult);
        if (!GEOPDSearchCapabilitiesResultReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_472;
        PBReaderRecallMark();
        v48 = 352;
        goto LABEL_300;
      case 62:
        if (!v42)
          goto LABEL_301;
        if ((*(_BYTE *)(a1 + 444) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_473;
          v54 = *(_QWORD *)(a1 + 444) << 61;
LABEL_405:
          v7 += v54 >> 63;
LABEL_406:
          v29 = (int *)MEMORY[0x1E0D82BC8];
LABEL_407:
          v30 = (int *)MEMORY[0x1E0D82BB8];
          if (!(v61 & 1 | (v7 != 0)))
            goto LABEL_408;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_473;
        v47 = objc_alloc_init(GEOPDAddressRecommendationResult);
        if (GEOPDAddressRecommendationResultReadAllFrom((uint64_t)v47, (void *)v3))
        {
          PBReaderRecallMark();
          v48 = 32;
LABEL_300:
          v52 = *(void **)(a1 + v48);
          *(_QWORD *)(a1 + v48) = v47;

          --v7;
          goto LABEL_406;
        }
LABEL_472:

LABEL_473:
        v59 = 0;
        v29 = (int *)MEMORY[0x1E0D82BC8];
LABEL_409:
        if ((v60 & 1) != 0)
LABEL_410:
          *(_QWORD *)(a1 + 444) |= 1uLL;
        if (v63 || (v59 & 1) == 0)
        {
          *(_QWORD *)(a1 + 444) |= 0xFFFFFFFFFFFFEuLL;
        }
        else if (v27)
        {
          while (1)
          {
            v55 = *v27++;
            v56 = 0x100000000000;
            switch(v55)
            {
              case 0:
                goto LABEL_466;
              case 1:
                goto LABEL_465;
              case 2:
                v56 = 0x200000;
                goto LABEL_465;
              case 3:
                v56 = 0x4000;
                goto LABEL_465;
              case 4:
                v56 = 0x20000000000;
                goto LABEL_465;
              case 5:
                v56 = 0x400000000;
                goto LABEL_465;
              case 6:
                v56 = 0x20000000;
                goto LABEL_465;
              case 7:
                v56 = 0x800000000;
                goto LABEL_465;
              case 8:
                v56 = 0x800000000000;
                goto LABEL_465;
              case 9:
                v56 = 0x2000000;
                goto LABEL_465;
              case 10:
                v56 = 64;
                goto LABEL_465;
              case 11:
                v56 = 0x2000;
                goto LABEL_465;
              case 12:
                v56 = 0x8000;
                goto LABEL_465;
              case 13:
                v56 = 0x4000000000;
                goto LABEL_465;
              case 14:
                v56 = 0x200000000000;
                goto LABEL_465;
              case 15:
                v56 = 0x80000000000;
                goto LABEL_465;
              case 16:
                v56 = 512;
                goto LABEL_465;
              case 17:
                v56 = 0x4000000000000;
                goto LABEL_465;
              case 18:
                v56 = 0x40000000;
                goto LABEL_465;
              case 19:
                v56 = 2;
                goto LABEL_465;
              case 20:
                v56 = 0x400000000000;
                goto LABEL_465;
              case 21:
                v56 = 0x80000;
                goto LABEL_465;
              case 22:
                v56 = 0x100000;
                goto LABEL_465;
              case 23:
                v56 = 0x8000000;
                goto LABEL_465;
              case 25:
                v56 = 1024;
                goto LABEL_465;
              case 30:
                v56 = 4096;
                goto LABEL_465;
              case 32:
                v56 = 0x8000000000000;
                goto LABEL_465;
              case 34:
                v56 = 0x1000000;
                goto LABEL_465;
              case 35:
                v56 = 0x400000;
                goto LABEL_465;
              case 36:
                v56 = 2048;
                goto LABEL_465;
              case 37:
                v56 = 0x200000000;
                goto LABEL_465;
              case 38:
                v56 = 0x100000000;
                goto LABEL_465;
              case 39:
                v56 = 0x2000000000000;
                goto LABEL_465;
              case 40:
                v56 = 128;
                goto LABEL_465;
              case 41:
                v56 = 256;
                goto LABEL_465;
              case 42:
                v56 = 0x10000;
                goto LABEL_465;
              case 43:
                v56 = 0x10000000;
                goto LABEL_465;
              case 44:
                v56 = 0x20000;
                goto LABEL_465;
              case 45:
                v56 = 0x8000000000;
                goto LABEL_465;
              case 46:
                v56 = 16;
                goto LABEL_465;
              case 47:
                v56 = 8;
                goto LABEL_465;
              case 48:
                v56 = 0x1000000000000;
                goto LABEL_465;
              case 49:
                v56 = 0x4000000;
                goto LABEL_465;
              case 50:
                v56 = 32;
                goto LABEL_465;
              case 51:
                v56 = 0x800000;
                goto LABEL_465;
              case 54:
                v56 = 0x40000;
                goto LABEL_465;
              case 55:
                v56 = 0x10000000000;
                goto LABEL_465;
              case 56:
                v56 = 0x2000000000;
                goto LABEL_465;
              case 58:
                v56 = 0x1000000000;
                goto LABEL_465;
              case 59:
                v56 = 0x80000000;
                goto LABEL_465;
              case 60:
                v56 = 0x40000000000;
                goto LABEL_465;
              case 62:
                v56 = 4;
LABEL_465:
                *(_QWORD *)(a1 + 444) |= v56;
                break;
              default:
                continue;
            }
          }
        }
LABEL_466:
        if (v59)
          v3 = *(_BYTE *)(v3 + *v29) == 0;
        else
          v3 = 0;
        if (v63)
        {
          v57 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v60 & 1) == 0 || (*(_BYTE *)(a1 + 444) & 1) != 0)
        {
LABEL_301:
          v53 = PBReaderSkipValueWithTag();
          v29 = (int *)MEMORY[0x1E0D82BC8];
          if ((v53 & 1) == 0)
          {
            v59 = 0;
            goto LABEL_409;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v49 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v50 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v49;

          }
          v51 = PBUnknownFieldAdd();
          v29 = (int *)MEMORY[0x1E0D82BC8];
          if (!v51)
          {
            v59 = 0;
            goto LABEL_410;
          }
        }
        goto LABEL_407;
    }
  }
}

void sub_18872CB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18872D370(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18872D430(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::decodeIntCompressorArray<unsigned char>(_QWORD *a1, uint64_t *a2, char a3, char a4, uint64_t a5)
{
  uint8x8_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;

  v5 = *(uint8x8_t **)a5;
  v6 = *(_QWORD *)(a5 + 8);
  v16 = 0;
  if (!a2)
    return 0;
  result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v16);
  if ((_DWORD)result)
  {
    v12 = v16;
    v13 = a1[6];
    v14 = v13 + v16;
    if (v14 <= a1[7])
    {
      v15 = (unsigned __int8 *)(a1[5] + v13);
      a1[6] = v14;
      return mgcl::ints::IntDecompressor<unsigned char>::decompress(a2, v15, v12, a3, a4, v6 - (_QWORD)v5, v5) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mgcl::ints::IntDecompressor<unsigned char>::decompress(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, char a4, char a5, size_t a6, uint8x8_t *a7)
{
  size_t v12;
  uint64_t result;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD **v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  BOOL v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  char *v51;
  char *v52;
  size_t v53;
  size_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  size_t v60;
  size_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  int v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD **v80;
  _QWORD *v81;
  _QWORD *v82;
  void *v83;
  void *v84;
  unsigned int v85;
  unsigned __int8 *v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  size_t v92;
  unsigned __int8 *v93;
  unint64_t v94;
  uint64_t v95;
  size_t v96;
  size_t v97;
  char *v98;
  char *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  _BYTE *v102;
  unint64_t v103;
  char *v104;
  _BYTE *v105;
  unsigned __int8 *v106;
  char *v107;
  char *v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  size_t v113;
  char v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  int v119;
  unint64_t v120;
  char v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  unsigned int v127;
  int v128;
  int v129;
  unint64_t v130;
  uint64_t v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  char *v134;
  size_t v135;
  unsigned __int8 *v136;
  unint64_t v137;
  uint64_t v138;
  size_t v139;
  size_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  _BYTE *v146;
  unint64_t v147;
  char *v148;
  _BYTE *v149;
  unsigned __int8 *v150;
  char *v151;
  char *v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  unint64_t v157;
  uint64_t v158;
  unsigned __int8 *v159;
  int v160;
  uint64_t *v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  unsigned int v165;
  int v166;
  int v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  unint64_t v172;
  uint64_t *v173;
  size_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  size_t v178;
  size_t v179;
  uint64_t *v180;
  char *v181;
  char *v182;
  size_t v183;
  uint64_t *v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  size_t v189;
  unsigned int v190;
  size_t v191;
  char *v192;
  char *v193;
  _BYTE *v194;
  int v195;
  int v196;
  int v197;
  int v198;
  uint64_t i;
  int v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  size_t v204;
  _BYTE *v205;
  int v206;
  int v207;
  int v208;
  int v209;
  uint64_t j;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  int v216;
  char v217;
  unsigned int v218;
  uint64_t v219;
  int v220;
  int v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unsigned int v225;
  int v226;
  uint64_t v227;
  BOOL v228;
  int v229;
  char v230;
  int v231;
  char v232;
  char v233;
  unsigned int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  unsigned __int8 *v239;
  int v240;
  unsigned int v241;
  uint64_t v242;
  char v243;
  int v244;
  char v245;
  unsigned int v246;
  uint64_t v247;
  int v248;
  int v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unsigned int v253;
  int v254;
  uint64_t v255;
  char v256;
  int v257;
  char v258;
  char v259;
  unsigned int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  char *v265;
  int v266;
  BOOL v267;
  unsigned int v268;
  char *v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  uint8x8_t *v277;
  size_t v278;
  int v279;
  unint64_t v280;
  uint64_t v281;
  char *v282;
  unint64_t v283;
  unint64_t v284;
  unsigned int v285;
  int v286;
  unsigned int v287;
  int v288;
  int v289;
  uint8x8_t *v290;
  char *v291;
  char *v292;
  unint64_t v293;
  unint64_t v294;
  char *v295;
  unint64_t v296;
  char *v297;
  _OWORD *v298;
  unsigned __int8 *v299;
  unint64_t v300;
  __int128 v301;
  _QWORD *v302;
  unsigned __int8 *v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  _OWORD *v309;
  unsigned __int8 *v310;
  unint64_t v311;
  __int128 v312;
  _QWORD *v313;
  unsigned __int8 *v314;
  unint64_t v315;
  uint64_t v316;
  char *v317;
  char *v318;
  unint64_t v319;
  __int128 v320;
  char *v321;
  char *v322;
  unint64_t v323;
  uint64_t v324;
  char *v325;
  char *v326;
  unint64_t v327;
  __int128 v328;
  char *v329;
  char *v330;
  unint64_t v331;
  uint64_t v332;
  char *v333;
  char *v334;
  unint64_t v335;
  __int128 v336;
  char *v337;
  char *v338;
  unint64_t v339;
  uint64_t v340;
  char *v341;
  char *v342;
  unint64_t v343;
  __int128 v344;
  char *v345;
  char *v346;
  unint64_t v347;
  uint64_t v348;
  char *v349;
  char *v350;
  unint64_t v351;
  __int128 v352;
  char *v353;
  char *v354;
  unint64_t v355;
  uint64_t v356;
  char *v357;
  char v358;
  uint64_t *v359;
  uint8x8_t *v360;
  size_t v361;
  uint64_t v362;
  __int8 v363;
  const char *v364;
  char *v365;
  char v366;
  uint64_t *v367;
  uint8x8_t *v368;
  size_t v369;
  uint64_t v370;
  const char *v371;
  char *v372;
  char v373;
  unsigned __int8 *v374;
  uint64_t *v375;
  char v376;
  char v377;
  uint64_t v378;
  uint8x8_t *v379;
  size_t v380;
  unsigned int v381;
  char *v382;
  char v383;
  int v384;
  unint64_t v385;
  uint64_t *v386;
  char v387;
  char v388;
  uint64_t v389;
  int8x16_t v390;
  unint64_t v391;
  uint64x2_t v392;
  unint64_t v393;
  uint64_t *v394;
  uint8x8_t *v395;
  unint64_t v396;
  uint64_t v397;
  uint32x4_t v398;
  uint32x4_t v399;
  int64x2_t v400;
  int64x2_t v401;
  int64x2_t v402;
  int64x2_t v403;
  uint16x8_t v404;
  uint32x4_t v405;
  int64x2_t v406;
  int64x2_t v407;
  int64x2_t v408;
  uint32x4_t v409;
  int64x2_t v410;
  unint64_t v411;
  uint8x8_t *v412;
  int8x16_t *v413;
  int8x16_t v414;
  uint32x4_t v415;
  uint32x4_t v416;
  uint32x4_t v417;
  uint32x4_t v418;
  int64x2_t v419;
  int64x2_t v420;
  int64x2_t v421;
  int64x2_t v422;
  int64x2_t v423;
  int64x2_t v424;
  int64x2_t v425;
  int64x2_t v426;
  uint16x8_t v427;
  uint32x4_t v428;
  int64x2_t v429;
  int64x2_t v430;
  int64x2_t v431;
  uint32x4_t v432;
  int64x2_t v433;
  int64x2_t v434;
  uint16x8_t v435;
  uint32x4_t v436;
  int64x2_t v437;
  int64x2_t v438;
  uint32x4_t v439;
  int64x2_t v440;
  size_t v441;
  char *v442;
  char *v443;
  char v444;
  char *v445;
  char v446;
  int32x4_t *v447;
  uint64_t *v448;
  char v449;
  char v450;
  uint64_t v451;
  uint8x8_t *v452;
  size_t v453;
  __int32 v454;
  __int8 v455;
  char *v456;
  char *v457;
  char *v458;
  char *v459;
  char *v460;
  size_t v461;
  unsigned int v462;
  char *v463;
  unsigned int v464;
  int v465;
  unsigned int v466;
  char *v467;
  int v468;
  int v469;
  char *v470;
  char *v471;
  char *v472;
  char *v473;
  BOOL v474;
  unint64_t v475;
  char *v476;
  int v477;
  unint64_t v478;
  uint64_t v479;
  unint64_t __sz;
  size_t v483;
  uint64_t v484;
  uint64_t *v485;
  unsigned __int8 *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  __int128 v491;
  uint64_t v492;
  __int16 v493;
  char v494;
  int v495;
  char v496;
  char v497;
  uint64_t v498;
  uint64_t v499;
  _BYTE __dst[65];
  uint64_t v501;
  int8x16x4_t v502;
  int8x16x4_t v503;
  int8x16x4_t v504;

  v501 = *MEMORY[0x1E0C80C00];
  if (!a6)
    return 0;
  bzero(a7, a6);
  v12 = *a2;
  if ((v12 - 66) < 0xFFFFFFBF)
    return 3;
  if (v12 <= 0x40)
    v14 = 65 - v12;
  else
    v14 = 0;
  bzero(&__dst[v12], v14);
  v15 = a6;
  memcpy(__dst, a2 + 1, v12);
  v16 = 0;
  v17 = v12 + 1;
  __sz = 8 * a6;
  v478 = 4 * a6;
  v479 = a3 - 1;
  v477 = a3 - 1;
  v484 = 8 * a3 - 24;
  v485 = a1;
  v486 = a2;
  v483 = v12;
  while (2)
  {
    while (1)
    {
      v18 = __dst[v16];
      v19 = a2[v17];
      v20 = v17 + 1;
      v487 = v16;
      v21 = 0;
      v22 = 0;
      if (!__dst[v16])
        break;
      v23 = v17;
      v24 = 0;
      v25 = &a2[v20];
      v26 = 1;
      v488 = v23;
      v27 = v484 - 8 * v23;
      do
      {
        v28 = v26;
        v29 = v27;
        v30 = (char)v25[v22];
        v24 |= (unint64_t)(v25[v22] & 0x7F) << v21;
        if (v22 > 8)
          break;
        ++v22;
        v21 += 7;
        ++v26;
        v27 -= 8;
      }
      while (v30 < 0);
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = &a2[v488];
      do
      {
        v35 = v29;
        v36 = (char)v34[v28 + 1];
        v33 |= (unint64_t)(v34[++v28] & 0x7F) << v31;
        if (v32 > 8)
          break;
        ++v32;
        v31 += 7;
        v29 -= 8;
      }
      while (v36 < 0);
      switch(v19)
      {
        case 1:
          if (!a1[3])
          {
            v37 = (_QWORD *)operator new();
            v38 = (_QWORD *)operator new();
            v39 = operator new();
            a1 = v485;
            a2 = v486;
            *(_QWORD *)(v39 + 20) = 0;
            *(_QWORD *)(v39 + 12) = 0;
            *(_DWORD *)(v39 + 36) = 0;
            *(_QWORD *)(v39 + 28) = 0;
            *(_WORD *)(v39 + 40) = 257;
            *(_QWORD *)(v39 + 44) = 0;
            *(_QWORD *)(v39 + 60) = 0;
            *(_QWORD *)(v39 + 52) = 0;
            *(_DWORD *)(v39 + 67) = 0;
            *(_DWORD *)(v39 + 72) = 0;
            *(_WORD *)(v39 + 76) = 257;
            *(_QWORD *)(v39 + 136) = 0;
            *(_OWORD *)(v39 + 80) = 0u;
            *(_OWORD *)(v39 + 96) = 0u;
            *(_OWORD *)(v39 + 112) = 0u;
            *v38 = v39;
            *v37 = v38;
            v40 = (_QWORD **)v485[3];
            v485[3] = (uint64_t)v37;
            if (v40)
            {
              v41 = *v40;
              *v40 = 0;
              if (v41)
              {
                v42 = (_QWORD *)*v41;
                *v41 = 0;
                if (v42)
                {
                  v43 = (void *)v42[13];
                  if (v43)
                  {
                    v42[14] = v43;
                    operator delete(v43);
                  }
                  v44 = (void *)v42[10];
                  if (v44)
                  {
                    v42[11] = v44;
                    operator delete(v44);
                  }
                  MEMORY[0x18D76437C](v42, 0x1070C40ADA6D0DELL);
                }
                MEMORY[0x18D76437C](v41, 0x20C4093837F09);
                a1 = v485;
              }
              MEMORY[0x18D76437C](v40, 0x20C4093837F09);
            }
          }
          v45 = v18 == 1;
          v46 = v33 - 2;
          if (v33 < 2)
            return 3;
          v47 = &a2[v488 + v28];
          v48 = v47[1];
          v49 = v47[2];
          v50 = *a1;
          v51 = (char *)a1[1];
          v52 = &v51[-*a1];
          if (v18 != 1)
          {
            v183 = v478 - (_QWORD)v52;
            if (v478 <= (unint64_t)v52)
            {
              v184 = v485;
              v190 = a6;
              if (v478 < (unint64_t)v52)
                v485[1] = v50 + v478;
              goto LABEL_421;
            }
            v184 = v485;
            v185 = v485[2];
            if (v185 - (uint64_t)v51 >= v183)
            {
              v473 = &v51[v183];
              v269 = v51;
              v270 = v49;
              v271 = v48;
              bzero(v269, v478 - (_QWORD)v52);
              v48 = v271;
              v45 = v18 == 1;
              v49 = v270;
              v46 = v33 - 2;
              v485[1] = (uint64_t)v473;
              v190 = a6;
LABEL_421:
              v447 = (int32x4_t *)*v184;
              v448 = *(uint64_t **)v184[3];
              LODWORD(v491) = 0;
              BYTE4(v491) = a4;
              BYTE5(v491) = a5;
              WORD3(v491) = 0;
              v492 = 1;
              v493 = 0;
              v494 = v45;
              v495 = 0;
              if (v48 >= 4)
                v449 = 1;
              else
                v449 = v48;
              v496 = v449;
              if (v49 == 2)
                v450 = 4;
              else
                v450 = 1;
              if (!v49)
                v450 = 0;
              v497 = v450;
              *((_QWORD *)&v491 + 1) = __PAIR64__(v190, v46);
              v451 = *v448;
              v498 = (uint64_t)&v486[v488 + 3 + v28];
              v499 = v46;
              result = gcl::polyline::DecoderImpl::decompressAttributes(v451, (uint64_t)&v498, v447, 0, &v491);
              if ((_DWORD)result)
                goto LABEL_435;
              v452 = a7;
              v15 = a6;
              v453 = a6;
              a1 = v485;
              do
              {
                v454 = v447->i32[0];
                v447 = (int32x4_t *)((char *)v447 + 4);
                v455 = v24 + v454;
                if (v18 < 0x40)
                  v455 = ((unint64_t)v452->u8[0] << v18) | v455 & ~(-1 << v18);
                v452->i8[0] = v455;
                v452 = (uint8x8_t *)((char *)v452 + 1);
                --v453;
              }
              while (v453);
              goto LABEL_413;
            }
            v464 = v48;
            v468 = v49;
            if ((v478 & 0x8000000000000000) != 0)
LABEL_439:
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v186 = (unint64_t)v52;
            v187 = v185 - v50;
            v188 = 2 * v187;
            if (2 * v187 <= v478)
              v188 = 4 * a6;
            if (v187 >= 0x3FFFFFFFFFFFFFFFLL)
              v189 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v189 = v188;
            v461 = v189;
            v458 = (char *)operator new(v189);
            v456 = &v458[v186];
            bzero(&v458[v186], v183);
            if (v51 == (char *)v50)
            {
              v184 = v485;
              v190 = a6;
              v46 = v33 - 2;
              v49 = v468;
              v45 = v18 == 1;
              v48 = v464;
              v192 = v458;
              v191 = v461;
              v297 = v456;
              goto LABEL_419;
            }
            if (v186 < 8)
            {
              v184 = v485;
              v190 = a6;
              v46 = v33 - 2;
              v49 = v468;
              v45 = v18 == 1;
              v48 = v464;
              v192 = v458;
              v191 = v461;
              v193 = v456;
              goto LABEL_416;
            }
            v307 = v186;
            v192 = v458;
            v191 = v461;
            v184 = v485;
            v190 = a6;
            v46 = v33 - 2;
            v49 = v468;
            v45 = v18 == 1;
            v48 = v464;
            v193 = v456;
            if ((unint64_t)(v50 - (_QWORD)v458) >= 0x20)
            {
              if (v307 < 0x20)
              {
                v308 = 0;
                goto LABEL_328;
              }
              v308 = v307 & 0xFFFFFFFFFFFFFFE0;
              v349 = &v458[v307 - 16];
              v350 = v51 - 16;
              v351 = v307 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v352 = *(_OWORD *)v350;
                *((_OWORD *)v349 - 1) = *((_OWORD *)v350 - 1);
                *(_OWORD *)v349 = v352;
                v349 -= 32;
                v350 -= 32;
                v351 -= 32;
              }
              while (v351);
              if (v307 == v308)
                goto LABEL_418;
              if ((v307 & 0x18) != 0)
              {
LABEL_328:
                v193 = &v456[-(v307 & 0xFFFFFFFFFFFFFFF8)];
                v353 = &v51[-v308 - v50 - 8 + (_QWORD)v458];
                v354 = &v51[-v308 - 8];
                v355 = v308 - (v307 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v356 = *(_QWORD *)v354;
                  v354 -= 8;
                  *(_QWORD *)v353 = v356;
                  v353 -= 8;
                  v355 += 8;
                }
                while (v355);
                v51 -= v307 & 0xFFFFFFFFFFFFFFF8;
                if (v307 == (v307 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_418;
                goto LABEL_416;
              }
              v193 = &v456[-v308];
              v51 -= v308;
            }
LABEL_416:
            v445 = v193 - 1;
            do
            {
              v446 = *--v51;
              *v445-- = v446;
            }
            while (v51 != (char *)v50);
LABEL_418:
            v51 = (char *)v50;
            v297 = v192;
LABEL_419:
            *v184 = (uint64_t)v297;
            v184[1] = (uint64_t)&v192[v478];
            v184[2] = (uint64_t)&v192[v191];
            if (v51)
            {
              operator delete(v51);
              v48 = v464;
              v45 = v18 == 1;
              v49 = v468;
              v46 = v33 - 2;
            }
            goto LABEL_421;
          }
          LODWORD(v53) = a6;
          v54 = a6 - (_QWORD)v52;
          if (a6 > (unint64_t)v52)
          {
            v55 = v485;
            v56 = v485[2];
            if (v56 - (uint64_t)v51 < v54)
            {
              v462 = v48;
              v474 = v45;
              v465 = v49;
              if ((a6 & 0x8000000000000000) != 0)
                goto LABEL_439;
              v57 = (unint64_t)v52;
              v58 = v56 - v50;
              v59 = 2 * v58;
              if (2 * v58 <= a6)
                v59 = a6;
              if (v58 >= 0x3FFFFFFFFFFFFFFFLL)
                v60 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v60 = v59;
              v459 = (char *)operator new(v60);
              v457 = &v459[v57];
              bzero(&v459[v57], v54);
              v61 = v60;
              if (v51 == (char *)v50)
              {
                v55 = v485;
                v53 = a6;
                v46 = v33 - 2;
                v49 = v465;
                v45 = v474;
                v48 = v462;
                v295 = &v459[v57];
                v62 = v459;
                goto LABEL_385;
              }
              if (v57 < 8)
              {
                v55 = v485;
                v53 = a6;
                v46 = v33 - 2;
                v49 = v465;
                v45 = v474;
                v48 = v462;
                v63 = &v459[v57];
                v62 = v459;
                goto LABEL_382;
              }
              v63 = &v459[v57];
              v62 = v459;
              v55 = v485;
              v53 = a6;
              v46 = v33 - 2;
              v49 = v465;
              v45 = v474;
              v48 = v462;
              if ((unint64_t)(v50 - (_QWORD)v459) >= 0x20)
              {
                if (v57 < 0x20)
                {
                  v306 = 0;
                  goto LABEL_320;
                }
                v306 = v57 & 0xFFFFFFFFFFFFFFE0;
                v341 = &v459[v57 - 16];
                v342 = v51 - 16;
                v343 = v57 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v344 = *(_OWORD *)v342;
                  *((_OWORD *)v341 - 1) = *((_OWORD *)v342 - 1);
                  *(_OWORD *)v341 = v344;
                  v341 -= 32;
                  v342 -= 32;
                  v343 -= 32;
                }
                while (v343);
                if (v57 == v306)
                  goto LABEL_384;
                if ((v57 & 0x18) != 0)
                {
LABEL_320:
                  v63 = &v457[-(v57 & 0xFFFFFFFFFFFFFFF8)];
                  v345 = &v51[-v306 - v50 - 8 + (_QWORD)v459];
                  v346 = &v51[-v306 - 8];
                  v347 = v306 - (v57 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v348 = *(_QWORD *)v346;
                    v346 -= 8;
                    *(_QWORD *)v345 = v348;
                    v345 -= 8;
                    v347 += 8;
                  }
                  while (v347);
                  v51 -= v57 & 0xFFFFFFFFFFFFFFF8;
                  if (v57 == (v57 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_384;
                  goto LABEL_382;
                }
                v63 = &v457[-v306];
                v51 -= v306;
              }
LABEL_382:
              v382 = v63 - 1;
              do
              {
                v383 = *--v51;
                *v382-- = v383;
              }
              while (v51 != (char *)v50);
LABEL_384:
              v51 = (char *)v50;
              v295 = v62;
LABEL_385:
              *v55 = (uint64_t)v295;
              v55[1] = (uint64_t)&v62[v53];
              v55[2] = (uint64_t)&v62[v61];
              if (v51)
              {
                v384 = v53;
                operator delete(v51);
                LODWORD(v53) = v384;
                v48 = v462;
                v45 = v474;
                v49 = v465;
                v46 = v33 - 2;
              }
              goto LABEL_387;
            }
            v472 = &v51[v54];
            v265 = v51;
            v266 = v49;
            v267 = v45;
            v268 = v48;
            bzero(v265, a6 - (_QWORD)v52);
            LODWORD(v53) = a6;
            v48 = v268;
            v45 = v267;
            v49 = v266;
            v46 = v33 - 2;
            v204 = (size_t)v472;
            goto LABEL_228;
          }
          v55 = v485;
          if (a6 < (unint64_t)v52)
          {
            v204 = v50 + a6;
LABEL_228:
            v55[1] = v204;
          }
LABEL_387:
          v385 = *v55;
          v386 = *(uint64_t **)v55[3];
          LODWORD(v491) = 0;
          BYTE4(v491) = a4;
          BYTE5(v491) = a5;
          WORD3(v491) = 0;
          v492 = 1;
          v493 = 0;
          v494 = v45;
          v495 = 0;
          if (v48 >= 4)
            v387 = 1;
          else
            v387 = v48;
          v496 = v387;
          if (v49 == 2)
            v388 = 4;
          else
            v388 = 1;
          if (!v49)
            v388 = 0;
          v497 = v388;
          *((_QWORD *)&v491 + 1) = __PAIR64__(v53, v46);
          v389 = *v386;
          v498 = (uint64_t)&v486[v488 + 3 + v28];
          v499 = v46;
          result = gcl::polyline::DecoderImpl::decompressAttributes(v389, (uint64_t)&v498, v385, 0, &v491);
          if ((_DWORD)result)
            goto LABEL_435;
          v15 = a6;
          if (a6 < 8)
          {
            v391 = 0;
            a1 = v485;
            goto LABEL_411;
          }
          a1 = v485;
          if (v385 + a6 > (unint64_t)a7 && v385 < (unint64_t)a7 + a6)
          {
            v391 = 0;
LABEL_411:
            v441 = a6 - v391;
            v442 = (char *)a7 + v391;
            v443 = (char *)(v385 + v391);
            do
            {
              v444 = *v443++;
              *v442 = (v24 + v444) & 1 | (2 * *v442);
              ++v442;
              --v441;
            }
            while (v441);
            goto LABEL_413;
          }
          v392 = (uint64x2_t)vdupq_n_s64(v24);
          if (a6 >= 0x10)
          {
            v411 = a6 & 0xFFFFFFFFFFFFFFF0;
            v412 = a7;
            v413 = (int8x16_t *)v385;
            do
            {
              v414 = *v413++;
              v415 = (uint32x4_t)vqtbl1q_s8(v414, (int8x16_t)xmmword_189CFB5C0);
              v416 = (uint32x4_t)vqtbl1q_s8(v414, (int8x16_t)xmmword_189CFB5D0);
              v417 = (uint32x4_t)vqtbl1q_s8(v414, (int8x16_t)xmmword_189CFB5A0);
              v418 = (uint32x4_t)vqtbl1q_s8(v414, (int8x16_t)xmmword_189CFB5B0);
              v419 = (int64x2_t)vaddw_u32(v392, *(uint32x2_t *)v415.i8);
              v420 = (int64x2_t)vaddw_high_u32(v392, v415);
              v421 = (int64x2_t)vaddw_u32(v392, *(uint32x2_t *)v416.i8);
              v422 = (int64x2_t)vaddw_high_u32(v392, v416);
              v423 = (int64x2_t)vaddw_high_u32(v392, v417);
              v424 = (int64x2_t)vaddw_u32(v392, *(uint32x2_t *)v417.i8);
              v425 = (int64x2_t)vaddw_u32(v392, *(uint32x2_t *)v418.i8);
              v426 = (int64x2_t)vaddw_high_u32(v392, v418);
              v427 = vmovl_u8(*v412);
              v428 = vmovl_u16(*(uint16x4_t *)v427.i8);
              v429.i64[0] = v428.u32[0];
              v429.i64[1] = v428.u32[1];
              v430 = v429;
              v429.i64[0] = v428.u32[2];
              v429.i64[1] = v428.u32[3];
              v431 = v429;
              v432 = vmovl_high_u16(v427);
              v429.i64[0] = v432.u32[0];
              v429.i64[1] = v432.u32[1];
              v433 = v429;
              v429.i64[0] = v432.u32[2];
              v429.i64[1] = v432.u32[3];
              v434 = v429;
              v435 = vmovl_high_u8(*(uint8x16_t *)v412->i8);
              v436 = vmovl_high_u16(v435);
              v429.i64[0] = v436.u32[2];
              v429.i64[1] = v436.u32[3];
              v437 = v429;
              v429.i64[0] = v436.u32[0];
              v429.i64[1] = v436.u32[1];
              v438 = v429;
              v439 = vmovl_u16(*(uint16x4_t *)v435.i8);
              v429.i64[0] = v439.u32[0];
              v429.i64[1] = v439.u32[1];
              v440 = v429;
              v429.i64[0] = v439.u32[2];
              v429.i64[1] = v439.u32[3];
              v504.val[1] = (int8x16_t)vsliq_n_s64(v426, v429, 1uLL);
              v504.val[0] = (int8x16_t)vsliq_n_s64(v425, v440, 1uLL);
              v504.val[2] = (int8x16_t)vsliq_n_s64(v424, v438, 1uLL);
              v504.val[3] = (int8x16_t)vsliq_n_s64(v423, v437, 1uLL);
              v503.val[3] = (int8x16_t)vsliq_n_s64(v422, v434, 1uLL);
              v503.val[2] = (int8x16_t)vsliq_n_s64(v421, v433, 1uLL);
              v503.val[1] = (int8x16_t)vsliq_n_s64(v420, v431, 1uLL);
              v503.val[0] = (int8x16_t)vsliq_n_s64(v419, v430, 1uLL);
              v390.i64[0] = vqtbl4q_s8(v503, (int8x16_t)xmmword_189CFB5E0).u64[0];
              v390.i64[1] = vqtbl4q_s8(v504, (int8x16_t)xmmword_189CFB5E0).u64[0];
              *(int8x16_t *)v412->i8 = v390;
              v412 += 2;
              v411 -= 16;
            }
            while (v411);
            if ((a6 & 0xFFFFFFFFFFFFFFF0) == a6)
              goto LABEL_413;
            v391 = a6 & 0xFFFFFFFFFFFFFFF0;
            v393 = a6 & 0xFFFFFFFFFFFFFFF0;
            if ((a6 & 8) == 0)
              goto LABEL_411;
          }
          else
          {
            v393 = 0;
          }
          v394 = (uint64_t *)(v385 + v393);
          v395 = (uint8x8_t *)((char *)a7 + v393);
          v396 = v393 - (a6 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v397 = *v394++;
            v390.i64[0] = v397;
            v398 = (uint32x4_t)vqtbl1q_s8(v390, (int8x16_t)xmmword_189CFB5C0);
            v399 = (uint32x4_t)vqtbl1q_s8(v390, (int8x16_t)xmmword_189CFB5D0);
            v400 = (int64x2_t)vaddw_u32(v392, *(uint32x2_t *)v398.i8);
            v401 = (int64x2_t)vaddw_high_u32(v392, v398);
            v402 = (int64x2_t)vaddw_u32(v392, *(uint32x2_t *)v399.i8);
            v403 = (int64x2_t)vaddw_high_u32(v392, v399);
            v404 = vmovl_u8(*v395);
            v405 = vmovl_u16(*(uint16x4_t *)v404.i8);
            v406.i64[0] = v405.u32[0];
            v406.i64[1] = v405.u32[1];
            v407 = v406;
            v406.i64[0] = v405.u32[2];
            v406.i64[1] = v405.u32[3];
            v408 = v406;
            v409 = vmovl_high_u16(v404);
            v406.i64[0] = v409.u32[0];
            v406.i64[1] = v409.u32[1];
            v410 = v406;
            v406.i64[0] = v409.u32[2];
            v406.i64[1] = v409.u32[3];
            v502.val[3] = (int8x16_t)vsliq_n_s64(v403, v406, 1uLL);
            v502.val[2] = (int8x16_t)vsliq_n_s64(v402, v410, 1uLL);
            v502.val[1] = (int8x16_t)vsliq_n_s64(v401, v408, 1uLL);
            v502.val[0] = (int8x16_t)vsliq_n_s64(v400, v407, 1uLL);
            v390 = vqtbl4q_s8(v502, (int8x16_t)xmmword_189CFB5F0);
            *v395++ = *(uint8x8_t *)v390.i8;
            v396 += 8;
          }
          while (v396);
          v391 = a6 & 0xFFFFFFFFFFFFFFF8;
          if ((a6 & 0xFFFFFFFFFFFFFFF8) != a6)
            goto LABEL_411;
LABEL_413:
          v17 = v488 + v33 + v28 + 1;
          a2 = v486;
          v16 = v487 + 1;
          if (v487 + 1 == v483)
            return 0;
          continue;
        case 2:
          v132 = (unsigned __int8 *)*a1;
          v133 = (unsigned __int8 *)a1[1];
          v134 = (char *)&v133[-*a1];
          v135 = __sz - (_QWORD)v134;
          if (__sz > (unint64_t)v134)
          {
            v136 = (unsigned __int8 *)a1[2];
            if (v136 - v133 >= v135)
            {
              bzero((void *)a1[1], __sz - (_QWORD)v134);
              a1[1] = (uint64_t)&v133[v135];
              v141 = a6;
              goto LABEL_340;
            }
            v475 = (unint64_t)&v133[-*a1];
            if ((__sz & 0x8000000000000000) != 0)
              goto LABEL_439;
            v137 = v136 - v132;
            v138 = 2 * v137;
            if (2 * v137 <= __sz)
              v138 = 8 * a6;
            if (v137 >= 0x3FFFFFFFFFFFFFFFLL)
              v139 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v139 = v138;
            v470 = (char *)operator new(v139);
            v467 = &v470[v475];
            bzero(&v470[v475], v135);
            v140 = v139;
            if (v133 == v132)
            {
              a1 = v485;
              v141 = a6;
              v282 = &v470[v475];
              v142 = v470;
              goto LABEL_338;
            }
            if (v475 < 8)
            {
              a1 = v485;
              v141 = a6;
              v143 = &v470[v475];
              v142 = v470;
              goto LABEL_335;
            }
            v143 = &v470[v475];
            v142 = v470;
            a1 = v485;
            v141 = a6;
            if ((unint64_t)(v132 - (unsigned __int8 *)v470) >= 0x20)
            {
              if (v475 < 0x20)
              {
                v284 = 0;
                goto LABEL_296;
              }
              v284 = v475 & 0xFFFFFFFFFFFFFFE0;
              v317 = &v470[v475 - 16];
              v318 = (char *)(v133 - 16);
              v319 = v475 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v320 = *(_OWORD *)v318;
                *((_OWORD *)v317 - 1) = *((_OWORD *)v318 - 1);
                *(_OWORD *)v317 = v320;
                v317 -= 32;
                v318 -= 32;
                v319 -= 32;
              }
              while (v319);
              if (v475 == v284)
                goto LABEL_337;
              if ((v475 & 0x18) != 0)
              {
LABEL_296:
                v143 = &v467[-(v475 & 0xFFFFFFFFFFFFFFF8)];
                v321 = &v470[&v133[-v284] - v132 - 8];
                v322 = (char *)&v133[-v284 - 8];
                v323 = v284 - (v475 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v324 = *(_QWORD *)v322;
                  v322 -= 8;
                  *(_QWORD *)v321 = v324;
                  v321 -= 8;
                  v323 += 8;
                }
                while (v323);
                v133 -= v475 & 0xFFFFFFFFFFFFFFF8;
                if (v475 == (v475 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_337;
                goto LABEL_335;
              }
              v143 = &v467[-v284];
              v133 -= v284;
            }
LABEL_335:
            v357 = v143 - 1;
            do
            {
              v358 = *--v133;
              *v357-- = v358;
            }
            while (v133 != v132);
LABEL_337:
            v133 = v132;
            v282 = v142;
LABEL_338:
            *a1 = (uint64_t)v282;
            a1[1] = (uint64_t)&v142[__sz];
            a1[2] = (uint64_t)&v142[v140];
            if (v133)
              operator delete(v133);
            goto LABEL_340;
          }
          v141 = a6;
          if (__sz < (unint64_t)v134)
            a1[1] = (uint64_t)&v132[__sz];
LABEL_340:
          v359 = (uint64_t *)*a1;
          result = mgcl::muid::decompress((mgcl::muid *)&v486[v488 + 1 + v28], (const char *)v33, 0, 0, *a1, (unint64_t *)8, v141);
          if ((_DWORD)result)
            return result;
          v360 = a7;
          a2 = v486;
          v15 = a6;
          v361 = a6;
          do
          {
            v362 = *v359++;
            v363 = v362 + v24;
            if (v18 < 0x40)
              v363 = ((unint64_t)v360->u8[0] << v18) | v363 & ~(-1 << v18);
            v360->i8[0] = v363;
            v360 = (uint8x8_t *)((char *)v360 + 1);
            --v361;
          }
          while (v361);
          v364 = (const char *)(v488 + v33 + v28);
          goto LABEL_379;
        case 3:
          v101 = (unsigned __int8 *)*a1;
          v100 = (unsigned __int8 *)a1[1];
          if (v100 != (unsigned __int8 *)*a1)
          {
            a1[1] = (uint64_t)v101;
            v100 = v101;
          }
          if (a1[2] - (uint64_t)v101 >= __sz)
            goto LABEL_83;
          if ((__sz & 0x8000000000000000) != 0)
            goto LABEL_439;
          v102 = operator new(__sz);
          v103 = v100 - v101;
          v104 = &v102[v100 - v101];
          v105 = v104;
          a1 = v485;
          a2 = v486;
          v15 = a6;
          if (v100 == v101)
            goto LABEL_81;
          v105 = v102;
          if (v103 < 8 || (unint64_t)(v101 - v102) < 0x20)
          {
            v106 = v100;
            v107 = &v102[v100 - v101];
            goto LABEL_79;
          }
          if (v103 >= 0x20)
          {
            v283 = v103 & 0xFFFFFFFFFFFFFFE0;
            v298 = &v102[v103 - 16];
            v299 = v100 - 16;
            v300 = v103 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v301 = *(_OWORD *)v299;
              *(v298 - 1) = *((_OWORD *)v299 - 1);
              *v298 = v301;
              v298 -= 2;
              v299 -= 32;
              v300 -= 32;
            }
            while (v300);
            if (v103 == v283)
              goto LABEL_81;
            if ((v103 & 0x18) == 0)
            {
              v107 = &v104[-v283];
              v106 = &v100[-v283];
LABEL_79:
              v108 = v107 - 1;
              do
              {
                v109 = *--v106;
                *v108-- = v109;
              }
              while (v106 != v101);
              goto LABEL_81;
            }
          }
          else
          {
            v283 = 0;
          }
          v106 = &v100[-(v103 & 0xFFFFFFFFFFFFFFF8)];
          v107 = &v104[-(v103 & 0xFFFFFFFFFFFFFFF8)];
          v302 = &v102[&v100[-v283] - v101 - 8];
          v303 = &v100[-v283 - 8];
          v304 = v283 - (v103 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v305 = *(_QWORD *)v303;
            v303 -= 8;
            *v302-- = v305;
            v304 += 8;
          }
          while (v304);
          if (v103 != (v103 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_79;
LABEL_81:
          *v485 = (uint64_t)v105;
          v485[1] = (uint64_t)v104;
          v485[2] = (uint64_t)&v102[__sz];
          if (v101)
            operator delete(v101);
LABEL_83:
          v110 = 0;
          v111 = v487;
          v112 = v488 + v28 + 1;
          v113 = v483;
          do
          {
            v114 = 0;
            v115 = 0;
            v116 = 0;
            v117 = v112;
            v118 = &a2[v112];
            do
            {
              v119 = (char)v118[v115];
              v116 |= (unint64_t)(v118[v115] & 0x7F) << v114;
              v120 = v115 + 1;
              if (v115 > 8)
                break;
              v114 += 7;
              ++v115;
            }
            while (v119 < 0);
            v121 = v116 + v24;
            if (v18 < 0x40)
              v121 = ((unint64_t)a7->u8[v110] << v18) | v121 & ~(-1 << v18);
            a7->i8[v110] = v121;
            v112 = v117 + v120;
            ++v110;
          }
          while (v110 != v15);
          goto LABEL_8;
        case 4:
          v122 = (uint64_t *)operator new();
          v123 = v122;
          v124 = v479 - v488 - v28;
          a2 = v486;
          *v122 = (uint64_t)&v486[v488 + 1 + v28];
          v122[1] = v124;
          v122[2] = 0;
          v125 = 8 * v124;
          if (!v125)
          {
            v130 = 0;
            v15 = a6;
LABEL_95:
            v131 = 1;
            goto LABEL_158;
          }
          v126 = (char *)*v122;
          v127 = *(unsigned __int8 *)*v122;
          v122[2] = 1;
          v128 = (v127 >> 6) & 2 | (*v126 >> 6) & 1;
          v122[2] = 2;
          v129 = (*v126 >> 5) & 1 | (2 * v128);
          v122[2] = 3;
          v15 = a6;
          if (v129 == 2)
          {
            v230 = *v126;
            v122[2] = 4;
            v231 = v230 & 0x10 | *v126 & 0xF;
            v122[2] = 5;
            v232 = *v126;
            v122[2] = 6;
            v233 = *v126;
            v122[2] = 7;
            v234 = v231 & 0xFFFFFFF8 | v232 & 4 | v233 & 2 | *v126 & 1;
            v122[2] = 8;
            LODWORD(v491) = v234;
            if (v125 < 0xD)
            {
              DWORD1(v491) = 0;
              goto LABEL_231;
            }
            v272 = v126[1];
            v122[2] = 9;
            v273 = (v272 >> 6) & 2 | (v126[1] >> 6) & 1;
            v122[2] = 10;
            v274 = v126[1];
            v122[2] = 11;
            v275 = (4 * v273) | (v274 >> 4) & 2 | (v126[1] >> 4) & 1;
            v122[2] = 12;
            v276 = (2 * v275) | (v126[1] >> 3) & 1;
            v122[2] = 13;
            DWORD1(v491) = v276;
            if (v125 >= 0x12)
            {
              v235 = v126[1] >> 2;
              v122[2] = 14;
              v236 = (v126[1] >> 1) & 1 | (2 * (v235 & 1));
              v122[2] = 15;
              LOBYTE(v235) = v126[1];
              v122[2] = 16;
              v237 = (4 * v236) | (2 * (v235 & 1)) | (v126[2] >> 7) & 1;
              v122[2] = 17;
              v238 = (v126[2] >> 6) & 1 | (2 * v237);
              v122[2] = 18;
            }
            else
            {
LABEL_231:
              v238 = 0;
            }
            DWORD2(v491) = v238;
            v277 = a7;
            v278 = a6;
            do
            {
              v279 = v24 + geo::ReadBitstream::unpackRice2(v123, &v491);
              if (v18 < 0x40)
                LOBYTE(v279) = ((unint64_t)v277->u8[0] << v18) | v279 & ~(-1 << v18);
              v277->i8[0] = v279;
              v277 = (uint8x8_t *)((char *)v277 + 1);
              --v278;
            }
            while (v278);
            v130 = v123[2];
            a1 = v485;
            v15 = a6;
            goto LABEL_237;
          }
          if (v129 == 1)
          {
            v214 = 0;
            v215 = *v126;
            v122[2] = 4;
            v216 = v215 & 0x10 | *v126 & 0xF;
            v122[2] = 5;
            v217 = *v126;
            v122[2] = 6;
            v218 = v216 & 0xFFFFFFF8 | v217 & 4 | *v126 & 3;
            v122[2] = 7;
            v219 = v218 & 0xFFFFFFFE | *v126 & 1;
            v122[2] = 8;
            v130 = 8;
            a1 = v485;
            while (v130 + 1 > v125)
            {
              v220 = 0;
              v221 = 0;
              if ((_DWORD)v219)
                goto LABEL_196;
LABEL_200:
              v229 = v24 + (v221 | (v220 << v219));
              if (v18 < 0x40)
                LOBYTE(v229) = ((unint64_t)a7->u8[v214] << v18) | v229 & ~(-1 << v18);
              a7->i8[v214++] = v229;
              if (v214 == a6)
                goto LABEL_237;
            }
            v222 = 0;
            v220 = 8 * (v477 - v488 - v28) - v130;
            v223 = v35 - v130;
            while (1)
            {
              v224 = v130++;
              v225 = v126[v224 >> 3];
              v123[2] = v130;
              if (((v225 >> (~(_BYTE)v224 & 7)) & 1) == 0)
                break;
              if (v223 == ++v222)
              {
                v130 = v224 + 1;
                v221 = 0;
                if ((_DWORD)v219)
                  goto LABEL_196;
                goto LABEL_200;
              }
            }
            v220 = v222;
            v130 = v224 + 1;
            v221 = 0;
            if (!(_DWORD)v219)
              goto LABEL_200;
LABEL_196:
            if (v130 + v219 <= v125)
            {
              v226 = 0;
              v227 = -v219;
              do
              {
                v221 = (v126[v130 >> 3] >> (~(_BYTE)v130 & 7)) & 1 | (2 * v226);
                v123[2] = ++v130;
                v226 = v221;
                v228 = __CFADD__(v227++, 1);
              }
              while (!v228);
            }
            goto LABEL_200;
          }
          v130 = 3;
          if (v129)
            goto LABEL_438;
          if (v125 < 8)
            goto LABEL_95;
          v194 = (_BYTE *)*v122;
          v195 = *(unsigned __int8 *)*v122 >> 4;
          v122[2] = 4;
          v196 = (*v194 >> 3) & 1 | (2 * (v195 & 1));
          v122[2] = 5;
          v197 = *v194 >> 2;
          v122[2] = 6;
          v198 = (4 * v196) | (2 * (v197 & 1)) | (*v194 >> 1) & 1;
          v122[2] = 7;
          LODWORD(v194) = *v194 & 1;
          v122[2] = 8;
          v131 = (v194 | (2 * v198)) + 1;
          v130 = 8;
LABEL_158:
          a1 = v485;
          for (i = 0; i != v15; ++i)
          {
            if (v130 + v131 <= v125)
            {
              v200 = 0;
              v201 = *v122;
              v202 = v131;
              do
              {
                v200 = (*(unsigned __int8 *)(v201 + (v130 >> 3)) >> (~(_BYTE)v130 & 7)) & 1 | (2 * v200);
                v122[2] = ++v130;
                --v202;
              }
              while (v202);
            }
            else
            {
              LOBYTE(v200) = 0;
            }
            v203 = v200 + v24;
            if (v18 < 0x40)
              v203 = ((unint64_t)a7->u8[i] << v18) | v203 & ~(-1 << v18);
            a7->i8[i] = v203;
          }
LABEL_237:
          v280 = v130 >> 3;
          if ((v130 & 7) != 0)
            ++v280;
          v281 = v488 + v28;
LABEL_256:
          v17 = v281 + v280 + 1;
          MEMORY[0x18D76437C](v123, 0x1050C40E4AAA758);
          v16 = v487 + 1;
          if (v487 + 1 == v483)
            return 0;
          break;
        default:
          return 3;
      }
    }
    v64 = 0;
    v65 = &a2[v20];
    v66 = 1;
    v67 = v484 - 8 * v17;
    do
    {
      v68 = v66;
      v69 = v67;
      v70 = (char)v65[v22];
      v64 |= (unint64_t)(v65[v22] & 0x7F) << v21;
      if (v22 > 8)
        break;
      ++v22;
      v21 += 7;
      ++v66;
      v67 -= 8;
    }
    while (v70 < 0);
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v74 = &a2[v17];
    do
    {
      v75 = v69;
      v76 = (char)v74[v68 + 1];
      v73 |= (unint64_t)(v74[++v68] & 0x7F) << v71;
      if (v72 > 8)
        break;
      ++v72;
      v71 += 7;
      v69 -= 8;
    }
    while (v76 < 0);
    switch(a2[v17])
    {
      case 1u:
        if (!a1[3])
        {
          v77 = (_QWORD *)operator new();
          v78 = (_QWORD *)operator new();
          v79 = operator new();
          a1 = v485;
          a2 = v486;
          *(_QWORD *)(v79 + 20) = 0;
          *(_QWORD *)(v79 + 12) = 0;
          *(_DWORD *)(v79 + 36) = 0;
          *(_QWORD *)(v79 + 28) = 0;
          *(_WORD *)(v79 + 40) = 257;
          *(_QWORD *)(v79 + 44) = 0;
          *(_QWORD *)(v79 + 60) = 0;
          *(_QWORD *)(v79 + 52) = 0;
          *(_DWORD *)(v79 + 67) = 0;
          *(_DWORD *)(v79 + 72) = 0;
          *(_WORD *)(v79 + 76) = 257;
          *(_QWORD *)(v79 + 136) = 0;
          *(_OWORD *)(v79 + 80) = 0u;
          *(_OWORD *)(v79 + 96) = 0u;
          *(_OWORD *)(v79 + 112) = 0u;
          *v78 = v79;
          *v77 = v78;
          v80 = (_QWORD **)v485[3];
          v485[3] = (uint64_t)v77;
          if (v80)
          {
            v81 = *v80;
            *v80 = 0;
            if (v81)
            {
              v82 = (_QWORD *)*v81;
              *v81 = 0;
              if (v82)
              {
                v83 = (void *)v82[13];
                if (v83)
                {
                  v82[14] = v83;
                  operator delete(v83);
                }
                v84 = (void *)v82[10];
                if (v84)
                {
                  v82[11] = v84;
                  operator delete(v84);
                }
                MEMORY[0x18D76437C](v82, 0x1070C40ADA6D0DELL);
              }
              MEMORY[0x18D76437C](v81, 0x20C4093837F09);
              a1 = v485;
            }
            MEMORY[0x18D76437C](v80, 0x20C4093837F09);
          }
        }
        v489 = v17;
        v85 = v73 - 2;
        if (v73 < 2)
          return 3;
        v86 = &a2[v17 + v68];
        v87 = v86[1];
        v88 = v86[2];
        v89 = *a1;
        v90 = (char *)a1[1];
        v91 = (unint64_t)&v90[-*a1];
        v92 = a6 - v91;
        if (a6 > v91)
        {
          v93 = (unsigned __int8 *)a1[2];
          if (v93 - (unsigned __int8 *)v90 >= v92)
          {
            v239 = (unsigned __int8 *)&v90[v92];
            v240 = v88;
            v241 = v87;
            bzero((void *)a1[1], v92);
            v87 = v241;
            v88 = v240;
            v85 = v73 - 2;
            a1[1] = (uint64_t)v239;
            LODWORD(v92) = a6;
            goto LABEL_364;
          }
          v466 = v87;
          v469 = v88;
          if ((a6 & 0x8000000000000000) != 0)
            goto LABEL_440;
          v94 = (unint64_t)&v93[-v89];
          v95 = 2 * v94;
          if (2 * v94 <= a6)
            v95 = a6;
          if (v94 >= 0x3FFFFFFFFFFFFFFFLL)
            v96 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v96 = v95;
          v463 = (char *)operator new(v96);
          v460 = &v463[v91];
          bzero(&v463[v91], v92);
          v97 = v96;
          if (v90 == (char *)v89)
          {
            a1 = v485;
            v92 = a6;
            v85 = v73 - 2;
            v88 = v469;
            v87 = v466;
            v98 = v463;
            v292 = &v463[v91];
            goto LABEL_362;
          }
          if (v91 < 8)
          {
            a1 = v485;
            v92 = a6;
            v85 = v73 - 2;
            v88 = v469;
            v87 = v466;
            v98 = v463;
            v99 = &v463[v91];
            goto LABEL_359;
          }
          v98 = v463;
          a1 = v485;
          v92 = a6;
          v85 = v73 - 2;
          v88 = v469;
          v87 = v466;
          v99 = &v463[v91];
          if ((unint64_t)(v89 - (_QWORD)v463) >= 0x20)
          {
            if (v91 < 0x20)
            {
              v296 = 0;
              goto LABEL_312;
            }
            v296 = v91 & 0xFFFFFFFFFFFFFFE0;
            v333 = &v463[v91 - 16];
            v334 = v90 - 16;
            v335 = v91 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v336 = *(_OWORD *)v334;
              *((_OWORD *)v333 - 1) = *((_OWORD *)v334 - 1);
              *(_OWORD *)v333 = v336;
              v333 -= 32;
              v334 -= 32;
              v335 -= 32;
            }
            while (v335);
            if (v91 == v296)
              goto LABEL_361;
            if ((v91 & 0x18) != 0)
            {
LABEL_312:
              v99 = &v460[-(v91 & 0xFFFFFFFFFFFFFFF8)];
              v337 = &v90[-v296 - v89 - 8 + (_QWORD)v463];
              v338 = &v90[-v296 - 8];
              v339 = v296 - (v91 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v340 = *(_QWORD *)v338;
                v338 -= 8;
                *(_QWORD *)v337 = v340;
                v337 -= 8;
                v339 += 8;
              }
              while (v339);
              v90 -= v91 & 0xFFFFFFFFFFFFFFF8;
              if (v91 == (v91 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_361;
              goto LABEL_359;
            }
            v99 = &v460[-v296];
            v90 -= v296;
          }
LABEL_359:
          v372 = v99 - 1;
          do
          {
            v373 = *--v90;
            *v372-- = v373;
          }
          while (v90 != (char *)v89);
LABEL_361:
          v90 = (char *)v89;
          v292 = v98;
LABEL_362:
          *a1 = (uint64_t)v292;
          a1[1] = (uint64_t)&v98[v92];
          a1[2] = (uint64_t)&v98[v97];
          if (v90)
          {
            operator delete(v90);
            v87 = v466;
            v88 = v469;
            v85 = v73 - 2;
          }
          goto LABEL_364;
        }
        LODWORD(v92) = a6;
        if (a6 < v91)
          a1[1] = v89 + a6;
LABEL_364:
        v374 = (unsigned __int8 *)*a1;
        v375 = *(uint64_t **)a1[3];
        LODWORD(v491) = 0;
        BYTE4(v491) = a4;
        BYTE5(v491) = a5;
        WORD3(v491) = 0;
        v492 = 1;
        v493 = 0;
        v494 = 1;
        v495 = 0;
        if (v87 >= 4)
          v376 = 1;
        else
          v376 = v87;
        v496 = v376;
        if (v88 == 2)
          v377 = 4;
        else
          v377 = 1;
        if (!v88)
          v377 = 0;
        v497 = v377;
        *((_QWORD *)&v491 + 1) = __PAIR64__(v92, v85);
        v378 = *v375;
        v498 = (uint64_t)&v486[v489 + 3 + v68];
        v499 = v85;
        result = gcl::polyline::DecoderImpl::decompressAttributes(v378, (uint64_t)&v498, (uint64_t)v374, 0, &v491);
        if (!(_DWORD)result)
        {
          v379 = a7;
          a2 = v486;
          v15 = a6;
          v380 = a6;
          do
          {
            v381 = *v374++;
            if (v64 + v381)
              v379->i8[0] = -v379->i8[0];
            v379 = (uint8x8_t *)((char *)v379 + 1);
            --v380;
          }
          while (v380);
          v371 = (const char *)(v489 + v73);
LABEL_378:
          v364 = &v371[v68];
LABEL_379:
          v17 = (uint64_t)(v364 + 1);
          a1 = v485;
          v16 = v487 + 1;
          if (v487 + 1 == v483)
            return 0;
          continue;
        }
LABEL_435:
        if ((result - 1) >= 4)
          return 5;
        return result;
      case 2u:
        v490 = v17;
        v170 = *a1;
        v171 = (char *)a1[1];
        v172 = (unint64_t)&v171[-*a1];
        v173 = a1;
        v174 = __sz - v172;
        if (__sz <= v172)
        {
          v180 = v173;
          if (__sz < v172)
            v173[1] = v170 + __sz;
LABEL_352:
          v367 = (uint64_t *)*v180;
          result = mgcl::muid::decompress((mgcl::muid *)&v486[v490 + 1 + v68], (const char *)v73, 0, 0, *v180, (unint64_t *)8, a6);
          if ((_DWORD)result)
            return result;
          v368 = a7;
          a2 = v486;
          v15 = a6;
          v369 = a6;
          do
          {
            v370 = *v367++;
            if (v370 != -v64)
              v368->i8[0] = -v368->i8[0];
            v368 = (uint8x8_t *)((char *)v368 + 1);
            --v369;
          }
          while (v369);
          v371 = (const char *)(v490 + v73);
          goto LABEL_378;
        }
        v175 = v173[2];
        if (v175 - (uint64_t)v171 >= v174)
        {
          bzero(v171, __sz - v172);
          v173[1] = (uint64_t)&v171[v174];
          v180 = v173;
          goto LABEL_352;
        }
        if ((__sz & 0x8000000000000000) != 0)
LABEL_440:
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v176 = v175 - v170;
        v177 = 2 * v176;
        if (2 * v176 <= __sz)
          v177 = 8 * a6;
        if (v176 >= 0x3FFFFFFFFFFFFFFFLL)
          v178 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v178 = v177;
        v179 = v178;
        v476 = (char *)operator new(v178);
        v471 = &v476[v172];
        bzero(&v476[v172], v174);
        if (v171 == (char *)v170)
        {
          v180 = v485;
          v181 = v476;
          v291 = &v476[v172];
          goto LABEL_350;
        }
        if (v172 < 8)
        {
          v180 = v485;
          v181 = v476;
          v182 = &v476[v172];
          goto LABEL_347;
        }
        v181 = v476;
        v180 = v485;
        v182 = &v476[v172];
        if ((unint64_t)(v170 - (_QWORD)v476) < 0x20)
          goto LABEL_347;
        if (v172 >= 0x20)
        {
          v294 = v172 & 0xFFFFFFFFFFFFFFE0;
          v325 = &v476[v172 - 16];
          v326 = v171 - 16;
          v327 = v172 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v328 = *(_OWORD *)v326;
            *((_OWORD *)v325 - 1) = *((_OWORD *)v326 - 1);
            *(_OWORD *)v325 = v328;
            v325 -= 32;
            v326 -= 32;
            v327 -= 32;
          }
          while (v327);
          if (v172 == v294)
            goto LABEL_349;
          if ((v172 & 0x18) == 0)
          {
            v182 = &v471[-v294];
            v171 -= v294;
LABEL_347:
            v365 = v182 - 1;
            do
            {
              v366 = *--v171;
              *v365-- = v366;
            }
            while (v171 != (char *)v170);
LABEL_349:
            v171 = (char *)v170;
            v291 = v181;
LABEL_350:
            *v180 = (uint64_t)v291;
            v180[1] = (uint64_t)&v181[__sz];
            v180[2] = (uint64_t)&v181[v179];
            if (v171)
              operator delete(v171);
            goto LABEL_352;
          }
        }
        else
        {
          v294 = 0;
        }
        v182 = &v471[-(v172 & 0xFFFFFFFFFFFFFFF8)];
        v329 = &v171[-v294 - v170 - 8 + (_QWORD)v476];
        v330 = &v171[-v294 - 8];
        v331 = v294 - (v172 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v332 = *(_QWORD *)v330;
          v330 -= 8;
          *(_QWORD *)v329 = v332;
          v329 -= 8;
          v331 += 8;
        }
        while (v331);
        v171 -= v172 & 0xFFFFFFFFFFFFFFF8;
        if (v172 == (v172 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_349;
        goto LABEL_347;
      case 3u:
        v145 = (unsigned __int8 *)*a1;
        v144 = (unsigned __int8 *)a1[1];
        if (v144 != (unsigned __int8 *)*a1)
        {
          a1[1] = (uint64_t)v145;
          v144 = v145;
        }
        if (a1[2] - (uint64_t)v145 >= __sz)
          goto LABEL_119;
        if ((__sz & 0x8000000000000000) != 0)
          goto LABEL_440;
        v146 = operator new(__sz);
        v147 = v144 - v145;
        v148 = &v146[v144 - v145];
        v149 = v148;
        a1 = v485;
        a2 = v486;
        v15 = a6;
        if (v144 == v145)
          goto LABEL_117;
        v149 = v146;
        if (v147 < 8 || (unint64_t)(v145 - v146) < 0x20)
        {
          v150 = v144;
          v151 = &v146[v144 - v145];
          goto LABEL_115;
        }
        if (v147 >= 0x20)
        {
          v293 = v147 & 0xFFFFFFFFFFFFFFE0;
          v309 = &v146[v147 - 16];
          v310 = v144 - 16;
          v311 = v147 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v312 = *(_OWORD *)v310;
            *(v309 - 1) = *((_OWORD *)v310 - 1);
            *v309 = v312;
            v309 -= 2;
            v310 -= 32;
            v311 -= 32;
          }
          while (v311);
          if (v147 == v293)
            goto LABEL_117;
          if ((v147 & 0x18) == 0)
          {
            v151 = &v148[-v293];
            v150 = &v144[-v293];
LABEL_115:
            v152 = v151 - 1;
            do
            {
              v153 = *--v150;
              *v152-- = v153;
            }
            while (v150 != v145);
            goto LABEL_117;
          }
        }
        else
        {
          v293 = 0;
        }
        v150 = &v144[-(v147 & 0xFFFFFFFFFFFFFFF8)];
        v151 = &v148[-(v147 & 0xFFFFFFFFFFFFFFF8)];
        v313 = &v146[&v144[-v293] - v145 - 8];
        v314 = &v144[-v293 - 8];
        v315 = v293 - (v147 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v316 = *(_QWORD *)v314;
          v314 -= 8;
          *v313-- = v316;
          v315 += 8;
        }
        while (v315);
        if (v147 != (v147 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_115;
LABEL_117:
        *v485 = (uint64_t)v149;
        v485[1] = (uint64_t)v148;
        v485[2] = (uint64_t)&v146[__sz];
        if (v145)
          operator delete(v145);
LABEL_119:
        v154 = 0;
        v155 = v17 + v68 + 1;
        v113 = v483;
        v111 = v487;
        do
        {
          v156 = 0;
          v157 = 0;
          v158 = 0;
          v117 = v155;
          v159 = &a2[v155];
          do
          {
            v160 = (char)v159[v157];
            v158 |= (unint64_t)(v159[v157] & 0x7F) << v156;
            v120 = v157 + 1;
            if (v157 > 8)
              break;
            v156 += 7;
            ++v157;
          }
          while (v160 < 0);
          if (v158 != -v64)
            a7->i8[v154] = -a7->i8[v154];
          v155 = v117 + v120;
          ++v154;
        }
        while (v154 != v15);
LABEL_8:
        v17 = v117 + v120;
        v16 = v111 + 1;
        if (v16 == v113)
          return 0;
        continue;
      case 4u:
        v161 = (uint64_t *)operator new();
        v123 = v161;
        v162 = v479 - v17 - v68;
        a2 = v486;
        *v161 = (uint64_t)&v486[v17 + 1 + v68];
        v161[1] = v162;
        v161[2] = 0;
        v163 = 8 * v162;
        if (!v163)
        {
          v168 = 0;
          v15 = a6;
          goto LABEL_131;
        }
        v164 = (char *)*v161;
        v165 = *(unsigned __int8 *)*v161;
        v161[2] = 1;
        v166 = (v165 >> 6) & 2 | (*v164 >> 6) & 1;
        v161[2] = 2;
        v167 = (*v164 >> 5) & 1 | (2 * v166);
        v161[2] = 3;
        v15 = a6;
        if (v167 != 2)
        {
          if (v167 != 1)
          {
            v168 = 3;
            if (v167)
            {
LABEL_438:
              MEMORY[0x18D76437C](v123, 0x1050C40E4AAA758);
              return 3;
            }
            if (v163 >= 8)
            {
              v205 = (_BYTE *)*v161;
              v206 = *(unsigned __int8 *)*v161 >> 4;
              v161[2] = 4;
              v207 = (*v205 >> 3) & 1 | (2 * (v206 & 1));
              v161[2] = 5;
              v208 = *v205 >> 2;
              v161[2] = 6;
              v209 = (4 * v207) | (2 * (v208 & 1)) | (*v205 >> 1) & 1;
              v161[2] = 7;
              LODWORD(v205) = *v205 & 1;
              v161[2] = 8;
              v169 = (v205 | (2 * v209)) + 1;
              v168 = 8;
LABEL_177:
              a1 = v485;
              for (j = 0; j != v15; ++j)
              {
                if (v168 + v169 <= v163)
                {
                  v211 = 0;
                  v212 = *v161;
                  v213 = v169;
                  do
                  {
                    v211 = (*(unsigned __int8 *)(v212 + (v168 >> 3)) >> (~(_BYTE)v168 & 7)) & 1 | (2 * v211);
                    v161[2] = ++v168;
                    --v213;
                  }
                  while (v213);
                }
                else
                {
                  v211 = 0;
                }
                if (v211 != -v64)
                  a7->i8[j] = -a7->i8[j];
              }
LABEL_253:
              v280 = v168 >> 3;
              if ((v168 & 7) != 0)
                ++v280;
              v281 = v17 + v68;
              goto LABEL_256;
            }
LABEL_131:
            v169 = 1;
            goto LABEL_177;
          }
          v242 = 0;
          v243 = *v164;
          v161[2] = 4;
          v244 = v243 & 0x10 | *v164 & 0xF;
          v161[2] = 5;
          v245 = *v164;
          v161[2] = 6;
          v246 = v244 & 0xFFFFFFF8 | v245 & 4 | *v164 & 3;
          v161[2] = 7;
          v247 = v246 & 0xFFFFFFFE | *v164 & 1;
          v161[2] = 8;
          v168 = 8;
          a1 = v485;
          while (v168 + 1 > v163)
          {
            v248 = 0;
            v249 = 0;
            if ((_DWORD)v247)
              goto LABEL_218;
LABEL_222:
            if (v64 + (v249 | (v248 << v247)))
              a7->i8[v242] = -a7->i8[v242];
            if (++v242 == a6)
              goto LABEL_253;
          }
          v250 = 0;
          v248 = 8 * (v477 - v17 - v68) - v168;
          v251 = v75 - v168;
          while (1)
          {
            v252 = v168++;
            v253 = v164[v252 >> 3];
            v123[2] = v168;
            if (((v253 >> (~(_BYTE)v252 & 7)) & 1) == 0)
              break;
            if (v251 == ++v250)
            {
              v168 = v252 + 1;
              v249 = 0;
              if ((_DWORD)v247)
                goto LABEL_218;
              goto LABEL_222;
            }
          }
          v248 = v250;
          v168 = v252 + 1;
          v249 = 0;
          if (!(_DWORD)v247)
            goto LABEL_222;
LABEL_218:
          if (v168 + v247 <= v163)
          {
            v254 = 0;
            v255 = -v247;
            do
            {
              v249 = (v164[v168 >> 3] >> (~(_BYTE)v168 & 7)) & 1 | (2 * v254);
              v123[2] = ++v168;
              v254 = v249;
              v228 = __CFADD__(v255++, 1);
            }
            while (!v228);
          }
          goto LABEL_222;
        }
        v256 = *v164;
        v161[2] = 4;
        v257 = v256 & 0x10 | *v164 & 0xF;
        v161[2] = 5;
        v258 = *v164;
        v161[2] = 6;
        v259 = *v164;
        v161[2] = 7;
        v260 = v257 & 0xFFFFFFF8 | v258 & 4 | v259 & 2 | *v164 & 1;
        v161[2] = 8;
        LODWORD(v491) = v260;
        if (v163 >= 0xD)
        {
          v285 = v164[1];
          v161[2] = 9;
          v286 = (v285 >> 6) & 2 | (v164[1] >> 6) & 1;
          v161[2] = 10;
          v287 = v164[1];
          v161[2] = 11;
          v288 = (4 * v286) | (v287 >> 4) & 2 | (v164[1] >> 4) & 1;
          v161[2] = 12;
          v289 = (2 * v288) | (v164[1] >> 3) & 1;
          v161[2] = 13;
          a1 = v485;
          DWORD1(v491) = v289;
          if (v163 >= 0x12)
          {
            v261 = v164[1] >> 2;
            v161[2] = 14;
            v262 = (v164[1] >> 1) & 1 | (2 * (v261 & 1));
            v161[2] = 15;
            LOBYTE(v261) = v164[1];
            v161[2] = 16;
            v263 = (4 * v262) | (2 * (v261 & 1)) | (v164[2] >> 7) & 1;
            v161[2] = 17;
            v264 = (v164[2] >> 6) & 1 | (2 * v263);
            v161[2] = 18;
            goto LABEL_248;
          }
        }
        else
        {
          a1 = v485;
          DWORD1(v491) = 0;
        }
        v264 = 0;
LABEL_248:
        DWORD2(v491) = v264;
        v290 = a7;
        do
        {
          if (v64 + geo::ReadBitstream::unpackRice2(v123, &v491))
            v290->i8[0] = -v290->i8[0];
          v290 = (uint8x8_t *)((char *)v290 + 1);
          --v15;
        }
        while (v15);
        v168 = v123[2];
        v15 = a6;
        goto LABEL_253;
      default:
        return 3;
    }
  }
}

void sub_18872F9C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D76437C](v2, 0x20C4093837F09);
  MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_18872FA8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18872FFEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDStorefrontReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  GEOPDStorefrontBundleId *v17;
  _BOOL8 v18;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 4)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v17 = objc_alloc_init(GEOPDStorefrontBundleId);
          if (!GEOPDStorefrontBundleIdReadAllFrom((uint64_t)v17, v3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          -[GEOPDStorefront addBundleId:](a1, v17);

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v18 = v3[*v6] == 0;
  }
  else
  {
LABEL_27:
    v18 = 0;
  }
  objc_sync_exit(v3);

  return v18;
}

void sub_1887301F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDStorefrontBundleIdReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _BOOL8 v30;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v25 = 0;
          v26 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v27 = *v4;
            v28 = *(_QWORD *)&v3[v27];
            if (v28 == -1 || v28 >= *(_QWORD *)&v3[*v5])
              break;
            v29 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v28);
            *(_QWORD *)&v3[v27] = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
            {
              v24 = &OBJC_IVAR___GEOPDStorefrontBundleId__timestamp;
              goto LABEL_40;
            }
            v25 += 7;
            v23 = v26++ > 8;
            if (v23)
            {
              v19 = 0;
              v24 = &OBJC_IVAR___GEOPDStorefrontBundleId__timestamp;
              goto LABEL_42;
            }
          }
          v24 = &OBJC_IVAR___GEOPDStorefrontBundleId__timestamp;
LABEL_39:
          v3[*v6] = 1;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_48;
            continue;
          }
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
            {
              v24 = &OBJC_IVAR___GEOPDStorefrontBundleId__identifier;
              goto LABEL_39;
            }
            v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
            *(_QWORD *)&v3[v20] = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              v19 = 0;
              v24 = &OBJC_IVAR___GEOPDStorefrontBundleId__identifier;
              goto LABEL_42;
            }
          }
          v24 = &OBJC_IVAR___GEOPDStorefrontBundleId__identifier;
        }
LABEL_40:
        if (v3[*v6])
          v19 = 0;
LABEL_42:
        *(_QWORD *)(a1 + *v24) = v19;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v30 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    v30 = 0;
  }
  objc_sync_exit(v3);

  return v30;
}

void sub_1887304EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL `anonymous namespace'::KeyAndPriority::compare_less_priority(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 16);
}

void sub_18873077C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188730860(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::decodeSectionEncoding(geo::codec::Allocator *a1, GeoCodecsVertexPool *a2, int a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  geo::codec::Allocator *v35;
  geo::codec::Allocator *v36;
  uint64_t v37;
  geo::codec::Allocator *LOD;
  _BOOL4 v39;
  uint64_t v40;
  geo::codec::Allocator *v41;
  uint64_t v42;
  geo::codec::Allocator *v43;
  uint64_t v44;
  geo::codec::Allocator *v45;
  uint64_t v46;
  uint64_t v47;
  geo::codec::Allocator *v49;
  unsigned int v50[6];
  char v51;

  v49 = 0;
  v6 = *((_QWORD *)a1 + 2);
  v7 = 8 * *((_QWORD *)a1 + 1);
  if (v6 + 5 > v7)
    goto LABEL_47;
  v9 = 0;
  v10 = *(_QWORD *)a1;
  v11 = 5;
  do
  {
    v12 = 8 - (v6 & 7);
    if (v11 < v12)
      v12 = v11;
    v9 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v12)) & ~(-1 << v12) | (v9 << v12);
    v6 += v12;
    *((_QWORD *)a1 + 2) = v6;
    v11 -= v12;
  }
  while (v11);
  v13 = (v9 + 1);
  if (v6 + v13 > v7)
    goto LABEL_47;
  v14 = 0;
  if ((_DWORD)v13)
  {
    do
    {
      v15 = 8 - (v6 & 7);
      if (v13 < v15)
        v15 = v13;
      v14 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v15)) & ~(-1 << v15) | (v14 << v15);
      v6 += v15;
      *((_QWORD *)a1 + 2) = v6;
      v13 -= v15;
    }
    while (v13);
  }
  v50[0] = v14;
  if (v6 + 5 > v7)
    goto LABEL_47;
  v16 = 0;
  v17 = 5;
  do
  {
    v18 = 8 - (v6 & 7);
    if (v17 < v18)
      v18 = v17;
    v16 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v18)) & ~(-1 << v18) | (v16 << v18);
    v6 += v18;
    *((_QWORD *)a1 + 2) = v6;
    v17 -= v18;
  }
  while (v17);
  v19 = (v16 + 1);
  if (v6 + v19 > v7)
    goto LABEL_47;
  v20 = 0;
  if (v16 != -1)
  {
    do
    {
      v21 = 8 - (v6 & 7);
      if (v19 < v21)
        v21 = v19;
      v20 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v21)) & ~(-1 << v21) | (v20 << v21);
      v6 += v21;
      *((_QWORD *)a1 + 2) = v6;
      v19 -= v21;
    }
    while (v19);
  }
  v50[1] = v20;
  if (v6 + 5 > v7)
    goto LABEL_47;
  v22 = 0;
  v23 = 5;
  do
  {
    v24 = 8 - (v6 & 7);
    if (v23 < v24)
      v24 = v23;
    v22 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v24)) & ~(-1 << v24) | (v22 << v24);
    v6 += v24;
    *((_QWORD *)a1 + 2) = v6;
    v23 -= v24;
  }
  while (v23);
  v50[2] = v22;
  if (v6 + 5 > v7)
    goto LABEL_47;
  v25 = 0;
  v26 = 5;
  do
  {
    v27 = 8 - (v6 & 7);
    if (v26 < v27)
      v27 = v26;
    v25 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v27)) & ~(-1 << v27) | (v25 << v27);
    v6 += v27;
    *((_QWORD *)a1 + 2) = v6;
    v26 -= v27;
  }
  while (v26);
  v50[3] = v25;
  if (v6 + 4 > v7)
    goto LABEL_47;
  v28 = 0;
  v29 = 4;
  do
  {
    v30 = 8 - (v6 & 7);
    if (v29 < v30)
      v30 = v29;
    v28 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v30)) & ~(-1 << v30) | (v28 << v30);
    v6 += v30;
    *((_QWORD *)a1 + 2) = v6;
    v29 -= v30;
  }
  while (v29);
  v50[4] = v28;
  if (v6 + 5 > v7)
    goto LABEL_47;
  v31 = 0;
  v32 = 5;
  do
  {
    v33 = 8 - (v6 & 7);
    if (v32 < v33)
      v33 = v32;
    v31 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v33)) & ~(-1 << v33) | (v31 << v33);
    v6 += v33;
    *((_QWORD *)a1 + 2) = v6;
    v32 -= v33;
  }
  while (v32);
  v50[5] = v31;
  if (v6 + 1 > v7
    || (v34 = *(unsigned __int8 *)(v10 + (v6 >> 3)),
        *((_QWORD *)a1 + 2) = v6 + 1,
        v51 = (v34 >> (~(_BYTE)v6 & 7)) & 1,
        v35 = (geo::codec::Allocator *)geo::codec::decodeSectionEncodingWithHeader(a1, &v49, (geo::codec::Allocator **)a2, v50, a3, a5), !(_DWORD)v35))
  {
LABEL_47:
    LOD = *(geo::codec::Allocator **)&a2->var0;
    if (*(_QWORD *)&a2->var0)
    {
      LOD = geo::codec::VertexPoolDealloc(LOD, a2);
      v40 = 0;
      *(_QWORD *)&a2->var0 = 0;
      v41 = v49;
      if (v49)
      {
LABEL_51:
        v42 = geo::codec::Allocator::instance(LOD);
        v43 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v42 + 40))(v42, *((_QWORD *)v41 + 1), 0);
        v44 = geo::codec::Allocator::instance(v43);
        v45 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v44 + 40))(v44, *((_QWORD *)v41 + 4), 0);
        if (*((_QWORD *)v41 + 3))
        {
          v46 = geo::codec::Allocator::instance(v45);
          v45 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v46 + 40))(v46, *((_QWORD *)v41 + 3), 0);
        }
        v47 = geo::codec::Allocator::instance(v45);
        (*(void (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v47 + 40))(v47, v41, 0);
      }
      return v40;
    }
LABEL_50:
    v40 = 0;
    v41 = v49;
    if (v49)
      goto LABEL_51;
    return v40;
  }
  v36 = v49;
  if (v49)
  {
    v37 = geo::codec::Allocator::instance(v35);
    LOD = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 24))(v37, 1, 72);
    *(_QWORD *)&a2->var0 = LOD;
    if (LOD)
    {
      *((_QWORD *)LOD + 5) = *((_QWORD *)v36 + 5);
      *(_BYTE *)LOD = *(_BYTE *)v36;
      if (a4)
        v39 = (*a4 & 0x3F00uLL) > 0xE00;
      else
        v39 = 0;
      LOD = (geo::codec::Allocator *)geo::codec::_createLOD(v36, LOD, 0, v39, 0, 0, 0, 0);
      v40 = 1;
      v41 = v49;
      if (!v49)
        return v40;
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  return 1;
}

uint64_t geo::codec::decodeSectionEncodingWithHeader(geo::codec::Allocator *a1, geo::codec::Allocator **a2, geo::codec::Allocator **a3, unsigned int *a4, int a5, uint64_t a6)
{
  int v11;
  uint64_t (*v12)(void);
  geo::codec::Allocator *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  geo::codec::Allocator *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int *v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  geo::codec::Allocator *v49;
  float v50;
  float *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  float v64;
  float v65;
  float v66;
  float *v67;
  unsigned int v68;
  geo::codec::Allocator *v69;
  float v70;
  float *v71;
  geo::codec::Allocator *v72;
  unint64_t v74;

  if (*((_BYTE *)a4 + 24))
    v11 = a5;
  else
    v11 = 0;
  v12 = *(uint64_t (**)(void))(*(_QWORD *)geo::codec::Allocator::instance(a1) + 24);
  if (v11 == 1)
  {
    v13 = (geo::codec::Allocator *)v12();
    *a2 = v13;
    if (v13)
    {
      *(_BYTE *)v13 = a4[2];
      v14 = *a4;
      *((_QWORD *)v13 + 5) = v14;
      if ((_DWORD)v14)
      {
        v15 = geo::codec::Allocator::instance(v13);
        *((_QWORD *)*a2 + 4) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, 16 * *((_QWORD *)*a2 + 5), 8);
        v13 = *a2;
        v16 = *((_QWORD *)*a2 + 4);
        if (!v16)
          return v16 & 1;
      }
      v17 = a4[1];
      *((_QWORD *)v13 + 2) = v17;
      if ((_DWORD)v17)
      {
        v18 = geo::codec::Allocator::instance(v13);
        *((_QWORD *)*a2 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, 12 * *((_QWORD *)*a2 + 2), 8);
        v16 = *((_QWORD *)*a2 + 1);
        if (!v16)
          return v16 & 1;
      }
      goto LABEL_16;
    }
LABEL_79:
    LOBYTE(v16) = 0;
    return v16 & 1;
  }
  v19 = (geo::codec::Allocator *)v12();
  *a3 = v19;
  if (!v19)
    goto LABEL_79;
  *(_BYTE *)v19 = a4[2];
  v20 = *a4;
  *((_QWORD *)v19 + 5) = v20;
  if (!(_DWORD)v20
    || (v21 = geo::codec::Allocator::instance(v19),
        *((_QWORD *)*a3 + 4) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, 16 * *((_QWORD *)*a3 + 5), 8), v19 = *a3, (v16 = *((_QWORD *)*a3 + 4)) != 0))
  {
    v22 = a4[1];
    *((_QWORD *)v19 + 2) = v22;
    if (!(_DWORD)v22
      || (v23 = geo::codec::Allocator::instance(v19),
          *((_QWORD *)*a3 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, 8 * *((_QWORD *)*a3 + 2), 8), (v16 = *((_QWORD *)*a3 + 1)) != 0))
    {
LABEL_16:
      if (!a4[1] || (v74 = *a4, !(_DWORD)v74))
      {
        LOBYTE(v16) = 1;
        return v16 & 1;
      }
      LOBYTE(v16) = 0;
      v24 = 0;
      v25 = 0;
      v26 = *((_QWORD *)a1 + 2);
      v27 = 8 * *((_QWORD *)a1 + 1);
      v28 = a4[5];
      v29 = 32 - v28;
      while (1)
      {
        if (v26 + v28 > v27)
          return v16 & 1;
        if (!(_DWORD)v28)
          break;
        v30 = 0;
        v31 = *(_QWORD *)a1;
        v32 = v28;
        do
        {
          v33 = 8 - (v26 & 7);
          if (v32 < v33)
            v33 = v32;
          v30 = (*(unsigned __int8 *)(v31 + (v26 >> 3)) >> (8 - (v26 & 7) - v33)) & ~(-1 << v33) | (v30 << v33);
          v26 += v33;
          *((_QWORD *)a1 + 2) = v26;
          v32 -= v33;
        }
        while (v32);
        if (v26 + v28 > v27)
          return v16 & 1;
        v34 = 0;
        v35 = v30 << v29 >> v29;
        v36 = v28;
        do
        {
          v37 = 8 - (v26 & 7);
          if (v36 < v37)
            v37 = v36;
          v34 = (*(unsigned __int8 *)(v31 + (v26 >> 3)) >> (8 - (v26 & 7) - v37)) & ~(-1 << v37) | (v34 << v37);
          v26 += v37;
          *((_QWORD *)a1 + 2) = v26;
          v36 -= v37;
        }
        while (v36);
        v38 = v34 << v29 >> v29;
        if (a6)
          goto LABEL_31;
LABEL_32:
        v40 = a4[3];
        if (v26 + v40 > v27)
          return v16 & 1;
        v41 = 0;
        if ((_DWORD)v40)
        {
          v42 = *(_QWORD *)a1;
          do
          {
            v43 = 8 - (v26 & 7);
            if (v40 < v43)
              v43 = v40;
            v41 = (*(unsigned __int8 *)(v42 + (v26 >> 3)) >> (8 - (v26 & 7) - v43)) & ~(-1 << v43) | (v41 << v43);
            v26 += v43;
            *((_QWORD *)a1 + 2) = v26;
            v40 -= v43;
          }
          while (v40);
        }
        v44 = a4[4];
        if (v26 + v44 > v27)
          return v16 & 1;
        v45 = 0;
        if ((_DWORD)v44)
        {
          v46 = *(_QWORD *)a1;
          do
          {
            v47 = 8 - (v26 & 7);
            if (v44 < v47)
              v47 = v44;
            v45 = (*(unsigned __int8 *)(v46 + (v26 >> 3)) >> (8 - (v26 & 7) - v47)) & ~(-1 << v47) | (v45 << v47);
            v26 += v47;
            *((_QWORD *)a1 + 2) = v26;
            v44 -= v47;
          }
          while (v44);
        }
        v48 = v24 + v41;
        if (!v11)
        {
          v69 = *a3;
          if (v48 >= *((_QWORD *)*a3 + 2))
            return v16 & 1;
          v70 = (float)~(-1 << *(_BYTE *)v69);
          v71 = (float *)(*((_QWORD *)v69 + 1) + 8 * v24);
          *v71 = (float)v35 / v70;
          v71[1] = (float)v38 / v70;
          v52 = v24 + 1;
          if (!v41)
            goto LABEL_71;
LABEL_47:
          v53 = 32 - v45;
          v54 = v52 + v41;
          v55 = v26;
          while (2)
          {
            if (v55 + v45 > v27)
              return v16 & 1;
            v56 = 0;
            if (v45)
            {
              v57 = *(_QWORD *)a1;
              v58 = v45;
              do
              {
                v59 = 8 - (v55 & 7);
                if (v58 < v59)
                  v59 = v58;
                v56 = (*(unsigned __int8 *)(v57 + (v55 >> 3)) >> (8 - (v55 & 7) - v59)) & ~(-1 << v59) | (v56 << v59);
                v55 += v59;
                *((_QWORD *)a1 + 2) = v55;
                v58 -= v59;
              }
              while (v58);
              if (v55 + v45 > v27)
                return v16 & 1;
              v60 = 0;
              v61 = v56 << v53 >> v53;
              v62 = v45;
              do
              {
                v63 = 8 - (v55 & 7);
                if (v62 < v63)
                  v63 = v62;
                v60 = (*(unsigned __int8 *)(v57 + (v55 >> 3)) >> (8 - (v55 & 7) - v63)) & ~(-1 << v63) | (v60 << v63);
                v55 += v63;
                *((_QWORD *)a1 + 2) = v55;
                v62 -= v63;
              }
              while (v62);
              v56 = v60 << v53 >> v53;
              v26 = v55;
              v35 += v61;
              v64 = (float)v35;
              if (v11)
              {
LABEL_62:
                v65 = (float)~(-1 << *(_BYTE *)*a2);
                v66 = v64 / v65;
                v67 = (float *)(*((_QWORD *)*a2 + 1) + 12 * v52);
                goto LABEL_65;
              }
            }
            else
            {
              v64 = (float)v35;
              if (v11)
                goto LABEL_62;
            }
            v65 = (float)~(-1 << *(_BYTE *)*a3);
            v66 = v64 / v65;
            v67 = (float *)(*((_QWORD *)*a3 + 1) + 8 * v52);
LABEL_65:
            *v67 = v66;
            v38 += v56;
            v67[1] = (float)v38 / v65;
            if (*((_BYTE *)a4 + 24))
            {
              v26 = v55 + 1;
              if (v55 + 1 > v27)
                return v16 & 1;
              v68 = *(unsigned __int8 *)(*(_QWORD *)a1 + (v55 >> 3));
              *((_QWORD *)a1 + 2) = v26;
              if (v11)
                *(_BYTE *)(*((_QWORD *)*a2 + 1) + 12 * v52 + 8) = (v68 >> (~(_BYTE)v55 & 7)) & 1;
              ++v55;
            }
            if (++v52 == v54)
            {
              v52 = v54;
              if (v11)
                goto LABEL_72;
              goto LABEL_76;
            }
            continue;
          }
        }
        v49 = *a2;
        if (v48 >= *((_QWORD *)*a2 + 2))
          return v16 & 1;
        v50 = (float)~(-1 << *(_BYTE *)v49);
        v51 = (float *)(*((_QWORD *)v49 + 1) + 12 * v24);
        *v51 = (float)v35 / v50;
        v51[1] = (float)v38 / v50;
        v52 = v24 + 1;
        if (v41)
          goto LABEL_47;
LABEL_71:
        if (v11)
LABEL_72:
          v72 = *a2;
        else
LABEL_76:
          v72 = *a3;
        v16 = *((_QWORD *)v72 + 4) + 16 * v25;
        *(_QWORD *)v16 = v24;
        *(_QWORD *)(v16 + 8) = v52 - v24;
        ++v25;
        v24 = v52;
        LOBYTE(v16) = v25 >= v74;
        if (v25 == v74)
          return v16 & 1;
      }
      v38 = 0;
      v35 = 0;
      if (!a6)
        goto LABEL_32;
LABEL_31:
      v39 = (int *)(a6 + 8 * v25);
      *v39 = v35;
      v39[1] = v38;
      goto LABEL_32;
    }
  }
  return v16 & 1;
}

void sub_18873198C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t mgcl::raster::PolygonRasterDecoder<unsigned char>::decode(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  size_t v53;
  char v54;
  unint64_t v55;
  size_t v56;
  int v57;
  int v58;
  char *v59;
  char *v60;
  char *v61;
  size_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  size_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  unint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  __int128 v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char v82;
  uint64x2_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  char v88;
  unint64_t v89;
  size_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  size_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  size_t v101;
  char *v102;
  char *v103;
  char *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  unint64_t v108;
  __int128 v109;
  char *v110;
  int64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  char v115;
  size_t v116;
  unint64_t v117;
  uint64x2_t *v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  void **v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  size_t v126;
  size_t v127;
  int v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  size_t v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  size_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  unint64_t v143;
  char *v144;
  char *v145;
  unint64_t v146;
  __int128 v147;
  char *v148;
  int64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  char v153;
  uint64x2_t *v154;
  unint64_t v155;
  unint64_t v156;
  void **v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64x2_t *v161;
  uint64x2_t *v162;
  char *v163;
  _QWORD *v164;
  unint64_t v165;
  char v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  uint64_t v171;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  size_t v181;
  char *v182;
  char *v183;
  size_t v184;
  char *v185;
  char *v186;
  size_t v187;
  char *v188;
  char *v189;
  size_t v190;
  char *v191;
  size_t v192;
  size_t v193;
  size_t v194;
  size_t v195;
  size_t v196;
  size_t v197;
  int v198[2];
  char *v199;
  unint64_t v200;
  char *v201;
  uint64x2_t *v202;
  uint64_t *v203;
  int v204[2];
  void **v205;
  void *__p;
  void *v207;
  char *v208;
  char *v209;
  uint64x2_t *v210;
  __int8 *v211;
  char *v212;
  uint64x2_t *v213;
  char *v214;
  char *v215;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  do
  {
    v11 = v9;
    v12 = *(char *)(a2 + v9++);
    v10 |= (unint64_t)(v12 & 0x7F) << v8;
    if (v11 > 8)
      break;
    v8 += 7;
  }
  while (v12 < 0);
  if ((_DWORD)v10 != 1)
    return 4;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  do
  {
    v16 = *(char *)(a2 + v14 + v9);
    v15 |= (unint64_t)(*(_BYTE *)(a2 + v14 + v9) & 0x7F) << v13;
    v17 = v14 + 1;
    if (v14 > 8)
      break;
    v13 += 7;
    ++v14;
  }
  while (v16 < 0);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = v9 + v17;
  do
  {
    v22 = *(char *)(a2 + v21++);
    v20 |= (unint64_t)(v22 & 0x7F) << v18;
    if (v19 > 8)
      break;
    ++v19;
    v18 += 7;
  }
  while (v22 < 0);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = (char *)(a2 + v21);
  do
  {
    v28 = *v26++;
    v27 = v28;
    ++v21;
    v25 |= (unint64_t)(v28 & 0x7F) << v23;
    if (v24 > 8)
      break;
    ++v24;
    v23 += 7;
  }
  while (v27 < 0);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  do
  {
    v33 = *v26++;
    v32 = v33;
    ++v21;
    v31 |= (unint64_t)(v33 & 0x7F) << v29;
    if (v30 > 8)
      break;
    ++v30;
    v29 += 7;
  }
  while (v32 < 0);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  do
  {
    v38 = *v26++;
    v37 = v38;
    ++v21;
    v36 |= (unint64_t)(v38 & 0x7F) << v34;
    if (v35 > 8)
      break;
    ++v35;
    v34 += 7;
  }
  while (v37 < 0);
  *(_QWORD *)a4 = v25;
  *(_QWORD *)(a4 + 8) = v31;
  *(_DWORD *)(a4 + 16) = v36;
  if (a5)
  {
    v39 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = 0;
    if (v39)
      MEMORY[0x18D764364](v39, 0x1000C8077774924);
    return 0;
  }
  v41 = operator new[]();
  v42 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 24) = v41;
  if (v42)
    MEMORY[0x18D764364](v42, 0x1000C8077774924);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  do
  {
    v47 = *v26++;
    v46 = v47;
    ++v21;
    v45 |= (unint64_t)(v47 & 0x7F) << v43;
    if (v44 > 8)
      break;
    ++v44;
    v43 += 7;
  }
  while (v46 < 0);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  do
  {
    v52 = *v26++;
    v51 = v52;
    ++v21;
    v50 |= (unint64_t)(v52 & 0x7F) << v48;
    if (v49 > 8)
      break;
    ++v49;
    v48 += 7;
  }
  while (v51 < 0);
  v213 = 0;
  v214 = 0;
  v215 = 0;
  *(_QWORD *)v204 = v45;
  v205 = a1;
  *(_QWORD *)v198 = v50;
  if (v45)
  {
    if (v45 >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v53 = 8 * v45;
    v213 = (uint64x2_t *)operator new(8 * v45);
    v215 = &v213->i8[8 * *(_QWORD *)v204];
    bzero(v213, v53);
    v199 = &v213->i8[v53];
    v202 = v213;
    v214 = &v213->i8[v53];
  }
  else
  {
    v199 = 0;
    v202 = 0;
  }
  v54 = 0;
  v55 = 0;
  v56 = 0;
  do
  {
    v58 = *v26++;
    v57 = v58;
    ++v21;
    v56 |= (unint64_t)(v58 & 0x7F) << v54;
    if (v55 > 8)
      break;
    ++v55;
    v54 += 7;
  }
  while (v57 < 0);
  v59 = (char *)*v205;
  v60 = (char *)v205[1];
  v61 = (char *)(v60 - (_BYTE *)*v205);
  v62 = v56 - (_QWORD)v61;
  if (v56 <= (unint64_t)v61)
  {
    if (v56 < (unint64_t)v61)
      v205[1] = &v59[v56];
LABEL_72:
    if (!v56)
      goto LABEL_74;
    goto LABEL_73;
  }
  v63 = (char *)v205[2];
  if (v63 - v60 < v62)
  {
    v190 = v56 - (_QWORD)v61;
    v193 = v60 - (_BYTE *)*v205;
    if ((v56 & 0x8000000000000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v64 = v63 - v59;
    v65 = 2 * v64;
    if (2 * v64 <= v56)
      v65 = v56;
    if (v64 >= 0x3FFFFFFFFFFFFFFFLL)
      v66 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v66 = v65;
    v181 = v66;
    v186 = (char *)*v205;
    v67 = (char *)operator new(v66);
    v182 = &v67[v181];
    v173 = v67;
    v175 = &v67[v193];
    v178 = &v67[v56];
    bzero(&v67[v193], v190);
    if (v60 == v186)
    {
      v69 = v178;
      v68 = v182;
      v71 = v175;
      goto LABEL_70;
    }
    if (v193 < 8)
    {
      v69 = v178;
      v68 = v182;
      v71 = v173;
      v70 = v175;
      goto LABEL_67;
    }
    v71 = v173;
    v70 = v175;
    v69 = v178;
    v68 = v182;
    if ((unint64_t)(v186 - v173) >= 0x20)
    {
      if (v193 < 0x20)
      {
        v72 = 0;
        goto LABEL_62;
      }
      v72 = v193 & 0xFFFFFFFFFFFFFFE0;
      v73 = v60 - 16;
      v74 = &v173[v60 - 16 - v186];
      v75 = v193 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v76 = *(_OWORD *)v73;
        *((_OWORD *)v74 - 1) = *((_OWORD *)v73 - 1);
        *(_OWORD *)v74 = v76;
        v74 -= 32;
        v73 -= 32;
        v75 -= 32;
      }
      while (v75);
      if (v193 == v72)
        goto LABEL_69;
      if ((v193 & 0x18) != 0)
      {
LABEL_62:
        v70 = &v175[-(v193 & 0xFFFFFFFFFFFFFFF8)];
        v77 = &v60[-v72 - 8];
        v78 = (char *)(v77 - v186);
        v79 = v72 - (v193 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v80 = *(_QWORD *)v77;
          v77 -= 8;
          *(_QWORD *)&v78[(_QWORD)v173] = v80;
          v78 -= 8;
          v79 += 8;
        }
        while (v79);
        v60 -= v193 & 0xFFFFFFFFFFFFFFF8;
        if (v193 == (v193 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_69;
        goto LABEL_67;
      }
      v70 = &v175[-v72];
      v60 -= v72;
    }
LABEL_67:
    v81 = v70 - 1;
    do
    {
      v82 = *--v60;
      *v81-- = v82;
    }
    while (v60 != v186);
LABEL_69:
    v60 = v186;
LABEL_70:
    *v205 = v71;
    v205[1] = v69;
    v205[2] = v68;
    if (v60)
      operator delete(v60);
    goto LABEL_72;
  }
  v194 = (size_t)&v60[v62];
  bzero(v60, v62);
  v205[1] = (void *)v194;
LABEL_73:
  memcpy(*v205, v26, v56);
  v21 += v56;
LABEL_74:
  v83 = v202;
  v84 = (v199 - (char *)v202) >> 3;
  v85 = *(_QWORD *)v204;
  if (*(_QWORD *)v204 <= v84)
  {
    v86 = (uint64_t *)v205;
    if (*(_QWORD *)v204 < v84)
      v214 = &v202->i8[8 * *(_QWORD *)v204];
  }
  else
  {
    std::vector<long long>::__append((uint64_t)&v213, *(_QWORD *)v204 - v84);
    v86 = (uint64_t *)v205;
    v83 = v213;
    v85 = *(_QWORD *)v204;
  }
  v87 = v86 + 3;
  v40 = mgcl::ints::IntDecompressor<long long>::decompress(v86 + 3, (unsigned __int8 *)*v86, v86[1] - *v86, v15, v20, v85, v83);
  if ((_DWORD)v40)
    goto LABEL_203;
  v203 = v87;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  if (*(_QWORD *)v204)
  {
    if (*(_QWORD *)v204 >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v210 = (uint64x2_t *)operator new(8 * *(_QWORD *)v204);
    v212 = &v210->i8[8 * *(_QWORD *)v204];
    bzero(v210, 8 * *(_QWORD *)v204);
    v211 = v212;
  }
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = a2 + v21;
  do
  {
    v92 = *(char *)(v91 + v89);
    v90 |= (unint64_t)(*(_BYTE *)(v91 + v89) & 0x7F) << v88;
    v93 = v89 + 1;
    if (v89 > 8)
      break;
    v88 += 7;
    ++v89;
  }
  while (v92 < 0);
  v94 = (char *)*v205;
  v95 = (char *)v205[1];
  v96 = (char *)(v95 - (_BYTE *)*v205);
  v97 = v90 - (_QWORD)v96;
  if (v90 > (unint64_t)v96)
  {
    v98 = (char *)v205[2];
    if (v98 - v95 >= v97)
    {
      v201 = &v95[v97];
      bzero(v95, v97);
      v205[1] = v201;
      goto LABEL_118;
    }
    v195 = v90 - (_QWORD)v96;
    v200 = v95 - (_BYTE *)*v205;
    if ((v90 & 0x8000000000000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v99 = v98 - v94;
    v100 = 2 * v99;
    if (2 * v99 <= v90)
      v100 = v90;
    if (v99 >= 0x3FFFFFFFFFFFFFFFLL)
      v101 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v101 = v100;
    v187 = v101;
    v191 = (char *)*v205;
    v102 = (char *)operator new(v101);
    v183 = &v102[v187];
    v188 = &v102[v200];
    v176 = v102;
    v179 = &v102[v90];
    bzero(&v102[v200], v195);
    if (v95 == v191)
    {
      v103 = v188;
      goto LABEL_115;
    }
    if (v200 < 8)
    {
      v103 = v176;
      v104 = v188;
      goto LABEL_112;
    }
    v103 = v176;
    v104 = v188;
    if ((unint64_t)(v191 - v176) >= 0x20)
    {
      if (v200 < 0x20)
      {
        v105 = 0;
        goto LABEL_107;
      }
      v105 = v200 & 0xFFFFFFFFFFFFFFE0;
      v106 = v95 - 16;
      v107 = &v176[v95 - 16 - v191];
      v108 = v200 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v109 = *(_OWORD *)v106;
        *((_OWORD *)v107 - 1) = *((_OWORD *)v106 - 1);
        *(_OWORD *)v107 = v109;
        v107 -= 32;
        v106 -= 32;
        v108 -= 32;
      }
      while (v108);
      if (v200 == v105)
        goto LABEL_114;
      if ((v200 & 0x18) != 0)
      {
LABEL_107:
        v104 = &v188[-(v200 & 0xFFFFFFFFFFFFFFF8)];
        v110 = &v95[-v105 - 8];
        v111 = v110 - v191;
        v112 = v105 - (v200 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v113 = *(_QWORD *)v110;
          v110 -= 8;
          *(_QWORD *)&v176[v111] = v113;
          v111 -= 8;
          v112 += 8;
        }
        while (v112);
        v95 -= v200 & 0xFFFFFFFFFFFFFFF8;
        if (v200 == (v200 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_114;
        goto LABEL_112;
      }
      v104 = &v188[-v105];
      v95 -= v105;
    }
LABEL_112:
    v114 = v104 - 1;
    do
    {
      v115 = *--v95;
      *v114-- = v115;
    }
    while (v95 != v191);
LABEL_114:
    v95 = v191;
LABEL_115:
    *v205 = v103;
    v205[1] = v179;
    v205[2] = v183;
    if (v95)
      operator delete(v95);
    goto LABEL_117;
  }
  if (v90 < (unint64_t)v96)
    v205[1] = &v94[v90];
LABEL_117:
  if (!v90)
  {
    v116 = v21 + v93;
    v117 = *(_QWORD *)v204;
    v118 = v210;
    v123 = (v211 - (__int8 *)v210) >> 3;
    v120 = *(_QWORD *)v204 >= v123;
    v121 = *(_QWORD *)v204 - v123;
    if (*(_QWORD *)v204 > v123)
      goto LABEL_119;
    goto LABEL_121;
  }
LABEL_118:
  memcpy(*v205, (const void *)(a2 + v21 + v93), v90);
  v116 = v21 + v90 + v93;
  v117 = *(_QWORD *)v204;
  v118 = v210;
  v119 = (v211 - (__int8 *)v210) >> 3;
  v120 = *(_QWORD *)v204 >= v119;
  v121 = *(_QWORD *)v204 - v119;
  if (*(_QWORD *)v204 > v119)
  {
LABEL_119:
    std::vector<long long>::__append((uint64_t)&v210, v121);
    v118 = v210;
    v117 = *(_QWORD *)v204;
    v122 = v205;
    goto LABEL_124;
  }
LABEL_121:
  if (!v120)
    v211 = &v118->i8[8 * v117];
  v122 = v205;
LABEL_124:
  v40 = mgcl::ints::IntDecompressor<long long>::decompress(v203, (unsigned __int8 *)*v122, (_BYTE *)v122[1] - (_BYTE *)*v122, v15, v20, v117, v118);
  if (!(_DWORD)v40)
  {
    v207 = 0;
    v208 = 0;
    v209 = 0;
    if (*(_QWORD *)v198)
    {
      if (*(_QWORD *)v198 >> 61)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v207 = operator new(8 * *(_QWORD *)v198);
      v209 = (char *)v207 + 8 * *(_QWORD *)v198;
      bzero(v207, 8 * *(_QWORD *)v198);
      v208 = v209;
    }
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v127 = a2 + v116;
    do
    {
      v128 = *(char *)(v127 + v125);
      v126 |= (unint64_t)(*(_BYTE *)(v127 + v125) & 0x7F) << v124;
      v129 = v125 + 1;
      if (v125 > 8)
        break;
      v124 += 7;
      ++v125;
    }
    while (v128 < 0);
    v130 = (char *)*v205;
    v131 = (char *)v205[1];
    v132 = (char *)(v131 - (_BYTE *)*v205);
    v133 = v126 - (_QWORD)v132;
    if (v126 <= (unint64_t)v132)
    {
      if (v126 < (unint64_t)v132)
        v205[1] = &v130[v126];
LABEL_163:
      if (!v126)
      {
LABEL_165:
        v154 = (uint64x2_t *)v207;
        v155 = (v208 - (_BYTE *)v207) >> 3;
        v156 = *(_QWORD *)v198;
        if (*(_QWORD *)v198 <= v155)
        {
          v157 = v205;
          v158 = v203;
          if (*(_QWORD *)v198 < v155)
            v208 = (char *)v207 + 8 * *(_QWORD *)v198;
        }
        else
        {
          std::vector<long long>::__append((uint64_t)&v207, *(_QWORD *)v198 - v155);
          v154 = (uint64x2_t *)v207;
          v157 = v205;
          v156 = *(_QWORD *)v198;
          v158 = v203;
        }
        v40 = mgcl::ints::IntDecompressor<long long>::decompress(v158, (unsigned __int8 *)*v157, (_BYTE *)v157[1] - (_BYTE *)*v157, v15, v20, v156, v154);
        if (!(_DWORD)v40)
        {
          std::vector<BOOL>::vector(&__p, v31 * v25);
          if (*(_QWORD *)v204)
          {
            v159 = 0;
            v160 = 0;
            v161 = v213;
            v162 = v210;
            v163 = (char *)__p;
            v164 = v207;
LABEL_173:
            v165 = v161->u64[v159];
            v166 = v162->i8[8 * v159];
            while (1)
            {
              *(_BYTE *)(v41 + v165) = v166;
              *(_QWORD *)&v163[(v165 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v165;
              switch(v164[v160])
              {
                case 0:
                  ++v159;
                  ++v160;
                  if (v159 != *(_QWORD *)v204)
                    goto LABEL_173;
                  goto LABEL_183;
                case 1:
                  v165 += v31;
                  ++v160;
                  continue;
                case 2:
                  v165 += v31 - 1;
                  ++v160;
                  continue;
                case 3:
                  v165 += v31 + 1;
                  ++v160;
                  continue;
                case 4:
                  v165 += v31 - 2;
                  ++v160;
                  continue;
                case 5:
                  v165 += v31 + 2;
                  ++v160;
                  continue;
                case 6:
                  v165 += v31 - 3;
                  ++v160;
                  continue;
                case 7:
                  v165 += v31 + 3;
                  goto LABEL_175;
                default:
LABEL_175:
                  ++v160;
                  break;
              }
            }
          }
LABEL_183:
          v167 = (char *)__p;
          if (v25 && v31)
          {
            v168 = 0;
            v169 = 0;
            while (1)
            {
              if (((*(_QWORD *)&v167[(v169 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v169) & 1) != 0)
              {
                v170 = *(_BYTE *)(v41 + v169++);
                if (v31 != 1)
                  goto LABEL_191;
              }
              else
              {
                v170 = *(_BYTE *)(v41 + v169 - v31);
                *(_BYTE *)(v41 + v169++) = v170;
                if (v31 != 1)
                {
LABEL_191:
                  v171 = v31 - 1;
                  do
                  {
                    while (((*(_QWORD *)&v167[(v169 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v169) & 1) == 0)
                    {
                      *(_BYTE *)(v41 + v169++) = v170;
                      if (!--v171)
                        goto LABEL_186;
                    }
                    v170 = *(_BYTE *)(v41 + v169++);
                    --v171;
                  }
                  while (v171);
                }
              }
LABEL_186:
              if (++v168 == v25)
                goto LABEL_197;
            }
          }
          if (__p)
LABEL_197:
            operator delete(v167);
          v40 = 0;
        }
        if (v207)
        {
          v208 = (char *)v207;
          operator delete(v207);
        }
        goto LABEL_201;
      }
LABEL_164:
      memcpy(*v205, (const void *)(a2 + v116 + v129), v126);
      goto LABEL_165;
    }
    v134 = (char *)v205[2];
    if (v134 - v131 >= v133)
    {
      v197 = (size_t)&v131[v133];
      bzero(v131, v133);
      v205[1] = (void *)v197;
      goto LABEL_164;
    }
    v192 = v126 - (_QWORD)v132;
    v196 = v131 - (_BYTE *)*v205;
    if ((v126 & 0x8000000000000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v135 = v134 - v130;
    v136 = 2 * v135;
    if (2 * v135 <= v126)
      v136 = v126;
    if (v135 >= 0x3FFFFFFFFFFFFFFFLL)
      v137 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v137 = v136;
    v184 = v137;
    v189 = (char *)*v205;
    v138 = (char *)operator new(v137);
    v185 = &v138[v184];
    v174 = v138;
    v177 = &v138[v196];
    v180 = &v138[v126];
    bzero(&v138[v196], v192);
    if (v131 == v189)
    {
      v140 = v180;
      v139 = v185;
      v142 = v177;
      goto LABEL_161;
    }
    if (v196 < 8)
    {
      v140 = v180;
      v139 = v185;
      v142 = v174;
      v141 = v177;
      goto LABEL_158;
    }
    v142 = v174;
    v141 = v177;
    v140 = v180;
    v139 = v185;
    if ((unint64_t)(v189 - v174) >= 0x20)
    {
      if (v196 < 0x20)
      {
        v143 = 0;
        goto LABEL_153;
      }
      v143 = v196 & 0xFFFFFFFFFFFFFFE0;
      v144 = v131 - 16;
      v145 = &v174[v131 - 16 - v189];
      v146 = v196 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v147 = *(_OWORD *)v144;
        *((_OWORD *)v145 - 1) = *((_OWORD *)v144 - 1);
        *(_OWORD *)v145 = v147;
        v145 -= 32;
        v144 -= 32;
        v146 -= 32;
      }
      while (v146);
      if (v196 == v143)
        goto LABEL_160;
      if ((v196 & 0x18) != 0)
      {
LABEL_153:
        v141 = &v177[-(v196 & 0xFFFFFFFFFFFFFFF8)];
        v148 = &v131[-v143 - 8];
        v149 = v148 - v189;
        v150 = v143 - (v196 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v151 = *(_QWORD *)v148;
          v148 -= 8;
          *(_QWORD *)&v174[v149] = v151;
          v149 -= 8;
          v150 += 8;
        }
        while (v150);
        v131 -= v196 & 0xFFFFFFFFFFFFFFF8;
        if (v196 == (v196 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_160;
        goto LABEL_158;
      }
      v141 = &v177[-v143];
      v131 -= v143;
    }
LABEL_158:
    v152 = v141 - 1;
    do
    {
      v153 = *--v131;
      *v152-- = v153;
    }
    while (v131 != v189);
LABEL_160:
    v131 = v189;
LABEL_161:
    *v205 = v142;
    v205[1] = v140;
    v205[2] = v139;
    if (v131)
      operator delete(v131);
    goto LABEL_163;
  }
LABEL_201:
  if (v210)
  {
    v211 = (__int8 *)v210;
    operator delete(v210);
  }
LABEL_203:
  if (v213)
  {
    v214 = (char *)v213;
    operator delete(v213);
  }
  return v40;
}

void sub_188732B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  void *v28;
  void *v29;

  if (__p)
  {
    operator delete(__p);
    v28 = *(void **)(v26 - 136);
    if (!v28)
    {
LABEL_3:
      v29 = *(void **)(v26 - 112);
      if (!v29)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v28 = *(void **)(v26 - 136);
    if (!v28)
      goto LABEL_3;
  }
  *(_QWORD *)(v26 - 128) = v28;
  operator delete(v28);
  v29 = *(void **)(v26 - 112);
  if (!v29)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_QWORD *)(v26 - 104) = v29;
  operator delete(v29);
  _Unwind_Resume(exception_object);
}

uint64_t mgcl::ints::IntDecompressor<long long>::decompress(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, char a4, char a5, unint64_t a6, uint64x2_t *a7)
{
  uint64_t v12;
  size_t v13;
  uint64_t result;
  size_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD **v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  BOOL v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  size_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  size_t v62;
  size_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD **v82;
  _QWORD *v83;
  _QWORD *v84;
  void *v85;
  void *v86;
  unsigned int v87;
  unsigned __int8 *v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  size_t v94;
  unsigned __int8 *v95;
  unint64_t v96;
  uint64_t v97;
  size_t v98;
  size_t v99;
  char *v100;
  char *v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  _BYTE *v104;
  unint64_t v105;
  char *v106;
  _BYTE *v107;
  unsigned __int8 *v108;
  char *v109;
  char *v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  int v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  unsigned int v127;
  int v128;
  int v129;
  unint64_t v130;
  uint64_t v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  char *v134;
  size_t v135;
  unsigned __int8 *v136;
  unint64_t v137;
  uint64_t v138;
  size_t v139;
  size_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  _BYTE *v146;
  unint64_t v147;
  char *v148;
  _BYTE *v149;
  unsigned __int8 *v150;
  char *v151;
  char *v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int8 *v160;
  int v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  unsigned int v169;
  int v170;
  int v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  unint64_t v176;
  uint64_t *v177;
  size_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  size_t v182;
  size_t v183;
  uint64_t *v184;
  char *v185;
  char *v186;
  size_t v187;
  uint64_t *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  size_t v193;
  unsigned int v194;
  size_t v195;
  char *v196;
  char *v197;
  _BYTE *v198;
  int v199;
  int v200;
  int v201;
  int v202;
  uint64_t i;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  _BYTE *v209;
  int v210;
  int v211;
  int v212;
  int v213;
  uint64_t j;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  char v221;
  int v222;
  char v223;
  unsigned int v224;
  uint64_t v225;
  int v226;
  int v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unsigned int v231;
  int v232;
  uint64_t v233;
  BOOL v234;
  uint64_t v235;
  char v236;
  int v237;
  char v238;
  char v239;
  unsigned int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  unsigned __int8 *v245;
  int v246;
  unsigned int v247;
  uint64_t v248;
  char v249;
  int v250;
  char v251;
  unsigned int v252;
  uint64_t v253;
  int v254;
  int v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unsigned int v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  char v264;
  int v265;
  char v266;
  char v267;
  unsigned int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  char *v273;
  int v274;
  BOOL v275;
  unsigned int v276;
  char *v277;
  int v278;
  unsigned int v279;
  unsigned int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  uint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t *v289;
  char *v290;
  unint64_t v291;
  unint64_t v292;
  unsigned int v293;
  int v294;
  unsigned int v295;
  int v296;
  int v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t *v301;
  char *v302;
  char *v303;
  unint64_t v304;
  unint64_t v305;
  char *v306;
  unint64_t v307;
  char *v308;
  _OWORD *v309;
  unsigned __int8 *v310;
  unint64_t v311;
  __int128 v312;
  _QWORD *v313;
  unsigned __int8 *v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  _OWORD *v320;
  unsigned __int8 *v321;
  unint64_t v322;
  __int128 v323;
  _QWORD *v324;
  unsigned __int8 *v325;
  unint64_t v326;
  uint64_t v327;
  char *v328;
  char *v329;
  unint64_t v330;
  __int128 v331;
  char *v332;
  char *v333;
  unint64_t v334;
  uint64_t v335;
  char *v336;
  char *v337;
  unint64_t v338;
  __int128 v339;
  char *v340;
  char *v341;
  unint64_t v342;
  uint64_t v343;
  char *v344;
  char *v345;
  unint64_t v346;
  __int128 v347;
  char *v348;
  char *v349;
  unint64_t v350;
  uint64_t v351;
  char *v352;
  char *v353;
  unint64_t v354;
  __int128 v355;
  char *v356;
  char *v357;
  unint64_t v358;
  uint64_t v359;
  char *v360;
  char *v361;
  unint64_t v362;
  __int128 v363;
  char *v364;
  char *v365;
  unint64_t v366;
  uint64_t v367;
  char *v368;
  char v369;
  int64x2_t *v370;
  unint64_t v371;
  unint64_t v372;
  int64x2_t v373;
  uint64x2_t v374;
  int8x16_t v375;
  int32x2_t v376;
  int64x2_t *v377;
  unint64_t v378;
  uint64x2_t *v379;
  int8x16_t v380;
  int8x16_t v381;
  int64x2_t v382;
  int8x16_t v383;
  int8x16_t v384;
  unint64_t v385;
  uint64_t v386;
  char *v387;
  uint64_t *v388;
  uint64_t v389;
  unint64_t v390;
  char *v391;
  char v392;
  uint64_t *v393;
  unint64_t *v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  char *v398;
  char v399;
  unsigned __int8 *v400;
  uint64_t *v401;
  char v402;
  char v403;
  uint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  unsigned int v407;
  unint64_t v408;
  char *v409;
  char v410;
  int v411;
  uint64_t v412;
  uint64_t *v413;
  char v414;
  char v415;
  uint64_t v416;
  int8x16_t v417;
  unint64_t v418;
  unint64_t v419;
  uint64x2_t v420;
  uint64_t *v421;
  int64x2_t *v422;
  unint64_t v423;
  uint64_t v424;
  uint32x4_t v425;
  uint32x4_t v426;
  int64x2_t v427;
  int64x2_t v428;
  int64x2_t v429;
  uint64x2_t v430;
  unint64_t v431;
  int64x2_t *v432;
  int8x16_t *v433;
  int8x16_t v434;
  uint32x4_t v435;
  uint32x4_t v436;
  uint32x4_t v437;
  uint32x4_t v438;
  int64x2_t v439;
  int64x2_t v440;
  int64x2_t v441;
  int64x2_t v442;
  int64x2_t v443;
  int64x2_t v444;
  int64x2_t v445;
  int64x2_t v446;
  unint64_t v447;
  unint64_t *v448;
  char *v449;
  char v450;
  char *v451;
  char v452;
  int32x4_t *v453;
  uint64_t *v454;
  char v455;
  char v456;
  uint64_t v457;
  unint64_t v458;
  unint64_t v459;
  int64x2_t v460;
  uint64x2_t v461;
  int8x16_t v462;
  int32x2_t v463;
  int32x2_t *v464;
  unint64_t v465;
  uint64x2_t *v466;
  int8x16_t v467;
  int8x16_t v468;
  int64x2_t v469;
  int8x16_t v470;
  int8x16_t v471;
  unint64_t v472;
  char *v473;
  __int32 *v474;
  uint64_t v475;
  unint64_t v476;
  char *v477;
  char *v478;
  char *v479;
  char *v480;
  char *v481;
  size_t v482;
  unsigned int v483;
  char *v484;
  unsigned int v485;
  int v486;
  char *v487;
  int v488;
  unsigned int v489;
  char *v490;
  char *v491;
  char *v492;
  char *v493;
  BOOL v494;
  int v495;
  unint64_t v496;
  char *v497;
  int v498;
  int32x4_t *v499;
  unint64_t v500;
  unint64_t v501;
  uint64_t v502;
  size_t v505;
  uint64_t v506;
  unint64_t __sz;
  uint64_t *v508;
  unsigned __int8 *v509;
  uint64_t v510;
  uint64_t v511;
  __int128 v512;
  uint64_t v513;
  __int16 v514;
  char v515;
  int v516;
  char v517;
  char v518;
  uint64_t v519;
  uint64_t v520;
  _BYTE __dst[65];
  uint64_t v522;

  v522 = *MEMORY[0x1E0C80C00];
  if (!a6)
    return 0;
  v12 = 8 * a6;
  bzero(a7, 8 * a6);
  v13 = *a2;
  if ((v13 - 66) < 0xFFFFFFBF)
    return 3;
  if (v13 <= 0x40)
    v15 = 65 - v13;
  else
    v15 = 0;
  bzero(&__dst[v13], v15);
  v16 = a6;
  memcpy(__dst, a2 + 1, v13);
  v17 = 0;
  v18 = v13 + 1;
  v499 = (int32x4_t *)&a7->i8[v12];
  v500 = a6 & 0xFFFFFFFFFFFFFFFCLL;
  v501 = 4 * a6;
  v502 = a3 - 1;
  v498 = a3 - 1;
  v506 = 8 * a3 - 24;
  __sz = v12;
  v508 = a1;
  v509 = a2;
  v505 = v13;
  while (1)
  {
    v21 = __dst[v17];
    v22 = a2[v18];
    v23 = v18 + 1;
    v510 = v17;
    v511 = v18;
    v24 = 0;
    v25 = 0;
    if (!__dst[v17])
      break;
    v26 = 0;
    v27 = &a2[v23];
    v28 = 1;
    v29 = v506 - 8 * v18;
    do
    {
      v30 = v28;
      v31 = v29;
      v32 = (char)v27[v25];
      v26 |= (unint64_t)(v27[v25] & 0x7F) << v24;
      if (v25 > 8)
        break;
      ++v25;
      v24 += 7;
      ++v28;
      v29 -= 8;
    }
    while (v32 < 0);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = &a2[v511];
    do
    {
      v37 = v31;
      v38 = (char)v36[v30 + 1];
      v35 |= (unint64_t)(v36[++v30] & 0x7F) << v33;
      if (v34 > 8)
        break;
      ++v34;
      v33 += 7;
      v31 -= 8;
    }
    while (v38 < 0);
    switch(v22)
    {
      case 1:
        if (!a1[3])
        {
          v39 = (_QWORD *)operator new();
          v40 = (_QWORD *)operator new();
          v41 = operator new();
          a1 = v508;
          a2 = v509;
          *(_QWORD *)(v41 + 20) = 0;
          *(_QWORD *)(v41 + 12) = 0;
          *(_DWORD *)(v41 + 36) = 0;
          *(_QWORD *)(v41 + 28) = 0;
          *(_WORD *)(v41 + 40) = 257;
          *(_QWORD *)(v41 + 44) = 0;
          *(_QWORD *)(v41 + 60) = 0;
          *(_QWORD *)(v41 + 52) = 0;
          *(_DWORD *)(v41 + 67) = 0;
          *(_DWORD *)(v41 + 72) = 0;
          *(_WORD *)(v41 + 76) = 257;
          *(_QWORD *)(v41 + 136) = 0;
          *(_OWORD *)(v41 + 80) = 0u;
          *(_OWORD *)(v41 + 96) = 0u;
          *(_OWORD *)(v41 + 112) = 0u;
          *v40 = v41;
          *v39 = v40;
          v42 = (_QWORD **)v508[3];
          v508[3] = (uint64_t)v39;
          if (v42)
          {
            v43 = *v42;
            *v42 = 0;
            if (v43)
            {
              v44 = (_QWORD *)*v43;
              *v43 = 0;
              if (v44)
              {
                v45 = (void *)v44[13];
                if (v45)
                {
                  v44[14] = v45;
                  operator delete(v45);
                }
                v46 = (void *)v44[10];
                if (v46)
                {
                  v44[11] = v46;
                  operator delete(v46);
                }
                MEMORY[0x18D76437C](v44, 0x1070C40ADA6D0DELL);
              }
              MEMORY[0x18D76437C](v43, 0x20C4093837F09);
              a1 = v508;
            }
            MEMORY[0x18D76437C](v42, 0x20C4093837F09);
          }
        }
        v47 = (_DWORD)v21 == 1;
        v48 = v35 - 2;
        if (v35 < 2)
          return 3;
        v49 = &a2[v511 + v30];
        v50 = v49[1];
        v51 = v49[2];
        v52 = *a1;
        v53 = (char *)a1[1];
        v54 = &v53[-*a1];
        if ((_DWORD)v21 == 1)
        {
          LODWORD(v55) = a6;
          v56 = a6 - (_QWORD)v54;
          if (a6 <= (unint64_t)v54)
          {
            v57 = v508;
            if (a6 >= (unint64_t)v54)
            {
LABEL_411:
              v412 = *v57;
              v413 = *(uint64_t **)v57[3];
              LODWORD(v512) = 0;
              BYTE4(v512) = a4;
              BYTE5(v512) = a5;
              WORD3(v512) = 0;
              v513 = 1;
              v514 = 0;
              v515 = v47;
              v516 = 0;
              if (v50 >= 4)
                v414 = 1;
              else
                v414 = v50;
              v517 = v414;
              if (v51 == 2)
                v415 = 4;
              else
                v415 = 1;
              if (!v51)
                v415 = 0;
              v518 = v415;
              *((_QWORD *)&v512 + 1) = __PAIR64__(v55, v48);
              v416 = *v413;
              v519 = (uint64_t)&v509[v511 + 3 + v30];
              v520 = v48;
              result = gcl::polyline::DecoderImpl::decompressAttributes(v416, (uint64_t)&v519, v412, 0, &v512);
              if ((_DWORD)result)
                goto LABEL_463;
              v16 = a6;
              if (a6 < 8)
              {
                v418 = 0;
                a1 = v508;
LABEL_432:
                v447 = a6 - v418;
                v448 = (unint64_t *)a7 + v418;
                v449 = (char *)(v412 + v418);
                do
                {
                  v450 = *v449++;
                  *v448 = ((_BYTE)v26 + v450) & 1 | (2 * *v448);
                  ++v448;
                  --v447;
                }
                while (v447);
                goto LABEL_434;
              }
              a1 = v508;
              if (a6 >= 0x10)
              {
                v430 = (uint64x2_t)vdupq_n_s64(v26);
                v431 = a6 & 0xFFFFFFFFFFFFFFF0;
                v432 = (int64x2_t *)a7;
                v433 = (int8x16_t *)v412;
                do
                {
                  v434 = *v433++;
                  v435 = (uint32x4_t)vqtbl1q_s8(v434, (int8x16_t)xmmword_189CFB5D0);
                  v436 = (uint32x4_t)vqtbl1q_s8(v434, (int8x16_t)xmmword_189CFB5C0);
                  v437 = (uint32x4_t)vqtbl1q_s8(v434, (int8x16_t)xmmword_189CFB5B0);
                  v438 = (uint32x4_t)vqtbl1q_s8(v434, (int8x16_t)xmmword_189CFB5A0);
                  v439 = (int64x2_t)vaddw_u32(v430, *(uint32x2_t *)v435.i8);
                  v440 = (int64x2_t)vaddw_u32(v430, *(uint32x2_t *)v438.i8);
                  v442 = *v432;
                  v441 = v432[1];
                  v443 = v432[4];
                  v444 = v432[5];
                  v417 = (int8x16_t)vsliq_n_s64((int64x2_t)vaddw_high_u32(v430, v438), v432[7], 1uLL);
                  v445 = vsliq_n_s64(v440, v432[6], 1uLL);
                  v446 = vsliq_n_s64((int64x2_t)vaddw_high_u32(v430, v435), v432[3], 1uLL);
                  v432[2] = vsliq_n_s64(v439, v432[2], 1uLL);
                  v432[3] = v446;
                  *v432 = vsliq_n_s64((int64x2_t)vaddw_u32(v430, *(uint32x2_t *)v436.i8), v442, 1uLL);
                  v432[1] = vsliq_n_s64((int64x2_t)vaddw_high_u32(v430, v436), v441, 1uLL);
                  v432[4] = vsliq_n_s64((int64x2_t)vaddw_u32(v430, *(uint32x2_t *)v437.i8), v443, 1uLL);
                  v432[5] = vsliq_n_s64((int64x2_t)vaddw_high_u32(v430, v437), v444, 1uLL);
                  v432[6] = v445;
                  v432[7] = (int64x2_t)v417;
                  v432 += 8;
                  v431 -= 16;
                }
                while (v431);
                if ((a6 & 0xFFFFFFFFFFFFFFF0) == a6)
                  goto LABEL_434;
                v418 = a6 & 0xFFFFFFFFFFFFFFF0;
                v419 = a6 & 0xFFFFFFFFFFFFFFF0;
                if ((a6 & 8) == 0)
                  goto LABEL_432;
              }
              else
              {
                v419 = 0;
              }
              v420 = (uint64x2_t)vdupq_n_s64(v26);
              v421 = (uint64_t *)(v412 + v419);
              v422 = (int64x2_t *)((char *)a7 + 8 * v419);
              v423 = v419 - (a6 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v424 = *v421++;
                v417.i64[0] = v424;
                v425 = (uint32x4_t)vqtbl1q_s8(v417, (int8x16_t)xmmword_189CFB5D0);
                v426 = (uint32x4_t)vqtbl1q_s8(v417, (int8x16_t)xmmword_189CFB5C0);
                v427 = (int64x2_t)vaddw_high_u32(v420, v426);
                v417 = (int8x16_t)vsliq_n_s64((int64x2_t)vaddw_u32(v420, *(uint32x2_t *)v426.i8), *v422, 1uLL);
                v428 = vsliq_n_s64(v427, v422[1], 1uLL);
                v429 = vsliq_n_s64((int64x2_t)vaddw_high_u32(v420, v425), v422[3], 1uLL);
                v422[2] = vsliq_n_s64((int64x2_t)vaddw_u32(v420, *(uint32x2_t *)v425.i8), v422[2], 1uLL);
                v422[3] = v429;
                *v422 = (int64x2_t)v417;
                v422[1] = v428;
                v422 += 4;
                v423 += 8;
              }
              while (v423);
              v418 = a6 & 0xFFFFFFFFFFFFFFF8;
              if ((a6 & 0xFFFFFFFFFFFFFFF8) != a6)
                goto LABEL_432;
              goto LABEL_434;
            }
            v208 = v52 + a6;
          }
          else
          {
            v57 = v508;
            v58 = v508[2];
            if (v58 - (uint64_t)v53 < v56)
            {
              v483 = v50;
              v494 = v47;
              v486 = v51;
              if ((a6 & 0x8000000000000000) != 0)
                goto LABEL_467;
              v59 = (unint64_t)v54;
              v60 = v58 - v52;
              v61 = 2 * v60;
              if (2 * v60 <= a6)
                v61 = a6;
              if (v60 >= 0x3FFFFFFFFFFFFFFFLL)
                v62 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v62 = v61;
              v480 = (char *)operator new(v62);
              v478 = &v480[v59];
              bzero(&v480[v59], v56);
              v63 = v62;
              if (v53 == (char *)v52)
              {
                v57 = v508;
                v55 = a6;
                v48 = v35 - 2;
                v51 = v486;
                v47 = v494;
                v50 = v483;
                v306 = &v480[v59];
                v64 = v480;
                goto LABEL_409;
              }
              if (v59 < 8)
              {
                v57 = v508;
                v55 = a6;
                v48 = v35 - 2;
                v51 = v486;
                v47 = v494;
                v50 = v483;
                v65 = &v480[v59];
                v64 = v480;
                goto LABEL_406;
              }
              v65 = &v480[v59];
              v64 = v480;
              v57 = v508;
              v55 = a6;
              v48 = v35 - 2;
              v51 = v486;
              v47 = v494;
              v50 = v483;
              if ((unint64_t)(v52 - (_QWORD)v480) >= 0x20)
              {
                if (v59 < 0x20)
                {
                  v317 = 0;
                  goto LABEL_334;
                }
                v317 = v59 & 0xFFFFFFFFFFFFFFE0;
                v352 = &v480[v59 - 16];
                v353 = v53 - 16;
                v354 = v59 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v355 = *(_OWORD *)v353;
                  *((_OWORD *)v352 - 1) = *((_OWORD *)v353 - 1);
                  *(_OWORD *)v352 = v355;
                  v352 -= 32;
                  v353 -= 32;
                  v354 -= 32;
                }
                while (v354);
                if (v59 == v317)
                  goto LABEL_408;
                if ((v59 & 0x18) != 0)
                {
LABEL_334:
                  v65 = &v478[-(v59 & 0xFFFFFFFFFFFFFFF8)];
                  v356 = &v53[-v317 - v52 - 8 + (_QWORD)v480];
                  v357 = &v53[-v317 - 8];
                  v358 = v317 - (v59 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v359 = *(_QWORD *)v357;
                    v357 -= 8;
                    *(_QWORD *)v356 = v359;
                    v356 -= 8;
                    v358 += 8;
                  }
                  while (v358);
                  v53 -= v59 & 0xFFFFFFFFFFFFFFF8;
                  if (v59 == (v59 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_408;
                  goto LABEL_406;
                }
                v65 = &v478[-v317];
                v53 -= v317;
              }
LABEL_406:
              v409 = v65 - 1;
              do
              {
                v410 = *--v53;
                *v409-- = v410;
              }
              while (v53 != (char *)v52);
LABEL_408:
              v53 = (char *)v52;
              v306 = v64;
LABEL_409:
              *v57 = (uint64_t)v306;
              v57[1] = (uint64_t)&v64[v55];
              v57[2] = (uint64_t)&v64[v63];
              if (v53)
              {
                v411 = v55;
                operator delete(v53);
                LODWORD(v55) = v411;
                v50 = v483;
                v47 = v494;
                v51 = v486;
                v48 = v35 - 2;
              }
              goto LABEL_411;
            }
            v492 = &v53[v56];
            v273 = v53;
            v274 = v51;
            v275 = v47;
            v276 = v50;
            bzero(v273, a6 - (_QWORD)v54);
            LODWORD(v55) = a6;
            v50 = v276;
            v47 = v275;
            v51 = v274;
            v48 = v35 - 2;
            v208 = (unint64_t)v492;
          }
          v57[1] = v208;
          goto LABEL_411;
        }
        v187 = v501 - (_QWORD)v54;
        if (v501 > (unint64_t)v54)
        {
          v188 = v508;
          v189 = v508[2];
          if (v189 - (uint64_t)v53 >= v187)
          {
            v493 = &v53[v187];
            v277 = v53;
            v278 = v51;
            v279 = v50;
            bzero(v277, v501 - (_QWORD)v54);
            v50 = v279;
            v47 = (_DWORD)v21 == 1;
            v51 = v278;
            v48 = v35 - 2;
            v508[1] = (uint64_t)v493;
            v194 = a6;
            goto LABEL_441;
          }
          v485 = v50;
          v488 = v51;
          if ((v501 & 0x8000000000000000) != 0)
LABEL_467:
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v190 = (unint64_t)v54;
          v191 = v189 - v52;
          v192 = 2 * v191;
          if (2 * v191 <= v501)
            v192 = 4 * a6;
          if (v191 >= 0x3FFFFFFFFFFFFFFFLL)
            v193 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v193 = v192;
          v482 = v193;
          v479 = (char *)operator new(v193);
          v477 = &v479[v190];
          bzero(&v479[v190], v187);
          if (v53 == (char *)v52)
          {
            v188 = v508;
            v194 = a6;
            v48 = v35 - 2;
            v51 = v488;
            v47 = (_DWORD)v21 == 1;
            v50 = v485;
            v196 = v479;
            v195 = v482;
            v308 = v477;
          }
          else
          {
            if (v190 < 8)
            {
              v188 = v508;
              v194 = a6;
              v48 = v35 - 2;
              v51 = v488;
              v47 = (_DWORD)v21 == 1;
              v50 = v485;
              v196 = v479;
              v195 = v482;
              v197 = v477;
              goto LABEL_436;
            }
            v318 = v190;
            v196 = v479;
            v195 = v482;
            v188 = v508;
            v194 = a6;
            v48 = v35 - 2;
            v51 = v488;
            v47 = (_DWORD)v21 == 1;
            v50 = v485;
            v197 = v477;
            if ((unint64_t)(v52 - (_QWORD)v479) < 0x20)
              goto LABEL_436;
            if (v318 >= 0x20)
            {
              v319 = v318 & 0xFFFFFFFFFFFFFFE0;
              v360 = &v479[v318 - 16];
              v361 = v53 - 16;
              v362 = v318 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v363 = *(_OWORD *)v361;
                *((_OWORD *)v360 - 1) = *((_OWORD *)v361 - 1);
                *(_OWORD *)v360 = v363;
                v360 -= 32;
                v361 -= 32;
                v362 -= 32;
              }
              while (v362);
              if (v318 != v319)
              {
                if ((v318 & 0x18) == 0)
                {
                  v197 = &v477[-v319];
                  v53 -= v319;
                  goto LABEL_436;
                }
                goto LABEL_342;
              }
            }
            else
            {
              v319 = 0;
LABEL_342:
              v197 = &v477[-(v318 & 0xFFFFFFFFFFFFFFF8)];
              v364 = &v53[-v319 - v52 - 8 + (_QWORD)v479];
              v365 = &v53[-v319 - 8];
              v366 = v319 - (v318 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v367 = *(_QWORD *)v365;
                v365 -= 8;
                *(_QWORD *)v364 = v367;
                v364 -= 8;
                v366 += 8;
              }
              while (v366);
              v53 -= v318 & 0xFFFFFFFFFFFFFFF8;
              if (v318 != (v318 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_436:
                v451 = v197 - 1;
                do
                {
                  v452 = *--v53;
                  *v451-- = v452;
                }
                while (v53 != (char *)v52);
              }
            }
            v53 = (char *)v52;
            v308 = v196;
          }
          *v188 = (uint64_t)v308;
          v188[1] = (uint64_t)&v196[v501];
          v188[2] = (uint64_t)&v196[v195];
          if (v53)
          {
            operator delete(v53);
            v50 = v485;
            v47 = (_DWORD)v21 == 1;
            v51 = v488;
            v48 = v35 - 2;
          }
          goto LABEL_441;
        }
        v188 = v508;
        v194 = a6;
        if (v501 < (unint64_t)v54)
          v508[1] = v52 + v501;
LABEL_441:
        v453 = (int32x4_t *)*v188;
        v454 = *(uint64_t **)v188[3];
        LODWORD(v512) = 0;
        BYTE4(v512) = a4;
        BYTE5(v512) = a5;
        WORD3(v512) = 0;
        v513 = 1;
        v514 = 0;
        v515 = v47;
        v516 = 0;
        if (v50 >= 4)
          v455 = 1;
        else
          v455 = v50;
        v517 = v455;
        if (v51 == 2)
          v456 = 4;
        else
          v456 = 1;
        if (!v51)
          v456 = 0;
        v518 = v456;
        *((_QWORD *)&v512 + 1) = __PAIR64__(v194, v48);
        v457 = *v454;
        v519 = (uint64_t)&v509[v511 + 3 + v30];
        v520 = v48;
        result = gcl::polyline::DecoderImpl::decompressAttributes(v457, (uint64_t)&v519, v453, 0, &v512);
        if ((_DWORD)result)
          goto LABEL_463;
        v458 = ~(-1 << v21);
        v16 = a6;
        if (a6 >= 4)
        {
          a1 = v508;
          if (&v453->i8[v501] <= (__int8 *)a7 || v453 >= v499)
          {
            v460 = vdupq_n_s64(v26);
            v461 = (uint64x2_t)vdupq_n_s64(v21);
            v462 = (int8x16_t)vdupq_n_s64(v458);
            v463 = vdup_n_s32(v21 > 0x3F);
            v464 = (int32x2_t *)&v453->u64[1];
            v465 = a6 & 0xFFFFFFFFFFFFFFFCLL;
            v466 = a7 + 1;
            do
            {
              v467 = (int8x16_t)vaddw_s32(v460, v464[-1]);
              v468 = (int8x16_t)vaddw_s32(v460, *v464);
              v469.i64[0] = v463.u32[0];
              v469.i64[1] = v463.u32[1];
              v470 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v469, 0x3FuLL));
              v471 = vbslq_s8(v470, v468, vorrq_s8((int8x16_t)vshlq_u64(*v466, v461), vandq_s8(v468, v462)));
              v466[-1] = (uint64x2_t)vbslq_s8(v470, v467, vorrq_s8((int8x16_t)vshlq_u64(v466[-1], v461), vandq_s8(v467, v462)));
              *v466 = (uint64x2_t)v471;
              v464 += 2;
              v466 += 2;
              v465 -= 4;
            }
            while (v465);
            v459 = a6 & 0xFFFFFFFFFFFFFFFCLL;
            if (v500 == a6)
              goto LABEL_434;
          }
          else
          {
            v459 = 0;
          }
        }
        else
        {
          v459 = 0;
          a1 = v508;
        }
        v472 = a6 - v459;
        v473 = &a7->i8[8 * v459];
        v474 = &v453->i32[v459];
        do
        {
          v475 = *v474++;
          v476 = v26 + v475;
          if (v21 <= 0x3F)
            v476 = (*(_QWORD *)v473 << v21) | v476 & v458;
          *(_QWORD *)v473 = v476;
          v473 += 8;
          --v472;
        }
        while (v472);
LABEL_434:
        v18 = v511 + v35 + v30 + 1;
        a2 = v509;
        goto LABEL_9;
      case 2:
        v132 = (unsigned __int8 *)*a1;
        v133 = (unsigned __int8 *)a1[1];
        v134 = (char *)&v133[-*a1];
        v135 = __sz - (_QWORD)v134;
        if (__sz > (unint64_t)v134)
        {
          v136 = (unsigned __int8 *)a1[2];
          if (v136 - v133 >= v135)
          {
            bzero((void *)a1[1], __sz - (_QWORD)v134);
            a1[1] = (uint64_t)&v133[v135];
            v141 = a6;
            goto LABEL_354;
          }
          v496 = (unint64_t)&v133[-*a1];
          if ((__sz & 0x8000000000000000) != 0)
            goto LABEL_467;
          v137 = v136 - v132;
          v138 = 2 * v137;
          if (2 * v137 <= __sz)
            v138 = __sz;
          if (v137 >= 0x3FFFFFFFFFFFFFFFLL)
            v139 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v139 = v138;
          v490 = (char *)operator new(v139);
          v487 = &v490[v496];
          bzero(&v490[v496], v135);
          v140 = v139;
          if (v133 == v132)
          {
            a1 = v508;
            v141 = a6;
            v290 = &v490[v496];
            v142 = v490;
            goto LABEL_352;
          }
          if (v496 < 8)
          {
            a1 = v508;
            v141 = a6;
            v143 = &v490[v496];
            v142 = v490;
            goto LABEL_349;
          }
          v143 = &v490[v496];
          v142 = v490;
          a1 = v508;
          v141 = a6;
          if ((unint64_t)(v132 - (unsigned __int8 *)v490) >= 0x20)
          {
            if (v496 < 0x20)
            {
              v292 = 0;
              goto LABEL_310;
            }
            v292 = v496 & 0xFFFFFFFFFFFFFFE0;
            v328 = &v490[v496 - 16];
            v329 = (char *)(v133 - 16);
            v330 = v496 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v331 = *(_OWORD *)v329;
              *((_OWORD *)v328 - 1) = *((_OWORD *)v329 - 1);
              *(_OWORD *)v328 = v331;
              v328 -= 32;
              v329 -= 32;
              v330 -= 32;
            }
            while (v330);
            if (v496 == v292)
              goto LABEL_351;
            if ((v496 & 0x18) != 0)
            {
LABEL_310:
              v143 = &v487[-(v496 & 0xFFFFFFFFFFFFFFF8)];
              v332 = &v490[&v133[-v292] - v132 - 8];
              v333 = (char *)&v133[-v292 - 8];
              v334 = v292 - (v496 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v335 = *(_QWORD *)v333;
                v333 -= 8;
                *(_QWORD *)v332 = v335;
                v332 -= 8;
                v334 += 8;
              }
              while (v334);
              v133 -= v496 & 0xFFFFFFFFFFFFFFF8;
              if (v496 == (v496 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_351;
              goto LABEL_349;
            }
            v143 = &v487[-v292];
            v133 -= v292;
          }
LABEL_349:
          v368 = v143 - 1;
          do
          {
            v369 = *--v133;
            *v368-- = v369;
          }
          while (v133 != v132);
LABEL_351:
          v133 = v132;
          v290 = v142;
LABEL_352:
          *a1 = (uint64_t)v290;
          a1[1] = (uint64_t)&v142[__sz];
          a1[2] = (uint64_t)&v142[v140];
          if (v133)
            operator delete(v133);
          goto LABEL_354;
        }
        v141 = a6;
        if (__sz < (unint64_t)v134)
          a1[1] = (uint64_t)&v132[__sz];
LABEL_354:
        v370 = (int64x2_t *)*a1;
        result = mgcl::muid::decompress((mgcl::muid *)&v509[v511 + 1 + v30], (const char *)v35, 0, 0, *a1, (unint64_t *)8, v141);
        if ((_DWORD)result)
          return result;
        v371 = ~(-1 << v21);
        v16 = a6;
        if (a6 >= 4)
        {
          a1 = v508;
          a2 = v509;
          if (&v370->i8[__sz] <= (__int8 *)a7 || v370 >= (int64x2_t *)v499)
          {
            v373 = vdupq_n_s64(v26);
            v374 = (uint64x2_t)vdupq_n_s64(v21);
            v375 = (int8x16_t)vdupq_n_s64(v371);
            v376 = vdup_n_s32(v21 > 0x3F);
            v377 = v370 + 1;
            v378 = a6 & 0xFFFFFFFFFFFFFFFCLL;
            v379 = a7 + 1;
            do
            {
              v380 = (int8x16_t)vaddq_s64(v377[-1], v373);
              v381 = (int8x16_t)vaddq_s64(*v377, v373);
              v382.i64[0] = v376.u32[0];
              v382.i64[1] = v376.u32[1];
              v383 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v382, 0x3FuLL));
              v384 = vbslq_s8(v383, v381, vorrq_s8((int8x16_t)vshlq_u64(*v379, v374), vandq_s8(v381, v375)));
              v379[-1] = (uint64x2_t)vbslq_s8(v383, v380, vorrq_s8((int8x16_t)vshlq_u64(v379[-1], v374), vandq_s8(v380, v375)));
              *v379 = (uint64x2_t)v384;
              v377 += 2;
              v379 += 2;
              v378 -= 4;
            }
            while (v378);
            v372 = a6 & 0xFFFFFFFFFFFFFFFCLL;
            if (v500 == a6)
              goto LABEL_8;
          }
          else
          {
            v372 = 0;
          }
        }
        else
        {
          v372 = 0;
          a1 = v508;
          a2 = v509;
        }
        v385 = a6 - v372;
        v386 = v372;
        v387 = &a7->i8[8 * v372];
        v388 = &v370->i64[v386];
        do
        {
          v389 = *v388++;
          v390 = v389 + v26;
          if (v21 <= 0x3F)
            v390 = (*(_QWORD *)v387 << v21) | v390 & v371;
          *(_QWORD *)v387 = v390;
          v387 += 8;
          --v385;
        }
        while (v385);
LABEL_8:
        v18 = v511 + v35 + v30 + 1;
        goto LABEL_9;
      case 3:
        v103 = (unsigned __int8 *)*a1;
        v102 = (unsigned __int8 *)a1[1];
        if (v102 != (unsigned __int8 *)*a1)
        {
          a1[1] = (uint64_t)v103;
          v102 = v103;
        }
        if (a1[2] - (uint64_t)v103 >= __sz)
          goto LABEL_85;
        if ((__sz & 0x8000000000000000) != 0)
          goto LABEL_467;
        v104 = operator new(__sz);
        v105 = v102 - v103;
        v106 = &v104[v102 - v103];
        v107 = v106;
        a1 = v508;
        a2 = v509;
        v16 = a6;
        if (v102 == v103)
          goto LABEL_83;
        v107 = v104;
        if (v105 < 8 || (unint64_t)(v103 - v104) < 0x20)
        {
          v108 = v102;
          v109 = &v104[v102 - v103];
          goto LABEL_81;
        }
        if (v105 >= 0x20)
        {
          v291 = v105 & 0xFFFFFFFFFFFFFFE0;
          v309 = &v104[v105 - 16];
          v310 = v102 - 16;
          v311 = v105 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v312 = *(_OWORD *)v310;
            *(v309 - 1) = *((_OWORD *)v310 - 1);
            *v309 = v312;
            v309 -= 2;
            v310 -= 32;
            v311 -= 32;
          }
          while (v311);
          if (v105 == v291)
            goto LABEL_83;
          if ((v105 & 0x18) == 0)
          {
            v109 = &v106[-v291];
            v108 = &v102[-v291];
LABEL_81:
            v110 = v109 - 1;
            do
            {
              v111 = *--v108;
              *v110-- = v111;
            }
            while (v108 != v103);
            goto LABEL_83;
          }
        }
        else
        {
          v291 = 0;
        }
        v108 = &v102[-(v105 & 0xFFFFFFFFFFFFFFF8)];
        v109 = &v106[-(v105 & 0xFFFFFFFFFFFFFFF8)];
        v313 = &v104[&v102[-v291] - v103 - 8];
        v314 = &v102[-v291 - 8];
        v315 = v291 - (v105 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v316 = *(_QWORD *)v314;
          v314 -= 8;
          *v313-- = v316;
          v315 += 8;
        }
        while (v315);
        if (v105 != (v105 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_81;
LABEL_83:
        *v508 = (uint64_t)v107;
        v508[1] = (uint64_t)v106;
        v508[2] = (uint64_t)&v104[__sz];
        if (v103)
          operator delete(v103);
LABEL_85:
        v112 = 0;
        v113 = v511 + v30 + 1;
        v19 = v505;
        v20 = v510;
        do
        {
          v114 = 0;
          v115 = 0;
          v116 = 0;
          v117 = v113;
          v118 = &a2[v113];
          do
          {
            v119 = (char)v118[v115];
            v116 |= (unint64_t)(v118[v115] & 0x7F) << v114;
            v120 = v115 + 1;
            if (v115 > 8)
              break;
            v114 += 7;
            ++v115;
          }
          while (v119 < 0);
          v121 = v116 + v26;
          if (v21 <= 0x3F)
            v121 = (a7->i64[v112] << v21) | v121 & ~(-1 << v21);
          v113 = v117 + v120;
          a7->i64[v112++] = v121;
        }
        while (v112 != v16);
        v18 = v117 + v120;
        goto LABEL_10;
      case 4:
        v122 = (uint64_t *)operator new();
        v123 = v122;
        v124 = v502 - v511 - v30;
        a2 = v509;
        *v122 = (uint64_t)&v509[v511 + 1 + v30];
        v122[1] = v124;
        v122[2] = 0;
        v125 = 8 * v124;
        if (!v125)
        {
          v130 = 0;
          v16 = a6;
          goto LABEL_97;
        }
        v126 = (char *)*v122;
        v127 = *(unsigned __int8 *)*v122;
        v122[2] = 1;
        v128 = (v127 >> 6) & 2 | (*v126 >> 6) & 1;
        v122[2] = 2;
        v129 = (*v126 >> 5) & 1 | (2 * v128);
        v122[2] = 3;
        v16 = a6;
        if (v129 != 2)
        {
          if (v129 != 1)
          {
            v130 = 3;
            if (v129)
              goto LABEL_466;
            if (v125 >= 8)
            {
              v198 = (_BYTE *)*v122;
              v199 = *(unsigned __int8 *)*v122 >> 4;
              v122[2] = 4;
              v200 = (*v198 >> 3) & 1 | (2 * (v199 & 1));
              v122[2] = 5;
              v201 = *v198 >> 2;
              v122[2] = 6;
              v202 = (4 * v200) | (2 * (v201 & 1)) | (*v198 >> 1) & 1;
              v122[2] = 7;
              LODWORD(v198) = *v198 & 1;
              v122[2] = 8;
              v131 = (v198 | (2 * v202)) + 1;
              v130 = 8;
            }
            else
            {
LABEL_97:
              v131 = 1;
            }
            a1 = v508;
            for (i = 0; i != v16; ++i)
            {
              if (v130 + v131 <= v125)
              {
                v204 = 0;
                v205 = *v122;
                v206 = v131;
                do
                {
                  v204 = (*(unsigned __int8 *)(v205 + (v130 >> 3)) >> (~(_BYTE)v130 & 7)) & 1 | (2 * v204);
                  v122[2] = ++v130;
                  --v206;
                }
                while (v206);
              }
              else
              {
                v204 = 0;
              }
              v207 = v204 + v26;
              if (v21 <= 0x3F)
                v207 = (a7->i64[i] << v21) | v207 & ~(-1 << v21);
              a7->i64[i] = v207;
            }
            goto LABEL_250;
          }
          v220 = 0;
          v221 = *v126;
          v122[2] = 4;
          v222 = v221 & 0x10 | *v126 & 0xF;
          v122[2] = 5;
          v223 = *v126;
          v122[2] = 6;
          v224 = v222 & 0xFFFFFFF8 | v223 & 4 | *v126 & 3;
          v122[2] = 7;
          v225 = v224 & 0xFFFFFFFE | *v126 & 1;
          v122[2] = 8;
          v130 = 8;
          a1 = v508;
          while (2)
          {
            if (v130 + 1 <= v125)
            {
              v228 = 0;
              v226 = 8 * (v498 - v511 - v30) - v130;
              v229 = v37 - v130;
              while (1)
              {
                v230 = v130++;
                v231 = v126[v230 >> 3];
                v123[2] = v130;
                if (((v231 >> (~(_BYTE)v230 & 7)) & 1) == 0)
                  break;
                if (v229 == ++v228)
                {
                  v130 = v230 + 1;
                  v227 = 0;
                  if ((_DWORD)v225)
                    goto LABEL_206;
                  goto LABEL_210;
                }
              }
              v226 = v228;
              v130 = v230 + 1;
              v227 = 0;
              if (!(_DWORD)v225)
                goto LABEL_210;
            }
            else
            {
              v226 = 0;
              v227 = 0;
              if (!(_DWORD)v225)
                goto LABEL_210;
            }
LABEL_206:
            if (v130 + v225 <= v125)
            {
              v232 = 0;
              v233 = -v225;
              do
              {
                v227 = (v126[v130 >> 3] >> (~(_BYTE)v130 & 7)) & 1 | (2 * v232);
                v123[2] = ++v130;
                v232 = v227;
                v234 = __CFADD__(v233++, 1);
              }
              while (!v234);
            }
LABEL_210:
            v235 = v26 + (v227 | (v226 << v225));
            if (v21 <= 0x3F)
              v235 = (a7->i64[v220] << v21) | v235 & ~(-1 << v21);
            a7->i64[v220++] = v235;
            if (v220 == a6)
              goto LABEL_250;
            continue;
          }
        }
        v236 = *v126;
        v122[2] = 4;
        v237 = v236 & 0x10 | *v126 & 0xF;
        v122[2] = 5;
        v238 = *v126;
        v122[2] = 6;
        v239 = *v126;
        v122[2] = 7;
        v240 = v237 & 0xFFFFFFF8 | v238 & 4 | v239 & 2 | *v126 & 1;
        v122[2] = 8;
        LODWORD(v512) = v240;
        if (v125 >= 0xD)
        {
          v280 = v126[1];
          v122[2] = 9;
          v281 = (v280 >> 6) & 2 | (v126[1] >> 6) & 1;
          v122[2] = 10;
          v282 = v126[1];
          v122[2] = 11;
          v283 = (4 * v281) | (v282 >> 4) & 2 | (v126[1] >> 4) & 1;
          v122[2] = 12;
          v284 = (2 * v283) | (v126[1] >> 3) & 1;
          v122[2] = 13;
          DWORD1(v512) = v284;
          if (v125 >= 0x12)
          {
            v241 = v126[1] >> 2;
            v122[2] = 14;
            v242 = (v126[1] >> 1) & 1 | (2 * (v241 & 1));
            v122[2] = 15;
            LOBYTE(v241) = v126[1];
            v122[2] = 16;
            v243 = (4 * v242) | (2 * (v241 & 1)) | (v126[2] >> 7) & 1;
            v122[2] = 17;
            v244 = (v126[2] >> 6) & 1 | (2 * v243);
            v122[2] = 18;
            goto LABEL_245;
          }
        }
        else
        {
          DWORD1(v512) = 0;
        }
        v244 = 0;
LABEL_245:
        DWORD2(v512) = v244;
        v285 = (uint64_t *)a7;
        v286 = a6;
        do
        {
          v287 = v26 + geo::ReadBitstream::unpackRice2(v123, &v512);
          if (v21 <= 0x3F)
            v287 = (*v285 << v21) | v287 & ~(-1 << v21);
          *v285++ = v287;
          --v286;
        }
        while (v286);
        v130 = v123[2];
        a1 = v508;
        v16 = a6;
LABEL_250:
        v288 = v130 >> 3;
        if ((v130 & 7) != 0)
          ++v288;
        v289 = v123;
        v18 = v511 + v30 + v288 + 1;
        MEMORY[0x18D76437C](v289, 0x1050C40E4AAA758);
LABEL_9:
        v19 = v505;
        v20 = v510;
LABEL_10:
        v17 = v20 + 1;
        if (v17 == v19)
          return 0;
        break;
      default:
        return 3;
    }
  }
  v66 = 0;
  v67 = &a2[v23];
  v68 = 1;
  v69 = v506 - 8 * v18;
  do
  {
    v70 = v68;
    v71 = v69;
    v72 = (char)v67[v25];
    v66 |= (unint64_t)(v67[v25] & 0x7F) << v24;
    if (v25 > 8)
      break;
    ++v25;
    v24 += 7;
    ++v68;
    v69 -= 8;
  }
  while (v72 < 0);
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = &a2[v511];
  do
  {
    v77 = v71;
    v78 = (char)v76[v70 + 1];
    v75 |= (unint64_t)(v76[++v70] & 0x7F) << v73;
    if (v74 > 8)
      break;
    ++v74;
    v73 += 7;
    v71 -= 8;
  }
  while (v78 < 0);
  switch(v22)
  {
    case 1:
      if (!a1[3])
      {
        v79 = (_QWORD *)operator new();
        v80 = (_QWORD *)operator new();
        v81 = operator new();
        a1 = v508;
        a2 = v509;
        *(_QWORD *)(v81 + 20) = 0;
        *(_QWORD *)(v81 + 12) = 0;
        *(_DWORD *)(v81 + 36) = 0;
        *(_QWORD *)(v81 + 28) = 0;
        *(_WORD *)(v81 + 40) = 257;
        *(_QWORD *)(v81 + 44) = 0;
        *(_QWORD *)(v81 + 60) = 0;
        *(_QWORD *)(v81 + 52) = 0;
        *(_DWORD *)(v81 + 67) = 0;
        *(_DWORD *)(v81 + 72) = 0;
        *(_WORD *)(v81 + 76) = 257;
        *(_QWORD *)(v81 + 136) = 0;
        *(_OWORD *)(v81 + 80) = 0u;
        *(_OWORD *)(v81 + 96) = 0u;
        *(_OWORD *)(v81 + 112) = 0u;
        *v80 = v81;
        *v79 = v80;
        v82 = (_QWORD **)v508[3];
        v508[3] = (uint64_t)v79;
        if (v82)
        {
          v83 = *v82;
          *v82 = 0;
          if (v83)
          {
            v84 = (_QWORD *)*v83;
            *v83 = 0;
            if (v84)
            {
              v85 = (void *)v84[13];
              if (v85)
              {
                v84[14] = v85;
                operator delete(v85);
              }
              v86 = (void *)v84[10];
              if (v86)
              {
                v84[11] = v86;
                operator delete(v86);
              }
              MEMORY[0x18D76437C](v84, 0x1070C40ADA6D0DELL);
            }
            MEMORY[0x18D76437C](v83, 0x20C4093837F09);
          }
          MEMORY[0x18D76437C](v82, 0x20C4093837F09);
        }
      }
      v87 = v75 - 2;
      if (v75 < 2)
        return 3;
      v88 = &a2[v511 + v70];
      v89 = v88[1];
      v90 = v88[2];
      v91 = *a1;
      v92 = (char *)a1[1];
      v93 = (unint64_t)&v92[-*a1];
      v94 = a6 - v93;
      if (a6 > v93)
      {
        v95 = (unsigned __int8 *)a1[2];
        if (v95 - (unsigned __int8 *)v92 >= v94)
        {
          v245 = (unsigned __int8 *)&v92[v94];
          v246 = v90;
          v247 = v89;
          bzero((void *)a1[1], a6 - v93);
          v87 = v75 - 2;
          v89 = v247;
          v90 = v246;
          a1[1] = (uint64_t)v245;
          LODWORD(v94) = a6;
          goto LABEL_387;
        }
        v489 = v89;
        v495 = v90;
        if ((a6 & 0x8000000000000000) != 0)
          goto LABEL_468;
        v96 = (unint64_t)&v95[-v91];
        v97 = 2 * v96;
        if (2 * v96 <= a6)
          v97 = a6;
        if (v96 >= 0x3FFFFFFFFFFFFFFFLL)
          v98 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v98 = v97;
        v484 = (char *)operator new(v98);
        v481 = &v484[v93];
        bzero(&v484[v93], v94);
        v99 = v98;
        if (v92 == (char *)v91)
        {
          a1 = v508;
          v94 = a6;
          v90 = v495;
          v89 = v489;
          v303 = &v484[v93];
          v100 = v484;
          goto LABEL_385;
        }
        if (v93 < 8)
        {
          a1 = v508;
          v94 = a6;
          v90 = v495;
          v89 = v489;
          v101 = &v484[v93];
          v100 = v484;
          goto LABEL_382;
        }
        v101 = &v484[v93];
        v100 = v484;
        a1 = v508;
        v94 = a6;
        v90 = v495;
        v89 = v489;
        if ((unint64_t)(v91 - (_QWORD)v484) >= 0x20)
        {
          if (v93 < 0x20)
          {
            v307 = 0;
            goto LABEL_326;
          }
          v307 = v93 & 0xFFFFFFFFFFFFFFE0;
          v344 = &v484[v93 - 16];
          v345 = v92 - 16;
          v346 = v93 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v347 = *(_OWORD *)v345;
            *((_OWORD *)v344 - 1) = *((_OWORD *)v345 - 1);
            *(_OWORD *)v344 = v347;
            v344 -= 32;
            v345 -= 32;
            v346 -= 32;
          }
          while (v346);
          if (v93 == v307)
            goto LABEL_384;
          if ((v93 & 0x18) != 0)
          {
LABEL_326:
            v101 = &v481[-(v93 & 0xFFFFFFFFFFFFFFF8)];
            v348 = &v92[-v307 - v91 - 8 + (_QWORD)v484];
            v349 = &v92[-v307 - 8];
            v350 = v307 - (v93 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v351 = *(_QWORD *)v349;
              v349 -= 8;
              *(_QWORD *)v348 = v351;
              v348 -= 8;
              v350 += 8;
            }
            while (v350);
            v92 -= v93 & 0xFFFFFFFFFFFFFFF8;
            if (v93 == (v93 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_384;
            goto LABEL_382;
          }
          v101 = &v481[-v307];
          v92 -= v307;
        }
LABEL_382:
        v398 = v101 - 1;
        do
        {
          v399 = *--v92;
          *v398-- = v399;
        }
        while (v92 != (char *)v91);
LABEL_384:
        v92 = (char *)v91;
        v303 = v100;
LABEL_385:
        v87 = v75 - 2;
        *a1 = (uint64_t)v303;
        a1[1] = (uint64_t)&v100[v94];
        a1[2] = (uint64_t)&v100[v99];
        if (v92)
        {
          operator delete(v92);
          v87 = v75 - 2;
          v89 = v489;
          v90 = v495;
        }
        goto LABEL_387;
      }
      LODWORD(v94) = a6;
      if (a6 < v93)
        a1[1] = v91 + a6;
LABEL_387:
      v400 = (unsigned __int8 *)*a1;
      v401 = *(uint64_t **)a1[3];
      LODWORD(v512) = 0;
      BYTE4(v512) = a4;
      BYTE5(v512) = a5;
      WORD3(v512) = 0;
      v513 = 1;
      v514 = 0;
      v515 = 1;
      v516 = 0;
      if (v89 >= 4)
        v402 = 1;
      else
        v402 = v89;
      v517 = v402;
      if (v90 == 2)
        v403 = 4;
      else
        v403 = 1;
      if (!v90)
        v403 = 0;
      v518 = v403;
      *((_QWORD *)&v512 + 1) = __PAIR64__(v94, v87);
      v404 = *v401;
      v519 = (uint64_t)&v509[v511 + 3 + v70];
      v520 = v87;
      result = gcl::polyline::DecoderImpl::decompressAttributes(v404, (uint64_t)&v519, (uint64_t)v400, 0, &v512);
      if (!(_DWORD)result)
      {
        v405 = (unint64_t *)a7;
        a2 = v509;
        v16 = a6;
        v406 = a6;
        do
        {
          v407 = *v400++;
          if (v66 + v407)
          {
            if (*v405)
              v408 = -(uint64_t)*v405;
            else
              v408 = 0x8000000000000000;
            *v405 = v408;
          }
          ++v405;
          --v406;
        }
        while (v406);
LABEL_403:
        v18 = v511 + v75 + v70 + 1;
        a1 = v508;
LABEL_404:
        v19 = v505;
        v20 = v510;
        goto LABEL_10;
      }
LABEL_463:
      if ((result - 1) >= 4)
        return 5;
      return result;
    case 2:
      v174 = *a1;
      v175 = (char *)a1[1];
      v176 = (unint64_t)&v175[-*a1];
      v177 = a1;
      v178 = __sz - v176;
      if (__sz <= v176)
      {
        v184 = v177;
        if (__sz < v176)
          v177[1] = v174 + __sz;
LABEL_373:
        v393 = (uint64_t *)*v184;
        result = mgcl::muid::decompress((mgcl::muid *)&v509[v511 + 1 + v70], (const char *)v75, 0, 0, *v184, (unint64_t *)8, a6);
        if ((_DWORD)result)
          return result;
        v394 = (unint64_t *)a7;
        a2 = v509;
        v16 = a6;
        v395 = a6;
        do
        {
          v396 = *v393++;
          if (v396 != -v66)
          {
            if (*v394)
              v397 = -(uint64_t)*v394;
            else
              v397 = 0x8000000000000000;
            *v394 = v397;
          }
          ++v394;
          --v395;
        }
        while (v395);
        goto LABEL_403;
      }
      v179 = v177[2];
      if (v179 - (uint64_t)v175 >= v178)
      {
        bzero(v175, __sz - v176);
        v177[1] = (uint64_t)&v175[v178];
        v184 = v177;
        goto LABEL_373;
      }
      if ((__sz & 0x8000000000000000) != 0)
LABEL_468:
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v180 = v179 - v174;
      v181 = 2 * v180;
      if (2 * v180 <= __sz)
        v181 = __sz;
      if (v180 >= 0x3FFFFFFFFFFFFFFFLL)
        v182 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v182 = v181;
      v183 = v182;
      v497 = (char *)operator new(v182);
      v491 = &v497[v176];
      bzero(&v497[v176], v178);
      if (v175 == (char *)v174)
      {
        v184 = v508;
        v185 = v497;
        v302 = &v497[v176];
        goto LABEL_371;
      }
      if (v176 < 8)
      {
        v184 = v508;
        v185 = v497;
        v186 = &v497[v176];
        goto LABEL_368;
      }
      v185 = v497;
      v184 = v508;
      v186 = &v497[v176];
      if ((unint64_t)(v174 - (_QWORD)v497) < 0x20)
        goto LABEL_368;
      if (v176 >= 0x20)
      {
        v305 = v176 & 0xFFFFFFFFFFFFFFE0;
        v336 = &v497[v176 - 16];
        v337 = v175 - 16;
        v338 = v176 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v339 = *(_OWORD *)v337;
          *((_OWORD *)v336 - 1) = *((_OWORD *)v337 - 1);
          *(_OWORD *)v336 = v339;
          v336 -= 32;
          v337 -= 32;
          v338 -= 32;
        }
        while (v338);
        if (v176 == v305)
          goto LABEL_370;
        if ((v176 & 0x18) == 0)
        {
          v186 = &v491[-v305];
          v175 -= v305;
LABEL_368:
          v391 = v186 - 1;
          do
          {
            v392 = *--v175;
            *v391-- = v392;
          }
          while (v175 != (char *)v174);
LABEL_370:
          v175 = (char *)v174;
          v302 = v185;
LABEL_371:
          *v184 = (uint64_t)v302;
          v184[1] = (uint64_t)&v185[__sz];
          v184[2] = (uint64_t)&v185[v183];
          if (v175)
            operator delete(v175);
          goto LABEL_373;
        }
      }
      else
      {
        v305 = 0;
      }
      v186 = &v491[-(v176 & 0xFFFFFFFFFFFFFFF8)];
      v340 = &v175[-v305 - v174 - 8 + (_QWORD)v497];
      v341 = &v175[-v305 - 8];
      v342 = v305 - (v176 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v343 = *(_QWORD *)v341;
        v341 -= 8;
        *(_QWORD *)v340 = v343;
        v340 -= 8;
        v342 += 8;
      }
      while (v342);
      v175 -= v176 & 0xFFFFFFFFFFFFFFF8;
      if (v176 == (v176 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_370;
      goto LABEL_368;
    case 3:
      v145 = (unsigned __int8 *)*a1;
      v144 = (unsigned __int8 *)a1[1];
      if (v144 != (unsigned __int8 *)*a1)
      {
        a1[1] = (uint64_t)v145;
        v144 = v145;
      }
      if (a1[2] - (uint64_t)v145 >= __sz)
        goto LABEL_122;
      if ((__sz & 0x8000000000000000) != 0)
        goto LABEL_468;
      v146 = operator new(__sz);
      v147 = v144 - v145;
      v148 = &v146[v144 - v145];
      v149 = v148;
      a1 = v508;
      a2 = v509;
      v16 = a6;
      if (v144 == v145)
        goto LABEL_120;
      v149 = v146;
      if (v147 < 8 || (unint64_t)(v145 - v146) < 0x20)
      {
        v150 = v144;
        v151 = &v146[v144 - v145];
        goto LABEL_118;
      }
      if (v147 >= 0x20)
      {
        v304 = v147 & 0xFFFFFFFFFFFFFFE0;
        v320 = &v146[v147 - 16];
        v321 = v144 - 16;
        v322 = v147 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v323 = *(_OWORD *)v321;
          *(v320 - 1) = *((_OWORD *)v321 - 1);
          *v320 = v323;
          v320 -= 2;
          v321 -= 32;
          v322 -= 32;
        }
        while (v322);
        if (v147 == v304)
        {
LABEL_120:
          *v508 = (uint64_t)v149;
          v508[1] = (uint64_t)v148;
          v508[2] = (uint64_t)&v146[__sz];
          if (v145)
            operator delete(v145);
LABEL_122:
          v154 = 0;
          v155 = v511 + v70 + 1;
          v19 = v505;
          v20 = v510;
          do
          {
            v156 = 0;
            v157 = 0;
            v158 = 0;
            v159 = v155;
            v160 = &a2[v155];
            do
            {
              v161 = (char)v160[v157];
              v158 |= (unint64_t)(v160[v157] & 0x7F) << v156;
              v162 = v157 + 1;
              if (v157 > 8)
                break;
              v156 += 7;
              ++v157;
            }
            while (v161 < 0);
            if (v158 != -v66)
            {
              v163 = a7->i64[v154];
              if (v163)
                v164 = -v163;
              else
                v164 = 0x8000000000000000;
              a7->i64[v154] = v164;
            }
            v155 = v159 + v162;
            ++v154;
          }
          while (v154 != v16);
          v18 = v159 + v162;
          goto LABEL_10;
        }
        if ((v147 & 0x18) == 0)
        {
          v151 = &v148[-v304];
          v150 = &v144[-v304];
LABEL_118:
          v152 = v151 - 1;
          do
          {
            v153 = *--v150;
            *v152-- = v153;
          }
          while (v150 != v145);
          goto LABEL_120;
        }
      }
      else
      {
        v304 = 0;
      }
      v150 = &v144[-(v147 & 0xFFFFFFFFFFFFFFF8)];
      v151 = &v148[-(v147 & 0xFFFFFFFFFFFFFFF8)];
      v324 = &v146[&v144[-v304] - v145 - 8];
      v325 = &v144[-v304 - 8];
      v326 = v304 - (v147 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v327 = *(_QWORD *)v325;
        v325 -= 8;
        *v324-- = v327;
        v326 += 8;
      }
      while (v326);
      if (v147 != (v147 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_118;
      goto LABEL_120;
    case 4:
      v165 = (uint64_t *)operator new();
      v123 = v165;
      v166 = v502 - v511 - v70;
      a2 = v509;
      *v165 = (uint64_t)&v509[v511 + 1 + v70];
      v165[1] = v166;
      v165[2] = 0;
      v167 = 8 * v166;
      if (!v167)
      {
        v172 = 0;
        v16 = a6;
        goto LABEL_137;
      }
      v168 = (char *)*v165;
      v169 = *(unsigned __int8 *)*v165;
      v165[2] = 1;
      v170 = (v169 >> 6) & 2 | (*v168 >> 6) & 1;
      v165[2] = 2;
      v171 = (*v168 >> 5) & 1 | (2 * v170);
      v165[2] = 3;
      v16 = a6;
      if (v171 != 2)
      {
        if (v171 != 1)
        {
          v172 = 3;
          if (v171)
          {
LABEL_466:
            MEMORY[0x18D76437C](v123, 0x1050C40E4AAA758);
            return 3;
          }
          if (v167 >= 8)
          {
            v209 = (_BYTE *)*v165;
            v210 = *(unsigned __int8 *)*v165 >> 4;
            v165[2] = 4;
            v211 = (*v209 >> 3) & 1 | (2 * (v210 & 1));
            v165[2] = 5;
            v212 = *v209 >> 2;
            v165[2] = 6;
            v213 = (4 * v211) | (2 * (v212 & 1)) | (*v209 >> 1) & 1;
            v165[2] = 7;
            LODWORD(v209) = *v209 & 1;
            v165[2] = 8;
            v173 = (v209 | (2 * v213)) + 1;
            v172 = 8;
LABEL_184:
            a1 = v508;
            for (j = 0; j != v16; ++j)
            {
              if (v172 + v173 <= v167)
              {
                v215 = 0;
                v216 = *v165;
                v217 = v173;
                do
                {
                  v215 = (*(unsigned __int8 *)(v216 + (v172 >> 3)) >> (~(_BYTE)v172 & 7)) & 1 | (2 * v215);
                  v165[2] = ++v172;
                  --v217;
                }
                while (v217);
              }
              else
              {
                v215 = 0;
              }
              if (v215 != -v66)
              {
                v218 = a7->i64[j];
                if (v218)
                  v219 = -v218;
                else
                  v219 = 0x8000000000000000;
                a7->i64[j] = v219;
              }
            }
LABEL_269:
            v300 = v172 >> 3;
            if ((v172 & 7) != 0)
              ++v300;
            v301 = v123;
            v18 = v511 + v70 + v300 + 1;
            MEMORY[0x18D76437C](v301, 0x1050C40E4AAA758);
            goto LABEL_404;
          }
LABEL_137:
          v173 = 1;
          goto LABEL_184;
        }
        v248 = 0;
        v249 = *v168;
        v165[2] = 4;
        v250 = v249 & 0x10 | *v168 & 0xF;
        v165[2] = 5;
        v251 = *v168;
        v165[2] = 6;
        v252 = v250 & 0xFFFFFFF8 | v251 & 4 | *v168 & 3;
        v165[2] = 7;
        v253 = v252 & 0xFFFFFFFE | *v168 & 1;
        v165[2] = 8;
        v172 = 8;
        a1 = v508;
        while (v172 + 1 > v167)
        {
          v254 = 0;
          v255 = 0;
          if ((_DWORD)v253)
            goto LABEL_228;
LABEL_232:
          if (v66 + (v255 | (v254 << v253)))
          {
            v262 = a7->i64[v248];
            if (v262)
              v263 = -v262;
            else
              v263 = 0x8000000000000000;
            a7->i64[v248] = v263;
          }
          if (++v248 == a6)
            goto LABEL_269;
        }
        v256 = 0;
        v254 = 8 * (v498 - v511 - v70) - v172;
        v257 = v77 - v172;
        while (1)
        {
          v258 = v172++;
          v259 = v168[v258 >> 3];
          v123[2] = v172;
          if (((v259 >> (~(_BYTE)v258 & 7)) & 1) == 0)
            break;
          if (v257 == ++v256)
          {
            v172 = v258 + 1;
            v255 = 0;
            if ((_DWORD)v253)
              goto LABEL_228;
            goto LABEL_232;
          }
        }
        v254 = v256;
        v172 = v258 + 1;
        v255 = 0;
        if (!(_DWORD)v253)
          goto LABEL_232;
LABEL_228:
        if (v172 + v253 <= v167)
        {
          v260 = 0;
          v261 = -v253;
          do
          {
            v255 = (v168[v172 >> 3] >> (~(_BYTE)v172 & 7)) & 1 | (2 * v260);
            v123[2] = ++v172;
            v260 = v255;
            v234 = __CFADD__(v261++, 1);
          }
          while (!v234);
        }
        goto LABEL_232;
      }
      v264 = *v168;
      v165[2] = 4;
      v265 = v264 & 0x10 | *v168 & 0xF;
      v165[2] = 5;
      v266 = *v168;
      v165[2] = 6;
      v267 = *v168;
      v165[2] = 7;
      v268 = v265 & 0xFFFFFFF8 | v266 & 4 | v267 & 2 | *v168 & 1;
      v165[2] = 8;
      LODWORD(v512) = v268;
      if (v167 >= 0xD)
      {
        v293 = v168[1];
        v165[2] = 9;
        v294 = (v293 >> 6) & 2 | (v168[1] >> 6) & 1;
        v165[2] = 10;
        v295 = v168[1];
        v165[2] = 11;
        v296 = (4 * v294) | (v295 >> 4) & 2 | (v168[1] >> 4) & 1;
        v165[2] = 12;
        v297 = (2 * v296) | (v168[1] >> 3) & 1;
        v165[2] = 13;
        a1 = v508;
        DWORD1(v512) = v297;
        if (v167 >= 0x12)
        {
          v269 = v168[1] >> 2;
          v165[2] = 14;
          v270 = (v168[1] >> 1) & 1 | (2 * (v269 & 1));
          v165[2] = 15;
          LOBYTE(v269) = v168[1];
          v165[2] = 16;
          v271 = (4 * v270) | (2 * (v269 & 1)) | (v168[2] >> 7) & 1;
          v165[2] = 17;
          v272 = (v168[2] >> 6) & 1 | (2 * v271);
          v165[2] = 18;
          goto LABEL_261;
        }
      }
      else
      {
        a1 = v508;
        DWORD1(v512) = 0;
      }
      v272 = 0;
LABEL_261:
      DWORD2(v512) = v272;
      v298 = (unint64_t *)a7;
      do
      {
        if (v66 + geo::ReadBitstream::unpackRice2(v123, &v512))
        {
          if (*v298)
            v299 = -(uint64_t)*v298;
          else
            v299 = 0x8000000000000000;
          *v298 = v299;
        }
        ++v298;
        --v16;
      }
      while (v16);
      v172 = v123[2];
      v16 = a6;
      goto LABEL_269;
    default:
      return 3;
  }
}

void sub_188735130(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D76437C](v2, 0x20C4093837F09);
  MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t gcl::polyline::DecoderImpl::decompressAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unsigned __int8 *AttributeInfo;
  uint64_t result;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  AttributeInfo = *(unsigned __int8 **)a2;
  if (!*(_QWORD *)a2)
    return 5;
  result = 5;
  if (a3)
  {
    v10 = *(_QWORD *)(a2 + 8);
    if ((v10 & 0x8000000000000000) == 0)
    {
      if (a5)
      {
        v12 = *a5;
        v13 = a5[1];
        *(_WORD *)(a1 + 76) = *((_WORD *)a5 + 16);
        *(_OWORD *)(a1 + 60) = v13;
        *(_OWORD *)(a1 + 44) = v12;
      }
      else
      {
        AttributeInfo = (unsigned __int8 *)gcl::polyline::DecoderImpl::getAttributeInfo((uint64_t)AttributeInfo, v10, a1 + 44);
        result = 3;
        if (!AttributeInfo || v10 < 0)
          return result;
      }
      v14 = *(unsigned int *)(a1 + 52);
      v15 = *(unsigned __int8 **)a2;
      v16 = *(_QWORD *)a2 + v14;
      if (*(_QWORD *)a2)
        v17 = *(_QWORD *)a2 + v14;
      else
        v17 = *(unsigned int *)(a1 + 52);
      result = 3;
      v18 = *(_QWORD *)(a2 + 8) - v14;
      *(_QWORD *)a2 = v17;
      *(_QWORD *)(a2 + 8) = v18;
      if (v18 >= 0
        && v15
        && &AttributeInfo[v10] >= v15
        && (unint64_t)AttributeInfo <= v16
        && (uint64_t)(v16 - (_QWORD)AttributeInfo) >= 0)
      {
        if (*(_BYTE *)(a1 + 48) || *(unsigned __int8 *)(a1 + 49) - 1 > 1)
        {
          return 4;
        }
        else if (*(unsigned __int8 *)(a1 + 77) - 1 >= 4
               && (*(unsigned __int8 *)(a1 + 76) | 2) != 2
               && *(_BYTE *)(a1 + 70) == 1
               && (a4 || !*(_BYTE *)(a1 + 69)))
        {
          return gcl::polyline::DecoderImpl::decodeAttributes(a1, AttributeInfo, v16 - (_QWORD)AttributeInfo, a3, a4);
        }
      }
    }
  }
  return result;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v4 = (a2 - 1) >> 6;
    v5 = operator new(8 * (v4 + 1));
    v6 = v5;
    a1[1] = a2;
    a1[2] = v4 + 1;
    *a1 = v5;
    if (a2 >= 0x41)
      v7 = (a2 - 1) >> 6;
    else
      v7 = 0;
    v5[v7] = 0;
    if (a2 >= 0x40)
      bzero(v5, 8 * (a2 >> 6));
    if ((a2 & 0x3F) != 0)
      v6[a2 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F));
  }
  return a1;
}

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        v10 = *a1 + 8 * (v4 >> 6);
        v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      v6 = v5 - 1;
    }
    v7 = v6 >> 6;
    if (v5 >= 0x41)
      v8 = v7;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

void mgcl::iarray::Decoder::~Decoder(mgcl::iarray::Decoder *this)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  void *v4;

  v1 = *(_QWORD **)this;
  *(_QWORD *)this = 0;
  if (v1)
  {
    v2 = (_QWORD *)*v1;
    *v1 = 0;
    if (v2)
    {
      v3 = (void *)v2[13];
      if (v3)
      {
        v2[14] = v3;
        operator delete(v3);
      }
      v4 = (void *)v2[10];
      if (v4)
      {
        v2[11] = v4;
        operator delete(v4);
      }
      MEMORY[0x18D76437C](v2, 0x1070C40ADA6D0DELL);
    }
    MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  }
}

void sub_188735630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id GEOGetNetworkStatusLog()
{
  if (qword_1ECDBC090 != -1)
    dispatch_once(&qword_1ECDBC090, &__block_literal_global_53);
  return (id)qword_1ECDBC088;
}

uint64_t GEOPDCategorizedPhotosFilterReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDCategorizedPhotosFilterReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDCategorizedPhotosFilterReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDCategorizedPhotosFilterReadAllFrom_initialTag;
  Specified = GEOPDCategorizedPhotosFilterReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_188736174(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDCategorizedPhotosFilterReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  id v36;
  void *v37;
  int v38;
  uint64_t v39;
  void *v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  int v74;
  int v75;
  void *v76;
  int v78;
  int *v79;
  char v80;
  char v81;
  char v82;
  char v83;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 80) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 80) >> 6) & 1)
      + ((*(unsigned __int8 *)(a1 + 80) >> 4) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 != 0;
        v15 = v14 | v10;
        v80 = v14 & ~(_BYTE)v10 | v7;
        v82 = v14 | v10 | v80;
        if ((((v14 | v10) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v83 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v81 = v14 | v10;
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_110;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_24;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_24:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_26:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_110:
      v78 = 1;
LABEL_111:
      v79 = &OBJC_IVAR___GEOXPCReply__methodName;
      goto LABEL_112;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if ((v83 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (v31 && (*(_BYTE *)(a1 + 80) & 0x20) == 0)
        {
          if (PBReaderPlaceMark())
          {
            -[GEOPDCategorizedPhotosFilter _reservePhotoSizeFilters:](a1, 1uLL);
            if (GEOPDPhotoSizeFilterValueReadAllFrom(*(_QWORD *)(a1 + 24) + 12 * *(_QWORD *)(a1 + 32), v3))
            {
              PBReaderRecallMark();
              ++*(_QWORD *)(a1 + 32);
              goto LABEL_108;
            }
          }
          goto LABEL_131;
        }
        v68 = PBReaderSkipValueWithTag();
        v15 = v81;
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if ((v68 & 1) != 0)
          goto LABEL_109;
        goto LABEL_130;
      case 2:
        if (!v31)
          goto LABEL_86;
        if ((*(_BYTE *)(a1 + 80) & 0x40) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = *(void **)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v39;

          --v9;
LABEL_108:
          v15 = v81;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_109;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v9 += *(unsigned __int8 *)(a1 + 80) << 25 >> 31;
          goto LABEL_108;
        }
LABEL_131:
        v78 = 0;
        v79 = &OBJC_IVAR___GEOXPCReply__methodName;
        v15 = v81;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_112:
        if ((v80 & 1) != 0)
LABEL_113:
          *(_BYTE *)(a1 + v79[687]) |= 0x10u;
        if (v15 & 1 | ((v78 & 1) == 0))
        {
          *(_BYTE *)(a1 + v79[687]) |= 0x20u;
          *(_BYTE *)(a1 + v79[687]) |= 0x40u;
          goto LABEL_124;
        }
        if (v16)
        {
          while (1)
          {
            v75 = *v16++;
            v74 = v75;
            if (v75 == 1)
              break;
            if (v74 == 2)
            {
              v73 = 64;
LABEL_120:
              *(_BYTE *)(a1 + v79[687]) |= v73;
            }
            else if (!v74)
            {
              goto LABEL_124;
            }
          }
          v73 = 32;
          goto LABEL_120;
        }
LABEL_124:
        if (v78)
        {
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) == 0)
            return v3;
LABEL_128:
          v76 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
            goto LABEL_128;
        }
        return v3;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_86;
        v41 = 0;
        v42 = 0;
        v43 = 0;
        *(_BYTE *)(a1 + 80) |= 2u;
        while (2)
        {
          v44 = *v17;
          v45 = *(_QWORD *)(v3 + v44);
          v46 = v45 + 1;
          if (v45 == -1 || v46 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v45);
            *(_QWORD *)(v3 + v44) = v46;
            v43 |= (unint64_t)(v47 & 0x7F) << v41;
            if (v47 < 0)
            {
              v41 += 7;
              v27 = v42++ >= 9;
              if (v27)
              {
                LODWORD(v43) = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v43) = 0;
LABEL_91:
        v70 = 72;
        goto LABEL_96;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_86;
        v48 = 0;
        v49 = 0;
        v43 = 0;
        *(_BYTE *)(a1 + 80) |= 1u;
        while (2)
        {
          v50 = *v17;
          v51 = *(_QWORD *)(v3 + v50);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v51);
            *(_QWORD *)(v3 + v50) = v52;
            v43 |= (unint64_t)(v53 & 0x7F) << v48;
            if (v53 < 0)
            {
              v48 += 7;
              v27 = v49++ >= 9;
              if (v27)
              {
                LODWORD(v43) = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v43) = 0;
LABEL_95:
        v70 = 68;
LABEL_96:
        *(_DWORD *)(a1 + v70) = v43;
        goto LABEL_109;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_86;
        v54 = 0;
        v55 = 0;
        v56 = 0;
        *(_BYTE *)(a1 + 80) |= 8u;
        while (2)
        {
          v57 = *v17;
          v58 = *(_QWORD *)(v3 + v57);
          v59 = v58 + 1;
          if (v58 == -1 || v59 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v60 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v58);
            *(_QWORD *)(v3 + v57) = v59;
            v56 |= (unint64_t)(v60 & 0x7F) << v54;
            if (v60 < 0)
            {
              v54 += 7;
              v27 = v55++ >= 9;
              if (v27)
              {
                v56 = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v56 = 0;
LABEL_100:
        v71 = v56 != 0;
        v72 = 77;
        goto LABEL_105;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_86;
        v61 = 0;
        v62 = 0;
        v63 = 0;
        *(_BYTE *)(a1 + 80) |= 4u;
        while (2)
        {
          v64 = *v17;
          v65 = *(_QWORD *)(v3 + v64);
          v66 = v65 + 1;
          if (v65 == -1 || v66 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v67 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v65);
            *(_QWORD *)(v3 + v64) = v66;
            v63 |= (unint64_t)(v67 & 0x7F) << v61;
            if (v67 < 0)
            {
              v61 += 7;
              v27 = v62++ >= 9;
              if (v27)
              {
                v63 = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v63 = 0;
LABEL_104:
        v71 = v63 != 0;
        v72 = 76;
LABEL_105:
        *(_BYTE *)(a1 + v72) = v71;
        goto LABEL_109;
      default:
        if ((v80 & 1) == 0 || (*(_BYTE *)(a1 + 80) & 0x10) != 0)
        {
LABEL_86:
          v69 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v81;
          if ((v69 & 1) == 0)
          {
LABEL_130:
            v78 = 0;
            goto LABEL_111;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v36 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v37 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v36;

          }
          v38 = PBUnknownFieldAdd();
          v15 = v81;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if (!v38)
          {
            v78 = 0;
            v79 = &OBJC_IVAR___GEOXPCReply__methodName;
            goto LABEL_113;
          }
        }
LABEL_109:
        if (!(v82 & 1 | (v9 != 0)))
          goto LABEL_110;
        continue;
    }
  }
}

void sub_188736AE0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_188737E00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188737EC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _GEOConfigStorageCFPrefsReadOnly()
{
  void *v0;
  id v1;
  uint8_t v3[16];

  _initStorage(1);
  v0 = (void *)_MergedGlobals_291[0];
  if (_MergedGlobals_291[0])
  {
    v1 = (id)_MergedGlobals_291[0];
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: _cfprefs_readonly_storage != ((void *)0)", v3, 2u);
  }
  return v0;
}

void _initStorage(char a1)
{
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___initStorage_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = a1;
  if (_initStorage_onceToken != -1)
    dispatch_once(&_initStorage_onceToken, block);
}

void sub_18873808C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V2AddressObjectProto::ByteSize(addr_obj::V2AddressObjectProto *this)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  const AddrObjGoogle::protobuf::UnknownFieldSet *v76;
  uint64_t v77;
  _QWORD *v78;

  v2 = *((_DWORD *)this + 35);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_85;
  }
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_24;
    goto LABEL_15;
  }
  v4 = *((_QWORD *)this + 5);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v9 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v2 = *((_DWORD *)this + 35);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 1;
  }
  if (v6 < 0)
    v5 = v7;
  v3 = v9 + v5 + 1;
  if ((v2 & 2) != 0)
  {
LABEL_15:
    v10 = *((_QWORD *)this + 6);
    v11 = *(unsigned __int8 *)(v10 + 23);
    v12 = v11;
    v13 = *(_QWORD *)(v10 + 8);
    if ((v11 & 0x80u) == 0)
      v14 = *(unsigned __int8 *)(v10 + 23);
    else
      v14 = v13;
    if (v14 >= 0x80)
    {
      v15 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v14);
      v11 = *(unsigned __int8 *)(v10 + 23);
      v13 = *(_QWORD *)(v10 + 8);
      v2 = *((_DWORD *)this + 35);
      v12 = *(_BYTE *)(v10 + 23);
    }
    else
    {
      v15 = 1;
    }
    if (v12 < 0)
      v11 = v13;
    v3 += v15 + v11 + 1;
  }
LABEL_24:
  if ((v2 & 4) != 0)
  {
    v16 = *((_QWORD *)this + 7);
    v17 = *(unsigned __int8 *)(v16 + 23);
    v18 = v17;
    v19 = *(_QWORD *)(v16 + 8);
    if ((v17 & 0x80u) == 0)
      v20 = *(unsigned __int8 *)(v16 + 23);
    else
      v20 = v19;
    if (v20 >= 0x80)
    {
      v21 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v20);
      v17 = *(unsigned __int8 *)(v16 + 23);
      v19 = *(_QWORD *)(v16 + 8);
      v2 = *((_DWORD *)this + 35);
      v18 = *(_BYTE *)(v16 + 23);
    }
    else
    {
      v21 = 1;
    }
    if (v18 < 0)
      v17 = v19;
    v3 += v21 + v17 + 1;
    if ((v2 & 8) == 0)
    {
LABEL_26:
      if ((v2 & 0x10) == 0)
        goto LABEL_27;
      goto LABEL_49;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_26;
  }
  v22 = *((_QWORD *)this + 8);
  v23 = *(unsigned __int8 *)(v22 + 23);
  v24 = v23;
  v25 = *(_QWORD *)(v22 + 8);
  if ((v23 & 0x80u) == 0)
    v26 = *(unsigned __int8 *)(v22 + 23);
  else
    v26 = v25;
  if (v26 >= 0x80)
  {
    v27 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v26);
    v23 = *(unsigned __int8 *)(v22 + 23);
    v25 = *(_QWORD *)(v22 + 8);
    v2 = *((_DWORD *)this + 35);
    v24 = *(_BYTE *)(v22 + 23);
  }
  else
  {
    v27 = 1;
  }
  if (v24 < 0)
    v23 = v25;
  v3 += v27 + v23 + 1;
  if ((v2 & 0x10) == 0)
  {
LABEL_27:
    if ((v2 & 0x20) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_49:
  v28 = *((_QWORD *)this + 9);
  v29 = *(unsigned __int8 *)(v28 + 23);
  v30 = v29;
  v31 = *(_QWORD *)(v28 + 8);
  if ((v29 & 0x80u) == 0)
    v32 = *(unsigned __int8 *)(v28 + 23);
  else
    v32 = v31;
  if (v32 >= 0x80)
  {
    v33 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v32);
    v29 = *(unsigned __int8 *)(v28 + 23);
    v31 = *(_QWORD *)(v28 + 8);
    v2 = *((_DWORD *)this + 35);
    v30 = *(_BYTE *)(v28 + 23);
  }
  else
  {
    v33 = 1;
  }
  if (v30 < 0)
    v29 = v31;
  v3 += v33 + v29 + 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_28:
    if ((v2 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_58:
  v34 = *((_QWORD *)this + 10);
  v35 = *(unsigned __int8 *)(v34 + 23);
  v36 = v35;
  v37 = *(_QWORD *)(v34 + 8);
  if ((v35 & 0x80u) == 0)
    v38 = *(unsigned __int8 *)(v34 + 23);
  else
    v38 = v37;
  if (v38 >= 0x80)
  {
    v39 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v38);
    v35 = *(unsigned __int8 *)(v34 + 23);
    v37 = *(_QWORD *)(v34 + 8);
    v2 = *((_DWORD *)this + 35);
    v36 = *(_BYTE *)(v34 + 23);
  }
  else
  {
    v39 = 1;
  }
  if (v36 < 0)
    v35 = v37;
  v3 += v39 + v35 + 1;
  if ((v2 & 0x40) == 0)
  {
LABEL_29:
    if ((v2 & 0x80) == 0)
      goto LABEL_85;
    goto LABEL_76;
  }
LABEL_67:
  v40 = *((_QWORD *)this + 11);
  v41 = *(unsigned __int8 *)(v40 + 23);
  v42 = v41;
  v43 = *(_QWORD *)(v40 + 8);
  if ((v41 & 0x80u) == 0)
    v44 = *(unsigned __int8 *)(v40 + 23);
  else
    v44 = v43;
  if (v44 >= 0x80)
  {
    v45 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v44);
    v41 = *(unsigned __int8 *)(v40 + 23);
    v43 = *(_QWORD *)(v40 + 8);
    v2 = *((_DWORD *)this + 35);
    v42 = *(_BYTE *)(v40 + 23);
  }
  else
  {
    v45 = 1;
  }
  if (v42 < 0)
    v41 = v43;
  v3 += v45 + v41 + 1;
  if ((v2 & 0x80) != 0)
  {
LABEL_76:
    v46 = *((_QWORD *)this + 12);
    v47 = *(unsigned __int8 *)(v46 + 23);
    v48 = v47;
    v49 = *(_QWORD *)(v46 + 8);
    if ((v47 & 0x80u) == 0)
      v50 = *(unsigned __int8 *)(v46 + 23);
    else
      v50 = v49;
    if (v50 >= 0x80)
    {
      v51 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v50);
      v47 = *(unsigned __int8 *)(v46 + 23);
      v49 = *(_QWORD *)(v46 + 8);
      v2 = *((_DWORD *)this + 35);
      v48 = *(_BYTE *)(v46 + 23);
    }
    else
    {
      v51 = 1;
    }
    if (v48 < 0)
      v47 = v49;
    v3 += v51 + v47 + 1;
  }
LABEL_85:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_127;
  if ((v2 & 0x100) != 0)
  {
    v52 = *((_QWORD *)this + 13);
    v53 = *(unsigned __int8 *)(v52 + 23);
    v54 = v53;
    v55 = *(_QWORD *)(v52 + 8);
    if ((v53 & 0x80u) == 0)
      v56 = *(unsigned __int8 *)(v52 + 23);
    else
      v56 = v55;
    if (v56 >= 0x80)
    {
      v57 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v56);
      v53 = *(unsigned __int8 *)(v52 + 23);
      v55 = *(_QWORD *)(v52 + 8);
      v2 = *((_DWORD *)this + 35);
      v54 = *(_BYTE *)(v52 + 23);
    }
    else
    {
      v57 = 1;
    }
    if (v54 < 0)
      v53 = v55;
    v3 += v57 + v53 + 1;
    if ((v2 & 0x200) == 0)
    {
LABEL_88:
      if ((v2 & 0x400) == 0)
        goto LABEL_89;
      goto LABEL_109;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_88;
  }
  v58 = *((_QWORD *)this + 14);
  v59 = *(unsigned __int8 *)(v58 + 23);
  v60 = v59;
  v61 = *(_QWORD *)(v58 + 8);
  if ((v59 & 0x80u) == 0)
    v62 = *(unsigned __int8 *)(v58 + 23);
  else
    v62 = v61;
  if (v62 >= 0x80)
  {
    v63 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v62);
    v59 = *(unsigned __int8 *)(v58 + 23);
    v61 = *(_QWORD *)(v58 + 8);
    v2 = *((_DWORD *)this + 35);
    v60 = *(_BYTE *)(v58 + 23);
  }
  else
  {
    v63 = 1;
  }
  if (v60 < 0)
    v59 = v61;
  v3 += v63 + v59 + 1;
  if ((v2 & 0x400) == 0)
  {
LABEL_89:
    if ((v2 & 0x800) == 0)
      goto LABEL_127;
    goto LABEL_118;
  }
LABEL_109:
  v64 = *((_QWORD *)this + 15);
  v65 = *(unsigned __int8 *)(v64 + 23);
  v66 = v65;
  v67 = *(_QWORD *)(v64 + 8);
  if ((v65 & 0x80u) == 0)
    v68 = *(unsigned __int8 *)(v64 + 23);
  else
    v68 = v67;
  if (v68 >= 0x80)
  {
    v69 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v68);
    v65 = *(unsigned __int8 *)(v64 + 23);
    v67 = *(_QWORD *)(v64 + 8);
    v2 = *((_DWORD *)this + 35);
    v66 = *(_BYTE *)(v64 + 23);
  }
  else
  {
    v69 = 1;
  }
  if (v66 < 0)
    v65 = v67;
  v3 += v69 + v65 + 1;
  if ((v2 & 0x800) != 0)
  {
LABEL_118:
    v70 = *((_QWORD *)this + 16);
    v71 = *(unsigned __int8 *)(v70 + 23);
    v72 = v71;
    v73 = *(_QWORD *)(v70 + 8);
    if ((v71 & 0x80u) == 0)
      v74 = *(unsigned __int8 *)(v70 + 23);
    else
      v74 = v73;
    if (v74 >= 0x80)
    {
      v75 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v74);
      v71 = *(unsigned __int8 *)(v70 + 23);
      v73 = *(_QWORD *)(v70 + 8);
      v72 = *(_BYTE *)(v70 + 23);
    }
    else
    {
      v75 = 1;
    }
    if (v72 < 0)
      v71 = v73;
    v3 += v75 + v71 + 1;
  }
LABEL_127:
  v77 = AddrObjGoogle::protobuf::internal::ExtensionSet::ByteSize((AddrObjGoogle::protobuf::internal::ExtensionSet **)this + 1)
      + v3;
  v78 = (_QWORD *)*((_QWORD *)this + 4);
  if (v78 && *v78 != v78[1])
    v77 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 4, v76)+ v77;
  *((_DWORD *)this + 34) = v77;
  return v77;
}

uint64_t addr_obj::AddressObjectProto::ByteSize(addr_obj::AddressObjectProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  int v3;
  int v4;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  addr_obj::LocalizationProto *v13;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  addr_obj::V0AddressObjectProto *v17;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  addr_obj::V1AddressObjectProto *v21;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v22;
  int v23;
  int v24;
  addr_obj::VenueInfoProto *v25;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v32;
  int v33;
  int v34;
  _QWORD *v35;

  LOBYTE(v3) = *((_BYTE *)this + 88);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_50;
  }
  if ((*((_BYTE *)this + 88) & 1) != 0)
  {
    v5 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 20);
    if ((v5 & 0x80000000) != 0)
    {
      v6 = 10;
    }
    else if (v5 >= 0x80)
    {
      v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      v3 = *((_DWORD *)this + 22);
    }
    else
    {
      v6 = 1;
    }
    v4 = v6 + 1;
    if ((v3 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 88) & 2) == 0)
      goto LABEL_21;
  }
  v7 = *((_QWORD *)this + 2);
  v8 = *(unsigned __int8 *)(v7 + 23);
  v9 = v8;
  v10 = *(_QWORD *)(v7 + 8);
  if ((v8 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(v7 + 23);
  else
    v11 = v10;
  if (v11 >= 0x80)
  {
    v12 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v11);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v10 = *(_QWORD *)(v7 + 8);
    v3 = *((_DWORD *)this + 22);
    v9 = *(_BYTE *)(v7 + 23);
  }
  else
  {
    v12 = 1;
  }
  if (v9 < 0)
    v8 = v10;
  v4 += v12 + v8 + 1;
LABEL_21:
  if ((v3 & 4) != 0)
  {
    v13 = (addr_obj::LocalizationProto *)*((_QWORD *)this + 3);
    if (!v13)
      v13 = *(addr_obj::LocalizationProto **)(addr_obj::AddressObjectProto::default_instance_(0) + 24);
    v14 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::LocalizationProto::ByteSize(v13, a2);
    v15 = (int)v14;
    if (v14 >= 0x80)
      v16 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    else
      v16 = 1;
    v4 += v15 + v16 + 1;
    v3 = *((_DWORD *)this + 22);
    if ((v3 & 0x10) == 0)
    {
LABEL_23:
      if ((v3 & 0x20) == 0)
        goto LABEL_24;
      goto LABEL_38;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_23;
  }
  v17 = (addr_obj::V0AddressObjectProto *)*((_QWORD *)this + 7);
  if (!v17)
    v17 = *(addr_obj::V0AddressObjectProto **)(addr_obj::AddressObjectProto::default_instance_(0) + 56);
  v18 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::V0AddressObjectProto::ByteSize(v17, a2);
  v19 = (int)v18;
  if (v18 >= 0x80)
    v20 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
  else
    v20 = 1;
  v4 += v19 + v20 + 2;
  v3 = *((_DWORD *)this + 22);
  if ((v3 & 0x20) == 0)
  {
LABEL_24:
    if ((v3 & 0x40) == 0)
      goto LABEL_50;
    goto LABEL_44;
  }
LABEL_38:
  v21 = (addr_obj::V1AddressObjectProto *)*((_QWORD *)this + 8);
  if (!v21)
    v21 = *(addr_obj::V1AddressObjectProto **)(addr_obj::AddressObjectProto::default_instance_(0) + 64);
  v22 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::V1AddressObjectProto::ByteSize(v21, a2);
  v23 = (int)v22;
  if (v22 >= 0x80)
    v24 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
  else
    v24 = 1;
  v4 += v23 + v24 + 2;
  if ((*((_DWORD *)this + 22) & 0x40) != 0)
  {
LABEL_44:
    v25 = (addr_obj::VenueInfoProto *)*((_QWORD *)this + 9);
    if (!v25)
      v25 = *(addr_obj::VenueInfoProto **)(addr_obj::AddressObjectProto::default_instance_(0) + 72);
    v26 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::VenueInfoProto::ByteSize(v25, a2);
    v27 = (int)v26;
    if (v26 >= 0x80)
      v28 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26);
    else
      v28 = 1;
    v4 += v27 + v28 + 1;
  }
LABEL_50:
  v29 = *((_DWORD *)this + 10);
  v30 = (v29 + v4);
  if (v29 >= 1)
  {
    v31 = 0;
    do
    {
      v32 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::FingerprintProto::ByteSize(*(addr_obj::FingerprintProto **)(*((_QWORD *)this + 4)+ 8 * v31), a2);
      v33 = (int)v32;
      if (v32 >= 0x80)
        v34 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32);
      else
        v34 = 1;
      v30 = (v33 + v30 + v34);
      ++v31;
    }
    while (v31 < *((int *)this + 10));
  }
  v35 = (_QWORD *)*((_QWORD *)this + 1);
  if (v35 && *v35 != v35[1])
    v30 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)+ v30;
  *((_DWORD *)this + 21) = v30;
  return v30;
}

uint64_t addr_obj::V1AddressObjectProto::ByteSize(addr_obj::V1AddressObjectProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  addr_obj::geo3::Address *v11;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  addr_obj::geo3::StructuredAddress *v27;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  addr_obj::geo3::Address *v37;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v38;
  int v39;
  int v40;
  const AddrObjGoogle::protobuf::UnknownFieldSet *v41;
  uint64_t v42;
  _QWORD *v43;

  LOBYTE(v3) = *((_BYTE *)this + 100);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_66;
  }
  if ((*((_BYTE *)this + 100) & 1) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 100) & 2) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  v5 = *((_QWORD *)this + 5);
  v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = v8;
  if (v9 >= 0x80)
  {
    v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v9);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v8 = *(_QWORD *)(v5 + 8);
    v3 = *((_DWORD *)this + 25);
    v7 = *(_BYTE *)(v5 + 23);
  }
  else
  {
    v10 = 1;
  }
  if (v7 < 0)
    v6 = v8;
  v4 = v10 + v6 + 1;
  if ((v3 & 2) != 0)
  {
LABEL_15:
    v11 = (addr_obj::geo3::Address *)*((_QWORD *)this + 6);
    if (!v11)
      v11 = *(addr_obj::geo3::Address **)(addr_obj::V1AddressObjectProto::default_instance_(0) + 48);
    v12 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::geo3::Address::ByteSize(v11, a2);
    v13 = (int)v12;
    if (v12 >= 0x80)
      v14 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
    else
      v14 = 1;
    v4 += v13 + v14 + 1;
    v3 = *((_DWORD *)this + 25);
  }
LABEL_21:
  if ((v3 & 4) != 0)
  {
    v15 = *((_QWORD *)this + 7);
    v16 = *(unsigned __int8 *)(v15 + 23);
    v17 = v16;
    v18 = *(_QWORD *)(v15 + 8);
    if ((v16 & 0x80u) == 0)
      v19 = *(unsigned __int8 *)(v15 + 23);
    else
      v19 = v18;
    if (v19 >= 0x80)
    {
      v20 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v19);
      v16 = *(unsigned __int8 *)(v15 + 23);
      v18 = *(_QWORD *)(v15 + 8);
      v3 = *((_DWORD *)this + 25);
      v17 = *(_BYTE *)(v15 + 23);
    }
    else
    {
      v20 = 1;
    }
    if (v17 < 0)
      v16 = v18;
    v4 += v20 + v16 + 1;
    if ((v3 & 8) == 0)
    {
LABEL_23:
      if ((v3 & 0x10) == 0)
        goto LABEL_24;
      goto LABEL_45;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_23;
  }
  v21 = *((_QWORD *)this + 8);
  v22 = *(unsigned __int8 *)(v21 + 23);
  v23 = v22;
  v24 = *(_QWORD *)(v21 + 8);
  if ((v22 & 0x80u) == 0)
    v25 = *(unsigned __int8 *)(v21 + 23);
  else
    v25 = v24;
  if (v25 >= 0x80)
  {
    v26 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v25);
    v22 = *(unsigned __int8 *)(v21 + 23);
    v24 = *(_QWORD *)(v21 + 8);
    v3 = *((_DWORD *)this + 25);
    v23 = *(_BYTE *)(v21 + 23);
  }
  else
  {
    v26 = 1;
  }
  if (v23 < 0)
    v22 = v24;
  v4 += v26 + v22 + 1;
  if ((v3 & 0x10) == 0)
  {
LABEL_24:
    if ((v3 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_45:
  v27 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)this + 9);
  if (!v27)
    v27 = *(addr_obj::geo3::StructuredAddress **)(addr_obj::V1AddressObjectProto::default_instance_(0) + 72);
  v28 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::geo3::StructuredAddress::ByteSize(v27, a2);
  v29 = (int)v28;
  if (v28 >= 0x80)
    v30 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28);
  else
    v30 = 1;
  v4 += v29 + v30 + 1;
  v3 = *((_DWORD *)this + 25);
  if ((v3 & 0x20) == 0)
  {
LABEL_25:
    if ((v3 & 0x40) == 0)
      goto LABEL_66;
    goto LABEL_60;
  }
LABEL_51:
  v31 = *((_QWORD *)this + 10);
  v32 = *(unsigned __int8 *)(v31 + 23);
  v33 = v32;
  v34 = *(_QWORD *)(v31 + 8);
  if ((v32 & 0x80u) == 0)
    v35 = *(unsigned __int8 *)(v31 + 23);
  else
    v35 = v34;
  if (v35 >= 0x80)
  {
    v36 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v35);
    v32 = *(unsigned __int8 *)(v31 + 23);
    v34 = *(_QWORD *)(v31 + 8);
    v3 = *((_DWORD *)this + 25);
    v33 = *(_BYTE *)(v31 + 23);
  }
  else
  {
    v36 = 1;
  }
  if (v33 < 0)
    v32 = v34;
  v4 += v36 + v32 + 1;
  if ((v3 & 0x40) != 0)
  {
LABEL_60:
    v37 = (addr_obj::geo3::Address *)*((_QWORD *)this + 11);
    if (!v37)
      v37 = *(addr_obj::geo3::Address **)(addr_obj::V1AddressObjectProto::default_instance_(0) + 88);
    v38 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::geo3::Address::ByteSize(v37, a2);
    v39 = (int)v38;
    if (v38 >= 0x80)
      v40 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38);
    else
      v40 = 1;
    v4 += v39 + v40 + 1;
  }
LABEL_66:
  v42 = AddrObjGoogle::protobuf::internal::ExtensionSet::ByteSize((AddrObjGoogle::protobuf::internal::ExtensionSet **)this + 1)
      + v4;
  v43 = (_QWORD *)*((_QWORD *)this + 4);
  if (v43 && *v43 != v43[1])
    v42 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 4, v41)+ v42;
  *((_DWORD *)this + 24) = v42;
  return v42;
}

uint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::ByteSize(AddrObjGoogle::protobuf::internal::ExtensionSet **this)
{
  AddrObjGoogle::protobuf::internal::ExtensionSet **v1;
  AddrObjGoogle::protobuf::internal::ExtensionSet *v2;
  uint64_t v3;
  int v4;
  AddrObjGoogle::protobuf::internal::ExtensionSet *v5;
  AddrObjGoogle::protobuf::internal::ExtensionSet **v6;
  BOOL v7;

  v1 = this + 1;
  v2 = *this;
  if (*this == (AddrObjGoogle::protobuf::internal::ExtensionSet *)(this + 1))
    return 0;
  LODWORD(v3) = 0;
  do
  {
    v4 = AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::ByteSize((uint64_t **)v2 + 5, *((_DWORD *)v2 + 8));
    v5 = (AddrObjGoogle::protobuf::internal::ExtensionSet *)*((_QWORD *)v2 + 1);
    if (v5)
    {
      do
      {
        v6 = (AddrObjGoogle::protobuf::internal::ExtensionSet **)v5;
        v5 = *(AddrObjGoogle::protobuf::internal::ExtensionSet **)v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (AddrObjGoogle::protobuf::internal::ExtensionSet **)*((_QWORD *)v2 + 2);
        v7 = *v6 == v2;
        v2 = (AddrObjGoogle::protobuf::internal::ExtensionSet *)v6;
      }
      while (!v7);
    }
    v3 = (v4 + v3);
    v2 = (AddrObjGoogle::protobuf::internal::ExtensionSet *)v6;
  }
  while (v6 != v1);
  return v3;
}

uint64_t addr_obj::LocalizationProto::ByteSize(addr_obj::LocalizationProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _QWORD *v24;

  LOBYTE(v3) = *((_BYTE *)this + 44);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_34;
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v5 = *((_QWORD *)this + 2);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = v8;
    if (v9 >= 0x80)
    {
      v11 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v9);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v8 = *(_QWORD *)(v5 + 8);
      v10 = v11 + 1;
      v3 = *((_DWORD *)this + 11);
      v7 = *(_BYTE *)(v5 + 23);
    }
    else
    {
      v10 = 2;
    }
    if (v7 < 0)
      v6 = v8;
    v4 = (v10 + v6);
    if ((v3 & 2) == 0)
      goto LABEL_24;
    goto LABEL_15;
  }
  v4 = 0;
  if ((*((_BYTE *)this + 44) & 2) != 0)
  {
LABEL_15:
    v12 = *((_QWORD *)this + 3);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = v13;
    v15 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v16 = *(unsigned __int8 *)(v12 + 23);
    else
      v16 = v15;
    if (v16 >= 0x80)
    {
      v17 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v16);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v15 = *(_QWORD *)(v12 + 8);
      v3 = *((_DWORD *)this + 11);
      v14 = *(_BYTE *)(v12 + 23);
    }
    else
    {
      v17 = 1;
    }
    if (v14 < 0)
      v13 = v15;
    v4 = (v4 + v17 + v13 + 1);
  }
LABEL_24:
  if ((v3 & 4) != 0)
  {
    v18 = *((_QWORD *)this + 4);
    v19 = *(unsigned __int8 *)(v18 + 23);
    v20 = v19;
    v21 = *(_QWORD *)(v18 + 8);
    if ((v19 & 0x80u) == 0)
      v22 = *(unsigned __int8 *)(v18 + 23);
    else
      v22 = v21;
    if (v22 >= 0x80)
    {
      v23 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v22);
      v19 = *(unsigned __int8 *)(v18 + 23);
      v21 = *(_QWORD *)(v18 + 8);
      v20 = *(_BYTE *)(v18 + 23);
    }
    else
    {
      v23 = 1;
    }
    if (v20 < 0)
      v19 = v21;
    v4 = (v4 + v23 + v19 + 1);
  }
LABEL_34:
  v24 = (_QWORD *)*((_QWORD *)this + 1);
  if (v24 && *v24 != v24[1])
    v4 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)
       + v4;
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t addr_obj::FingerprintProto::ByteSize(addr_obj::FingerprintProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _QWORD *v24;

  LOBYTE(v3) = *((_BYTE *)this + 52);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_37;
  }
  if ((*((_BYTE *)this + 52) & 1) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 52) & 2) == 0)
      goto LABEL_16;
LABEL_15:
    v4 = v4
       + AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64((2 * *((_QWORD *)this + 3)) ^ (*((uint64_t *)this + 3) >> 63))
       + 1;
    v3 = *((_DWORD *)this + 13);
    goto LABEL_16;
  }
  v5 = *((_QWORD *)this + 2);
  v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = v8;
  if (v9 >= 0x80)
  {
    v11 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v9);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v8 = *(_QWORD *)(v5 + 8);
    v10 = v11 + 1;
    v3 = *((_DWORD *)this + 13);
    v7 = *(_BYTE *)(v5 + 23);
  }
  else
  {
    v10 = 2;
  }
  if (v7 < 0)
    v6 = v8;
  v4 = (v10 + v6);
  if ((v3 & 2) != 0)
    goto LABEL_15;
LABEL_16:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_37;
    goto LABEL_28;
  }
  v12 = *((_QWORD *)this + 4);
  v13 = *(unsigned __int8 *)(v12 + 23);
  v14 = v13;
  v15 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v16 = *(unsigned __int8 *)(v12 + 23);
  else
    v16 = v15;
  if (v16 >= 0x80)
  {
    v17 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v16);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v15 = *(_QWORD *)(v12 + 8);
    v3 = *((_DWORD *)this + 13);
    v14 = *(_BYTE *)(v12 + 23);
  }
  else
  {
    v17 = 1;
  }
  if (v14 < 0)
    v13 = v15;
  v4 = (v4 + v17 + v13 + 1);
  if ((v3 & 8) != 0)
  {
LABEL_28:
    v18 = *((_QWORD *)this + 5);
    v19 = *(unsigned __int8 *)(v18 + 23);
    v20 = v19;
    v21 = *(_QWORD *)(v18 + 8);
    if ((v19 & 0x80u) == 0)
      v22 = *(unsigned __int8 *)(v18 + 23);
    else
      v22 = v21;
    if (v22 >= 0x80)
    {
      v23 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v22);
      v19 = *(unsigned __int8 *)(v18 + 23);
      v21 = *(_QWORD *)(v18 + 8);
      v20 = *(_BYTE *)(v18 + 23);
    }
    else
    {
      v23 = 1;
    }
    if (v20 < 0)
      v19 = v21;
    v4 = (v4 + v23 + v19 + 1);
  }
LABEL_37:
  v24 = (_QWORD *)*((_QWORD *)this + 1);
  if (v24 && *v24 != v24[1])
    v4 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)
       + v4;
  *((_DWORD *)this + 12) = v4;
  return v4;
}

unint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::ByteSize(uint64_t **this, int a2)
{
  int v4;
  std::string *v5;
  unint64_t v6;
  int v7;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v8;
  int v9;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  int v37;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v38;
  int v39;
  unint64_t v40;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v41;
  int v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v52;
  int v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  uint64_t *v66;
  int v67;
  uint64_t v68;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v69;
  int v70;
  int v71;
  uint64_t *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t *v81;
  int v82;
  uint64_t v83;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v84;
  int v85;
  uint64_t *v86;
  int v87;
  uint64_t v88;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v89;
  int v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v94;
  int v95;
  uint64_t *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(void);
  AddrObjGoogle::protobuf::io::CodedOutputStream *v102;
  int v103;
  int v104;
  char v105;
  std::string v106[2];

  if (*((_BYTE *)this + 9))
  {
    v4 = *((unsigned __int8 *)this + 8);
    if (*((_BYTE *)this + 11))
    {
      switch(*((_BYTE *)this + 8))
      {
        case 1:
        case 6:
        case 0x10:
          v6 = (8 * *((_DWORD *)*this + 2));
          goto LABEL_67;
        case 2:
        case 7:
        case 0xF:
          v6 = (4 * *((_DWORD *)*this + 2));
          goto LABEL_67;
        case 3:
          v22 = *this;
          if (*((int *)*this + 2) < 1)
            goto LABEL_5;
          v23 = 0;
          LODWORD(v6) = 0;
          do
          {
            v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64(*(_QWORD *)(*v22 + 8 * v23++))
               + v6;
            v22 = *this;
          }
          while (v23 < *((int *)*this + 2));
          goto LABEL_67;
        case 4:
          v24 = *this;
          if (*((int *)*this + 2) < 1)
            goto LABEL_5;
          v25 = 0;
          LODWORD(v6) = 0;
          do
          {
            v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64(*(_QWORD *)(*v24 + 8 * v25++))
               + v6;
            v24 = *this;
          }
          while (v25 < *((int *)*this + 2));
          goto LABEL_67;
        case 5:
          v26 = *this;
          if (*((int *)*this + 2) < 1)
            goto LABEL_5;
          v27 = 0;
          LODWORD(v6) = 0;
          do
          {
            v28 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*v26 + 4 * v27);
            if ((v28 & 0x80000000) != 0)
            {
              v29 = 10;
            }
            else if (v28 >= 0x80)
            {
              v29 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28);
              v26 = *this;
            }
            else
            {
              v29 = 1;
            }
            v6 = (v29 + v6);
            ++v27;
          }
          while (v27 < *((int *)v26 + 2));
          goto LABEL_67;
        case 8:
          v6 = *((unsigned int *)*this + 2);
          goto LABEL_67;
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v106, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/extension_set.cc", 1294);
          v5 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v106, "Non-primitive types can't be packed.");
          AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v105, (AddrObjGoogle::protobuf::internal::LogMessage *)v5);
          AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v106[0].__r_.__value_.__l.__data_);
          goto LABEL_5;
        case 0xD:
          v14 = *this;
          if (*((int *)*this + 2) < 1)
            goto LABEL_5;
          v15 = 0;
          LODWORD(v6) = 0;
          do
          {
            v16 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*v14 + 4 * v15);
            if (v16 >= 0x80)
            {
              v17 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
              v14 = *this;
            }
            else
            {
              v17 = 1;
            }
            v6 = (v17 + v6);
            ++v15;
          }
          while (v15 < *((int *)v14 + 2));
          goto LABEL_67;
        case 0xE:
          v30 = *this;
          if (*((int *)*this + 2) < 1)
            goto LABEL_5;
          v31 = 0;
          LODWORD(v6) = 0;
          do
          {
            v32 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*v30 + 4 * v31);
            if ((v32 & 0x80000000) != 0)
            {
              v33 = 10;
            }
            else if (v32 >= 0x80)
            {
              v33 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32);
              v30 = *this;
            }
            else
            {
              v33 = 1;
            }
            v6 = (v33 + v6);
            ++v31;
          }
          while (v31 < *((int *)v30 + 2));
          goto LABEL_67;
        case 0x11:
          v18 = *this;
          if (*((int *)*this + 2) < 1)
            goto LABEL_5;
          v19 = 0;
          LODWORD(v6) = 0;
          do
          {
            v20 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((2 * *(_DWORD *)(*v18 + 4 * v19)) ^ (*(int *)(*v18 + 4 * v19) >> 31));
            if (v20 >= 0x80)
            {
              v21 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
              v18 = *this;
            }
            else
            {
              v21 = 1;
            }
            v6 = (v21 + v6);
            ++v19;
          }
          while (v19 < *((int *)v18 + 2));
          goto LABEL_67;
        case 0x12:
          v34 = *this;
          if (*((int *)*this + 2) < 1)
            goto LABEL_5;
          v35 = 0;
          LODWORD(v6) = 0;
          do
          {
            v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64((2
                                                                                           * *(_QWORD *)(*v34 + 8 * v35)) ^ (*(uint64_t *)(*v34 + 8 * v35) >> 63))
               + v6;
            ++v35;
            v34 = *this;
          }
          while (v35 < *((int *)*this + 2));
LABEL_67:
          *((_DWORD *)this + 3) = v6;
          if ((int)v6 >= 1)
          {
            if (v6 >= 0x80)
              v36 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v6);
            else
              v36 = 1;
            v37 = v36 + v6;
            v38 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 2u);
            if (v38 >= 0x80)
              v39 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38);
            else
              v39 = 1;
            v6 = (v37 + v39);
          }
          break;
        default:
LABEL_5:
          v6 = 0;
          *((_DWORD *)this + 3) = 0;
          break;
      }
    }
    else
    {
      v10 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
      if (v10 >= 0x80)
        v11 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
      else
        v11 = 1;
      v12 = v11 << (v4 == 10);
      switch(*((_BYTE *)this + 8))
      {
        case 1:
        case 6:
        case 0x10:
          v13 = v12 + 8;
          goto LABEL_21;
        case 2:
        case 7:
        case 0xF:
          v13 = v12 + 4;
LABEL_21:
          v6 = (*((_DWORD *)*this + 2) * v13);
          break;
        case 3:
          v43 = *this;
          v44 = *((_DWORD *)*this + 2);
          v6 = (v44 * v12);
          if (v44 >= 1)
          {
            v45 = 0;
            do
            {
              v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64(*(_QWORD *)(*v43 + 8 * v45++))
                 + v6;
              v43 = *this;
            }
            while (v45 < *((int *)*this + 2));
          }
          break;
        case 4:
          v46 = *this;
          v47 = *((_DWORD *)*this + 2);
          v6 = (v47 * v12);
          if (v47 >= 1)
          {
            v48 = 0;
            do
            {
              v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64(*(_QWORD *)(*v46 + 8 * v48++))
                 + v6;
              v46 = *this;
            }
            while (v48 < *((int *)*this + 2));
          }
          break;
        case 5:
          v49 = *this;
          v50 = *((_DWORD *)*this + 2);
          v6 = (v50 * v12);
          if (v50 >= 1)
          {
            v51 = 0;
            do
            {
              v52 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*v49 + 4 * v51);
              if ((v52 & 0x80000000) != 0)
              {
                v53 = 10;
              }
              else if (v52 >= 0x80)
              {
                v53 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52);
                v49 = *this;
              }
              else
              {
                v53 = 1;
              }
              v6 = (v53 + v6);
              ++v51;
            }
            while (v51 < *((int *)v49 + 2));
          }
          break;
        case 8:
          v6 = (*((_DWORD *)*this + 2) + *((_DWORD *)*this + 2) * v12);
          break;
        case 9:
          v54 = *this;
          v55 = *((_DWORD *)*this + 2);
          v6 = (v55 * v12);
          if (v55 >= 1)
          {
            v56 = 0;
            do
            {
              v57 = *(_QWORD *)(*v54 + 8 * v56);
              v58 = *(unsigned __int8 *)(v57 + 23);
              v59 = v58;
              v60 = *(_QWORD *)(v57 + 8);
              if ((v58 & 0x80u) == 0)
                v61 = *(unsigned __int8 *)(v57 + 23);
              else
                v61 = v60;
              if (v61 >= 0x80)
              {
                v62 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v61);
                v58 = *(unsigned __int8 *)(v57 + 23);
                v60 = *(_QWORD *)(v57 + 8);
                v54 = *this;
                v59 = *(_BYTE *)(v57 + 23);
              }
              else
              {
                v62 = 1;
              }
              if (v59 < 0)
                v58 = v60;
              v6 = (v62 + v6 + v58);
              ++v56;
            }
            while (v56 < *((int *)v54 + 2));
          }
          break;
        case 0xA:
          v63 = *this;
          v64 = *((_DWORD *)*this + 2);
          v6 = (v64 * v12);
          if (v64 >= 1)
          {
            v65 = 0;
            do
            {
              v6 = (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*v63 + 8 * v65) + 72))(*(_QWORD *)(*v63 + 8 * v65))
                 + v6;
              ++v65;
              v63 = *this;
            }
            while (v65 < *((int *)*this + 2));
          }
          break;
        case 0xB:
          v66 = *this;
          v67 = *((_DWORD *)*this + 2);
          v6 = (v67 * v12);
          if (v67 >= 1)
          {
            v68 = 0;
            do
            {
              v69 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v66 + 8 * v68) + 72))(*(_QWORD *)(*v66 + 8 * v68));
              v70 = (int)v69;
              if (v69 >= 0x80)
                v71 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v69);
              else
                v71 = 1;
              v6 = (v70 + v6 + v71);
              ++v68;
              v66 = *this;
            }
            while (v68 < *((int *)*this + 2));
          }
          break;
        case 0xC:
          v72 = *this;
          v73 = *((_DWORD *)*this + 2);
          v6 = (v73 * v12);
          if (v73 >= 1)
          {
            v74 = 0;
            do
            {
              v75 = *(_QWORD *)(*v72 + 8 * v74);
              v76 = *(unsigned __int8 *)(v75 + 23);
              v77 = v76;
              v78 = *(_QWORD *)(v75 + 8);
              if ((v76 & 0x80u) == 0)
                v79 = *(unsigned __int8 *)(v75 + 23);
              else
                v79 = v78;
              if (v79 >= 0x80)
              {
                v80 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v79);
                v76 = *(unsigned __int8 *)(v75 + 23);
                v78 = *(_QWORD *)(v75 + 8);
                v72 = *this;
                v77 = *(_BYTE *)(v75 + 23);
              }
              else
              {
                v80 = 1;
              }
              if (v77 < 0)
                v76 = v78;
              v6 = (v80 + v6 + v76);
              ++v74;
            }
            while (v74 < *((int *)v72 + 2));
          }
          break;
        case 0xD:
          v81 = *this;
          v82 = *((_DWORD *)*this + 2);
          v6 = (v82 * v12);
          if (v82 >= 1)
          {
            v83 = 0;
            do
            {
              v84 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*v81 + 4 * v83);
              if (v84 >= 0x80)
              {
                v85 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v84);
                v81 = *this;
              }
              else
              {
                v85 = 1;
              }
              v6 = (v85 + v6);
              ++v83;
            }
            while (v83 < *((int *)v81 + 2));
          }
          break;
        case 0xE:
          v86 = *this;
          v87 = *((_DWORD *)*this + 2);
          v6 = (v87 * v12);
          if (v87 >= 1)
          {
            v88 = 0;
            do
            {
              v89 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*v86 + 4 * v88);
              if ((v89 & 0x80000000) != 0)
              {
                v90 = 10;
              }
              else if (v89 >= 0x80)
              {
                v90 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v89);
                v86 = *this;
              }
              else
              {
                v90 = 1;
              }
              v6 = (v90 + v6);
              ++v88;
            }
            while (v88 < *((int *)v86 + 2));
          }
          break;
        case 0x11:
          v91 = *this;
          v92 = *((_DWORD *)*this + 2);
          v6 = (v92 * v12);
          if (v92 >= 1)
          {
            v93 = 0;
            do
            {
              v94 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((2 * *(_DWORD *)(*v91 + 4 * v93)) ^ (*(int *)(*v91 + 4 * v93) >> 31));
              if (v94 >= 0x80)
              {
                v95 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v94);
                v91 = *this;
              }
              else
              {
                v95 = 1;
              }
              v6 = (v95 + v6);
              ++v93;
            }
            while (v93 < *((int *)v91 + 2));
          }
          break;
        case 0x12:
          v96 = *this;
          v97 = *((_DWORD *)*this + 2);
          v6 = (v97 * v12);
          if (v97 >= 1)
          {
            v98 = 0;
            do
            {
              v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64((2
                                                                                             * *(_QWORD *)(*v96 + 8 * v98)) ^ (*(uint64_t *)(*v96 + 8 * v98) >> 63))
                 + v6;
              ++v98;
              v96 = *this;
            }
            while (v98 < *((int *)*this + 2));
          }
          break;
        default:
          return 0;
      }
    }
  }
  else if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    return 0;
  }
  else
  {
    v7 = *((unsigned __int8 *)this + 8);
    v8 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
    if (v8 >= 0x80)
      v9 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    else
      v9 = 1;
    v6 = (v9 << (v7 == 10));
    switch(*((_BYTE *)this + 8))
    {
      case 1:
      case 6:
      case 0x10:
        return (v6 + 8);
      case 2:
      case 7:
      case 0xF:
        return (v6 + 4);
      case 3:
      case 4:
        v40 = (unint64_t)*this;
        goto LABEL_169;
      case 5:
      case 0xE:
        v41 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)this;
        if ((v41 & 0x80000000) == 0)
          goto LABEL_165;
        v42 = 10;
        goto LABEL_170;
      case 8:
        return (v6 + 1);
      case 9:
      case 0xC:
        v42 = AddrObjGoogle::protobuf::internal::WireFormatLite::StringSize((uint64_t)*this);
        goto LABEL_170;
      case 0xA:
        v42 = (*(uint64_t (**)(uint64_t *))(**this + 72))(*this);
        goto LABEL_170;
      case 0xB:
        v99 = **this;
        if ((*((_BYTE *)this + 10) & 0x10) != 0)
          v100 = *(uint64_t (**)(void))(v99 + 64);
        else
          v100 = *(uint64_t (**)(void))(v99 + 72);
        v102 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v100();
        v103 = (int)v102;
        if (v102 >= 0x80)
          v104 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v102);
        else
          v104 = 1;
        return (v103 + v6 + v104);
      case 0xD:
        v41 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)this;
        goto LABEL_165;
      case 0x11:
        v41 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((2 * *(_DWORD *)this) ^ (*(int *)this >> 31));
LABEL_165:
        if (v41 >= 0x80)
          v42 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v41);
        else
          v42 = 1;
        goto LABEL_170;
      case 0x12:
        v40 = (2 * (_QWORD)*this) ^ ((uint64_t)*this >> 63);
LABEL_169:
        v42 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64(v40);
LABEL_170:
        v6 = (v42 + v6);
        break;
      default:
        return v6;
    }
  }
  return v6;
}

void sub_1887396DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64(unint64_t this)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  if ((this & 0x8000000000000000) == 0)
    v1 = 9;
  else
    v1 = 10;
  if (HIBYTE(this))
    v2 = v1;
  else
    v2 = 8;
  if (this >> 49)
    v3 = v2;
  else
    v3 = 7;
  if (this >> 42)
    v4 = v3;
  else
    v4 = 6;
  if (this >> 28)
    v5 = 5;
  else
    v5 = 4;
  if (this >= 0x200000)
    v6 = v5;
  else
    v6 = 3;
  if (this >= 0x4000)
    v7 = v6;
  else
    v7 = 2;
  if (this >= 0x80)
    v8 = v7;
  else
    v8 = 1;
  if (this >> 35)
    return v4;
  else
    return v8;
}

unint64_t GEOABAssignmentResponseReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 116))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOABAssignmentResponseReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 112) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 116) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOABAssignmentResponseReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOABAssignmentResponseReadAllFrom_initialTag;
  Specified = GEOABAssignmentResponseReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOABAssignmentResponseCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
  return Specified;
}

void sub_1887398F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABAssignmentResponseReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  unsigned __int8 v20;
  int *v21;
  int *v22;
  int *v23;
  int *v24;
  char v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  BOOL v32;
  int v33;
  unint64_t v35;
  BOOL v36;
  int *v37;
  int v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  GEOABExperimentAssignment *v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  int v78;
  char v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  int v84;
  int v85;
  __int16 v86;
  void *v87;
  int v89;
  char v90;
  char v91;
  char v92;
  BOOL v93;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 116);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 112));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = *(unsigned __int16 *)(a1 + 128);
  v14 = ((v13 >> 5) & 1)
      + ((v13 >> 13) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(v13), (uint16x4_t)0xFFF7FFF9FFF5FFFALL), (int8x8_t)0x1000100010001))+ ((v13 >> 12) & 1)+ ((v13 >> 10) & 1)+ ((v13 >> 8) & 1));
  while (2)
  {
    v15 = 1;
    v16 = 1;
    v17 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v14;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v16 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v18 = v14 > 5;
        v19 = v18 & ~(_BYTE)v12 | v10;
        v20 = v18 | v12;
        v90 = v19;
        v91 = v20 | v19;
        if (((v20 | v9) & 1) != 0)
          v21 = 0;
        else
          v21 = a3;
        v22 = (int *)MEMORY[0x1E0D82BF0];
        v23 = (int *)MEMORY[0x1E0D82BC8];
        v92 = (v21 == 0) | v20;
        v93 = v20;
        v24 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v14;
LABEL_7:
        v15 = v10;
LABEL_8:
        v16 = v11;
        v17 = v12;
LABEL_10:
        ++v8;
        v10 = v15;
        v11 = v16;
        v12 = v17;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v22) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v23))
      goto LABEL_162;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    while (1)
    {
      v28 = *v22;
      v29 = *(_QWORD *)(v3 + v28);
      v30 = v29 + 1;
      if (v29 == -1 || v30 > *(_QWORD *)(v3 + *v7))
        break;
      v31 = *(_BYTE *)(*(_QWORD *)(v3 + *v24) + v29);
      *(_QWORD *)(v3 + v28) = v30;
      v27 |= (unint64_t)(v31 & 0x7F) << v25;
      if ((v31 & 0x80) == 0)
        goto LABEL_25;
      v25 += 7;
      v32 = v26++ >= 9;
      if (v32)
      {
        v27 = 0;
        v33 = *(unsigned __int8 *)(v3 + *v23);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v23) = 1;
LABEL_25:
    v33 = *(unsigned __int8 *)(v3 + *v23);
    if (*(_BYTE *)(v3 + *v23))
      v27 = 0;
LABEL_27:
    if (v33 || (v27 & 7) == 4)
    {
LABEL_162:
      v89 = 1;
      goto LABEL_163;
    }
    v35 = v27 >> 3;
    v36 = v93;
    if ((v92 & 1) == 0)
    {
      v37 = v21;
      do
      {
        v39 = *v37++;
        v38 = v39;
        v36 = v39 != 0;
        if (v39)
          v40 = v38 == (_DWORD)v35;
        else
          v40 = 1;
      }
      while (!v40);
    }
    switch((int)v35)
    {
      case 1:
        if (!v36)
          goto LABEL_122;
        if ((*(_WORD *)(a1 + 128) & 0x800) == 0)
        {
          PBReaderReadString();
          v41 = objc_claimAutoreleasedReturnValue();
          v42 = 80;
          goto LABEL_47;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_185;
        v83 = 16 * *(_WORD *)(a1 + 128);
        goto LABEL_156;
      case 2:
        if (!v36 || (*(_WORD *)(a1 + 128) & 0x40) != 0)
          goto LABEL_122;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_185;
        v44 = objc_alloc_init(GEOABExperimentAssignment);
        if (!GEOABExperimentAssignmentReadAllFrom((uint64_t)v44, (void *)v3, v11 & 1))
          goto LABEL_184;
        PBReaderRecallMark();
        -[GEOABAssignmentResponse _addNoFlagsAssignment:](a1, v44);

        goto LABEL_157;
      case 3:
        if ((v9 & 1) == 0)
          goto LABEL_122;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        *(_WORD *)(a1 + 128) |= 0x10u;
        while (2)
        {
          v48 = *v22;
          v49 = *(_QWORD *)(v3 + v48);
          v50 = v49 + 1;
          if (v49 == -1 || v50 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v23) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(v3 + *v24) + v49);
            *(_QWORD *)(v3 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              v32 = v46++ >= 9;
              if (v32)
              {
                v47 = 0;
                goto LABEL_127;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v23))
          v47 = 0;
LABEL_127:
        v80 = v47 != 0;
        v81 = 125;
        goto LABEL_132;
      case 4:
        if ((v9 & 1) == 0)
          goto LABEL_122;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        *(_WORD *)(a1 + 128) |= 8u;
        while (2)
        {
          v55 = *v22;
          v56 = *(_QWORD *)(v3 + v55);
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v23) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(v3 + *v24) + v56);
            *(_QWORD *)(v3 + v55) = v57;
            v54 |= (unint64_t)(v58 & 0x7F) << v52;
            if (v58 < 0)
            {
              v52 += 7;
              v32 = v53++ >= 9;
              if (v32)
              {
                v54 = 0;
                goto LABEL_131;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v23))
          v54 = 0;
LABEL_131:
        v80 = v54 != 0;
        v81 = 124;
LABEL_132:
        *(_BYTE *)(a1 + v81) = v80;
        goto LABEL_158;
      case 5:
        if ((v9 & 1) == 0)
          goto LABEL_122;
        v59 = 0;
        v60 = 0;
        v61 = 0;
        *(_WORD *)(a1 + 128) |= 2u;
        while (2)
        {
          v62 = *v22;
          v63 = *(_QWORD *)(v3 + v62);
          v64 = v63 + 1;
          if (v63 == -1 || v64 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v23) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(v3 + *v24) + v63);
            *(_QWORD *)(v3 + v62) = v64;
            v61 |= (unint64_t)(v65 & 0x7F) << v59;
            if (v65 < 0)
            {
              v59 += 7;
              v32 = v60++ >= 9;
              if (v32)
              {
                v61 = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v23))
          v61 = 0;
LABEL_136:
        v82 = 72;
        goto LABEL_141;
      case 6:
        if (!v36)
          goto LABEL_122;
        if ((*(_WORD *)(a1 + 128) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_185;
          v83 = *(_WORD *)(a1 + 128) << 8;
          goto LABEL_156;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_185;
        v44 = objc_alloc_init(GEOABClientConfig);
        if (!GEOABClientConfigReadAllFrom((uint64_t)v44, (void *)v3, v11 & 1))
          goto LABEL_184;
        PBReaderRecallMark();
        v66 = 40;
        goto LABEL_102;
      case 7:
        if (!v36)
          goto LABEL_122;
        if ((*(_WORD *)(a1 + 128) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_185;
          v83 = *(_WORD *)(a1 + 128) << 6;
          goto LABEL_156;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_185;
        v44 = objc_alloc_init(GEOABSecondPartyPlaceRequestClientMetaData);
        if (!GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom((uint64_t)v44, (void *)v3, v11 & 1))
          goto LABEL_184;
        PBReaderRecallMark();
        v66 = 56;
        goto LABEL_102;
      case 8:
        if (!v36)
          goto LABEL_122;
        if ((*(_WORD *)(a1 + 128) & 0x1000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_185;
          v83 = 8 * *(_WORD *)(a1 + 128);
          goto LABEL_156;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_185;
        v44 = objc_alloc_init(GEOABSecondPartyPlaceRequestClientMetaData);
        if (!GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom((uint64_t)v44, (void *)v3, v11 & 1))
          goto LABEL_184;
        PBReaderRecallMark();
        v66 = 88;
        goto LABEL_102;
      case 9:
        if (!v36)
          goto LABEL_122;
        if ((*(_WORD *)(a1 + 128) & 0x400) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_185;
          v83 = 32 * *(_WORD *)(a1 + 128);
          goto LABEL_156;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_185;
        v44 = objc_alloc_init(GEOABSecondPartyPlaceRequestClientMetaData);
        if (!GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom((uint64_t)v44, (void *)v3, v11 & 1))
          goto LABEL_184;
        PBReaderRecallMark();
        v66 = 64;
        goto LABEL_102;
      case 10:
        if (!v36)
          goto LABEL_122;
        if ((*(_WORD *)(a1 + 128) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_185;
          v83 = *(_WORD *)(a1 + 128) << 7;
LABEL_156:
          v8 += v83 >> 15;
          goto LABEL_157;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_185;
        v44 = objc_alloc_init(GEOABSecondPartyPlaceRequestClientMetaData);
        if (GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom((uint64_t)v44, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          v66 = 48;
LABEL_102:
          v43 = *(void **)(a1 + v66);
          *(_QWORD *)(a1 + v66) = v44;
LABEL_103:

          --v8;
LABEL_157:
          v23 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v24 = (int *)MEMORY[0x1E0D82BB8];
LABEL_158:
          if (!(v91 & 1 | (v8 != 0)))
            goto LABEL_162;
          continue;
        }
LABEL_184:

LABEL_185:
        v89 = 0;
        v23 = (int *)MEMORY[0x1E0D82BC8];
LABEL_163:
        if ((v90 & 1) != 0)
LABEL_164:
          *(_WORD *)(a1 + 128) |= 0x20u;
        if (v93 || (v89 & 1) == 0)
        {
          *(_WORD *)(a1 + 128) |= 0x800u;
          *(_WORD *)(a1 + 128) |= 0x40u;
          *(_WORD *)(a1 + 128) |= 0x80u;
          *(_WORD *)(a1 + 128) |= 0x200u;
          *(_WORD *)(a1 + 128) |= 0x1000u;
          *(_WORD *)(a1 + 128) |= 0x400u;
          *(_WORD *)(a1 + 128) |= 0x100u;
          *(_WORD *)(a1 + 128) |= 0x2000u;
        }
        else if (v21)
        {
          while (1)
          {
            v85 = *v21++;
            v84 = v85;
            v86 = 2048;
            switch(v85)
            {
              case 0:
                goto LABEL_178;
              case 1:
                goto LABEL_177;
              case 2:
                v86 = 64;
                goto LABEL_177;
              case 3:
              case 4:
              case 5:
                continue;
              case 6:
                v86 = 128;
                goto LABEL_177;
              case 7:
                v86 = 512;
                goto LABEL_177;
              case 8:
                v86 = 4096;
                goto LABEL_177;
              case 9:
                v86 = 1024;
                goto LABEL_177;
              case 10:
                v86 = 256;
                goto LABEL_177;
              default:
                if (v84 != 101)
                  continue;
                v86 = 0x2000;
LABEL_177:
                *(_WORD *)(a1 + 128) |= v86;
                break;
            }
          }
        }
LABEL_178:
        if (v89)
          v3 = *(_BYTE *)(v3 + *v23) == 0;
        else
          v3 = 0;
        if (v93)
        {
          v87 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 11:
        if ((v9 & 1) == 0)
          goto LABEL_122;
        v67 = 0;
        v68 = 0;
        v61 = 0;
        *(_WORD *)(a1 + 128) |= 1u;
        while (2)
        {
          v69 = *v22;
          v70 = *(_QWORD *)(v3 + v69);
          v71 = v70 + 1;
          if (v70 == -1 || v71 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v23) = 1;
          }
          else
          {
            v72 = *(_BYTE *)(*(_QWORD *)(v3 + *v24) + v70);
            *(_QWORD *)(v3 + v69) = v71;
            v61 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              v32 = v68++ >= 9;
              if (v32)
              {
                v61 = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v23))
          v61 = 0;
LABEL_140:
        v82 = 32;
LABEL_141:
        *(_QWORD *)(a1 + v82) = v61;
        goto LABEL_158;
      default:
        if ((_DWORD)v35 == 100)
        {
          if ((v9 & 1) != 0)
          {
            *(_WORD *)(a1 + 128) |= 4u;
            v73 = *v22;
            v74 = *(_QWORD *)(v3 + v73);
            if (v74 <= 0xFFFFFFFFFFFFFFF7 && v74 + 8 <= *(_QWORD *)(v3 + *v7))
            {
              v75 = *(_QWORD *)(*(_QWORD *)(v3 + *v24) + v74);
              *(_QWORD *)(v3 + v73) = v74 + 8;
            }
            else
            {
              *(_BYTE *)(v3 + *v23) = 1;
              v75 = 0;
            }
            *(_QWORD *)(a1 + 104) = v75;
            goto LABEL_158;
          }
LABEL_122:
          v79 = PBReaderSkipValueWithTag();
          v24 = (int *)MEMORY[0x1E0D82BB8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v23 = (int *)MEMORY[0x1E0D82BC8];
          if ((v79 & 1) == 0)
          {
            v89 = 0;
            goto LABEL_163;
          }
          goto LABEL_158;
        }
        if ((_DWORD)v35 == 101)
        {
          if (!v36)
            goto LABEL_122;
          if ((*(_WORD *)(a1 + 128) & 0x2000) == 0)
          {
            PBReaderReadString();
            v41 = objc_claimAutoreleasedReturnValue();
            v42 = 96;
LABEL_47:
            v43 = *(void **)(a1 + v42);
            *(_QWORD *)(a1 + v42) = v41;
            goto LABEL_103;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_185;
          v83 = 4 * *(_WORD *)(a1 + 128);
          goto LABEL_156;
        }
        if ((v90 & 1) == 0 || (*(_WORD *)(a1 + 128) & 0x20) != 0)
          goto LABEL_122;
        if (!*(_QWORD *)(a1 + 16))
        {
          v76 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v77 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v76;

        }
        v78 = PBUnknownFieldAdd();
        v23 = (int *)MEMORY[0x1E0D82BC8];
        v7 = (int *)MEMORY[0x1E0D82BD8];
        v24 = (int *)MEMORY[0x1E0D82BB8];
        if (!v78)
        {
          v89 = 0;
          goto LABEL_164;
        }
        goto LABEL_158;
    }
  }
}

unint64_t GEOABClientConfigReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOABClientConfigReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOABClientConfigReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOABClientConfigReadAllFrom_initialTag;
  Specified = GEOABClientConfigReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOABClientConfigCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_18873A70C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABClientConfigReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  GEOABConfigKeyValuePair *v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  int v47;
  char v48;
  void *v49;
  int v51;
  int *v52;
  char v53;
  char v54;
  char v55;
  BOOL v56;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v53 = v17;
        v19 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v56 = v18;
        v54 = v19;
        v55 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_67;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_67:
      v51 = 1;
      goto LABEL_68;
    }
    v34 = v26 >> 3;
    v35 = v56;
    if ((v55 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    if ((_DWORD)v34 == 3)
      break;
    if ((_DWORD)v34 == 2)
    {
      if (v35)
      {
        if ((*(_BYTE *)(a1 + 60) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_85;
          v7 += *(unsigned __int8 *)(a1 + 60) << 30 >> 31;
        }
        else
        {
          PBReaderReadString();
          v41 = objc_claimAutoreleasedReturnValue();
          v42 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v41;

          --v7;
        }
        goto LABEL_65;
      }
    }
    else if ((_DWORD)v34 == 1)
    {
      if (v35 && (*(_BYTE *)(a1 + 60) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_85;
        v40 = objc_alloc_init(GEOABConfigKeyValuePair);
        if (!GEOABConfigKeyValuePairReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
          goto LABEL_84;
        PBReaderRecallMark();
        -[GEOABClientConfig _addNoFlagsConfigKeyValue:](a1, v40);
LABEL_51:

LABEL_65:
        v22 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_66;
      }
    }
    else if ((v53 & 1) != 0 && (*(_BYTE *)(a1 + 60) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v44 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v43;

      }
      v45 = PBUnknownFieldAdd();
      v22 = (int *)MEMORY[0x1E0D82BC8];
      if (!v45)
      {
        v51 = 0;
        v52 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
        goto LABEL_70;
      }
      goto LABEL_66;
    }
LABEL_61:
    v46 = PBReaderSkipValueWithTag();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if ((v46 & 1) == 0)
    {
      v51 = 0;
LABEL_68:
      v52 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
      goto LABEL_69;
    }
LABEL_66:
    if (!(v54 & 1 | (v7 != 0)))
      goto LABEL_67;
  }
  if (!v35 || (*(_BYTE *)(a1 + 60) & 8) != 0)
    goto LABEL_61;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_85;
  v40 = objc_alloc_init(GEOABClientDebugPanelExperimentBranch);
  if (GEOABClientDebugPanelExperimentBranchReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOABClientConfig _addNoFlagsDebugExperimentBranch:](a1, v40);
    goto LABEL_51;
  }
LABEL_84:

LABEL_85:
  v51 = 0;
  v52 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_69:
  if ((v53 & 1) == 0)
    goto LABEL_71;
LABEL_70:
  *(_BYTE *)(a1 + v52[412]) |= 1u;
LABEL_71:
  if (v56 || (v51 & 1) == 0)
  {
    *(_BYTE *)(a1 + v52[412]) |= 4u;
    *(_BYTE *)(a1 + v52[412]) |= 2u;
    *(_BYTE *)(a1 + v52[412]) |= 8u;
  }
  else if (v20)
  {
    while (1)
    {
      v47 = *v20++;
      v48 = 4;
      switch(v47)
      {
        case 0:
          goto LABEL_78;
        case 1:
          goto LABEL_77;
        case 2:
          v48 = 2;
          goto LABEL_77;
        case 3:
          v48 = 8;
LABEL_77:
          *(_BYTE *)(a1 + v52[412]) |= v48;
          break;
        default:
          continue;
      }
    }
  }
LABEL_78:
  if (v51)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v56)
  {
    v49 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_18873B05C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18873B114(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18873B1FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOStyleAttributesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_38;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8)
            continue;
          goto LABEL_35;
        }
        a1[*v4] = 1;
      }
      else if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOStyleAttributeIsValid(a1))
        {
LABEL_38:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_38;
      }
LABEL_35:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

BOOL GEOStyleAttributeIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_39;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_39;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_41;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0)
          {
            v21 = v16++ > 8;
            if (!v21)
              continue;
          }
          goto LABEL_38;
        }
LABEL_36:
        a1[*v4] = 1;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        v27 = 0;
        goto LABEL_40;
      }
LABEL_38:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_39;
    }
    if ((v8 & 7) != 0)
      goto LABEL_41;
    v22 = 0;
    while (1)
    {
      v23 = *v2;
      v24 = *(_QWORD *)&a1[v23];
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
        goto LABEL_36;
      v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
      *(_QWORD *)&a1[v23] = v25;
      if (v26 < 0)
      {
        v21 = v22++ > 8;
        if (!v21)
          continue;
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  v27 = a1[*v4] == 0;
LABEL_40:
  PBReaderRecallMark();
  return v27;
}

void sub_18873C428(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOResourcesPath(void *a1)
{
  void *v1;
  void *v2;

  GEOResourceCachesDirectory(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("Resources"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_18873C54C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOResourceManifestPath(void *a1)
{
  void *v1;
  void *v2;

  GEOResourceCachesDirectory(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("ResourceManifest.pbd"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_18873C6F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18873DD3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18873DF8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18873E210(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void geo::DbReaderTarFileDescriptor::~DbReaderTarFileDescriptor(geo::DbReaderTarFileDescriptor *this)
{
  void *v2;
  size_t v3;
  int v4;

  *(_QWORD *)this = &off_1E1BF67E0;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 4);
    if (v3)
      munmap(v2, v3);
  }
  v4 = *((_DWORD *)this + 2);
  if ((v4 & 0x80000000) == 0)
    close(v4);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::~__hash_table((uint64_t)this + 40);

}

{
  geo::DbReaderTarFileDescriptor::~DbReaderTarFileDescriptor(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t GEOPDAnalyticMetadataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 140))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDAnalyticMetadataReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 136) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 140) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDAnalyticMetadataReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDAnalyticMetadataReadAllFrom_initialTag;
  Specified = GEOPDAnalyticMetadataReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDAnalyticMetadataCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  return Specified;
}

void sub_18873E54C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDAnalyticMetadataReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const float *v12;
  uint32x4_t v13;
  int8x16_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  unsigned __int8 v21;
  int *v22;
  int *v23;
  int *v24;
  int *v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  BOOL v33;
  int v34;
  unint64_t v36;
  BOOL v37;
  int *v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  id v71;
  void *v72;
  int v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  GEOGeoServiceTag *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  char v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  void *v107;
  int v109;
  char v110;
  char v111;
  char v112;
  char v113;
  BOOL v114;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 144));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 140);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 136));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (const float *)(a1 + 164);
  v13 = (uint32x4_t)vld1q_dup_f32(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  v15 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CDA230), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CDA240), v14)), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CDA250), v14)));
  while (2)
  {
    v16 = 1;
    v17 = 1;
    v18 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v17 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v19 = v15 > 7;
        v20 = v19 & ~(_BYTE)v11 | v9;
        v21 = v19 | v11;
        v110 = v20;
        v111 = v8;
        v112 = v21 | v20;
        if (((v21 | v8) & 1) != 0)
          v22 = 0;
        else
          v22 = a3;
        v23 = (int *)MEMORY[0x1E0D82BF0];
        v24 = (int *)MEMORY[0x1E0D82BC8];
        v113 = (v22 == 0) | v21;
        v114 = v21;
        v25 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v15;
LABEL_7:
        v16 = v9;
LABEL_8:
        v17 = v10;
        v18 = v11;
LABEL_10:
        ++v7;
        v9 = v16;
        v10 = v17;
        v11 = v18;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v23) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v24))
      goto LABEL_209;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    while (1)
    {
      v29 = *v23;
      v30 = *(_QWORD *)(v3 + v29);
      v31 = v30 + 1;
      if (v30 == -1 || v31 > *(_QWORD *)(v3 + *v6))
        break;
      v32 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v30);
      *(_QWORD *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0)
        goto LABEL_25;
      v26 += 7;
      v33 = v27++ >= 9;
      if (v33)
      {
        v28 = 0;
        v34 = *(unsigned __int8 *)(v3 + *v24);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v24) = 1;
LABEL_25:
    v34 = *(unsigned __int8 *)(v3 + *v24);
    if (*(_BYTE *)(v3 + *v24))
      v28 = 0;
LABEL_27:
    if (v34 || (v28 & 7) == 4)
    {
LABEL_209:
      v109 = 1;
      goto LABEL_210;
    }
    v36 = v28 >> 3;
    v37 = v114;
    if ((v113 & 1) == 0)
    {
      v38 = v22;
      do
      {
        v40 = *v38++;
        v39 = v40;
        v37 = v40 != 0;
        if (v40)
          v41 = v39 == (_DWORD)v36;
        else
          v41 = 1;
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        if (!v37)
          goto LABEL_151;
        if ((*(_BYTE *)(a1 + 165) & 8) == 0)
        {
          PBReaderReadString();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = 48;
          goto LABEL_149;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_234;
        v104 = (int)(*(_DWORD *)(a1 + 164) << 20) >> 31;
        goto LABEL_203;
      case 2:
        if (!v37)
          goto LABEL_151;
        if ((*(_BYTE *)(a1 + 165) & 0x10) == 0)
        {
          PBReaderReadString();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = 56;
          goto LABEL_149;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_234;
        v104 = (int)(*(_DWORD *)(a1 + 164) << 19) >> 31;
        goto LABEL_203;
      case 3:
        if (!v37)
          goto LABEL_151;
        if ((*(_BYTE *)(a1 + 165) & 0x20) == 0)
        {
          PBReaderReadString();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = 64;
          goto LABEL_149;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_234;
        v104 = (int)(*(_DWORD *)(a1 + 164) << 18) >> 31;
        goto LABEL_203;
      case 4:
        if (!v37)
          goto LABEL_151;
        if ((*(_BYTE *)(a1 + 165) & 0x80) == 0)
        {
          PBReaderReadString();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = 80;
          goto LABEL_149;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_234;
        v104 = (int)(*(_DWORD *)(a1 + 164) << 16) >> 31;
        goto LABEL_203;
      case 5:
        if (!v37)
          goto LABEL_151;
        if ((*(_BYTE *)(a1 + 166) & 2) == 0)
        {
          PBReaderReadString();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = 96;
          goto LABEL_149;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_234;
        v104 = (int)(*(_DWORD *)(a1 + 164) << 14) >> 31;
        goto LABEL_203;
      case 6:
        if ((v111 & 1) == 0)
          goto LABEL_151;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_DWORD *)(a1 + 164) |= 0x80u;
        while (2)
        {
          v47 = *v23;
          v48 = *(_QWORD *)(v3 + v47);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v48);
            *(_QWORD *)(v3 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              v33 = v45++ >= 9;
              if (v33)
              {
                v46 = 0;
                goto LABEL_156;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          v46 = 0;
LABEL_156:
        v101 = v46 != 0;
        v102 = 162;
        goto LABEL_177;
      case 7:
        if ((v111 & 1) == 0)
          goto LABEL_151;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        *(_DWORD *)(a1 + 164) |= 0x40u;
        while (2)
        {
          v54 = *v23;
          v55 = *(_QWORD *)(v3 + v54);
          v56 = v55 + 1;
          if (v55 == -1 || v56 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v55);
            *(_QWORD *)(v3 + v54) = v56;
            v53 |= (unint64_t)(v57 & 0x7F) << v51;
            if (v57 < 0)
            {
              v51 += 7;
              v33 = v52++ >= 9;
              if (v33)
              {
                v53 = 0;
                goto LABEL_160;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          v53 = 0;
LABEL_160:
        v101 = v53 != 0;
        v102 = 161;
        goto LABEL_177;
      case 8:
        if ((v111 & 1) == 0)
          goto LABEL_151;
        if (!PBReaderPlaceMark() || (GEOSessionIDReadAllFrom((_QWORD *)(a1 + 24), v3) & 1) == 0)
          goto LABEL_234;
        PBReaderRecallMark();
        *(_DWORD *)(a1 + 164) |= 1u;
        goto LABEL_204;
      case 9:
        if ((v111 & 1) == 0)
          goto LABEL_151;
        v58 = 0;
        v59 = 0;
        v60 = 0;
        *(_DWORD *)(a1 + 164) |= 0x10u;
        while (2)
        {
          v61 = *v23;
          v62 = *(_QWORD *)(v3 + v61);
          v63 = v62 + 1;
          if (v62 == -1 || v63 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v62);
            *(_QWORD *)(v3 + v61) = v63;
            v60 |= (unint64_t)(v64 & 0x7F) << v58;
            if (v64 < 0)
            {
              v58 += 7;
              v33 = v59++ >= 9;
              if (v33)
              {
                LODWORD(v60) = 0;
                goto LABEL_164;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          LODWORD(v60) = 0;
LABEL_164:
        v103 = 156;
        goto LABEL_182;
      case 10:
        if ((v111 & 1) == 0)
          goto LABEL_151;
        v65 = 0;
        v66 = 0;
        v60 = 0;
        *(_DWORD *)(a1 + 164) |= 4u;
        while (2)
        {
          v67 = *v23;
          v68 = *(_QWORD *)(v3 + v67);
          v69 = v68 + 1;
          if (v68 == -1 || v69 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v70 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v68);
            *(_QWORD *)(v3 + v67) = v69;
            v60 |= (unint64_t)(v70 & 0x7F) << v65;
            if (v70 < 0)
            {
              v65 += 7;
              v33 = v66++ >= 9;
              if (v33)
              {
                LODWORD(v60) = 0;
                goto LABEL_168;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          LODWORD(v60) = 0;
LABEL_168:
        v103 = 148;
        goto LABEL_182;
      case 12:
        if ((v111 & 1) == 0)
          goto LABEL_151;
        v74 = 0;
        v75 = 0;
        v76 = 0;
        *(_DWORD *)(a1 + 164) |= 0x20u;
        while (2)
        {
          v77 = *v23;
          v78 = *(_QWORD *)(v3 + v77);
          v79 = v78 + 1;
          if (v78 == -1 || v79 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v80 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v78);
            *(_QWORD *)(v3 + v77) = v79;
            v76 |= (unint64_t)(v80 & 0x7F) << v74;
            if (v80 < 0)
            {
              v74 += 7;
              v33 = v75++ >= 9;
              if (v33)
              {
                v76 = 0;
                goto LABEL_172;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          v76 = 0;
LABEL_172:
        v101 = v76 != 0;
        v102 = 160;
        goto LABEL_177;
      case 13:
        if (!v37 || (*(_BYTE *)(a1 + 166) & 0x10) != 0)
          goto LABEL_151;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_234;
        v81 = objc_alloc_init(GEOGeoServiceTag);
        if (!GEOGeoServiceTagReadAllFrom((uint64_t)v81, (void *)v3))
          goto LABEL_233;
        PBReaderRecallMark();
        -[GEOPDAnalyticMetadata _addNoFlagsServiceTag:](a1, v81);

        goto LABEL_204;
      case 14:
        if (!v37)
          goto LABEL_151;
        if ((*(_BYTE *)(a1 + 166) & 4) == 0)
        {
          PBReaderReadString();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = 104;
          goto LABEL_149;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_234;
        v104 = (int)(*(_DWORD *)(a1 + 164) << 13) >> 31;
        goto LABEL_203;
      case 15:
        if (!v37)
          goto LABEL_151;
        if ((*(_BYTE *)(a1 + 166) & 1) == 0)
        {
          PBReaderReadString();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = 88;
          goto LABEL_149;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_234;
        v104 = (int)(*(_DWORD *)(a1 + 164) << 15) >> 31;
        goto LABEL_203;
      case 16:
        if (!v37)
          goto LABEL_151;
        if ((*(_BYTE *)(a1 + 165) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_234;
          v104 = (int)(*(_DWORD *)(a1 + 164) << 21) >> 31;
          goto LABEL_203;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_234;
        v81 = objc_alloc_init(GEOAbAssignInfo);
        if (!GEOAbAssignInfoReadAllFrom((uint64_t)v81, (void *)v3))
          goto LABEL_233;
        PBReaderRecallMark();
        v82 = 40;
        goto LABEL_125;
      case 17:
        if (!v37)
          goto LABEL_151;
        if ((*(_BYTE *)(a1 + 166) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_234;
          v104 = (int)(*(_DWORD *)(a1 + 164) << 12) >> 31;
LABEL_203:
          v7 += v104;
LABEL_204:
          v24 = (int *)MEMORY[0x1E0D82BC8];
          v25 = (int *)MEMORY[0x1E0D82BB8];
LABEL_205:
          if (!(v112 & 1 | (v7 != 0)))
            goto LABEL_209;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_234;
        v81 = objc_alloc_init(GEOLocalTime);
        if (GEOLocalTimeReadAllFrom((uint64_t)v81, (void *)v3))
        {
          PBReaderRecallMark();
          v82 = 120;
LABEL_125:
          v83 = *(void **)(a1 + v82);
          *(_QWORD *)(a1 + v82) = v81;
LABEL_150:

          --v7;
          goto LABEL_204;
        }
LABEL_233:

LABEL_234:
        v109 = 0;
        v24 = (int *)MEMORY[0x1E0D82BC8];
LABEL_210:
        if ((v110 & 1) != 0)
LABEL_211:
          *(_DWORD *)(a1 + 164) |= 0x200u;
        if (v114 || (v109 & 1) == 0)
        {
          *(_DWORD *)(a1 + 164) |= 0x800u;
          *(_DWORD *)(a1 + 164) |= 0x1000u;
          *(_DWORD *)(a1 + 164) |= 0x2000u;
          *(_DWORD *)(a1 + 164) |= 0x8000u;
          *(_DWORD *)(a1 + 164) |= 0x4000u;
          *(_DWORD *)(a1 + 164) |= 0x20000u;
          *(_DWORD *)(a1 + 164) |= 0x100000u;
          *(_DWORD *)(a1 + 164) |= 0x40000u;
          *(_DWORD *)(a1 + 164) |= 0x10000u;
          *(_DWORD *)(a1 + 164) |= 0x400u;
          *(_DWORD *)(a1 + 164) |= 0x80000u;
        }
        else if (v22)
        {
          while (1)
          {
            v105 = *v22++;
            v106 = 2048;
            switch(v105)
            {
              case 0:
                goto LABEL_227;
              case 1:
                goto LABEL_226;
              case 2:
                v106 = 4096;
                goto LABEL_226;
              case 3:
                v106 = 0x2000;
                goto LABEL_226;
              case 4:
                v106 = 0x8000;
                goto LABEL_226;
              case 5:
                v106 = 0x20000;
                goto LABEL_226;
              case 13:
                v106 = 0x100000;
                goto LABEL_226;
              case 14:
                v106 = 0x40000;
                goto LABEL_226;
              case 15:
                v106 = 0x10000;
                goto LABEL_226;
              case 16:
                v106 = 1024;
                goto LABEL_226;
              case 17:
                v106 = 0x80000;
                goto LABEL_226;
              case 21:
                v106 = 0x4000;
LABEL_226:
                *(_DWORD *)(a1 + 164) |= v106;
                break;
              default:
                continue;
            }
          }
        }
LABEL_227:
        if (v109)
          v3 = *(_BYTE *)(v3 + *v24) == 0;
        else
          v3 = 0;
        if (v114)
        {
          v107 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 18:
        if ((v111 & 1) == 0)
          goto LABEL_151;
        *(_DWORD *)(a1 + 164) |= 2u;
        v84 = *v23;
        v85 = *(_QWORD *)(v3 + v84);
        if (v85 <= 0xFFFFFFFFFFFFFFF7 && v85 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v86 = *(_QWORD *)(*(_QWORD *)(v3 + *v25) + v85);
          *(_QWORD *)(v3 + v84) = v85 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v24) = 1;
          v86 = 0;
        }
        *(_QWORD *)(a1 + 112) = v86;
        goto LABEL_205;
      case 19:
        if ((v111 & 1) == 0)
          goto LABEL_151;
        v87 = 0;
        v88 = 0;
        v89 = 0;
        *(_DWORD *)(a1 + 164) |= 0x100u;
        while (2)
        {
          v90 = *v23;
          v91 = *(_QWORD *)(v3 + v90);
          v92 = v91 + 1;
          if (v91 == -1 || v92 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v93 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v91);
            *(_QWORD *)(v3 + v90) = v92;
            v89 |= (unint64_t)(v93 & 0x7F) << v87;
            if (v93 < 0)
            {
              v87 += 7;
              v33 = v88++ >= 9;
              if (v33)
              {
                v89 = 0;
                goto LABEL_176;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          v89 = 0;
LABEL_176:
        v101 = v89 != 0;
        v102 = 163;
LABEL_177:
        *(_BYTE *)(a1 + v102) = v101;
        goto LABEL_205;
      case 20:
        if ((v111 & 1) == 0)
          goto LABEL_151;
        v94 = 0;
        v95 = 0;
        v60 = 0;
        *(_DWORD *)(a1 + 164) |= 8u;
        while (2)
        {
          v96 = *v23;
          v97 = *(_QWORD *)(v3 + v96);
          v98 = v97 + 1;
          if (v97 == -1 || v98 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v99 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v97);
            *(_QWORD *)(v3 + v96) = v98;
            v60 |= (unint64_t)(v99 & 0x7F) << v94;
            if (v99 < 0)
            {
              v94 += 7;
              v33 = v95++ >= 9;
              if (v33)
              {
                LODWORD(v60) = 0;
                goto LABEL_181;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          LODWORD(v60) = 0;
LABEL_181:
        v103 = 152;
LABEL_182:
        *(_DWORD *)(a1 + v103) = v60;
        goto LABEL_205;
      case 21:
        if (!v37)
          goto LABEL_151;
        if ((*(_BYTE *)(a1 + 165) & 0x40) == 0)
        {
          PBReaderReadString();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = 72;
LABEL_149:
          v83 = *(void **)(a1 + v43);
          *(_QWORD *)(a1 + v43) = v42;
          goto LABEL_150;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_234;
        v104 = (int)(*(_DWORD *)(a1 + 164) << 17) >> 31;
        goto LABEL_203;
      default:
        if ((v110 & 1) == 0 || (*(_BYTE *)(a1 + 165) & 2) != 0)
        {
LABEL_151:
          v100 = PBReaderSkipValueWithTag();
          v25 = (int *)MEMORY[0x1E0D82BB8];
          v24 = (int *)MEMORY[0x1E0D82BC8];
          if ((v100 & 1) == 0)
          {
            v109 = 0;
            goto LABEL_210;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v71 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v72 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v71;

          }
          v73 = PBUnknownFieldAdd();
          v24 = (int *)MEMORY[0x1E0D82BC8];
          v25 = (int *)MEMORY[0x1E0D82BB8];
          if (!v73)
          {
            v109 = 0;
            goto LABEL_211;
          }
        }
        goto LABEL_205;
    }
  }
}

unint64_t GEOPDPlaceRequestParametersReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 468))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDPlaceRequestParametersReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 472));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 464) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 468) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDPlaceRequestParametersReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDPlaceRequestParametersReadAllFrom_initialTag;
  Specified = GEOPDPlaceRequestParametersReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDPlaceRequestParametersCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 472));
  return Specified;
}

void sub_18873F6B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceRequestParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x16_t v13;
  uint64x2_t v14;
  uint32x4_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  unsigned __int8 v22;
  char v23;
  int *v24;
  int *v25;
  int *v26;
  int *v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  int v36;
  unint64_t v38;
  BOOL v39;
  int *v40;
  int v41;
  int v42;
  BOOL v43;
  GEOPDSearchParameters *v44;
  uint64_t v45;
  id v46;
  void *v47;
  int v48;
  void *v49;
  char v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  void *v54;
  int v56;
  char v57;
  char v58;
  char v59;
  BOOL v60;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 472));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 468);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 464));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = *(_QWORD *)(a1 + 476);
  v13.i64[0] = 0x100000001;
  v13.i64[1] = 0x100000001;
  v14 = (uint64x2_t)vdupq_n_s64(v12);
  v15 = (uint32x4_t)vdupq_n_s32(v12);
  v16 = vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_189CC9F60), (int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_189CC9F50)), v13), (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_189CC9F20), (int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_189CC9F10)), v13)))+ ((v12 >> 2) & 1)+ ((v12 >> 3) & 1)+ ((v12 >> 4) & 1)+ ((v12 >> 39) & 1)+ ((v12 >> 34) & 1)+ ((v12 >> 28) & 1)+ ((v12 >> 52) & 1)+ (BYTE4(v12) & 1)
      + ((v12 >> 53) & 1)
      + ((v12 >> 11) & 1)
      + ((v12 >> 22) & 1)
      + (BYTE3(v12) & 1)
      + ((v12 >> 55) & 1)
      + ((v12 >> 12) & 1)
      + ((v12 >> 47) & 1)
      + vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v15, (uint32x4_t)xmmword_189CC9E90), v13))
      + (v12 >> 31)
      + ((v12 >> 1) & 1)
      + ((v12 >> 30) & 1)
      + ((v12 >> 54) & 1)
      + ((v12 >> 9) & 1)
      + ((v12 >> 35) & 1)
      + ((v12 >> 29) & 1)
      + ((v12 >> 33) & 1)
      + ((v12 >> 42) & 1)
      + ((v12 >> 14) & 1)
      + ((v12 >> 45) & 1)
      + ((v12 >> 21) & 1)
      + (v12 & 1)
      + vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_189CC9ED0), (int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_189CC9F40)), v13), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v15, (uint32x4_t)xmmword_189CC9EB0), v13)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v15, (uint32x4_t)xmmword_189CC9F30), v13), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v15, (uint32x4_t)xmmword_189CC9E60), v13))));
  while (2)
  {
    v17 = 1;
    v18 = 1;
    v19 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v16;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v18 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v20 = v16 > 0x2B;
        v21 = v20 & ~(_BYTE)v11;
        v22 = v20 | v11;
        v57 = v21 | v9;
        v23 = v22 | v21 | v9;
        if (((v22 | v8) & 1) != 0)
          v24 = 0;
        else
          v24 = a3;
        v60 = v22;
        v58 = v23;
        v59 = (v24 == 0) | v22;
        v25 = (int *)MEMORY[0x1E0D82BF0];
        v26 = (int *)MEMORY[0x1E0D82BC8];
        v27 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v16;
LABEL_7:
        v17 = v9;
LABEL_8:
        v18 = v10;
        v19 = v11;
LABEL_10:
        ++v7;
        v9 = v17;
        v10 = v18;
        v11 = v19;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v25) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v26))
      goto LABEL_436;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    while (1)
    {
      v31 = *v25;
      v32 = *(_QWORD *)(v3 + v31);
      v33 = v32 + 1;
      if (v32 == -1 || v33 > *(_QWORD *)(v3 + *v6))
        break;
      v34 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v32);
      *(_QWORD *)(v3 + v31) = v33;
      v30 |= (unint64_t)(v34 & 0x7F) << v28;
      if ((v34 & 0x80) == 0)
        goto LABEL_25;
      v28 += 7;
      if (v29++ >= 9)
      {
        v30 = 0;
        v36 = *(unsigned __int8 *)(v3 + *v26);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v26) = 1;
LABEL_25:
    v36 = *(unsigned __int8 *)(v3 + *v26);
    if (*(_BYTE *)(v3 + *v26))
      v30 = 0;
LABEL_27:
    if (v36 || (v30 & 7) == 4)
    {
LABEL_436:
      v56 = 1;
      goto LABEL_437;
    }
    v38 = v30 >> 3;
    v39 = v60;
    if ((v59 & 1) == 0)
    {
      v40 = v24;
      do
      {
        v42 = *v40++;
        v41 = v42;
        v39 = v42 != 0;
        if (v42)
          v43 = v41 == (_DWORD)v38;
        else
          v43 = 1;
      }
      while (!v43);
    }
    switch((int)v38)
    {
      case 1:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 481) & 0x20) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_505;
          v44 = objc_alloc_init(GEOPDSearchParameters);
          if (GEOPDSearchParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            v45 = 376;
            goto LABEL_320;
          }
          goto LABEL_504;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_505;
        v51 = *(_QWORD *)(a1 + 476) << 18;
        goto LABEL_433;
      case 2:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 478) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 42;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDGeocodingParameters);
        if (!GEOPDGeocodingParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 184;
        goto LABEL_320;
      case 3:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 477) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 49;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDCanonicalLocationSearchParameters);
        if (!GEOPDCanonicalLocationSearchParametersReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 128;
        goto LABEL_320;
      case 4:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 481) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 21;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDReverseGeocodingParameters);
        if (!GEOPDReverseGeocodingParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 352;
        goto LABEL_320;
      case 5:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 480) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 30;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDPlaceLookupParameters);
        if (!GEOPDPlaceLookupParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 280;
        goto LABEL_320;
      case 6:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 479) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 34;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDMerchantLookupParameters);
        if (!GEOPDMerchantLookupParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 248;
        goto LABEL_320;
      case 7:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 480) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 28;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDPlaceRefinementParameters);
        if (!GEOPDPlaceRefinementParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 296;
        goto LABEL_320;
      case 8:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 482) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 15;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDSiriSearchParameters);
        if (!GEOPDSiriSearchParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 400;
        goto LABEL_320;
      case 9:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 479) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 38;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDLocationDirectedSearchParameters);
        if (!GEOPDLocationDirectedSearchParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 216;
        goto LABEL_320;
      case 10:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 476) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 57;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDAutocompleteParameters);
        if (!GEOPDAutocompleteParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 64;
        goto LABEL_320;
      case 11:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 477) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 50;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDSearchBrowseCategorySuggestionParameters);
        if (!GEOPDSearchBrowseCategorySuggestionParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 120;
        goto LABEL_320;
      case 12:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 477) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 48;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDCategorySearchParameters);
        if (!GEOPDCategorySearchParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 136;
        goto LABEL_320;
      case 13:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 480) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 25;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDPopularNearbySearchParameters);
        if (!GEOPDPopularNearbySearchParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 320;
        goto LABEL_320;
      case 14:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 481) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 17;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDSearchZeroKeywordCategorySuggestionParameters);
        if (!GEOPDSearchZeroKeywordCategorySuggestionParametersReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 384;
        goto LABEL_320;
      case 15:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 481) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 19;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDSearchFieldPlaceholderParameters);
        if (!GEOPDSearchFieldPlaceholderParametersReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 368;
        goto LABEL_320;
      case 16:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 477) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 54;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDBatchPopularNearbySearchParameters);
        if (!GEOPDBatchPopularNearbySearchParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 88;
        goto LABEL_320;
      case 17:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 482) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 9;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDVendorSpecificPlaceRefinementParameters);
        if (!GEOPDVendorSpecificPlaceRefinementParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 448;
        goto LABEL_320;
      case 18:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 479) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 33;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDNearbySearchParameters);
        if (!GEOPDNearbySearchParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 256;
        goto LABEL_320;
      case 19:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 476) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 62;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDAddressObjectGeocodingParameters);
        if (!GEOPDAddressObjectGeocodingParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 24;
        goto LABEL_320;
      case 20:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 481) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 16;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDSearchZeroKeywordWithSearchResultsSuggestionParameters);
        if (!GEOPDSearchZeroKeywordWithSearchResultsSuggestionParametersReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 392;
        goto LABEL_320;
      case 21:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 478) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 44;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDExternalTransitLookupParameters);
        if (!GEOPDExternalTransitLookupParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 168;
        goto LABEL_320;
      case 22:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 478) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 43;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDFeatureIdGeocodingParameters);
        if (!GEOPDFeatureIdGeocodingParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 176;
        goto LABEL_320;
      case 23:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 479) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 36;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDMapsIdentifierPlaceLookupParameters);
        if (!GEOPDMapsIdentifierPlaceLookupParametersReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 232;
        goto LABEL_320;
      case 25:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 477) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 53;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDBatchReverseGeocodingParameters);
        if (!GEOPDBatchReverseGeocodingParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 96;
        goto LABEL_320;
      case 30:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 477) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 51;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDBrandLookupParameters);
        if (!GEOPDBrandLookupParametersReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 112;
        goto LABEL_320;
      case 32:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 482) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 8;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDWifiFingerprintParameters);
        if (!GEOPDWifiFingerprintParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 456;
        goto LABEL_320;
      case 34:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 479) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 39;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDIpGeoLookupParameters);
        if (!GEOPDIpGeoLookupParametersReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 208;
        goto LABEL_320;
      case 35:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 478) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 41;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDGroundViewLabelParameters);
        if (!GEOPDGroundViewLabelParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 192;
        goto LABEL_320;
      case 36:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 477) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 52;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDBatchSpatialLookupParameters);
        if (!GEOPDBatchSpatialLookupParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 104;
        goto LABEL_320;
      case 37:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 482) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 10;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDTransitVehiclePositionParameters);
        if (!GEOPDTransitVehiclePositionParametersReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 440;
        goto LABEL_320;
      case 38:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 480) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 31;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDPlaceCollectionLookupParameters);
        if (!GEOPDPlaceCollectionLookupParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 272;
        goto LABEL_320;
      case 39:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 482) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 11;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPBTransitScheduleLookupParameters);
        if (!GEOPBTransitScheduleLookupParametersReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 432;
        goto LABEL_320;
      case 40:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 476) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 56;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDBatchCategoryLookupParameters);
        if (!GEOPDBatchCategoryLookupParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 72;
        goto LABEL_320;
      case 41:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 477) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 55;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDBatchMerchantLookupBrandParameters);
        if (!GEOPDBatchMerchantLookupBrandParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 80;
        goto LABEL_320;
      case 42:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 478) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 47;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDChildPlaceLookupByCategoryParameters);
        if (!GEOPDChildPlaceLookupByCategoryParametersReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 144;
        goto LABEL_320;
      case 43:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 478) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 46;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDCollectionSuggestionParameters);
        if (!GEOPDCollectionSuggestionParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 152;
        goto LABEL_320;
      case 44:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 479) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 35;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDMapsSearchHomeParameters);
        if (!GEOPDMapsSearchHomeParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 240;
        goto LABEL_320;
      case 45:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 480) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 29;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDPlaceQuestionnaireLookupParameters);
        if (!GEOPDPlaceQuestionnaireLookupParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 288;
        goto LABEL_320;
      case 46:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 480) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 24;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDPublisherViewParameters);
        if (!GEOPDPublisherViewParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 328;
        goto LABEL_320;
      case 47:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 476) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 59;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDAllCollectionsViewParameters);
        if (!GEOPDAllCollectionsViewParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 48;
        goto LABEL_320;
      case 48:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 476) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 60;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDAirportEntityPlaceLookupParameters);
        if (!GEOPDAirportEntityPlaceLookupParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 40;
        goto LABEL_320;
      case 49:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 482) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 14;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDTerritoryLookupParameters);
        if (!GEOPDTerritoryLookupParametersReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 408;
        goto LABEL_320;
      case 50:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 482) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 12;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDTransitNearbyScheduleLookupParameters);
        if (!GEOPDTransitNearbyScheduleLookupParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 424;
        goto LABEL_320;
      case 51:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 479) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 37;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDMapsHomeParameters);
        if (!GEOPDMapsHomeParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 224;
        goto LABEL_320;
      case 52:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 476) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 58;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDAllGuidesLocationsViewParameters);
        if (!GEOPDAllGuidesLocationsViewParametersReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 56;
        goto LABEL_320;
      case 53:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 478) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 40;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDGuidesHomeParameters);
        if (!GEOPDGuidesHomeParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 200;
        goto LABEL_320;
      case 54:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 478) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 45;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDExtendedGeoLookupParameters);
        if (!GEOPDExtendedGeoLookupParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 160;
        goto LABEL_320;
      case 55:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 481) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 23;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDQueryUnderstandingParameters);
        if (!GEOPDQueryUnderstandingParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 336;
        goto LABEL_320;
      case 56:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 480) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 26;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDPoiAtAddressLookupParameters);
        if (!GEOPDPoiAtAddressLookupParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 312;
        goto LABEL_320;
      case 57:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 482) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 13;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDTransitNearbyPaymentMethodLookupParameters);
        if (!GEOPDTransitNearbyPaymentMethodLookupParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 416;
        goto LABEL_320;
      case 58:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 480) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 27;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDPlacecardEnrichmentParameters);
        if (!GEOPDPlacecardEnrichmentParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 304;
        goto LABEL_320;
      case 59:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 479) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 32;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDOfflineRegionNameParameters);
        if (!GEOPDOfflineRegionNameParametersReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 264;
        goto LABEL_320;
      case 60:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 481) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 20;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDSearchCapabilitiesParameters);
        if (!GEOPDSearchCapabilitiesParametersReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 360;
        goto LABEL_320;
      case 61:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 481) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 22;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDRefreshIdLookUpParameters);
        if (!GEOPDRefreshIdLookUpParametersReadAllFrom((uint64_t)v44, (void *)v3))
          goto LABEL_504;
        PBReaderRecallMark();
        v45 = 344;
        goto LABEL_320;
      case 62:
        if (!v39)
          goto LABEL_321;
        if ((*(_BYTE *)(a1 + 476) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_505;
          v51 = *(_QWORD *)(a1 + 476) << 61;
LABEL_433:
          v7 += v51 >> 63;
LABEL_434:
          v26 = (int *)MEMORY[0x1E0D82BC8];
LABEL_435:
          v27 = (int *)MEMORY[0x1E0D82BB8];
          if (!(v58 & 1 | (v7 != 0)))
            goto LABEL_436;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_505;
        v44 = objc_alloc_init(GEOPDAddressRecommendationParameters);
        if (GEOPDAddressRecommendationParametersReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v45 = 32;
LABEL_320:
          v49 = *(void **)(a1 + v45);
          *(_QWORD *)(a1 + v45) = v44;

          --v7;
          goto LABEL_434;
        }
LABEL_504:

LABEL_505:
        v56 = 0;
        v26 = (int *)MEMORY[0x1E0D82BC8];
LABEL_437:
        if ((v57 & 1) != 0)
LABEL_438:
          *(_QWORD *)(a1 + 476) |= 1uLL;
        if (v60 || (v56 & 1) == 0)
        {
          *(_QWORD *)(a1 + 476) |= 0xFFFFFFFFFFFFFEuLL;
        }
        else if (v24)
        {
          while (1)
          {
            v52 = *v24++;
            v53 = 0x200000000000;
            switch(v52)
            {
              case 0:
                goto LABEL_498;
              case 1:
                goto LABEL_497;
              case 2:
                v53 = 0x200000;
                goto LABEL_497;
              case 3:
                v53 = 0x4000;
                goto LABEL_497;
              case 4:
                v53 = 0x40000000000;
                goto LABEL_497;
              case 5:
                v53 = 0x200000000;
                goto LABEL_497;
              case 6:
                v53 = 0x20000000;
                goto LABEL_497;
              case 7:
                v53 = 0x800000000;
                goto LABEL_497;
              case 8:
                v53 = 0x1000000000000;
                goto LABEL_497;
              case 9:
                v53 = 0x2000000;
                goto LABEL_497;
              case 10:
                v53 = 64;
                goto LABEL_497;
              case 11:
                v53 = 0x2000;
                goto LABEL_497;
              case 12:
                v53 = 0x8000;
                goto LABEL_497;
              case 13:
                v53 = 0x4000000000;
                goto LABEL_497;
              case 14:
                v53 = 0x400000000000;
                goto LABEL_497;
              case 15:
                v53 = 0x100000000000;
                goto LABEL_497;
              case 16:
                v53 = 512;
                goto LABEL_497;
              case 17:
                v53 = 0x40000000000000;
                goto LABEL_497;
              case 18:
                v53 = 0x40000000;
                goto LABEL_497;
              case 19:
                v53 = 2;
                goto LABEL_497;
              case 20:
                v53 = 0x800000000000;
                goto LABEL_497;
              case 21:
                v53 = 0x80000;
                goto LABEL_497;
              case 22:
                v53 = 0x100000;
                goto LABEL_497;
              case 23:
                v53 = 0x8000000;
                goto LABEL_497;
              case 25:
                v53 = 1024;
                goto LABEL_497;
              case 30:
                v53 = 4096;
                goto LABEL_497;
              case 32:
                v53 = 0x80000000000000;
                goto LABEL_497;
              case 34:
                v53 = 0x1000000;
                goto LABEL_497;
              case 35:
                v53 = 0x400000;
                goto LABEL_497;
              case 36:
                v53 = 2048;
                goto LABEL_497;
              case 37:
                v53 = 0x20000000000000;
                goto LABEL_497;
              case 38:
                v53 = 0x100000000;
                goto LABEL_497;
              case 39:
                v53 = 0x10000000000000;
                goto LABEL_497;
              case 40:
                v53 = 128;
                goto LABEL_497;
              case 41:
                v53 = 256;
                goto LABEL_497;
              case 42:
                v53 = 0x10000;
                goto LABEL_497;
              case 43:
                v53 = 0x20000;
                goto LABEL_497;
              case 44:
                v53 = 0x10000000;
                goto LABEL_497;
              case 45:
                v53 = 0x400000000;
                goto LABEL_497;
              case 46:
                v53 = 0x8000000000;
                goto LABEL_497;
              case 47:
                v53 = 16;
                goto LABEL_497;
              case 48:
                v53 = 8;
                goto LABEL_497;
              case 49:
                v53 = 0x2000000000000;
                goto LABEL_497;
              case 50:
                v53 = 0x8000000000000;
                goto LABEL_497;
              case 51:
                v53 = 0x4000000;
                goto LABEL_497;
              case 52:
                v53 = 32;
                goto LABEL_497;
              case 53:
                v53 = 0x800000;
                goto LABEL_497;
              case 54:
                v53 = 0x40000;
                goto LABEL_497;
              case 55:
                v53 = 0x10000000000;
                goto LABEL_497;
              case 56:
                v53 = 0x2000000000;
                goto LABEL_497;
              case 57:
                v53 = 0x4000000000000;
                goto LABEL_497;
              case 58:
                v53 = 0x1000000000;
                goto LABEL_497;
              case 59:
                v53 = 0x80000000;
                goto LABEL_497;
              case 60:
                v53 = 0x80000000000;
                goto LABEL_497;
              case 61:
                v53 = 0x20000000000;
                goto LABEL_497;
              case 62:
                v53 = 4;
LABEL_497:
                *(_QWORD *)(a1 + 476) |= v53;
                break;
              default:
                continue;
            }
          }
        }
LABEL_498:
        if (v56)
          v3 = *(_BYTE *)(v3 + *v26) == 0;
        else
          v3 = 0;
        if (v60)
        {
          v54 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v57 & 1) == 0 || (*(_BYTE *)(a1 + 476) & 1) != 0)
        {
LABEL_321:
          v50 = PBReaderSkipValueWithTag();
          v26 = (int *)MEMORY[0x1E0D82BC8];
          if ((v50 & 1) == 0)
          {
            v56 = 0;
            goto LABEL_437;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v46 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v47 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v46;

          }
          v48 = PBUnknownFieldAdd();
          v26 = (int *)MEMORY[0x1E0D82BC8];
          if (!v48)
          {
            v56 = 0;
            goto LABEL_438;
          }
        }
        goto LABEL_435;
    }
  }
}

void sub_1887424E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18874259C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1887428E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1887429DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188742AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_188742BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_188742D40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188742E18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _geo_URLForDictionary(int a1, void *a2)
{
  void *v3;
  const __CFString *v4;
  const __CFString *v5;
  void *v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v29;
  id v30;
  void *v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[5];
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t);
  id v47;
  _BYTE v48[128];
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v32 = a2;
  v30 = objc_alloc_init(MEMORY[0x1E0CB3998]);
  switch(a1)
  {
    case 0:
    case 1:
      objc_msgSend(v30, "setHost:", &stru_1E1C241D0);
      objc_msgSend(v30, "setScheme:", CFSTR("maps"));
      break;
    case 2:
      v3 = v30;
      objc_msgSend(v30, "setScheme:", CFSTR("https"));
      v4 = CFSTR("maps.apple.com");
      goto LABEL_6;
    case 3:
      v3 = v30;
      objc_msgSend(v30, "setScheme:", CFSTR("https"));
      objc_msgSend(v30, "setHost:", CFSTR("maps.apple.com"));
      v5 = CFSTR("/place");
      goto LABEL_7;
    case 4:
      v3 = v30;
      objc_msgSend(v30, "setScheme:", CFSTR("https"));
      v4 = CFSTR("guides.apple.com");
LABEL_6:
      objc_msgSend(v3, "setHost:", v4);
      v5 = CFSTR("/");
LABEL_7:
      objc_msgSend(v3, "setPath:", v5);
      break;
    default:
      break;
  }
  v31 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v32, "count"));
  objc_msgSend(v32, "allKeys");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "sortedArrayUsingComparator:", &__block_literal_global_50);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (a1 == 4)
  {
    objc_msgSend(MEMORY[0x1E0CB3500], "URLQueryAllowedCharacterSet");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_msgSend(v7, "mutableCopy");

    objc_msgSend(v8, "removeCharactersInString:", CFSTR("+/="));
    objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", &stru_1E1C241D0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v10 = v29;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v33, v48, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v34;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v34 != v12)
            objc_enumerationMutation(v10);
          v14 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
          objc_msgSend(v32, "objectForKey:", v14);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "stringByAddingPercentEncodingWithAllowedCharacters:", v8);
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v9, "appendFormat:", CFSTR("%@=%@"), v14, v16);
          objc_msgSend(v10, "lastObject");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v14) = v17 == v14;

          if ((v14 & 1) == 0)
            objc_msgSend(v9, "appendString:", CFSTR("&"));

        }
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v33, v48, 16);
      }
      while (v11);
    }

    objc_msgSend(v30, "setPercentEncodedQuery:", v9);
  }
  else
  {
    v42 = 0;
    v43 = &v42;
    v44 = 0x3032000000;
    v45 = __Block_byref_object_copy__22;
    v46 = __Block_byref_object_dispose__22;
    v47 = 0;
    v41[0] = MEMORY[0x1E0C809B0];
    v41[1] = 3221225472;
    v41[2] = ___geo_URLForDictionary_block_invoke_256;
    v41[3] = &unk_1E1C07170;
    v41[4] = &v42;
    v8 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x18D765024](v41);
    v18 = MEMORY[0x18D765024]();
    v19 = (void *)v43[5];
    v43[5] = v18;

    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v20 = v29;
    v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v37, v49, 16);
    if (v21)
    {
      v22 = *(_QWORD *)v38;
      do
      {
        for (j = 0; j != v21; ++j)
        {
          if (*(_QWORD *)v38 != v22)
            objc_enumerationMutation(v20);
          v24 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * j);
          objc_msgSend(v32, "objectForKey:", v24);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          ((void (**)(_QWORD, uint64_t, void *, void *))v8)[2](v8, v24, v25, v31);

        }
        v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v37, v49, 16);
      }
      while (v21);
    }

    v26 = (void *)v43[5];
    v43[5] = 0;

    objc_msgSend(v30, "setQueryItems:", v31);
    _Block_object_dispose(&v42, 8);

  }
  objc_msgSend(v30, "URL");
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  return v27;
}

void sub_188743360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

unint64_t GEOPDStorefrontViewReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int *v15;
  char v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  unint64_t v29;
  BOOL v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  GEOPDPhotoPosition *v35;
  uint64_t v36;
  int v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  void *v44;
  char v45;
  char v46;
  char v47;
  int v48;
  char v49;
  void *v50;
  char v52;
  char v53;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 68)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFFFFFDFFFELL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 2;
        if ((((v10 | v14) | v8) & 1) != 0)
          v15 = 0;
        else
          v15 = a3;
        v16 = v10 | v14;
        v53 = (v15 == 0) | v10 | v14;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v52 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_85;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v26 = v21++ >= 9;
      if (v26)
      {
        v22 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v27 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v27 || (v22 & 7) == 4)
    {
LABEL_85:
      if ((v16 & 1) != 0)
      {
        v47 = 1;
        goto LABEL_97;
      }
      if (v15)
      {
        while (1)
        {
          v48 = *v15++;
          v49 = 8;
          switch(v48)
          {
            case 0:
              goto LABEL_98;
            case 2:
              goto LABEL_92;
            case 5:
              v49 = 4;
              goto LABEL_92;
            case 6:
              v49 = 2;
              goto LABEL_92;
            case 7:
              v49 = 16;
LABEL_92:
              *(_BYTE *)(a1 + 68) |= v49;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_98;
    }
    v29 = v22 >> 3;
    v30 = v16;
    if ((v53 & 1) == 0)
    {
      v31 = v15;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    switch((int)v29)
    {
      case 2:
        if (!v30)
          goto LABEL_68;
        if ((*(_BYTE *)(a1 + 68) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_94;
          v35 = objc_alloc_init(GEOPDPhotoPosition);
          if (GEOPDPhotoPositionReadAllFrom((uint64_t)v35, (void *)v3, v9 & 1))
          {
            PBReaderRecallMark();
            v36 = 40;
            goto LABEL_67;
          }
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_94;
        v46 = 16 * *(_BYTE *)(a1 + 68);
        goto LABEL_82;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_68;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_BYTE *)(a1 + 68) |= 1u;
        while (2)
        {
          v41 = *v17;
          v42 = *(_QWORD *)(v3 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v42);
            *(_QWORD *)(v3 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v26 = v39++ >= 9;
              if (v26)
              {
                v40 = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v40 = 0;
LABEL_73:
        *(_QWORD *)(a1 + 16) = v40;
        goto LABEL_84;
      case 5:
        if (!v30)
          goto LABEL_68;
        if ((*(_BYTE *)(a1 + 68) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_94;
          v46 = 32 * *(_BYTE *)(a1 + 68);
          goto LABEL_82;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_94;
        v35 = objc_alloc_init(GEOPDOrientedPosition);
        if (!GEOPDOrientedPositionReadAllFrom((uint64_t)v35, (void *)v3))
          goto LABEL_95;
        PBReaderRecallMark();
        v36 = 32;
        goto LABEL_67;
      case 6:
        if (!v30)
          goto LABEL_68;
        if ((*(_BYTE *)(a1 + 68) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_94;
          v46 = *(_BYTE *)(a1 + 68) << 6;
          goto LABEL_82;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_94;
        v35 = objc_alloc_init(GEOPDGeographicCoordinate);
        if (!GEOPDGeographicCoordinateReadAllFrom((uint64_t)v35, (void *)v3))
          goto LABEL_95;
        PBReaderRecallMark();
        v36 = 24;
        goto LABEL_67;
      case 7:
        if (!v30)
        {
LABEL_68:
          v45 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if ((v45 & 1) == 0)
          {
LABEL_93:
            v47 = 0;
            goto LABEL_97;
          }
LABEL_84:
          if (!(v16 & 1 | (v7 != 0)))
            goto LABEL_85;
          continue;
        }
        if ((*(_BYTE *)(a1 + 68) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_94:
            v47 = 0;
            goto LABEL_96;
          }
          v46 = 8 * *(_BYTE *)(a1 + 68);
LABEL_82:
          v7 += v46 >> 7;
          goto LABEL_83;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_94;
        v35 = objc_alloc_init(GEOPDGeographicCoordinate);
        if (GEOPDGeographicCoordinateReadAllFrom((uint64_t)v35, (void *)v3))
        {
          PBReaderRecallMark();
          v36 = 48;
LABEL_67:
          v44 = *(void **)(a1 + v36);
          *(_QWORD *)(a1 + v36) = v35;

          --v7;
          v16 = v52;
LABEL_83:
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_84;
        }
LABEL_95:

        v47 = 0;
        v16 = v52;
LABEL_96:
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_97:
        *(_BYTE *)(a1 + 68) |= 8u;
        *(_BYTE *)(a1 + 68) |= 4u;
        *(_BYTE *)(a1 + 68) |= 2u;
        *(_BYTE *)(a1 + 68) |= 0x10u;
        if ((v47 & 1) != 0)
        {
LABEL_98:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v16 & 1) != 0)
            goto LABEL_99;
        }
        else
        {
          v3 = 0;
          if ((v16 & 1) != 0)
          {
LABEL_99:
            v50 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v37 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (!v37)
          goto LABEL_93;
        goto LABEL_84;
    }
  }
}

BOOL GEOPDGeographicCoordinateReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          *(_BYTE *)(a1 + 32) |= 1u;
          v22 = *v4;
          v23 = *(_QWORD *)&v3[v22];
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v21 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v23 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v21 = 0;
          }
          v26 = &OBJC_IVAR___GEOPDGeographicCoordinate__altitude;
        }
        else if ((_DWORD)v18 == 2)
        {
          *(_BYTE *)(a1 + 32) |= 4u;
          v24 = *v4;
          v25 = *(_QWORD *)&v3[v24];
          if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v21 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v25);
            *(_QWORD *)&v3[v24] = v25 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v21 = 0;
          }
          v26 = &OBJC_IVAR___GEOPDGeographicCoordinate__longitude;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_42;
            continue;
          }
          *(_BYTE *)(a1 + 32) |= 2u;
          v19 = *v4;
          v20 = *(_QWORD *)&v3[v19];
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v21 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v20);
            *(_QWORD *)&v3[v19] = v20 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v21 = 0;
          }
          v26 = &OBJC_IVAR___GEOPDGeographicCoordinate__latitude;
        }
        *(_QWORD *)(a1 + *v26) = v21;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_42:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_18874428C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188744370(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t **AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::Clear(uint64_t **this)
{
  uint64_t **v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;

  v1 = this;
  if (*((_BYTE *)this + 9))
  {
    switch(*((_BYTE *)this + 8))
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
        *((_DWORD *)*this + 2) = 0;
        break;
      case 9:
      case 0xC:
        this = (uint64_t **)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Clear<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)*this);
        break;
      case 0xA:
      case 0xB:
        v6 = (uint64_t)*this;
        if (*((int *)*this + 2) >= 1)
        {
          v7 = 0;
          do
          {
            this = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v6 + 8 * v7) + 32))(*(_QWORD *)(*(_QWORD *)v6 + 8 * v7));
            ++v7;
          }
          while (v7 < *(int *)(v6 + 8));
        }
        *(_DWORD *)(v6 + 8) = 0;
        break;
      default:
        return this;
    }
  }
  else if ((*((_BYTE *)this + 10) & 1) == 0)
  {
    v2 = AddrObjGoogle::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[*((unsigned __int8 *)this + 8)];
    if (v2 == 10)
    {
      v4 = **this;
      if ((*((_BYTE *)this + 10) & 0x10) != 0)
        v5 = *(uint64_t (**)(void))(v4 + 88);
      else
        v5 = *(uint64_t (**)(void))(v4 + 32);
      this = (uint64_t **)v5();
    }
    else if (v2 == 9)
    {
      v3 = (uint64_t)*this;
      if (*((char *)*this + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
    }
    *((_BYTE *)v1 + 10) = *((_BYTE *)v1 + 10) & 0xF0 | 1;
  }
  return this;
}

AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::V2AddressObjectProto::Clear(uint64_t **this)
{
  AddrObjGoogle::protobuf::UnknownFieldSet *result;
  AddrObjGoogle::protobuf::UnknownFieldSet *v3;
  uint64_t *v4;
  AddrObjGoogle::protobuf::UnknownFieldSet *v5;
  uint64_t *v6;
  AddrObjGoogle::protobuf::UnknownFieldSet *v7;
  uint64_t *v8;
  AddrObjGoogle::protobuf::UnknownFieldSet *v9;
  uint64_t *v10;
  AddrObjGoogle::protobuf::UnknownFieldSet *v11;
  uint64_t *v12;
  AddrObjGoogle::protobuf::UnknownFieldSet *v13;
  uint64_t *v14;
  AddrObjGoogle::protobuf::UnknownFieldSet *v15;
  uint64_t *v16;
  AddrObjGoogle::protobuf::UnknownFieldSet *v17;
  uint64_t *v18;
  int v19;
  AddrObjGoogle::protobuf::UnknownFieldSet *v20;
  uint64_t *v21;
  AddrObjGoogle::protobuf::UnknownFieldSet *v22;
  uint64_t *v23;
  AddrObjGoogle::protobuf::UnknownFieldSet *v24;
  uint64_t *v25;
  AddrObjGoogle::protobuf::UnknownFieldSet *v26;
  uint64_t *v27;
  AddrObjGoogle::protobuf::UnknownFieldSet *v28;
  uint64_t *v29;

  result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::ExtensionSet::Clear(this + 1);
  if (*((_BYTE *)this + 140))
  {
    if ((*((_BYTE *)this + 140) & 1) != 0)
    {
      v3 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[5];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v3 != result)
      {
        v4 = this[5];
        if (*((char *)v4 + 23) < 0)
        {
          *(_BYTE *)*v4 = 0;
          v4[1] = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *((_BYTE *)v4 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 140) & 2) != 0)
    {
      v5 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[6];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v5 != result)
      {
        v6 = this[6];
        if (*((char *)v6 + 23) < 0)
        {
          *(_BYTE *)*v6 = 0;
          v6[1] = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *((_BYTE *)v6 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 140) & 4) != 0)
    {
      v7 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[7];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v7 != result)
      {
        v8 = this[7];
        if (*((char *)v8 + 23) < 0)
        {
          *(_BYTE *)*v8 = 0;
          v8[1] = 0;
        }
        else
        {
          *(_BYTE *)v8 = 0;
          *((_BYTE *)v8 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 140) & 8) != 0)
    {
      v9 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[8];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v9 != result)
      {
        v10 = this[8];
        if (*((char *)v10 + 23) < 0)
        {
          *(_BYTE *)*v10 = 0;
          v10[1] = 0;
        }
        else
        {
          *(_BYTE *)v10 = 0;
          *((_BYTE *)v10 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 140) & 0x10) != 0)
    {
      v11 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[9];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v11 != result)
      {
        v12 = this[9];
        if (*((char *)v12 + 23) < 0)
        {
          *(_BYTE *)*v12 = 0;
          v12[1] = 0;
        }
        else
        {
          *(_BYTE *)v12 = 0;
          *((_BYTE *)v12 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 140) & 0x20) != 0)
    {
      v13 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[10];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v13 != result)
      {
        v14 = this[10];
        if (*((char *)v14 + 23) < 0)
        {
          *(_BYTE *)*v14 = 0;
          v14[1] = 0;
        }
        else
        {
          *(_BYTE *)v14 = 0;
          *((_BYTE *)v14 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 140) & 0x40) != 0)
    {
      v15 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[11];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v15 != result)
      {
        v16 = this[11];
        if (*((char *)v16 + 23) < 0)
        {
          *(_BYTE *)*v16 = 0;
          v16[1] = 0;
        }
        else
        {
          *(_BYTE *)v16 = 0;
          *((_BYTE *)v16 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 140) & 0x80) != 0)
    {
      v17 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[12];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v17 != result)
      {
        v18 = this[12];
        if (*((char *)v18 + 23) < 0)
        {
          *(_BYTE *)*v18 = 0;
          v18[1] = 0;
        }
        else
        {
          *(_BYTE *)v18 = 0;
          *((_BYTE *)v18 + 23) = 0;
        }
      }
    }
  }
  v19 = *((_DWORD *)this + 35);
  if ((v19 & 0xFF00) != 0)
  {
    if ((v19 & 0x100) != 0)
    {
      v20 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[13];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v20 != result)
      {
        v21 = this[13];
        if (*((char *)v21 + 23) < 0)
        {
          *(_BYTE *)*v21 = 0;
          v21[1] = 0;
        }
        else
        {
          *(_BYTE *)v21 = 0;
          *((_BYTE *)v21 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 141) & 2) != 0)
    {
      v22 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[14];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v22 != result)
      {
        v23 = this[14];
        if (*((char *)v23 + 23) < 0)
        {
          *(_BYTE *)*v23 = 0;
          v23[1] = 0;
        }
        else
        {
          *(_BYTE *)v23 = 0;
          *((_BYTE *)v23 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 141) & 4) != 0)
    {
      v24 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[15];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v24 != result)
      {
        v25 = this[15];
        if (*((char *)v25 + 23) < 0)
        {
          *(_BYTE *)*v25 = 0;
          v25[1] = 0;
        }
        else
        {
          *(_BYTE *)v25 = 0;
          *((_BYTE *)v25 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 141) & 8) != 0)
    {
      v26 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[16];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v26 != result)
      {
        v27 = this[16];
        if (*((char *)v27 + 23) < 0)
        {
          *(_BYTE *)*v27 = 0;
          v27[1] = 0;
        }
        else
        {
          *(_BYTE *)v27 = 0;
          *((_BYTE *)v27 + 23) = 0;
        }
      }
    }
  }
  v29 = this[4];
  v28 = (AddrObjGoogle::protobuf::UnknownFieldSet *)(this + 4);
  *((_DWORD *)v28 + 27) = 0;
  if (v29)
    return AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v28);
  return result;
}

uint64_t **AddrObjGoogle::protobuf::internal::ExtensionSet::Clear(uint64_t **this)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;

  v1 = this + 1;
  v2 = *this;
  if (*this != (uint64_t *)(this + 1))
  {
    do
    {
      this = AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::Clear((uint64_t **)v2 + 5);
      v3 = (uint64_t *)v2[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (uint64_t *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (uint64_t *)v2[2];
          v5 = *v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (v4 != (uint64_t *)v1);
  }
  return this;
}

void sub_1887449D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188744A84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t geo::DbReaderTarFileDescriptor::DbReaderTarFileDescriptor(uint64_t a1, int a2, void *a3)
{
  id v5;
  id v6;
  float *v7;
  void **v8;
  void **v9;
  off_t st_size;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  int next_header;
  uint64_t v16;
  char *v17;
  std::string::size_type v18;
  std::string::size_type size;
  std::string *p_buf;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string::size_type v23;
  unsigned __int8 *v24;
  uint64_t v26;
  NSObject *v27;
  std::string::size_type v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::string::size_type v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  void **v36;
  char *v37;
  unint64_t v38;
  std::string *v39;
  float v40;
  float v41;
  _BOOL8 v42;
  unint64_t v43;
  unint64_t v44;
  int8x8_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint8x8_t v51;
  unint64_t v52;
  uint8x8_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  std::string::size_type v61;
  unint64_t v62;
  uint8x8_t v63;
  unint64_t v64;
  void **v65;
  char *v66;
  unint64_t v67;
  std::string *v68;
  float v69;
  float v70;
  _BOOL8 v71;
  unint64_t v72;
  unint64_t v73;
  int8x8_t prime;
  void *v75;
  void *v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint8x8_t v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  NSObject *v92;
  int v94;
  int v95;
  int *v96;
  char *v97;
  int v98;
  int v99;
  int *v100;
  char *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  unint64_t *v108;
  float *v109;
  std::string v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  stat v115;
  char v116;
  std::string buf;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  *(_QWORD *)a1 = &off_1E1BF67E0;
  *(_DWORD *)(a1 + 8) = a2;
  v6 = v5;
  *(_DWORD *)(a1 + 112) = 1065353216;
  v7 = (float *)(a1 + 112);
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 40) = 0u;
  v8 = (void **)(a1 + 40);
  *(_DWORD *)(a1 + 72) = 1065353216;
  v109 = (float *)(a1 + 72);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v9 = (void **)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  if (fstat(*(_DWORD *)(a1 + 8), &v115) == -1)
  {
    v12 = *(id *)(a1 + 16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v98 = *(_DWORD *)(a1 + 8);
      v99 = *__error();
      v100 = __error();
      v101 = strerror(*v100);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109634;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v98;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v99;
      HIWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v101;
      _os_log_error_impl(&dword_1885A9000, v12, OS_LOG_TYPE_ERROR, "[TarFile] Could not get file information for descriptor %d with error %d: %s", (uint8_t *)&buf, 0x18u);
    }
    goto LABEL_5;
  }
  st_size = v115.st_size;
  v11 = mmap(0, v115.st_size, 1, 2, *(_DWORD *)(a1 + 8), 0);
  if ((unint64_t)v11 + 1 <= 1)
  {
    v12 = *(id *)(a1 + 16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v94 = *(_DWORD *)(a1 + 8);
      v95 = *__error();
      v96 = __error();
      v97 = strerror(*v96);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109634;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v94;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v95;
      HIWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v97;
      _os_log_error_impl(&dword_1885A9000, v12, OS_LOG_TYPE_ERROR, "[TarFile] Could not memory-map file descriptor: %d with error %d: %s", (uint8_t *)&buf, 0x18u);
    }
LABEL_5:

    goto LABEL_223;
  }
  v13 = *(NSObject **)(a1 + 16);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v11 + st_size;
    _os_log_debug_impl(&dword_1885A9000, v13, OS_LOG_TYPE_DEBUG, "[TarFile] Memory-mapped file at [%p : %p]", (uint8_t *)&buf, 0x16u);
  }
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = st_size;
  archive_read_new();
  archive_read_support_format_tar();
  if (archive_read_open_memory())
  {
    v14 = *(id *)(a1 + 16);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v102 = archive_error_string();
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v102;
      _os_log_error_impl(&dword_1885A9000, v14, OS_LOG_TYPE_ERROR, "[TarFile] error: %s", (uint8_t *)&buf, 0xCu);
    }

    archive_read_free();
    goto LABEL_223;
  }
  v114 = 0;
  v108 = (unint64_t *)(a1 + 104);
  v103 = (_QWORD *)(a1 + 96);
  v104 = (_QWORD *)(a1 + 56);
  v106 = v6;
LABEL_16:
  while (2)
  {
    next_header = archive_read_next_header();
    if (!next_header)
    {
      if (archive_entry_filetype() != 0x8000)
        continue;
      v16 = archive_entry_size();
      v112 = 0;
      v113 = 0;
      v111 = 0;
      if (archive_read_data_block() || v112 != v16)
      {
        v26 = archive_error_string();
        v27 = *(NSObject **)(a1 + 16);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v26;
          _os_log_error_impl(&dword_1885A9000, v27, OS_LOG_TYPE_ERROR, "[TarFile] Failed to archive_read_data_block(): %s", (uint8_t *)&buf, 0xCu);
        }
        continue;
      }
      v17 = (char *)archive_entry_pathname_utf8();
      std::string::basic_string[abi:ne180100]<0>(&buf, v17);
      std::string::basic_string[abi:ne180100]<0>(&v110, "data/");
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = (std::string::size_type)&v110;
      else
        v18 = v110.__r_.__value_.__r.__words[0];
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      else
        size = v110.__r_.__value_.__l.__size_;
      p_buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v21 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      }
      else
      {
        v21 = buf.__r_.__value_.__l.__size_;
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      v107 = v16;
      if (size && v21)
      {
        v22 = size - 1;
        v23 = v21 - 1;
        v24 = (unsigned __int8 *)v18;
        do
        {
          if (*v24 != p_buf->__r_.__value_.__s.__data_[0])
            break;
          ++v24;
          if (!v22)
            break;
          p_buf = (std::string *)((char *)p_buf + 1);
          --v22;
        }
        while (v23--);
      }
      else
      {
        v24 = (unsigned __int8 *)v18;
      }
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      if (v24 == (unsigned __int8 *)(v18 + size))
      {
        v28 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v28 = buf.__r_.__value_.__l.__size_;
        std::string::basic_string(&v110, &buf, 5uLL, v28 - 5, (std::allocator<char> *)&v116);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        buf = v110;
      }
      v29 = v113;
      v30 = (unint64_t *)(a1 + 64);
      v31 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 64, (uint64_t)&buf);
      v32 = v31;
      v33 = *(_QWORD *)(a1 + 48);
      if (!v33)
        goto LABEL_65;
      v105 = v29;
      v34 = (uint8x8_t)vcnt_s8((int8x8_t)v33);
      v34.i16[0] = vaddlv_u8(v34);
      v35 = v34.u32[0];
      if (v34.u32[0] > 1uLL)
      {
        v18 = v31;
        if (v31 >= v33)
          v18 = v31 % v33;
      }
      else
      {
        v18 = (v33 - 1) & v31;
      }
      v36 = (void **)*((_QWORD *)*v8 + v18);
      if (v36)
      {
        v37 = (char *)*v36;
        if (*v36)
        {
          while (1)
          {
            v38 = *((_QWORD *)v37 + 1);
            if (v38 == v32)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v109, (unsigned __int8 *)v37 + 16, (unsigned __int8 *)&buf) & 1) != 0)
              {
                v29 = v105;
LABEL_124:
                *((_QWORD *)v37 + 5) = v29;
                v60 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v108, (uint64_t)&buf);
                v61 = v60;
                v62 = *(_QWORD *)(a1 + 88);
                if (v62)
                {
                  v63 = (uint8x8_t)vcnt_s8((int8x8_t)v62);
                  v63.i16[0] = vaddlv_u8(v63);
                  v64 = v63.u32[0];
                  if (v63.u32[0] > 1uLL)
                  {
                    v18 = v60;
                    if (v60 >= v62)
                      v18 = v60 % v62;
                  }
                  else
                  {
                    v18 = (v62 - 1) & v60;
                  }
                  v65 = (void **)*((_QWORD *)*v9 + v18);
                  if (v65)
                  {
                    v66 = (char *)*v65;
                    if (*v65)
                    {
                      while (2)
                      {
                        v67 = *((_QWORD *)v66 + 1);
                        if (v67 != v61)
                        {
                          if (v64 > 1)
                          {
                            if (v67 >= v62)
                              v67 %= v62;
                          }
                          else
                          {
                            v67 &= v62 - 1;
                          }
                          if (v67 != v18)
                            goto LABEL_140;
LABEL_139:
                          v66 = *(char **)v66;
                          if (!v66)
                            goto LABEL_140;
                          continue;
                        }
                        break;
                      }
                      if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 112, (unsigned __int8 *)v66 + 16, (unsigned __int8 *)&buf) & 1) == 0)goto LABEL_139;
                      v6 = v106;
LABEL_199:
                      *((_QWORD *)v66 + 5) = v107;
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(buf.__r_.__value_.__l.__data_);
                      goto LABEL_16;
                    }
                  }
                }
LABEL_140:
                v66 = (char *)operator new(0x30uLL);
                *(_QWORD *)v66 = 0;
                *((_QWORD *)v66 + 1) = v61;
                v68 = (std::string *)(v66 + 16);
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v68, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
                }
                else
                {
                  *(_OWORD *)&v68->__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
                  *((_QWORD *)v66 + 4) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
                }
                *((_QWORD *)v66 + 5) = 0;
                v69 = (float)(*v108 + 1);
                v70 = *v7;
                if (!v62 || (float)(v70 * (float)v62) < v69)
                {
                  v71 = (v62 & (v62 - 1)) != 0;
                  if (v62 < 3)
                    v71 = 1;
                  v72 = v71 | (2 * v62);
                  v73 = vcvtps_u32_f32(v69 / v70);
                  if (v72 <= v73)
                    prime = (int8x8_t)v73;
                  else
                    prime = (int8x8_t)v72;
                  if (*(_QWORD *)&prime == 1)
                  {
                    prime = (int8x8_t)2;
                  }
                  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                  {
                    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                  }
                  v62 = *(_QWORD *)(a1 + 88);
                  if (*(_QWORD *)&prime <= v62)
                  {
                    if (*(_QWORD *)&prime < v62)
                    {
                      v81 = vcvtps_u32_f32((float)*v108 / *v7);
                      if (v62 < 3
                        || (v82 = (uint8x8_t)vcnt_s8((int8x8_t)v62), v82.i16[0] = vaddlv_u8(v82), v82.u32[0] > 1uLL))
                      {
                        v81 = std::__next_prime(v81);
                      }
                      else
                      {
                        v83 = 1 << -(char)__clz(v81 - 1);
                        if (v81 >= 2)
                          v81 = v83;
                      }
                      if (*(_QWORD *)&prime <= v81)
                        prime = (int8x8_t)v81;
                      if (*(_QWORD *)&prime >= v62)
                      {
                        v62 = *(_QWORD *)(a1 + 88);
                      }
                      else
                      {
                        if (prime)
                          goto LABEL_155;
                        v90 = *v9;
                        *v9 = 0;
                        if (v90)
                          operator delete(v90);
                        v62 = 0;
                        *(_QWORD *)(a1 + 88) = 0;
                      }
                    }
                  }
                  else
                  {
LABEL_155:
                    if (*(_QWORD *)&prime >> 61)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v75 = operator new(8 * *(_QWORD *)&prime);
                    v76 = *v9;
                    *v9 = v75;
                    if (v76)
                      operator delete(v76);
                    v77 = 0;
                    *(int8x8_t *)(a1 + 88) = prime;
                    do
                      *((_QWORD *)*v9 + v77++) = 0;
                    while (*(_QWORD *)&prime != v77);
                    v78 = (_QWORD *)*v103;
                    if (*v103)
                    {
                      v79 = v78[1];
                      v80 = (uint8x8_t)vcnt_s8(prime);
                      v80.i16[0] = vaddlv_u8(v80);
                      if (v80.u32[0] > 1uLL)
                      {
                        if (v79 >= *(_QWORD *)&prime)
                          v79 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v79 &= *(_QWORD *)&prime - 1;
                      }
                      *((_QWORD *)*v9 + v79) = v103;
                      v84 = (_QWORD *)*v78;
                      if (*v78)
                      {
                        do
                        {
                          v85 = v84[1];
                          if (v80.u32[0] > 1uLL)
                          {
                            if (v85 >= *(_QWORD *)&prime)
                              v85 %= *(_QWORD *)&prime;
                          }
                          else
                          {
                            v85 &= *(_QWORD *)&prime - 1;
                          }
                          if (v85 != v79)
                          {
                            if (!*((_QWORD *)*v9 + v85))
                            {
                              *((_QWORD *)*v9 + v85) = v78;
                              goto LABEL_180;
                            }
                            *v78 = *v84;
                            *v84 = **((_QWORD **)*v9 + v85);
                            **((_QWORD **)*v9 + v85) = v84;
                            v84 = v78;
                          }
                          v85 = v79;
LABEL_180:
                          v78 = v84;
                          v84 = (_QWORD *)*v84;
                          v79 = v85;
                        }
                        while (v84);
                      }
                    }
                    v62 = (unint64_t)prime;
                  }
                  if ((v62 & (v62 - 1)) != 0)
                  {
                    if (v61 >= v62)
                      v18 = v61 % v62;
                    else
                      v18 = v61;
                  }
                  else
                  {
                    v18 = (v62 - 1) & v61;
                  }
                }
                v86 = *v9;
                v87 = (_QWORD *)*((_QWORD *)*v9 + v18);
                if (v87)
                {
                  *(_QWORD *)v66 = *v87;
                  v6 = v106;
                  goto LABEL_197;
                }
                *(_QWORD *)v66 = *v103;
                *v103 = v66;
                v86[v18] = v103;
                v6 = v106;
                if (*(_QWORD *)v66)
                {
                  v88 = *(_QWORD *)(*(_QWORD *)v66 + 8);
                  if ((v62 & (v62 - 1)) != 0)
                  {
                    if (v88 >= v62)
                      v88 %= v62;
                  }
                  else
                  {
                    v88 &= v62 - 1;
                  }
                  v87 = (char *)*v9 + 8 * v88;
LABEL_197:
                  *v87 = v66;
                }
                ++*v108;
                goto LABEL_199;
              }
            }
            else
            {
              if (v35 > 1)
              {
                if (v38 >= v33)
                  v38 %= v33;
              }
              else
              {
                v38 &= v33 - 1;
              }
              if (v38 != v18)
              {
LABEL_63:
                v30 = (unint64_t *)(a1 + 64);
                break;
              }
            }
            v37 = *(char **)v37;
            if (!v37)
              goto LABEL_63;
          }
        }
      }
      v29 = v105;
LABEL_65:
      v37 = (char *)operator new(0x30uLL);
      *(_QWORD *)v37 = 0;
      *((_QWORD *)v37 + 1) = v32;
      v39 = (std::string *)(v37 + 16);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v39, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v39->__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *((_QWORD *)v37 + 4) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
      }
      *((_QWORD *)v37 + 5) = 0;
      v40 = (float)(*v30 + 1);
      v41 = *v109;
      if (!v33 || (float)(v41 * (float)v33) < v40)
      {
        v42 = (v33 & (v33 - 1)) != 0;
        if (v33 < 3)
          v42 = 1;
        v43 = v42 | (2 * v33);
        v44 = vcvtps_u32_f32(v40 / v41);
        if (v43 <= v44)
          v45 = (int8x8_t)v44;
        else
          v45 = (int8x8_t)v43;
        if (*(_QWORD *)&v45 == 1)
        {
          v45 = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&v45 & (*(_QWORD *)&v45 - 1)) != 0)
        {
          v45 = (int8x8_t)std::__next_prime(*(_QWORD *)&v45);
        }
        v33 = *(_QWORD *)(a1 + 48);
        if (*(_QWORD *)&v45 <= v33)
        {
          if (*(_QWORD *)&v45 < v33)
          {
            v52 = vcvtps_u32_f32((float)*v30 / *v109);
            if (v33 < 3 || (v53 = (uint8x8_t)vcnt_s8((int8x8_t)v33), v53.i16[0] = vaddlv_u8(v53), v53.u32[0] > 1uLL))
            {
              v52 = std::__next_prime(v52);
            }
            else
            {
              v54 = 1 << -(char)__clz(v52 - 1);
              if (v52 >= 2)
                v52 = v54;
            }
            if (*(_QWORD *)&v45 <= v52)
              v45 = (int8x8_t)v52;
            if (*(_QWORD *)&v45 >= v33)
            {
              v33 = *(_QWORD *)(a1 + 48);
            }
            else
            {
              if (v45)
                goto LABEL_80;
              v89 = *v8;
              *v8 = 0;
              if (v89)
                operator delete(v89);
              v33 = 0;
              *(_QWORD *)(a1 + 48) = 0;
            }
          }
        }
        else
        {
LABEL_80:
          if (*(_QWORD *)&v45 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v46 = operator new(8 * *(_QWORD *)&v45);
          v47 = *v8;
          *v8 = v46;
          if (v47)
            operator delete(v47);
          v48 = 0;
          *(int8x8_t *)(a1 + 48) = v45;
          do
            *((_QWORD *)*v8 + v48++) = 0;
          while (*(_QWORD *)&v45 != v48);
          v49 = (_QWORD *)*v104;
          if (*v104)
          {
            v50 = v49[1];
            v51 = (uint8x8_t)vcnt_s8(v45);
            v51.i16[0] = vaddlv_u8(v51);
            if (v51.u32[0] > 1uLL)
            {
              if (v50 >= *(_QWORD *)&v45)
                v50 %= *(_QWORD *)&v45;
            }
            else
            {
              v50 &= *(_QWORD *)&v45 - 1;
            }
            *((_QWORD *)*v8 + v50) = v104;
            v55 = (_QWORD *)*v49;
            if (*v49)
            {
              do
              {
                v56 = v55[1];
                if (v51.u32[0] > 1uLL)
                {
                  if (v56 >= *(_QWORD *)&v45)
                    v56 %= *(_QWORD *)&v45;
                }
                else
                {
                  v56 &= *(_QWORD *)&v45 - 1;
                }
                if (v56 != v50)
                {
                  if (!*((_QWORD *)*v8 + v56))
                  {
                    *((_QWORD *)*v8 + v56) = v49;
                    goto LABEL_105;
                  }
                  *v49 = *v55;
                  *v55 = **((_QWORD **)*v8 + v56);
                  **((_QWORD **)*v8 + v56) = v55;
                  v55 = v49;
                }
                v56 = v50;
LABEL_105:
                v49 = v55;
                v55 = (_QWORD *)*v55;
                v50 = v56;
              }
              while (v55);
            }
          }
          v33 = (unint64_t)v45;
        }
        if ((v33 & (v33 - 1)) != 0)
        {
          if (v32 >= v33)
            v18 = v32 % v33;
          else
            v18 = v32;
        }
        else
        {
          v18 = (v33 - 1) & v32;
        }
      }
      v57 = *v8;
      v58 = (_QWORD *)*((_QWORD *)*v8 + v18);
      if (v58)
      {
        *(_QWORD *)v37 = *v58;
      }
      else
      {
        *(_QWORD *)v37 = *v104;
        *v104 = v37;
        v57[v18] = v104;
        if (!*(_QWORD *)v37)
        {
LABEL_123:
          ++*v30;
          goto LABEL_124;
        }
        v59 = *(_QWORD *)(*(_QWORD *)v37 + 8);
        if ((v33 & (v33 - 1)) != 0)
        {
          if (v59 >= v33)
            v59 %= v33;
        }
        else
        {
          v59 &= v33 - 1;
        }
        v58 = (char *)*v8 + 8 * v59;
      }
      *v58 = v37;
      goto LABEL_123;
    }
    break;
  }
  if (next_header != 1)
  {
    v91 = archive_error_string();
    v92 = *(NSObject **)(a1 + 16);
    if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v91;
      _os_log_error_impl(&dword_1885A9000, v92, OS_LOG_TYPE_ERROR, "[TarFile] Failed to archive_read_next_header(): %s", (uint8_t *)&buf, 0xCu);
    }
  }
  archive_read_close();
  archive_read_free();
LABEL_223:

  return a1;
}

void sub_188745910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::~__hash_table(v18);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::~__hash_table(v17);

  _Unwind_Resume(a1);
}

BOOL GEODataSetDescriptionReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          PBReaderReadString();
          v23 = objc_claimAutoreleasedReturnValue();
          v24 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v23;

        }
        else if ((v10 >> 3) == 1)
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
              break;
            v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
            *(_QWORD *)&v3[v20] = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_34;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6])
            LODWORD(v19) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 24) = v19;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_39;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_39:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_188745C98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188745EC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOOfflineMetadataReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  id v29;
  void *v30;
  _BOOL8 v31;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (1)
          {
            v26 = *v4;
            v27 = *(_QWORD *)&v3[v26];
            if (v27 == -1 || v27 >= *(_QWORD *)&v3[*v5])
              break;
            v28 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v27);
            *(_QWORD *)&v3[v26] = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if ((v28 & 0x80) == 0)
              goto LABEL_44;
            v23 += 7;
            v14 = v24++ >= 9;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          v3[*v6] = 1;
LABEL_44:
          if (v3[*v6])
            LODWORD(v25) = 0;
LABEL_46:
          *(_DWORD *)(a1 + 24) = v25;
        }
        else if ((v10 >> 3) == 1)
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
              break;
            v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
            *(_QWORD *)&v3[v20] = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_40;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_42;
            }
          }
          v3[*v6] = 1;
LABEL_40:
          if (v3[*v6])
            v19 = 0;
LABEL_42:
          *(_QWORD *)(a1 + 16) = v19;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v29 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v30 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v29;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_49;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v31 = v3[*v6] == 0;
  }
  else
  {
LABEL_49:
    v31 = 0;
  }
  objc_sync_exit(v3);

  return v31;
}

void sub_1887466F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ___ZL10_cancelErrv_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:", -2);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDBB820;
  qword_1ECDBB820 = v0;

}

__CFString *GEOStringForError(uint64_t a1)
{
  uint64_t v1;
  __CFString *result;

  if (a1 <= -301)
  {
    if (a1 > -1503)
    {
      if (a1 <= -404)
      {
        switch(a1)
        {
          case -1502:
            return CFSTR("No Location Authorization");
          case -1501:
            return CFSTR("Failed Permanently");
          case -1500:
            return CFSTR("Failed Temporarily");
        }
      }
      else
      {
        if (a1 <= -402)
        {
          if (a1 == -403)
            return CFSTR("Route Not Navigable");
          else
            return CFSTR("End Not Found");
        }
        if (a1 == -401)
          return CFSTR("Start Not Found");
        if (a1 == -301)
          return CFSTR("XPC Invalid");
      }
LABEL_66:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown error code encountered: %ld"), a1);
      a1 = objc_claimAutoreleasedReturnValue();
      return (__CFString *)(id)a1;
    }
    else
    {
      switch(a1)
      {
        case -2009:
          result = CFSTR("DB lookup returned invalid data");
          break;
        case -2008:
          result = CFSTR("DB lookup returned no data");
          break;
        case -2007:
          result = CFSTR("No/invalid radii provided");
          break;
        case -2006:
          result = CFSTR("Tile zoom invalid");
          break;
        case -2005:
          result = CFSTR("DB Metadata invalid");
          break;
        case -2004:
          result = CFSTR("DB Metadata missing");
          break;
        case -2003:
          result = CFSTR("DB Open returned nil");
          break;
        case -2002:
          result = CFSTR("DB Open failed");
          break;
        case -2001:
          result = CFSTR("Data/URL missing for tile");
          break;
        case -2000:
          result = CFSTR("Unable to fetch Geographic Metadata tiles");
          break;
        default:
          goto LABEL_66;
      }
    }
  }
  else
  {
    v1 = a1 + 30;
    a1 = (uint64_t)CFSTR("None");
    switch(v1)
    {
      case 0:
        a1 = (uint64_t)CFSTR("No Offline Service");
        return (__CFString *)(id)a1;
      case 1:
        return CFSTR("Unknown signed resource type");
      case 2:
        return CFSTR("Client data version does not match server");
      case 3:
        return CFSTR("Disallowed due to active assertion");
      case 4:
        return CFSTR("Device Not Unlocked Since Last Reboot");
      case 5:
        return CFSTR("Insufficient Available Filesystem Capacity");
      case 6:
        return CFSTR("Wrong Content Type");
      case 7:
        return CFSTR("Map Data Extension");
      case 8:
        return CFSTR("Closed");
      case 9:
        return CFSTR("Needs Reload");
      case 10:
        return CFSTR("Not Done Yet");
      case 11:
        return CFSTR("Timeout");
      case 12:
        return CFSTR("Filesystem error");
      case 13:
        return CFSTR("Database error");
      case 14:
        return CFSTR("Protobuf error");
      case 15:
        return CFSTR("XPC error");
      case 16:
        return CFSTR("Invalid Country Code");
      case 17:
        return CFSTR("Invalid State");
      case 18:
        return CFSTR("Invalid Parameter");
      case 19:
        return CFSTR("Invalid Response");
      case 20:
        return CFSTR("Invalid Request");
      case 21:
        return CFSTR("No Network");
      case 22:
        return CFSTR("No Results");
      case 23:
        return CFSTR("Server Error");
      case 24:
        return CFSTR("Not Supported");
      case 25:
        return CFSTR("Missing Entitlement");
      case 26:
        return CFSTR("Missing URL");
      case 27:
        return CFSTR("Throttled");
      case 28:
        return CFSTR("Cancelled");
      case 29:
        return CFSTR("Connection Lost");
      case 30:
        return (__CFString *)(id)a1;
      default:
        if (CFSTR("None") == (__CFString *)-300)
        {
          result = CFSTR("XPC Interrupted");
        }
        else
        {
          if (CFSTR("None") != (__CFString *)-213)
            goto LABEL_66;
          result = CFSTR("No Active Tile Group");
        }
        break;
    }
  }
  return result;
}

uint64_t GEOMapServiceTraitsReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  int *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int32x4_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  char v31;
  int *v32;
  int *v33;
  int v34;
  int *v35;
  int *v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  BOOL v43;
  int v44;
  int v45;
  unint64_t v47;
  BOOL v48;
  int *v49;
  int v50;
  int v51;
  BOOL v52;
  GEOLocation *v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  char v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  unint64_t v135;
  int *v136;
  int *v137;
  char v138;
  unsigned int v139;
  uint64_t v140;
  int *v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char v150;
  char v151;
  unsigned int v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  char v156;
  unsigned int v157;
  uint64_t v158;
  unint64_t v159;
  char v160;
  char v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  char v166;
  unsigned int v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  char v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t v174;
  char v175;
  char v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  char v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char v187;
  char v188;
  unsigned int v189;
  uint64_t v190;
  unint64_t v191;
  char v192;
  char v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char v198;
  char v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  char v204;
  int *v205;
  int *v206;
  char v207;
  unsigned int v208;
  uint64_t v209;
  int *v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  char v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char v219;
  int *v220;
  int *v221;
  char v222;
  unsigned int v223;
  uint64_t v224;
  int *v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  id v230;
  void *v231;
  int v232;
  char v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  char v239;
  char v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  char v245;
  char v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  char v251;
  char v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  char v257;
  char v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char v263;
  char v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  char v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  char v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char v279;
  char v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  char v285;
  char v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char v291;
  char v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  char v297;
  char v298;
  unsigned int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  char v304;
  int *v305;
  int *v306;
  char v307;
  unsigned int v308;
  uint64_t v309;
  int *v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  char v314;
  int *v315;
  int *v316;
  char v317;
  unsigned int v318;
  uint64_t v319;
  int *v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  char v324;
  char v325;
  unsigned int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  char v331;
  char v332;
  unsigned int v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  char v337;
  char v338;
  unsigned int v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  char v343;
  uint64_t v344;
  unint64_t v345;
  char v346;
  unsigned int v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  char v352;
  char v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  char v359;
  char v360;
  unsigned int v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  char v365;
  int *v366;
  int *v367;
  char v368;
  unsigned int v369;
  uint64_t v370;
  int *v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  char v375;
  char v376;
  unsigned int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  char v382;
  int *v383;
  int *v384;
  char v385;
  unsigned int v386;
  uint64_t v387;
  int *v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  char v392;
  char v393;
  unsigned int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  char v399;
  char v400;
  unsigned int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  char v406;
  char v407;
  unsigned int v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  char v413;
  int *v414;
  int *v415;
  char v416;
  unsigned int v417;
  uint64_t v418;
  int *v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  char v423;
  char v424;
  unsigned int v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t v429;
  char v430;
  int *v431;
  int *v432;
  char v433;
  unsigned int v434;
  uint64_t v435;
  int *v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  char v440;
  char v441;
  unsigned int v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  char v446;
  char v447;
  unsigned int v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  char v452;
  char v453;
  unsigned int v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  char v458;
  int *v459;
  int *v460;
  char v461;
  unsigned int v462;
  uint64_t v463;
  int *v464;
  uint64_t v465;
  unint64_t v466;
  char v467;
  char v468;
  unsigned int v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  char v473;
  char v474;
  unsigned int v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  char v479;
  void *v480;
  char v481;
  unsigned int v482;
  uint64_t v483;
  unint64_t v484;
  char v485;
  char v486;
  unsigned int v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  char v491;
  char v492;
  unsigned int v493;
  uint64_t v494;
  uint64_t v495;
  unint64_t v496;
  char v497;
  char v498;
  unsigned int v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  char v503;
  char v504;
  unsigned int v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  char v509;
  char v510;
  unsigned int v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  char v515;
  char v516;
  char v517;
  uint64_t v518;
  BOOL v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  char v523;
  unsigned int v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  char v528;
  char v529;
  unsigned int v530;
  uint64_t v531;
  int *v532;
  uint64_t v533;
  unint64_t v534;
  char v535;
  char v536;
  unsigned int v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t v541;
  char v542;
  char v543;
  unsigned int v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t v548;
  char v549;
  char v550;
  unsigned int v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  unint64_t v555;
  char v556;
  char v557;
  unsigned int v558;
  uint64_t v559;
  int *v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  char v564;
  char v565;
  unsigned int v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  char v571;
  char v572;
  unsigned int v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  char v578;
  char v579;
  unsigned int v580;
  uint64_t v581;
  int *v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t v585;
  char v586;
  char v587;
  unsigned int v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t v591;
  char v592;
  uint64_t v593;
  int v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  void *v598;
  char v600;
  char v601;
  char v602;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 616));
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 612);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 608));
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = *(_OWORD *)(a1 + 756);
  v11 = 0;
  v12 = (int *)MEMORY[0x1E0D82BD8];
  *(int32x2_t *)v13.i8 = vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 17), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 40));
  v13.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 24), (int32x2_t)HIDWORD(*((_QWORD *)&v10 + 1)));
  *(int32x2_t *)v14.i8 = vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 19), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 25));
  v14.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 7), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 1));
  *(int32x2_t *)v15.i8 = vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 8), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 28));
  v15.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 21), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 22));
  *(int32x2_t *)v16.i8 = vzip1_s32((int32x2_t)(v10 >> 63), *(int32x2_t *)((char *)&v10 + 8));
  v16.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 43), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 10));
  *(int32x2_t *)v17.i8 = vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 23), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 29));
  v17.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 35), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 16));
  *(int32x2_t *)v18.i8 = vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 3), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 41));
  v18.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 5), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 4));
  *(int32x2_t *)v19.i8 = vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 12), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 11));
  v19.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 13), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 20));
  *(int32x2_t *)v20.i8 = vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 27), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 15));
  v20.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 39), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 44));
  v21.i64[0] = 0x100000001;
  v21.i64[1] = 0x100000001;
  *(int32x2_t *)v22.i8 = vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 30), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 34));
  v22.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 18), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 6));
  *(int32x2_t *)v23.i8 = vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 14), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 37));
  v23.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 9), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 31));
  v24 = (int32x4_t)vandq_s8(v23, v21);
  *(int32x2_t *)v23.i8 = vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 2), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 36));
  v23.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((_QWORD *)&v10 + 1) >> 38), (int32x2_t)(*((_QWORD *)&v10 + 1) >> 33));
  v25 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v19, v21), (int32x4_t)vandq_s8(v20, v21)), vaddq_s32((int32x4_t)vandq_s8(v17, v21), (int32x4_t)vandq_s8(v18, v21))), vaddq_s32((int32x4_t)vandq_s8(v22, v21), v24)), vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v15, v21), (int32x4_t)vandq_s8(v16, v21)), vaddq_s32((int32x4_t)vandq_s8(v13, v21), (int32x4_t)vandq_s8(v14, v21))), (int32x4_t)vandq_s8(v23, v21))))+ ((*((_QWORD *)&v10 + 1) >> 42) & 1)+ ((DWORD2(v10) >> 26) & 1)+ ((v10 & 0x4000000000000000) != 0);
  while (2)
  {
    v26 = 1;
    v27 = 1;
    v28 = 1;
    switch(a3[v6])
    {
      case -4:
        ++v25;
        goto LABEL_8;
      case -3:
        v11 = 1;
        goto LABEL_7;
      case -2:
        v27 = v8;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v29 = v25 > 0x23;
        v30 = v29 & ~(_BYTE)v9 | v7;
        v31 = v29 | v9;
        v602 = v11;
        v32 = (int *)MEMORY[0x1E0D82BF0];
        if ((((v29 | v9) | v11) & 1) != 0)
          v33 = 0;
        else
          v33 = a3;
        v34 = 1;
        v35 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]))
          goto LABEL_1261;
        v600 = v31 | v30;
        v36 = (int *)MEMORY[0x1E0D82BB8];
        v601 = v29 & ~(_BYTE)v9 | v7;
        break;
      default:
        ++v25;
LABEL_7:
        v26 = v7;
LABEL_8:
        v27 = v8;
        v28 = v9;
LABEL_10:
        ++v6;
        v7 = v26;
        v8 = v27;
        v9 = v28;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v35))
      goto LABEL_1253;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    while (1)
    {
      v40 = *v32;
      v41 = *(_QWORD *)(v3 + v40);
      if (v41 == -1 || v41 >= *(_QWORD *)(v3 + *v12))
        break;
      v42 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v41);
      *(_QWORD *)(v3 + v40) = v41 + 1;
      v39 |= (unint64_t)(v42 & 0x7F) << v37;
      if ((v42 & 0x80) == 0)
        goto LABEL_25;
      v37 += 7;
      v43 = v38++ >= 9;
      if (v43)
      {
        v39 = 0;
        v44 = *(unsigned __int8 *)(v3 + *v35);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v35) = 1;
LABEL_25:
    v44 = *(unsigned __int8 *)(v3 + *v35);
    if (*(_BYTE *)(v3 + *v35))
      v39 = 0;
LABEL_27:
    v45 = v39 & 7;
    if (v44 || v45 == 4)
    {
LABEL_1253:
      v34 = 1;
      if ((v30 & 1) != 0)
        goto LABEL_1262;
      goto LABEL_1263;
    }
    v47 = v39 >> 3;
    v48 = v31;
    if (!((v33 == 0) | v31 & 1))
    {
      v49 = v33;
      do
      {
        v51 = *v49++;
        v50 = v51;
        v48 = v51 != 0;
        if (v51)
          v52 = v50 == (_DWORD)v47;
        else
          v52 = 1;
      }
      while (!v52);
    }
    switch((int)v47)
    {
      case 1:
        if ((v602 & 1) == 0)
          goto LABEL_871;
        if (!PBReaderPlaceMark() || (GEOSessionIDReadAllFrom((_QWORD *)(a1 + 264), v3) & 1) == 0)
          goto LABEL_1260;
        PBReaderRecallMark();
        *(_QWORD *)(a1 + 756) |= 1uLL;
        goto LABEL_1164;
      case 2:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v214 = 0;
        v215 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x10000000uLL;
        while (2)
        {
          v216 = *v32;
          v217 = *(_QWORD *)(v3 + v216);
          v218 = v217 + 1;
          if (v217 == -1 || v218 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v219 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v217);
            *(_QWORD *)(v3 + v216) = v218;
            v56 |= (unint64_t)(v219 & 0x7F) << v214;
            if (v219 < 0)
            {
              v214 += 7;
              v43 = v215++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_966;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_966:
        v518 = 708;
        goto LABEL_1079;
      case 3:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 765) & 8) == 0)
        {
          PBReaderReadString();
          v61 = objc_claimAutoreleasedReturnValue();
          v62 = 296;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_1260;
        v521 = *(_QWORD *)(a1 + 764) << 52;
        goto LABEL_1163;
      case 4:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 765) & 0x10) == 0)
        {
          PBReaderReadString();
          v61 = objc_claimAutoreleasedReturnValue();
          v62 = 304;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_1260;
        v521 = *(_QWORD *)(a1 + 764) << 51;
        goto LABEL_1163;
      case 5:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 765) & 0x20) == 0)
        {
          PBReaderReadString();
          v61 = objc_claimAutoreleasedReturnValue();
          v62 = 312;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_1260;
        v521 = *(_QWORD *)(a1 + 764) << 50;
        goto LABEL_1163;
      case 6:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 766) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1260;
          v521 = *(_QWORD *)(a1 + 764) << 43;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 384;
        goto LABEL_768;
      case 7:
        if (!v48 || (*(_BYTE *)(a1 + 765) & 1) != 0)
          goto LABEL_873;
        if (v45 != 2)
        {
          v536 = 0;
          v537 = 0;
          v538 = 0;
          while (1)
          {
            v539 = *v32;
            v540 = *(_QWORD *)(v3 + v539);
            v541 = v540 + 1;
            if (v540 == -1 || v541 > *(_QWORD *)(v3 + *v12))
              goto LABEL_1249;
            v542 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v540);
            *(_QWORD *)(v3 + v539) = v541;
            v538 |= (unint64_t)(v542 & 0x7F) << v536;
            if (v542 < 0)
            {
              v536 += 7;
              v43 = v537++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_1260;
        while (1)
        {
          v220 = (int *)MEMORY[0x1E0D82BD8];
          v221 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v32) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_731;
          }
          v222 = 0;
          v223 = 0;
          v224 = 0;
          v225 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v226 = *v32;
            v227 = *(_QWORD *)(v3 + v226);
            v228 = v227 + 1;
            if (v227 == -1 || v228 > *(_QWORD *)(v3 + *v220))
              break;
            v229 = *(_BYTE *)(*(_QWORD *)(v3 + *v225) + v227);
            *(_QWORD *)(v3 + v226) = v228;
            v224 |= (unint64_t)(v229 & 0x7F) << v222;
            if (v229 < 0)
            {
              v222 += 7;
              v43 = v223++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_324;
          }
          *(_BYTE *)(v3 + *v221) = 1;
LABEL_324:
          PBRepeatedInt32Add();
        }
      case 8:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 767) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1260;
          v521 = *(_QWORD *)(a1 + 764) << 35;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOMapRegion);
        if (!GEOMapRegionReadAllFrom((uint64_t)v53, (void *)v3))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 456;
        goto LABEL_768;
      case 9:
        if (!v48 || (*(_BYTE *)(a1 + 766) & 0x20) != 0)
          goto LABEL_871;
        PBReaderReadString();
        v53 = (GEOLocation *)objc_claimAutoreleasedReturnValue();
        if (v53)
          -[GEOMapServiceTraits _addNoFlagsDeviceDisplayLanguage:](a1, v53);
        goto LABEL_658;
      case 10:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 766) & 0x40) == 0)
        {
          PBReaderReadString();
          v61 = objc_claimAutoreleasedReturnValue();
          v62 = 400;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_1260;
        v521 = *(_QWORD *)(a1 + 764) << 41;
        goto LABEL_1163;
      case 11:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 766) & 0x80) == 0)
        {
          PBReaderReadString();
          v61 = objc_claimAutoreleasedReturnValue();
          v62 = 408;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_1260;
        v521 = *(_QWORD *)(a1 + 764) << 40;
        goto LABEL_1163;
      case 14:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v233 = 0;
        v234 = 0;
        v235 = 0;
        *(_QWORD *)(a1 + 756) |= 0x8000000000uLL;
        while (2)
        {
          v236 = *v32;
          v237 = *(_QWORD *)(v3 + v236);
          v238 = v237 + 1;
          if (v237 == -1 || v238 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v239 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v237);
            *(_QWORD *)(v3 + v236) = v238;
            v235 |= (unint64_t)(v239 & 0x7F) << v233;
            if (v239 < 0)
            {
              v233 += 7;
              v43 = v234++ >= 9;
              if (v43)
              {
                v235 = 0;
                goto LABEL_970;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v235 = 0;
LABEL_970:
        v519 = v235 != 0;
        v520 = 731;
        goto LABEL_1100;
      case 15:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v240 = 0;
        v241 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x20000000uLL;
        while (2)
        {
          v242 = *v32;
          v243 = *(_QWORD *)(v3 + v242);
          v244 = v243 + 1;
          if (v243 == -1 || v244 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v245 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v243);
            *(_QWORD *)(v3 + v242) = v244;
            v56 |= (unint64_t)(v245 & 0x7F) << v240;
            if (v245 < 0)
            {
              v240 += 7;
              v43 = v241++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_974;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_974:
        v518 = 712;
        goto LABEL_1079;
      case 16:
        if (!v48 || (*(_BYTE *)(a1 + 767) & 0x20) != 0)
          goto LABEL_871;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOTraitsPhotoSize);
        if (!GEOTraitsPhotoSizeReadAllFrom((uint64_t)v53, (void *)v3))
          goto LABEL_1259;
        PBReaderRecallMark();
        -[GEOMapServiceTraits _addNoFlagsPhotoSizes:](a1, v53);
        goto LABEL_658;
      case 17:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v246 = 0;
        v247 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x20000uLL;
        while (2)
        {
          v248 = *v32;
          v249 = *(_QWORD *)(v3 + v248);
          v250 = v249 + 1;
          if (v249 == -1 || v250 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v251 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v249);
            *(_QWORD *)(v3 + v248) = v250;
            v56 |= (unint64_t)(v251 & 0x7F) << v246;
            if (v251 < 0)
            {
              v246 += 7;
              v43 = v247++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_978;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_978:
        v518 = 664;
        goto LABEL_1079;
      case 18:
        if (!v48 || (*(_BYTE *)(a1 + 768) & 8) != 0)
          goto LABEL_871;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOTraitsPhotoSize);
        if (!GEOTraitsPhotoSizeReadAllFrom((uint64_t)v53, (void *)v3))
          goto LABEL_1259;
        PBReaderRecallMark();
        -[GEOMapServiceTraits _addNoFlagsReviewUserPhotoSizes:](a1, v53);
        goto LABEL_658;
      case 19:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v252 = 0;
        v253 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x1000000uLL;
        while (2)
        {
          v254 = *v32;
          v255 = *(_QWORD *)(v3 + v254);
          v256 = v255 + 1;
          if (v255 == -1 || v256 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v257 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v255);
            *(_QWORD *)(v3 + v254) = v256;
            v56 |= (unint64_t)(v257 & 0x7F) << v252;
            if (v257 < 0)
            {
              v252 += 7;
              v43 = v253++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_982;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_982:
        v518 = 692;
        goto LABEL_1079;
      case 20:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v258 = 0;
        v259 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x40000000uLL;
        while (2)
        {
          v260 = *v32;
          v261 = *(_QWORD *)(v3 + v260);
          v262 = v261 + 1;
          if (v261 == -1 || v262 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v263 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v261);
            *(_QWORD *)(v3 + v260) = v262;
            v56 |= (unint64_t)(v263 & 0x7F) << v258;
            if (v263 < 0)
            {
              v258 += 7;
              v43 = v259++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_986;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_986:
        v518 = 716;
        goto LABEL_1079;
      case 21:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v54 = 0;
        v55 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x80000000uLL;
        while (2)
        {
          v57 = *v32;
          v58 = *(_QWORD *)(v3 + v57);
          v59 = v58 + 1;
          if (v58 == -1 || v59 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v60 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v58);
            *(_QWORD *)(v3 + v57) = v59;
            v56 |= (unint64_t)(v60 & 0x7F) << v54;
            if (v60 < 0)
            {
              v54 += 7;
              v43 = v55++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_878;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_878:
        v518 = 720;
        goto LABEL_1079;
      case 23:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v264 = 0;
        v265 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x200uLL;
        while (2)
        {
          v266 = *v32;
          v267 = *(_QWORD *)(v3 + v266);
          v268 = v267 + 1;
          if (v267 == -1 || v268 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v269 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v267);
            *(_QWORD *)(v3 + v266) = v268;
            v56 |= (unint64_t)(v269 & 0x7F) << v264;
            if (v269 < 0)
            {
              v264 += 7;
              v43 = v265++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_990;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_990:
        v518 = 632;
        goto LABEL_1079;
      case 24:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 766) & 1) == 0)
        {
          PBReaderReadString();
          v61 = objc_claimAutoreleasedReturnValue();
          v62 = 336;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_1260;
        v521 = *(_QWORD *)(a1 + 764) << 47;
        goto LABEL_1163;
      case 25:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 766) & 2) == 0)
        {
          PBReaderReadString();
          v61 = objc_claimAutoreleasedReturnValue();
          v62 = 344;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_1260;
        v521 = *(_QWORD *)(a1 + 764) << 46;
        goto LABEL_1163;
      case 26:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        *(_QWORD *)(a1 + 756) |= 4uLL;
        v270 = *v32;
        v271 = *(_QWORD *)(v3 + v270);
        if (v271 <= 0xFFFFFFFFFFFFFFF7 && v271 + 8 <= *(_QWORD *)(v3 + *v12))
        {
          v65 = *(_QWORD *)(*(_QWORD *)(v3 + *v36) + v271);
          *(_QWORD *)(v3 + v270) = v271 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v35) = 1;
          v65 = 0;
        }
        v522 = 360;
        goto LABEL_1213;
      case 27:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        *(_QWORD *)(a1 + 756) |= 2uLL;
        v272 = *v32;
        v273 = *(_QWORD *)(v3 + v272);
        if (v273 <= 0xFFFFFFFFFFFFFFF7 && v273 + 8 <= *(_QWORD *)(v3 + *v12))
        {
          v65 = *(_QWORD *)(*(_QWORD *)(v3 + *v36) + v273);
          *(_QWORD *)(v3 + v272) = v273 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v35) = 1;
          v65 = 0;
        }
        v522 = 352;
        goto LABEL_1213;
      case 28:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 769) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1260;
          v521 = *(_QWORD *)(a1 + 764) << 23;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOTraitsTransitScheduleFilter);
        if (!GEOTraitsTransitScheduleFilterReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 568;
        goto LABEL_768;
      case 29:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        *(_QWORD *)(a1 + 756) |= 0x10uLL;
        v63 = *v32;
        v64 = *(_QWORD *)(v3 + v63);
        if (v64 <= 0xFFFFFFFFFFFFFFF7 && v64 + 8 <= *(_QWORD *)(v3 + *v12))
        {
          v65 = *(_QWORD *)(*(_QWORD *)(v3 + *v36) + v64);
          *(_QWORD *)(v3 + v63) = v64 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v35) = 1;
          v65 = 0;
        }
        v522 = 464;
        goto LABEL_1213;
      case 30:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v274 = 0;
        v275 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x4000uLL;
        while (2)
        {
          v276 = *v32;
          v277 = *(_QWORD *)(v3 + v276);
          v278 = v277 + 1;
          if (v277 == -1 || v278 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v279 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v277);
            *(_QWORD *)(v3 + v276) = v278;
            v56 |= (unint64_t)(v279 & 0x7F) << v274;
            if (v279 < 0)
            {
              v274 += 7;
              v43 = v275++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_994;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_994:
        v518 = 652;
        goto LABEL_1079;
      case 31:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 767) & 1) == 0)
        {
          PBReaderReadString();
          v61 = objc_claimAutoreleasedReturnValue();
          v62 = 416;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_1260;
        v521 = *(_QWORD *)(a1 + 764) << 39;
        goto LABEL_1163;
      case 32:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 768) & 1) == 0)
        {
          PBReaderReadString();
          v61 = objc_claimAutoreleasedReturnValue();
          v62 = 496;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_1260;
        v521 = *(_QWORD *)(a1 + 764) << 31;
        goto LABEL_1163;
      case 33:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v280 = 0;
        v281 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x800uLL;
        while (2)
        {
          v282 = *v32;
          v283 = *(_QWORD *)(v3 + v282);
          v284 = v283 + 1;
          if (v283 == -1 || v284 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v285 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v283);
            *(_QWORD *)(v3 + v282) = v284;
            v56 |= (unint64_t)(v285 & 0x7F) << v280;
            if (v285 < 0)
            {
              v280 += 7;
              v43 = v281++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_998;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_998:
        v518 = 640;
        goto LABEL_1079;
      case 34:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v286 = 0;
        v287 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x400uLL;
        while (2)
        {
          v288 = *v32;
          v289 = *(_QWORD *)(v3 + v288);
          v290 = v289 + 1;
          if (v289 == -1 || v290 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v291 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v289);
            *(_QWORD *)(v3 + v288) = v290;
            v56 |= (unint64_t)(v291 & 0x7F) << v286;
            if (v291 < 0)
            {
              v286 += 7;
              v43 = v287++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1002;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_1002:
        v518 = 636;
        goto LABEL_1079;
      case 35:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v292 = 0;
        v293 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x100uLL;
        while (2)
        {
          v294 = *v32;
          v295 = *(_QWORD *)(v3 + v294);
          v296 = v295 + 1;
          if (v295 == -1 || v296 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v297 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v295);
            *(_QWORD *)(v3 + v294) = v296;
            v56 |= (unint64_t)(v297 & 0x7F) << v292;
            if (v297 < 0)
            {
              v292 += 7;
              v43 = v293++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1006;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_1006:
        v518 = 628;
        goto LABEL_1079;
      case 36:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v298 = 0;
        v299 = 0;
        v300 = 0;
        *(_QWORD *)(a1 + 756) |= 0x400000000000uLL;
        while (2)
        {
          v301 = *v32;
          v302 = *(_QWORD *)(v3 + v301);
          v303 = v302 + 1;
          if (v302 == -1 || v303 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v304 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v302);
            *(_QWORD *)(v3 + v301) = v303;
            v300 |= (unint64_t)(v304 & 0x7F) << v298;
            if (v304 < 0)
            {
              v298 += 7;
              v43 = v299++ >= 9;
              if (v43)
              {
                v300 = 0;
                goto LABEL_1010;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v300 = 0;
LABEL_1010:
        v519 = v300 != 0;
        v520 = 738;
        goto LABEL_1100;
      case 38:
        if (!v48 || (*(_BYTE *)(a1 + 767) & 8) != 0)
          goto LABEL_871;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1))
          goto LABEL_1259;
        PBReaderRecallMark();
        -[GEOMapServiceTraits _addNoFlagsHistoricalLocations:](a1, v53);
        goto LABEL_658;
      case 39:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 765) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1260;
          v521 = *(_QWORD *)(a1 + 764) << 48;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOAutomobileOptions);
        if (!GEOAutomobileOptionsReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 328;
        goto LABEL_768;
      case 40:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 768) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1260;
          v521 = *(_QWORD *)(a1 + 764) << 24;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOTransitOptions);
        if (!GEOTransitOptionsReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 560;
        goto LABEL_768;
      case 41:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 769) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1260;
          v521 = *(_QWORD *)(a1 + 764) << 19;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOWalkingOptions);
        if (!GEOWalkingOptionsReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 600;
        goto LABEL_768;
      case 42:
        if (!v48 || (*(_BYTE *)(a1 + 763) & 0x80) != 0)
          goto LABEL_873;
        if (v45 != 2)
        {
          v543 = 0;
          v544 = 0;
          v545 = 0;
          while (1)
          {
            v546 = *v32;
            v547 = *(_QWORD *)(v3 + v546);
            v548 = v547 + 1;
            if (v547 == -1 || v548 > *(_QWORD *)(v3 + *v12))
              goto LABEL_1249;
            v549 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v547);
            *(_QWORD *)(v3 + v546) = v548;
            v545 |= (unint64_t)(v549 & 0x7F) << v543;
            if (v549 < 0)
            {
              v543 += 7;
              v43 = v544++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_1260;
        while (1)
        {
          v305 = (int *)MEMORY[0x1E0D82BD8];
          v306 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v32) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_731;
          }
          v307 = 0;
          v308 = 0;
          v309 = 0;
          v310 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v311 = *v32;
            v312 = *(_QWORD *)(v3 + v311);
            v313 = v312 + 1;
            if (v312 == -1 || v313 > *(_QWORD *)(v3 + *v305))
              break;
            v314 = *(_BYTE *)(*(_QWORD *)(v3 + *v310) + v312);
            *(_QWORD *)(v3 + v311) = v313;
            v309 |= (unint64_t)(v314 & 0x7F) << v307;
            if (v314 < 0)
            {
              v307 += 7;
              v43 = v308++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_490;
          }
          *(_BYTE *)(v3 + *v306) = 1;
LABEL_490:
          PBRepeatedInt32Add();
        }
      case 43:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v67 = 0;
        v68 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x200000uLL;
        while (2)
        {
          v69 = *v32;
          v70 = *(_QWORD *)(v3 + v69);
          v71 = v70 + 1;
          if (v70 == -1 || v71 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v72 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v70);
            *(_QWORD *)(v3 + v69) = v71;
            v56 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              v43 = v68++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_882;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_882:
        v518 = 680;
        goto LABEL_1079;
      case 44:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v73 = 0;
        v74 = 0;
        v75 = 0;
        *(_QWORD *)(a1 + 756) |= 0x80000000000000uLL;
        while (2)
        {
          v76 = *v32;
          v77 = *(_QWORD *)(v3 + v76);
          v78 = v77 + 1;
          if (v77 == -1 || v78 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v79 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v77);
            *(_QWORD *)(v3 + v76) = v78;
            v75 |= (unint64_t)(v79 & 0x7F) << v73;
            if (v79 < 0)
            {
              v73 += 7;
              v43 = v74++ >= 9;
              if (v43)
              {
                v75 = 0;
                goto LABEL_886;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v75 = 0;
LABEL_886:
        v519 = v75 != 0;
        v520 = 747;
        goto LABEL_1100;
      case 45:
        if (!v48 || (*(_BYTE *)(a1 + 764) & 1) != 0)
          goto LABEL_873;
        if (v45 != 2)
        {
          v550 = 0;
          v551 = 0;
          v552 = 0;
          while (1)
          {
            v553 = *v32;
            v554 = *(_QWORD *)(v3 + v553);
            v555 = v554 + 1;
            if (v554 == -1 || v555 > *(_QWORD *)(v3 + *v12))
              goto LABEL_1249;
            v556 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v554);
            *(_QWORD *)(v3 + v553) = v555;
            v552 |= (unint64_t)(v556 & 0x7F) << v550;
            if (v556 < 0)
            {
              v550 += 7;
              v43 = v551++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_1260;
        while (1)
        {
          v315 = (int *)MEMORY[0x1E0D82BD8];
          v316 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v32) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_731;
          }
          v317 = 0;
          v318 = 0;
          v319 = 0;
          v320 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v321 = *v32;
            v322 = *(_QWORD *)(v3 + v321);
            v323 = v322 + 1;
            if (v322 == -1 || v323 > *(_QWORD *)(v3 + *v315))
              break;
            v324 = *(_BYTE *)(*(_QWORD *)(v3 + *v320) + v322);
            *(_QWORD *)(v3 + v321) = v323;
            v319 |= (unint64_t)(v324 & 0x7F) << v317;
            if (v324 < 0)
            {
              v317 += 7;
              v43 = v318++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_505;
          }
          *(_BYTE *)(v3 + *v316) = 1;
LABEL_505:
          PBRepeatedInt32Add();
        }
      case 46:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v325 = 0;
        v326 = 0;
        v327 = 0;
        *(_QWORD *)(a1 + 756) |= 0x1000000000000000uLL;
        while (2)
        {
          v328 = *v32;
          v329 = *(_QWORD *)(v3 + v328);
          v330 = v329 + 1;
          if (v329 == -1 || v330 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v331 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v329);
            *(_QWORD *)(v3 + v328) = v330;
            v327 |= (unint64_t)(v331 & 0x7F) << v325;
            if (v331 < 0)
            {
              v325 += 7;
              v43 = v326++ >= 9;
              if (v43)
              {
                v327 = 0;
                goto LABEL_1014;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v327 = 0;
LABEL_1014:
        v519 = v327 != 0;
        v520 = 752;
        goto LABEL_1100;
      case 47:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 769) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1260;
          v521 = *(_QWORD *)(a1 + 764) << 20;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOPDVenueIdentifier);
        if (!GEOPDVenueIdentifierReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 592;
        goto LABEL_768;
      case 48:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v80 = 0;
        v81 = 0;
        v82 = 0;
        *(_QWORD *)(a1 + 756) |= 0x100000000000000uLL;
        while (2)
        {
          v83 = *v32;
          v84 = *(_QWORD *)(v3 + v83);
          v85 = v84 + 1;
          if (v84 == -1 || v85 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v86 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v84);
            *(_QWORD *)(v3 + v83) = v85;
            v82 |= (unint64_t)(v86 & 0x7F) << v80;
            if (v86 < 0)
            {
              v80 += 7;
              v43 = v81++ >= 9;
              if (v43)
              {
                v82 = 0;
                goto LABEL_890;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v82 = 0;
LABEL_890:
        v519 = v82 != 0;
        v520 = 748;
        goto LABEL_1100;
      case 49:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v87 = 0;
        v88 = 0;
        v89 = 0;
        *(_QWORD *)(a1 + 756) |= 0x4000000000uLL;
        while (2)
        {
          v90 = *v32;
          v91 = *(_QWORD *)(v3 + v90);
          v92 = v91 + 1;
          if (v91 == -1 || v92 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v93 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v91);
            *(_QWORD *)(v3 + v90) = v92;
            v89 |= (unint64_t)(v93 & 0x7F) << v87;
            if (v93 < 0)
            {
              v87 += 7;
              v43 = v88++ >= 9;
              if (v43)
              {
                v89 = 0;
                goto LABEL_894;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v89 = 0;
LABEL_894:
        v519 = v89 != 0;
        v520 = 730;
        goto LABEL_1100;
      case 50:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v332 = 0;
        v333 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x400000uLL;
        while (2)
        {
          v334 = *v32;
          v335 = *(_QWORD *)(v3 + v334);
          v336 = v335 + 1;
          if (v335 == -1 || v336 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v337 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v335);
            *(_QWORD *)(v3 + v334) = v336;
            v56 |= (unint64_t)(v337 & 0x7F) << v332;
            if (v337 < 0)
            {
              v332 += 7;
              v43 = v333++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1018;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_1018:
        v518 = 684;
        goto LABEL_1079;
      case 51:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v338 = 0;
        v339 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x2000uLL;
        while (2)
        {
          v340 = *v32;
          v341 = *(_QWORD *)(v3 + v340);
          v342 = v341 + 1;
          if (v341 == -1 || v342 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v343 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v341);
            *(_QWORD *)(v3 + v340) = v342;
            v56 |= (unint64_t)(v343 & 0x7F) << v338;
            if (v343 < 0)
            {
              v338 += 7;
              v43 = v339++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1022;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_1022:
        v518 = 648;
        goto LABEL_1079;
      case 52:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 765) & 4) == 0)
        {
          PBReaderReadString();
          v61 = objc_claimAutoreleasedReturnValue();
          v62 = 288;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_1260;
        v521 = *(_QWORD *)(a1 + 764) << 53;
        goto LABEL_1163;
      case 53:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        *(_QWORD *)(a1 + 756) |= 0x20uLL;
        v344 = *v32;
        v345 = *(_QWORD *)(v3 + v344);
        if (v345 <= 0xFFFFFFFFFFFFFFF7 && v345 + 8 <= *(_QWORD *)(v3 + *v12))
        {
          v65 = *(_QWORD *)(*(_QWORD *)(v3 + *v36) + v345);
          *(_QWORD *)(v3 + v344) = v345 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v35) = 1;
          v65 = 0;
        }
        v522 = 544;
        goto LABEL_1213;
      case 54:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v94 = 0;
        v95 = 0;
        v96 = 0;
        *(_QWORD *)(a1 + 756) |= 0x40000000000000uLL;
        while (2)
        {
          v97 = *v32;
          v98 = *(_QWORD *)(v3 + v97);
          v99 = v98 + 1;
          if (v98 == -1 || v99 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v100 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v98);
            *(_QWORD *)(v3 + v97) = v99;
            v96 |= (unint64_t)(v100 & 0x7F) << v94;
            if (v100 < 0)
            {
              v94 += 7;
              v43 = v95++ >= 9;
              if (v43)
              {
                v96 = 0;
                goto LABEL_898;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v96 = 0;
LABEL_898:
        v519 = v96 != 0;
        v520 = 746;
        goto LABEL_1100;
      case 55:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v101 = 0;
        v102 = 0;
        v103 = 0;
        *(_QWORD *)(a1 + 756) |= 0x400000000000000uLL;
        while (2)
        {
          v104 = *v32;
          v105 = *(_QWORD *)(v3 + v104);
          v106 = v105 + 1;
          if (v105 == -1 || v106 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v107 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v105);
            *(_QWORD *)(v3 + v104) = v106;
            v103 |= (unint64_t)(v107 & 0x7F) << v101;
            if (v107 < 0)
            {
              v101 += 7;
              v43 = v102++ >= 9;
              if (v43)
              {
                v103 = 0;
                goto LABEL_902;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v103 = 0;
LABEL_902:
        v519 = v103 != 0;
        v520 = 750;
        goto LABEL_1100;
      case 56:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v346 = 0;
        v347 = 0;
        v348 = 0;
        *(_QWORD *)(a1 + 756) |= 0x2000000000uLL;
        while (2)
        {
          v349 = *v32;
          v350 = *(_QWORD *)(v3 + v349);
          v351 = v350 + 1;
          if (v350 == -1 || v351 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v352 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v350);
            *(_QWORD *)(v3 + v349) = v351;
            v348 |= (unint64_t)(v352 & 0x7F) << v346;
            if (v352 < 0)
            {
              v346 += 7;
              v43 = v347++ >= 9;
              if (v43)
              {
                v348 = 0;
                goto LABEL_1026;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v348 = 0;
LABEL_1026:
        v519 = v348 != 0;
        v520 = 729;
        goto LABEL_1100;
      case 57:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v353 = 0;
        v354 = 0;
        v355 = 0;
        *(_QWORD *)(a1 + 756) |= 0x200000000uLL;
        while (2)
        {
          v356 = *v32;
          v357 = *(_QWORD *)(v3 + v356);
          v358 = v357 + 1;
          if (v357 == -1 || v358 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v359 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v357);
            *(_QWORD *)(v3 + v356) = v358;
            v355 |= (unint64_t)(v359 & 0x7F) << v353;
            if (v359 < 0)
            {
              v353 += 7;
              v43 = v354++ >= 9;
              if (v43)
              {
                v355 = 0;
                goto LABEL_1030;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v355 = 0;
LABEL_1030:
        v519 = v355 != 0;
        v520 = 725;
        goto LABEL_1100;
      case 58:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v108 = 0;
        v109 = 0;
        v110 = 0;
        *(_QWORD *)(a1 + 756) |= 0x800000000000000uLL;
        while (2)
        {
          v111 = *v32;
          v112 = *(_QWORD *)(v3 + v111);
          v113 = v112 + 1;
          if (v112 == -1 || v113 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v114 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v112);
            *(_QWORD *)(v3 + v111) = v113;
            v110 |= (unint64_t)(v114 & 0x7F) << v108;
            if (v114 < 0)
            {
              v108 += 7;
              v43 = v109++ >= 9;
              if (v43)
              {
                v110 = 0;
                goto LABEL_906;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v110 = 0;
LABEL_906:
        v519 = v110 != 0;
        v520 = 751;
        goto LABEL_1100;
      case 59:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v360 = 0;
        v361 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x800000uLL;
        while (2)
        {
          v362 = *v32;
          v363 = *(_QWORD *)(v3 + v362);
          v364 = v363 + 1;
          if (v363 == -1 || v364 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v365 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v363);
            *(_QWORD *)(v3 + v362) = v364;
            v56 |= (unint64_t)(v365 & 0x7F) << v360;
            if (v365 < 0)
            {
              v360 += 7;
              v43 = v361++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1034;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_1034:
        v518 = 688;
        goto LABEL_1079;
      case 60:
        if (!v48 || (*(_BYTE *)(a1 + 764) & 8) != 0)
          goto LABEL_873;
        if (v45 != 2)
        {
          v557 = 0;
          v558 = 0;
          v559 = 0;
          v560 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v561 = *v32;
            v562 = *(_QWORD *)(v3 + v561);
            v563 = v562 + 1;
            if (v562 == -1 || v563 > *(_QWORD *)(v3 + *v12))
              goto LABEL_1249;
            v564 = *(_BYTE *)(*(_QWORD *)(v3 + *v560) + v562);
            *(_QWORD *)(v3 + v561) = v563;
            v559 |= (unint64_t)(v564 & 0x7F) << v557;
            if (v564 < 0)
            {
              v557 += 7;
              v43 = v558++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_1260;
        while (1)
        {
          v366 = (int *)MEMORY[0x1E0D82BD8];
          v367 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v32) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_731;
          }
          v368 = 0;
          v369 = 0;
          v370 = 0;
          v371 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v372 = *v32;
            v373 = *(_QWORD *)(v3 + v372);
            v374 = v373 + 1;
            if (v373 == -1 || v374 > *(_QWORD *)(v3 + *v366))
              break;
            v375 = *(_BYTE *)(*(_QWORD *)(v3 + *v371) + v373);
            *(_QWORD *)(v3 + v372) = v374;
            v370 |= (unint64_t)(v375 & 0x7F) << v368;
            if (v375 < 0)
            {
              v368 += 7;
              v43 = v369++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_580;
          }
          *(_BYTE *)(v3 + *v367) = 1;
LABEL_580:
          PBRepeatedInt32Add();
        }
      case 61:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v115 = 0;
        v116 = 0;
        v117 = 0;
        *(_QWORD *)(a1 + 756) |= 0x40000000000uLL;
        while (2)
        {
          v118 = *v32;
          v119 = *(_QWORD *)(v3 + v118);
          v120 = v119 + 1;
          if (v119 == -1 || v120 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v121 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v119);
            *(_QWORD *)(v3 + v118) = v120;
            v117 |= (unint64_t)(v121 & 0x7F) << v115;
            if (v121 < 0)
            {
              v115 += 7;
              v43 = v116++ >= 9;
              if (v43)
              {
                v117 = 0;
                goto LABEL_910;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v117 = 0;
LABEL_910:
        v519 = v117 != 0;
        v520 = 734;
        goto LABEL_1100;
      case 62:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 769) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1260;
          v521 = *(_QWORD *)(a1 + 764) << 22;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOTraitsTransitScheduleFilter);
        if (!GEOTraitsTransitScheduleFilterReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 576;
        goto LABEL_768;
      case 63:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v376 = 0;
        v377 = 0;
        v378 = 0;
        *(_QWORD *)(a1 + 756) |= 0x20000000000000uLL;
        while (2)
        {
          v379 = *v32;
          v380 = *(_QWORD *)(v3 + v379);
          v381 = v380 + 1;
          if (v380 == -1 || v381 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v382 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v380);
            *(_QWORD *)(v3 + v379) = v381;
            v378 |= (unint64_t)(v382 & 0x7F) << v376;
            if (v382 < 0)
            {
              v376 += 7;
              v43 = v377++ >= 9;
              if (v43)
              {
                v378 = 0;
                goto LABEL_1038;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v378 = 0;
LABEL_1038:
        v519 = v378 != 0;
        v520 = 745;
        goto LABEL_1100;
      case 64:
        if (!v48 || (*(_BYTE *)(a1 + 764) & 0x20) != 0)
          goto LABEL_873;
        if (v45 != 2)
        {
          v565 = 0;
          v566 = 0;
          v567 = 0;
          while (1)
          {
            v568 = *v32;
            v569 = *(_QWORD *)(v3 + v568);
            v570 = v569 + 1;
            if (v569 == -1 || v570 > *(_QWORD *)(v3 + *v12))
              goto LABEL_1249;
            v571 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v569);
            *(_QWORD *)(v3 + v568) = v570;
            v567 |= (unint64_t)(v571 & 0x7F) << v565;
            if (v571 < 0)
            {
              v565 += 7;
              v43 = v566++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_1260;
        while (1)
        {
          v383 = (int *)MEMORY[0x1E0D82BD8];
          v384 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v32) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_731;
          }
          v385 = 0;
          v386 = 0;
          v387 = 0;
          v388 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v389 = *v32;
            v390 = *(_QWORD *)(v3 + v389);
            v391 = v390 + 1;
            if (v390 == -1 || v391 > *(_QWORD *)(v3 + *v383))
              break;
            v392 = *(_BYTE *)(*(_QWORD *)(v3 + *v388) + v390);
            *(_QWORD *)(v3 + v389) = v391;
            v387 |= (unint64_t)(v392 & 0x7F) << v385;
            if (v392 < 0)
            {
              v385 += 7;
              v43 = v386++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_608;
          }
          *(_BYTE *)(v3 + *v384) = 1;
LABEL_608:
          PBRepeatedInt32Add();
        }
      case 65:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v393 = 0;
        v394 = 0;
        v395 = 0;
        *(_QWORD *)(a1 + 756) |= 0x8000000000000uLL;
        while (2)
        {
          v396 = *v32;
          v397 = *(_QWORD *)(v3 + v396);
          v398 = v397 + 1;
          if (v397 == -1 || v398 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v399 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v397);
            *(_QWORD *)(v3 + v396) = v398;
            v395 |= (unint64_t)(v399 & 0x7F) << v393;
            if (v399 < 0)
            {
              v393 += 7;
              v43 = v394++ >= 9;
              if (v43)
              {
                v395 = 0;
                goto LABEL_1042;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v395 = 0;
LABEL_1042:
        v519 = v395 != 0;
        v520 = 743;
        goto LABEL_1100;
      case 66:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v400 = 0;
        v401 = 0;
        v402 = 0;
        *(_QWORD *)(a1 + 756) |= 0x10000000000uLL;
        while (2)
        {
          v403 = *v32;
          v404 = *(_QWORD *)(v3 + v403);
          v405 = v404 + 1;
          if (v404 == -1 || v405 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v406 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v404);
            *(_QWORD *)(v3 + v403) = v405;
            v402 |= (unint64_t)(v406 & 0x7F) << v400;
            if (v406 < 0)
            {
              v400 += 7;
              v43 = v401++ >= 9;
              if (v43)
              {
                v402 = 0;
                goto LABEL_1046;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v402 = 0;
LABEL_1046:
        v519 = v402 != 0;
        v520 = 732;
        goto LABEL_1100;
      case 67:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v407 = 0;
        v408 = 0;
        v409 = 0;
        *(_QWORD *)(a1 + 756) |= 0x800000000uLL;
        while (2)
        {
          v410 = *v32;
          v411 = *(_QWORD *)(v3 + v410);
          v412 = v411 + 1;
          if (v411 == -1 || v412 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v413 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v411);
            *(_QWORD *)(v3 + v410) = v412;
            v409 |= (unint64_t)(v413 & 0x7F) << v407;
            if (v413 < 0)
            {
              v407 += 7;
              v43 = v408++ >= 9;
              if (v43)
              {
                v409 = 0;
                goto LABEL_1050;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v409 = 0;
LABEL_1050:
        v519 = v409 != 0;
        v520 = 727;
        goto LABEL_1100;
      case 68:
        if (!v48 || (*(_BYTE *)(a1 + 764) & 0x10) != 0)
          goto LABEL_873;
        if (v45 != 2)
        {
          v572 = 0;
          v573 = 0;
          v574 = 0;
          while (1)
          {
            v575 = *v32;
            v576 = *(_QWORD *)(v3 + v575);
            v577 = v576 + 1;
            if (v576 == -1 || v577 > *(_QWORD *)(v3 + *v12))
              goto LABEL_1249;
            v578 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v576);
            *(_QWORD *)(v3 + v575) = v577;
            v574 |= (unint64_t)(v578 & 0x7F) << v572;
            if (v578 < 0)
            {
              v572 += 7;
              v43 = v573++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_1260;
        while (1)
        {
          v414 = (int *)MEMORY[0x1E0D82BD8];
          v415 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v32) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_731;
          }
          v416 = 0;
          v417 = 0;
          v418 = 0;
          v419 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v420 = *v32;
            v421 = *(_QWORD *)(v3 + v420);
            v422 = v421 + 1;
            if (v421 == -1 || v422 > *(_QWORD *)(v3 + *v414))
              break;
            v423 = *(_BYTE *)(*(_QWORD *)(v3 + *v419) + v421);
            *(_QWORD *)(v3 + v420) = v422;
            v418 |= (unint64_t)(v423 & 0x7F) << v416;
            if (v423 < 0)
            {
              v416 += 7;
              v43 = v417++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_647;
          }
          *(_BYTE *)(v3 + *v415) = 1;
LABEL_647:
          PBRepeatedInt32Add();
        }
      case 70:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v122 = 0;
        v123 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x8000uLL;
        while (2)
        {
          v124 = *v32;
          v125 = *(_QWORD *)(v3 + v124);
          v126 = v125 + 1;
          if (v125 == -1 || v126 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v127 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v125);
            *(_QWORD *)(v3 + v124) = v126;
            v56 |= (unint64_t)(v127 & 0x7F) << v122;
            if (v127 < 0)
            {
              v122 += 7;
              v43 = v123++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_914;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_914:
        v518 = 656;
        goto LABEL_1079;
      case 71:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 766) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1260;
          v521 = *(_QWORD *)(a1 + 764) << 44;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOCyclingOptions);
        if (!GEOCyclingOptionsReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 376;
        goto LABEL_768;
      case 72:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v128 = 0;
        v129 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x80000uLL;
        while (2)
        {
          v130 = *v32;
          v131 = *(_QWORD *)(v3 + v130);
          v132 = v131 + 1;
          if (v131 == -1 || v132 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v133 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v131);
            *(_QWORD *)(v3 + v130) = v132;
            v56 |= (unint64_t)(v133 & 0x7F) << v128;
            if (v133 < 0)
            {
              v128 += 7;
              v43 = v129++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_918;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_918:
        v518 = 672;
        goto LABEL_1079;
      case 73:
        if (!v48 || (*(_BYTE *)(a1 + 767) & 2) != 0)
        {
LABEL_871:
          v516 = PBReaderSkipValueWithTag();
          v35 = (int *)MEMORY[0x1E0D82BC8];
          v12 = (int *)MEMORY[0x1E0D82BD8];
          if ((v516 & 1) == 0)
            goto LABEL_1256;
          goto LABEL_1165;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOPDEvChargingPort);
        if (!GEOPDEvChargingPortReadAllFrom((uint64_t)v53, (void *)v3))
          goto LABEL_1259;
        PBReaderRecallMark();
        -[GEOMapServiceTraits _addNoFlagsEvChargingPort:](a1, v53);
LABEL_658:

        goto LABEL_1164;
      case 74:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v424 = 0;
        v425 = 0;
        v426 = 0;
        *(_QWORD *)(a1 + 756) |= 0x80000000000uLL;
        while (2)
        {
          v427 = *v32;
          v428 = *(_QWORD *)(v3 + v427);
          v429 = v428 + 1;
          if (v428 == -1 || v429 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v430 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v428);
            *(_QWORD *)(v3 + v427) = v429;
            v426 |= (unint64_t)(v430 & 0x7F) << v424;
            if (v430 < 0)
            {
              v424 += 7;
              v43 = v425++ >= 9;
              if (v43)
              {
                v426 = 0;
                goto LABEL_1054;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v426 = 0;
LABEL_1054:
        v519 = v426 != 0;
        v520 = 735;
        goto LABEL_1100;
      case 75:
        if (!v48 || (*(_BYTE *)(a1 + 764) & 0x80) != 0)
          goto LABEL_873;
        if (v45 != 2)
        {
          v579 = 0;
          v580 = 0;
          v581 = 0;
          v582 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v583 = *v32;
            v584 = *(_QWORD *)(v3 + v583);
            v585 = v584 + 1;
            if (v584 == -1 || v585 > *(_QWORD *)(v3 + *v12))
              goto LABEL_1249;
            v586 = *(_BYTE *)(*(_QWORD *)(v3 + *v582) + v584);
            *(_QWORD *)(v3 + v583) = v585;
            v581 |= (unint64_t)(v586 & 0x7F) << v579;
            if (v586 < 0)
            {
              v579 += 7;
              v43 = v580++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_1260;
        while (1)
        {
          v431 = (int *)MEMORY[0x1E0D82BD8];
          v432 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v32) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_731;
          }
          v433 = 0;
          v434 = 0;
          v435 = 0;
          v436 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v437 = *v32;
            v438 = *(_QWORD *)(v3 + v437);
            v439 = v438 + 1;
            if (v438 == -1 || v439 > *(_QWORD *)(v3 + *v431))
              break;
            v440 = *(_BYTE *)(*(_QWORD *)(v3 + *v436) + v438);
            *(_QWORD *)(v3 + v437) = v439;
            v435 |= (unint64_t)(v440 & 0x7F) << v433;
            if (v440 < 0)
            {
              v433 += 7;
              v43 = v434++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_681;
          }
          *(_BYTE *)(v3 + *v432) = 1;
LABEL_681:
          PBRepeatedInt32Add();
        }
      case 76:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v441 = 0;
        v442 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x80uLL;
        while (2)
        {
          v443 = *v32;
          v444 = *(_QWORD *)(v3 + v443);
          v445 = v444 + 1;
          if (v444 == -1 || v445 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v446 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v444);
            *(_QWORD *)(v3 + v443) = v445;
            v56 |= (unint64_t)(v446 & 0x7F) << v441;
            if (v446 < 0)
            {
              v441 += 7;
              v43 = v442++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1058;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_1058:
        v518 = 624;
        goto LABEL_1079;
      case 77:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v447 = 0;
        v448 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x40000uLL;
        while (2)
        {
          v449 = *v32;
          v450 = *(_QWORD *)(v3 + v449);
          v451 = v450 + 1;
          if (v450 == -1 || v451 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v452 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v450);
            *(_QWORD *)(v3 + v449) = v451;
            v56 |= (unint64_t)(v452 & 0x7F) << v447;
            if (v452 < 0)
            {
              v447 += 7;
              v43 = v448++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1062;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_1062:
        v518 = 668;
        goto LABEL_1079;
      case 78:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        *(_QWORD *)(a1 + 756) |= 8uLL;
        v134 = *v32;
        v135 = *(_QWORD *)(v3 + v134);
        if (v135 <= 0xFFFFFFFFFFFFFFF7 && v135 + 8 <= *(_QWORD *)(v3 + *v12))
        {
          v65 = *(_QWORD *)(*(_QWORD *)(v3 + *v36) + v135);
          *(_QWORD *)(v3 + v134) = v135 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v35) = 1;
          v65 = 0;
        }
        v522 = 448;
LABEL_1213:
        *(_QWORD *)(a1 + v522) = v65;
        goto LABEL_1165;
      case 79:
        if (!v48 || (*(_BYTE *)(a1 + 764) & 2) != 0)
          goto LABEL_873;
        if (v45 != 2)
        {
          v523 = 0;
          v524 = 0;
          v525 = 0;
          while (1)
          {
            v526 = *v32;
            v527 = *(_QWORD *)(v3 + v526);
            if (v527 == -1 || v527 >= *(_QWORD *)(v3 + *v12))
              goto LABEL_1249;
            v528 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v527);
            *(_QWORD *)(v3 + v526) = v527 + 1;
            v525 |= (unint64_t)(v528 & 0x7F) << v523;
            if (v528 < 0)
            {
              v523 += 7;
              v43 = v524++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_1260;
        while (1)
        {
          v136 = (int *)MEMORY[0x1E0D82BD8];
          v137 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v32) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_731;
          }
          v138 = 0;
          v139 = 0;
          v140 = 0;
          v141 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v142 = *v32;
            v143 = *(_QWORD *)(v3 + v142);
            if (v143 == -1 || v143 >= *(_QWORD *)(v3 + *v136))
              break;
            v144 = *(_BYTE *)(*(_QWORD *)(v3 + *v141) + v143);
            *(_QWORD *)(v3 + v142) = v143 + 1;
            v140 |= (unint64_t)(v144 & 0x7F) << v138;
            if (v144 < 0)
            {
              v138 += 7;
              v43 = v139++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_166;
          }
          *(_BYTE *)(v3 + *v137) = 1;
LABEL_166:
          PBRepeatedInt32Add();
        }
      case 80:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v453 = 0;
        v454 = 0;
        v455 = 0;
        *(_QWORD *)(a1 + 756) |= 0x4000000000000uLL;
        while (2)
        {
          v456 = *v32;
          v457 = *(_QWORD *)(v3 + v456);
          if (v457 == -1 || v457 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v458 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v457);
            *(_QWORD *)(v3 + v456) = v457 + 1;
            v455 |= (unint64_t)(v458 & 0x7F) << v453;
            if (v458 < 0)
            {
              v453 += 7;
              v43 = v454++ >= 9;
              if (v43)
              {
                v455 = 0;
                goto LABEL_1066;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v455 = 0;
LABEL_1066:
        v519 = v455 != 0;
        v520 = 742;
        goto LABEL_1100;
      case 81:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v145 = 0;
        v146 = 0;
        v147 = 0;
        *(_QWORD *)(a1 + 756) |= 0x2000000000000uLL;
        while (2)
        {
          v148 = *v32;
          v149 = *(_QWORD *)(v3 + v148);
          if (v149 == -1 || v149 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v150 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v149);
            *(_QWORD *)(v3 + v148) = v149 + 1;
            v147 |= (unint64_t)(v150 & 0x7F) << v145;
            if (v150 < 0)
            {
              v145 += 7;
              v43 = v146++ >= 9;
              if (v43)
              {
                v147 = 0;
                goto LABEL_922;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v147 = 0;
LABEL_922:
        v519 = v147 != 0;
        v520 = 741;
        goto LABEL_1100;
      case 82:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 767) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1319;
          v521 = *(_QWORD *)(a1 + 764) << 33;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOPDViewportInfo);
        if (!GEOPDViewportInfoReadAllFrom((uint64_t)v53, (void *)v3))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 480;
        goto LABEL_768;
      case 83:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v151 = 0;
        v152 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x10000uLL;
        while (2)
        {
          v153 = *v32;
          v154 = *(_QWORD *)(v3 + v153);
          if (v154 == -1 || v154 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v155 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v154);
            *(_QWORD *)(v3 + v153) = v154 + 1;
            v56 |= (unint64_t)(v155 & 0x7F) << v151;
            if (v155 < 0)
            {
              v151 += 7;
              v43 = v152++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_926;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_926:
        v518 = 660;
        goto LABEL_1079;
      case 84:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 768) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1319;
          v521 = *(_QWORD *)(a1 + 764) << 29;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOPDResultRefinementQuery);
        if (!GEOPDResultRefinementQueryReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 512;
        goto LABEL_768;
      case 85:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v156 = 0;
        v157 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x100000uLL;
        while (2)
        {
          v158 = *v32;
          v159 = *(_QWORD *)(v3 + v158);
          if (v159 == -1 || v159 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v160 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v159);
            *(_QWORD *)(v3 + v158) = v159 + 1;
            v56 |= (unint64_t)(v160 & 0x7F) << v156;
            if (v160 < 0)
            {
              v156 += 7;
              v43 = v157++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_930;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_930:
        v518 = 676;
        goto LABEL_1079;
      case 86:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v161 = 0;
        v162 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x4000000uLL;
        while (2)
        {
          v163 = *v32;
          v164 = *(_QWORD *)(v3 + v163);
          if (v164 == -1 || v164 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v165 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v164);
            *(_QWORD *)(v3 + v163) = v164 + 1;
            v56 |= (unint64_t)(v165 & 0x7F) << v161;
            if (v165 < 0)
            {
              v161 += 7;
              v43 = v162++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_934;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_934:
        v518 = 700;
        goto LABEL_1079;
      case 87:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 766) & 4) == 0)
        {
          PBReaderReadString();
          v61 = objc_claimAutoreleasedReturnValue();
          v62 = 368;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_1319;
        v521 = *(_QWORD *)(a1 + 764) << 45;
        goto LABEL_1163;
      case 88:
        if (!v48 || (*(_BYTE *)(a1 + 764) & 0x40) != 0)
          goto LABEL_873;
        if (v45 != 2)
        {
          v587 = 0;
          v588 = 0;
          v589 = 0;
          while (1)
          {
            v590 = *v32;
            v591 = *(_QWORD *)(v3 + v590);
            if (v591 == -1 || v591 >= *(_QWORD *)(v3 + *v12))
              break;
            v592 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v591);
            *(_QWORD *)(v3 + v590) = v591 + 1;
            v589 |= (unint64_t)(v592 & 0x7F) << v587;
            if (v592 < 0)
            {
              v587 += 7;
              v43 = v588++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_1250;
          }
LABEL_1249:
          *(_BYTE *)(v3 + *v35) = 1;
LABEL_1250:
          PBRepeatedInt32Add();
          goto LABEL_1164;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_1260;
        while (1)
        {
          v459 = (int *)MEMORY[0x1E0D82BD8];
          v460 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v32) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            break;
          }
          v461 = 0;
          v462 = 0;
          v463 = 0;
          v464 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v465 = *v32;
            v466 = *(_QWORD *)(v3 + v465);
            if (v466 == -1 || v466 >= *(_QWORD *)(v3 + *v459))
              break;
            v467 = *(_BYTE *)(*(_QWORD *)(v3 + *v464) + v466);
            *(_QWORD *)(v3 + v465) = v466 + 1;
            v463 |= (unint64_t)(v467 & 0x7F) << v461;
            if (v467 < 0)
            {
              v461 += 7;
              v43 = v462++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_730;
          }
          *(_BYTE *)(v3 + *v460) = 1;
LABEL_730:
          PBRepeatedInt32Add();
        }
LABEL_731:
        PBReaderRecallMark();
        v12 = (int *)MEMORY[0x1E0D82BD8];
        v35 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_1165;
      case 89:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v166 = 0;
        v167 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x40uLL;
        while (2)
        {
          v168 = *v32;
          v169 = *(_QWORD *)(v3 + v168);
          if (v169 == -1 || v169 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v170 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v169);
            *(_QWORD *)(v3 + v168) = v169 + 1;
            v56 |= (unint64_t)(v170 & 0x7F) << v166;
            if (v170 < 0)
            {
              v166 += 7;
              v43 = v167++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_938;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_938:
        v518 = 620;
        goto LABEL_1079;
      case 90:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 765) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1319;
          v521 = *(_QWORD *)(a1 + 764) << 49;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v53, (void *)v3))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 320;
        goto LABEL_768;
      case 91:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v171 = 0;
        v172 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x8000000uLL;
        while (2)
        {
          v173 = *v32;
          v174 = *(_QWORD *)(v3 + v173);
          if (v174 == -1 || v174 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v175 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v174);
            *(_QWORD *)(v3 + v173) = v174 + 1;
            v56 |= (unint64_t)(v175 & 0x7F) << v171;
            if (v175 < 0)
            {
              v171 += 7;
              v43 = v172++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_942;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_942:
        v518 = 704;
        goto LABEL_1079;
      case 92:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 768) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1319;
          v521 = *(_QWORD *)(a1 + 764) << 26;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v53, (void *)v3))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 536;
        goto LABEL_768;
      case 94:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 765) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1319;
          v521 = *(_QWORD *)(a1 + 764) << 54;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOAddStopRouteInfo);
        if (!GEOAddStopRouteInfoReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 280;
        goto LABEL_768;
      case 95:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v176 = 0;
        v177 = 0;
        v178 = 0;
        *(_QWORD *)(a1 + 756) |= 0x400000000uLL;
        while (2)
        {
          v179 = *v32;
          v180 = *(_QWORD *)(v3 + v179);
          if (v180 == -1 || v180 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v181 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v180);
            *(_QWORD *)(v3 + v179) = v180 + 1;
            v178 |= (unint64_t)(v181 & 0x7F) << v176;
            if (v181 < 0)
            {
              v176 += 7;
              v43 = v177++ >= 9;
              if (v43)
              {
                v178 = 0;
                goto LABEL_946;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v178 = 0;
LABEL_946:
        v519 = v178 != 0;
        v520 = 726;
        goto LABEL_1100;
      case 96:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v468 = 0;
        v469 = 0;
        v470 = 0;
        *(_QWORD *)(a1 + 756) |= 0x1000000000000uLL;
        while (2)
        {
          v471 = *v32;
          v472 = *(_QWORD *)(v3 + v471);
          if (v472 == -1 || v472 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v473 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v472);
            *(_QWORD *)(v3 + v471) = v472 + 1;
            v470 |= (unint64_t)(v473 & 0x7F) << v468;
            if (v473 < 0)
            {
              v468 += 7;
              v43 = v469++ >= 9;
              if (v43)
              {
                v470 = 0;
                goto LABEL_1070;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v470 = 0;
LABEL_1070:
        v519 = v470 != 0;
        v520 = 740;
        goto LABEL_1100;
      case 97:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v182 = 0;
        v183 = 0;
        v184 = 0;
        *(_QWORD *)(a1 + 756) |= 0x10000000000000uLL;
        while (2)
        {
          v185 = *v32;
          v186 = *(_QWORD *)(v3 + v185);
          if (v186 == -1 || v186 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v187 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v186);
            *(_QWORD *)(v3 + v185) = v186 + 1;
            v184 |= (unint64_t)(v187 & 0x7F) << v182;
            if (v187 < 0)
            {
              v182 += 7;
              v43 = v183++ >= 9;
              if (v43)
              {
                v184 = 0;
                goto LABEL_950;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v184 = 0;
LABEL_950:
        v519 = v184 != 0;
        v520 = 744;
        goto LABEL_1100;
      case 98:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 767) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1319;
          v521 = *(_QWORD *)(a1 + 764) << 32;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOPrivacyMetadata);
        if (!GEOPrivacyMetadataReadAllFrom((uint64_t)v53, (void *)v3))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 488;
        goto LABEL_768;
      case 99:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v188 = 0;
        v189 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x2000000uLL;
        while (2)
        {
          v190 = *v32;
          v191 = *(_QWORD *)(v3 + v190);
          if (v191 == -1 || v191 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v192 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v191);
            *(_QWORD *)(v3 + v190) = v191 + 1;
            v56 |= (unint64_t)(v192 & 0x7F) << v188;
            if (v192 < 0)
            {
              v188 += 7;
              v43 = v189++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_954;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_954:
        v518 = 696;
        goto LABEL_1079;
      case 100:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v193 = 0;
        v194 = 0;
        v195 = 0;
        *(_QWORD *)(a1 + 756) |= 0x200000000000000uLL;
        while (2)
        {
          v196 = *v32;
          v197 = *(_QWORD *)(v3 + v196);
          if (v197 == -1 || v197 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v198 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v197);
            *(_QWORD *)(v3 + v196) = v197 + 1;
            v195 |= (unint64_t)(v198 & 0x7F) << v193;
            if (v198 < 0)
            {
              v193 += 7;
              v43 = v194++ >= 9;
              if (v43)
              {
                v195 = 0;
                goto LABEL_958;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v195 = 0;
LABEL_958:
        v519 = v195 != 0;
        v520 = 749;
        goto LABEL_1100;
      case 102:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v199 = 0;
        v200 = 0;
        v201 = 0;
        *(_QWORD *)(a1 + 756) |= 0x20000000000uLL;
        while (2)
        {
          v202 = *v32;
          v203 = *(_QWORD *)(v3 + v202);
          if (v203 == -1 || v203 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v204 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v203);
            *(_QWORD *)(v3 + v202) = v203 + 1;
            v201 |= (unint64_t)(v204 & 0x7F) << v199;
            if (v204 < 0)
            {
              v199 += 7;
              v43 = v200++ >= 9;
              if (v43)
              {
                v201 = 0;
                goto LABEL_962;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v201 = 0;
LABEL_962:
        v519 = v201 != 0;
        v520 = 733;
        goto LABEL_1100;
      case 103:
        if (!v48 || (*(_BYTE *)(a1 + 764) & 4) != 0)
          goto LABEL_873;
        if (v45 != 2)
        {
          v529 = 0;
          v530 = 0;
          v531 = 0;
          v532 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v533 = *v32;
            v534 = *(_QWORD *)(v3 + v533);
            if (v534 == -1 || v534 >= *(_QWORD *)(v3 + *v12))
              break;
            v535 = *(_BYTE *)(*(_QWORD *)(v3 + *v532) + v534);
            *(_QWORD *)(v3 + v533) = v534 + 1;
            v531 |= (unint64_t)(v535 & 0x7F) << v529;
            if (v535 < 0)
            {
              v529 += 7;
              v43 = v530++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_1252;
          }
          *(_BYTE *)(v3 + *v35) = 1;
LABEL_1252:
          PBRepeatedUInt64Add();
          goto LABEL_1164;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_1260;
        while (1)
        {
          v205 = (int *)MEMORY[0x1E0D82BD8];
          v206 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v32) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_731;
          }
          v207 = 0;
          v208 = 0;
          v209 = 0;
          v210 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v211 = *v32;
            v212 = *(_QWORD *)(v3 + v211);
            if (v212 == -1 || v212 >= *(_QWORD *)(v3 + *v205))
              break;
            v213 = *(_BYTE *)(*(_QWORD *)(v3 + *v210) + v212);
            *(_QWORD *)(v3 + v211) = v212 + 1;
            v209 |= (unint64_t)(v213 & 0x7F) << v207;
            if (v213 < 0)
            {
              v207 += 7;
              v43 = v208++ >= 9;
              if (!v43)
                continue;
            }
            goto LABEL_277;
          }
          *(_BYTE *)(v3 + *v206) = 1;
LABEL_277:
          PBRepeatedUInt64Add();
        }
      case 104:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v474 = 0;
        v475 = 0;
        v476 = 0;
        *(_QWORD *)(a1 + 756) |= 0x100000000000uLL;
        while (2)
        {
          v477 = *v32;
          v478 = *(_QWORD *)(v3 + v477);
          if (v478 == -1 || v478 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v479 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v478);
            *(_QWORD *)(v3 + v477) = v478 + 1;
            v476 |= (unint64_t)(v479 & 0x7F) << v474;
            if (v479 < 0)
            {
              v474 += 7;
              v43 = v475++ >= 9;
              if (v43)
              {
                v476 = 0;
                goto LABEL_1074;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v476 = 0;
LABEL_1074:
        v519 = v476 != 0;
        v520 = 736;
        goto LABEL_1100;
      case 105:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 768) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1319;
          v521 = *(_QWORD *)(a1 + 764) << 27;
LABEL_1163:
          v6 += v521 >> 63;
          goto LABEL_1164;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOSearchImplicitFilterInfo);
        if (GEOSearchImplicitFilterInfoReadAllFrom((uint64_t)v53, (void *)v3))
        {
          PBReaderRecallMark();
          v66 = 528;
LABEL_768:
          v480 = *(void **)(a1 + v66);
          *(_QWORD *)(a1 + v66) = v53;
          goto LABEL_824;
        }
LABEL_1259:

LABEL_1260:
        v34 = 0;
        v35 = (int *)MEMORY[0x1E0D82BC8];
        v30 = v601;
LABEL_1261:
        if ((v30 & 1) != 0)
LABEL_1262:
          *(_QWORD *)(a1 + 756) |= 0x4000000000000000uLL;
LABEL_1263:
        if (v31 & 1 | ((v34 & 1) == 0))
        {
          v593 = *(_QWORD *)(a1 + 764) | 0x1FFFFFFFFFFFLL;
          *(_QWORD *)(a1 + 756) |= 0x8000000000000000;
          *(_QWORD *)(a1 + 764) = v593;
        }
        else if (v33)
        {
          while (1)
          {
            v594 = *v33++;
            v595 = 0;
            v596 = 2048;
            switch(v594)
            {
              case 0:
                goto LABEL_1313;
              case 3:
                goto LABEL_1312;
              case 4:
                v595 = 0;
                v596 = 4096;
                goto LABEL_1312;
              case 5:
                v595 = 0;
                v596 = 0x2000;
                goto LABEL_1312;
              case 6:
                v595 = 0;
                v596 = 0x100000;
                goto LABEL_1312;
              case 7:
                v595 = 0;
                v596 = 256;
                goto LABEL_1312;
              case 8:
                v595 = 0;
                v596 = 0x10000000;
                goto LABEL_1312;
              case 9:
                v595 = 0;
                v596 = 0x200000;
                goto LABEL_1312;
              case 10:
                v595 = 0;
                v596 = 0x400000;
                goto LABEL_1312;
              case 11:
                v595 = 0;
                v596 = 0x800000;
                goto LABEL_1312;
              case 16:
                v595 = 0;
                v596 = 0x20000000;
                goto LABEL_1312;
              case 18:
                v595 = 0;
                v596 = 0x800000000;
                goto LABEL_1312;
              case 24:
                v595 = 0;
                v596 = 0x10000;
                goto LABEL_1312;
              case 25:
                v595 = 0;
                v596 = 0x20000;
                goto LABEL_1312;
              case 28:
                v595 = 0;
                v596 = 0x10000000000;
                goto LABEL_1312;
              case 31:
                v595 = 0;
                v596 = 0x1000000;
                goto LABEL_1312;
              case 32:
                v595 = 0;
                v596 = 0x100000000;
                goto LABEL_1312;
              case 38:
                v595 = 0;
                v596 = 0x8000000;
                goto LABEL_1312;
              case 39:
                v595 = 0;
                v596 = 0x8000;
                goto LABEL_1312;
              case 40:
                v595 = 0;
                v596 = 0x8000000000;
                goto LABEL_1312;
              case 41:
                v595 = 0;
                v596 = 0x100000000000;
                goto LABEL_1312;
              case 42:
                v596 = 0;
                v595 = 0x8000000000000000;
                goto LABEL_1312;
              case 45:
                v595 = 0;
                v596 = 1;
                goto LABEL_1312;
              case 47:
                v595 = 0;
                v596 = 0x80000000000;
                goto LABEL_1312;
              case 52:
                v595 = 0;
                v596 = 1024;
                goto LABEL_1312;
              case 60:
                v595 = 0;
                v596 = 8;
                goto LABEL_1312;
              case 62:
                v595 = 0;
                v596 = 0x20000000000;
                goto LABEL_1312;
              case 64:
                v595 = 0;
                v596 = 32;
                goto LABEL_1312;
              case 68:
                v595 = 0;
                v596 = 16;
                goto LABEL_1312;
              case 71:
                v595 = 0;
                v596 = 0x80000;
                goto LABEL_1312;
              case 73:
                v595 = 0;
                v596 = 0x2000000;
                goto LABEL_1312;
              case 75:
                v595 = 0;
                v596 = 128;
                goto LABEL_1312;
              case 79:
                v595 = 0;
                v596 = 2;
                goto LABEL_1312;
              case 82:
                v595 = 0;
                v596 = 0x40000000;
                goto LABEL_1312;
              case 84:
                v595 = 0;
                v596 = 0x400000000;
                goto LABEL_1312;
              case 87:
                v595 = 0;
                v596 = 0x40000;
                goto LABEL_1312;
              case 88:
                v595 = 0;
                v596 = 64;
                goto LABEL_1312;
              case 90:
                v595 = 0;
                v596 = 0x4000;
                goto LABEL_1312;
              case 92:
                v595 = 0;
                v596 = 0x2000000000;
                goto LABEL_1312;
              case 94:
                v595 = 0;
                v596 = 512;
                goto LABEL_1312;
              case 98:
                v595 = 0;
                v596 = 0x80000000;
                goto LABEL_1312;
              case 103:
                v595 = 0;
                v596 = 4;
                goto LABEL_1312;
              case 105:
                v595 = 0;
                v596 = 0x1000000000;
                goto LABEL_1312;
              case 109:
                v595 = 0;
                v596 = 0x4000000000;
                goto LABEL_1312;
              case 112:
                v595 = 0;
                v596 = 0x200000000;
                goto LABEL_1312;
              case 114:
                v595 = 0;
                v596 = 0x40000000000;
                goto LABEL_1312;
              case 116:
                v595 = 0;
                v596 = 0x4000000;
LABEL_1312:
                v597 = *(_QWORD *)(a1 + 764) | v596;
                *(_QWORD *)(a1 + 756) |= v595;
                *(_QWORD *)(a1 + 764) = v597;
                break;
              default:
                continue;
            }
          }
        }
LABEL_1313:
        if (v34)
        {
          v3 = *(_BYTE *)(v3 + *v35) == 0;
          if ((v31 & 1) == 0)
            return v3;
LABEL_1317:
          v598 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v31 & 1) != 0)
            goto LABEL_1317;
        }
        return v3;
      case 106:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v481 = 0;
        v482 = 0;
        v56 = 0;
        *(_QWORD *)(a1 + 756) |= 0x1000uLL;
        while (2)
        {
          v483 = *v32;
          v484 = *(_QWORD *)(v3 + v483);
          if (v484 == -1 || v484 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v485 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v484);
            *(_QWORD *)(v3 + v483) = v484 + 1;
            v56 |= (unint64_t)(v485 & 0x7F) << v481;
            if (v485 < 0)
            {
              v481 += 7;
              v43 = v482++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1078;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          LODWORD(v56) = 0;
LABEL_1078:
        v518 = 644;
LABEL_1079:
        *(_DWORD *)(a1 + v518) = v56;
        goto LABEL_1165;
      case 107:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v486 = 0;
        v487 = 0;
        v488 = 0;
        *(_QWORD *)(a1 + 756) |= 0x1000000000uLL;
        while (2)
        {
          v489 = *v32;
          v490 = *(_QWORD *)(v3 + v489);
          if (v490 == -1 || v490 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v491 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v490);
            *(_QWORD *)(v3 + v489) = v490 + 1;
            v488 |= (unint64_t)(v491 & 0x7F) << v486;
            if (v491 < 0)
            {
              v486 += 7;
              v43 = v487++ >= 9;
              if (v43)
              {
                v488 = 0;
                goto LABEL_1083;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v488 = 0;
LABEL_1083:
        v519 = v488 != 0;
        v520 = 728;
        goto LABEL_1100;
      case 108:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v492 = 0;
        v493 = 0;
        v494 = 0;
        *(_QWORD *)(a1 + 756) |= 0x200000000000uLL;
        while (2)
        {
          v495 = *v32;
          v496 = *(_QWORD *)(v3 + v495);
          if (v496 == -1 || v496 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v497 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v496);
            *(_QWORD *)(v3 + v495) = v496 + 1;
            v494 |= (unint64_t)(v497 & 0x7F) << v492;
            if (v497 < 0)
            {
              v492 += 7;
              v43 = v493++ >= 9;
              if (v43)
              {
                v494 = 0;
                goto LABEL_1087;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v494 = 0;
LABEL_1087:
        v519 = v494 != 0;
        v520 = 737;
        goto LABEL_1100;
      case 109:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 768) & 0x40) == 0)
        {
          PBReaderReadString();
          v61 = objc_claimAutoreleasedReturnValue();
          v62 = 552;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_1319;
        v521 = *(_QWORD *)(a1 + 764) << 25;
        goto LABEL_1163;
      case 110:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v498 = 0;
        v499 = 0;
        v500 = 0;
        *(_QWORD *)(a1 + 756) |= 0x800000000000uLL;
        while (2)
        {
          v501 = *v32;
          v502 = *(_QWORD *)(v3 + v501);
          if (v502 == -1 || v502 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v503 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v502);
            *(_QWORD *)(v3 + v501) = v502 + 1;
            v500 |= (unint64_t)(v503 & 0x7F) << v498;
            if (v503 < 0)
            {
              v498 += 7;
              v43 = v499++ >= 9;
              if (v43)
              {
                v500 = 0;
                goto LABEL_1091;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v500 = 0;
LABEL_1091:
        v519 = v500 != 0;
        v520 = 739;
        goto LABEL_1100;
      case 112:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 768) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1319;
          v521 = *(_QWORD *)(a1 + 764) << 30;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOPDAutocompleteSessionData);
        if (!GEOPDAutocompleteSessionDataReadAllFrom((uint64_t)v53, (void *)v3))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 504;
        goto LABEL_768;
      case 113:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v504 = 0;
        v505 = 0;
        v506 = 0;
        *(_QWORD *)(a1 + 756) |= 0x100000000uLL;
        while (2)
        {
          v507 = *v32;
          v508 = *(_QWORD *)(v3 + v507);
          if (v508 == -1 || v508 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v509 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v508);
            *(_QWORD *)(v3 + v507) = v508 + 1;
            v506 |= (unint64_t)(v509 & 0x7F) << v504;
            if (v509 < 0)
            {
              v504 += 7;
              v43 = v505++ >= 9;
              if (v43)
              {
                v506 = 0;
                goto LABEL_1095;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v506 = 0;
LABEL_1095:
        v519 = v506 != 0;
        v520 = 724;
        goto LABEL_1100;
      case 114:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 769) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_1319;
          v521 = *(_QWORD *)(a1 + 764) << 21;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_1260;
        v53 = objc_alloc_init(GEOPDSSessionUserActionMetadata);
        if (!GEOPDSSessionUserActionMetadataReadAllFrom(v53, (void *)v3))
          goto LABEL_1259;
        PBReaderRecallMark();
        v66 = 584;
        goto LABEL_768;
      case 115:
        if ((v602 & 1) == 0)
          goto LABEL_873;
        v510 = 0;
        v511 = 0;
        v512 = 0;
        *(_QWORD *)(a1 + 756) |= 0x2000000000000000uLL;
        while (2)
        {
          v513 = *v32;
          v514 = *(_QWORD *)(v3 + v513);
          if (v514 == -1 || v514 >= *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v35) = 1;
          }
          else
          {
            v515 = *(_BYTE *)(*(_QWORD *)(v3 + *v36) + v514);
            *(_QWORD *)(v3 + v513) = v514 + 1;
            v512 |= (unint64_t)(v515 & 0x7F) << v510;
            if (v515 < 0)
            {
              v510 += 7;
              v43 = v511++ >= 9;
              if (v43)
              {
                v512 = 0;
                goto LABEL_1099;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v35))
          v512 = 0;
LABEL_1099:
        v519 = v512 != 0;
        v520 = 753;
LABEL_1100:
        *(_BYTE *)(a1 + v520) = v519;
        goto LABEL_1165;
      case 116:
        if (!v48)
          goto LABEL_873;
        if ((*(_BYTE *)(a1 + 767) & 4) == 0)
        {
          PBReaderReadString();
          v61 = objc_claimAutoreleasedReturnValue();
          v62 = 432;
LABEL_823:
          v480 = *(void **)(a1 + v62);
          *(_QWORD *)(a1 + v62) = v61;
LABEL_824:

          --v6;
LABEL_1164:
          v35 = (int *)MEMORY[0x1E0D82BC8];
          v12 = (int *)MEMORY[0x1E0D82BD8];
          goto LABEL_1165;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_1319:
          v34 = 0;
          v35 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_1257;
        }
        v521 = *(_QWORD *)(a1 + 764) << 37;
        goto LABEL_1163;
      default:
        if ((v30 & 1) == 0 || (*(_BYTE *)(a1 + 763) & 0x40) != 0)
        {
LABEL_873:
          v517 = PBReaderSkipValueWithTag();
          v12 = (int *)MEMORY[0x1E0D82BD8];
          v35 = (int *)MEMORY[0x1E0D82BC8];
          if ((v517 & 1) != 0)
            goto LABEL_1165;
LABEL_1256:
          v34 = 0;
LABEL_1257:
          if ((v601 & 1) != 0)
            goto LABEL_1262;
          goto LABEL_1263;
        }
        if (!*(_QWORD *)(a1 + 16))
        {
          v230 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v231 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v230;

        }
        v232 = PBUnknownFieldAdd();
        v35 = (int *)MEMORY[0x1E0D82BC8];
        v12 = (int *)MEMORY[0x1E0D82BD8];
        if (!v232)
        {
          v34 = 0;
          goto LABEL_1262;
        }
LABEL_1165:
        if (!(v600 & 1 | (v6 != 0)))
        {
          v34 = 1;
          goto LABEL_1257;
        }
        v30 = v601;
        v36 = (int *)MEMORY[0x1E0D82BB8];
        if (*(_QWORD *)(v3 + *v32) >= *(_QWORD *)(v3 + *v12))
          goto LABEL_1253;
        continue;
    }
  }
}

BOOL GEOTraitsPhotoSizeReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  void *v34;
  _BOOL8 v35;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_49;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          goto LABEL_49;
        if ((v10 >> 3) == 2)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEOTraitsPhotoSize__width;
              goto LABEL_41;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEOTraitsPhotoSize__width;
              goto LABEL_44;
            }
          }
          v26 = &OBJC_IVAR___GEOTraitsPhotoSize__width;
LABEL_42:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_44:
          *(_DWORD *)(a1 + *v26) = v20;
          goto LABEL_45;
        }
        if (!*(_QWORD *)(a1 + 8))
        {
          v33 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v34 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v33;

        }
        if ((PBUnknownFieldAdd() & 1) == 0)
          goto LABEL_50;
LABEL_45:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_49;
      }
      v27 = 0;
      v28 = 0;
      v20 = 0;
      *(_BYTE *)(a1 + 24) |= 1u;
      while (1)
      {
        v29 = *v4;
        v30 = *(_QWORD *)&v3[v29];
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
          break;
        v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
        *(_QWORD *)&v3[v29] = v31;
        v20 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0)
        {
          v26 = &OBJC_IVAR___GEOTraitsPhotoSize__height;
          goto LABEL_42;
        }
        v27 += 7;
        v25 = v28++ > 8;
        if (v25)
        {
          LODWORD(v20) = 0;
          v26 = &OBJC_IVAR___GEOTraitsPhotoSize__height;
          goto LABEL_44;
        }
      }
      v26 = &OBJC_IVAR___GEOTraitsPhotoSize__height;
LABEL_41:
      v3[*v6] = 1;
      goto LABEL_42;
    }
LABEL_49:
    v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_50:
    v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_18874CBFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18874CD04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18874CF34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18874D004(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDPlaceResponseIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  _BOOL8 v34;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      v17 = v8 >> 3;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_85;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              goto LABEL_81;
            v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0)
            {
              v23 = v18++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_83;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_85;
          v24 = 0;
          while (1)
          {
            v25 = *v2;
            v26 = *(_QWORD *)&a1[v25];
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
              goto LABEL_81;
            v28 = *(char *)(*(_QWORD *)&a1[*v5] + v26);
            *(_QWORD *)&a1[v25] = v27;
            if (v28 < 0)
            {
              v23 = v24++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_83;
          }
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceGlobalResultIsValid(a1))
            goto LABEL_85;
          goto LABEL_72;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceIsValid(a1))
            goto LABEL_85;
          goto LABEL_72;
        case 5u:
          if (v15 == 2)
            goto LABEL_82;
          goto LABEL_85;
        case 6u:
          if (v15 == 2)
            goto LABEL_82;
          goto LABEL_85;
        case 7u:
          if (v15 == 2)
            goto LABEL_82;
          goto LABEL_85;
        case 8u:
          if (v15 == 2)
            goto LABEL_82;
          goto LABEL_85;
        case 9u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDDatasetABStatusIsValid(a1))
            goto LABEL_85;
          goto LABEL_72;
        case 0xAu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDMapsResultIsValid(a1))
            goto LABEL_85;
          goto LABEL_72;
        case 0xBu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDDotPlaceIsValid(a1))
            goto LABEL_85;
          goto LABEL_72;
        case 0xCu:
          if (v15 == 2
            && PBReaderPlaceMark()
            && GEOPDPlacesRequestResponseAnalyticsDataIsValid((unsigned __int8 *)a1))
          {
            goto LABEL_72;
          }
          goto LABEL_85;
        default:
          if ((_DWORD)v17 == 1000)
          {
            if ((v8 & 7) != 0)
              goto LABEL_85;
            v29 = 0;
            while (1)
            {
              v30 = *v2;
              v31 = *(_QWORD *)&a1[v30];
              v32 = v31 + 1;
              if (v31 == -1 || v32 > *(_QWORD *)&a1[*v3])
                break;
              v33 = *(char *)(*(_QWORD *)&a1[*v5] + v31);
              *(_QWORD *)&a1[v30] = v32;
              if (v33 < 0)
              {
                v23 = v29++ > 8;
                if (!v23)
                  continue;
              }
              goto LABEL_83;
            }
LABEL_81:
            a1[*v4] = 1;
          }
          else if ((_DWORD)v17 == 1051)
          {
            if (v15 != 2 || !PBReaderPlaceMark() || !GEOClientMetricsIsValid(a1))
            {
LABEL_85:
              PBReaderRecallMark();
              return 0;
            }
LABEL_72:
            PBReaderRecallMark();
          }
          else
          {
LABEL_82:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_85;
          }
LABEL_83:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_84;
          break;
      }
    }
  }
LABEL_84:
  v34 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v34;
}

BOOL GEOPDPlaceGlobalResultIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  int v45;
  int v46;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  int v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  int v102;
  int v103;
  int v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  char v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  uint64_t v122;
  char v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  uint64_t v131;
  char v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  uint64_t v140;
  char v142;
  unsigned int v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  int v149;
  int v150;
  unint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  int v157;
  char v158;
  unsigned int v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  int v165;
  int v166;
  unint64_t v168;
  char v169;
  unsigned int v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char v175;
  int v176;
  int v177;
  BOOL v178;
  char v179;
  unsigned int v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char v185;
  int v186;
  int v187;
  BOOL v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  int v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  int v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  int v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  int v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  int v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  int v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  int v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  int v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  int v242;
  unsigned int v243;
  unsigned int v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  int v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  int v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  int v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  int v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  int v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  int v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  int v278;
  char v279;
  unsigned int v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  char v285;
  int v286;
  unint64_t v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  int v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  int v298;
  unsigned int v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  int v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  int v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  int v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  int v318;
  unsigned int v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  int v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  int v328;
  unsigned int v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  int v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  int v338;
  int v339;
  int v340;
  char v341;
  unsigned int v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  char v347;
  int v348;
  int v349;
  BOOL v350;
  unsigned int v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  int v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  int v360;
  unsigned int v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  int v365;
  unsigned int v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  int v370;
  unsigned int v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  int v375;
  unsigned int v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  int v380;
  char v381;
  unsigned int v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  char v387;
  int v388;
  int v389;
  unint64_t v391;
  unsigned int v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  int v396;
  char v397;
  unsigned int v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  char v403;
  int v404;
  int v405;
  BOOL v406;
  char v407;
  unsigned int v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  char v413;
  int v414;
  int v415;
  unint64_t v417;
  unsigned int v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  int v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  int v426;
  unsigned int v427;
  unsigned int v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  int v432;
  unsigned int v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  int v437;
  int v438;
  char v439;
  unsigned int v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  char v445;
  int v446;
  int v447;
  char v449;
  unsigned int v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  char v455;
  int v456;
  int v457;
  BOOL v458;
  char v459;
  unsigned int v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  char v465;
  int v466;
  int v467;
  int AllFrom;
  int v470;
  char v471;
  unsigned int v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  char v477;
  uint64_t v478;
  BOOL v479;
  char v480;
  unsigned int v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  char v486;
  uint64_t v487;
  BOOL v488;
  char v489;
  unsigned int v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t v494;
  char v495;
  int v496;
  int v497;
  BOOL v498;
  char v499;
  unsigned int v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  char v505;
  int v506;
  int v507;
  BOOL v508;
  char v509;
  unsigned int v510;
  unint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  char v515;
  int v516;
  int v517;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  int v522;
  unsigned int v523;
  unsigned int v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  int v528;
  int v529;
  char v530;
  unsigned int v531;
  unint64_t v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  char v536;
  int v537;
  int v538;
  char v540;
  unsigned int v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  char v546;
  uint64_t v547;
  BOOL v548;
  char v549;
  unsigned int v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  char v555;
  uint64_t v556;
  BOOL v557;
  char v558;
  unsigned int v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  char v564;
  uint64_t v565;
  BOOL v566;
  char v567;
  unsigned int v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  unint64_t v572;
  char v573;
  uint64_t v574;
  BOOL v575;
  char v576;
  unsigned int v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  unint64_t v581;
  char v582;
  uint64_t v583;
  BOOL v584;
  char v585;
  unsigned int v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t v590;
  char v591;
  int v592;
  int v593;
  BOOL v594;
  unsigned int v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  int v599;
  char v600;
  unsigned int v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unint64_t v605;
  char v606;
  uint64_t v607;
  BOOL v608;
  char v609;
  unsigned int v610;
  unint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unint64_t v614;
  char v615;
  int v616;
  int v617;
  BOOL v618;
  unint64_t v619;
  unsigned int v620;
  uint64_t v621;
  uint64_t v622;
  unint64_t v623;
  int v624;
  char v625;
  unsigned int v626;
  unint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unint64_t v630;
  char v631;
  int v632;
  int v633;
  unint64_t v635;
  unsigned int v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t v639;
  int v640;
  char v641;
  unsigned int v642;
  unint64_t v643;
  uint64_t v644;
  uint64_t v645;
  unint64_t v646;
  char v647;
  int v648;
  int v649;
  unint64_t v651;
  unsigned int v652;
  uint64_t v653;
  uint64_t v654;
  unint64_t v655;
  int v656;
  int v657;
  char v658;
  unsigned int v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t v662;
  unint64_t v663;
  char v664;
  int v665;
  int v666;
  BOOL v667;
  char v668;
  unsigned int v669;
  unint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  char v674;
  int v675;
  int v676;
  BOOL v677;
  char v678;
  unsigned int v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  unint64_t v683;
  char v684;
  uint64_t v685;
  BOOL v686;
  char v687;
  unsigned int v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unint64_t v692;
  char v693;
  int v694;
  int v695;
  BOOL v696;
  char v697;
  unsigned int v698;
  unint64_t v699;
  uint64_t v700;
  uint64_t v701;
  unint64_t v702;
  char v703;
  int v704;
  int v705;
  int v707;
  char v708;
  unsigned int v709;
  unint64_t v710;
  uint64_t v711;
  uint64_t v712;
  unint64_t v713;
  char v714;
  int v715;
  int v716;
  BOOL v717;
  unsigned int v718;
  uint64_t v719;
  uint64_t v720;
  unint64_t v721;
  int v722;
  char v723;
  unsigned int v724;
  unint64_t v725;
  uint64_t v726;
  uint64_t v727;
  unint64_t v728;
  char v729;
  int v730;
  int v731;
  unsigned int v733;
  uint64_t v734;
  uint64_t v735;
  unint64_t v736;
  int v737;
  int v738;
  char v739;
  unsigned int v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  char v745;
  uint64_t v746;
  BOOL v747;
  char v748;
  unsigned int v749;
  unint64_t v750;
  uint64_t v751;
  uint64_t v752;
  unint64_t v753;
  char v754;
  int v755;
  int v756;
  BOOL v757;
  char v758;
  unsigned int v759;
  unint64_t v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  char v764;
  int v765;
  int v766;
  unsigned int v768;
  uint64_t v769;
  uint64_t v770;
  unint64_t v771;
  int v772;
  char v773;
  unsigned int v774;
  unint64_t v775;
  uint64_t v776;
  uint64_t v777;
  unint64_t v778;
  char v779;
  int v780;
  int v781;
  char v783;
  unsigned int v784;
  unint64_t v785;
  uint64_t v786;
  uint64_t v787;
  unint64_t v788;
  char v789;
  int v790;
  int v791;
  unint64_t v793;
  int v794;
  int v795;
  char v796;
  unsigned int v797;
  unint64_t v798;
  uint64_t v799;
  uint64_t v800;
  unint64_t v801;
  char v802;
  int v803;
  int v804;
  BOOL v805;
  char v806;
  unsigned int v807;
  unint64_t v808;
  uint64_t v809;
  uint64_t v810;
  unint64_t v811;
  char v812;
  int v813;
  int v814;
  BOOL v815;
  unint64_t v816;
  char v817;
  unsigned int v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  unint64_t v822;
  char v823;
  uint64_t v824;
  BOOL v825;
  char v826;
  unsigned int v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  unint64_t v831;
  char v832;
  uint64_t v833;
  BOOL v834;
  char v835;
  unsigned int v836;
  unint64_t v837;
  uint64_t v838;
  uint64_t v839;
  unint64_t v840;
  char v841;
  int v842;
  int v843;
  BOOL v844;
  char v845;
  unsigned int v846;
  unint64_t v847;
  uint64_t v848;
  uint64_t v849;
  unint64_t v850;
  char v851;
  int v852;
  int v853;
  unsigned int v855;
  uint64_t v856;
  uint64_t v857;
  unint64_t v858;
  int v859;
  int v860;
  char v861;
  unsigned int v862;
  unint64_t v863;
  uint64_t v864;
  uint64_t v865;
  unint64_t v866;
  char v867;
  int v868;
  int v869;
  BOOL v870;
  char v871;
  unsigned int v872;
  unint64_t v873;
  uint64_t v874;
  uint64_t v875;
  unint64_t v876;
  char v877;
  int v878;
  int v879;
  char v881;
  unsigned int v882;
  unint64_t v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  char v887;
  int v888;
  int v889;
  unint64_t v891;
  unsigned int v892;
  uint64_t v893;
  uint64_t v894;
  unint64_t v895;
  int v896;
  int v897;
  int v898;
  int v899;
  char v900;
  unsigned int v901;
  unint64_t v902;
  uint64_t v903;
  uint64_t v904;
  unint64_t v905;
  char v906;
  int v907;
  int v908;
  BOOL v909;
  unint64_t v910;
  char v911;
  unsigned int v912;
  unint64_t v913;
  uint64_t v914;
  uint64_t v915;
  unint64_t v916;
  char v917;
  int v918;
  int v919;
  unsigned int v921;
  uint64_t v922;
  uint64_t v923;
  unint64_t v924;
  int v925;
  unsigned int v926;
  uint64_t v927;
  uint64_t v928;
  unint64_t v929;
  int v930;
  int v931;
  int v932;
  char v933;
  unsigned int v934;
  unint64_t v935;
  uint64_t v936;
  uint64_t v937;
  unint64_t v938;
  char v939;
  int v940;
  int v941;
  BOOL v942;
  unint64_t v943;
  unsigned int v944;
  uint64_t v945;
  uint64_t v946;
  unint64_t v947;
  int v948;
  unsigned int v949;
  uint64_t v950;
  uint64_t v951;
  unint64_t v952;
  int v953;
  char v954;
  unsigned int v955;
  unint64_t v956;
  uint64_t v957;
  uint64_t v958;
  unint64_t v959;
  char v960;
  int v961;
  int v962;
  BOOL v963;
  char v964;
  unsigned int v965;
  unint64_t v966;
  uint64_t v967;
  uint64_t v968;
  unint64_t v969;
  char v970;
  int v971;
  int v972;
  char v974;
  unsigned int v975;
  unint64_t v976;
  uint64_t v977;
  uint64_t v978;
  unint64_t v979;
  char v980;
  int v981;
  int v982;
  unint64_t v984;
  unsigned int v985;
  uint64_t v986;
  uint64_t v987;
  unint64_t v988;
  int v989;
  char v990;
  unsigned int v991;
  unint64_t v992;
  uint64_t v993;
  uint64_t v994;
  unint64_t v995;
  char v996;
  int v997;
  int v998;
  char v1000;
  unsigned int v1001;
  unint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  unint64_t v1005;
  char v1006;
  int v1007;
  int v1008;
  unsigned int v1010;
  uint64_t v1011;
  uint64_t v1012;
  unint64_t v1013;
  int v1014;
  unsigned int v1015;
  uint64_t v1016;
  uint64_t v1017;
  unint64_t v1018;
  int v1019;
  unsigned int v1020;
  uint64_t v1021;
  uint64_t v1022;
  unint64_t v1023;
  int v1024;
  char v1025;
  unsigned int v1026;
  unint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  unint64_t v1030;
  char v1031;
  int v1032;
  int v1033;
  int v1035;
  int v1036;
  int v1037;
  char v1038;
  unsigned int v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  unint64_t v1043;
  char v1044;
  uint64_t v1045;
  int v1047;
  int v1048;
  int v1049;
  char v1050;
  unsigned int v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  unint64_t v1055;
  char v1056;
  uint64_t v1057;
  BOOL v1058;
  char v1059;
  unsigned int v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  unint64_t v1064;
  char v1065;
  uint64_t v1066;
  BOOL v1067;
  char v1068;
  unsigned int v1069;
  unint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  unint64_t v1073;
  char v1074;
  int v1075;
  int v1076;
  BOOL v1077;
  int v1078;
  char v1079;
  unsigned int v1080;
  unint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  unint64_t v1084;
  char v1085;
  int v1086;
  int v1087;
  BOOL v1088;
  char v1089;
  unsigned int v1090;
  unint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  unint64_t v1094;
  char v1095;
  int v1096;
  unsigned int v1098;
  uint64_t v1099;
  uint64_t v1100;
  unint64_t v1101;
  int v1102;
  int v1103;
  char v1104;
  unsigned int v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  unint64_t v1109;
  char v1110;
  uint64_t v1111;
  BOOL v1112;
  int v1113;
  int v1114;
  _BOOL8 v1115;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
LABEL_2686:
    v1115 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v1115;
  }
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (a1[*v4])
      goto LABEL_2686;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *v2;
      v10 = *(_QWORD *)&a1[v9];
      v11 = v10 + 1;
      if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
        break;
      v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
      *(_QWORD *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0)
        goto LABEL_12;
      v6 += 7;
      v13 = v7++ >= 9;
      if (v13)
      {
        v8 = 0;
        v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v14 = a1[*v4];
    if (a1[*v4])
      v8 = 0;
LABEL_14:
    v15 = v8 & 7;
    if (v14 || v15 == 4)
      goto LABEL_2686;
    switch((v8 >> 3))
    {
      case 1u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_22:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_2248;
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (2)
          {
            v20 = *v2;
            v21 = *(_QWORD *)&a1[v20];
            v22 = v21 + 1;
            if (v21 == -1 || v22 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v23 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v21);
              *(_QWORD *)&a1[v20] = v22;
              v19 |= (unint64_t)(v23 & 0x7F) << v17;
              if (v23 < 0)
              {
                v17 += 7;
                v13 = v18++ >= 9;
                if (v13)
                {
                  v19 = 0;
                  v24 = a1[*v4];
                  goto LABEL_34;
                }
                continue;
              }
            }
            break;
          }
          v24 = a1[*v4];
          if (a1[*v4])
            v19 = 0;
LABEL_34:
          v25 = v19 & 7;
          if (v24)
            v26 = 1;
          else
            v26 = v25 == 4;
          if (v26)
            goto LABEL_2248;
          switch((v19 >> 3))
          {
            case 1u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 2u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDMultiLocalizedStringIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 3u:
              if ((v19 & 7) != 0)
                goto LABEL_2687;
              v27 = 0;
              while (1)
              {
                v28 = *v2;
                v29 = *(_QWORD *)&a1[v28];
                v30 = v29 + 1;
                if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
                  goto LABEL_229;
                v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
                *(_QWORD *)&a1[v28] = v30;
                if (v31 < 0)
                {
                  v32 = v27++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_22;
              }
            case 4u:
            case 7u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDWarsawMerchantIdentifierIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 5u:
              if ((v19 & 7) != 0)
                goto LABEL_2687;
              v33 = 0;
              while (1)
              {
                v34 = *v2;
                v35 = *(_QWORD *)&a1[v34];
                v36 = v35 + 1;
                if (v35 == -1 || v36 > *(_QWORD *)&a1[*v3])
                  goto LABEL_229;
                v37 = *(char *)(*(_QWORD *)&a1[*v5] + v35);
                *(_QWORD *)&a1[v34] = v36;
                if (v37 < 0)
                {
                  v32 = v33++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_22;
              }
            case 6u:
              if (v25 != 2)
                goto LABEL_2687;
              goto LABEL_203;
            case 8u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSearchClientBehaviorIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 9u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDResultDetourInfoIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 0xAu:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDDirectionIntentIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 0xBu:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSearchRelatedCategoryIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 0xCu:
              if (v25 != 2 || !PBReaderPlaceMark())
                goto LABEL_2687;
              v1119 = objc_msgSend(a1, "position");
              v1120 = objc_msgSend(a1, "length");
LABEL_88:
              if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                goto LABEL_242;
              v38 = 0;
              v39 = 0;
              v40 = 0;
              while (1)
              {
                v41 = *v2;
                v42 = *(_QWORD *)&a1[v41];
                v43 = v42 + 1;
                if (v42 == -1 || v43 > *(_QWORD *)&a1[*v3])
                  break;
                v44 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v42);
                *(_QWORD *)&a1[v41] = v43;
                v40 |= (unint64_t)(v44 & 0x7F) << v38;
                if ((v44 & 0x80) == 0)
                  goto LABEL_98;
                v38 += 7;
                v13 = v39++ >= 9;
                if (v13)
                {
                  v40 = 0;
                  v45 = a1[*v4];
                  goto LABEL_100;
                }
              }
              a1[*v4] = 1;
LABEL_98:
              v45 = a1[*v4];
              if (a1[*v4])
                v40 = 0;
LABEL_100:
              v46 = v40 & 7;
              if (v45 || v46 == 4)
              {
LABEL_242:
                v94 = a1[*v4];
                PBReaderRecallMark();
                if (!v94)
                {
LABEL_241:
                  PBReaderRecallMark();
                  continue;
                }
                goto LABEL_2687;
              }
              v48 = v40 >> 3;
              if ((v40 >> 3) != 3)
              {
                if ((_DWORD)v48 == 2)
                {
                  if (v46 != 2)
                    goto LABEL_2690;
                }
                else if ((_DWORD)v48 == 1)
                {
                  if ((v40 & 7) == 0)
                  {
                    v49 = 0;
                    do
                    {
                      v50 = *v2;
                      v51 = *(_QWORD *)&a1[v50];
                      v52 = v51 + 1;
                      if (v51 == -1 || v52 > *(_QWORD *)&a1[*v3])
                      {
                        a1[*v4] = 1;
                        goto LABEL_88;
                      }
                      v53 = *(char *)(*(_QWORD *)&a1[*v5] + v51);
                      *(_QWORD *)&a1[v50] = v52;
                      if ((v53 & 0x80000000) == 0)
                        break;
                      v32 = v49++ > 8;
                    }
                    while (!v32);
                    goto LABEL_88;
                  }
                  goto LABEL_2690;
                }
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_2690;
                goto LABEL_88;
              }
              if (v46 == 2)
              {
                v1117 = 0;
                v1118 = 0;
                if (PBReaderPlaceMark())
                {
                  if (GEOPDWarsawMerchantIdentifierIsValid(a1))
                  {
                    PBReaderRecallMark();
                    goto LABEL_88;
                  }
                }
              }
              break;
            case 0xDu:
              if ((v19 & 7) != 0)
                goto LABEL_2687;
              v54 = 0;
              while (1)
              {
                v55 = *v2;
                v56 = *(_QWORD *)&a1[v55];
                v57 = v56 + 1;
                if (v56 == -1 || v57 > *(_QWORD *)&a1[*v3])
                  goto LABEL_229;
                v58 = *(char *)(*(_QWORD *)&a1[*v5] + v56);
                *(_QWORD *)&a1[v55] = v57;
                if (v58 < 0)
                {
                  v32 = v54++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_22;
              }
            case 0xEu:
              if ((v19 & 7) != 0)
                goto LABEL_2687;
              v59 = 0;
              while (1)
              {
                v60 = *v2;
                v61 = *(_QWORD *)&a1[v60];
                v62 = v61 + 1;
                if (v61 == -1 || v62 > *(_QWORD *)&a1[*v3])
                  goto LABEL_229;
                v63 = *(char *)(*(_QWORD *)&a1[*v5] + v61);
                *(_QWORD *)&a1[v60] = v62;
                if (v63 < 0)
                {
                  v32 = v59++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_22;
              }
            case 0xFu:
              if ((v19 & 7) != 0)
                goto LABEL_2687;
              v64 = 0;
              while (1)
              {
                v65 = *v2;
                v66 = *(_QWORD *)&a1[v65];
                v67 = v66 + 1;
                if (v66 == -1 || v67 > *(_QWORD *)&a1[*v3])
                  goto LABEL_229;
                v68 = *(char *)(*(_QWORD *)&a1[*v5] + v66);
                *(_QWORD *)&a1[v65] = v67;
                if (v68 < 0)
                {
                  v32 = v64++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_22;
              }
            case 0x10u:
              if ((v19 & 7) != 0)
                goto LABEL_2687;
              v69 = 0;
              while (1)
              {
                v70 = *v2;
                v71 = *(_QWORD *)&a1[v70];
                v72 = v71 + 1;
                if (v71 == -1 || v72 > *(_QWORD *)&a1[*v3])
                  goto LABEL_229;
                v73 = *(char *)(*(_QWORD *)&a1[*v5] + v71);
                *(_QWORD *)&a1[v70] = v72;
                if (v73 < 0)
                {
                  v32 = v69++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_22;
              }
            case 0x11u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDRetainedSearchMetadataIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 0x12u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSSearchResultSectionIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 0x13u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDRelatedEntitySectionIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 0x14u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSSearchTierMetadataIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 0x15u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDResultRefinementGroupIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 0x16u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSSearchAutoRedoThresholdIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 0x17u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDPlaceSummaryLayoutMetadataIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 0x18u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSearchSectionListIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 0x19u:
              if ((v19 & 7) != 0)
                goto LABEL_2687;
              v74 = 0;
              while (1)
              {
                v75 = *v2;
                v76 = *(_QWORD *)&a1[v75];
                v77 = v76 + 1;
                if (v76 == -1 || v77 > *(_QWORD *)&a1[*v3])
                  goto LABEL_229;
                v78 = *(char *)(*(_QWORD *)&a1[*v5] + v76);
                *(_QWORD *)&a1[v75] = v77;
                if (v78 < 0)
                {
                  v32 = v74++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_22;
              }
            case 0x1Au:
              if ((v19 & 7) != 0)
                goto LABEL_2687;
              v79 = 0;
              while (1)
              {
                v80 = *v2;
                v81 = *(_QWORD *)&a1[v80];
                v82 = v81 + 1;
                if (v81 == -1 || v82 > *(_QWORD *)&a1[*v3])
                  goto LABEL_229;
                v83 = *(char *)(*(_QWORD *)&a1[*v5] + v81);
                *(_QWORD *)&a1[v80] = v82;
                if (v83 < 0)
                {
                  v32 = v79++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_22;
              }
            case 0x1Cu:
              if ((v19 & 7) != 0)
                goto LABEL_2687;
              v84 = 0;
              while (1)
              {
                v85 = *v2;
                v86 = *(_QWORD *)&a1[v85];
                v87 = v86 + 1;
                if (v86 == -1 || v87 > *(_QWORD *)&a1[*v3])
                  goto LABEL_229;
                v88 = *(char *)(*(_QWORD *)&a1[*v5] + v86);
                *(_QWORD *)&a1[v85] = v87;
                if (v88 < 0)
                {
                  v32 = v84++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_22;
              }
            case 0x1Du:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSSearchSessionDataIsValid((unsigned __int8 *)a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 0x1Eu:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 0x1Fu:
              if ((v19 & 7) != 0)
                goto LABEL_2687;
              v89 = 0;
              do
              {
                v90 = *v2;
                v91 = *(_QWORD *)&a1[v90];
                v92 = v91 + 1;
                if (v91 == -1 || v92 > *(_QWORD *)&a1[*v3])
                {
LABEL_229:
                  a1[*v4] = 1;
                  goto LABEL_22;
                }
                v93 = *(char *)(*(_QWORD *)&a1[*v5] + v91);
                *(_QWORD *)&a1[v90] = v92;
                if ((v93 & 0x80000000) == 0)
                  break;
                v32 = v89++ > 8;
              }
              while (!v32);
              continue;
            case 0x20u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDGuideSummaryLayoutMetadataIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 0x21u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDPaginationInfoIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            case 0x22u:
              if (v25 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSSearchRedoButtonThresholdIsValid(a1))
                goto LABEL_2687;
              goto LABEL_241;
            default:
LABEL_203:
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
          }
          goto LABEL_2690;
        }
      case 2u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_2602;
            v95 = 0;
            v96 = 0;
            v97 = 0;
            while (1)
            {
              v98 = *v2;
              v99 = *(_QWORD *)&a1[v98];
              v100 = v99 + 1;
              if (v99 == -1 || v100 > *(_QWORD *)&a1[*v3])
                break;
              v101 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v99);
              *(_QWORD *)&a1[v98] = v100;
              v97 |= (unint64_t)(v101 & 0x7F) << v95;
              if ((v101 & 0x80) == 0)
                goto LABEL_257;
              v95 += 7;
              v13 = v96++ >= 9;
              if (v13)
              {
                v97 = 0;
                v102 = a1[*v4];
                goto LABEL_259;
              }
            }
            a1[*v4] = 1;
LABEL_257:
            v102 = a1[*v4];
            if (a1[*v4])
              v97 = 0;
LABEL_259:
            v103 = v97 & 7;
            if (v102 || v103 == 4)
              goto LABEL_2602;
            if ((v97 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
            }
            break;
          }
          if (v103 == 2)
          {
            v1117 = 0;
            v1118 = 0;
            if (PBReaderPlaceMark())
            {
              if (GEOPDMultiLocalizedStringIsValid(a1))
              {
                PBReaderRecallMark();
                continue;
              }
            }
          }
          goto LABEL_2687;
        }
      case 3u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (1)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v106 = 0;
          v107 = 0;
          v108 = 0;
          while (1)
          {
            v109 = *v2;
            v110 = *(_QWORD *)&a1[v109];
            v111 = v110 + 1;
            if (v110 == -1 || v111 > *(_QWORD *)&a1[*v3])
              break;
            v112 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v110);
            *(_QWORD *)&a1[v109] = v111;
            v108 |= (unint64_t)(v112 & 0x7F) << v106;
            if ((v112 & 0x80) == 0)
              goto LABEL_283;
            v106 += 7;
            v13 = v107++ >= 9;
            if (v13)
            {
              LOBYTE(v108) = 0;
              v105 = a1[*v4];
              goto LABEL_285;
            }
          }
          a1[*v4] = 1;
LABEL_283:
          v113 = *v4;
          v105 = a1[v113];
          if (a1[v113])
            LOBYTE(v108) = 0;
LABEL_285:
          if (v105 || (v108 & 7) == 4)
            goto LABEL_2293;
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_2687;
        }
      case 4u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (1)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v115 = 0;
          v116 = 0;
          v117 = 0;
          while (1)
          {
            v118 = *v2;
            v119 = *(_QWORD *)&a1[v118];
            v120 = v119 + 1;
            if (v119 == -1 || v120 > *(_QWORD *)&a1[*v3])
              break;
            v121 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v119);
            *(_QWORD *)&a1[v118] = v120;
            v117 |= (unint64_t)(v121 & 0x7F) << v115;
            if ((v121 & 0x80) == 0)
              goto LABEL_304;
            v115 += 7;
            v13 = v116++ >= 9;
            if (v13)
            {
              LOBYTE(v117) = 0;
              v105 = a1[*v4];
              goto LABEL_306;
            }
          }
          a1[*v4] = 1;
LABEL_304:
          v122 = *v4;
          v105 = a1[v122];
          if (a1[v122])
            LOBYTE(v117) = 0;
LABEL_306:
          if (v105 || (v117 & 7) == 4)
            goto LABEL_2293;
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_2687;
        }
      case 5u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (1)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v124 = 0;
          v125 = 0;
          v126 = 0;
          while (1)
          {
            v127 = *v2;
            v128 = *(_QWORD *)&a1[v127];
            v129 = v128 + 1;
            if (v128 == -1 || v129 > *(_QWORD *)&a1[*v3])
              break;
            v130 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v128);
            *(_QWORD *)&a1[v127] = v129;
            v126 |= (unint64_t)(v130 & 0x7F) << v124;
            if ((v130 & 0x80) == 0)
              goto LABEL_325;
            v124 += 7;
            v13 = v125++ >= 9;
            if (v13)
            {
              LOBYTE(v126) = 0;
              v105 = a1[*v4];
              goto LABEL_327;
            }
          }
          a1[*v4] = 1;
LABEL_325:
          v131 = *v4;
          v105 = a1[v131];
          if (a1[v131])
            LOBYTE(v126) = 0;
LABEL_327:
          if (v105 || (v126 & 7) == 4)
            goto LABEL_2293;
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_2687;
        }
      case 6u:
        if (v15 != 2)
          goto LABEL_2688;
        v1119 = 0;
        v1120 = 0;
        if (!PBReaderPlaceMark() || !GEOPDMerchantLookupResultIsValid(a1))
          goto LABEL_2688;
        goto LABEL_2603;
      case 7u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (1)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v133 = 0;
          v134 = 0;
          v135 = 0;
          while (1)
          {
            v136 = *v2;
            v137 = *(_QWORD *)&a1[v136];
            v138 = v137 + 1;
            if (v137 == -1 || v138 > *(_QWORD *)&a1[*v3])
              break;
            v139 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v137);
            *(_QWORD *)&a1[v136] = v138;
            v135 |= (unint64_t)(v139 & 0x7F) << v133;
            if ((v139 & 0x80) == 0)
              goto LABEL_350;
            v133 += 7;
            v13 = v134++ >= 9;
            if (v13)
            {
              LOBYTE(v135) = 0;
              v105 = a1[*v4];
              goto LABEL_352;
            }
          }
          a1[*v4] = 1;
LABEL_350:
          v140 = *v4;
          v105 = a1[v140];
          if (a1[v140])
            LOBYTE(v135) = 0;
LABEL_352:
          if (v105 || (v135 & 7) == 4)
            goto LABEL_2293;
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_2687;
        }
      case 8u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
LABEL_361:
        while (2)
        {
          while (2)
          {
            while (2)
            {
              if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                goto LABEL_2602;
              v142 = 0;
              v143 = 0;
              v144 = 0;
              while (1)
              {
                v145 = *v2;
                v146 = *(_QWORD *)&a1[v145];
                v147 = v146 + 1;
                if (v146 == -1 || v147 > *(_QWORD *)&a1[*v3])
                  break;
                v148 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v146);
                *(_QWORD *)&a1[v145] = v147;
                v144 |= (unint64_t)(v148 & 0x7F) << v142;
                if ((v148 & 0x80) == 0)
                  goto LABEL_371;
                v142 += 7;
                v13 = v143++ >= 9;
                if (v13)
                {
                  v144 = 0;
                  v149 = a1[*v4];
                  goto LABEL_373;
                }
              }
              a1[*v4] = 1;
LABEL_371:
              v149 = a1[*v4];
              if (a1[*v4])
                v144 = 0;
LABEL_373:
              v150 = v144 & 7;
              if (v149 || v150 == 4)
                goto LABEL_2602;
              v152 = v144 >> 3;
              if ((v144 >> 3) == 3)
              {
                if ((v144 & 7) == 0)
                {
                  v153 = 0;
                  do
                  {
                    v154 = *v2;
                    v155 = *(_QWORD *)&a1[v154];
                    v156 = v155 + 1;
                    if (v155 == -1 || v156 > *(_QWORD *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_361;
                    }
                    v157 = *(char *)(*(_QWORD *)&a1[*v5] + v155);
                    *(_QWORD *)&a1[v154] = v156;
                    if ((v157 & 0x80000000) == 0)
                      break;
                    v32 = v153++ > 8;
                  }
                  while (!v32);
                  continue;
                }
                goto LABEL_2687;
              }
              break;
            }
            if ((_DWORD)v152 == 2)
            {
              if (v150 != 2)
                goto LABEL_2687;
              v1117 = 0;
              v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDResultDetourInfoIsValid(a1))
                goto LABEL_2687;
            }
            else
            {
              if ((_DWORD)v152 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_2687;
                continue;
              }
              if (v150 != 2)
                goto LABEL_2687;
              v1117 = 0;
              v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDMultiLocalizedStringIsValid(a1))
                goto LABEL_2687;
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 9u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_2602;
            v158 = 0;
            v159 = 0;
            v160 = 0;
            while (1)
            {
              v161 = *v2;
              v162 = *(_QWORD *)&a1[v161];
              v163 = v162 + 1;
              if (v162 == -1 || v163 > *(_QWORD *)&a1[*v3])
                break;
              v164 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v162);
              *(_QWORD *)&a1[v161] = v163;
              v160 |= (unint64_t)(v164 & 0x7F) << v158;
              if ((v164 & 0x80) == 0)
                goto LABEL_412;
              v158 += 7;
              v13 = v159++ >= 9;
              if (v13)
              {
                v160 = 0;
                v165 = a1[*v4];
                goto LABEL_414;
              }
            }
            a1[*v4] = 1;
LABEL_412:
            v165 = a1[*v4];
            if (a1[*v4])
              v160 = 0;
LABEL_414:
            v166 = v160 & 7;
            if (v165 || v166 == 4)
              goto LABEL_2602;
            v168 = v160 >> 3;
            if ((v160 >> 3) == 3)
            {
              if (v166 != 2)
                goto LABEL_2687;
              v1117 = 0;
              v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDPaginationInfoIsValid(a1))
                goto LABEL_2687;
            }
            else if ((_DWORD)v168 == 2)
            {
              if (v166 != 2)
                goto LABEL_2687;
              v1117 = 0;
              v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDMultiLocalizedStringIsValid(a1))
                goto LABEL_2687;
            }
            else
            {
              if ((_DWORD)v168 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_2687;
                continue;
              }
              if (v166 != 2)
                goto LABEL_2687;
              v1117 = 0;
              v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
                goto LABEL_2687;
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0xAu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_438:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_2248;
          v169 = 0;
          v170 = 0;
          v171 = 0;
          while (2)
          {
            v172 = *v2;
            v173 = *(_QWORD *)&a1[v172];
            v174 = v173 + 1;
            if (v173 == -1 || v174 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v175 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v173);
              *(_QWORD *)&a1[v172] = v174;
              v171 |= (unint64_t)(v175 & 0x7F) << v169;
              if (v175 < 0)
              {
                v169 += 7;
                v13 = v170++ >= 9;
                if (v13)
                {
                  v171 = 0;
                  v176 = a1[*v4];
                  goto LABEL_450;
                }
                continue;
              }
            }
            break;
          }
          v176 = a1[*v4];
          if (a1[*v4])
            v171 = 0;
LABEL_450:
          v177 = v171 & 7;
          if (v176)
            v178 = 1;
          else
            v178 = v177 == 4;
          if (v178)
            goto LABEL_2248;
          switch((v171 >> 3))
          {
            case 1u:
              if (v177 != 2 || !PBReaderPlaceMark())
                goto LABEL_2687;
              v1119 = objc_msgSend(a1, "position");
              v1120 = objc_msgSend(a1, "length");
LABEL_458:
              if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                goto LABEL_756;
              v179 = 0;
              v180 = 0;
              v181 = 0;
              while (2)
              {
                v182 = *v2;
                v183 = *(_QWORD *)&a1[v182];
                v184 = v183 + 1;
                if (v183 == -1 || v184 > *(_QWORD *)&a1[*v3])
                {
                  a1[*v4] = 1;
                }
                else
                {
                  v185 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v183);
                  *(_QWORD *)&a1[v182] = v184;
                  v181 |= (unint64_t)(v185 & 0x7F) << v179;
                  if (v185 < 0)
                  {
                    v179 += 7;
                    v13 = v180++ >= 9;
                    if (v13)
                    {
                      v181 = 0;
                      v186 = a1[*v4];
                      goto LABEL_470;
                    }
                    continue;
                  }
                }
                break;
              }
              v186 = a1[*v4];
              if (a1[*v4])
                v181 = 0;
LABEL_470:
              v187 = v181 & 7;
              if (v186)
                v188 = 1;
              else
                v188 = v187 == 4;
              if (v188)
              {
LABEL_756:
                v340 = a1[*v4];
                PBReaderRecallMark();
                if (v340)
                  goto LABEL_2687;
LABEL_720:
                PBReaderRecallMark();
                continue;
              }
              break;
            case 2u:
              if ((v171 & 7) != 0)
                goto LABEL_2687;
              v259 = 0;
              while (1)
              {
                v260 = *v2;
                v261 = *(_QWORD *)&a1[v260];
                v262 = v261 + 1;
                if (v261 == -1 || v262 > *(_QWORD *)&a1[*v3])
                  goto LABEL_753;
                v263 = *(char *)(*(_QWORD *)&a1[*v5] + v261);
                *(_QWORD *)&a1[v260] = v262;
                if (v263 < 0)
                {
                  v32 = v259++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_438;
              }
            case 3u:
              if ((v171 & 7) != 0)
                goto LABEL_2687;
              v264 = 0;
              while (1)
              {
                v265 = *v2;
                v266 = *(_QWORD *)&a1[v265];
                v267 = v266 + 1;
                if (v266 == -1 || v267 > *(_QWORD *)&a1[*v3])
                  goto LABEL_753;
                v268 = *(char *)(*(_QWORD *)&a1[*v5] + v266);
                *(_QWORD *)&a1[v265] = v267;
                if (v268 < 0)
                {
                  v32 = v264++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_438;
              }
            case 4u:
              if ((v171 & 7) != 0)
                goto LABEL_2687;
              v269 = 0;
              while (1)
              {
                v270 = *v2;
                v271 = *(_QWORD *)&a1[v270];
                v272 = v271 + 1;
                if (v271 == -1 || v272 > *(_QWORD *)&a1[*v3])
                  goto LABEL_753;
                v273 = *(char *)(*(_QWORD *)&a1[*v5] + v271);
                *(_QWORD *)&a1[v270] = v272;
                if (v273 < 0)
                {
                  v32 = v269++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_438;
              }
            case 5u:
              if ((v171 & 7) != 0)
                goto LABEL_2687;
              v274 = 0;
              while (1)
              {
                v275 = *v2;
                v276 = *(_QWORD *)&a1[v275];
                v277 = v276 + 1;
                if (v276 == -1 || v277 > *(_QWORD *)&a1[*v3])
                  goto LABEL_753;
                v278 = *(char *)(*(_QWORD *)&a1[*v5] + v276);
                *(_QWORD *)&a1[v275] = v277;
                if (v278 < 0)
                {
                  v32 = v274++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_438;
              }
            case 6u:
              if (v177 != 2)
                goto LABEL_2687;
              v1117 = 0;
              v1118 = 0;
              if (!PBReaderPlaceMark())
                goto LABEL_2687;
              v1119 = objc_msgSend(a1, "position");
              v1120 = objc_msgSend(a1, "length");
LABEL_633:
              while (2)
              {
                if (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
                {
                  v279 = 0;
                  v280 = 0;
                  v281 = 0;
                  while (1)
                  {
                    v282 = *v2;
                    v283 = *(_QWORD *)&a1[v282];
                    v284 = v283 + 1;
                    if (v283 == -1 || v284 > *(_QWORD *)&a1[*v3])
                      break;
                    v285 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v283);
                    *(_QWORD *)&a1[v282] = v284;
                    v281 |= (unint64_t)(v285 & 0x7F) << v279;
                    if ((v285 & 0x80) == 0)
                      goto LABEL_643;
                    v279 += 7;
                    v13 = v280++ >= 9;
                    if (v13)
                    {
                      v281 = 0;
                      v286 = a1[*v4];
                      goto LABEL_645;
                    }
                  }
                  a1[*v4] = 1;
LABEL_643:
                  v286 = a1[*v4];
                  if (a1[*v4])
                    v281 = 0;
LABEL_645:
                  if (!v286 && (v281 & 7) != 4)
                  {
                    v288 = v281 >> 3;
                    if ((v281 >> 3) == 3)
                    {
                      if ((v281 & 7) != 0)
                        goto LABEL_2690;
                      v294 = 0;
                      while (1)
                      {
                        v295 = *v2;
                        v296 = *(_QWORD *)&a1[v295];
                        v297 = v296 + 1;
                        if (v296 == -1 || v297 > *(_QWORD *)&a1[*v3])
                          break;
                        v298 = *(char *)(*(_QWORD *)&a1[*v5] + v296);
                        *(_QWORD *)&a1[v295] = v297;
                        if (v298 < 0)
                        {
                          v32 = v294++ > 8;
                          if (!v32)
                            continue;
                        }
                        goto LABEL_633;
                      }
                    }
                    else if ((_DWORD)v288 == 2)
                    {
                      if ((v281 & 7) != 0)
                        goto LABEL_2690;
                      v299 = 0;
                      while (1)
                      {
                        v300 = *v2;
                        v301 = *(_QWORD *)&a1[v300];
                        v302 = v301 + 1;
                        if (v301 == -1 || v302 > *(_QWORD *)&a1[*v3])
                          break;
                        v303 = *(char *)(*(_QWORD *)&a1[*v5] + v301);
                        *(_QWORD *)&a1[v300] = v302;
                        if (v303 < 0)
                        {
                          v32 = v299++ > 8;
                          if (!v32)
                            continue;
                        }
                        goto LABEL_633;
                      }
                    }
                    else
                    {
                      if ((_DWORD)v288 != 1)
                      {
                        if ((PBReaderSkipValueWithTag() & 1) == 0)
                          goto LABEL_2690;
                        continue;
                      }
                      if ((v281 & 7) != 0)
                        goto LABEL_2690;
                      v289 = 0;
                      while (1)
                      {
                        v290 = *v2;
                        v291 = *(_QWORD *)&a1[v290];
                        v292 = v291 + 1;
                        if (v291 == -1 || v292 > *(_QWORD *)&a1[*v3])
                          break;
                        v293 = *(char *)(*(_QWORD *)&a1[*v5] + v291);
                        *(_QWORD *)&a1[v290] = v292;
                        if (v293 < 0)
                        {
                          v32 = v289++ > 8;
                          if (!v32)
                            continue;
                        }
                        goto LABEL_633;
                      }
                    }
                    a1[*v4] = 1;
                    continue;
                  }
                }
                break;
              }
              v339 = a1[*v4];
              PBReaderRecallMark();
              if (v339)
                goto LABEL_2687;
              goto LABEL_720;
            case 7u:
              if ((v171 & 7) != 0)
                goto LABEL_2687;
              v304 = 0;
              while (1)
              {
                v305 = *v2;
                v306 = *(_QWORD *)&a1[v305];
                v307 = v306 + 1;
                if (v306 == -1 || v307 > *(_QWORD *)&a1[*v3])
                  goto LABEL_753;
                v308 = *(char *)(*(_QWORD *)&a1[*v5] + v306);
                *(_QWORD *)&a1[v305] = v307;
                if (v308 < 0)
                {
                  v32 = v304++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_438;
              }
            case 0xFu:
              if (v177 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDClientRankingFeatureMetadataIsValid(a1))
                goto LABEL_2687;
              goto LABEL_720;
            case 0x10u:
              if ((v171 & 7) != 0)
                goto LABEL_2687;
              v309 = 0;
              while (1)
              {
                v310 = *v2;
                v311 = *(_QWORD *)&a1[v310];
                v312 = v311 + 1;
                if (v311 == -1 || v312 > *(_QWORD *)&a1[*v3])
                  goto LABEL_753;
                v313 = *(char *)(*(_QWORD *)&a1[*v5] + v311);
                *(_QWORD *)&a1[v310] = v312;
                if (v313 < 0)
                {
                  v32 = v309++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_438;
              }
            case 0x11u:
              if (v177 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDAutocompleteSessionDataIsValid((unsigned __int8 *)a1))
                goto LABEL_2687;
              goto LABEL_720;
            case 0x12u:
              if (v177 != 2)
                goto LABEL_2687;
              v1119 = 0;
              v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDZoomInfoIsValid(a1))
                goto LABEL_2687;
              goto LABEL_720;
            case 0x13u:
              if ((v171 & 7) != 0)
                goto LABEL_2687;
              v314 = 0;
              while (1)
              {
                v315 = *v2;
                v316 = *(_QWORD *)&a1[v315];
                v317 = v316 + 1;
                if (v316 == -1 || v317 > *(_QWORD *)&a1[*v3])
                  goto LABEL_753;
                v318 = *(char *)(*(_QWORD *)&a1[*v5] + v316);
                *(_QWORD *)&a1[v315] = v317;
                if (v318 < 0)
                {
                  v32 = v314++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_438;
              }
            case 0x14u:
              if (v177 == 2)
              {
                v1119 = 0;
                v1120 = 0;
                if (PBReaderPlaceMark())
                {
                  if (GEOPDPlaceSummaryLayoutMetadataIsValid(a1))
                    goto LABEL_720;
                }
              }
              goto LABEL_2687;
            case 0x15u:
              if ((v171 & 7) != 0)
                goto LABEL_2687;
              v319 = 0;
              while (1)
              {
                v320 = *v2;
                v321 = *(_QWORD *)&a1[v320];
                v322 = v321 + 1;
                if (v321 == -1 || v322 > *(_QWORD *)&a1[*v3])
                  goto LABEL_753;
                v323 = *(char *)(*(_QWORD *)&a1[*v5] + v321);
                *(_QWORD *)&a1[v320] = v322;
                if (v323 < 0)
                {
                  v32 = v319++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_438;
              }
            case 0x16u:
              if ((v171 & 7) != 0)
                goto LABEL_2687;
              v324 = 0;
              while (1)
              {
                v325 = *v2;
                v326 = *(_QWORD *)&a1[v325];
                v327 = v326 + 1;
                if (v326 == -1 || v327 > *(_QWORD *)&a1[*v3])
                  goto LABEL_753;
                v328 = *(char *)(*(_QWORD *)&a1[*v5] + v326);
                *(_QWORD *)&a1[v325] = v327;
                if (v328 < 0)
                {
                  v32 = v324++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_438;
              }
            case 0x17u:
              if ((v171 & 7) != 0)
                goto LABEL_2687;
              v329 = 0;
              while (1)
              {
                v330 = *v2;
                v331 = *(_QWORD *)&a1[v330];
                v332 = v331 + 1;
                if (v331 == -1 || v332 > *(_QWORD *)&a1[*v3])
                  goto LABEL_753;
                v333 = *(char *)(*(_QWORD *)&a1[*v5] + v331);
                *(_QWORD *)&a1[v330] = v332;
                if (v333 < 0)
                {
                  v32 = v329++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_438;
              }
            case 0x18u:
              if ((v171 & 7) != 0)
                goto LABEL_2687;
              v334 = 0;
              do
              {
                v335 = *v2;
                v336 = *(_QWORD *)&a1[v335];
                v337 = v336 + 1;
                if (v336 == -1 || v337 > *(_QWORD *)&a1[*v3])
                {
LABEL_753:
                  a1[*v4] = 1;
                  goto LABEL_438;
                }
                v338 = *(char *)(*(_QWORD *)&a1[*v5] + v336);
                *(_QWORD *)&a1[v335] = v337;
                if ((v338 & 0x80000000) == 0)
                  break;
                v32 = v334++ > 8;
              }
              while (!v32);
              continue;
            default:
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
          }
          break;
        }
        switch((v181 >> 3))
        {
          case 1u:
            if ((v181 & 7) != 0)
              goto LABEL_2690;
            v189 = 0;
            while (1)
            {
              v190 = *v2;
              v191 = *(_QWORD *)&a1[v190];
              v192 = v191 + 1;
              if (v191 == -1 || v192 > *(_QWORD *)&a1[*v3])
                goto LABEL_567;
              v193 = *(char *)(*(_QWORD *)&a1[*v5] + v191);
              *(_QWORD *)&a1[v190] = v192;
              if (v193 < 0)
              {
                v32 = v189++ > 8;
                if (!v32)
                  continue;
              }
              goto LABEL_458;
            }
          case 2u:
            if (v187 == 2)
              goto LABEL_484;
            goto LABEL_2690;
          case 3u:
            if (v187 == 2)
            {
              v1117 = 0;
              v1118 = 0;
              if (PBReaderPlaceMark())
              {
                if (GEOPDAutocompleteEntryIsValid(a1))
                  break;
              }
            }
            goto LABEL_2690;
          case 4u:
            if ((v181 & 7) != 0)
              goto LABEL_2690;
            v194 = 0;
            while (1)
            {
              v195 = *v2;
              v196 = *(_QWORD *)&a1[v195];
              v197 = v196 + 1;
              if (v196 == -1 || v197 > *(_QWORD *)&a1[*v3])
                goto LABEL_567;
              v198 = *(char *)(*(_QWORD *)&a1[*v5] + v196);
              *(_QWORD *)&a1[v195] = v197;
              if (v198 < 0)
              {
                v32 = v194++ > 8;
                if (!v32)
                  continue;
              }
              goto LABEL_458;
            }
          case 5u:
            if ((v181 & 7) != 0)
              goto LABEL_2690;
            v199 = 0;
            while (1)
            {
              v200 = *v2;
              v201 = *(_QWORD *)&a1[v200];
              v202 = v201 + 1;
              if (v201 == -1 || v202 > *(_QWORD *)&a1[*v3])
                goto LABEL_567;
              v203 = *(char *)(*(_QWORD *)&a1[*v5] + v201);
              *(_QWORD *)&a1[v200] = v202;
              if (v203 < 0)
              {
                v32 = v199++ > 8;
                if (!v32)
                  continue;
              }
              goto LABEL_458;
            }
          case 6u:
            if ((v181 & 7) != 0)
              goto LABEL_2690;
            v204 = 0;
            while (1)
            {
              v205 = *v2;
              v206 = *(_QWORD *)&a1[v205];
              v207 = v206 + 1;
              if (v206 == -1 || v207 > *(_QWORD *)&a1[*v3])
                goto LABEL_567;
              v208 = *(char *)(*(_QWORD *)&a1[*v5] + v206);
              *(_QWORD *)&a1[v205] = v207;
              if (v208 < 0)
              {
                v32 = v204++ > 8;
                if (!v32)
                  continue;
              }
              goto LABEL_458;
            }
          case 7u:
            if ((v181 & 7) != 0)
              goto LABEL_2690;
            v209 = 0;
            while (1)
            {
              v210 = *v2;
              v211 = *(_QWORD *)&a1[v210];
              v212 = v211 + 1;
              if (v211 == -1 || v212 > *(_QWORD *)&a1[*v3])
                goto LABEL_567;
              v213 = *(char *)(*(_QWORD *)&a1[*v5] + v211);
              *(_QWORD *)&a1[v210] = v212;
              if (v213 < 0)
              {
                v32 = v209++ > 8;
                if (!v32)
                  continue;
              }
              goto LABEL_458;
            }
          case 8u:
            if ((v181 & 7) != 0)
              goto LABEL_2690;
            v214 = 0;
            while (1)
            {
              v215 = *v2;
              v216 = *(_QWORD *)&a1[v215];
              v217 = v216 + 1;
              if (v216 == -1 || v217 > *(_QWORD *)&a1[*v3])
                goto LABEL_567;
              v218 = *(char *)(*(_QWORD *)&a1[*v5] + v216);
              *(_QWORD *)&a1[v215] = v217;
              if (v218 < 0)
              {
                v32 = v214++ > 8;
                if (!v32)
                  continue;
              }
              goto LABEL_458;
            }
          case 9u:
            if ((v181 & 7) != 0)
              goto LABEL_2690;
            v219 = 0;
            while (1)
            {
              v220 = *v2;
              v221 = *(_QWORD *)&a1[v220];
              v222 = v221 + 1;
              if (v221 == -1 || v222 > *(_QWORD *)&a1[*v3])
                goto LABEL_567;
              v223 = *(char *)(*(_QWORD *)&a1[*v5] + v221);
              *(_QWORD *)&a1[v220] = v222;
              if (v223 < 0)
              {
                v32 = v219++ > 8;
                if (!v32)
                  continue;
              }
              goto LABEL_458;
            }
          case 0xAu:
            if ((v181 & 7) != 0)
              goto LABEL_2690;
            v224 = 0;
            while (1)
            {
              v225 = *v2;
              v226 = *(_QWORD *)&a1[v225];
              v227 = v226 + 1;
              if (v226 == -1 || v227 > *(_QWORD *)&a1[*v3])
                goto LABEL_567;
              v228 = *(char *)(*(_QWORD *)&a1[*v5] + v226);
              *(_QWORD *)&a1[v225] = v227;
              if (v228 < 0)
              {
                v32 = v224++ > 8;
                if (!v32)
                  continue;
              }
              goto LABEL_458;
            }
          case 0xBu:
            if (v187 != 2)
            {
              if ((v181 & 7) == 0)
              {
                while (1)
                {
                  v229 = *v2;
                  v230 = *(_QWORD *)&a1[v229];
                  v231 = v230 + 1;
                  if (v230 == -1 || v231 > *(_QWORD *)&a1[*v3])
                    goto LABEL_567;
                  v232 = *(char *)(*(_QWORD *)&a1[*v5] + v230);
                  *(_QWORD *)&a1[v229] = v231;
                  if (v232 < 0)
                  {
                    v233 = v187++;
                    if (v233 <= 8)
                      continue;
                  }
                  goto LABEL_458;
                }
              }
LABEL_2690:
              PBReaderRecallMark();
              goto LABEL_2687;
            }
            v1117 = 0;
            v1118 = 0;
            if (!PBReaderPlaceMark())
              goto LABEL_2690;
LABEL_569:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v244 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v245 = *v2;
                v246 = *(_QWORD *)&a1[v245];
                v247 = v246 + 1;
                if (v246 == -1 || v247 > *(_QWORD *)&a1[*v3])
                  break;
                v248 = *(char *)(*(_QWORD *)&a1[*v5] + v246);
                *(_QWORD *)&a1[v245] = v247;
                if (v248 < 0)
                {
                  v13 = v244++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_569;
              }
              a1[*v4] = 1;
            }
            break;
          case 0xCu:
            if (v187 != 2)
            {
              if ((v181 & 7) != 0)
                goto LABEL_2690;
              while (1)
              {
                v234 = *v2;
                v235 = *(_QWORD *)&a1[v234];
                v236 = v235 + 1;
                if (v235 == -1 || v236 > *(_QWORD *)&a1[*v3])
                  break;
                v237 = *(char *)(*(_QWORD *)&a1[*v5] + v235);
                *(_QWORD *)&a1[v234] = v236;
                if (v237 < 0)
                {
                  v238 = v187++;
                  if (v238 <= 8)
                    continue;
                }
                goto LABEL_458;
              }
LABEL_567:
              a1[*v4] = 1;
              goto LABEL_458;
            }
            v1117 = 0;
            v1118 = 0;
            if (!PBReaderPlaceMark())
              goto LABEL_2690;
LABEL_579:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v249 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v250 = *v2;
                v251 = *(_QWORD *)&a1[v250];
                v252 = v251 + 1;
                if (v251 == -1 || v252 > *(_QWORD *)&a1[*v3])
                  break;
                v253 = *(char *)(*(_QWORD *)&a1[*v5] + v251);
                *(_QWORD *)&a1[v250] = v252;
                if (v253 < 0)
                {
                  v13 = v249++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_579;
              }
              a1[*v4] = 1;
            }
            break;
          case 0xDu:
            if (v187 != 2)
            {
              if ((v181 & 7) != 0)
                goto LABEL_2690;
              while (1)
              {
                v239 = *v2;
                v240 = *(_QWORD *)&a1[v239];
                v241 = v240 + 1;
                if (v240 == -1 || v241 > *(_QWORD *)&a1[*v3])
                  goto LABEL_567;
                v242 = *(char *)(*(_QWORD *)&a1[*v5] + v240);
                *(_QWORD *)&a1[v239] = v241;
                if (v242 < 0)
                {
                  v243 = v187++;
                  if (v243 <= 8)
                    continue;
                }
                goto LABEL_458;
              }
            }
            v1117 = 0;
            v1118 = 0;
            if (!PBReaderPlaceMark())
              goto LABEL_2690;
LABEL_589:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v254 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v255 = *v2;
                v256 = *(_QWORD *)&a1[v255];
                v257 = v256 + 1;
                if (v256 == -1 || v257 > *(_QWORD *)&a1[*v3])
                  break;
                v258 = *(char *)(*(_QWORD *)&a1[*v5] + v256);
                *(_QWORD *)&a1[v255] = v257;
                if (v258 < 0)
                {
                  v13 = v254++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_589;
              }
              a1[*v4] = 1;
            }
            break;
          default:
LABEL_484:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2690;
            goto LABEL_458;
        }
        PBReaderRecallMark();
        goto LABEL_458;
      case 0xBu:
        if (v15 != 2)
          goto LABEL_2688;
        v1119 = 0;
        v1120 = 0;
        if (!PBReaderPlaceMark() || !GEOPDSearchBrowseCategorySuggestionResultIsValid(a1))
          goto LABEL_2688;
        goto LABEL_2603;
      case 0xCu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
LABEL_765:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_2602;
          v341 = 0;
          v342 = 0;
          v343 = 0;
          while (2)
          {
            v344 = *v2;
            v345 = *(_QWORD *)&a1[v344];
            v346 = v345 + 1;
            if (v345 == -1 || v346 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v347 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v345);
              *(_QWORD *)&a1[v344] = v346;
              v343 |= (unint64_t)(v347 & 0x7F) << v341;
              if (v347 < 0)
              {
                v341 += 7;
                v13 = v342++ >= 9;
                if (v13)
                {
                  v343 = 0;
                  v348 = a1[*v4];
                  goto LABEL_777;
                }
                continue;
              }
            }
            break;
          }
          v348 = a1[*v4];
          if (a1[*v4])
            v343 = 0;
LABEL_777:
          v349 = v343 & 7;
          if (v348)
            v350 = 1;
          else
            v350 = v349 == 4;
          if (!v350)
          {
            switch((v343 >> 3))
            {
              case 1u:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
                  goto LABEL_2687;
                goto LABEL_896;
              case 2u:
                if ((v343 & 7) != 0)
                  goto LABEL_2687;
                v351 = 0;
                while (1)
                {
                  v352 = *v2;
                  v353 = *(_QWORD *)&a1[v352];
                  v354 = v353 + 1;
                  if (v353 == -1 || v354 > *(_QWORD *)&a1[*v3])
                    goto LABEL_884;
                  v355 = *(char *)(*(_QWORD *)&a1[*v5] + v353);
                  *(_QWORD *)&a1[v352] = v354;
                  if (v355 < 0)
                  {
                    v32 = v351++ > 8;
                    if (!v32)
                      continue;
                  }
                  goto LABEL_765;
                }
              case 3u:
              case 5u:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDWarsawMerchantIdentifierIsValid(a1))
                  goto LABEL_2687;
                goto LABEL_896;
              case 4u:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDResultDetourInfoIsValid(a1))
                  goto LABEL_2687;
                goto LABEL_896;
              case 6u:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSearchClientBehaviorIsValid(a1))
                  goto LABEL_2687;
                goto LABEL_896;
              case 7u:
                if ((v343 & 7) != 0)
                  goto LABEL_2687;
                v356 = 0;
                while (1)
                {
                  v357 = *v2;
                  v358 = *(_QWORD *)&a1[v357];
                  v359 = v358 + 1;
                  if (v358 == -1 || v359 > *(_QWORD *)&a1[*v3])
                    goto LABEL_884;
                  v360 = *(char *)(*(_QWORD *)&a1[*v5] + v358);
                  *(_QWORD *)&a1[v357] = v359;
                  if (v360 < 0)
                  {
                    v32 = v356++ > 8;
                    if (!v32)
                      continue;
                  }
                  goto LABEL_765;
                }
              case 8u:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDBrowseCategoryIsValid(a1))
                  goto LABEL_2687;
                goto LABEL_896;
              case 9u:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSCategorySearchResultSectionIsValid(a1))
                  goto LABEL_2687;
                goto LABEL_896;
              case 0xAu:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDRelatedEntitySectionIsValid(a1))
                  goto LABEL_2687;
                goto LABEL_896;
              case 0xBu:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSSearchTierMetadataIsValid(a1))
                  goto LABEL_2687;
                goto LABEL_896;
              case 0xCu:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDResultRefinementGroupIsValid(a1))
                  goto LABEL_2687;
                goto LABEL_896;
              case 0xDu:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSSearchAutoRedoThresholdIsValid(a1))
                  goto LABEL_2687;
                goto LABEL_896;
              case 0xEu:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDPlaceSummaryLayoutMetadataIsValid(a1))
                  goto LABEL_2687;
                goto LABEL_896;
              case 0xFu:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSearchSectionListIsValid(a1))
                  goto LABEL_2687;
                goto LABEL_896;
              case 0x10u:
                if ((v343 & 7) != 0)
                  goto LABEL_2687;
                v361 = 0;
                while (1)
                {
                  v362 = *v2;
                  v363 = *(_QWORD *)&a1[v362];
                  v364 = v363 + 1;
                  if (v363 == -1 || v364 > *(_QWORD *)&a1[*v3])
                    goto LABEL_884;
                  v365 = *(char *)(*(_QWORD *)&a1[*v5] + v363);
                  *(_QWORD *)&a1[v362] = v364;
                  if (v365 < 0)
                  {
                    v32 = v361++ > 8;
                    if (!v32)
                      continue;
                  }
                  goto LABEL_765;
                }
              case 0x11u:
                if ((v343 & 7) != 0)
                  goto LABEL_2687;
                v366 = 0;
                while (1)
                {
                  v367 = *v2;
                  v368 = *(_QWORD *)&a1[v367];
                  v369 = v368 + 1;
                  if (v368 == -1 || v369 > *(_QWORD *)&a1[*v3])
                    goto LABEL_884;
                  v370 = *(char *)(*(_QWORD *)&a1[*v5] + v368);
                  *(_QWORD *)&a1[v367] = v369;
                  if (v370 < 0)
                  {
                    v32 = v366++ > 8;
                    if (!v32)
                      continue;
                  }
                  goto LABEL_765;
                }
              case 0x13u:
                if ((v343 & 7) != 0)
                  goto LABEL_2687;
                v371 = 0;
                while (1)
                {
                  v372 = *v2;
                  v373 = *(_QWORD *)&a1[v372];
                  v374 = v373 + 1;
                  if (v373 == -1 || v374 > *(_QWORD *)&a1[*v3])
                    goto LABEL_884;
                  v375 = *(char *)(*(_QWORD *)&a1[*v5] + v373);
                  *(_QWORD *)&a1[v372] = v374;
                  if (v375 < 0)
                  {
                    v32 = v371++ > 8;
                    if (!v32)
                      continue;
                  }
                  goto LABEL_765;
                }
              case 0x14u:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSSearchSessionDataIsValid((unsigned __int8 *)a1))
                  goto LABEL_2687;
                goto LABEL_896;
              case 0x15u:
                if ((v343 & 7) != 0)
                  goto LABEL_2687;
                v376 = 0;
                do
                {
                  v377 = *v2;
                  v378 = *(_QWORD *)&a1[v377];
                  v379 = v378 + 1;
                  if (v378 == -1 || v379 > *(_QWORD *)&a1[*v3])
                  {
LABEL_884:
                    a1[*v4] = 1;
                    goto LABEL_765;
                  }
                  v380 = *(char *)(*(_QWORD *)&a1[*v5] + v378);
                  *(_QWORD *)&a1[v377] = v379;
                  if ((v380 & 0x80000000) == 0)
                    break;
                  v32 = v376++ > 8;
                }
                while (!v32);
                break;
              case 0x16u:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDGuideSummaryLayoutMetadataIsValid(a1))
                  goto LABEL_2687;
                goto LABEL_896;
              case 0x17u:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDPaginationInfoIsValid(a1))
                  goto LABEL_2687;
                goto LABEL_896;
              case 0x18u:
                if (v349 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSSearchRedoButtonThresholdIsValid(a1))
                  goto LABEL_2687;
LABEL_896:
                PBReaderRecallMark();
                continue;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_2687;
                continue;
            }
            continue;
          }
          goto LABEL_2602;
        }
      case 0xDu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
LABEL_900:
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_2602;
            v381 = 0;
            v382 = 0;
            v383 = 0;
            while (1)
            {
              v384 = *v2;
              v385 = *(_QWORD *)&a1[v384];
              v386 = v385 + 1;
              if (v385 == -1 || v386 > *(_QWORD *)&a1[*v3])
                break;
              v387 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v385);
              *(_QWORD *)&a1[v384] = v386;
              v383 |= (unint64_t)(v387 & 0x7F) << v381;
              if ((v387 & 0x80) == 0)
                goto LABEL_910;
              v381 += 7;
              v13 = v382++ >= 9;
              if (v13)
              {
                v383 = 0;
                v388 = a1[*v4];
                goto LABEL_912;
              }
            }
            a1[*v4] = 1;
LABEL_910:
            v388 = a1[*v4];
            if (a1[*v4])
              v383 = 0;
LABEL_912:
            v389 = v383 & 7;
            if (v388 || v389 == 4)
              goto LABEL_2602;
            v391 = v383 >> 3;
            if ((v383 >> 3) != 3)
            {
              if ((_DWORD)v391 == 2)
              {
                if (v389 != 2)
                  goto LABEL_2687;
              }
              else if ((_DWORD)v391 == 1)
              {
                if (v389 == 2)
                {
                  v1117 = 0;
                  v1118 = 0;
                  if (PBReaderPlaceMark())
                  {
                    if (GEOMapRegionIsValid(a1))
                    {
                      PBReaderRecallMark();
                      continue;
                    }
                  }
                }
                goto LABEL_2687;
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
            }
            break;
          }
          if ((v383 & 7) == 0)
          {
            v392 = 0;
            do
            {
              v393 = *v2;
              v394 = *(_QWORD *)&a1[v393];
              v395 = v394 + 1;
              if (v394 == -1 || v395 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_900;
              }
              v396 = *(char *)(*(_QWORD *)&a1[*v5] + v394);
              *(_QWORD *)&a1[v393] = v395;
              if ((v396 & 0x80000000) == 0)
                break;
              v32 = v392++ > 8;
            }
            while (!v32);
            continue;
          }
          goto LABEL_2687;
        }
      case 0xEu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_938:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_2248;
          v397 = 0;
          v398 = 0;
          v399 = 0;
          while (2)
          {
            v400 = *v2;
            v401 = *(_QWORD *)&a1[v400];
            v402 = v401 + 1;
            if (v401 == -1 || v402 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v403 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v401);
              *(_QWORD *)&a1[v400] = v402;
              v399 |= (unint64_t)(v403 & 0x7F) << v397;
              if (v403 < 0)
              {
                v397 += 7;
                v13 = v398++ >= 9;
                if (v13)
                {
                  v399 = 0;
                  v404 = a1[*v4];
                  goto LABEL_950;
                }
                continue;
              }
            }
            break;
          }
          v404 = a1[*v4];
          if (a1[*v4])
            v399 = 0;
LABEL_950:
          v405 = v399 & 7;
          if (v404)
            v406 = 1;
          else
            v406 = v405 == 4;
          if (v406)
            goto LABEL_2248;
          if ((v399 >> 3) != 2)
          {
            if ((v399 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
            }
            if (v405 == 2)
            {
              v1119 = 0;
              v1120 = 0;
              if (PBReaderPlaceMark())
              {
                if (GEOPDBrowseCategoryIsValid(a1))
                  goto LABEL_1022;
              }
            }
            goto LABEL_2687;
          }
          break;
        }
        if (v405 != 2 || !PBReaderPlaceMark())
          goto LABEL_2687;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (1)
        {
          while (1)
          {
LABEL_963:
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_1021;
            v407 = 0;
            v408 = 0;
            v409 = 0;
            while (1)
            {
              v410 = *v2;
              v411 = *(_QWORD *)&a1[v410];
              v412 = v411 + 1;
              if (v411 == -1 || v412 > *(_QWORD *)&a1[*v3])
                break;
              v413 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v411);
              *(_QWORD *)&a1[v410] = v412;
              v409 |= (unint64_t)(v413 & 0x7F) << v407;
              if ((v413 & 0x80) == 0)
                goto LABEL_973;
              v407 += 7;
              v13 = v408++ >= 9;
              if (v13)
              {
                v409 = 0;
                v414 = a1[*v4];
                goto LABEL_975;
              }
            }
            a1[*v4] = 1;
LABEL_973:
            v414 = a1[*v4];
            if (a1[*v4])
              v409 = 0;
LABEL_975:
            v415 = v409 & 7;
            if (v414 || v415 == 4)
            {
LABEL_1021:
              v438 = a1[*v4];
              PBReaderRecallMark();
              if (!v438)
              {
LABEL_1022:
                PBReaderRecallMark();
                goto LABEL_938;
              }
              goto LABEL_2687;
            }
            v417 = v409 >> 3;
            if ((v409 >> 3) == 3)
              break;
            if ((_DWORD)v417 == 2)
            {
              if ((v409 & 7) != 0)
                goto LABEL_2690;
              v428 = 0;
              while (1)
              {
                v429 = *v2;
                v430 = *(_QWORD *)&a1[v429];
                v431 = v430 + 1;
                if (v430 == -1 || v431 > *(_QWORD *)&a1[*v3])
                  break;
                v432 = *(char *)(*(_QWORD *)&a1[*v5] + v430);
                *(_QWORD *)&a1[v429] = v431;
                if (v432 < 0)
                {
                  v32 = v428++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_963;
              }
LABEL_1005:
              a1[*v4] = 1;
            }
            else
            {
              if ((_DWORD)v417 == 1)
              {
                if ((v409 & 7) != 0)
                  goto LABEL_2690;
                v418 = 0;
                while (1)
                {
                  v419 = *v2;
                  v420 = *(_QWORD *)&a1[v419];
                  v421 = v420 + 1;
                  if (v420 == -1 || v421 > *(_QWORD *)&a1[*v3])
                    goto LABEL_1005;
                  v422 = *(char *)(*(_QWORD *)&a1[*v5] + v420);
                  *(_QWORD *)&a1[v419] = v421;
                  if (v422 < 0)
                  {
                    v32 = v418++ > 8;
                    if (!v32)
                      continue;
                  }
                  goto LABEL_963;
                }
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2690;
            }
          }
          if (v415 != 2)
          {
            if ((v409 & 7) != 0)
              goto LABEL_2690;
            while (1)
            {
              v423 = *v2;
              v424 = *(_QWORD *)&a1[v423];
              v425 = v424 + 1;
              if (v424 == -1 || v425 > *(_QWORD *)&a1[*v3])
                goto LABEL_1005;
              v426 = *(char *)(*(_QWORD *)&a1[*v5] + v424);
              *(_QWORD *)&a1[v423] = v425;
              if (v426 < 0)
              {
                v427 = v415++;
                if (v427 <= 8)
                  continue;
              }
              goto LABEL_963;
            }
          }
          v1117 = 0;
          v1118 = 0;
          if (!PBReaderPlaceMark())
            goto LABEL_2690;
LABEL_1009:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v433 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v434 = *v2;
              v435 = *(_QWORD *)&a1[v434];
              v436 = v435 + 1;
              if (v435 == -1 || v436 > *(_QWORD *)&a1[*v3])
                break;
              v437 = *(char *)(*(_QWORD *)&a1[*v5] + v435);
              *(_QWORD *)&a1[v434] = v436;
              if (v437 < 0)
              {
                v13 = v433++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_1009;
            }
            a1[*v4] = 1;
          }
          PBReaderRecallMark();
        }
      case 0xFu:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v439 = 0;
          v440 = 0;
          v441 = 0;
          while (1)
          {
            v442 = *v2;
            v443 = *(_QWORD *)&a1[v442];
            v444 = v443 + 1;
            if (v443 == -1 || v444 > *(_QWORD *)&a1[*v3])
              break;
            v445 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v443);
            *(_QWORD *)&a1[v442] = v444;
            v441 |= (unint64_t)(v445 & 0x7F) << v439;
            if ((v445 & 0x80) == 0)
              goto LABEL_1036;
            v439 += 7;
            v13 = v440++ >= 9;
            if (v13)
            {
              v441 = 0;
              v446 = a1[*v4];
              goto LABEL_1038;
            }
          }
          a1[*v4] = 1;
LABEL_1036:
          v446 = a1[*v4];
          if (a1[*v4])
            v441 = 0;
LABEL_1038:
          v447 = v441 & 7;
          if (v446 || v447 == 4)
            break;
          if ((v441 >> 3) != 1)
          {
            if (!PBReaderSkipValueWithTag())
              goto LABEL_2687;
            continue;
          }
          if (v447 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_2687;
        }
        goto LABEL_2292;
      case 0x10u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1051:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_2165;
          v449 = 0;
          v450 = 0;
          v451 = 0;
          while (2)
          {
            v452 = *v2;
            v453 = *(_QWORD *)&a1[v452];
            v454 = v453 + 1;
            if (v453 == -1 || v454 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v455 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v453);
              *(_QWORD *)&a1[v452] = v454;
              v451 |= (unint64_t)(v455 & 0x7F) << v449;
              if (v455 < 0)
              {
                v449 += 7;
                v13 = v450++ >= 9;
                if (v13)
                {
                  v451 = 0;
                  v456 = a1[*v4];
                  goto LABEL_1063;
                }
                continue;
              }
            }
            break;
          }
          v456 = a1[*v4];
          if (a1[*v4])
            v451 = 0;
LABEL_1063:
          v457 = v451 & 7;
          if (v456)
            v458 = 1;
          else
            v458 = v457 == 4;
          if (v458)
            goto LABEL_2165;
          if ((v451 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          break;
        }
        if (v457 != 2 || !PBReaderPlaceMark())
          goto LABEL_2687;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        do
        {
          while (1)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_1099;
            v459 = 0;
            v460 = 0;
            v461 = 0;
            while (1)
            {
              v462 = *v2;
              v463 = *(_QWORD *)&a1[v462];
              v464 = v463 + 1;
              if (v463 == -1 || v464 > *(_QWORD *)&a1[*v3])
                break;
              v465 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v463);
              *(_QWORD *)&a1[v462] = v464;
              v461 |= (unint64_t)(v465 & 0x7F) << v459;
              if ((v465 & 0x80) == 0)
                goto LABEL_1081;
              v459 += 7;
              v13 = v460++ >= 9;
              if (v13)
              {
                v461 = 0;
                v466 = a1[*v4];
                goto LABEL_1083;
              }
            }
            a1[*v4] = 1;
LABEL_1081:
            v466 = a1[*v4];
            if (a1[*v4])
              v461 = 0;
LABEL_1083:
            v467 = v461 & 7;
            if (v466 || v467 == 4)
            {
LABEL_1099:
              v470 = a1[*v4];
              PBReaderRecallMark();
              if (!v470)
              {
                PBReaderRecallMark();
                goto LABEL_1051;
              }
              goto LABEL_2687;
            }
            if ((v461 >> 3) != 3)
              break;
            if (v467 != 2)
              goto LABEL_2693;
            if (!PBReaderPlaceMark())
              goto LABEL_2693;
            v1119 = objc_msgSend(a1, "position");
            v1120 = objc_msgSend(a1, "length");
            v1117 = 0;
            v1118 = 0;
            AllFrom = GEOPDLitePlaceResultReadAllFrom((uint64_t)&v1117, (uint64_t)a1);
            PBReaderRecallMark();
            if (!AllFrom)
              goto LABEL_2693;
            PBReaderRecallMark();
          }
        }
        while (((v461 >> 3) != 1 || v467 == 2) && (PBReaderSkipValueWithTag() & 1) != 0);
        goto LABEL_2693;
      case 0x11u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v471 = 0;
          v472 = 0;
          v473 = 0;
          while (2)
          {
            v474 = *v2;
            v475 = *(_QWORD *)&a1[v474];
            v476 = v475 + 1;
            if (v475 == -1 || v476 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v477 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v475);
              *(_QWORD *)&a1[v474] = v476;
              v473 |= (unint64_t)(v477 & 0x7F) << v471;
              if (v477 < 0)
              {
                v471 += 7;
                v13 = v472++ >= 9;
                if (v13)
                {
                  LOBYTE(v473) = 0;
                  v105 = a1[*v4];
                  goto LABEL_1116;
                }
                continue;
              }
            }
            break;
          }
          v478 = *v4;
          v105 = a1[v478];
          if (a1[v478])
            LOBYTE(v473) = 0;
LABEL_1116:
          if (v105)
            v479 = 1;
          else
            v479 = (v473 & 7) == 4;
          if (!v479)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          goto LABEL_2293;
        }
      case 0x12u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v480 = 0;
          v481 = 0;
          v482 = 0;
          while (2)
          {
            v483 = *v2;
            v484 = *(_QWORD *)&a1[v483];
            v485 = v484 + 1;
            if (v484 == -1 || v485 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v486 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v484);
              *(_QWORD *)&a1[v483] = v485;
              v482 |= (unint64_t)(v486 & 0x7F) << v480;
              if (v486 < 0)
              {
                v480 += 7;
                v13 = v481++ >= 9;
                if (v13)
                {
                  LOBYTE(v482) = 0;
                  v105 = a1[*v4];
                  goto LABEL_1137;
                }
                continue;
              }
            }
            break;
          }
          v487 = *v4;
          v105 = a1[v487];
          if (a1[v487])
            LOBYTE(v482) = 0;
LABEL_1137:
          if (v105)
            v488 = 1;
          else
            v488 = (v482 & 7) == 4;
          if (!v488)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          goto LABEL_2293;
        }
      case 0x13u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_2602;
            v489 = 0;
            v490 = 0;
            v491 = 0;
            while (2)
            {
              v492 = *v2;
              v493 = *(_QWORD *)&a1[v492];
              v494 = v493 + 1;
              if (v493 == -1 || v494 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v495 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v493);
                *(_QWORD *)&a1[v492] = v494;
                v491 |= (unint64_t)(v495 & 0x7F) << v489;
                if (v495 < 0)
                {
                  v489 += 7;
                  v13 = v490++ >= 9;
                  if (v13)
                  {
                    v491 = 0;
                    v496 = a1[*v4];
                    goto LABEL_1158;
                  }
                  continue;
                }
              }
              break;
            }
            v496 = a1[*v4];
            if (a1[*v4])
              v491 = 0;
LABEL_1158:
            v497 = v491 & 7;
            if (v496)
              v498 = 1;
            else
              v498 = v497 == 4;
            if (v498)
              goto LABEL_2602;
            if ((v491 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
            }
            break;
          }
          if (v497 == 2)
          {
            v1117 = 0;
            v1118 = 0;
            if (PBReaderPlaceMark())
            {
              if (GEOPDMultiLocalizedStringIsValid(a1))
              {
                PBReaderRecallMark();
                continue;
              }
            }
          }
          goto LABEL_2687;
        }
      case 0x14u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1172:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_2248;
          v499 = 0;
          v500 = 0;
          v501 = 0;
          while (2)
          {
            v502 = *v2;
            v503 = *(_QWORD *)&a1[v502];
            v504 = v503 + 1;
            if (v503 == -1 || v504 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v505 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v503);
              *(_QWORD *)&a1[v502] = v504;
              v501 |= (unint64_t)(v505 & 0x7F) << v499;
              if (v505 < 0)
              {
                v499 += 7;
                v13 = v500++ >= 9;
                if (v13)
                {
                  v501 = 0;
                  v506 = a1[*v4];
                  goto LABEL_1184;
                }
                continue;
              }
            }
            break;
          }
          v506 = a1[*v4];
          if (a1[*v4])
            v501 = 0;
LABEL_1184:
          v507 = v501 & 7;
          if (v506)
            v508 = 1;
          else
            v508 = v507 == 4;
          if (v508)
            goto LABEL_2248;
          if ((v501 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          break;
        }
        if (v507 != 2 || !PBReaderPlaceMark())
          goto LABEL_2687;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (1)
        {
          while (1)
          {
LABEL_1192:
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_1236;
            v509 = 0;
            v510 = 0;
            v511 = 0;
            while (1)
            {
              v512 = *v2;
              v513 = *(_QWORD *)&a1[v512];
              v514 = v513 + 1;
              if (v513 == -1 || v514 > *(_QWORD *)&a1[*v3])
                break;
              v515 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v513);
              *(_QWORD *)&a1[v512] = v514;
              v511 |= (unint64_t)(v515 & 0x7F) << v509;
              if ((v515 & 0x80) == 0)
                goto LABEL_1202;
              v509 += 7;
              v13 = v510++ >= 9;
              if (v13)
              {
                v511 = 0;
                v516 = a1[*v4];
                goto LABEL_1204;
              }
            }
            a1[*v4] = 1;
LABEL_1202:
            v516 = a1[*v4];
            if (a1[*v4])
              v511 = 0;
LABEL_1204:
            v517 = v511 & 7;
            if (v516 || v517 == 4)
            {
LABEL_1236:
              v529 = a1[*v4];
              PBReaderRecallMark();
              if (!v529)
              {
                PBReaderRecallMark();
                goto LABEL_1172;
              }
              goto LABEL_2687;
            }
            if ((v511 >> 3) == 2)
              break;
            if ((v511 >> 3) == 1)
            {
              if (v517 != 2)
                goto LABEL_2690;
              v1117 = 0;
              v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDBrowseCategoryIsValid(a1))
                goto LABEL_2690;
LABEL_1213:
              PBReaderRecallMark();
            }
            else if ((PBReaderSkipValueWithTag() & 1) == 0)
            {
              goto LABEL_2690;
            }
          }
          if (v517 == 2)
          {
            v1117 = 0;
            v1118 = 0;
            if (!PBReaderPlaceMark())
              goto LABEL_2690;
LABEL_1224:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v524 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v525 = *v2;
                v526 = *(_QWORD *)&a1[v525];
                v527 = v526 + 1;
                if (v526 == -1 || v527 > *(_QWORD *)&a1[*v3])
                  break;
                v528 = *(char *)(*(_QWORD *)&a1[*v5] + v526);
                *(_QWORD *)&a1[v525] = v527;
                if (v528 < 0)
                {
                  v13 = v524++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_1224;
              }
              a1[*v4] = 1;
            }
            goto LABEL_1213;
          }
          if ((v511 & 7) != 0)
            goto LABEL_2690;
          while (1)
          {
            v519 = *v2;
            v520 = *(_QWORD *)&a1[v519];
            v521 = v520 + 1;
            if (v520 == -1 || v521 > *(_QWORD *)&a1[*v3])
              break;
            v522 = *(char *)(*(_QWORD *)&a1[*v5] + v520);
            *(_QWORD *)&a1[v519] = v521;
            if (v522 < 0)
            {
              v523 = v517++;
              if (v523 <= 8)
                continue;
            }
            goto LABEL_1192;
          }
          a1[*v4] = 1;
        }
      case 0x15u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v530 = 0;
          v531 = 0;
          v532 = 0;
          while (1)
          {
            v533 = *v2;
            v534 = *(_QWORD *)&a1[v533];
            v535 = v534 + 1;
            if (v534 == -1 || v535 > *(_QWORD *)&a1[*v3])
              break;
            v536 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v534);
            *(_QWORD *)&a1[v533] = v535;
            v532 |= (unint64_t)(v536 & 0x7F) << v530;
            if ((v536 & 0x80) == 0)
              goto LABEL_1251;
            v530 += 7;
            v13 = v531++ >= 9;
            if (v13)
            {
              v532 = 0;
              v537 = a1[*v4];
              goto LABEL_1253;
            }
          }
          a1[*v4] = 1;
LABEL_1251:
          v537 = a1[*v4];
          if (a1[*v4])
            v532 = 0;
LABEL_1253:
          v538 = v532 & 7;
          if (v537 || v538 == 4)
            break;
          if ((v532 >> 3) != 1)
          {
            if (!PBReaderSkipValueWithTag())
              goto LABEL_2687;
            continue;
          }
          if (v538 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_2687;
        }
        goto LABEL_2292;
      case 0x16u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v540 = 0;
          v541 = 0;
          v542 = 0;
          while (2)
          {
            v543 = *v2;
            v544 = *(_QWORD *)&a1[v543];
            v545 = v544 + 1;
            if (v544 == -1 || v545 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v546 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v544);
              *(_QWORD *)&a1[v543] = v545;
              v542 |= (unint64_t)(v546 & 0x7F) << v540;
              if (v546 < 0)
              {
                v540 += 7;
                v13 = v541++ >= 9;
                if (v13)
                {
                  LOBYTE(v542) = 0;
                  v105 = a1[*v4];
                  goto LABEL_1278;
                }
                continue;
              }
            }
            break;
          }
          v547 = *v4;
          v105 = a1[v547];
          if (a1[v547])
            LOBYTE(v542) = 0;
LABEL_1278:
          if (v105)
            v548 = 1;
          else
            v548 = (v542 & 7) == 4;
          if (!v548)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          goto LABEL_2293;
        }
      case 0x17u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v549 = 0;
          v550 = 0;
          v551 = 0;
          while (2)
          {
            v552 = *v2;
            v553 = *(_QWORD *)&a1[v552];
            v554 = v553 + 1;
            if (v553 == -1 || v554 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v555 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v553);
              *(_QWORD *)&a1[v552] = v554;
              v551 |= (unint64_t)(v555 & 0x7F) << v549;
              if (v555 < 0)
              {
                v549 += 7;
                v13 = v550++ >= 9;
                if (v13)
                {
                  LOBYTE(v551) = 0;
                  v105 = a1[*v4];
                  goto LABEL_1299;
                }
                continue;
              }
            }
            break;
          }
          v556 = *v4;
          v105 = a1[v556];
          if (a1[v556])
            LOBYTE(v551) = 0;
LABEL_1299:
          if (v105)
            v557 = 1;
          else
            v557 = (v551 & 7) == 4;
          if (!v557)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          goto LABEL_2293;
        }
      case 0x19u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v558 = 0;
          v559 = 0;
          v560 = 0;
          while (2)
          {
            v561 = *v2;
            v562 = *(_QWORD *)&a1[v561];
            v563 = v562 + 1;
            if (v562 == -1 || v563 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v564 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v562);
              *(_QWORD *)&a1[v561] = v563;
              v560 |= (unint64_t)(v564 & 0x7F) << v558;
              if (v564 < 0)
              {
                v558 += 7;
                v13 = v559++ >= 9;
                if (v13)
                {
                  LOBYTE(v560) = 0;
                  v105 = a1[*v4];
                  goto LABEL_1322;
                }
                continue;
              }
            }
            break;
          }
          v565 = *v4;
          v105 = a1[v565];
          if (a1[v565])
            LOBYTE(v560) = 0;
LABEL_1322:
          if (v105)
            v566 = 1;
          else
            v566 = (v560 & 7) == 4;
          if (!v566)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          goto LABEL_2293;
        }
      case 0x1Eu:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v567 = 0;
          v568 = 0;
          v569 = 0;
          while (2)
          {
            v570 = *v2;
            v571 = *(_QWORD *)&a1[v570];
            v572 = v571 + 1;
            if (v571 == -1 || v572 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v573 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v571);
              *(_QWORD *)&a1[v570] = v572;
              v569 |= (unint64_t)(v573 & 0x7F) << v567;
              if (v573 < 0)
              {
                v567 += 7;
                v13 = v568++ >= 9;
                if (v13)
                {
                  LOBYTE(v569) = 0;
                  v105 = a1[*v4];
                  goto LABEL_1343;
                }
                continue;
              }
            }
            break;
          }
          v574 = *v4;
          v105 = a1[v574];
          if (a1[v574])
            LOBYTE(v569) = 0;
LABEL_1343:
          if (v105)
            v575 = 1;
          else
            v575 = (v569 & 7) == 4;
          if (!v575)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          goto LABEL_2293;
        }
      case 0x20u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v576 = 0;
          v577 = 0;
          v578 = 0;
          while (2)
          {
            v579 = *v2;
            v580 = *(_QWORD *)&a1[v579];
            v581 = v580 + 1;
            if (v580 == -1 || v581 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v582 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v580);
              *(_QWORD *)&a1[v579] = v581;
              v578 |= (unint64_t)(v582 & 0x7F) << v576;
              if (v582 < 0)
              {
                v576 += 7;
                v13 = v577++ >= 9;
                if (v13)
                {
                  LOBYTE(v578) = 0;
                  v105 = a1[*v4];
                  goto LABEL_1364;
                }
                continue;
              }
            }
            break;
          }
          v583 = *v4;
          v105 = a1[v583];
          if (a1[v583])
            LOBYTE(v578) = 0;
LABEL_1364:
          if (v105)
            v584 = 1;
          else
            v584 = (v578 & 7) == 4;
          if (!v584)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          goto LABEL_2293;
        }
      case 0x22u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
LABEL_1373:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_2602;
          v585 = 0;
          v586 = 0;
          v587 = 0;
          while (2)
          {
            v588 = *v2;
            v589 = *(_QWORD *)&a1[v588];
            v590 = v589 + 1;
            if (v589 == -1 || v590 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v591 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v589);
              *(_QWORD *)&a1[v588] = v590;
              v587 |= (unint64_t)(v591 & 0x7F) << v585;
              if (v591 < 0)
              {
                v585 += 7;
                v13 = v586++ >= 9;
                if (v13)
                {
                  v587 = 0;
                  v592 = a1[*v4];
                  goto LABEL_1385;
                }
                continue;
              }
            }
            break;
          }
          v592 = a1[*v4];
          if (a1[*v4])
            v587 = 0;
LABEL_1385:
          v593 = v587 & 7;
          if (v592)
            v594 = 1;
          else
            v594 = v593 == 4;
          if (!v594)
          {
            switch((v587 >> 3))
            {
              case 1u:
                if ((v587 & 7) != 0)
                  goto LABEL_2687;
                v595 = 0;
                break;
              case 2u:
                if (v593 == 2)
                  goto LABEL_1407;
                goto LABEL_2687;
              case 3u:
                if (v593 != 2)
                  goto LABEL_2687;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
                  goto LABEL_2687;
                PBReaderRecallMark();
                continue;
              case 4u:
                if (v593 == 2)
                  goto LABEL_1407;
                goto LABEL_2687;
              case 5u:
                if (v593 == 2)
                  goto LABEL_1407;
                goto LABEL_2687;
              default:
LABEL_1407:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_2687;
                continue;
            }
            do
            {
              v596 = *v2;
              v597 = *(_QWORD *)&a1[v596];
              v598 = v597 + 1;
              if (v597 == -1 || v598 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_1373;
              }
              v599 = *(char *)(*(_QWORD *)&a1[*v5] + v597);
              *(_QWORD *)&a1[v596] = v598;
              if ((v599 & 0x80000000) == 0)
                break;
              v32 = v595++ > 8;
            }
            while (!v32);
            continue;
          }
          goto LABEL_2602;
        }
      case 0x23u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v600 = 0;
          v601 = 0;
          v602 = 0;
          while (2)
          {
            v603 = *v2;
            v604 = *(_QWORD *)&a1[v603];
            v605 = v604 + 1;
            if (v604 == -1 || v605 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v606 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v604);
              *(_QWORD *)&a1[v603] = v605;
              v602 |= (unint64_t)(v606 & 0x7F) << v600;
              if (v606 < 0)
              {
                v600 += 7;
                v13 = v601++ >= 9;
                if (v13)
                {
                  LOBYTE(v602) = 0;
                  v105 = a1[*v4];
                  goto LABEL_1425;
                }
                continue;
              }
            }
            break;
          }
          v607 = *v4;
          v105 = a1[v607];
          if (a1[v607])
            LOBYTE(v602) = 0;
LABEL_1425:
          if (v105)
            v608 = 1;
          else
            v608 = (v602 & 7) == 4;
          if (!v608)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          goto LABEL_2293;
        }
      case 0x24u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1434:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_2248;
          v609 = 0;
          v610 = 0;
          v611 = 0;
          while (2)
          {
            v612 = *v2;
            v613 = *(_QWORD *)&a1[v612];
            v614 = v613 + 1;
            if (v613 == -1 || v614 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v615 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v613);
              *(_QWORD *)&a1[v612] = v614;
              v611 |= (unint64_t)(v615 & 0x7F) << v609;
              if (v615 < 0)
              {
                v609 += 7;
                v13 = v610++ >= 9;
                if (v13)
                {
                  v611 = 0;
                  v616 = a1[*v4];
                  goto LABEL_1446;
                }
                continue;
              }
            }
            break;
          }
          v616 = a1[*v4];
          if (a1[*v4])
            v611 = 0;
LABEL_1446:
          v617 = v611 & 7;
          if (v616)
            v618 = 1;
          else
            v618 = v617 == 4;
          if (v618)
            goto LABEL_2248;
          v619 = v611 >> 3;
          if ((v611 >> 3) != 3)
          {
            if ((_DWORD)v619 != 2)
            {
              if ((_DWORD)v619 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_2687;
                continue;
              }
              if ((v611 & 7) == 0)
              {
                v620 = 0;
                do
                {
                  v621 = *v2;
                  v622 = *(_QWORD *)&a1[v621];
                  v623 = v622 + 1;
                  if (v622 == -1 || v623 > *(_QWORD *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_1434;
                  }
                  v624 = *(char *)(*(_QWORD *)&a1[*v5] + v622);
                  *(_QWORD *)&a1[v621] = v623;
                  if ((v624 & 0x80000000) == 0)
                    break;
                  v32 = v620++ > 8;
                }
                while (!v32);
                continue;
              }
              goto LABEL_2687;
            }
            if (v617 != 2 || !PBReaderPlaceMark())
              goto LABEL_2687;
            v1119 = objc_msgSend(a1, "position");
            v1120 = objc_msgSend(a1, "length");
            while (1)
            {
              while (1)
              {
LABEL_1505:
                if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                  goto LABEL_1543;
                v641 = 0;
                v642 = 0;
                v643 = 0;
                while (1)
                {
                  v644 = *v2;
                  v645 = *(_QWORD *)&a1[v644];
                  v646 = v645 + 1;
                  if (v645 == -1 || v646 > *(_QWORD *)&a1[*v3])
                    break;
                  v647 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v645);
                  *(_QWORD *)&a1[v644] = v646;
                  v643 |= (unint64_t)(v647 & 0x7F) << v641;
                  if ((v647 & 0x80) == 0)
                    goto LABEL_1515;
                  v641 += 7;
                  v13 = v642++ >= 9;
                  if (v13)
                  {
                    v643 = 0;
                    v648 = a1[*v4];
                    goto LABEL_1517;
                  }
                }
                a1[*v4] = 1;
LABEL_1515:
                v648 = a1[*v4];
                if (a1[*v4])
                  v643 = 0;
LABEL_1517:
                v649 = v643 & 7;
                if (v648 || v649 == 4)
                  goto LABEL_1543;
                v651 = v643 >> 3;
                if ((v643 >> 3) != 3)
                  break;
                if (v649 != 2)
                  goto LABEL_2690;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
                  goto LABEL_2690;
LABEL_1539:
                PBReaderRecallMark();
              }
              if ((_DWORD)v651 == 2)
              {
                if (v649 != 2)
                  goto LABEL_2690;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSpatialPlaceLookupResponseIsValid(a1))
                  goto LABEL_2690;
                goto LABEL_1539;
              }
              if ((_DWORD)v651 == 1)
              {
                if ((v643 & 7) != 0)
                  goto LABEL_2690;
                v652 = 0;
                while (1)
                {
                  v653 = *v2;
                  v654 = *(_QWORD *)&a1[v653];
                  v655 = v654 + 1;
                  if (v654 == -1 || v655 > *(_QWORD *)&a1[*v3])
                    break;
                  v656 = *(char *)(*(_QWORD *)&a1[*v5] + v654);
                  *(_QWORD *)&a1[v653] = v655;
                  if (v656 < 0)
                  {
                    v32 = v652++ > 8;
                    if (!v32)
                      continue;
                  }
                  goto LABEL_1505;
                }
                a1[*v4] = 1;
              }
              else if ((PBReaderSkipValueWithTag() & 1) == 0)
              {
                goto LABEL_2690;
              }
            }
          }
          break;
        }
        if (v617 != 2 || !PBReaderPlaceMark())
          goto LABEL_2687;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (1)
        {
          while (1)
          {
LABEL_1464:
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_1543;
            v625 = 0;
            v626 = 0;
            v627 = 0;
            while (1)
            {
              v628 = *v2;
              v629 = *(_QWORD *)&a1[v628];
              v630 = v629 + 1;
              if (v629 == -1 || v630 > *(_QWORD *)&a1[*v3])
                break;
              v631 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v629);
              *(_QWORD *)&a1[v628] = v630;
              v627 |= (unint64_t)(v631 & 0x7F) << v625;
              if ((v631 & 0x80) == 0)
                goto LABEL_1474;
              v625 += 7;
              v13 = v626++ >= 9;
              if (v13)
              {
                v627 = 0;
                v632 = a1[*v4];
                goto LABEL_1476;
              }
            }
            a1[*v4] = 1;
LABEL_1474:
            v632 = a1[*v4];
            if (a1[*v4])
              v627 = 0;
LABEL_1476:
            v633 = v627 & 7;
            if (v632 || v633 == 4)
            {
LABEL_1543:
              v657 = a1[*v4];
              PBReaderRecallMark();
              if (!v657)
              {
                PBReaderRecallMark();
                goto LABEL_1434;
              }
              goto LABEL_2687;
            }
            v635 = v627 >> 3;
            if ((v627 >> 3) != 3)
              break;
            if (v633 != 2)
              goto LABEL_2690;
            v1117 = 0;
            v1118 = 0;
            if (!PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
              goto LABEL_2690;
LABEL_1498:
            PBReaderRecallMark();
          }
          if ((_DWORD)v635 == 2)
          {
            if (v633 != 2)
              goto LABEL_2690;
            v1117 = 0;
            v1118 = 0;
            if (!PBReaderPlaceMark() || !GEOPDSpatialEventLookupResponseIsValid(a1))
              goto LABEL_2690;
            goto LABEL_1498;
          }
          if ((_DWORD)v635 == 1)
          {
            if ((v627 & 7) != 0)
              goto LABEL_2690;
            v636 = 0;
            while (1)
            {
              v637 = *v2;
              v638 = *(_QWORD *)&a1[v637];
              v639 = v638 + 1;
              if (v638 == -1 || v639 > *(_QWORD *)&a1[*v3])
                break;
              v640 = *(char *)(*(_QWORD *)&a1[*v5] + v638);
              *(_QWORD *)&a1[v637] = v639;
              if (v640 < 0)
              {
                v32 = v636++ > 8;
                if (!v32)
                  continue;
              }
              goto LABEL_1464;
            }
            a1[*v4] = 1;
          }
          else if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
            goto LABEL_2690;
          }
        }
      case 0x25u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_2602;
            v658 = 0;
            v659 = 0;
            v660 = 0;
            while (2)
            {
              v661 = *v2;
              v662 = *(_QWORD *)&a1[v661];
              v663 = v662 + 1;
              if (v662 == -1 || v663 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v664 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v662);
                *(_QWORD *)&a1[v661] = v663;
                v660 |= (unint64_t)(v664 & 0x7F) << v658;
                if (v664 < 0)
                {
                  v658 += 7;
                  v13 = v659++ >= 9;
                  if (v13)
                  {
                    v660 = 0;
                    v665 = a1[*v4];
                    goto LABEL_1563;
                  }
                  continue;
                }
              }
              break;
            }
            v665 = a1[*v4];
            if (a1[*v4])
              v660 = 0;
LABEL_1563:
            v666 = v660 & 7;
            if (v665)
              v667 = 1;
            else
              v667 = v666 == 4;
            if (v667)
              goto LABEL_2602;
            if ((v660 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
            }
            break;
          }
          if (v666 == 2)
          {
            v1117 = 0;
            v1118 = 0;
            if (PBReaderPlaceMark())
            {
              if (GEOPDPlaceContextMetadataIsValid(a1))
              {
                PBReaderRecallMark();
                continue;
              }
            }
          }
          goto LABEL_2687;
        }
      case 0x26u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_2602;
            v668 = 0;
            v669 = 0;
            v670 = 0;
            while (2)
            {
              v671 = *v2;
              v672 = *(_QWORD *)&a1[v671];
              v673 = v672 + 1;
              if (v672 == -1 || v673 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v674 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v672);
                *(_QWORD *)&a1[v671] = v673;
                v670 |= (unint64_t)(v674 & 0x7F) << v668;
                if (v674 < 0)
                {
                  v668 += 7;
                  v13 = v669++ >= 9;
                  if (v13)
                  {
                    v670 = 0;
                    v675 = a1[*v4];
                    goto LABEL_1589;
                  }
                  continue;
                }
              }
              break;
            }
            v675 = a1[*v4];
            if (a1[*v4])
              v670 = 0;
LABEL_1589:
            v676 = v670 & 7;
            if (v675)
              v677 = 1;
            else
              v677 = v676 == 4;
            if (v677)
              goto LABEL_2602;
            if ((v670 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
            }
            break;
          }
          if (v676 == 2)
          {
            v1117 = 0;
            v1118 = 0;
            if (PBReaderPlaceMark())
            {
              if (GEOPDComponentIsValid(a1))
              {
                PBReaderRecallMark();
                continue;
              }
            }
          }
          goto LABEL_2687;
        }
      case 0x27u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v678 = 0;
          v679 = 0;
          v680 = 0;
          while (2)
          {
            v681 = *v2;
            v682 = *(_QWORD *)&a1[v681];
            v683 = v682 + 1;
            if (v682 == -1 || v683 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v684 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v682);
              *(_QWORD *)&a1[v681] = v683;
              v680 |= (unint64_t)(v684 & 0x7F) << v678;
              if (v684 < 0)
              {
                v678 += 7;
                v13 = v679++ >= 9;
                if (v13)
                {
                  LOBYTE(v680) = 0;
                  v105 = a1[*v4];
                  goto LABEL_1615;
                }
                continue;
              }
            }
            break;
          }
          v685 = *v4;
          v105 = a1[v685];
          if (a1[v685])
            LOBYTE(v680) = 0;
LABEL_1615:
          if (v105)
            v686 = 1;
          else
            v686 = (v680 & 7) == 4;
          if (!v686)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          goto LABEL_2293;
        }
      case 0x28u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1624:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_2248;
          v687 = 0;
          v688 = 0;
          v689 = 0;
          while (2)
          {
            v690 = *v2;
            v691 = *(_QWORD *)&a1[v690];
            v692 = v691 + 1;
            if (v691 == -1 || v692 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v693 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v691);
              *(_QWORD *)&a1[v690] = v692;
              v689 |= (unint64_t)(v693 & 0x7F) << v687;
              if (v693 < 0)
              {
                v687 += 7;
                v13 = v688++ >= 9;
                if (v13)
                {
                  v689 = 0;
                  v694 = a1[*v4];
                  goto LABEL_1636;
                }
                continue;
              }
            }
            break;
          }
          v694 = a1[*v4];
          if (a1[*v4])
            v689 = 0;
LABEL_1636:
          v695 = v689 & 7;
          if (v694)
            v696 = 1;
          else
            v696 = v695 == 4;
          if (v696)
            goto LABEL_2248;
          if ((v689 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          break;
        }
        if (v695 != 2 || !PBReaderPlaceMark())
          goto LABEL_2687;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (1)
        {
          while (1)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_1674;
            v697 = 0;
            v698 = 0;
            v699 = 0;
            while (1)
            {
              v700 = *v2;
              v701 = *(_QWORD *)&a1[v700];
              v702 = v701 + 1;
              if (v701 == -1 || v702 > *(_QWORD *)&a1[*v3])
                break;
              v703 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v701);
              *(_QWORD *)&a1[v700] = v702;
              v699 |= (unint64_t)(v703 & 0x7F) << v697;
              if ((v703 & 0x80) == 0)
                goto LABEL_1654;
              v697 += 7;
              v13 = v698++ >= 9;
              if (v13)
              {
                v699 = 0;
                v704 = a1[*v4];
                goto LABEL_1656;
              }
            }
            a1[*v4] = 1;
LABEL_1654:
            v704 = a1[*v4];
            if (a1[*v4])
              v699 = 0;
LABEL_1656:
            v705 = v699 & 7;
            if (v704 || v705 == 4)
            {
LABEL_1674:
              v707 = a1[*v4];
              PBReaderRecallMark();
              if (!v707)
              {
                PBReaderRecallMark();
                goto LABEL_1624;
              }
              goto LABEL_2687;
            }
            if ((v699 >> 3) != 2)
              break;
            if (v705 != 2)
              goto LABEL_2690;
            v1117 = 0;
            v1118 = 0;
            if (!PBReaderPlaceMark() || !GEOPDCategoryInformationIsValid(a1))
              goto LABEL_2690;
LABEL_1669:
            PBReaderRecallMark();
          }
          if ((v699 >> 3) == 1)
          {
            if (v705 != 2)
              goto LABEL_2690;
            v1117 = 0;
            v1118 = 0;
            if (!PBReaderPlaceMark() || !GEOPDCategoryLookupParametersIsValid(a1))
              goto LABEL_2690;
            goto LABEL_1669;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_2690;
        }
      case 0x29u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_1679:
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_2248;
          v708 = 0;
          v709 = 0;
          v710 = 0;
          while (2)
          {
            v711 = *v2;
            v712 = *(_QWORD *)&a1[v711];
            v713 = v712 + 1;
            if (v712 == -1 || v713 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v714 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v712);
              *(_QWORD *)&a1[v711] = v713;
              v710 |= (unint64_t)(v714 & 0x7F) << v708;
              if (v714 < 0)
              {
                v708 += 7;
                v13 = v709++ >= 9;
                if (v13)
                {
                  v710 = 0;
                  v715 = a1[*v4];
                  goto LABEL_1691;
                }
                continue;
              }
            }
            break;
          }
          v715 = a1[*v4];
          if (a1[*v4])
            v710 = 0;
LABEL_1691:
          v716 = v710 & 7;
          if (v715)
            v717 = 1;
          else
            v717 = v716 == 4;
          if (v717)
            goto LABEL_2248;
          if ((v710 >> 3) != 2)
          {
            if ((v710 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
            }
            if ((v710 & 7) == 0)
            {
              v718 = 0;
              do
              {
                v719 = *v2;
                v720 = *(_QWORD *)&a1[v719];
                v721 = v720 + 1;
                if (v720 == -1 || v721 > *(_QWORD *)&a1[*v3])
                {
                  a1[*v4] = 1;
                  goto LABEL_1679;
                }
                v722 = *(char *)(*(_QWORD *)&a1[*v5] + v720);
                *(_QWORD *)&a1[v719] = v721;
                if ((v722 & 0x80000000) == 0)
                  break;
                v32 = v718++ > 8;
              }
              while (!v32);
              continue;
            }
            goto LABEL_2687;
          }
          break;
        }
        if (v716 != 2 || !PBReaderPlaceMark())
          goto LABEL_2687;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (1)
        {
          while (1)
          {
LABEL_1708:
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_1743;
            v723 = 0;
            v724 = 0;
            v725 = 0;
            while (1)
            {
              v726 = *v2;
              v727 = *(_QWORD *)&a1[v726];
              v728 = v727 + 1;
              if (v727 == -1 || v728 > *(_QWORD *)&a1[*v3])
                break;
              v729 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v727);
              *(_QWORD *)&a1[v726] = v728;
              v725 |= (unint64_t)(v729 & 0x7F) << v723;
              if ((v729 & 0x80) == 0)
                goto LABEL_1718;
              v723 += 7;
              v13 = v724++ >= 9;
              if (v13)
              {
                v725 = 0;
                v730 = a1[*v4];
                goto LABEL_1720;
              }
            }
            a1[*v4] = 1;
LABEL_1718:
            v730 = a1[*v4];
            if (a1[*v4])
              v725 = 0;
LABEL_1720:
            v731 = v725 & 7;
            if (v730 || v731 == 4)
            {
LABEL_1743:
              v738 = a1[*v4];
              PBReaderRecallMark();
              if (!v738)
              {
                PBReaderRecallMark();
                goto LABEL_1679;
              }
              goto LABEL_2687;
            }
            if ((v725 >> 3) == 2)
              break;
            if ((v725 >> 3) == 1)
            {
              if ((v725 & 7) != 0)
                goto LABEL_2690;
              v733 = 0;
              while (1)
              {
                v734 = *v2;
                v735 = *(_QWORD *)&a1[v734];
                v736 = v735 + 1;
                if (v735 == -1 || v736 > *(_QWORD *)&a1[*v3])
                  break;
                v737 = *(char *)(*(_QWORD *)&a1[*v5] + v735);
                *(_QWORD *)&a1[v734] = v736;
                if (v737 < 0)
                {
                  v32 = v733++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_1708;
              }
              a1[*v4] = 1;
            }
            else if ((PBReaderSkipValueWithTag() & 1) == 0)
            {
              goto LABEL_2690;
            }
          }
          if (v731 != 2)
            goto LABEL_2690;
          v1117 = 0;
          v1118 = 0;
          if (!PBReaderPlaceMark() || !GEOPDMerchantBrandLookupResponseIsValid(a1))
            goto LABEL_2690;
          PBReaderRecallMark();
        }
      case 0x2Au:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v739 = 0;
          v740 = 0;
          v741 = 0;
          while (2)
          {
            v742 = *v2;
            v743 = *(_QWORD *)&a1[v742];
            v744 = v743 + 1;
            if (v743 == -1 || v744 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v745 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v743);
              *(_QWORD *)&a1[v742] = v744;
              v741 |= (unint64_t)(v745 & 0x7F) << v739;
              if (v745 < 0)
              {
                v739 += 7;
                v13 = v740++ >= 9;
                if (v13)
                {
                  LOBYTE(v741) = 0;
                  v105 = a1[*v4];
                  goto LABEL_1761;
                }
                continue;
              }
            }
            break;
          }
          v746 = *v4;
          v105 = a1[v746];
          if (a1[v746])
            LOBYTE(v741) = 0;
LABEL_1761:
          if (v105)
            v747 = 1;
          else
            v747 = (v741 & 7) == 4;
          if (!v747)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          goto LABEL_2293;
        }
      case 0x2Bu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_2165;
            v748 = 0;
            v749 = 0;
            v750 = 0;
            while (2)
            {
              v751 = *v2;
              v752 = *(_QWORD *)&a1[v751];
              v753 = v752 + 1;
              if (v752 == -1 || v753 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v754 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v752);
                *(_QWORD *)&a1[v751] = v753;
                v750 |= (unint64_t)(v754 & 0x7F) << v748;
                if (v754 < 0)
                {
                  v748 += 7;
                  v13 = v749++ >= 9;
                  if (v13)
                  {
                    v750 = 0;
                    v755 = a1[*v4];
                    goto LABEL_1782;
                  }
                  continue;
                }
              }
              break;
            }
            v755 = a1[*v4];
            if (a1[*v4])
              v750 = 0;
LABEL_1782:
            v756 = v750 & 7;
            if (v755)
              v757 = 1;
            else
              v757 = v756 == 4;
            if (v757)
              goto LABEL_2165;
            if ((v750 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
            }
            break;
          }
          if (v756 == 2 && PBReaderPlaceMark())
          {
            objc_msgSend(a1, "position");
            objc_msgSend(a1, "length");
LABEL_1790:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
            {
              v758 = 0;
              v759 = 0;
              v760 = 0;
              while (1)
              {
                v761 = *v2;
                v762 = *(_QWORD *)&a1[v761];
                v763 = v762 + 1;
                if (v762 == -1 || v763 > *(_QWORD *)&a1[*v3])
                  break;
                v764 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v762);
                *(_QWORD *)&a1[v761] = v763;
                v760 |= (unint64_t)(v764 & 0x7F) << v758;
                if ((v764 & 0x80) == 0)
                  goto LABEL_1800;
                v758 += 7;
                v13 = v759++ >= 9;
                if (v13)
                {
                  v760 = 0;
                  v765 = a1[*v4];
                  goto LABEL_1802;
                }
              }
              a1[*v4] = 1;
LABEL_1800:
              v765 = a1[*v4];
              if (a1[*v4])
                v760 = 0;
LABEL_1802:
              v766 = v760 & 7;
              if (v765 || v766 == 4)
                break;
              switch((v760 >> 3))
              {
                case 1u:
                  if ((v760 & 7) != 0)
                    goto LABEL_2693;
                  v768 = 0;
                  while (1)
                  {
                    v769 = *v2;
                    v770 = *(_QWORD *)&a1[v769];
                    v771 = v770 + 1;
                    if (v770 == -1 || v771 > *(_QWORD *)&a1[*v3])
                      break;
                    v772 = *(char *)(*(_QWORD *)&a1[*v5] + v770);
                    *(_QWORD *)&a1[v769] = v771;
                    if (v772 < 0)
                    {
                      v32 = v768++ > 8;
                      if (!v32)
                        continue;
                    }
                    goto LABEL_1790;
                  }
                  a1[*v4] = 1;
                  continue;
                case 2u:
                  if (v766 == 2)
                    goto LABEL_1816;
                  goto LABEL_2693;
                case 3u:
                  if (v766 != 2)
                    goto LABEL_2693;
                  v1119 = 0;
                  v1120 = 0;
                  if (!PBReaderPlaceMark() || !GEOPDSearchBrowseCategorySuggestionResultIsValid(a1))
                    goto LABEL_2693;
                  goto LABEL_1886;
                case 4u:
                  if (v766 != 2)
                    goto LABEL_2693;
                  v1119 = 0;
                  v1120 = 0;
                  if (!PBReaderPlaceMark() || !GEOPDCollectionSuggestionResultIsValid(a1))
                    goto LABEL_2693;
                  goto LABEL_1886;
                case 5u:
                  if (v766 == 2)
                  {
                    v1119 = 0;
                    v1120 = 0;
                    if (PBReaderPlaceMark())
                    {
                      if (GEOPDPublisherSuggestionResultIsValid(a1))
                        goto LABEL_1886;
                    }
                  }
                  goto LABEL_2693;
                case 6u:
                  if (v766 != 2 || !PBReaderPlaceMark())
                    goto LABEL_2693;
                  v1119 = objc_msgSend(a1, "position");
                  v1120 = objc_msgSend(a1, "length");
                  while (1)
                  {
LABEL_1833:
                    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                      goto LABEL_1885;
                    v773 = 0;
                    v774 = 0;
                    v775 = 0;
                    while (1)
                    {
                      v776 = *v2;
                      v777 = *(_QWORD *)&a1[v776];
                      v778 = v777 + 1;
                      if (v777 == -1 || v778 > *(_QWORD *)&a1[*v3])
                        break;
                      v779 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v777);
                      *(_QWORD *)&a1[v776] = v778;
                      v775 |= (unint64_t)(v779 & 0x7F) << v773;
                      if ((v779 & 0x80) == 0)
                        goto LABEL_1843;
                      v773 += 7;
                      v13 = v774++ >= 9;
                      if (v13)
                      {
                        v775 = 0;
                        v780 = a1[*v4];
                        goto LABEL_1845;
                      }
                    }
                    a1[*v4] = 1;
LABEL_1843:
                    v780 = a1[*v4];
                    if (a1[*v4])
                      v775 = 0;
LABEL_1845:
                    v781 = v775 & 7;
                    if (v780 || v781 == 4)
                      goto LABEL_1885;
                    if ((v775 >> 3) == 1)
                      break;
                    if ((PBReaderSkipValueWithTag() & 1) == 0)
                      goto LABEL_2692;
                  }
                  if (v781 == 2)
                  {
                    v1117 = 0;
                    v1118 = 0;
                    if (PBReaderPlaceMark())
                    {
                      if (GEOPDMapsIdentifierIsValid(a1))
                      {
                        PBReaderRecallMark();
                        goto LABEL_1833;
                      }
                    }
                  }
                  goto LABEL_2692;
                case 7u:
                  if (v766 != 2 || !PBReaderPlaceMark())
                    goto LABEL_2693;
                  v1119 = objc_msgSend(a1, "position");
                  v1120 = objc_msgSend(a1, "length");
                  break;
                default:
LABEL_1816:
                  if ((PBReaderSkipValueWithTag() & 1) == 0)
                    goto LABEL_2693;
                  continue;
              }
              while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
              {
                v783 = 0;
                v784 = 0;
                v785 = 0;
                while (1)
                {
                  v786 = *v2;
                  v787 = *(_QWORD *)&a1[v786];
                  v788 = v787 + 1;
                  if (v787 == -1 || v788 > *(_QWORD *)&a1[*v3])
                    break;
                  v789 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v787);
                  *(_QWORD *)&a1[v786] = v788;
                  v785 |= (unint64_t)(v789 & 0x7F) << v783;
                  if ((v789 & 0x80) == 0)
                    goto LABEL_1869;
                  v783 += 7;
                  v13 = v784++ >= 9;
                  if (v13)
                  {
                    v785 = 0;
                    v790 = a1[*v4];
                    goto LABEL_1871;
                  }
                }
                a1[*v4] = 1;
LABEL_1869:
                v790 = a1[*v4];
                if (a1[*v4])
                  v785 = 0;
LABEL_1871:
                v791 = v785 & 7;
                if (v790 || v791 == 4)
                  break;
                v793 = v785 >> 3;
                if ((v785 >> 3) == 3)
                {
                  if (v791 != 2)
                    goto LABEL_2692;
                }
                else if ((_DWORD)v793 == 2 || (_DWORD)v793 == 1)
                {
                  if (v791 == 2)
                  {
                    v1117 = 0;
                    v1118 = 0;
                    if (PBReaderPlaceMark())
                    {
                      if (GEOPDGuidesLocationEntryIsValid(a1))
                      {
                        PBReaderRecallMark();
                        continue;
                      }
                    }
                  }
LABEL_2692:
                  PBReaderRecallMark();
LABEL_2693:
                  PBReaderRecallMark();
                  goto LABEL_2687;
                }
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_2692;
              }
LABEL_1885:
              v794 = a1[*v4];
              PBReaderRecallMark();
              if (v794)
                goto LABEL_2693;
LABEL_1886:
              PBReaderRecallMark();
            }
            v795 = a1[*v4];
            PBReaderRecallMark();
            if (!v795)
            {
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_2687;
          }
          goto LABEL_2687;
        }
      case 0x2Cu:
        if (v15 == 2)
        {
          v1119 = 0;
          v1120 = 0;
          if (PBReaderPlaceMark())
          {
            if (GEOPDCollectionSuggestionResultIsValid(a1))
              goto LABEL_2603;
          }
        }
        goto LABEL_2688;
      case 0x2Du:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_2602;
            v796 = 0;
            v797 = 0;
            v798 = 0;
            while (2)
            {
              v799 = *v2;
              v800 = *(_QWORD *)&a1[v799];
              v801 = v800 + 1;
              if (v800 == -1 || v801 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v802 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v800);
                *(_QWORD *)&a1[v799] = v801;
                v798 |= (unint64_t)(v802 & 0x7F) << v796;
                if (v802 < 0)
                {
                  v796 += 7;
                  v13 = v797++ >= 9;
                  if (v13)
                  {
                    v798 = 0;
                    v803 = a1[*v4];
                    goto LABEL_1911;
                  }
                  continue;
                }
              }
              break;
            }
            v803 = a1[*v4];
            if (a1[*v4])
              v798 = 0;
LABEL_1911:
            v804 = v798 & 7;
            if (v803)
              v805 = 1;
            else
              v805 = v804 == 4;
            if (v805)
              goto LABEL_2602;
            if ((v798 >> 3) == 2)
            {
              if (v804 != 2)
                goto LABEL_2687;
              v1117 = 0;
              v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1))
                goto LABEL_2687;
            }
            else
            {
              if ((v798 >> 3) != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_2687;
                continue;
              }
              if (v804 != 2)
                goto LABEL_2687;
              v1117 = 0;
              v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDAllCollectionsViewResultFilterIsValid(a1))
                goto LABEL_2687;
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0x2Eu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_2602;
            v806 = 0;
            v807 = 0;
            v808 = 0;
            while (2)
            {
              v809 = *v2;
              v810 = *(_QWORD *)&a1[v809];
              v811 = v810 + 1;
              if (v810 == -1 || v811 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v812 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v810);
                *(_QWORD *)&a1[v809] = v811;
                v808 |= (unint64_t)(v812 & 0x7F) << v806;
                if (v812 < 0)
                {
                  v806 += 7;
                  v13 = v807++ >= 9;
                  if (v13)
                  {
                    v808 = 0;
                    v813 = a1[*v4];
                    goto LABEL_1942;
                  }
                  continue;
                }
              }
              break;
            }
            v813 = a1[*v4];
            if (a1[*v4])
              v808 = 0;
LABEL_1942:
            v814 = v808 & 7;
            if (v813)
              v815 = 1;
            else
              v815 = v814 == 4;
            if (v815)
              goto LABEL_2602;
            v816 = v808 >> 3;
            if ((v808 >> 3) == 3)
            {
              if (v814 != 2)
                goto LABEL_2687;
              v1117 = 0;
              v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1))
                goto LABEL_2687;
            }
            else if ((_DWORD)v816 == 2)
            {
              if (v814 != 2)
                goto LABEL_2687;
              v1117 = 0;
              v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDAllCollectionsViewResultFilterIsValid(a1))
                goto LABEL_2687;
            }
            else
            {
              if ((_DWORD)v816 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_2687;
                continue;
              }
              if (v814 != 2)
                goto LABEL_2687;
              v1117 = 0;
              v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDPublisherSuggestionResultIsValid(a1))
                goto LABEL_2687;
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0x2Fu:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v817 = 0;
          v818 = 0;
          v819 = 0;
          while (2)
          {
            v820 = *v2;
            v821 = *(_QWORD *)&a1[v820];
            v822 = v821 + 1;
            if (v821 == -1 || v822 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v823 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v821);
              *(_QWORD *)&a1[v820] = v822;
              v819 |= (unint64_t)(v823 & 0x7F) << v817;
              if (v823 < 0)
              {
                v817 += 7;
                v13 = v818++ >= 9;
                if (v13)
                {
                  LOBYTE(v819) = 0;
                  v105 = a1[*v4];
                  goto LABEL_1978;
                }
                continue;
              }
            }
            break;
          }
          v824 = *v4;
          v105 = a1[v824];
          if (a1[v824])
            LOBYTE(v819) = 0;
LABEL_1978:
          if (v105)
            v825 = 1;
          else
            v825 = (v819 & 7) == 4;
          if (!v825)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          goto LABEL_2293;
        }
      case 0x30u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v826 = 0;
          v827 = 0;
          v828 = 0;
          while (2)
          {
            v829 = *v2;
            v830 = *(_QWORD *)&a1[v829];
            v831 = v830 + 1;
            if (v830 == -1 || v831 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v832 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v830);
              *(_QWORD *)&a1[v829] = v831;
              v828 |= (unint64_t)(v832 & 0x7F) << v826;
              if (v832 < 0)
              {
                v826 += 7;
                v13 = v827++ >= 9;
                if (v13)
                {
                  LOBYTE(v828) = 0;
                  v105 = a1[*v4];
                  goto LABEL_1999;
                }
                continue;
              }
            }
            break;
          }
          v833 = *v4;
          v105 = a1[v833];
          if (a1[v833])
            LOBYTE(v828) = 0;
LABEL_1999:
          if (v105)
            v834 = 1;
          else
            v834 = (v828 & 7) == 4;
          if (!v834)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          goto LABEL_2293;
        }
      case 0x31u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_2248;
            v835 = 0;
            v836 = 0;
            v837 = 0;
            while (2)
            {
              v838 = *v2;
              v839 = *(_QWORD *)&a1[v838];
              v840 = v839 + 1;
              if (v839 == -1 || v840 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v841 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v839);
                *(_QWORD *)&a1[v838] = v840;
                v837 |= (unint64_t)(v841 & 0x7F) << v835;
                if (v841 < 0)
                {
                  v835 += 7;
                  v13 = v836++ >= 9;
                  if (v13)
                  {
                    v837 = 0;
                    v842 = a1[*v4];
                    goto LABEL_2020;
                  }
                  continue;
                }
              }
              break;
            }
            v842 = a1[*v4];
            if (a1[*v4])
              v837 = 0;
LABEL_2020:
            v843 = v837 & 7;
            if (v842)
              v844 = 1;
            else
              v844 = v843 == 4;
            if (v844)
              goto LABEL_2248;
            if ((v837 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
            }
            break;
          }
          if (v843 == 2 && PBReaderPlaceMark())
          {
            v1119 = objc_msgSend(a1, "position");
            v1120 = objc_msgSend(a1, "length");
LABEL_2028:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
            {
              v845 = 0;
              v846 = 0;
              v847 = 0;
              while (1)
              {
                v848 = *v2;
                v849 = *(_QWORD *)&a1[v848];
                v850 = v849 + 1;
                if (v849 == -1 || v850 > *(_QWORD *)&a1[*v3])
                  break;
                v851 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v849);
                *(_QWORD *)&a1[v848] = v850;
                v847 |= (unint64_t)(v851 & 0x7F) << v845;
                if ((v851 & 0x80) == 0)
                  goto LABEL_2038;
                v845 += 7;
                v13 = v846++ >= 9;
                if (v13)
                {
                  v847 = 0;
                  v852 = a1[*v4];
                  goto LABEL_2040;
                }
              }
              a1[*v4] = 1;
LABEL_2038:
              v852 = a1[*v4];
              if (a1[*v4])
                v847 = 0;
LABEL_2040:
              v853 = v847 & 7;
              if (v852 || v853 == 4)
                break;
              switch((v847 >> 3))
              {
                case 1u:
                  if ((v847 & 7) != 0)
                    goto LABEL_2690;
                  v855 = 0;
                  break;
                case 2u:
                  if (v853 == 2)
                    goto LABEL_2064;
                  goto LABEL_2690;
                case 3u:
                  if (v853 != 2)
                    goto LABEL_2690;
                  v1117 = 0;
                  v1118 = 0;
                  if (!PBReaderPlaceMark() || !GEOPDCollectionSuggestionResultIsValid(a1))
                    goto LABEL_2690;
                  goto LABEL_2062;
                case 4u:
                  if (v853 != 2)
                    goto LABEL_2690;
                  v1117 = 0;
                  v1118 = 0;
                  if (!PBReaderPlaceMark() || !GEOPDGuidesLocationEntryIsValid(a1))
                    goto LABEL_2690;
LABEL_2062:
                  PBReaderRecallMark();
                  continue;
                case 5u:
                  if (v853 == 2)
                    goto LABEL_2064;
                  goto LABEL_2690;
                default:
LABEL_2064:
                  if ((PBReaderSkipValueWithTag() & 1) == 0)
                    goto LABEL_2690;
                  continue;
              }
              while (1)
              {
                v856 = *v2;
                v857 = *(_QWORD *)&a1[v856];
                v858 = v857 + 1;
                if (v857 == -1 || v858 > *(_QWORD *)&a1[*v3])
                  break;
                v859 = *(char *)(*(_QWORD *)&a1[*v5] + v857);
                *(_QWORD *)&a1[v856] = v858;
                if (v859 < 0)
                {
                  v32 = v855++ > 8;
                  if (!v32)
                    continue;
                }
                goto LABEL_2028;
              }
              a1[*v4] = 1;
            }
            v860 = a1[*v4];
            PBReaderRecallMark();
            if (!v860)
            {
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_2687;
          }
          goto LABEL_2687;
        }
      case 0x32u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
LABEL_2074:
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v861 = 0;
          v862 = 0;
          v863 = 0;
          while (2)
          {
            v864 = *v2;
            v865 = *(_QWORD *)&a1[v864];
            v866 = v865 + 1;
            if (v865 == -1 || v866 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v867 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v865);
              *(_QWORD *)&a1[v864] = v866;
              v863 |= (unint64_t)(v867 & 0x7F) << v861;
              if (v867 < 0)
              {
                v861 += 7;
                v13 = v862++ >= 9;
                if (v13)
                {
                  v863 = 0;
                  v868 = a1[*v4];
                  goto LABEL_2086;
                }
                continue;
              }
            }
            break;
          }
          v868 = a1[*v4];
          if (a1[*v4])
            v863 = 0;
LABEL_2086:
          v869 = v863 & 7;
          if (v868)
            v870 = 1;
          else
            v870 = v869 == 4;
          if (!v870)
          {
            if ((v863 >> 3) != 2)
            {
              if ((v863 >> 3) == 1 && v869 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
            }
            if (v869 != 2 || !PBReaderPlaceMark())
              goto LABEL_2687;
            objc_msgSend(a1, "position");
            objc_msgSend(a1, "length");
            while (1)
            {
LABEL_2097:
              if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                goto LABEL_2163;
              v871 = 0;
              v872 = 0;
              v873 = 0;
              while (1)
              {
                v874 = *v2;
                v875 = *(_QWORD *)&a1[v874];
                v876 = v875 + 1;
                if (v875 == -1 || v876 > *(_QWORD *)&a1[*v3])
                  break;
                v877 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v875);
                *(_QWORD *)&a1[v874] = v876;
                v873 |= (unint64_t)(v877 & 0x7F) << v871;
                if ((v877 & 0x80) == 0)
                  goto LABEL_2107;
                v871 += 7;
                v13 = v872++ >= 9;
                if (v13)
                {
                  v873 = 0;
                  v878 = a1[*v4];
                  goto LABEL_2109;
                }
              }
              a1[*v4] = 1;
LABEL_2107:
              v878 = a1[*v4];
              if (a1[*v4])
                v873 = 0;
LABEL_2109:
              v879 = v873 & 7;
              if (v878 || v879 == 4)
              {
LABEL_2163:
                v898 = a1[*v4];
                PBReaderRecallMark();
                if (!v898)
                {
                  PBReaderRecallMark();
                  goto LABEL_2074;
                }
                goto LABEL_2687;
              }
              if ((v873 >> 3) == 2)
              {
                if (v879 != 2)
                  goto LABEL_2693;
                v1119 = 0;
                v1120 = 0;
                if (!PBReaderPlaceMark() || !GEOPDGuidesLocationEntryIsValid(a1))
                  goto LABEL_2693;
                goto LABEL_2160;
              }
              if ((v873 >> 3) == 1)
                break;
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2693;
            }
            if (v879 != 2 || !PBReaderPlaceMark())
              goto LABEL_2693;
            v1119 = objc_msgSend(a1, "position");
            v1120 = objc_msgSend(a1, "length");
            while (1)
            {
              while (1)
              {
LABEL_2118:
                if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                  goto LABEL_2159;
                v881 = 0;
                v882 = 0;
                v883 = 0;
                while (1)
                {
                  v884 = *v2;
                  v885 = *(_QWORD *)&a1[v884];
                  v886 = v885 + 1;
                  if (v885 == -1 || v886 > *(_QWORD *)&a1[*v3])
                    break;
                  v887 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v885);
                  *(_QWORD *)&a1[v884] = v886;
                  v883 |= (unint64_t)(v887 & 0x7F) << v881;
                  if ((v887 & 0x80) == 0)
                    goto LABEL_2128;
                  v881 += 7;
                  v13 = v882++ >= 9;
                  if (v13)
                  {
                    v883 = 0;
                    v888 = a1[*v4];
                    goto LABEL_2130;
                  }
                }
                a1[*v4] = 1;
LABEL_2128:
                v888 = a1[*v4];
                if (a1[*v4])
                  v883 = 0;
LABEL_2130:
                v889 = v883 & 7;
                if (v888 || v889 == 4)
                {
LABEL_2159:
                  v897 = a1[*v4];
                  PBReaderRecallMark();
                  if (v897)
                    goto LABEL_2693;
LABEL_2160:
                  PBReaderRecallMark();
                  goto LABEL_2097;
                }
                v891 = v883 >> 3;
                if ((v883 >> 3) != 3)
                  break;
                if (v889 != 2)
                  goto LABEL_2692;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1))
                  goto LABEL_2692;
                PBReaderRecallMark();
              }
              if ((_DWORD)v891 == 2)
                break;
              if ((_DWORD)v891 == 1)
              {
                if ((v883 & 7) != 0)
                  goto LABEL_2692;
                v892 = 0;
                while (1)
                {
                  v893 = *v2;
                  v894 = *(_QWORD *)&a1[v893];
                  v895 = v894 + 1;
                  if (v894 == -1 || v895 > *(_QWORD *)&a1[*v3])
                    break;
                  v896 = *(char *)(*(_QWORD *)&a1[*v5] + v894);
                  *(_QWORD *)&a1[v893] = v895;
                  if (v896 < 0)
                  {
                    v32 = v892++ > 8;
                    if (!v32)
                      continue;
                  }
                  goto LABEL_2118;
                }
                a1[*v4] = 1;
              }
              else
              {
LABEL_2150:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_2692;
              }
            }
            if (v889 != 2)
              goto LABEL_2692;
            goto LABEL_2150;
          }
          break;
        }
LABEL_2165:
        v899 = a1[*v4];
        PBReaderRecallMark();
        if (v899)
          goto LABEL_2688;
        goto LABEL_2603;
      case 0x33u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v900 = 0;
          v901 = 0;
          v902 = 0;
          while (2)
          {
            v903 = *v2;
            v904 = *(_QWORD *)&a1[v903];
            v905 = v904 + 1;
            if (v904 == -1 || v905 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v906 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v904);
              *(_QWORD *)&a1[v903] = v905;
              v902 |= (unint64_t)(v906 & 0x7F) << v900;
              if (v906 < 0)
              {
                v900 += 7;
                v13 = v901++ >= 9;
                if (v13)
                {
                  v902 = 0;
                  v907 = a1[*v4];
                  goto LABEL_2182;
                }
                continue;
              }
            }
            break;
          }
          v907 = a1[*v4];
          if (a1[*v4])
            v902 = 0;
LABEL_2182:
          v908 = v902 & 7;
          if (v907)
            v909 = 1;
          else
            v909 = v908 == 4;
          if (!v909)
          {
            v910 = v902 >> 3;
            if ((int)(v902 >> 3) > 2)
            {
              if ((_DWORD)v910 != 3)
              {
                if ((_DWORD)v910 != 50)
                  goto LABEL_2244;
                if (v908 != 2 || !PBReaderPlaceMark())
                  goto LABEL_2687;
                v1119 = objc_msgSend(a1, "position");
                v1120 = objc_msgSend(a1, "length");
LABEL_2195:
                while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
                {
                  v911 = 0;
                  v912 = 0;
                  v913 = 0;
                  while (1)
                  {
                    v914 = *v2;
                    v915 = *(_QWORD *)&a1[v914];
                    v916 = v915 + 1;
                    if (v915 == -1 || v916 > *(_QWORD *)&a1[*v3])
                      break;
                    v917 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v915);
                    *(_QWORD *)&a1[v914] = v916;
                    v913 |= (unint64_t)(v917 & 0x7F) << v911;
                    if ((v917 & 0x80) == 0)
                      goto LABEL_2205;
                    v911 += 7;
                    v13 = v912++ >= 9;
                    if (v13)
                    {
                      v913 = 0;
                      v918 = a1[*v4];
                      goto LABEL_2207;
                    }
                  }
                  a1[*v4] = 1;
LABEL_2205:
                  v918 = a1[*v4];
                  if (a1[*v4])
                    v913 = 0;
LABEL_2207:
                  v919 = v913 & 7;
                  if (v918 || v919 == 4)
                    break;
                  switch((v913 >> 3))
                  {
                    case 1u:
                      if ((v913 & 7) != 0)
                        goto LABEL_2690;
                      v921 = 0;
                      while (1)
                      {
                        v922 = *v2;
                        v923 = *(_QWORD *)&a1[v922];
                        v924 = v923 + 1;
                        if (v923 == -1 || v924 > *(_QWORD *)&a1[*v3])
                          goto LABEL_2239;
                        v925 = *(char *)(*(_QWORD *)&a1[*v5] + v923);
                        *(_QWORD *)&a1[v922] = v924;
                        if (v925 < 0)
                        {
                          v32 = v921++ > 8;
                          if (!v32)
                            continue;
                        }
                        goto LABEL_2195;
                      }
                    case 2u:
                      if (v919 == 2)
                        goto LABEL_2225;
                      goto LABEL_2690;
                    case 3u:
                    case 4u:
                      if (v919 != 2)
                        goto LABEL_2690;
                      v1117 = 0;
                      v1118 = 0;
                      if (!PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1))
                        goto LABEL_2690;
                      goto LABEL_2230;
                    case 5u:
                      if (v919 != 2)
                        goto LABEL_2690;
                      v1117 = 0;
                      v1118 = 0;
                      if (!PBReaderPlaceMark() || !GEOPDGuidesLocationEntryIsValid(a1))
                        goto LABEL_2690;
LABEL_2230:
                      PBReaderRecallMark();
                      continue;
                    case 6u:
                      if ((v913 & 7) != 0)
                        goto LABEL_2690;
                      v926 = 0;
                      break;
                    default:
LABEL_2225:
                      if ((PBReaderSkipValueWithTag() & 1) == 0)
                        goto LABEL_2690;
                      continue;
                  }
                  while (1)
                  {
                    v927 = *v2;
                    v928 = *(_QWORD *)&a1[v927];
                    v929 = v928 + 1;
                    if (v928 == -1 || v929 > *(_QWORD *)&a1[*v3])
                      break;
                    v930 = *(char *)(*(_QWORD *)&a1[*v5] + v928);
                    *(_QWORD *)&a1[v927] = v929;
                    if (v930 < 0)
                    {
                      v32 = v926++ > 8;
                      if (!v32)
                        continue;
                    }
                    goto LABEL_2195;
                  }
LABEL_2239:
                  a1[*v4] = 1;
                }
                v931 = a1[*v4];
                PBReaderRecallMark();
                if (v931)
                  goto LABEL_2687;
LABEL_2247:
                PBReaderRecallMark();
                continue;
              }
            }
            else if ((_DWORD)v910 != 1 && (_DWORD)v910 != 2)
            {
LABEL_2244:
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
            }
            if (v908 != 2)
              goto LABEL_2687;
            v1119 = 0;
            v1120 = 0;
            if (!PBReaderPlaceMark() || !GEOPDGuidesHomeFixedSectionIsValid(a1))
              goto LABEL_2687;
            goto LABEL_2247;
          }
          break;
        }
LABEL_2248:
        v932 = a1[*v4];
        PBReaderRecallMark();
        if (v932)
          goto LABEL_2688;
        goto LABEL_2603;
      case 0x36u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
LABEL_2253:
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v933 = 0;
          v934 = 0;
          v935 = 0;
          while (2)
          {
            v936 = *v2;
            v937 = *(_QWORD *)&a1[v936];
            v938 = v937 + 1;
            if (v937 == -1 || v938 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v939 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v937);
              *(_QWORD *)&a1[v936] = v938;
              v935 |= (unint64_t)(v939 & 0x7F) << v933;
              if (v939 < 0)
              {
                v933 += 7;
                v13 = v934++ >= 9;
                if (v13)
                {
                  v935 = 0;
                  v940 = a1[*v4];
                  goto LABEL_2265;
                }
                continue;
              }
            }
            break;
          }
          v940 = a1[*v4];
          if (a1[*v4])
            v935 = 0;
LABEL_2265:
          v941 = v935 & 7;
          if (v940)
            v942 = 1;
          else
            v942 = v941 == 4;
          if (!v942)
          {
            v943 = v935 >> 3;
            if ((v935 >> 3) != 3)
            {
              if ((_DWORD)v943 == 2)
              {
                if (v941 != 2)
                  goto LABEL_2687;
              }
              else if ((_DWORD)v943 == 1)
              {
                if ((v935 & 7) != 0)
                  goto LABEL_2687;
                v944 = 0;
                while (1)
                {
                  v945 = *v2;
                  v946 = *(_QWORD *)&a1[v945];
                  v947 = v946 + 1;
                  if (v946 == -1 || v947 > *(_QWORD *)&a1[*v3])
                    goto LABEL_2288;
                  v948 = *(char *)(*(_QWORD *)&a1[*v5] + v946);
                  *(_QWORD *)&a1[v945] = v947;
                  if (v948 < 0)
                  {
                    v32 = v944++ > 8;
                    if (!v32)
                      continue;
                  }
                  goto LABEL_2253;
                }
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
            }
            if ((v935 & 7) != 0)
              goto LABEL_2687;
            v949 = 0;
            while (1)
            {
              v950 = *v2;
              v951 = *(_QWORD *)&a1[v950];
              v952 = v951 + 1;
              if (v951 == -1 || v952 > *(_QWORD *)&a1[*v3])
                break;
              v953 = *(char *)(*(_QWORD *)&a1[*v5] + v951);
              *(_QWORD *)&a1[v950] = v952;
              if (v953 < 0)
              {
                v32 = v949++ > 8;
                if (!v32)
                  continue;
              }
              goto LABEL_2253;
            }
LABEL_2288:
            a1[*v4] = 1;
            continue;
          }
          break;
        }
LABEL_2292:
        v105 = a1[*v4];
LABEL_2293:
        PBReaderRecallMark();
        if (v105)
          goto LABEL_2688;
        goto LABEL_2603;
      case 0x37u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        objc_msgSend(a1, "position", 0, 0);
        objc_msgSend(a1, "length");
LABEL_2298:
        if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
          goto LABEL_2684;
        v954 = 0;
        v955 = 0;
        v956 = 0;
        while (2)
        {
          v957 = *v2;
          v958 = *(_QWORD *)&a1[v957];
          v959 = v958 + 1;
          if (v958 == -1 || v959 > *(_QWORD *)&a1[*v3])
          {
            a1[*v4] = 1;
          }
          else
          {
            v960 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v958);
            *(_QWORD *)&a1[v957] = v959;
            v956 |= (unint64_t)(v960 & 0x7F) << v954;
            if (v960 < 0)
            {
              v954 += 7;
              v13 = v955++ >= 9;
              if (v13)
              {
                v956 = 0;
                v961 = a1[*v4];
                goto LABEL_2310;
              }
              continue;
            }
          }
          break;
        }
        v961 = a1[*v4];
        if (a1[*v4])
          v956 = 0;
LABEL_2310:
        v962 = v956 & 7;
        if (v961)
          v963 = 1;
        else
          v963 = v962 == 4;
        if (v963)
        {
LABEL_2684:
          v1114 = a1[*v4];
          PBReaderRecallMark();
          if (v1114)
            goto LABEL_2688;
LABEL_2603:
          PBReaderRecallMark();
LABEL_2604:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2686;
          continue;
        }
        if ((v956 >> 3) == 2)
        {
          if (v962 != 2 || !PBReaderPlaceMark())
            goto LABEL_2687;
          objc_msgSend(a1, "position");
          objc_msgSend(a1, "length");
          while (1)
          {
            while (1)
            {
              if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                goto LABEL_2532;
              v964 = 0;
              v965 = 0;
              v966 = 0;
              while (1)
              {
                v967 = *v2;
                v968 = *(_QWORD *)&a1[v967];
                v969 = v968 + 1;
                if (v968 == -1 || v969 > *(_QWORD *)&a1[*v3])
                  break;
                v970 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v968);
                *(_QWORD *)&a1[v967] = v969;
                v966 |= (unint64_t)(v970 & 0x7F) << v964;
                if ((v970 & 0x80) == 0)
                  goto LABEL_2333;
                v964 += 7;
                v13 = v965++ >= 9;
                if (v13)
                {
                  v966 = 0;
                  v971 = a1[*v4];
                  goto LABEL_2335;
                }
              }
              a1[*v4] = 1;
LABEL_2333:
              v971 = a1[*v4];
              if (a1[*v4])
                v966 = 0;
LABEL_2335:
              v972 = v966 & 7;
              if (v971 || v972 == 4)
              {
LABEL_2532:
                v1049 = a1[*v4];
                PBReaderRecallMark();
                if (v1049)
                  goto LABEL_2687;
LABEL_2533:
                PBReaderRecallMark();
                goto LABEL_2298;
              }
              if ((v966 >> 3) == 1)
                break;
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2702;
            }
            if (v972 != 2 || !PBReaderPlaceMark())
              goto LABEL_2702;
            objc_msgSend(a1, "position");
            objc_msgSend(a1, "length");
LABEL_2343:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
            {
              v974 = 0;
              v975 = 0;
              v976 = 0;
              while (1)
              {
                v977 = *v2;
                v978 = *(_QWORD *)&a1[v977];
                v979 = v978 + 1;
                if (v978 == -1 || v979 > *(_QWORD *)&a1[*v3])
                  break;
                v980 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v978);
                *(_QWORD *)&a1[v977] = v979;
                v976 |= (unint64_t)(v980 & 0x7F) << v974;
                if ((v980 & 0x80) == 0)
                  goto LABEL_2353;
                v974 += 7;
                v13 = v975++ >= 9;
                if (v13)
                {
                  v976 = 0;
                  v981 = a1[*v4];
                  goto LABEL_2355;
                }
              }
              a1[*v4] = 1;
LABEL_2353:
              v981 = a1[*v4];
              if (a1[*v4])
                v976 = 0;
LABEL_2355:
              v982 = v976 & 7;
              if (v981 || v982 == 4)
                break;
              v984 = v976 >> 3;
              if ((v976 >> 3) == 3)
              {
                if (v982 != 2 || !PBReaderPlaceMark())
                  goto LABEL_2701;
                objc_msgSend(a1, "position");
                objc_msgSend(a1, "length");
                while (1)
                {
                  while (1)
                  {
                    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                      goto LABEL_2522;
                    v990 = 0;
                    v991 = 0;
                    v992 = 0;
                    while (1)
                    {
                      v993 = *v2;
                      v994 = *(_QWORD *)&a1[v993];
                      v995 = v994 + 1;
                      if (v994 == -1 || v995 > *(_QWORD *)&a1[*v3])
                        break;
                      v996 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v994);
                      *(_QWORD *)&a1[v993] = v995;
                      v992 |= (unint64_t)(v996 & 0x7F) << v990;
                      if ((v996 & 0x80) == 0)
                        goto LABEL_2383;
                      v990 += 7;
                      v13 = v991++ >= 9;
                      if (v13)
                      {
                        v992 = 0;
                        v997 = a1[*v4];
                        goto LABEL_2385;
                      }
                    }
                    a1[*v4] = 1;
LABEL_2383:
                    v997 = a1[*v4];
                    if (a1[*v4])
                      v992 = 0;
LABEL_2385:
                    v998 = v992 & 7;
                    if (v997 || v998 == 4)
                    {
LABEL_2522:
                      v1047 = a1[*v4];
                      PBReaderRecallMark();
                      if (v1047)
                        goto LABEL_2701;
                      goto LABEL_2525;
                    }
                    if ((v992 >> 3) == 1)
                      break;
                    if ((PBReaderSkipValueWithTag() & 1) == 0)
                      goto LABEL_2700;
                  }
                  if (v998 != 2 || !PBReaderPlaceMark())
                    goto LABEL_2700;
                  v1117 = objc_msgSend(a1, "position");
                  v1118 = objc_msgSend(a1, "length");
LABEL_2393:
                  if (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
                  {
                    v1000 = 0;
                    v1001 = 0;
                    v1002 = 0;
                    while (1)
                    {
                      v1003 = *v2;
                      v1004 = *(_QWORD *)&a1[v1003];
                      v1005 = v1004 + 1;
                      if (v1004 == -1 || v1005 > *(_QWORD *)&a1[*v3])
                        break;
                      v1006 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1004);
                      *(_QWORD *)&a1[v1003] = v1005;
                      v1002 |= (unint64_t)(v1006 & 0x7F) << v1000;
                      if ((v1006 & 0x80) == 0)
                        goto LABEL_2403;
                      v1000 += 7;
                      v13 = v1001++ >= 9;
                      if (v13)
                      {
                        v1002 = 0;
                        v1007 = a1[*v4];
                        goto LABEL_2405;
                      }
                    }
                    a1[*v4] = 1;
LABEL_2403:
                    v1007 = a1[*v4];
                    if (a1[*v4])
                      v1002 = 0;
LABEL_2405:
                    v1008 = v1002 & 7;
                    if (!v1007 && v1008 != 4)
                      break;
                  }
                  v1036 = a1[*v4];
                  PBReaderRecallMark();
                  if (v1036)
                    goto LABEL_2700;
                  PBReaderRecallMark();
                }
                switch((v1002 >> 3))
                {
                  case 1u:
                    if ((v1002 & 7) != 0)
                      goto LABEL_2699;
                    v1010 = 0;
                    while (1)
                    {
                      v1011 = *v2;
                      v1012 = *(_QWORD *)&a1[v1011];
                      v1013 = v1012 + 1;
                      if (v1012 == -1 || v1013 > *(_QWORD *)&a1[*v3])
                        goto LABEL_2454;
                      v1014 = *(char *)(*(_QWORD *)&a1[*v5] + v1012);
                      *(_QWORD *)&a1[v1011] = v1013;
                      if (v1014 < 0)
                      {
                        v32 = v1010++ > 8;
                        if (!v32)
                          continue;
                      }
                      goto LABEL_2393;
                    }
                  case 2u:
                    if (v1008 == 2)
                      goto LABEL_2462;
                    goto LABEL_2699;
                  case 3u:
                    if (v1008 == 2)
                      goto LABEL_2462;
                    goto LABEL_2699;
                  case 4u:
                    if (v1008 == 2)
                    {
                      v1119 = 0;
                      v1120 = 0;
                      if (PBReaderPlaceMark())
                      {
                        if (GEOLocalizedStringIsValid(a1))
                          goto LABEL_2433;
                      }
                    }
                    goto LABEL_2699;
                  case 5u:
                    if (v1008 == 2)
                      goto LABEL_2462;
                    goto LABEL_2699;
                  case 6u:
                    if (v1008 == 2)
                      goto LABEL_2462;
                    goto LABEL_2699;
                  case 7u:
                    if ((v1002 & 7) != 0)
                      goto LABEL_2699;
                    v1015 = 0;
                    while (1)
                    {
                      v1016 = *v2;
                      v1017 = *(_QWORD *)&a1[v1016];
                      v1018 = v1017 + 1;
                      if (v1017 == -1 || v1018 > *(_QWORD *)&a1[*v3])
                        goto LABEL_2454;
                      v1019 = *(char *)(*(_QWORD *)&a1[*v5] + v1017);
                      *(_QWORD *)&a1[v1016] = v1018;
                      if (v1019 < 0)
                      {
                        v32 = v1015++ > 8;
                        if (!v32)
                          continue;
                      }
                      goto LABEL_2393;
                    }
                  case 8u:
                    if ((v1002 & 7) != 0)
                      goto LABEL_2699;
                    v1020 = 0;
                    while (1)
                    {
                      v1021 = *v2;
                      v1022 = *(_QWORD *)&a1[v1021];
                      v1023 = v1022 + 1;
                      if (v1022 == -1 || v1023 > *(_QWORD *)&a1[*v3])
                        break;
                      v1024 = *(char *)(*(_QWORD *)&a1[*v5] + v1022);
                      *(_QWORD *)&a1[v1021] = v1023;
                      if (v1024 < 0)
                      {
                        v32 = v1020++ > 8;
                        if (!v32)
                          continue;
                      }
                      goto LABEL_2393;
                    }
LABEL_2454:
                    a1[*v4] = 1;
                    goto LABEL_2393;
                  case 9u:
                    if (v1008 == 2)
                      goto LABEL_2462;
                    goto LABEL_2699;
                  case 0xAu:
                  case 0xFu:
                    if (v1008 != 2)
                      goto LABEL_2699;
                    v1119 = 0;
                    v1120 = 0;
                    if (!PBReaderPlaceMark() || !GEOPDMultiLocalizedStringIsValid(a1))
                      goto LABEL_2699;
                    goto LABEL_2433;
                  case 0xBu:
                  case 0xEu:
                    if (v1008 != 2)
                      goto LABEL_2699;
                    v1119 = 0;
                    v1120 = 0;
                    if (!PBReaderPlaceMark() || !GEOPDIconMappingIsValid(a1))
                      goto LABEL_2699;
                    goto LABEL_2433;
                  case 0xCu:
                    if (v1008 == 2)
                      goto LABEL_2462;
                    goto LABEL_2699;
                  case 0xDu:
                    if (v1008 == 2)
                      goto LABEL_2462;
                    goto LABEL_2699;
                  case 0x10u:
                    if (v1008 == 2)
                      goto LABEL_2462;
                    goto LABEL_2699;
                  case 0x11u:
                    if (v1008 != 2 || !PBReaderPlaceMark())
                      goto LABEL_2699;
                    v1119 = objc_msgSend(a1, "position");
                    v1120 = objc_msgSend(a1, "length");
                    break;
                  default:
LABEL_2462:
                    if ((PBReaderSkipValueWithTag() & 1) == 0)
                      goto LABEL_2699;
                    goto LABEL_2393;
                }
                while (1)
                {
LABEL_2467:
                  if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                    goto LABEL_2492;
                  v1025 = 0;
                  v1026 = 0;
                  v1027 = 0;
                  while (1)
                  {
                    v1028 = *v2;
                    v1029 = *(_QWORD *)&a1[v1028];
                    v1030 = v1029 + 1;
                    if (v1029 == -1 || v1030 > *(_QWORD *)&a1[*v3])
                      break;
                    v1031 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1029);
                    *(_QWORD *)&a1[v1028] = v1030;
                    v1027 |= (unint64_t)(v1031 & 0x7F) << v1025;
                    if ((v1031 & 0x80) == 0)
                      goto LABEL_2477;
                    v1025 += 7;
                    v13 = v1026++ >= 9;
                    if (v13)
                    {
                      v1027 = 0;
                      v1032 = a1[*v4];
                      goto LABEL_2479;
                    }
                  }
                  a1[*v4] = 1;
LABEL_2477:
                  v1032 = a1[*v4];
                  if (a1[*v4])
                    v1027 = 0;
LABEL_2479:
                  v1033 = v1027 & 7;
                  if (v1032 || v1033 == 4)
                  {
LABEL_2492:
                    v1035 = a1[*v4];
                    PBReaderRecallMark();
                    if (v1035)
                      goto LABEL_2699;
LABEL_2433:
                    PBReaderRecallMark();
                    goto LABEL_2393;
                  }
                  if ((v1027 >> 3) == 2)
                    break;
                  if ((v1027 >> 3) == 1)
                  {
                    if (v1033 != 2)
                      goto LABEL_2698;
                    goto LABEL_2488;
                  }
                  if (!PBReaderSkipValueWithTag())
                  {
LABEL_2698:
                    PBReaderRecallMark();
LABEL_2699:
                    PBReaderRecallMark();
LABEL_2700:
                    PBReaderRecallMark();
LABEL_2701:
                    PBReaderRecallMark();
LABEL_2702:
                    PBReaderRecallMark();
                    goto LABEL_2687;
                  }
                }
                if (v1033 != 2)
                  goto LABEL_2698;
LABEL_2488:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_2698;
                goto LABEL_2467;
              }
              if ((_DWORD)v984 == 2)
              {
                if (v982 != 2)
                  goto LABEL_2701;
                v1117 = 0;
                v1118 = 0;
                if (!PBReaderPlaceMark())
                  goto LABEL_2701;
                v1119 = objc_msgSend(a1, "position");
                v1120 = objc_msgSend(a1, "length");
                while (1)
                {
                  v1037 = a1[*v4];
                  if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
                    break;
                  if (a1[*v4])
                    goto LABEL_2700;
                  v1038 = 0;
                  v1039 = 0;
                  v1040 = 0;
                  while (1)
                  {
                    v1041 = *v2;
                    v1042 = *(_QWORD *)&a1[v1041];
                    v1043 = v1042 + 1;
                    if (v1042 == -1 || v1043 > *(_QWORD *)&a1[*v3])
                      break;
                    v1044 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1042);
                    *(_QWORD *)&a1[v1041] = v1043;
                    v1040 |= (unint64_t)(v1044 & 0x7F) << v1038;
                    if ((v1044 & 0x80) == 0)
                      goto LABEL_2511;
                    v1038 += 7;
                    v13 = v1039++ >= 9;
                    if (v13)
                    {
                      LOBYTE(v1040) = 0;
                      v1037 = a1[*v4];
                      goto LABEL_2513;
                    }
                  }
                  a1[*v4] = 1;
LABEL_2511:
                  v1045 = *v4;
                  v1037 = a1[v1045];
                  if (a1[v1045])
                    LOBYTE(v1040) = 0;
LABEL_2513:
                  if (v1037 || (v1040 & 7) == 4)
                    break;
                  if ((PBReaderSkipValueWithTag() & 1) == 0)
                    goto LABEL_2700;
                }
                PBReaderRecallMark();
                if (v1037)
                  goto LABEL_2701;
LABEL_2525:
                PBReaderRecallMark();
              }
              else if ((_DWORD)v984 == 1)
              {
                if ((v976 & 7) != 0)
                  goto LABEL_2701;
                v985 = 0;
                while (1)
                {
                  v986 = *v2;
                  v987 = *(_QWORD *)&a1[v986];
                  v988 = v987 + 1;
                  if (v987 == -1 || v988 > *(_QWORD *)&a1[*v3])
                    break;
                  v989 = *(char *)(*(_QWORD *)&a1[*v5] + v987);
                  *(_QWORD *)&a1[v986] = v988;
                  if (v989 < 0)
                  {
                    v32 = v985++ > 8;
                    if (!v32)
                      continue;
                  }
                  goto LABEL_2343;
                }
                a1[*v4] = 1;
              }
              else if ((PBReaderSkipValueWithTag() & 1) == 0)
              {
                goto LABEL_2701;
              }
            }
            v1048 = a1[*v4];
            PBReaderRecallMark();
            if (v1048)
              goto LABEL_2702;
            PBReaderRecallMark();
          }
        }
        if ((v956 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_2687;
          goto LABEL_2298;
        }
        if (v962 == 2)
        {
          v1119 = 0;
          v1120 = 0;
          if (PBReaderPlaceMark())
          {
            if (GEOPDSearchQueryIntentIsValid(a1))
              goto LABEL_2533;
          }
        }
LABEL_2687:
        PBReaderRecallMark();
LABEL_2688:
        PBReaderRecallMark();
        return 0;
      case 0x38u:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v1050 = 0;
          v1051 = 0;
          v1052 = 0;
          while (2)
          {
            v1053 = *v2;
            v1054 = *(_QWORD *)&a1[v1053];
            v1055 = v1054 + 1;
            if (v1054 == -1 || v1055 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v1056 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1054);
              *(_QWORD *)&a1[v1053] = v1055;
              v1052 |= (unint64_t)(v1056 & 0x7F) << v1050;
              if (v1056 < 0)
              {
                v1050 += 7;
                v13 = v1051++ >= 9;
                if (v13)
                {
                  LOBYTE(v1052) = 0;
                  v105 = a1[*v4];
                  goto LABEL_2549;
                }
                continue;
              }
            }
            break;
          }
          v1057 = *v4;
          v105 = a1[v1057];
          if (a1[v1057])
            LOBYTE(v1052) = 0;
LABEL_2549:
          if (v105)
            v1058 = 1;
          else
            v1058 = (v1052 & 7) == 4;
          if (!v1058)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          goto LABEL_2293;
        }
      case 0x3Au:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v1059 = 0;
          v1060 = 0;
          v1061 = 0;
          while (2)
          {
            v1062 = *v2;
            v1063 = *(_QWORD *)&a1[v1062];
            v1064 = v1063 + 1;
            if (v1063 == -1 || v1064 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v1065 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1063);
              *(_QWORD *)&a1[v1062] = v1064;
              v1061 |= (unint64_t)(v1065 & 0x7F) << v1059;
              if (v1065 < 0)
              {
                v1059 += 7;
                v13 = v1060++ >= 9;
                if (v13)
                {
                  LOBYTE(v1061) = 0;
                  v105 = a1[*v4];
                  goto LABEL_2570;
                }
                continue;
              }
            }
            break;
          }
          v1066 = *v4;
          v105 = a1[v1066];
          if (a1[v1066])
            LOBYTE(v1061) = 0;
LABEL_2570:
          if (v105)
            v1067 = 1;
          else
            v1067 = (v1061 & 7) == 4;
          if (!v1067)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          goto LABEL_2293;
        }
      case 0x3Bu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v1068 = 0;
          v1069 = 0;
          v1070 = 0;
          while (2)
          {
            v1071 = *v2;
            v1072 = *(_QWORD *)&a1[v1071];
            v1073 = v1072 + 1;
            if (v1072 == -1 || v1073 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v1074 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1072);
              *(_QWORD *)&a1[v1071] = v1073;
              v1070 |= (unint64_t)(v1074 & 0x7F) << v1068;
              if (v1074 < 0)
              {
                v1068 += 7;
                v13 = v1069++ >= 9;
                if (v13)
                {
                  v1070 = 0;
                  v1075 = a1[*v4];
                  goto LABEL_2591;
                }
                continue;
              }
            }
            break;
          }
          v1075 = a1[*v4];
          if (a1[*v4])
            v1070 = 0;
LABEL_2591:
          v1076 = v1070 & 7;
          if (v1075)
            v1077 = 1;
          else
            v1077 = v1076 == 4;
          if (!v1077)
          {
            if ((v1070 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
            }
            if (v1076 == 2)
            {
              v1117 = 0;
              v1118 = 0;
              if (PBReaderPlaceMark())
              {
                if (GEOLocalizedStringIsValid(a1))
                {
                  PBReaderRecallMark();
                  continue;
                }
              }
            }
            goto LABEL_2687;
          }
          break;
        }
LABEL_2602:
        v1078 = a1[*v4];
        PBReaderRecallMark();
        if (v1078)
          goto LABEL_2688;
        goto LABEL_2603;
      case 0x3Cu:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_2688;
        v1117 = objc_msgSend(a1, "position");
        v1118 = objc_msgSend(a1, "length");
LABEL_2609:
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v1079 = 0;
          v1080 = 0;
          v1081 = 0;
          while (2)
          {
            v1082 = *v2;
            v1083 = *(_QWORD *)&a1[v1082];
            v1084 = v1083 + 1;
            if (v1083 == -1 || v1084 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v1085 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1083);
              *(_QWORD *)&a1[v1082] = v1084;
              v1081 |= (unint64_t)(v1085 & 0x7F) << v1079;
              if (v1085 < 0)
              {
                v1079 += 7;
                v13 = v1080++ >= 9;
                if (v13)
                {
                  v1081 = 0;
                  v1086 = a1[*v4];
                  goto LABEL_2621;
                }
                continue;
              }
            }
            break;
          }
          v1086 = a1[*v4];
          if (a1[*v4])
            v1081 = 0;
LABEL_2621:
          v1087 = v1081 & 7;
          if (v1086)
            v1088 = 1;
          else
            v1088 = v1087 == 4;
          if (!v1088)
          {
            if ((v1081 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_2687;
              continue;
            }
            if (v1087 == 2 && PBReaderPlaceMark())
            {
              v1119 = objc_msgSend(a1, "position");
              v1120 = objc_msgSend(a1, "length");
              while (1)
              {
                while (1)
                {
LABEL_2629:
                  if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                    goto LABEL_2659;
                  v1089 = 0;
                  v1090 = 0;
                  v1091 = 0;
                  while (1)
                  {
                    v1092 = *v2;
                    v1093 = *(_QWORD *)&a1[v1092];
                    v1094 = v1093 + 1;
                    if (v1093 == -1 || v1094 > *(_QWORD *)&a1[*v3])
                      break;
                    v1095 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1093);
                    *(_QWORD *)&a1[v1092] = v1094;
                    v1091 |= (unint64_t)(v1095 & 0x7F) << v1089;
                    if ((v1095 & 0x80) == 0)
                      goto LABEL_2639;
                    v1089 += 7;
                    v13 = v1090++ >= 9;
                    if (v13)
                    {
                      v1091 = 0;
                      v1096 = a1[*v4];
                      goto LABEL_2641;
                    }
                  }
                  a1[*v4] = 1;
LABEL_2639:
                  v1096 = a1[*v4];
                  if (a1[*v4])
                    v1091 = 0;
LABEL_2641:
                  if (v1096 || (v1091 & 7) == 4)
                  {
LABEL_2659:
                    v1103 = a1[*v4];
                    PBReaderRecallMark();
                    if (!v1103)
                    {
                      PBReaderRecallMark();
                      goto LABEL_2609;
                    }
                    goto LABEL_2687;
                  }
                  if ((v1091 >> 3) != 1)
                    break;
                  if ((v1091 & 7) != 0)
                    goto LABEL_2695;
                  v1098 = 0;
                  while (1)
                  {
                    v1099 = *v2;
                    v1100 = *(_QWORD *)&a1[v1099];
                    v1101 = v1100 + 1;
                    if (v1100 == -1 || v1101 > *(_QWORD *)&a1[*v3])
                      break;
                    v1102 = *(char *)(*(_QWORD *)&a1[*v5] + v1100);
                    *(_QWORD *)&a1[v1099] = v1101;
                    if (v1102 < 0)
                    {
                      v32 = v1098++ > 8;
                      if (!v32)
                        continue;
                    }
                    goto LABEL_2629;
                  }
                  a1[*v4] = 1;
                }
                if (!PBReaderSkipValueWithTag())
                {
LABEL_2695:
                  PBReaderRecallMark();
                  goto LABEL_2687;
                }
              }
            }
            goto LABEL_2687;
          }
          break;
        }
        v1113 = a1[*v4];
        PBReaderRecallMark();
        if (v1113)
          goto LABEL_2688;
        goto LABEL_2603;
      case 0x3Eu:
        if (v15 != 2)
          goto LABEL_2688;
        v1117 = 0;
        v1118 = 0;
        if (!PBReaderPlaceMark())
          goto LABEL_2688;
        v1119 = objc_msgSend(a1, "position");
        v1120 = objc_msgSend(a1, "length");
        while (2)
        {
          v105 = a1[*v4];
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_2293;
          if (a1[*v4])
            goto LABEL_2687;
          v1104 = 0;
          v1105 = 0;
          v1106 = 0;
          while (2)
          {
            v1107 = *v2;
            v1108 = *(_QWORD *)&a1[v1107];
            v1109 = v1108 + 1;
            if (v1108 == -1 || v1109 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v1110 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v1108);
              *(_QWORD *)&a1[v1107] = v1109;
              v1106 |= (unint64_t)(v1110 & 0x7F) << v1104;
              if (v1110 < 0)
              {
                v1104 += 7;
                v13 = v1105++ >= 9;
                if (v13)
                {
                  LOBYTE(v1106) = 0;
                  v105 = a1[*v4];
                  goto LABEL_2676;
                }
                continue;
              }
            }
            break;
          }
          v1111 = *v4;
          v105 = a1[v1111];
          if (a1[v1111])
            LOBYTE(v1106) = 0;
LABEL_2676:
          if (v105)
            v1112 = 1;
          else
            v1112 = (v1106 & 7) == 4;
          if (!v1112)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_2687;
            continue;
          }
          goto LABEL_2293;
        }
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_2688;
        goto LABEL_2604;
    }
  }
}

