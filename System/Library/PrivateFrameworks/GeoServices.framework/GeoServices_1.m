void sub_188648A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_188648C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

long double CAAPhysicalMoon::CalculateTopocentric@<D0>(double a1@<D0>, double a2@<D1>, double a3@<D2>, double *a4@<X8>)
{
  __double2 v7;
  CAAMoon *v8;
  double v9;
  double v10;
  __double2 v11;
  CAASidereal *v12;
  double v13;
  __double2 v14;
  long double v15;
  long double v16;
  double v17;
  long double v18;
  double v19;
  __double2 v20;
  double v21;
  long double v22;
  long double v23;
  double v24;
  double v25;
  long double result;
  long double v27;
  double v28;
  long double __x;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;

  v28 = a2 * 0.0174532925;
  v7 = __sincos_stret(a3 * 0.0174532925);
  v33 = 0;
  v34 = 0;
  v30 = 0.0;
  v31 = 0.0;
  CAAPhysicalMoon::CalculateHelper((CAAMoon *)&v34, (double *)&v33, &v32, (uint64_t)&v30, a4, a1);
  v9 = CAAMoon::RadiusVector(v8, a1);
  v27 = asin(6378.14 / v9) * 57.2957795;
  v10 = v30 * 0.261799388;
  __x = v31 * 0.0174532925;
  v11 = __sincos_stret(v31 * 0.0174532925);
  CAASidereal::ApparentGreenwichSiderealTime(v12, a1);
  v14 = __sincos_stret(v13 * 0.261799388 - v28 - v10);
  v15 = atan2(v7.__cosval * v14.__sinval, -(v11.__sinval * v7.__cosval) * v14.__cosval + v11.__cosval * v7.__sinval);
  v16 = acos(v7.__cosval * v11.__cosval * v14.__cosval + v11.__sinval * v7.__sinval);
  v17 = sin(v16);
  v18 = v27 * (v17 + sin(v16 + v16) * 0.0084);
  v19 = a4[6];
  v20 = __sincos_stret(v15 - v19 * 0.0174532925);
  v21 = a4[5];
  v22 = -(v18 * v20.__sinval) / cos(v21 * 0.0174532925);
  v23 = v21 + v18 * v20.__cosval;
  a4[4] = a4[4] + v22;
  a4[5] = v23;
  v24 = sin(v23 * 0.0174532925);
  v25 = sin(v15);
  result = v19 + -(v18 * v25) * tan(__x) + v22 * v24;
  a4[6] = result;
  return result;
}

long double CAAPhysicalMoon::CalculateHelper@<D0>(CAAMoon *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>, double a6@<D0>)
{
  uint64_t v12;
  CAAMoon *v13;
  long double v14;
  __double2 v15;
  CAANutation *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  CAANutation *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  __double2 v32;
  double v33;
  double v34;
  __double2 v35;
  double v36;
  double v37;
  double v38;
  double v39;
  __double2 v40;
  __double2 v41;
  __double2 v42;
  __double2 v43;
  __double2 v44;
  __double2 v45;
  __double2 v46;
  __double2 v47;
  __double2 v48;
  __double2 v49;
  double v50;
  __double2 v51;
  long double v52;
  long double v53;
  long double v54;
  long double v55;
  long double v56;
  long double v57;
  long double v58;
  long double v59;
  long double v60;
  long double v61;
  long double v62;
  long double v63;
  __double2 v64;
  __double2 v65;
  __double2 v66;
  long double v67;
  double v68;
  CAACoordinateTransformation *v69;
  double v70;
  uint64_t v71;
  long double v72;
  long double v73;
  long double result;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  long double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  long double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;

  CAAMoon::EclipticLongitude(a1, a6);
  *(_QWORD *)a1 = v12;
  v14 = CAAMoon::EclipticLatitude(v13, a6);
  *a2 = v14;
  v82 = *(double *)a1 * 0.0174532925;
  v15 = __sincos_stret(v14 * 0.0174532925);
  v90 = CAANutation::NutationInLongitude(v16, a6) / 3600.0 * 0.0174532925;
  v17 = a6 + -2451545.0;
  v18 = (a6 + -2451545.0) / 36525.0;
  v19 = v18 * v18;
  v20 = v18 * (v18 * v18);
  v87 = v20;
  v21 = v18 * v20;
  v88 = v18 * v20;
  v22 = fmod(v18 * 483202.018 + 93.272095 + v18 * v18 * -0.0036539 + v20 / -3526000.0 + v18 * v20 / 863310000.0, 360.0);
  if (v22 < 0.0)
    v22 = v22 + 360.0;
  v84 = v22 * 0.0174532925;
  v24 = fmod(v18 * -1934.13629 + 125.044548 + v19 * 0.0020754 + v18 * (v18 * v18) / 467441.0 + v21 / -60616000.0, 360.0);
  if (v24 < 0.0)
    v24 = v24 + 360.0;
  v25 = v24 * 0.0174532925;
  v89 = v24 * 0.0174532925;
  v26 = v17 / 3652500.0;
  v27 = v26 * (v26 * v26);
  v28 = v17 / 3652500.0 * v27;
  v29 = v17 / 3652500.0 * v28;
  v30 = v17 / 3652500.0 * v29;
  v31 = v17 / 3652500.0 * v30;
  v83 = v17 / 3652500.0 * -1.30025833
      + 23.4392911
      + v26 * v26 * -0.000430555556
      + v27 * 0.555347222
      + v28 * -0.0142722222
      + v29 * -0.0693527778
      + v30 * -0.0108472222
      + v31 * 0.00197777778
      + v17 / 3652500.0 * v31 * 0.00774166667
      + v17 / 3652500.0 * (v17 / 3652500.0 * v31) * 0.00160833333
      + v17 / 3652500.0 * (v17 / 3652500.0 * (v17 / 3652500.0 * v31)) * 0.000680555556
      + CAANutation::NutationInObliquity(v23, a6) / 3600.0;
  *a3 = v83;
  v32 = __sincos_stret(v82 - v90 - v25);
  v33 = atan2(v15.__sinval * -0.026917056 + v15.__cosval * v32.__sinval * 0.99963767, v15.__cosval * v32.__cosval);
  v34 = fmod(v33 * 57.2957795 - v84 * 57.2957795, 360.0);
  if (v34 < 0.0)
    v34 = v34 + 360.0;
  if (v34 > 180.0)
    v34 = v34 + -360.0;
  v81 = v34;
  *a5 = v34;
  v35 = __sincos_stret(v33);
  v86 = v84 + v84;
  v80 = asin(v15.__sinval * -0.99963767 + v15.__cosval * v32.__sinval * -0.026917056);
  v36 = fmod(v18 * 35999.0503 + 357.529109 + v19 * -0.0001536 + v87 / 24490000.0, 360.0);
  if (v36 < 0.0)
    v36 = v36 + 360.0;
  v79 = v36 * 0.0174532925;
  v37 = fmod(v18 * 477198.868 + 134.963396 + v19 * 0.0087414 + v87 / 69699.0 + v88 / -14712000.0, 360.0);
  if (v37 < 0.0)
    v37 = v37 + 360.0;
  v38 = v37 * 0.0174532925;
  v76 = v38 + v38;
  v39 = fmod(v18 * 445267.111 + 297.850192 + v19 * -0.0018819 + v87 / 545868.0 + v88 / -113065000.0, 360.0);
  if (v39 < 0.0)
    v39 = v39 + 360.0;
  v78 = v39 * 0.0174532925;
  v40 = __sincos_stret(v38);
  v41 = __sincos_stret(v84);
  v42 = __sincos_stret(v38 - v86);
  v43 = __sincos_stret(v86);
  v44 = __sincos_stret(v86 - (v78 + v78));
  v45 = __sincos_stret(v38 - (v78 + v78));
  v46 = __sincos_stret(v84 + v38);
  v47 = __sincos_stret(v38 + v86);
  v48 = __sincos_stret(v38 - v84);
  v49 = __sincos_stret(v38 + v86 - (v78 + v78));
  v77 = v41.__sinval * -0.02245
      + v40.__cosval * -0.02752
      + v42.__cosval * 0.00684
      + v43.__cosval * -0.00293
      + v44.__cosval * -0.00085
      + v45.__cosval * -0.00054
      + v46.__sinval * -0.0002
      + v47.__cosval * -0.0002
      + v48.__cosval * -0.0002
      + v49.__cosval * 0.00014;
  v75 = sin(v76);
  v85 = v41.__cosval * 0.02244
      + v40.__sinval * -0.02816
      + v42.__sinval * -0.00682
      + v43.__sinval * -0.00279
      + v44.__sinval * -0.00083
      + v45.__sinval * 0.00069
      + v46.__cosval * 0.0004
      + v75 * -0.00025
      + v47.__sinval * -0.00023
      + v48.__cosval * 0.0002
      + v48.__sinval * 0.00019
      + v49.__sinval * 0.00013
      + cos(v38 + v84 * -3.0) * -0.0001;
  v50 = sin(v79);
  v51 = __sincos_stret(v76 - v86);
  v52 = v51.__sinval * 0.00473
      + (v18 * -0.002516 + 1.0 + v19 * -0.0000074) * 0.0252 * v50
      + v40.__sinval * -0.00467
      + sin((v18 * 131.849 + 119.75) * 0.0174532925) * 0.00396;
  v53 = v52 + sin(v76 - (v78 + v78)) * 0.00276;
  v54 = v53 + sin(v89) * 0.00196 + v48.__cosval * -0.00183 + v45.__sinval * 0.00115;
  v55 = v54 + sin(v38 - v78) * -0.00096 + v44.__sinval * 0.00046 + v48.__sinval * -0.00039;
  v56 = v55 + sin(v38 - v79 - v78) * -0.00032;
  v57 = v56 + sin(v76 - v79 - (v78 + v78)) * 0.00027;
  v58 = v57 + sin((v18 * 20.186 + 72.56) * 0.0174532925) * 0.00023;
  v59 = v58 + sin(v78 + v78) * -0.00014 + v51.__cosval * 0.00014 + v42.__sinval * -0.00012 + v75 * -0.00012;
  v60 = -(v59 + sin(v76 + v79 * -2.0 - (v78 + v78)) * 0.00011 - v77 * v35.__cosval);
  v61 = v60 + v85 * v35.__sinval * tan(v80);
  a5[1] = v80 * 57.2957795;
  a5[2] = v61;
  v62 = v85 * v35.__cosval - v77 * v35.__sinval;
  a5[3] = v62;
  a5[4] = v61 + v81;
  a5[5] = v80 * 57.2957795 + v62;
  v63 = (v80 * 57.2957795 + v62) * 0.0174532925;
  v64 = __sincos_stret(v77 * 0.0174532925 + 0.0269203074);
  v65 = __sincos_stret(v85 * 0.0174532925 / 0.026917056 + v89 + v90);
  v66 = __sincos_stret(v83 * 0.0174532925);
  v67 = v64.__sinval * v65.__cosval * v66.__cosval - v64.__cosval * v66.__sinval;
  v68 = atan2(v64.__sinval * v65.__sinval, v67);
  v70 = CAACoordinateTransformation::Ecliptic2Equatorial(v69, *(double *)a1, *a2, v83);
  *(double *)a4 = v70;
  *(_QWORD *)(a4 + 8) = v71;
  v72 = sqrt(v67 * v67 + v64.__sinval * v65.__sinval * (v64.__sinval * v65.__sinval)) * cos(v70 * 0.261799388 - v68);
  v73 = cos(v63);
  result = asin(v72 / v73) * 57.2957795;
  a5[6] = result;
  return result;
}

void sub_188649A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _GEORadiusVector(CAAMoon *a1, CAAUranus *this, double result)
{
  switch((unint64_t)a1)
  {
    case 0uLL:
    case 3uLL:
      result = CAAEarth::RadiusVector(this, result);
      break;
    case 1uLL:
      result = CAAMercury::RadiusVector(this, result);
      break;
    case 2uLL:
      result = CAAVenus::RadiusVector(this, result);
      break;
    case 4uLL:
      result = CAAMoon::RadiusVector(a1, result);
      break;
    case 5uLL:
      result = CAAMars::RadiusVector(this, result);
      break;
    case 6uLL:
      result = CAAJupiter::RadiusVector(this, result);
      break;
    case 7uLL:
      result = CAASaturn::RadiusVector(this, result);
      break;
    case 8uLL:
      result = CAAUranus::RadiusVector(this, result);
      break;
    case 9uLL:
      result = CAANeptune::RadiusVector(this, result);
      break;
    case 0xAuLL:
      result = CAAPluto::RadiusVector(a1, result);
      break;
    default:
      return result;
  }
  return result;
}

void sub_188649C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double GEOConfigGetDouble(int a1, uint64_t a2)
{
  void *v2;
  double v3;
  double v4;

  _getValue(a1, a2, 1, 0, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "doubleValue");
  v4 = v3;

  return v4;
}

long double CAAParallactic::ParallacticAngle(CAAParallactic *this, double a2, double a3, double a4)
{
  long double v4;
  double v5;
  __double2 v6;
  double v7;
  __double2 v8;

  v4 = a3 * 0.0174532925;
  v5 = a4 * 0.0174532925;
  v6 = __sincos_stret(a2 * 0.261799388);
  v7 = tan(v4);
  v8 = __sincos_stret(v5);
  return atan2(v6.__sinval, v7 * v8.__cosval - v8.__sinval * v6.__cosval) * 57.2957795;
}

void addr_obj::protobuf_AddDesc_AddressObject_2eproto(addr_obj *this, uint64_t a2, uint64_t a3, const char *a4)
{
  addr_obj::geo3 *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  addr_obj::LocalizationProto *v8;
  addr_obj::FingerprintProto *v9;
  addr_obj::AddressObjectProto *v10;
  addr_obj::AddressObjectProto *v11;
  addr_obj::V0AddressObjectProto *inited;
  addr_obj::V1AddressObjectProto *v13;
  addr_obj::geo3::Address *v14;
  addr_obj::geo3::StructuredAddress *v15;
  addr_obj::geo3::Address *v16;
  addr_obj::V2AddressObjectProto *v17;
  addr_obj::V1AddressObjectProto *v18;
  addr_obj::V2AddressObjectProto *v19;
  uint64_t v20;
  addr_obj::VenueDecoratorProto *v21;
  addr_obj::VenueFieldProto *v22;
  addr_obj::VenueTemplateProto *v23;
  addr_obj::VenueFormatterProto *v24;
  addr_obj::VenueInfoProto *v25;
  addr_obj::V3AddressObjectProto *v26;
  addr_obj::VenueInfoProto *v27;
  addr_obj::V1AddressObjectProto *v28;
  addr_obj::V3AddressObjectProto *v29;
  uint64_t v30;
  addr_obj::V4AddressObjectProto *v31;
  addr_obj::VenueInfoProto *v32;
  addr_obj::V2AddressObjectProto *v33;
  addr_obj::V4AddressObjectProto *v34;
  uint64_t v35;
  void (*v36)(void);

  if ((byte_1EDF50338 & 1) == 0)
  {
    byte_1EDF50338 = 1;
    AddrObjGoogle::protobuf::internal::VerifyVersion((AddrObjGoogle::protobuf::internal *)0x1E9808, (AddrObjGoogle::protobuf::internal *)0x1E9808, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", a4);
    addr_obj::geo3::protobuf_AddDesc_geo3_2dslim_2eproto(v4, v5, v6, v7);
    AddrObjGoogle::protobuf::DescriptorPool::InternalAddGeneratedFile((AddrObjGoogle::protobuf::DescriptorPool *)&unk_189C5C470, (const void *)0xA09);
    AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedFile("AddressObject.proto", (std::string::size_type)sub_1887E9ADC);
    v9 = (addr_obj::FingerprintProto *)addr_obj::LocalizationProto::default_instance_(v8);
    v10 = (addr_obj::AddressObjectProto *)addr_obj::FingerprintProto::default_instance_(v9);
    v11 = (addr_obj::AddressObjectProto *)addr_obj::AddressObjectProto::default_instance_(v10);
    inited = (addr_obj::V0AddressObjectProto *)addr_obj::AddressObjectProto::InitAsDefaultInstance(v11);
    v13 = (addr_obj::V1AddressObjectProto *)addr_obj::V0AddressObjectProto::default_instance_(inited);
    v14 = (addr_obj::geo3::Address *)addr_obj::V1AddressObjectProto::default_instance_(v13);
    v15 = (addr_obj::geo3::StructuredAddress *)addr_obj::geo3::Address::default_instance(v14);
    *((_QWORD *)v14 + 6) = v15;
    v16 = (addr_obj::geo3::Address *)addr_obj::geo3::StructuredAddress::default_instance(v15);
    *((_QWORD *)v14 + 9) = v16;
    v17 = (addr_obj::V2AddressObjectProto *)addr_obj::geo3::Address::default_instance(v16);
    *((_QWORD *)v14 + 11) = v17;
    v18 = (addr_obj::V1AddressObjectProto *)addr_obj::V2AddressObjectProto::default_instance_(v17);
    v19 = (addr_obj::V2AddressObjectProto *)addr_obj::V1AddressObjectProto::default_instance(v18);
    v20 = addr_obj::V2AddressObjectProto::default_instance(v19);
    AddrObjGoogle::protobuf::internal::ExtensionSet::RegisterMessageExtension((uint64_t)v19, 0x64u, 11, 0, 0, v20);
    v22 = (addr_obj::VenueFieldProto *)addr_obj::VenueDecoratorProto::default_instance_(v21);
    v23 = (addr_obj::VenueTemplateProto *)addr_obj::VenueFieldProto::default_instance_(v22);
    v24 = (addr_obj::VenueFormatterProto *)addr_obj::VenueTemplateProto::default_instance_(v23);
    v25 = (addr_obj::VenueInfoProto *)addr_obj::VenueFormatterProto::default_instance_(v24);
    v26 = (addr_obj::V3AddressObjectProto *)addr_obj::VenueInfoProto::default_instance_(v25);
    v27 = (addr_obj::VenueInfoProto *)addr_obj::V3AddressObjectProto::default_instance_(v26);
    v28 = (addr_obj::V1AddressObjectProto *)addr_obj::VenueInfoProto::default_instance(v27);
    *((_QWORD *)v27 + 2) = v28;
    v29 = (addr_obj::V3AddressObjectProto *)addr_obj::V1AddressObjectProto::default_instance(v28);
    v30 = addr_obj::V3AddressObjectProto::default_instance(v29);
    AddrObjGoogle::protobuf::internal::ExtensionSet::RegisterMessageExtension((uint64_t)v29, 0x65u, 11, 0, 0, v30);
    v32 = (addr_obj::VenueInfoProto *)addr_obj::V4AddressObjectProto::default_instance_(v31);
    v33 = (addr_obj::V2AddressObjectProto *)addr_obj::VenueInfoProto::default_instance(v32);
    *((_QWORD *)v32 + 2) = v33;
    v34 = (addr_obj::V4AddressObjectProto *)addr_obj::V2AddressObjectProto::default_instance(v33);
    v35 = addr_obj::V4AddressObjectProto::default_instance(v34);
    AddrObjGoogle::protobuf::internal::ExtensionSet::RegisterMessageExtension((uint64_t)v34, 0x66u, 11, 0, 0, v35);
    AddrObjGoogle::protobuf::internal::OnShutdown((AddrObjGoogle::protobuf::internal *)addr_obj::protobuf_ShutdownFile_AddressObject_2eproto, v36);
  }
}

uint64_t addr_obj::VenueInfoProto::default_instance_(addr_obj::VenueInfoProto *this)
{
  unsigned __int8 v1;
  addr_obj::VenueInfoProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50498);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50498))
  {
    v3 = (addr_obj::VenueInfoProto *)operator new();
    addr_obj::VenueInfoProto::VenueInfoProto(v3);
    qword_1EDF50490 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50498);
  }
  return qword_1EDF50490;
}

void sub_188649F14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40A7563026);
  __cxa_guard_abort(&qword_1EDF50498);
  _Unwind_Resume(a1);
}

void addr_obj::AddressObjectBase::~AddressObjectBase(void **this)
{
  void **v2;

  *this = off_1E1BF97A8;
  addr_obj::AddressObjectProto::~AddressObjectProto((addr_obj::AddressObjectProto *)(this + 17));
  v2 = this + 14;
  std::vector<addr_obj::Fingerprints::Fingerprint>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

void addr_obj::AddressObjectProto::~AddressObjectProto(addr_obj::AddressObjectProto *this)
{
  *(_QWORD *)this = &off_1E1BF99A0;
  addr_obj::AddressObjectProto::SharedDtor(this);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 4);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::AddressObjectProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

{
  addr_obj::AddressObjectProto::~AddressObjectProto(this);
  JUMPOUT(0x18D76437CLL);
}

addr_obj::AddressObjectProto *addr_obj::AddressObjectProto::SharedDtor(addr_obj::AddressObjectProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  addr_obj::AddressObjectProto *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  result = (addr_obj::AddressObjectProto *)addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)v3);
  if (result != this)
  {
    v6 = *((_QWORD *)this + 3);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 8);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    result = (addr_obj::AddressObjectProto *)*((_QWORD *)this + 9);
    if (result)
      return (addr_obj::AddressObjectProto *)(*(uint64_t (**)(addr_obj::AddressObjectProto *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t addr_obj::AddressObjectProto::default_instance_(addr_obj::AddressObjectProto *this)
{
  unsigned __int8 v1;
  addr_obj::AddressObjectProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50418);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50418))
  {
    v3 = (addr_obj::AddressObjectProto *)operator new();
    addr_obj::AddressObjectProto::AddressObjectProto(v3);
    qword_1EDF50410 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50418);
  }
  return qword_1EDF50410;
}

void sub_18864A154(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C401C489FCDLL);
  __cxa_guard_abort(&qword_1EDF50418);
  _Unwind_Resume(a1);
}

void addr_obj::LocalizationProto::~LocalizationProto(addr_obj::LocalizationProto *this)
{
  addr_obj::LocalizationProto::~LocalizationProto(this);
  JUMPOUT(0x18D76437CLL);
}

{
  *(_QWORD *)this = &off_1E1BF98F0;
  addr_obj::LocalizationProto::SharedDtor(this);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::LocalizationProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

uint64_t addr_obj::LocalizationProto::default_instance_(addr_obj::LocalizationProto *this)
{
  unsigned __int8 v1;
  addr_obj::LocalizationProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50478);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50478))
  {
    v3 = (addr_obj::LocalizationProto *)operator new();
    addr_obj::LocalizationProto::LocalizationProto(v3);
    qword_1EDF50470 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50478);
  }
  return qword_1EDF50470;
}

void sub_18864A264(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40E7EDF326);
  __cxa_guard_abort(&qword_1EDF50478);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::LocalizationProto::SharedDtor(addr_obj::LocalizationProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  v5 = (uint64_t *)*((_QWORD *)this + 3);
  v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  if (v5 != v6)
  {
    v7 = *((_QWORD *)this + 3);
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      v6 = (uint64_t *)MEMORY[0x18D76437C](v7, 0x1012C40EC159624);
    }
  }
  v8 = (uint64_t *)*((_QWORD *)this + 4);
  v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  if (v8 != v9)
  {
    v10 = *((_QWORD *)this + 4);
    if (v10)
    {
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      v9 = (uint64_t *)MEMORY[0x18D76437C](v10, 0x1012C40EC159624);
    }
  }
  return addr_obj::LocalizationProto::default_instance_((addr_obj::LocalizationProto *)v9);
}

void addr_obj::FingerprintProto::~FingerprintProto(addr_obj::FingerprintProto *this)
{
  addr_obj::FingerprintProto::~FingerprintProto(this);
  JUMPOUT(0x18D76437CLL);
}

{
  *(_QWORD *)this = &off_1E1BF96F8;
  addr_obj::FingerprintProto::SharedDtor(this);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::FingerprintProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

uint64_t addr_obj::FingerprintProto::default_instance_(addr_obj::FingerprintProto *this)
{
  unsigned __int8 v1;
  addr_obj::FingerprintProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50488);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50488))
  {
    v3 = (addr_obj::FingerprintProto *)operator new();
    addr_obj::FingerprintProto::FingerprintProto(v3);
    qword_1EDF50480 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50488);
  }
  return qword_1EDF50480;
}

void sub_18864A44C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C400739E6B9);
  __cxa_guard_abort(&qword_1EDF50488);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::FingerprintProto::SharedDtor(addr_obj::FingerprintProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  v5 = (uint64_t *)*((_QWORD *)this + 4);
  v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  if (v5 != v6)
  {
    v7 = *((_QWORD *)this + 4);
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      v6 = (uint64_t *)MEMORY[0x18D76437C](v7, 0x1012C40EC159624);
    }
  }
  v8 = (uint64_t *)*((_QWORD *)this + 5);
  v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  if (v8 != v9)
  {
    v10 = *((_QWORD *)this + 5);
    if (v10)
    {
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      v9 = (uint64_t *)MEMORY[0x18D76437C](v10, 0x1012C40EC159624);
    }
  }
  return addr_obj::FingerprintProto::default_instance_((addr_obj::FingerprintProto *)v9);
}

uint64_t addr_obj::V1AddressObject::V1AddressObject(uint64_t a1, __int128 *a2, __int128 **a3, uint64_t a4, int *a5)
{
  _QWORD *v7;
  addr_obj::AddressObjectProto *v8;
  addr_obj::VenueInfo *v9;
  const addr_obj::VenueInfoProto *v10;

  v7 = (_QWORD *)addr_obj::AddressObjectBase::AddressObjectBase(a1, a5, a2, a3);
  *v7 = &off_1E1BF93B8;
  v7[31] = 0;
  v7[32] = 0;
  v7[33] = 0;
  addr_obj::geo3::Address::Address((addr_obj::geo3::Address *)(v7 + 34));
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  addr_obj::geo3::StructuredAddress::StructuredAddress((addr_obj::geo3::StructuredAddress *)(a1 + 384));
  *(_QWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  addr_obj::geo3::Address::Address((addr_obj::geo3::Address *)(a1 + 656));
  *(_QWORD *)(a1 + 720) = 0;
  if ((*(_BYTE *)(a4 + 88) & 0x40) != 0)
  {
    v8 = (addr_obj::AddressObjectProto *)operator new();
    v9 = v8;
    v10 = *(const addr_obj::VenueInfoProto **)(a4 + 72);
    if (!v10)
      v10 = *(const addr_obj::VenueInfoProto **)(addr_obj::AddressObjectProto::default_instance_(v8) + 72);
    addr_obj::VenueInfo::VenueInfo(v9, v10);
    std::unique_ptr<addr_obj::VenueInfo const>::reset[abi:ne180100]((void ****)(a1 + 720), (void ***)v9);
  }
  addr_obj::V1AddressObject::init((addr_obj::V1AddressObject *)a1, (std::string::size_type *)a4);
  return a1;
}

void sub_18864A668(_Unwind_Exception *a1)
{
  uint64_t v1;
  addr_obj::geo3::Address *v2;
  addr_obj::geo3::StructuredAddress *v3;
  addr_obj::geo3::Address *v4;
  void ****v5;
  uint64_t v6;
  void **v7;
  void **v8;

  MEMORY[0x18D76437C](v6, 0x20C40DC1BFBCFLL);
  std::unique_ptr<addr_obj::VenueInfo const>::reset[abi:ne180100](v5, 0);
  addr_obj::geo3::Address::~Address(v4);
  if (*(char *)(v1 + 655) < 0)
    operator delete(*v8);
  addr_obj::geo3::StructuredAddress::~StructuredAddress(v3);
  if (*(char *)(v1 + 383) < 0)
    operator delete(*(void **)(v1 + 360));
  if (*(char *)(v1 + 359) < 0)
    operator delete(*(void **)(v1 + 336));
  addr_obj::geo3::Address::~Address(v2);
  if (*(char *)(v1 + 271) < 0)
    operator delete(*v7);
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V1AddressObjectProto::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  void ***v6;
  uint64_t **v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  std::string *v12;
  const AddrObjGoogle::protobuf::Message *v13;
  _BYTE *v14;
  addr_obj::geo3::Address *v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  AddrObjGoogle::protobuf::UnknownFieldSet *v21;
  int v22;
  BOOL v23;
  int v24;
  _BYTE *v25;
  uint64_t *v26;
  std::string *v27;
  _BYTE *v28;
  uint64_t *v29;
  std::string *v30;
  _BYTE *v31;
  addr_obj::geo3::StructuredAddress *v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  AddrObjGoogle::protobuf::UnknownFieldSet *v38;
  int v39;
  int v40;
  _BYTE *v41;
  uint64_t *v42;
  std::string *v43;
  _BYTE *v44;
  addr_obj::geo3::Address *v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  AddrObjGoogle::protobuf::UnknownFieldSet *v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;

  v5 = this;
  v6 = (void ***)(this + 32);
  v7 = (uint64_t **)(this + 8);
  while (1)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && (*v8 & 0x80000000) == 0)
    {
      v9 = *v8;
      *((_DWORD *)a2 + 8) = v9;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)v9)
        return 1;
      goto LABEL_7;
    }
    this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    v9 = this;
    *((_DWORD *)a2 + 8) = this;
    if (!(_DWORD)this)
      return 1;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_23;
        *(_DWORD *)(v5 + 100) |= 1u;
        v11 = *(uint64_t **)(v5 + 40);
        if (v11 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v12 = (std::string *)operator new();
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 40) = v12;
        }
        else
        {
          v12 = *(std::string **)(v5 + 40);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v12);
        if ((_DWORD)this)
        {
          v14 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v14 < *((_QWORD *)a2 + 2) && *v14 == 18)
          {
            *((_QWORD *)a2 + 1) = v14 + 1;
            goto LABEL_34;
          }
          continue;
        }
        return this;
      case 2u:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_23;
LABEL_34:
        *(_DWORD *)(v5 + 100) |= 2u;
        v15 = *(addr_obj::geo3::Address **)(v5 + 48);
        if (!v15)
        {
          v15 = (addr_obj::geo3::Address *)operator new();
          addr_obj::geo3::Address::Address(v15);
          *(_QWORD *)(v5 + 48) = v15;
        }
        v54 = 0;
        v16 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v16 >= *((_QWORD *)a2 + 2) || *v16 < 0)
        {
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v54))
            return 0;
        }
        else
        {
          v54 = *v16;
          *((_QWORD *)a2 + 1) = v16 + 1;
        }
        v17 = *((_DWORD *)a2 + 14);
        v18 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v17 + 1;
        if (v17 >= v18)
          return 0;
        v19 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v54);
        if (!addr_obj::geo3::Address::MergePartialFromCodedStream((uint64_t)v15, a2, v20, v21)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v19);
        v22 = *((_DWORD *)a2 + 14);
        v23 = __OFSUB__(v22, 1);
        v24 = v22 - 1;
        if (v24 < 0 == v23)
          *((_DWORD *)a2 + 14) = v24;
        v25 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v25 >= *((_QWORD *)a2 + 2) || *v25 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v25 + 1;
        goto LABEL_48;
      case 3u:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_23;
LABEL_48:
        *(_DWORD *)(v5 + 100) |= 4u;
        v26 = *(uint64_t **)(v5 + 56);
        if (v26 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v27 = (std::string *)operator new();
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 56) = v27;
        }
        else
        {
          v27 = *(std::string **)(v5 + 56);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v27);
        if (!(_DWORD)this)
          return this;
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v28 >= *((_QWORD *)a2 + 2) || *v28 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v28 + 1;
LABEL_55:
        *(_DWORD *)(v5 + 100) |= 8u;
        v29 = *(uint64_t **)(v5 + 64);
        if (v29 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v30 = (std::string *)operator new();
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 64) = v30;
        }
        else
        {
          v30 = *(std::string **)(v5 + 64);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v30);
        if (!(_DWORD)this)
          return this;
        v31 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v31 >= *((_QWORD *)a2 + 2) || *v31 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v31 + 1;
LABEL_62:
        *(_DWORD *)(v5 + 100) |= 0x10u;
        v32 = *(addr_obj::geo3::StructuredAddress **)(v5 + 72);
        if (!v32)
        {
          v32 = (addr_obj::geo3::StructuredAddress *)operator new();
          addr_obj::geo3::StructuredAddress::StructuredAddress(v32);
          *(_QWORD *)(v5 + 72) = v32;
        }
        v55 = 0;
        v33 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v33 >= *((_QWORD *)a2 + 2) || *v33 < 0)
        {
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v55))
            return 0;
        }
        else
        {
          v55 = *v33;
          *((_QWORD *)a2 + 1) = v33 + 1;
        }
        v34 = *((_DWORD *)a2 + 14);
        v35 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v34 + 1;
        if (v34 >= v35)
          return 0;
        v36 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v55);
        if (!addr_obj::geo3::StructuredAddress::MergePartialFromCodedStream((uint64_t)v32, a2, v37, v38)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v36);
        v39 = *((_DWORD *)a2 + 14);
        v23 = __OFSUB__(v39, 1);
        v40 = v39 - 1;
        if (v40 < 0 == v23)
          *((_DWORD *)a2 + 14) = v40;
        v41 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v41 >= *((_QWORD *)a2 + 2) || *v41 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v41 + 1;
LABEL_76:
        *(_DWORD *)(v5 + 100) |= 0x20u;
        v42 = *(uint64_t **)(v5 + 80);
        if (v42 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v43 = (std::string *)operator new();
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 80) = v43;
        }
        else
        {
          v43 = *(std::string **)(v5 + 80);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v43);
        if (!(_DWORD)this)
          return this;
        v44 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v44 >= *((_QWORD *)a2 + 2) || *v44 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v44 + 1;
LABEL_83:
        *(_DWORD *)(v5 + 100) |= 0x40u;
        v45 = *(addr_obj::geo3::Address **)(v5 + 88);
        if (!v45)
        {
          v45 = (addr_obj::geo3::Address *)operator new();
          addr_obj::geo3::Address::Address(v45);
          *(_QWORD *)(v5 + 88) = v45;
        }
        v56 = 0;
        v46 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v46 >= *((_QWORD *)a2 + 2) || *v46 < 0)
        {
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v56))
            return 0;
        }
        else
        {
          v56 = *v46;
          *((_QWORD *)a2 + 1) = v46 + 1;
        }
        v47 = *((_DWORD *)a2 + 14);
        v48 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v47 + 1;
        if (v47 >= v48)
          return 0;
        v49 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v56);
        if (!addr_obj::geo3::Address::MergePartialFromCodedStream((uint64_t)v45, a2, v50, v51)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v49);
        v52 = *((_DWORD *)a2 + 14);
        v23 = __OFSUB__(v52, 1);
        v53 = v52 - 1;
        if (v53 < 0 == v23)
          *((_DWORD *)a2 + 14) = v53;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          this = 1;
          *((_BYTE *)a2 + 36) = 1;
          return this;
        }
        break;
      case 4u:
        v10 = v9 & 7;
        if (v10 == 2)
          goto LABEL_55;
        goto LABEL_23;
      case 5u:
        v10 = v9 & 7;
        if (v10 == 2)
          goto LABEL_62;
        goto LABEL_23;
      case 6u:
        v10 = v9 & 7;
        if (v10 == 2)
          goto LABEL_76;
        goto LABEL_23;
      case 7u:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_23;
        goto LABEL_83;
      default:
        v10 = v9 & 7;
LABEL_23:
        if (v10 == 4)
          return 1;
        if ((v9 - 800) > 0x31F)
        {
          this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, (AddrObjGoogle::protobuf::io::CodedInputStream *)v9, v6, a4);
          if ((this & 1) == 0)
            return 0;
        }
        else
        {
          v13 = (const AddrObjGoogle::protobuf::Message *)addr_obj::V1AddressObjectProto::default_instance_((addr_obj::V1AddressObjectProto *)this);
          this = AddrObjGoogle::protobuf::internal::ExtensionSet::ParseField(v7, v9, a2, v13, (AddrObjGoogle::protobuf::UnknownFieldSet *)v6);
          if ((this & 1) == 0)
            return 0;
        }
        continue;
    }
  }
}

void sub_18864AD50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40C067BF1BLL);
  _Unwind_Resume(a1);
}

addr_obj::geo3::Address *addr_obj::geo3::Address::Address(addr_obj::geo3::Address *this)
{
  *(_QWORD *)this = &off_1E1BFA130;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  return this;
}

void sub_18864ADD4(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;

  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::geo3::Address::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  int *v6;
  void ***v7;
  char *v8;
  AddrObjGoogle::protobuf::io::CodedInputStream *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  addr_obj::geo3::StructuredAddress *v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  AddrObjGoogle::protobuf::UnknownFieldSet *v28;
  int v29;
  BOOL v30;
  int v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;

  v5 = this;
  v6 = (int *)(this + 16);
  v7 = (void ***)(this + 8);
  while (1)
  {
LABEL_2:
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      v9 = (AddrObjGoogle::protobuf::io::CodedInputStream *)this;
      *((_DWORD *)a2 + 8) = this;
      if (!(_DWORD)this)
        return 1;
    }
    else
    {
      v9 = (AddrObjGoogle::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)a2 + 8) = (_DWORD)v9;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)v9)
        return 1;
    }
    v10 = v9 >> 3;
    if (v9 >> 3 == 11)
      break;
    if (v10 == 15)
    {
      v11 = v9 & 7;
      if (v11 != 2)
        goto LABEL_25;
LABEL_30:
      *(_DWORD *)(v5 + 56) |= 2u;
      v22 = *(addr_obj::geo3::StructuredAddress **)(v5 + 40);
      if (!v22)
      {
        v22 = (addr_obj::geo3::StructuredAddress *)operator new();
        addr_obj::geo3::StructuredAddress::StructuredAddress(v22);
        *(_QWORD *)(v5 + 40) = v22;
      }
      v35 = 0;
      v23 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v23 >= *((_QWORD *)a2 + 2) || *v23 < 0)
      {
        if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v35))
          return 0;
      }
      else
      {
        v35 = *v23;
        *((_QWORD *)a2 + 1) = v23 + 1;
      }
      v24 = *((_DWORD *)a2 + 14);
      v25 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v24 + 1;
      if (v24 >= v25)
        return 0;
      v26 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v35);
      if (!addr_obj::geo3::StructuredAddress::MergePartialFromCodedStream((uint64_t)v22, a2, v27, v28)
        || !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v26);
      v29 = *((_DWORD *)a2 + 14);
      v30 = __OFSUB__(v29, 1);
      v31 = v29 - 1;
      if (v31 < 0 == v30)
        *((_DWORD *)a2 + 14) = v31;
      v32 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 2);
      if ((int)v12 - (int)v32 > 1 && *v32 == 128 && v32[1] == 1)
      {
        v13 = (char *)(v32 + 2);
        *((_QWORD *)a2 + 1) = v13;
LABEL_45:
        v34 = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v34);
          if (!(_DWORD)this)
            return this;
          v33 = v34;
        }
        else
        {
          v33 = *v13;
          *((_QWORD *)a2 + 1) = v13 + 1;
        }
        if (v33 > 2)
        {
          AddrObjGoogle::protobuf::UnknownFieldSet::AddVarint(v7, 16, (int)v33);
        }
        else
        {
          *(_DWORD *)(v5 + 56) |= 4u;
          *(_DWORD *)(v5 + 48) = v33;
        }
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          this = 1;
          *((_BYTE *)a2 + 36) = 1;
          return this;
        }
      }
    }
    else
    {
      if (v10 == 16)
      {
        v11 = v9 & 7;
        if ((v9 & 7) == 0)
        {
          v13 = (char *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          goto LABEL_45;
        }
      }
      else
      {
        v11 = v9 & 7;
      }
LABEL_25:
      if (v11 == 4)
        return 1;
      this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, v9, v7, a4);
      if ((this & 1) == 0)
        return 0;
    }
  }
  v11 = v9 & 7;
  if (v11 != 2)
    goto LABEL_25;
  while (1)
  {
    v14 = *(_DWORD *)(v5 + 28);
    v15 = *(int *)(v5 + 24);
    if ((int)v15 >= v14)
    {
      if (v14 == *(_DWORD *)(v5 + 32))
      {
        this = (uint64_t)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v14 + 1);
        v14 = *(_DWORD *)(v5 + 28);
      }
      *(_DWORD *)(v5 + 28) = v14 + 1;
      v17 = (std::string *)AddrObjGoogle::protobuf::internal::StringTypeHandlerBase::New((AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)this);
      v18 = *(_QWORD *)(v5 + 16);
      v19 = *(int *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = v19 + 1;
      *(_QWORD *)(v18 + 8 * v19) = v17;
    }
    else
    {
      v16 = *(_QWORD *)(v5 + 16);
      *(_DWORD *)(v5 + 24) = v15 + 1;
      v17 = *(std::string **)(v16 + 8 * v15);
    }
    this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v17);
    if (!(_DWORD)this)
      return this;
    v20 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v20 >= *((_QWORD *)a2 + 2))
      goto LABEL_2;
    v21 = *v20;
    if (v21 != 90)
    {
      if (v21 != 122)
        goto LABEL_2;
      *((_QWORD *)a2 + 1) = v20 + 1;
      goto LABEL_30;
    }
    *((_QWORD *)a2 + 1) = v20 + 1;
  }
}

void sub_18864B11C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10B1C403F20F32DLL);
  _Unwind_Resume(a1);
}

void addr_obj::geo3::Address::MergeFrom(addr_obj::geo3::Address *this, const addr_obj::geo3::Address *a2)
{
  std::string *v4;
  AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *v5;
  uint64_t v6;
  const std::string *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  addr_obj::geo3::StructuredAddress *v15;
  const addr_obj::geo3::StructuredAddress *v16;
  int v17;
  char v18;
  std::string v19[2];

  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/geo3-slim.pb.cc", 2451);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v18, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  v5 = (AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 4, *((_DWORD *)a2 + 6) + *((_DWORD *)this + 6));
  if (*((int *)a2 + 6) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(const std::string **)(*((_QWORD *)a2 + 2) + 8 * v6);
      v8 = *((_DWORD *)this + 7);
      v9 = *((int *)this + 6);
      if ((int)v9 >= v8)
      {
        if (v8 == *((_DWORD *)this + 8))
        {
          v5 = (AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 4, v8 + 1);
          v8 = *((_DWORD *)this + 7);
        }
        *((_DWORD *)this + 7) = v8 + 1;
        v11 = (std::string *)AddrObjGoogle::protobuf::internal::StringTypeHandlerBase::New(v5);
        v12 = *((_QWORD *)this + 2);
        v13 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v13 + 1;
        *(_QWORD *)(v12 + 8 * v13) = v11;
      }
      else
      {
        v10 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v9 + 1;
        v11 = *(std::string **)(v10 + 8 * v9);
      }
      v5 = (AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)std::string::operator=(v11, v7);
      ++v6;
    }
    while (v6 < *((int *)a2 + 6));
  }
  v14 = *((_DWORD *)a2 + 14);
  if ((v14 & 0x1FE) != 0)
  {
    if ((v14 & 2) != 0)
    {
      *((_DWORD *)this + 14) |= 2u;
      v15 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (addr_obj::geo3::StructuredAddress *)operator new();
        v5 = addr_obj::geo3::StructuredAddress::StructuredAddress(v15);
        *((_QWORD *)this + 5) = v15;
      }
      v16 = (const addr_obj::geo3::StructuredAddress *)*((_QWORD *)a2 + 5);
      if (!v16)
        v16 = *(const addr_obj::geo3::StructuredAddress **)(addr_obj::geo3::Address::default_instance_(v5) + 40);
      addr_obj::geo3::StructuredAddress::MergeFrom(v15, v16);
      v14 = *((_DWORD *)a2 + 14);
    }
    if ((v14 & 4) != 0)
    {
      v17 = *((_DWORD *)a2 + 12);
      *((_DWORD *)this + 14) |= 4u;
      *((_DWORD *)this + 12) = v17;
    }
  }
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)this + 1, (const addr_obj::geo3::Address *)((char *)a2 + 8));
}

void sub_18864B2EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10B1C403F20F32DLL);
  _Unwind_Resume(a1);
}

_QWORD *AddrObjGoogle::protobuf::internal::StringTypeHandlerBase::New(AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  return result;
}

addr_obj::geo3::StructuredAddress *addr_obj::geo3::StructuredAddress::StructuredAddress(addr_obj::geo3::StructuredAddress *this)
{
  *(_QWORD *)this = &off_1E1BF9FD0;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 44) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  addr_obj::geo3::StructuredAddress::SharedCtor(this);
  return this;
}

void sub_18864B3E0(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;
  int *v3;
  _QWORD *v4;
  int *v5;
  uint64_t *v6;
  _QWORD *v7;

  v7 = v4;
  if (*v7)
    MEMORY[0x18D764364](*v7, 0x1000C8000313F17);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v6);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v5);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v3);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void addr_obj::geo3::StructuredAddress::MergeFrom(addr_obj::geo3::StructuredAddress *this, const addr_obj::geo3::StructuredAddress *a2)
{
  std::string *v4;
  AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *v5;
  uint64_t v6;
  const std::string *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *v14;
  uint64_t v15;
  const std::string *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  AddrObjGoogle::protobuf::internal *v23;
  uint64_t v24;
  const addr_obj::geo3::StructuredAddress_SubPremise *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  addr_obj::geo3::StructuredAddress_SubPremise *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  const std::string *v34;
  uint64_t *v35;
  std::string *v36;
  const std::string *v37;
  uint64_t *v38;
  std::string *v39;
  const std::string *v40;
  uint64_t *v41;
  std::string *v42;
  const std::string *v43;
  uint64_t *v44;
  std::string *v45;
  const std::string *v46;
  uint64_t *v47;
  std::string *v48;
  const std::string *v49;
  uint64_t *v50;
  std::string *v51;
  const std::string *v52;
  uint64_t *v53;
  std::string *v54;
  const std::string *v55;
  uint64_t *v56;
  std::string *v57;
  const std::string *v58;
  uint64_t *v59;
  std::string *v60;
  const std::string *v61;
  uint64_t *v62;
  std::string *v63;
  const std::string *v64;
  uint64_t *v65;
  std::string *v66;
  const std::string *v67;
  uint64_t *v68;
  std::string *v69;
  const std::string *v70;
  uint64_t *v71;
  std::string *v72;
  const std::string *v73;
  uint64_t *v74;
  std::string *v75;
  const std::string *v76;
  uint64_t *v77;
  std::string *v78;
  const std::string *v79;
  uint64_t *v80;
  std::string *v81;
  const std::string *v82;
  uint64_t *v83;
  std::string *v84;
  char v85;
  std::string v86[2];

  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v86, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/geo3-slim.pb.cc", 1967);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v86, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v85, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v86[0].__r_.__value_.__l.__data_);
  }
  v5 = (AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 30, *((_DWORD *)a2 + 32) + *((_DWORD *)this + 32));
  if (*((int *)a2 + 32) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(const std::string **)(*((_QWORD *)a2 + 15) + 8 * v6);
      v8 = *((_DWORD *)this + 33);
      v9 = *((int *)this + 32);
      if ((int)v9 >= v8)
      {
        if (v8 == *((_DWORD *)this + 34))
        {
          v5 = (AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 30, v8 + 1);
          v8 = *((_DWORD *)this + 33);
        }
        *((_DWORD *)this + 33) = v8 + 1;
        v11 = (std::string *)AddrObjGoogle::protobuf::internal::StringTypeHandlerBase::New(v5);
        v12 = *((_QWORD *)this + 15);
        v13 = *((int *)this + 32);
        *((_DWORD *)this + 32) = v13 + 1;
        *(_QWORD *)(v12 + 8 * v13) = v11;
      }
      else
      {
        v10 = *((_QWORD *)this + 15);
        *((_DWORD *)this + 32) = v9 + 1;
        v11 = *(std::string **)(v10 + 8 * v9);
      }
      v5 = (AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)std::string::operator=(v11, v7);
      ++v6;
    }
    while (v6 < *((int *)a2 + 32));
  }
  v14 = (AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 40, *((_DWORD *)a2 + 42) + *((_DWORD *)this + 42));
  if (*((int *)a2 + 42) >= 1)
  {
    v15 = 0;
    do
    {
      v16 = *(const std::string **)(*((_QWORD *)a2 + 20) + 8 * v15);
      v17 = *((_DWORD *)this + 43);
      v18 = *((int *)this + 42);
      if ((int)v18 >= v17)
      {
        if (v17 == *((_DWORD *)this + 44))
        {
          v14 = (AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 40, v17 + 1);
          v17 = *((_DWORD *)this + 43);
        }
        *((_DWORD *)this + 43) = v17 + 1;
        v20 = (std::string *)AddrObjGoogle::protobuf::internal::StringTypeHandlerBase::New(v14);
        v21 = *((_QWORD *)this + 20);
        v22 = *((int *)this + 42);
        *((_DWORD *)this + 42) = v22 + 1;
        *(_QWORD *)(v21 + 8 * v22) = v20;
      }
      else
      {
        v19 = *((_QWORD *)this + 20);
        *((_DWORD *)this + 42) = v18 + 1;
        v20 = *(std::string **)(v19 + 8 * v18);
      }
      v14 = (AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)std::string::operator=(v20, v16);
      ++v15;
    }
    while (v15 < *((int *)a2 + 42));
  }
  v23 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 48, *((_DWORD *)a2 + 50) + *((_DWORD *)this + 50));
  if (*((int *)a2 + 50) >= 1)
  {
    v24 = 0;
    do
    {
      v25 = *(const addr_obj::geo3::StructuredAddress_SubPremise **)(*((_QWORD *)a2 + 24) + 8 * v24);
      v26 = *((_DWORD *)this + 51);
      v27 = *((int *)this + 50);
      if ((int)v27 >= v26)
      {
        if (v26 == *((_DWORD *)this + 52))
        {
          AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 48, v26 + 1);
          v26 = *((_DWORD *)this + 51);
        }
        *((_DWORD *)this + 51) = v26 + 1;
        v29 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::geo3::StructuredAddress_SubPremise>::New();
        v30 = *((_QWORD *)this + 24);
        v31 = *((int *)this + 50);
        *((_DWORD *)this + 50) = v31 + 1;
        *(_QWORD *)(v30 + 8 * v31) = v29;
      }
      else
      {
        v28 = *((_QWORD *)this + 24);
        *((_DWORD *)this + 50) = v27 + 1;
        v29 = *(addr_obj::geo3::StructuredAddress_SubPremise **)(v28 + 8 * v27);
      }
      addr_obj::geo3::StructuredAddress_SubPremise::MergeFrom(v29, v25);
      ++v24;
    }
    while (v24 < *((int *)a2 + 50));
  }
  v32 = *((_DWORD *)a2 + 58);
  if (v32)
  {
    AddrObjGoogle::protobuf::RepeatedField<long long>::Reserve((_DWORD *)this + 56, *((_DWORD *)this + 58) + v32);
    v23 = (AddrObjGoogle::protobuf::internal *)memcpy((void *)(*((_QWORD *)this + 28) + 8 * *((int *)this + 58)), *((const void **)a2 + 28), 8 * *((int *)a2 + 58));
    *((_DWORD *)this + 58) += *((_DWORD *)a2 + 58);
  }
  v33 = *((_DWORD *)a2 + 61);
  if (!(_BYTE)v33)
    goto LABEL_71;
  if ((v33 & 1) != 0)
  {
    v34 = (const std::string *)*((_QWORD *)a2 + 2);
    *((_DWORD *)this + 61) |= 1u;
    v35 = (uint64_t *)*((_QWORD *)this + 2);
    if (v35 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
    {
      v36 = (std::string *)operator new();
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 2) = v36;
    }
    else
    {
      v36 = (std::string *)*((_QWORD *)this + 2);
    }
    v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v36, v34);
    v33 = *((_DWORD *)a2 + 61);
    if ((v33 & 2) == 0)
    {
LABEL_32:
      if ((v33 & 4) == 0)
        goto LABEL_33;
      goto LABEL_47;
    }
  }
  else if ((v33 & 2) == 0)
  {
    goto LABEL_32;
  }
  v37 = (const std::string *)*((_QWORD *)a2 + 3);
  *((_DWORD *)this + 61) |= 2u;
  v38 = (uint64_t *)*((_QWORD *)this + 3);
  if (v38 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
  {
    v39 = (std::string *)operator new();
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 3) = v39;
  }
  else
  {
    v39 = (std::string *)*((_QWORD *)this + 3);
  }
  v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v39, v37);
  v33 = *((_DWORD *)a2 + 61);
  if ((v33 & 4) == 0)
  {
LABEL_33:
    if ((v33 & 8) == 0)
      goto LABEL_34;
    goto LABEL_51;
  }
LABEL_47:
  v40 = (const std::string *)*((_QWORD *)a2 + 4);
  *((_DWORD *)this + 61) |= 4u;
  v41 = (uint64_t *)*((_QWORD *)this + 4);
  if (v41 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
  {
    v42 = (std::string *)operator new();
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 4) = v42;
  }
  else
  {
    v42 = (std::string *)*((_QWORD *)this + 4);
  }
  v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v42, v40);
  v33 = *((_DWORD *)a2 + 61);
  if ((v33 & 8) == 0)
  {
LABEL_34:
    if ((v33 & 0x10) == 0)
      goto LABEL_35;
    goto LABEL_55;
  }
LABEL_51:
  v43 = (const std::string *)*((_QWORD *)a2 + 5);
  *((_DWORD *)this + 61) |= 8u;
  v44 = (uint64_t *)*((_QWORD *)this + 5);
  if (v44 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
  {
    v45 = (std::string *)operator new();
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 5) = v45;
  }
  else
  {
    v45 = (std::string *)*((_QWORD *)this + 5);
  }
  v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v45, v43);
  v33 = *((_DWORD *)a2 + 61);
  if ((v33 & 0x10) == 0)
  {
LABEL_35:
    if ((v33 & 0x20) == 0)
      goto LABEL_36;
LABEL_59:
    v49 = (const std::string *)*((_QWORD *)a2 + 7);
    *((_DWORD *)this + 61) |= 0x20u;
    v50 = (uint64_t *)*((_QWORD *)this + 7);
    if (v50 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
    {
      v51 = (std::string *)operator new();
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 7) = v51;
    }
    else
    {
      v51 = (std::string *)*((_QWORD *)this + 7);
    }
    v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v51, v49);
    v33 = *((_DWORD *)a2 + 61);
    if ((v33 & 0x40) == 0)
    {
LABEL_37:
      if ((v33 & 0x80) == 0)
        goto LABEL_71;
      goto LABEL_67;
    }
    goto LABEL_63;
  }
LABEL_55:
  v46 = (const std::string *)*((_QWORD *)a2 + 6);
  *((_DWORD *)this + 61) |= 0x10u;
  v47 = (uint64_t *)*((_QWORD *)this + 6);
  if (v47 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
  {
    v48 = (std::string *)operator new();
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 6) = v48;
  }
  else
  {
    v48 = (std::string *)*((_QWORD *)this + 6);
  }
  v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v48, v46);
  v33 = *((_DWORD *)a2 + 61);
  if ((v33 & 0x20) != 0)
    goto LABEL_59;
LABEL_36:
  if ((v33 & 0x40) == 0)
    goto LABEL_37;
LABEL_63:
  v52 = (const std::string *)*((_QWORD *)a2 + 8);
  *((_DWORD *)this + 61) |= 0x40u;
  v53 = (uint64_t *)*((_QWORD *)this + 8);
  if (v53 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
  {
    v54 = (std::string *)operator new();
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 8) = v54;
  }
  else
  {
    v54 = (std::string *)*((_QWORD *)this + 8);
  }
  v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v54, v52);
  v33 = *((_DWORD *)a2 + 61);
  if ((v33 & 0x80) != 0)
  {
LABEL_67:
    v55 = (const std::string *)*((_QWORD *)a2 + 9);
    *((_DWORD *)this + 61) |= 0x80u;
    v56 = (uint64_t *)*((_QWORD *)this + 9);
    if (v56 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
    {
      v57 = (std::string *)operator new();
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 9) = v57;
    }
    else
    {
      v57 = (std::string *)*((_QWORD *)this + 9);
    }
    v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v57, v55);
    v33 = *((_DWORD *)a2 + 61);
  }
LABEL_71:
  if ((v33 & 0xFF00) == 0)
    goto LABEL_108;
  if ((v33 & 0x100) != 0)
  {
    v58 = (const std::string *)*((_QWORD *)a2 + 10);
    *((_DWORD *)this + 61) |= 0x100u;
    v59 = (uint64_t *)*((_QWORD *)this + 10);
    if (v59 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
    {
      v60 = (std::string *)operator new();
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 10) = v60;
    }
    else
    {
      v60 = (std::string *)*((_QWORD *)this + 10);
    }
    v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v60, v58);
    v33 = *((_DWORD *)a2 + 61);
    if ((v33 & 0x200) == 0)
    {
LABEL_74:
      if ((v33 & 0x400) == 0)
        goto LABEL_75;
      goto LABEL_88;
    }
  }
  else if ((v33 & 0x200) == 0)
  {
    goto LABEL_74;
  }
  v61 = (const std::string *)*((_QWORD *)a2 + 11);
  *((_DWORD *)this + 61) |= 0x200u;
  v62 = (uint64_t *)*((_QWORD *)this + 11);
  if (v62 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
  {
    v63 = (std::string *)operator new();
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 11) = v63;
  }
  else
  {
    v63 = (std::string *)*((_QWORD *)this + 11);
  }
  v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v63, v61);
  v33 = *((_DWORD *)a2 + 61);
  if ((v33 & 0x400) == 0)
  {
LABEL_75:
    if ((v33 & 0x800) == 0)
      goto LABEL_76;
    goto LABEL_92;
  }
LABEL_88:
  v64 = (const std::string *)*((_QWORD *)a2 + 12);
  *((_DWORD *)this + 61) |= 0x400u;
  v65 = (uint64_t *)*((_QWORD *)this + 12);
  if (v65 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
  {
    v66 = (std::string *)operator new();
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 12) = v66;
  }
  else
  {
    v66 = (std::string *)*((_QWORD *)this + 12);
  }
  v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v66, v64);
  v33 = *((_DWORD *)a2 + 61);
  if ((v33 & 0x800) == 0)
  {
LABEL_76:
    if ((v33 & 0x1000) == 0)
      goto LABEL_77;
    goto LABEL_96;
  }
LABEL_92:
  v67 = (const std::string *)*((_QWORD *)a2 + 13);
  *((_DWORD *)this + 61) |= 0x800u;
  v68 = (uint64_t *)*((_QWORD *)this + 13);
  if (v68 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
  {
    v69 = (std::string *)operator new();
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 13) = v69;
  }
  else
  {
    v69 = (std::string *)*((_QWORD *)this + 13);
  }
  v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v69, v67);
  v33 = *((_DWORD *)a2 + 61);
  if ((v33 & 0x1000) == 0)
  {
LABEL_77:
    if ((v33 & 0x4000) == 0)
      goto LABEL_78;
    goto LABEL_100;
  }
LABEL_96:
  v70 = (const std::string *)*((_QWORD *)a2 + 14);
  *((_DWORD *)this + 61) |= 0x1000u;
  v71 = (uint64_t *)*((_QWORD *)this + 14);
  if (v71 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
  {
    v72 = (std::string *)operator new();
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 14) = v72;
  }
  else
  {
    v72 = (std::string *)*((_QWORD *)this + 14);
  }
  v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v72, v70);
  v33 = *((_DWORD *)a2 + 61);
  if ((v33 & 0x4000) == 0)
  {
LABEL_78:
    if ((v33 & 0x8000) == 0)
      goto LABEL_108;
    goto LABEL_104;
  }
LABEL_100:
  v73 = (const std::string *)*((_QWORD *)a2 + 18);
  *((_DWORD *)this + 61) |= 0x4000u;
  v74 = (uint64_t *)*((_QWORD *)this + 18);
  if (v74 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
  {
    v75 = (std::string *)operator new();
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 18) = v75;
  }
  else
  {
    v75 = (std::string *)*((_QWORD *)this + 18);
  }
  v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v75, v73);
  v33 = *((_DWORD *)a2 + 61);
  if ((v33 & 0x8000) != 0)
  {
LABEL_104:
    v76 = (const std::string *)*((_QWORD *)a2 + 19);
    *((_DWORD *)this + 61) |= 0x8000u;
    v77 = (uint64_t *)*((_QWORD *)this + 19);
    if (v77 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
    {
      v78 = (std::string *)operator new();
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 19) = v78;
    }
    else
    {
      v78 = (std::string *)*((_QWORD *)this + 19);
    }
    v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v78, v76);
    v33 = *((_DWORD *)a2 + 61);
  }
LABEL_108:
  if ((v33 & 0x1FE0000) != 0)
  {
    if ((v33 & 0x20000) != 0)
    {
      v79 = (const std::string *)*((_QWORD *)a2 + 23);
      *((_DWORD *)this + 61) |= 0x20000u;
      v80 = (uint64_t *)*((_QWORD *)this + 23);
      if (v80 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
      {
        v81 = (std::string *)operator new();
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 23) = v81;
      }
      else
      {
        v81 = (std::string *)*((_QWORD *)this + 23);
      }
      v23 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v81, v79);
      v33 = *((_DWORD *)a2 + 61);
    }
    if ((v33 & 0x80000) != 0)
    {
      v82 = (const std::string *)*((_QWORD *)a2 + 27);
      *((_DWORD *)this + 61) |= 0x80000u;
      v83 = (uint64_t *)*((_QWORD *)this + 27);
      if (v83 == AddrObjGoogle::protobuf::internal::kEmptyString(v23))
      {
        v84 = (std::string *)operator new();
        v84->__r_.__value_.__l.__size_ = 0;
        v84->__r_.__value_.__r.__words[2] = 0;
        v84->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 27) = v84;
      }
      else
      {
        v84 = (std::string *)*((_QWORD *)this + 27);
      }
      std::string::operator=(v84, v82);
    }
  }
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)this + 1, (const addr_obj::geo3::StructuredAddress *)((char *)a2 + 8));
}

void sub_18864BD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom(void ***this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  uint64_t v7;

  v4 = 0;
  for (i = 0; ; ++i)
  {
    v6 = *(_QWORD **)a2;
    if (*(_QWORD *)a2)
      v7 = (v6[1] - *v6) >> 4;
    else
      LODWORD(v7) = 0;
    if (i >= (int)v7)
      break;
    AddrObjGoogle::protobuf::UnknownFieldSet::AddField(this, (const AddrObjGoogle::protobuf::UnknownField *)(*v6 + v4));
    v4 += 16;
  }
}

uint64_t addr_obj::geo3::StructuredAddress::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  _DWORD *v6;
  int *v7;
  int *v8;
  int *v9;
  void ***v10;
  char *v11;
  AddrObjGoogle::protobuf::io::CodedInputStream *v12;
  int v13;
  uint64_t *v14;
  std::string *v15;
  unsigned __int8 *v16;
  char *v17;
  _BYTE *v18;
  uint64_t *v19;
  std::string *v20;
  _BYTE *v21;
  uint64_t *v22;
  std::string *v23;
  _BYTE *v24;
  uint64_t *v25;
  std::string *v26;
  _BYTE *v27;
  uint64_t *v28;
  std::string *v29;
  _BYTE *v30;
  uint64_t *v31;
  std::string *v32;
  _BYTE *v33;
  uint64_t *v34;
  std::string *v35;
  _BYTE *v36;
  uint64_t *v37;
  std::string *v38;
  _BYTE *v39;
  uint64_t *v40;
  std::string *v41;
  _BYTE *v42;
  uint64_t *v43;
  std::string *v44;
  _BYTE *v45;
  uint64_t *v46;
  std::string *v47;
  _BYTE *v48;
  uint64_t *v49;
  std::string *v50;
  _BYTE *v51;
  uint64_t *v52;
  std::string *v53;
  _BYTE *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  std::string *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  std::string *v63;
  unsigned __int8 *v64;
  uint64_t *v65;
  std::string *v66;
  unsigned __int8 *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  std::string *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t *v75;
  std::string *v76;
  unsigned __int8 *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  addr_obj::geo3::StructuredAddress_SubPremise *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  AddrObjGoogle::protobuf::UnknownFieldSet *v89;
  int v90;
  BOOL v91;
  int v92;
  int v93;
  uint64_t *v94;
  std::string *v95;
  unsigned __int8 *v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned __int8 *v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106[2];

  v5 = this;
  v6 = (_DWORD *)(this + 224);
  v7 = (int *)(this + 120);
  v8 = (int *)(this + 160);
  v9 = (int *)(this + 192);
  v10 = (void ***)(this + 8);
LABEL_2:
  while (2)
  {
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      v12 = (AddrObjGoogle::protobuf::io::CodedInputStream *)this;
      *((_DWORD *)a2 + 8) = this;
      if (!(_DWORD)this)
        return 1;
    }
    else
    {
      v12 = (AddrObjGoogle::protobuf::io::CodedInputStream *)*v11;
      *((_DWORD *)a2 + 8) = (_DWORD)v12;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)v12)
        return 1;
    }
    switch(v12 >> 3)
    {
      case 1u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
        *(_DWORD *)(v5 + 244) |= 1u;
        v14 = *(uint64_t **)(v5 + 16);
        if (v14 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v15 = (std::string *)operator new();
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 16) = v15;
        }
        else
        {
          v15 = *(std::string **)(v5 + 16);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v15);
        if ((_DWORD)this)
        {
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v18 < *((_QWORD *)a2 + 2) && *v18 == 18)
          {
            *((_QWORD *)a2 + 1) = v18 + 1;
            goto LABEL_62;
          }
          continue;
        }
        return this;
      case 2u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_62:
        *(_DWORD *)(v5 + 244) |= 2u;
        v19 = *(uint64_t **)(v5 + 24);
        if (v19 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v20 = (std::string *)operator new();
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 24) = v20;
        }
        else
        {
          v20 = *(std::string **)(v5 + 24);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v20);
        if ((_DWORD)this)
        {
          v21 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v21 < *((_QWORD *)a2 + 2) && *v21 == 26)
          {
            *((_QWORD *)a2 + 1) = v21 + 1;
            goto LABEL_69;
          }
          continue;
        }
        return this;
      case 3u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_69:
        *(_DWORD *)(v5 + 244) |= 4u;
        v22 = *(uint64_t **)(v5 + 32);
        if (v22 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v23 = (std::string *)operator new();
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 32) = v23;
        }
        else
        {
          v23 = *(std::string **)(v5 + 32);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v23);
        if ((_DWORD)this)
        {
          v24 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v24 < *((_QWORD *)a2 + 2) && *v24 == 34)
          {
            *((_QWORD *)a2 + 1) = v24 + 1;
            goto LABEL_76;
          }
          continue;
        }
        return this;
      case 4u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_76:
        *(_DWORD *)(v5 + 244) |= 8u;
        v25 = *(uint64_t **)(v5 + 40);
        if (v25 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v26 = (std::string *)operator new();
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 40) = v26;
        }
        else
        {
          v26 = *(std::string **)(v5 + 40);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v26);
        if ((_DWORD)this)
        {
          v27 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v27 < *((_QWORD *)a2 + 2) && *v27 == 42)
          {
            *((_QWORD *)a2 + 1) = v27 + 1;
            goto LABEL_83;
          }
          continue;
        }
        return this;
      case 5u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_83:
        *(_DWORD *)(v5 + 244) |= 0x10u;
        v28 = *(uint64_t **)(v5 + 48);
        if (v28 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v29 = (std::string *)operator new();
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 48) = v29;
        }
        else
        {
          v29 = *(std::string **)(v5 + 48);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v29);
        if ((_DWORD)this)
        {
          v30 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v30 < *((_QWORD *)a2 + 2) && *v30 == 50)
          {
            *((_QWORD *)a2 + 1) = v30 + 1;
            goto LABEL_90;
          }
          continue;
        }
        return this;
      case 6u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_90:
        *(_DWORD *)(v5 + 244) |= 0x20u;
        v31 = *(uint64_t **)(v5 + 56);
        if (v31 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v32 = (std::string *)operator new();
          v32->__r_.__value_.__l.__size_ = 0;
          v32->__r_.__value_.__r.__words[2] = 0;
          v32->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 56) = v32;
        }
        else
        {
          v32 = *(std::string **)(v5 + 56);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v32);
        if ((_DWORD)this)
        {
          v33 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v33 < *((_QWORD *)a2 + 2) && *v33 == 58)
          {
            *((_QWORD *)a2 + 1) = v33 + 1;
            goto LABEL_97;
          }
          continue;
        }
        return this;
      case 7u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_97:
        *(_DWORD *)(v5 + 244) |= 0x40u;
        v34 = *(uint64_t **)(v5 + 64);
        if (v34 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v35 = (std::string *)operator new();
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 64) = v35;
        }
        else
        {
          v35 = *(std::string **)(v5 + 64);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v35);
        if ((_DWORD)this)
        {
          v36 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v36 < *((_QWORD *)a2 + 2) && *v36 == 66)
          {
            *((_QWORD *)a2 + 1) = v36 + 1;
            goto LABEL_104;
          }
          continue;
        }
        return this;
      case 8u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_104:
        *(_DWORD *)(v5 + 244) |= 0x80u;
        v37 = *(uint64_t **)(v5 + 72);
        if (v37 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v38 = (std::string *)operator new();
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 72) = v38;
        }
        else
        {
          v38 = *(std::string **)(v5 + 72);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v38);
        if ((_DWORD)this)
        {
          v39 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v39 < *((_QWORD *)a2 + 2) && *v39 == 74)
          {
            *((_QWORD *)a2 + 1) = v39 + 1;
            goto LABEL_111;
          }
          continue;
        }
        return this;
      case 9u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_111:
        *(_DWORD *)(v5 + 244) |= 0x100u;
        v40 = *(uint64_t **)(v5 + 80);
        if (v40 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v41 = (std::string *)operator new();
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 80) = v41;
        }
        else
        {
          v41 = *(std::string **)(v5 + 80);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v41);
        if ((_DWORD)this)
        {
          v42 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v42 < *((_QWORD *)a2 + 2) && *v42 == 82)
          {
            *((_QWORD *)a2 + 1) = v42 + 1;
            goto LABEL_118;
          }
          continue;
        }
        return this;
      case 0xAu:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_118:
        *(_DWORD *)(v5 + 244) |= 0x200u;
        v43 = *(uint64_t **)(v5 + 88);
        if (v43 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v44 = (std::string *)operator new();
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 88) = v44;
        }
        else
        {
          v44 = *(std::string **)(v5 + 88);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v44);
        if ((_DWORD)this)
        {
          v45 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v45 < *((_QWORD *)a2 + 2) && *v45 == 90)
          {
            *((_QWORD *)a2 + 1) = v45 + 1;
            goto LABEL_125;
          }
          continue;
        }
        return this;
      case 0xBu:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_125:
        *(_DWORD *)(v5 + 244) |= 0x400u;
        v46 = *(uint64_t **)(v5 + 96);
        if (v46 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v47 = (std::string *)operator new();
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 96) = v47;
        }
        else
        {
          v47 = *(std::string **)(v5 + 96);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v47);
        if ((_DWORD)this)
        {
          v48 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v48 < *((_QWORD *)a2 + 2) && *v48 == 98)
          {
            *((_QWORD *)a2 + 1) = v48 + 1;
            goto LABEL_132;
          }
          continue;
        }
        return this;
      case 0xCu:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_132:
        *(_DWORD *)(v5 + 244) |= 0x800u;
        v49 = *(uint64_t **)(v5 + 104);
        if (v49 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v50 = (std::string *)operator new();
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 104) = v50;
        }
        else
        {
          v50 = *(std::string **)(v5 + 104);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v50);
        if ((_DWORD)this)
        {
          v51 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v51 < *((_QWORD *)a2 + 2) && *v51 == 106)
          {
            *((_QWORD *)a2 + 1) = v51 + 1;
            goto LABEL_139;
          }
          continue;
        }
        return this;
      case 0xDu:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_139:
        *(_DWORD *)(v5 + 244) |= 0x1000u;
        v52 = *(uint64_t **)(v5 + 112);
        if (v52 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v53 = (std::string *)operator new();
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 112) = v53;
        }
        else
        {
          v53 = *(std::string **)(v5 + 112);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v53);
        if ((_DWORD)this)
        {
          v54 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v54 >= *((_QWORD *)a2 + 2) || *v54 != 114)
            continue;
          goto LABEL_145;
        }
        return this;
      case 0xEu:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
        while (1)
        {
          v55 = *(_DWORD *)(v5 + 132);
          v56 = *(int *)(v5 + 128);
          if ((int)v56 >= v55)
          {
            if (v55 == *(_DWORD *)(v5 + 136))
            {
              this = (uint64_t)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v55 + 1);
              v55 = *(_DWORD *)(v5 + 132);
            }
            *(_DWORD *)(v5 + 132) = v55 + 1;
            v58 = (std::string *)AddrObjGoogle::protobuf::internal::StringTypeHandlerBase::New((AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)this);
            v59 = *(_QWORD *)(v5 + 120);
            v60 = *(int *)(v5 + 128);
            *(_DWORD *)(v5 + 128) = v60 + 1;
            *(_QWORD *)(v59 + 8 * v60) = v58;
          }
          else
          {
            v57 = *(_QWORD *)(v5 + 120);
            *(_DWORD *)(v5 + 128) = v56 + 1;
            v58 = *(std::string **)(v57 + 8 * v56);
          }
          this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v58);
          if (!(_DWORD)this)
            return this;
          v54 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v54 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v61 = *v54;
          if (v61 != 114)
          {
            if (v61 != 122)
              goto LABEL_2;
            *((_QWORD *)a2 + 1) = v54 + 1;
            goto LABEL_156;
          }
LABEL_145:
          *((_QWORD *)a2 + 1) = v54 + 1;
        }
      case 0xFu:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_156:
        *(_DWORD *)(v5 + 244) |= 0x4000u;
        v62 = *(uint64_t **)(v5 + 144);
        if (v62 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v63 = (std::string *)operator new();
          v63->__r_.__value_.__l.__size_ = 0;
          v63->__r_.__value_.__r.__words[2] = 0;
          v63->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 144) = v63;
        }
        else
        {
          v63 = *(std::string **)(v5 + 144);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v63);
        if ((_DWORD)this)
        {
          v64 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          if (*((_DWORD *)a2 + 4) - (int)v64 >= 2 && *v64 == 130 && v64[1] == 1)
          {
            *((_QWORD *)a2 + 1) = v64 + 2;
            goto LABEL_164;
          }
          continue;
        }
        return this;
      case 0x10u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_164:
        *(_DWORD *)(v5 + 244) |= 0x8000u;
        v65 = *(uint64_t **)(v5 + 152);
        if (v65 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v66 = (std::string *)operator new();
          v66->__r_.__value_.__l.__size_ = 0;
          v66->__r_.__value_.__r.__words[2] = 0;
          v66->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 152) = v66;
        }
        else
        {
          v66 = *(std::string **)(v5 + 152);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v66);
        if ((_DWORD)this)
        {
          v67 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          if (*((_DWORD *)a2 + 4) - (int)v67 < 2 || *v67 != 138 || v67[1] != 1)
            continue;
          goto LABEL_171;
        }
        return this;
      case 0x11u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
        while (1)
        {
          v68 = *(_DWORD *)(v5 + 172);
          v69 = *(int *)(v5 + 168);
          if ((int)v69 >= v68)
          {
            if (v68 == *(_DWORD *)(v5 + 176))
            {
              this = (uint64_t)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v68 + 1);
              v68 = *(_DWORD *)(v5 + 172);
            }
            *(_DWORD *)(v5 + 172) = v68 + 1;
            v71 = (std::string *)AddrObjGoogle::protobuf::internal::StringTypeHandlerBase::New((AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)this);
            v72 = *(_QWORD *)(v5 + 160);
            v73 = *(int *)(v5 + 168);
            *(_DWORD *)(v5 + 168) = v73 + 1;
            *(_QWORD *)(v72 + 8 * v73) = v71;
          }
          else
          {
            v70 = *(_QWORD *)(v5 + 160);
            *(_DWORD *)(v5 + 168) = v69 + 1;
            v71 = *(std::string **)(v70 + 8 * v69);
          }
          this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v71);
          if (!(_DWORD)this)
            return this;
          v67 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          if (*((_DWORD *)a2 + 4) - (int)v67 < 2)
            goto LABEL_2;
          v74 = *v67;
          if (v74 == 146)
          {
            if (v67[1] != 1)
              goto LABEL_2;
            *((_QWORD *)a2 + 1) = v67 + 2;
            goto LABEL_185;
          }
          if (v74 != 138 || v67[1] != 1)
            goto LABEL_2;
LABEL_171:
          *((_QWORD *)a2 + 1) = v67 + 2;
        }
      case 0x12u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_185:
        *(_DWORD *)(v5 + 244) |= 0x20000u;
        v75 = *(uint64_t **)(v5 + 184);
        if (v75 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v76 = (std::string *)operator new();
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 184) = v76;
        }
        else
        {
          v76 = *(std::string **)(v5 + 184);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v76);
        if ((_DWORD)this)
        {
          v77 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          if (*((_DWORD *)a2 + 4) - (int)v77 < 2 || *v77 != 154 || v77[1] != 1)
            continue;
          goto LABEL_192;
        }
        return this;
      case 0x13u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
        while (1)
        {
          v78 = *(_DWORD *)(v5 + 204);
          v79 = *(int *)(v5 + 200);
          if ((int)v79 >= v78)
          {
            if (v78 == *(_DWORD *)(v5 + 208))
            {
              AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v78 + 1);
              v78 = *(_DWORD *)(v5 + 204);
            }
            *(_DWORD *)(v5 + 204) = v78 + 1;
            v81 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::geo3::StructuredAddress_SubPremise>::New();
            v82 = *(_QWORD *)(v5 + 192);
            v83 = *(int *)(v5 + 200);
            *(_DWORD *)(v5 + 200) = v83 + 1;
            *(_QWORD *)(v82 + 8 * v83) = v81;
          }
          else
          {
            v80 = *(_QWORD *)(v5 + 192);
            *(_DWORD *)(v5 + 200) = v79 + 1;
            v81 = *(addr_obj::geo3::StructuredAddress_SubPremise **)(v80 + 8 * v79);
          }
          v106[0] = 0;
          v84 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v84 >= *((_QWORD *)a2 + 2) || *v84 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v106))
              return 0;
          }
          else
          {
            v106[0] = *v84;
            *((_QWORD *)a2 + 1) = v84 + 1;
          }
          v85 = *((_DWORD *)a2 + 14);
          v86 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v85 + 1;
          if (v85 >= v86)
            return 0;
          v87 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v106[0]);
          if (!addr_obj::geo3::StructuredAddress_SubPremise::MergePartialFromCodedStream((uint64_t)v81, a2, v88, v89)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v87);
          v90 = *((_DWORD *)a2 + 14);
          v91 = __OFSUB__(v90, 1);
          v92 = v90 - 1;
          if (v92 < 0 == v91)
            *((_DWORD *)a2 + 14) = v92;
          v77 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          if (*((_DWORD *)a2 + 4) - (int)v77 <= 1)
            goto LABEL_2;
          v93 = *v77;
          if (v93 == 162)
            break;
          if (v93 != 154 || v77[1] != 1)
            goto LABEL_2;
LABEL_192:
          *((_QWORD *)a2 + 1) = v77 + 2;
        }
        if (v77[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v77 + 2;
        goto LABEL_214;
      case 0x14u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_52;
LABEL_214:
        *(_DWORD *)(v5 + 244) |= 0x80000u;
        v94 = *(uint64_t **)(v5 + 216);
        if (v94 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v95 = (std::string *)operator new();
          v95->__r_.__value_.__l.__size_ = 0;
          v95->__r_.__value_.__r.__words[2] = 0;
          v95->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 216) = v95;
        }
        else
        {
          v95 = *(std::string **)(v5 + 216);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v95);
        if (!(_DWORD)this)
          return this;
        v96 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v16 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        if ((int)v16 - (int)v96 >= 2 && *v96 == 160 && v96[1] == 6)
          goto LABEL_221;
        continue;
      default:
        v13 = v12 & 7;
        if (v12 >> 3 != 100)
          goto LABEL_52;
        if (v13 == 2)
        {
          this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<long long,(AddrObjGoogle::protobuf::internal::WireFormatLite::FieldType)3>(a2, v6);
          if (!(_DWORD)this)
            return this;
          while (1)
          {
            v96 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            v16 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
            if ((int)v16 - (int)v96 <= 1 || *v96 != 160 || v96[1] != 6)
              break;
LABEL_221:
            v17 = (char *)(v96 + 2);
            *((_QWORD *)a2 + 1) = v17;
LABEL_222:
            *(_QWORD *)v106 = 0;
            if (v17 >= (char *)v16 || *v17 < 0)
            {
              this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)v106);
              if (!(_DWORD)this)
                return this;
              v97 = *(_QWORD *)v106;
            }
            else
            {
              v97 = *v17;
              *((_QWORD *)a2 + 1) = v17 + 1;
            }
            v98 = *(_DWORD *)(v5 + 232);
            v99 = *(_DWORD *)(v5 + 236);
            if (v98 == v99)
            {
              this = (uint64_t)AddrObjGoogle::protobuf::RepeatedField<long long>::Reserve(v6, v98 + 1);
              v98 = *(_DWORD *)(v5 + 232);
              v99 = *(_DWORD *)(v5 + 236);
            }
            v100 = *(_QWORD *)(v5 + 224);
            v101 = v98 + 1;
            *(_DWORD *)(v5 + 232) = v98 + 1;
            *(_QWORD *)(v100 + 8 * v98) = v97;
            if (v99 - (v98 + 1) >= 1)
            {
              v102 = v99 - v98;
              do
              {
                v103 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v104 = *((_QWORD *)a2 + 2);
                if ((int)v104 - (int)v103 < 2 || *v103 != 160 || v103[1] != 6)
                  break;
                *((_QWORD *)a2 + 1) = v103 + 2;
                *(_QWORD *)v106 = 0;
                if ((unint64_t)(v103 + 2) >= v104 || (char)v103[2] < 0)
                {
                  this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)v106);
                  if (!(_DWORD)this)
                    return this;
                  v105 = *(_QWORD *)v106;
                  v100 = *(_QWORD *)(v5 + 224);
                  v101 = *(_DWORD *)(v5 + 232);
                }
                else
                {
                  v105 = v103[2];
                  *((_QWORD *)a2 + 1) = v103 + 3;
                }
                *(_DWORD *)(v5 + 232) = v101 + 1;
                *(_QWORD *)(v100 + 8 * v101) = v105;
                --v102;
                ++v101;
              }
              while (v102 > 1);
            }
          }
          if (v96 == v16 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            this = 1;
            *((_BYTE *)a2 + 36) = 1;
            return this;
          }
          continue;
        }
        if ((v12 & 7) == 0)
        {
          v17 = (char *)*((_QWORD *)a2 + 1);
          v16 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
          goto LABEL_222;
        }
LABEL_52:
        if (v13 == 4)
          return 1;
        this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, v12, v10, a4);
        if ((this & 1) != 0)
          continue;
        return 0;
    }
  }
}

void addr_obj::V1AddressObjectProto::~V1AddressObjectProto(addr_obj::V1AddressObjectProto *this)
{
  addr_obj::V1AddressObjectProto::~V1AddressObjectProto(this);
  JUMPOUT(0x18D76437CLL);
}

{
  *(_QWORD *)this = &off_1E1BF9D10;
  addr_obj::V1AddressObjectProto::SharedDtor(this);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::V1AddressObjectProto *)((char *)this + 32));
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet((addr_obj::V1AddressObjectProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

void AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(AddrObjGoogle::protobuf::internal::ExtensionSet **this)
{
  AddrObjGoogle::protobuf::internal::ExtensionSet **v2;
  AddrObjGoogle::protobuf::internal::ExtensionSet *v3;
  AddrObjGoogle::protobuf::internal::ExtensionSet *v4;
  AddrObjGoogle::protobuf::internal::ExtensionSet **v5;
  BOOL v6;

  v2 = this + 1;
  v3 = *this;
  if (*this != (AddrObjGoogle::protobuf::internal::ExtensionSet *)(this + 1))
  {
    do
    {
      AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::Free((int *)v3 + 10);
      v4 = (AddrObjGoogle::protobuf::internal::ExtensionSet *)*((_QWORD *)v3 + 1);
      if (v4)
      {
        do
        {
          v5 = (AddrObjGoogle::protobuf::internal::ExtensionSet **)v4;
          v4 = *(AddrObjGoogle::protobuf::internal::ExtensionSet **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (AddrObjGoogle::protobuf::internal::ExtensionSet **)*((_QWORD *)v3 + 2);
          v6 = *v5 == v3;
          v3 = (AddrObjGoogle::protobuf::internal::ExtensionSet *)v5;
        }
        while (!v6);
      }
      v3 = (AddrObjGoogle::protobuf::internal::ExtensionSet *)v5;
    }
    while (v5 != v2);
  }
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)this, this[1]);
}

void std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void addr_obj::V2AddressObjectProto::~V2AddressObjectProto(addr_obj::V2AddressObjectProto *this)
{
  addr_obj::V2AddressObjectProto::~V2AddressObjectProto(this);
  JUMPOUT(0x18D76437CLL);
}

{
  *(_QWORD *)this = &off_1E1BF9DC0;
  addr_obj::V2AddressObjectProto::SharedDtor(this);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::V2AddressObjectProto *)((char *)this + 32));
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet((addr_obj::V2AddressObjectProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

uint64_t addr_obj::V2AddressObjectProto::default_instance_(addr_obj::V2AddressObjectProto *this)
{
  unsigned __int8 v1;
  addr_obj::V2AddressObjectProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50448);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50448))
  {
    v3 = (addr_obj::V2AddressObjectProto *)operator new();
    addr_obj::V2AddressObjectProto::V2AddressObjectProto(v3);
    qword_1EDF50440 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50448);
  }
  return qword_1EDF50440;
}

void sub_18864CEA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40BACA7D59);
  __cxa_guard_abort(&qword_1EDF50448);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V2AddressObjectProto::SharedDtor(addr_obj::V2AddressObjectProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;

  v2 = (uint64_t *)*((_QWORD *)this + 5);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 5);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  v5 = (uint64_t *)*((_QWORD *)this + 6);
  v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  if (v5 != v6)
  {
    v7 = *((_QWORD *)this + 6);
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      v6 = (uint64_t *)MEMORY[0x18D76437C](v7, 0x1012C40EC159624);
    }
  }
  v8 = (uint64_t *)*((_QWORD *)this + 7);
  v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  if (v8 != v9)
  {
    v10 = *((_QWORD *)this + 7);
    if (v10)
    {
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      v9 = (uint64_t *)MEMORY[0x18D76437C](v10, 0x1012C40EC159624);
    }
  }
  v11 = (uint64_t *)*((_QWORD *)this + 8);
  v12 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9);
  if (v11 != v12)
  {
    v13 = *((_QWORD *)this + 8);
    if (v13)
    {
      if (*(char *)(v13 + 23) < 0)
        operator delete(*(void **)v13);
      v12 = (uint64_t *)MEMORY[0x18D76437C](v13, 0x1012C40EC159624);
    }
  }
  v14 = (uint64_t *)*((_QWORD *)this + 9);
  v15 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v12);
  if (v14 != v15)
  {
    v16 = *((_QWORD *)this + 9);
    if (v16)
    {
      if (*(char *)(v16 + 23) < 0)
        operator delete(*(void **)v16);
      v15 = (uint64_t *)MEMORY[0x18D76437C](v16, 0x1012C40EC159624);
    }
  }
  v17 = (uint64_t *)*((_QWORD *)this + 10);
  v18 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v15);
  if (v17 != v18)
  {
    v19 = *((_QWORD *)this + 10);
    if (v19)
    {
      if (*(char *)(v19 + 23) < 0)
        operator delete(*(void **)v19);
      v18 = (uint64_t *)MEMORY[0x18D76437C](v19, 0x1012C40EC159624);
    }
  }
  v20 = (uint64_t *)*((_QWORD *)this + 11);
  v21 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v18);
  if (v20 != v21)
  {
    v22 = *((_QWORD *)this + 11);
    if (v22)
    {
      if (*(char *)(v22 + 23) < 0)
        operator delete(*(void **)v22);
      v21 = (uint64_t *)MEMORY[0x18D76437C](v22, 0x1012C40EC159624);
    }
  }
  v23 = (uint64_t *)*((_QWORD *)this + 12);
  v24 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v21);
  if (v23 != v24)
  {
    v25 = *((_QWORD *)this + 12);
    if (v25)
    {
      if (*(char *)(v25 + 23) < 0)
        operator delete(*(void **)v25);
      v24 = (uint64_t *)MEMORY[0x18D76437C](v25, 0x1012C40EC159624);
    }
  }
  v26 = (uint64_t *)*((_QWORD *)this + 13);
  v27 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v24);
  if (v26 != v27)
  {
    v28 = *((_QWORD *)this + 13);
    if (v28)
    {
      if (*(char *)(v28 + 23) < 0)
        operator delete(*(void **)v28);
      v27 = (uint64_t *)MEMORY[0x18D76437C](v28, 0x1012C40EC159624);
    }
  }
  v29 = (uint64_t *)*((_QWORD *)this + 14);
  v30 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v27);
  if (v29 != v30)
  {
    v31 = *((_QWORD *)this + 14);
    if (v31)
    {
      if (*(char *)(v31 + 23) < 0)
        operator delete(*(void **)v31);
      v30 = (uint64_t *)MEMORY[0x18D76437C](v31, 0x1012C40EC159624);
    }
  }
  v32 = (uint64_t *)*((_QWORD *)this + 15);
  v33 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v30);
  if (v32 != v33)
  {
    v34 = *((_QWORD *)this + 15);
    if (v34)
    {
      if (*(char *)(v34 + 23) < 0)
        operator delete(*(void **)v34);
      v33 = (uint64_t *)MEMORY[0x18D76437C](v34, 0x1012C40EC159624);
    }
  }
  v35 = (uint64_t *)*((_QWORD *)this + 16);
  v36 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v33);
  if (v35 != v36)
  {
    v37 = *((_QWORD *)this + 16);
    if (v37)
    {
      if (*(char *)(v37 + 23) < 0)
        operator delete(*(void **)v37);
      v36 = (uint64_t *)MEMORY[0x18D76437C](v37, 0x1012C40EC159624);
    }
  }
  return addr_obj::V2AddressObjectProto::default_instance_((addr_obj::V2AddressObjectProto *)v36);
}

addr_obj::V1AddressObjectProto *addr_obj::V1AddressObjectProto::SharedDtor(addr_obj::V1AddressObjectProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  addr_obj::V1AddressObjectProto *result;
  uint64_t v15;
  uint64_t v16;

  v2 = (uint64_t *)*((_QWORD *)this + 5);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 5);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  v5 = (uint64_t *)*((_QWORD *)this + 7);
  v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  if (v5 != v6)
  {
    v7 = *((_QWORD *)this + 7);
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      v6 = (uint64_t *)MEMORY[0x18D76437C](v7, 0x1012C40EC159624);
    }
  }
  v8 = (uint64_t *)*((_QWORD *)this + 8);
  v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  if (v8 != v9)
  {
    v10 = *((_QWORD *)this + 8);
    if (v10)
    {
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      v9 = (uint64_t *)MEMORY[0x18D76437C](v10, 0x1012C40EC159624);
    }
  }
  v11 = (uint64_t *)*((_QWORD *)this + 10);
  v12 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9);
  if (v11 != v12)
  {
    v13 = *((_QWORD *)this + 10);
    if (v13)
    {
      if (*(char *)(v13 + 23) < 0)
        operator delete(*(void **)v13);
      v12 = (uint64_t *)MEMORY[0x18D76437C](v13, 0x1012C40EC159624);
    }
  }
  result = (addr_obj::V1AddressObjectProto *)addr_obj::V1AddressObjectProto::default_instance_((addr_obj::V1AddressObjectProto *)v12);
  if (result != this)
  {
    v15 = *((_QWORD *)this + 6);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = *((_QWORD *)this + 9);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    result = (addr_obj::V1AddressObjectProto *)*((_QWORD *)this + 11);
    if (result)
      return (addr_obj::V1AddressObjectProto *)(*(uint64_t (**)(addr_obj::V1AddressObjectProto *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t addr_obj::V1AddressObjectProto::default_instance_(addr_obj::V1AddressObjectProto *this)
{
  unsigned __int8 v1;
  addr_obj::V1AddressObjectProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50438);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50438))
  {
    v3 = (addr_obj::V1AddressObjectProto *)operator new();
    addr_obj::V1AddressObjectProto::V1AddressObjectProto(v3);
    qword_1EDF50430 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50438);
  }
  return qword_1EDF50430;
}

void sub_18864D3DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40D9981018);
  __cxa_guard_abort(&qword_1EDF50438);
  _Unwind_Resume(a1);
}

int *AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::Free(int *this)
{
  int v1;
  int *v2;

  v1 = AddrObjGoogle::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[*((unsigned __int8 *)this + 8)];
  if (*((_BYTE *)this + 9))
  {
    switch(*((_BYTE *)this + 8))
    {
      case 1:
        if (!*(_QWORD *)this)
          return this;
        if (**(_QWORD **)this)
          goto LABEL_22;
        goto LABEL_33;
      case 2:
        if (!*(_QWORD *)this)
          return this;
        if (**(_QWORD **)this)
LABEL_22:
          MEMORY[0x18D764364]();
        goto LABEL_33;
      case 3:
      case 4:
      case 6:
      case 0x10:
      case 0x12:
        if (!*(_QWORD *)this)
          return this;
        if (**(_QWORD **)this)
          goto LABEL_26;
        goto LABEL_33;
      case 5:
      case 7:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x11:
        if (!*(_QWORD *)this)
          return this;
        if (**(_QWORD **)this)
          goto LABEL_26;
        goto LABEL_33;
      case 8:
        if (!*(_QWORD *)this)
          return this;
        if (**(_QWORD **)this)
LABEL_26:
          MEMORY[0x18D764364]();
        break;
      case 9:
      case 0xC:
        if (!*(_QWORD *)this)
          return this;
        AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>(*(int **)this);
        break;
      case 0xA:
      case 0xB:
        if (!*(_QWORD *)this)
          return this;
        AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(*(uint64_t **)this);
        break;
      default:
        return this;
    }
    goto LABEL_33;
  }
  if (v1 == 10)
  {
    this = *(int **)this;
    if (this)
      return (int *)(*(uint64_t (**)(int *))(*(_QWORD *)this + 8))(this);
  }
  else if (v1 == 9)
  {
    v2 = *(int **)this;
    if (*(_QWORD *)this)
    {
      if (*((char *)v2 + 23) < 0)
        operator delete(*(void **)v2);
LABEL_33:
      JUMPOUT(0x18D76437CLL);
    }
  }
  return this;
}

uint64_t addr_obj::AddressObjectBase::AddressObjectBase(uint64_t a1, int *a2, __int128 *a3, __int128 **a4)
{
  int v7;
  __int128 v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;

  *(_QWORD *)a1 = off_1E1BF97A8;
  v7 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v7;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "11.3.0");
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 40) = v8;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v9 = *(__int128 *)((char *)a3 + 24);
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a3 + 5);
    *(_OWORD *)(a1 + 64) = v9;
  }
  v10 = (std::string *)(a1 + 88);
  if (*((char *)a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
  }
  else
  {
    v11 = a3[3];
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a3 + 8);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  std::vector<addr_obj::Fingerprints::Fingerprint>::__init_with_size[abi:ne180100]<addr_obj::Fingerprints::Fingerprint*,addr_obj::Fingerprints::Fingerprint*>((std::string *)(a1 + 112), *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * (a4[1] - *a4));
  addr_obj::AddressObjectProto::AddressObjectProto((addr_obj::AddressObjectProto *)(a1 + 136));
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  return a1;
}

void sub_18864D720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  char *v10;
  void **v11;
  void **v12;
  void **v13;

  if (v10[87] < 0)
    operator delete(*v13);
  if (v10[63] < 0)
    operator delete(*v12);
  if (v10[39] < 0)
    operator delete(*v11);
  _Unwind_Resume(exception_object);
}

addr_obj::AddressObjectProto *addr_obj::AddressObjectProto::AddressObjectProto(addr_obj::AddressObjectProto *this)
{
  AddrObjGoogle::protobuf::internal *v2;

  *(_QWORD *)this = &off_1E1BF99A0;
  v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 2) = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  return this;
}

void sub_18864D7F4(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;
  uint64_t *v3;
  uint64_t *v4;

  v4 = v3;
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v4);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V2AddressObjectProto::default_instance(addr_obj::V2AddressObjectProto *this)
{
  addr_obj::V2AddressObjectProto *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;

  v1 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::default_instance_(this);
  if (!v1)
    addr_obj::protobuf_AddDesc_AddressObject_2eproto(0, v2, v3, v4);
  return addr_obj::V2AddressObjectProto::default_instance_(v1);
}

void AddrObjGoogle::protobuf::internal::ExtensionSet::RegisterMessageExtension(uint64_t a1, unsigned int a2, char a3, char a4, char a5, uint64_t a6)
{
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  std::string v16[2];

  if ((a3 & 0xFE) != 0xA)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/extension_set.cc", 153);
    v12 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: type == WireFormatLite::TYPE_MESSAGE || type == WireFormatLite::TYPE_GROUP: ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (AddrObjGoogle::protobuf::internal::LogMessage *)v12);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v13) = a3;
  BYTE1(v13) = a4;
  BYTE2(v13) = a5;
  *((_QWORD *)&v13 + 1) = a6;
  v14 = 0;
  sub_18880E344(a1, a2, &v13);
}

void sub_18864D8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::geo3::Address::default_instance(addr_obj::geo3::Address *this)
{
  addr_obj::geo3::Address *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;

  v1 = (addr_obj::geo3::Address *)addr_obj::geo3::Address::default_instance_(this);
  if (!v1)
    addr_obj::geo3::protobuf_AddDesc_geo3_2dslim_2eproto(0, v2, v3, v4);
  return addr_obj::geo3::Address::default_instance_(v1);
}

addr_obj::VenueInfoProto *addr_obj::VenueInfoProto::VenueInfoProto(addr_obj::VenueInfoProto *this)
{
  *(_QWORD *)this = &off_1E1BF91C0;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  return this;
}

void sub_18864D97C(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;

  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void __dispatch_work_block_invoke(uint64_t a1)
{
  NSObject *v2;

  objc_msgSend(*(id *)(a1 + 32), "activity");
  v2 = objc_claimAutoreleasedReturnValue();
  os_activity_apply(v2, *(os_block_t *)(a1 + 40));

}

uint64_t geo::codec::_readMaterials(uint64_t result, unint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int a6)
{
  _QWORD *v6;
  uint64_t v7;
  FILE *v8;
  int v9;
  uint64_t *v13;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  geo::codec::Allocator *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t Material;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int *v88;
  geo::codec::Allocator *VarUint32;
  uint64_t v90;
  void *v91;
  _QWORD *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _OWORD *v108;
  __int128 *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int v115;
  std::__shared_weak_count *v116;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v118;
  __int128 v119;
  int v120;
  unsigned __int8 v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count_vtbl *v130;
  uint64_t v131;
  std::__shared_weak_count_vtbl *v132;
  int v133;
  std::__shared_weak_count_vtbl *v134;
  int v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  _BOOL4 v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  __int128 *v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  _DWORD *v181;
  int *v182;
  int *v183;
  uint64_t v184;
  unint64_t v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  int v197;
  unint64_t v198;
  uint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  __int128 v204;
  __int128 v205;

  a2[1] = *a2;
  a4[1] = *a4;
  v6 = (_QWORD *)*a3;
  a3[1] = *a3;
  v7 = *(_QWORD *)(result + 48);
  if ((unint64_t)(v7 + 2) <= *(_QWORD *)(result + 56))
  {
    v13 = a3;
    v15 = (_QWORD *)result;
    v16 = *(unsigned __int16 *)(*(_QWORD *)(result + 40) + v7);
    *(_QWORD *)(result + 48) = v7 + 2;
    if (v16)
    {
      v17 = a3[2] - (_QWORD)v6;
      if (v16 <= v17 >> 4)
      {
        v23 = 16 * v16;
        v24 = &v6[2 * v16];
        do
        {
          if (v6)
          {
            *v6 = 0;
            v6[1] = 0;
          }
          v6 += 2;
          v23 -= 16;
        }
        while (v23);
        a3[1] = (uint64_t)v24;
        v29 = *a2;
        if (v16 <= (uint64_t)(a2[2] - *a2) >> 3)
        {
LABEL_38:
          if (v16 <= (a4[2] - *a4) >> 3)
          {
LABEL_49:
            if (!(_DWORD)v16)
              return 1;
            v60 = 0;
            v203 = (_QWORD *)(a5 + 8);
            v200 = v16;
            v201 = a5 + 16;
            v199 = v13;
            while (1)
            {
              v61 = *v13;
              v62 = *v13 + 16 * v60;
              if (a6)
              {
                *(_BYTE *)(v62 + 8) = a6;
                v63 = v15[6];
                v64 = v15[7];
              }
              else
              {
                v65 = v15[6];
                v64 = v15[7];
                v63 = v65 + 1;
                if (v65 + 1 > v64)
                {
                  v8 = (FILE *)*MEMORY[0x1E0C80C10];
                  v9 = 7735;
                  goto LABEL_3;
                }
                v66 = *(_BYTE *)(v15[5] + v65);
                v15[6] = v63;
                v67 = *(_QWORD *)v62;
                *(_BYTE *)(v61 + 16 * v60 + 8) = v66 & 1;
                if ((v66 & 1) == 0)
                {
                  v68 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
                  v69 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, 40, 8);
                  *(_QWORD *)v62 = v69;
                  if (!v69)
                  {
                    v8 = (FILE *)*MEMORY[0x1E0C80C10];
                    v9 = 7748;
                    goto LABEL_3;
                  }
                  v70 = v15[6];
                  v71 = v15[7];
                  v72 = v70 + 8;
                  if (v70 + 8 > v71)
                  {
                    v8 = (FILE *)*MEMORY[0x1E0C80C10];
                    v9 = 7749;
                    goto LABEL_3;
                  }
                  v73 = v15[5];
                  *(_QWORD *)v67 = *(_QWORD *)(v73 + v70);
                  v15[6] = v72;
                  v74 = v70 + 10;
                  if (v74 > v71)
                  {
                    v8 = (FILE *)*MEMORY[0x1E0C80C10];
                    v9 = 7750;
                    goto LABEL_3;
                  }
                  *(_WORD *)(v67 + 8) = *(_WORD *)(v73 + v72);
                  v15[6] = v74;
                  v75 = geo::codec::Allocator::instance(v69);
                  v76 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 16))(v75, 24, 8);
                  *(_QWORD *)(v67 + 16) = v76;
                  if (!v76)
                  {
                    v8 = (FILE *)*MEMORY[0x1E0C80C10];
                    v9 = 7754;
                    goto LABEL_3;
                  }
                  Material = geo::codec::readMaterial(v15, v76, 0);
                  if ((Material & 1) == 0)
                  {
                    v8 = (FILE *)*MEMORY[0x1E0C80C10];
                    v9 = 7755;
                    goto LABEL_3;
                  }
                  v78 = v15[6];
                  if ((unint64_t)(v78 + 2) > v15[7])
                  {
                    v8 = (FILE *)*MEMORY[0x1E0C80C10];
                    v9 = 7758;
                    goto LABEL_3;
                  }
                  *(_WORD *)(v67 + 10) = *(_WORD *)(v15[5] + v78);
                  v15[6] = v78 + 2;
                  v79 = geo::codec::Allocator::instance((geo::codec::Allocator *)Material);
                  v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v79 + 16))(v79, 24 * *(unsigned __int16 *)(v67 + 10), 8);
                  *(_QWORD *)(v67 + 24) = v80;
                  if (!v80)
                  {
                    v8 = (FILE *)*MEMORY[0x1E0C80C10];
                    v9 = 7760;
                    goto LABEL_3;
                  }
                  if (*(_WORD *)(v67 + 10))
                  {
                    v81 = 0;
                    v82 = 0;
                    while (1)
                    {
                      v80 = geo::codec::readMaterial(v15, (uint64_t *)(*(_QWORD *)(v67 + 24) + v81), 1);
                      if ((v80 & 1) == 0)
                        break;
                      ++v82;
                      v81 += 24;
                      if (v82 >= *(unsigned __int16 *)(v67 + 10))
                        goto LABEL_66;
                    }
                    v8 = (FILE *)*MEMORY[0x1E0C80C10];
                    v9 = 7763;
                    goto LABEL_3;
                  }
LABEL_66:
                  v83 = v15[6];
                  if ((unint64_t)(v83 + 1) > v15[7])
                  {
                    v8 = (FILE *)*MEMORY[0x1E0C80C10];
                    v9 = 7766;
                    goto LABEL_3;
                  }
                  *(_BYTE *)(v67 + 12) = *(_BYTE *)(v15[5] + v83);
                  ++v15[6];
                  v84 = geo::codec::Allocator::instance((geo::codec::Allocator *)v80);
                  v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v84 + 16))(v84, 16 * *(unsigned __int8 *)(v67 + 12), 8);
                  *(_QWORD *)(v67 + 32) = v85;
                  if (!v85)
                  {
                    v8 = (FILE *)*MEMORY[0x1E0C80C10];
                    v9 = 7768;
                    goto LABEL_3;
                  }
                  if (*(_BYTE *)(v67 + 12))
                  {
                    v86 = 0;
                    v87 = 0;
                    while (1)
                    {
                      v88 = (unsigned int *)(*(_QWORD *)(v67 + 32) + v86);
                      VarUint32 = (geo::codec::Allocator *)geo::codec::chapterReadVarUint32(v15, v88);
                      if (!(_DWORD)VarUint32)
                        break;
                      v90 = geo::codec::Allocator::instance(VarUint32);
                      v91 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v90 + 16))(v90, *v88, 8);
                      *((_QWORD *)v88 + 1) = v91;
                      memcpy(v91, (const void *)(v15[5] + v15[6]), *v88);
                      v15[6] += *v88;
                      ++v87;
                      v86 += 16;
                      if (v87 >= *(unsigned __int8 *)(v67 + 12))
                        goto LABEL_100;
                    }
                    v8 = (FILE *)*MEMORY[0x1E0C80C10];
                    v9 = 7771;
                    goto LABEL_3;
                  }
                  goto LABEL_100;
                }
              }
              if (v63 + 8 > v64)
              {
                v8 = (FILE *)*MEMORY[0x1E0C80C10];
                v9 = 7742;
                goto LABEL_3;
              }
              *(_QWORD *)v62 = *(_QWORD *)(v15[5] + v63);
              v15[6] = v63 + 8;
              if (*(_QWORD *)v62)
              {
                v92 = (_QWORD *)a2[1];
                v93 = a2[2];
                if ((unint64_t)v92 < v93)
                {
                  if (v92)
                    *v92 = *(_QWORD *)v62;
                  v94 = v92 + 1;
LABEL_99:
                  a2[1] = (unint64_t)v94;
                  goto LABEL_100;
                }
                v95 = (uint64_t)((uint64_t)v92 - *a2) >> 3;
                v96 = v95 + 1;
                if ((unint64_t)(v95 + 1) >> 61)
                  std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                v97 = v93 - *a2;
                if (v97 >> 2 > v96)
                  v96 = v97 >> 2;
                if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
                  v96 = 0x1FFFFFFFFFFFFFFFLL;
                if (v96)
                {
                  v98 = 8 * v96;
                  v99 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 8 * v96, 8);
                  v100 = (_QWORD *)(v99 + 8 * v95);
                  v96 = v99 + v98;
                  if (v99)
                    *v100 = *(_QWORD *)v62;
                }
                else
                {
                  v100 = (_QWORD *)(8 * v95);
                }
                v101 = *a2;
                v102 = a2[1];
                v103 = v100;
                if (v102 != *a2)
                {
                  v104 = v102 - *a2 - 8;
                  if (v104 < 0x38)
                  {
                    v103 = v100;
                  }
                  else
                  {
                    v103 = v100;
                    if (v102 - (unint64_t)v100 >= 0x20)
                    {
                      v105 = (v104 >> 3) + 1;
                      v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
                      v107 = v102 - v106;
                      v103 = &v100[v106 / 0xFFFFFFFFFFFFFFF8];
                      v108 = v100 - 2;
                      v109 = (__int128 *)(v102 - 16);
                      v110 = v105 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v111 = *v109;
                        *(v108 - 1) = *(v109 - 1);
                        *v108 = v111;
                        v108 -= 2;
                        v109 -= 2;
                        v110 -= 4;
                      }
                      while (v110);
                      v102 = v107;
                      if (v105 == (v105 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_97;
                    }
                  }
                  do
                  {
                    v112 = *(_QWORD *)(v102 - 8);
                    v102 -= 8;
                    *--v103 = v112;
                  }
                  while (v102 != v101);
                }
LABEL_97:
                v94 = v100 + 1;
                *a2 = (unint64_t)v103;
                a2[1] = (unint64_t)(v100 + 1);
                v113 = a2[2];
                a2[2] = v96;
                if (v101)
                  (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v101, v113 - v101);
                goto LABEL_99;
              }
LABEL_100:
              v114 = v15[6];
              if ((unint64_t)(v114 + 1) > v15[7])
              {
                v8 = (FILE *)*MEMORY[0x1E0C80C10];
                v9 = 7778;
                goto LABEL_3;
              }
              v202 = v60;
              v115 = *(unsigned __int8 *)(v15[5] + v114);
              v15[6] = v114 + 1;
              v116 = (std::__shared_weak_count *)operator new(0x40uLL);
              v116->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v116->__shared_owners_;
              v116->__shared_weak_owners_ = 0;
              v116->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB2F8;
              v116[1].std::__shared_count = 0u;
              *(_OWORD *)&v116[1].__shared_weak_owners_ = 0u;
              *(_DWORD *)((char *)&v116[2].__vftable + 7) = 0;
              v118 = (std::__shared_weak_count_vtbl *)malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
              v116[1].__vftable = v118;
              if (v118)
              {
                *(_QWORD *)&v119 = -1;
                *((_QWORD *)&v119 + 1) = -1;
                *(_OWORD *)&v118[5].__get_deleter = v119;
                *(_OWORD *)&v118[6].~__shared_weak_count = v119;
                *(_OWORD *)&v118[4].__on_zero_shared_weak = v119;
                *(_OWORD *)&v118[5].~__shared_weak_count_0 = v119;
                *(_OWORD *)&v118[4].~__shared_weak_count = v119;
                *(_OWORD *)&v118[4].__on_zero_shared = v119;
                *(_OWORD *)&v118[3].~__shared_weak_count_0 = v119;
                *(_OWORD *)&v118[3].__get_deleter = v119;
                *(_OWORD *)&v118[2].__on_zero_shared = v119;
                *(_OWORD *)&v118[2].__on_zero_shared_weak = v119;
                *(_OWORD *)&v118[1].__get_deleter = v119;
                *(_OWORD *)&v118[2].~__shared_weak_count = v119;
                *(_OWORD *)&v118->__on_zero_shared_weak = v119;
                *(_OWORD *)&v118[1].~__shared_weak_count_0 = v119;
                *(_OWORD *)&v118->~__shared_weak_count = v119;
                *(_OWORD *)&v118->__on_zero_shared = v119;
              }
              *(_QWORD *)&v205 = v116 + 1;
              *((_QWORD *)&v205 + 1) = v116;
              if (v115)
              {
                v120 = 0;
                while (1)
                {
                  v122 = v15[6];
                  v123 = v15[7];
                  v124 = v122 + 2;
                  if (v122 + 2 > v123)
                  {
                    v197 = 7783;
                    goto LABEL_206;
                  }
                  v125 = v15[5];
                  v126 = *(unsigned __int16 *)(v125 + v122);
                  v15[6] = v124;
                  v127 = v122 + 6;
                  if (v127 > v123)
                    break;
                  v128 = *(unsigned int *)(v125 + v124);
                  v15[6] = v127;
                  v129 = BYTE1(v116[2].__shared_owners_);
                  v130 = v116[1].__vftable;
                  if (BYTE1(v116[2].__shared_owners_))
                  {
                    if (v129 >= 0x20)
                    {
                      v131 = 0;
                      v134 = v116[1].__vftable;
                      while (1)
                      {
                        v135 = (int)v134->~__shared_weak_count;
                        v134 = (std::__shared_weak_count_vtbl *)((char *)v134 + 8);
                        if (v135 == (_DWORD)v126)
                          break;
                        if (v129 == ++v131)
                          goto LABEL_106;
                      }
                    }
                    else
                    {
                      v131 = 0;
                      v132 = v116[1].__vftable;
                      while (1)
                      {
                        v133 = (int)v132->~__shared_weak_count;
                        v132 = (std::__shared_weak_count_vtbl *)((char *)v132 + 8);
                        if (v133 == (_DWORD)v126)
                          break;
                        if (v129 == ++v131)
                          goto LABEL_105;
                      }
                    }
                    *((_DWORD *)&v130->~__shared_weak_count + 2 * v131 + 1) = v128;
                  }
                  else
                  {
LABEL_105:
                    *((_QWORD *)&v130->~__shared_weak_count + v129) = v126 | (v128 << 32);
                    v121 = BYTE1(v116[2].__shared_owners_) + 1;
                    BYTE1(v116[2].__shared_owners_) = v121;
                    qsort(v116[1].__vftable, v121, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
                  }
LABEL_106:
                  if (++v120 >= v115)
                    goto LABEL_120;
                }
                v197 = 7784;
LABEL_206:
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v197);
                do
                  v198 = __ldaxr(p_shared_owners);
                while (__stlxr(v198 - 1, p_shared_owners));
                if (!v198)
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
                return 0;
              }
LABEL_120:
              *(_QWORD *)&v204 = v116 + 1;
              *((_QWORD *)&v204 + 1) = v116;
              do
                v136 = __ldxr(p_shared_owners);
              while (__stxr(v136 + 1, p_shared_owners));
              FeatureStyleAttributesSet::insert(a5, (uint64_t *)&v204);
              v137 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
              if (*((_QWORD *)&v204 + 1))
              {
                v138 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
                do
                  v139 = __ldaxr(v138);
                while (__stlxr(v139 - 1, v138));
                if (!v139)
                {
                  ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                  std::__shared_weak_count::__release_weak(v137);
                }
              }
              v204 = v205;
              if (*((_QWORD *)&v205 + 1))
              {
                v140 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
                do
                  v141 = __ldxr(v140);
                while (__stxr(v141 + 1, v140));
              }
              v142 = (_QWORD *)*v203;
              if (!*v203)
                goto LABEL_137;
              v143 = (_QWORD *)(a5 + 8);
              do
              {
                v144 = FeatureStyleAttributesSet::FeatureStyleAttributesCompare::operator()(v201, v142 + 4, (uint64_t *)&v204);
                v145 = v142 + 1;
                if (!v144)
                {
                  v145 = v142;
                  v143 = v142;
                }
                v142 = (_QWORD *)*v145;
              }
              while (*v145);
              if (v143 == v203
                || FeatureStyleAttributesSet::FeatureStyleAttributesCompare::operator()(v201, (uint64_t *)&v204, v143 + 4))
              {
LABEL_137:
                std::__tree<std::shared_ptr<FeatureStyleAttributes const>,FeatureStyleAttributesSet::FeatureStyleAttributesCompare,std::allocator<std::shared_ptr<FeatureStyleAttributes const>>>::__emplace_unique_key_args<std::shared_ptr<FeatureStyleAttributes const>,std::shared_ptr<FeatureStyleAttributes const> const&>((uint64_t **)a5, (uint64_t *)&v204, (uint64_t *)&v204);
                v146 = *(_QWORD **)(a5 + 32);
                if ((unint64_t)v146 >= *(_QWORD *)(a5 + 40))
                {
                  v150 = std::vector<std::shared_ptr<FeatureStyleAttributes const>,geo::StdAllocator<std::shared_ptr<FeatureStyleAttributes const>,geo::codec::Allocator>>::__emplace_back_slow_path<std::shared_ptr<FeatureStyleAttributes const> const&>(a5 + 24, &v204);
                }
                else
                {
                  if (v146)
                  {
                    *v146 = v204;
                    v147 = *((_QWORD *)&v204 + 1);
                    v146[1] = *((_QWORD *)&v204 + 1);
                    if (v147)
                    {
                      v148 = (unint64_t *)(v147 + 8);
                      do
                        v149 = __ldxr(v148);
                      while (__stxr(v149 + 1, v148));
                    }
                  }
                  v150 = (uint64_t)(v146 + 2);
                }
                v151 = v200;
                *(_QWORD *)(a5 + 32) = v150;
                v152 = ((v150 - *(_QWORD *)(a5 + 24)) >> 4) - 1;
              }
              else
              {
                v164 = *(_QWORD *)(a5 + 24);
                v165 = *(_QWORD *)(a5 + 32) - v164;
                if (v165)
                {
                  v166 = v165 >> 4;
                  if (v166 <= 1)
                    v166 = 1;
                  v151 = v200;
                  v152 = 0;
                  if (*(_BYTE *)(v204 + 33))
                  {
                    v167 = *(unsigned __int8 *)(v204 + 33);
                    while (1)
                    {
                      v179 = *(_QWORD *)(v164 + 16 * v152);
                      if ((_DWORD)v167 == *(unsigned __int8 *)(v179 + 33))
                      {
                        v180 = *(_QWORD *)v204;
                        v181 = *(_DWORD **)v179;
                        if (**(_DWORD **)v204 == *v181 && *(_DWORD *)(v180 + 4) == v181[1])
                          break;
                      }
LABEL_175:
                      if (++v152 == v166)
                        goto LABEL_165;
                    }
                    v182 = v181 + 3;
                    v183 = (int *)(v180 + 12);
                    v184 = 1;
                    while (v167 != v184)
                    {
                      v185 = v184;
                      if (*(v183 - 1) == *(v182 - 1))
                      {
                        v187 = *v183;
                        v183 += 2;
                        v186 = v187;
                        v188 = *v182;
                        v182 += 2;
                        ++v184;
                        if (v186 == v188)
                          continue;
                      }
                      if (v185 >= v167)
                        break;
                      goto LABEL_175;
                    }
                  }
                  else
                  {
                    while (*(_BYTE *)(*(_QWORD *)v164 + 33))
                    {
                      ++v152;
                      v164 += 16;
                      if (v166 == v152)
                      {
LABEL_165:
                        v152 = v166;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v152 = 0;
                  v151 = v200;
                }
              }
              v153 = (uint64_t *)a4[1];
              v154 = a4[2];
              if ((unint64_t)v153 >= v154)
              {
                v156 = ((uint64_t)v153 - *a4) >> 3;
                v157 = v156 + 1;
                if ((unint64_t)(v156 + 1) >> 61)
                  std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                v158 = v151;
                v159 = v154 - *a4;
                if (v159 >> 2 > v157)
                  v157 = v159 >> 2;
                if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8)
                  v160 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v160 = v157;
                if (v160)
                {
                  v161 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4[3] + 16))(a4[3], 8 * v160, 8);
                  v162 = (uint64_t *)(v161 + 8 * v156);
                  v163 = v161 + 8 * v160;
                  if (v161)
                    *v162 = v152;
                }
                else
                {
                  v163 = 0;
                  v162 = (uint64_t *)(8 * v156);
                }
                v13 = v199;
                v151 = v158;
                v168 = *a4;
                v169 = a4[1];
                v170 = v162;
                v60 = v202;
                if (v169 == *a4)
                  goto LABEL_186;
                v171 = v169 - *a4 - 8;
                if (v171 < 0x38)
                {
                  v170 = v162;
                }
                else
                {
                  v170 = v162;
                  if ((unint64_t)(v169 - (_QWORD)v162) >= 0x20)
                  {
                    v172 = (v171 >> 3) + 1;
                    v173 = 8 * (v172 & 0x3FFFFFFFFFFFFFFCLL);
                    v174 = v169 - v173;
                    v170 = &v162[v173 / 0xFFFFFFFFFFFFFFF8];
                    v175 = v162 - 2;
                    v176 = (__int128 *)(v169 - 16);
                    v177 = v172 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v178 = *v176;
                      *((_OWORD *)v175 - 1) = *(v176 - 1);
                      *(_OWORD *)v175 = v178;
                      v175 -= 4;
                      v176 -= 2;
                      v177 -= 4;
                    }
                    while (v177);
                    v169 = v174;
                    if (v172 == (v172 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_186:
                      v155 = v162 + 1;
                      *a4 = (uint64_t)v170;
                      a4[1] = (uint64_t)(v162 + 1);
                      v190 = a4[2];
                      a4[2] = v163;
                      if (v168)
                        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4[3] + 40))(a4[3], v168, v190 - v168);
                      goto LABEL_188;
                    }
                  }
                }
                do
                {
                  v189 = *(_QWORD *)(v169 - 8);
                  v169 -= 8;
                  *--v170 = v189;
                }
                while (v169 != v168);
                goto LABEL_186;
              }
              v13 = v199;
              if (v153)
                *v153 = v152;
              v155 = v153 + 1;
LABEL_188:
              a4[1] = (uint64_t)v155;
              v191 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
              if (!*((_QWORD *)&v204 + 1))
                goto LABEL_192;
              v192 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
              do
                v193 = __ldaxr(v192);
              while (__stlxr(v193 - 1, v192));
              if (!v193)
              {
                ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                std::__shared_weak_count::__release_weak(v191);
                v194 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
                if (*((_QWORD *)&v205 + 1))
                  goto LABEL_193;
LABEL_196:
                ++v60;
                result = 1;
                if (v60 == v151)
                  return result;
              }
              else
              {
LABEL_192:
                v194 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
                if (!*((_QWORD *)&v205 + 1))
                  goto LABEL_196;
LABEL_193:
                v195 = (unint64_t *)&v194->__shared_owners_;
                do
                  v196 = __ldaxr(v195);
                while (__stlxr(v196 - 1, v195));
                if (v196)
                  goto LABEL_196;
                ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                std::__shared_weak_count::__release_weak(v194);
                ++v60;
                result = 1;
                if (v60 == v151)
                  return result;
              }
            }
          }
          v45 = a4[1] - *a4;
          result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a4[3] + 16))(a4[3], 8 * v16, 8);
          v46 = result + (v45 & 0xFFFFFFFFFFFFFFF8);
          v47 = *a4;
          v48 = a4[1];
          v49 = v46;
          if (v48 != *a4)
          {
            v50 = v48 - *a4 - 8;
            if (v50 < 0x58)
            {
              v49 = result + (v45 & 0xFFFFFFFFFFFFFFF8);
              do
              {
LABEL_46:
                v58 = *(_QWORD *)(v48 - 8);
                v48 -= 8;
                *(_QWORD *)(v49 - 8) = v58;
                v49 -= 8;
              }
              while (v48 != v47);
              goto LABEL_47;
            }
            v49 = result + (v45 & 0xFFFFFFFFFFFFFFF8);
            if (v48 - (v45 & 0xFFFFFFFFFFFFFFF8) - result < 0x20)
              goto LABEL_46;
            v51 = (v50 >> 3) + 1;
            v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            v53 = v48 - v52;
            v49 = v46 - v52;
            v54 = (_OWORD *)(result + 8 * (v45 >> 3) - 16);
            v55 = (__int128 *)(v48 - 16);
            v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v57 = *v55;
              *(v54 - 1) = *(v55 - 1);
              *v54 = v57;
              v54 -= 2;
              v55 -= 2;
              v56 -= 4;
            }
            while (v56);
            v48 = v53;
            if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_46;
          }
LABEL_47:
          *a4 = v49;
          a4[1] = v46;
          v59 = a4[2];
          a4[2] = result + 8 * v16;
          if (v47)
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4[3] + 40))(a4[3], v47, v59 - v47);
          goto LABEL_49;
        }
LABEL_28:
        v30 = a2[1] - v29;
        result = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 8 * v16, 8);
        v31 = result + (v30 & 0xFFFFFFFFFFFFFFF8);
        v32 = *a2;
        v33 = a2[1];
        v34 = v31;
        if (v33 == *a2)
          goto LABEL_36;
        v35 = v33 - *a2 - 8;
        if (v35 >= 0x58)
        {
          v34 = result + (v30 & 0xFFFFFFFFFFFFFFF8);
          if (v33 - (v30 & 0xFFFFFFFFFFFFFFF8) - result >= 0x20)
          {
            v36 = (v35 >> 3) + 1;
            v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
            v38 = v33 - v37;
            v34 = v31 - v37;
            v39 = (_OWORD *)(result + 8 * (v30 >> 3) - 16);
            v40 = (__int128 *)(v33 - 16);
            v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v42 = *v40;
              *(v39 - 1) = *(v40 - 1);
              *v39 = v42;
              v39 -= 2;
              v40 -= 2;
              v41 -= 4;
            }
            while (v41);
            v33 = v38;
            if (v36 == (v36 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_36:
              *a2 = v34;
              a2[1] = v31;
              v44 = a2[2];
              a2[2] = result + 8 * v16;
              if (v32)
                result = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v32, v44 - v32);
              goto LABEL_38;
            }
          }
        }
        else
        {
          v34 = result + (v30 & 0xFFFFFFFFFFFFFFF8);
        }
        do
        {
          v43 = *(_QWORD *)(v33 - 8);
          v33 -= 8;
          *(_QWORD *)(v34 - 8) = v43;
          v34 -= 8;
        }
        while (v33 != v32);
        goto LABEL_36;
      }
      v18 = v17 >> 3;
      if (v17 >> 3 <= v16)
        v18 = v16;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v19 = 0xFFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3[3] + 16))(a3[3], 16 * v19, 8);
      v20 = 0;
      v21 = result + 16 * v16;
      do
      {
        v22 = (_QWORD *)(result + v20);
        if (result + v20)
        {
          *v22 = 0;
          v22[1] = 0;
        }
        v20 += 16;
      }
      while (16 * v16 != v20);
      v25 = result + 16 * v19;
      v27 = *v13;
      v26 = v13[1];
      if (v26 != *v13)
      {
        do
        {
          *(_OWORD *)(result - 16) = *(_OWORD *)(v26 - 16);
          result -= 16;
          v26 -= 16;
        }
        while (v26 != v27);
        v26 = *v13;
      }
      *v13 = result;
      v13[1] = v21;
      v28 = v13[2];
      v13[2] = v25;
      if (v26)
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[3] + 40))(v13[3], v26, v28 - v26);
    }
    v29 = *a2;
    if (v16 <= (uint64_t)(a2[2] - *a2) >> 3)
      goto LABEL_38;
    goto LABEL_28;
  }
  v8 = (FILE *)*MEMORY[0x1E0C80C10];
  v9 = 7725;
LABEL_3:
  fprintf(v8, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v9);
  return 0;
}

void sub_18864E910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readPolygons(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned __int16 *v17;
  int v18;

  if (!geo::codec::_readPolygonsofType((uint64_t)a1, 32, a2))
  {
    v8 = 2640;
    goto LABEL_24;
  }
  v4 = a1[1];
  if (v4)
  {
    v5 = *a1;
    if (v4 == 1)
    {
      v6 = 0;
      v7 = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
      v11 = (unsigned __int16 *)(v5 + 16);
      v12 = v4 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v13 = *(v11 - 8);
        v15 = *v11;
        v11 += 16;
        v14 = v15;
        if (v13 == 104)
          ++v9;
        if (v14 == 104)
          ++v10;
        v12 -= 2;
      }
      while (v12);
      v7 = v10 + v9;
      if (v4 == v6)
      {
LABEL_17:
        if (v7)
        {
          if ((geo::codec::_readModernBuildings(a1, 104, (GeoCodecsVertexPool *)(*a2 + 816), (unint64_t *)(*a2 + 280), a2) & 1) != 0)return 1;
          v8 = 2644;
          goto LABEL_24;
        }
        goto LABEL_20;
      }
    }
    v16 = v4 - v6;
    v17 = (unsigned __int16 *)(v5 + 16 * v6);
    do
    {
      v18 = *v17;
      v17 += 8;
      if (v18 == 104)
        ++v7;
      --v16;
    }
    while (v16);
    goto LABEL_17;
  }
LABEL_20:
  if ((geo::codec::_readPolygonsofType((uint64_t)a1, 33, a2) & 1) != 0)
    return 1;
  v8 = 2646;
LABEL_24:
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v8);
  return 0;
}

uint64_t geo::codec::_readPolygonsofType(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::chrono::steady_clock::time_point v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::chrono::steady_clock::time_point v24;
  uint64_t v25;
  int v26;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v27;
  char v28;
  std::chrono::steady_clock::time_point v29;
  FILE *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  geo::codec::Allocator *v35;
  uint64_t v36;
  geo::codec::Allocator *v37;
  uint64_t v38;
  uint64_t v39;
  geo::codec::Allocator *v40;
  uint64_t v41;
  geo::codec::Allocator *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v56;
  int v57;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::chrono::steady_clock::time_point v67;
  _QWORD *v68;
  uint64_t *v69;
  int v70;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v71;
  unint64_t *v72;
  unint64_t v73;
  geo::codec::Allocator *v74;
  unint64_t v75;
  uint64_t v76;
  FILE *v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  geo::codec::Allocator *v115;
  geo::codec::Allocator *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  FILE *v122;
  uint64_t v123;
  unsigned int v124;
  unint64_t v125;
  unint64_t v126;
  BOOL v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int v144;
  char v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int v154;
  int32x2_t v155;
  uint64_t v156;
  float32x2_t *v157;
  _BYTE *v158;
  unint64_t v159;
  geo::codec::Allocator *v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unint64_t v164;
  int v165;
  char v166;
  int v167;
  char v168;
  int v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177[2];
  __int128 v178;
  std::__shared_weak_count *v179;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v180;
  uint64_t v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  uint64_t v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  geo::codec::Allocator *v190;
  geo::codec::Allocator *v191;
  const char *v192;

  v190 = 0;
  v191 = 0;
  v6 = *a3;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    while (*(unsigned __int16 *)(*(_QWORD *)a1 + 16 * v8) != a2)
    {
      v8 = ++v9;
      if (v7 <= v9)
        goto LABEL_5;
    }
    v10 = geo::codec::chapterAt(a1, v9, a2, v6 + 1912);
    v6 = *a3;
  }
  else
  {
LABEL_5:
    v10 = 0;
  }
  v11 = chapterTypeAsString(a2);
  v186 = v11;
  v187 = v6;
  v12 = a3[1];
  v188 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v15.__d_.__rep_;
  v16 = (double *)&unk_189CCD000;
  if (!v10)
  {
    v27 = v15.__d_.__rep_;
    v28 = 1;
    v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v182 = (uint64_t)v11;
    if (v11)
      goto LABEL_42;
    goto LABEL_43;
  }
  v184 = 0;
  v185 = 0;
  v182 = 0;
  v183 = 0;
  v181 = 0;
  v17 = *(_QWORD *)(*a3 + 856);
  v18 = *(_QWORD *)(*a3 + 864);
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v185 + 1) & 1) == 0)
  {
    v30 = (FILE *)*MEMORY[0x1E0C80C10];
    v31 = 2679;
LABEL_23:
    v32 = fprintf(v30, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v31);
    v33 = 0;
    goto LABEL_24;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v185) & 1) == 0)
  {
    v30 = (FILE *)*MEMORY[0x1E0C80C10];
    v31 = 2680;
    goto LABEL_23;
  }
  v172 = v17;
  v174 = v18;
  v19 = v185;
  v21 = *a3;
  v20 = (std::__shared_weak_count *)a3[1];
  *(_QWORD *)&v178 = "ChapterVertices";
  *((_QWORD *)&v178 + 1) = v21;
  v179 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v180 = v24.__d_.__rep_;
  v25 = geo::codec::chapterAt(a1, HIDWORD(v185), 20, *a3 + 1912);
  v176 = v25;
  v171 = v19;
  if (!v25)
  {
    v57 = 2685;
LABEL_53:
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v57);
    v26 = 6;
    goto LABEL_54;
  }
  if ((geo::codec::decodeVertices(v25, &v191, (uint64_t *)&v190, *(_DWORD *)(v25 + 64) > 0x43u) & 1) == 0)
  {
    v57 = 2687;
    goto LABEL_53;
  }
  v26 = 0;
LABEL_54:
  v58 = std::chrono::steady_clock::now().__d_.__rep_;
  v192 = "ChapterVertices";
  v177[0] = (uint64_t *)&v192;
  v32 = (uint64_t)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v21 + 1912, (uint64_t *)&v192, (uint64_t)&std::piecewise_construct, v177);
  *(double *)(v32 + 32) = (double)((v58 - v24.__d_.__rep_) / 1000) * 0.001;
  v59 = v174;
  v33 = v176;
  if (v20)
  {
    v60 = (unint64_t *)&v20->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v26 == 6)
    goto LABEL_24;
  v62 = v172;
  if (a2 == 32)
  {
    v64 = *a3;
    v63 = (std::__shared_weak_count *)a3[1];
    *(_QWORD *)&v178 = "ChapterPolygonFeatures";
    *((_QWORD *)&v178 + 1) = v64;
    v179 = v63;
    if (v63)
    {
      v65 = (unint64_t *)&v63->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    v67.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v68 = (_QWORD *)*a3;
    v69 = (uint64_t *)(*a3 + 1216);
    v180 = v67.__d_.__rep_;
    if ((geo::codec::decodePointCharacteristics((_QWORD *)a1, 52, v69, v68 + 153, v68 + 156, v68 + 157, (uint64_t)(v68 + 239)) & 1) != 0)
    {
      v70 = 0;
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 2692);
      v70 = 6;
    }
    v71 = std::chrono::steady_clock::now().__d_.__rep_;
    v192 = "ChapterPolygonFeatures";
    v177[0] = (uint64_t *)&v192;
    v32 = (uint64_t)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v64 + 1912, (uint64_t *)&v192, (uint64_t)&std::piecewise_construct, v177);
    *(double *)(v32 + 32) = (double)((v71 - v67.__d_.__rep_) / 1000) * 0.001;
    v59 = v174;
    v33 = v176;
    if (v63)
    {
      v72 = (unint64_t *)&v63->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    if (v70 != 6)
    {
      v62 = v172;
      goto LABEL_74;
    }
LABEL_24:
    v28 = 0;
    if (!v191)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_74:
  v74 = v191;
  if (v191 || (v74 = v190) != 0)
    v75 = *((_QWORD *)v74 + 5);
  else
    v75 = 0;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v184 + 1) & 1) == 0)
  {
    v77 = (FILE *)*MEMORY[0x1E0C80C10];
    v78 = 2702;
    goto LABEL_90;
  }
  if (HIDWORD(v184) >= 0x10000)
  {
    v77 = (FILE *)*MEMORY[0x1E0C80C10];
    v78 = 2705;
    goto LABEL_90;
  }
  if ((geo::codec::_makeSpaceForLabels((geo::codec::Allocator *)HIDWORD(v184), &v181, a3) & 1) == 0)
  {
    v77 = (FILE *)*MEMORY[0x1E0C80C10];
    v78 = 2706;
    goto LABEL_90;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v184) & 1) == 0)
  {
    v77 = (FILE *)*MEMORY[0x1E0C80C10];
    v78 = 2709;
    goto LABEL_90;
  }
  if (v184 >= 0x10000)
  {
    v77 = (FILE *)*MEMORY[0x1E0C80C10];
    v78 = 2711;
LABEL_90:
    v32 = fprintf(v77, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v78);
    v28 = 0;
    if (!v191)
      goto LABEL_26;
    goto LABEL_25;
  }
  if (a2 == 32)
  {
    std::vector<GeoCodecsPolygonFeature,geo::StdAllocator<GeoCodecsPolygonFeature,geo::codec::Allocator>>::resize((uint64_t *)(*a3 + 96), v184);
    _ZNSt3__111make_sharedB8ne180100I22FeatureStyleAttributesJEvEENS_10shared_ptrIT_EEDpOT0_(&v178);
    v76 = v178;
    **(_QWORD **)v178 = 0x200000005;
    *(_WORD *)(v76 + 33) = 513;
    std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>((uint64_t)&v182, &v178);
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&v178);
    v161 = 0;
  }
  else
  {
    if (!v75)
    {
      v77 = (FILE *)*MEMORY[0x1E0C80C10];
      v78 = 2716;
      goto LABEL_90;
    }
    std::vector<GeoCodecsBuildingFootprintFeature,geo::StdAllocator<GeoCodecsBuildingFootprintFeature,geo::codec::Allocator>>::resize((unint64_t *)(*a3 + 280), v184);
    v161 = *(_QWORD *)(*a3 + 312);
    if (!v161)
    {
      v77 = (FILE *)*MEMORY[0x1E0C80C10];
      v78 = 2721;
      goto LABEL_90;
    }
    _ZNSt3__111make_sharedB8ne180100I22FeatureStyleAttributesJEvEENS_10shared_ptrIT_EEDpOT0_(&v178);
    v79 = v178;
    **(_QWORD **)v178 = 0x400000005;
    *(_WORD *)(v79 + 33) = 1025;
    std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>((uint64_t)&v182, &v178);
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&v178);
  }
  v80 = v171;
  v81 = FeatureStyleAttributesSet::insert(*a3 + 1112, &v182);
  v82 = v81[1];
  *(_QWORD *)&v178 = *v81;
  *((_QWORD *)&v178 + 1) = v82;
  if (v82)
  {
    v83 = (unint64_t *)(v82 + 8);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>((uint64_t)&v182, &v178);
  v32 = std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&v178);
  if ((_DWORD)v184)
  {
    v85 = 0;
    v162 = 0;
    v164 = v59 - v62;
    do
    {
      v86 = *a3;
      if (a2 == 32)
      {
        v175 = 0;
        v87 = *(_QWORD *)(v86 + 96) + (v85 << 7);
      }
      else
      {
        v87 = *(_QWORD *)(v86 + 280) + 136 * v85;
        *(_QWORD *)(v87 + 112) = 0;
        v175 = v87;
      }
      v173 = v85;
      v88 = a3[1];
      if (v88)
      {
        v89 = (unint64_t *)(v88 + 16);
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
      v91 = *(std::__shared_weak_count **)(v87 + 8);
      *(_QWORD *)v87 = v86;
      *(_QWORD *)(v87 + 8) = v88;
      if (v91)
        std::__shared_weak_count::__release_weak(v91);
      if ((geo::codec::hp_readLabel(v87, (_QWORD *)v10, &v181, v164, (uint64_t)a3) & 1) == 0)
      {
        v77 = (FILE *)*MEMORY[0x1E0C80C10];
        v78 = 2747;
        goto LABEL_90;
      }
      v92 = *(_QWORD *)(v10 + 48);
      if ((unint64_t)(v92 + 1) <= *(_QWORD *)(v10 + 56))
      {
        v93 = 0;
        *(_BYTE *)(v10 + 32) = 1;
        *(_QWORD *)(v10 + 8) = *(_QWORD *)(v10 + 40) + v92;
        *(_OWORD *)(v10 + 16) = xmmword_189CBD5D0;
        v94 = 1;
      }
      else
      {
        v94 = *(_QWORD *)(v10 + 16);
        v93 = *(_QWORD *)(v10 + 24);
      }
      v95 = v93 + 1;
      v96 = 8 * v94;
      if (v93 + 1 > 8 * v94)
      {
        v77 = (FILE *)*MEMORY[0x1E0C80C10];
        v78 = 2759;
        goto LABEL_90;
      }
      v97 = *(_QWORD *)(v10 + 8);
      v98 = *(unsigned __int8 *)(v97 + (v93 >> 3));
      *(_QWORD *)(v10 + 24) = v95;
      v99 = v93 + 2;
      if (v93 + 2 > v96)
      {
        v77 = (FILE *)*MEMORY[0x1E0C80C10];
        v78 = 2760;
        goto LABEL_90;
      }
      v170 = *(unsigned __int8 *)(v97 + (v95 >> 3));
      *(_QWORD *)(v10 + 24) = v99;
      v100 = v93 + 3;
      if (v93 + 3 > v96)
      {
        v77 = (FILE *)*MEMORY[0x1E0C80C10];
        v78 = 2761;
        goto LABEL_90;
      }
      v169 = *(unsigned __int8 *)(v97 + (v99 >> 3));
      *(_QWORD *)(v10 + 24) = v100;
      v101 = v93 + 4;
      if (v93 + 4 > v96)
      {
        v77 = (FILE *)*MEMORY[0x1E0C80C10];
        v78 = 2762;
        goto LABEL_90;
      }
      v168 = v93 + 3;
      v167 = *(unsigned __int8 *)(v97 + (v100 >> 3));
      *(_QWORD *)(v10 + 24) = v101;
      v102 = v93 + 5;
      if (v93 + 5 > v96)
      {
        v77 = (FILE *)*MEMORY[0x1E0C80C10];
        v78 = 2763;
        goto LABEL_90;
      }
      v166 = v93 + 4;
      v165 = *(unsigned __int8 *)(v97 + (v101 >> 3));
      *(_QWORD *)(v10 + 24) = v102;
      if (a2 == 33)
      {
        if (v93 + 6 > v96)
        {
          v146 = 2767;
          goto LABEL_198;
        }
        v103 = *(unsigned __int8 *)(v97 + (v102 >> 3));
        *(_QWORD *)(v10 + 24) = v93 + 6;
        *(_BYTE *)(v175 + 128) = (v103 >> (~(_BYTE)v102 & 7)) & 1;
        v104 = v93 + 8;
        if (v93 + 8 > v96)
        {
          v146 = 2770;
          goto LABEL_198;
        }
      }
      else
      {
        v104 = v93 + 8;
        if (v93 + 8 > v96)
        {
          v77 = (FILE *)*MEMORY[0x1E0C80C10];
          v78 = 2772;
          goto LABEL_90;
        }
      }
      v105 = 1 << (~(_BYTE)v93 & 7);
      *(_QWORD *)(v10 + 24) = v104;
      v106 = v92 + (v104 >> 3);
      if ((v104 & 7) != 0)
        ++v106;
      *(_QWORD *)(v10 + 48) = v106;
      *(_BYTE *)(v10 + 32) = 0;
      v107 = 1;
      LODWORD(v178) = 1;
      if ((v105 & v98) != 0)
      {
        if (!geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v178))
        {
          v77 = (FILE *)*MEMORY[0x1E0C80C10];
          v78 = 2779;
          goto LABEL_90;
        }
        v107 = v178;
      }
      *(_DWORD *)(v87 + 96) = v80;
      *(_DWORD *)(v87 + 100) = v107;
      *(_OWORD *)(v87 + 80) = xmmword_189CC14F0;
      v163 = v107;
      if (a2 == 33)
      {
        *(_QWORD *)(v175 + 112) = v162;
        if (v162 + (unint64_t)v107 > v75)
        {
          v77 = (FILE *)*MEMORY[0x1E0C80C10];
          v78 = 2789;
          goto LABEL_90;
        }
        if (v107)
        {
          v108 = 0;
          do
          {
            LODWORD(v177[0]) = 0;
            if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)v177) & 1) == 0)
            {
              v122 = (FILE *)*MEMORY[0x1E0C80C10];
              v146 = 2792;
              goto LABEL_203;
            }
            *(float *)(v161 + 4 * v162 + 4 * v108++) = (float)SLODWORD(v177[0]) * 0.00048852;
          }
          while (v108 < v178);
          v162 += v108;
          v33 = v176;
        }
      }
      if (((1 << (~(_BYTE)v95 & 7)) & v170) != 0)
      {
        v109 = *(_QWORD *)(v10 + 48);
        v110 = v109 + 8;
        if ((unint64_t)(v109 + 8) > *(_QWORD *)(v10 + 56))
        {
          v77 = (FILE *)*MEMORY[0x1E0C80C10];
          v78 = 2801;
          goto LABEL_90;
        }
        v111 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + v109);
        *(_QWORD *)(v10 + 48) = v110;
        *(_QWORD *)(v87 + 40) = v111;
      }
      if (((1 << (~(_BYTE)v99 & 7)) & v169) != 0)
      {
        LODWORD(v177[0]) = 0;
        if (!geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)v177))
        {
          v77 = (FILE *)*MEMORY[0x1E0C80C10];
          v78 = 2807;
          goto LABEL_90;
        }
      }
      if (((1 << (~v168 & 7)) & v167) != 0)
      {
        v112 = *(_QWORD *)(v10 + 48);
        if ((unint64_t)(v112 + 4) > *(_QWORD *)(v10 + 56))
        {
          v77 = (FILE *)*MEMORY[0x1E0C80C10];
          v78 = 2813;
          goto LABEL_90;
        }
        v113 = *(_DWORD *)(*(_QWORD *)(v10 + 40) + v112);
        *(_QWORD *)(v10 + 48) = v112 + 4;
        *(_DWORD *)(v87 + 68) = v113;
      }
      if (((1 << (~v166 & 7)) & v165) != 0)
      {
        v32 = geo::codec::accumulateStyleAttributes(*a3 + 1112, &v182, (_QWORD *)v10, v87);
        if ((v32 & 1) == 0)
        {
          v77 = (FILE *)*MEMORY[0x1E0C80C10];
          v78 = 2821;
          goto LABEL_90;
        }
      }
      else
      {
        v32 = (uint64_t)std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((_QWORD *)(v87 + 24), v182, (uint64_t)v183);
      }
      v80 += v163;
      v85 = v173 + 1;
    }
    while (v173 + 1 < (unint64_t)v184);
  }
  if (v191)
  {
    v114 = geo::codec::Allocator::instance((geo::codec::Allocator *)v32);
    v115 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v114 + 24))(v114, 1, 72);
    v190 = v115;
    if (!v115)
    {
      v77 = (FILE *)*MEMORY[0x1E0C80C10];
      v78 = 2831;
      goto LABEL_90;
    }
    v116 = v191;
    *((_QWORD *)v115 + 5) = *((_QWORD *)v191 + 5);
    if (a2 == 32)
    {
      v117 = *a3;
      v118 = *(_QWORD *)(*a3 + 1224);
      v119 = *(_QWORD *)(*a3 + 1216);
      v120 = *(uint64_t **)(*a3 + 1256);
      v121 = *(uint64_t **)(*a3 + 1248);
    }
    else
    {
      v118 = 0;
      v119 = 0;
      v120 = 0;
      v121 = 0;
      v117 = *a3;
    }
    *(_QWORD *)&v178 = v118;
    *((_QWORD *)&v178 + 1) = v119;
    v177[0] = v120;
    v177[1] = v121;
    v32 = geo::codec::_createLOD(v116, v115, 0, (*(_QWORD *)(v117 + 4) & 0x3F00uLL) > 0xE00, 0, 0, &v178, v177);
    v33 = v176;
  }
  if (v190)
  {
    v123 = 816;
    if (a2 == 32)
      v123 = 800;
    *(_QWORD *)(*a3 + v123) = v190;
    v190 = 0;
  }
  v124 = *(_DWORD *)(v10 + 64);
  if (a2 == 32 && v124 >= 0x19)
  {
    v126 = *(_QWORD *)(v10 + 48);
    v125 = *(_QWORD *)(v10 + 56);
    v127 = v125 >= v126;
    v128 = v125 - v126;
    if (v127)
    {
      *(_BYTE *)(v10 + 32) = 1;
      v129 = *(_QWORD *)(v10 + 40) + v126;
      *(_QWORD *)(v10 + 16) = v128;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 8) = v129;
    }
    v32 = geo::codec::decodeGhostPointEncoding((uint64_t *)(v10 + 8), *(_QWORD *)(*a3 + 800), (uint64_t)(*(_QWORD *)(*a3 + 104) - *(_QWORD *)(*a3 + 96)) >> 7, *(_QWORD *)(*a3 + 96));
    if ((v32 & 1) == 0)
    {
      v122 = (FILE *)*MEMORY[0x1E0C80C10];
      v146 = 2898;
      goto LABEL_203;
    }
    v130 = *(_QWORD *)(v10 + 48) + (*(_QWORD *)(v10 + 24) >> 3);
    if ((*(_QWORD *)(v10 + 24) & 7) != 0)
      ++v130;
    *(_QWORD *)(v10 + 48) = v130;
    *(_BYTE *)(v10 + 32) = 0;
    v124 = *(_DWORD *)(v10 + 64);
    v33 = v176;
  }
  if (a2 != 32 || v124 < 0x25)
    goto LABEL_222;
  v131 = *(_QWORD *)(v10 + 48);
  v132 = *(_QWORD *)(v10 + 56);
  v127 = v132 >= v131;
  v133 = v132 - v131;
  if (v127)
  {
    v134 = 0;
    *(_BYTE *)(v10 + 32) = 1;
    v135 = *(_QWORD *)(v10 + 40) + v131;
    *(_QWORD *)(v10 + 16) = v133;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 8) = v135;
  }
  else
  {
    v133 = *(_QWORD *)(v10 + 16);
    v134 = *(_QWORD *)(v10 + 24);
  }
  v136 = v134 + 1;
  v137 = 8 * v133;
  if (v134 + 1 > 8 * v133)
  {
    v122 = (FILE *)*MEMORY[0x1E0C80C10];
    v146 = 2908;
    goto LABEL_203;
  }
  v138 = *(_QWORD *)(v10 + 8);
  v139 = *(unsigned __int8 *)(v138 + (v134 >> 3));
  *(_QWORD *)(v10 + 24) = v136;
  if (((v139 >> (~(_BYTE)v134 & 7)) & 1) != 0 && (_DWORD)v184)
  {
    v140 = 0;
    v141 = *a3;
    v142 = (unint64_t)v184 << 7;
    do
    {
      v143 = v136 + 1;
      if (v136 + 1 > v137)
      {
        v122 = (FILE *)*MEMORY[0x1E0C80C10];
        v146 = 2914;
        goto LABEL_203;
      }
      v144 = *(unsigned __int8 *)(v138 + (v136 >> 3));
      *(_QWORD *)(v10 + 24) = v143;
      v145 = (v144 >> (~(_BYTE)v136 & 7)) & 1;
      v32 = *(_QWORD *)(v141 + 96) + v140;
      *(_BYTE *)(v32 + 127) = v145;
      v140 += 128;
      v136 = v143;
    }
    while (v142 != v140);
  }
  else
  {
    v143 = v134 + 1;
  }
  if (v124 < 0x26)
    goto LABEL_219;
  if (v143 + 1 > v137)
  {
    v122 = (FILE *)*MEMORY[0x1E0C80C10];
    v146 = 2929;
    goto LABEL_203;
  }
  v147 = *(unsigned __int8 *)(v138 + (v143 >> 3));
  *(_QWORD *)(v10 + 24) = v143 + 1;
  v148 = v147 >> (~(_BYTE)v143++ & 7);
  if ((v148 & 1) == 0)
  {
LABEL_219:
    v159 = v131 + (v143 >> 3);
    if ((v143 & 7) != 0)
      ++v159;
    *(_QWORD *)(v10 + 48) = v159;
    *(_BYTE *)(v10 + 32) = 0;
    v33 = v176;
LABEL_222:
    *(_DWORD *)(a1 + 40) = HIDWORD(v185);
    v160 = v191;
    *(_BYTE *)(a1 + 44) = v191 != 0;
    v28 = 1;
    if (!v160)
      goto LABEL_26;
    goto LABEL_25;
  }
  LODWORD(v178) = 0;
  v32 = BitstreamUnpack((uint64_t *)(v10 + 8), (int *)&v178, 5uLL);
  if ((v32 & 1) == 0)
  {
    v122 = (FILE *)*MEMORY[0x1E0C80C10];
    v146 = 2933;
    goto LABEL_203;
  }
  v149 = v184;
  if (!(_DWORD)v184)
  {
LABEL_218:
    v143 = *(_QWORD *)(v10 + 24);
    v131 = *(_QWORD *)(v10 + 48);
    goto LABEL_219;
  }
  v150 = 0;
  v151 = 0;
  v152 = (v178 + 1);
  while (1)
  {
    v153 = *(_QWORD *)(v10 + 24);
    if (v153 + 1 > 8 * *(_QWORD *)(v10 + 16))
    {
      v122 = (FILE *)*MEMORY[0x1E0C80C10];
      v146 = 2938;
      goto LABEL_203;
    }
    v154 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 8) + (v153 >> 3));
    *(_QWORD *)(v10 + 24) = v153 + 1;
    if (((v154 >> (~(_BYTE)v153 & 7)) & 1) != 0)
      break;
LABEL_210:
    ++v151;
    v150 += 128;
    if (v151 >= v149)
      goto LABEL_218;
  }
  LODWORD(v177[0]) = 0;
  LODWORD(v192) = 0;
  if (!BitstreamUnpackSigned((uint64_t *)(v10 + 8), (int *)v177, v152))
  {
    v146 = 2943;
    goto LABEL_198;
  }
  v32 = BitstreamUnpackSigned((uint64_t *)(v10 + 8), (int *)&v192, v152);
  if ((_DWORD)v32)
  {
    v156 = *a3;
    v157 = (float32x2_t *)(*(_QWORD *)(*a3 + 96) + v150);
    v157[15].i8[6] = 1;
    v158 = *(_BYTE **)(v156 + 800);
    if (!v158)
    {
      v146 = 2947;
      goto LABEL_198;
    }
    *(float *)v155.i32 = (float)~(-1 << *v158);
    v157[13] = vdiv_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v192, v177[0])), (float32x2_t)vdup_lane_s32(v155, 0));
    v149 = v184;
    goto LABEL_210;
  }
  v146 = 2944;
LABEL_198:
  v122 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_203:
  v32 = fprintf(v122, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v146);
  v33 = v176;
  v28 = 0;
  if (v191)
  {
LABEL_25:
    v34 = geo::codec::Allocator::instance((geo::codec::Allocator *)v32);
    v35 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v34 + 40))(v34, *((_QWORD *)v191 + 1), 0);
    v36 = geo::codec::Allocator::instance(v35);
    v37 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v36 + 40))(v36, *((_QWORD *)v191 + 4), 0);
    v38 = geo::codec::Allocator::instance(v37);
    v32 = (*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v38 + 40))(v38, v191, 0);
  }
LABEL_26:
  if (v190)
  {
    v39 = geo::codec::Allocator::instance((geo::codec::Allocator *)v32);
    v40 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v39 + 40))(v39, *((_QWORD *)v190 + 1), 0);
    v41 = geo::codec::Allocator::instance(v40);
    v42 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v41 + 40))(v41, *((_QWORD *)v190 + 4), 0);
    v43 = geo::codec::Allocator::instance(v42);
    v32 = (*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v43 + 40))(v43, v190, 0);
  }
  if (a1 && v33)
  {
    if (*(_BYTE *)v33)
    {
      v44 = geo::codec::Allocator::instance((geo::codec::Allocator *)v32);
      v32 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v44 + 40))(v44, *(_QWORD *)(v33 + 40), 0);
    }
    v45 = geo::codec::Allocator::instance((geo::codec::Allocator *)v32);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v45 + 40))(v45, v33, 0);
LABEL_34:
    if (*(_BYTE *)v10)
    {
      v46 = geo::codec::Allocator::instance((geo::codec::Allocator *)v32);
      v32 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v46 + 40))(v46, *(_QWORD *)(v10 + 40), 0);
    }
    v47 = geo::codec::Allocator::instance((geo::codec::Allocator *)v32);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v47 + 40))(v47, v10, 0);
  }
  else if (a1)
  {
    goto LABEL_34;
  }
  v48 = v183;
  if (!v183)
    goto LABEL_41;
  v49 = (unint64_t *)&v183->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    v56 = (uint64_t)v186;
    v6 = v187;
    v27 = rep;
    v16 = (double *)&unk_189CCD000;
    v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v182 = v56;
    if (v56)
    {
LABEL_42:
      *(_QWORD *)&v178 = &v182;
      *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6 + 1912, &v182, (uint64_t)&std::piecewise_construct, (uint64_t **)&v178)+ 4) = (double)((v29.__d_.__rep_ - v27) / 1000) * v16[196];
    }
  }
  else
  {
LABEL_41:
    v51 = (uint64_t)v186;
    v6 = v187;
    v27 = rep;
    v16 = (double *)&unk_189CCD000;
    v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v182 = v51;
    if (v51)
      goto LABEL_42;
  }
LABEL_43:
  v52 = v188;
  if (v188)
  {
    v53 = (unint64_t *)&v188->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  return v28 & 1;
}

void sub_18864FCAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100](v1 - 200);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 168));
  _Unwind_Resume(a1);
}

const char *chapterTypeAsString(int a1)
{
  int v1;
  const char *result;

  v1 = a1 - 32;
  result = "ChapterPolygonFeatures";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "ChapterBuildingFeatures";
      break;
    case 2:
      result = "ChapterCoastlineFeatures";
      break;
    case 6:
      result = "ChapterWrappingCoastlineFeatures";
      break;
    case 7:
      result = "ChapterBuildingMeshes";
      break;
    case 19:
      result = "ChapterLinePointCharacteristics";
      break;
    case 20:
      result = "ChapterPolygonPointCharacteristics";
      break;
    case 23:
      result = "ChapterPolygonPointLabelPositions";
      break;
    case 28:
      result = "ChapterConnectivity";
      break;
    case 48:
      result = "ChapterGeoIDSegments";
      break;
    case 58:
      result = "ChapterAddressRanges";
      break;
    case 61:
      result = "ChapterTileReferences";
      break;
    case 64:
      result = "ChapterHighResBuildings";
      break;
    case 68:
      result = "ChapterDebugBlob";
      break;
    case 69:
      result = "ChapterElevationRaster";
      break;
    case 70:
      result = "ChapterStyleAttributeRaster";
      break;
    case 71:
      result = "ChapterDaVinciMetadata";
      break;
    case 72:
      result = "ChapterLowResBuildings";
      break;
    case 80:
      result = "ChapterTransitMZROverride";
      break;
    case 87:
      result = "ChapterCoverage";
      break;
    case 96:
      result = "ChapterTransitSystems";
      break;
    case 97:
      result = "ChapterTransitNetwork";
      break;
    case 103:
      result = "ChapterRoadNetwork";
      break;
    case 104:
      result = "ChapterVenueMZROverride";
      break;
    case 105:
      result = "ChapterVenues";
      break;
    case 106:
      result = "ChapterStorefronts";
      break;
    case 107:
      result = "ChapterLowResBorderBuildings";
      break;
    case 108:
      result = "ChapterBorderBuildingMeshes";
      break;
    default:
      result = "unknonwn";
      break;
  }
  return result;
}

uint64_t geo::codec::_readPois(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::chrono::steady_clock::time_point v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  geo::codec::Allocator *v19;
  GeoCodecsVertexPool *v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v24;
  uint64_t v25;
  std::chrono::steady_clock::time_point v26;
  int v27;
  geo::codec::Allocator *v28;
  uint64_t v29;
  uint64_t v30;
  geo::codec::Allocator *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v42;
  FILE *v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  geo::codec::Allocator *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int32x2_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  int32x2_t *v68;
  int32x2_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int32 v92;
  int v93;
  char v94;
  char v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  __int128 v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unsigned int v125;
  int32x2_t v126;
  unint64_t v127;
  unint64_t v128;
  BOOL v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unsigned int v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  unsigned int v152;
  float v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  int v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t *v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172[5];
  __int128 v173;
  __int128 v174;
  int v175;
  unint64_t v176;
  unsigned int v177;
  int v178;
  int v179;
  int v180;
  uint64_t v181;
  unsigned int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  const char *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  _QWORD v191[3];
  _QWORD *v192;
  uint64_t v193;

  v193 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = a1[1];
  if (!v7)
  {
LABEL_5:
    v10 = 0;
    v187 = "ChapterPointFeatures";
    v188 = v6;
    v11 = a3[1];
    v189 = (std::__shared_weak_count *)v11;
    if (!v11)
      goto LABEL_10;
    goto LABEL_8;
  }
  v8 = 0;
  v9 = 0;
  while (*(_WORD *)(*a1 + 16 * v8) != 30)
  {
    v8 = ++v9;
    if (v7 <= v9)
      goto LABEL_5;
  }
  v10 = geo::codec::chapterAt((uint64_t)a1, v9, 30, v6 + 1912);
  v6 = *a3;
  v187 = "ChapterPointFeatures";
  v188 = v6;
  v11 = a3[1];
  v189 = (std::__shared_weak_count *)v11;
  if (v11)
  {
LABEL_8:
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
LABEL_10:
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v14.__d_.__rep_;
  if (!v10)
  {
    v24 = v14.__d_.__rep_;
    v25 = 1;
    v26.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v172[0] = (uint64_t)"ChapterPointFeatures";
    if (!"ChapterPointFeatures")
      goto LABEL_42;
    goto LABEL_41;
  }
  v185 = 0;
  v186 = 0;
  v184 = 0;
  v183 = 0;
  v182 = 0;
  v181 = 0;
  v15 = *(_QWORD *)(*a3 + 856);
  v16 = *(_QWORD *)(*a3 + 864);
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v184 + 1) & 1) == 0)
  {
    v18 = 0;
    v27 = 806;
LABEL_28:
    v28 = (geo::codec::Allocator *)fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v27);
    v25 = 0;
    goto LABEL_29;
  }
  v17 = geo::codec::chapterAt((uint64_t)a1, HIDWORD(v184), 20, *a3 + 1912);
  v18 = v17;
  if (!v17)
  {
    v27 = 808;
    goto LABEL_28;
  }
  v19 = (geo::codec::Allocator *)geo::codec::decodePointVertices(v17);
  if (!v19)
  {
    v27 = 813;
    goto LABEL_28;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v184) & 1) == 0)
  {
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 815;
    goto LABEL_55;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, &v183) & 1) == 0)
  {
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 816;
    goto LABEL_55;
  }
  if (v183 >= 0x10000)
  {
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 818;
    goto LABEL_55;
  }
  if ((geo::codec::_makeSpaceForLabels((geo::codec::Allocator *)v183, &v181, a3) & 1) == 0)
  {
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 819;
    goto LABEL_55;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, &v182) & 1) == 0)
  {
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 821;
    goto LABEL_55;
  }
  v21 = *((_QWORD *)v19 + 2);
  v22 = v21 > v184;
  v23 = v21 - v184;
  if (!v22)
  {
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 823;
    goto LABEL_55;
  }
  if (v23 < v182)
  {
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 824;
    goto LABEL_55;
  }
  if (!v182)
    goto LABEL_218;
  _ZNSt3__111make_sharedB8ne180100I22FeatureStyleAttributesJEvEENS_10shared_ptrIT_EEDpOT0_(&v173);
  v45 = v173;
  **(_QWORD **)v173 = 0x300000005;
  *(_WORD *)(v45 + 33) = 769;
  std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>((uint64_t)&v185, &v173);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&v173);
  v46 = FeatureStyleAttributesSet::insert(*a3 + 1112, &v185);
  v47 = v46[1];
  *(_QWORD *)&v173 = *v46;
  *((_QWORD *)&v173 + 1) = v47;
  if (v47)
  {
    v48 = (unint64_t *)(v47 + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>((uint64_t)&v185, &v173);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&v173);
  std::vector<GeoCodecsPointFeature,geo::StdAllocator<GeoCodecsPointFeature,geo::codec::Allocator>>::resize((uint64_t *)(*a3 + 504), v182);
  v51 = geo::codec::Allocator::instance(v50);
  v52 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v51 + 24))(v51, v182, 16);
  v53 = *a3;
  *(_QWORD *)(*a3 + 664) = v52;
  if (!v52)
  {
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 838;
    goto LABEL_55;
  }
  v54 = v182;
  *(_DWORD *)(v53 + 672) = v182;
  if (v54)
  {
    v55 = 0;
    v160 = v16 - v15;
    v56 = vdup_n_s32(0x42CA0000u);
    do
    {
      v57 = *a3;
      v58 = a3[1];
      v59 = *(_QWORD *)(*a3 + 504);
      if (v58)
      {
        v60 = (unint64_t *)(v58 + 16);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      v62 = (uint64_t *)(v59 + 224 * v55);
      v63 = (std::__shared_weak_count *)v62[1];
      *v62 = v57;
      v62[1] = v58;
      v168 = (uint64_t)v62;
      if (v63)
        std::__shared_weak_count::__release_weak(v63);
      v64 = v55 + v184;
      *(_QWORD *)(v59 + 224 * v55 + 88) = *(_QWORD *)(*((_QWORD *)v19 + 1) + 8 * v64);
      v65 = *((_QWORD *)v19 + 3);
      if (v65)
      {
        v66 = *(float *)(v65 + 4 * v64);
        if (v66 != 3.4028e38)
        {
          v67 = v59 + 224 * v55;
          *(_BYTE *)(v67 + 212) = 1;
          *(float *)(v67 + 96) = v66;
        }
      }
      v68 = (int32x2_t *)(v59 + 224 * v55);
      v68[20].i32[0] = 1120534528;
      v69 = v68 + 20;
      v69[-10] = 0;
      v69[6].i8[3] = 0;
      v69[1] = v56;
      if ((geo::codec::hp_readLabel(v168, (_QWORD *)v10, &v181, v160, (uint64_t)a3) & 1) == 0)
      {
        v43 = (FILE *)*MEMORY[0x1E0C80C10];
        v44 = 860;
        goto LABEL_55;
      }
      v71 = *(_QWORD *)(v10 + 48);
      v70 = *(_QWORD *)(v10 + 56);
      if (v71 + 1 <= v70)
      {
        v73 = 0;
        *(_BYTE *)(v10 + 32) = 1;
        *(_QWORD *)(v10 + 8) = *(_QWORD *)(v10 + 40) + v71;
        *(_OWORD *)(v10 + 16) = xmmword_189CBD5D0;
        v72 = 1;
      }
      else
      {
        v72 = *(_QWORD *)(v10 + 16);
        v73 = *(_QWORD *)(v10 + 24);
      }
      v74 = v73 + 1;
      v75 = 8 * v72;
      if (v73 + 1 > 8 * v72)
      {
        v43 = (FILE *)*MEMORY[0x1E0C80C10];
        v44 = 873;
        goto LABEL_55;
      }
      v76 = *(_QWORD *)(v10 + 8);
      v77 = *(unsigned __int8 *)(v76 + (v73 >> 3));
      *(_QWORD *)(v10 + 24) = v74;
      v78 = v73 + 2;
      if (v73 + 2 > v75)
      {
        v43 = (FILE *)*MEMORY[0x1E0C80C10];
        v44 = 874;
        goto LABEL_55;
      }
      v165 = v55;
      v79 = *(unsigned __int8 *)(v76 + (v74 >> 3));
      *(_QWORD *)(v10 + 24) = v78;
      v80 = v73 + 3;
      if (v73 + 3 > v75)
      {
        v43 = (FILE *)*MEMORY[0x1E0C80C10];
        v44 = 875;
        goto LABEL_55;
      }
      v158 = v59;
      v81 = *(unsigned __int8 *)(v76 + (v78 >> 3));
      *(_QWORD *)(v10 + 24) = v80;
      v82 = v73 + 4;
      if (v73 + 4 > v75)
      {
        v43 = (FILE *)*MEMORY[0x1E0C80C10];
        v44 = 876;
        goto LABEL_55;
      }
      v83 = *(unsigned __int8 *)(v76 + (v80 >> 3));
      *(_QWORD *)(v10 + 24) = v82;
      v84 = v73 + 5;
      if (v73 + 5 > v75)
      {
        v43 = (FILE *)*MEMORY[0x1E0C80C10];
        v44 = 877;
        goto LABEL_55;
      }
      v85 = *(unsigned __int8 *)(v76 + (v82 >> 3));
      *(_QWORD *)(v10 + 24) = v84;
      if (v73 + 6 > v75)
      {
        v43 = (FILE *)*MEMORY[0x1E0C80C10];
        v44 = 878;
        goto LABEL_55;
      }
      v162 = *(unsigned __int8 *)(v76 + (v84 >> 3));
      *(_QWORD *)(v10 + 24) = v73 + 6;
      v86 = v73 + 8;
      if (v73 + 8 > v75)
      {
        v43 = (FILE *)*MEMORY[0x1E0C80C10];
        v44 = 879;
        goto LABEL_55;
      }
      *(_QWORD *)(v10 + 24) = v86;
      v87 = v71 + (v86 >> 3);
      if ((v73 & 7) != 0)
        ++v87;
      *(_QWORD *)(v10 + 48) = v87;
      *(_BYTE *)(v10 + 32) = 0;
      if (((1 << (~(_BYTE)v73 & 7)) & v77) != 0)
      {
        v88 = v87 + 8;
        if (v87 + 8 > v70)
        {
          v43 = (FILE *)*MEMORY[0x1E0C80C10];
          v44 = 885;
          goto LABEL_55;
        }
        v89 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + v87);
        *(_QWORD *)(v10 + 48) = v88;
        *(_QWORD *)(v168 + 40) = v89;
        v87 = v88;
      }
      if (((1 << (~(_BYTE)v74 & 7)) & v79) != 0)
      {
        v90 = v87 + 8;
        if (v87 + 8 > v70)
        {
          v43 = (FILE *)*MEMORY[0x1E0C80C10];
          v44 = 891;
          goto LABEL_55;
        }
        v91 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + v87);
        *(_QWORD *)(v10 + 48) = v90;
        *(_BYTE *)(v168 + 75) = 1;
        *(_QWORD *)(v168 + 48) = v91;
        v87 = v90;
      }
      if (((1 << (~(_BYTE)v78 & 7)) & v81) != 0)
      {
        if (v87 + 4 > v70)
        {
          v43 = (FILE *)*MEMORY[0x1E0C80C10];
          v44 = 898;
          goto LABEL_55;
        }
        v92 = *(_DWORD *)(*(_QWORD *)(v10 + 40) + v87);
        *(_QWORD *)(v10 + 48) = v87 + 4;
        *(_DWORD *)(v168 + 68) = v92;
        v69->i32[0] = v92;
      }
      if (((1 << (~(_BYTE)v80 & 7)) & v83) != 0)
      {
        v93 = v85;
        LODWORD(v173) = 0;
        if (!geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v173))
        {
          v43 = (FILE *)*MEMORY[0x1E0C80C10];
          v44 = 905;
          goto LABEL_55;
        }
        v85 = v93;
      }
      if (((1 << (~(_BYTE)v82 & 7)) & v85) != 0)
      {
        LODWORD(v173) = 0;
        if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v173) & 1) == 0)
        {
          v43 = (FILE *)*MEMORY[0x1E0C80C10];
          v44 = 911;
          goto LABEL_55;
        }
        v94 = __clz(__rbit32(v173));
        if ((_BYTE)v173)
          v95 = v94 + 1;
        else
          v95 = 0;
        *(_BYTE *)(*(_QWORD *)(*a3 + 664) + 16 * v165 + 2) = v95;
        v96 = v158 + 224 * v165;
        *(_BYTE *)(v96 + 205) = 1;
        *(_DWORD *)(v96 + 184) = v165;
      }
      if (((1 << (~(_BYTE)v84 & 7)) & v162) != 0)
      {
        if ((geo::codec::accumulateStyleAttributes(*a3 + 1112, &v185, (_QWORD *)v10, v168) & 1) == 0)
        {
          v43 = (FILE *)*MEMORY[0x1E0C80C10];
          v44 = 921;
          goto LABEL_55;
        }
      }
      else
      {
        std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((_QWORD *)(v168 + 24), v185, (uint64_t)v186);
      }
      v55 = v165 + 1;
    }
    while (v165 + 1 < (unint64_t)v182);
  }
  v97 = *(_DWORD *)(v10 + 64);
  if (v97 < 8)
    goto LABEL_218;
  v99 = *(_QWORD *)(v10 + 48);
  v98 = *(_QWORD *)(v10 + 56);
  v100 = v98 - v99;
  if (v98 >= v99)
  {
    v101 = 0;
    *(_BYTE *)(v10 + 32) = 1;
    v102 = *(_QWORD *)(v10 + 40) + v99;
    *(_QWORD *)(v10 + 16) = v100;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 8) = v102;
  }
  else
  {
    v100 = *(_QWORD *)(v10 + 16);
    v101 = *(_QWORD *)(v10 + 24);
  }
  v103 = v101 + 1;
  if (v101 + 1 > 8 * v100)
  {
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 933;
    goto LABEL_55;
  }
  v169 = (uint64_t *)(v10 + 8);
  v104 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 8) + (v101 >> 3));
  *(_QWORD *)(v10 + 24) = v103;
  if (((v104 >> (~(_BYTE)v101 & 7)) & 1) == 0)
  {
LABEL_147:
    v113 = v99 + (v103 >> 3);
    if ((v103 & 7) != 0)
      ++v113;
    *(_QWORD *)(v10 + 48) = v113;
    *(_BYTE *)(v10 + 32) = 0;
    if (v97 < 0x29)
      goto LABEL_218;
    v114 = *(_QWORD *)(v10 + 56);
    v115 = v114 - v113;
    if (v114 >= v113)
    {
      v103 = 0;
      *(_BYTE *)(v10 + 32) = 1;
      v116 = *(_QWORD *)(v10 + 40) + v113;
      *(_QWORD *)(v10 + 16) = v115;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 8) = v116;
    }
    else
    {
      v115 = *(_QWORD *)(v10 + 16);
    }
    v117 = v103 + 1;
    if (v103 + 1 > 8 * v115)
    {
      v43 = (FILE *)*MEMORY[0x1E0C80C10];
      v44 = 988;
      goto LABEL_55;
    }
    v118 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 8) + (v103 >> 3));
    *(_QWORD *)(v10 + 24) = v117;
    if (((v118 >> (~(_BYTE)v103 & 7)) & 1) != 0)
    {
      LODWORD(v173) = 0;
      if (!BitstreamUnpack(v169, (int *)&v173, 5uLL))
      {
        v43 = (FILE *)*MEMORY[0x1E0C80C10];
        v44 = 992;
        goto LABEL_55;
      }
      v119 = v182;
      if (v182)
      {
        v120 = 0;
        v121 = 0;
        v122 = (v173 + 1);
        do
        {
          v124 = *(_QWORD *)(v10 + 24);
          if (v124 + 1 > 8 * *(_QWORD *)(v10 + 16))
          {
            v43 = (FILE *)*MEMORY[0x1E0C80C10];
            v44 = 997;
            goto LABEL_55;
          }
          v125 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 8) + (v124 >> 3));
          *(_QWORD *)(v10 + 24) = v124 + 1;
          if (((v125 >> (~(_BYTE)v124 & 7)) & 1) != 0)
          {
            LODWORD(v172[0]) = 0;
            v170 = 0;
            if (!BitstreamUnpackSigned(v169, (int *)v172, v122))
            {
              v44 = 1002;
              goto LABEL_192;
            }
            if (!BitstreamUnpackSigned(v169, (int *)&v170, v122))
            {
              v44 = 1003;
              goto LABEL_192;
            }
            v123 = *(_QWORD *)(*a3 + 504) + v120;
            *(_BYTE *)(v123 + 210) = 1;
            *(float *)v126.i32 = (float)~(-1 << *(_BYTE *)v19);
            *(float32x2_t *)(v123 + 108) = vdiv_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v170, v172[0])), (float32x2_t)vdup_lane_s32(v126, 0));
            v119 = v182;
          }
          ++v121;
          v120 += 224;
        }
        while (v121 < v119);
      }
      v117 = *(_QWORD *)(v10 + 24);
      v113 = *(_QWORD *)(v10 + 48);
      v97 = *(_DWORD *)(v10 + 64);
    }
    v127 = v113 + (v117 >> 3);
    if ((v117 & 7) != 0)
      ++v127;
    *(_QWORD *)(v10 + 48) = v127;
    *(_BYTE *)(v10 + 32) = 0;
    if (v97 < 0x39)
      goto LABEL_218;
    v128 = *(_QWORD *)(v10 + 56);
    v129 = v128 >= v127;
    v130 = v128 - v127;
    if (v129)
    {
      *(_BYTE *)(v10 + 32) = 1;
      v131 = *(_QWORD *)(v10 + 40) + v127;
      *(_QWORD *)(v10 + 16) = v130;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 8) = v131;
    }
    v191[0] = &off_1E1BFAC28;
    v191[1] = a3;
    v192 = v191;
    geo::codec::decodeZoomRanks(v169, v182, (uint64_t)v191);
    v132 = v192;
    if (v192 == v191)
    {
      v133 = 4;
      v132 = v191;
    }
    else
    {
      if (!v192)
      {
LABEL_182:
        v134 = *(_QWORD *)(v10 + 48) + (*(_QWORD *)(v10 + 24) >> 3);
        if ((*(_QWORD *)(v10 + 24) & 7) != 0)
          ++v134;
        *(_QWORD *)(v10 + 48) = v134;
        *(_BYTE *)(v10 + 32) = 0;
        if (*(_DWORD *)(v10 + 64) > 0x3Fu)
        {
          v135 = v134 + 1;
          v136 = *(_QWORD *)(v10 + 56);
          if (v134 + 1 > v136)
          {
            v43 = (FILE *)*MEMORY[0x1E0C80C10];
            v44 = 1048;
            goto LABEL_55;
          }
          v137 = *(_QWORD *)(v10 + 40);
          v138 = *(unsigned __int8 *)(v137 + v134);
          *(_QWORD *)(v10 + 48) = v135;
          if (v138 == 1)
          {
            v139 = v134 + 5;
            if (v134 + 5 > v136)
            {
              v43 = (FILE *)*MEMORY[0x1E0C80C10];
              v44 = 1051;
              goto LABEL_55;
            }
            v140 = *(_DWORD *)(v137 + v135);
            *(_QWORD *)(v10 + 48) = v139;
            v141 = v134 + 6;
            if (v134 + 6 > v136)
            {
              v44 = 1054;
LABEL_192:
              v43 = (FILE *)*MEMORY[0x1E0C80C10];
              goto LABEL_55;
            }
            v142 = *(unsigned __int8 *)(v137 + v139);
            *(_QWORD *)(v10 + 48) = v141;
            if (!v142)
            {
              v44 = 1055;
              goto LABEL_192;
            }
            v143 = v134 + 7;
            if (v134 + 7 > v136)
            {
              v44 = 1058;
              goto LABEL_192;
            }
            v144 = *(unsigned __int8 *)(v137 + v141);
            *(_QWORD *)(v10 + 48) = v143;
            v167 = v144;
            if (!v144)
            {
              v44 = 1059;
              goto LABEL_192;
            }
            v145 = v134 + 8;
            if (v145 > v136)
            {
              v44 = 1063;
              goto LABEL_192;
            }
            v146 = *(unsigned __int8 *)(v137 + v143);
            *(_QWORD *)(v10 + 48) = v145;
            v164 = v146;
            if (!v146)
            {
              v44 = 1064;
              goto LABEL_192;
            }
            LODWORD(v173) = 0;
            if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v173) & 1) == 0)
            {
              v43 = (FILE *)*MEMORY[0x1E0C80C10];
              v44 = 1067;
              goto LABEL_55;
            }
            v147 = *(_QWORD *)(v10 + 48);
            v148 = *(_QWORD *)(v10 + 56);
            v129 = v148 >= v147;
            v149 = v148 - v147;
            if (v129)
            {
              *(_BYTE *)(v10 + 32) = 1;
              v150 = *(_QWORD *)(v10 + 40) + v147;
              *(_QWORD *)(v10 + 16) = v149;
              *(_QWORD *)(v10 + 24) = 0;
              *(_QWORD *)(v10 + 8) = v150;
            }
            LODWORD(v172[0]) = 0;
            v170 = 0;
            if ((_DWORD)v173)
            {
              v151 = 0;
              v152 = 0;
              v153 = (float)v140;
              while (1)
              {
                if (!BitstreamUnpack(v169, (int *)v172, v164))
                {
                  v44 = 1075;
                  goto LABEL_192;
                }
                v152 += LODWORD(v172[0]);
                if (v152 >= v182)
                {
                  v44 = 1077;
                  goto LABEL_192;
                }
                v154 = *(_QWORD *)(*a3 + 504);
                if (!BitstreamUnpack(v169, (int *)&v170, v142))
                  break;
                v155 = v154 + 224 * v152;
                *(float *)(v155 + 96) = v153 + (float)((float)v170 * (float)(1.0 / (float)v167));
                *(_BYTE *)(v155 + 212) = 1;
                if (++v151 >= v173)
                {
                  v147 = *(_QWORD *)(v10 + 48);
                  goto LABEL_215;
                }
              }
              v44 = 1080;
              goto LABEL_192;
            }
LABEL_215:
            v156 = *(_QWORD *)(v10 + 24);
            v157 = v147 + (v156 >> 3);
            if ((v156 & 7) != 0)
              ++v157;
            *(_QWORD *)(v10 + 48) = v157;
            *(_BYTE *)(v10 + 32) = 0;
          }
        }
LABEL_218:
        v25 = 1;
        goto LABEL_56;
      }
      v133 = 5;
    }
    (*(void (**)(void))(*v132 + 8 * v133))();
    goto LABEL_182;
  }
  v180 = 0;
  if ((BitstreamUnpackVar32(v169, &v180) & 1) == 0)
  {
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 936;
    goto LABEL_55;
  }
  v179 = 0;
  if (BitstreamUnpack(v169, &v179, 5uLL))
  {
    v105 = v179;
    v178 = 0;
    if (BitstreamUnpack(v169, &v178, 6uLL))
    {
      v166 = v180;
      if (v180)
      {
        v161 = (v178 + 1);
        v163 = (v105 + 1);
        while (1)
        {
          v177 = 0;
          if (!BitstreamUnpack(v169, (int *)&v177, v163))
          {
            v44 = 945;
            goto LABEL_192;
          }
          v106 = v177;
          if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*a3 + 512) - *(_QWORD *)(*a3 + 504)) >> 5) <= (unint64_t)v177)
          {
            v44 = 946;
            goto LABEL_192;
          }
          v176 = 0;
          if (!BitstreamUnpack64(v169, &v176, v161))
            break;
          v173 = 0u;
          v174 = 0u;
          v175 = 1065353216;
          v107 = *(_QWORD *)(a2 + 64);
          if (v107)
          {
            (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v107 + 48))(v172);
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign((uint64_t)&v173, v172);
            std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table((uint64_t)v172);
            if (*((_QWORD *)&v174 + 1))
            {
              v108 = v173;
              v109 = v176;
              v159 = (unint64_t)std::unordered_set<unsigned long long>::find[abi:ne180100](v173, *((unint64_t *)&v173 + 1), v176);
              if (v159 | (unint64_t)std::unordered_set<unsigned long long>::find[abi:ne180100](v108, *((unint64_t *)&v108 + 1), HIDWORD(v109)))
              {
                v110 = *(_QWORD *)(*a3 + 504) + 224 * v106;
                *(_QWORD *)(v110 + 80) = v109;
                v170 = 65553;
                v171 = 1;
                v112 = *(_QWORD *)(v110 + 24);
                v111 = v110 + 24;
                if (v112)
                {
                  std::make_shared[abi:ne180100]<FeatureStyleAttributes,std::shared_ptr<FeatureStyleAttributes const> &,GeoCodecsFeatureStylePairExt *,int,void>(v172, v111, &v170, 1u);
                  std::vector<std::shared_ptr<FeatureStyleAttributes const>,geo::StdAllocator<std::shared_ptr<FeatureStyleAttributes const>,geo::codec::Allocator>>::emplace_back<std::shared_ptr<FeatureStyleAttributes> &>(*a3 + 1168, v172);
                  std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(*a3 + 504) + 224 * v106 + 24), v172[0], v172[1]);
                  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)v172);
                }
              }
            }
          }
          std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table((uint64_t)&v173);
          if (!--v166)
            goto LABEL_146;
        }
        v43 = (FILE *)*MEMORY[0x1E0C80C10];
        v44 = 949;
        goto LABEL_55;
      }
LABEL_146:
      v103 = *(_QWORD *)(v10 + 24);
      v99 = *(_QWORD *)(v10 + 48);
      v97 = *(_DWORD *)(v10 + 64);
      goto LABEL_147;
    }
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 941;
  }
  else
  {
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = 938;
  }
LABEL_55:
  fprintf(v43, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v44);
  v25 = 0;
LABEL_56:
  v28 = geo::codec::VertexPoolDealloc(v19, v20);
LABEL_29:
  if (a1)
  {
    if (*(_BYTE *)v10)
    {
      v29 = geo::codec::Allocator::instance(v28);
      v28 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 40))(v29, *(_QWORD *)(v10 + 40), 0);
    }
    v30 = geo::codec::Allocator::instance(v28);
    v31 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v30 + 40))(v30, v10, 0);
    if (v18)
    {
      if (*(_BYTE *)v18)
      {
        v32 = geo::codec::Allocator::instance(v31);
        v31 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v32 + 40))(v32, *(_QWORD *)(v18 + 40), 0);
      }
      v33 = geo::codec::Allocator::instance(v31);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v33 + 40))(v33, v18, 0);
    }
  }
  v34 = v186;
  if (v186)
  {
    p_shared_owners = (unint64_t *)&v186->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      v24 = rep;
      v42 = (uint64_t)v187;
      v6 = v188;
      v26.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v172[0] = v42;
      if (!v42)
        goto LABEL_42;
      goto LABEL_41;
    }
  }
  v24 = rep;
  v37 = (uint64_t)v187;
  v6 = v188;
  v26.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v172[0] = v37;
  if (v37)
  {
LABEL_41:
    *(_QWORD *)&v173 = v172;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6 + 1912, v172, (uint64_t)&std::piecewise_construct, (uint64_t **)&v173)+ 4) = (double)((v26.__d_.__rep_ - v24) / 1000) * 0.001;
  }
LABEL_42:
  v38 = v189;
  if (v189)
  {
    v39 = (unint64_t *)&v189->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  return v25;
}

void sub_188650FDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100](v1 - 200);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 184));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::hp_readLabel(uint64_t a1, _QWORD *a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const void *v18;
  size_t v19;
  _QWORD *v20;
  FILE *v21;
  int v22;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t __key;

  v10 = *a3;
  v27 = 0;
  if ((geo::codec::chapterReadVarUint32(a2, &v27) & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 1133;
LABEL_18:
    fprintf(v21, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v22);
    return 0;
  }
  v11 = v27;
  *(_BYTE *)(a1 + 73) = v27;
  *(_DWORD *)(a1 + 56) = *a3;
  if (!v11)
    goto LABEL_21;
  v12 = 0;
  do
  {
    v25 = 0;
    v26 = 0;
    if (!geo::codec::chapterReadVarUint32(a2, &v26))
    {
      v22 = 1139;
LABEL_17:
      v21 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_18;
    }
    if (!geo::codec::chapterReadVarUint32(a2, &v25))
    {
      v22 = 1140;
      goto LABEL_17;
    }
    v16 = v26;
    if (v26 >= a4)
    {
      v22 = 1141;
      goto LABEL_17;
    }
    v17 = *(_QWORD **)a5;
    if ((unint64_t)*a3 >= *(_QWORD *)(*(_QWORD *)a5 + 1056))
    {
      v22 = 1142;
      goto LABEL_17;
    }
    *(_QWORD *)(v17[131] + 24 * *a3) = v17[107] + v26;
    v18 = (const void *)v17[111];
    v19 = v17[112];
    __key = v16;
    v20 = bsearch(&__key, v18, v19, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
    if (v20)
      v13 = v20[2];
    else
      v13 = 0;
    v14 = *(_QWORD *)(*(_QWORD *)a5 + 1048);
    v15 = *a3;
    *(_QWORD *)(v14 + 24 * *a3 + 8) = v13;
    *a3 = v15 + 1;
    ++v12;
  }
  while (v12 < v27);
  if (*(_BYTE *)(a1 + 73))
  {
    v24 = *(_QWORD *)(v14 + 24 * v10);
    goto LABEL_22;
  }
LABEL_21:
  v24 = 0;
LABEL_22:
  *(_QWORD *)(a1 + 16) = v24;
  return 1;
}

uint64_t geo::codec::_makeSpaceForLabels(geo::codec::Allocator *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = *a3;
  v5 = *(_QWORD *)(*a3 + 1056);
  if (!a1)
    goto LABEL_5;
  *(_QWORD *)(v4 + 1056) = (char *)a1 + v5;
  v8 = *(_QWORD *)(v4 + 1048);
  v9 = geo::codec::Allocator::instance(a1);
  v10 = *a3;
  if (!v8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 24))(v9, *(_QWORD *)(v10 + 1056), 24);
    *(_QWORD *)(*a3 + 1048) = result;
    if (result)
      goto LABEL_5;
LABEL_7:
    *a2 = 0;
    return result;
  }
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 32))(v9, *(_QWORD *)(v10 + 1048), 24 * *(_QWORD *)(v10 + 1056));
  if (v11)
  {
    *(_QWORD *)(*a3 + 1048) = v11;
    bzero((void *)(v11 + 24 * v5), 24 * (_QWORD)a1);
    result = *(_QWORD *)(*a3 + 1048);
    if (result)
    {
LABEL_5:
      result = 1;
      *a2 = v5;
      return result;
    }
    goto LABEL_7;
  }
  v13 = geo::codec::Allocator::instance(0);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(*a3 + 1048), 0);
  result = 0;
  *(_QWORD *)(*a3 + 1048) = 0;
  *a2 = 0;
  return result;
}

BOOL BitstreamUnpack64(uint64_t *a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = a1[2];
  v4 = v3 + a3;
  v5 = 8 * a1[1];
  if (v3 + a3 <= v5)
  {
    v6 = 0;
    if (a3)
    {
      v7 = *a1;
      do
      {
        v8 = 8 - (v3 & 7);
        if (a3 < v8)
          v8 = a3;
        v6 = (*(unsigned __int8 *)(v7 + (v3 >> 3)) >> (8 - (v3 & 7) - v8)) & (unint64_t)~(-1 << v8) | (v6 << v8);
        v3 += v8;
        a1[2] = v3;
        a3 -= v8;
      }
      while (a3);
    }
    *a2 = v6;
  }
  return v4 <= v5;
}

void std::vector<GeoCodecsPointFeature,geo::StdAllocator<GeoCodecsPointFeature,geo::codec::Allocator>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  _OWORD *v17;
  _OWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;

  v4 = *a1;
  v5 = (_OWORD *)a1[1];
  v6 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v5 - *a1) >> 5);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return;
    v18 = (_OWORD *)(v4 + 224 * a2);
    while (1)
    {
      if (v5 == v18)
        goto LABEL_29;
      v19 = (std::__shared_weak_count *)*((_QWORD *)v5 - 24);
      if (!v19)
        break;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (v21)
        break;
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v22 = (std::__shared_weak_count *)*((_QWORD *)v5 - 27);
      if (v22)
        goto LABEL_22;
LABEL_15:
      v5 -= 14;
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)v5 - 27);
    if (!v22)
      goto LABEL_15;
LABEL_22:
    std::__shared_weak_count::__release_weak(v22);
    goto LABEL_15;
  }
  v8 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)v5) >> 5) >= v7)
  {
    v18 = &v5[14 * v7];
    v23 = 224 * a2 - 32 * (((uint64_t)v5 - *a1) >> 5);
    do
    {
      if (v5)
      {
        v5[12] = 0uLL;
        v5[13] = 0uLL;
        v5[10] = 0uLL;
        v5[11] = 0uLL;
        v5[8] = 0uLL;
        v5[9] = 0uLL;
        v5[6] = 0uLL;
        v5[7] = 0uLL;
        v5[4] = 0uLL;
        v5[5] = 0uLL;
        v5[2] = 0uLL;
        v5[3] = 0uLL;
        *v5 = 0uLL;
        v5[1] = 0uLL;
      }
      v5 += 14;
      v23 -= 224;
    }
    while (v23);
LABEL_29:
    a1[1] = (uint64_t)v18;
  }
  else
  {
    if (a2 > 0x124924924924924)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v4) >> 5);
    v10 = 2 * v9;
    if (2 * v9 <= a2)
      v10 = a2;
    if (v9 >= 0x92492492492492)
      v11 = 0x124924924924924;
    else
      v11 = v10;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 224 * v11, 8);
    v13 = (_OWORD *)(v12 + 224 * v6);
    v14 = v12 + 224 * a2;
    v15 = 224 * a2 - 224 * v6;
    v16 = 0uLL;
    v17 = v13;
    do
    {
      if (v17)
      {
        v17[12] = 0uLL;
        v17[13] = 0uLL;
        v17[10] = 0uLL;
        v17[11] = 0uLL;
        v17[8] = 0uLL;
        v17[9] = 0uLL;
        v17[6] = 0uLL;
        v17[7] = 0uLL;
        v17[4] = 0uLL;
        v17[5] = 0uLL;
        v17[2] = 0uLL;
        v17[3] = 0uLL;
        *v17 = 0uLL;
        v17[1] = 0uLL;
      }
      v17 += 14;
      v15 -= 224;
    }
    while (v15);
    v24 = v12 + 224 * v11;
    v25 = *a1;
    v26 = a1[1];
    if (v26 != *a1)
    {
      v27 = 0;
      do
      {
        v28 = v26 + v27;
        v29 = &v13[v27 / 0x10];
        *(v29 - 14) = *(_OWORD *)(v26 + v27 - 224);
        *(_QWORD *)(v28 - 224) = 0;
        *(_QWORD *)(v28 - 216) = 0;
        *(v29 - 13) = *(_OWORD *)(v26 + v27 - 208);
        *((_QWORD *)v29 - 24) = *(_QWORD *)(v26 + v27 - 192);
        v30 = *(_OWORD *)(v26 + v27 - 184);
        v31 = *(_OWORD *)(v26 + v27 - 168);
        v32 = *(_DWORD *)(v26 + v27 - 152);
        *(_QWORD *)(v28 - 200) = 0;
        *(_QWORD *)(v28 - 192) = 0;
        *((_DWORD *)v29 - 38) = v32;
        *(_OWORD *)((char *)v29 - 168) = v31;
        *(_OWORD *)((char *)v29 - 184) = v30;
        v33 = *(_OWORD *)(v26 + v27 - 80);
        v35 = *(_OWORD *)(v26 + v27 - 128);
        v34 = *(_OWORD *)(v26 + v27 - 112);
        *(v29 - 6) = *(_OWORD *)(v26 + v27 - 96);
        *(v29 - 5) = v33;
        *(v29 - 8) = v35;
        *(v29 - 7) = v34;
        v37 = *(_OWORD *)(v26 + v27 - 48);
        v36 = *(_OWORD *)(v26 + v27 - 32);
        v38 = *(_OWORD *)(v26 + v27 - 64);
        *(_OWORD *)((char *)v29 - 23) = *(_OWORD *)(v26 + v27 - 23);
        *(v29 - 3) = v37;
        *(v29 - 2) = v36;
        *(v29 - 4) = v38;
        v16 = *(__n128 *)(v26 + v27 - 144);
        *(v29 - 9) = v16;
        v27 -= 224;
      }
      while (v26 + v27 != v25);
      v26 = *a1;
      v39 = a1[1];
      *a1 = (uint64_t)&v13[v27 / 0x10];
      a1[1] = v14;
      v40 = a1[2];
      a1[2] = v24;
      while (1)
      {
        if (v39 == v26)
          goto LABEL_45;
        v41 = *(std::__shared_weak_count **)(v39 - 192);
        if (!v41)
          break;
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (v43)
          break;
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
        v44 = *(std::__shared_weak_count **)(v39 - 216);
        if (v44)
          goto LABEL_41;
LABEL_34:
        v39 -= 224;
      }
      v44 = *(std::__shared_weak_count **)(v39 - 216);
      if (!v44)
        goto LABEL_34;
LABEL_41:
      std::__shared_weak_count::__release_weak(v44);
      goto LABEL_34;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v14;
    v40 = a1[2];
    a1[2] = v24;
LABEL_45:
    if (v26)
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)a1[3] + 40))(a1[3], v26, v40 - v26, v16);
  }
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v8 = *a2;
  *a2 = 0;
  v9 = *(void **)a1;
  *(_QWORD *)a1 = v8;
  if (v9)
    operator delete(v9);
  v12 = a2[2];
  v11 = a2 + 2;
  v10 = v12;
  v13 = *(v11 - 1);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 8) = v13;
  *(v11 - 1) = 0;
  v14 = v11[1];
  *(_QWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    v15 = *(_QWORD *)(v10 + 8);
    v16 = *(_QWORD *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16)
        v15 %= v16;
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
    *v11 = 0;
    v11[1] = 0;
  }
}

void sub_188651860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::vector<GeoCodecsPolygonFeature,geo::StdAllocator<GeoCodecsPolygonFeature,geo::codec::Allocator>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  __n128 v16;
  _OWORD *v17;
  _OWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;

  v4 = *a1;
  v5 = (_OWORD *)a1[1];
  v6 = ((uint64_t)v5 - *a1) >> 7;
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return;
    v18 = (_OWORD *)(v4 + (a2 << 7));
    while (1)
    {
      if (v5 == v18)
        goto LABEL_29;
      v19 = (std::__shared_weak_count *)*((_QWORD *)v5 - 12);
      if (!v19)
        break;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (v21)
        break;
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v22 = (std::__shared_weak_count *)*((_QWORD *)v5 - 15);
      if (v22)
        goto LABEL_22;
LABEL_15:
      v5 -= 8;
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)v5 - 15);
    if (!v22)
      goto LABEL_15;
LABEL_22:
    std::__shared_weak_count::__release_weak(v22);
    goto LABEL_15;
  }
  v8 = a1[2];
  if (v7 <= (v8 - (uint64_t)v5) >> 7)
  {
    v18 = &v5[8 * v7];
    v23 = (a2 << 7) - (v6 << 7);
    do
    {
      if (v5)
      {
        v5[6] = 0uLL;
        v5[7] = 0uLL;
        v5[4] = 0uLL;
        v5[5] = 0uLL;
        v5[2] = 0uLL;
        v5[3] = 0uLL;
        *v5 = 0uLL;
        v5[1] = 0uLL;
      }
      v5 += 8;
      v23 -= 128;
    }
    while (v23);
LABEL_29:
    a1[1] = (uint64_t)v18;
  }
  else
  {
    if (a2 >> 57)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v9 = v8 - v4;
    v10 = v9 >> 6;
    if (v9 >> 6 <= a2)
      v10 = a2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF80)
      v11 = 0x1FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], v11 << 7, 8);
    v13 = (_OWORD *)(v12 + (v6 << 7));
    v14 = v12 + (a2 << 7);
    v15 = (a2 << 7) - (v6 << 7);
    v16 = 0uLL;
    v17 = v13;
    do
    {
      if (v17)
      {
        v17[6] = 0uLL;
        v17[7] = 0uLL;
        v17[4] = 0uLL;
        v17[5] = 0uLL;
        v17[2] = 0uLL;
        v17[3] = 0uLL;
        *v17 = 0uLL;
        v17[1] = 0uLL;
      }
      v17 += 8;
      v15 -= 128;
    }
    while (v15);
    v24 = v12 + (v11 << 7);
    v25 = *a1;
    v26 = a1[1];
    if (v26 != *a1)
    {
      v27 = 0;
      do
      {
        v28 = &v13[v27 / 0x10];
        v29 = v26 + v27;
        *(v28 - 8) = *(_OWORD *)(v26 + v27 - 128);
        *(_QWORD *)(v29 - 128) = 0;
        *(_QWORD *)(v29 - 120) = 0;
        *(v28 - 7) = *(_OWORD *)(v26 + v27 - 112);
        *((_QWORD *)v28 - 12) = *(_QWORD *)(v26 + v27 - 96);
        *(_QWORD *)(v29 - 104) = 0;
        *(_QWORD *)(v29 - 96) = 0;
        v30 = *(_OWORD *)(v26 + v27 - 88);
        v31 = *(_OWORD *)(v26 + v27 - 72);
        *((_DWORD *)v28 - 14) = *(_DWORD *)(v26 + v27 - 56);
        *(_OWORD *)((char *)v28 - 72) = v31;
        *(_OWORD *)((char *)v28 - 88) = v30;
        v32 = *(_OWORD *)(v26 + v27 - 48);
        *((_QWORD *)v28 - 4) = *(_QWORD *)(v26 + v27 - 32);
        *(v28 - 3) = v32;
        v16 = *(__n128 *)(v26 + v27 - 24);
        *((_QWORD *)v28 - 1) = *(_QWORD *)(v26 + v27 - 8);
        *(__n128 *)((char *)v28 - 24) = v16;
        v27 -= 128;
      }
      while (v26 + v27 != v25);
      v26 = *a1;
      v33 = a1[1];
      *a1 = (uint64_t)&v13[v27 / 0x10];
      a1[1] = v14;
      v34 = a1[2];
      a1[2] = v24;
      while (1)
      {
        if (v33 == v26)
          goto LABEL_45;
        v35 = *(std::__shared_weak_count **)(v33 - 96);
        if (!v35)
          break;
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (v37)
          break;
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
        v38 = *(std::__shared_weak_count **)(v33 - 120);
        if (v38)
          goto LABEL_41;
LABEL_34:
        v33 -= 128;
      }
      v38 = *(std::__shared_weak_count **)(v33 - 120);
      if (!v38)
        goto LABEL_34;
LABEL_41:
      std::__shared_weak_count::__release_weak(v38);
      goto LABEL_34;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v14;
    v34 = a1[2];
    a1[2] = v24;
LABEL_45:
    if (v26)
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)a1[3] + 40))(a1[3], v26, v34 - v26, v16);
  }
}

void ___ZN8LoadItem15deleteRequesterEP8NSStringbb_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = a1 + 40;
  if (*(_BYTE *)(a1 + 56))
  {
    if (qword_1ECDBB868 != -1)
      dispatch_once(&qword_1ECDBB868, &__block_literal_global_423);
    v3 = (id)qword_1ECDBB860;
  }
  else
  {
    _cancelErr();
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  v4 = v3;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v1 + 16))(v1, v2, 0, 0);

}

void sub_188651D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _cancelErr(void)
{
  if (qword_1ECDBB828 != -1)
    dispatch_once(&qword_1ECDBB828, &__block_literal_global_410);
  return (id)qword_1ECDBB820;
}

id GEOGetNetEventFileManagerLog()
{
  if (qword_1ECDBB9F8 != -1)
    dispatch_once(&qword_1ECDBB9F8, &__block_literal_global_47);
  return (id)qword_1ECDBB9F0;
}

id GEOGetAnalyticDataFileLog()
{
  if (qword_1ECDBC358 != -1)
    dispatch_once(&qword_1ECDBC358, &__block_literal_global_127);
  return (id)_MergedGlobals_267;
}

void sub_1886531A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::EnumOptions *AddrObjGoogle::protobuf::EnumOptions::EnumOptions(AddrObjGoogle::protobuf::EnumOptions *this)
{
  *(_QWORD *)this = &off_1E1BF5068;
  AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((_QWORD *)this + 1);
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 4);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_BYTE *)this + 64) = 1;
  *((_DWORD *)this + 17) = 0;
  *((_DWORD *)this + 18) = 0;
  return this;
}

void sub_188653684(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::internal::ExtensionSet *v2;

  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::MethodOptions *AddrObjGoogle::protobuf::MethodOptions::MethodOptions(AddrObjGoogle::protobuf::MethodOptions *this)
{
  *(_QWORD *)this = &off_1E1BF5278;
  AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((_QWORD *)this + 1);
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 4);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  return this;
}

void sub_1886536FC(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::internal::ExtensionSet *v2;

  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::FileOptions *AddrObjGoogle::protobuf::FileOptions::FileOptions(AddrObjGoogle::protobuf::FileOptions *this)
{
  *(_QWORD *)this = &off_1E1BF5118;
  AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((_QWORD *)this + 1);
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 4);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  AddrObjGoogle::protobuf::FileOptions::SharedCtor(this);
  return this;
}

void sub_188653784(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::internal::ExtensionSet *v2;
  uint64_t *v3;
  AddrObjGoogle::protobuf::UnknownFieldSet *v4;
  uint64_t *v5;

  v5 = v3;
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v5);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v4);
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

BOOL AddrObjGoogle::protobuf::MessageLite::ParseFromArray(AddrObjGoogle::protobuf::MessageLite *this, char *a2, int a3)
{
  _BOOL8 v4;
  std::string *v5;
  _QWORD v7[3];
  int v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  std::string __p;
  std::string v18[2];

  v7[0] = 0;
  v7[1] = a2;
  v7[2] = &a2[a3];
  v8 = a3;
  v9 = 0;
  v10 = 0;
  v11 = a3;
  v12 = xmmword_189C5D630;
  v13 = AddrObjGoogle::protobuf::io::CodedInputStream::default_recursion_limit_;
  v14 = 0;
  v15 = 0;
  (*(void (**)(AddrObjGoogle::protobuf::MessageLite *))(*(_QWORD *)this + 32))(this);
  if (!(*(unsigned int (**)(AddrObjGoogle::protobuf::MessageLite *, _QWORD *))(*(_QWORD *)this + 64))(this, v7))
  {
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(AddrObjGoogle::protobuf::MessageLite *))(*(_QWORD *)this + 40))(this) & 1) == 0)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/message_lite.cc", 124);
    sub_188819BB4((uint64_t)this, &__p);
    v5 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v18, (const std::string::value_type *)&__p);
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, (AddrObjGoogle::protobuf::internal::LogMessage *)v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    goto LABEL_7;
  }
  v4 = (_BYTE)v10 != 0;
LABEL_8:
  AddrObjGoogle::protobuf::io::CodedInputStream::~CodedInputStream((AddrObjGoogle::protobuf::io::CodedInputStream *)v7);
  return v4;
}

void sub_1886538D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)(v25 - 64));
  AddrObjGoogle::protobuf::io::CodedInputStream::~CodedInputStream((AddrObjGoogle::protobuf::io::CodedInputStream *)&a9);
  _Unwind_Resume(a1);
}

BOOL AddrObjGoogle::protobuf::MessageLite::ParseFromString(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  _BOOL8 v5;
  std::string *v6;
  _QWORD v8[3];
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  std::string __p;
  std::string v19[2];

  LODWORD(v3) = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  v8[0] = 0;
  v8[1] = v4;
  v8[2] = (char *)v4 + (int)v3;
  v9 = v3;
  v10 = 0;
  v11 = 0;
  v12 = v3;
  v13 = xmmword_189C5D630;
  v14 = AddrObjGoogle::protobuf::io::CodedInputStream::default_recursion_limit_;
  v15 = 0;
  v16 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (!(*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 64))(a1, v8))
    goto LABEL_12;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) & 1) == 0)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/message_lite.cc", 124);
    sub_188819BB4(a1, &__p);
    v6 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v19, (const std::string::value_type *)&__p);
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v17, (AddrObjGoogle::protobuf::internal::LogMessage *)v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
LABEL_12:
    v5 = 0;
    goto LABEL_13;
  }
  v5 = (_BYTE)v11 != 0;
LABEL_13:
  AddrObjGoogle::protobuf::io::CodedInputStream::~CodedInputStream((AddrObjGoogle::protobuf::io::CodedInputStream *)v8);
  return v5;
}

void sub_188653A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)(v25 - 64));
  AddrObjGoogle::protobuf::io::CodedInputStream::~CodedInputStream((AddrObjGoogle::protobuf::io::CodedInputStream *)&a9);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::io::CodedInputStream::~CodedInputStream(AddrObjGoogle::protobuf::io::CodedInputStream *this)
{
  std::string *v2;
  std::string *v3;
  char v4;
  std::string v5[2];

  if (*(_QWORD *)this)
    AddrObjGoogle::protobuf::io::CodedInputStream::BackUpInputToCurrentPosition(this);
  if (*((_DWORD *)this + 13) == -2)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/io/coded_stream.cc", 79);
    v2 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v5, "The total number of bytes read was ");
    v3 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v2, *((_DWORD *)this + 6));
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v4, (AddrObjGoogle::protobuf::internal::LogMessage *)v3);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
}

AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::AddressObjectProto::Clear(AddrObjGoogle::protobuf::UnknownFieldSet *this)
{
  AddrObjGoogle::protobuf::UnknownFieldSet *v1;
  char v2;
  AddrObjGoogle::protobuf::UnknownFieldSet *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  AddrObjGoogle::protobuf::UnknownFieldSet *v8;
  uint64_t v9;

  v1 = this;
  v2 = *((_BYTE *)this + 88);
  if (v2)
  {
    *((_DWORD *)this + 20) = 0;
    if ((v2 & 2) != 0)
    {
      v3 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((_QWORD *)this + 2);
      this = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(this);
      if (v3 != this)
      {
        v4 = *((_QWORD *)v1 + 2);
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    v5 = *((_DWORD *)v1 + 22);
    if ((v5 & 4) != 0)
    {
      this = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((_QWORD *)v1 + 3);
      if (this)
      {
        this = (AddrObjGoogle::protobuf::UnknownFieldSet *)addr_obj::LocalizationProto::Clear((uint64_t *)this);
        v5 = *((_DWORD *)v1 + 22);
      }
    }
    if ((v5 & 0x10) != 0)
    {
      this = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((_QWORD *)v1 + 7);
      if (this)
      {
        this = (AddrObjGoogle::protobuf::UnknownFieldSet *)addr_obj::V0AddressObjectProto::Clear((uint64_t *)this);
        v5 = *((_DWORD *)v1 + 22);
      }
    }
    if ((v5 & 0x20) != 0)
    {
      this = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((_QWORD *)v1 + 8);
      if (this)
      {
        this = addr_obj::V1AddressObjectProto::Clear((uint64_t **)this);
        v5 = *((_DWORD *)v1 + 22);
      }
    }
    if ((v5 & 0x40) != 0)
    {
      this = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((_QWORD *)v1 + 9);
      if (this)
        this = addr_obj::VenueInfoProto::Clear(this);
    }
  }
  if (*((int *)v1 + 10) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*((_QWORD *)v1 + 4) + 8 * v6);
      this = (AddrObjGoogle::protobuf::UnknownFieldSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      ++v6;
    }
    while (v6 < *((int *)v1 + 10));
  }
  v9 = *((_QWORD *)v1 + 1);
  v8 = (AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)v1 + 8);
  *((_DWORD *)v8 + 8) = 0;
  *((_DWORD *)v8 + 20) = 0;
  if (v9)
    return AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v8);
  return this;
}

uint64_t addr_obj::AddressObjectProto::IsInitialized(addr_obj::AddressObjectProto *this)
{
  uint64_t v1;
  uint64_t result;

  if ((*((_BYTE *)this + 88) & 0x20) == 0)
    return 1;
  v1 = *((_QWORD *)this + 8);
  if (!v1)
    v1 = *(_QWORD *)(addr_obj::AddressObjectProto::default_instance_(0) + 64);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::IsInitialized(AddrObjGoogle::protobuf::internal::ExtensionSet **this)
{
  AddrObjGoogle::protobuf::internal::ExtensionSet **v1;
  AddrObjGoogle::protobuf::internal::ExtensionSet *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  AddrObjGoogle::protobuf::internal::ExtensionSet *v7;
  AddrObjGoogle::protobuf::internal::ExtensionSet **v8;
  BOOL v9;

  v1 = this + 1;
  v2 = *this;
  if (*this == (AddrObjGoogle::protobuf::internal::ExtensionSet *)(this + 1))
    return 1;
  while (1)
  {
    if (AddrObjGoogle::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[*((unsigned __int8 *)v2 + 48)] != 10)
      goto LABEL_14;
    if (*((_BYTE *)v2 + 49))
      break;
    if ((*((_BYTE *)v2 + 50) & 1) == 0)
    {
      v5 = **((_QWORD **)v2 + 5);
      if ((*((_BYTE *)v2 + 50) & 0x10) != 0)
      {
        if (((*(uint64_t (**)(void))(v5 + 56))() & 1) == 0)
          return 0;
      }
      else
      {
        result = (*(uint64_t (**)(void))(v5 + 40))();
        if (!(_DWORD)result)
          return result;
      }
    }
LABEL_14:
    v7 = (AddrObjGoogle::protobuf::internal::ExtensionSet *)*((_QWORD *)v2 + 1);
    if (v7)
    {
      do
      {
        v8 = (AddrObjGoogle::protobuf::internal::ExtensionSet **)v7;
        v7 = *(AddrObjGoogle::protobuf::internal::ExtensionSet **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (AddrObjGoogle::protobuf::internal::ExtensionSet **)*((_QWORD *)v2 + 2);
        v9 = *v8 == v2;
        v2 = (AddrObjGoogle::protobuf::internal::ExtensionSet *)v8;
      }
      while (!v9);
    }
    v2 = (AddrObjGoogle::protobuf::internal::ExtensionSet *)v8;
    if (v8 == v1)
      return 1;
  }
  v3 = *((_QWORD *)v2 + 5);
  if (*(int *)(v3 + 8) < 1)
    goto LABEL_14;
  v4 = 0;
  while (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v3 + 8 * v4) + 40))(*(_QWORD *)(*(_QWORD *)v3 + 8 * v4)) & 1) != 0)
  {
    ++v4;
    v3 = *((_QWORD *)v2 + 5);
    if (v4 >= *(int *)(v3 + 8))
      goto LABEL_14;
  }
  return 0;
}

uint64_t addr_obj::V2AddressObjectProto::IsInitialized(AddrObjGoogle::protobuf::internal::ExtensionSet **this)
{
  return AddrObjGoogle::protobuf::internal::ExtensionSet::IsInitialized(this + 1);
}

uint64_t addr_obj::V1AddressObjectProto::IsInitialized(addr_obj::V1AddressObjectProto *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 25);
  if ((v2 & 2) != 0)
  {
    v3 = *((_QWORD *)this + 6);
    if (!v3)
      v3 = *(_QWORD *)(addr_obj::V1AddressObjectProto::default_instance_(0) + 48);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3))
      return 0;
    v2 = *((_DWORD *)this + 25);
  }
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_QWORD *)this + 9);
    if (!v4)
      v4 = *(_QWORD *)(addr_obj::V1AddressObjectProto::default_instance_(0) + 72);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4))
      return 0;
    v2 = *((_DWORD *)this + 25);
  }
  if ((v2 & 0x40) == 0)
    return AddrObjGoogle::protobuf::internal::ExtensionSet::IsInitialized((AddrObjGoogle::protobuf::internal::ExtensionSet **)this + 1);
  v5 = *((_QWORD *)this + 11);
  if (!v5)
    v5 = *(_QWORD *)(addr_obj::V1AddressObjectProto::default_instance_(0) + 88);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5))
    return AddrObjGoogle::protobuf::internal::ExtensionSet::IsInitialized((AddrObjGoogle::protobuf::internal::ExtensionSet **)this + 1);
  return 0;
}

uint64_t addr_obj::geo3::Address::IsInitialized(addr_obj::geo3::Address *this)
{
  uint64_t v1;
  uint64_t result;

  if ((*((_BYTE *)this + 56) & 2) == 0)
    return 1;
  v1 = *((_QWORD *)this + 5);
  if (!v1)
    v1 = *(_QWORD *)(addr_obj::geo3::Address::default_instance_(0) + 40);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t addr_obj::geo3::StructuredAddress::IsInitialized(addr_obj::geo3::StructuredAddress *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (*((int *)this + 50) < 1)
    return 1;
  v2 = 0;
  do
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 24) + 8 * v2);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    if ((result & 1) == 0)
      break;
    ++v2;
  }
  while (v2 < *((int *)this + 50));
  return result;
}

uint64_t addr_obj::AddressObjectProto::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  int *v6;
  void ***v7;
  char *v8;
  AddrObjGoogle::protobuf::io::CodedInputStream *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  _BYTE *v15;
  int v16;
  uint64_t *v17;
  std::string *v18;
  _BYTE *v19;
  addr_obj::LocalizationProto *v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  AddrObjGoogle::protobuf::UnknownFieldSet *v26;
  int v27;
  BOOL v28;
  int v29;
  _BYTE *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  addr_obj::FingerprintProto *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  AddrObjGoogle::protobuf::UnknownFieldSet *v42;
  int v43;
  int v44;
  int v45;
  addr_obj::VenueInfoProto *v46;
  char *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  AddrObjGoogle::protobuf::UnknownFieldSet *v52;
  int v53;
  int v54;
  unsigned __int8 *v55;
  addr_obj::V0AddressObjectProto *v56;
  char *v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  AddrObjGoogle::protobuf::UnknownFieldSet *v62;
  int v63;
  int v64;
  unsigned __int8 *v65;
  addr_obj::V1AddressObjectProto *v66;
  char *v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  AddrObjGoogle::protobuf::UnknownFieldSet *v72;
  int v73;
  int v74;
  unsigned int v75;

  v5 = this;
  v6 = (int *)(this + 32);
  v7 = (void ***)(this + 8);
LABEL_2:
  while (2)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      v9 = (AddrObjGoogle::protobuf::io::CodedInputStream *)this;
      *((_DWORD *)a2 + 8) = this;
      if (!(_DWORD)this)
        return 1;
    }
    else
    {
      v9 = (AddrObjGoogle::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)a2 + 8) = (_DWORD)v9;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)v9)
        return 1;
    }
    v10 = v9 >> 3;
    switch(v9 >> 3)
    {
      case 1u:
        v11 = v9 & 7;
        if ((v9 & 7) != 0)
          goto LABEL_27;
        v75 = 0;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v75);
          if (!(_DWORD)this)
            return this;
          v14 = v75;
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v14 = *v13;
          v15 = v13 + 1;
          *((_QWORD *)a2 + 1) = v15;
        }
        *(_DWORD *)(v5 + 80) = v14;
        v16 = *(_DWORD *)(v5 + 88) | 1;
        *(_DWORD *)(v5 + 88) = v16;
        if ((unint64_t)v15 < v12 && *v15 == 18)
        {
          *((_QWORD *)a2 + 1) = v15 + 1;
          goto LABEL_35;
        }
        continue;
      case 2u:
        v11 = v9 & 7;
        if (v11 != 2)
          goto LABEL_27;
        v16 = *(_DWORD *)(v5 + 88);
LABEL_35:
        *(_DWORD *)(v5 + 88) = v16 | 2;
        v17 = *(uint64_t **)(v5 + 16);
        if (v17 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v18 = (std::string *)operator new();
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 16) = v18;
        }
        else
        {
          v18 = *(std::string **)(v5 + 16);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v18);
        if (!(_DWORD)this)
          return this;
        v19 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v19 + 1;
LABEL_42:
        *(_DWORD *)(v5 + 88) |= 4u;
        v20 = *(addr_obj::LocalizationProto **)(v5 + 24);
        if (!v20)
        {
          v20 = (addr_obj::LocalizationProto *)operator new();
          addr_obj::LocalizationProto::LocalizationProto(v20);
          *(_QWORD *)(v5 + 24) = v20;
        }
        v75 = 0;
        v21 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 < 0)
        {
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v75))
            return 0;
        }
        else
        {
          v75 = *v21;
          *((_QWORD *)a2 + 1) = v21 + 1;
        }
        v22 = *((_DWORD *)a2 + 14);
        v23 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v22 + 1;
        if (v22 >= v23)
          return 0;
        v24 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v75);
        if (!addr_obj::LocalizationProto::MergePartialFromCodedStream((uint64_t)v20, a2, v25, v26)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v24);
        v27 = *((_DWORD *)a2 + 14);
        v28 = __OFSUB__(v27, 1);
        v29 = v27 - 1;
        if (v29 < 0 == v28)
          *((_DWORD *)a2 + 14) = v29;
        v30 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v30 >= *((_QWORD *)a2 + 2) || *v30 != 34)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v30 + 1;
LABEL_56:
          v31 = *(_DWORD *)(v5 + 44);
          v32 = *(int *)(v5 + 40);
          if ((int)v32 >= v31)
          {
            if (v31 == *(_DWORD *)(v5 + 48))
            {
              AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v31 + 1);
              v31 = *(_DWORD *)(v5 + 44);
            }
            *(_DWORD *)(v5 + 44) = v31 + 1;
            v34 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::FingerprintProto>::New();
            v35 = *(_QWORD *)(v5 + 32);
            v36 = *(int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v36 + 1;
            *(_QWORD *)(v35 + 8 * v36) = v34;
          }
          else
          {
            v33 = *(_QWORD *)(v5 + 32);
            *(_DWORD *)(v5 + 40) = v32 + 1;
            v34 = *(addr_obj::FingerprintProto **)(v33 + 8 * v32);
          }
          v75 = 0;
          v37 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v37 >= *((_QWORD *)a2 + 2) || *v37 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v75))
              return 0;
          }
          else
          {
            v75 = *v37;
            *((_QWORD *)a2 + 1) = v37 + 1;
          }
          v38 = *((_DWORD *)a2 + 14);
          v39 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v38 + 1;
          if (v38 >= v39)
            return 0;
          v40 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v75);
          if (!addr_obj::FingerprintProto::MergePartialFromCodedStream((uint64_t)v34, a2, v41, v42)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v40);
          v43 = *((_DWORD *)a2 + 14);
          v28 = __OFSUB__(v43, 1);
          v44 = v43 - 1;
          if (v44 < 0 == v28)
            *((_DWORD *)a2 + 14) = v44;
          v30 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v30 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v45 = *v30;
        }
        while (v45 == 34);
        if (v45 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v30 + 1;
LABEL_74:
        *(_DWORD *)(v5 + 88) |= 0x40u;
        v46 = *(addr_obj::VenueInfoProto **)(v5 + 72);
        if (!v46)
        {
          v46 = (addr_obj::VenueInfoProto *)operator new();
          addr_obj::VenueInfoProto::VenueInfoProto(v46);
          *(_QWORD *)(v5 + 72) = v46;
        }
        v75 = 0;
        v47 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v47 >= *((_QWORD *)a2 + 2) || *v47 < 0)
        {
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v75))
            return 0;
        }
        else
        {
          v75 = *v47;
          *((_QWORD *)a2 + 1) = v47 + 1;
        }
        v48 = *((_DWORD *)a2 + 14);
        v49 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v48 + 1;
        if (v48 >= v49)
          return 0;
        v50 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v75);
        if (!addr_obj::VenueInfoProto::MergePartialFromCodedStream((uint64_t)v46, a2, v51, v52)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v50);
        v53 = *((_DWORD *)a2 + 14);
        v28 = __OFSUB__(v53, 1);
        v54 = v53 - 1;
        if (v54 < 0 == v28)
          *((_DWORD *)a2 + 14) = v54;
        v55 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v55 <= 1 || *v55 != 162 || v55[1] != 6)
          continue;
        *((_QWORD *)a2 + 1) = v55 + 2;
        goto LABEL_89;
      case 3u:
        v11 = v9 & 7;
        if (v11 == 2)
          goto LABEL_42;
        goto LABEL_27;
      case 4u:
        v11 = v9 & 7;
        if (v11 == 2)
          goto LABEL_56;
        goto LABEL_27;
      case 5u:
        v11 = v9 & 7;
        if (v11 == 2)
          goto LABEL_74;
        goto LABEL_27;
      default:
        if (v10 == 100)
        {
          v11 = v9 & 7;
          if (v11 != 2)
            goto LABEL_27;
LABEL_89:
          *(_DWORD *)(v5 + 88) |= 0x10u;
          v56 = *(addr_obj::V0AddressObjectProto **)(v5 + 56);
          if (!v56)
          {
            v56 = (addr_obj::V0AddressObjectProto *)operator new();
            addr_obj::V0AddressObjectProto::V0AddressObjectProto(v56);
            *(_QWORD *)(v5 + 56) = v56;
          }
          v75 = 0;
          v57 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v57 >= *((_QWORD *)a2 + 2) || *v57 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v75))
              return 0;
          }
          else
          {
            v75 = *v57;
            *((_QWORD *)a2 + 1) = v57 + 1;
          }
          v58 = *((_DWORD *)a2 + 14);
          v59 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v58 + 1;
          if (v58 >= v59)
            return 0;
          v60 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v75);
          if (!addr_obj::V0AddressObjectProto::MergePartialFromCodedStream((uint64_t)v56, a2, v61, v62)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v60);
          v63 = *((_DWORD *)a2 + 14);
          v28 = __OFSUB__(v63, 1);
          v64 = v63 - 1;
          if (v64 < 0 == v28)
            *((_DWORD *)a2 + 14) = v64;
          v65 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          if (*((_DWORD *)a2 + 4) - (int)v65 > 1 && *v65 == 170 && v65[1] == 6)
          {
            *((_QWORD *)a2 + 1) = v65 + 2;
            goto LABEL_104;
          }
          continue;
        }
        if (v10 == 101)
        {
          v11 = v9 & 7;
          if (v11 != 2)
            goto LABEL_27;
LABEL_104:
          *(_DWORD *)(v5 + 88) |= 0x20u;
          v66 = *(addr_obj::V1AddressObjectProto **)(v5 + 64);
          if (!v66)
          {
            v66 = (addr_obj::V1AddressObjectProto *)operator new();
            addr_obj::V1AddressObjectProto::V1AddressObjectProto(v66);
            *(_QWORD *)(v5 + 64) = v66;
          }
          v75 = 0;
          v67 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v67 >= *((_QWORD *)a2 + 2) || *v67 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v75))
              return 0;
          }
          else
          {
            v75 = *v67;
            *((_QWORD *)a2 + 1) = v67 + 1;
          }
          v68 = *((_DWORD *)a2 + 14);
          v69 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v68 + 1;
          if (v68 >= v69)
            return 0;
          v70 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v75);
          if (!addr_obj::V1AddressObjectProto::MergePartialFromCodedStream((uint64_t)v66, a2, v71, v72)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v70);
          v73 = *((_DWORD *)a2 + 14);
          v28 = __OFSUB__(v73, 1);
          v74 = v73 - 1;
          if (v74 < 0 == v28)
            *((_DWORD *)a2 + 14) = v74;
          if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            this = 1;
            *((_BYTE *)a2 + 36) = 1;
            return this;
          }
          continue;
        }
        v11 = v9 & 7;
LABEL_27:
        if (v11 != 4)
        {
          this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, v9, v7, a4);
          if ((this & 1) == 0)
            return 0;
          continue;
        }
        return 1;
    }
  }
}

void sub_1886545DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40D9981018);
  _Unwind_Resume(a1);
}

addr_obj::LocalizationProto *addr_obj::LocalizationProto::LocalizationProto(addr_obj::LocalizationProto *this)
{
  *(_QWORD *)this = &off_1E1BF98F0;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  addr_obj::LocalizationProto::SharedCtor(this);
  return this;
}

void sub_188654684(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;

  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t *addr_obj::LocalizationProto::SharedCtor(addr_obj::LocalizationProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *result;

  *((_DWORD *)this + 10) = 0;
  v2 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  *((_QWORD *)this + 2) = v2;
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v2);
  *((_QWORD *)this + 3) = v3;
  result = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((_QWORD *)this + 4) = result;
  *((_DWORD *)this + 11) = 0;
  return result;
}

addr_obj::FingerprintProto *AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::FingerprintProto>::New()
{
  addr_obj::FingerprintProto *v0;

  v0 = (addr_obj::FingerprintProto *)operator new();
  addr_obj::FingerprintProto::FingerprintProto(v0);
  return v0;
}

void sub_188654720(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C400739E6B9);
  _Unwind_Resume(a1);
}

addr_obj::FingerprintProto *addr_obj::FingerprintProto::FingerprintProto(addr_obj::FingerprintProto *this)
{
  *(_QWORD *)this = &off_1E1BF96F8;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  addr_obj::FingerprintProto::SharedCtor(this);
  return this;
}

void sub_18865478C(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;

  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t *addr_obj::FingerprintProto::SharedCtor(addr_obj::FingerprintProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *result;

  *((_DWORD *)this + 12) = 0;
  v2 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  *((_QWORD *)this + 2) = v2;
  *((_QWORD *)this + 3) = 0;
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v2);
  *((_QWORD *)this + 4) = v3;
  result = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((_QWORD *)this + 5) = result;
  *((_DWORD *)this + 13) = 0;
  return result;
}

uint64_t addr_obj::LocalizationProto::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  void ***v6;
  char *v7;
  AddrObjGoogle::protobuf::io::CodedInputStream *v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  std::string *v12;
  _BYTE *v13;
  uint64_t *v14;
  std::string *v15;
  _BYTE *v16;
  uint64_t *v17;
  std::string *v18;

  v5 = this;
  v6 = (void ***)(this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v7 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          v8 = (AddrObjGoogle::protobuf::io::CodedInputStream *)this;
          *((_DWORD *)a2 + 8) = this;
          if (!(_DWORD)this)
            return 1;
        }
        else
        {
          v8 = (AddrObjGoogle::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)a2 + 8) = (_DWORD)v8;
          *((_QWORD *)a2 + 1) = v7 + 1;
          if (!(_DWORD)v8)
            return 1;
        }
        v9 = v8 >> 3;
        if (v8 >> 3 != 1)
          break;
        v10 = v8 & 7;
        if (v10 != 2)
          goto LABEL_18;
        *(_DWORD *)(v5 + 44) |= 1u;
        v11 = *(uint64_t **)(v5 + 16);
        if (v11 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v12 = (std::string *)operator new();
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 16) = v12;
        }
        else
        {
          v12 = *(std::string **)(v5 + 16);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v12);
        if (!(_DWORD)this)
          return this;
        v13 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v13 < *((_QWORD *)a2 + 2) && *v13 == 18)
        {
          *((_QWORD *)a2 + 1) = v13 + 1;
          goto LABEL_26;
        }
      }
      if (v9 != 2)
        break;
      v10 = v8 & 7;
      if (v10 != 2)
        goto LABEL_18;
LABEL_26:
      *(_DWORD *)(v5 + 44) |= 2u;
      v14 = *(uint64_t **)(v5 + 24);
      if (v14 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
      {
        v15 = (std::string *)operator new();
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)(v5 + 24) = v15;
      }
      else
      {
        v15 = *(std::string **)(v5 + 24);
      }
      this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v15);
      if (!(_DWORD)this)
        return this;
      v16 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v16 < *((_QWORD *)a2 + 2) && *v16 == 26)
      {
        *((_QWORD *)a2 + 1) = v16 + 1;
LABEL_33:
        *(_DWORD *)(v5 + 44) |= 4u;
        v17 = *(uint64_t **)(v5 + 32);
        if (v17 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v18 = (std::string *)operator new();
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 32) = v18;
        }
        else
        {
          v18 = *(std::string **)(v5 + 32);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v18);
        if (!(_DWORD)this)
          return this;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          this = 1;
          *((_BYTE *)a2 + 36) = 1;
          return this;
        }
      }
    }
    if (v9 == 3)
    {
      v10 = v8 & 7;
      if (v10 == 2)
        goto LABEL_33;
    }
    else
    {
      v10 = v8 & 7;
    }
LABEL_18:
    if (v10 == 4)
      return 1;
    this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, v8, v6, a4);
    if ((this & 1) == 0)
      return 0;
  }
}

uint64_t addr_obj::FingerprintProto::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  void ***v6;
  char *v7;
  AddrObjGoogle::protobuf::io::CodedInputStream *v8;
  int v9;
  uint64_t *v10;
  std::string *v11;
  unint64_t v12;
  char *v13;
  int v14;
  _BYTE *v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t *v18;
  std::string *v19;
  _BYTE *v20;
  uint64_t *v21;
  std::string *v22;
  unint64_t v23;

  v5 = this;
  v6 = (void ***)(this + 8);
  while (2)
  {
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 < *((_QWORD *)a2 + 2) && (*v7 & 0x80000000) == 0)
    {
      v8 = (AddrObjGoogle::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)a2 + 8) = (_DWORD)v8;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)v8)
        return 1;
LABEL_7:
      switch(v8 >> 3)
      {
        case 1u:
          v9 = v8 & 7;
          if (v9 != 2)
            goto LABEL_17;
          *(_DWORD *)(v5 + 52) |= 1u;
          v10 = *(uint64_t **)(v5 + 16);
          if (v10 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
          {
            v11 = (std::string *)operator new();
            v11->__r_.__value_.__l.__size_ = 0;
            v11->__r_.__value_.__r.__words[2] = 0;
            v11->__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)(v5 + 16) = v11;
          }
          else
          {
            v11 = *(std::string **)(v5 + 16);
          }
          this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v11);
          if ((_DWORD)this)
          {
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
            v12 = *((_QWORD *)a2 + 2);
            if ((unint64_t)v15 < v12 && *v15 == 16)
            {
              v13 = v15 + 1;
              *((_QWORD *)a2 + 1) = v13;
              goto LABEL_25;
            }
            continue;
          }
          return this;
        case 2u:
          v9 = v8 & 7;
          if ((v8 & 7) != 0)
            goto LABEL_17;
          v13 = (char *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
LABEL_25:
          v23 = 0;
          if ((unint64_t)v13 >= v12 || *v13 < 0)
          {
            this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, &v23);
            if (!(_DWORD)this)
              return this;
            v16 = v23;
            v17 = (_BYTE *)*((_QWORD *)a2 + 1);
            v12 = *((_QWORD *)a2 + 2);
          }
          else
          {
            v16 = *v13;
            v17 = v13 + 1;
            *((_QWORD *)a2 + 1) = v17;
          }
          *(_QWORD *)(v5 + 24) = -(uint64_t)(v16 & 1) ^ (v16 >> 1);
          v14 = *(_DWORD *)(v5 + 52) | 2;
          *(_DWORD *)(v5 + 52) = v14;
          if ((unint64_t)v17 < v12 && *v17 == 26)
          {
            *((_QWORD *)a2 + 1) = v17 + 1;
            goto LABEL_33;
          }
          continue;
        case 3u:
          v9 = v8 & 7;
          if (v9 != 2)
            goto LABEL_17;
          v14 = *(_DWORD *)(v5 + 52);
LABEL_33:
          *(_DWORD *)(v5 + 52) = v14 | 4;
          v18 = *(uint64_t **)(v5 + 32);
          if (v18 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
          {
            v19 = (std::string *)operator new();
            v19->__r_.__value_.__l.__size_ = 0;
            v19->__r_.__value_.__r.__words[2] = 0;
            v19->__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)(v5 + 32) = v19;
          }
          else
          {
            v19 = *(std::string **)(v5 + 32);
          }
          this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v19);
          if (!(_DWORD)this)
            return this;
          v20 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 != 34)
            continue;
          *((_QWORD *)a2 + 1) = v20 + 1;
LABEL_40:
          *(_DWORD *)(v5 + 52) |= 8u;
          v21 = *(uint64_t **)(v5 + 40);
          if (v21 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
          {
            v22 = (std::string *)operator new();
            v22->__r_.__value_.__l.__size_ = 0;
            v22->__r_.__value_.__r.__words[2] = 0;
            v22->__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)(v5 + 40) = v22;
          }
          else
          {
            v22 = *(std::string **)(v5 + 40);
          }
          this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v22);
          if (!(_DWORD)this)
            return this;
          if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
            || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          {
            continue;
          }
          *((_DWORD *)a2 + 8) = 0;
          this = 1;
          *((_BYTE *)a2 + 36) = 1;
          return this;
        case 4u:
          v9 = v8 & 7;
          if (v9 != 2)
            goto LABEL_17;
          goto LABEL_40;
        default:
          v9 = v8 & 7;
LABEL_17:
          if (v9 == 4)
            return 1;
          this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, v8, v6, a4);
          if ((this & 1) != 0)
            continue;
          return 0;
      }
    }
    break;
  }
  this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
  v8 = (AddrObjGoogle::protobuf::io::CodedInputStream *)this;
  *((_DWORD *)a2 + 8) = this;
  if ((_DWORD)this)
    goto LABEL_7;
  return 1;
}

uint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::ParseField(uint64_t **this, uint64_t a2, AddrObjGoogle::protobuf::io::CodedInputStream *a3, const AddrObjGoogle::protobuf::Message *a4, AddrObjGoogle::protobuf::UnknownFieldSet *a5)
{
  const AddrObjGoogle::protobuf::Message *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v14)(AddrObjGoogle::protobuf::internal::DescriptorPoolExtensionFinder *__hidden);
  const AddrObjGoogle::protobuf::Message *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = a5;
  v18[0] = &unk_1E1BF62C8;
  v8 = (const AddrObjGoogle::protobuf::Message *)*((_QWORD *)a3 + 8);
  if (v8)
  {
    v9 = *((_QWORD *)a3 + 9);
    v10 = (*(uint64_t (**)(const AddrObjGoogle::protobuf::Message *))(*(_QWORD *)a4 + 152))(a4);
    v14 = &off_1E1BF6300;
    v15 = v8;
    v16 = v9;
    v17 = v10;
    v11 = AddrObjGoogle::protobuf::internal::ExtensionSet::ParseField(this, a2, (char **)a3, (uint64_t)&v14, (uint64_t)v18);
  }
  else
  {
    v14 = (void (**)(AddrObjGoogle::protobuf::internal::DescriptorPoolExtensionFinder *__hidden))&unk_1E1BF6068;
    v15 = a4;
    v11 = AddrObjGoogle::protobuf::internal::ExtensionSet::ParseField(this, a2, (char **)a3, (uint64_t)&v14, (uint64_t)v18);
  }
  v12 = v11;
  addr_obj::Localization::getDisplayLanguage((addr_obj::Localization *)&v14);
  return v12;
}

void sub_188654E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  addr_obj::Localization::getDisplayLanguage((addr_obj::Localization *)&a9);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::ParseField(uint64_t **a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  _BYTE v12[32];

  v9 = a2 >> 3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a4 + 16))(a4, v9, v12))
  {
    v10 = a2 & 7;
    if (v12[2])
    {
      if (v10 == 2)
        return AddrObjGoogle::protobuf::internal::ExtensionSet::ParseFieldWithExtensionInfo(a1, v9, (uint64_t)v12, a3, a5);
    }
    else if (v10 == AddrObjGoogle::protobuf::internal::WireFormatLite::kWireTypeForFieldType[v12[0]])
    {
      return AddrObjGoogle::protobuf::internal::ExtensionSet::ParseFieldWithExtensionInfo(a1, v9, (uint64_t)v12, a3, a5);
    }
  }
  return (*(uint64_t (**)(uint64_t, char **, uint64_t))(*(_QWORD *)a5 + 16))(a5, a3, a2);
}

uint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::ParseFieldWithExtensionInfo(uint64_t **a1, uint64_t a2, uint64_t a3, char **this, uint64_t a5)
{
  char *v9;
  unsigned int v10;
  uint64_t result;
  int v12;
  std::string *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  char *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int v25;
  char *v26;
  uint64_t v27;
  char *v28;
  std::string::size_type v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t **v32;
  int v33;
  char v34;
  int data;
  uint64_t *v36;
  uint64_t **v37;
  int v38;
  char v39;
  uint64_t *v40;
  std::string *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  AddrObjGoogle::protobuf::io::CodedInputStream *v47;
  AddrObjGoogle::protobuf::MessageLite *v48;
  uint64_t *v49;
  std::string *v50;
  uint64_t data_low;
  char v53;
  std::string v54[2];
  unsigned int v55;

  if (!*(_BYTE *)(a3 + 2))
  {
    switch(*(_BYTE *)a3)
    {
      case 1:
        v54[0].__r_.__value_.__r.__words[0] = 0;
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54);
        if (!(_DWORD)result)
          return result;
        if (*(_BYTE *)(a3 + 1))
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddDouble(a1, a2, 1, 0, *(_QWORD *)(a3 + 24), *(double *)&v54[0].__r_.__value_.__l.__data_);
        else
          AddrObjGoogle::protobuf::internal::ExtensionSet::SetDouble(a1, a2, 1, *(uint64_t **)(a3 + 24), *(double *)&v54[0].__r_.__value_.__l.__data_);
        return 1;
      case 2:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!(_DWORD)result)
          return result;
        if (*(_BYTE *)(a3 + 1))
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddFloat(a1, a2, 2, 0, *(_QWORD *)(a3 + 24), *(float *)&v54[0].__r_.__value_.__l.__data_);
        else
          AddrObjGoogle::protobuf::internal::ExtensionSet::SetFloat(a1, a2, 2, *(uint64_t **)(a3 + 24), *(float *)&v54[0].__r_.__value_.__l.__data_);
        return 1;
      case 3:
        v54[0].__r_.__value_.__r.__words[0] = 0;
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54);
        if (!(_DWORD)result)
          return result;
        v30 = (uint64_t *)v54[0].__r_.__value_.__r.__words[0];
        v31 = *(uint64_t **)(a3 + 24);
        v32 = a1;
        v33 = a2;
        v34 = 3;
        if (!*(_BYTE *)(a3 + 1))
          goto LABEL_113;
        goto LABEL_119;
      case 4:
        v54[0].__r_.__value_.__r.__words[0] = 0;
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54);
        if (!(_DWORD)result)
          return result;
        v30 = (uint64_t *)v54[0].__r_.__value_.__r.__words[0];
        v31 = *(uint64_t **)(a3 + 24);
        v32 = a1;
        v33 = a2;
        v34 = 4;
        if (!*(_BYTE *)(a3 + 1))
          goto LABEL_113;
        goto LABEL_119;
      case 5:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!(_DWORD)result)
          return result;
        data = (int)v54[0].__r_.__value_.__l.__data_;
        v36 = *(uint64_t **)(a3 + 24);
        v37 = a1;
        v38 = a2;
        v39 = 5;
        if (!*(_BYTE *)(a3 + 1))
          goto LABEL_136;
        goto LABEL_122;
      case 6:
        v54[0].__r_.__value_.__r.__words[0] = 0;
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54);
        if (!(_DWORD)result)
          return result;
        v30 = (uint64_t *)v54[0].__r_.__value_.__r.__words[0];
        v31 = *(uint64_t **)(a3 + 24);
        v32 = a1;
        v33 = a2;
        v34 = 6;
        if (*(_BYTE *)(a3 + 1))
          goto LABEL_119;
        goto LABEL_113;
      case 7:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!(_DWORD)result)
          return result;
        data = (int)v54[0].__r_.__value_.__l.__data_;
        v36 = *(uint64_t **)(a3 + 24);
        v37 = a1;
        v38 = a2;
        v39 = 7;
        if (*(_BYTE *)(a3 + 1))
          goto LABEL_122;
        goto LABEL_136;
      case 8:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!(_DWORD)result)
          return result;
        if (*(_BYTE *)(a3 + 1))
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddBool(a1, a2, 8, 0, LODWORD(v54[0].__r_.__value_.__l.__data_) != 0, *(_QWORD *)(a3 + 24));
        else
          AddrObjGoogle::protobuf::internal::ExtensionSet::SetBool(a1, a2, 8, LODWORD(v54[0].__r_.__value_.__l.__data_) != 0, *(uint64_t **)(a3 + 24));
        return 1;
      case 9:
        v40 = *(uint64_t **)(a3 + 24);
        if (*(_BYTE *)(a3 + 1))
          v41 = (std::string *)AddrObjGoogle::protobuf::internal::ExtensionSet::AddString(a1, a2, 9, (uint64_t)v40);
        else
          v41 = (std::string *)AddrObjGoogle::protobuf::internal::ExtensionSet::MutableString(a1, a2, 9, v40);
        return AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)this, v41);
      case 0xA:
        v42 = *(_QWORD *)(a3 + 8);
        v43 = *(uint64_t **)(a3 + 24);
        if (*(_BYTE *)(a3 + 1))
          v44 = AddrObjGoogle::protobuf::internal::ExtensionSet::AddMessage(a1, a2, 10, v42, v43);
        else
          v44 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(a1, a2, 10, v42, v43);
        return (AddrObjGoogle::protobuf::internal::WireFormatLite::ReadGroup(a2, this, v44) & 1) != 0;
      case 0xB:
        v45 = *(_QWORD *)(a3 + 8);
        v46 = *(uint64_t **)(a3 + 24);
        if (*(_BYTE *)(a3 + 1))
          v47 = (AddrObjGoogle::protobuf::io::CodedInputStream *)AddrObjGoogle::protobuf::internal::ExtensionSet::AddMessage(a1, a2, 11, v45, v46);
        else
          v47 = (AddrObjGoogle::protobuf::io::CodedInputStream *)AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(a1, a2, 11, v45, v46);
        result = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadMessage((AddrObjGoogle::protobuf::internal::WireFormatLite *)this, v47, v48);
        if ((_DWORD)result)
          return 1;
        return result;
      case 0xC:
        v49 = *(uint64_t **)(a3 + 24);
        if (*(_BYTE *)(a3 + 1))
          v50 = (std::string *)AddrObjGoogle::protobuf::internal::ExtensionSet::AddString(a1, a2, 12, (uint64_t)v49);
        else
          v50 = (std::string *)AddrObjGoogle::protobuf::internal::ExtensionSet::MutableString(a1, a2, 12, v49);
        return AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)this, v50);
      case 0xD:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!(_DWORD)result)
          return result;
        data = (int)v54[0].__r_.__value_.__l.__data_;
        v36 = *(uint64_t **)(a3 + 24);
        v37 = a1;
        v38 = a2;
        v39 = 13;
        if (!*(_BYTE *)(a3 + 1))
          goto LABEL_136;
        goto LABEL_122;
      case 0xE:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!(_DWORD)result)
          return result;
        data_low = LODWORD(v54[0].__r_.__value_.__l.__data_);
        if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 8))(*(_QWORD *)(a3 + 16), LODWORD(v54[0].__r_.__value_.__l.__data_)) & 1) != 0)
        {
          if (*(_BYTE *)(a3 + 1))
            AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(a1, a2, 14, 0, data_low, *(_QWORD *)(a3 + 24));
          else
            AddrObjGoogle::protobuf::internal::ExtensionSet::SetInt32(a1, a2, 14, data_low, *(uint64_t **)(a3 + 24));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 32))(a5, a2, data_low);
        }
        return 1;
      case 0xF:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!(_DWORD)result)
          return result;
        data = (int)v54[0].__r_.__value_.__l.__data_;
        v36 = *(uint64_t **)(a3 + 24);
        v37 = a1;
        v38 = a2;
        v39 = 15;
        if (!*(_BYTE *)(a3 + 1))
          goto LABEL_136;
        goto LABEL_122;
      case 0x10:
        v54[0].__r_.__value_.__r.__words[0] = 0;
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54);
        if (!(_DWORD)result)
          return result;
        v30 = (uint64_t *)v54[0].__r_.__value_.__r.__words[0];
        v31 = *(uint64_t **)(a3 + 24);
        v32 = a1;
        v33 = a2;
        v34 = 16;
        if (!*(_BYTE *)(a3 + 1))
          goto LABEL_113;
        goto LABEL_119;
      case 0x11:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!(_DWORD)result)
          return result;
        data = -(v54[0].__r_.__value_.__s.__data_[0] & 1) ^ (LODWORD(v54[0].__r_.__value_.__l.__data_) >> 1);
        v36 = *(uint64_t **)(a3 + 24);
        v37 = a1;
        v38 = a2;
        v39 = 17;
        if (*(_BYTE *)(a3 + 1))
LABEL_122:
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(v37, v38, v39, 0, data, (uint64_t)v36);
        else
LABEL_136:
          AddrObjGoogle::protobuf::internal::ExtensionSet::SetInt32(v37, v38, v39, data, v36);
        break;
      case 0x12:
        v54[0].__r_.__value_.__r.__words[0] = 0;
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54);
        if (!(_DWORD)result)
          return result;
        v30 = (uint64_t *)(-(uint64_t)(v54[0].__r_.__value_.__s.__data_[0] & 1) ^ (v54[0].__r_.__value_.__r.__words[0] >> 1));
        v31 = *(uint64_t **)(a3 + 24);
        v32 = a1;
        v33 = a2;
        v34 = 18;
        if (*(_BYTE *)(a3 + 1))
LABEL_119:
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt64(v32, v33, v34, 0, (uint64_t)v30, (uint64_t)v31);
        else
LABEL_113:
          AddrObjGoogle::protobuf::internal::ExtensionSet::SetInt64(v32, v33, v34, v30, v31);
        break;
      default:
        return 1;
    }
    return 1;
  }
  v55 = 0;
  v9 = this[1];
  if (v9 < this[2] && (*v9 & 0x80000000) == 0)
  {
    v10 = *v9;
    v55 = v10;
    this[1] = v9 + 1;
LABEL_11:
    v12 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this, v10);
    switch(*(_BYTE *)a3)
    {
      case 1:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1)
          goto LABEL_13;
        do
        {
          v54[0].__r_.__value_.__r.__words[0] = 0;
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54))return 0;
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddDouble(a1, a2, 1, 1, *(_QWORD *)(a3 + 24), *(double *)&v54[0].__r_.__value_.__l.__data_);
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 2:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1)
          goto LABEL_13;
        while (1)
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0;
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddFloat(a1, a2, 2, 1, *(_QWORD *)(a3 + 24), *(float *)&v54[0].__r_.__value_.__l.__data_);
          if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) <= 0)
            goto LABEL_13;
        }
      case 3:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1)
          goto LABEL_13;
        do
        {
          v54[0].__r_.__value_.__r.__words[0] = 0;
          v20 = this[1];
          if (v20 >= this[2] || *v20 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54))return 0;
            v21 = v54[0].__r_.__value_.__r.__words[0];
          }
          else
          {
            v21 = *v20;
            this[1] = v20 + 1;
          }
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt64(a1, a2, 3, 1, v21, *(_QWORD *)(a3 + 24));
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 4:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1)
          goto LABEL_13;
        do
        {
          v54[0].__r_.__value_.__r.__words[0] = 0;
          v22 = this[1];
          if (v22 >= this[2] || *v22 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54))return 0;
            v23 = v54[0].__r_.__value_.__r.__words[0];
          }
          else
          {
            v23 = *v22;
            v54[0].__r_.__value_.__r.__words[0] = v23;
            this[1] = v22 + 1;
          }
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt64(a1, a2, 4, 1, v23, *(_QWORD *)(a3 + 24));
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 5:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1)
          goto LABEL_13;
        do
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          v14 = this[1];
          if (v14 >= this[2] || *v14 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0;
            v15 = (int)v54[0].__r_.__value_.__l.__data_;
          }
          else
          {
            v15 = *v14;
            this[1] = v14 + 1;
          }
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(a1, a2, 5, 1, v15, *(_QWORD *)(a3 + 24));
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 6:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1)
          goto LABEL_13;
        while (1)
        {
          v54[0].__r_.__value_.__r.__words[0] = 0;
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54))return 0;
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt64(a1, a2, 6, 1, (uint64_t)v54[0].__r_.__value_.__l.__data_, *(_QWORD *)(a3 + 24));
          if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) <= 0)
            goto LABEL_13;
        }
      case 7:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1)
          goto LABEL_13;
        while (1)
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0;
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(a1, a2, 7, 1, (int)v54[0].__r_.__value_.__l.__data_, *(_QWORD *)(a3 + 24));
          if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) <= 0)
            goto LABEL_13;
        }
      case 8:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1)
          goto LABEL_13;
        do
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          v24 = this[1];
          if (v24 >= this[2] || *v24 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0;
            v25 = (int)v54[0].__r_.__value_.__l.__data_;
          }
          else
          {
            v25 = *v24;
            this[1] = v24 + 1;
          }
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddBool(a1, a2, 8, 1, v25 != 0, *(_QWORD *)(a3 + 24));
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v54, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/extension_set.cc", 943);
        v13 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v54, "Non-primitive types can't be packed.");
        AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v53, (AddrObjGoogle::protobuf::internal::LogMessage *)v13);
        AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v54[0].__r_.__value_.__l.__data_);
        goto LABEL_13;
      case 0xD:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1)
          goto LABEL_13;
        do
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          v16 = this[1];
          if (v16 >= this[2] || *v16 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0;
            v17 = (int)v54[0].__r_.__value_.__l.__data_;
          }
          else
          {
            v17 = *v16;
            LODWORD(v54[0].__r_.__value_.__l.__data_) = v17;
            this[1] = v16 + 1;
          }
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(a1, a2, 13, 1, v17, *(_QWORD *)(a3 + 24));
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 0xE:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1)
          goto LABEL_13;
        do
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          v26 = this[1];
          if (v26 >= this[2] || *v26 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0;
            v27 = LODWORD(v54[0].__r_.__value_.__l.__data_);
          }
          else
          {
            v27 = *v26;
            this[1] = v26 + 1;
          }
          if ((*(unsigned int (**)(_QWORD, uint64_t))(a3 + 8))(*(_QWORD *)(a3 + 16), v27))
            AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(a1, a2, 14, 1, v27, *(_QWORD *)(a3 + 24));
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 0xF:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1)
          goto LABEL_13;
        while (1)
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0;
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(a1, a2, 15, 1, (int)v54[0].__r_.__value_.__l.__data_, *(_QWORD *)(a3 + 24));
          if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) <= 0)
            goto LABEL_13;
        }
      case 0x10:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1)
          goto LABEL_13;
        while (1)
        {
          v54[0].__r_.__value_.__r.__words[0] = 0;
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54))return 0;
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt64(a1, a2, 16, 1, (uint64_t)v54[0].__r_.__value_.__l.__data_, *(_QWORD *)(a3 + 24));
          if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) <= 0)
            goto LABEL_13;
        }
      case 0x11:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1)
          goto LABEL_13;
        do
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          v18 = this[1];
          if (v18 >= this[2] || *v18 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0;
            v19 = v54[0].__r_.__value_.__l.__data_;
          }
          else
          {
            v19 = *v18;
            this[1] = v18 + 1;
          }
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(a1, a2, 17, 1, -(v19 & 1) ^ (v19 >> 1), *(_QWORD *)(a3 + 24));
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 0x12:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1)
          goto LABEL_13;
        break;
      default:
        goto LABEL_13;
    }
    do
    {
      v54[0].__r_.__value_.__r.__words[0] = 0;
      v28 = this[1];
      if (v28 >= this[2] || *v28 < 0)
      {
        if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54))return 0;
        v29 = v54[0].__r_.__value_.__r.__words[0];
      }
      else
      {
        v29 = *v28;
        this[1] = v28 + 1;
      }
      AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt64(a1, a2, 18, 1, -(uint64_t)(v29 & 1) ^ (v29 >> 1), *(_QWORD *)(a3 + 24));
    }
    while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
LABEL_13:
    AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)this, v12);
    return 1;
  }
  if (AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, &v55))
  {
    v10 = v55;
    goto LABEL_11;
  }
  return 0;
}

void sub_188655AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(uint64_t **a1, int a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  uint64_t result;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v13 = a2;
  v8 = std::__tree<std::__value_type<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>,std::__map_value_compare<int,std::__value_type<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>,std::less<int>,true>,std::allocator<std::__value_type<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>>>::__emplace_unique_key_args<int,std::pair<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>>(a1, &v13, (uint64_t)&v13);
  v9 = v8;
  v8[7] = a5;
  if (v10)
  {
    *((_BYTE *)v8 + 48) = a3;
    *((_BYTE *)v8 + 49) = 0;
    *((_BYTE *)v8 + 50) &= 0xFu;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
    v9[5] = (uint64_t *)result;
    *((_BYTE *)v9 + 50) &= 0xF0u;
  }
  else
  {
    v12 = *((_BYTE *)v8 + 50);
    *((_BYTE *)v8 + 50) = v12 & 0xF0;
    result = (uint64_t)v8[5];
    if ((v12 & 0x10) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a4);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>,std::__map_value_compare<int,std::__value_type<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>,std::less<int>,true>,std::allocator<std::__value_type<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>>>::__emplace_unique_key_args<int,std::pair<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>>(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  char *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (char *)operator new(0x40uLL);
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v10 + 7) = *(_QWORD *)(a3 + 24);
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

addr_obj::V2AddressObjectProto *addr_obj::V2AddressObjectProto::New(addr_obj::V2AddressObjectProto *this)
{
  addr_obj::V2AddressObjectProto *v1;

  v1 = (addr_obj::V2AddressObjectProto *)operator new();
  addr_obj::V2AddressObjectProto::V2AddressObjectProto(v1);
  return v1;
}

void sub_188655CBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40BACA7D59);
  _Unwind_Resume(a1);
}

addr_obj::V1AddressObjectProto *addr_obj::V1AddressObjectProto::V1AddressObjectProto(addr_obj::V1AddressObjectProto *this)
{
  *(_QWORD *)this = &off_1E1BF9D10;
  AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((_QWORD *)this + 1);
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 4);
  addr_obj::V1AddressObjectProto::SharedCtor(this);
  return this;
}

void sub_188655D34(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::internal::ExtensionSet *v2;
  AddrObjGoogle::protobuf::UnknownFieldSet *v3;
  AddrObjGoogle::protobuf::UnknownFieldSet *v4;

  v4 = v3;
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v4);
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t *addr_obj::V1AddressObjectProto::SharedCtor(addr_obj::V1AddressObjectProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *result;

  *((_DWORD *)this + 24) = 0;
  v2 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  *((_QWORD *)this + 5) = v2;
  *((_QWORD *)this + 6) = 0;
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v2);
  *((_QWORD *)this + 7) = v3;
  v4 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((_QWORD *)this + 8) = v4;
  *((_QWORD *)this + 9) = 0;
  result = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v4);
  *((_QWORD *)this + 10) = result;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 25) = 0;
  return result;
}

addr_obj::V2AddressObjectProto *addr_obj::V2AddressObjectProto::V2AddressObjectProto(addr_obj::V2AddressObjectProto *this)
{
  *(_QWORD *)this = &off_1E1BF9DC0;
  AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((_QWORD *)this + 1);
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 4);
  addr_obj::V2AddressObjectProto::SharedCtor(this);
  return this;
}

void sub_188655E04(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::internal::ExtensionSet *v2;
  AddrObjGoogle::protobuf::UnknownFieldSet *v3;
  AddrObjGoogle::protobuf::UnknownFieldSet *v4;

  v4 = v3;
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v4);
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

_QWORD *AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet(_QWORD *this)
{
  this[2] = 0;
  this[1] = 0;
  *this = this + 1;
  return this;
}

uint64_t *addr_obj::V2AddressObjectProto::SharedCtor(addr_obj::V2AddressObjectProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *result;

  *((_DWORD *)this + 34) = 0;
  v2 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  *((_QWORD *)this + 5) = v2;
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v2);
  *((_QWORD *)this + 6) = v3;
  v4 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((_QWORD *)this + 7) = v4;
  v5 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v4);
  *((_QWORD *)this + 8) = v5;
  v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v5);
  *((_QWORD *)this + 9) = v6;
  v7 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  *((_QWORD *)this + 10) = v7;
  v8 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v7);
  *((_QWORD *)this + 11) = v8;
  v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v8);
  *((_QWORD *)this + 12) = v9;
  v10 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9);
  *((_QWORD *)this + 13) = v10;
  v11 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v10);
  *((_QWORD *)this + 14) = v11;
  v12 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v11);
  *((_QWORD *)this + 15) = v12;
  result = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v12);
  *((_QWORD *)this + 16) = result;
  *((_DWORD *)this + 35) = 0;
  return result;
}

uint64_t AddrObjGoogle::protobuf::internal::WireFormatLite::ReadMessage(AddrObjGoogle::protobuf::internal::WireFormatLite *this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, AddrObjGoogle::protobuf::MessageLite *a3)
{
  char *v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  unsigned int v13;

  v13 = 0;
  v5 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
  {
    result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v13);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    v13 = *v5;
    *((_QWORD *)this + 1) = v5 + 1;
  }
  v7 = *((_DWORD *)this + 14);
  v8 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 14) = v7 + 1;
  if (v7 >= v8)
    return 0;
  v9 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(this, v13);
  result = (*(uint64_t (**)(AddrObjGoogle::protobuf::io::CodedInputStream *, AddrObjGoogle::protobuf::internal::WireFormatLite *))(*(_QWORD *)a2 + 64))(a2, this);
  if (!(_DWORD)result)
    return result;
  if (!*((_BYTE *)this + 36))
    return 0;
  AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)this, v9);
  v10 = *((_DWORD *)this + 14);
  v11 = __OFSUB__(v10, 1);
  v12 = v10 - 1;
  if (v12 < 0 == v11)
    *((_DWORD *)this + 14) = v12;
  return 1;
}

uint64_t addr_obj::V2AddressObjectProto::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  void ***v6;
  uint64_t **v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  std::string *v12;
  const AddrObjGoogle::protobuf::Message *v13;
  _BYTE *v14;
  uint64_t *v15;
  std::string *v16;
  _BYTE *v17;
  uint64_t *v18;
  std::string *v19;
  _BYTE *v20;
  uint64_t *v21;
  std::string *v22;
  _BYTE *v23;
  uint64_t *v24;
  std::string *v25;
  _BYTE *v26;
  uint64_t *v27;
  std::string *v28;
  _BYTE *v29;
  uint64_t *v30;
  std::string *v31;
  _BYTE *v32;
  uint64_t *v33;
  std::string *v34;
  _BYTE *v35;
  uint64_t *v36;
  std::string *v37;
  _BYTE *v38;
  uint64_t *v39;
  std::string *v40;
  _BYTE *v41;
  uint64_t *v42;
  std::string *v43;
  _BYTE *v44;
  uint64_t *v45;
  std::string *v46;

  v5 = this;
  v6 = (void ***)(this + 32);
  v7 = (uint64_t **)(this + 8);
  while (2)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      v9 = this;
      *((_DWORD *)a2 + 8) = this;
      if (!(_DWORD)this)
        return 1;
    }
    else
    {
      v9 = *v8;
      *((_DWORD *)a2 + 8) = v9;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)v9)
        return 1;
    }
    switch(v9 >> 3)
    {
      case 1u:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_33;
        *(_DWORD *)(v5 + 140) |= 1u;
        v11 = *(uint64_t **)(v5 + 40);
        if (v11 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v12 = (std::string *)operator new();
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 40) = v12;
        }
        else
        {
          v12 = *(std::string **)(v5 + 40);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v12);
        if ((_DWORD)this)
        {
          v14 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v14 < *((_QWORD *)a2 + 2) && *v14 == 18)
          {
            *((_QWORD *)a2 + 1) = v14 + 1;
            goto LABEL_44;
          }
          continue;
        }
        break;
      case 2u:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_33;
LABEL_44:
        *(_DWORD *)(v5 + 140) |= 2u;
        v15 = *(uint64_t **)(v5 + 48);
        if (v15 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v16 = (std::string *)operator new();
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 48) = v16;
        }
        else
        {
          v16 = *(std::string **)(v5 + 48);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v16);
        if ((_DWORD)this)
        {
          v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v17 < *((_QWORD *)a2 + 2) && *v17 == 26)
          {
            *((_QWORD *)a2 + 1) = v17 + 1;
            goto LABEL_51;
          }
          continue;
        }
        break;
      case 3u:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_33;
LABEL_51:
        *(_DWORD *)(v5 + 140) |= 4u;
        v18 = *(uint64_t **)(v5 + 56);
        if (v18 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v19 = (std::string *)operator new();
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 56) = v19;
        }
        else
        {
          v19 = *(std::string **)(v5 + 56);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v19);
        if ((_DWORD)this)
        {
          v20 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v20 < *((_QWORD *)a2 + 2) && *v20 == 34)
          {
            *((_QWORD *)a2 + 1) = v20 + 1;
            goto LABEL_58;
          }
          continue;
        }
        break;
      case 4u:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_33;
LABEL_58:
        *(_DWORD *)(v5 + 140) |= 8u;
        v21 = *(uint64_t **)(v5 + 64);
        if (v21 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v22 = (std::string *)operator new();
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 64) = v22;
        }
        else
        {
          v22 = *(std::string **)(v5 + 64);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v22);
        if ((_DWORD)this)
        {
          v23 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v23 < *((_QWORD *)a2 + 2) && *v23 == 42)
          {
            *((_QWORD *)a2 + 1) = v23 + 1;
            goto LABEL_65;
          }
          continue;
        }
        break;
      case 5u:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_33;
LABEL_65:
        *(_DWORD *)(v5 + 140) |= 0x20u;
        v24 = *(uint64_t **)(v5 + 80);
        if (v24 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v25 = (std::string *)operator new();
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 80) = v25;
        }
        else
        {
          v25 = *(std::string **)(v5 + 80);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v25);
        if ((_DWORD)this)
        {
          v26 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v26 < *((_QWORD *)a2 + 2) && *v26 == 50)
          {
            *((_QWORD *)a2 + 1) = v26 + 1;
            goto LABEL_72;
          }
          continue;
        }
        break;
      case 6u:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_33;
LABEL_72:
        *(_DWORD *)(v5 + 140) |= 0x40u;
        v27 = *(uint64_t **)(v5 + 88);
        if (v27 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v28 = (std::string *)operator new();
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 88) = v28;
        }
        else
        {
          v28 = *(std::string **)(v5 + 88);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v28);
        if ((_DWORD)this)
        {
          v29 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v29 < *((_QWORD *)a2 + 2) && *v29 == 58)
          {
            *((_QWORD *)a2 + 1) = v29 + 1;
            goto LABEL_79;
          }
          continue;
        }
        break;
      case 7u:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_33;
LABEL_79:
        *(_DWORD *)(v5 + 140) |= 0x80u;
        v30 = *(uint64_t **)(v5 + 96);
        if (v30 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v31 = (std::string *)operator new();
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 96) = v31;
        }
        else
        {
          v31 = *(std::string **)(v5 + 96);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v31);
        if ((_DWORD)this)
        {
          v32 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v32 < *((_QWORD *)a2 + 2) && *v32 == 66)
          {
            *((_QWORD *)a2 + 1) = v32 + 1;
            goto LABEL_86;
          }
          continue;
        }
        break;
      case 8u:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_33;
LABEL_86:
        *(_DWORD *)(v5 + 140) |= 0x10u;
        v33 = *(uint64_t **)(v5 + 72);
        if (v33 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v34 = (std::string *)operator new();
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 72) = v34;
        }
        else
        {
          v34 = *(std::string **)(v5 + 72);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v34);
        if ((_DWORD)this)
        {
          v35 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v35 < *((_QWORD *)a2 + 2) && *v35 == 74)
          {
            *((_QWORD *)a2 + 1) = v35 + 1;
            goto LABEL_93;
          }
          continue;
        }
        break;
      case 9u:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_33;
LABEL_93:
        *(_DWORD *)(v5 + 140) |= 0x100u;
        v36 = *(uint64_t **)(v5 + 104);
        if (v36 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v37 = (std::string *)operator new();
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 104) = v37;
        }
        else
        {
          v37 = *(std::string **)(v5 + 104);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v37);
        if ((_DWORD)this)
        {
          v38 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v38 < *((_QWORD *)a2 + 2) && *v38 == 82)
          {
            *((_QWORD *)a2 + 1) = v38 + 1;
            goto LABEL_100;
          }
          continue;
        }
        break;
      case 0xAu:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_33;
LABEL_100:
        *(_DWORD *)(v5 + 140) |= 0x200u;
        v39 = *(uint64_t **)(v5 + 112);
        if (v39 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v40 = (std::string *)operator new();
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 112) = v40;
        }
        else
        {
          v40 = *(std::string **)(v5 + 112);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v40);
        if ((_DWORD)this)
        {
          v41 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v41 < *((_QWORD *)a2 + 2) && *v41 == 90)
          {
            *((_QWORD *)a2 + 1) = v41 + 1;
            goto LABEL_107;
          }
          continue;
        }
        break;
      case 0xBu:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_33;
LABEL_107:
        *(_DWORD *)(v5 + 140) |= 0x400u;
        v42 = *(uint64_t **)(v5 + 120);
        if (v42 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v43 = (std::string *)operator new();
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 120) = v43;
        }
        else
        {
          v43 = *(std::string **)(v5 + 120);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v43);
        if ((_DWORD)this)
        {
          v44 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v44 < *((_QWORD *)a2 + 2) && *v44 == 98)
          {
            *((_QWORD *)a2 + 1) = v44 + 1;
            goto LABEL_114;
          }
          continue;
        }
        break;
      case 0xCu:
        v10 = v9 & 7;
        if (v10 != 2)
          goto LABEL_33;
LABEL_114:
        *(_DWORD *)(v5 + 140) |= 0x800u;
        v45 = *(uint64_t **)(v5 + 128);
        if (v45 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v46 = (std::string *)operator new();
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 128) = v46;
        }
        else
        {
          v46 = *(std::string **)(v5 + 128);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v46);
        if ((_DWORD)this)
        {
          if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
            || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          {
            continue;
          }
          *((_DWORD *)a2 + 8) = 0;
          this = 1;
          *((_BYTE *)a2 + 36) = 1;
        }
        break;
      default:
        v10 = v9 & 7;
LABEL_33:
        if (v10 == 4)
          return 1;
        if ((v9 - 800) > 0x31F)
        {
          this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, (AddrObjGoogle::protobuf::io::CodedInputStream *)v9, v6, a4);
          if ((this & 1) != 0)
            continue;
        }
        else
        {
          v13 = (const AddrObjGoogle::protobuf::Message *)addr_obj::V2AddressObjectProto::default_instance_((addr_obj::V2AddressObjectProto *)this);
          this = AddrObjGoogle::protobuf::internal::ExtensionSet::ParseField(v7, v9, a2, v13, (AddrObjGoogle::protobuf::UnknownFieldSet *)v6);
          if ((this & 1) != 0)
            continue;
        }
        this = 0;
        break;
    }
    return this;
  }
}

uint64_t AddrObjGoogle::protobuf::internal::GeneratedExtensionFinder::Find(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  uint64_t *v4;
  __int128 v5;
  _QWORD v7[2];

  if (!qword_1EDF507C0)
    return 0;
  v7[0] = *(_QWORD *)(a1 + 8);
  v7[1] = a2;
  v4 = std::__hash_table<std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,std::__unordered_map_hasher<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,AddrObjGoogle::protobuf::hash<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,std::equal_to<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,true>,std::__unordered_map_equal<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,std::equal_to<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,AddrObjGoogle::protobuf::hash<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,true>,std::allocator<std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>>>::find<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>((_QWORD *)qword_1EDF507C0, (uint64_t)v7);
  if (!v4)
    return 0;
  v5 = *((_OWORD *)v4 + 3);
  *a3 = *((_OWORD *)v4 + 2);
  a3[1] = v5;
  return 1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,std::__unordered_map_hasher<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,AddrObjGoogle::protobuf::hash<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,std::equal_to<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,true>,std::__unordered_map_equal<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,std::equal_to<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,AddrObjGoogle::protobuf::hash<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,true>,std::allocator<std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>>>::find<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>(_QWORD *a1, uint64_t a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *result;
  unint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *(int *)(a2 + 8);
  v4 = v3 - *(_QWORD *)a2 + (*(_QWORD *)a2 << 16);
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v3 - *(_QWORD *)a2 + (*(_QWORD *)a2 << 16);
    if (v4 >= *(_QWORD *)&v2)
      v6 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v6 = (*(_QWORD *)&v2 - 1) & v4;
  }
  v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  for (result = *v7; result; result = (uint64_t *)*result)
  {
    v9 = result[1];
    if (v4 == v9)
    {
      if (result[2] == *(_QWORD *)a2 && *((_DWORD *)result + 6) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v5.u32[0] > 1uLL)
      {
        if (v9 >= *(_QWORD *)&v2)
          v9 %= *(_QWORD *)&v2;
      }
      else
      {
        v9 &= *(_QWORD *)&v2 - 1;
      }
      if (v9 != v6)
        return 0;
    }
  }
  return result;
}

uint64_t AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64Fallback(AddrObjGoogle::protobuf::io::CodedInputStream *this, unint64_t *a2)
{
  _BYTE *v2;
  unint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v2 = (_BYTE *)*((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if ((int)v3 - (int)v2 <= 9 && (v3 <= (unint64_t)v2 || *(char *)(v3 - 1) < 0))
    return AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64Slow(this, a2);
  v4 = (_DWORD)v2 + 1;
  v5 = *v2 & 0x7F;
  if ((*v2 & 0x80) == 0)
  {
    v6 = 0;
    v7 = 0;
LABEL_25:
    *((_QWORD *)this + 1) = &v2[v4 - (int)v2];
    *a2 = v5 | ((unint64_t)v6 << 28) | (v7 << 56);
    return 1;
  }
  v9 = (char)v2[1];
  v5 = *v2 & 0x7F | ((v9 & 0x7F) << 7);
  if ((v9 & 0x80000000) == 0)
  {
    v6 = 0;
    v7 = 0;
    v4 = (_DWORD)v2 + 2;
    goto LABEL_25;
  }
  v10 = (char)v2[2];
  v5 = v5 & 0xFFE03FFF | ((v10 & 0x7F) << 14);
  if ((v10 & 0x80000000) == 0)
  {
    v6 = 0;
    v7 = 0;
    v4 = (_DWORD)v2 + 3;
    goto LABEL_25;
  }
  v11 = (char)v2[3];
  v5 = v5 & 0xF01FFFFF | ((v11 & 0x7F) << 21);
  if ((v11 & 0x80000000) == 0)
  {
    v6 = 0;
    v7 = 0;
    v4 = (_DWORD)v2 + 4;
    goto LABEL_25;
  }
  v6 = v2[4] & 0x7F;
  if ((v2[4] & 0x80) == 0)
  {
    v7 = 0;
    v4 = (_DWORD)v2 + 5;
    goto LABEL_25;
  }
  v12 = (char)v2[5];
  v6 = v2[4] & 0x7F | ((v12 & 0x7F) << 7);
  if ((v12 & 0x80000000) == 0)
  {
    v7 = 0;
    v4 = (_DWORD)v2 + 6;
    goto LABEL_25;
  }
  v13 = (char)v2[6];
  v6 = v6 & 0xFFE03FFF | ((v13 & 0x7F) << 14);
  if ((v13 & 0x80000000) == 0)
  {
    v7 = 0;
    v4 = (_DWORD)v2 + 7;
    goto LABEL_25;
  }
  v14 = (char)v2[7];
  v6 = v6 & 0xF01FFFFF | ((v14 & 0x7F) << 21);
  if ((v14 & 0x80000000) == 0)
  {
    v7 = 0;
    v4 = (_DWORD)v2 + 8;
    goto LABEL_25;
  }
  v7 = v2[8] & 0x7F;
  if ((v2[8] & 0x80) == 0)
  {
    v4 = (_DWORD)v2 + 9;
    goto LABEL_25;
  }
  v15 = (char)v2[9];
  if ((v15 & 0x80000000) == 0)
  {
    v4 = (_DWORD)v2 + 10;
    v7 = v2[8] & 0x7F | ((v15 & 0x7F) << 7);
    goto LABEL_25;
  }
  return 0;
}

uint64_t AddrObjGoogle::protobuf::FileDescriptorProto::IsInitialized(AddrObjGoogle::protobuf::FileDescriptorProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  if (*((int *)this + 24) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v2);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) & 1) == 0)
        return 0;
    }
    while (++v2 < *((int *)this + 24));
  }
  if (*((int *)this + 30) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v4);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) & 1) == 0)
        return 0;
    }
    while (++v4 < *((int *)this + 30));
  }
  if (*((int *)this + 36) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 17) + 8 * v6);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) & 1) == 0)
        return 0;
    }
    while (++v6 < *((int *)this + 36));
  }
  if (*((int *)this + 42) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*((_QWORD *)this + 20) + 8 * v8);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) & 1) == 0)
        return 0;
    }
    while (++v8 < *((int *)this + 42));
  }
  if ((*((_BYTE *)this + 205) & 2) == 0)
    return 1;
  v10 = *((_QWORD *)this + 23);
  if (!v10)
    v10 = *(_QWORD *)(AddrObjGoogle::protobuf::FileDescriptorProto::default_instance_(0) + 184);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t AddrObjGoogle::protobuf::DescriptorProto::IsInitialized(AddrObjGoogle::protobuf::DescriptorProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  if (*((int *)this + 8) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v2);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) & 1) == 0)
        return 0;
    }
    while (++v2 < *((int *)this + 8));
  }
  if (*((int *)this + 14) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v4);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) & 1) == 0)
        return 0;
    }
    while (++v4 < *((int *)this + 14));
  }
  if (*((int *)this + 20) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v6);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) & 1) == 0)
        return 0;
    }
    while (++v6 < *((int *)this + 20));
  }
  if (*((int *)this + 26) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v8);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) & 1) == 0)
        return 0;
    }
    while (++v8 < *((int *)this + 26));
  }
  if ((*((_BYTE *)this + 156) & 0x40) == 0)
    return 1;
  v10 = *((_QWORD *)this + 18);
  if (!v10)
    v10 = *(_QWORD *)(AddrObjGoogle::protobuf::DescriptorProto::default_instance_(0) + 144);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t AddrObjGoogle::protobuf::FieldDescriptorProto::IsInitialized(AddrObjGoogle::protobuf::FieldDescriptorProto *this)
{
  uint64_t v1;
  uint64_t result;

  if ((*((_BYTE *)this + 72) & 0x80) == 0)
    return 1;
  v1 = *((_QWORD *)this + 7);
  if (!v1)
    v1 = *(_QWORD *)(AddrObjGoogle::protobuf::FieldDescriptorProto::default_instance_(0) + 56);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t AddrObjGoogle::protobuf::EnumDescriptorProto::IsInitialized(AddrObjGoogle::protobuf::EnumDescriptorProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (*((int *)this + 8) < 1)
  {
LABEL_5:
    if ((*((_BYTE *)this + 60) & 4) == 0)
      return 1;
    v4 = *((_QWORD *)this + 6);
    if (!v4)
      v4 = *(_QWORD *)(AddrObjGoogle::protobuf::EnumDescriptorProto::default_instance_(0) + 48);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    if ((_DWORD)result)
      return 1;
  }
  else
  {
    v2 = 0;
    while (1)
    {
      v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v2);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) & 1) == 0)
        return 0;
      if (++v2 >= *((int *)this + 8))
        goto LABEL_5;
    }
  }
  return result;
}

uint64_t AddrObjGoogle::protobuf::EnumValueDescriptorProto::IsInitialized(AddrObjGoogle::protobuf::EnumValueDescriptorProto *this)
{
  uint64_t v1;
  uint64_t result;

  if ((*((_BYTE *)this + 40) & 4) == 0)
    return 1;
  v1 = *((_QWORD *)this + 3);
  if (!v1)
    v1 = *(_QWORD *)(AddrObjGoogle::protobuf::EnumValueDescriptorProto::default_instance_(0) + 24);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  if ((_DWORD)result)
    return 1;
  return result;
}

AddrObjGoogle::protobuf::UnknownFieldSet *AddrObjGoogle::protobuf::FileDescriptorProto::Clear(AddrObjGoogle::protobuf::FileDescriptorProto **this)
{
  AddrObjGoogle::protobuf::FileDescriptorProto *v1;
  AddrObjGoogle::protobuf::FileDescriptorProto *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t **v7;
  AddrObjGoogle::protobuf::UnknownFieldSet *v8;
  AddrObjGoogle::protobuf::UnknownFieldSet *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  AddrObjGoogle::protobuf::UnknownFieldSet *v18;
  uint64_t v19;

  v1 = (AddrObjGoogle::protobuf::FileDescriptorProto *)this;
  if (*((_BYTE *)this + 204))
  {
    if ((*((_BYTE *)this + 204) & 1) != 0)
    {
      v2 = this[2];
      this = (AddrObjGoogle::protobuf::FileDescriptorProto **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v2 != (AddrObjGoogle::protobuf::FileDescriptorProto *)this)
      {
        v3 = *((_QWORD *)v1 + 2);
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 204) & 2) != 0)
    {
      v4 = (uint64_t *)*((_QWORD *)v1 + 3);
      if (v4 != AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
      {
        v5 = *((_QWORD *)v1 + 3);
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
  }
  v6 = *((_DWORD *)v1 + 51);
  if ((v6 & 0x1FE00) != 0)
  {
    if ((v6 & 0x200) != 0)
    {
      v7 = (uint64_t **)*((_QWORD *)v1 + 23);
      if (v7)
      {
        AddrObjGoogle::protobuf::FileOptions::Clear(v7);
        v6 = *((_DWORD *)v1 + 51);
      }
    }
    if ((v6 & 0x400) != 0)
    {
      v8 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((_QWORD *)v1 + 24);
      if (v8)
        AddrObjGoogle::protobuf::SourceCodeInfo::Clear(v8);
    }
  }
  result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Clear<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v1 + 32);
  *((_DWORD *)v1 + 16) = 0;
  *((_DWORD *)v1 + 20) = 0;
  if (*((int *)v1 + 24) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*((_QWORD *)v1 + 11) + 8 * v10);
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      ++v10;
    }
    while (v10 < *((int *)v1 + 24));
  }
  *((_DWORD *)v1 + 24) = 0;
  if (*((int *)v1 + 30) >= 1)
  {
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(*((_QWORD *)v1 + 14) + 8 * v12);
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
      ++v12;
    }
    while (v12 < *((int *)v1 + 30));
  }
  *((_DWORD *)v1 + 30) = 0;
  if (*((int *)v1 + 36) >= 1)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*((_QWORD *)v1 + 17) + 8 * v14);
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
      ++v14;
    }
    while (v14 < *((int *)v1 + 36));
  }
  *((_DWORD *)v1 + 36) = 0;
  if (*((int *)v1 + 42) >= 1)
  {
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(*((_QWORD *)v1 + 20) + 8 * v16);
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
      ++v16;
    }
    while (v16 < *((int *)v1 + 42));
  }
  v19 = *((_QWORD *)v1 + 1);
  v18 = (AddrObjGoogle::protobuf::FileDescriptorProto *)((char *)v1 + 8);
  *((_DWORD *)v18 + 40) = 0;
  *((_DWORD *)v18 + 49) = 0;
  if (v19)
    return AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v18);
  return result;
}

uint64_t *AddrObjGoogle::protobuf::FileOptions::SharedCtor(AddrObjGoogle::protobuf::FileOptions *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *result;

  *((_DWORD *)this + 25) = 0;
  v2 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  *((_QWORD *)this + 5) = v2;
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v2);
  *((_QWORD *)this + 6) = v3;
  *((_WORD *)this + 30) = 0;
  *((_DWORD *)this + 14) = 1;
  result = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((_QWORD *)this + 8) = result;
  *((_WORD *)this + 31) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_DWORD *)this + 26) = 0;
  return result;
}

uint64_t AddrObjGoogle::protobuf::FieldOptions::IsInitialized(AddrObjGoogle::protobuf::internal::ExtensionSet **this)
{
  uint64_t v2;
  uint64_t v3;

  if (*((int *)this + 16) < 1)
    return AddrObjGoogle::protobuf::internal::ExtensionSet::IsInitialized(this + 1);
  v2 = 0;
  while (1)
  {
    v3 = *((_QWORD *)this[7] + v2);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) & 1) == 0)
      break;
    if (++v2 >= *((int *)this + 16))
      return AddrObjGoogle::protobuf::internal::ExtensionSet::IsInitialized(this + 1);
  }
  return 0;
}

uint64_t AddrObjGoogle::protobuf::FileOptions::IsInitialized(AddrObjGoogle::protobuf::internal::ExtensionSet **this)
{
  uint64_t v2;
  uint64_t v3;

  if (*((int *)this + 20) < 1)
    return AddrObjGoogle::protobuf::internal::ExtensionSet::IsInitialized(this + 1);
  v2 = 0;
  while (1)
  {
    v3 = *((_QWORD *)this[9] + v2);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) & 1) == 0)
      break;
    if (++v2 >= *((int *)this + 20))
      return AddrObjGoogle::protobuf::internal::ExtensionSet::IsInitialized(this + 1);
  }
  return 0;
}

uint64_t *addr_obj::LocalizationProto::Clear(uint64_t *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  AddrObjGoogle::protobuf::UnknownFieldSet *v8;
  uint64_t v9;

  v1 = this;
  if (*((_BYTE *)this + 44))
  {
    if ((*((_BYTE *)this + 44) & 1) != 0)
    {
      v2 = (uint64_t *)this[2];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v2 != this)
      {
        v3 = v1[2];
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 44) & 2) != 0)
    {
      v4 = (uint64_t *)v1[3];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v4 != this)
      {
        v5 = v1[3];
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 44) & 4) != 0)
    {
      v6 = (uint64_t *)v1[4];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v6 != this)
      {
        v7 = v1[4];
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
  }
  v9 = v1[1];
  v8 = (AddrObjGoogle::protobuf::UnknownFieldSet *)(v1 + 1);
  *((_DWORD *)v8 + 9) = 0;
  if (v9)
    return (uint64_t *)AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v8);
  return this;
}

uint64_t *addr_obj::FingerprintProto::Clear(uint64_t *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  AddrObjGoogle::protobuf::UnknownFieldSet *v8;
  uint64_t v9;

  v1 = this;
  if (*((_BYTE *)this + 52))
  {
    if ((*((_BYTE *)this + 52) & 1) != 0)
    {
      v2 = (uint64_t *)this[2];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v2 != this)
      {
        v3 = v1[2];
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    v1[3] = 0;
    if ((*((_BYTE *)v1 + 52) & 4) != 0)
    {
      v4 = (uint64_t *)v1[4];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v4 != this)
      {
        v5 = v1[4];
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 52) & 8) != 0)
    {
      v6 = (uint64_t *)v1[5];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v6 != this)
      {
        v7 = v1[5];
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
  }
  v9 = v1[1];
  v8 = (AddrObjGoogle::protobuf::UnknownFieldSet *)(v1 + 1);
  *((_DWORD *)v8 + 11) = 0;
  if (v9)
    return (uint64_t *)AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v8);
  return this;
}

unint64_t GEORegionalResourceTileDataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORegionalResourceTileDataReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORegionalResourceTileDataReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORegionalResourceTileDataReadAllFrom_initialTag;
  Specified = GEORegionalResourceTileDataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEORegionalResourceTileDataCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_188657498(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOLogFromMM(int a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL4 v7;
  os_log_type_t v8;
  NSObject *v9;
  uint64_t *v10;
  uint64_t *v11;
  NSObject *v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  __int16 v16;
  uint64_t *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1 > 15)
  {
    if ((a1 - 16) >= 2)
      v8 = OS_LOG_TYPE_DEFAULT;
    else
      v8 = OS_LOG_TYPE_ERROR;
    v7 = (a1 - 16) < 2;
    goto LABEL_13;
  }
  if (a1)
  {
    if (a1 == 1)
    {
      v7 = 0;
      v8 = OS_LOG_TYPE_INFO;
      goto LABEL_13;
    }
    if (a1 != 2)
    {
      v8 = OS_LOG_TYPE_DEFAULT;
      v7 = 0;
      goto LABEL_13;
    }
  }
  if (!+[GEOAddressObject isLoggingDebug](GEOAddressObject, "isLoggingDebug"))
    return;
  v7 = 0;
  v8 = OS_LOG_TYPE_DEBUG;
LABEL_13:
  GEOFindOrCreateLog("com.apple.GeoServices", "GEOAddressObject");
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, v8))
  {
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    if (*((char *)a3 + 23) >= 0)
      v11 = a3;
    else
      v11 = (uint64_t *)*a3;
    v14 = 136380931;
    v15 = v10;
    v16 = 2081;
    v17 = v11;
    _os_log_impl(&dword_1885A9000, v9, v8, "%{private}s: %{private}s", (uint8_t *)&v14, 0x16u);
  }

  if (v7)
  {
    GEOFindOrCreateLog("com.apple.GeoServices", "GEOAddressObject");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, v8))
    {
      if (*((char *)a4 + 23) >= 0)
        v13 = a4;
      else
        v13 = (uint64_t *)*a4;
      v14 = 136380675;
      v15 = v13;
      _os_log_impl(&dword_1885A9000, v12, v8, "Base64 of AddressObject: %{private}s", (uint8_t *)&v14, 0xCu);
    }

  }
}

id GEOResourceManifestURLTokenQueryItems(void *a1)
{
  GEOResourceManifestConfiguration *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
    v1 = objc_alloc_init(GEOResourceManifestConfiguration);
  -[GEOResourceManifestConfiguration manifestDictionaryRepresentation](v1, "manifestDictionaryRepresentation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v2, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v20 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * i);
        v10 = (void *)MEMORY[0x1E0CB39D8];
        objc_msgSend(v4, "objectForKeyedSubscript:", v9, (_QWORD)v19);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "queryItemWithName:value:", v9, v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v3, "addObject:", v12);
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
    }
    while (v6);
  }

  objc_msgSend(v3, "sortUsingComparator:", &__block_literal_global_83);
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setObject:forKeyedSubscript:", v3, CFSTR("%{DEVICE_QUERY}"));
  v14 = (void *)MEMORY[0x1E0CB39D8];
  -[GEOResourceManifestConfiguration environment](v1, "environment");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "queryItemWithName:value:", CFSTR("environment"), v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    v23 = v16;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v23, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v17, CFSTR("%{ENV_QUERY}"));

  }
  return v13;
}

void sub_1886584C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_188658AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_18865922C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

uint64_t parseThrottlePolicy(NSDictionary *a1, NSString *a2, NSString *a3, NSString *a4, unint64_t *a5, double *a6)
{
  NSDictionary *v10;
  NSString *v11;
  NSString *v12;
  NSString *v13;
  NSDictionary *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  double *v25;
  NSString *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[3];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v10 = a1;
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = v10;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v27 = v11;
  v32[0] = v11;
  v32[1] = v12;
  v32[2] = v13;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v32, 3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = a6;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
  v17 = v14;
  if (v16)
  {
    v18 = *(_QWORD *)v29;
    v17 = v14;
    while (2)
    {
      v19 = 0;
      v20 = v17;
      do
      {
        if (*(_QWORD *)v29 != v18)
          objc_enumerationMutation(v15);
        objc_msgSend(v20, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * v19));
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v23 = 0;
          goto LABEL_14;
        }
        ++v19;
        v20 = v17;
      }
      while (v16 != v19);
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
      if (v16)
        continue;
      break;
    }
  }

  objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("ResetInterval"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("AllowedRequests"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    *a5 = objc_msgSend(v21, "integerValue");
    objc_msgSend(v15, "doubleValue");
    *(_QWORD *)v25 = v22;
    v23 = 1;
  }
  else
  {
    v23 = 0;
  }

LABEL_14:
  return v23;
}

void sub_1886595C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_188659718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id createThrottler(NSString *a1, NSString *a2, uint64_t a3, double a4)
{
  NSString *v7;
  NSString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v7 = a1;
  v8 = a2;
  objc_opt_class();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  readSavedState();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v9, "alloc");
  -[NSString stringByReplacingOccurrencesOfString:withString:](v7, "stringByReplacingOccurrencesOfString:withString:", CFSTR("/"), CFSTR("_"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKeyedSubscript:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)objc_msgSend(v11, "initWithKeyPath:requestCount:interval:savedState:", v8, a3, v13, a4);

  return v14;
}

void sub_188659950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_188659990()
{
  JUMPOUT(0x188659980);
}

void sub_188659A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

id readSavedState(void)
{
  void *v0;
  void *v1;
  double v2;
  double v3;
  double v4;
  void *v5;
  id v6;

  _getValue(GeoServicesConfig_ThrottlerState, (uint64_t)off_1EDF4CCE8, 1, 0, 0, 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("savedAtTime"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v1
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && (objc_msgSend(v1, "doubleValue"), v3 = v2, GEOGetMonotonicTime(), v3 > v4))
  {

    v0 = 0;
    _setValue(GeoServicesConfig_ThrottlerState, (uint64_t)off_1EDF4CCE8, 0, 0, 0);
  }
  if (v0)
    v5 = v0;
  else
    v5 = (void *)MEMORY[0x1E0C9AA70];
  v6 = v5;

  return v6;
}

void sub_188659B2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_188659D8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18865A3F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18865A868(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18865A950(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18865AAB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18865AB70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _setValue(int a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  id v9;
  uint64_t MetadataStruct;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(_QWORD, _QWORD);
  id v19;
  id v20;
  char isKindOfClass;
  NSObject *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  int v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  if (a1 && a2)
  {
    MetadataStruct = _getMetadataStruct(a1, a2);
    if (MetadataStruct)
    {
      v11 = MetadataStruct;
      v12 = *(id *)(MetadataStruct + 8);
      v13 = *(_QWORD *)(v11 + 24);
      if (*(_BYTE *)v11)
        v14 = *(_QWORD *)(v11 + 48);
      else
        v14 = 0;
      v17 = *(_QWORD *)(v11 + 16);
      v18 = (void (**)(_QWORD, _QWORD))MEMORY[0x18D765024](v14);
      v19 = v9;
      v9 = v19;
      if (!a4)
      {
        if (!v13)
        {
LABEL_77:
          v28 = 0;
LABEL_53:

          if (v28)
          {
            if (qword_1ECDBC300 != -1)
              dispatch_once(&qword_1ECDBC300, &__block_literal_global_126);
            if ((_MergedGlobals_266 & 1) == 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && v18)
            {
              ((void (**)(_QWORD, void *))v18)[2](v18, v28);
              v9 = (id)objc_claimAutoreleasedReturnValue();

            }
            else
            {
              v9 = v28;
            }
          }
          else
          {
            v9 = 0;
          }
          _GEOConfigProxy();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "configStoreForOptions:", v17);
          v30 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v30, "setConfigValue:forKey:options:synchronous:", v9, v12, v17, a5);
          if ((v17 & 6) == 0)
            goto LABEL_72;
          _GEOConfigProxy();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "configExpiryForOptions:", v17);
          v32 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v9)
          {
            objc_msgSend(v32, "setConfigKeyExpiry:date:osVersion:", v12, 0, 0);
LABEL_71:

LABEL_72:
            v16 = 1;
LABEL_73:

            goto LABEL_74;
          }
          if ((v17 & 2) != 0)
          {
            objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceNow:", 3600.0);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            if ((v17 & 4) != 0)
              goto LABEL_66;
          }
          else
          {
            v33 = 0;
            if ((v17 & 4) != 0)
            {
LABEL_66:
              +[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "buildVersion");
              v35 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_70:
              objc_msgSend(v32, "setConfigKeyExpiry:date:osVersion:", v12, v33, v35);

              goto LABEL_71;
            }
          }
          v35 = 0;
          goto LABEL_70;
        }
        if (!v19)
          goto LABEL_51;
LABEL_38:
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v24 = (id)objc_claimAutoreleasedReturnValue();

        if (v24 != v9)
        {
          switch(v13)
          {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 9:
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v25 = v9;
              else
                v25 = 0;
              v26 = v25;
              goto LABEL_52;
            case 8:
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_77;
              objc_msgSend(v9, "allObjects");
              v26 = (id)objc_claimAutoreleasedReturnValue();
              goto LABEL_52;
            case 10:
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                goto LABEL_51;
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_77;
              }
              v27 = (void *)MEMORY[0x1E0C99D68];
              objc_msgSend(v9, "doubleValue");
              objc_msgSend(v27, "dateWithTimeIntervalSinceReferenceDate:");
              v26 = (id)objc_claimAutoreleasedReturnValue();
              break;
            case 11:
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                goto LABEL_51;
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_77;
              v26 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedString:options:", v9, 0);
              break;
            default:
              goto LABEL_77;
          }
          goto LABEL_52;
        }
LABEL_51:
        v26 = v9;
LABEL_52:
        v28 = v26;
        goto LABEL_53;
      }
      if (v13)
      {
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v20 = (id)objc_claimAutoreleasedReturnValue();

        if (v20 == v9)
        {
LABEL_36:

          goto LABEL_37;
        }
        switch(v13)
        {
          case 1:
            if (!v9)
              goto LABEL_36;
            break;
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
            if (!v9)
              goto LABEL_36;
            break;
          case 7:
            if (!v9)
              goto LABEL_36;
            break;
          case 8:
            if (!v9)
              goto LABEL_36;
            break;
          case 9:
            if (!v9)
              goto LABEL_36;
            break;
          case 10:
            if (!v9)
              goto LABEL_36;
            break;
          case 11:
            if (!v9)
              goto LABEL_36;
            break;
          default:
            goto LABEL_21;
        }
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0)
        {
LABEL_37:
          v23 = v9;
          if (!v9)
            goto LABEL_51;
          goto LABEL_38;
        }
      }
      else
      {
LABEL_21:

      }
      j__GEOGetUserDefaultsLog();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v37 = 138543362;
        v38 = v12;
        _os_log_impl(&dword_1885A9000, v22, OS_LOG_TYPE_ERROR, "invalid type given for key %{public}@", (uint8_t *)&v37, 0xCu);
      }

      v16 = 0;
      goto LABEL_73;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      LOWORD(v37) = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: metadataStruct != ((void *)0)", (uint8_t *)&v37, 2u);
    }
  }
  else
  {
    j__GEOGetUserDefaultsLog();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v37) = 0;
      _os_log_impl(&dword_1885A9000, v15, OS_LOG_TYPE_ERROR, "tried to set invalid config key", (uint8_t *)&v37, 2u);
    }

  }
  v16 = 0;
LABEL_74:

  return v16;
}

void sub_18865B434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18865B524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18865B624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor(uint64_t a1)
{
  void *v2;

  std::unique_ptr<mgcl::iarray::Decoder>::reset[abi:ne180100]((mgcl::iarray::Decoder **)(a1 + 24), 0);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_18865B90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  uint64_t v18;

  MEMORY[0x18D76437C](v18, 0x1000C4052888210);
  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_18865BB18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18865BD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void *v24;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t GEOGloriaPopulateAvailableZoomRange(void *a1, unint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  int v6;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;
  NSObject *v23;
  const char *v24;
  uint8_t *v25;
  char v26;
  char v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  unint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  unint64_t v47;
  size_t v48;
  char *v49;
  char *v50;
  _BYTE *v51;
  _BYTE *v52;
  char v53;
  char *v54;
  _BYTE *v55;
  char v56;
  __int16 v58;
  __int16 v59;
  uint8_t buf[2];

  v3 = a1;
  v4 = (uint64_t)v3;
  if (v3)
    v5 = v3[2];
  else
    v5 = 0;
  std::vector<unsigned char>::reserve(a2, v5);
  if (!v4)
    goto LABEL_37;
  v6 = *(_DWORD *)(v4 + 32);
  if (!v6)
  {
    if (*(_QWORD *)(v4 + 16))
    {
      v26 = -[GEOGloriaTessellationOptions zoomLevelsAtIndex:](v4, 0);
      v27 = v26;
      v29 = (_BYTE *)a2[1];
      v28 = a2[2];
      if ((unint64_t)v29 >= v28)
      {
        v35 = *a2;
        v36 = &v29[-*a2];
        v37 = (unint64_t)(v36 + 1);
        if ((uint64_t)(v36 + 1) < 0)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v38 = v28 - v35;
        if (2 * v38 > v37)
          v37 = 2 * v38;
        if (v38 >= 0x3FFFFFFFFFFFFFFFLL)
          v39 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
          v40 = (unint64_t)operator new(v39);
        else
          v40 = 0;
        v54 = (char *)(v40 + v39);
        v36[v40] = v27;
        v30 = (uint64_t)&v36[v40 + 1];
        if (v29 == (_BYTE *)v35)
        {
          v40 += (unint64_t)v36;
        }
        else
        {
          v55 = &v29[~v35];
          do
          {
            v56 = *--v29;
            (v55--)[v40] = v56;
          }
          while (v29 != (_BYTE *)v35);
          v29 = (_BYTE *)*a2;
        }
        *a2 = v40;
        a2[1] = v30;
        a2[2] = (unint64_t)v54;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v29 = v26;
        v30 = (uint64_t)(v29 + 1);
      }
      a2[1] = v30;
      goto LABEL_80;
    }
LABEL_37:
    GEOGetGloriaUtilLog();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v24 = "Invalid tessellation options: SINGLE_ZOOM with no zoom_levels";
      v25 = buf;
      goto LABEL_39;
    }
    goto LABEL_40;
  }
  if (v6 != 1)
  {
    if (v6 == 2)
    {
      if (*(_QWORD *)(v4 + 16))
      {
        v7 = 0;
        do
        {
          v8 = -[GEOGloriaTessellationOptions zoomLevelsAtIndex:](v4, v7);
          v9 = v8;
          v11 = (_BYTE *)a2[1];
          v10 = a2[2];
          if ((unint64_t)v11 >= v10)
          {
            v13 = *a2;
            v14 = &v11[-*a2];
            v15 = (unint64_t)(v14 + 1);
            if ((uint64_t)(v14 + 1) < 0)
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v16 = v10 - v13;
            if (2 * v16 > v15)
              v15 = 2 * v16;
            if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
              v17 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
              v18 = (char *)operator new(v17);
            else
              v18 = 0;
            v19 = &v14[(_QWORD)v18];
            v20 = &v14[(_QWORD)v18];
            *v20 = v9;
            v12 = v20 + 1;
            if (v11 != (_BYTE *)v13)
            {
              v21 = &v11[~v13];
              do
              {
                v22 = *--v11;
                (v21--)[(_QWORD)v18] = v22;
              }
              while (v11 != (_BYTE *)v13);
              v11 = (_BYTE *)*a2;
              v19 = v18;
            }
            *a2 = (unint64_t)v19;
            a2[1] = (unint64_t)v12;
            a2[2] = (unint64_t)&v18[v17];
            if (v11)
              operator delete(v11);
          }
          else
          {
            *v11 = v8;
            v12 = v11 + 1;
          }
          a2[1] = (unint64_t)v12;
          ++v7;
        }
        while (v7 < *(_QWORD *)(v4 + 16));
      }
      goto LABEL_80;
    }
    goto LABEL_41;
  }
  if (*(_QWORD *)(v4 + 16) <= 1uLL)
  {
    GEOGetGloriaUtilLog();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v59 = 0;
      v24 = "Invalid tessellation options: RANGED_ZOOM with too few zoom_levels";
      v25 = (uint8_t *)&v59;
LABEL_39:
      _os_log_impl(&dword_1885A9000, v23, OS_LOG_TYPE_ERROR, v24, v25, 2u);
      goto LABEL_40;
    }
    goto LABEL_40;
  }
  v31 = -[GEOGloriaTessellationOptions zoomLevelsAtIndex:](v4, 0);
  v32 = -[GEOGloriaTessellationOptions zoomLevelsAtIndex:](v4, *(_QWORD *)(v4 + 16) - 1);
  v33 = v32;
  if (v32 < v31)
  {
    GEOGetGloriaUtilLog();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v58 = 0;
      v24 = "Invalid tessellation options: RANGED_ZOOM end zoom level is less than start zoom level";
      v25 = (uint8_t *)&v58;
      goto LABEL_39;
    }
LABEL_40:

LABEL_41:
    v34 = 0;
    goto LABEL_81;
  }
  if (v31 >= v32)
  {
LABEL_80:
    v34 = 1;
    goto LABEL_81;
  }
  v41 = (_BYTE *)a2[1];
  do
  {
    v42 = a2[2];
    if ((unint64_t)v41 >= v42)
    {
      v44 = *a2;
      v45 = &v41[-*a2];
      v46 = (unint64_t)(v45 + 1);
      if ((uint64_t)(v45 + 1) < 0)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v47 = v42 - v44;
      if (2 * v47 > v46)
        v46 = 2 * v47;
      if (v47 >= 0x3FFFFFFFFFFFFFFFLL)
        v48 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (v48)
        v49 = (char *)operator new(v48);
      else
        v49 = 0;
      v50 = &v45[(_QWORD)v49];
      v51 = &v45[(_QWORD)v49];
      *v51 = v31;
      v43 = v51 + 1;
      if (v41 != (_BYTE *)v44)
      {
        v52 = &v41[~v44];
        do
        {
          v53 = *--v41;
          (v52--)[(_QWORD)v49] = v53;
        }
        while (v41 != (_BYTE *)v44);
        v41 = (_BYTE *)*a2;
        v50 = v49;
      }
      *a2 = (unint64_t)v50;
      a2[1] = (unint64_t)v43;
      a2[2] = (unint64_t)&v49[v48];
      if (v41)
        operator delete(v41);
    }
    else
    {
      *v41 = v31;
      v43 = v41 + 1;
    }
    a2[1] = (unint64_t)v43;
    ++v31;
    v34 = 1;
    v41 = v43;
  }
  while (v31 != v33);
LABEL_81:

  return v34;
}

void sub_18865C23C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18865C608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  gloria::ManagedSlice::~ManagedSlice(&a16);
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

void sub_18865CA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18865CB58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18865CD24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18865D058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  if (a15 < 0)
    operator delete(__p);
  gloria::ManagedSlice::~ManagedSlice(&a16);

  _Unwind_Resume(a1);
}

void gloria::GloriaDB::Get(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string v7;
  char v8;
  _BYTE v9[4];
  int v10;
  const char *v11;
  uint64_t v12;

  v9[0] = 1;
  v10 = 0;
  v11 = "";
  v12 = 0;
  gloria::GloriaDB::Get(&v7, a1, a2, (uint64_t)v9);
  if (LODWORD(v7.__r_.__value_.__l.__data_))
    gloria::Status::Status(a4, (uint64_t)&v7);
  else
    (***(void (****)(_QWORD, _BYTE *, uint64_t))(a1 + 192))(*(_QWORD *)(a1 + 192), v9, a3);
  if (v8 < 0)
    operator delete((void *)v7.__r_.__value_.__l.__size_);
}

void sub_18865D14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void gloria::GloriaDB::Get(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  gloria::Shard *v12;
  uint64_t v13;
  char v14[4];
  int v15;
  const char *v16;
  uint64_t v17;
  _BYTE v18[8];
  void *__p;
  char v20;
  uint64_t v21;
  void *__dst[2];
  char v23;

  std::string::basic_string[abi:ne180100](__dst, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  v8 = (****(uint64_t (*****)(_QWORD, void **))(a2 + 184))(**(_QWORD **)(a2 + 184), __dst);
  v9 = v8;
  v10 = *(unsigned int *)(a2 + 152);
  if (v8 >= 0)
    v11 = v8;
  else
    v11 = -v8;
  v21 = 0;
  gloria::ShardPool::Get((gloria::ShardPool *)v18, (unsigned int *)(a2 + 136), (const gloria::Shard **)(v11 % v10), &v21);
  if (v20 < 0)
    operator delete(__p);
  v12 = (gloria::Shard *)v21;
  if (*(char *)(v21 + 127) < 0)
  {
    if (!*(_QWORD *)(v21 + 112))
    {
LABEL_11:
      gloria::ShardManager::DoGet(a2 + 72, (uint64_t)v12, a3, a4, a1);
      goto LABEL_13;
    }
  }
  else if (!*(_BYTE *)(v21 + 127))
  {
    goto LABEL_11;
  }
  v13 = (*(uint64_t (**)(_QWORD, void **, uint64_t))(***(_QWORD ***)(a2 + 184) + 8))(**(_QWORD **)(a2 + 184), __dst, v9);
  if (gloria::Shard::BloomFilterHas(v12, v9, v13))
    goto LABEL_11;
  v14[0] = 1;
  v15 = 0;
  v16 = "key was not found";
  v17 = 17;
  gloria::Status::Status((uint64_t)a1, 1, (uint64_t)v14);
LABEL_13:
  if (v23 < 0)
    operator delete(__dst[0]);
}

void sub_18865D2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gloria::ShardPool::Get(gloria::ShardPool *this, unsigned int *a2, const gloria::Shard **a3, _QWORD *a4)
{
  int v4;
  uint64_t *v7;
  const unsigned int *v8;
  uint64_t *v10;
  int v11;
  uint64_t **v13;
  int v14;
  uint64_t **v15;
  char *v16;
  char v17[4];
  int v18;
  char *v19;
  size_t v20;
  char __str[8];
  const char *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = (int)a3;
  v24 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a2 + 2) <= (unint64_t)a3
    || (v8 = a2 + 2, (v7 = (uint64_t *)*((_QWORD *)a2 + 1)) == 0))
  {
LABEL_8:
    snprintf(__str, 0x64uLL, "shard_ id %d not found ", (_DWORD)a3);
    v17[0] = 1;
    v18 = 0;
    v19 = __str;
    v20 = strlen(__str);
    return gloria::Status::Status((uint64_t)this, 1, (uint64_t)v17);
  }
  v10 = (uint64_t *)*((_QWORD *)a2 + 1);
  while (1)
  {
    v11 = *((_DWORD *)v10 + 8);
    if (v11 <= (int)a3)
      break;
LABEL_7:
    v10 = (uint64_t *)*v10;
    if (!v10)
      goto LABEL_8;
  }
  if (v11 < (int)a3)
  {
    ++v10;
    goto LABEL_7;
  }
  do
  {
    while (1)
    {
      v13 = (uint64_t **)v7;
      v14 = *((_DWORD *)v7 + 8);
      if (v14 <= (int)a3)
        break;
      v7 = *v13;
      if (!*v13)
      {
        v15 = v13;
        goto LABEL_15;
      }
    }
    if (v14 >= (int)a3)
      goto LABEL_16;
    v7 = v13[1];
  }
  while (v7);
  v15 = v13 + 1;
LABEL_15:
  v16 = (char *)operator new(0xD8uLL);
  v22 = (const char *)v8;
  *((_DWORD *)v16 + 8) = v4;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *((_DWORD *)v16 + 18) = -1;
  *((_OWORD *)v16 + 5) = 0u;
  *((_OWORD *)v16 + 6) = 0u;
  *((_OWORD *)v16 + 7) = 0u;
  *((_OWORD *)v16 + 8) = 0u;
  *((_OWORD *)v16 + 9) = 0u;
  *((_OWORD *)v16 + 10) = 0u;
  *((_OWORD *)v16 + 11) = 0u;
  *((_OWORD *)v16 + 12) = 0u;
  *((_QWORD *)v16 + 26) = 0;
  LOBYTE(v23) = 1;
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at((uint64_t **)a2, (uint64_t)v13, v15, (uint64_t *)v16);
  *(_QWORD *)__str = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<int,gloria::Shard>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,gloria::Shard>,void *>>>>::reset[abi:ne180100]((uint64_t)__str, 0);
  v13 = (uint64_t **)v16;
LABEL_16:
  *a4 = v13 + 5;
  __str[0] = 1;
  *(_DWORD *)&__str[4] = 0;
  v22 = "";
  v23 = 0;
  return gloria::Status::Status((uint64_t)this, 0, (uint64_t)__str);
}

unint64_t gloria::XXHashFn::Hash(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3;
  unsigned int *v4;
  unint64_t v5;

  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = (unsigned int *)a2;
  else
    v4 = *(unsigned int **)a2;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  return XXH64_endian_align(v4, v5, a3);
}

uint64_t gloria::XXHashFn::Hash(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 8))(a1, a2, a1[1]);
}

void gloria::ShardManager::DoGet(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  _BYTE v8[8];
  void *__p;
  char v10;
  uint64_t v11;

  v11 = 0;
  gloria::ShardManager::DoContains(a1, a2, a3, &v11, (uint64_t)a5);
  if (!LODWORD(a5->__r_.__value_.__l.__data_))
  {
    gloria::RecordReader::ReadPayloadAt(*(void (****)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))(a2 + 8), v11, a4, (uint64_t)v8);
    gloria::Status::operator=(a5, (uint64_t)v8);
    if (v10 < 0)
      operator delete(__p);
  }
}

void sub_18865D548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v16 + 31) < 0)
    operator delete(*(void **)(v16 + 8));
  _Unwind_Resume(exception_object);
}

void gloria::RecordReader::ReadPayloadAt(void (***a1)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD v9[3];
  char v10;
  std::string v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  void *__p;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  LODWORD(v11.__r_.__value_.__l.__data_) = 10;
  v12 = 0;
  *(_OWORD *)&v11.__r_.__value_.__r.__words[1] = 0uLL;
  LOBYTE(v19) = 1;
  HIDWORD(v19) = 0;
  v20 = (unsigned int *)&str_5;
  v21 = 0;
  v13[0] = a2;
  v14 = 4;
  (**a1)(&v15, a1, v13, &v14, &v19);
  if (v18 < 0)
    operator delete(__p);
  v8 = *v20;
  LOBYTE(v13[0]) = 1;
  HIDWORD(v13[0]) = 0;
  v13[1] = &str_5;
  v13[2] = 0;
  gloria::Status::Status((uint64_t)v9, 0, (uint64_t)v13);
  gloria::Status::operator=(&v11, (uint64_t)v9);
  if (v10 < 0)
    operator delete((void *)v9[1]);
  if (LODWORD(v11.__r_.__value_.__l.__data_))
    goto LABEL_9;
  v9[0] = a2 + 4;
  v19 = v8;
  (**a1)(&v15, a1, v9, &v19, a3);
  gloria::Status::operator=(&v11, (uint64_t)&v15);
  if (v18 < 0)
    operator delete(__p);
  if (LODWORD(v11.__r_.__value_.__l.__data_))
  {
LABEL_9:
    gloria::Status::Status(a4, (uint64_t)&v11);
  }
  else
  {
    LOBYTE(v15) = 1;
    HIDWORD(v15) = 0;
    __p = &str_5;
    v17 = 0;
    gloria::Status::Status(a4, 0, (uint64_t)&v15);
  }
  if (SHIBYTE(v12) < 0)
    operator delete((void *)v11.__r_.__value_.__l.__size_);
}

void sub_18865D6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void gloria::ShardManager::DoContains(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  int v11;
  void (***v12)(void **__return_ptr, _QWORD, uint64_t *, uint64_t *, char *);
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string *v23;
  int v24;
  std::string v25;
  std::string v26;
  std::string v27;
  int v28;
  void *__p;
  char v30;

  gloria::ShardManager::CheckShardInitialization(a2, (uint64_t)&v28);
  if (v28)
  {
    gloria::Status::Status(a5, (uint64_t)&v28);
  }
  else
  {
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
    if (*(_QWORD *)(a3 + 16) == v10)
    {
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E1BF7220;
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
      v12 = *(void (****)(void **__return_ptr, _QWORD, uint64_t *, uint64_t *, char *))a2;
      v13 = *(_QWORD *)(*(_QWORD *)a2 + 24) - *(_QWORD *)(*(_QWORD *)a2 + 16);
      v24 = *(_QWORD *)(a1 + 48) + v11;
      v26.__r_.__value_.__r.__words[0] = 0;
      v25.__r_.__value_.__r.__words[0] = v13 / v24;
      gloria::BinarySearchStrategy::search(v12, a3, &v24, (uint64_t *)&v26, (uint64_t *)&v25, a4, a5);
    }
    else
    {
      memset(&v27, 0, sizeof(v27));
      v14 = std::string::append(&v27, "the size_ of the key provided is not matching the expected size_");
      v15 = std::string::append(v14, "expected: ");
      std::to_string(&v26, v10);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v26;
      else
        v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      else
        size = v26.__r_.__value_.__l.__size_;
      v18 = std::string::append(v15, (const std::string::value_type *)v16, size);
      v19 = std::string::append(v18, " but found:");
      std::to_string(&v25, *(_QWORD *)(a3 + 16));
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v25;
      else
        v20 = (std::string *)v25.__r_.__value_.__r.__words[0];
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      else
        v21 = v25.__r_.__value_.__l.__size_;
      std::string::append(v19, (const std::string::value_type *)v20, v21);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v26.__r_.__value_.__s.__data_[0] = 1;
      HIDWORD(v26.__r_.__value_.__r.__words[0]) = 0;
      v22 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      v23 = &v27;
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        v22 = v27.__r_.__value_.__l.__size_;
        v23 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      v26.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
      v26.__r_.__value_.__r.__words[2] = v22;
      gloria::Status::Status(a5, 3, (uint64_t)&v26);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
  if (v30 < 0)
    operator delete(__p);
}

void sub_18865D950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a27 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

uint64_t geo::GloriaDB::QuadKey::Size(geo::GloriaDB::QuadKey *this)
{
  return 8;
}

uint64_t gloria::ShardManager::CheckShardInitialization@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v5;
  char v7[4];
  int v8;
  const char *v9;
  uint64_t v10;

  if (*(_OWORD *)a1 != 0)
    goto LABEL_10;
  v3 = *(unsigned __int8 *)(a1 + 127);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 112);
  if (!v3 || *(_QWORD *)(a1 + 16) == 0)
  {
    v7[0] = 1;
    v8 = 0;
    v9 = "the shard_ was not initialized and cannot be queried: the index was not loaded previously or may have failed loading it";
    v10 = 119;
    v5 = 4;
  }
  else
  {
LABEL_10:
    v7[0] = 1;
    v8 = 0;
    v9 = (const char *)&str_5;
    v10 = 0;
    v5 = 0;
  }
  return gloria::Status::Status(a2, v5, (uint64_t)v7);
}

unint64_t XXH64_endian_align(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  BOOL v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;

  v3 = (unint64_t)a1 + a2;
  if (a2 < 0x20)
  {
    v13 = a3 + 0x27D4EB2F165667C5;
    v7 = a1;
  }
  else
  {
    v4 = a3 + 0x60EA27EEADC0B5D6;
    v5 = a3 - 0x3D4D51C2D82B14B1;
    v6 = a3 + 0x61C8864E7A143579;
    v7 = a1;
    do
    {
      v8 = __ROR8__(v4 - 0x3D4D51C2D82B14B1 * *(_QWORD *)v7, 33);
      v4 = 0x9E3779B185EBCA87 * v8;
      v9 = __ROR8__(v5 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v7 + 1), 33);
      v5 = 0x9E3779B185EBCA87 * v9;
      v10 = *((_QWORD *)v7 + 3);
      v11 = __ROR8__(a3 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v7 + 2), 33);
      a3 = 0x9E3779B185EBCA87 * v11;
      v7 += 8;
      v12 = __ROR8__(v6 - 0x3D4D51C2D82B14B1 * v10, 33);
      v6 = 0x9E3779B185EBCA87 * v12;
    }
    while ((unint64_t)v7 <= v3 - 32);
    v13 = 0x85EBCA77C2B2AE63
        - 0x61C8864E7A143579
        * ((0x85EBCA77C2B2AE63
          - 0x61C8864E7A143579
          * ((0x85EBCA77C2B2AE63
            - 0x61C8864E7A143579
            * ((0x85EBCA77C2B2AE63
              - 0x61C8864E7A143579
              * ((((0x3C6EF3630BD7950ELL * v8) | (v4 >> 63))
                + 0x1BBCD8C2F5E54380 * v9
                + (v5 >> 57)
                + 0x779B185EBCA87000 * v11
                + (a3 >> 52)
                - 0x1939E850D5E40000 * v12
                + (v6 >> 46)) ^ (0x9E3779B185EBCA87
                               * ((0x87BCB65480000000 * v8) | ((0xDEF35B010F796CA9 * v8) >> 33))))) ^ (0x9E3779B185EBCA87 * ((0x87BCB65480000000 * v9) | ((0xDEF35B010F796CA9 * v9) >> 33))))) ^ (0x9E3779B185EBCA87 * ((0x87BCB65480000000 * v11) | ((0xDEF35B010F796CA9 * v11) >> 33))))) ^ (0x9E3779B185EBCA87 * ((0x87BCB65480000000 * v12) | ((0xDEF35B010F796CA9 * v12) >> 33))));
  }
  v14 = v13 + a2;
  if ((unint64_t)(v7 + 2) <= v3)
  {
    do
    {
      v15 = v7 + 2;
      v14 = 0x85EBCA77C2B2AE63
          - 0x61C8864E7A143579
          * __ROR8__((0x9E3779B185EBCA87* ((0x93EA75A780000000 * *(_QWORD *)v7) | ((0xC2B2AE3D27D4EB4FLL * *(_QWORD *)v7) >> 33))) ^ v14, 37);
      v16 = (unint64_t)(v7 + 4) > v3;
      v7 += 2;
    }
    while (!v16);
  }
  else
  {
    v15 = v7;
  }
  if ((unint64_t)(v15 + 1) <= v3)
    v14 = 0x165667B19E3779F9 - 0x3D4D51C2D82B14B1 * __ROR8__((0x9E3779B185EBCA87 * *v15++) ^ v14, 41);
  if ((unint64_t)v15 < v3)
  {
    v17 = (char *)a1 + a2 - (char *)v15;
    do
    {
      v18 = *(unsigned __int8 *)v15;
      v15 = (unsigned int *)((char *)v15 + 1);
      v14 = 0x9E3779B185EBCA87 * __ROR8__((0x27D4EB2F165667C5 * v18) ^ v14, 53);
      --v17;
    }
    while (v17);
  }
  v19 = 0x165667B19E3779F9
      * ((0xC2B2AE3D27D4EB4FLL * (v14 ^ (v14 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (v14 ^ (v14 >> 33))) >> 29));
  return v19 ^ HIDWORD(v19);
}

void gloria::ManagedSlice::~ManagedSlice(void **this)
{
  gloria::ManagedSlice::Clean((uint64_t)this);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

uint64_t gloria::ManagedSlice::Clean(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  *(_QWORD *)(this + 8) = "";
  *(_QWORD *)(this + 16) = 0;
  if (*(_BYTE *)(this + 56))
  {
    v2 = *(_QWORD *)(this + 48);
    if (v2)
    {
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      this = MEMORY[0x18D76437C](v2, 0x1012C40EC159624);
    }
    *(_QWORD *)(v1 + 48) = 0;
  }
  if (*(_BYTE *)(v1 + 57))
  {
    if (*(char *)(v1 + 47) < 0)
    {
      **(_BYTE **)(v1 + 24) = 0;
      *(_QWORD *)(v1 + 32) = 0;
    }
    else
    {
      *(_BYTE *)(v1 + 24) = 0;
      *(_BYTE *)(v1 + 47) = 0;
    }
  }
  *(_WORD *)(v1 + 56) = 0;
  return this;
}

BOOL _isAncestor(gloria::TileId *a1, unsigned __int8 a2, unint64_t a3)
{
  int v3;
  int v4;
  unint64_t v5;
  _BOOL8 result;
  uint8_t v7[16];

  v3 = __clz(a3);
  v4 = (int)((63 - v3 + (((63 - v3) & 0x80u) >> 7)) << 24) >> 25;
  if (v4 <= a2)
  {
    result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT);
    if ((_DWORD)result)
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: root.zoom() < tileID.zoom()", v7, 2u);
      return 0;
    }
  }
  else
  {
    v5 = (a3 - gloria::LEADING_BITS_VALUE_LUT[v4]) >> (2 * (v4 - a2));
    if (!a2)
      v5 = 0;
    return v5 == (_QWORD)a1;
  }
  return result;
}

uint64_t gloria::NoopDecompressor::decompress@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  char v4[4];
  int v5;
  const char *v6;
  uint64_t v7;

  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  v4[0] = 1;
  v5 = 0;
  v6 = "";
  v7 = 0;
  return gloria::Status::Status(a3, 0, (uint64_t)v4);
}

void gloria::Status::ToString(gloria::Status *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  char v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  void *__p[2];
  std::string::size_type v10;
  char __str[30];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  __p[0] = 0;
  __p[1] = 0;
  v10 = 0;
  v4 = *(int *)this;
  if (v4 < 0xF && ((0x7DFFu >> v4) & 1) != 0)
  {
    v5 = off_1E1BFF050[v4];
  }
  else
  {
    v5 = __str;
    snprintf(__str, 0x1EuLL, "Unknown code(%d): ", *(_DWORD *)this);
  }
  MEMORY[0x18D7640AC](__p, v5);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v10;
  }
  v6 = *((_BYTE *)this + 31);
  if (v6 < 0)
  {
    if (!*((_QWORD *)this + 2))
      goto LABEL_19;
  }
  else if (!*((_BYTE *)this + 31))
  {
    goto LABEL_19;
  }
  if (v6 >= 0)
    v7 = (char *)this + 8;
  else
    v7 = (const std::string::value_type *)*((_QWORD *)this + 1);
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)this + 31);
  else
    v8 = *((_QWORD *)this + 2);
  std::string::append(a2, v7, v8);
LABEL_19:
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_18865E02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gloria::Status::Status(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 10;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return a1;
}

void sub_18865E0B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void GEOGloriaPopulateQuadKeysWithinRadiusFromCoordinate(int a1, uint64_t **a2, double a3, double a4, double a5, uint64_t a6, const unsigned __int8 *a7)
{
  BOOL v7;
  char v10;
  uint64_t v12;
  uint64_t v13;
  long double v14;
  _QWORD **v15;
  _QWORD *v16;
  _QWORD **v17;
  BOOL v18;
  _QWORD v19[2];
  _BYTE v20[9];
  double v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD *v24[2];

  *(double *)&v20[1] = a3;
  v21 = a4;
  v20[0] = a1;
  v7 = a5 >= 0.0 && (a1 - 31) >= 0xFFFFFFE2;
  if (v7 && a4 >= -180.0 && a4 <= 180.0 && a3 >= -90.0 && a3 <= 90.0)
  {
    v10 = a1;
    gloria::TileId::FromLatLng((gloria::TileId *)&v20[1], &v21, (const double *)v20, a7);
    v19[0] = v12;
    v19[1] = v13;
    v14 = cos(a3 * 0.0174532925);
    gloria::TileId::Neighbors((gloria::TileId *)v19, vcvtpd_u64_f64(a5 / (v14 * (40075016.7 / (double)(1 << v10)))), (uint64_t)&v23);
    v15 = v23;
    if (v23 != v24)
    {
      do
      {
        v22 = gloria::LEADING_BITS_VALUE_LUT[*((unsigned __int8 *)v15 + 40)] | (unint64_t)v15[4];
        std::__tree<AddrObjGoogle::protobuf::Descriptor const*>::__emplace_unique_key_args<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Descriptor const*>(a2, &v22, (uint64_t *)&v22);
        v16 = v15[1];
        if (v16)
        {
          do
          {
            v17 = (_QWORD **)v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD **)v15[2];
            v18 = *v17 == v15;
            v15 = v17;
          }
          while (!v18);
        }
        v15 = v17;
      }
      while (v17 != v24);
    }
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&v23, v24[0]);
  }
}

void sub_18865E24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<AddrObjGoogle::protobuf::Descriptor const*>::__emplace_unique_key_args<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Descriptor const*>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

double gloria::TileId::FromLatLng(gloria::TileId *this, double *a2, const double *a3, const unsigned __int8 *a4)
{
  int8x16_t v5;

  gloria::TileCoordinate::FromLatLng(this, a2, a3, &v5);
  return gloria::MortonUtils::XYToQuadId((gloria::MortonUtils *)v5.i64[0], v5.i64[1]);
}

int8x16_t gloria::TileCoordinate::FromLatLng@<Q0>(gloria::TileCoordinate *this@<X0>, double *a2@<X1>, const double *a3@<X2>, int8x16_t *a4@<X8>)
{
  double v7;
  double v8;
  double v9;
  double v10;
  long double v11;
  long double v12;
  __int8 v13;
  unint64_t v14;
  float64x2_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t result;
  float64_t v19;

  v7 = fmax(*a2, -180.0);
  v8 = fmax(*(double *)this, -85.0511288);
  if (v7 >= 180.0)
    v9 = 1.0;
  else
    v9 = (v7 + 180.0) / 360.0;
  v19 = v9;
  v10 = v8 * 3.14159265 / 180.0;
  if (v8 >= 85.0511288)
    v10 = 1.48442223;
  v11 = sin(v10);
  v12 = log((v11 + 1.0) / (1.0 - v11));
  v13 = *(_BYTE *)a3;
  v14 = 1 << *(_BYTE *)a3;
  v15.f64[0] = v19;
  v15.f64[1] = v12 / -12.5663706 + 0.5;
  v16 = (int8x16_t)vcvtq_u64_f64(vrndmq_f64(vmulq_n_f64(v15, (double)v14)));
  v17 = (int8x16_t)vdupq_n_s64(v14 - 1);
  result = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v16, (uint64x2_t)v17), v17, v16);
  *a4 = result;
  a4[1].i8[0] = v13;
  return result;
}

void gloria::TileId::Neighbors(gloria::TileId *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  gloria::MortonUtils *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  int8x16_t v20;

  gloria::TileId::ToXYZ(this, &v20);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v6 = ldexp(1.0, *((unsigned __int8 *)this + 8));
  v7 = v20.i64[0] - a2;
  v8 = v20.i64[0] + a2;
  if (v7 <= v8)
  {
    v9 = (uint64_t)v6;
    v10 = a2;
    v11 = (v20.i64[1] - a2) & ~((v20.i64[1] - a2) >> 63);
    v12 = v20.i64[1] + v10;
    if ((uint64_t)v6 - 1 >= v12)
      v13 = v12;
    else
      v13 = (uint64_t)v6 - 1;
    do
    {
      v14 = v11;
      if (v11 <= v13)
      {
        do
        {
          v15 = (gloria::MortonUtils *)v7;
          if (v7 < 0)
            v15 = (gloria::MortonUtils *)(v7 % v9 + v9);
          v16 = *((unsigned __int8 *)this + 8);
          gloria::MortonUtils::XYToQuadId(v15, v14 % v9);
          *(_QWORD *)&v19 = v17;
          *((_QWORD *)&v19 + 1) = v16;
          std::__tree<gloria::TileId>::__emplace_unique_key_args<gloria::TileId,gloria::TileId const&>((uint64_t **)a3, (unint64_t *)&v19, &v19);
          ++v14;
        }
        while (v13 + 1 != v14);
      }
    }
    while (v7++ != v8);
  }
}

void sub_18865E55C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

double gloria::MortonUtils::XYToQuadId(gloria::MortonUtils *this, uint64_t a2)
{
  int64x2_t v2;
  int8x16_t v3;
  int8x16_t v4;
  int64x2_t v5;
  unsigned __int128 v6;
  unsigned __int128 v7;
  int8x16_t v8;
  int8x16_t v9;
  int64x2_t v10;
  double result;

  v2.i64[0] = a2;
  v2.i64[1] = (uint64_t)this;
  v3.i64[0] = 0xFFFFFFFFLL;
  v3.i64[1] = 0xFFFFFFFFLL;
  v4 = vorrq_s8((int8x16_t)vshlq_n_s64(v2, 0x10uLL), vandq_s8((int8x16_t)v2, v3));
  v3.i64[0] = 0xFFFF0000FFFFLL;
  v3.i64[1] = 0xFFFF0000FFFFLL;
  v5 = (int64x2_t)vandq_s8(v4, v3);
  v6 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v5, 8uLL), (int8x16_t)v5) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  v7 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v6, 4uLL), (int8x16_t)v6) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
  v3.i64[0] = 0x3333333333333333;
  v3.i64[1] = 0x3333333333333333;
  v8 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v7, 2uLL), (int8x16_t)v7), v3);
  v9 = (int8x16_t)vshlq_u64((uint64x2_t)v8, (uint64x2_t)xmmword_189CBC410);
  v8.i64[0] *= 2;
  v10 = (int64x2_t)vandq_s8(vorrq_s8(v9, v8), (int8x16_t)xmmword_189CBC420);
  *(_QWORD *)&result = vorrq_s8((int8x16_t)v10, (int8x16_t)vdupq_laneq_s64(v10, 1)).u64[0];
  return result;
}

uint64_t **std::__tree<gloria::TileId>::__emplace_unique_key_args<gloria::TileId,gloria::TileId const&>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_18865EA24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEORequestResponseLogResponse(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;
  NSObject *v8;
  _QWORD block[4];
  id v10;
  NSObject *v11;
  id v12;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if ((GEOConfigGetBOOL(GeoServicesConfig_MapsRequestResponseLoggingPersisted, (uint64_t)off_1EDF4D208) & 1) != 0
    || os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    _GEORequestResponseLogQueue();
    v8 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___GEORequestResponseLogResponse_block_invoke;
    block[3] = &unk_1E1C01790;
    v10 = v7;
    v11 = v5;
    v12 = v6;
    dispatch_async(v8, block);

  }
}

void sub_18866009C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188660184(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18866026C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188660564(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188660AE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886611BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 160));
  _Unwind_Resume(a1);
}

id GEOGetServiceRequesterLog()
{
  if (qword_1ECDBCB28 != -1)
    dispatch_once(&qword_1ECDBCB28, &__block_literal_global_144);
  return (id)_MergedGlobals_327;
}

void sub_188661FC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t GEOThrottleKeyMakeFromRequestKind(unint64_t a1)
{
  uint64_t v1;

  v1 = 0;
  if ((int)a1 > 1791)
  {
    if ((a1 - 2816) <= 0x29 && ((1 << a1) & 0x3F700000003) != 0 || (_DWORD)a1 == 2560)
      return HIDWORD(a1) | a1 | 0x20000;
    if ((_DWORD)a1 != 1792)
      return v1;
    goto LABEL_14;
  }
  if ((int)a1 <= 671)
  {
    if ((a1 - 1) >= 6 && (_DWORD)a1 != 512)
      return v1;
    return HIDWORD(a1) | a1 | 0x20000;
  }
  if ((a1 - 672) < 2)
    return HIDWORD(a1) | a1 | 0x20000;
  if ((_DWORD)a1 == 768 || (_DWORD)a1 == 1280)
  {
LABEL_14:
    if (HIDWORD(a1) == 26)
      return 133927;
    return HIDWORD(a1) | a1 | 0x20000;
  }
  return v1;
}

id GEOURLLogFacility(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v3 = 0u;
  v4 = 0u;
  v2 = 0u;
  _recordForType(a1, (uint64_t)&v2);
  return *((id *)&v3 + 1);
}

void sub_18866248C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t MurmurHash3_x64_128(uint64_t result, int a2, unsigned int a3, unint64_t *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v4 = a3;
  if (a2 < 16)
  {
    v7 = a3;
  }
  else
  {
    v5 = (_QWORD *)(result + 8);
    v6 = (a2 / 16);
    v7 = v4;
    do
    {
      v7 = 5
         * (__ROR8__((0x4CF5AD432745937FLL * ((0x88A129EA80000000 * *(v5 - 1)) | ((0x87C37B91114253D5 * *(v5 - 1)) >> 33))) ^ v7, 37)+ v4)+ 1390208809;
      v4 = 5
         * (v7
          + __ROR8__((0x87C37B91114253D5* ((0x4E8B26FE00000000 * *v5) | ((unint64_t)(0x4CF5AD432745937FLL * *v5) >> 31))) ^ v4, 33))+ 944331445;
      v5 += 2;
      --v6;
    }
    while (v6);
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = (unsigned __int8 *)(result + 16 * (a2 / 16));
  switch(a2 & 0xF)
  {
    case 1:
      goto LABEL_21;
    case 2:
      goto LABEL_20;
    case 3:
      goto LABEL_19;
    case 4:
      goto LABEL_18;
    case 5:
      goto LABEL_17;
    case 6:
      goto LABEL_16;
    case 7:
      goto LABEL_15;
    case 8:
      goto LABEL_14;
    case 9:
      goto LABEL_13;
    case 0xA:
      goto LABEL_12;
    case 0xB:
      goto LABEL_11;
    case 0xC:
      goto LABEL_10;
    case 0xD:
      goto LABEL_9;
    case 0xE:
      goto LABEL_8;
    case 0xF:
      v8 = (unint64_t)v21[14] << 48;
LABEL_8:
      v9 = v8 | ((unint64_t)v21[13] << 40);
LABEL_9:
      v10 = v9 ^ ((unint64_t)v21[12] << 32);
LABEL_10:
      v11 = v10 ^ ((unint64_t)v21[11] << 24);
LABEL_11:
      v12 = v11 ^ ((unint64_t)v21[10] << 16);
LABEL_12:
      v13 = v12 ^ ((unint64_t)v21[9] << 8);
LABEL_13:
      v4 ^= 0x87C37B91114253D5
          * ((0x4E8B26FE00000000 * (v13 ^ v21[8])) | ((0x4CF5AD432745937FLL * (v13 ^ v21[8])) >> 31));
LABEL_14:
      v14 = (unint64_t)v21[7] << 56;
LABEL_15:
      v15 = v14 | ((unint64_t)v21[6] << 48);
LABEL_16:
      v16 = v15 ^ ((unint64_t)v21[5] << 40);
LABEL_17:
      v17 = v16 ^ ((unint64_t)v21[4] << 32);
LABEL_18:
      v18 = v17 ^ ((unint64_t)v21[3] << 24);
LABEL_19:
      v19 = v18 ^ ((unint64_t)v21[2] << 16);
LABEL_20:
      v20 = v19 ^ ((unint64_t)v21[1] << 8);
LABEL_21:
      v7 ^= 0x4CF5AD432745937FLL
          * ((0x88A129EA80000000 * (v20 ^ *v21)) | ((0x87C37B91114253D5 * (v20 ^ *v21)) >> 33));
      break;
    default:
      break;
  }
  v22 = v4 ^ a2;
  v23 = v22 + (v7 ^ a2);
  v24 = v23 + v22;
  v25 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v23 ^ (v23 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v23 ^ (v23 >> 33))) >> 33));
  v26 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v24 ^ (v24 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v24 ^ (v24 >> 33))) >> 33));
  v27 = v26 ^ (v26 >> 33);
  v28 = v27 + (v25 ^ (v25 >> 33));
  *a4 = v28;
  a4[1] = v28 + v27;
  return result;
}

void sub_188662E10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAddressReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOAddressReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOAddressReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOAddressReadAllFrom_initialTag;
  Specified = GEOAddressReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188662F98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAddressReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  void *v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  GEOStructuredAddress *v45;
  void *v46;
  id v47;
  void *v48;
  int v49;
  char v50;
  int v51;
  int v52;
  char v53;
  void *v54;
  int v56;
  int *v57;
  char v58;
  char v59;
  char v60;
  BOOL v61;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 != 0;
        v15 = v14 & ~(_BYTE)v10 | v7;
        v16 = v14 | v10;
        v58 = v15;
        v59 = v16 | v15;
        if (((v16 | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v60 = (v17 == 0) | v16;
        v61 = v16;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_74;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_74:
      v56 = 1;
      goto LABEL_75;
    }
    v31 = v23 >> 3;
    v32 = v61;
    if ((v60 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 == 16)
    {
      if ((v8 & 1) != 0)
      {
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_BYTE *)(a1 + 56) |= 1u;
        while (1)
        {
          v41 = *v18;
          v42 = *(_QWORD *)(v3 + v41);
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)(v3 + *v6))
            break;
          v44 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v42);
          *(_QWORD *)(v3 + v41) = v43;
          v40 |= (unint64_t)(v44 & 0x7F) << v38;
          if ((v44 & 0x80) == 0)
            goto LABEL_67;
          v38 += 7;
          v28 = v39++ >= 9;
          if (v28)
          {
            LODWORD(v40) = 0;
            goto LABEL_69;
          }
        }
        *(_BYTE *)(v3 + *v19) = 1;
LABEL_67:
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v40) = 0;
LABEL_69:
        *(_DWORD *)(a1 + 52) = v40;
        goto LABEL_73;
      }
      goto LABEL_64;
    }
    if ((_DWORD)v31 == 15)
      break;
    if ((_DWORD)v31 == 11)
    {
      if (v32 && (*(_BYTE *)(a1 + 56) & 4) == 0)
      {
        PBReaderReadString();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        if (v37)
          -[GEOAddress _addNoFlagsFormattedAddressLine:](a1, v37);

        goto LABEL_72;
      }
    }
    else if ((v58 & 1) != 0 && (*(_BYTE *)(a1 + 56) & 2) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v47 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v48 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v47;

      }
      v49 = PBUnknownFieldAdd();
      v19 = (int *)MEMORY[0x1E0D82BC8];
      if (!v49)
      {
        v56 = 0;
        v57 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
        goto LABEL_77;
      }
      goto LABEL_73;
    }
LABEL_64:
    v50 = PBReaderSkipValueWithTag();
    v19 = (int *)MEMORY[0x1E0D82BC8];
    if ((v50 & 1) == 0)
    {
      v56 = 0;
LABEL_75:
      v57 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
      goto LABEL_76;
    }
LABEL_73:
    if (!(v59 & 1 | (v9 != 0)))
      goto LABEL_74;
  }
  if (!v32)
    goto LABEL_64;
  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_95;
    v9 += *(unsigned __int8 *)(a1 + 56) << 28 >> 31;
    goto LABEL_72;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_95;
  v45 = objc_alloc_init(GEOStructuredAddress);
  if (GEOStructuredAddressReadAllFrom(v45, (void *)v3))
  {
    PBReaderRecallMark();
    v46 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v45;

    --v9;
LABEL_72:
    v19 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_73;
  }

LABEL_95:
  v56 = 0;
  v57 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_76:
  if ((v58 & 1) == 0)
    goto LABEL_78;
LABEL_77:
  *(_BYTE *)(a1 + v57[259]) |= 2u;
LABEL_78:
  if (v61 || (v56 & 1) == 0)
  {
    *(_BYTE *)(a1 + v57[259]) |= 4u;
    *(_BYTE *)(a1 + v57[259]) |= 8u;
    goto LABEL_88;
  }
  if (v17)
  {
    while (2)
    {
      while (1)
      {
        v52 = *v17++;
        v51 = v52;
        if (v52 == 11)
          break;
        if (v51 == 15)
        {
          v53 = 8;
          goto LABEL_87;
        }
        if (!v51)
          goto LABEL_88;
      }
      v53 = 4;
LABEL_87:
      *(_BYTE *)(a1 + v57[259]) |= v53;
      continue;
    }
  }
LABEL_88:
  if (v56)
    v3 = *(_BYTE *)(v3 + *v19) == 0;
  else
    v3 = 0;
  if (v61)
  {
    v54 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

BOOL GEOStructuredAddressReadAllFrom(_QWORD *a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  GEOSubPremise *v28;
  void *v29;
  id v30;
  void *v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  _BOOL8 v39;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (!v3[*v6])
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        v17 = v10 & 7;
        if (v16 || v17 == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 9;
            goto LABEL_59;
          case 2u:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 8;
            goto LABEL_59;
          case 3u:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 6;
            goto LABEL_59;
          case 4u:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 5;
            goto LABEL_59;
          case 5u:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 20;
            goto LABEL_59;
          case 6u:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 13;
            goto LABEL_59;
          case 7u:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 17;
            goto LABEL_59;
          case 8u:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 21;
            goto LABEL_59;
          case 9u:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 18;
            goto LABEL_59;
          case 0xAu:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 24;
            goto LABEL_59;
          case 0xBu:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 23;
            goto LABEL_59;
          case 0xCu:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 11;
            goto LABEL_59;
          case 0xDu:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 15;
            goto LABEL_59;
          case 0xEu:
            PBReaderReadString();
            v28 = (GEOSubPremise *)objc_claimAutoreleasedReturnValue();
            if (v28)
              objc_msgSend(a1, "addAreaOfInterest:", v28);
            goto LABEL_57;
          case 0xFu:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 12;
            goto LABEL_59;
          case 0x10u:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 14;
            goto LABEL_59;
          case 0x11u:
            PBReaderReadString();
            v28 = (GEOSubPremise *)objc_claimAutoreleasedReturnValue();
            if (v28)
              objc_msgSend(a1, "addDependentLocality:", v28);
            goto LABEL_57;
          case 0x12u:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 19;
            goto LABEL_59;
          case 0x13u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_78;
            v28 = objc_alloc_init(GEOSubPremise);
            if (!GEOSubPremiseReadAllFrom((uint64_t)v28, v3))
            {

              goto LABEL_78;
            }
            PBReaderRecallMark();
            objc_msgSend(a1, "addSubPremise:", v28, 0, 0);
LABEL_57:

LABEL_60:
            if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
              goto LABEL_76;
            break;
          case 0x14u:
            PBReaderReadString();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = 16;
LABEL_59:
            v29 = (void *)a1[v20];
            a1[v20] = v19;

            goto LABEL_60;
          default:
            if ((v10 >> 3) == 100)
            {
              if (v17 == 2)
              {
                if (!PBReaderPlaceMark())
                  goto LABEL_78;
                while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5] && !v3[*v6])
                {
                  v21 = 0;
                  v22 = 0;
                  v23 = 0;
                  while (1)
                  {
                    v24 = *v4;
                    v25 = *(_QWORD *)&v3[v24];
                    v26 = v25 + 1;
                    if (v25 == -1 || v26 > *(_QWORD *)&v3[*v5])
                      break;
                    v27 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v25);
                    *(_QWORD *)&v3[v24] = v26;
                    v23 |= (unint64_t)(v27 & 0x7F) << v21;
                    if (v27 < 0)
                    {
                      v21 += 7;
                      v15 = v22++ >= 9;
                      if (!v15)
                        continue;
                    }
                    goto LABEL_34;
                  }
                  v3[*v6] = 1;
LABEL_34:
                  PBRepeatedInt64Add();
                }
                PBReaderRecallMark();
              }
              else
              {
                v32 = 0;
                v33 = 0;
                v34 = 0;
                while (1)
                {
                  v35 = *v4;
                  v36 = *(_QWORD *)&v3[v35];
                  v37 = v36 + 1;
                  if (v36 == -1 || v37 > *(_QWORD *)&v3[*v5])
                    break;
                  v38 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v36);
                  *(_QWORD *)&v3[v35] = v37;
                  v34 |= (unint64_t)(v38 & 0x7F) << v32;
                  if (v38 < 0)
                  {
                    v32 += 7;
                    v15 = v33++ >= 9;
                    if (!v15)
                      continue;
                  }
                  goto LABEL_75;
                }
                v3[*v6] = 1;
LABEL_75:
                PBRepeatedInt64Add();
              }
            }
            else
            {
              if (!a1[1])
              {
                v30 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
                v31 = (void *)a1[1];
                a1[1] = v30;

              }
              if (!PBUnknownFieldAdd())
                goto LABEL_78;
            }
            goto LABEL_60;
        }
      }
    }
LABEL_76:
    v39 = v3[*v6] == 0;
  }
  else
  {
LABEL_78:
    v39 = 0;
  }
  objc_sync_exit(v3);

  return v39;
}

void sub_188663B8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188663CDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _buildGEODictionaryFromStructuredAddress(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint8_t buf[4];
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s forbids %s to be nil"), "NSDictionary *_buildGEODictionaryFromStructuredAddress(GEOStructuredAddress *__strong)", "structuredAddress");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v1)
  {

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "countryCode");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = v5;
    if (objc_msgSend(v5, "length"))
      objc_msgSend(v4, "setObject:forKey:", v5, CFSTR("CountryCode"));
    objc_msgSend(v1, "fullThoroughfare");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v34, "length"))
    {
      v6 = v34;
    }
    else
    {
      objc_msgSend(v1, "thoroughfare");
      v8 = objc_claimAutoreleasedReturnValue();

      v6 = (void *)v8;
    }
    v35 = v6;
    if (!objc_msgSend(v6, "length"))
    {
      objc_msgSend(v30, "lowercaseString");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("jp"));

      if (v10)
      {
        objc_msgSend(v1, "subLocality");
        v11 = objc_claimAutoreleasedReturnValue();

        v35 = (void *)v11;
      }
    }
    if (objc_msgSend(v35, "length"))
      objc_msgSend(v4, "setObject:forKey:", v35, CFSTR("Street"));
    if (objc_msgSend(v1, "hasThoroughfare"))
    {
      objc_msgSend(v1, "thoroughfare");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "length");

      if (v13)
      {
        objc_msgSend(v1, "thoroughfare");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "setObject:forKeyedSubscript:", v14, CFSTR("Thoroughfare"));

      }
    }
    objc_msgSend(v1, "locality");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v31, "length"))
      objc_msgSend(v4, "setObject:forKey:", v31, CFSTR("City"));
    objc_msgSend(v1, "administrativeAreaCode");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v32, "length"))
    {
      v15 = v32;
    }
    else
    {
      objc_msgSend(v1, "administrativeArea");
      v16 = objc_claimAutoreleasedReturnValue();

      v15 = (void *)v16;
    }
    v33 = v15;
    if (objc_msgSend(v15, "length"))
      objc_msgSend(v4, "setObject:forKey:", v33, CFSTR("State"));
    objc_msgSend(v1, "postCodeFull");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v17, "length"))
    {
      objc_msgSend(v1, "postCode");
      v18 = objc_claimAutoreleasedReturnValue();

      v17 = (void *)v18;
    }
    if (objc_msgSend(v17, "length"))
      objc_msgSend(v4, "setObject:forKey:", v17, CFSTR("ZIP"));
    if (objc_msgSend(v1, "hasPostCodeExtension"))
    {
      objc_msgSend(v1, "postCodeExtension");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "length");

      if (v20)
      {
        objc_msgSend(v1, "postCodeExtension");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "setObject:forKeyedSubscript:", v21, CFSTR("PostCodeExtension"));

      }
    }
    objc_msgSend(v1, "subAdministrativeArea");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v22, "length"))
      objc_msgSend(v4, "setObject:forKey:", v22, CFSTR("SubAdministrativeArea"));
    objc_msgSend(v1, "subLocality");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v23, "length"))
      objc_msgSend(v4, "setObject:forKey:", v23, CFSTR("SubLocality"));
    objc_msgSend(v1, "premises");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v24, "length"))
      objc_msgSend(v4, "setObject:forKey:", v24, CFSTR("Premises"));
    objc_msgSend(v1, "subThoroughfare");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v25, "length"))
      objc_msgSend(v4, "setObject:forKey:", v25, CFSTR("SubThoroughfare"));
    objc_msgSend(v1, "inlandWater");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v26, "length"))
      objc_msgSend(v4, "setObject:forKey:", v26, CFSTR("InlandWater"));
    objc_msgSend(v1, "ocean");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v27, "length"))
      objc_msgSend(v4, "setObject:forKey:", v27, CFSTR("Ocean"));
    objc_msgSend(v1, "country");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v28, "length"))
      objc_msgSend(v4, "setObject:forKey:", v28, CFSTR("Country"));

  }
  else
  {
    GEOFindOrCreateLog("com.apple.GeoServices", "GEOAddressObject");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v37 = v3;
      _os_log_impl(&dword_1885A9000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }

    v4 = 0;
  }

  return v4;
}

void sub_1886642AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

BOOL GEOPDTipFilterReadAllFrom(_QWORD *a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  id v18;
  void *v19;
  _BOOL8 v20;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_28;
          -[GEOPDTipFilter _reservePhotoSizeFilters:]((uint64_t)a1, 1uLL);
          if (!GEOPDPhotoSizeFilterValueReadAllFrom(a1[2] + 12 * a1[3], (uint64_t)v3))
            goto LABEL_28;
          PBReaderRecallMark();
          ++a1[3];
        }
        else
        {
          if (!a1[1])
          {
            v18 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v19 = (void *)a1[1];
            a1[1] = v18;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_28;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v20 = v3[*v6] == 0;
  }
  else
  {
LABEL_28:
    v20 = 0;
  }
  objc_sync_exit(v3);

  return v20;
}

void sub_188664780(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDAnnotatedItemListFilterReadAllFrom(_QWORD *a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  id v18;
  void *v19;
  _BOOL8 v20;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_28;
          -[GEOPDAnnotatedItemListFilter _reservePhotoSizeFilters:]((uint64_t)a1, 1uLL);
          if (!GEOPDPhotoSizeFilterValueReadAllFrom(a1[2] + 12 * a1[3], (uint64_t)v3))
            goto LABEL_28;
          PBReaderRecallMark();
          ++a1[3];
        }
        else
        {
          if (!a1[1])
          {
            v18 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v19 = (void *)a1[1];
            a1[1] = v18;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_28;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v20 = v3[*v6] == 0;
  }
  else
  {
LABEL_28:
    v20 = 0;
  }
  objc_sync_exit(v3);

  return v20;
}

void sub_188664B3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDCaptionedPhotoFilterReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  int v41;
  char v42;
  char v43;
  int v44;
  int v45;
  void *v46;
  int v48;
  int *v49;
  char v50;
  char v51;
  char v52;
  BOOL v53;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 68) >> 2) & 1)
      + (*(_BYTE *)(a1 + 68) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 != 0;
        v15 = v14 & ~(_BYTE)v10 | v7;
        v16 = v14 | v10;
        v50 = v15;
        v51 = v16 | v15;
        if (((v16 | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v52 = (v17 == 0) | v16;
        v53 = v16;
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_59;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_59:
      v48 = 1;
      goto LABEL_60;
    }
    v31 = v23 >> 3;
    v32 = v53;
    if ((v52 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 != 2)
      break;
    if (!v32)
      goto LABEL_53;
    if ((*(_BYTE *)(a1 + 68) & 4) != 0)
    {
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_80;
      v9 += *(unsigned __int8 *)(a1 + 68) << 29 >> 31;
      goto LABEL_58;
    }
    PBReaderReadString();
    v37 = objc_claimAutoreleasedReturnValue();
    v38 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v37;

    v19 = (int *)MEMORY[0x1E0D82BC8];
    --v9;
LABEL_54:
    if (!(v51 & 1 | (v9 != 0)))
      goto LABEL_59;
  }
  if ((_DWORD)v31 != 1)
  {
    if ((v50 & 1) != 0 && (*(_BYTE *)(a1 + 68) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v40 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v39;

      }
      v41 = PBUnknownFieldAdd();
      v19 = (int *)MEMORY[0x1E0D82BC8];
      if (!v41)
      {
        v48 = 0;
        v49 = &OBJC_IVAR___GEOXPCReply__methodName;
        goto LABEL_62;
      }
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  if (!v32 || (*(_BYTE *)(a1 + 68) & 2) != 0)
  {
LABEL_53:
    v42 = PBReaderSkipValueWithTag();
    v19 = (int *)MEMORY[0x1E0D82BC8];
    if ((v42 & 1) != 0)
      goto LABEL_54;
    v48 = 0;
LABEL_60:
    v49 = &OBJC_IVAR___GEOXPCReply__methodName;
    goto LABEL_61;
  }
  if (PBReaderPlaceMark())
  {
    -[GEOPDCaptionedPhotoFilter _reservePhotoSizeFilters:](a1, 1uLL);
    if (GEOPDPhotoSizeFilterValueReadAllFrom(*(_QWORD *)(a1 + 24) + 12 * *(_QWORD *)(a1 + 32), v3))
    {
      PBReaderRecallMark();
      ++*(_QWORD *)(a1 + 32);
LABEL_58:
      v19 = (int *)MEMORY[0x1E0D82BC8];
      goto LABEL_54;
    }
  }
LABEL_80:
  v48 = 0;
  v49 = &OBJC_IVAR___GEOXPCReply__methodName;
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_61:
  if ((v50 & 1) == 0)
    goto LABEL_63;
LABEL_62:
  *(_BYTE *)(a1 + v49[674]) |= 1u;
LABEL_63:
  if (v53 || (v48 & 1) == 0)
  {
    *(_BYTE *)(a1 + v49[674]) |= 2u;
    *(_BYTE *)(a1 + v49[674]) |= 4u;
    goto LABEL_73;
  }
  if (v17)
  {
    while (1)
    {
      v45 = *v17++;
      v44 = v45;
      if (v45 == 1)
        break;
      if (v44 == 2)
      {
        v43 = 4;
LABEL_69:
        *(_BYTE *)(a1 + v49[674]) |= v43;
      }
      else if (!v44)
      {
        goto LABEL_73;
      }
    }
    v43 = 2;
    goto LABEL_69;
  }
LABEL_73:
  if (v48)
    v3 = *(_BYTE *)(v3 + *v19) == 0;
  else
    v3 = 0;
  if (v53)
  {
    v46 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

BOOL GEOPDPhotoSizeFilterValueReadAllFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  _DWORD *v7;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  _DWORD *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (_DWORD *)(a1 + 4);
    v8 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v3;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v4))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        if (v10++ >= 9)
        {
          v11 = 0;
          v17 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v17 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v11 = 0;
LABEL_14:
      if (v17 || (v11 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v11 >> 3) == 2)
        break;
      if ((v11 >> 3) == 1)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 8) |= 2u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
          {
            v27 = v7;
            goto LABEL_38;
          }
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0)
            break;
          v19 += 7;
          v26 = v20++ > 8;
          if (v26)
          {
            LODWORD(v21) = 0;
            v27 = v7;
            goto LABEL_41;
          }
        }
        v27 = v7;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_41:
        *v27 = v21;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v28 = 0;
    v29 = 0;
    v21 = 0;
    *(_BYTE *)(a1 + 8) |= 1u;
    while (1)
    {
      v30 = *v3;
      v31 = *(_QWORD *)(a2 + v30);
      v32 = v31 + 1;
      if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
        break;
      v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v31);
      *(_QWORD *)(a2 + v30) = v32;
      v21 |= (unint64_t)(v33 & 0x7F) << v28;
      if ((v33 & 0x80) == 0)
      {
        v27 = (_DWORD *)a1;
        goto LABEL_39;
      }
      v28 += 7;
      v26 = v29++ > 8;
      if (v26)
      {
        LODWORD(v21) = 0;
        v27 = (_DWORD *)a1;
        goto LABEL_41;
      }
    }
    v27 = (_DWORD *)a1;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL GEOPDReviewFilterReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 44) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_36;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_38;
            }
          }
          v3[*v6] = 1;
LABEL_36:
          if (v3[*v6])
            v20 = 0;
LABEL_38:
          *(_BYTE *)(a1 + 40) = v20 != 0;
        }
        else if ((v10 >> 3) == 1)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_41;
          -[GEOPDReviewFilter _reservePhotoSizeFilters:](a1, 1uLL);
          if (!GEOPDPhotoSizeFilterValueReadAllFrom(*(_QWORD *)(a1 + 16) + 12 * *(_QWORD *)(a1 + 24), (uint64_t)v3))
            goto LABEL_41;
          PBReaderRecallMark();
          ++*(_QWORD *)(a1 + 24);
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_41;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_41:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_1886655E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188665BC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3geo13DispatchTimer8scheduleEyy11qos_class_t_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  dispatch_source_set_timer(*(dispatch_source_t *)(v1 + 8), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  v2 = *(_QWORD *)(v1 + 40);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
}

void *geoCPCopyBundleIdentifierAndTeamFromSecTaskRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*CPCopyBundleIdentifierAndTeamFromSecTaskRefSymbolLoc)(uint64_t, uint64_t, uint64_t);

  CPCopyBundleIdentifierAndTeamFromSecTaskRefSymbolLoc = (uint64_t (*)(uint64_t, uint64_t, uint64_t))getCPCopyBundleIdentifierAndTeamFromSecTaskRefSymbolLoc();
  if (CPCopyBundleIdentifierAndTeamFromSecTaskRefSymbolLoc)
    return (void *)CPCopyBundleIdentifierAndTeamFromSecTaskRefSymbolLoc(a1, a2, a3);
  dlerror();
  abort_report_np();
  return getCPCopyBundleIdentifierAndTeamFromSecTaskRefSymbolLoc();
}

void *getCPCopyBundleIdentifierAndTeamFromSecTaskRefSymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getCPCopyBundleIdentifierAndTeamFromSecTaskRefSymbolLoc_ptr;
  v6 = getCPCopyBundleIdentifierAndTeamFromSecTaskRefSymbolLoc_ptr;
  if (!getCPCopyBundleIdentifierAndTeamFromSecTaskRefSymbolLoc_ptr)
  {
    v1 = (void *)AppSupportLibrary();
    v0 = dlsym(v1, "CPCopyBundleIdentifierAndTeamFromSecTaskRef");
    v4[3] = (uint64_t)v0;
    getCPCopyBundleIdentifierAndTeamFromSecTaskRefSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_18866641C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t AppSupportLibrary()
{
  uint64_t v0;
  void *v2;

  v0 = AppSupportLibraryCore();
  if (!v0)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t AppSupportLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = AppSupportLibraryCore_frameworkLibrary;
  v6 = AppSupportLibraryCore_frameworkLibrary;
  if (!AppSupportLibraryCore_frameworkLibrary)
  {
    v7 = __const__block__paths_2;
    v8 = *(_OWORD *)&off_1E1C0CA40;
    v1 = _sl_dlopen();
    v4[3] = v1;
    AppSupportLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_18866653C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id GEOConfigGetArray(int a1, uint64_t a2)
{
  return _getValue(a1, a2, 1, 0, 0, 0);
}

GEOStructuredAddress *_buildStructuredAddressFromAnyAddressDictionary(void *a1)
{
  id v1;
  GEOStructuredAddress *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  GEOStructuredAddress *v23;
  GEOStructuredAddress *v24;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  v1 = a1;
  v2 = objc_alloc_init(GEOStructuredAddress);
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("Country"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("Country"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[GEOStructuredAddress setCountry:](v2, "setCountry:", v4);
LABEL_3:

    goto LABEL_4;
  }
  if (ContactsLibraryCore())
  {
    getCNPostalAddressCountryKey();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "objectForKey:", v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    if (v27)
    {
      getCNPostalAddressCountryKey();
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "objectForKeyedSubscript:", v4);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      -[GEOStructuredAddress setCountry:](v2, "setCountry:", v28);

      goto LABEL_3;
    }
  }
LABEL_4:
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("CountryCode"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("CountryCode"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[GEOStructuredAddress setCountryCode:](v2, "setCountryCode:", v6);
LABEL_6:

    goto LABEL_7;
  }
  if (ContactsLibraryCore())
  {
    getCNPostalAddressISOCountryCodeKey();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "objectForKeyedSubscript:", v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    if (v30)
    {
      getCNPostalAddressISOCountryCodeKey();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "objectForKeyedSubscript:", v6);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      -[GEOStructuredAddress setCountryCode:](v2, "setCountryCode:", v31);

      goto LABEL_6;
    }
  }
LABEL_7:
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("State"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("State"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[GEOStructuredAddress setAdministrativeArea:](v2, "setAdministrativeArea:", v8);
LABEL_9:

    goto LABEL_10;
  }
  if (ContactsLibraryCore())
  {
    getCNPostalAddressStateKey();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "objectForKeyedSubscript:", v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    if (v33)
    {
      getCNPostalAddressStateKey();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "objectForKeyedSubscript:", v8);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      -[GEOStructuredAddress setAdministrativeArea:](v2, "setAdministrativeArea:", v34);

      goto LABEL_9;
    }
  }
LABEL_10:
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("SubAdministrativeArea"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[GEOStructuredAddress setSubAdministrativeArea:](v2, "setSubAdministrativeArea:", v9);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("City"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("City"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[GEOStructuredAddress setLocality:](v2, "setLocality:", v11);
LABEL_12:

    goto LABEL_13;
  }
  if (ContactsLibraryCore())
  {
    getCNPostalAddressCityKey();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "objectForKeyedSubscript:", v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();

    if (v36)
    {
      getCNPostalAddressCityKey();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "objectForKeyedSubscript:", v11);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      -[GEOStructuredAddress setLocality:](v2, "setLocality:", v37);

      goto LABEL_12;
    }
  }
LABEL_13:
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("SubLocality"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[GEOStructuredAddress setSubLocality:](v2, "setSubLocality:", v12);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("Premises"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[GEOStructuredAddress setPremises:](v2, "setPremises:", v13);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("Thoroughfare"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[GEOStructuredAddress setThoroughfare:](v2, "setThoroughfare:", v14);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("SubThoroughfare"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[GEOStructuredAddress setSubThoroughfare:](v2, "setSubThoroughfare:", v15);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("Street"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("Street"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[GEOStructuredAddress setFullThoroughfare:](v2, "setFullThoroughfare:", v17);
LABEL_15:

    goto LABEL_16;
  }
  if (ContactsLibraryCore())
  {
    getCNPostalAddressStreetKey();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "objectForKeyedSubscript:", v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    if (v39)
    {
      getCNPostalAddressStreetKey();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "objectForKeyedSubscript:", v17);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      -[GEOStructuredAddress setFullThoroughfare:](v2, "setFullThoroughfare:", v40);

      goto LABEL_15;
    }
  }
LABEL_16:
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("ZIP"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("ZIP"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[GEOStructuredAddress setPostCode:](v2, "setPostCode:", v19);
  }
  else
  {
    if (!ContactsLibraryCore())
      goto LABEL_19;
    getCNPostalAddressPostalCodeKey();
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "objectForKeyedSubscript:", v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v42)
      goto LABEL_19;
    getCNPostalAddressPostalCodeKey();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "objectForKeyedSubscript:", v19);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    -[GEOStructuredAddress setPostCode:](v2, "setPostCode:", v43);

  }
LABEL_19:
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("AreasOfInterest"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[GEOStructuredAddress setAreaOfInterests:](v2, "setAreaOfInterests:", v20);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("InlandWater"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  -[GEOStructuredAddress setInlandWater:](v2, "setInlandWater:", v21);

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("Ocean"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[GEOStructuredAddress setOcean:](v2, "setOcean:", v22);

  if (-[GEOStructuredAddress isEmpty](v2, "isEmpty"))
    v23 = 0;
  else
    v23 = v2;
  v24 = v23;

  return v24;
}

void sub_188666CB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

uint64_t ContactsLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = ContactsLibraryCore_frameworkLibrary;
  v6 = ContactsLibraryCore_frameworkLibrary;
  if (!ContactsLibraryCore_frameworkLibrary)
  {
    v7 = __const__block__paths_1;
    v8 = *(_OWORD *)&off_1E1C08E00;
    v1 = _sl_dlopen();
    v4[3] = v1;
    ContactsLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_188666E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getCNPostalAddressStreetKey(void)
{
  id *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)getCNPostalAddressStreetKeySymbolLoc(void)::ptr;
  v7 = getCNPostalAddressStreetKeySymbolLoc(void)::ptr;
  if (!getCNPostalAddressStreetKeySymbolLoc(void)::ptr)
  {
    v1 = (void *)ContactsLibrary();
    v0 = (id *)dlsym(v1, "CNPostalAddressStreetKey");
    v5[3] = (uint64_t)v0;
    getCNPostalAddressStreetKeySymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *v0;
}

uint64_t ContactsLibrary()
{
  uint64_t v0;
  void *v2;

  v0 = ContactsLibraryCore();
  if (!v0)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void sub_188667A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 64), 8);

  _Unwind_Resume(a1);
}

void sub_188667DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188668148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

id GEOTileLoaderClientIdentifier(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<%@: %p>"), objc_opt_class(), v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1886682B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GEOGloriaQuadIDTileKeyMakeWithCoordinate(char a1, double a2, double a3, uint64_t a4, uint64_t a5, const unsigned __int8 *a6)
{
  unsigned __int8 v7;
  uint64_t v8;
  _BYTE v10[9];
  double v11;
  __int128 v12;

  *(double *)&v10[1] = a2;
  v11 = a3;
  v10[0] = a1;
  v12 = xmmword_189CE1060;
  gloria::TileId::FromLatLng((gloria::TileId *)&v10[1], &v11, (const double *)v10, a6);
  *(_QWORD *)((char *)&v12 + 1) = a1 & 0x3F | ((v8 | gloria::LEADING_BITS_VALUE_LUT[v7]) << 6);
  return v12;
}

long double GEOCoordinate2DForMapPoint(double a1, double a2)
{
  long double v2;

  v2 = exp((a2 * 0.0078125 + -1048576.0) / 333772.107);
  return (atan(v2) * -2.0 + 1.57079633) * 57.2957795;
}

void sub_18866993C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

BOOL RegionContainsPoint(unsigned int *a1, double a2, double a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  unsigned int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  _BOOL8 result;
  double v24;
  double v25;
  double v26;
  char v31;
  unint64_t v32;
  int v33;
  unsigned __int16 v34;
  unsigned __int8 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v31 = 0;
  v6 = a1[3];
  v7 = a1[4];
  v34 = (v7 >> 24) & 3;
  v8 = ((unint64_t)(a1[5] & 0x3F) << 40) | (v6 << 46);
  v35 = 0;
  v33 = (v6 >> 18) | ((_DWORD)v7 << 8);
  v32 = v8;
  v9 = GEOMapRectForGEOTileKey((uint64_t)&v31);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = *a1;
  v17 = a1[1];
  v32 = v32 & 0x3FFFFFFFFFFFLL | ((unint64_t)v16 << 46);
  v33 = (v16 >> 18) | (v17 << 8);
  v34 = (((unint64_t)(v34 | (v35 << 16)) << 32) & 0xFFFFFC00000000 | (v16 >> 18) | ((unint64_t)(v17 & 0x3FFFFFF) << 8)) >> 32;
  v18 = GEOMapRectForGEOTileKey((uint64_t)&v31);
  v20 = GEOMapRectUnion(v9, v11, v13, v15, v18, v19);
  result = 0;
  v24 = fabs(v21);
  v26 = v20 + v25;
  if (fabs(v20) != INFINITY && v24 != INFINITY && a2 >= v20 && a2 < v26 && a3 >= v21)
    return a3 < v21 + v22;
  return result;
}

double GEOMapRectForGEOTileKey(uint64_t a1)
{
  uint64_t v2;
  signed int v3;

  if ((*(_BYTE *)a1 & 0x7F) == 0x14)
  {
    v2 = *(_QWORD *)(a1 + 1);
    v3 = v2 >> 6;
  }
  else
  {
    GEOTileKeyAssertIsStandard(a1);
    LOBYTE(v2) = (unsigned __int16)WORD2(*(_QWORD *)(a1 + 1)) >> 8;
    v3 = ((*(_QWORD *)(a1 + 1) >> 46) | (*(_DWORD *)(a1 + 9) << 18)) & 0x3FFFFFF;
  }
  return 268435456.0 / (double)(1 << v2) * (double)v3;
}

double GEOMapRectUnion(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v8;

  v6 = fabs(a2);
  if (fabs(a1) != INFINITY && v6 != INFINITY)
  {
    v8 = fabs(a6);
    if (fabs(a5) == INFINITY || v8 == INFINITY)
    {
      return a1;
    }
    else if (a1 < a5)
    {
      return a1;
    }
  }
  return a5;
}

void sub_188669E94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::FileDescriptorProto::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int *v8;
  int *v9;
  void ***v10;
  char *v11;
  AddrObjGoogle::protobuf::io::CodedInputStream *v12;
  int v13;
  uint64_t *v14;
  std::string *v15;
  char *v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  uint64_t *v20;
  std::string *v21;
  _BYTE *v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  _BYTE *v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  _BYTE *v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  std::string *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  AddrObjGoogle::protobuf::DescriptorProto *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  AddrObjGoogle::protobuf::UnknownFieldSet *v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  AddrObjGoogle::protobuf::EnumDescriptorProto *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  AddrObjGoogle::protobuf::UnknownFieldSet *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  AddrObjGoogle::protobuf::ServiceDescriptorProto *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  AddrObjGoogle::protobuf::UnknownFieldSet *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  AddrObjGoogle::protobuf::FieldDescriptorProto *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  AddrObjGoogle::protobuf::UnknownFieldSet *v107;
  int v108;
  int v109;
  int v110;
  AddrObjGoogle::protobuf::FileOptions *v111;
  char *v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  AddrObjGoogle::protobuf::UnknownFieldSet *v117;
  int v118;
  int v119;
  _BYTE *v120;
  AddrObjGoogle::protobuf::SourceCodeInfo *v121;
  char *v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  AddrObjGoogle::protobuf::UnknownFieldSet *v127;
  int v128;
  int v129;
  int *v130;
  int *v131;
  int *v132;
  unsigned int v133;

  v5 = this;
  v6 = (_DWORD *)(this + 72);
  v7 = (_DWORD *)(this + 56);
  v8 = (int *)(this + 88);
  v131 = (int *)(this + 112);
  v132 = (int *)(this + 32);
  v130 = (int *)(this + 136);
  v9 = (int *)(this + 160);
  v10 = (void ***)(this + 8);
LABEL_2:
  while (2)
  {
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      v12 = (AddrObjGoogle::protobuf::io::CodedInputStream *)this;
      *((_DWORD *)a2 + 8) = this;
      if (!(_DWORD)this)
        return 1;
    }
    else
    {
      v12 = (AddrObjGoogle::protobuf::io::CodedInputStream *)*v11;
      *((_DWORD *)a2 + 8) = (_DWORD)v12;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)v12)
        return 1;
    }
    switch(v12 >> 3)
    {
      case 1u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_34;
        *(_DWORD *)(v5 + 204) |= 1u;
        v14 = *(uint64_t **)(v5 + 16);
        if (v14 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v15 = (std::string *)operator new();
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 16) = v15;
        }
        else
        {
          v15 = *(std::string **)(v5 + 16);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v15);
        if ((_DWORD)this)
        {
          v19 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v19 < *((_QWORD *)a2 + 2) && *v19 == 18)
          {
            *((_QWORD *)a2 + 1) = v19 + 1;
            goto LABEL_46;
          }
          continue;
        }
        return this;
      case 2u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_34;
LABEL_46:
        *(_DWORD *)(v5 + 204) |= 2u;
        v20 = *(uint64_t **)(v5 + 24);
        if (v20 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v21 = (std::string *)operator new();
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 24) = v21;
        }
        else
        {
          v21 = *(std::string **)(v5 + 24);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v21);
        if ((_DWORD)this)
        {
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v22 >= *((_QWORD *)a2 + 2) || *v22 != 26)
            continue;
          goto LABEL_97;
        }
        return this;
      case 3u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_34;
        while (1)
        {
          v43 = *(_DWORD *)(v5 + 44);
          v44 = *(int *)(v5 + 40);
          if ((int)v44 >= v43)
          {
            if (v43 == *(_DWORD *)(v5 + 48))
            {
              this = (uint64_t)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v132, v43 + 1);
              v43 = *(_DWORD *)(v5 + 44);
            }
            *(_DWORD *)(v5 + 44) = v43 + 1;
            v46 = (std::string *)AddrObjGoogle::protobuf::internal::StringTypeHandlerBase::New((AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)this);
            v47 = *(_QWORD *)(v5 + 32);
            v48 = *(int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v48 + 1;
            *(_QWORD *)(v47 + 8 * v48) = v46;
          }
          else
          {
            v45 = *(_QWORD *)(v5 + 32);
            *(_DWORD *)(v5 + 40) = v44 + 1;
            v46 = *(std::string **)(v45 + 8 * v44);
          }
          this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v46);
          if (!(_DWORD)this)
            return this;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v22 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v49 = *v22;
          if (v49 != 26)
          {
            if (v49 != 34)
              goto LABEL_2;
            goto LABEL_107;
          }
LABEL_97:
          *((_QWORD *)a2 + 1) = v22 + 1;
        }
      case 4u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_34;
        while (1)
        {
          v50 = *(_DWORD *)(v5 + 100);
          v51 = *(int *)(v5 + 96);
          if ((int)v51 >= v50)
          {
            if (v50 == *(_DWORD *)(v5 + 104))
            {
              AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v50 + 1);
              v50 = *(_DWORD *)(v5 + 100);
            }
            *(_DWORD *)(v5 + 100) = v50 + 1;
            v53 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::DescriptorProto>::New();
            v54 = *(_QWORD *)(v5 + 88);
            v55 = *(int *)(v5 + 96);
            *(_DWORD *)(v5 + 96) = v55 + 1;
            *(_QWORD *)(v54 + 8 * v55) = v53;
          }
          else
          {
            v52 = *(_QWORD *)(v5 + 88);
            *(_DWORD *)(v5 + 96) = v51 + 1;
            v53 = *(AddrObjGoogle::protobuf::DescriptorProto **)(v52 + 8 * v51);
          }
          v133 = 0;
          v56 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v56 >= *((_QWORD *)a2 + 2) || *v56 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v133))
              return 0;
          }
          else
          {
            v133 = *v56;
            *((_QWORD *)a2 + 1) = v56 + 1;
          }
          v57 = *((_DWORD *)a2 + 14);
          v58 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v57 + 1;
          if (v57 >= v58)
            return 0;
          v59 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v133);
          if (!AddrObjGoogle::protobuf::DescriptorProto::MergePartialFromCodedStream((uint64_t)v53, a2, v60, v61)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v59);
          v62 = *((_DWORD *)a2 + 14);
          v63 = __OFSUB__(v62, 1);
          v64 = v62 - 1;
          if (v64 < 0 == v63)
            *((_DWORD *)a2 + 14) = v64;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v22 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v65 = *v22;
          if (v65 != 34)
            break;
LABEL_107:
          *((_QWORD *)a2 + 1) = v22 + 1;
        }
        if (v65 != 42)
          continue;
        goto LABEL_125;
      case 5u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_34;
LABEL_126:
        v66 = *(_DWORD *)(v5 + 124);
        v67 = *(int *)(v5 + 120);
        if ((int)v67 >= v66)
        {
          if (v66 == *(_DWORD *)(v5 + 128))
          {
            AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v131, v66 + 1);
            v66 = *(_DWORD *)(v5 + 124);
          }
          *(_DWORD *)(v5 + 124) = v66 + 1;
          v69 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::EnumDescriptorProto>::New();
          v70 = *(_QWORD *)(v5 + 112);
          v71 = *(int *)(v5 + 120);
          *(_DWORD *)(v5 + 120) = v71 + 1;
          *(_QWORD *)(v70 + 8 * v71) = v69;
        }
        else
        {
          v68 = *(_QWORD *)(v5 + 112);
          *(_DWORD *)(v5 + 120) = v67 + 1;
          v69 = *(AddrObjGoogle::protobuf::EnumDescriptorProto **)(v68 + 8 * v67);
        }
        v133 = 0;
        v72 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v72 >= *((_QWORD *)a2 + 2) || *v72 < 0)
        {
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v133))
            return 0;
        }
        else
        {
          v133 = *v72;
          *((_QWORD *)a2 + 1) = v72 + 1;
        }
        v73 = *((_DWORD *)a2 + 14);
        v74 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v73 + 1;
        if (v73 >= v74)
          return 0;
        v75 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v133);
        if (!AddrObjGoogle::protobuf::EnumDescriptorProto::MergePartialFromCodedStream((uint64_t)v69, a2, v76, v77)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v75);
        v78 = *((_DWORD *)a2 + 14);
        v63 = __OFSUB__(v78, 1);
        v79 = v78 - 1;
        if (v79 < 0 == v63)
          *((_DWORD *)a2 + 14) = v79;
        v22 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v22 >= *((_QWORD *)a2 + 2))
          continue;
        v80 = *v22;
        if (v80 == 42)
        {
LABEL_125:
          *((_QWORD *)a2 + 1) = v22 + 1;
          goto LABEL_126;
        }
        if (v80 != 50)
          continue;
        while (1)
        {
          *((_QWORD *)a2 + 1) = v22 + 1;
LABEL_144:
          v81 = *(_DWORD *)(v5 + 148);
          v82 = *(int *)(v5 + 144);
          if ((int)v82 >= v81)
          {
            if (v81 == *(_DWORD *)(v5 + 152))
            {
              AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v130, v81 + 1);
              v81 = *(_DWORD *)(v5 + 148);
            }
            *(_DWORD *)(v5 + 148) = v81 + 1;
            v84 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::ServiceDescriptorProto>::New();
            v85 = *(_QWORD *)(v5 + 136);
            v86 = *(int *)(v5 + 144);
            *(_DWORD *)(v5 + 144) = v86 + 1;
            *(_QWORD *)(v85 + 8 * v86) = v84;
          }
          else
          {
            v83 = *(_QWORD *)(v5 + 136);
            *(_DWORD *)(v5 + 144) = v82 + 1;
            v84 = *(AddrObjGoogle::protobuf::ServiceDescriptorProto **)(v83 + 8 * v82);
          }
          v133 = 0;
          v87 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v87 >= *((_QWORD *)a2 + 2) || *v87 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v133))
              return 0;
          }
          else
          {
            v133 = *v87;
            *((_QWORD *)a2 + 1) = v87 + 1;
          }
          v88 = *((_DWORD *)a2 + 14);
          v89 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v88 + 1;
          if (v88 >= v89)
            return 0;
          v90 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v133);
          if (!AddrObjGoogle::protobuf::ServiceDescriptorProto::MergePartialFromCodedStream((uint64_t)v84, a2, v91, v92)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v90);
          v93 = *((_DWORD *)a2 + 14);
          v63 = __OFSUB__(v93, 1);
          v94 = v93 - 1;
          if (v94 < 0 == v63)
            *((_DWORD *)a2 + 14) = v94;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v22 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v95 = *v22;
          if (v95 != 50)
          {
            if (v95 == 58)
            {
              while (1)
              {
                *((_QWORD *)a2 + 1) = v22 + 1;
LABEL_162:
                v96 = *(_DWORD *)(v5 + 172);
                v97 = *(int *)(v5 + 168);
                if ((int)v97 >= v96)
                {
                  if (v96 == *(_DWORD *)(v5 + 176))
                  {
                    AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v96 + 1);
                    v96 = *(_DWORD *)(v5 + 172);
                  }
                  *(_DWORD *)(v5 + 172) = v96 + 1;
                  v99 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::FieldDescriptorProto>::New();
                  v100 = *(_QWORD *)(v5 + 160);
                  v101 = *(int *)(v5 + 168);
                  *(_DWORD *)(v5 + 168) = v101 + 1;
                  *(_QWORD *)(v100 + 8 * v101) = v99;
                }
                else
                {
                  v98 = *(_QWORD *)(v5 + 160);
                  *(_DWORD *)(v5 + 168) = v97 + 1;
                  v99 = *(AddrObjGoogle::protobuf::FieldDescriptorProto **)(v98 + 8 * v97);
                }
                v133 = 0;
                v102 = (char *)*((_QWORD *)a2 + 1);
                if ((unint64_t)v102 >= *((_QWORD *)a2 + 2) || *v102 < 0)
                {
                  if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v133))
                    return 0;
                }
                else
                {
                  v133 = *v102;
                  *((_QWORD *)a2 + 1) = v102 + 1;
                }
                v103 = *((_DWORD *)a2 + 14);
                v104 = *((_DWORD *)a2 + 15);
                *((_DWORD *)a2 + 14) = v103 + 1;
                if (v103 >= v104)
                  return 0;
                v105 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v133);
                if (!AddrObjGoogle::protobuf::FieldDescriptorProto::MergePartialFromCodedStream((uint64_t)v99, a2, v106, v107)|| !*((_BYTE *)a2 + 36))
                {
                  return 0;
                }
                this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v105);
                v108 = *((_DWORD *)a2 + 14);
                v63 = __OFSUB__(v108, 1);
                v109 = v108 - 1;
                if (v109 < 0 == v63)
                  *((_DWORD *)a2 + 14) = v109;
                v22 = (_BYTE *)*((_QWORD *)a2 + 1);
                if ((unint64_t)v22 >= *((_QWORD *)a2 + 2))
                  break;
                v110 = *v22;
                if (v110 != 58)
                {
                  if (v110 == 66)
                  {
                    *((_QWORD *)a2 + 1) = v22 + 1;
LABEL_180:
                    *(_DWORD *)(v5 + 204) |= 0x200u;
                    v111 = *(AddrObjGoogle::protobuf::FileOptions **)(v5 + 184);
                    if (!v111)
                    {
                      v111 = (AddrObjGoogle::protobuf::FileOptions *)operator new();
                      AddrObjGoogle::protobuf::FileOptions::FileOptions(v111);
                      *(_QWORD *)(v5 + 184) = v111;
                    }
                    v133 = 0;
                    v112 = (char *)*((_QWORD *)a2 + 1);
                    if ((unint64_t)v112 >= *((_QWORD *)a2 + 2) || *v112 < 0)
                    {
                      if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v133))
                        return 0;
                    }
                    else
                    {
                      v133 = *v112;
                      *((_QWORD *)a2 + 1) = v112 + 1;
                    }
                    v113 = *((_DWORD *)a2 + 14);
                    v114 = *((_DWORD *)a2 + 15);
                    *((_DWORD *)a2 + 14) = v113 + 1;
                    if (v113 >= v114)
                      return 0;
                    v115 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v133);
                    if (!AddrObjGoogle::protobuf::FileOptions::MergePartialFromCodedStream((uint64_t)v111, a2, v116, v117)|| !*((_BYTE *)a2 + 36))
                    {
                      return 0;
                    }
                    this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v115);
                    v118 = *((_DWORD *)a2 + 14);
                    v63 = __OFSUB__(v118, 1);
                    v119 = v118 - 1;
                    if (v119 < 0 == v63)
                      *((_DWORD *)a2 + 14) = v119;
                    v120 = (_BYTE *)*((_QWORD *)a2 + 1);
                    if ((unint64_t)v120 < *((_QWORD *)a2 + 2) && *v120 == 74)
                    {
                      *((_QWORD *)a2 + 1) = v120 + 1;
LABEL_194:
                      *(_DWORD *)(v5 + 204) |= 0x400u;
                      v121 = *(AddrObjGoogle::protobuf::SourceCodeInfo **)(v5 + 192);
                      if (!v121)
                      {
                        v121 = (AddrObjGoogle::protobuf::SourceCodeInfo *)operator new();
                        AddrObjGoogle::protobuf::SourceCodeInfo::SourceCodeInfo(v121);
                        *(_QWORD *)(v5 + 192) = v121;
                      }
                      v133 = 0;
                      v122 = (char *)*((_QWORD *)a2 + 1);
                      if ((unint64_t)v122 >= *((_QWORD *)a2 + 2) || *v122 < 0)
                      {
                        if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v133))return 0;
                      }
                      else
                      {
                        v133 = *v122;
                        *((_QWORD *)a2 + 1) = v122 + 1;
                      }
                      v123 = *((_DWORD *)a2 + 14);
                      v124 = *((_DWORD *)a2 + 15);
                      *((_DWORD *)a2 + 14) = v123 + 1;
                      if (v123 >= v124)
                        return 0;
                      v125 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v133);
                      if (!AddrObjGoogle::protobuf::SourceCodeInfo::MergePartialFromCodedStream(v121, a2, v126, v127)|| !*((_BYTE *)a2 + 36))
                      {
                        return 0;
                      }
                      this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v125);
                      v128 = *((_DWORD *)a2 + 14);
                      v63 = __OFSUB__(v128, 1);
                      v129 = v128 - 1;
                      if (v129 < 0 == v63)
                        *((_DWORD *)a2 + 14) = v129;
                      v32 = (char *)*((_QWORD *)a2 + 1);
                      v16 = (char *)*((_QWORD *)a2 + 2);
                      if (v32 < v16)
                      {
                        v33 = *v32;
                        goto LABEL_207;
                      }
                    }
                  }
                  goto LABEL_2;
                }
              }
            }
            goto LABEL_2;
          }
        }
      case 6u:
        v13 = v12 & 7;
        if (v13 == 2)
          goto LABEL_144;
        goto LABEL_34;
      case 7u:
        v13 = v12 & 7;
        if (v13 == 2)
          goto LABEL_162;
        goto LABEL_34;
      case 8u:
        v13 = v12 & 7;
        if (v13 == 2)
          goto LABEL_180;
        goto LABEL_34;
      case 9u:
        v13 = v12 & 7;
        if (v13 == 2)
          goto LABEL_194;
        goto LABEL_34;
      case 0xAu:
        v13 = v12 & 7;
        if (v13 != 2)
        {
          if ((v12 & 7) == 0)
          {
            v17 = (char *)*((_QWORD *)a2 + 1);
            v16 = (char *)*((_QWORD *)a2 + 2);
            goto LABEL_53;
          }
          goto LABEL_34;
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<int,(AddrObjGoogle::protobuf::internal::WireFormatLite::FieldType)5>(a2, v7);
        if (!(_DWORD)this)
          return this;
        while (1)
        {
          v32 = (char *)*((_QWORD *)a2 + 1);
          v16 = (char *)*((_QWORD *)a2 + 2);
          if (v32 >= v16)
            goto LABEL_2;
          v33 = *v32;
          if (v33 == 88)
            goto LABEL_92;
LABEL_207:
          if (v33 != 80)
            goto LABEL_2;
          v17 = v32 + 1;
          *((_QWORD *)a2 + 1) = v17;
LABEL_53:
          v133 = 0;
          if (v17 >= v16 || *v17 < 0)
          {
            this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v133);
            if (!(_DWORD)this)
              return this;
            v23 = v133;
          }
          else
          {
            v23 = *v17;
            *((_QWORD *)a2 + 1) = v17 + 1;
          }
          v24 = *(_DWORD *)(v5 + 64);
          if (v24 == *(_DWORD *)(v5 + 68))
          {
            this = (uint64_t)AddrObjGoogle::protobuf::RepeatedField<int>::Reserve(v7, v24 + 1);
            v24 = *(_DWORD *)(v5 + 64);
          }
          v25 = *(_QWORD *)(v5 + 56);
          *(_DWORD *)(v5 + 64) = v24 + 1;
          *(_DWORD *)(v25 + 4 * v24) = v23;
          v26 = *(_DWORD *)(v5 + 68) - *(_DWORD *)(v5 + 64);
          if (v26 >= 1)
          {
            v27 = v26 + 1;
            do
            {
              v28 = (_BYTE *)*((_QWORD *)a2 + 1);
              v29 = *((_QWORD *)a2 + 2);
              if ((unint64_t)v28 >= v29 || *v28 != 80)
                break;
              *((_QWORD *)a2 + 1) = v28 + 1;
              v133 = 0;
              if ((unint64_t)(v28 + 1) >= v29 || (char)v28[1] < 0)
              {
                this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v133);
                if (!(_DWORD)this)
                  return this;
                v30 = v133;
                v25 = *(_QWORD *)v7;
              }
              else
              {
                v30 = v28[1];
                *((_QWORD *)a2 + 1) = v28 + 2;
              }
              v31 = *(int *)(v5 + 64);
              *(_DWORD *)(v5 + 64) = v31 + 1;
              *(_DWORD *)(v25 + 4 * v31) = v30;
              --v27;
            }
            while (v27 > 1);
          }
        }
      case 0xBu:
        v13 = v12 & 7;
        if (v13 == 2)
        {
          this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<int,(AddrObjGoogle::protobuf::internal::WireFormatLite::FieldType)5>(a2, v6);
          if (!(_DWORD)this)
            return this;
          while (1)
          {
            v32 = (char *)*((_QWORD *)a2 + 1);
            v16 = (char *)*((_QWORD *)a2 + 2);
            if (v32 >= v16 || *v32 != 88)
              break;
LABEL_92:
            v18 = v32 + 1;
            *((_QWORD *)a2 + 1) = v18;
LABEL_73:
            v133 = 0;
            if (v18 >= v16 || *v18 < 0)
            {
              this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v133);
              if (!(_DWORD)this)
                return this;
              v34 = v133;
            }
            else
            {
              v34 = *v18;
              *((_QWORD *)a2 + 1) = v18 + 1;
            }
            v35 = *(_DWORD *)(v5 + 80);
            if (v35 == *(_DWORD *)(v5 + 84))
            {
              this = (uint64_t)AddrObjGoogle::protobuf::RepeatedField<int>::Reserve(v6, v35 + 1);
              v35 = *(_DWORD *)(v5 + 80);
            }
            v36 = *(_QWORD *)(v5 + 72);
            *(_DWORD *)(v5 + 80) = v35 + 1;
            *(_DWORD *)(v36 + 4 * v35) = v34;
            v37 = *(_DWORD *)(v5 + 84) - *(_DWORD *)(v5 + 80);
            if (v37 >= 1)
            {
              v38 = v37 + 1;
              do
              {
                v39 = (_BYTE *)*((_QWORD *)a2 + 1);
                v40 = *((_QWORD *)a2 + 2);
                if ((unint64_t)v39 >= v40 || *v39 != 88)
                  break;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v133 = 0;
                if ((unint64_t)(v39 + 1) >= v40 || (char)v39[1] < 0)
                {
                  this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v133);
                  if (!(_DWORD)this)
                    return this;
                  v41 = v133;
                  v36 = *(_QWORD *)v6;
                }
                else
                {
                  v41 = v39[1];
                  *((_QWORD *)a2 + 1) = v39 + 2;
                }
                v42 = *(int *)(v5 + 80);
                *(_DWORD *)(v5 + 80) = v42 + 1;
                *(_DWORD *)(v36 + 4 * v42) = v41;
                --v38;
              }
              while (v38 > 1);
            }
          }
          if (v32 == v16 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            this = 1;
            *((_BYTE *)a2 + 36) = 1;
            return this;
          }
          continue;
        }
        if ((v12 & 7) == 0)
        {
          v18 = (char *)*((_QWORD *)a2 + 1);
          v16 = (char *)*((_QWORD *)a2 + 2);
          goto LABEL_73;
        }
LABEL_34:
        if (v13 != 4)
        {
          this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, v12, v10, a4);
          if ((this & 1) == 0)
            return 0;
          continue;
        }
        return 1;
      default:
        v13 = v12 & 7;
        goto LABEL_34;
    }
  }
}

void sub_18866AC34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40F1948F29);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(AddrObjGoogle::protobuf::io::CodedInputStream *this, unsigned int *a2)
{
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v14;

  v4 = (_BYTE *)*((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if ((int)v3 - (int)v4 <= 9 && (v3 <= (unint64_t)v4 || *(char *)(v3 - 1) < 0))
  {
    v14 = 0;
    v8 = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v14);
    if ((_DWORD)v8)
      *a2 = v14;
  }
  else
  {
    v5 = (uint64_t)(v4 + 1);
    v6 = *v4 & 0x7F;
    if ((*v4 & 0x80) != 0)
    {
      v7 = (char)v4[1];
      v6 = *v4 & 0x7F | ((v7 & 0x7F) << 7);
      if (v7 < 0)
      {
        v9 = (char)v4[2];
        v6 = v6 & 0xFFE03FFF | ((v9 & 0x7F) << 14);
        if (v9 < 0)
        {
          v10 = (char)v4[3];
          v6 = v6 & 0xF01FFFFF | ((v10 & 0x7F) << 21);
          if (v10 < 0)
          {
            v11 = (char)v4[4];
            v6 |= v11 << 28;
            if (v11 < 0)
            {
              v12 = 0;
              while ((char)v4[v12 + 5] < 0)
              {
                v8 = 0;
                if ((_DWORD)++v12 == 5)
                  return v8;
              }
              v5 = (uint64_t)&v4[v12 + 6];
            }
            else
            {
              v5 = (uint64_t)(v4 + 5);
            }
          }
          else
          {
            v5 = (uint64_t)(v4 + 4);
          }
        }
        else
        {
          v5 = (uint64_t)(v4 + 3);
        }
      }
      else
      {
        v5 = (uint64_t)(v4 + 2);
      }
    }
    *a2 = v6;
    *((_QWORD *)this + 1) = v5;
    return 1;
  }
  return v8;
}

AddrObjGoogle::protobuf::DescriptorProto *AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::DescriptorProto>::New()
{
  AddrObjGoogle::protobuf::DescriptorProto *v0;

  v0 = (AddrObjGoogle::protobuf::DescriptorProto *)operator new();
  AddrObjGoogle::protobuf::DescriptorProto::DescriptorProto(v0);
  return v0;
}

void sub_18866ADA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C4073756666);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::DescriptorProto *AddrObjGoogle::protobuf::DescriptorProto::DescriptorProto(AddrObjGoogle::protobuf::DescriptorProto *this)
{
  AddrObjGoogle::protobuf::internal *v2;

  *(_QWORD *)this = &off_1E1BF5610;
  v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 2) = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 39) = 0;
  return this;
}

void sub_18866AE78(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  v8 = v4;
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v8);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v7);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v6);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v5);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v3);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::FileOptions::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  void ***v6;
  int *v7;
  uint64_t **v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  std::string *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  int v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  const AddrObjGoogle::protobuf::Message *v23;
  unsigned __int8 *v24;
  _BYTE *v25;
  uint64_t *v26;
  std::string *v27;
  _BYTE *v28;
  signed int v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  uint64_t *v33;
  std::string *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  AddrObjGoogle::protobuf::UninterpretedOption *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  AddrObjGoogle::protobuf::UnknownFieldSet *v55;
  int v56;
  BOOL v57;
  int v58;
  unsigned __int8 *v59;
  unsigned int v60;

  v5 = this;
  v6 = (void ***)(this + 32);
  v7 = (int *)(this + 72);
  v8 = (uint64_t **)(this + 8);
LABEL_2:
  while (2)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
    {
      this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      v10 = this;
      *((_DWORD *)a2 + 8) = this;
      if (!(_DWORD)this)
        return 1;
    }
    else
    {
      v10 = *v9;
      *((_DWORD *)a2 + 8) = v10;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)v10)
        return 1;
    }
    switch(v10 >> 3)
    {
      case 1u:
        v11 = v10 & 7;
        if (v11 != 2)
          goto LABEL_30;
        *(_DWORD *)(v5 + 104) |= 1u;
        v12 = *(uint64_t **)(v5 + 40);
        if (v12 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v13 = (std::string *)operator new();
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 40) = v13;
        }
        else
        {
          v13 = *(std::string **)(v5 + 40);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v13);
        if ((_DWORD)this)
        {
          v25 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v25 < *((_QWORD *)a2 + 2) && *v25 == 66)
          {
            *((_QWORD *)a2 + 1) = v25 + 1;
            goto LABEL_42;
          }
          continue;
        }
        return this;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x13u:
        goto LABEL_14;
      case 8u:
        v11 = v10 & 7;
        if (v11 != 2)
          goto LABEL_30;
LABEL_42:
        *(_DWORD *)(v5 + 104) |= 2u;
        v26 = *(uint64_t **)(v5 + 48);
        if (v26 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v27 = (std::string *)operator new();
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 48) = v27;
        }
        else
        {
          v27 = *(std::string **)(v5 + 48);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v27);
        if (!(_DWORD)this)
          return this;
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v28 >= v14 || *v28 != 72)
          continue;
        v15 = v28 + 1;
        *((_QWORD *)a2 + 1) = v15;
LABEL_49:
        v60 = 0;
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60);
          if (!(_DWORD)this)
            return this;
          v29 = v60;
        }
        else
        {
          v29 = *v15;
          *((_QWORD *)a2 + 1) = v15 + 1;
        }
        if ((v29 - 1) > 2)
        {
          AddrObjGoogle::protobuf::UnknownFieldSet::AddVarint(v6, 9, v29);
        }
        else
        {
          *(_DWORD *)(v5 + 104) |= 0x10u;
          *(_DWORD *)(v5 + 56) = v29;
        }
        v30 = (_BYTE *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v30 >= v16 || *v30 != 80)
          continue;
        v17 = v30 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_60:
        v60 = 0;
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60);
          if (!(_DWORD)this)
            return this;
          v31 = v60;
          v32 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v31 = *v17;
          v32 = v17 + 1;
          *((_QWORD *)a2 + 1) = v32;
        }
        *(_BYTE *)(v5 + 60) = v31 != 0;
        v18 = *(_DWORD *)(v5 + 104) | 4;
        *(_DWORD *)(v5 + 104) = v18;
        if ((unint64_t)v32 >= v16 || *v32 != 90)
          continue;
        *((_QWORD *)a2 + 1) = v32 + 1;
LABEL_68:
        *(_DWORD *)(v5 + 104) = v18 | 0x20;
        v33 = *(uint64_t **)(v5 + 64);
        if (v33 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v34 = (std::string *)operator new();
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 64) = v34;
        }
        else
        {
          v34 = *(std::string **)(v5 + 64);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v34);
        if (!(_DWORD)this)
          return this;
        v35 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        if ((int)v19 - (int)v35 < 2 || *v35 != 128 || v35[1] != 1)
          continue;
        v20 = v35 + 2;
        *((_QWORD *)a2 + 1) = v20;
LABEL_76:
        v60 = 0;
        if ((unint64_t)v20 >= v19 || (char)*v20 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60);
          if (!(_DWORD)this)
            return this;
          v36 = v60;
          v37 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v36 = *v20;
          v37 = v20 + 1;
          *((_QWORD *)a2 + 1) = v37;
        }
        *(_BYTE *)(v5 + 62) = v36 != 0;
        *(_DWORD *)(v5 + 104) |= 0x40u;
        if ((int)v19 - (int)v37 < 2 || *v37 != 136 || v37[1] != 1)
          continue;
        v21 = v37 + 2;
        *((_QWORD *)a2 + 1) = v21;
LABEL_85:
        v60 = 0;
        if ((unint64_t)v21 >= v19 || (char)*v21 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60);
          if (!(_DWORD)this)
            return this;
          v38 = v60;
          v39 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v38 = *v21;
          v39 = v21 + 1;
          *((_QWORD *)a2 + 1) = v39;
        }
        *(_BYTE *)(v5 + 63) = v38 != 0;
        *(_DWORD *)(v5 + 104) |= 0x80u;
        if ((int)v19 - (int)v39 < 2 || *v39 != 144 || v39[1] != 1)
          continue;
        v22 = v39 + 2;
        *((_QWORD *)a2 + 1) = v22;
LABEL_94:
        v60 = 0;
        if ((unint64_t)v22 >= v19 || (char)*v22 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60);
          if (!(_DWORD)this)
            return this;
          v40 = v60;
          v41 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v40 = *v22;
          v41 = v22 + 1;
          *((_QWORD *)a2 + 1) = v41;
        }
        *(_BYTE *)(v5 + 96) = v40 != 0;
        *(_DWORD *)(v5 + 104) |= 0x100u;
        if ((int)v19 - (int)v41 < 2 || *v41 != 160 || v41[1] != 1)
          continue;
        v24 = v41 + 2;
        *((_QWORD *)a2 + 1) = v24;
LABEL_103:
        v60 = 0;
        if ((unint64_t)v24 >= v19 || (char)*v24 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60);
          if (!(_DWORD)this)
            return this;
          v42 = v60;
          v43 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v42 = *v24;
          v43 = v24 + 1;
          *((_QWORD *)a2 + 1) = v43;
        }
        *(_BYTE *)(v5 + 61) = v42 != 0;
        *(_DWORD *)(v5 + 104) |= 8u;
        if ((int)v19 - (int)v43 >= 2 && *v43 == 186 && v43[1] == 62)
          goto LABEL_111;
        continue;
      case 9u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_30;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_49;
      case 0xAu:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_30;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_60;
      case 0xBu:
        v11 = v10 & 7;
        if (v11 != 2)
          goto LABEL_30;
        v18 = *(_DWORD *)(v5 + 104);
        goto LABEL_68;
      case 0x10u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_30;
        v20 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_76;
      case 0x11u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_30;
        v21 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_85;
      case 0x12u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_30;
        v22 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_94;
      case 0x14u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_30;
        v24 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_103;
      default:
        if (v10 >> 3 != 999)
        {
LABEL_14:
          v11 = v10 & 7;
LABEL_30:
          if (v11 == 4)
            return 1;
          if (v10 >> 6 < 0x7D)
          {
            this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, (AddrObjGoogle::protobuf::io::CodedInputStream *)v10, v6, a4);
            if ((this & 1) == 0)
              return 0;
          }
          else
          {
            v23 = (const AddrObjGoogle::protobuf::Message *)AddrObjGoogle::protobuf::FileOptions::default_instance_((AddrObjGoogle::protobuf::FileOptions *)this);
            this = AddrObjGoogle::protobuf::internal::ExtensionSet::ParseField(v8, v10, a2, v23, (AddrObjGoogle::protobuf::UnknownFieldSet *)v6);
            if ((this & 1) == 0)
              return 0;
          }
          continue;
        }
        v11 = v10 & 7;
        if (v11 != 2)
          goto LABEL_30;
        while (2)
        {
          v44 = *(_DWORD *)(v5 + 84);
          v45 = *(int *)(v5 + 80);
          if ((int)v45 >= v44)
          {
            if (v44 == *(_DWORD *)(v5 + 88))
            {
              AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v44 + 1);
              v44 = *(_DWORD *)(v5 + 84);
            }
            *(_DWORD *)(v5 + 84) = v44 + 1;
            v47 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::UninterpretedOption>::New();
            v48 = *(_QWORD *)(v5 + 72);
            v49 = *(int *)(v5 + 80);
            *(_DWORD *)(v5 + 80) = v49 + 1;
            *(_QWORD *)(v48 + 8 * v49) = v47;
          }
          else
          {
            v46 = *(_QWORD *)(v5 + 72);
            *(_DWORD *)(v5 + 80) = v45 + 1;
            v47 = *(AddrObjGoogle::protobuf::UninterpretedOption **)(v46 + 8 * v45);
          }
          v60 = 0;
          v50 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v50 >= *((_QWORD *)a2 + 2) || *v50 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60))
              return 0;
          }
          else
          {
            v60 = *v50;
            *((_QWORD *)a2 + 1) = v50 + 1;
          }
          v51 = *((_DWORD *)a2 + 14);
          v52 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v51 + 1;
          if (v51 < v52)
          {
            v53 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v60);
            if (AddrObjGoogle::protobuf::UninterpretedOption::MergePartialFromCodedStream((uint64_t)v47, a2, v54, v55))
            {
              if (*((_BYTE *)a2 + 36))
              {
                this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v53);
                v56 = *((_DWORD *)a2 + 14);
                v57 = __OFSUB__(v56, 1);
                v58 = v56 - 1;
                if (v58 < 0 == v57)
                  *((_DWORD *)a2 + 14) = v58;
                v43 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v59 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                if ((int)v59 - (int)v43 > 1 && *v43 == 186 && v43[1] == 62)
                {
LABEL_111:
                  *((_QWORD *)a2 + 1) = v43 + 2;
                  continue;
                }
                if (v43 == v59 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                {
                  *((_DWORD *)a2 + 8) = 0;
                  this = 1;
                  *((_BYTE *)a2 + 36) = 1;
                  return this;
                }
                goto LABEL_2;
              }
            }
          }
          return 0;
        }
    }
  }
}

void sub_18866B728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MapsFeature_IsAvailable_SSAO()
{
  return 1;
}

uint64_t MapsFeature_IsAvailable_ElevatedPolygons()
{
  return 1;
}

void sub_18866C1E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18866CE84(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_18866CEA4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<_GEOTileKey,void const*>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,void const*>,hashkey,eqkey,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,void const*>,eqkey,hashkey,true>,std::allocator<std::__hash_value_type<_GEOTileKey,void const*>>>::__node_insert_multi(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *i;
  unint64_t v23;
  _QWORD *v24;
  BOOL v25;
  _QWORD *v26;
  uint8x8_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  _BOOL4 v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;

  v4 = a2 + 2;
  v5 = GEOTileKeyHash(a2 + 2);
  a2[1] = v5;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_107;
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_54;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_54;
    }
    if (prime)
    {
LABEL_107:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(_QWORD **)(a1 + 16);
      if (v16)
      {
        v17 = v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        for (i = (_QWORD *)*v16; *v16; i = (_QWORD *)*v16)
        {
          v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&prime)
              v23 %= *(_QWORD *)&prime;
          }
          else
          {
            v23 &= *(_QWORD *)&prime - 1;
          }
          if (v23 == v17)
          {
            v16 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
          {
            v24 = (_QWORD *)*i;
            if (*i)
            {
              v25 = i[2] == v24[2] && i[3] == v24[3];
              v26 = i;
              if (v25)
              {
                do
                {
                  v26 = v24;
                  v24 = (_QWORD *)*v24;
                  if (!v24)
                    break;
                }
                while (i[2] == v24[2] && i[3] == v24[3]);
              }
            }
            else
            {
              v26 = i;
            }
            *v16 = v24;
            *v26 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v16;
            v16 = i;
            v17 = v23;
          }
        }
      }
      v6 = (unint64_t)prime;
    }
    else
    {
      v40 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v40)
        operator delete(v40);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_54:
  v28 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.u32[0] > 1uLL)
  {
    v29 = v5;
    if (v6 <= v5)
      v29 = v5 % v6;
  }
  else
  {
    v29 = (v6 - 1) & v5;
  }
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
  if (v30)
  {
    v31 = (_QWORD *)*v30;
    if (*v30)
    {
      v32 = 0;
      do
      {
        v33 = v31;
        v34 = v31[1];
        if (v28.u32[0] > 1uLL)
        {
          v35 = v34;
          if (v34 >= v6)
            v35 = v34 % v6;
        }
        else
        {
          v35 = v34 & (v6 - 1);
        }
        if (v35 != v29)
          break;
        if (v34 == v5)
        {
          v36 = v33[2] == *v4 && v33[3] == v4[1];
          v37 = v36;
        }
        else
        {
          v37 = 0;
        }
        if ((v32 & !v37 & 1) != 0)
          break;
        v32 |= v37;
        v31 = (_QWORD *)*v33;
        v30 = v33;
      }
      while (*v33);
    }
  }
  v38 = a2[1];
  if (v28.u32[0] > 1uLL)
  {
    if (v38 >= v6)
      v38 %= v6;
  }
  else
  {
    v38 &= v6 - 1;
  }
  if (!v30)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = a1 + 16;
    if (!*a2)
      goto LABEL_94;
    v39 = *(_QWORD *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v39 >= v6)
        v39 %= v6;
    }
    else
    {
      v39 &= v6 - 1;
    }
LABEL_93:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = a2;
    goto LABEL_94;
  }
  *a2 = *v30;
  *v30 = a2;
  if (*a2)
  {
    v39 = *(_QWORD *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v39 >= v6)
        v39 %= v6;
    }
    else
    {
      v39 &= v6 - 1;
    }
    if (v39 != v38)
      goto LABEL_93;
  }
LABEL_94:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t GEOConfigGetUint64(int a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  _getValue(a1, a2, 1, 0, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "unsignedLongLongValue");

  return v3;
}

void sub_18866E408(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18866E8E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18866ECE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _postureRegion(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  v4 = v3;
  objc_msgSend(v3, "objectForKey:", *MEMORY[0x1E0C997B0]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void GEOOnce(uint64_t a1, void *a2)
{
  void (**v3)(void);

  v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  if (!*(_BYTE *)(a1 + 4))
  {
    *(_BYTE *)(a1 + 4) = 1;
    v3[2]();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);

}

addr_obj::Fingerprints *addr_obj::Fingerprints::Fingerprints(addr_obj::Fingerprints *this, const addr_obj::AddressObjectProto *a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 *v7;
  __int128 v8;
  __int128 *v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  std::string v18;
  uint64_t v19;
  std::string v20;
  std::string __p;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (!*((_DWORD *)a2 + 10))
    goto LABEL_23;
  v4 = *((_QWORD *)a2 + 4);
  do
  {
    v5 = *(__int128 **)(*(_QWORD *)v4 + 16);
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
    }
    else
    {
      v6 = *v5;
      v18.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v6;
    }
    v7 = *(__int128 **)(*(_QWORD *)v4 + 32);
    v19 = *(_QWORD *)(*(_QWORD *)v4 + 24);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v20.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
    }
    v9 = *(__int128 **)(*(_QWORD *)v4 + 40);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
    }
    v11 = *((_QWORD *)this + 1);
    if (v11 >= *((_QWORD *)this + 2))
    {
      v12 = std::vector<addr_obj::Fingerprints::Fingerprint>::__push_back_slow_path<addr_obj::Fingerprints::Fingerprint const&>((uint64_t *)this, (__int128 *)&v18);
    }
    else
    {
      std::allocator<addr_obj::Fingerprints::Fingerprint>::construct[abi:ne180100]<addr_obj::Fingerprints::Fingerprint,addr_obj::Fingerprints::Fingerprint const&>((_DWORD)this + 16, *((std::string **)this + 1), (__int128 *)&v18);
      v12 = v11 + 80;
      *((_QWORD *)this + 1) = v11 + 80;
    }
    *((_QWORD *)this + 1) = v12;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    v4 += 8;
  }
  while (v4 != *((_QWORD *)a2 + 4) + 8 * *((int *)a2 + 10));
  if (*((_QWORD *)this + 1) == *(_QWORD *)this)
  {
LABEL_23:
    if ((*((_BYTE *)a2 + 88) & 2) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v18, "unk");
      v19 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v20, "unk");
      v13 = (__int128 *)*((_QWORD *)a2 + 2);
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
      }
      else
      {
        v14 = *v13;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
      }
      v15 = *((_QWORD *)this + 1);
      if (v15 >= *((_QWORD *)this + 2))
      {
        v16 = std::vector<addr_obj::Fingerprints::Fingerprint>::__push_back_slow_path<addr_obj::Fingerprints::Fingerprint const&>((uint64_t *)this, (__int128 *)&v18);
      }
      else
      {
        std::allocator<addr_obj::Fingerprints::Fingerprint>::construct[abi:ne180100]<addr_obj::Fingerprints::Fingerprint,addr_obj::Fingerprints::Fingerprint const&>((_DWORD)this + 16, *((std::string **)this + 1), (__int128 *)&v18);
        v16 = v15 + 80;
        *((_QWORD *)this + 1) = v15 + 80;
      }
      *((_QWORD *)this + 1) = v16;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
  return this;
}

void sub_18866F95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  std::vector<addr_obj::Fingerprints::Fingerprint>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<addr_obj::Fingerprints::Fingerprint>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<addr_obj::Fingerprints::Fingerprint>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void **std::__split_buffer<addr_obj::Fingerprints::Fingerprint>::~__split_buffer(void **a1)
{
  std::__split_buffer<addr_obj::Fingerprints::Fingerprint>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

float geo::codec::VectorTile::calculateBuildingTileBound(geo::codec::VectorTile *this, double a2, double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  float **v8;
  float result;
  float *v10;
  float *v11;
  float v12;
  float v13;
  float v14;

  v8 = (float **)geo::codec::VectorTile::_tileBoundsForBuildings(this, a2, a3, a4, a5, a6, a7);
  v10 = *v8;
  v11 = v8[1];
  if (*v8 != v11)
  {
    result = *((float *)this + 620);
    v12 = *((float *)this + 622);
    v13 = *((float *)this + 621);
    v14 = *((float *)this + 623);
    do
    {
      result = fminf(*v10, result);
      *((float *)this + 620) = result;
      v12 = fmaxf(v12, v10[2]);
      *((float *)this + 622) = v12;
      v13 = fminf(v10[1], v13);
      *((float *)this + 621) = v13;
      v14 = fmaxf(v14, v10[3]);
      *((float *)this + 623) = v14;
      v10 += 4;
    }
    while (v10 != v11);
  }
  return result;
}

void **geo::codec::VectorTile::buildingTileIntersectionInfo(void **this, double a2, double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  float v27;
  float v28;
  BOOL v29;
  float v30;
  float v31;
  BOOL v32;
  float v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;

  v8 = geo::codec::VectorTile::_tileBoundsForBuildings((geo::codec::VectorTile *)this, a2, a3, a4, a5, a6, a7);
  if (-13107 * (unsigned __int16)((*((_DWORD *)this + 582) - *((_DWORD *)this + 580)) >> 3))
  {
    v9 = this[307];
    if (v9 == this[308])
    {
      v11 = v8;
      v12 = v8[1] - *v8;
      if (v12)
      {
        v13 = v12 >> 4;
        v14 = (_BYTE *)this[309] - v9;
        if (v14 >= v12 >> 4)
        {
          bzero(this[307], v12 >> 4);
          this[308] = &v9[v13];
        }
        else
        {
          if (v12 < 0)
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v15 = 2 * v14;
          if (2 * v14 <= v13)
            v15 = v13;
          if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
            v16 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          v17 = (char *)operator new(v16);
          bzero(v17, v13);
          this[307] = v17;
          this[308] = &v17[v13];
          this[309] = &v17[v16];
          if (v9)
            operator delete(v9);
        }
      }
      v18 = v11[1];
      v19 = v18 - *v11;
      if (v18 != *v11)
      {
        v20 = 0;
        v21 = v19 >> 4;
        v22 = (uint64_t *)((char *)this[290] + 16);
        v23 = (float *)(*v11 + 8);
        do
        {
          v25 = *v22;
          v22 += 5;
          v24 = v25;
          if (v25 == 0x1102AA1513BA17CALL || v24 == 0x110205D497D8D032)
          {
            v27 = *v23;
            v28 = 1.0 - v23[1];
            v29 = v28 >= 0.0;
            v31 = *(v23 - 2);
            v30 = *(v23 - 1);
            v32 = v31 >= 0.0;
            if (v31 < 0.0 && v28 < 0.0)
              *((_BYTE *)this[307] + v20) = 1;
            v33 = 1.0 - v30;
            v34 = v28 < 0.0 || v31 >= 0.0;
            if (!v34 && v33 < 1.0)
              *((_BYTE *)this[307] + v20) = 2;
            v35 = v33 < 1.0;
            if (v33 < 1.0)
              v32 = 1;
            if (!v32)
              *((_BYTE *)this[307] + v20) = 3;
            v36 = v31 < 0.0 || v33 < 1.0;
            if (!v36 && v27 < 1.0)
              *((_BYTE *)this[307] + v20) = 4;
            if (v27 < 1.0)
              v35 = 1;
            if (!v35)
              *((_BYTE *)this[307] + v20) = 5;
            v37 = v28 < 0.0 || v27 < 1.0;
            if (!v37 && v33 < 1.0)
              *((_BYTE *)this[307] + v20) = 6;
            if (v27 >= 1.0 && v28 < 0.0)
              *((_BYTE *)this[307] + v20) = 7;
            if (v27 >= 1.0)
              v29 = 1;
            if (v31 >= 0.0 && !v29)
              *((_BYTE *)this[307] + v20) = 8;
            if (v31 >= 0.0 && v27 < 1.0 && v28 >= 0.0 && v33 < 1.0)
              *((_BYTE *)this[307] + v20) = 0;
          }
          ++v20;
          v23 += 4;
        }
        while (v21 > (unsigned __int16)v20);
      }
    }
  }
  return this + 307;
}

_QWORD *geo::codec::VectorTile::_tileBoundsForBuildings(geo::codec::VectorTile *this, double a2, double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  const float *v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  const float *v40;
  uint64_t v41;
  float *v42;
  float v43;
  _DWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int32 *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int32 *v56;
  uint64_t v57;
  unsigned __int32 v58;
  unint64_t v59;
  unsigned __int32 v60;
  unsigned __int32 v61;
  uint64_t v62;
  float32x4x3_t v63;
  float32x4x3_t v64;

  v7 = (_QWORD *)((char *)this + 2424);
  v8 = *((_QWORD *)this + 303);
  if (v8 == *((_QWORD *)this + 304))
  {
    v62 = *((_QWORD *)this + 289);
    v11 = *((_QWORD *)this + 282);
    v12 = *((_QWORD *)this + 287);
    v13 = (unsigned __int16)(-13107 * ((*((_DWORD *)this + 582) - *((_DWORD *)this + 580)) >> 3));
    if (v13 > (*((_QWORD *)this + 305) - v8) >> 4)
    {
      v14 = 16 * v13;
      v15 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)this + 306) + 16))(*((_QWORD *)this + 306), 16 * v13, 4);
      v16 = *((_QWORD *)this + 304);
      v17 = *((_QWORD *)this + 303);
      v18 = v15;
      if (v16 != v17)
      {
        do
        {
          *(_OWORD *)(v18 - 16) = *(_OWORD *)(v16 - 16);
          v18 -= 16;
          v16 -= 16;
        }
        while (v16 != v17);
        v16 = *v7;
      }
      *((_QWORD *)this + 303) = v18;
      *((_QWORD *)this + 304) = v15;
      v19 = *((_QWORD *)this + 305);
      *((_QWORD *)this + 305) = v15 + v14;
      if (v16)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 306) + 40))(*((_QWORD *)this + 306), v16, v19 - v16);
    }
    v20 = *((_QWORD *)this + 290);
    if (-13107 * (unsigned __int16)((*((_DWORD *)this + 582) - v20) >> 3))
    {
      for (i = 0; i < (unsigned __int16)(-13107 * ((*((_DWORD *)this + 582) - v20) >> 3)); ++i)
      {
        v23 = v20 + 40 * i;
        v24 = *(unsigned __int16 *)(v23 + 34);
        if (*(_WORD *)(v23 + 34))
        {
          v25 = 0;
          v26 = v62 + 20 * *(unsigned __int16 *)(v23 + 32);
          a4.i32[0] = 2139095039;
          a5.i32[0] = -8388609;
          a7.i32[0] = -8388609;
          a6.i32[0] = 2139095039;
          do
          {
            v27 = (unsigned int *)(v12 + 8 * *(unsigned int *)(v26 + 20 * v25 + 12));
            v28 = *((unsigned __int16 *)v27 + 2);
            if (*((_WORD *)v27 + 2))
            {
              v29 = *v27;
              if (v28 >= 9)
              {
                v31 = (const float *)(v11 + 12 * v29);
                v32 = v28 & 7;
                if ((v28 & 7) == 0)
                  v32 = 8;
                v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
                v30 = v28 - v32;
                v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0);
                v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
                v36 = v30;
                v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0);
                a5 = v33;
                a7 = v34;
                v38 = v35;
                v39 = v37;
                do
                {
                  v40 = v31;
                  v31 += 24;
                  v63 = vld3q_f32(v40);
                  v40 += 12;
                  v35 = vminnmq_f32(v63.val[0], v35);
                  v64 = vld3q_f32(v40);
                  v38 = vminnmq_f32(v64.val[0], v38);
                  v34 = vmaxnmq_f32(v34, v63.val[0]);
                  a7 = vmaxnmq_f32(a7, v64.val[0]);
                  v37 = vminnmq_f32(v63.val[1], v37);
                  v39 = vminnmq_f32(v64.val[1], v39);
                  v33 = vmaxnmq_f32(v33, v63.val[1]);
                  a5 = vmaxnmq_f32(a5, v64.val[1]);
                  v36 -= 8;
                }
                while (v36);
                a6 = vminnmq_f32(v37, v39);
                a6.f32[0] = vminnmvq_f32(a6);
                a4 = vminnmq_f32(v35, v38);
                a4.f32[0] = vminnmvq_f32(a4);
                a7.f32[0] = vmaxnmvq_f32(vmaxnmq_f32(v34, a7));
                a5.f32[0] = vmaxnmvq_f32(vmaxnmq_f32(v33, a5));
              }
              else
              {
                v30 = 0;
              }
              v41 = v28 - v30;
              v42 = (float *)(v11 + 4 + 12 * v30 + 12 * v29);
              do
              {
                v43 = *(v42 - 1);
                a4.f32[0] = fminf(v43, a4.f32[0]);
                a7.f32[0] = fmaxf(a7.f32[0], v43);
                a6.f32[0] = fminf(*v42, a6.f32[0]);
                a5.f32[0] = fmaxf(a5.f32[0], *v42);
                v42 += 3;
                --v41;
              }
              while (v41);
            }
            ++v25;
          }
          while (v25 != v24);
        }
        else
        {
          a7.i32[0] = -8388609;
          a6.i32[0] = 2139095039;
          a4.i32[0] = 2139095039;
          a5.i32[0] = -8388609;
        }
        v44 = (_DWORD *)*((_QWORD *)this + 304);
        v45 = *((_QWORD *)this + 305);
        if ((unint64_t)v44 < v45)
        {
          if (v44)
          {
            *v44 = a4.i32[0];
            v44[1] = a6.i32[0];
            v44[2] = a7.i32[0];
            v44[3] = a5.i32[0];
          }
          v22 = v44 + 4;
          goto LABEL_12;
        }
        v46 = v7;
        v47 = *v7;
        v48 = ((uint64_t)v44 - *v7) >> 4;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 60)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v50 = v45 - v47;
        if (v50 >> 3 > v49)
          v49 = v50 >> 3;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
          v49 = 0xFFFFFFFFFFFFFFFLL;
        if (v49)
        {
          v58 = a5.i32[0];
          v59 = a7.i64[0];
          v60 = a4.i32[0];
          v61 = a6.i32[0];
          v51 = 16 * v49;
          v52 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)this + 306) + 16))(*((_QWORD *)this + 306), 16 * v49, 4);
          v53 = (unsigned __int32 *)(v52 + 16 * v48);
          v49 = v52 + v51;
          if (v52)
          {
            *v53 = v60;
            v53[1] = v61;
            a4.i32[1] = HIDWORD(v59);
            v53[2] = v59;
            v53[3] = v58;
          }
          v7 = v46;
          v54 = *((_QWORD *)this + 304);
          v55 = *((_QWORD *)this + 303);
          v56 = v53;
          if (v54 == v55)
          {
LABEL_40:
            v22 = v53 + 4;
            *((_QWORD *)this + 303) = v56;
            *((_QWORD *)this + 304) = v53 + 4;
            v57 = *((_QWORD *)this + 305);
            *((_QWORD *)this + 305) = v49;
            if (!v54)
              goto LABEL_12;
            goto LABEL_41;
          }
        }
        else
        {
          v53 = (unsigned __int32 *)(16 * v48);
          v7 = v46;
          v54 = *((_QWORD *)this + 304);
          v55 = *((_QWORD *)this + 303);
          v56 = v53;
          if (v54 == v55)
            goto LABEL_40;
        }
        do
        {
          *((_OWORD *)v56 - 1) = *(_OWORD *)(v54 - 16);
          v56 -= 4;
          v54 -= 16;
        }
        while (v54 != v55);
        v54 = *v7;
        v22 = v53 + 4;
        *((_QWORD *)this + 303) = v56;
        *((_QWORD *)this + 304) = v53 + 4;
        v57 = *((_QWORD *)this + 305);
        *((_QWORD *)this + 305) = v49;
        if (!v54)
          goto LABEL_12;
LABEL_41:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 306) + 40))(*((_QWORD *)this + 306), v54, v57 - v54);
LABEL_12:
        *((_QWORD *)this + 304) = v22;
        v20 = *((_QWORD *)this + 290);
      }
    }
  }
  return v7;
}

void sub_188670C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v22 = v21;
  v24 = *(_QWORD **)(v19 + 40);
  if (v24 == v22)
  {
    v25 = v22;
    v26 = 4;
  }
  else
  {
    if (!v24)
      goto LABEL_6;
    v26 = 5;
    v25 = *(_QWORD **)(v19 + 40);
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:

  v27 = a17;
  if (a17 == &a14)
  {
    v28 = 4;
    v27 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_11:
  MEMORY[0x18D76437C](v19, 0x10A1C40CF014E3DLL);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_188670E38(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_prune(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  id WeakRetained;
  uint64_t v5;

  v1 = a1 + 64;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 != a1 + 64)
  {
    v3 = (_QWORD *)(a1 + 88);
    do
    {
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 48));

      if (WeakRetained)
      {
        v2 = *(_QWORD *)(v2 + 8);
      }
      else
      {
        std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::equal_to<_GEOTileKey>,std::hash<_GEOTileKey>,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>>>::__erase_unique<_GEOTileKey>(v3, (_QWORD *)(v2 + 16));
        v5 = *(_QWORD *)(v2 + 8);
        std::list<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>>::erase(v1, (char *)v2);
        v2 = v5;
      }
    }
    while (v2 != v1);
  }
}

void geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_evictWithMaxCostAndCapacity(int64x2_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 && a3 && a1[5].i64[0])
  {
    do
    {
      if (a1[9].i64[0] <= a2 && a1[9].i64[1] <= a3)
        break;
      v6 = a1[4].i64[0];
      std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::equal_to<_GEOTileKey>,std::hash<_GEOTileKey>,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>>>::__erase_unique<_GEOTileKey>(&a1[5].i64[1], (_QWORD *)(v6 + 16));
      v7 = a1[9];
      v8.i64[1] = -1;
      v8.i64[0] = *(_QWORD *)(v6 + 40);
      v8.i64[0] = vsubq_s64(v7, v8).u64[0];
      v9.i64[0] = -1;
      v9.i64[1] = -1;
      v8.i64[1] = vaddq_s64(v7, v9).i64[1];
      a1[9] = v8;
      v10 = a1[4].i64[0];
      v11 = *(_QWORD *)v10;
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
      **(_QWORD **)(v10 + 8) = v11;
      --a1[5].i64[0];
      objc_storeWeak((id *)(v10 + 48), 0);
      objc_destroyWeak((id *)(v10 + 48));
      operator delete((void *)v10);
    }
    while (a1[5].i64[0]);
  }
}

void sub_1886712AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_188671344(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1886713AC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_188671564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_188671A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  id *v26;
  id *v27;
  id *v28;

  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *GEOActiveTileGroupChangedInternalDarwinNotificationName(void *a1)
{
  id v1;
  void *v2;
  __CFString *v3;
  void *v4;

  v1 = a1;
  v2 = v1;
  if (v1 && (objc_msgSend(v1, "isDefaultConfiguration") & 1) == 0)
  {
    objc_msgSend(v2, "directorySuffix");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("com.apple.GeoServices.ActiveTileGroupChanged.internal"), "stringByAppendingFormat:", CFSTR(".%@"), v4);
    v3 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = CFSTR("com.apple.GeoServices.ActiveTileGroupChanged.internal");
  }

  return v3;
}

void sub_188671E1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _setDefault(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  char v11;
  char v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  char v26;
  char v27;
  uint64_t v28;
  NSObject *v29;
  id v30;
  id v31;
  NSObject *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  char v38;
  char v39;
  int v40;
  int v41;
  void *v42;
  id v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  NSObject *v53;
  __int128 *v54;
  uint64_t *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD v60[4];
  id v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t);
  void (*v67)(uint64_t);
  id v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char v72;
  _BYTE buf[24];
  void *v74;
  NSObject *v75;
  id v76;
  uint64_t *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  objc_opt_class();
  v48 = v5;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v8 = v5;
    v9 = v6;
    v10 = v7;
    v69 = 0;
    v70 = &v69;
    v71 = 0x2020000000;
    v72 = 1;
    if (objc_msgSend(v10, "count"))
    {
      v11 = _setDefaultNonRecursive(v8, v9, v10);
      v12 = *((_BYTE *)v70 + 24) ? v11 : 0;
      *((_BYTE *)v70 + 24) = v12;
      if ((v12 & 1) == 0)
      {
        v28 = 0;
LABEL_45:
        _Block_object_dispose(&v69, 8);

        goto LABEL_46;
      }
    }
    v63 = 0;
    v64 = &v63;
    v65 = 0x3032000000;
    v66 = __Block_byref_object_copy_;
    v67 = __Block_byref_object_dispose_;
    v13 = MEMORY[0x1E0C809B0];
    v68 = 0;
    v60[0] = MEMORY[0x1E0C809B0];
    v60[1] = 3221225472;
    v60[2] = ___setDefaultDict_block_invoke;
    v60[3] = &unk_1E1BFF9E8;
    v62 = &v63;
    v14 = v10;
    v61 = v14;
    objc_msgSend(v8, "withCache:", v60);
    if (v64[5])
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        j__GEOGetUserDefaultsLog();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend((id)v64[5], "type");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v14;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v42;
          _os_log_impl(&dword_1885A9000, v29, OS_LOG_TYPE_ERROR, "Not sure what happened, expected a dictionary at '%@' and got '%@'", buf, 0x16u);

        }
        v28 = 0;
        goto LABEL_44;
      }
      if (v64[5])
      {
        v15 = (void *)MEMORY[0x1E0C99E60];
        v44 = v9;
        objc_msgSend(v9, "allKeys");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "setWithArray:", v16);
        v46 = (void *)objc_claimAutoreleasedReturnValue();

        v17 = (void *)MEMORY[0x1E0C99E60];
        objc_msgSend((id)v64[5], "value");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "allKeys");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "setWithArray:", v19);
        v45 = (void *)objc_claimAutoreleasedReturnValue();

        v20 = (void *)objc_msgSend(v45, "mutableCopy");
        objc_msgSend(v20, "minusSet:", v46);
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v21 = v20;
        v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v56, buf, 16);
        if (v22)
        {
          v23 = *(_QWORD *)v57;
          do
          {
            for (i = 0; i != v22; ++i)
            {
              if (*(_QWORD *)v57 != v23)
                objc_enumerationMutation(v21);
              objc_msgSend(v14, "arrayByAddingObject:", *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * i));
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              v26 = _setDefault(v8, 0, v25);
              if (*((_BYTE *)v70 + 24))
                v27 = v26;
              else
                v27 = 0;
              *((_BYTE *)v70 + 24) = v27;

            }
            v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v56, buf, 16);
          }
          while (v22);
        }

        v9 = v44;
        v13 = MEMORY[0x1E0C809B0];
      }
    }
    v49 = v13;
    v50 = 3221225472;
    v51 = ___setDefaultDict_block_invoke_392;
    v52 = &unk_1E1BFFA10;
    v53 = v14;
    v55 = &v69;
    v54 = (__int128 *)v8;
    objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", &v49);
    v28 = *((_BYTE *)v70 + 24) != 0;

    v29 = v53;
LABEL_44:

    _Block_object_dispose(&v63, 8);
    goto LABEL_45;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v30 = v5;
    v47 = v6;
    v31 = v7;
    v63 = 0;
    v64 = &v63;
    v65 = 0x2020000000;
    LOBYTE(v66) = 1;
    *(_QWORD *)&v56 = 0;
    *((_QWORD *)&v56 + 1) = &v56;
    *(_QWORD *)&v57 = 0x3032000000;
    *((_QWORD *)&v57 + 1) = __Block_byref_object_copy_;
    *(_QWORD *)&v58 = __Block_byref_object_dispose_;
    *((_QWORD *)&v58 + 1) = 0;
    v49 = MEMORY[0x1E0C809B0];
    v50 = 3221225472;
    v51 = ___setDefaultArray_block_invoke;
    v52 = &unk_1E1BFF9E8;
    v54 = &v56;
    v32 = v31;
    v53 = v32;
    objc_msgSend(v30, "withCache:", &v49);
    v33 = objc_opt_class();
    if (v33 == objc_opt_class())
    {
      v34 = objc_msgSend(*(id *)(*((_QWORD *)&v56 + 1) + 40), "count");
      if (v34 > objc_msgSend(v47, "count"))
      {
        v35 = objc_msgSend(v47, "count");
        while (v35 < objc_msgSend(*(id *)(*((_QWORD *)&v56 + 1) + 40), "count"))
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%u"), v35);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject arrayByAddingObject:](v32, "arrayByAddingObject:", v36);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v38 = _setDefaultNonRecursive(v30, 0, v37);
          if (*((_BYTE *)v64 + 24))
            v39 = v38;
          else
            v39 = 0;
          *((_BYTE *)v64 + 24) = v39;

          ++v35;
          if ((v39 & 1) == 0)
            goto LABEL_39;
        }
      }
    }
    v40 = _setDefaultNonRecursive(v30, v47, v32);
    if (*((_BYTE *)v64 + 24))
      v41 = v40;
    else
      v41 = 0;
    *((_BYTE *)v64 + 24) = v41;
    if (v41)
    {
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___setDefaultArray_block_invoke_2;
      v74 = &unk_1E1BFFA38;
      v75 = v32;
      v77 = &v63;
      v76 = v30;
      objc_msgSend(v47, "enumerateObjectsUsingBlock:", buf);
      v28 = *((_BYTE *)v64 + 24) != 0;

    }
    else
    {
LABEL_39:
      v28 = 0;
    }

    _Block_object_dispose(&v56, 8);
    _Block_object_dispose(&v63, 8);

  }
  else
  {
    v28 = _setDefaultNonRecursive(v5, v6, v7);
  }
LABEL_46:

  return v28;
}

void sub_18867264C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

uint64_t _setDefaultNonRecursive(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  __CFString *v11;
  id v12;
  unsigned int v13;
  void *v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  _QWORD v22[4];
  id v23;
  id v24;
  __CFString *v25;
  id v26;
  id v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v6;
  if (!v8)
  {
    v11 = 0;
    v10 = 0;
    goto LABEL_23;
  }
  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v9 = (id)objc_claimAutoreleasedReturnValue();

  if (v9 == v8)
  {
    v10 = 0;
    v11 = CFSTR("nil");
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v10 = v8;
      v11 = CFSTR("str");
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v12 = objc_retainAutorelease(v8);
        v11 = 0;
        v13 = *(char *)objc_msgSend(v12, "objCType") - 66;
        if (v13 > 0x31)
        {
          v10 = 0;
          goto LABEL_23;
        }
        if (((1 << v13) & 0x2848200028483) != 0)
        {
          v11 = CFSTR("int");
        }
        else
        {
          v10 = 0;
          if (((1 << v13) & 0x1400000000) == 0)
            goto LABEL_23;
          v11 = CFSTR("dbl");
        }
        objc_msgSend(v12, "stringValue");
        v10 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v14 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v8, "timeIntervalSinceReferenceDate");
          objc_msgSend(v14, "numberWithDouble:");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "stringValue");
          v10 = (id)objc_claimAutoreleasedReturnValue();

          v11 = CFSTR("date");
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(v8, "base64EncodedStringWithOptions:", 0);
            v10 = (id)objc_claimAutoreleasedReturnValue();
            v11 = CFSTR("bytes");
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v10 = 0;
              v11 = CFSTR("dict");
            }
            else
            {
              objc_opt_class();
              v10 = 0;
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v11 = CFSTR("arr");
              else
                v11 = 0;
            }
          }
        }
      }
    }
  }
LABEL_23:

  v16 = v11;
  v17 = v16;
  if (v8)
  {
    if (!v16)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        j__GEOGetUserDefaultsLog();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          v29 = v7;
          v30 = 2112;
          v31 = (id)objc_opt_class();
          v20 = v31;
          _os_log_impl(&dword_1885A9000, v19, OS_LOG_TYPE_ERROR, "Can not set value for keyPath '%@' because value type '%@' is not supported", buf, 0x16u);

        }
        goto LABEL_32;
      }
    }
  }
  if (!objc_msgSend(v7, "count"))
  {
    j__GEOGetUserDefaultsLog();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1885A9000, v19, OS_LOG_TYPE_ERROR, "Can not set value for empy keyPath", buf, 2u);
    }
LABEL_32:

    v18 = 0;
    goto LABEL_33;
  }
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = ___setDefaultNonRecursive_block_invoke;
  v22[3] = &unk_1E1BFFA88;
  v23 = v7;
  v24 = v8;
  v25 = v17;
  v26 = v5;
  v27 = v10;
  objc_msgSend(v26, "withCache:", v22);

  v18 = 1;
LABEL_33:

  return v18;
}

void sub_188672C14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188672CF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18867304C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886733E4(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

id daemonXPCUtilIsolater()
{
  if (qword_1ECDBBDF8 != -1)
    dispatch_once(&qword_1ECDBBDF8, &__block_literal_global_333);
  return (id)_MergedGlobals_224;
}

void sub_1886734B0(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

uint64_t MapsFeature_IsEnabled_Maps298()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_Maps298Enabled, (uint64_t)off_1EDF4B068);
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::V1AddressObjectProto::SerializeWithCachedSizesToArray(addr_obj::V1AddressObjectProto *this, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  addr_obj::V1AddressObjectProto *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v9;
  _BYTE *v10;
  int v11;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v12;
  const void *v13;
  unsigned int *v14;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v15;
  AddrObjGoogle::protobuf::UnknownFieldSet *v16;
  uint64_t v17;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v18;
  _BYTE *v19;
  int v20;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v21;
  const void *v22;
  uint64_t v23;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v24;
  _BYTE *v25;
  int v26;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v27;
  const void *v28;
  unsigned int *v29;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v30;
  AddrObjGoogle::protobuf::UnknownFieldSet *v31;
  uint64_t v32;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v33;
  _BYTE *v34;
  int v35;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v36;
  const void *v37;
  unsigned int *v38;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v39;
  AddrObjGoogle::protobuf::UnknownFieldSet *v40;
  const AddrObjGoogle::protobuf::UnknownFieldSet *result;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  _QWORD *v44;
  uint64_t **v45;
  _QWORD *v46;

  v4 = a2;
  v5 = this;
  v6 = *((_DWORD *)this + 25);
  if ((v6 & 1) != 0)
  {
    v7 = *((_QWORD *)this + 5);
    *a2 = 10;
    v8 = a2 + 1;
    if (*(char *)(v7 + 23) < 0)
      v9 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v7 + 8);
    else
      v9 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v7 + 23);
    if (v9 > 0x7F)
    {
      v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v9, v8, a3);
    }
    else
    {
      v4[1] = v9;
      v10 = v4 + 2;
    }
    v11 = *(char *)(v7 + 23);
    if (v11 >= 0)
      v12 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v7;
    else
      v12 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v7;
    if (v11 >= 0)
      v13 = (const void *)*(unsigned __int8 *)(v7 + 23);
    else
      v13 = (const void *)*(unsigned int *)(v7 + 8);
    this = (addr_obj::V1AddressObjectProto *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v12, v13, v10, a4);
    v4 = (unsigned __int8 *)this;
    v6 = *((_DWORD *)v5 + 25);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v14 = (unsigned int *)*((_QWORD *)v5 + 6);
  if (!v14)
    v14 = *(unsigned int **)(addr_obj::V1AddressObjectProto::default_instance_(this) + 48);
  *v4 = 18;
  v15 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v14[13];
  if (v15 > 0x7F)
  {
    v16 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v15, v4 + 1, a3);
  }
  else
  {
    v4[1] = v15;
    v16 = (AddrObjGoogle::protobuf::UnknownFieldSet *)(v4 + 2);
  }
  this = addr_obj::geo3::Address::SerializeWithCachedSizesToArray((addr_obj::geo3::Address *)v14, v16, a3, a4);
  v4 = (unsigned __int8 *)this;
  v6 = *((_DWORD *)v5 + 25);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_41;
  }
LABEL_28:
  v17 = *((_QWORD *)v5 + 7);
  *v4 = 26;
  if (*(char *)(v17 + 23) < 0)
    v18 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v17 + 8);
  else
    v18 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v17 + 23);
  if (v18 > 0x7F)
  {
    v19 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v18, v4 + 1, a3);
  }
  else
  {
    v4[1] = v18;
    v19 = v4 + 2;
  }
  v20 = *(char *)(v17 + 23);
  if (v20 >= 0)
    v21 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v17;
  else
    v21 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v17;
  if (v20 >= 0)
    v22 = (const void *)*(unsigned __int8 *)(v17 + 23);
  else
    v22 = (const void *)*(unsigned int *)(v17 + 8);
  this = (addr_obj::V1AddressObjectProto *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v21, v22, v19, a4);
  v4 = (unsigned __int8 *)this;
  v6 = *((_DWORD *)v5 + 25);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_54;
  }
LABEL_41:
  v23 = *((_QWORD *)v5 + 8);
  *v4 = 34;
  if (*(char *)(v23 + 23) < 0)
    v24 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v23 + 8);
  else
    v24 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v23 + 23);
  if (v24 > 0x7F)
  {
    v25 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v24, v4 + 1, a3);
  }
  else
  {
    v4[1] = v24;
    v25 = v4 + 2;
  }
  v26 = *(char *)(v23 + 23);
  if (v26 >= 0)
    v27 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v23;
  else
    v27 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v23;
  if (v26 >= 0)
    v28 = (const void *)*(unsigned __int8 *)(v23 + 23);
  else
    v28 = (const void *)*(unsigned int *)(v23 + 8);
  this = (addr_obj::V1AddressObjectProto *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v27, v28, v25, a4);
  v4 = (unsigned __int8 *)this;
  v6 = *((_DWORD *)v5 + 25);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_60;
  }
LABEL_54:
  v29 = (unsigned int *)*((_QWORD *)v5 + 9);
  if (!v29)
    v29 = *(unsigned int **)(addr_obj::V1AddressObjectProto::default_instance_(this) + 72);
  *v4 = 42;
  v30 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v29[60];
  if (v30 > 0x7F)
  {
    v31 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v30, v4 + 1, a3);
  }
  else
  {
    v4[1] = v30;
    v31 = (AddrObjGoogle::protobuf::UnknownFieldSet *)(v4 + 2);
  }
  this = addr_obj::geo3::StructuredAddress::SerializeWithCachedSizesToArray((addr_obj::geo3::StructuredAddress *)v29, v31, a3, a4);
  v4 = (unsigned __int8 *)this;
  v6 = *((_DWORD *)v5 + 25);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_79;
    goto LABEL_73;
  }
LABEL_60:
  v32 = *((_QWORD *)v5 + 10);
  *v4 = 50;
  if (*(char *)(v32 + 23) < 0)
    v33 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v32 + 8);
  else
    v33 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v32 + 23);
  if (v33 > 0x7F)
  {
    v34 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v33, v4 + 1, a3);
  }
  else
  {
    v4[1] = v33;
    v34 = v4 + 2;
  }
  v35 = *(char *)(v32 + 23);
  if (v35 >= 0)
    v36 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v32;
  else
    v36 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v32;
  if (v35 >= 0)
    v37 = (const void *)*(unsigned __int8 *)(v32 + 23);
  else
    v37 = (const void *)*(unsigned int *)(v32 + 8);
  this = (addr_obj::V1AddressObjectProto *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v36, v37, v34, a4);
  v4 = (unsigned __int8 *)this;
  if ((*((_DWORD *)v5 + 25) & 0x40) == 0)
    goto LABEL_79;
LABEL_73:
  v38 = (unsigned int *)*((_QWORD *)v5 + 11);
  if (!v38)
    v38 = *(unsigned int **)(addr_obj::V1AddressObjectProto::default_instance_(this) + 88);
  *v4 = 58;
  v39 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v38[13];
  if (v39 > 0x7F)
  {
    v40 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v39, v4 + 1, a3);
  }
  else
  {
    v4[1] = v39;
    v40 = (AddrObjGoogle::protobuf::UnknownFieldSet *)(v4 + 2);
  }
  v4 = (unsigned __int8 *)addr_obj::geo3::Address::SerializeWithCachedSizesToArray((addr_obj::geo3::Address *)v38, v40, a3, a4);
LABEL_79:
  result = (const AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::ExtensionSet::SerializeWithCachedSizesToArray((addr_obj::V1AddressObjectProto *)((char *)v5 + 8), 100, 200, v4);
  v46 = (_QWORD *)*((_QWORD *)v5 + 4);
  v45 = (uint64_t **)((char *)v5 + 32);
  v44 = v46;
  if (v46)
  {
    if (*v44 != v44[1])
      return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v45, result, v42, v43);
  }
  return result;
}

void addr_obj::V1AddressObject::init(addr_obj::V1AddressObject *this, std::string::size_type *a2)
{
  std::string *v4;
  std::string::size_type v5;
  int v6;
  const addr_obj::geo3::Address *v7;
  const addr_obj::geo3::StructuredAddress *v8;
  const addr_obj::geo3::Address *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  addr_obj::Logger *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  std::runtime_error *exception;
  void *v23[2];
  char v24;
  std::string v25;
  void *v26[2];
  char v27;
  void *v28[2];
  unsigned __int8 v29;
  void *__p[2];
  unsigned __int8 v31;
  _QWORD v32[33];

  if ((a2[11] & 0x20) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v32);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"v1address is missing in the ", 28);
    v11 = addr_obj::operator<<(v10, (AddrObjGoogle::protobuf::Message *)a2);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; base64==", 10);
    (*(void (**)(void **__return_ptr, addr_obj::V1AddressObject *))(*(_QWORD *)this + 200))(__p, this);
    if ((v31 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v31 & 0x80u) == 0)
      v14 = v31;
    else
      v14 = (uint64_t)__p[1];
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"; library version: ",
            19);
    v17 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"11.3.0", 6);
    if ((char)v31 < 0)
      operator delete(__p[0]);
    if (addr_obj::Logger::isInitialized(v17))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::stringbuf::str();
      if ((v29 & 0x80u) == 0)
        v18 = v28;
      else
        v18 = (void **)v28[0];
      if ((v29 & 0x80u) == 0)
        v19 = v29;
      else
        v19 = (uint64_t)v28[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v18, v19);
      if ((char)v29 < 0)
        operator delete(v28[0]);
      std::string::basic_string[abi:ne180100]<0>(v28, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V1AddressObject.cpp");
      std::string::basic_string[abi:ne180100]<0>(v26, "init");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v23, "");
      addr_obj::Logger::log(16, (uint64_t)v28, 57, (uint64_t)v26, (uint64_t)&v25, (uint64_t)v23);
      if (v24 < 0)
        operator delete(v23[0]);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (v27 < 0)
        operator delete(v26[0]);
      if ((char)v29 < 0)
        operator delete(v28[0]);
      std::ostringstream::~ostringstream((uint64_t)__p);
    }
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"; at ", 5);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V1AddressObject.cpp", 89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)__p, (uint64_t)v28);
  }
  v4 = addr_obj::AddressObjectBase::fromProto(this, (const std::string **)a2);
  v5 = a2[8];
  if (!v5)
  {
    v4 = (std::string *)addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)v4);
    v5 = v4[2].__r_.__value_.__r.__words[2];
  }
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 1) != 0)
  {
    v4 = std::string::operator=((std::string *)((char *)this + 248), *(const std::string **)(v5 + 40));
    v6 = *(_DWORD *)(v5 + 100);
  }
  if ((v6 & 2) != 0)
  {
    v7 = *(const addr_obj::geo3::Address **)(v5 + 48);
    if (!v7)
      v7 = *(const addr_obj::geo3::Address **)(addr_obj::V1AddressObjectProto::default_instance_((addr_obj::V1AddressObjectProto *)v4)
                                             + 48);
    addr_obj::geo3::Address::CopyFrom((addr_obj::V1AddressObject *)((char *)this + 272), v7);
    v6 = *(_DWORD *)(v5 + 100);
  }
  if ((v6 & 4) != 0)
  {
    v4 = std::string::operator=((std::string *)this + 14, *(const std::string **)(v5 + 56));
    v6 = *(_DWORD *)(v5 + 100);
  }
  if ((v6 & 8) != 0)
  {
    v4 = std::string::operator=((std::string *)this + 15, *(const std::string **)(v5 + 64));
    v6 = *(_DWORD *)(v5 + 100);
  }
  if ((v6 & 0x10) != 0)
  {
    v8 = *(const addr_obj::geo3::StructuredAddress **)(v5 + 72);
    if (!v8)
      v8 = *(const addr_obj::geo3::StructuredAddress **)(addr_obj::V1AddressObjectProto::default_instance_((addr_obj::V1AddressObjectProto *)v4)
                                                       + 72);
    addr_obj::geo3::StructuredAddress::CopyFrom((addr_obj::V1AddressObject *)((char *)this + 384), v8);
    v6 = *(_DWORD *)(v5 + 100);
  }
  if ((v6 & 0x20) != 0)
  {
    v4 = std::string::operator=((std::string *)((char *)this + 632), *(const std::string **)(v5 + 80));
    v6 = *(_DWORD *)(v5 + 100);
  }
  if ((v6 & 0x40) != 0)
  {
    v9 = *(const addr_obj::geo3::Address **)(v5 + 88);
    if (!v9)
      v9 = *(const addr_obj::geo3::Address **)(addr_obj::V1AddressObjectProto::default_instance_((addr_obj::V1AddressObjectProto *)v4)
                                             + 88);
    addr_obj::geo3::Address::CopyFrom((addr_obj::V1AddressObject *)((char *)this + 656), v9);
  }
}

void sub_188674188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v32;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_1886741E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v27;

  std::ostringstream::~ostringstream((uint64_t)&v27);
  _Unwind_Resume(a1);
}

void addr_obj::geo3::StructuredAddress::CopyFrom(addr_obj::geo3::StructuredAddress *this, const addr_obj::geo3::StructuredAddress *a2)
{
  if (a2 != this)
  {
    (*(void (**)(addr_obj::geo3::StructuredAddress *))(*(_QWORD *)this + 32))(this);
    addr_obj::geo3::StructuredAddress::MergeFrom(this, a2);
  }
}

void sub_18867444C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (a18 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x188674380);
  }
  _Unwind_Resume(a1);
}

void addr_obj::V1AddressObject::getAddress(addr_obj::V1AddressObject *this@<X0>, std::string *a2@<X8>)
{
  addr_obj::geo3::Address *v4;
  const char *v5;
  addr_obj::Logger *v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  void *v10[2];
  char v11;
  void *v12;
  char v13;
  void *v14[2];
  char v15;
  void *__p[2];
  unsigned __int8 v17;
  void *v18[2];
  char v19;
  void *v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _BYTE v25[64];

  v4 = (addr_obj::geo3::Address *)addr_obj::geo3::Address::Address((addr_obj::geo3::Address *)v25);
  addr_obj::geo3::Address::CopyFrom(v4, (addr_obj::V1AddressObject *)((char *)this + 272));
  addr_obj::brace((addr_obj *)v25, (addr_obj::geo3::Address *)"()", v5);
  v23 = 0uLL;
  v24 = 0;
  v6 = (addr_obj::Logger *)AddrObjGoogle::protobuf::MessageLite::SerializeToString((uint64_t)v25, (uint64_t)&v23);
  if ((_DWORD)v6)
  {
    addr_obj::SerializedAddress::SerializedAddress(a2, &v23);
  }
  else
  {
    if (addr_obj::Logger::isInitialized(v6))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"failed SerializeToString() for ", 31);
      addr_obj::AddressObjectBase::asBase64String(this, __p);
      if ((v17 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((v17 & 0x80u) == 0)
        v9 = v17;
      else
        v9 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      if ((char)v17 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V1AddressObject.cpp");
      std::string::basic_string[abi:ne180100]<0>(v14, "getAddress");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v10, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 149, (uint64_t)v14, (uint64_t)&v12, (uint64_t)v10);
      if (v11 < 0)
        operator delete(v10[0]);
      if (v13 < 0)
        operator delete(v12);
      if (v15 < 0)
        operator delete(v14[0]);
      if ((char)v17 < 0)
        operator delete(__p[0]);
      v18[0] = *(void **)MEMORY[0x1E0DE4F60];
      *(void **)((char *)v18 + *((_QWORD *)v18[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      v18[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
      if (v21 < 0)
        operator delete(v20);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D764310](&v22);
    }
    std::string::basic_string[abi:ne180100]<0>(v18, "");
    addr_obj::SerializedAddress::SerializedAddress(a2, (__int128 *)v18);
    if (v19 < 0)
      operator delete(v18[0]);
  }
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
  addr_obj::geo3::Address::~Address((addr_obj::geo3::Address *)v25);
}

void sub_1886746E8(void *__p, int a2, int a3, __int16 a4, char a5, char a6, std::string *a7, void *a8, void *__pa, int a10, __int16 a11, char a12, char a13, void *a14, void *a15, int a16, __int16 a17, char a18, char a19, void *a20,__int128 a21,std::string::size_type a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v36;
  void *v37;
  const std::string::value_type *v38;
  std::string *v39;
  __int128 v40;

  if (SHIBYTE(a14) < 0)
    operator delete(__pa);
  if (SHIBYTE(a20) < 0)
    operator delete(a15);
  if (SHIBYTE(a22) < 0)
    operator delete((void *)a21);
  if (a28 < 0)
    operator delete(a23);
  std::ostringstream::~ostringstream((uint64_t)&a29);
  v36 = __cxa_begin_catch(__p);
  if (a2 == 2)
  {
    v37 = v36;
    std::string::basic_string[abi:ne180100]<0>(&a29, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V1AddressObject.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a23, "getAddress");
    std::string::basic_string[abi:ne180100]<0>(&a15, "Exception caught during formatting of the log line: ");
    v38 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v37 + 16))(v37);
    v39 = std::string::append((std::string *)&a15, v38);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    a22 = v39->__r_.__value_.__r.__words[2];
    a21 = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a29, 149, (uint64_t)&a23, (uint64_t)&a21, (uint64_t)&__pa);
    if (SHIBYTE(a14) < 0)
      operator delete(__pa);
    if (SHIBYTE(a22) < 0)
      operator delete((void *)a21);
    if (SHIBYTE(a20) < 0)
      operator delete(a15);
    if (a28 < 0)
      operator delete(a23);
    if (a34 < 0)
      operator delete(a29);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a29, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V1AddressObject.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a23, "getAddress");
    std::string::basic_string[abi:ne180100]<0>(&a21, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a15, "");
    addr_obj::Logger::log(16, (uint64_t)&a29, 149, (uint64_t)&a23, (uint64_t)&a21, (uint64_t)&a15);
    if (SHIBYTE(a20) < 0)
      operator delete(a15);
    if (SHIBYTE(a22) < 0)
      operator delete((void *)a21);
    if (a28 < 0)
      operator delete(a23);
    if (a34 < 0)
      operator delete(a29);
  }
  __cxa_end_catch();
  JUMPOUT(0x18867468CLL);
}

void sub_18867493C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x188674890);
}

void sub_188674A4C()
{
  __cxa_end_catch();
  JUMPOUT(0x188674A60);
}

uint64_t AddrObjGoogle::protobuf::MessageLite::SerializeToString(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  AddrObjGoogle::protobuf::MessageLite::AppendPartialToString(a1, (std::string *)a2);
  return 1;
}

uint64_t AddrObjGoogle::protobuf::MessageLite::AppendPartialToString(uint64_t a1, std::string *a2)
{
  std::string *v2;
  std::string::size_type size;
  int v5;
  uint64_t v6;
  int v7;

  v2 = a2;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    size = a2->__r_.__value_.__l.__size_;
  else
    LODWORD(size) = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  std::string::resize(v2, v5 + (int)size, 0);
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    if (v2->__r_.__value_.__l.__size_)
    {
      v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
      goto LABEL_10;
    }
  }
  else if (*((_BYTE *)&v2->__r_.__value_.__s + 23))
  {
    goto LABEL_10;
  }
  v2 = 0;
LABEL_10:
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, (uint64_t)v2 + (int)size)
     - ((_QWORD)v2
      + (int)size);
  if (v6 != v5)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
    sub_188819CFC(v5, v7, v6);
  }
  return 1;
}

uint64_t addr_obj::geo3::Address::ByteSize(addr_obj::geo3::Address *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  int v3;
  int v4;
  addr_obj::geo3::StructuredAddress *v5;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _QWORD *v20;

  v3 = *((_DWORD *)this + 14);
  if ((v3 & 0x1FE) == 0)
  {
    v4 = 0;
    goto LABEL_18;
  }
  if ((v3 & 2) == 0)
  {
    v4 = 0;
    if ((v3 & 4) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v5 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)this + 5);
  if (!v5)
    v5 = *(addr_obj::geo3::StructuredAddress **)(addr_obj::geo3::Address::default_instance_(0) + 40);
  v6 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::geo3::StructuredAddress::ByteSize(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
  else
    v8 = 1;
  v4 = v7 + v8 + 1;
  if ((*((_DWORD *)this + 14) & 4) != 0)
  {
LABEL_12:
    v9 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
    if ((v9 & 0x80000000) != 0)
    {
      v10 = 12;
    }
    else if (v9 >= 0x80)
    {
      v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9) + 2;
    }
    else
    {
      v10 = 3;
    }
    v4 += v10;
  }
LABEL_18:
  v11 = *((_DWORD *)this + 6);
  v12 = (v11 + v4);
  if (v11 >= 1)
  {
    for (i = 0; i < v11; ++i)
    {
      v14 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      v15 = *(unsigned __int8 *)(v14 + 23);
      v16 = v15;
      v17 = *(_QWORD *)(v14 + 8);
      if ((v15 & 0x80u) == 0)
        v18 = *(unsigned __int8 *)(v14 + 23);
      else
        v18 = v17;
      if (v18 >= 0x80)
      {
        v19 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v18);
        v15 = *(unsigned __int8 *)(v14 + 23);
        v17 = *(_QWORD *)(v14 + 8);
        v11 = *((_DWORD *)this + 6);
        v16 = *(_BYTE *)(v14 + 23);
      }
      else
      {
        v19 = 1;
      }
      if (v16 < 0)
        v15 = v17;
      v12 = (v19 + v12 + v15);
    }
  }
  v20 = (_QWORD *)*((_QWORD *)this + 1);
  if (v20 && *v20 != v20[1])
    v12 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)+ v12;
  *((_DWORD *)this + 13) = v12;
  return v12;
}

uint64_t AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(AddrObjGoogle::protobuf::io::CodedOutputStream *this)
{
  int v1;
  int v2;
  unsigned int v3;

  if (this >> 28)
    v1 = 5;
  else
    v1 = 4;
  if (this >= 0x200000)
    v2 = v1;
  else
    v2 = 3;
  if (this >= 0x4000)
    v3 = v2;
  else
    v3 = 2;
  if (this >= 0x80)
    return v3;
  else
    return 1;
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::geo3::Address::SerializeWithCachedSizesToArray(addr_obj::geo3::Address *this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  addr_obj::geo3::Address *v5;
  uint64_t v6;
  uint64_t v7;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v8;
  _BYTE *v9;
  int v10;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v11;
  const void *v12;
  int v13;
  unsigned int *v14;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v15;
  AddrObjGoogle::protobuf::UnknownFieldSet *v16;
  unint64_t v17;
  _BYTE *v18;
  AddrObjGoogle::protobuf::UnknownFieldSet *v19;
  _QWORD *v20;
  uint64_t **v21;
  _QWORD *v22;

  v5 = this;
  if (*((int *)this + 6) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*((_QWORD *)v5 + 2) + 8 * v6);
      *(_BYTE *)a2 = 90;
      if (*(char *)(v7 + 23) < 0)
        v8 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v7 + 8);
      else
        v8 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v7 + 23);
      if (v8 > 0x7F)
      {
        v9 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v8, (_BYTE *)a2 + 1, a3);
      }
      else
      {
        *((_BYTE *)a2 + 1) = (_BYTE)v8;
        v9 = (char *)a2 + 2;
      }
      v10 = *(char *)(v7 + 23);
      if (v10 >= 0)
        v11 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v7;
      else
        v11 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v7;
      if (v10 >= 0)
        v12 = (const void *)*(unsigned __int8 *)(v7 + 23);
      else
        v12 = (const void *)*(unsigned int *)(v7 + 8);
      this = (addr_obj::geo3::Address *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v11, v12, v9, a4);
      a2 = this;
      ++v6;
    }
    while (v6 < *((int *)v5 + 6));
  }
  v13 = *((_DWORD *)v5 + 14);
  if ((v13 & 2) != 0)
  {
    v14 = (unsigned int *)*((_QWORD *)v5 + 5);
    if (!v14)
      v14 = *(unsigned int **)(addr_obj::geo3::Address::default_instance_(this) + 40);
    *(_BYTE *)a2 = 122;
    v15 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v14[60];
    if (v15 > 0x7F)
    {
      v16 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v15, (_BYTE *)a2 + 1, a3);
    }
    else
    {
      *((_BYTE *)a2 + 1) = (_BYTE)v15;
      v16 = (AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
    a2 = addr_obj::geo3::StructuredAddress::SerializeWithCachedSizesToArray((addr_obj::geo3::StructuredAddress *)v14, v16, a3, a4);
    v13 = *((_DWORD *)v5 + 14);
  }
  if ((v13 & 4) != 0)
  {
    v17 = *((int *)v5 + 12);
    *(_WORD *)a2 = 384;
    v18 = (char *)a2 + 2;
    if ((v17 & 0x80000000) != 0)
    {
      v19 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v17, v18, a3);
    }
    else
    {
      if (v17 <= 0x7F)
      {
        *((_BYTE *)a2 + 2) = v17;
        a2 = (AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        goto LABEL_30;
      }
      v19 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)v17, v18, a3);
    }
    a2 = v19;
  }
LABEL_30:
  v22 = (_QWORD *)*((_QWORD *)v5 + 1);
  v21 = (uint64_t **)((char *)v5 + 8);
  v20 = v22;
  if (!v22 || *v20 == v20[1])
    return a2;
  else
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v21, a2, a3, a4);
}

_BYTE *AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(AddrObjGoogle::protobuf::io::CodedOutputStream *this, _BYTE *a2, unsigned __int8 *a3)
{
  _BYTE *v3;

  *a2 = this | 0x80;
  if (this < 0x80)
  {
    *a2 = this & 0x7F;
    return a2 + 1;
  }
  else
  {
    a2[1] = (this >> 7) | 0x80;
    if (this < 0x4000)
    {
      a2[1] = (this >> 7) & 0x7F;
      return a2 + 2;
    }
    else
    {
      a2[2] = (this >> 14) | 0x80;
      if (this < 0x200000)
      {
        a2[2] = (this >> 14) & 0x7F;
        return a2 + 3;
      }
      else
      {
        a2[3] = (this >> 21) | 0x80;
        if (this >> 28)
        {
          a2[4] = this >> 28;
          return a2 + 5;
        }
        else
        {
          v3 = a2 + 4;
          a2[3] = (this >> 21) & 0x7F;
        }
      }
    }
  }
  return v3;
}

uint64_t addr_obj::geo3::StructuredAddress::ByteSize(addr_obj::geo3::StructuredAddress *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  char v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  char v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  int v107;
  int v108;
  uint64_t i;
  uint64_t v110;
  int v111;
  char v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  int v116;
  int v117;
  uint64_t j;
  uint64_t v119;
  int v120;
  char v121;
  uint64_t v122;
  unint64_t v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  _QWORD *v135;

  v3 = *((_DWORD *)this + 61);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_85;
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_24;
    goto LABEL_15;
  }
  v5 = *((_QWORD *)this + 2);
  v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = v8;
  if (v9 >= 0x80)
  {
    v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v9);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v8 = *(_QWORD *)(v5 + 8);
    v3 = *((_DWORD *)this + 61);
    v7 = *(_BYTE *)(v5 + 23);
  }
  else
  {
    v10 = 1;
  }
  if (v7 < 0)
    v6 = v8;
  v4 = v10 + v6 + 1;
  if ((v3 & 2) != 0)
  {
LABEL_15:
    v11 = *((_QWORD *)this + 3);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = v12;
    v14 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = v14;
    if (v15 >= 0x80)
    {
      v16 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v15);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v14 = *(_QWORD *)(v11 + 8);
      v3 = *((_DWORD *)this + 61);
      v13 = *(_BYTE *)(v11 + 23);
    }
    else
    {
      v16 = 1;
    }
    if (v13 < 0)
      v12 = v14;
    v4 += v16 + v12 + 1;
  }
LABEL_24:
  if ((v3 & 4) != 0)
  {
    v17 = *((_QWORD *)this + 4);
    v18 = *(unsigned __int8 *)(v17 + 23);
    v19 = v18;
    v20 = *(_QWORD *)(v17 + 8);
    if ((v18 & 0x80u) == 0)
      v21 = *(unsigned __int8 *)(v17 + 23);
    else
      v21 = v20;
    if (v21 >= 0x80)
    {
      v22 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v21);
      v18 = *(unsigned __int8 *)(v17 + 23);
      v20 = *(_QWORD *)(v17 + 8);
      v3 = *((_DWORD *)this + 61);
      v19 = *(_BYTE *)(v17 + 23);
    }
    else
    {
      v22 = 1;
    }
    if (v19 < 0)
      v18 = v20;
    v4 += v22 + v18 + 1;
    if ((v3 & 8) == 0)
    {
LABEL_26:
      if ((v3 & 0x10) == 0)
        goto LABEL_27;
      goto LABEL_49;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_26;
  }
  v23 = *((_QWORD *)this + 5);
  v24 = *(unsigned __int8 *)(v23 + 23);
  v25 = v24;
  v26 = *(_QWORD *)(v23 + 8);
  if ((v24 & 0x80u) == 0)
    v27 = *(unsigned __int8 *)(v23 + 23);
  else
    v27 = v26;
  if (v27 >= 0x80)
  {
    v28 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v27);
    v24 = *(unsigned __int8 *)(v23 + 23);
    v26 = *(_QWORD *)(v23 + 8);
    v3 = *((_DWORD *)this + 61);
    v25 = *(_BYTE *)(v23 + 23);
  }
  else
  {
    v28 = 1;
  }
  if (v25 < 0)
    v24 = v26;
  v4 += v28 + v24 + 1;
  if ((v3 & 0x10) == 0)
  {
LABEL_27:
    if ((v3 & 0x20) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_49:
  v29 = *((_QWORD *)this + 6);
  v30 = *(unsigned __int8 *)(v29 + 23);
  v31 = v30;
  v32 = *(_QWORD *)(v29 + 8);
  if ((v30 & 0x80u) == 0)
    v33 = *(unsigned __int8 *)(v29 + 23);
  else
    v33 = v32;
  if (v33 >= 0x80)
  {
    v34 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v33);
    v30 = *(unsigned __int8 *)(v29 + 23);
    v32 = *(_QWORD *)(v29 + 8);
    v3 = *((_DWORD *)this + 61);
    v31 = *(_BYTE *)(v29 + 23);
  }
  else
  {
    v34 = 1;
  }
  if (v31 < 0)
    v30 = v32;
  v4 += v34 + v30 + 1;
  if ((v3 & 0x20) == 0)
  {
LABEL_28:
    if ((v3 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_58:
  v35 = *((_QWORD *)this + 7);
  v36 = *(unsigned __int8 *)(v35 + 23);
  v37 = v36;
  v38 = *(_QWORD *)(v35 + 8);
  if ((v36 & 0x80u) == 0)
    v39 = *(unsigned __int8 *)(v35 + 23);
  else
    v39 = v38;
  if (v39 >= 0x80)
  {
    v40 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v39);
    v36 = *(unsigned __int8 *)(v35 + 23);
    v38 = *(_QWORD *)(v35 + 8);
    v3 = *((_DWORD *)this + 61);
    v37 = *(_BYTE *)(v35 + 23);
  }
  else
  {
    v40 = 1;
  }
  if (v37 < 0)
    v36 = v38;
  v4 += v40 + v36 + 1;
  if ((v3 & 0x40) == 0)
  {
LABEL_29:
    if ((v3 & 0x80) == 0)
      goto LABEL_85;
    goto LABEL_76;
  }
LABEL_67:
  v41 = *((_QWORD *)this + 8);
  v42 = *(unsigned __int8 *)(v41 + 23);
  v43 = v42;
  v44 = *(_QWORD *)(v41 + 8);
  if ((v42 & 0x80u) == 0)
    v45 = *(unsigned __int8 *)(v41 + 23);
  else
    v45 = v44;
  if (v45 >= 0x80)
  {
    v46 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v45);
    v42 = *(unsigned __int8 *)(v41 + 23);
    v44 = *(_QWORD *)(v41 + 8);
    v3 = *((_DWORD *)this + 61);
    v43 = *(_BYTE *)(v41 + 23);
  }
  else
  {
    v46 = 1;
  }
  if (v43 < 0)
    v42 = v44;
  v4 += v46 + v42 + 1;
  if ((v3 & 0x80) != 0)
  {
LABEL_76:
    v47 = *((_QWORD *)this + 9);
    v48 = *(unsigned __int8 *)(v47 + 23);
    v49 = v48;
    v50 = *(_QWORD *)(v47 + 8);
    if ((v48 & 0x80u) == 0)
      v51 = *(unsigned __int8 *)(v47 + 23);
    else
      v51 = v50;
    if (v51 >= 0x80)
    {
      v52 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v51);
      v48 = *(unsigned __int8 *)(v47 + 23);
      v50 = *(_QWORD *)(v47 + 8);
      v3 = *((_DWORD *)this + 61);
      v49 = *(_BYTE *)(v47 + 23);
    }
    else
    {
      v52 = 1;
    }
    if (v49 < 0)
      v48 = v50;
    v4 += v52 + v48 + 1;
  }
LABEL_85:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_157;
  if ((v3 & 0x100) != 0)
  {
    v53 = *((_QWORD *)this + 10);
    v54 = *(unsigned __int8 *)(v53 + 23);
    v55 = v54;
    v56 = *(_QWORD *)(v53 + 8);
    if ((v54 & 0x80u) == 0)
      v57 = *(unsigned __int8 *)(v53 + 23);
    else
      v57 = v56;
    if (v57 >= 0x80)
    {
      v58 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v57);
      v54 = *(unsigned __int8 *)(v53 + 23);
      v56 = *(_QWORD *)(v53 + 8);
      v3 = *((_DWORD *)this + 61);
      v55 = *(_BYTE *)(v53 + 23);
    }
    else
    {
      v58 = 1;
    }
    if (v55 < 0)
      v54 = v56;
    v4 += v58 + v54 + 1;
    if ((v3 & 0x200) == 0)
    {
LABEL_88:
      if ((v3 & 0x400) == 0)
        goto LABEL_89;
      goto LABEL_112;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_88;
  }
  v59 = *((_QWORD *)this + 11);
  v60 = *(unsigned __int8 *)(v59 + 23);
  v61 = v60;
  v62 = *(_QWORD *)(v59 + 8);
  if ((v60 & 0x80u) == 0)
    v63 = *(unsigned __int8 *)(v59 + 23);
  else
    v63 = v62;
  if (v63 >= 0x80)
  {
    v64 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v63);
    v60 = *(unsigned __int8 *)(v59 + 23);
    v62 = *(_QWORD *)(v59 + 8);
    v3 = *((_DWORD *)this + 61);
    v61 = *(_BYTE *)(v59 + 23);
  }
  else
  {
    v64 = 1;
  }
  if (v61 < 0)
    v60 = v62;
  v4 += v64 + v60 + 1;
  if ((v3 & 0x400) == 0)
  {
LABEL_89:
    if ((v3 & 0x800) == 0)
      goto LABEL_90;
    goto LABEL_121;
  }
LABEL_112:
  v65 = *((_QWORD *)this + 12);
  v66 = *(unsigned __int8 *)(v65 + 23);
  v67 = v66;
  v68 = *(_QWORD *)(v65 + 8);
  if ((v66 & 0x80u) == 0)
    v69 = *(unsigned __int8 *)(v65 + 23);
  else
    v69 = v68;
  if (v69 >= 0x80)
  {
    v70 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v69);
    v66 = *(unsigned __int8 *)(v65 + 23);
    v68 = *(_QWORD *)(v65 + 8);
    v3 = *((_DWORD *)this + 61);
    v67 = *(_BYTE *)(v65 + 23);
  }
  else
  {
    v70 = 1;
  }
  if (v67 < 0)
    v66 = v68;
  v4 += v70 + v66 + 1;
  if ((v3 & 0x800) == 0)
  {
LABEL_90:
    if ((v3 & 0x1000) == 0)
      goto LABEL_91;
    goto LABEL_130;
  }
LABEL_121:
  v71 = *((_QWORD *)this + 13);
  v72 = *(unsigned __int8 *)(v71 + 23);
  v73 = v72;
  v74 = *(_QWORD *)(v71 + 8);
  if ((v72 & 0x80u) == 0)
    v75 = *(unsigned __int8 *)(v71 + 23);
  else
    v75 = v74;
  if (v75 >= 0x80)
  {
    v76 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v75);
    v72 = *(unsigned __int8 *)(v71 + 23);
    v74 = *(_QWORD *)(v71 + 8);
    v3 = *((_DWORD *)this + 61);
    v73 = *(_BYTE *)(v71 + 23);
  }
  else
  {
    v76 = 1;
  }
  if (v73 < 0)
    v72 = v74;
  v4 += v76 + v72 + 1;
  if ((v3 & 0x1000) == 0)
  {
LABEL_91:
    if ((v3 & 0x4000) == 0)
      goto LABEL_92;
    goto LABEL_139;
  }
LABEL_130:
  v77 = *((_QWORD *)this + 14);
  v78 = *(unsigned __int8 *)(v77 + 23);
  v79 = v78;
  v80 = *(_QWORD *)(v77 + 8);
  if ((v78 & 0x80u) == 0)
    v81 = *(unsigned __int8 *)(v77 + 23);
  else
    v81 = v80;
  if (v81 >= 0x80)
  {
    v82 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v81);
    v78 = *(unsigned __int8 *)(v77 + 23);
    v80 = *(_QWORD *)(v77 + 8);
    v3 = *((_DWORD *)this + 61);
    v79 = *(_BYTE *)(v77 + 23);
  }
  else
  {
    v82 = 1;
  }
  if (v79 < 0)
    v78 = v80;
  v4 += v82 + v78 + 1;
  if ((v3 & 0x4000) == 0)
  {
LABEL_92:
    if ((v3 & 0x8000) == 0)
      goto LABEL_157;
    goto LABEL_148;
  }
LABEL_139:
  v83 = *((_QWORD *)this + 18);
  v84 = *(unsigned __int8 *)(v83 + 23);
  v85 = v84;
  v86 = *(_QWORD *)(v83 + 8);
  if ((v84 & 0x80u) == 0)
    v87 = *(unsigned __int8 *)(v83 + 23);
  else
    v87 = v86;
  if (v87 >= 0x80)
  {
    v88 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v87);
    v84 = *(unsigned __int8 *)(v83 + 23);
    v86 = *(_QWORD *)(v83 + 8);
    v3 = *((_DWORD *)this + 61);
    v85 = *(_BYTE *)(v83 + 23);
  }
  else
  {
    v88 = 1;
  }
  if (v85 < 0)
    v84 = v86;
  v4 += v88 + v84 + 1;
  if ((v3 & 0x8000) != 0)
  {
LABEL_148:
    v89 = *((_QWORD *)this + 19);
    v90 = *(unsigned __int8 *)(v89 + 23);
    v91 = v90;
    v92 = *(_QWORD *)(v89 + 8);
    if ((v90 & 0x80u) == 0)
      v93 = *(unsigned __int8 *)(v89 + 23);
    else
      v93 = v92;
    if (v93 >= 0x80)
    {
      v94 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v93);
      v90 = *(unsigned __int8 *)(v89 + 23);
      v92 = *(_QWORD *)(v89 + 8);
      v3 = *((_DWORD *)this + 61);
      v91 = *(_BYTE *)(v89 + 23);
    }
    else
    {
      v94 = 1;
    }
    if (v91 < 0)
      v90 = v92;
    v4 += v94 + v90 + 2;
  }
LABEL_157:
  if ((v3 & 0x1FE0000) != 0)
  {
    if ((v3 & 0x20000) != 0)
    {
      v95 = *((_QWORD *)this + 23);
      v96 = *(unsigned __int8 *)(v95 + 23);
      v97 = v96;
      v98 = *(_QWORD *)(v95 + 8);
      if ((v96 & 0x80u) == 0)
        v99 = *(unsigned __int8 *)(v95 + 23);
      else
        v99 = v98;
      if (v99 >= 0x80)
      {
        v100 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v99);
        v96 = *(unsigned __int8 *)(v95 + 23);
        v98 = *(_QWORD *)(v95 + 8);
        v3 = *((_DWORD *)this + 61);
        v97 = *(_BYTE *)(v95 + 23);
      }
      else
      {
        v100 = 1;
      }
      if (v97 < 0)
        v96 = v98;
      v4 += v100 + v96 + 2;
    }
    if ((v3 & 0x80000) != 0)
    {
      v101 = *((_QWORD *)this + 27);
      v102 = *(unsigned __int8 *)(v101 + 23);
      v103 = v102;
      v104 = *(_QWORD *)(v101 + 8);
      if ((v102 & 0x80u) == 0)
        v105 = *(unsigned __int8 *)(v101 + 23);
      else
        v105 = v104;
      if (v105 >= 0x80)
      {
        v106 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v105);
        v102 = *(unsigned __int8 *)(v101 + 23);
        v104 = *(_QWORD *)(v101 + 8);
        v103 = *(_BYTE *)(v101 + 23);
      }
      else
      {
        v106 = 1;
      }
      if (v103 < 0)
        v102 = v104;
      v4 += v106 + v102 + 2;
    }
  }
  v107 = *((_DWORD *)this + 32);
  v108 = v107 + v4;
  if (v107 >= 1)
  {
    for (i = 0; i < v107; ++i)
    {
      v110 = *(_QWORD *)(*((_QWORD *)this + 15) + 8 * i);
      v111 = *(unsigned __int8 *)(v110 + 23);
      v112 = v111;
      v113 = *(_QWORD *)(v110 + 8);
      if ((v111 & 0x80u) == 0)
        v114 = *(unsigned __int8 *)(v110 + 23);
      else
        v114 = v113;
      if (v114 >= 0x80)
      {
        v115 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v114);
        v111 = *(unsigned __int8 *)(v110 + 23);
        v113 = *(_QWORD *)(v110 + 8);
        v107 = *((_DWORD *)this + 32);
        v112 = *(_BYTE *)(v110 + 23);
      }
      else
      {
        v115 = 1;
      }
      if (v112 < 0)
        v111 = v113;
      v108 += v115 + v111;
    }
  }
  v116 = *((_DWORD *)this + 42);
  v117 = v108 + 2 * v116;
  if (v116 >= 1)
  {
    for (j = 0; j < v116; ++j)
    {
      v119 = *(_QWORD *)(*((_QWORD *)this + 20) + 8 * j);
      v120 = *(unsigned __int8 *)(v119 + 23);
      v121 = v120;
      v122 = *(_QWORD *)(v119 + 8);
      if ((v120 & 0x80u) == 0)
        v123 = *(unsigned __int8 *)(v119 + 23);
      else
        v123 = v122;
      if (v123 >= 0x80)
      {
        v124 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v123);
        v120 = *(unsigned __int8 *)(v119 + 23);
        v122 = *(_QWORD *)(v119 + 8);
        v116 = *((_DWORD *)this + 42);
        v121 = *(_BYTE *)(v119 + 23);
      }
      else
      {
        v124 = 1;
      }
      if (v121 < 0)
        v120 = v122;
      v117 += v124 + v120;
    }
  }
  v125 = *((_DWORD *)this + 50);
  v126 = v117 + 2 * v125;
  if (v125 >= 1)
  {
    v127 = 0;
    do
    {
      v128 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::geo3::StructuredAddress_SubPremise::ByteSize(*(addr_obj::geo3::StructuredAddress_SubPremise **)(*((_QWORD *)this + 24) + 8 * v127), a2);
      v129 = (int)v128;
      if (v128 >= 0x80)
        v130 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v128);
      else
        v130 = 1;
      v126 += v129 + v130;
      ++v127;
    }
    while (v127 < *((int *)this + 50));
  }
  LODWORD(v131) = *((_DWORD *)this + 58);
  if ((int)v131 < 1)
  {
    v133 = 0;
  }
  else
  {
    v132 = 0;
    v133 = 0;
    do
    {
      v133 += AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64(*(_QWORD *)(*((_QWORD *)this + 28)
                                                                                     + 8 * v132++));
      v131 = *((int *)this + 58);
    }
    while (v132 < v131);
  }
  v134 = (v133 + v126 + 2 * v131);
  v135 = (_QWORD *)*((_QWORD *)this + 1);
  if (v135 && *v135 != v135[1])
    v134 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)+ v134;
  *((_DWORD *)this + 60) = v134;
  return v134;
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::geo3::StructuredAddress::SerializeWithCachedSizesToArray(addr_obj::geo3::StructuredAddress *this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  AddrObjGoogle::protobuf::UnknownFieldSet *v4;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v9;
  _BYTE *v10;
  int v11;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v12;
  const void *v13;
  uint64_t v14;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v15;
  _BYTE *v16;
  int v17;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v18;
  const void *v19;
  uint64_t v20;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v21;
  _BYTE *v22;
  int v23;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v24;
  const void *v25;
  uint64_t v26;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v27;
  _BYTE *v28;
  int v29;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v30;
  const void *v31;
  uint64_t v32;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v33;
  _BYTE *v34;
  int v35;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v36;
  const void *v37;
  uint64_t v38;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v39;
  _BYTE *v40;
  int v41;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v42;
  const void *v43;
  uint64_t v44;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v45;
  _BYTE *v46;
  int v47;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v48;
  const void *v49;
  uint64_t v50;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v51;
  _BYTE *v52;
  int v53;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v54;
  const void *v55;
  uint64_t v56;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v57;
  _BYTE *v58;
  int v59;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v60;
  const void *v61;
  uint64_t v62;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v63;
  _BYTE *v64;
  int v65;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v66;
  const void *v67;
  uint64_t v68;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v69;
  _BYTE *v70;
  int v71;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v72;
  const void *v73;
  uint64_t v74;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v75;
  _BYTE *v76;
  int v77;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v78;
  const void *v79;
  uint64_t v80;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v81;
  _BYTE *v82;
  int v83;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v88;
  _BYTE *v89;
  int v90;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v91;
  const void *v92;
  int v93;
  uint64_t v94;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v95;
  _BYTE *v96;
  int v97;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v98;
  const void *v99;
  uint64_t v100;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v101;
  _BYTE *v102;
  int v103;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v104;
  const void *v105;
  uint64_t v106;
  uint64_t v107;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v108;
  _BYTE *v109;
  int v110;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v111;
  const void *v112;
  uint64_t v113;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v114;
  _BYTE *v115;
  int v116;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v117;
  const void *v118;
  uint64_t v119;
  unsigned int *v120;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v121;
  AddrObjGoogle::protobuf::UnknownFieldSet *v122;
  uint64_t v123;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v124;
  _BYTE *v125;
  int v126;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v127;
  const void *v128;
  uint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t **v132;
  _QWORD *v133;

  v4 = a2;
  v6 = *((_DWORD *)this + 61);
  if ((v6 & 1) != 0)
  {
    v7 = *((_QWORD *)this + 2);
    *(_BYTE *)a2 = 10;
    v8 = (char *)a2 + 1;
    if (*(char *)(v7 + 23) < 0)
      v9 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v7 + 8);
    else
      v9 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v7 + 23);
    if (v9 > 0x7F)
    {
      v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v9, v8, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v9;
      v10 = (char *)v4 + 2;
    }
    v11 = *(char *)(v7 + 23);
    if (v11 >= 0)
      v12 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v7;
    else
      v12 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v7;
    if (v11 >= 0)
      v13 = (const void *)*(unsigned __int8 *)(v7 + 23);
    else
      v13 = (const void *)*(unsigned int *)(v7 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v12, v13, v10, a4);
    v6 = *((_DWORD *)this + 61);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_41;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v14 = *((_QWORD *)this + 3);
  *(_BYTE *)v4 = 18;
  if (*(char *)(v14 + 23) < 0)
    v15 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v14 + 8);
  else
    v15 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v14 + 23);
  if (v15 > 0x7F)
  {
    v16 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v15, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v15;
    v16 = (char *)v4 + 2;
  }
  v17 = *(char *)(v14 + 23);
  if (v17 >= 0)
    v18 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v14;
  else
    v18 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v14;
  if (v17 >= 0)
    v19 = (const void *)*(unsigned __int8 *)(v14 + 23);
  else
    v19 = (const void *)*(unsigned int *)(v14 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v18, v19, v16, a4);
  v6 = *((_DWORD *)this + 61);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_54;
  }
LABEL_41:
  v20 = *((_QWORD *)this + 4);
  *(_BYTE *)v4 = 26;
  if (*(char *)(v20 + 23) < 0)
    v21 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v20 + 8);
  else
    v21 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v20 + 23);
  if (v21 > 0x7F)
  {
    v22 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v21, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v21;
    v22 = (char *)v4 + 2;
  }
  v23 = *(char *)(v20 + 23);
  if (v23 >= 0)
    v24 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v20;
  else
    v24 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v20;
  if (v23 >= 0)
    v25 = (const void *)*(unsigned __int8 *)(v20 + 23);
  else
    v25 = (const void *)*(unsigned int *)(v20 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v24, v25, v22, a4);
  v6 = *((_DWORD *)this + 61);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_67;
  }
LABEL_54:
  v26 = *((_QWORD *)this + 5);
  *(_BYTE *)v4 = 34;
  if (*(char *)(v26 + 23) < 0)
    v27 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v26 + 8);
  else
    v27 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v26 + 23);
  if (v27 > 0x7F)
  {
    v28 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v27, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v27;
    v28 = (char *)v4 + 2;
  }
  v29 = *(char *)(v26 + 23);
  if (v29 >= 0)
    v30 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v26;
  else
    v30 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v26;
  if (v29 >= 0)
    v31 = (const void *)*(unsigned __int8 *)(v26 + 23);
  else
    v31 = (const void *)*(unsigned int *)(v26 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v30, v31, v28, a4);
  v6 = *((_DWORD *)this + 61);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_80;
  }
LABEL_67:
  v32 = *((_QWORD *)this + 6);
  *(_BYTE *)v4 = 42;
  if (*(char *)(v32 + 23) < 0)
    v33 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v32 + 8);
  else
    v33 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v32 + 23);
  if (v33 > 0x7F)
  {
    v34 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v33, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v33;
    v34 = (char *)v4 + 2;
  }
  v35 = *(char *)(v32 + 23);
  if (v35 >= 0)
    v36 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v32;
  else
    v36 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v32;
  if (v35 >= 0)
    v37 = (const void *)*(unsigned __int8 *)(v32 + 23);
  else
    v37 = (const void *)*(unsigned int *)(v32 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v36, v37, v34, a4);
  v6 = *((_DWORD *)this + 61);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_93;
  }
LABEL_80:
  v38 = *((_QWORD *)this + 7);
  *(_BYTE *)v4 = 50;
  if (*(char *)(v38 + 23) < 0)
    v39 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v38 + 8);
  else
    v39 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v38 + 23);
  if (v39 > 0x7F)
  {
    v40 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v39, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v39;
    v40 = (char *)v4 + 2;
  }
  v41 = *(char *)(v38 + 23);
  if (v41 >= 0)
    v42 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v38;
  else
    v42 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v38;
  if (v41 >= 0)
    v43 = (const void *)*(unsigned __int8 *)(v38 + 23);
  else
    v43 = (const void *)*(unsigned int *)(v38 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v42, v43, v40, a4);
  v6 = *((_DWORD *)this + 61);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_106;
  }
LABEL_93:
  v44 = *((_QWORD *)this + 8);
  *(_BYTE *)v4 = 58;
  if (*(char *)(v44 + 23) < 0)
    v45 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v44 + 8);
  else
    v45 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v44 + 23);
  if (v45 > 0x7F)
  {
    v46 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v45, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v45;
    v46 = (char *)v4 + 2;
  }
  v47 = *(char *)(v44 + 23);
  if (v47 >= 0)
    v48 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v44;
  else
    v48 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v44;
  if (v47 >= 0)
    v49 = (const void *)*(unsigned __int8 *)(v44 + 23);
  else
    v49 = (const void *)*(unsigned int *)(v44 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v48, v49, v46, a4);
  v6 = *((_DWORD *)this + 61);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_119;
  }
LABEL_106:
  v50 = *((_QWORD *)this + 9);
  *(_BYTE *)v4 = 66;
  if (*(char *)(v50 + 23) < 0)
    v51 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v50 + 8);
  else
    v51 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v50 + 23);
  if (v51 > 0x7F)
  {
    v52 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v51, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v51;
    v52 = (char *)v4 + 2;
  }
  v53 = *(char *)(v50 + 23);
  if (v53 >= 0)
    v54 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v50;
  else
    v54 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v50;
  if (v53 >= 0)
    v55 = (const void *)*(unsigned __int8 *)(v50 + 23);
  else
    v55 = (const void *)*(unsigned int *)(v50 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v54, v55, v52, a4);
  v6 = *((_DWORD *)this + 61);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_132;
  }
LABEL_119:
  v56 = *((_QWORD *)this + 10);
  *(_BYTE *)v4 = 74;
  if (*(char *)(v56 + 23) < 0)
    v57 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v56 + 8);
  else
    v57 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v56 + 23);
  if (v57 > 0x7F)
  {
    v58 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v57, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v57;
    v58 = (char *)v4 + 2;
  }
  v59 = *(char *)(v56 + 23);
  if (v59 >= 0)
    v60 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v56;
  else
    v60 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v56;
  if (v59 >= 0)
    v61 = (const void *)*(unsigned __int8 *)(v56 + 23);
  else
    v61 = (const void *)*(unsigned int *)(v56 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v60, v61, v58, a4);
  v6 = *((_DWORD *)this + 61);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_145;
  }
LABEL_132:
  v62 = *((_QWORD *)this + 11);
  *(_BYTE *)v4 = 82;
  if (*(char *)(v62 + 23) < 0)
    v63 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v62 + 8);
  else
    v63 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v62 + 23);
  if (v63 > 0x7F)
  {
    v64 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v63, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v63;
    v64 = (char *)v4 + 2;
  }
  v65 = *(char *)(v62 + 23);
  if (v65 >= 0)
    v66 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v62;
  else
    v66 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v62;
  if (v65 >= 0)
    v67 = (const void *)*(unsigned __int8 *)(v62 + 23);
  else
    v67 = (const void *)*(unsigned int *)(v62 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v66, v67, v64, a4);
  v6 = *((_DWORD *)this + 61);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_158;
  }
LABEL_145:
  v68 = *((_QWORD *)this + 12);
  *(_BYTE *)v4 = 90;
  if (*(char *)(v68 + 23) < 0)
    v69 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v68 + 8);
  else
    v69 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v68 + 23);
  if (v69 > 0x7F)
  {
    v70 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v69, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v69;
    v70 = (char *)v4 + 2;
  }
  v71 = *(char *)(v68 + 23);
  if (v71 >= 0)
    v72 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v68;
  else
    v72 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v68;
  if (v71 >= 0)
    v73 = (const void *)*(unsigned __int8 *)(v68 + 23);
  else
    v73 = (const void *)*(unsigned int *)(v68 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v72, v73, v70, a4);
  v6 = *((_DWORD *)this + 61);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_184;
    goto LABEL_171;
  }
LABEL_158:
  v74 = *((_QWORD *)this + 13);
  *(_BYTE *)v4 = 98;
  if (*(char *)(v74 + 23) < 0)
    v75 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v74 + 8);
  else
    v75 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v74 + 23);
  if (v75 > 0x7F)
  {
    v76 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v75, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v75;
    v76 = (char *)v4 + 2;
  }
  v77 = *(char *)(v74 + 23);
  if (v77 >= 0)
    v78 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v74;
  else
    v78 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v74;
  if (v77 >= 0)
    v79 = (const void *)*(unsigned __int8 *)(v74 + 23);
  else
    v79 = (const void *)*(unsigned int *)(v74 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v78, v79, v76, a4);
  if ((*((_DWORD *)this + 61) & 0x1000) != 0)
  {
LABEL_171:
    v80 = *((_QWORD *)this + 14);
    *(_BYTE *)v4 = 106;
    if (*(char *)(v80 + 23) < 0)
      v81 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v80 + 8);
    else
      v81 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v80 + 23);
    if (v81 > 0x7F)
    {
      v82 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v81, (_BYTE *)v4 + 1, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v81;
      v82 = (char *)v4 + 2;
    }
    v83 = *(char *)(v80 + 23);
    if (v83 >= 0)
      v84 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v80;
    else
      v84 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v80;
    if (v83 >= 0)
      v85 = (const void *)*(unsigned __int8 *)(v80 + 23);
    else
      v85 = (const void *)*(unsigned int *)(v80 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v84, v85, v82, a4);
  }
LABEL_184:
  if (*((int *)this + 32) >= 1)
  {
    v86 = 0;
    do
    {
      v87 = *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v86);
      *(_BYTE *)v4 = 114;
      if (*(char *)(v87 + 23) < 0)
        v88 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v87 + 8);
      else
        v88 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v87 + 23);
      if (v88 > 0x7F)
      {
        v89 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v88, (_BYTE *)v4 + 1, a3);
      }
      else
      {
        *((_BYTE *)v4 + 1) = (_BYTE)v88;
        v89 = (char *)v4 + 2;
      }
      v90 = *(char *)(v87 + 23);
      if (v90 >= 0)
        v91 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v87;
      else
        v91 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v87;
      if (v90 >= 0)
        v92 = (const void *)*(unsigned __int8 *)(v87 + 23);
      else
        v92 = (const void *)*(unsigned int *)(v87 + 8);
      v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v91, v92, v89, a4);
      ++v86;
    }
    while (v86 < *((int *)this + 32));
  }
  v93 = *((_DWORD *)this + 61);
  if ((v93 & 0x4000) != 0)
  {
    v94 = *((_QWORD *)this + 18);
    *(_BYTE *)v4 = 122;
    if (*(char *)(v94 + 23) < 0)
      v95 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v94 + 8);
    else
      v95 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v94 + 23);
    if (v95 > 0x7F)
    {
      v96 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v95, (_BYTE *)v4 + 1, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v95;
      v96 = (char *)v4 + 2;
    }
    v97 = *(char *)(v94 + 23);
    if (v97 >= 0)
      v98 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v94;
    else
      v98 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v94;
    if (v97 >= 0)
      v99 = (const void *)*(unsigned __int8 *)(v94 + 23);
    else
      v99 = (const void *)*(unsigned int *)(v94 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v98, v99, v96, a4);
    v93 = *((_DWORD *)this + 61);
  }
  if ((v93 & 0x8000) != 0)
  {
    v100 = *((_QWORD *)this + 19);
    *(_WORD *)v4 = 386;
    if (*(char *)(v100 + 23) < 0)
      v101 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v100 + 8);
    else
      v101 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v100 + 23);
    if (v101 > 0x7F)
    {
      v102 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v101, (_BYTE *)v4 + 2, a3);
    }
    else
    {
      *((_BYTE *)v4 + 2) = (_BYTE)v101;
      v102 = (char *)v4 + 3;
    }
    v103 = *(char *)(v100 + 23);
    if (v103 >= 0)
      v104 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v100;
    else
      v104 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v100;
    if (v103 >= 0)
      v105 = (const void *)*(unsigned __int8 *)(v100 + 23);
    else
      v105 = (const void *)*(unsigned int *)(v100 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v104, v105, v102, a4);
  }
  if (*((int *)this + 42) >= 1)
  {
    v106 = 0;
    do
    {
      v107 = *(_QWORD *)(*((_QWORD *)this + 20) + 8 * v106);
      *(_WORD *)v4 = 394;
      if (*(char *)(v107 + 23) < 0)
        v108 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v107 + 8);
      else
        v108 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v107 + 23);
      if (v108 > 0x7F)
      {
        v109 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v108, (_BYTE *)v4 + 2, a3);
      }
      else
      {
        *((_BYTE *)v4 + 2) = (_BYTE)v108;
        v109 = (char *)v4 + 3;
      }
      v110 = *(char *)(v107 + 23);
      if (v110 >= 0)
        v111 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v107;
      else
        v111 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v107;
      if (v110 >= 0)
        v112 = (const void *)*(unsigned __int8 *)(v107 + 23);
      else
        v112 = (const void *)*(unsigned int *)(v107 + 8);
      v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v111, v112, v109, a4);
      ++v106;
    }
    while (v106 < *((int *)this + 42));
  }
  if ((*((_BYTE *)this + 246) & 2) != 0)
  {
    v113 = *((_QWORD *)this + 23);
    *(_WORD *)v4 = 402;
    if (*(char *)(v113 + 23) < 0)
      v114 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v113 + 8);
    else
      v114 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v113 + 23);
    if (v114 > 0x7F)
    {
      v115 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v114, (_BYTE *)v4 + 2, a3);
    }
    else
    {
      *((_BYTE *)v4 + 2) = (_BYTE)v114;
      v115 = (char *)v4 + 3;
    }
    v116 = *(char *)(v113 + 23);
    if (v116 >= 0)
      v117 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v113;
    else
      v117 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v113;
    if (v116 >= 0)
      v118 = (const void *)*(unsigned __int8 *)(v113 + 23);
    else
      v118 = (const void *)*(unsigned int *)(v113 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v117, v118, v115, a4);
  }
  if (*((int *)this + 50) >= 1)
  {
    v119 = 0;
    do
    {
      v120 = *(unsigned int **)(*((_QWORD *)this + 24) + 8 * v119);
      *(_WORD *)v4 = 410;
      v121 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v120[7];
      if (v121 > 0x7F)
      {
        v122 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v121, (_BYTE *)v4 + 2, a3);
      }
      else
      {
        *((_BYTE *)v4 + 2) = (_BYTE)v121;
        v122 = (AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)v4 + 3);
      }
      v4 = addr_obj::geo3::StructuredAddress_SubPremise::SerializeWithCachedSizesToArray((addr_obj::geo3::StructuredAddress_SubPremise *)v120, v122, a3, a4);
      ++v119;
    }
    while (v119 < *((int *)this + 50));
  }
  if ((*((_BYTE *)this + 246) & 8) != 0)
  {
    v123 = *((_QWORD *)this + 27);
    *(_WORD *)v4 = 418;
    if (*(char *)(v123 + 23) < 0)
      v124 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v123 + 8);
    else
      v124 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v123 + 23);
    if (v124 > 0x7F)
    {
      v125 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v124, (_BYTE *)v4 + 2, a3);
    }
    else
    {
      *((_BYTE *)v4 + 2) = (_BYTE)v124;
      v125 = (char *)v4 + 3;
    }
    v126 = *(char *)(v123 + 23);
    if (v126 >= 0)
      v127 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v123;
    else
      v127 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v123;
    if (v126 >= 0)
      v128 = (const void *)*(unsigned __int8 *)(v123 + 23);
    else
      v128 = (const void *)*(unsigned int *)(v123 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v127, v128, v125, a4);
  }
  if (*((int *)this + 58) >= 1)
  {
    v129 = 0;
    do
    {
      v130 = *(_QWORD *)(*((_QWORD *)this + 28) + 8 * v129);
      *(_WORD *)v4 = 1696;
      v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v130, (_BYTE *)v4 + 2, a3);
      ++v129;
    }
    while (v129 < *((int *)this + 58));
  }
  v133 = (_QWORD *)*((_QWORD *)this + 1);
  v132 = (uint64_t **)((char *)this + 8);
  v131 = v133;
  if (!v133 || *v131 == v131[1])
    return v4;
  else
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v132, v4, a3, a4);
}

uint64_t AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(AddrObjGoogle::protobuf::io::CodedOutputStream *this, const void *a2, void *__dst, unsigned __int8 *a4)
{
  int v5;

  v5 = (int)a2;
  memcpy(__dst, this, (int)a2);
  return (uint64_t)__dst + v5;
}

void addr_obj::brace(addr_obj *this, addr_obj::geo3::Address *a2, const char *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  addr_obj::geo3::StructuredAddress *v8;
  std::string __str;

  if (addr_obj::Debugging::addChar(this))
  {
    v5 = *((_DWORD *)this + 6);
    v6 = v5 - 1;
    if (v5 >= 1)
    {
      addr_obj::leftBracket(**((_QWORD **)this + 2), (char *)a2, &__str);
      std::string::operator=(**((std::string ***)this + 2), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      addr_obj::rightBracket(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v6), (uint64_t)a2, &__str);
      std::string::operator=(*(std::string **)(*((_QWORD *)this + 2) + 8 * v6), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    v7 = *((_DWORD *)this + 14);
    if ((v7 & 2) != 0)
    {
      *((_DWORD *)this + 14) = v7 | 2;
      v8 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)this + 5);
      if (!v8)
      {
        v8 = (addr_obj::geo3::StructuredAddress *)operator new();
        addr_obj::geo3::StructuredAddress::StructuredAddress(v8);
        *((_QWORD *)this + 5) = v8;
      }
      sub_1887E8938((uint64_t)v8, (char *)a2);
    }
  }
}

void sub_1886761BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x18D76437C](v15, 0x10B1C403F20F32DLL);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::Debugging::addChar(addr_obj::Debugging *this)
{
  return addr_obj::Debugging::addChar_;
}

std::string *addr_obj::SerializedAddress::SerializedAddress(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  return this;
}

GEOAddress *_protobufCPPDataToObjC<GEOAddress>(const void **a1)
{
  id v1;
  GEOAddress *v2;

  v1 = -[NSData initWithCPPData:copy:](objc_alloc(MEMORY[0x1E0C99D50]), a1);
  v2 = -[GEOAddress initWithData:]([GEOAddress alloc], "initWithData:", v1);

  return v2;
}

void sub_1886762A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_188676370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1886763EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::geo3::StructuredAddress::Clear(addr_obj::geo3::StructuredAddress **this)
{
  addr_obj::geo3::StructuredAddress *v1;
  addr_obj::geo3::StructuredAddress *v2;
  uint64_t v3;
  addr_obj::geo3::StructuredAddress *v4;
  uint64_t v5;
  addr_obj::geo3::StructuredAddress *v6;
  uint64_t v7;
  addr_obj::geo3::StructuredAddress *v8;
  uint64_t v9;
  addr_obj::geo3::StructuredAddress *v10;
  uint64_t v11;
  addr_obj::geo3::StructuredAddress *v12;
  uint64_t v13;
  addr_obj::geo3::StructuredAddress *v14;
  uint64_t v15;
  addr_obj::geo3::StructuredAddress *v16;
  uint64_t v17;
  int v18;
  addr_obj::geo3::StructuredAddress *v19;
  uint64_t v20;
  addr_obj::geo3::StructuredAddress *v21;
  uint64_t v22;
  addr_obj::geo3::StructuredAddress *v23;
  uint64_t v24;
  addr_obj::geo3::StructuredAddress *v25;
  uint64_t v26;
  addr_obj::geo3::StructuredAddress *v27;
  uint64_t v28;
  addr_obj::geo3::StructuredAddress *v29;
  uint64_t v30;
  addr_obj::geo3::StructuredAddress *v31;
  uint64_t v32;
  int v33;
  addr_obj::geo3::StructuredAddress *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  AddrObjGoogle::protobuf::UnknownFieldSet *result;
  uint64_t v39;
  uint64_t v40;
  AddrObjGoogle::protobuf::UnknownFieldSet *v41;
  uint64_t v42;

  v1 = (addr_obj::geo3::StructuredAddress *)this;
  if (*((_BYTE *)this + 244))
  {
    if ((*((_BYTE *)this + 244) & 1) != 0)
    {
      v2 = this[2];
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v2 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v3 = *((_QWORD *)v1 + 2);
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 244) & 2) != 0)
    {
      v4 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v1 + 3);
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v4 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v5 = *((_QWORD *)v1 + 3);
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 244) & 4) != 0)
    {
      v6 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v1 + 4);
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v6 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v7 = *((_QWORD *)v1 + 4);
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 244) & 8) != 0)
    {
      v8 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v1 + 5);
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v8 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v9 = *((_QWORD *)v1 + 5);
        if (*(char *)(v9 + 23) < 0)
        {
          **(_BYTE **)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v9 = 0;
          *(_BYTE *)(v9 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 244) & 0x10) != 0)
    {
      v10 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v1 + 6);
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v10 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v11 = *((_QWORD *)v1 + 6);
        if (*(char *)(v11 + 23) < 0)
        {
          **(_BYTE **)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v11 = 0;
          *(_BYTE *)(v11 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 244) & 0x20) != 0)
    {
      v12 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v1 + 7);
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v12 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v13 = *((_QWORD *)v1 + 7);
        if (*(char *)(v13 + 23) < 0)
        {
          **(_BYTE **)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v13 = 0;
          *(_BYTE *)(v13 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 244) & 0x40) != 0)
    {
      v14 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v1 + 8);
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v14 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v15 = *((_QWORD *)v1 + 8);
        if (*(char *)(v15 + 23) < 0)
        {
          **(_BYTE **)v15 = 0;
          *(_QWORD *)(v15 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v15 = 0;
          *(_BYTE *)(v15 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 244) & 0x80) != 0)
    {
      v16 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v1 + 9);
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v16 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v17 = *((_QWORD *)v1 + 9);
        if (*(char *)(v17 + 23) < 0)
        {
          **(_BYTE **)v17 = 0;
          *(_QWORD *)(v17 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v17 = 0;
          *(_BYTE *)(v17 + 23) = 0;
        }
      }
    }
  }
  v18 = *((_DWORD *)v1 + 61);
  if ((v18 & 0xFF00) != 0)
  {
    if ((v18 & 0x100) != 0)
    {
      v19 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v1 + 10);
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v19 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v20 = *((_QWORD *)v1 + 10);
        if (*(char *)(v20 + 23) < 0)
        {
          **(_BYTE **)v20 = 0;
          *(_QWORD *)(v20 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v20 = 0;
          *(_BYTE *)(v20 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 245) & 2) != 0)
    {
      v21 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v1 + 11);
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v21 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v22 = *((_QWORD *)v1 + 11);
        if (*(char *)(v22 + 23) < 0)
        {
          **(_BYTE **)v22 = 0;
          *(_QWORD *)(v22 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v22 = 0;
          *(_BYTE *)(v22 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 245) & 4) != 0)
    {
      v23 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v1 + 12);
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v23 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v24 = *((_QWORD *)v1 + 12);
        if (*(char *)(v24 + 23) < 0)
        {
          **(_BYTE **)v24 = 0;
          *(_QWORD *)(v24 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v24 = 0;
          *(_BYTE *)(v24 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 245) & 8) != 0)
    {
      v25 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v1 + 13);
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v25 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v26 = *((_QWORD *)v1 + 13);
        if (*(char *)(v26 + 23) < 0)
        {
          **(_BYTE **)v26 = 0;
          *(_QWORD *)(v26 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v26 = 0;
          *(_BYTE *)(v26 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 245) & 0x10) != 0)
    {
      v27 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v1 + 14);
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v27 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v28 = *((_QWORD *)v1 + 14);
        if (*(char *)(v28 + 23) < 0)
        {
          **(_BYTE **)v28 = 0;
          *(_QWORD *)(v28 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v28 = 0;
          *(_BYTE *)(v28 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 245) & 0x40) != 0)
    {
      v29 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v1 + 18);
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v29 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v30 = *((_QWORD *)v1 + 18);
        if (*(char *)(v30 + 23) < 0)
        {
          **(_BYTE **)v30 = 0;
          *(_QWORD *)(v30 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v30 = 0;
          *(_BYTE *)(v30 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 245) & 0x80) != 0)
    {
      v31 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v1 + 19);
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v31 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v32 = *((_QWORD *)v1 + 19);
        if (*(char *)(v32 + 23) < 0)
        {
          **(_BYTE **)v32 = 0;
          *(_QWORD *)(v32 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v32 = 0;
          *(_BYTE *)(v32 + 23) = 0;
        }
      }
    }
  }
  v33 = *((_DWORD *)v1 + 61);
  if ((v33 & 0x1FE0000) != 0)
  {
    if ((v33 & 0x20000) != 0)
    {
      v34 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v1 + 23);
      this = (addr_obj::geo3::StructuredAddress **)AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v34 != (addr_obj::geo3::StructuredAddress *)this)
      {
        v35 = *((_QWORD *)v1 + 23);
        if (*(char *)(v35 + 23) < 0)
        {
          **(_BYTE **)v35 = 0;
          *(_QWORD *)(v35 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v35 = 0;
          *(_BYTE *)(v35 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 246) & 8) != 0)
    {
      v36 = (uint64_t *)*((_QWORD *)v1 + 27);
      if (v36 != AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
      {
        v37 = *((_QWORD *)v1 + 27);
        if (*(char *)(v37 + 23) < 0)
        {
          **(_BYTE **)v37 = 0;
          *(_QWORD *)(v37 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v37 = 0;
          *(_BYTE *)(v37 + 23) = 0;
        }
      }
    }
  }
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Clear<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v1 + 120);
  result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Clear<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v1 + 160);
  if (*((int *)v1 + 50) >= 1)
  {
    v39 = 0;
    do
    {
      v40 = *(_QWORD *)(*((_QWORD *)v1 + 24) + 8 * v39);
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40);
      ++v39;
    }
    while (v39 < *((int *)v1 + 50));
  }
  v42 = *((_QWORD *)v1 + 1);
  v41 = (addr_obj::geo3::StructuredAddress *)((char *)v1 + 8);
  *((_DWORD *)v41 + 48) = 0;
  *((_DWORD *)v41 + 56) = 0;
  *((_DWORD *)v41 + 59) = 0;
  if (v42)
    return AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v41);
  return result;
}

void addr_obj::geo3::Address::CopyFrom(addr_obj::geo3::Address *this, const addr_obj::geo3::Address *a2)
{
  if (a2 != this)
  {
    (*(void (**)(addr_obj::geo3::Address *))(*(_QWORD *)this + 32))(this);
    addr_obj::geo3::Address::MergeFrom(this, a2);
  }
}

AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::geo3::Address::Clear(addr_obj::geo3::Address *this)
{
  int v2;
  addr_obj::geo3::StructuredAddress **v3;
  AddrObjGoogle::protobuf::UnknownFieldSet *result;
  AddrObjGoogle::protobuf::UnknownFieldSet *v5;
  uint64_t v6;

  v2 = *((_DWORD *)this + 14);
  if ((v2 & 0x1FE) != 0)
  {
    if ((v2 & 2) != 0)
    {
      v3 = (addr_obj::geo3::StructuredAddress **)*((_QWORD *)this + 5);
      if (v3)
        addr_obj::geo3::StructuredAddress::Clear(v3);
    }
    *((_DWORD *)this + 12) = 0;
  }
  result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Clear<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
  v6 = *((_QWORD *)this + 1);
  v5 = (addr_obj::geo3::Address *)((char *)this + 8);
  *((_DWORD *)v5 + 12) = 0;
  if (v6)
    return AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v5);
  return result;
}

uint64_t AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Clear<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(int *)(result + 8) >= 1)
  {
    v1 = 0;
    do
    {
      v2 = *(_QWORD *)(*(_QWORD *)result + 8 * v1);
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v2 = 0;
        *(_BYTE *)(v2 + 23) = 0;
      }
      ++v1;
    }
    while (v1 < *(int *)(result + 8));
  }
  *(_DWORD *)(result + 8) = 0;
  return result;
}

std::string *addr_obj::AddressObjectBase::fromProto(addr_obj::AddressObjectBase *this, const std::string **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  addr_obj::Logger *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  std::runtime_error *exception;
  void *v14[2];
  char v15;
  std::string v16;
  void *v17[2];
  char v18;
  void *__p[2];
  unsigned __int8 v20;
  void *v21[2];
  _QWORD v22[33];

  if (*((_DWORD *)this + 3) != *((_DWORD *)a2 + 20))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"major version mismatch, expected ", 33);
    v4 = (_QWORD *)addr_obj::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" but got: ", 10);
    v6 = addr_obj::operator<<(v5, (AddrObjGoogle::protobuf::Message *)a2);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"; library version: ",
           19);
    v8 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v8))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
      std::stringbuf::str();
      if ((v20 & 0x80u) == 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      if ((v20 & 0x80u) == 0)
        v10 = v20;
      else
        v10 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v9, v10);
      if ((char)v20 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
      std::string::basic_string[abi:ne180100]<0>(v17, "fromProto");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v14, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 137, (uint64_t)v17, (uint64_t)&v16, (uint64_t)v14);
      if (v15 < 0)
        operator delete(v14[0]);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (v18 < 0)
        operator delete(v17[0]);
      if ((char)v20 < 0)
        operator delete(__p[0]);
      std::ostringstream::~ostringstream((uint64_t)v21);
    }
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"; at ", 5);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp", 91);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v21, (uint64_t)__p);
  }
  return std::string::operator=((std::string *)((char *)this + 16), a2[2]);
}

void sub_188676F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v32;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_188676FC0(_Unwind_Exception *a1)
{
  uint64_t v2;

  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *AddrObjGoogle::protobuf::internal::ExtensionSet::SerializeWithCachedSizesToArray(AddrObjGoogle::protobuf::internal::ExtensionSet *this, int a2, int a3, unsigned __int8 *a4)
{
  char *v4;
  char *v5;
  char *v7;
  int v8;
  BOOL v9;
  char **v10;
  uint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;

  v5 = (char *)this + 8;
  v4 = (char *)*((_QWORD *)this + 1);
  if (v4)
  {
    v7 = (char *)this + 8;
    do
    {
      v8 = *((_DWORD *)v4 + 8);
      v9 = v8 < a2;
      if (v8 >= a2)
        v10 = (char **)v4;
      else
        v10 = (char **)(v4 + 8);
      if (!v9)
        v7 = v4;
      v4 = *v10;
    }
    while (*v10);
    if (v7 != v5)
    {
      do
      {
        v11 = *((unsigned int *)v7 + 8);
        if ((int)v11 >= a3)
          break;
        a4 = AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::SerializeFieldWithCachedSizesToArray((AddrObjGoogle::protobuf::internal::ExtensionSet::Extension *)(v7 + 40), v11, a4, a4);
        v12 = (char *)*((_QWORD *)v7 + 1);
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = *(char **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (char *)*((_QWORD *)v7 + 2);
            v14 = *(_QWORD *)v13 == (_QWORD)v7;
            v7 = v13;
          }
          while (!v14);
        }
        v7 = v13;
      }
      while (v13 != v5);
    }
  }
  return a4;
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::V2AddressObjectProto::SerializeWithCachedSizesToArray(addr_obj::V2AddressObjectProto *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v8;
  _BYTE *v9;
  int v10;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v11;
  const void *v12;
  uint64_t v13;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v14;
  _BYTE *v15;
  int v16;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v17;
  const void *v18;
  uint64_t v19;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v20;
  _BYTE *v21;
  int v22;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v23;
  const void *v24;
  uint64_t v25;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v26;
  _BYTE *v27;
  int v28;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v29;
  const void *v30;
  uint64_t v31;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v32;
  _BYTE *v33;
  int v34;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v35;
  const void *v36;
  uint64_t v37;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v38;
  _BYTE *v39;
  int v40;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v41;
  const void *v42;
  uint64_t v43;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v44;
  _BYTE *v45;
  int v46;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v47;
  const void *v48;
  uint64_t v49;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v50;
  _BYTE *v51;
  int v52;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v53;
  const void *v54;
  uint64_t v55;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v56;
  _BYTE *v57;
  int v58;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v59;
  const void *v60;
  uint64_t v61;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v62;
  _BYTE *v63;
  int v64;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v65;
  const void *v66;
  uint64_t v67;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v68;
  _BYTE *v69;
  int v70;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v71;
  const void *v72;
  uint64_t v73;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v74;
  _BYTE *v75;
  int v76;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v77;
  const void *v78;
  const AddrObjGoogle::protobuf::UnknownFieldSet *result;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  _QWORD *v82;
  uint64_t **v83;
  _QWORD *v84;

  v3 = a2;
  v5 = *((_DWORD *)this + 35);
  if ((v5 & 1) != 0)
  {
    v6 = *((_QWORD *)this + 5);
    *a2 = 10;
    v7 = a2 + 1;
    if (*(char *)(v6 + 23) < 0)
      v8 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v6 + 8);
    else
      v8 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v6 + 23);
    if (v8 > 0x7F)
    {
      v9 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v8, v7, a3);
    }
    else
    {
      v3[1] = v8;
      v9 = v3 + 2;
    }
    v10 = *(char *)(v6 + 23);
    if (v10 >= 0)
      v11 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v6;
    else
      v11 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v6;
    if (v10 >= 0)
      v12 = (const void *)*(unsigned __int8 *)(v6 + 23);
    else
      v12 = (const void *)*(unsigned int *)(v6 + 8);
    v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v11, v12, v9, v3);
    v5 = *((_DWORD *)this + 35);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_40;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  v13 = *((_QWORD *)this + 6);
  *v3 = 18;
  if (*(char *)(v13 + 23) < 0)
    v14 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v13 + 8);
  else
    v14 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v13 + 23);
  if (v14 > 0x7F)
  {
    v15 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v14, v3 + 1, a3);
  }
  else
  {
    v3[1] = v14;
    v15 = v3 + 2;
  }
  v16 = *(char *)(v13 + 23);
  if (v16 >= 0)
    v17 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v13;
  else
    v17 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v13;
  if (v16 >= 0)
    v18 = (const void *)*(unsigned __int8 *)(v13 + 23);
  else
    v18 = (const void *)*(unsigned int *)(v13 + 8);
  v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v17, v18, v15, v3);
  v5 = *((_DWORD *)this + 35);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_53;
  }
LABEL_40:
  v19 = *((_QWORD *)this + 7);
  *v3 = 26;
  if (*(char *)(v19 + 23) < 0)
    v20 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v19 + 8);
  else
    v20 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v19 + 23);
  if (v20 > 0x7F)
  {
    v21 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v20, v3 + 1, a3);
  }
  else
  {
    v3[1] = v20;
    v21 = v3 + 2;
  }
  v22 = *(char *)(v19 + 23);
  if (v22 >= 0)
    v23 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v19;
  else
    v23 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v19;
  if (v22 >= 0)
    v24 = (const void *)*(unsigned __int8 *)(v19 + 23);
  else
    v24 = (const void *)*(unsigned int *)(v19 + 8);
  v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v23, v24, v21, v3);
  v5 = *((_DWORD *)this + 35);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_66;
  }
LABEL_53:
  v25 = *((_QWORD *)this + 8);
  *v3 = 34;
  if (*(char *)(v25 + 23) < 0)
    v26 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v25 + 8);
  else
    v26 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v25 + 23);
  if (v26 > 0x7F)
  {
    v27 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v26, v3 + 1, a3);
  }
  else
  {
    v3[1] = v26;
    v27 = v3 + 2;
  }
  v28 = *(char *)(v25 + 23);
  if (v28 >= 0)
    v29 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v25;
  else
    v29 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v25;
  if (v28 >= 0)
    v30 = (const void *)*(unsigned __int8 *)(v25 + 23);
  else
    v30 = (const void *)*(unsigned int *)(v25 + 8);
  v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v29, v30, v27, v3);
  v5 = *((_DWORD *)this + 35);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_79;
  }
LABEL_66:
  v31 = *((_QWORD *)this + 10);
  *v3 = 42;
  if (*(char *)(v31 + 23) < 0)
    v32 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v31 + 8);
  else
    v32 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v31 + 23);
  if (v32 > 0x7F)
  {
    v33 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v32, v3 + 1, a3);
  }
  else
  {
    v3[1] = v32;
    v33 = v3 + 2;
  }
  v34 = *(char *)(v31 + 23);
  if (v34 >= 0)
    v35 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v31;
  else
    v35 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v31;
  if (v34 >= 0)
    v36 = (const void *)*(unsigned __int8 *)(v31 + 23);
  else
    v36 = (const void *)*(unsigned int *)(v31 + 8);
  v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v35, v36, v33, v3);
  v5 = *((_DWORD *)this + 35);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_92;
  }
LABEL_79:
  v37 = *((_QWORD *)this + 11);
  *v3 = 50;
  if (*(char *)(v37 + 23) < 0)
    v38 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v37 + 8);
  else
    v38 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v37 + 23);
  if (v38 > 0x7F)
  {
    v39 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v38, v3 + 1, a3);
  }
  else
  {
    v3[1] = v38;
    v39 = v3 + 2;
  }
  v40 = *(char *)(v37 + 23);
  if (v40 >= 0)
    v41 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v37;
  else
    v41 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v37;
  if (v40 >= 0)
    v42 = (const void *)*(unsigned __int8 *)(v37 + 23);
  else
    v42 = (const void *)*(unsigned int *)(v37 + 8);
  v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v41, v42, v39, v3);
  v5 = *((_DWORD *)this + 35);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_105;
  }
LABEL_92:
  v43 = *((_QWORD *)this + 12);
  *v3 = 58;
  if (*(char *)(v43 + 23) < 0)
    v44 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v43 + 8);
  else
    v44 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v43 + 23);
  if (v44 > 0x7F)
  {
    v45 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v44, v3 + 1, a3);
  }
  else
  {
    v3[1] = v44;
    v45 = v3 + 2;
  }
  v46 = *(char *)(v43 + 23);
  if (v46 >= 0)
    v47 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v43;
  else
    v47 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v43;
  if (v46 >= 0)
    v48 = (const void *)*(unsigned __int8 *)(v43 + 23);
  else
    v48 = (const void *)*(unsigned int *)(v43 + 8);
  v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v47, v48, v45, v3);
  v5 = *((_DWORD *)this + 35);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_118;
  }
LABEL_105:
  v49 = *((_QWORD *)this + 9);
  *v3 = 66;
  if (*(char *)(v49 + 23) < 0)
    v50 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v49 + 8);
  else
    v50 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v49 + 23);
  if (v50 > 0x7F)
  {
    v51 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v50, v3 + 1, a3);
  }
  else
  {
    v3[1] = v50;
    v51 = v3 + 2;
  }
  v52 = *(char *)(v49 + 23);
  if (v52 >= 0)
    v53 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v49;
  else
    v53 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v49;
  if (v52 >= 0)
    v54 = (const void *)*(unsigned __int8 *)(v49 + 23);
  else
    v54 = (const void *)*(unsigned int *)(v49 + 8);
  v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v53, v54, v51, v3);
  v5 = *((_DWORD *)this + 35);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_131;
  }
LABEL_118:
  v55 = *((_QWORD *)this + 13);
  *v3 = 74;
  if (*(char *)(v55 + 23) < 0)
    v56 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v55 + 8);
  else
    v56 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v55 + 23);
  if (v56 > 0x7F)
  {
    v57 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v56, v3 + 1, a3);
  }
  else
  {
    v3[1] = v56;
    v57 = v3 + 2;
  }
  v58 = *(char *)(v55 + 23);
  if (v58 >= 0)
    v59 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v55;
  else
    v59 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v55;
  if (v58 >= 0)
    v60 = (const void *)*(unsigned __int8 *)(v55 + 23);
  else
    v60 = (const void *)*(unsigned int *)(v55 + 8);
  v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v59, v60, v57, v3);
  v5 = *((_DWORD *)this + 35);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
LABEL_144:
    v67 = *((_QWORD *)this + 15);
    *v3 = 90;
    if (*(char *)(v67 + 23) < 0)
      v68 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v67 + 8);
    else
      v68 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v67 + 23);
    if (v68 > 0x7F)
    {
      v69 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v68, v3 + 1, a3);
    }
    else
    {
      v3[1] = v68;
      v69 = v3 + 2;
    }
    v70 = *(char *)(v67 + 23);
    if (v70 >= 0)
      v71 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v67;
    else
      v71 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v67;
    if (v70 >= 0)
      v72 = (const void *)*(unsigned __int8 *)(v67 + 23);
    else
      v72 = (const void *)*(unsigned int *)(v67 + 8);
    v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v71, v72, v69, v3);
    if ((*((_DWORD *)this + 35) & 0x800) == 0)
      goto LABEL_170;
    goto LABEL_157;
  }
LABEL_131:
  v61 = *((_QWORD *)this + 14);
  *v3 = 82;
  if (*(char *)(v61 + 23) < 0)
    v62 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v61 + 8);
  else
    v62 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v61 + 23);
  if (v62 > 0x7F)
  {
    v63 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v62, v3 + 1, a3);
  }
  else
  {
    v3[1] = v62;
    v63 = v3 + 2;
  }
  v64 = *(char *)(v61 + 23);
  if (v64 >= 0)
    v65 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v61;
  else
    v65 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v61;
  if (v64 >= 0)
    v66 = (const void *)*(unsigned __int8 *)(v61 + 23);
  else
    v66 = (const void *)*(unsigned int *)(v61 + 8);
  v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v65, v66, v63, v3);
  v5 = *((_DWORD *)this + 35);
  if ((v5 & 0x400) != 0)
    goto LABEL_144;
LABEL_12:
  if ((v5 & 0x800) != 0)
  {
LABEL_157:
    v73 = *((_QWORD *)this + 16);
    *v3 = 98;
    if (*(char *)(v73 + 23) < 0)
      v74 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v73 + 8);
    else
      v74 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v73 + 23);
    if (v74 > 0x7F)
    {
      v75 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v74, v3 + 1, a3);
    }
    else
    {
      v3[1] = v74;
      v75 = v3 + 2;
    }
    v76 = *(char *)(v73 + 23);
    if (v76 >= 0)
      v77 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v73;
    else
      v77 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v73;
    if (v76 >= 0)
      v78 = (const void *)*(unsigned __int8 *)(v73 + 23);
    else
      v78 = (const void *)*(unsigned int *)(v73 + 8);
    v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v77, v78, v75, v3);
  }
LABEL_170:
  result = (const AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::ExtensionSet::SerializeWithCachedSizesToArray((addr_obj::V2AddressObjectProto *)((char *)this + 8), 100, 200, v3);
  v84 = (_QWORD *)*((_QWORD *)this + 4);
  v83 = (uint64_t **)((char *)this + 32);
  v82 = v84;
  if (v84)
  {
    if (*v82 != v82[1])
      return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v83, result, v80, v81);
  }
  return result;
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::AddressObjectProto::SerializeWithCachedSizesToArray(unint64_t this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  const AddrObjGoogle::protobuf::UnknownFieldSet *v4;
  unint64_t v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v9;
  _BYTE *v10;
  int v11;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v12;
  const void *v13;
  unsigned int *v14;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v15;
  AddrObjGoogle::protobuf::UnknownFieldSet *v16;
  uint64_t v17;
  unsigned int *v18;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v19;
  AddrObjGoogle::protobuf::UnknownFieldSet *v20;
  int v21;
  unsigned int *v22;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v23;
  AddrObjGoogle::protobuf::UnknownFieldSet *v24;
  unsigned int *v25;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v26;
  AddrObjGoogle::protobuf::UnknownFieldSet *v27;
  unsigned int *v28;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v29;
  unsigned __int8 *v30;
  _QWORD *v31;
  uint64_t **v32;
  _QWORD *v33;

  v4 = a2;
  v5 = this;
  if ((*(_BYTE *)(this + 88) & 1) != 0)
  {
    this = *(int *)(this + 80);
    *(_BYTE *)a2 = 8;
    v6 = (char *)a2 + 1;
    if ((this & 0x80000000) != 0)
    {
      this = (unint64_t)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(this, v6, a3);
    }
    else
    {
      if (this <= 0x7F)
      {
        *((_BYTE *)v4 + 1) = this;
        v4 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)v4 + 2);
        goto LABEL_8;
      }
      this = (unint64_t)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)this, v6, a3);
    }
    v4 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)this;
  }
LABEL_8:
  v7 = *(_DWORD *)(v5 + 88);
  if ((v7 & 2) != 0)
  {
    v8 = *(_QWORD *)(v5 + 16);
    *(_BYTE *)v4 = 18;
    if (*(char *)(v8 + 23) < 0)
      v9 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v8 + 8);
    else
      v9 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v8 + 23);
    if (v9 > 0x7F)
    {
      v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v9, (_BYTE *)v4 + 1, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v9;
      v10 = (char *)v4 + 2;
    }
    v11 = *(char *)(v8 + 23);
    if (v11 >= 0)
      v12 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v8;
    else
      v12 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v8;
    if (v11 >= 0)
      v13 = (const void *)*(unsigned __int8 *)(v8 + 23);
    else
      v13 = (const void *)*(unsigned int *)(v8 + 8);
    this = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v12, v13, v10, a4);
    v4 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)this;
    v7 = *(_DWORD *)(v5 + 88);
  }
  if ((v7 & 4) != 0)
  {
    v14 = *(unsigned int **)(v5 + 24);
    if (!v14)
      v14 = *(unsigned int **)(addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)this) + 24);
    *(_BYTE *)v4 = 26;
    v15 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v14[10];
    if (v15 > 0x7F)
    {
      v16 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v15, (_BYTE *)v4 + 1, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v15;
      v16 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)v4 + 2);
    }
    this = (unint64_t)addr_obj::LocalizationProto::SerializeWithCachedSizesToArray((addr_obj::LocalizationProto *)v14, v16, a3, a4);
    v4 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)this;
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    v17 = 0;
    do
    {
      v18 = *(unsigned int **)(*(_QWORD *)(v5 + 32) + 8 * v17);
      *(_BYTE *)v4 = 34;
      v19 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v18[12];
      if (v19 > 0x7F)
      {
        v20 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v19, (_BYTE *)v4 + 1, a3);
      }
      else
      {
        *((_BYTE *)v4 + 1) = (_BYTE)v19;
        v20 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)v4 + 2);
      }
      this = (unint64_t)addr_obj::FingerprintProto::SerializeWithCachedSizesToArray((addr_obj::FingerprintProto *)v18, v20, a3, a4);
      v4 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)this;
      ++v17;
    }
    while (v17 < *(int *)(v5 + 40));
  }
  v21 = *(_DWORD *)(v5 + 88);
  if ((v21 & 0x40) != 0)
  {
    v22 = *(unsigned int **)(v5 + 72);
    if (!v22)
      v22 = *(unsigned int **)(addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)this) + 72);
    *(_BYTE *)v4 = 42;
    v23 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v22[16];
    if (v23 > 0x7F)
    {
      v24 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v23, (_BYTE *)v4 + 1, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v23;
      v24 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)v4 + 2);
    }
    this = (unint64_t)addr_obj::VenueInfoProto::SerializeWithCachedSizesToArray((addr_obj::VenueInfoProto *)v22, v24, a3, a4);
    v4 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)this;
    v21 = *(_DWORD *)(v5 + 88);
    if ((v21 & 0x10) == 0)
    {
LABEL_37:
      if ((v21 & 0x20) == 0)
        goto LABEL_57;
      goto LABEL_51;
    }
  }
  else if ((v21 & 0x10) == 0)
  {
    goto LABEL_37;
  }
  v25 = *(unsigned int **)(v5 + 56);
  if (!v25)
    v25 = *(unsigned int **)(addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)this) + 56);
  *(_WORD *)v4 = 1698;
  v26 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v25[22];
  if (v26 > 0x7F)
  {
    v27 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v26, (_BYTE *)v4 + 2, a3);
  }
  else
  {
    *((_BYTE *)v4 + 2) = (_BYTE)v26;
    v27 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)v4 + 3);
  }
  this = (unint64_t)addr_obj::V0AddressObjectProto::SerializeWithCachedSizesToArray((addr_obj::V0AddressObjectProto *)v25, v27, a3, a4);
  v4 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)this;
  if ((*(_DWORD *)(v5 + 88) & 0x20) != 0)
  {
LABEL_51:
    v28 = *(unsigned int **)(v5 + 64);
    if (!v28)
      v28 = *(unsigned int **)(addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)this) + 64);
    *(_WORD *)v4 = 1706;
    v29 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v28[24];
    if (v29 > 0x7F)
    {
      v30 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v29, (_BYTE *)v4 + 2, a3);
    }
    else
    {
      *((_BYTE *)v4 + 2) = (_BYTE)v29;
      v30 = (unsigned __int8 *)v4 + 3;
    }
    v4 = addr_obj::V1AddressObjectProto::SerializeWithCachedSizesToArray((addr_obj::V1AddressObjectProto *)v28, v30, a3, a4);
  }
LABEL_57:
  v33 = *(_QWORD **)(v5 + 8);
  v32 = (uint64_t **)(v5 + 8);
  v31 = v33;
  if (!v33 || *v31 == v31[1])
    return v4;
  else
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v32, v4, a3, a4);
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::LocalizationProto::SerializeWithCachedSizesToArray(addr_obj::LocalizationProto *this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  AddrObjGoogle::protobuf::UnknownFieldSet *v4;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v9;
  _BYTE *v10;
  int v11;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v12;
  const void *v13;
  uint64_t v14;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v15;
  _BYTE *v16;
  int v17;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v18;
  const void *v19;
  uint64_t v20;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v21;
  _BYTE *v22;
  int v23;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v24;
  const void *v25;
  _QWORD *v26;
  uint64_t **v27;
  _QWORD *v28;

  v4 = a2;
  v6 = *((_DWORD *)this + 11);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_18:
    v14 = *((_QWORD *)this + 3);
    *(_BYTE *)v4 = 18;
    if (*(char *)(v14 + 23) < 0)
      v15 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v14 + 8);
    else
      v15 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v14 + 23);
    if (v15 > 0x7F)
    {
      v16 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v15, (_BYTE *)v4 + 1, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v15;
      v16 = (char *)v4 + 2;
    }
    v17 = *(char *)(v14 + 23);
    if (v17 >= 0)
      v18 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v14;
    else
      v18 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v14;
    if (v17 >= 0)
      v19 = (const void *)*(unsigned __int8 *)(v14 + 23);
    else
      v19 = (const void *)*(unsigned int *)(v14 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v18, v19, v16, a4);
    if ((*((_DWORD *)this + 11) & 4) == 0)
      goto LABEL_44;
    goto LABEL_31;
  }
  v7 = *((_QWORD *)this + 2);
  *(_BYTE *)a2 = 10;
  v8 = (char *)a2 + 1;
  if (*(char *)(v7 + 23) < 0)
    v9 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v7 + 8);
  else
    v9 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v7 + 23);
  if (v9 > 0x7F)
  {
    v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v9, v8, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v9;
    v10 = (char *)v4 + 2;
  }
  v11 = *(char *)(v7 + 23);
  if (v11 >= 0)
    v12 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v7;
  else
    v12 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v7;
  if (v11 >= 0)
    v13 = (const void *)*(unsigned __int8 *)(v7 + 23);
  else
    v13 = (const void *)*(unsigned int *)(v7 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v12, v13, v10, a4);
  v6 = *((_DWORD *)this + 11);
  if ((v6 & 2) != 0)
    goto LABEL_18;
LABEL_3:
  if ((v6 & 4) != 0)
  {
LABEL_31:
    v20 = *((_QWORD *)this + 4);
    *(_BYTE *)v4 = 26;
    if (*(char *)(v20 + 23) < 0)
      v21 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v20 + 8);
    else
      v21 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v20 + 23);
    if (v21 > 0x7F)
    {
      v22 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v21, (_BYTE *)v4 + 1, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v21;
      v22 = (char *)v4 + 2;
    }
    v23 = *(char *)(v20 + 23);
    if (v23 >= 0)
      v24 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v20;
    else
      v24 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v20;
    if (v23 >= 0)
      v25 = (const void *)*(unsigned __int8 *)(v20 + 23);
    else
      v25 = (const void *)*(unsigned int *)(v20 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v24, v25, v22, a4);
  }
LABEL_44:
  v28 = (_QWORD *)*((_QWORD *)this + 1);
  v27 = (uint64_t **)((char *)this + 8);
  v26 = v28;
  if (!v28 || *v26 == v26[1])
    return v4;
  else
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v27, v4, a3, a4);
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::FingerprintProto::SerializeWithCachedSizesToArray(addr_obj::FingerprintProto *this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  AddrObjGoogle::protobuf::UnknownFieldSet *v4;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v9;
  _BYTE *v10;
  int v11;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v16;
  _BYTE *v17;
  int v18;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v19;
  const void *v20;
  uint64_t v21;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v22;
  _BYTE *v23;
  int v24;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v25;
  const void *v26;
  _QWORD *v27;
  uint64_t **v28;
  _QWORD *v29;

  v4 = a2;
  v6 = *((_DWORD *)this + 13);
  if ((v6 & 1) != 0)
  {
    v7 = *((_QWORD *)this + 2);
    *(_BYTE *)a2 = 10;
    v8 = (char *)a2 + 1;
    if (*(char *)(v7 + 23) < 0)
      v9 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v7 + 8);
    else
      v9 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v7 + 23);
    if (v9 > 0x7F)
    {
      v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v9, v8, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v9;
      v10 = (char *)v4 + 2;
    }
    v11 = *(char *)(v7 + 23);
    if (v11 >= 0)
      v12 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v7;
    else
      v12 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v7;
    if (v11 >= 0)
      v13 = (const void *)*(unsigned __int8 *)(v7 + 23);
    else
      v13 = (const void *)*(unsigned int *)(v7 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v12, v13, v10, a4);
    v6 = *((_DWORD *)this + 13);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
LABEL_20:
      v15 = *((_QWORD *)this + 4);
      *(_BYTE *)v4 = 26;
      if (*(char *)(v15 + 23) < 0)
        v16 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v15 + 8);
      else
        v16 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v15 + 23);
      if (v16 > 0x7F)
      {
        v17 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v16, (_BYTE *)v4 + 1, a3);
      }
      else
      {
        *((_BYTE *)v4 + 1) = (_BYTE)v16;
        v17 = (char *)v4 + 2;
      }
      v18 = *(char *)(v15 + 23);
      if (v18 >= 0)
        v19 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v15;
      else
        v19 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v15;
      if (v18 >= 0)
        v20 = (const void *)*(unsigned __int8 *)(v15 + 23);
      else
        v20 = (const void *)*(unsigned int *)(v15 + 8);
      v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v19, v20, v17, a4);
      if ((*((_DWORD *)this + 13) & 8) == 0)
        goto LABEL_46;
      goto LABEL_33;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v14 = *((_QWORD *)this + 3);
  *(_BYTE *)v4 = 16;
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray((2 * v14) ^ (v14 >> 63), (_BYTE *)v4 + 1, a3);
  v6 = *((_DWORD *)this + 13);
  if ((v6 & 4) != 0)
    goto LABEL_20;
LABEL_4:
  if ((v6 & 8) != 0)
  {
LABEL_33:
    v21 = *((_QWORD *)this + 5);
    *(_BYTE *)v4 = 34;
    if (*(char *)(v21 + 23) < 0)
      v22 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v21 + 8);
    else
      v22 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v21 + 23);
    if (v22 > 0x7F)
    {
      v23 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v22, (_BYTE *)v4 + 1, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v22;
      v23 = (char *)v4 + 2;
    }
    v24 = *(char *)(v21 + 23);
    if (v24 >= 0)
      v25 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v21;
    else
      v25 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v21;
    if (v24 >= 0)
      v26 = (const void *)*(unsigned __int8 *)(v21 + 23);
    else
      v26 = (const void *)*(unsigned int *)(v21 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v25, v26, v23, a4);
  }
LABEL_46:
  v29 = (_QWORD *)*((_QWORD *)this + 1);
  v28 = (uint64_t **)((char *)this + 8);
  v27 = v29;
  if (!v29 || *v27 == v27[1])
    return v4;
  else
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v28, v4, a3, a4);
}

_BYTE *AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(unint64_t this, _BYTE *a2, unsigned __int8 *a3)
{
  unint64_t v3;
  unsigned int v4;

  v3 = this >> 28;
  if (HIBYTE(this))
  {
    if (HIBYTE(this) >= 0x80)
    {
      a2[9] = -127;
      v4 = 10;
    }
    else
    {
      v4 = 9;
    }
    a2[8] = HIBYTE(this) | 0x80;
    goto LABEL_10;
  }
  if ((_DWORD)v3)
  {
    if (!(v3 >> 14))
    {
      if (v3 < 0x80)
      {
        v4 = 5;
LABEL_13:
        a2[4] = v3 | 0x80;
        goto LABEL_14;
      }
      v4 = 6;
LABEL_12:
      a2[5] = (this >> 35) | 0x80;
      goto LABEL_13;
    }
    if (v3 < 0x200000)
    {
      v4 = 7;
      goto LABEL_11;
    }
    v4 = 8;
LABEL_10:
    a2[7] = (this >> 49) | 0x80;
LABEL_11:
    a2[6] = (this >> 42) | 0x80;
    goto LABEL_12;
  }
  if (this >> 14)
  {
    if (this < 0x200000)
    {
      v4 = 3;
      goto LABEL_15;
    }
    v4 = 4;
LABEL_14:
    a2[3] = (this >> 21) | 0x80;
LABEL_15:
    a2[2] = (this >> 14) | 0x80;
    goto LABEL_16;
  }
  if (this < 0x80)
  {
    v4 = 1;
    goto LABEL_17;
  }
  v4 = 2;
LABEL_16:
  a2[1] = (this >> 7) | 0x80;
LABEL_17:
  *a2 = this | 0x80;
  a2[v4 - 1] &= ~0x80u;
  return &a2[v4];
}

void sub_188677E7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceRequestReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 116))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDPlaceRequestReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 112) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 116) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDPlaceRequestReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDPlaceRequestReadAllFrom_initialTag;
  Specified = GEOPDPlaceRequestReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDPlaceRequestCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
  return Specified;
}

void sub_188678010(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceRequestReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint16x4_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  unsigned __int8 v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  GEOPDAnalyticMetadata *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  int v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  void *v61;
  void *v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  BOOL v71;
  uint64_t v72;
  __int16 v73;
  int v74;
  int v75;
  __int16 v76;
  void *v77;
  int v79;
  char v80;
  char v81;
  char v82;
  BOOL v83;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 116);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 112));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 132));
  v13 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16(v12, (uint16x4_t)0xFFF2FFF9FFFCFFFALL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 132) >> 13) & 1)+ ((*(_WORD *)(a1 + 132) >> 11) & 1)+ (HIBYTE(*(_WORD *)(a1 + 132)) & 1))+ (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16(v12, (uint16x4_t)0xFFF7FFF6FFF4FFFBLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 132) >> 3) & 1));
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v15 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 > 7;
        v18 = v17 & ~(_BYTE)v11 | v9;
        v19 = v17 | v11;
        v80 = v18;
        v81 = v19 | v18;
        if (((v19 | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v82 = (v20 == 0) | v19;
        v83 = v19;
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v9;
LABEL_8:
        v15 = v10;
        v16 = v11;
LABEL_10:
        ++v7;
        v9 = v14;
        v10 = v15;
        v11 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_154;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      v31 = v25++ >= 9;
      if (v31)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_154:
      v79 = 1;
      goto LABEL_155;
    }
    v34 = v26 >> 3;
    v35 = v83;
    if ((v82 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35)
          goto LABEL_124;
        if ((*(_WORD *)(a1 + 132) & 0x10) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_180;
          v40 = objc_alloc_init(GEOPDAnalyticMetadata);
          if (GEOPDAnalyticMetadataReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            v41 = 24;
            goto LABEL_108;
          }
          goto LABEL_179;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_180;
        v73 = *(_WORD *)(a1 + 132) << 11;
        goto LABEL_151;
      case 2:
        if (!v35)
          goto LABEL_124;
        if ((*(_WORD *)(a1 + 132) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_180;
          v73 = *(_WORD *)(a1 + 132) << 9;
          goto LABEL_151;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_180;
        v40 = objc_alloc_init(GEOPDClientMetadata);
        if (!GEOPDClientMetadataReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
          goto LABEL_179;
        PBReaderRecallMark();
        v41 = 40;
        goto LABEL_108;
      case 3:
        if (!v35 || (*(_WORD *)(a1 + 132) & 0x80) != 0)
          goto LABEL_124;
        PBReaderReadString();
        v40 = (GEOPDAnalyticMetadata *)objc_claimAutoreleasedReturnValue();
        if (v40)
          -[GEOPDPlaceRequest _addNoFlagsDisplayLanguage:](a1, v40);
        goto LABEL_114;
      case 4:
        if (!v35 || (*(_WORD *)(a1 + 132) & 0x4000) != 0)
          goto LABEL_124;
        PBReaderReadString();
        v40 = (GEOPDAnalyticMetadata *)objc_claimAutoreleasedReturnValue();
        if (v40)
          -[GEOPDPlaceRequest _addNoFlagsSpokenLanguage:](a1, v40);
        goto LABEL_114;
      case 5:
        if (!v35 || (*(_WORD *)(a1 + 132) & 0x2000) != 0)
          goto LABEL_124;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_180;
        v40 = objc_alloc_init(GEOPDComponentInfo);
        if (!GEOPDComponentInfoReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
          goto LABEL_179;
        PBReaderRecallMark();
        -[GEOPDPlaceRequest _addNoFlagsRequestedComponent:](a1, v40);
        goto LABEL_114;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_124;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        *(_WORD *)(a1 + 132) |= 4u;
        v6 = (int *)MEMORY[0x1E0D82BD8];
        while (2)
        {
          v50 = *v21;
          v51 = *(_QWORD *)(v3 + v50);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v51);
            *(_QWORD *)(v3 + v50) = v52;
            v49 |= (unint64_t)(v53 & 0x7F) << v47;
            if (v53 < 0)
            {
              v47 += 7;
              v31 = v48++ >= 9;
              if (v31)
              {
                v49 = 0;
                goto LABEL_129;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          v49 = 0;
LABEL_129:
        v71 = v49 != 0;
        v72 = 129;
        goto LABEL_148;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_124;
        v54 = 0;
        v55 = 0;
        v56 = 0;
        *(_WORD *)(a1 + 132) |= 1u;
        v6 = (int *)MEMORY[0x1E0D82BD8];
        while (2)
        {
          v57 = *v21;
          v58 = *(_QWORD *)(v3 + v57);
          v59 = v58 + 1;
          if (v58 == -1 || v59 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v60 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v58);
            *(_QWORD *)(v3 + v57) = v59;
            v56 |= (unint64_t)(v60 & 0x7F) << v54;
            if (v60 < 0)
            {
              v54 += 7;
              v31 = v55++ >= 9;
              if (v31)
              {
                LODWORD(v56) = 0;
                goto LABEL_133;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          LODWORD(v56) = 0;
LABEL_133:
        *(_DWORD *)(a1 + 124) = v56;
        goto LABEL_153;
      case 8:
        if (!v35)
          goto LABEL_124;
        if ((*(_WORD *)(a1 + 132) & 0x800) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_180;
          v73 = 16 * *(_WORD *)(a1 + 132);
          goto LABEL_151;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_180;
        v40 = objc_alloc_init(GEOPDPlaceRequestParameters);
        if (!GEOPDPlaceRequestParametersReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
          goto LABEL_179;
        PBReaderRecallMark();
        v41 = 80;
        goto LABEL_108;
      case 9:
        if (!v35)
          goto LABEL_124;
        if ((*(_WORD *)(a1 + 132) & 0x100) == 0)
        {
          PBReaderReadString();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = 56;
          goto LABEL_97;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_180;
        v73 = *(_WORD *)(a1 + 132) << 7;
        goto LABEL_151;
      case 10:
        goto LABEL_49;
      case 11:
        if (!v35 || (*(_WORD *)(a1 + 132) & 0x20) != 0)
          goto LABEL_124;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_180;
        v40 = objc_alloc_init(GEOPDComponentInfo);
        if (!GEOPDComponentInfoReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
          goto LABEL_179;
        PBReaderRecallMark();
        -[GEOPDPlaceRequest _addNoFlagsAuxiliaryTierRequestedComponent:](a1, v40);
        goto LABEL_114;
      case 12:
        if (!v35)
          goto LABEL_124;
        if ((*(_WORD *)(a1 + 132) & 0x1000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_180;
          v73 = 8 * *(_WORD *)(a1 + 132);
LABEL_151:
          v7 += v73 >> 15;
          goto LABEL_152;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_180;
        v40 = objc_alloc_init(GEOPrivacyMetadata);
        if (GEOPrivacyMetadataReadAllFrom((uint64_t)v40, (void *)v3))
        {
          PBReaderRecallMark();
          v41 = 88;
LABEL_108:
          v62 = *(void **)(a1 + v41);
          *(_QWORD *)(a1 + v41) = v40;

          --v7;
LABEL_152:
          v22 = (int *)MEMORY[0x1E0D82BC8];
          v6 = (int *)MEMORY[0x1E0D82BD8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
LABEL_153:
          if (!(v81 & 1 | (v7 != 0)))
            goto LABEL_154;
          continue;
        }
LABEL_179:

LABEL_180:
        v79 = 0;
        v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_155:
        if ((v80 & 1) != 0)
LABEL_156:
          *(_WORD *)(a1 + 132) |= 8u;
        if (v83 || (v79 & 1) == 0)
        {
          *(_WORD *)(a1 + 132) |= 0x10u;
          *(_WORD *)(a1 + 132) |= 0x40u;
          *(_WORD *)(a1 + 132) |= 0x80u;
          *(_WORD *)(a1 + 132) |= 0x4000u;
          *(_WORD *)(a1 + 132) |= 0x2000u;
          *(_WORD *)(a1 + 132) |= 0x800u;
          *(_WORD *)(a1 + 132) |= 0x100u;
          *(_WORD *)(a1 + 132) |= 0x20u;
          *(_WORD *)(a1 + 132) |= 0x1000u;
          *(_WORD *)(a1 + 132) |= 0x400u;
          *(_WORD *)(a1 + 132) |= 0x200u;
        }
        else if (v20)
        {
          while (1)
          {
            v75 = *v20++;
            v74 = v75;
            v76 = 16;
            switch(v75)
            {
              case 0:
                goto LABEL_173;
              case 1:
                goto LABEL_172;
              case 2:
                v76 = 64;
                goto LABEL_172;
              case 3:
                v76 = 128;
                goto LABEL_172;
              case 4:
                v76 = 0x4000;
                goto LABEL_172;
              case 5:
                v76 = 0x2000;
                goto LABEL_172;
              case 6:
              case 7:
              case 10:
                continue;
              case 8:
                v76 = 2048;
                goto LABEL_172;
              case 9:
                v76 = 256;
                goto LABEL_172;
              case 11:
                v76 = 32;
                goto LABEL_172;
              case 12:
                v76 = 4096;
                goto LABEL_172;
              case 13:
                v76 = 1024;
                goto LABEL_172;
              default:
                if (v74 != 1001)
                  continue;
                v76 = 512;
LABEL_172:
                *(_WORD *)(a1 + 132) |= v76;
                break;
            }
          }
        }
LABEL_173:
        if (v79)
          v3 = *(_BYTE *)(v3 + *v22) == 0;
        else
          v3 = 0;
        if (v83)
        {
          v77 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 13:
        if (!v35 || (*(_WORD *)(a1 + 132) & 0x400) != 0)
          goto LABEL_124;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_180;
        v40 = objc_alloc_init(GEOPDComponentInfo);
        if (!GEOPDComponentInfoReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
          goto LABEL_179;
        PBReaderRecallMark();
        -[GEOPDPlaceRequest _addNoFlagsPartiallyComposedSearchResultRequestedComponent:](a1, v40);
LABEL_114:

        goto LABEL_152;
      default:
        if ((_DWORD)v34 == 1000)
        {
          if ((v8 & 1) != 0)
          {
            v63 = 0;
            v64 = 0;
            v65 = 0;
            *(_WORD *)(a1 + 132) |= 2u;
            v6 = (int *)MEMORY[0x1E0D82BD8];
            while (1)
            {
              v66 = *v21;
              v67 = *(_QWORD *)(v3 + v66);
              v68 = v67 + 1;
              if (v67 == -1 || v68 > *(_QWORD *)(v3 + *v6))
                break;
              v69 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v67);
              *(_QWORD *)(v3 + v66) = v68;
              v65 |= (unint64_t)(v69 & 0x7F) << v63;
              if ((v69 & 0x80) == 0)
                goto LABEL_145;
              v63 += 7;
              v31 = v64++ >= 9;
              if (v31)
              {
                v65 = 0;
                goto LABEL_147;
              }
            }
            *(_BYTE *)(v3 + *v22) = 1;
LABEL_145:
            if (*(_BYTE *)(v3 + *v22))
              v65 = 0;
LABEL_147:
            v71 = v65 != 0;
            v72 = 128;
LABEL_148:
            *(_BYTE *)(a1 + v72) = v71;
            goto LABEL_153;
          }
LABEL_124:
          v70 = PBReaderSkipValueWithTag();
          v23 = (int *)MEMORY[0x1E0D82BB8];
          v22 = (int *)MEMORY[0x1E0D82BC8];
          v6 = (int *)MEMORY[0x1E0D82BD8];
          if ((v70 & 1) == 0)
          {
            v79 = 0;
            goto LABEL_155;
          }
          goto LABEL_153;
        }
        if ((_DWORD)v34 == 1001)
        {
          if (!v35)
            goto LABEL_124;
          if ((*(_WORD *)(a1 + 132) & 0x200) == 0)
          {
            PBReaderReadData();
            v42 = objc_claimAutoreleasedReturnValue();
            v43 = 64;
LABEL_97:
            v61 = *(void **)(a1 + v43);
            *(_QWORD *)(a1 + v43) = v42;

            v23 = (int *)MEMORY[0x1E0D82BB8];
            v22 = (int *)MEMORY[0x1E0D82BC8];
            --v7;
            v6 = (int *)MEMORY[0x1E0D82BD8];
            goto LABEL_153;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_180;
          v73 = *(_WORD *)(a1 + 132) << 6;
          goto LABEL_151;
        }
LABEL_49:
        if ((v80 & 1) == 0 || (*(_WORD *)(a1 + 132) & 8) != 0)
          goto LABEL_124;
        if (!*(_QWORD *)(a1 + 16))
        {
          v44 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v45 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v44;

        }
        v46 = PBUnknownFieldAdd();
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v6 = (int *)MEMORY[0x1E0D82BD8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        if (!v46)
        {
          v79 = 0;
          goto LABEL_156;
        }
        goto LABEL_153;
    }
  }
}

BOOL GEOPDComponentInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  id v38;
  void *v39;
  GEOPDComponentFilter *v40;
  void *v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  _BOOL8 v56;

  v4 = a2;
  objc_sync_enter(v4);
  if (v4)
  {
    v5 = (int *)MEMORY[0x1E0D82BF0];
    v6 = (int *)MEMORY[0x1E0D82BD8];
    v7 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v4[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v4[*MEMORY[0x1E0D82BD8]])
    {
      v8 = (int *)MEMORY[0x1E0D82BB8];
      while (!v4[*v7])
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = *v5;
          v13 = *(_QWORD *)&v4[v12];
          v14 = v13 + 1;
          if (v13 == -1 || v14 > *(_QWORD *)&v4[*v6])
            break;
          v15 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v13);
          *(_QWORD *)&v4[v12] = v14;
          v11 |= (unint64_t)(v15 & 0x7F) << v9;
          if ((v15 & 0x80) == 0)
            goto LABEL_13;
          v9 += 7;
          v16 = v10++ >= 9;
          if (v16)
          {
            v11 = 0;
            v17 = v4[*v7];
            goto LABEL_15;
          }
        }
        v4[*v7] = 1;
LABEL_13:
        v17 = v4[*v7];
        if (v4[*v7])
          v11 = 0;
LABEL_15:
        if (v17 || (v11 & 7) == 4)
          break;
        switch((v11 >> 3))
        {
          case 1u:
            v19 = 0;
            v20 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 44) |= 4u;
            while (1)
            {
              v22 = *v5;
              v23 = *(_QWORD *)&v4[v22];
              v24 = v23 + 1;
              if (v23 == -1 || v24 > *(_QWORD *)&v4[*v6])
                break;
              v25 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v23);
              *(_QWORD *)&v4[v22] = v24;
              v21 |= (unint64_t)(v25 & 0x7F) << v19;
              if ((v25 & 0x80) == 0)
                goto LABEL_63;
              v19 += 7;
              v16 = v20++ >= 9;
              if (v16)
              {
                LODWORD(v21) = 0;
                goto LABEL_65;
              }
            }
            v4[*v7] = 1;
LABEL_63:
            if (v4[*v7])
              LODWORD(v21) = 0;
LABEL_65:
            v55 = 32;
            goto LABEL_82;
          case 2u:
            v26 = 0;
            v27 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 44) |= 2u;
            while (2)
            {
              v28 = *v5;
              v29 = *(_QWORD *)&v4[v28];
              v30 = v29 + 1;
              if (v29 == -1 || v30 > *(_QWORD *)&v4[*v6])
              {
                v4[*v7] = 1;
              }
              else
              {
                v31 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v29);
                *(_QWORD *)&v4[v28] = v30;
                v21 |= (unint64_t)(v31 & 0x7F) << v26;
                if (v31 < 0)
                {
                  v26 += 7;
                  v16 = v27++ >= 9;
                  if (v16)
                  {
                    LODWORD(v21) = 0;
                    goto LABEL_69;
                  }
                  continue;
                }
              }
              break;
            }
            if (v4[*v7])
              LODWORD(v21) = 0;
LABEL_69:
            v55 = 28;
            goto LABEL_82;
          case 3u:
            v32 = 0;
            v33 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 44) |= 1u;
            while (2)
            {
              v34 = *v5;
              v35 = *(_QWORD *)&v4[v34];
              v36 = v35 + 1;
              if (v35 == -1 || v36 > *(_QWORD *)&v4[*v6])
              {
                v4[*v7] = 1;
              }
              else
              {
                v37 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v35);
                *(_QWORD *)&v4[v34] = v36;
                v21 |= (unint64_t)(v37 & 0x7F) << v32;
                if (v37 < 0)
                {
                  v32 += 7;
                  v16 = v33++ >= 9;
                  if (v16)
                  {
                    LODWORD(v21) = 0;
                    goto LABEL_73;
                  }
                  continue;
                }
              }
              break;
            }
            if (v4[*v7])
              LODWORD(v21) = 0;
LABEL_73:
            v55 = 24;
            goto LABEL_82;
          case 5u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_86;
            v40 = objc_alloc_init(GEOPDComponentFilter);
            if (!GEOPDComponentFilterReadAllFrom((uint64_t)v40, v4, a3))
            {

              goto LABEL_86;
            }
            PBReaderRecallMark();
            v41 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v40;

LABEL_83:
            if (*(_QWORD *)&v4[*v5] >= *(_QWORD *)&v4[*v6])
              goto LABEL_84;
            break;
          case 6u:
            v42 = 0;
            v43 = 0;
            v44 = 0;
            *(_BYTE *)(a1 + 44) |= 0x10u;
            while (2)
            {
              v45 = *v5;
              v46 = *(_QWORD *)&v4[v45];
              v47 = v46 + 1;
              if (v46 == -1 || v47 > *(_QWORD *)&v4[*v6])
              {
                v4[*v7] = 1;
              }
              else
              {
                v48 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v46);
                *(_QWORD *)&v4[v45] = v47;
                v44 |= (unint64_t)(v48 & 0x7F) << v42;
                if (v48 < 0)
                {
                  v42 += 7;
                  v16 = v43++ >= 9;
                  if (v16)
                  {
                    v44 = 0;
                    goto LABEL_77;
                  }
                  continue;
                }
              }
              break;
            }
            if (v4[*v7])
              v44 = 0;
LABEL_77:
            *(_BYTE *)(a1 + 40) = v44 != 0;
            goto LABEL_83;
          case 7u:
            v49 = 0;
            v50 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 44) |= 8u;
            while (2)
            {
              v51 = *v5;
              v52 = *(_QWORD *)&v4[v51];
              v53 = v52 + 1;
              if (v52 == -1 || v53 > *(_QWORD *)&v4[*v6])
              {
                v4[*v7] = 1;
              }
              else
              {
                v54 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v52);
                *(_QWORD *)&v4[v51] = v53;
                v21 |= (unint64_t)(v54 & 0x7F) << v49;
                if (v54 < 0)
                {
                  v49 += 7;
                  v16 = v50++ >= 9;
                  if (v16)
                  {
                    LODWORD(v21) = 0;
                    goto LABEL_81;
                  }
                  continue;
                }
              }
              break;
            }
            if (v4[*v7])
              LODWORD(v21) = 0;
LABEL_81:
            v55 = 36;
LABEL_82:
            *(_DWORD *)(a1 + v55) = v21;
            goto LABEL_83;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v38 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v39 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v38;

            }
            if (!PBUnknownFieldAdd())
              goto LABEL_86;
            goto LABEL_83;
        }
      }
    }
LABEL_84:
    v56 = v4[*v7] == 0;
  }
  else
  {
LABEL_86:
    v56 = 0;
  }
  objc_sync_exit(v4);

  return v56;
}

void sub_1886794E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDClientMetadataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 276))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDClientMetadataReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 280));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 272) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 276) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDClientMetadataReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDClientMetadataReadAllFrom_initialTag;
  Specified = GEOPDClientMetadataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDClientMetadataCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 280));
  return Specified;
}

void sub_188679870(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDClientMetadataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint32x4_t v14;
  int8x16_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  char v22;
  int *v23;
  int *v24;
  int *v25;
  char v26;
  int *v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  BOOL v35;
  int v36;
  int v37;
  unint64_t v39;
  BOOL v40;
  int *v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  GEOAdditionalEnabledMarkets *v47;
  uint64_t v48;
  id v49;
  void *v50;
  int v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  int *v83;
  int *v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  int *v100;
  int *v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  int *v123;
  int *v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  int *v133;
  int *v134;
  char v135;
  unsigned int v136;
  uint64_t v137;
  int *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  void *v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char v150;
  char v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  int *v157;
  int *v158;
  char v159;
  unsigned int v160;
  uint64_t v161;
  int *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char v166;
  char v167;
  char v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char v179;
  char v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char v193;
  char v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char v200;
  char v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  int v208;
  uint64_t v209;
  void *v210;
  char v212;
  int v213;
  char v214;
  char v215;
  char v216;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 280));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 276);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 272));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 316);
  v14 = (uint32x4_t)vdupq_n_s32(v13);
  v15.i64[0] = 0x100000001;
  v15.i64[1] = 0x100000001;
  v16 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDA280), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDA290), v15)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDA260), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDA270), v15))), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDA2A0), v15)))+ ((v13 >> 10) & 1)+ (v13 >> 31);
  while (2)
  {
    v17 = 1;
    v18 = 1;
    v19 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v16;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v18 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v20 = v16 > 0xF;
        v21 = v20 & ~(_BYTE)v12 | v10;
        v22 = v20 | v12;
        if ((((v20 | v12) | v9) & 1) != 0)
          v23 = 0;
        else
          v23 = a3;
        v24 = (int *)MEMORY[0x1E0D82BF0];
        v213 = 1;
        v25 = (int *)MEMORY[0x1E0D82BC8];
        v26 = v21;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_399;
        v212 = v21;
        v214 = v22 | v21;
        v216 = (v23 == 0) | v22;
        v27 = (int *)MEMORY[0x1E0D82BB8];
        v215 = v22;
        break;
      default:
        ++v16;
LABEL_7:
        v17 = v10;
LABEL_8:
        v18 = v11;
        v19 = v12;
LABEL_10:
        ++v8;
        v10 = v17;
        v11 = v18;
        v12 = v19;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v25))
      goto LABEL_394;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    while (1)
    {
      v31 = *v24;
      v32 = *(_QWORD *)(v3 + v31);
      v33 = v32 + 1;
      if (v32 == -1 || v33 > *(_QWORD *)(v3 + *v7))
        break;
      v34 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v32);
      *(_QWORD *)(v3 + v31) = v33;
      v30 |= (unint64_t)(v34 & 0x7F) << v28;
      if ((v34 & 0x80) == 0)
        goto LABEL_25;
      v28 += 7;
      v35 = v29++ >= 9;
      if (v35)
      {
        v30 = 0;
        v36 = *(unsigned __int8 *)(v3 + *v25);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v25) = 1;
LABEL_25:
    v36 = *(unsigned __int8 *)(v3 + *v25);
    if (*(_BYTE *)(v3 + *v25))
      v30 = 0;
LABEL_27:
    v37 = v30 & 7;
    if (v36 || v37 == 4)
    {
LABEL_394:
      v213 = 1;
      goto LABEL_398;
    }
    v39 = v30 >> 3;
    v40 = v22;
    if ((v216 & 1) == 0)
    {
      v41 = v23;
      do
      {
        v43 = *v41++;
        v42 = v43;
        v40 = v43 != 0;
        if (v43)
          v44 = v42 == (_DWORD)v39;
        else
          v44 = 1;
      }
      while (!v44);
    }
    switch((int)v39)
    {
      case 1:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 318) & 0x20) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 184;
          goto LABEL_230;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_431;
        v172 = *(_QWORD *)(a1 + 316) << 42;
        goto LABEL_351;
      case 2:
      case 6:
      case 7:
      case 14:
        goto LABEL_49;
      case 3:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 318) & 0x40) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 192;
          goto LABEL_230;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_431;
        v172 = *(_QWORD *)(a1 + 316) << 41;
        goto LABEL_351;
      case 4:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 319) & 2) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 216;
          goto LABEL_230;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_431;
        v172 = *(_QWORD *)(a1 + 316) << 38;
        goto LABEL_351;
      case 5:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 319) & 8) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 232;
          goto LABEL_230;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_431;
        v172 = *(_QWORD *)(a1 + 316) << 36;
        goto LABEL_351;
      case 8:
        if ((v9 & 1) == 0)
          goto LABEL_279;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        *(_QWORD *)(a1 + 316) |= 0x40uLL;
        while (2)
        {
          v55 = *v24;
          v56 = *(_QWORD *)(v3 + v55);
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v25) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v56);
            *(_QWORD *)(v3 + v55) = v57;
            v54 |= (unint64_t)(v58 & 0x7F) << v52;
            if (v58 < 0)
            {
              v52 += 7;
              v35 = v53++ >= 9;
              if (v35)
              {
                LODWORD(v54) = 0;
                goto LABEL_284;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v25))
          LODWORD(v54) = 0;
LABEL_284:
        v169 = 308;
        goto LABEL_322;
      case 9:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 318) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_431;
          v172 = *(_QWORD *)(a1 + 316) << 45;
          goto LABEL_351;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_431;
        v47 = objc_alloc_init(GEOAdditionalEnabledMarkets);
        if (!GEOAdditionalEnabledMarketsReadAllFrom((uint64_t)v47, (void *)v3, v11 & 1))
          goto LABEL_430;
        PBReaderRecallMark();
        v48 = 160;
        goto LABEL_268;
      case 10:
        if ((v9 & 1) == 0)
          goto LABEL_279;
        v59 = 0;
        v60 = 0;
        v54 = 0;
        *(_QWORD *)(a1 + 316) |= 0x20uLL;
        while (2)
        {
          v61 = *v24;
          v62 = *(_QWORD *)(v3 + v61);
          v63 = v62 + 1;
          if (v62 == -1 || v63 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v25) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v62);
            *(_QWORD *)(v3 + v61) = v63;
            v54 |= (unint64_t)(v64 & 0x7F) << v59;
            if (v64 < 0)
            {
              v59 += 7;
              v35 = v60++ >= 9;
              if (v35)
              {
                LODWORD(v54) = 0;
                goto LABEL_288;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v25))
          LODWORD(v54) = 0;
LABEL_288:
        v169 = 304;
        goto LABEL_322;
      case 11:
        if ((v9 & 1) == 0)
          goto LABEL_279;
        v65 = 0;
        v66 = 0;
        v54 = 0;
        *(_QWORD *)(a1 + 316) |= 4uLL;
        while (2)
        {
          v67 = *v24;
          v68 = *(_QWORD *)(v3 + v67);
          v69 = v68 + 1;
          if (v68 == -1 || v69 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v25) = 1;
          }
          else
          {
            v70 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v68);
            *(_QWORD *)(v3 + v67) = v69;
            v54 |= (unint64_t)(v70 & 0x7F) << v65;
            if (v70 < 0)
            {
              v65 += 7;
              v35 = v66++ >= 9;
              if (v35)
              {
                LODWORD(v54) = 0;
                goto LABEL_292;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v25))
          LODWORD(v54) = 0;
LABEL_292:
        v169 = 292;
        goto LABEL_322;
      case 12:
        if ((v9 & 1) == 0)
          goto LABEL_279;
        v71 = 0;
        v72 = 0;
        v54 = 0;
        *(_QWORD *)(a1 + 316) |= 2uLL;
        while (2)
        {
          v73 = *v24;
          v74 = *(_QWORD *)(v3 + v73);
          v75 = v74 + 1;
          if (v74 == -1 || v75 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v25) = 1;
          }
          else
          {
            v76 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v74);
            *(_QWORD *)(v3 + v73) = v75;
            v54 |= (unint64_t)(v76 & 0x7F) << v71;
            if (v76 < 0)
            {
              v71 += 7;
              v35 = v72++ >= 9;
              if (v35)
              {
                LODWORD(v54) = 0;
                goto LABEL_296;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v25))
          LODWORD(v54) = 0;
LABEL_296:
        v169 = 288;
        goto LABEL_322;
      case 13:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 318) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_431;
          v172 = *(_QWORD *)(a1 + 316) << 40;
          goto LABEL_351;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_431;
        v47 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v47, (void *)v3, v11 & 1))
          goto LABEL_430;
        PBReaderRecallMark();
        v48 = 200;
        goto LABEL_268;
      case 15:
        if (!v40 || (*(_BYTE *)(a1 + 319) & 1) != 0)
          goto LABEL_273;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_431;
        v47 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v47, (void *)v3, v11 & 1))
          goto LABEL_430;
        PBReaderRecallMark();
        -[GEOPDClientMetadata _addNoFlagsDeviceHistoricalLocation:](a1, v47);
        goto LABEL_164;
      case 16:
        if ((v9 & 1) == 0)
          goto LABEL_279;
        v77 = 0;
        v78 = 0;
        v54 = 0;
        *(_QWORD *)(a1 + 316) |= 0x10uLL;
        while (2)
        {
          v79 = *v24;
          v80 = *(_QWORD *)(v3 + v79);
          v81 = v80 + 1;
          if (v80 == -1 || v81 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v25) = 1;
          }
          else
          {
            v82 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v80);
            *(_QWORD *)(v3 + v79) = v81;
            v54 |= (unint64_t)(v82 & 0x7F) << v77;
            if (v82 < 0)
            {
              v77 += 7;
              v35 = v78++ >= 9;
              if (v35)
              {
                LODWORD(v54) = 0;
                goto LABEL_300;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v25))
          LODWORD(v54) = 0;
LABEL_300:
        v169 = 300;
        goto LABEL_322;
      case 17:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 318) & 0x10) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 176;
          goto LABEL_230;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_431;
        v172 = *(_QWORD *)(a1 + 316) << 43;
        goto LABEL_351;
      case 18:
        if (!v40 || (*(_BYTE *)(a1 + 317) & 0x10) != 0)
          goto LABEL_279;
        if (v37 != 2)
        {
          v173 = 0;
          v174 = 0;
          v175 = 0;
          while (1)
          {
            v176 = *v24;
            v177 = *(_QWORD *)(v3 + v176);
            v178 = v177 + 1;
            if (v177 == -1 || v178 > *(_QWORD *)(v3 + *v7))
              goto LABEL_392;
            v179 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v177);
            *(_QWORD *)(v3 + v176) = v178;
            v175 |= (unint64_t)(v179 & 0x7F) << v173;
            if (v179 < 0)
            {
              v173 += 7;
              v35 = v174++ >= 9;
              if (!v35)
                continue;
            }
            goto LABEL_393;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_431;
        while (1)
        {
          v83 = (int *)MEMORY[0x1E0D82BD8];
          v84 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v24) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_278;
          }
          v85 = 0;
          v86 = 0;
          v87 = 0;
          v88 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v89 = *v24;
            v90 = *(_QWORD *)(v3 + v89);
            v91 = v90 + 1;
            if (v90 == -1 || v91 > *(_QWORD *)(v3 + *v83))
              break;
            v92 = *(_BYTE *)(*(_QWORD *)(v3 + *v88) + v90);
            *(_QWORD *)(v3 + v89) = v91;
            v87 |= (unint64_t)(v92 & 0x7F) << v85;
            if (v92 < 0)
            {
              v85 += 7;
              v35 = v86++ >= 9;
              if (!v35)
                continue;
            }
            goto LABEL_136;
          }
          *(_BYTE *)(v3 + *v84) = 1;
LABEL_136:
          PBRepeatedInt32Add();
        }
      case 19:
        if ((v9 & 1) == 0)
          goto LABEL_279;
        v93 = 0;
        v94 = 0;
        v95 = 0;
        *(_QWORD *)(a1 + 316) |= 0x80uLL;
        while (2)
        {
          v96 = *v24;
          v97 = *(_QWORD *)(v3 + v96);
          v98 = v97 + 1;
          if (v97 == -1 || v98 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v25) = 1;
          }
          else
          {
            v99 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v97);
            *(_QWORD *)(v3 + v96) = v98;
            v95 |= (unint64_t)(v99 & 0x7F) << v93;
            if (v99 < 0)
            {
              v93 += 7;
              v35 = v94++ >= 9;
              if (v35)
              {
                v95 = 0;
                goto LABEL_304;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v25))
          v95 = 0;
LABEL_304:
        v170 = v95 != 0;
        v171 = 312;
        goto LABEL_317;
      case 20:
        if (!v40 || (*(_BYTE *)(a1 + 317) & 0x20) != 0)
          goto LABEL_279;
        if (v37 != 2)
        {
          v180 = 0;
          v181 = 0;
          v182 = 0;
          while (1)
          {
            v183 = *v24;
            v184 = *(_QWORD *)(v3 + v183);
            v185 = v184 + 1;
            if (v184 == -1 || v185 > *(_QWORD *)(v3 + *v7))
              goto LABEL_392;
            v186 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v184);
            *(_QWORD *)(v3 + v183) = v185;
            v182 |= (unint64_t)(v186 & 0x7F) << v180;
            if (v186 < 0)
            {
              v180 += 7;
              v35 = v181++ >= 9;
              if (!v35)
                continue;
            }
            goto LABEL_393;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_431;
        while (1)
        {
          v100 = (int *)MEMORY[0x1E0D82BD8];
          v101 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v24) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_278;
          }
          v102 = 0;
          v103 = 0;
          v104 = 0;
          v105 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v106 = *v24;
            v107 = *(_QWORD *)(v3 + v106);
            v108 = v107 + 1;
            if (v107 == -1 || v108 > *(_QWORD *)(v3 + *v100))
              break;
            v109 = *(_BYTE *)(*(_QWORD *)(v3 + *v105) + v107);
            *(_QWORD *)(v3 + v106) = v108;
            v104 |= (unint64_t)(v109 & 0x7F) << v102;
            if (v109 < 0)
            {
              v102 += 7;
              v35 = v103++ >= 9;
              if (!v35)
                continue;
            }
            goto LABEL_159;
          }
          *(_BYTE *)(v3 + *v101) = 1;
LABEL_159:
          PBRepeatedInt32Add();
        }
      case 21:
        if (v40 && (*(_BYTE *)(a1 + 318) & 8) == 0)
        {
          PBReaderReadString();
          v47 = (GEOAdditionalEnabledMarkets *)objc_claimAutoreleasedReturnValue();
          if (v47)
            -[GEOPDClientMetadata _addNoFlagsBusinessChatPreflightIdentifier:](a1, v47);
LABEL_164:

          goto LABEL_352;
        }
LABEL_273:
        v167 = PBReaderSkipValueWithTag();
        v25 = (int *)MEMORY[0x1E0D82BC8];
        v7 = (int *)MEMORY[0x1E0D82BD8];
        v27 = (int *)MEMORY[0x1E0D82BB8];
        if ((v167 & 1) == 0)
          goto LABEL_396;
        goto LABEL_354;
      case 22:
        if ((v9 & 1) == 0)
          goto LABEL_279;
        v110 = 0;
        v111 = 0;
        v54 = 0;
        *(_QWORD *)(a1 + 316) |= 1uLL;
        while (2)
        {
          v112 = *v24;
          v113 = *(_QWORD *)(v3 + v112);
          v114 = v113 + 1;
          if (v113 == -1 || v114 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v25) = 1;
          }
          else
          {
            v115 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v113);
            *(_QWORD *)(v3 + v112) = v114;
            v54 |= (unint64_t)(v115 & 0x7F) << v110;
            if (v115 < 0)
            {
              v110 += 7;
              v35 = v111++ >= 9;
              if (v35)
              {
                LODWORD(v54) = 0;
                goto LABEL_308;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v25))
          LODWORD(v54) = 0;
LABEL_308:
        v169 = 284;
        goto LABEL_322;
      case 23:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 319) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_431;
          v172 = *(_QWORD *)(a1 + 316) << 34;
          goto LABEL_351;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_431;
        v47 = objc_alloc_init(GEOLocalizationCapabilities);
        if (!GEOLocalizationCapabilitiesReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_430;
        PBReaderRecallMark();
        v48 = 248;
        goto LABEL_268;
      case 24:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 319) & 4) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 224;
          goto LABEL_230;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_431;
        v172 = *(_QWORD *)(a1 + 316) << 37;
        goto LABEL_351;
      case 25:
        if ((v9 & 1) == 0)
          goto LABEL_279;
        v116 = 0;
        v117 = 0;
        v118 = 0;
        *(_QWORD *)(a1 + 316) |= 0x100uLL;
        while (2)
        {
          v119 = *v24;
          v120 = *(_QWORD *)(v3 + v119);
          v121 = v120 + 1;
          if (v120 == -1 || v121 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v25) = 1;
          }
          else
          {
            v122 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v120);
            *(_QWORD *)(v3 + v119) = v121;
            v118 |= (unint64_t)(v122 & 0x7F) << v116;
            if (v122 < 0)
            {
              v116 += 7;
              v35 = v117++ >= 9;
              if (v35)
              {
                v118 = 0;
                goto LABEL_312;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v25))
          v118 = 0;
LABEL_312:
        v170 = v118 != 0;
        v171 = 313;
        goto LABEL_317;
      case 26:
        if (!v40 || (*(_BYTE *)(a1 + 317) & 0x80) != 0)
          goto LABEL_279;
        if (v37 != 2)
        {
          v187 = 0;
          v188 = 0;
          v189 = 0;
          while (1)
          {
            v190 = *v24;
            v191 = *(_QWORD *)(v3 + v190);
            v192 = v191 + 1;
            if (v191 == -1 || v192 > *(_QWORD *)(v3 + *v7))
              goto LABEL_392;
            v193 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v191);
            *(_QWORD *)(v3 + v190) = v192;
            v189 |= (unint64_t)(v193 & 0x7F) << v187;
            if (v193 < 0)
            {
              v187 += 7;
              v35 = v188++ >= 9;
              if (!v35)
                continue;
            }
            goto LABEL_393;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_431;
        while (1)
        {
          v123 = (int *)MEMORY[0x1E0D82BD8];
          v124 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v24) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_278;
          }
          v125 = 0;
          v126 = 0;
          v127 = 0;
          v128 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v129 = *v24;
            v130 = *(_QWORD *)(v3 + v129);
            v131 = v130 + 1;
            if (v130 == -1 || v131 > *(_QWORD *)(v3 + *v123))
              break;
            v132 = *(_BYTE *)(*(_QWORD *)(v3 + *v128) + v130);
            *(_QWORD *)(v3 + v129) = v131;
            v127 |= (unint64_t)(v132 & 0x7F) << v125;
            if (v132 < 0)
            {
              v125 += 7;
              v35 = v126++ >= 9;
              if (!v35)
                continue;
            }
            goto LABEL_203;
          }
          *(_BYTE *)(v3 + *v124) = 1;
LABEL_203:
          PBRepeatedInt32Add();
        }
      case 27:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 319) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_431;
          v172 = *(_QWORD *)(a1 + 316) << 33;
          goto LABEL_351;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_431;
        v47 = objc_alloc_init(GEOPDMapsSuggestionsTouristInfo);
        if (!GEOPDMapsSuggestionsTouristInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_430;
        PBReaderRecallMark();
        v48 = 256;
        goto LABEL_268;
      case 28:
        if (!v40 || (*(_BYTE *)(a1 + 317) & 8) != 0)
          goto LABEL_279;
        if (v37 != 2)
        {
          v194 = 0;
          v195 = 0;
          v196 = 0;
          while (1)
          {
            v197 = *v24;
            v198 = *(_QWORD *)(v3 + v197);
            v199 = v198 + 1;
            if (v198 == -1 || v199 > *(_QWORD *)(v3 + *v7))
              goto LABEL_392;
            v200 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v198);
            *(_QWORD *)(v3 + v197) = v199;
            v196 |= (unint64_t)(v200 & 0x7F) << v194;
            if (v200 < 0)
            {
              v194 += 7;
              v35 = v195++ >= 9;
              if (!v35)
                continue;
            }
            goto LABEL_393;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_431;
        while (1)
        {
          v133 = (int *)MEMORY[0x1E0D82BD8];
          v134 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v24) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_278;
          }
          v135 = 0;
          v136 = 0;
          v137 = 0;
          v138 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v139 = *v24;
            v140 = *(_QWORD *)(v3 + v139);
            v141 = v140 + 1;
            if (v140 == -1 || v141 > *(_QWORD *)(v3 + *v133))
              break;
            v142 = *(_BYTE *)(*(_QWORD *)(v3 + *v138) + v140);
            *(_QWORD *)(v3 + v139) = v141;
            v137 |= (unint64_t)(v142 & 0x7F) << v135;
            if (v142 < 0)
            {
              v135 += 7;
              v35 = v136++ >= 9;
              if (!v35)
                continue;
            }
            goto LABEL_223;
          }
          *(_BYTE *)(v3 + *v134) = 1;
LABEL_223:
          PBRepeatedInt32Add();
        }
      case 29:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 319) & 0x80) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 264;
          goto LABEL_230;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_431;
        v172 = *(_QWORD *)(a1 + 316) << 32;
        goto LABEL_351;
      case 30:
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 319) & 0x10) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 240;
LABEL_230:
          v143 = *(void **)(a1 + v46);
          *(_QWORD *)(a1 + v46) = v45;
          goto LABEL_269;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_431;
        v172 = *(_QWORD *)(a1 + 316) << 35;
        goto LABEL_351;
      case 31:
        if ((v9 & 1) == 0)
          goto LABEL_279;
        v144 = 0;
        v145 = 0;
        v146 = 0;
        *(_QWORD *)(a1 + 316) |= 0x200uLL;
        while (2)
        {
          v147 = *v24;
          v148 = *(_QWORD *)(v3 + v147);
          v149 = v148 + 1;
          if (v148 == -1 || v149 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v25) = 1;
          }
          else
          {
            v150 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v148);
            *(_QWORD *)(v3 + v147) = v149;
            v146 |= (unint64_t)(v150 & 0x7F) << v144;
            if (v150 < 0)
            {
              v144 += 7;
              v35 = v145++ >= 9;
              if (v35)
              {
                v146 = 0;
                goto LABEL_316;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v25))
          v146 = 0;
LABEL_316:
        v170 = v146 != 0;
        v171 = 314;
LABEL_317:
        *(_BYTE *)(a1 + v171) = v170;
        goto LABEL_354;
      case 32:
        if ((v9 & 1) == 0)
          goto LABEL_279;
        v151 = 0;
        v152 = 0;
        v54 = 0;
        *(_QWORD *)(a1 + 316) |= 8uLL;
        while (2)
        {
          v153 = *v24;
          v154 = *(_QWORD *)(v3 + v153);
          v155 = v154 + 1;
          if (v154 == -1 || v155 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v25) = 1;
          }
          else
          {
            v156 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v154);
            *(_QWORD *)(v3 + v153) = v155;
            v54 |= (unint64_t)(v156 & 0x7F) << v151;
            if (v156 < 0)
            {
              v151 += 7;
              v35 = v152++ >= 9;
              if (v35)
              {
                LODWORD(v54) = 0;
                goto LABEL_321;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v25))
          LODWORD(v54) = 0;
LABEL_321:
        v169 = 296;
LABEL_322:
        *(_DWORD *)(a1 + v169) = v54;
        goto LABEL_354;
      case 33:
        if (!v40 || (*(_BYTE *)(a1 + 317) & 0x40) != 0)
          goto LABEL_279;
        if (v37 != 2)
        {
          v201 = 0;
          v202 = 0;
          v203 = 0;
          while (1)
          {
            v204 = *v24;
            v205 = *(_QWORD *)(v3 + v204);
            v206 = v205 + 1;
            if (v205 == -1 || v206 > *(_QWORD *)(v3 + *v7))
              break;
            v207 = *(_BYTE *)(*(_QWORD *)(v3 + *v27) + v205);
            *(_QWORD *)(v3 + v204) = v206;
            v203 |= (unint64_t)(v207 & 0x7F) << v201;
            if (v207 < 0)
            {
              v201 += 7;
              v35 = v202++ >= 9;
              if (!v35)
                continue;
            }
            goto LABEL_393;
          }
LABEL_392:
          *(_BYTE *)(v3 + *v25) = 1;
LABEL_393:
          PBRepeatedInt32Add();
          goto LABEL_352;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_431;
        while (1)
        {
          v157 = (int *)MEMORY[0x1E0D82BD8];
          v158 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v24) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            break;
          }
          v159 = 0;
          v160 = 0;
          v161 = 0;
          v162 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v163 = *v24;
            v164 = *(_QWORD *)(v3 + v163);
            v165 = v164 + 1;
            if (v164 == -1 || v165 > *(_QWORD *)(v3 + *v157))
              break;
            v166 = *(_BYTE *)(*(_QWORD *)(v3 + *v162) + v164);
            *(_QWORD *)(v3 + v163) = v165;
            v161 |= (unint64_t)(v166 & 0x7F) << v159;
            if (v166 < 0)
            {
              v159 += 7;
              v35 = v160++ >= 9;
              if (!v35)
                continue;
            }
            goto LABEL_261;
          }
          *(_BYTE *)(v3 + *v158) = 1;
LABEL_261:
          PBRepeatedInt32Add();
        }
LABEL_278:
        PBReaderRecallMark();
        v7 = (int *)MEMORY[0x1E0D82BD8];
        v25 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_353;
      default:
        if ((_DWORD)v39 != 100)
        {
          if ((_DWORD)v39 == 101)
          {
            if (v40)
            {
              if ((*(_BYTE *)(a1 + 318) & 1) == 0)
              {
                if ((PBReaderPlaceMark() & 1) == 0)
                  goto LABEL_431;
                v47 = objc_alloc_init(GEOABBranchInfo);
                if (!GEOABBranchInfoReadAllFrom((uint64_t)v47, (void *)v3, v11 & 1))
                  goto LABEL_430;
                PBReaderRecallMark();
                v48 = 144;
LABEL_268:
                v143 = *(void **)(a1 + v48);
                *(_QWORD *)(a1 + v48) = v47;
LABEL_269:

                --v8;
LABEL_352:
                v25 = (int *)MEMORY[0x1E0D82BC8];
                v7 = (int *)MEMORY[0x1E0D82BD8];
LABEL_353:
                v27 = (int *)MEMORY[0x1E0D82BB8];
                goto LABEL_354;
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_431;
              v172 = *(_QWORD *)(a1 + 316) << 47;
LABEL_351:
              v8 += v172 >> 63;
              goto LABEL_352;
            }
          }
          else
          {
LABEL_49:
            if ((v212 & 1) != 0 && (*(_BYTE *)(a1 + 317) & 4) == 0)
            {
              if (!*(_QWORD *)(a1 + 16))
              {
                v49 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
                v50 = *(void **)(a1 + 16);
                *(_QWORD *)(a1 + 16) = v49;

              }
              v51 = PBUnknownFieldAdd();
              v25 = (int *)MEMORY[0x1E0D82BC8];
              v7 = (int *)MEMORY[0x1E0D82BD8];
              v27 = (int *)MEMORY[0x1E0D82BB8];
              if (!v51)
              {
                v213 = 0;
                v22 = v215;
                goto LABEL_400;
              }
              goto LABEL_354;
            }
          }
LABEL_279:
          v168 = PBReaderSkipValueWithTag();
          v27 = (int *)MEMORY[0x1E0D82BB8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v25 = (int *)MEMORY[0x1E0D82BC8];
          if ((v168 & 1) == 0)
          {
LABEL_396:
            v213 = 0;
            goto LABEL_397;
          }
LABEL_354:
          if (!(v214 & 1 | (v8 != 0)))
          {
            v213 = 1;
LABEL_397:
            v22 = v215;
            goto LABEL_398;
          }
          v22 = v215;
          if (*(_QWORD *)(v3 + *v24) >= *(_QWORD *)(v3 + *v7))
            goto LABEL_394;
          continue;
        }
        if (!v40)
          goto LABEL_279;
        if ((*(_BYTE *)(a1 + 318) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_431;
          v172 = *(_QWORD *)(a1 + 316) << 46;
          goto LABEL_351;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_431;
        v47 = objc_alloc_init(GEOABSecondPartyPlaceRequestClientMetaData);
        if (GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom((uint64_t)v47, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          v48 = 152;
          goto LABEL_268;
        }
LABEL_430:

LABEL_431:
        v213 = 0;
        v22 = v215;
        v25 = (int *)MEMORY[0x1E0D82BC8];
LABEL_398:
        v26 = v212;
LABEL_399:
        if ((v26 & 1) != 0)
LABEL_400:
          *(_QWORD *)(a1 + 316) |= 0x400uLL;
        if (v22 & 1 | ((v213 & 1) == 0))
        {
          *(_QWORD *)(a1 + 316) |= 0xFFFFF800uLL;
        }
        else if (v23)
        {
          while (1)
          {
            v208 = *v23++;
            v209 = 0x200000;
            switch(v208)
            {
              case 0:
                goto LABEL_424;
              case 1:
                goto LABEL_423;
              case 3:
                v209 = 0x400000;
                goto LABEL_423;
              case 4:
                v209 = 0x2000000;
                goto LABEL_423;
              case 5:
                v209 = 0x8000000;
                goto LABEL_423;
              case 9:
                v209 = 0x40000;
                goto LABEL_423;
              case 13:
                v209 = 0x800000;
                goto LABEL_423;
              case 15:
                v209 = 0x1000000;
                goto LABEL_423;
              case 17:
                v209 = 0x100000;
                goto LABEL_423;
              case 18:
                v209 = 4096;
                goto LABEL_423;
              case 20:
                v209 = 0x2000;
                goto LABEL_423;
              case 21:
                v209 = 0x80000;
                goto LABEL_423;
              case 23:
                v209 = 0x20000000;
                goto LABEL_423;
              case 24:
                v209 = 0x4000000;
                goto LABEL_423;
              case 26:
                v209 = 0x8000;
                goto LABEL_423;
              case 27:
                v209 = 0x40000000;
                goto LABEL_423;
              case 28:
                v209 = 2048;
                goto LABEL_423;
              case 29:
                v209 = 0x80000000;
                goto LABEL_423;
              case 30:
                v209 = 0x10000000;
                goto LABEL_423;
              case 33:
                v209 = 0x4000;
LABEL_423:
                *(_QWORD *)(a1 + 316) |= v209;
                break;
              default:
                continue;
            }
          }
        }
LABEL_424:
        if (v213)
        {
          v3 = *(_BYTE *)(v3 + *v25) == 0;
          if ((v22 & 1) == 0)
            return v3;
LABEL_428:
          v210 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v22 & 1) != 0)
            goto LABEL_428;
        }
        return v3;
    }
  }
}

unint64_t GEOAdditionalEnabledMarketsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOAdditionalEnabledMarketsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOAdditionalEnabledMarketsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOAdditionalEnabledMarketsReadAllFrom_initialTag;
  Specified = GEOAdditionalEnabledMarketsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18867B600(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAdditionalEnabledMarketsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  int v16;
  int *v17;
  _BOOL4 v18;
  int *v19;
  int v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  void *v39;
  id v40;
  void *v41;
  char v42;
  int v43;
  int v44;
  void *v45;
  char v47;
  int v48;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 | v7;
        v16 = v14 & ~(_DWORD)v7 | v8;
        if (((v15 | v9) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v18 = v10 != 0;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = 1;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_58;
        v47 = v16;
        v48 = v15 | v18 | v16;
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  do
  {
    if (*(_BYTE *)(v3 + *v21))
      break;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v19;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_23;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_23:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_25:
    if (v31 || (v25 & 7) == 4)
      break;
    v33 = v25 >> 3;
    v34 = v15;
    if (!((v17 == 0) | v15 & 1))
    {
      v35 = v17;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    if ((_DWORD)v33 == 2)
    {
      if (!v34 || (*(_BYTE *)(a1 + 52) & 2) != 0)
      {
LABEL_54:
        v20 = PBReaderSkipValueWithTag();
        v21 = (int *)MEMORY[0x1E0D82BC8];
        if ((v20 & v48 & 1) == 0)
          goto LABEL_57;
        continue;
      }
      PBReaderReadString();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      if (v39)
        -[GEOAdditionalEnabledMarkets _addNoFlagsOfflineMarket:](a1, v39);
      goto LABEL_46;
    }
    if ((_DWORD)v33 == 1)
    {
      if (!v34 || (*(_BYTE *)(a1 + 52) & 4) != 0)
        goto LABEL_54;
      PBReaderReadString();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      if (v39)
        -[GEOAdditionalEnabledMarkets _addNoFlagsTransitMarket:](a1, v39);
LABEL_46:

      v21 = (int *)MEMORY[0x1E0D82BC8];
      goto LABEL_52;
    }
    if ((v47 & 1) == 0 || (*(_BYTE *)(a1 + 52) & 1) != 0)
      goto LABEL_54;
    if (!*(_QWORD *)(a1 + 16))
    {
      v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v41 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v40;

    }
    v42 = PBUnknownFieldAdd();
    v21 = (int *)MEMORY[0x1E0D82BC8];
    if ((v42 & 1) == 0)
    {
      v20 = 0;
      goto LABEL_59;
    }
LABEL_52:
    if ((v48 & 1) == 0)
      break;
  }
  while (*(_QWORD *)(v3 + *v19) < *(_QWORD *)(v3 + *v6));
  v20 = 1;
LABEL_57:
  LOBYTE(v16) = v47;
LABEL_58:
  if ((v16 & 1) != 0)
LABEL_59:
    *(_BYTE *)(a1 + 52) |= 1u;
  if (v15 & 1 | ((v20 & 1) == 0))
  {
    *(_BYTE *)(a1 + 52) |= 4u;
    *(_BYTE *)(a1 + 52) |= 2u;
    goto LABEL_69;
  }
  if (v17)
  {
    while (2)
    {
      while (1)
      {
        v44 = *v17++;
        v43 = v44;
        if (v44 == 1)
          break;
        if (v43 == 2)
          goto LABEL_68;
        if (!v43)
          goto LABEL_69;
      }
      LOBYTE(v43) = 4;
LABEL_68:
      *(_BYTE *)(a1 + 52) |= v43;
      continue;
    }
  }
LABEL_69:
  if (v20)
  {
    v3 = *(_BYTE *)(v3 + *v21) == 0;
    if ((v15 & 1) == 0)
      return v3;
LABEL_73:
    v45 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  else
  {
    v3 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_73;
  }
  return v3;
}

uint64_t geo::codec::_readLabelPlacementMetadata(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  FILE *v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  _BYTE *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  FILE *v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  unsigned int v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  geo::read_write_lock *v91;
  const char *v92;
  malloc_zone_t *v93;
  uint64_t v94;
  geo::read_write_lock *v95;
  const char *v96;
  malloc_zone_t *v97;
  uint64_t v98;
  geo::read_write_lock *v99;
  const char *v100;
  malloc_zone_t *v101;
  unsigned int v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unsigned __int8 v110;
  uint64_t v111;
  unsigned __int8 v112;
  uint64_t v113;
  double v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  double v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  double v128;
  unint64_t v129;
  unsigned int v130;
  double *v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  FILE *v143;
  int v144;
  uint64_t v145;
  geo::read_write_lock *v146;
  const char *v147;
  malloc_zone_t *zone;
  unsigned int v149;
  unint64_t v150;
  unsigned __int8 v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  int v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  int v160;
  unint64_t v161;
  unint64_t v162;
  int v163;
  unint64_t v164;
  unint64_t v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unsigned int v173;
  unint64_t v174;
  unint64_t v175;
  unsigned int v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unsigned int v180;
  unint64_t v181;
  unsigned int v182;
  unint64_t v183;
  unsigned int v184;
  double *v185;
  unint64_t v186;
  unint64_t v187;
  unsigned int v188;
  unsigned int v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int v192;
  unint64_t v193;
  unint64_t v194;
  BOOL v195;
  unsigned int v196;
  unint64_t v197;
  unint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  unint64_t v202;
  unsigned int v203;
  int v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  geo::read_write_lock *v209;
  const char *v210;
  malloc_zone_t *v211;
  unint64_t v212;
  uint64_t v213;
  geo::read_write_lock *v214;
  const char *v215;
  malloc_zone_t *v216;
  unsigned int v217;
  unint64_t v218;
  unsigned __int8 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  int v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  int v229;
  unint64_t v230;
  unint64_t v231;
  int v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  geo::read_write_lock *v236;
  const char *v237;
  malloc_zone_t *v238;
  int v239;
  unint64_t v240;
  unint64_t v241;
  int v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unsigned int v246;
  unint64_t v247;
  unint64_t v248;
  int v249;
  unint64_t v250;
  uint64_t v251;
  unsigned int v252;
  unsigned int v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  int v258;
  unint64_t v259;
  int v260;
  int v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  int v269;
  int v270;
  int i;
  int v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  int v279;
  unint64_t v280;
  int v281;
  char v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unsigned int v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int v301;
  const char *v302;
  const char **v303;

  v2 = a1[1];
  if (!v2)
    return 1;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 141)
  {
    v4 = ++v5;
    if (v2 <= v5)
      return 1;
  }
  v6 = geo::codec::chapterAt((uint64_t)a1, v5, 141, *a2 + 1912);
  if (!v6)
    return 1;
  v7 = v6;
  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v13 = *(_QWORD *)(v7 + 48);
  v14 = *(_QWORD *)(v7 + 56);
  v15 = v14 - v13;
  if (v14 < v13)
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 6674;
    goto LABEL_28;
  }
  v20 = (unsigned __int8 *)(*(_QWORD *)(v7 + 40) + v13);
  *(_QWORD *)(v7 + 8) = v20;
  *(_BYTE *)(v7 + 32) = 1;
  *(_QWORD *)(v7 + 16) = v15;
  *(_QWORD *)(v7 + 24) = 0;
  v21 = 8 * v15;
  if (!(8 * v15) || (v22 = *v20, *(_QWORD *)(v7 + 24) = 5, v23 = v22 >> 3, v23 + 6 > v21))
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 6678;
    goto LABEL_28;
  }
  v24 = 0;
  v25 = v23 + 1;
  v26 = 5;
  do
  {
    v27 = 8 - (v26 & 7);
    if (v25 < v27)
      v27 = v25;
    v24 = (v20[v26 >> 3] >> (8 - (v26 & 7) - v27)) & ~(-1 << v27) | (v24 << v27);
    v26 += v27;
    *(_QWORD *)(v7 + 24) = v26;
    v25 -= v27;
  }
  while (v25);
  *(_DWORD *)(v7 + 64) = v24;
  if (v26 + 5 > v21)
    goto LABEL_27;
  v28 = 0;
  v29 = 5;
  do
  {
    v30 = 8 - (v26 & 7);
    if (v29 < v30)
      v30 = v29;
    v28 = (v20[v26 >> 3] >> (8 - (v26 & 7) - v30)) & ~(-1 << v30) | (v28 << v30);
    v26 += v30;
    *(_QWORD *)(v7 + 24) = v26;
    v29 -= v30;
  }
  while (v29);
  v31 = (v28 + 1);
  if (v26 + v31 > v21)
  {
LABEL_27:
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 6680;
    goto LABEL_28;
  }
  if (v28 != -1)
  {
    do
    {
      v39 = 8 - (v26 & 7);
      if (v31 < v39)
        v39 = v31;
      v26 += v39;
      v31 -= v39;
    }
    while (v31);
    *(_QWORD *)(v7 + 24) = v26;
  }
  if (v26 + 5 > v21)
    goto LABEL_50;
  v40 = 0;
  v41 = 5;
  do
  {
    v42 = 8 - (v26 & 7);
    if (v41 < v42)
      v42 = v41;
    v40 = (v20[v26 >> 3] >> (8 - (v26 & 7) - v42)) & ~(-1 << v42) | (v40 << v42);
    v26 += v42;
    *(_QWORD *)(v7 + 24) = v26;
    v41 -= v42;
  }
  while (v41);
  v43 = (v40 + 1);
  if (v26 + v43 > v21)
  {
LABEL_50:
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 6682;
    goto LABEL_28;
  }
  if (v40 == -1)
    goto LABEL_57;
  v44 = 0;
  do
  {
    v45 = 8 - (v26 & 7);
    if (v43 < v45)
      v45 = v43;
    v44 = (v20[v26 >> 3] >> (8 - (v26 & 7) - v45)) & ~(-1 << v45) | (v44 << v45);
    v26 += v45;
    *(_QWORD *)(v7 + 24) = v26;
    v43 -= v45;
  }
  while (v43);
  if ((v44 - 5) < 0xFFFFFFFE)
  {
LABEL_57:
    v18 = 1;
    goto LABEL_34;
  }
  if (v26 + 5 > v21)
    goto LABEL_64;
  v46 = 0;
  v47 = 5;
  do
  {
    v48 = 8 - (v26 & 7);
    if (v47 < v48)
      v48 = v47;
    v46 = (v20[v26 >> 3] >> (8 - (v26 & 7) - v48)) & ~(-1 << v48) | (v46 << v48);
    v26 += v48;
    *(_QWORD *)(v7 + 24) = v26;
    v47 -= v48;
  }
  while (v47);
  v49 = (v46 + 1);
  if (v26 + v49 > v21)
  {
LABEL_64:
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 6688;
    goto LABEL_28;
  }
  if (v46 != -1)
  {
    v50 = 0;
    do
    {
      v51 = 8 - (v26 & 7);
      if (v49 < v51)
        v51 = v49;
      v50 = (v20[v26 >> 3] >> (8 - (v26 & 7) - v51)) & ~(-1 << v51) | (v50 << v51);
      v26 += v51;
      *(_QWORD *)(v7 + 24) = v26;
      v49 -= v51;
    }
    while (v49);
    if (v50)
      goto LABEL_57;
  }
  v297 = (uint64_t *)(v7 + 8);
  v52 = a2;
  v54 = *(_QWORD *)(*a2 + 32);
  v53 = *(_QWORD *)(*a2 + 40);
  {
    v300 = v9;
    v145 = operator new();
    *(_QWORD *)(v145 + 16) = 0x99AFC36000000008;
    *(_QWORD *)(v145 + 24) = "GeoCodec";
    *(_OWORD *)(v145 + 32) = xmmword_189CFDB80;
    *(_QWORD *)v145 = &off_1E1BF6690;
    *(_QWORD *)(v145 + 8) = "GeoCodec";
    *(_OWORD *)(v145 + 56) = 0u;
    *(_OWORD *)(v145 + 72) = 0u;
    *(_OWORD *)(v145 + 88) = 0u;
    *(_OWORD *)(v145 + 104) = 0u;
    *(_OWORD *)(v145 + 120) = 0u;
    *(_OWORD *)(v145 + 136) = 0u;
    *(_OWORD *)(v145 + 152) = 0u;
    *(_OWORD *)(v145 + 168) = 0u;
    *(_OWORD *)(v145 + 184) = 0u;
    *(_OWORD *)(v145 + 200) = 0u;
    *(_OWORD *)(v145 + 216) = 0u;
    *(_OWORD *)(v145 + 232) = 0u;
    *(_QWORD *)(v145 + 248) = 0;
    v146 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v145 + 56), 0);
    if ((_DWORD)v146)
      geo::read_write_lock::logFailure(v146, (uint64_t)"initialization", v147);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v145 + 48) = zone;
    malloc_set_zone_name(zone, "GeoCodec");
    *(_QWORD *)(v145 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    geo::codec::Allocator::instance(void)::alloc = v145;
    v9 = v300;
  }
  v56 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                      + 24))(geo::codec::Allocator::instance(void)::alloc, 24, 1);
  v57 = *v52;
  *(_QWORD *)(*v52 + 1808) = v56;
  if (!v56)
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 6696;
LABEL_28:
    fprintf(v16, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v17);
    v18 = 0;
    v32 = 0;
    if ((v33 & 1) == 0)
      goto LABEL_123;
    goto LABEL_29;
  }
  v298 = v9;
  *v56 = 0;
  v58 = *(_QWORD *)(v7 + 24);
  v59 = v58 + 1;
  v60 = 8 * *(_QWORD *)(v7 + 16);
  if (v58 + 1 > v60)
  {
    v61 = (FILE *)*MEMORY[0x1E0C80C10];
    v62 = 6700;
LABEL_121:
    fprintf(v61, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v62);
    v18 = 0;
    v32 = 0;
    goto LABEL_122;
  }
  v63 = *(_QWORD *)(v7 + 8);
  v64 = *(unsigned __int8 *)(v63 + (v58 >> 3));
  *(_QWORD *)(v7 + 24) = v59;
  if (((v64 >> (~(_BYTE)v58 & 7)) & 1) == 0)
  {
    v18 = 1;
    goto LABEL_34;
  }
  if (v58 + 65 > v60)
  {
    v61 = (FILE *)*MEMORY[0x1E0C80C10];
    v62 = 6706;
    goto LABEL_121;
  }
  v65 = 0;
  v66 = 1022611261 * ((unint64_t)(v53 - v54) >> 3);
  v67 = 64;
  do
  {
    v68 = 8 - (v59 & 7);
    if (v67 < v68)
      v68 = v67;
    v65 = (*(unsigned __int8 *)(v63 + (v59 >> 3)) >> (8 - (v59 & 7) - v68)) & (unint64_t)~(-1 << v68) | (v65 << v68);
    v59 += v68;
    *(_QWORD *)(v7 + 24) = v59;
    v67 -= v68;
  }
  while (v67);
  if (v59 + 6 > v60)
  {
    v61 = (FILE *)*MEMORY[0x1E0C80C10];
    v62 = 6708;
    goto LABEL_121;
  }
  v69 = 0;
  v70 = 6;
  do
  {
    v71 = 8 - (v59 & 7);
    if (v70 < v71)
      v71 = v70;
    v69 = (*(unsigned __int8 *)(v63 + (v59 >> 3)) >> (8 - (v59 & 7) - v71)) & ~(-1 << v71) | (v69 << v71);
    v59 += v71;
    *(_QWORD *)(v7 + 24) = v59;
    v70 -= v71;
  }
  while (v70);
  if (v59 + 5 > v60)
  {
    v61 = (FILE *)*MEMORY[0x1E0C80C10];
    v62 = 6710;
    goto LABEL_121;
  }
  v72 = 0;
  v294 = (v69 + 1);
  v73 = 5;
  do
  {
    v74 = 8 - (v59 & 7);
    if (v73 < v74)
      v74 = v73;
    v72 = (*(unsigned __int8 *)(v63 + (v59 >> 3)) >> (8 - (v59 & 7) - v74)) & ~(-1 << v74) | (v72 << v74);
    v59 += v74;
    *(_QWORD *)(v7 + 24) = v59;
    v73 -= v74;
  }
  while (v73);
  if (v59 + 5 > v60)
  {
    v61 = (FILE *)*MEMORY[0x1E0C80C10];
    v62 = 6712;
    goto LABEL_121;
  }
  v75 = 0;
  v291 = (v72 + 1);
  v76 = 5;
  do
  {
    v77 = 8 - (v59 & 7);
    if (v76 < v77)
      v77 = v76;
    v75 = (*(unsigned __int8 *)(v63 + (v59 >> 3)) >> (8 - (v59 & 7) - v77)) & ~(-1 << v77) | (v75 << v77);
    v59 += v77;
    *(_QWORD *)(v7 + 24) = v59;
    v76 -= v77;
  }
  while (v76);
  if (v59 + 5 > v60)
  {
    v61 = (FILE *)*MEMORY[0x1E0C80C10];
    v62 = 6714;
    goto LABEL_121;
  }
  v78 = 0;
  v287 = v75 + 1;
  v79 = 5;
  do
  {
    v80 = 8 - (v59 & 7);
    if (v79 < v80)
      v80 = v79;
    v78 = (*(unsigned __int8 *)(v63 + (v59 >> 3)) >> (8 - (v59 & 7) - v80)) & ~(-1 << v80) | (v78 << v80);
    v59 += v80;
    *(_QWORD *)(v7 + 24) = v59;
    v79 -= v80;
  }
  while (v79);
  if (v59 + 5 > v60)
  {
    v61 = (FILE *)*MEMORY[0x1E0C80C10];
    v62 = 6716;
    goto LABEL_121;
  }
  v81 = 0;
  v82 = v78 + 1;
  v83 = 5;
  do
  {
    v84 = 8 - (v59 & 7);
    if (v83 < v84)
      v84 = v83;
    v81 = (*(unsigned __int8 *)(v63 + (v59 >> 3)) >> (8 - (v59 & 7) - v84)) & ~(-1 << v84) | (v81 << v84);
    v59 += v84;
    *(_QWORD *)(v7 + 24) = v59;
    v83 -= v84;
  }
  while (v83);
  if (v59 + 5 > v60)
    goto LABEL_120;
  v85 = 0;
  v282 = v81 + 1;
  v86 = 5;
  do
  {
    v87 = 8 - (v59 & 7);
    if (v86 < v87)
      v87 = v86;
    v85 = (*(unsigned __int8 *)(v63 + (v59 >> 3)) >> (8 - (v59 & 7) - v87)) & ~(-1 << v87) | (v85 << v87);
    v59 += v87;
    *(_QWORD *)(v7 + 24) = v59;
    v86 -= v87;
  }
  while (v86);
  v88 = (v85 + 1);
  if (v59 + v88 > v60)
  {
LABEL_120:
    v61 = (FILE *)*MEMORY[0x1E0C80C10];
    v62 = 6720;
    goto LABEL_121;
  }
  v102 = 0;
  if ((_DWORD)v88)
  {
    do
    {
      v103 = 8 - (v59 & 7);
      if (v88 < v103)
        v103 = v88;
      v102 = (*(unsigned __int8 *)(v63 + (v59 >> 3)) >> (8 - (v59 & 7) - v103)) & ~(-1 << v103) | (v102 << v103);
      v59 += v103;
      *(_QWORD *)(v7 + 24) = v59;
      v88 -= v103;
    }
    while (v88);
  }
  v104 = v59 + v102;
  if (v104 > v60)
  {
    v61 = (FILE *)*MEMORY[0x1E0C80C10];
    v62 = 6721;
    goto LABEL_121;
  }
  *(_QWORD *)(v7 + 24) = v104;
  v301 = v82;
  if (v104 + 5 > v60)
    goto LABEL_147;
  v105 = 0;
  v106 = 5;
  do
  {
    v107 = 8 - (v104 & 7);
    if (v106 < v107)
      v107 = v106;
    v105 = (*(unsigned __int8 *)(v63 + (v104 >> 3)) >> (8 - (v104 & 7) - v107)) & ~(-1 << v107) | (v105 << v107);
    v104 += v107;
    *(_QWORD *)(v7 + 24) = v104;
    v106 -= v107;
  }
  while (v106);
  v108 = (v105 + 1);
  if (v104 + v108 > v60)
  {
LABEL_147:
    v61 = (FILE *)*MEMORY[0x1E0C80C10];
    v62 = 6729;
    goto LABEL_121;
  }
  if (v105 == -1)
    goto LABEL_200;
  LODWORD(v286) = 0;
  do
  {
    v109 = 8 - (v104 & 7);
    if (v108 < v109)
      v109 = v108;
    v286 = (*(unsigned __int8 *)(v63 + (v104 >> 3)) >> (8 - (v104 & 7) - v109)) & ~(-1 << v109) | ((_DWORD)v286 << v109);
    v104 += v109;
    *(_QWORD *)(v7 + 24) = v104;
    v108 -= v109;
  }
  while (v108);
  if (!(_DWORD)v286)
  {
LABEL_200:
    v61 = (FILE *)*MEMORY[0x1E0C80C10];
    v62 = 6730;
    goto LABEL_121;
  }
  *(_DWORD *)(v57 + 1816) = v286;
  {
    v208 = operator new();
    *(_QWORD *)(v208 + 16) = 0x99AFC36000000008;
    *(_QWORD *)(v208 + 24) = "GeoCodec";
    *(_OWORD *)(v208 + 32) = xmmword_189CFDB80;
    *(_QWORD *)v208 = &off_1E1BF6690;
    *(_QWORD *)(v208 + 8) = "GeoCodec";
    *(_OWORD *)(v208 + 56) = 0u;
    *(_OWORD *)(v208 + 72) = 0u;
    *(_OWORD *)(v208 + 88) = 0u;
    *(_OWORD *)(v208 + 104) = 0u;
    *(_OWORD *)(v208 + 120) = 0u;
    *(_OWORD *)(v208 + 136) = 0u;
    *(_OWORD *)(v208 + 152) = 0u;
    *(_OWORD *)(v208 + 168) = 0u;
    *(_OWORD *)(v208 + 184) = 0u;
    *(_OWORD *)(v208 + 200) = 0u;
    *(_OWORD *)(v208 + 216) = 0u;
    *(_OWORD *)(v208 + 232) = 0u;
    *(_QWORD *)(v208 + 248) = 0;
    v209 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v208 + 56), 0);
    if ((_DWORD)v209)
      geo::read_write_lock::logFailure(v209, (uint64_t)"initialization", v210);
    v211 = malloc_create_zone(0, 0);
    *(_QWORD *)(v208 + 48) = v211;
    malloc_set_zone_name(v211, "GeoCodec");
    *(_QWORD *)(v208 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    geo::codec::Allocator::instance(void)::alloc = v208;
  }
  v111 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                              + 24))(geo::codec::Allocator::instance(void)::alloc, v286, 48);
  *(_QWORD *)(*v52 + 1824) = v111;
  if (!v111)
  {
    v61 = (FILE *)*MEMORY[0x1E0C80C10];
    v62 = 6733;
    goto LABEL_121;
  }
  {
    v213 = operator new();
    *(_QWORD *)(v213 + 16) = 0x99AFC36000000008;
    *(_QWORD *)(v213 + 24) = "GeoCodec";
    *(_OWORD *)(v213 + 32) = xmmword_189CFDB80;
    *(_QWORD *)v213 = &off_1E1BF6690;
    *(_QWORD *)(v213 + 8) = "GeoCodec";
    *(_OWORD *)(v213 + 56) = 0u;
    *(_OWORD *)(v213 + 72) = 0u;
    *(_OWORD *)(v213 + 88) = 0u;
    *(_OWORD *)(v213 + 104) = 0u;
    *(_OWORD *)(v213 + 120) = 0u;
    *(_OWORD *)(v213 + 136) = 0u;
    *(_OWORD *)(v213 + 152) = 0u;
    *(_OWORD *)(v213 + 168) = 0u;
    *(_OWORD *)(v213 + 184) = 0u;
    *(_OWORD *)(v213 + 200) = 0u;
    *(_OWORD *)(v213 + 216) = 0u;
    *(_OWORD *)(v213 + 232) = 0u;
    *(_QWORD *)(v213 + 248) = 0;
    v214 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v213 + 56), 0);
    if ((_DWORD)v214)
      geo::read_write_lock::logFailure(v214, (uint64_t)"initialization", v215);
    v216 = malloc_create_zone(0, 0);
    *(_QWORD *)(v213 + 48) = v216;
    malloc_set_zone_name(v216, "GeoCodec");
    *(_QWORD *)(v213 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    geo::codec::Allocator::instance(void)::alloc = v213;
  }
  v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                              + 24))(geo::codec::Allocator::instance(void)::alloc, v286, 24);
  v32 = v113;
  if (!v113)
  {
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6736;
    goto LABEL_210;
  }
  v279 = 0;
  v114 = 1.0 / (double)(unint64_t)~(-1 << v282);
  v115 = *v52;
  *(double *)(*(_QWORD *)(*v52 + 1808) + 8) = v114;
  v283 = *(_QWORD *)(v115 + 1824);
  v117 = *(_QWORD *)(v7 + 16);
  v116 = *(_QWORD *)(v7 + 24);
  v118 = 1.0 / (double)(unint64_t)~(-1 << v287);
  v288 = v113;
  do
  {
    v119 = 8 * v117;
    if (v116 + v294 > 8 * v117)
    {
      v143 = (FILE *)*MEMORY[0x1E0C80C10];
      v144 = 6747;
      goto LABEL_210;
    }
    if ((_DWORD)v294)
    {
      v120 = 0;
      v121 = v294;
      v122 = *v297;
      do
      {
        v123 = 8 - (v116 & 7);
        if (v121 < v123)
          v123 = v121;
        v120 = (*(unsigned __int8 *)(v122 + (v116 >> 3)) >> (8 - (v116 & 7) - v123)) & (unint64_t)~(-1 << v123) | (v120 << v123);
        v116 += v123;
        *(_QWORD *)(v7 + 24) = v116;
        v121 -= v123;
      }
      while (v121);
    }
    else
    {
      v120 = 0;
    }
    v65 += v120;
    *(_QWORD *)(v283 + 24) = v65;
    if (v116 + v291 > v119)
    {
      v143 = (FILE *)*MEMORY[0x1E0C80C10];
      v144 = 6752;
      goto LABEL_210;
    }
    if ((_DWORD)v291)
    {
      v124 = 0;
      v125 = *v297;
      v126 = v291;
      do
      {
        v127 = 8 - (v116 & 7);
        if (v126 < v127)
          v127 = v126;
        v124 = (*(unsigned __int8 *)(v125 + (v116 >> 3)) >> (8 - (v116 & 7) - v127)) & ~(-1 << v127) | (v124 << v127);
        v116 += v127;
        *(_QWORD *)(v7 + 24) = v116;
        v126 -= v127;
      }
      while (v126);
    }
    else
    {
      v124 = 0;
    }
    v128 = (double)v124 * v118;
    *(double *)v283 = v128;
    *(_QWORD *)v288 = v283;
    if (v128 > 0.0)
      *(double *)(v288 + 16) = v114 / v128;
    v129 = v116 + 1;
    if (v116 + 1 > v119)
    {
      v144 = 6761;
LABEL_209:
      v143 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_210;
    }
    v130 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + (v116 >> 3));
    *(_QWORD *)(v7 + 24) = v129;
    v131 = (double *)(v283 + 8);
    if (((v130 >> (~(_BYTE)v116 & 7)) & 1) != 0)
    {
      if (!geo::codec::decodeLabelLineRange(v297, v131, &v301, v288))
      {
        v144 = 6763;
        goto LABEL_209;
      }
      v117 = *(_QWORD *)(v7 + 16);
      v129 = *(_QWORD *)(v7 + 24);
      v119 = 8 * v117;
    }
    else
    {
      *(_OWORD *)v131 = xmmword_189CFDB90;
    }
    if (v129 + 5 > v119)
    {
      v144 = 6769;
      goto LABEL_209;
    }
    v132 = 0;
    v133 = *v297;
    v134 = 5;
    do
    {
      v135 = 8 - (v129 & 7);
      if (v134 < v135)
        v135 = v134;
      v132 = (*(unsigned __int8 *)(v133 + (v129 >> 3)) >> (8 - (v129 & 7) - v135)) & ~(-1 << v135) | (v132 << v135);
      v129 += v135;
      *(_QWORD *)(v7 + 24) = v129;
      v134 -= v135;
    }
    while (v134);
    *(_DWORD *)(v288 + 8) = v132 + 1;
    if (v129 + 5 > v119)
    {
      v144 = 6770;
      goto LABEL_209;
    }
    v136 = 0;
    v116 = v129;
    v137 = 5;
    do
    {
      v138 = 8 - (v116 & 7);
      if (v137 < v138)
        v138 = v137;
      v136 = (*(unsigned __int8 *)(v133 + (v116 >> 3)) >> (8 - (v116 & 7) - v138)) & ~(-1 << v138) | (v136 << v138);
      v116 += v138;
      *(_QWORD *)(v7 + 24) = v116;
      v137 -= v138;
    }
    while (v137);
    *(_DWORD *)(v288 + 12) = v136 + 1;
    v283 += 48;
    v288 += 24;
    ++v279;
  }
  while (v279 != (_DWORD)v286);
  if (v116 + 5 > v119)
    goto LABEL_199;
  v139 = 0;
  v140 = 5;
  do
  {
    v141 = 8 - (v116 & 7);
    if (v140 < v141)
      v141 = v140;
    v139 = (*(unsigned __int8 *)(v133 + (v116 >> 3)) >> (8 - (v116 & 7) - v141)) & ~(-1 << v141) | (v139 << v141);
    v116 += v141;
    *(_QWORD *)(v7 + 24) = v116;
    v140 -= v141;
  }
  while (v140);
  v142 = (v139 + 1);
  if (v116 + v142 > v119)
  {
LABEL_199:
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6775;
    goto LABEL_210;
  }
  v149 = 0;
  if (v139 != -1)
  {
    do
    {
      v150 = 8 - (v116 & 7);
      if (v142 < v150)
        v150 = v142;
      v149 = (*(unsigned __int8 *)(v133 + (v116 >> 3)) >> (8 - (v116 & 7) - v150)) & ~(-1 << v150) | (v149 << v150);
      v116 += v150;
      *(_QWORD *)(v7 + 24) = v116;
      v142 -= v150;
    }
    while (v142);
  }
  *(_DWORD *)(*v52 + 1832) = v149;
  {
    v235 = operator new();
    *(_QWORD *)(v235 + 16) = 0x99AFC36000000008;
    *(_QWORD *)(v235 + 24) = "GeoCodec";
    *(_OWORD *)(v235 + 32) = xmmword_189CFDB80;
    *(_QWORD *)v235 = &off_1E1BF6690;
    *(_QWORD *)(v235 + 8) = "GeoCodec";
    *(_OWORD *)(v235 + 56) = 0u;
    *(_OWORD *)(v235 + 72) = 0u;
    *(_OWORD *)(v235 + 88) = 0u;
    *(_OWORD *)(v235 + 104) = 0u;
    *(_OWORD *)(v235 + 120) = 0u;
    *(_OWORD *)(v235 + 136) = 0u;
    *(_OWORD *)(v235 + 152) = 0u;
    *(_OWORD *)(v235 + 168) = 0u;
    *(_OWORD *)(v235 + 184) = 0u;
    *(_OWORD *)(v235 + 200) = 0u;
    *(_OWORD *)(v235 + 216) = 0u;
    *(_OWORD *)(v235 + 232) = 0u;
    *(_QWORD *)(v235 + 248) = 0;
    v236 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v235 + 56), 0);
    if ((_DWORD)v236)
      geo::read_write_lock::logFailure(v236, (uint64_t)"initialization", v237);
    v238 = malloc_create_zone(0, 0);
    *(_QWORD *)(v235 + 48) = v238;
    malloc_set_zone_name(v238, "GeoCodec");
    *(_QWORD *)(v235 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    geo::codec::Allocator::instance(void)::alloc = v235;
  }
  v295 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                             + 24))(geo::codec::Allocator::instance(void)::alloc, v149, 40);
  v152 = *v52;
  *(_QWORD *)(*v52 + 1840) = v295;
  if (!v295)
  {
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6778;
    goto LABEL_210;
  }
  v154 = *(_QWORD *)(v7 + 16);
  v153 = *(_QWORD *)(v7 + 24);
  v155 = 8 * v154;
  if (v153 + 5 > 8 * v154)
  {
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6781;
    goto LABEL_210;
  }
  v156 = 0;
  v157 = *v297;
  v158 = 5;
  do
  {
    v159 = 8 - (v153 & 7);
    if (v158 < v159)
      v159 = v158;
    v156 = (*(unsigned __int8 *)(v157 + (v153 >> 3)) >> (8 - (v153 & 7) - v159)) & ~(-1 << v159) | (v156 << v159);
    v153 += v159;
    *(_QWORD *)(v7 + 24) = v153;
    v158 -= v159;
  }
  while (v158);
  if (v153 + 5 > v155)
  {
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6783;
    goto LABEL_210;
  }
  v160 = 0;
  v292 = (v156 + 1);
  v161 = 5;
  do
  {
    v162 = 8 - (v153 & 7);
    if (v161 < v162)
      v162 = v161;
    v160 = (*(unsigned __int8 *)(v157 + (v153 >> 3)) >> (8 - (v153 & 7) - v162)) & ~(-1 << v162) | (v160 << v162);
    v153 += v162;
    *(_QWORD *)(v7 + 24) = v153;
    v161 -= v162;
  }
  while (v161);
  if (v153 + 5 > v155)
  {
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6785;
    goto LABEL_210;
  }
  v163 = 0;
  v280 = (v160 + 1);
  v164 = 5;
  do
  {
    v165 = 8 - (v153 & 7);
    if (v164 < v165)
      v165 = v164;
    v163 = (*(unsigned __int8 *)(v157 + (v153 >> 3)) >> (8 - (v153 & 7) - v165)) & ~(-1 << v165) | (v163 << v165);
    v153 += v165;
    *(_QWORD *)(v7 + 24) = v153;
    v164 -= v165;
  }
  while (v164);
  if (v153 + 5 > v155)
  {
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6787;
    goto LABEL_210;
  }
  v166 = 0;
  v277 = (v163 + 1);
  v167 = 5;
  do
  {
    v168 = 8 - (v153 & 7);
    if (v167 < v168)
      v168 = v167;
    v166 = (*(unsigned __int8 *)(v157 + (v153 >> 3)) >> (8 - (v153 & 7) - v168)) & ~(-1 << v168) | (v166 << v168);
    v153 += v168;
    *(_QWORD *)(v7 + 24) = v153;
    v167 -= v168;
  }
  while (v167);
  v269 = 0;
  v284 = 0;
  v273 = v32;
  v275 = (v166 + 1);
  v289 = *(_QWORD *)(v152 + 1824);
  do
  {
    *(_DWORD *)(v289 + 32) = v284;
    if (v153 + v292 > 8 * v154)
    {
      v143 = (FILE *)*MEMORY[0x1E0C80C10];
      v144 = 6796;
      goto LABEL_210;
    }
    if ((_DWORD)v292)
    {
      v169 = 0;
      v170 = v292;
      do
      {
        v171 = 8 - (v153 & 7);
        if (v170 < v171)
          v171 = v170;
        v169 = (*(unsigned __int8 *)(v157 + (v153 >> 3)) >> (8 - (v153 & 7) - v171)) & ~(-1 << v171) | (v169 << v171);
        v153 += v171;
        *(_QWORD *)(v7 + 24) = v153;
        v170 -= v171;
      }
      while (v170);
      if (v169 + v284 > v149)
      {
LABEL_308:
        v143 = (FILE *)*MEMORY[0x1E0C80C10];
        v144 = 6797;
        goto LABEL_210;
      }
      if (v169 >= 0x10000)
      {
        v143 = (FILE *)*MEMORY[0x1E0C80C10];
        v144 = 6798;
        goto LABEL_210;
      }
      *(_WORD *)(v289 + 42) = v169;
      if (v169)
      {
        for (i = 0; i != v169; ++i)
        {
          v172 = 8 * v154;
          if (v153 + v280 > v172)
          {
            v144 = 6803;
            goto LABEL_209;
          }
          v173 = v280;
          if ((_DWORD)v280)
          {
            v173 = 0;
            v174 = v280;
            do
            {
              v175 = 8 - (v153 & 7);
              if (v174 < v175)
                v175 = v174;
              v173 = (*(unsigned __int8 *)(v157 + (v153 >> 3)) >> (8 - (v153 & 7) - v175)) & ~(-1 << v175) | (v173 << v175);
              v153 += v175;
              *(_QWORD *)(v7 + 24) = v153;
              v174 -= v175;
            }
            while (v174);
          }
          if (v173 >= v66)
          {
            v144 = 6804;
            goto LABEL_209;
          }
          *(_DWORD *)v295 = v173;
          if (v153 + v277 > v172)
          {
            v144 = 6808;
            goto LABEL_209;
          }
          LOWORD(v176) = v277;
          if ((_DWORD)v277)
          {
            v176 = 0;
            v177 = v277;
            do
            {
              v178 = 8 - (v153 & 7);
              if (v177 < v178)
                v178 = v177;
              v176 = (*(unsigned __int8 *)(v157 + (v153 >> 3)) >> (8 - (v153 & 7) - v178)) & ~(-1 << v178) | (v176 << v178);
              v153 += v178;
              *(_QWORD *)(v7 + 24) = v153;
              v177 -= v178;
            }
            while (v177);
            if (HIWORD(v176))
            {
              v144 = 6809;
              goto LABEL_209;
            }
          }
          *(_WORD *)(v295 + 24) = v176;
          v179 = v153 + 1;
          if (v153 + 1 > v172)
          {
            v143 = (FILE *)*MEMORY[0x1E0C80C10];
            v144 = 6813;
            goto LABEL_210;
          }
          v180 = *(unsigned __int8 *)(v157 + (v153 >> 3));
          *(_QWORD *)(v7 + 24) = v179;
          *(_BYTE *)(v295 + 31) = (v180 >> (~(_BYTE)v153 & 7)) & 1;
          v181 = v153 + 2;
          if (v153 + 2 > v172)
          {
            v143 = (FILE *)*MEMORY[0x1E0C80C10];
            v144 = 6817;
            goto LABEL_210;
          }
          v182 = *(unsigned __int8 *)(v157 + (v179 >> 3));
          *(_QWORD *)(v7 + 24) = v181;
          *(_BYTE *)(v295 + 30) = (v182 >> (~(_BYTE)v179 & 7)) & 1;
          v183 = v153 + 3;
          if (v183 > v172)
          {
            v144 = 6821;
            goto LABEL_209;
          }
          v184 = *(unsigned __int8 *)(v157 + (v181 >> 3));
          *(_QWORD *)(v7 + 24) = v183;
          v185 = (double *)(v295 + 8);
          if (((v184 >> (~(_BYTE)v181 & 7)) & 1) != 0)
          {
            if ((geo::codec::decodeLabelLineRangeUsingTileLine(v297, v185, (uint64_t)&v301, v273) & 1) == 0)
            {
              v144 = 6823;
              goto LABEL_209;
            }
          }
          else
          {
            *(_OWORD *)v185 = *(_OWORD *)(v289 + 8);
          }
          v154 = *(_QWORD *)(v7 + 16);
          v186 = *(_QWORD *)(v7 + 24);
          v153 = v186 + 1;
          v187 = 8 * v154;
          if (v186 + 1 > 8 * v154)
          {
            v143 = (FILE *)*MEMORY[0x1E0C80C10];
            v144 = 6829;
            goto LABEL_210;
          }
          v157 = *(_QWORD *)(v7 + 8);
          v188 = *(unsigned __int8 *)(v157 + (v186 >> 3));
          *(_QWORD *)(v7 + 24) = v153;
          if (((v188 >> (~(_BYTE)v186 & 7)) & 1) != 0)
          {
            *(_BYTE *)(v295 + 32) = 1;
            if (v153 + v275 > v187)
            {
              v144 = 6834;
              goto LABEL_209;
            }
            if (!(_DWORD)v275)
            {
              *(_WORD *)(v295 + 26) = 0;
              v144 = 6841;
              goto LABEL_209;
            }
            v189 = 0;
            v190 = v275;
            do
            {
              v191 = 8 - (v153 & 7);
              if (v190 < v191)
                v191 = v190;
              v189 = (*(unsigned __int8 *)(v157 + (v153 >> 3)) >> (8 - (v153 & 7) - v191)) & ~(-1 << v191) | (v189 << v191);
              v153 += v191;
              *(_QWORD *)(v7 + 24) = v153;
              v190 -= v191;
            }
            while (v190);
            if (HIWORD(v189))
            {
              v144 = 6835;
              goto LABEL_209;
            }
            *(_WORD *)(v295 + 26) = v189;
            if (v153 + v275 > v187)
            {
              v144 = 6839;
              goto LABEL_209;
            }
            v192 = 0;
            v193 = v275;
            do
            {
              v194 = 8 - (v153 & 7);
              if (v193 < v194)
                v194 = v193;
              v192 = (*(unsigned __int8 *)(v157 + (v153 >> 3)) >> (8 - (v153 & 7) - v194)) & ~(-1 << v194) | (v192 << v194);
              v153 += v194;
              *(_QWORD *)(v7 + 24) = v153;
              v193 -= v194;
            }
            while (v193);
            if (HIWORD(v192))
            {
              v144 = 6840;
              goto LABEL_209;
            }
            v195 = v192 >= v189;
            v196 = v192 - v189;
            if (v196 == 0 || !v195)
            {
              v144 = 6841;
              goto LABEL_209;
            }
            *(_WORD *)(v295 + 28) = v196 + 1;
          }
          v295 += 40;
        }
      }
    }
    else
    {
      if (v284 > v149)
        goto LABEL_308;
      v169 = 0;
      *(_WORD *)(v289 + 42) = 0;
    }
    v284 += v169;
    v289 += 48;
    v273 += 24;
    ++v269;
  }
  while (v269 != (_DWORD)v286);
  if (v284 != v149)
  {
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6847;
    goto LABEL_210;
  }
  v197 = v153 + 1;
  v198 = 8 * v154;
  if (v153 + 1 > 8 * v154)
  {
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6851;
    goto LABEL_210;
  }
  v199 = *(unsigned __int8 *)(v157 + (v153 >> 3));
  *(_QWORD *)(v7 + 24) = v197;
  v200 = (1 << (~(_BYTE)v153 & 7)) & v199;
  v201 = *v52;
  *(_BYTE *)(*(_QWORD *)(*v52 + 1808) + 1) = v200 != 0;
  if (!v200)
  {
LABEL_337:
    v212 = *(_QWORD *)(v7 + 48) + (v197 >> 3);
    if ((v197 & 7) != 0)
      ++v212;
    *(_QWORD *)(v7 + 48) = v212;
    *(_BYTE *)(v7 + 32) = 0;
    v18 = 1;
    goto LABEL_122;
  }
  v202 = v153 + 2;
  if (v153 + 2 > v198)
  {
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6855;
    goto LABEL_210;
  }
  v203 = *(unsigned __int8 *)(v157 + (v197 >> 3));
  *(_QWORD *)(v7 + 24) = v202;
  if (((v203 >> (~(_BYTE)v197 & 7)) & 1) == 0)
  {
    v197 = v153 + 2;
    goto LABEL_337;
  }
  if (v153 + 7 > v198)
    goto LABEL_331;
  v204 = 0;
  v205 = 5;
  do
  {
    v206 = 8 - (v202 & 7);
    if (v205 < v206)
      v206 = v205;
    v204 = (*(unsigned __int8 *)(v157 + (v202 >> 3)) >> (8 - (v202 & 7) - v206)) & ~(-1 << v206) | (v204 << v206);
    v202 += v206;
    *(_QWORD *)(v7 + 24) = v202;
    v205 -= v206;
  }
  while (v205);
  v207 = (v204 + 1);
  if (v202 + v207 > v198)
  {
LABEL_331:
    v144 = 6859;
    goto LABEL_209;
  }
  v217 = 0;
  if (v204 != -1)
  {
    do
    {
      v218 = 8 - (v202 & 7);
      if (v207 < v218)
        v218 = v207;
      v217 = (*(unsigned __int8 *)(v157 + (v202 >> 3)) >> (8 - (v202 & 7) - v218)) & ~(-1 << v218) | (v217 << v218);
      v202 += v218;
      *(_QWORD *)(v7 + 24) = v202;
      v207 -= v218;
    }
    while (v207);
  }
  *(_DWORD *)(v201 + 1848) = v217;
  {
    v268 = operator new();
    geo::MallocZoneAllocator::MallocZoneAllocator(v268, "GeoCodec", 0x99AFC36000000008, 0, 0);
    geo::codec::Allocator::instance(void)::alloc = v268;
  }
  v220 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                             + 24))(geo::codec::Allocator::instance(void)::alloc, v217, 24);
  v221 = *v52;
  *(_QWORD *)(*v52 + 1856) = v220;
  if (!v220)
  {
    v144 = 6862;
    goto LABEL_209;
  }
  v222 = *(_QWORD *)(v7 + 16);
  v223 = *(_QWORD *)(v7 + 24);
  v224 = 8 * v222;
  if (v223 + 5 > 8 * v222)
  {
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6865;
    goto LABEL_210;
  }
  v225 = 0;
  v226 = *v297;
  v227 = 5;
  do
  {
    v228 = 8 - (v223 & 7);
    if (v227 < v228)
      v228 = v227;
    v225 = (*(unsigned __int8 *)(v226 + (v223 >> 3)) >> (8 - (v223 & 7) - v228)) & ~(-1 << v228) | (v225 << v228);
    v223 += v228;
    *(_QWORD *)(v7 + 24) = v223;
    v227 -= v228;
  }
  while (v227);
  if (v223 + 5 > v224)
  {
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6867;
    goto LABEL_210;
  }
  v229 = 0;
  v293 = (v225 + 1);
  v230 = 5;
  do
  {
    v231 = 8 - (v223 & 7);
    if (v230 < v231)
      v231 = v230;
    v229 = (*(unsigned __int8 *)(v226 + (v223 >> 3)) >> (8 - (v223 & 7) - v231)) & ~(-1 << v231) | (v229 << v231);
    v223 += v231;
    *(_QWORD *)(v7 + 24) = v223;
    v230 -= v231;
  }
  while (v230);
  if (v223 + 5 > v224)
  {
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6869;
    goto LABEL_210;
  }
  v232 = 0;
  v290 = (v229 + 1);
  v233 = 5;
  do
  {
    v234 = 8 - (v223 & 7);
    if (v233 < v234)
      v234 = v233;
    v232 = (*(unsigned __int8 *)(v226 + (v223 >> 3)) >> (8 - (v223 & 7) - v234)) & ~(-1 << v234) | (v232 << v234);
    v223 += v234;
    *(_QWORD *)(v7 + 24) = v223;
    v233 -= v234;
  }
  while (v233);
  if (v223 + 3 > v224)
  {
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6871;
    goto LABEL_210;
  }
  v239 = 0;
  v278 = (v232 + 1);
  v240 = 3;
  do
  {
    v241 = 8 - (v223 & 7);
    if (v240 < v241)
      v241 = v240;
    v239 = (*(unsigned __int8 *)(v226 + (v223 >> 3)) >> (8 - (v223 & 7) - v241)) & ~(-1 << v241) | (v239 << v241);
    v223 += v241;
    *(_QWORD *)(v7 + 24) = v223;
    v240 -= v241;
  }
  while (v240);
  if (v223 + 5 > v224)
    goto LABEL_385;
  v242 = 0;
  v285 = (v239 + 1);
  v243 = 5;
  do
  {
    v244 = 8 - (v223 & 7);
    if (v243 < v244)
      v244 = v243;
    v242 = (*(unsigned __int8 *)(v226 + (v223 >> 3)) >> (8 - (v223 & 7) - v244)) & ~(-1 << v244) | (v242 << v244);
    v223 += v244;
    *(_QWORD *)(v7 + 24) = v223;
    v243 -= v244;
  }
  while (v243);
  v245 = (v242 + 1);
  if (v223 + v245 > v224)
  {
LABEL_385:
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6875;
    goto LABEL_210;
  }
  v246 = 0;
  if (v242 != -1)
  {
    do
    {
      v247 = 8 - (v223 & 7);
      if (v245 < v247)
        v247 = v245;
      v246 = (*(unsigned __int8 *)(v226 + (v223 >> 3)) >> (8 - (v223 & 7) - v247)) & ~(-1 << v247) | (v246 << v247);
      v223 += v247;
      *(_QWORD *)(v7 + 24) = v223;
      v245 -= v247;
    }
    while (v245);
  }
  v248 = v223 + v246;
  if (v248 > v224)
  {
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6876;
    goto LABEL_210;
  }
  v272 = 0;
  v281 = 0;
  *(_QWORD *)(v7 + 24) = v248;
  v274 = *(_QWORD *)(v221 + 1824);
  v276 = v32;
  while (2)
  {
    v197 = v248 + 1;
    v250 = 8 * v222;
    if (v248 + 1 > 8 * v222)
    {
      v143 = (FILE *)*MEMORY[0x1E0C80C10];
      v144 = 6884;
      goto LABEL_210;
    }
    v251 = *(_QWORD *)(v7 + 8);
    v252 = *(unsigned __int8 *)(v251 + (v248 >> 3));
    *(_QWORD *)(v7 + 24) = v197;
    if (((v252 >> (~(_BYTE)v248 & 7)) & 1) == 0)
    {
LABEL_396:
      v274 += 48;
      v276 += 24;
      v248 = v197;
      if (++v272 == (_DWORD)v286)
        goto LABEL_337;
      continue;
    }
    break;
  }
  *(_DWORD *)(v274 + 36) = v281;
  if (v197 + v293 > v250)
  {
    v144 = 6891;
    goto LABEL_209;
  }
  if ((_DWORD)v293)
  {
    v253 = 0;
    v254 = v293;
    do
    {
      v255 = 8 - (v197 & 7);
      if (v254 < v255)
        v255 = v254;
      v253 = (*(unsigned __int8 *)(v251 + (v197 >> 3)) >> (8 - (v197 & 7) - v255)) & ~(-1 << v255) | (v253 << v255);
      v197 += v255;
      *(_QWORD *)(v7 + 24) = v197;
      v254 -= v255;
    }
    while (v254);
    if (HIWORD(v253))
    {
      v144 = 6892;
      goto LABEL_209;
    }
  }
  else
  {
    v253 = 0;
  }
  v270 = v253 + v281;
  if (v253 + v281 > v217)
  {
    v144 = 6893;
    goto LABEL_209;
  }
  if (v197 + v278 > v250)
  {
    v143 = (FILE *)*MEMORY[0x1E0C80C10];
    v144 = 6896;
    goto LABEL_210;
  }
  if ((_DWORD)v278)
  {
    v296 = 0;
    v256 = v278;
    do
    {
      v257 = 8 - (v197 & 7);
      if (v256 < v257)
        v257 = v256;
      v296 = (*(unsigned __int8 *)(v251 + (v197 >> 3)) >> (8 - (v197 & 7) - v257)) & ~(-1 << v257) | (v296 << v257);
      v197 += v257;
      *(_QWORD *)(v7 + 24) = v197;
      v256 -= v257;
    }
    while (v256);
  }
  else
  {
    v296 = 0;
  }
  if (!v253)
  {
    v249 = v281;
LABEL_394:
    *(_WORD *)(v274 + 40) = v249 - v281;
    *(_QWORD *)(v7 + 24) = v197;
    v197 += v296;
    if (v197 > 8 * v222)
    {
      v143 = (FILE *)*MEMORY[0x1E0C80C10];
      v144 = 6920;
      goto LABEL_210;
    }
    *(_QWORD *)(v7 + 24) = v197;
    v281 = v249;
    goto LABEL_396;
  }
  v258 = 0;
  v259 = v197;
  while (1)
  {
    if (v259 + v290 > 8 * v222)
    {
      v143 = (FILE *)*MEMORY[0x1E0C80C10];
      v144 = 6902;
      goto LABEL_210;
    }
    if ((_DWORD)v290)
    {
      v261 = 0;
      v262 = *v297;
      v263 = v290;
      do
      {
        v264 = 8 - (v259 & 7);
        if (v263 < v264)
          v264 = v263;
        v261 = (*(unsigned __int8 *)(v262 + (v259 >> 3)) >> (8 - (v259 & 7) - v264)) & ~(-1 << v264) | (v261 << v264);
        v259 += v264;
        *(_QWORD *)(v7 + 24) = v259;
        v263 -= v264;
      }
      while (v263);
      if (v261)
        goto LABEL_437;
    }
    *(_BYTE *)v220 = 0;
    if ((geo::codec::decodeLabelLineRangeUsingTileLine(v297, (double *)(v220 + 8), (uint64_t)&v301, v276) & 1) == 0)
    {
      v143 = (FILE *)*MEMORY[0x1E0C80C10];
      v144 = 6908;
      goto LABEL_210;
    }
    v222 = *(_QWORD *)(v7 + 16);
    v259 = *(_QWORD *)(v7 + 24);
    if (v259 + v285 > 8 * v222)
      break;
    if ((_DWORD)v285)
    {
      v260 = 0;
      v265 = *v297;
      v266 = v285;
      do
      {
        v267 = 8 - (v259 & 7);
        if (v266 < v267)
          v267 = v266;
        v260 = (*(unsigned __int8 *)(v265 + (v259 >> 3)) >> (8 - (v259 & 7) - v267)) & ~(-1 << v267) | (v260 << v267);
        v259 += v267;
        *(_QWORD *)(v7 + 24) = v259;
        v266 -= v267;
      }
      while (v266);
    }
    else
    {
      LOBYTE(v260) = 0;
    }
    *(_BYTE *)(v220 + 1) = v260;
    v220 += 24;
    ++v281;
    if (++v258 == v253)
    {
      v281 = v270;
LABEL_437:
      v249 = v281;
      v281 = *(_DWORD *)(v274 + 36);
      goto LABEL_394;
    }
  }
  v143 = (FILE *)*MEMORY[0x1E0C80C10];
  v144 = 6910;
LABEL_210:
  fprintf(v143, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v144);
  v18 = 0;
LABEL_122:
  v9 = v298;
  if ((v89 & 1) == 0)
  {
LABEL_123:
    {
      v299 = v9;
      v90 = operator new();
      *(_QWORD *)(v90 + 16) = 0x99AFC36000000008;
      *(_QWORD *)(v90 + 24) = "GeoCodec";
      *(_OWORD *)(v90 + 32) = xmmword_189CFDB80;
      *(_QWORD *)v90 = &off_1E1BF6690;
      *(_QWORD *)(v90 + 8) = "GeoCodec";
      *(_OWORD *)(v90 + 56) = 0u;
      *(_OWORD *)(v90 + 72) = 0u;
      *(_OWORD *)(v90 + 88) = 0u;
      *(_OWORD *)(v90 + 104) = 0u;
      *(_OWORD *)(v90 + 120) = 0u;
      *(_OWORD *)(v90 + 136) = 0u;
      *(_OWORD *)(v90 + 152) = 0u;
      *(_OWORD *)(v90 + 168) = 0u;
      *(_OWORD *)(v90 + 184) = 0u;
      *(_OWORD *)(v90 + 200) = 0u;
      *(_OWORD *)(v90 + 216) = 0u;
      *(_OWORD *)(v90 + 232) = 0u;
      *(_QWORD *)(v90 + 248) = 0;
      v91 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v90 + 56), 0);
      if ((_DWORD)v91)
        geo::read_write_lock::logFailure(v91, (uint64_t)"initialization", v92);
      v93 = malloc_create_zone(0, 0);
      *(_QWORD *)(v90 + 48) = v93;
      malloc_set_zone_name(v93, "GeoCodec");
      *(_QWORD *)(v90 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      geo::codec::Allocator::instance(void)::alloc = v90;
      v9 = v299;
    }
  }
LABEL_29:
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v32, 0);
  if (*(_BYTE *)v7)
  {
    {
      v98 = operator new();
      *(_QWORD *)(v98 + 16) = 0x99AFC36000000008;
      *(_QWORD *)(v98 + 24) = "GeoCodec";
      *(_OWORD *)(v98 + 32) = xmmword_189CFDB80;
      *(_QWORD *)v98 = &off_1E1BF6690;
      *(_QWORD *)(v98 + 8) = "GeoCodec";
      *(_OWORD *)(v98 + 56) = 0u;
      *(_OWORD *)(v98 + 72) = 0u;
      *(_OWORD *)(v98 + 88) = 0u;
      *(_OWORD *)(v98 + 104) = 0u;
      *(_OWORD *)(v98 + 120) = 0u;
      *(_OWORD *)(v98 + 136) = 0u;
      *(_OWORD *)(v98 + 152) = 0u;
      *(_OWORD *)(v98 + 168) = 0u;
      *(_OWORD *)(v98 + 184) = 0u;
      *(_OWORD *)(v98 + 200) = 0u;
      *(_OWORD *)(v98 + 216) = 0u;
      *(_OWORD *)(v98 + 232) = 0u;
      *(_QWORD *)(v98 + 248) = 0;
      v99 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v98 + 56), 0);
      if ((_DWORD)v99)
        geo::read_write_lock::logFailure(v99, (uint64_t)"initialization", v100);
      v101 = malloc_create_zone(0, 0);
      *(_QWORD *)(v98 + 48) = v101;
      malloc_set_zone_name(v101, "GeoCodec");
      *(_QWORD *)(v98 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      geo::codec::Allocator::instance(void)::alloc = v98;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v7 + 40), 0);
  }
  {
    v94 = operator new();
    *(_QWORD *)(v94 + 16) = 0x99AFC36000000008;
    *(_QWORD *)(v94 + 24) = "GeoCodec";
    *(_OWORD *)(v94 + 32) = xmmword_189CFDB80;
    *(_QWORD *)v94 = &off_1E1BF6690;
    *(_QWORD *)(v94 + 8) = "GeoCodec";
    *(_OWORD *)(v94 + 56) = 0u;
    *(_OWORD *)(v94 + 72) = 0u;
    *(_OWORD *)(v94 + 88) = 0u;
    *(_OWORD *)(v94 + 104) = 0u;
    *(_OWORD *)(v94 + 120) = 0u;
    *(_OWORD *)(v94 + 136) = 0u;
    *(_OWORD *)(v94 + 152) = 0u;
    *(_OWORD *)(v94 + 168) = 0u;
    *(_OWORD *)(v94 + 184) = 0u;
    *(_OWORD *)(v94 + 200) = 0u;
    *(_OWORD *)(v94 + 216) = 0u;
    *(_OWORD *)(v94 + 232) = 0u;
    *(_QWORD *)(v94 + 248) = 0;
    v95 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v94 + 56), 0);
    if ((_DWORD)v95)
      geo::read_write_lock::logFailure(v95, (uint64_t)"initialization", v96);
    v97 = malloc_create_zone(0, 0);
    *(_QWORD *)(v94 + 48) = v97;
    malloc_set_zone_name(v97, "GeoCodec");
    *(_QWORD *)(v94 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    geo::codec::Allocator::instance(void)::alloc = v94;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v7, 0);
LABEL_34:
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v302 = "ChapterLabelPlacementMetadata";
  v303 = &v302;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)&v302, (uint64_t)&std::piecewise_construct, (uint64_t **)&v303)+ 4) = (double)((rep - v12.__d_.__rep_) / 1000) * 0.001;
  if (v8)
  {
    v37 = (unint64_t *)&v8->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v18;
}

void sub_18867E218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,geo::read_write_lock *a23,uint64_t a24,uint64_t a25)
{
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *p_shared_owners;
  unint64_t v32;

  MEMORY[0x18D76437C](v27, 0x10F1C40DA10AB66);
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  *(_QWORD *)(v28 - 128) = "ChapterLabelPlacementMetadata";
  *(_QWORD *)(v28 - 112) = v28 - 128;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(a25 + 1912, (uint64_t *)(v28 - 128), (uint64_t)&std::piecewise_construct, (uint64_t **)(v28 - 112))+ 4) = (double)((rep - v26) / 1000) * 0.001;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t geo::codec::decodeLabelLineRangeUsingTileLine(uint64_t *a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v4 = *(unsigned int *)(a4 + 8);
  v5 = a1[2];
  v6 = 8 * a1[1];
  if (v5 + v4 > v6)
    return 0;
  if ((_DWORD)v4)
  {
    v8 = 0;
    v9 = *a1;
    v10 = *(unsigned int *)(a4 + 8);
    do
    {
      v11 = 8 - (v5 & 7);
      if (v10 < v11)
        v11 = v10;
      v8 = (*(unsigned __int8 *)(v9 + (v5 >> 3)) >> (8 - (v5 & 7) - v11)) & ~(-1 << v11) | (v8 << v11);
      v5 += v11;
      a1[2] = v5;
      v10 -= v11;
    }
    while (v10);
    v12 = *(double *)(*(_QWORD *)a4 + 8) + *(double *)(a4 + 16) * (double)(v8 << -(char)v4 >> -(char)v4);
    *a2 = v12;
    v13 = *(unsigned int *)(a4 + 12);
    if (v5 + v13 > v6)
      return 0;
  }
  else
  {
    v12 = *(double *)(*(_QWORD *)a4 + 8);
    *a2 = v12;
    v13 = *(unsigned int *)(a4 + 12);
    if (v5 + v13 > v6)
      return 0;
  }
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = *a1;
    do
    {
      v16 = 8 - (v5 & 7);
      if (v13 < v16)
        v16 = v13;
      v14 = (*(unsigned __int8 *)(v15 + (v5 >> 3)) >> (8 - (v5 & 7) - v16)) & ~(-1 << v16) | (v14 << v16);
      v5 += v16;
      a1[2] = v5;
      v13 -= v16;
    }
    while (v13);
    v17 = *(double *)(a4 + 16);
    v18 = v17 * (double)v14;
  }
  else
  {
    v17 = *(double *)(a4 + 16);
    v18 = 0.0;
  }
  v19 = v18 + v12;
  a2[1] = v19;
  v20 = v17 * 0.6;
  if (fabs(v12 + -1.0) < v20)
  {
    *a2 = 1.0;
    if (fabs(v19 + -1.0) >= v20)
      return 1;
  }
  else if (fabs(v19 + -1.0) >= v20)
  {
    return 1;
  }
  a2[1] = 1.0;
  return 1;
}

uint64_t geo::codec::decodeLabelLineRange(uint64_t *a1, double *a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  double *v13;
  double v14;
  double v15;
  unsigned int v16;
  unint64_t v17;
  double v18;
  double v19;

  v4 = *a3;
  v5 = a1[2];
  v6 = 8 * a1[1];
  if (v5 + v4 > v6)
    return 0;
  if ((_DWORD)v4)
  {
    v8 = 0;
    v9 = *a1;
    v10 = *a3;
    do
    {
      v11 = 8 - (v5 & 7);
      if (v10 < v11)
        v11 = v10;
      v8 = (*(unsigned __int8 *)(v9 + (v5 >> 3)) >> (8 - (v5 & 7) - v11)) & ~(-1 << v11) | (v8 << v11);
      v5 += v11;
      a1[2] = v5;
      v10 -= v11;
    }
    while (v10);
    v12 = *(double *)(a4 + 16) * (double)v8;
    *a2 = v12;
    v13 = a2 + 1;
    if (v5 + v4 > v6)
      return 0;
    v16 = 0;
    do
    {
      v17 = 8 - (v5 & 7);
      if (v4 < v17)
        v17 = v4;
      v16 = (*(unsigned __int8 *)(v9 + (v5 >> 3)) >> (8 - (v5 & 7) - v17)) & ~(-1 << v17) | (v16 << v17);
      v5 += v17;
      a1[2] = v5;
      v4 -= v17;
    }
    while (v4);
    v18 = *(double *)(a4 + 16) * (double)v16;
    *v13 = v18;
    v15 = v12 + -1.0;
    v14 = v18 + -1.0;
  }
  else
  {
    a2[1] = 0.0;
    v13 = a2 + 1;
    *a2 = 0.0;
    v14 = -1.0;
    v15 = -1.0;
  }
  v19 = *(double *)(a4 + 16) * 0.6;
  if (fabs(v15) < v19)
  {
    *a2 = 1.0;
    if (fabs(v14) >= v19)
      return 1;
  }
  else if (fabs(v14) >= v19)
  {
    return 1;
  }
  *v13 = 1.0;
  return 1;
}

id GEOGetDataSessionProtobufLog()
{
  if (qword_1ECDBC218 != -1)
    dispatch_once(&qword_1ECDBC218, &__block_literal_global_187);
  return (id)qword_1ECDBC210;
}

void sub_18867FBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18867FCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18867FE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
    operator delete(__p);

  MEMORY[0x18D76437C](a13, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_18867FF04()
{
  JUMPOUT(0x18867FED8);
}

void sub_18867FF0C()
{
  JUMPOUT(0x18867FEDCLL);
}

void sub_18867FF14()
{
  JUMPOUT(0x18867FEE0);
}

void sub_18867FF1C()
{
  JUMPOUT(0x18867FEE4);
}

void sub_188680058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1886804FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

id _networkDefaultsURL()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v17;
  uint8_t buf[16];
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  GEOGetURLWithSource(0, 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (v0)
  {
    objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", v0, 0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "queryItems");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v0;
    if (v2)
    {
      objc_msgSend(v1, "queryItems");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = (void *)objc_msgSend(v3, "mutableCopy");

    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }

    objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("os"), CFSTR("ios"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v5;
    v6 = (void *)MEMORY[0x1E0CB39D8];
    +[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "osVersion");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "queryItemWithName:value:", CFSTR("os_version"), v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v19[1] = v9;
    v10 = (void *)MEMORY[0x1E0CB39D8];
    +[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "hardwareIdentifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "queryItemWithName:value:", CFSTR("hardware"), v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v19[2] = v13;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObjectsFromArray:", v14);

    objc_msgSend(v1, "setQueryItems:", v4);
    objc_msgSend(v1, "URL");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    v0 = v17;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: baseURL != ((void *)0)", buf, 2u);
    }
    v15 = 0;
  }

  return v15;
}

id GEOGetURLWithSource(uint64_t a1, _QWORD *a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __GEOGetURLWithSource_block_invoke;
  v3[3] = &__block_descriptor_40_e25___NSURL_16__0__NSString_8l;
  v3[4] = a1;
  _GEOGetURLWithSource(a1, a2, 1, v3);
  return (id)objc_claimAutoreleasedReturnValue();
}

id _GEOGetQueryForExperimentType(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  uint64_t v12;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  _getValue(a1, a2, 1, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKeyedSubscript:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (a3 == 1)
  {
    if (a4 >= 0x3F)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a4);
      v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v11 = off_1E1C13670[(int)a4];
    }
    objc_msgSend(v10, "objectForKeyedSubscript:", v11);
    v12 = objc_claimAutoreleasedReturnValue();

    v10 = (void *)v12;
  }

  return v10;
}

void _GEORequestResponseLogRequest(void *a1, void *a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  _QWORD v12[4];
  id v13;
  NSObject *v14;
  id v15;
  id v16;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if ((GEOConfigGetBOOL(GeoServicesConfig_MapsRequestResponseLoggingPersisted, (uint64_t)off_1EDF4D208) & 1) != 0
    || os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    _GEORequestResponseLogQueue();
    v11 = objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = ___GEORequestResponseLogRequest_block_invoke;
    v12[3] = &unk_1E1C00898;
    v13 = v10;
    v14 = v7;
    v15 = v8;
    v16 = v9;
    dispatch_async(v11, v12);

  }
}

uint64_t GEOURLSupportsMPTCP(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  _GEOURLInfoFromActiveTileGroup(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "supportsMultipathTCP");

  return v2;
}

uint64_t GEOURLNeedsAuthForURLType(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  +[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "activeTileGroup");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (GEOAuthProxyEnabledForActiveTileGroup(v3))
  {
    _GEOURLInfoFromActiveTileGroup(a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "useAuthProxy");

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t GEOAuthProxyEnabledForActiveTileGroup(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "urlInfoSet");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = GEOAuthProxyEnabledForURLInfoSet(v1);

  return v2;
}

uint64_t GEOAuthProxyEnabledForURLInfoSet(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  _getValue(GeoServicesConfig_MapsAuthUseProxy, (uint64_t)off_1EDF4E838, 1, 0, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_6;
  if ((objc_msgSend(v2, "isEqualToString:", CFSTR("always")) & 1) == 0)
  {
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("never")) & 1) != 0)
    {
      v3 = 0;
      goto LABEL_7;
    }
LABEL_6:
    v3 = objc_msgSend(v1, "hasAuthProxyURL");
    goto LABEL_7;
  }
  v3 = 1;
LABEL_7:

  return v3;
}

void sub_188681934(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOURLMultipathAlternatePort(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  _GEOURLInfoFromActiveTileGroup(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "supportsMultipathTCP")
    && objc_msgSend(v1, "hasAlternativeMultipathTCPPort"))
  {
    v2 = objc_msgSend(v1, "alternativeMultipathTCPPort");
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

double GEODataRequestTimeout(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  if (qword_1ECDBBD00 != -1)
    dispatch_once(&qword_1ECDBBD00, &__block_literal_global_60);
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__31;
  v14 = __Block_byref_object_dispose__31;
  v15 = 0;
  geo_isolate_sync();
  v2 = (void *)v11[5];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", HIDWORD(a1) | a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
    goto LABEL_6;
  v5 = (void *)v11[5];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", v6);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4
    || (objc_msgSend((id)v11[5], "objectForKeyedSubscript:", &unk_1E1E810A0),
        (v4 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
LABEL_6:
    objc_msgSend(v4, "doubleValue");
    v8 = v7;
  }
  else
  {
    v8 = 60.0;
  }

  _Block_object_dispose(&v10, 8);
  return v8;
}

void sub_188681F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _protobufHTTPHeaders(void *a1, unint64_t a2, void *a3)
{
  id v5;
  id v6;
  uint64_t UInteger;
  char v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v20;
  void *v21;

  v5 = a1;
  v6 = a3;
  UInteger = GEOConfigGetUInteger(GeoServicesConfig_ProtobufSessionAdditionalHTTPHeaders, (uint64_t)off_1EDF4CCB8);
  if (!UInteger)
  {
    v10 = v5;
    goto LABEL_22;
  }
  v8 = UInteger;
  if (v5)
  {
    v9 = (void *)objc_msgSend(v5, "mutableCopy");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v10 = v9;
  if ((v8 & 1) != 0)
  {
    objc_msgSend(v9, "setObject:forKeyedSubscript:", CFSTR("application/octet-stream"), CFSTR("Content-Type"));
    if ((v8 & 2) == 0)
    {
LABEL_8:
      if ((v8 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_8;
  }
  GEOThrottleKeyStringForRequest(a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v11, CFSTR("X-Apple-Maps-Request-Type"));

  if ((v8 & 0x20) == 0)
  {
LABEL_9:
    if ((v8 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  +[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "productName");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v13, CFSTR("X-Apple-Maps-OS-Name"));

  if ((v8 & 0x40) == 0)
  {
LABEL_10:
    if ((v8 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  +[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "osVersion");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v15, CFSTR("X-Apple-Maps-OS-Version"));

  if ((v8 & 0x80) == 0)
  {
LABEL_11:
    if (!v6)
      goto LABEL_22;
    goto LABEL_18;
  }
LABEL_17:
  +[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "buildVersion");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v17, CFSTR("X-Apple-Maps-OS-Build"));

  if (!v6)
    goto LABEL_22;
LABEL_18:
  if ((v8 & 4) == 0)
  {
    if ((v8 & 8) == 0)
      goto LABEL_20;
LABEL_24:
    objc_msgSend(v6, "appMajorVersion");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v21, CFSTR("X-Apple-Maps-App-Version-Major"));

    if ((v8 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
  objc_msgSend(v6, "appIdentifier");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v20, CFSTR("X-Apple-Maps-App-Identifier"));

  if ((v8 & 8) != 0)
    goto LABEL_24;
LABEL_20:
  if ((v8 & 0x10) != 0)
  {
LABEL_21:
    objc_msgSend(v6, "appMinorVersion");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v18, CFSTR("X-Apple-Maps-App-Version-Minor"));

  }
LABEL_22:

  return v10;
}

BOOL GEOCreateBodyDataForProtocolBufferRequest(void *a1, unsigned int a2, int a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  _BOOL8 v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  size_t v15;
  uint8_t *v16;
  size_t v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = objc_alloc_init(MEMORY[0x1E0D82B98]);
  objc_msgSend(v7, "writeTo:", v8);
  objc_msgSend(v8, "immutableData");
  v9 = (id)objc_claimAutoreleasedReturnValue();

  v10 = 0;
  if (!v9)
    goto LABEL_16;
  v11 = a2;
  if (a3 && a2 == 2560)
  {
    v12 = objc_msgSend(v9, "length");
    if (v12 > GEOConfigGetUInteger(GeoServicesConfig_DataRequestMinLenForCompression, (uint64_t)off_1EDF4CF98))
    {
      if (compression_encode_scratch_buffer_size(COMPRESSION_LZ4))
      {
        v13 = (char *)v25 - ((MEMORY[0x1E0C80A78]() + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v13, v14);
      }
      else
      {
        v13 = 0;
      }
      v15 = (unint64_t)((double)(unint64_t)objc_msgSend(v9, "length") * 1.1);
      v16 = (uint8_t *)malloc_type_malloc(v15, 0xCC9D6F81uLL);
      v9 = objc_retainAutorelease(v9);
      v17 = compression_encode_buffer(v16, v15, (const uint8_t *)objc_msgSend(v9, "bytes"), objc_msgSend(v9, "length"), v13, COMPRESSION_LZ4);
      if (v17)
      {
        LODWORD(v10) = 1;
        objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", v16, v17, 1);
        v18 = objc_claimAutoreleasedReturnValue();

        v9 = (id)v18;
        goto LABEL_12;
      }
      free(v16);
    }
    LODWORD(v10) = 0;
  }
LABEL_12:
  v19 = v7;
  v20 = v9;
  v21 = (void *)MEMORY[0x18D764E2C]();
  v22 = objc_alloc_init(MEMORY[0x1E0D82B98]);
  writeARPCPreamble(v22, v10, v11 == 2560);
  objc_msgSend(v22, "writeBigEndianFixed32:", objc_msgSend(v19, "requestTypeCode"));
  objc_msgSend(v22, "writeProtoBuffer:", v20);
  objc_msgSend(v22, "immutableData");
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v21);
  v10 = v23 != 0;
  if (a4 && v23)
    *a4 = objc_retainAutorelease(v23);

LABEL_16:
  return v10;
}

void sub_188682CC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188682D80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void writeARPCPreamble(void *a1, int a2, int a3)
{
  id v5;
  int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  const __CFString *v23;
  id v24;

  v5 = a1;
  v6 = a2 | a3;
  if (a2 | a3)
    v7 = 2;
  else
    v7 = 1;
  v24 = v5;
  objc_msgSend(v5, "writeBigEndianFixed16:", v7);
  objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLanguages");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "count")
    && (objc_msgSend(v8, "objectAtIndex:", 0), (v9 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v10 = v9;
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectForKey:", *MEMORY[0x1E0C997B0]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v12, "length"))
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@_%@"), v10, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v13 = v10;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "localeIdentifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 0;
  }

  v14 = v13;
  objc_msgSend(v24, "writeBigEndianShortThenString:", v14);

  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "bundleIdentifier");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v24, "writeBigEndianShortThenString:", v16);
  v17 = (void *)MEMORY[0x1E0CB3940];
  +[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "osVersion");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  +[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "buildVersion");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "stringWithFormat:", CFSTR("%@.%@"), v19, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v24, "writeBigEndianShortThenString:", v22);
  if (v6)
  {
    if (a2)
      v23 = CFSTR("LZ4");
    else
      v23 = CFSTR("NONE");
    objc_msgSend(v24, "writeBigEndianShortThenString:", v23);
  }

}

os_unfair_lock_s *GEOPDPlaceRequestIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPDPlaceRequestIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 30);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

os_unfair_lock_s *GEOPDClientMetadataIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPDClientMetadataIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 70);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

id GEOURLAuthenticationGenerateURLFromComponents(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  double Current;
  id v9;
  id v10;
  void *v11;
  uint32_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  const void *v32;
  CC_LONG v33;
  uint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  id v40;
  const void *v41;
  unsigned int v42;
  uint64_t v43;
  _CCCryptor *v44;
  size_t OutputLength;
  size_t v46;
  void *v47;
  size_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  id v69;
  CCCryptorRef cryptorRef;
  CC_SHA256_CTX c;
  unsigned __int8 md[32];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  +[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "authToken");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    +[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "urlAuthenticationTimeToLive");
    v6 = v5;

    objc_msgSend(CFSTR("4cjLaD4jGRwlQ9U"), "stringByAppendingString:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    Current = CFAbsoluteTimeGetCurrent();
    v69 = v1;
    v9 = v1;
    v10 = v7;
    objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(CFSTR("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"), "length");
    v13 = 16;
    do
    {
      objc_msgSend(v11, "appendFormat:", CFSTR("%c"), objc_msgSend(CFSTR("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"), "characterAtIndex:", arc4random_uniform(v12)));
      --v13;
    }
    while (v13);
    v14 = v9;
    objc_msgSend(v14, "string");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v14, "rangeOfPath");
    v18 = v17;
    v19 = objc_msgSend(v14, "rangeOfQuery");
    v21 = v20;

    if (v16 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v22 = v15;
    }
    else
    {
      if (v19 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v24 = v15;
        v25 = v16;
        v26 = v18;
      }
      else
      {
        if (v16 >= v19)
          v25 = v19;
        else
          v25 = v16;
        v27 = v16 + v18;
        if (v16 + v18 <= v19 + v21)
          v27 = v19 + v21;
        v26 = v27 - v25;
        v24 = v15;
      }
      objc_msgSend(v24, "substringWithRange:", v25, v26);
      v22 = (id)objc_claimAutoreleasedReturnValue();
    }
    v28 = v22;

    v29 = v28;
    v30 = v11;
    v68 = v10;
    objc_msgSend(v10, "stringByAppendingString:", v30);
    memset(&c, 0, sizeof(c));
    v31 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v32 = (const void *)objc_msgSend(v31, "cStringUsingEncoding:", 1);
    v33 = objc_msgSend(v31, "lengthOfBytesUsingEncoding:", 1);
    CC_SHA256_Init(&c);
    CC_SHA256_Update(&c, v32, v33);
    CC_SHA256_Final(md, &c);
    v34 = (uint64_t)(v6 + Current + *MEMORY[0x1E0C9ADF8]);
    objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", v29);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "appendFormat:", CFSTR("%li"), v34);
    objc_msgSend(v35, "appendString:", v30);
    v36 = objc_msgSend(v35, "lengthOfBytesUsingEncoding:", 1);
    v37 = 16 - (v36 & 0xFu);
    v38 = v36 & 0xF | 0xFFFFFFFFFFFFFFF0;
    do
      objc_msgSend(v35, "appendFormat:", CFSTR("%c"), v37);
    while (!__CFADD__(v38++, 1));
    v40 = objc_retainAutorelease(v35);
    v41 = (const void *)objc_msgSend(v40, "cStringUsingEncoding:", 1);
    v42 = objc_msgSend(v40, "lengthOfBytesUsingEncoding:", 1);
    cryptorRef = 0;
    v43 = CCCryptorCreate(0, 0, 0, md, 0x20uLL, 0, &cryptorRef);
    v67 = v3;
    if ((_DWORD)v43)
    {
      NSLog(CFSTR("Error creating cryptor: %i"), v43);
      v44 = cryptorRef;
      if (!cryptorRef)
        goto LABEL_30;
    }
    else
    {
      OutputLength = CCCryptorGetOutputLength(cryptorRef, v42, 1);
      if (OutputLength)
      {
        v46 = OutputLength;
        v47 = malloc_type_malloc(OutputLength, 0xA4577BE6uLL);
        if (v47)
        {
          v48 = v42;
          v49 = v47;
          v50 = CCCryptorUpdate(cryptorRef, v41, v48, v47, v46, 0);
          if ((_DWORD)v50)
          {
            NSLog(CFSTR("Error updating cryptor: %i"), v50);
          }
          else
          {
            v64 = CCCryptorFinal(cryptorRef, v49, v46, 0);
            if (!(_DWORD)v64)
            {
              v65 = v49;
              v66 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:freeWhenDone:", v49, v46, 0);
              objc_msgSend(v66, "base64EncodedStringWithOptions:", 0);
              v51 = (void *)objc_claimAutoreleasedReturnValue();
              CCCryptorRelease(cryptorRef);
              free(v65);

              goto LABEL_31;
            }
            NSLog(CFSTR("Error finalizing cryptor: %i"), v64);
          }
          CCCryptorRelease(cryptorRef);
          free(v49);
LABEL_30:
          v34 = 0;
          v51 = 0;
LABEL_31:

          objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("%lu_"), v34);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "appendString:", v30);
          objc_msgSend(v52, "appendString:", CFSTR("_"));
          objc_msgSend(v52, "appendString:", v51);
          escapeChars();
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "stringByAddingPercentEncodingWithAllowedCharacters:", v53);
          v54 = (void *)objc_claimAutoreleasedReturnValue();

          v55 = (void *)MEMORY[0x1E0C99D20];
          objc_msgSend(v14, "queryItems");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v55, "arrayWithArray:", v56);
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("accessKey"), CFSTR("A"));
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v57, "arrayByAddingObject:", v58);
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "setQueryItems:", v59);

          v60 = (void *)MEMORY[0x1E0CB37A0];
          objc_msgSend(v14, "string");
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v60, "stringWithString:", v61);
          v62 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v62, "replaceCharactersInRange:withString:", objc_msgSend(v62, "length") - 1, 1, v54);
          objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v62);
          v23 = (void *)objc_claimAutoreleasedReturnValue();

          v1 = v69;
          v3 = v67;
          goto LABEL_32;
        }
        NSLog(CFSTR("Error allocating output buffer"));
      }
      else
      {
        NSLog(CFSTR("Zero-size output buffer requested"));
      }
      v44 = cryptorRef;
    }
    CCCryptorRelease(v44);
    goto LABEL_30;
  }
  objc_msgSend(v1, "URL");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_32:

  return v23;
}

id escapeChars()
{
  if (qword_1ECDBC440 != -1)
    dispatch_once(&qword_1ECDBC440, &__block_literal_global_139);
  return (id)_MergedGlobals_277;
}

void sub_1886838A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::Debugging::addChar(uint64_t this)
{
  addr_obj::Debugging::addChar_ = this;
  return this;
}

void *addr_obj::Logger::setCallback(void *result)
{
  addr_obj::Logger::callback_ = result;
  return result;
}

std::string *addr_obj::AddressObjectFactory::AddressObjectFactory(std::string *this, __int128 *a2)
{
  __int128 v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  const std::string::value_type *v9;
  uint64_t v10;
  unint64_t v11;
  void *__p[2];
  char v14;
  void *v15;
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (addr_obj::Logger::isInitialized((addr_obj::Logger *)this))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"input parameters: ", 18);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"appName", 7);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"==", 2);
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)a2;
    else
      v9 = *(const std::string::value_type **)a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = *((_QWORD *)a2 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
    std::string::basic_string[abi:ne180100]<0>(v19, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(v17, "AddressObjectFactory");
    std::stringbuf::str();
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    addr_obj::Logger::log(2, (uint64_t)v19, 56, (uint64_t)v17, (uint64_t)&v15, (uint64_t)__p);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15);
    if (v18 < 0)
      operator delete(v17[0]);
    if (v20 < 0)
      operator delete(v19[0]);
    v21[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v21[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v22 < 0)
      operator delete((void *)v21[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D764310](&v23);
  }
  v11 = atomic_load(&qword_1EDF50180);
  if (v11 != -1)
  {
    v21[0] = sub_1887A900C;
    v19[0] = v21;
    std::__call_once(&qword_1EDF50180, v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  return this;
}

void sub_188683AD0(void *__p, int a2, int a3, __int16 a4, char a5, char a6, std::string *a7, void *a8, void *__pa, int a10, __int16 a11, char a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,__int128 a21,std::string::size_type a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v37;
  void *v38;
  const std::string::value_type *v39;
  std::string *v40;
  __int128 v41;

  if (SHIBYTE(a14) < 0)
    operator delete(__pa);
  if (a20 < 0)
    operator delete(a15);
  if (SHIBYTE(a22) < 0)
    operator delete((void *)a21);
  if (a29 < 0)
    operator delete(a24);
  std::ostringstream::~ostringstream((uint64_t)&a30);
  v37 = __cxa_begin_catch(__p);
  if (a2 == 2)
  {
    v38 = v37;
    std::string::basic_string[abi:ne180100]<0>(&a30, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a24, "AddressObjectFactory");
    std::string::basic_string[abi:ne180100]<0>(&a15, "Exception caught during formatting of the log line: ");
    v39 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
    v40 = std::string::append((std::string *)&a15, v39);
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    a22 = v40->__r_.__value_.__r.__words[2];
    a21 = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(2, (uint64_t)&a30, 56, (uint64_t)&a24, (uint64_t)&a21, (uint64_t)&__pa);
    if (SHIBYTE(a14) < 0)
      operator delete(__pa);
    if (SHIBYTE(a22) < 0)
      operator delete((void *)a21);
    if (a20 < 0)
      operator delete(a15);
    if (a29 < 0)
      operator delete(a24);
    if (a35 < 0)
      operator delete(a30);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a30, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a24, "AddressObjectFactory");
    std::string::basic_string[abi:ne180100]<0>(&a21, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a15, "");
    addr_obj::Logger::log(2, (uint64_t)&a30, 56, (uint64_t)&a24, (uint64_t)&a21, (uint64_t)&a15);
    if (a20 < 0)
      operator delete(a15);
    if (SHIBYTE(a22) < 0)
      operator delete((void *)a21);
    if (a29 < 0)
      operator delete(a24);
    if (a35 < 0)
      operator delete(a30);
  }
  __cxa_end_catch();
  JUMPOUT(0x188683A74);
}

void sub_188683D04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x188683C58);
}

void sub_188683E14()
{
  __cxa_end_catch();
  JUMPOUT(0x188683E28);
}

id GEOGetReferenceTimeManagerLog()
{
  if (qword_1ECDBC378 != -1)
    dispatch_once(&qword_1ECDBC378, &__block_literal_global_177);
  return (id)qword_1ECDBC370;
}

void *geoAnalyticsSendEventLazy(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t (*AnalyticsSendEventLazySymbolLoc)(id, id);
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  AnalyticsSendEventLazySymbolLoc = (uint64_t (*)(id, id))getAnalyticsSendEventLazySymbolLoc();
  if (AnalyticsSendEventLazySymbolLoc)
  {
    v6 = AnalyticsSendEventLazySymbolLoc(v3, v4);

    return (void *)v6;
  }
  else
  {
    dlerror();
    abort_report_np();
    return getAnalyticsSendEventLazySymbolLoc();
  }
}

void *getAnalyticsSendEventLazySymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getAnalyticsSendEventLazySymbolLoc_ptr;
  v6 = getAnalyticsSendEventLazySymbolLoc_ptr;
  if (!getAnalyticsSendEventLazySymbolLoc_ptr)
  {
    v1 = (void *)CoreAnalyticsLibrary();
    v0 = dlsym(v1, "AnalyticsSendEventLazy");
    v4[3] = (uint64_t)v0;
    getAnalyticsSendEventLazySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_188684794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t CoreAnalyticsLibrary()
{
  uint64_t v0;
  void *v2;

  v0 = CoreAnalyticsLibraryCore();
  if (!v0)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t CoreAnalyticsLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = CoreAnalyticsLibraryCore_frameworkLibrary;
  v6 = CoreAnalyticsLibraryCore_frameworkLibrary;
  if (!CoreAnalyticsLibraryCore_frameworkLibrary)
  {
    v7 = xmmword_1E1C07AA8;
    v8 = *(_OWORD *)&off_1E1C07AB8;
    v1 = _sl_dlopen();
    v4[3] = v1;
    CoreAnalyticsLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1886848B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

BOOL _GEOConfigHasValue(int a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;

  _getValue(a1, a2, 0, 0, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

uint64_t geoTMGetKernelMonotonicClock()
{
  void *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = getTMGetKernelMonotonicClockSymbolLoc_ptr;
  v7 = getTMGetKernelMonotonicClockSymbolLoc_ptr;
  if (!getTMGetKernelMonotonicClockSymbolLoc_ptr)
  {
    v1 = (void *)CoreTimeLibrary();
    v0 = dlsym(v1, "TMGetKernelMonotonicClock");
    v5[3] = (uint64_t)v0;
    getTMGetKernelMonotonicClockSymbolLoc_ptr = v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return ((uint64_t (*)(void))v0)();
}

void sub_188684C90(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t CoreTimeLibrary()
{
  uint64_t v0;
  void *v2;

  if (CoreTimeLibraryCore_frameworkLibrary)
    return CoreTimeLibraryCore_frameworkLibrary;
  CoreTimeLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = CoreTimeLibraryCore_frameworkLibrary;
  if (!CoreTimeLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void sub_188685054(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886851F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_188685A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188685D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id GEOGetNetworkDefaultsLog()
{
  if (qword_1ECDBC060 != -1)
    dispatch_once(&qword_1ECDBC060, &__block_literal_global_196);
  return (id)qword_1ECDBC058;
}

void sub_188686270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_188686418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id GEOApplicationIdentifierOrProcessName()
{
  if (qword_1ECDBC598 != -1)
    dispatch_once(&qword_1ECDBC598, &__block_literal_global_122_0);
  return (id)qword_1ECDBC590;
}

void sub_188687F00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188688114(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188688450(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188688648(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188688854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_188688D14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __daemonXPCUtilIsolater_block_invoke()
{
  uint64_t v0;
  void *v1;

  v0 = geo_isolater_create();
  v1 = (void *)_MergedGlobals_224;
  _MergedGlobals_224 = v0;

}

void sub_188689D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t GEODataRequestKindToNWActivityLabel(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  int v4;
  unsigned int v5;
  BOOL v6;

  result = 0;
  if ((int)a1 > 1791)
  {
    if ((int)a1 <= 2816)
    {
      if ((_DWORD)a1 != 1792)
      {
        v3 = 20;
        if ((_DWORD)a1 == 2816)
          v5 = 41;
        else
          v5 = 0;
        v6 = (_DWORD)a1 == 2560;
        goto LABEL_21;
      }
      goto LABEL_27;
    }
    switch((int)a1)
    {
      case 2848:
      case 2849:
        result = 40;
        break;
      case 2850:
        result = 36;
        break;
      case 2851:
      case 2852:
      case 2854:
      case 2855:
        return result;
      case 2853:
        result = 41;
        break;
      case 2856:
        result = 48;
        break;
      case 2857:
        result = 54;
        break;
      case 2858:
        result = 53;
        break;
      default:
        if ((_DWORD)a1 == 2817)
          result = 41;
        else
          result = 0;
        break;
    }
  }
  else
  {
    if ((int)a1 <= 255)
    {
      switch((int)a1)
      {
        case 1:
          result = 42;
          break;
        case 2:
          result = 38;
          break;
        case 3:
          result = 37;
          break;
        case 4:
          result = 43;
          break;
        case 5:
          result = 39;
          break;
        case 6:
          result = 44;
          break;
        default:
          return result;
      }
      return result;
    }
    if ((int)a1 <= 672)
    {
      v3 = 30;
      if ((_DWORD)a1 == 672)
        v4 = 22;
      else
        v4 = 0;
      if ((_DWORD)a1 == 512)
        v5 = 21;
      else
        v5 = v4;
      v6 = (_DWORD)a1 == 256;
LABEL_21:
      if (v6)
        return v3;
      else
        return v5;
    }
    if ((_DWORD)a1 == 673)
      return 23;
    if ((_DWORD)a1 == 768 || (_DWORD)a1 == 1280)
    {
LABEL_27:
      if ((HIDWORD(a1) - 1) >= 0x35)
        return 0;
      else
        return dword_189CC2C80[HIDWORD(a1) - 1];
    }
  }
  return result;
}

uint64_t GEORequestCounterNWActivityDomainForAppId(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.Maps")) & 1) != 0)
    {
      v2 = 27;
    }
    else if (objc_msgSend(v1, "hasPrefix:", CFSTR("com.apple.")))
    {
      v2 = 28;
    }
    else
    {
      v2 = 29;
    }
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void GEOWaitForURLsFromManifestAndThenOnQueue(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _GEOURLManifestListenerCallbackWithQueue *v6;

  v3 = a2;
  v4 = a1;
  v6 = -[_GEOURLManifestListenerCallbackWithQueue initWithQueue:handler:]([_GEOURLManifestListenerCallbackWithQueue alloc], "initWithQueue:handler:", v4, v3);

  +[_GEOURLManifestListener sharedListener](_GEOURLManifestListener, "sharedListener");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "waitForManifestWithCallback:", v6);

}

void sub_18868AD84(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id httpPragmaHeader()
{
  if (qword_1EDF4FB10 != -1)
    dispatch_once(&qword_1EDF4FB10, &__block_literal_global_439);
  return (id)qword_1EDF4FB08;
}

void GEOTileKeyAssertIsStandard(uint64_t a1)
{
  uint8_t v1[16];

  if ((*(_QWORD *)(a1 + 1) & 0xFFFFFFFFFFLL) != 0 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: key->standard.reserved == 0", v1, 2u);
  }
}

void sub_18868BD34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

GEOURLWithHeaders *GEOURLAuthenticationForComponents(void *a1, GEOURLWithHeaders *a2)
{
  id v3;
  int v4;
  void *v5;
  void *v6;
  GEOURLWithHeaders *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  const __CFString *v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  size_t v46;
  id v47;
  void *v48;
  const void *v49;
  void *v50;
  void *v51;
  void *v53;
  id v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  unsigned __int8 v63[128];
  unsigned __int8 md[64];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = -[GEOURLWithHeaders requestStyle](a2, "requestStyle");
  if (v4 != 1)
  {
    if (!v4)
    {
      objc_msgSend(v3, "URLComponents");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      GEOURLAuthenticationGenerateURLFromComponents(v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      v7 = [GEOURLWithHeaders alloc];
      objc_msgSend(v3, "headerFields");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      a2 = -[GEOURLWithHeaders initWithURL:headerFields:](v7, "initWithURL:headerFields:", v6, v8);

      goto LABEL_34;
    }
    goto LABEL_35;
  }
  v54 = v3;
  objc_msgSend(v3, "URLComponents");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v53 = v9;
  objc_msgSend(v9, "queryItems");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v59, v63, 16);
  v55 = v6;
  if (!v12)
  {
    v57 = 0;
    goto LABEL_26;
  }
  v13 = v12;
  v14 = *(_QWORD *)v60;
  v56 = *(_QWORD *)v60;
  v57 = 0;
  do
  {
    v15 = 0;
    v58 = v13;
    do
    {
      if (*(_QWORD *)v60 != v14)
        objc_enumerationMutation(v11);
      v16 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * v15);
      objc_msgSend(v16, "name");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v17, "isEqualToString:", CFSTR("x")))
      {
        objc_msgSend(v16, "value");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = v6;
        v20 = v18;
        v21 = CFSTR("Maps-Tile-X");
LABEL_15:
        objc_msgSend(v19, "setObject:forKeyedSubscript:", v20, v21);
        goto LABEL_16;
      }
      if (objc_msgSend(v17, "isEqualToString:", CFSTR("y")))
      {
        objc_msgSend(v16, "value");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = v6;
        v20 = v18;
        v21 = CFSTR("Maps-Tile-Y");
        goto LABEL_15;
      }
      if (objc_msgSend(v17, "isEqualToString:", CFSTR("z")))
      {
        objc_msgSend(v16, "value");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = v6;
        v20 = v18;
        v21 = CFSTR("Maps-Tile-Z");
        goto LABEL_15;
      }
      if (objc_msgSend(v17, "isEqualToString:", CFSTR("v")))
      {
        objc_msgSend(v16, "value");
        v22 = objc_claimAutoreleasedReturnValue();

        v57 = (void *)v22;
      }
      v23 = v16;
      objc_msgSend(v23, "name");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      escapeChars();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "stringByAddingPercentEncodingWithAllowedCharacters:", v25);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v23, "value");
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      if (v26)
      {
        objc_msgSend(v18, "stringByAppendingString:", CFSTR("="));
        v27 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v23, "value");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        escapeChars();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "stringByAddingPercentEncodingWithAllowedCharacters:", v29);
        v30 = v11;
        v31 = v10;
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "stringByAppendingString:", v32);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        v10 = v31;
        v11 = v30;

        v6 = v55;
      }
      v13 = v58;
      v14 = v56;

      objc_msgSend(v10, "addObject:", v18);
LABEL_16:

      ++v15;
    }
    while (v13 != v15);
    v33 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v59, v63, 16);
    v13 = v33;
  }
  while (v33);
LABEL_26:

  if (objc_msgSend(v10, "count"))
  {
    objc_msgSend(v10, "componentsJoinedByString:", CFSTR("&"));
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v34, CFSTR("Maps-Tile-Style"));

  }
  v3 = v54;
  v35 = v57;
  if (v57)
  {
    v36 = v10;
    v37 = v57;
    +[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "authToken");
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    if (v39)
    {
      objc_msgSend(CFSTR("4cjLaD4jGRwlQ9U"), "stringByAppendingString:", v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "dataUsingEncoding:", 4);
      v41 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      CC_SHA512((const void *)objc_msgSend(v41, "bytes"), objc_msgSend(v41, "length"), md);
      objc_msgSend(v37, "dataUsingEncoding:", 4);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", 32);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = objc_retainAutorelease(v42);
      v45 = objc_msgSend(v44, "bytes");
      v46 = objc_msgSend(v44, "length");
      v47 = objc_retainAutorelease(v43);
      v48 = (void *)objc_msgSend(v47, "mutableBytes");
      v49 = (const void *)v45;
      v35 = v57;
      CCHmac(2u, md, 0x40uLL, v49, v46, v48);
      objc_msgSend(v47, "base64EncodedStringWithOptions:", 0);
      v50 = (void *)objc_claimAutoreleasedReturnValue();

      v6 = v55;
      v3 = v54;

    }
    else
    {
      v50 = 0;
    }

    objc_msgSend(v6, "setObject:forKeyedSubscript:", v50, CFSTR("Maps-Auth-Token"));
    v10 = v36;
  }
  objc_msgSend(v53, "setQueryItems:", 0);

  objc_msgSend(v3, "headerFields");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v51, "addEntriesFromDictionary:", v6);

  objc_msgSend(v3, "URLWithHeaders");
  a2 = (GEOURLWithHeaders *)objc_claimAutoreleasedReturnValue();
LABEL_34:

LABEL_35:
  return a2;
}

void sub_18868CBE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double GEOMapPointForCoordinate(double a1, double a2)
{
  return GEOTilePointForCoordinate(a1, a2, 20.0);
}

id GEOGetDecodedDefaultWithSource(void *a1, void *a2, _QWORD *a3, void *a4)
{
  id v7;
  id v8;
  void (**v9)(id, id);
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;

  v7 = a1;
  v8 = a2;
  v9 = a4;
  if (!v7)
  {
    v11 = 0;
    goto LABEL_21;
  }
  v20 = 0;
  _GEOConfigStorageCFProfile();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "getConfigValueForKey:countryCode:options:source:", v7, 0, 0, &v20);
  v11 = (id)objc_claimAutoreleasedReturnValue();

  if (v9 && v11)
  {
    v9[2](v9, v11);
    v12 = objc_claimAutoreleasedReturnValue();

    v11 = (id)v12;
  }
  if (!v20)
  {
    _GEOConfigProxy();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "configStoreForOptions:", 983040);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v14, "getConfigValueForKey:countryCode:options:source:", v7, 0, 983040, &v20);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9 && v15)
    {
      v9[2](v9, v15);
      v16 = objc_claimAutoreleasedReturnValue();

      v15 = (void *)v16;
    }

    v11 = v15;
    if (v15)
      goto LABEL_18;
    goto LABEL_12;
  }
  if (!v11)
  {
LABEL_12:
    _GEOGetConfigStorageRemote();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "getConfigValueForKey:countryCode:options:source:", v7, 0, 0, &v20);
    v11 = (id)objc_claimAutoreleasedReturnValue();

    if (v9 && v11)
    {
      v9[2](v9, v11);
      v18 = objc_claimAutoreleasedReturnValue();

      v11 = (id)v18;
    }
    if (v8 && !v11)
      v11 = v8;
  }
LABEL_18:
  if (a3 && v11)
    *a3 = 0;
LABEL_21:

  return v11;
}

uint64_t _GEOFullDefaultsDomain()
{
  if (qword_1ECDBBA98 != -1)
    dispatch_once(&qword_1ECDBBA98, &__block_literal_global_60);
  return qword_1ECDBBA90;
}

void sub_18868F3F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18868F50C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18868F5C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceResponseReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 124))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDPlaceResponseReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 120) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 124) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDPlaceResponseReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDPlaceResponseReadAllFrom_initialTag;
  Specified = GEOPDPlaceResponseReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDPlaceResponseCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  return Specified;
}

void sub_18868F758(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceResponseReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint16x4_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  unsigned __int8 v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  GEOPDPlaceGlobalResult *v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  id v65;
  void *v66;
  int v67;
  char v68;
  uint64_t v69;
  __int16 v70;
  int v71;
  int v72;
  __int16 v73;
  void *v74;
  int v76;
  char v77;
  char v78;
  char v79;
  char v80;
  BOOL v81;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 124);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 120));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 140));
  v13 = (unsigned __int16)(vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16(v12, (uint16x4_t)0xFFF7FFF8FFF5FFF3) & 0xFF01FF01FF01FF01))
                         + ((*(_WORD *)(a1 + 140) >> 14) & 1)
                         + ((*(_WORD *)(a1 + 140) >> 7) & 1)
                         + ((*(_WORD *)(a1 + 140) >> 6) & 1))
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16(v12, (uint16x4_t)0xFFFBFFFCFFF6FFF4), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 140) >> 3) & 1));
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v15 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 > 7;
        v18 = v17 & ~(_BYTE)v11 | v9;
        v19 = v17 | v11;
        v78 = v18;
        v79 = v19 | v18;
        v77 = v8;
        if (((v19 | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v80 = (v20 == 0) | v19;
        v81 = v19;
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v9;
LABEL_8:
        v15 = v10;
        v16 = v11;
LABEL_10:
        ++v7;
        v9 = v14;
        v10 = v15;
        v11 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_154;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      v31 = v25++ >= 9;
      if (v31)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_154:
      v76 = 1;
      goto LABEL_155;
    }
    v34 = v26 >> 3;
    v35 = v81;
    if ((v80 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if ((v77 & 1) == 0)
          goto LABEL_124;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        *(_WORD *)(a1 + 140) |= 4u;
        while (1)
        {
          v43 = *v21;
          v44 = *(_QWORD *)(v3 + v43);
          v45 = v44 + 1;
          if (v44 == -1 || v45 > *(_QWORD *)(v3 + *v6))
            break;
          v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v44);
          *(_QWORD *)(v3 + v43) = v45;
          v42 |= (unint64_t)(v46 & 0x7F) << v40;
          if ((v46 & 0x80) == 0)
            goto LABEL_127;
          v40 += 7;
          v31 = v41++ >= 9;
          if (v31)
          {
            LODWORD(v42) = 0;
            goto LABEL_129;
          }
        }
        *(_BYTE *)(v3 + *v22) = 1;
LABEL_127:
        if (*(_BYTE *)(v3 + *v22))
          LODWORD(v42) = 0;
LABEL_129:
        v69 = 136;
        goto LABEL_134;
      case 2:
        if ((v77 & 1) == 0)
          goto LABEL_124;
        v49 = 0;
        v50 = 0;
        v42 = 0;
        *(_WORD *)(a1 + 140) |= 2u;
        while (2)
        {
          v51 = *v21;
          v52 = *(_QWORD *)(v3 + v51);
          v53 = v52 + 1;
          if (v52 == -1 || v53 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v52);
            *(_QWORD *)(v3 + v51) = v53;
            v42 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              v31 = v50++ >= 9;
              if (v31)
              {
                LODWORD(v42) = 0;
                goto LABEL_133;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          LODWORD(v42) = 0;
LABEL_133:
        v69 = 132;
LABEL_134:
        *(_DWORD *)(a1 + v69) = v42;
        goto LABEL_153;
      case 3:
        if (!v35)
          goto LABEL_124;
        if ((*(_WORD *)(a1 + 140) & 0x800) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_180;
          v70 = 16 * *(_WORD *)(a1 + 140);
          goto LABEL_151;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_180;
        v47 = objc_alloc_init(GEOPDPlaceGlobalResult);
        if (!GEOPDPlaceGlobalResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_179;
        PBReaderRecallMark();
        v48 = 88;
        goto LABEL_108;
      case 4:
        if (!v35 || (*(_WORD *)(a1 + 140) & 0x2000) != 0)
          goto LABEL_124;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_180;
        v47 = objc_alloc_init(GEOPDPlace);
        if (!GEOPDPlaceReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_179;
        PBReaderRecallMark();
        -[GEOPDPlaceResponse _addNoFlagsLegacyPlaceResult:](a1, v47);
        goto LABEL_102;
      case 5:
        if (!v35 || (*(_WORD *)(a1 + 140) & 0x100) != 0)
          goto LABEL_124;
        PBReaderReadString();
        v47 = (GEOPDPlaceGlobalResult *)objc_claimAutoreleasedReturnValue();
        if (v47)
          -[GEOPDPlaceResponse _addNoFlagsDisplayLanguage:](a1, v47);
        goto LABEL_102;
      case 6:
        if (!v35)
          goto LABEL_124;
        if ((*(_WORD *)(a1 + 140) & 0x200) == 0)
        {
          PBReaderReadString();
          v55 = objc_claimAutoreleasedReturnValue();
          v56 = 72;
          goto LABEL_86;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_180;
        v70 = *(_WORD *)(a1 + 140) << 6;
        goto LABEL_151;
      case 7:
        if (!v35 || (*(_WORD *)(a1 + 140) & 0x4000) != 0)
          goto LABEL_124;
        PBReaderReadString();
        v47 = (GEOPDPlaceGlobalResult *)objc_claimAutoreleasedReturnValue();
        if (v47)
          -[GEOPDPlaceResponse _addNoFlagsSpokenLanguage:](a1, v47);
        goto LABEL_102;
      case 8:
        if (!v35)
          goto LABEL_124;
        if ((*(_WORD *)(a1 + 140) & 0x80) == 0)
        {
          PBReaderReadString();
          v55 = objc_claimAutoreleasedReturnValue();
          v56 = 48;
LABEL_86:
          v57 = *(void **)(a1 + v56);
          *(_QWORD *)(a1 + v56) = v55;
          goto LABEL_109;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_180;
        v70 = *(_WORD *)(a1 + 140) << 8;
        goto LABEL_151;
      case 9:
        if (!v35)
          goto LABEL_124;
        if ((*(_WORD *)(a1 + 140) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_180;
          v70 = *(_WORD *)(a1 + 140) << 9;
          goto LABEL_151;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_180;
        v47 = objc_alloc_init(GEOPDDatasetABStatus);
        if (!GEOPDDatasetABStatusReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_179;
        PBReaderRecallMark();
        v48 = 40;
        goto LABEL_108;
      case 10:
        if (!v35 || (*(_WORD *)(a1 + 140) & 0x1000) != 0)
          goto LABEL_124;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_180;
        v47 = objc_alloc_init(GEOPDMapsResult);
        if (!GEOPDMapsResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_179;
        PBReaderRecallMark();
        -[GEOPDPlaceResponse _addNoFlagsMapsResult:](a1, v47);
        goto LABEL_102;
      case 11:
        if (!v35 || (*(_WORD *)(a1 + 140) & 0x400) != 0)
          goto LABEL_124;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_180;
        v47 = objc_alloc_init(GEOPDDotPlace);
        if (!GEOPDDotPlaceReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
          goto LABEL_179;
        PBReaderRecallMark();
        -[GEOPDPlaceResponse _addNoFlagsDotPlace:](a1, v47);
LABEL_102:

        goto LABEL_152;
      case 12:
        if (!v35)
          goto LABEL_124;
        if ((*(_WORD *)(a1 + 140) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_180;
          v70 = *(_WORD *)(a1 + 140) << 11;
LABEL_151:
          v7 += v70 >> 15;
LABEL_152:
          v22 = (int *)MEMORY[0x1E0D82BC8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
LABEL_153:
          if (!(v79 & 1 | (v7 != 0)))
            goto LABEL_154;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_180;
        v47 = objc_alloc_init(GEOPDPlacesRequestResponseAnalyticsData);
        if (GEOPDPlacesRequestResponseAnalyticsDataReadAllFrom((uint64_t)v47, (void *)v3))
        {
          PBReaderRecallMark();
          v48 = 24;
LABEL_108:
          v57 = *(void **)(a1 + v48);
          *(_QWORD *)(a1 + v48) = v47;
LABEL_109:

          --v7;
          goto LABEL_152;
        }
LABEL_179:

LABEL_180:
        v76 = 0;
        v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_155:
        if ((v78 & 1) != 0)
LABEL_156:
          *(_WORD *)(a1 + 140) |= 8u;
        if (v81 || (v76 & 1) == 0)
        {
          *(_WORD *)(a1 + 140) |= 0x800u;
          *(_WORD *)(a1 + 140) |= 0x2000u;
          *(_WORD *)(a1 + 140) |= 0x100u;
          *(_WORD *)(a1 + 140) |= 0x200u;
          *(_WORD *)(a1 + 140) |= 0x4000u;
          *(_WORD *)(a1 + 140) |= 0x80u;
          *(_WORD *)(a1 + 140) |= 0x40u;
          *(_WORD *)(a1 + 140) |= 0x1000u;
          *(_WORD *)(a1 + 140) |= 0x400u;
          *(_WORD *)(a1 + 140) |= 0x10u;
          *(_WORD *)(a1 + 140) |= 0x20u;
        }
        else if (v20)
        {
          while (1)
          {
            v72 = *v20++;
            v71 = v72;
            v73 = 2048;
            switch(v72)
            {
              case 0:
                goto LABEL_173;
              case 1:
              case 2:
                continue;
              case 3:
                goto LABEL_172;
              case 4:
                v73 = 0x2000;
                goto LABEL_172;
              case 5:
                v73 = 256;
                goto LABEL_172;
              case 6:
                v73 = 512;
                goto LABEL_172;
              case 7:
                v73 = 0x4000;
                goto LABEL_172;
              case 8:
                v73 = 128;
                goto LABEL_172;
              case 9:
                v73 = 64;
                goto LABEL_172;
              case 10:
                v73 = 4096;
                goto LABEL_172;
              case 11:
                v73 = 1024;
                goto LABEL_172;
              case 12:
                v73 = 16;
                goto LABEL_172;
              default:
                if (v71 != 1051)
                  continue;
                v73 = 32;
LABEL_172:
                *(_WORD *)(a1 + 140) |= v73;
                break;
            }
          }
        }
LABEL_173:
        if (v76)
          v3 = *(_BYTE *)(v3 + *v22) == 0;
        else
          v3 = 0;
        if (v81)
        {
          v74 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((_DWORD)v34 == 1000)
        {
          if ((v77 & 1) != 0)
          {
            v58 = 0;
            v59 = 0;
            v60 = 0;
            *(_WORD *)(a1 + 140) |= 1u;
            while (1)
            {
              v61 = *v21;
              v62 = *(_QWORD *)(v3 + v61);
              v63 = v62 + 1;
              if (v62 == -1 || v63 > *(_QWORD *)(v3 + *v6))
                break;
              v64 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v62);
              *(_QWORD *)(v3 + v61) = v63;
              v60 |= (unint64_t)(v64 & 0x7F) << v58;
              if ((v64 & 0x80) == 0)
                goto LABEL_136;
              v58 += 7;
              v31 = v59++ >= 9;
              if (v31)
              {
                v60 = 0;
                goto LABEL_138;
              }
            }
            *(_BYTE *)(v3 + *v22) = 1;
LABEL_136:
            if (*(_BYTE *)(v3 + *v22))
              v60 = 0;
LABEL_138:
            *(_QWORD *)(a1 + 56) = v60;
            goto LABEL_153;
          }
LABEL_124:
          v68 = PBReaderSkipValueWithTag();
          v23 = (int *)MEMORY[0x1E0D82BB8];
          v22 = (int *)MEMORY[0x1E0D82BC8];
          if ((v68 & 1) == 0)
          {
            v76 = 0;
            goto LABEL_155;
          }
          goto LABEL_153;
        }
        if ((_DWORD)v34 == 1051)
        {
          if (!v35)
            goto LABEL_124;
          if ((*(_WORD *)(a1 + 140) & 0x20) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_180;
            v70 = *(_WORD *)(a1 + 140) << 10;
            goto LABEL_151;
          }
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_180;
          v47 = objc_alloc_init(GEOClientMetrics);
          if (!GEOClientMetricsReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1))
            goto LABEL_179;
          PBReaderRecallMark();
          v48 = 32;
          goto LABEL_108;
        }
        if ((v78 & 1) == 0 || (*(_WORD *)(a1 + 140) & 8) != 0)
          goto LABEL_124;
        if (!*(_QWORD *)(a1 + 16))
        {
          v65 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v66 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v65;

        }
        v67 = PBUnknownFieldAdd();
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        if (!v67)
        {
          v76 = 0;
          goto LABEL_156;
        }
        goto LABEL_153;
    }
  }
}

unint64_t GEOPDMapsResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDMapsResultReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDMapsResultReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDMapsResultReadAllFrom_initialTag;
  Specified = GEOPDMapsResultReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDMapsResultCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_1886905B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDMapsResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  BOOL v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  GEOPDPlace *v45;
  uint64_t v46;
  void *v47;
  id v48;
  void *v49;
  int v50;
  char v51;
  char v52;
  int v53;
  int v54;
  char v55;
  void *v56;
  int v58;
  int *v59;
  char v60;
  char v61;
  char v62;
  char v63;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 80)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFAFFFBFFFDLL) & 0xFF01FF01FF01FF01))+ ((*(_BYTE *)(a1 + 80) & 4) != 0)+ ((*(_BYTE *)(a1 + 80) & 2) != 0));
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 > 3;
        v60 = v17 & ~(_BYTE)v12 | v10;
        v61 = v17 | v12 | v60;
        if ((((v17 | v12) | v9) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v62 = (v18 == 0) | v17 | v12;
        v63 = v17 | v12;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v10;
LABEL_8:
        v15 = v11;
        v16 = v12;
LABEL_10:
        ++v8;
        v10 = v14;
        v11 = v15;
        v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v20))
      goto LABEL_100;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v7))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      v29 = v23++ >= 9;
      if (v29)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_27:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_100:
      v58 = 1;
      goto LABEL_101;
    }
    v32 = v24 >> 3;
    v33 = v63;
    if ((v62 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if ((v9 & 1) == 0)
          goto LABEL_81;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_BYTE *)(a1 + 80) |= 1u;
        while (1)
        {
          v41 = *v19;
          v42 = *(_QWORD *)(v3 + v41);
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)(v3 + *v7))
            break;
          v44 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v42);
          *(_QWORD *)(v3 + v41) = v43;
          v40 |= (unint64_t)(v44 & 0x7F) << v38;
          if ((v44 & 0x80) == 0)
            goto LABEL_84;
          v38 += 7;
          v29 = v39++ >= 9;
          if (v29)
          {
            LODWORD(v40) = 0;
            goto LABEL_86;
          }
        }
        *(_BYTE *)(v3 + *v20) = 1;
LABEL_84:
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v40) = 0;
LABEL_86:
        *(_DWORD *)(a1 + 76) = v40;
        goto LABEL_99;
      case 2:
        if (!v33)
          goto LABEL_81;
        if ((*(_BYTE *)(a1 + 80) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_121;
          v52 = 4 * *(_BYTE *)(a1 + 80);
          goto LABEL_97;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_121;
        v45 = objc_alloc_init(GEOPDPlace);
        if (!GEOPDPlaceReadAllFrom((uint64_t)v45, (void *)v3, v11 & 1))
          goto LABEL_120;
        PBReaderRecallMark();
        v46 = 48;
        goto LABEL_74;
      case 3:
        if (!v33)
          goto LABEL_81;
        if ((*(_BYTE *)(a1 + 80) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_121;
          v52 = 16 * *(_BYTE *)(a1 + 80);
          goto LABEL_97;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_121;
        v45 = objc_alloc_init(GEOPDCollectionResult);
        if (!GEOPDCollectionResultReadAllFrom((uint64_t)v45, (void *)v3, v11 & 1))
          goto LABEL_120;
        PBReaderRecallMark();
        v46 = 32;
        goto LABEL_74;
      case 4:
        if (!v33)
          goto LABEL_81;
        if ((*(_BYTE *)(a1 + 80) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_121;
          v52 = 2 * *(_BYTE *)(a1 + 80);
          goto LABEL_97;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_121;
        v45 = objc_alloc_init(GEOPDPublisherResult);
        if (!GEOPDPublisherResultReadAllFrom((uint64_t)v45, (void *)v3, v11 & 1))
          goto LABEL_120;
        PBReaderRecallMark();
        v46 = 56;
        goto LABEL_74;
      default:
        if ((_DWORD)v32 != 100)
        {
          if ((_DWORD)v32 == 101)
          {
            if (v33)
            {
              if ((*(_BYTE *)(a1 + 80) & 4) == 0)
              {
                if ((PBReaderPlaceMark() & 1) == 0)
                  goto LABEL_121;
                v45 = objc_alloc_init(GEOPDBatchReverseGeocodeResult);
                if (!GEOPDBatchReverseGeocodeResultReadAllFrom((uint64_t)v45, (void *)v3, v11 & 1))
                  goto LABEL_120;
                PBReaderRecallMark();
                v46 = 24;
LABEL_74:
                v47 = *(void **)(a1 + v46);
                *(_QWORD *)(a1 + v46) = v45;

                --v8;
LABEL_98:
                v20 = (int *)MEMORY[0x1E0D82BC8];
                v7 = (int *)MEMORY[0x1E0D82BD8];
                goto LABEL_99;
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_121;
              v52 = 32 * *(_BYTE *)(a1 + 80);
LABEL_97:
              v8 += v52 >> 7;
              goto LABEL_98;
            }
            goto LABEL_81;
          }
          if ((v60 & 1) == 0 || (*(_BYTE *)(a1 + 80) & 2) != 0)
            goto LABEL_81;
          if (!*(_QWORD *)(a1 + 16))
          {
            v48 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v49 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v48;

          }
          v50 = PBUnknownFieldAdd();
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          if (!v50)
          {
            v58 = 0;
            v59 = &OBJC_IVAR___GEOPDButtonModuleConfiguration__unknownFields;
            goto LABEL_102;
          }
LABEL_99:
          if (!(v61 & 1 | (v8 != 0)))
            goto LABEL_100;
          continue;
        }
        if (!v33)
        {
LABEL_81:
          v51 = PBReaderSkipValueWithTag();
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v20 = (int *)MEMORY[0x1E0D82BC8];
          if ((v51 & 1) == 0)
          {
            v58 = 0;
            goto LABEL_101;
          }
          goto LABEL_99;
        }
        if ((*(_BYTE *)(a1 + 80) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_121;
          v52 = 8 * *(_BYTE *)(a1 + 80);
          goto LABEL_97;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_121;
        v45 = objc_alloc_init(GEOPDPlaceQuestionnaireResult);
        if (GEOPDPlaceQuestionnaireResultReadAllFrom((uint64_t)v45, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          v46 = 40;
          goto LABEL_74;
        }
LABEL_120:

LABEL_121:
        v58 = 0;
        v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_101:
        v59 = &OBJC_IVAR___GEOPDButtonModuleConfiguration__unknownFields;
        if ((v60 & 1) != 0)
LABEL_102:
          *(_BYTE *)(a1 + v59[466]) |= 2u;
        if (v63 & 1 | ((v58 & 1) == 0))
        {
          *(_BYTE *)(a1 + v59[466]) |= 0x20u;
          *(_BYTE *)(a1 + v59[466]) |= 8u;
          *(_BYTE *)(a1 + v59[466]) |= 0x40u;
          *(_BYTE *)(a1 + v59[466]) |= 0x10u;
          *(_BYTE *)(a1 + v59[466]) |= 4u;
          goto LABEL_114;
        }
        if (v18)
        {
          while (1)
          {
            v54 = *v18++;
            v53 = v54;
            v55 = 32;
            switch(v54)
            {
              case 0:
                goto LABEL_114;
              case 1:
                continue;
              case 2:
                goto LABEL_113;
              case 3:
                v55 = 8;
                goto LABEL_113;
              case 4:
                v55 = 64;
                goto LABEL_113;
              default:
                if (v53 == 100)
                {
                  v55 = 16;
                }
                else
                {
                  if (v53 != 101)
                    continue;
                  v55 = 4;
                }
LABEL_113:
                *(_BYTE *)(a1 + v59[466]) |= v55;
                break;
            }
          }
        }
LABEL_114:
        if (v58)
          v3 = *(_BYTE *)(v3 + *v20) == 0;
        else
          v3 = 0;
        if ((v63 & 1) != 0)
        {
          v56 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
    }
  }
}

uint64_t GEOPDPlaceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  void *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 108))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDPlaceReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 104) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 108) = objc_msgSend(v8, "length");
  if (a3)
    v9 = &GEOPDPlaceReadAllFrom_recursiveTag;
  else
    v9 = &GEOPDPlaceReadAllFrom_initialTag;
  Specified = GEOPDPlaceReadSpecified(a1, v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDPlaceCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  return Specified;
}

void sub_1886910C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886911EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18869157C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188691870(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188691A00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_188691A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *addr_obj::getVersion@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "11.3.0");
}

uint64_t addr_obj::AddressObjectBase::getLocalization(addr_obj::AddressObjectBase *this)
{
  return (uint64_t)this + 40;
}

void sub_188691BD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_188691CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_188691DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1886920C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_1886922BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t geo::codec::decodeIntCompressorArray<unsigned short>(_QWORD *a1, uint64_t *a2, char a3, char a4, unint64_t a5, uint16x8_t *a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;

  v17 = 0;
  if (!a2)
    return 0;
  result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v17);
  if ((_DWORD)result)
  {
    v13 = v17;
    v14 = a1[6];
    v15 = v14 + v17;
    if (v15 <= a1[7])
    {
      v16 = (unsigned __int8 *)(a1[5] + v14);
      a1[6] = v15;
      return mgcl::ints::IntDecompressor<unsigned short>::decompress(a2, v16, v13, a3, a4, a5, a6) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::decodeIntCompressorArray<unsigned short>(_QWORD *a1, uint64_t *a2, char a3, char a4, uint64_t a5)
{
  uint16x8_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;

  v5 = *(uint16x8_t **)a5;
  v6 = *(_QWORD *)(a5 + 8);
  v16 = 0;
  if (!a2)
    return 0;
  result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v16);
  if ((_DWORD)result)
  {
    v12 = v16;
    v13 = a1[6];
    v14 = v13 + v16;
    if (v14 <= a1[7])
    {
      v15 = (unsigned __int8 *)(a1[5] + v13);
      a1[6] = v14;
      return mgcl::ints::IntDecompressor<unsigned short>::decompress(a2, v15, v12, a3, a4, (v6 - (uint64_t)v5) >> 1, v5) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mgcl::ints::IntDecompressor<unsigned short>::decompress(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, char a4, char a5, unint64_t a6, uint16x8_t *a7)
{
  size_t v12;
  uint64_t result;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD **v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  BOOL v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  size_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  size_t v60;
  size_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  int v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD **v80;
  _QWORD *v81;
  _QWORD *v82;
  void *v83;
  void *v84;
  unsigned int v85;
  unsigned __int8 *v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  size_t v92;
  unsigned __int8 *v93;
  unint64_t v94;
  uint64_t v95;
  size_t v96;
  size_t v97;
  char *v98;
  char *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  _BYTE *v102;
  unint64_t v103;
  char *v104;
  _BYTE *v105;
  unsigned __int8 *v106;
  char *v107;
  char *v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  size_t v113;
  char v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  int v119;
  unint64_t v120;
  __int16 v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  unsigned int v127;
  int v128;
  int v129;
  unint64_t v130;
  uint64_t v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  char *v134;
  size_t v135;
  unsigned __int8 *v136;
  unint64_t v137;
  uint64_t v138;
  size_t v139;
  size_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  _BYTE *v146;
  unint64_t v147;
  char *v148;
  _BYTE *v149;
  unsigned __int8 *v150;
  char *v151;
  char *v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  unint64_t v157;
  uint64_t v158;
  unsigned __int8 *v159;
  int v160;
  uint64_t *v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  unsigned int v165;
  int v166;
  int v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  unint64_t v172;
  uint64_t *v173;
  size_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  size_t v178;
  size_t v179;
  uint64_t *v180;
  char *v181;
  char *v182;
  size_t v183;
  uint64_t *v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  size_t v189;
  unsigned int v190;
  size_t v191;
  char *v192;
  char *v193;
  _BYTE *v194;
  int v195;
  int v196;
  int v197;
  int v198;
  uint64_t i;
  int v200;
  uint64_t v201;
  uint64_t v202;
  __int16 v203;
  unint64_t v204;
  _BYTE *v205;
  int v206;
  int v207;
  int v208;
  int v209;
  uint64_t j;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  int v216;
  char v217;
  unsigned int v218;
  uint64_t v219;
  int v220;
  int v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unsigned int v225;
  int v226;
  uint64_t v227;
  BOOL v228;
  int v229;
  char v230;
  int v231;
  char v232;
  char v233;
  unsigned int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  unsigned __int8 *v239;
  int v240;
  unsigned int v241;
  uint64_t v242;
  char v243;
  int v244;
  char v245;
  unsigned int v246;
  uint64_t v247;
  int v248;
  int v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unsigned int v253;
  int v254;
  uint64_t v255;
  char v256;
  int v257;
  char v258;
  char v259;
  unsigned int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  char *v265;
  int v266;
  BOOL v267;
  unsigned int v268;
  char *v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  uint16x8_t *v277;
  unint64_t v278;
  int v279;
  unint64_t v280;
  uint64_t v281;
  char *v282;
  unint64_t v283;
  unint64_t v284;
  unsigned int v285;
  int v286;
  unsigned int v287;
  int v288;
  int v289;
  uint16x8_t *v290;
  char *v291;
  char *v292;
  unint64_t v293;
  unint64_t v294;
  char *v295;
  unint64_t v296;
  char *v297;
  _OWORD *v298;
  unsigned __int8 *v299;
  unint64_t v300;
  __int128 v301;
  _QWORD *v302;
  unsigned __int8 *v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  _OWORD *v309;
  unsigned __int8 *v310;
  unint64_t v311;
  __int128 v312;
  _QWORD *v313;
  unsigned __int8 *v314;
  unint64_t v315;
  uint64_t v316;
  char *v317;
  char *v318;
  unint64_t v319;
  __int128 v320;
  char *v321;
  char *v322;
  unint64_t v323;
  uint64_t v324;
  char *v325;
  char *v326;
  unint64_t v327;
  __int128 v328;
  char *v329;
  char *v330;
  unint64_t v331;
  uint64_t v332;
  char *v333;
  char *v334;
  unint64_t v335;
  __int128 v336;
  char *v337;
  char *v338;
  unint64_t v339;
  uint64_t v340;
  char *v341;
  char *v342;
  unint64_t v343;
  __int128 v344;
  char *v345;
  char *v346;
  unint64_t v347;
  uint64_t v348;
  char *v349;
  char *v350;
  unint64_t v351;
  __int128 v352;
  char *v353;
  char *v354;
  unint64_t v355;
  uint64_t v356;
  char *v357;
  char v358;
  uint64_t *v359;
  uint16x8_t *v360;
  unint64_t v361;
  uint64_t v362;
  __int16 v363;
  const char *v364;
  char *v365;
  char v366;
  uint64_t *v367;
  uint16x8_t *v368;
  unint64_t v369;
  uint64_t v370;
  const char *v371;
  char *v372;
  char v373;
  unsigned __int8 *v374;
  uint64_t *v375;
  char v376;
  char v377;
  uint64_t v378;
  uint16x8_t *v379;
  unint64_t v380;
  unsigned int v381;
  char *v382;
  char v383;
  int v384;
  uint64_t v385;
  uint64_t *v386;
  char v387;
  char v388;
  uint64_t v389;
  int8x16_t v390;
  unint64_t v391;
  uint64x2_t v392;
  unint64_t v393;
  uint64_t *v394;
  int16x8_t *v395;
  unint64_t v396;
  uint64_t v397;
  uint32x4_t v398;
  uint32x4_t v399;
  uint16x8_t v400;
  uint32x4_t v401;
  int8x16_t v402;
  int8x16_t v403;
  int8x16_t v404;
  uint32x4_t v405;
  int8x16_t v406;
  int8x16_t v407;
  unint64_t v408;
  uint16x8_t *v409;
  int8x16_t *v410;
  int8x16_t v411;
  uint32x4_t v412;
  uint32x4_t v413;
  uint32x4_t v414;
  uint32x4_t v415;
  uint16x8_t v416;
  int8x16_t v417;
  int32x2_t v418;
  int8x16_t v419;
  int32x2_t v420;
  int8x16_t v421;
  int32x2_t v422;
  int8x16_t v423;
  int32x2_t v424;
  int32x2_t v425;
  int8x16_t v426;
  int8x16_t v427;
  int8x16_t v428;
  int32x2_t v429;
  int8x16_t v430;
  int8x16_t v431;
  int32x2_t v432;
  int8x16_t v433;
  int8x16_t v434;
  int32x2_t v435;
  int8x16_t v436;
  int8x16_t v437;
  unint64_t v438;
  char *v439;
  char *v440;
  char v441;
  char *v442;
  char v443;
  int32x4_t *v444;
  uint64_t *v445;
  char v446;
  char v447;
  uint64_t v448;
  uint16x8_t *v449;
  unint64_t v450;
  __int32 v451;
  __int16 v452;
  char *v453;
  char *v454;
  char *v455;
  char *v456;
  char *v457;
  size_t v458;
  unsigned int v459;
  char *v460;
  unsigned int v461;
  int v462;
  unsigned int v463;
  char *v464;
  int v465;
  int v466;
  char *v467;
  char *v468;
  char *v469;
  char *v470;
  BOOL v471;
  unint64_t v472;
  char *v473;
  int v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t __sz;
  size_t v480;
  uint64_t v481;
  uint64_t *v482;
  unsigned __int8 *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  __int128 v488;
  uint64_t v489;
  __int16 v490;
  char v491;
  int v492;
  char v493;
  char v494;
  uint64_t v495;
  uint64_t v496;
  _BYTE __dst[65];
  uint64_t v498;

  v498 = *MEMORY[0x1E0C80C00];
  if (!a6)
    return 0;
  bzero(a7, 2 * a6);
  v12 = *a2;
  if ((v12 - 66) < 0xFFFFFFBF)
    return 3;
  if (v12 <= 0x40)
    v14 = 65 - v12;
  else
    v14 = 0;
  bzero(&__dst[v12], v14);
  v15 = a6;
  memcpy(__dst, a2 + 1, v12);
  v16 = 0;
  v17 = v12 + 1;
  __sz = 8 * a6;
  v475 = 4 * a6;
  v476 = a3 - 1;
  v474 = a3 - 1;
  v481 = 8 * a3 - 24;
  v482 = a1;
  v483 = a2;
  v480 = v12;
  while (2)
  {
    while (1)
    {
      v18 = __dst[v16];
      v19 = a2[v17];
      v20 = v17 + 1;
      v484 = v16;
      v21 = 0;
      v22 = 0;
      if (!__dst[v16])
        break;
      v23 = v17;
      v24 = 0;
      v25 = &a2[v20];
      v26 = 1;
      v485 = v23;
      v27 = v481 - 8 * v23;
      do
      {
        v28 = v26;
        v29 = v27;
        v30 = (char)v25[v22];
        v24 |= (unint64_t)(v25[v22] & 0x7F) << v21;
        if (v22 > 8)
          break;
        ++v22;
        v21 += 7;
        ++v26;
        v27 -= 8;
      }
      while (v30 < 0);
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = &a2[v485];
      do
      {
        v35 = v29;
        v36 = (char)v34[v28 + 1];
        v33 |= (unint64_t)(v34[++v28] & 0x7F) << v31;
        if (v32 > 8)
          break;
        ++v32;
        v31 += 7;
        v29 -= 8;
      }
      while (v36 < 0);
      switch(v19)
      {
        case 1:
          if (!a1[3])
          {
            v37 = (_QWORD *)operator new();
            v38 = (_QWORD *)operator new();
            v39 = operator new();
            a1 = v482;
            a2 = v483;
            *(_QWORD *)(v39 + 20) = 0;
            *(_QWORD *)(v39 + 12) = 0;
            *(_DWORD *)(v39 + 36) = 0;
            *(_QWORD *)(v39 + 28) = 0;
            *(_WORD *)(v39 + 40) = 257;
            *(_QWORD *)(v39 + 44) = 0;
            *(_QWORD *)(v39 + 60) = 0;
            *(_QWORD *)(v39 + 52) = 0;
            *(_DWORD *)(v39 + 67) = 0;
            *(_DWORD *)(v39 + 72) = 0;
            *(_WORD *)(v39 + 76) = 257;
            *(_QWORD *)(v39 + 136) = 0;
            *(_OWORD *)(v39 + 80) = 0u;
            *(_OWORD *)(v39 + 96) = 0u;
            *(_OWORD *)(v39 + 112) = 0u;
            *v38 = v39;
            *v37 = v38;
            v40 = (_QWORD **)v482[3];
            v482[3] = (uint64_t)v37;
            if (v40)
            {
              v41 = *v40;
              *v40 = 0;
              if (v41)
              {
                v42 = (_QWORD *)*v41;
                *v41 = 0;
                if (v42)
                {
                  v43 = (void *)v42[13];
                  if (v43)
                  {
                    v42[14] = v43;
                    operator delete(v43);
                  }
                  v44 = (void *)v42[10];
                  if (v44)
                  {
                    v42[11] = v44;
                    operator delete(v44);
                  }
                  MEMORY[0x18D76437C](v42, 0x1070C40ADA6D0DELL);
                }
                MEMORY[0x18D76437C](v41, 0x20C4093837F09);
                a1 = v482;
              }
              MEMORY[0x18D76437C](v40, 0x20C4093837F09);
            }
          }
          v45 = v18 == 1;
          v46 = v33 - 2;
          if (v33 < 2)
            return 3;
          v47 = &a2[v485 + v28];
          v48 = v47[1];
          v49 = v47[2];
          v50 = *a1;
          v51 = (char *)a1[1];
          v52 = &v51[-*a1];
          if (v18 != 1)
          {
            v183 = v475 - (_QWORD)v52;
            if (v475 <= (unint64_t)v52)
            {
              v184 = v482;
              v190 = a6;
              if (v475 < (unint64_t)v52)
                v482[1] = v50 + v475;
              goto LABEL_421;
            }
            v184 = v482;
            v185 = v482[2];
            if (v185 - (uint64_t)v51 >= v183)
            {
              v470 = &v51[v183];
              v269 = v51;
              v270 = v49;
              v271 = v48;
              bzero(v269, v475 - (_QWORD)v52);
              v48 = v271;
              v45 = v18 == 1;
              v49 = v270;
              v46 = v33 - 2;
              v482[1] = (uint64_t)v470;
              v190 = a6;
LABEL_421:
              v444 = (int32x4_t *)*v184;
              v445 = *(uint64_t **)v184[3];
              LODWORD(v488) = 0;
              BYTE4(v488) = a4;
              BYTE5(v488) = a5;
              WORD3(v488) = 0;
              v489 = 1;
              v490 = 0;
              v491 = v45;
              v492 = 0;
              if (v48 >= 4)
                v446 = 1;
              else
                v446 = v48;
              v493 = v446;
              if (v49 == 2)
                v447 = 4;
              else
                v447 = 1;
              if (!v49)
                v447 = 0;
              v494 = v447;
              *((_QWORD *)&v488 + 1) = __PAIR64__(v190, v46);
              v448 = *v445;
              v495 = (uint64_t)&v483[v485 + 3 + v28];
              v496 = v46;
              result = gcl::polyline::DecoderImpl::decompressAttributes(v448, (uint64_t)&v495, v444, 0, &v488);
              if ((_DWORD)result)
                goto LABEL_435;
              v449 = a7;
              v15 = a6;
              v450 = a6;
              a1 = v482;
              do
              {
                v451 = v444->i32[0];
                v444 = (int32x4_t *)((char *)v444 + 4);
                v452 = v24 + v451;
                if (v18 < 0x40)
                  v452 = ((unint64_t)v449->u16[0] << v18) | v452 & ~(-1 << v18);
                v449->i16[0] = v452;
                v449 = (uint16x8_t *)((char *)v449 + 2);
                --v450;
              }
              while (v450);
              goto LABEL_413;
            }
            v461 = v48;
            v465 = v49;
            if ((v475 & 0x8000000000000000) != 0)
LABEL_439:
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v186 = (unint64_t)v52;
            v187 = v185 - v50;
            v188 = 2 * v187;
            if (2 * v187 <= v475)
              v188 = 4 * a6;
            if (v187 >= 0x3FFFFFFFFFFFFFFFLL)
              v189 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v189 = v188;
            v458 = v189;
            v455 = (char *)operator new(v189);
            v453 = &v455[v186];
            bzero(&v455[v186], v183);
            if (v51 == (char *)v50)
            {
              v184 = v482;
              v190 = a6;
              v46 = v33 - 2;
              v49 = v465;
              v45 = v18 == 1;
              v48 = v461;
              v192 = v455;
              v191 = v458;
              v297 = v453;
              goto LABEL_419;
            }
            if (v186 < 8)
            {
              v184 = v482;
              v190 = a6;
              v46 = v33 - 2;
              v49 = v465;
              v45 = v18 == 1;
              v48 = v461;
              v192 = v455;
              v191 = v458;
              v193 = v453;
              goto LABEL_416;
            }
            v307 = v186;
            v192 = v455;
            v191 = v458;
            v184 = v482;
            v190 = a6;
            v46 = v33 - 2;
            v49 = v465;
            v45 = v18 == 1;
            v48 = v461;
            v193 = v453;
            if ((unint64_t)(v50 - (_QWORD)v455) >= 0x20)
            {
              if (v307 < 0x20)
              {
                v308 = 0;
                goto LABEL_331;
              }
              v308 = v307 & 0xFFFFFFFFFFFFFFE0;
              v349 = &v455[v307 - 16];
              v350 = v51 - 16;
              v351 = v307 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v352 = *(_OWORD *)v350;
                *((_OWORD *)v349 - 1) = *((_OWORD *)v350 - 1);
                *(_OWORD *)v349 = v352;
                v349 -= 32;
                v350 -= 32;
                v351 -= 32;
              }
              while (v351);
              if (v307 == v308)
                goto LABEL_418;
              if ((v307 & 0x18) != 0)
              {
LABEL_331:
                v193 = &v453[-(v307 & 0xFFFFFFFFFFFFFFF8)];
                v353 = &v51[-v308 - v50 - 8 + (_QWORD)v455];
                v354 = &v51[-v308 - 8];
                v355 = v308 - (v307 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v356 = *(_QWORD *)v354;
                  v354 -= 8;
                  *(_QWORD *)v353 = v356;
                  v353 -= 8;
                  v355 += 8;
                }
                while (v355);
                v51 -= v307 & 0xFFFFFFFFFFFFFFF8;
                if (v307 == (v307 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_418;
                goto LABEL_416;
              }
              v193 = &v453[-v308];
              v51 -= v308;
            }
LABEL_416:
            v442 = v193 - 1;
            do
            {
              v443 = *--v51;
              *v442-- = v443;
            }
            while (v51 != (char *)v50);
LABEL_418:
            v51 = (char *)v50;
            v297 = v192;
LABEL_419:
            *v184 = (uint64_t)v297;
            v184[1] = (uint64_t)&v192[v475];
            v184[2] = (uint64_t)&v192[v191];
            if (v51)
            {
              operator delete(v51);
              v48 = v461;
              v45 = v18 == 1;
              v49 = v465;
              v46 = v33 - 2;
            }
            goto LABEL_421;
          }
          LODWORD(v53) = a6;
          v54 = a6 - (_QWORD)v52;
          if (a6 > (unint64_t)v52)
          {
            v55 = v482;
            v56 = v482[2];
            if (v56 - (uint64_t)v51 < v54)
            {
              v459 = v48;
              v471 = v45;
              v462 = v49;
              if ((a6 & 0x8000000000000000) != 0)
                goto LABEL_439;
              v57 = (unint64_t)v52;
              v58 = v56 - v50;
              v59 = 2 * v58;
              if (2 * v58 <= a6)
                v59 = a6;
              if (v58 >= 0x3FFFFFFFFFFFFFFFLL)
                v60 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v60 = v59;
              v456 = (char *)operator new(v60);
              v454 = &v456[v57];
              bzero(&v456[v57], v54);
              v61 = v60;
              if (v51 == (char *)v50)
              {
                v55 = v482;
                v53 = a6;
                v46 = v33 - 2;
                v49 = v462;
                v45 = v471;
                v48 = v459;
                v295 = &v456[v57];
                v62 = v456;
                goto LABEL_388;
              }
              if (v57 < 8)
              {
                v55 = v482;
                v53 = a6;
                v46 = v33 - 2;
                v49 = v462;
                v45 = v471;
                v48 = v459;
                v63 = &v456[v57];
                v62 = v456;
                goto LABEL_385;
              }
              v63 = &v456[v57];
              v62 = v456;
              v55 = v482;
              v53 = a6;
              v46 = v33 - 2;
              v49 = v462;
              v45 = v471;
              v48 = v459;
              if ((unint64_t)(v50 - (_QWORD)v456) >= 0x20)
              {
                if (v57 < 0x20)
                {
                  v306 = 0;
                  goto LABEL_323;
                }
                v306 = v57 & 0xFFFFFFFFFFFFFFE0;
                v341 = &v456[v57 - 16];
                v342 = v51 - 16;
                v343 = v57 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v344 = *(_OWORD *)v342;
                  *((_OWORD *)v341 - 1) = *((_OWORD *)v342 - 1);
                  *(_OWORD *)v341 = v344;
                  v341 -= 32;
                  v342 -= 32;
                  v343 -= 32;
                }
                while (v343);
                if (v57 == v306)
                  goto LABEL_387;
                if ((v57 & 0x18) != 0)
                {
LABEL_323:
                  v63 = &v454[-(v57 & 0xFFFFFFFFFFFFFFF8)];
                  v345 = &v51[-v306 - v50 - 8 + (_QWORD)v456];
                  v346 = &v51[-v306 - 8];
                  v347 = v306 - (v57 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v348 = *(_QWORD *)v346;
                    v346 -= 8;
                    *(_QWORD *)v345 = v348;
                    v345 -= 8;
                    v347 += 8;
                  }
                  while (v347);
                  v51 -= v57 & 0xFFFFFFFFFFFFFFF8;
                  if (v57 == (v57 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_387;
                  goto LABEL_385;
                }
                v63 = &v454[-v306];
                v51 -= v306;
              }
LABEL_385:
              v382 = v63 - 1;
              do
              {
                v383 = *--v51;
                *v382-- = v383;
              }
              while (v51 != (char *)v50);
LABEL_387:
              v51 = (char *)v50;
              v295 = v62;
LABEL_388:
              *v55 = (uint64_t)v295;
              v55[1] = (uint64_t)&v62[v53];
              v55[2] = (uint64_t)&v62[v61];
              if (v51)
              {
                v384 = v53;
                operator delete(v51);
                LODWORD(v53) = v384;
                v48 = v459;
                v45 = v471;
                v49 = v462;
                v46 = v33 - 2;
              }
              goto LABEL_390;
            }
            v469 = &v51[v54];
            v265 = v51;
            v266 = v49;
            v267 = v45;
            v268 = v48;
            bzero(v265, a6 - (_QWORD)v52);
            LODWORD(v53) = a6;
            v48 = v268;
            v45 = v267;
            v49 = v266;
            v46 = v33 - 2;
            v204 = (unint64_t)v469;
            goto LABEL_231;
          }
          v55 = v482;
          if (a6 < (unint64_t)v52)
          {
            v204 = v50 + a6;
LABEL_231:
            v55[1] = v204;
          }
LABEL_390:
          v385 = *v55;
          v386 = *(uint64_t **)v55[3];
          LODWORD(v488) = 0;
          BYTE4(v488) = a4;
          BYTE5(v488) = a5;
          WORD3(v488) = 0;
          v489 = 1;
          v490 = 0;
          v491 = v45;
          v492 = 0;
          if (v48 >= 4)
            v387 = 1;
          else
            v387 = v48;
          v493 = v387;
          if (v49 == 2)
            v388 = 4;
          else
            v388 = 1;
          if (!v49)
            v388 = 0;
          v494 = v388;
          *((_QWORD *)&v488 + 1) = __PAIR64__(v53, v46);
          v389 = *v386;
          v495 = (uint64_t)&v483[v485 + 3 + v28];
          v496 = v46;
          result = gcl::polyline::DecoderImpl::decompressAttributes(v389, (uint64_t)&v495, v385, 0, &v488);
          if ((_DWORD)result)
            goto LABEL_435;
          v15 = a6;
          if (a6 < 8)
          {
            v391 = 0;
            a1 = v482;
LABEL_411:
            v438 = a6 - v391;
            v439 = &a7->i8[2 * v391];
            v440 = (char *)(v385 + v391);
            do
            {
              v441 = *v440++;
              *(_WORD *)v439 = ((_BYTE)v24 + v441) & 1 | (2 * *(_WORD *)v439);
              v439 += 2;
              --v438;
            }
            while (v438);
            goto LABEL_413;
          }
          v392 = (uint64x2_t)vdupq_n_s64(v24);
          a1 = v482;
          if (a6 >= 0x10)
          {
            v408 = a6 & 0xFFFFFFFFFFFFFFF0;
            v409 = a7;
            v410 = (int8x16_t *)v385;
            do
            {
              v411 = *v410++;
              v412 = (uint32x4_t)vqtbl1q_s8(v411, (int8x16_t)xmmword_189CFB5C0);
              v413 = (uint32x4_t)vqtbl1q_s8(v411, (int8x16_t)xmmword_189CFB5D0);
              v414 = (uint32x4_t)vqtbl1q_s8(v411, (int8x16_t)xmmword_189CFB5A0);
              v415 = (uint32x4_t)vqtbl1q_s8(v411, (int8x16_t)xmmword_189CFB5B0);
              v416 = v409[1];
              v417 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v409->i8);
              v418 = (int32x2_t)vextq_s8(v417, v417, 8uLL).u64[0];
              v419 = (int8x16_t)vmovl_high_u16(*v409);
              v420 = (int32x2_t)vextq_s8(v419, v419, 8uLL).u64[0];
              v421 = (int8x16_t)vmovl_high_u16(v416);
              v422 = (int32x2_t)vextq_s8(v421, v421, 8uLL).u64[0];
              v423 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v416.i8);
              v424 = (int32x2_t)vextq_s8(v423, v423, 8uLL).u64[0];
              v425 = vadd_s32(v424, v424);
              v426.i64[0] = v425.u32[0];
              v426.i64[1] = v425.u32[1];
              v427 = v426;
              *(int32x2_t *)v423.i8 = vadd_s32(*(int32x2_t *)v423.i8, *(int32x2_t *)v423.i8);
              v426.i64[0] = v423.u32[0];
              v426.i64[1] = v423.u32[1];
              v428 = v426;
              v429 = vadd_s32(v422, v422);
              v426.i64[0] = v429.u32[0];
              v426.i64[1] = v429.u32[1];
              v430 = v426;
              *(int32x2_t *)v421.i8 = vadd_s32(*(int32x2_t *)v421.i8, *(int32x2_t *)v421.i8);
              v426.i64[0] = v421.u32[0];
              v426.i64[1] = v421.u32[1];
              v431 = v426;
              v432 = vadd_s32(v420, v420);
              v426.i64[0] = v432.u32[0];
              v426.i64[1] = v432.u32[1];
              v433 = v426;
              *(int32x2_t *)v419.i8 = vadd_s32(*(int32x2_t *)v419.i8, *(int32x2_t *)v419.i8);
              v426.i64[0] = v419.u32[0];
              v426.i64[1] = v419.u32[1];
              v434 = v426;
              v435 = vadd_s32(v418, v418);
              v426.i64[0] = v435.u32[0];
              v426.i64[1] = v435.u32[1];
              v436 = v426;
              *(int32x2_t *)v417.i8 = vadd_s32(*(int32x2_t *)v417.i8, *(int32x2_t *)v417.i8);
              v426.i64[0] = v417.u32[0];
              v426.i64[1] = v417.u32[1];
              v437 = (int8x16_t)vdupq_n_s64(1uLL);
              v390 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8(v428, vandq_s8((int8x16_t)vaddw_u32(v392, *(uint32x2_t *)v415.i8), v437)), (int32x4_t)vorrq_s8(v427, vandq_s8((int8x16_t)vaddw_high_u32(v392, v415), v437))), (int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8(v431, vandq_s8((int8x16_t)vaddw_u32(v392, *(uint32x2_t *)v414.i8), v437)), (int32x4_t)vorrq_s8(v430, vandq_s8((int8x16_t)vaddw_high_u32(v392, v414), v437))));
              *(int16x8_t *)v409 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8(v426, vandq_s8((int8x16_t)vaddw_u32(v392, *(uint32x2_t *)v412.i8), v437)), (int32x4_t)vorrq_s8(v436, vandq_s8((int8x16_t)vaddw_high_u32(v392, v412), v437))), (int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8(v434, vandq_s8((int8x16_t)vaddw_u32(v392, *(uint32x2_t *)v413.i8), v437)), (int32x4_t)vorrq_s8(v433, vandq_s8((int8x16_t)vaddw_high_u32(v392, v413), v437))));
              v409[1] = (uint16x8_t)v390;
              v409 += 2;
              v408 -= 16;
            }
            while (v408);
            if ((a6 & 0xFFFFFFFFFFFFFFF0) == a6)
              goto LABEL_413;
            v391 = a6 & 0xFFFFFFFFFFFFFFF0;
            v393 = a6 & 0xFFFFFFFFFFFFFFF0;
            if ((a6 & 8) == 0)
              goto LABEL_411;
          }
          else
          {
            v393 = 0;
          }
          v394 = (uint64_t *)(v385 + v393);
          v395 = (int16x8_t *)((char *)a7 + 2 * v393);
          v396 = v393 - (a6 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v397 = *v394++;
            v390.i64[0] = v397;
            v398 = (uint32x4_t)vqtbl1q_s8(v390, (int8x16_t)xmmword_189CFB5C0);
            v399 = (uint32x4_t)vqtbl1q_s8(v390, (int8x16_t)xmmword_189CFB5D0);
            v400 = (uint16x8_t)vaddq_s16(*v395, *v395);
            v401 = vmovl_high_u16(v400);
            v402.i64[0] = v401.u32[0];
            v402.i64[1] = v401.u32[1];
            v403 = v402;
            v402.i64[0] = v401.u32[2];
            v402.i64[1] = v401.u32[3];
            v404 = v402;
            v405 = vmovl_u16(*(uint16x4_t *)v400.i8);
            v402.i64[0] = v405.u32[0];
            v402.i64[1] = v405.u32[1];
            v406 = v402;
            v402.i64[0] = v405.u32[2];
            v402.i64[1] = v405.u32[3];
            v407 = (int8x16_t)vdupq_n_s64(1uLL);
            v390 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8(v406, vandq_s8((int8x16_t)vaddw_u32(v392, *(uint32x2_t *)v398.i8), v407)), (int32x4_t)vorrq_s8(v402, vandq_s8((int8x16_t)vaddw_high_u32(v392, v398), v407))), (int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8(v403, vandq_s8((int8x16_t)vaddw_u32(v392, *(uint32x2_t *)v399.i8), v407)), (int32x4_t)vorrq_s8(v404, vandq_s8((int8x16_t)vaddw_high_u32(v392, v399), v407))));
            *v395++ = (int16x8_t)v390;
            v396 += 8;
          }
          while (v396);
          v391 = a6 & 0xFFFFFFFFFFFFFFF8;
          if ((a6 & 0xFFFFFFFFFFFFFFF8) != a6)
            goto LABEL_411;
LABEL_413:
          v17 = v485 + v33 + v28 + 1;
          a2 = v483;
          v16 = v484 + 1;
          if (v484 + 1 == v480)
            return 0;
          continue;
        case 2:
          v132 = (unsigned __int8 *)*a1;
          v133 = (unsigned __int8 *)a1[1];
          v134 = (char *)&v133[-*a1];
          v135 = __sz - (_QWORD)v134;
          if (__sz > (unint64_t)v134)
          {
            v136 = (unsigned __int8 *)a1[2];
            if (v136 - v133 >= v135)
            {
              bzero((void *)a1[1], __sz - (_QWORD)v134);
              a1[1] = (uint64_t)&v133[v135];
              v141 = a6;
              goto LABEL_343;
            }
            v472 = (unint64_t)&v133[-*a1];
            if ((__sz & 0x8000000000000000) != 0)
              goto LABEL_439;
            v137 = v136 - v132;
            v138 = 2 * v137;
            if (2 * v137 <= __sz)
              v138 = 8 * a6;
            if (v137 >= 0x3FFFFFFFFFFFFFFFLL)
              v139 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v139 = v138;
            v467 = (char *)operator new(v139);
            v464 = &v467[v472];
            bzero(&v467[v472], v135);
            v140 = v139;
            if (v133 == v132)
            {
              a1 = v482;
              v141 = a6;
              v282 = &v467[v472];
              v142 = v467;
              goto LABEL_341;
            }
            if (v472 < 8)
            {
              a1 = v482;
              v141 = a6;
              v143 = &v467[v472];
              v142 = v467;
              goto LABEL_338;
            }
            v143 = &v467[v472];
            v142 = v467;
            a1 = v482;
            v141 = a6;
            if ((unint64_t)(v132 - (unsigned __int8 *)v467) >= 0x20)
            {
              if (v472 < 0x20)
              {
                v284 = 0;
                goto LABEL_299;
              }
              v284 = v472 & 0xFFFFFFFFFFFFFFE0;
              v317 = &v467[v472 - 16];
              v318 = (char *)(v133 - 16);
              v319 = v472 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v320 = *(_OWORD *)v318;
                *((_OWORD *)v317 - 1) = *((_OWORD *)v318 - 1);
                *(_OWORD *)v317 = v320;
                v317 -= 32;
                v318 -= 32;
                v319 -= 32;
              }
              while (v319);
              if (v472 == v284)
                goto LABEL_340;
              if ((v472 & 0x18) != 0)
              {
LABEL_299:
                v143 = &v464[-(v472 & 0xFFFFFFFFFFFFFFF8)];
                v321 = &v467[&v133[-v284] - v132 - 8];
                v322 = (char *)&v133[-v284 - 8];
                v323 = v284 - (v472 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v324 = *(_QWORD *)v322;
                  v322 -= 8;
                  *(_QWORD *)v321 = v324;
                  v321 -= 8;
                  v323 += 8;
                }
                while (v323);
                v133 -= v472 & 0xFFFFFFFFFFFFFFF8;
                if (v472 == (v472 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_340;
                goto LABEL_338;
              }
              v143 = &v464[-v284];
              v133 -= v284;
            }
LABEL_338:
            v357 = v143 - 1;
            do
            {
              v358 = *--v133;
              *v357-- = v358;
            }
            while (v133 != v132);
LABEL_340:
            v133 = v132;
            v282 = v142;
LABEL_341:
            *a1 = (uint64_t)v282;
            a1[1] = (uint64_t)&v142[__sz];
            a1[2] = (uint64_t)&v142[v140];
            if (v133)
              operator delete(v133);
            goto LABEL_343;
          }
          v141 = a6;
          if (__sz < (unint64_t)v134)
            a1[1] = (uint64_t)&v132[__sz];
LABEL_343:
          v359 = (uint64_t *)*a1;
          result = mgcl::muid::decompress((mgcl::muid *)&v483[v485 + 1 + v28], (const char *)v33, 0, 0, *a1, (unint64_t *)8, v141);
          if ((_DWORD)result)
            return result;
          v360 = a7;
          a2 = v483;
          v15 = a6;
          v361 = a6;
          do
          {
            v362 = *v359++;
            v363 = v362 + v24;
            if (v18 < 0x40)
              v363 = ((unint64_t)v360->u16[0] << v18) | v363 & ~(-1 << v18);
            v360->i16[0] = v363;
            v360 = (uint16x8_t *)((char *)v360 + 2);
            --v361;
          }
          while (v361);
          v364 = (const char *)(v485 + v33 + v28);
          goto LABEL_382;
        case 3:
          v101 = (unsigned __int8 *)*a1;
          v100 = (unsigned __int8 *)a1[1];
          if (v100 != (unsigned __int8 *)*a1)
          {
            a1[1] = (uint64_t)v101;
            v100 = v101;
          }
          if (a1[2] - (uint64_t)v101 >= __sz)
            goto LABEL_83;
          if ((__sz & 0x8000000000000000) != 0)
            goto LABEL_439;
          v102 = operator new(__sz);
          v103 = v100 - v101;
          v104 = &v102[v100 - v101];
          v105 = v104;
          a1 = v482;
          a2 = v483;
          v15 = a6;
          if (v100 == v101)
            goto LABEL_81;
          v105 = v102;
          if (v103 < 8 || (unint64_t)(v101 - v102) < 0x20)
          {
            v106 = v100;
            v107 = &v102[v100 - v101];
            goto LABEL_79;
          }
          if (v103 >= 0x20)
          {
            v283 = v103 & 0xFFFFFFFFFFFFFFE0;
            v298 = &v102[v103 - 16];
            v299 = v100 - 16;
            v300 = v103 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v301 = *(_OWORD *)v299;
              *(v298 - 1) = *((_OWORD *)v299 - 1);
              *v298 = v301;
              v298 -= 2;
              v299 -= 32;
              v300 -= 32;
            }
            while (v300);
            if (v103 == v283)
              goto LABEL_81;
            if ((v103 & 0x18) == 0)
            {
              v107 = &v104[-v283];
              v106 = &v100[-v283];
LABEL_79:
              v108 = v107 - 1;
              do
              {
                v109 = *--v106;
                *v108-- = v109;
              }
              while (v106 != v101);
              goto LABEL_81;
            }
          }
          else
          {
            v283 = 0;
          }
          v106 = &v100[-(v103 & 0xFFFFFFFFFFFFFFF8)];
          v107 = &v104[-(v103 & 0xFFFFFFFFFFFFFFF8)];
          v302 = &v102[&v100[-v283] - v101 - 8];
          v303 = &v100[-v283 - 8];
          v304 = v283 - (v103 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v305 = *(_QWORD *)v303;
            v303 -= 8;
            *v302-- = v305;
            v304 += 8;
          }
          while (v304);
          if (v103 != (v103 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_79;
LABEL_81:
          *v482 = (uint64_t)v105;
          v482[1] = (uint64_t)v104;
          v482[2] = (uint64_t)&v102[__sz];
          if (v101)
            operator delete(v101);
LABEL_83:
          v110 = 0;
          v111 = v484;
          v112 = v485 + v28 + 1;
          v113 = v480;
          do
          {
            while (1)
            {
              v114 = 0;
              v115 = 0;
              v116 = 0;
              v117 = v112;
              v118 = &a2[v112];
              do
              {
                v119 = (char)v118[v115];
                v116 |= (unint64_t)(v118[v115] & 0x7F) << v114;
                v120 = v115 + 1;
                if (v115 > 8)
                  break;
                v114 += 7;
                ++v115;
              }
              while (v119 < 0);
              v121 = v116 + v24;
              if (v18 >= 0x40)
                break;
              a7->i16[v110] = ((unint64_t)a7->u16[v110] << v18) | v121 & ~(-1 << v18);
              v112 = v117 + v120;
              if (++v110 == v15)
                goto LABEL_8;
            }
            a7->i16[v110] = v121;
            v112 = v117 + v120;
            ++v110;
          }
          while (v110 != v15);
          goto LABEL_8;
        case 4:
          v122 = (uint64_t *)operator new();
          v123 = v122;
          v124 = v476 - v485 - v28;
          a2 = v483;
          *v122 = (uint64_t)&v483[v485 + 1 + v28];
          v122[1] = v124;
          v122[2] = 0;
          v125 = 8 * v124;
          if (!v125)
          {
            v130 = 0;
            v15 = a6;
            goto LABEL_96;
          }
          v126 = (char *)*v122;
          v127 = *(unsigned __int8 *)*v122;
          v122[2] = 1;
          v128 = (v127 >> 6) & 2 | (*v126 >> 6) & 1;
          v122[2] = 2;
          v129 = (*v126 >> 5) & 1 | (2 * v128);
          v122[2] = 3;
          v15 = a6;
          if (v129 != 2)
          {
            if (v129 != 1)
            {
              v130 = 3;
              if (v129)
                goto LABEL_438;
              if (v125 >= 8)
              {
                v194 = (_BYTE *)*v122;
                v195 = *(unsigned __int8 *)*v122 >> 4;
                v122[2] = 4;
                v196 = (*v194 >> 3) & 1 | (2 * (v195 & 1));
                v122[2] = 5;
                v197 = *v194 >> 2;
                v122[2] = 6;
                v198 = (4 * v196) | (2 * (v197 & 1)) | (*v194 >> 1) & 1;
                v122[2] = 7;
                LODWORD(v194) = *v194 & 1;
                v122[2] = 8;
                v131 = (v194 | (2 * v198)) + 1;
                v130 = 8;
LABEL_159:
                a1 = v482;
                for (i = 0; i != v15; ++i)
                {
                  while (1)
                  {
                    if (v130 + v131 <= v125)
                    {
                      v200 = 0;
                      v201 = *v122;
                      v202 = v131;
                      do
                      {
                        v200 = (*(unsigned __int8 *)(v201 + (v130 >> 3)) >> (~(_BYTE)v130 & 7)) & 1 | (2 * v200);
                        v122[2] = ++v130;
                        --v202;
                      }
                      while (v202);
                    }
                    else
                    {
                      LOWORD(v200) = 0;
                    }
                    v203 = v200 + v24;
                    if (v18 >= 0x40)
                      break;
                    a7->i16[i] = ((unint64_t)a7->u16[i] << v18) | v203 & ~(-1 << v18);
                    if (++i == v15)
                      goto LABEL_240;
                  }
                  a7->i16[i] = v203;
                }
                goto LABEL_240;
              }
LABEL_96:
              v131 = 1;
              goto LABEL_159;
            }
            v214 = 0;
            v215 = *v126;
            v122[2] = 4;
            v216 = v215 & 0x10 | *v126 & 0xF;
            v122[2] = 5;
            v217 = *v126;
            v122[2] = 6;
            v218 = v216 & 0xFFFFFFF8 | v217 & 4 | *v126 & 3;
            v122[2] = 7;
            v219 = v218 & 0xFFFFFFFE | *v126 & 1;
            v122[2] = 8;
            v130 = 8;
            a1 = v482;
            while (2)
            {
              if (v130 + 1 <= v125)
              {
                v222 = 0;
                v220 = 8 * (v474 - v485 - v28) - v130;
                v223 = v35 - v130;
                while (1)
                {
                  v224 = v130++;
                  v225 = v126[v224 >> 3];
                  v123[2] = v130;
                  if (((v225 >> (~(_BYTE)v224 & 7)) & 1) == 0)
                    break;
                  if (v223 == ++v222)
                  {
                    v130 = v224 + 1;
                    v221 = 0;
                    if ((_DWORD)v219)
                      goto LABEL_198;
                    goto LABEL_202;
                  }
                }
                v220 = v222;
                v130 = v224 + 1;
                v221 = 0;
                if (!(_DWORD)v219)
                  goto LABEL_202;
              }
              else
              {
                v220 = 0;
                v221 = 0;
                if (!(_DWORD)v219)
                  goto LABEL_202;
              }
LABEL_198:
              if (v130 + v219 <= v125)
              {
                v226 = 0;
                v227 = -v219;
                do
                {
                  v221 = (v126[v130 >> 3] >> (~(_BYTE)v130 & 7)) & 1 | (2 * v226);
                  v123[2] = ++v130;
                  v226 = v221;
                  v228 = __CFADD__(v227++, 1);
                }
                while (!v228);
              }
LABEL_202:
              v229 = v24 + (v221 | (v220 << v219));
              if (v18 < 0x40)
              {
                a7->i16[v214] = ((unint64_t)a7->u16[v214] << v18) | v229 & ~(-1 << v18);
                if (++v214 == a6)
                  goto LABEL_240;
              }
              else
              {
                a7->i16[v214++] = v229;
                if (v214 == a6)
                  goto LABEL_240;
              }
              continue;
            }
          }
          v230 = *v126;
          v122[2] = 4;
          v231 = v230 & 0x10 | *v126 & 0xF;
          v122[2] = 5;
          v232 = *v126;
          v122[2] = 6;
          v233 = *v126;
          v122[2] = 7;
          v234 = v231 & 0xFFFFFFF8 | v232 & 4 | v233 & 2 | *v126 & 1;
          v122[2] = 8;
          LODWORD(v488) = v234;
          if (v125 >= 0xD)
          {
            v272 = v126[1];
            v122[2] = 9;
            v273 = (v272 >> 6) & 2 | (v126[1] >> 6) & 1;
            v122[2] = 10;
            v274 = v126[1];
            v122[2] = 11;
            v275 = (4 * v273) | (v274 >> 4) & 2 | (v126[1] >> 4) & 1;
            v122[2] = 12;
            v276 = (2 * v275) | (v126[1] >> 3) & 1;
            v122[2] = 13;
            DWORD1(v488) = v276;
            if (v125 >= 0x12)
            {
              v235 = v126[1] >> 2;
              v122[2] = 14;
              v236 = (v126[1] >> 1) & 1 | (2 * (v235 & 1));
              v122[2] = 15;
              LOBYTE(v235) = v126[1];
              v122[2] = 16;
              v237 = (4 * v236) | (2 * (v235 & 1)) | (v126[2] >> 7) & 1;
              v122[2] = 17;
              v238 = (v126[2] >> 6) & 1 | (2 * v237);
              v122[2] = 18;
              goto LABEL_235;
            }
          }
          else
          {
            DWORD1(v488) = 0;
          }
          v238 = 0;
LABEL_235:
          DWORD2(v488) = v238;
          v277 = a7;
          v278 = a6;
          do
          {
            v279 = v24 + geo::ReadBitstream::unpackRice2(v123, &v488);
            if (v18 < 0x40)
              LOWORD(v279) = ((unint64_t)v277->u16[0] << v18) | v279 & ~(-1 << v18);
            v277->i16[0] = v279;
            v277 = (uint16x8_t *)((char *)v277 + 2);
            --v278;
          }
          while (v278);
          v130 = v123[2];
          a1 = v482;
          v15 = a6;
LABEL_240:
          v280 = v130 >> 3;
          if ((v130 & 7) != 0)
            ++v280;
          v281 = v485 + v28;
LABEL_259:
          v17 = v281 + v280 + 1;
          MEMORY[0x18D76437C](v123, 0x1050C40E4AAA758);
          v16 = v484 + 1;
          if (v484 + 1 == v480)
            return 0;
          break;
        default:
          return 3;
      }
    }
    v64 = 0;
    v65 = &a2[v20];
    v66 = 1;
    v67 = v481 - 8 * v17;
    do
    {
      v68 = v66;
      v69 = v67;
      v70 = (char)v65[v22];
      v64 |= (unint64_t)(v65[v22] & 0x7F) << v21;
      if (v22 > 8)
        break;
      ++v22;
      v21 += 7;
      ++v66;
      v67 -= 8;
    }
    while (v70 < 0);
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v74 = &a2[v17];
    do
    {
      v75 = v69;
      v76 = (char)v74[v68 + 1];
      v73 |= (unint64_t)(v74[++v68] & 0x7F) << v71;
      if (v72 > 8)
        break;
      ++v72;
      v71 += 7;
      v69 -= 8;
    }
    while (v76 < 0);
    switch(a2[v17])
    {
      case 1u:
        if (!a1[3])
        {
          v77 = (_QWORD *)operator new();
          v78 = (_QWORD *)operator new();
          v79 = operator new();
          a1 = v482;
          a2 = v483;
          *(_QWORD *)(v79 + 20) = 0;
          *(_QWORD *)(v79 + 12) = 0;
          *(_DWORD *)(v79 + 36) = 0;
          *(_QWORD *)(v79 + 28) = 0;
          *(_WORD *)(v79 + 40) = 257;
          *(_QWORD *)(v79 + 44) = 0;
          *(_QWORD *)(v79 + 60) = 0;
          *(_QWORD *)(v79 + 52) = 0;
          *(_DWORD *)(v79 + 67) = 0;
          *(_DWORD *)(v79 + 72) = 0;
          *(_WORD *)(v79 + 76) = 257;
          *(_QWORD *)(v79 + 136) = 0;
          *(_OWORD *)(v79 + 80) = 0u;
          *(_OWORD *)(v79 + 96) = 0u;
          *(_OWORD *)(v79 + 112) = 0u;
          *v78 = v79;
          *v77 = v78;
          v80 = (_QWORD **)v482[3];
          v482[3] = (uint64_t)v77;
          if (v80)
          {
            v81 = *v80;
            *v80 = 0;
            if (v81)
            {
              v82 = (_QWORD *)*v81;
              *v81 = 0;
              if (v82)
              {
                v83 = (void *)v82[13];
                if (v83)
                {
                  v82[14] = v83;
                  operator delete(v83);
                }
                v84 = (void *)v82[10];
                if (v84)
                {
                  v82[11] = v84;
                  operator delete(v84);
                }
                MEMORY[0x18D76437C](v82, 0x1070C40ADA6D0DELL);
              }
              MEMORY[0x18D76437C](v81, 0x20C4093837F09);
              a1 = v482;
            }
            MEMORY[0x18D76437C](v80, 0x20C4093837F09);
          }
        }
        v486 = v17;
        v85 = v73 - 2;
        if (v73 < 2)
          return 3;
        v86 = &a2[v17 + v68];
        v87 = v86[1];
        v88 = v86[2];
        v89 = *a1;
        v90 = (char *)a1[1];
        v91 = (unint64_t)&v90[-*a1];
        v92 = a6 - v91;
        if (a6 > v91)
        {
          v93 = (unsigned __int8 *)a1[2];
          if (v93 - (unsigned __int8 *)v90 >= v92)
          {
            v239 = (unsigned __int8 *)&v90[v92];
            v240 = v88;
            v241 = v87;
            bzero((void *)a1[1], v92);
            v87 = v241;
            v88 = v240;
            v85 = v73 - 2;
            a1[1] = (uint64_t)v239;
            LODWORD(v92) = a6;
            goto LABEL_367;
          }
          v463 = v87;
          v466 = v88;
          if ((a6 & 0x8000000000000000) != 0)
            goto LABEL_440;
          v94 = (unint64_t)&v93[-v89];
          v95 = 2 * v94;
          if (2 * v94 <= a6)
            v95 = a6;
          if (v94 >= 0x3FFFFFFFFFFFFFFFLL)
            v96 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v96 = v95;
          v460 = (char *)operator new(v96);
          v457 = &v460[v91];
          bzero(&v460[v91], v92);
          v97 = v96;
          if (v90 == (char *)v89)
          {
            a1 = v482;
            v92 = a6;
            v85 = v73 - 2;
            v88 = v466;
            v87 = v463;
            v292 = &v460[v91];
            v99 = v460;
            goto LABEL_365;
          }
          if (v91 < 8)
          {
            a1 = v482;
            v92 = a6;
            v85 = v73 - 2;
            v88 = v466;
            v87 = v463;
            v98 = &v460[v91];
            v99 = v460;
            goto LABEL_362;
          }
          v98 = &v460[v91];
          v99 = v460;
          a1 = v482;
          v92 = a6;
          v85 = v73 - 2;
          v88 = v466;
          v87 = v463;
          if ((unint64_t)(v89 - (_QWORD)v460) >= 0x20)
          {
            if (v91 < 0x20)
            {
              v296 = 0;
              goto LABEL_315;
            }
            v296 = v91 & 0xFFFFFFFFFFFFFFE0;
            v333 = &v460[v91 - 16];
            v334 = v90 - 16;
            v335 = v91 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v336 = *(_OWORD *)v334;
              *((_OWORD *)v333 - 1) = *((_OWORD *)v334 - 1);
              *(_OWORD *)v333 = v336;
              v333 -= 32;
              v334 -= 32;
              v335 -= 32;
            }
            while (v335);
            if (v91 == v296)
              goto LABEL_364;
            if ((v91 & 0x18) != 0)
            {
LABEL_315:
              v98 = &v457[-(v91 & 0xFFFFFFFFFFFFFFF8)];
              v337 = &v90[-v296 - v89 - 8 + (_QWORD)v460];
              v338 = &v90[-v296 - 8];
              v339 = v296 - (v91 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v340 = *(_QWORD *)v338;
                v338 -= 8;
                *(_QWORD *)v337 = v340;
                v337 -= 8;
                v339 += 8;
              }
              while (v339);
              v90 -= v91 & 0xFFFFFFFFFFFFFFF8;
              if (v91 == (v91 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_364;
              goto LABEL_362;
            }
            v98 = &v457[-v296];
            v90 -= v296;
          }
LABEL_362:
          v372 = v98 - 1;
          do
          {
            v373 = *--v90;
            *v372-- = v373;
          }
          while (v90 != (char *)v89);
LABEL_364:
          v90 = (char *)v89;
          v292 = v99;
LABEL_365:
          *a1 = (uint64_t)v292;
          a1[1] = (uint64_t)&v99[v92];
          a1[2] = (uint64_t)&v99[v97];
          if (v90)
          {
            operator delete(v90);
            v87 = v463;
            v88 = v466;
            v85 = v73 - 2;
          }
          goto LABEL_367;
        }
        LODWORD(v92) = a6;
        if (a6 < v91)
          a1[1] = v89 + a6;
LABEL_367:
        v374 = (unsigned __int8 *)*a1;
        v375 = *(uint64_t **)a1[3];
        LODWORD(v488) = 0;
        BYTE4(v488) = a4;
        BYTE5(v488) = a5;
        WORD3(v488) = 0;
        v489 = 1;
        v490 = 0;
        v491 = 1;
        v492 = 0;
        if (v87 >= 4)
          v376 = 1;
        else
          v376 = v87;
        v493 = v376;
        if (v88 == 2)
          v377 = 4;
        else
          v377 = 1;
        if (!v88)
          v377 = 0;
        v494 = v377;
        *((_QWORD *)&v488 + 1) = __PAIR64__(v92, v85);
        v378 = *v375;
        v495 = (uint64_t)&v483[v486 + 3 + v68];
        v496 = v85;
        result = gcl::polyline::DecoderImpl::decompressAttributes(v378, (uint64_t)&v495, (uint64_t)v374, 0, &v488);
        if (!(_DWORD)result)
        {
          v379 = a7;
          a2 = v483;
          v15 = a6;
          v380 = a6;
          do
          {
            v381 = *v374++;
            if (v64 + v381)
              v379->i16[0] = -v379->i16[0];
            v379 = (uint16x8_t *)((char *)v379 + 2);
            --v380;
          }
          while (v380);
          v371 = (const char *)(v486 + v73);
LABEL_381:
          v364 = &v371[v68];
LABEL_382:
          v17 = (uint64_t)(v364 + 1);
          a1 = v482;
          v16 = v484 + 1;
          if (v484 + 1 == v480)
            return 0;
          continue;
        }
LABEL_435:
        if ((result - 1) >= 4)
          return 5;
        return result;
      case 2u:
        v487 = v17;
        v170 = *a1;
        v171 = (char *)a1[1];
        v172 = (unint64_t)&v171[-*a1];
        v173 = a1;
        v174 = __sz - v172;
        if (__sz <= v172)
        {
          v180 = v173;
          if (__sz < v172)
            v173[1] = v170 + __sz;
LABEL_355:
          v367 = (uint64_t *)*v180;
          result = mgcl::muid::decompress((mgcl::muid *)&v483[v487 + 1 + v68], (const char *)v73, 0, 0, *v180, (unint64_t *)8, a6);
          if ((_DWORD)result)
            return result;
          v368 = a7;
          a2 = v483;
          v15 = a6;
          v369 = a6;
          do
          {
            v370 = *v367++;
            if (v370 != -v64)
              v368->i16[0] = -v368->i16[0];
            v368 = (uint16x8_t *)((char *)v368 + 2);
            --v369;
          }
          while (v369);
          v371 = (const char *)(v487 + v73);
          goto LABEL_381;
        }
        v175 = v173[2];
        if (v175 - (uint64_t)v171 >= v174)
        {
          bzero(v171, __sz - v172);
          v173[1] = (uint64_t)&v171[v174];
          v180 = v173;
          goto LABEL_355;
        }
        if ((__sz & 0x8000000000000000) != 0)
LABEL_440:
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v176 = v175 - v170;
        v177 = 2 * v176;
        if (2 * v176 <= __sz)
          v177 = 8 * a6;
        if (v176 >= 0x3FFFFFFFFFFFFFFFLL)
          v178 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v178 = v177;
        v179 = v178;
        v473 = (char *)operator new(v178);
        v468 = &v473[v172];
        bzero(&v473[v172], v174);
        if (v171 == (char *)v170)
        {
          v180 = v482;
          v181 = v473;
          v291 = &v473[v172];
          goto LABEL_353;
        }
        if (v172 < 8)
        {
          v180 = v482;
          v181 = v473;
          v182 = &v473[v172];
          goto LABEL_350;
        }
        v181 = v473;
        v180 = v482;
        v182 = &v473[v172];
        if ((unint64_t)(v170 - (_QWORD)v473) < 0x20)
          goto LABEL_350;
        if (v172 >= 0x20)
        {
          v294 = v172 & 0xFFFFFFFFFFFFFFE0;
          v325 = &v473[v172 - 16];
          v326 = v171 - 16;
          v327 = v172 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v328 = *(_OWORD *)v326;
            *((_OWORD *)v325 - 1) = *((_OWORD *)v326 - 1);
            *(_OWORD *)v325 = v328;
            v325 -= 32;
            v326 -= 32;
            v327 -= 32;
          }
          while (v327);
          if (v172 == v294)
            goto LABEL_352;
          if ((v172 & 0x18) == 0)
          {
            v182 = &v468[-v294];
            v171 -= v294;
LABEL_350:
            v365 = v182 - 1;
            do
            {
              v366 = *--v171;
              *v365-- = v366;
            }
            while (v171 != (char *)v170);
LABEL_352:
            v171 = (char *)v170;
            v291 = v181;
LABEL_353:
            *v180 = (uint64_t)v291;
            v180[1] = (uint64_t)&v181[__sz];
            v180[2] = (uint64_t)&v181[v179];
            if (v171)
              operator delete(v171);
            goto LABEL_355;
          }
        }
        else
        {
          v294 = 0;
        }
        v182 = &v468[-(v172 & 0xFFFFFFFFFFFFFFF8)];
        v329 = &v171[-v294 - v170 - 8 + (_QWORD)v473];
        v330 = &v171[-v294 - 8];
        v331 = v294 - (v172 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v332 = *(_QWORD *)v330;
          v330 -= 8;
          *(_QWORD *)v329 = v332;
          v329 -= 8;
          v331 += 8;
        }
        while (v331);
        v171 -= v172 & 0xFFFFFFFFFFFFFFF8;
        if (v172 == (v172 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_352;
        goto LABEL_350;
      case 3u:
        v145 = (unsigned __int8 *)*a1;
        v144 = (unsigned __int8 *)a1[1];
        if (v144 != (unsigned __int8 *)*a1)
        {
          a1[1] = (uint64_t)v145;
          v144 = v145;
        }
        if (a1[2] - (uint64_t)v145 >= __sz)
          goto LABEL_120;
        if ((__sz & 0x8000000000000000) != 0)
          goto LABEL_440;
        v146 = operator new(__sz);
        v147 = v144 - v145;
        v148 = &v146[v144 - v145];
        v149 = v148;
        a1 = v482;
        a2 = v483;
        v15 = a6;
        if (v144 == v145)
          goto LABEL_118;
        v149 = v146;
        if (v147 < 8 || (unint64_t)(v145 - v146) < 0x20)
        {
          v150 = v144;
          v151 = &v146[v144 - v145];
          goto LABEL_116;
        }
        if (v147 >= 0x20)
        {
          v293 = v147 & 0xFFFFFFFFFFFFFFE0;
          v309 = &v146[v147 - 16];
          v310 = v144 - 16;
          v311 = v147 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v312 = *(_OWORD *)v310;
            *(v309 - 1) = *((_OWORD *)v310 - 1);
            *v309 = v312;
            v309 -= 2;
            v310 -= 32;
            v311 -= 32;
          }
          while (v311);
          if (v147 == v293)
            goto LABEL_118;
          if ((v147 & 0x18) == 0)
          {
            v151 = &v148[-v293];
            v150 = &v144[-v293];
LABEL_116:
            v152 = v151 - 1;
            do
            {
              v153 = *--v150;
              *v152-- = v153;
            }
            while (v150 != v145);
            goto LABEL_118;
          }
        }
        else
        {
          v293 = 0;
        }
        v150 = &v144[-(v147 & 0xFFFFFFFFFFFFFFF8)];
        v151 = &v148[-(v147 & 0xFFFFFFFFFFFFFFF8)];
        v313 = &v146[&v144[-v293] - v145 - 8];
        v314 = &v144[-v293 - 8];
        v315 = v293 - (v147 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v316 = *(_QWORD *)v314;
          v314 -= 8;
          *v313-- = v316;
          v315 += 8;
        }
        while (v315);
        if (v147 != (v147 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_116;
LABEL_118:
        *v482 = (uint64_t)v149;
        v482[1] = (uint64_t)v148;
        v482[2] = (uint64_t)&v146[__sz];
        if (v145)
          operator delete(v145);
LABEL_120:
        v154 = 0;
        v155 = v17 + v68 + 1;
        v113 = v480;
        v111 = v484;
        do
        {
          v156 = 0;
          v157 = 0;
          v158 = 0;
          v117 = v155;
          v159 = &a2[v155];
          do
          {
            v160 = (char)v159[v157];
            v158 |= (unint64_t)(v159[v157] & 0x7F) << v156;
            v120 = v157 + 1;
            if (v157 > 8)
              break;
            v156 += 7;
            ++v157;
          }
          while (v160 < 0);
          if (v158 != -v64)
            a7->i16[v154] = -a7->i16[v154];
          v155 = v117 + v120;
          ++v154;
        }
        while (v154 != v15);
LABEL_8:
        v17 = v117 + v120;
        v16 = v111 + 1;
        if (v16 == v113)
          return 0;
        continue;
      case 4u:
        v161 = (uint64_t *)operator new();
        v123 = v161;
        v162 = v476 - v17 - v68;
        a2 = v483;
        *v161 = (uint64_t)&v483[v17 + 1 + v68];
        v161[1] = v162;
        v161[2] = 0;
        v163 = 8 * v162;
        if (!v163)
        {
          v168 = 0;
          v15 = a6;
          goto LABEL_132;
        }
        v164 = (char *)*v161;
        v165 = *(unsigned __int8 *)*v161;
        v161[2] = 1;
        v166 = (v165 >> 6) & 2 | (*v164 >> 6) & 1;
        v161[2] = 2;
        v167 = (*v164 >> 5) & 1 | (2 * v166);
        v161[2] = 3;
        v15 = a6;
        if (v167 != 2)
        {
          if (v167 != 1)
          {
            v168 = 3;
            if (v167)
            {
LABEL_438:
              MEMORY[0x18D76437C](v123, 0x1050C40E4AAA758);
              return 3;
            }
            if (v163 >= 8)
            {
              v205 = (_BYTE *)*v161;
              v206 = *(unsigned __int8 *)*v161 >> 4;
              v161[2] = 4;
              v207 = (*v205 >> 3) & 1 | (2 * (v206 & 1));
              v161[2] = 5;
              v208 = *v205 >> 2;
              v161[2] = 6;
              v209 = (4 * v207) | (2 * (v208 & 1)) | (*v205 >> 1) & 1;
              v161[2] = 7;
              LODWORD(v205) = *v205 & 1;
              v161[2] = 8;
              v169 = (v205 | (2 * v209)) + 1;
              v168 = 8;
LABEL_179:
              a1 = v482;
              for (j = 0; j != v15; ++j)
              {
                if (v168 + v169 <= v163)
                {
                  v211 = 0;
                  v212 = *v161;
                  v213 = v169;
                  do
                  {
                    v211 = (*(unsigned __int8 *)(v212 + (v168 >> 3)) >> (~(_BYTE)v168 & 7)) & 1 | (2 * v211);
                    v161[2] = ++v168;
                    --v213;
                  }
                  while (v213);
                }
                else
                {
                  v211 = 0;
                }
                if (v211 != -v64)
                  a7->i16[j] = -a7->i16[j];
              }
LABEL_256:
              v280 = v168 >> 3;
              if ((v168 & 7) != 0)
                ++v280;
              v281 = v17 + v68;
              goto LABEL_259;
            }
LABEL_132:
            v169 = 1;
            goto LABEL_179;
          }
          v242 = 0;
          v243 = *v164;
          v161[2] = 4;
          v244 = v243 & 0x10 | *v164 & 0xF;
          v161[2] = 5;
          v245 = *v164;
          v161[2] = 6;
          v246 = v244 & 0xFFFFFFF8 | v245 & 4 | *v164 & 3;
          v161[2] = 7;
          v247 = v246 & 0xFFFFFFFE | *v164 & 1;
          v161[2] = 8;
          v168 = 8;
          a1 = v482;
          while (v168 + 1 > v163)
          {
            v248 = 0;
            v249 = 0;
            if ((_DWORD)v247)
              goto LABEL_221;
LABEL_225:
            if (v64 + (v249 | (v248 << v247)))
              a7->i16[v242] = -a7->i16[v242];
            if (++v242 == a6)
              goto LABEL_256;
          }
          v250 = 0;
          v248 = 8 * (v474 - v17 - v68) - v168;
          v251 = v75 - v168;
          while (1)
          {
            v252 = v168++;
            v253 = v164[v252 >> 3];
            v123[2] = v168;
            if (((v253 >> (~(_BYTE)v252 & 7)) & 1) == 0)
              break;
            if (v251 == ++v250)
            {
              v168 = v252 + 1;
              v249 = 0;
              if ((_DWORD)v247)
                goto LABEL_221;
              goto LABEL_225;
            }
          }
          v248 = v250;
          v168 = v252 + 1;
          v249 = 0;
          if (!(_DWORD)v247)
            goto LABEL_225;
LABEL_221:
          if (v168 + v247 <= v163)
          {
            v254 = 0;
            v255 = -v247;
            do
            {
              v249 = (v164[v168 >> 3] >> (~(_BYTE)v168 & 7)) & 1 | (2 * v254);
              v123[2] = ++v168;
              v254 = v249;
              v228 = __CFADD__(v255++, 1);
            }
            while (!v228);
          }
          goto LABEL_225;
        }
        v256 = *v164;
        v161[2] = 4;
        v257 = v256 & 0x10 | *v164 & 0xF;
        v161[2] = 5;
        v258 = *v164;
        v161[2] = 6;
        v259 = *v164;
        v161[2] = 7;
        v260 = v257 & 0xFFFFFFF8 | v258 & 4 | v259 & 2 | *v164 & 1;
        v161[2] = 8;
        LODWORD(v488) = v260;
        if (v163 >= 0xD)
        {
          v285 = v164[1];
          v161[2] = 9;
          v286 = (v285 >> 6) & 2 | (v164[1] >> 6) & 1;
          v161[2] = 10;
          v287 = v164[1];
          v161[2] = 11;
          v288 = (4 * v286) | (v287 >> 4) & 2 | (v164[1] >> 4) & 1;
          v161[2] = 12;
          v289 = (2 * v288) | (v164[1] >> 3) & 1;
          v161[2] = 13;
          a1 = v482;
          DWORD1(v488) = v289;
          if (v163 >= 0x12)
          {
            v261 = v164[1] >> 2;
            v161[2] = 14;
            v262 = (v164[1] >> 1) & 1 | (2 * (v261 & 1));
            v161[2] = 15;
            LOBYTE(v261) = v164[1];
            v161[2] = 16;
            v263 = (4 * v262) | (2 * (v261 & 1)) | (v164[2] >> 7) & 1;
            v161[2] = 17;
            v264 = (v164[2] >> 6) & 1 | (2 * v263);
            v161[2] = 18;
            goto LABEL_251;
          }
        }
        else
        {
          a1 = v482;
          DWORD1(v488) = 0;
        }
        v264 = 0;
LABEL_251:
        DWORD2(v488) = v264;
        v290 = a7;
        do
        {
          if (v64 + geo::ReadBitstream::unpackRice2(v123, &v488))
            v290->i16[0] = -v290->i16[0];
          v290 = (uint16x8_t *)((char *)v290 + 2);
          --v15;
        }
        while (v15);
        v168 = v123[2];
        v15 = a6;
        goto LABEL_256;
      default:
        return 3;
    }
  }
}

void sub_188694D38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D76437C](v2, 0x20C4093837F09);
  MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t geo::ReadBitstream::unpackRice2(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v2 = a2[1];
  v4 = a1[1];
  v3 = a1[2];
  v5 = 8 * v4;
  if (v3 + 1 > 8 * v4)
  {
    v6 = 0;
    if ((_DWORD)v2)
      v7 = v3 + v2 > v5;
    else
      v7 = 1;
    if (!v7)
      goto LABEL_6;
LABEL_21:
    v11 = 0;
    v12 = a2[2];
    if (v3 + 1 > v5)
      goto LABEL_9;
    goto LABEL_22;
  }
  v15 = 0;
  v16 = *a1;
  v6 = 8 * v4 - v3;
  while (1)
  {
    v17 = v15;
    v18 = v3 + v15;
    v19 = *(unsigned __int8 *)(v16 + (v18 >> 3));
    a1[2] = v18 + 1;
    if (((v19 >> (~(_BYTE)v18 & 7)) & 1) == 0)
      break;
    v15 = v17 + 1;
    if (!(v3 - 8 * v4 + v17 + 1))
      goto LABEL_16;
  }
  v6 = v17;
LABEL_16:
  v3 += v17 + 1;
  if ((_DWORD)v2)
    v20 = v3 + v2 > v5;
  else
    v20 = 1;
  if (v20)
    goto LABEL_21;
LABEL_6:
  v8 = 0;
  v9 = *a1;
  v10 = v2;
  do
  {
    v11 = (*(unsigned __int8 *)(v9 + (v3 >> 3)) >> (~(_BYTE)v3 & 7)) & 1 | (2 * v8);
    a1[2] = ++v3;
    v8 = v11;
    --v10;
  }
  while (v10);
  v12 = a2[2];
  if (v3 + 1 > v5)
  {
LABEL_9:
    v13 = 0;
    v14 = 0;
    if (!(_DWORD)v12)
      return ((v11 | (v6 << v2)) << *a2) + (v14 | (v13 << v12));
    goto LABEL_28;
  }
LABEL_22:
  v21 = 0;
  v22 = *a1;
  v13 = 8 * v4 - v3;
  v23 = v3 - 8 * v4;
  while (1)
  {
    v24 = v21;
    v25 = v3 + v21;
    v26 = *(unsigned __int8 *)(v22 + (v25 >> 3));
    a1[2] = v25 + 1;
    if (((v26 >> (~(_BYTE)v25 & 7)) & 1) == 0)
      break;
    v21 = v24 + 1;
    if (!(v23 + v24 + 1))
    {
      v3 += v24 + 1;
      v14 = 0;
      if ((_DWORD)v12)
        goto LABEL_28;
      return ((v11 | (v6 << v2)) << *a2) + (v14 | (v13 << v12));
    }
  }
  v13 = v24;
  v3 += v24 + 1;
  v14 = 0;
  if (!(_DWORD)v12)
    return ((v11 | (v6 << v2)) << *a2) + (v14 | (v13 << v12));
LABEL_28:
  if (v3 + v12 <= v5)
  {
    v27 = 0;
    v28 = *a1;
    v29 = v12;
    do
    {
      v14 = (*(unsigned __int8 *)(v28 + (v3 >> 3)) >> (~(_BYTE)v3 & 7)) & 1 | (2 * v27);
      a1[2] = ++v3;
      v27 = v14;
      --v29;
    }
    while (v29);
  }
  return ((v11 | (v6 << v2)) << *a2) + (v14 | (v13 << v12));
}

void sub_1886950F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void GEORiseTransitSet::eventOfType(GEORiseTransitSet *this, unsigned int a2)
{
  unsigned int v2;
  double *v3;

  if (a2)
  {
    v2 = __clz(__rbit32(a2));
    if ((__clz(a2) ^ 0x1F) == v2)
    {
      v3 = (double *)((char *)this + 8 * v2);
      if (v3[48] < 0.0)
        v3[48] = GEORiseTransitSet::calculateEventOfType(this, a2);
    }
  }
}

double GEORiseTransitSet::calculateEventOfType(GEORiseTransitSet *this, int a2)
{
  GEOFunctionInterceptor *v4;
  int v5;
  double v6;
  double v7;
  GEOFunctionInterceptor *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  double v13;
  double *Peak;
  uint64_t v15;
  double v16;
  double v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  _BYTE *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  _QWORD *v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  double v41;
  char *v42;
  char *v43;
  double v44;
  double v45;
  double v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  double v52;
  double v53;
  _BYTE v54[24];
  _BYTE *v55;
  __int128 v56;
  _BYTE v57[24];
  _BYTE *v58;
  _BYTE v59[24];
  _BYTE *v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = (GEORiseTransitSet *)((char *)this + 48);
  v5 = 0;
  v6 = 0.0;
  if (*((double *)this + 7) == *((double *)this + 9))
  {
    if (a2 <= 31)
    {
      switch(a2)
      {
        case 1:
LABEL_6:
          v6 = -18.0;
          break;
        case 2:
LABEL_21:
          v6 = -12.0;
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_24;
        case 4:
LABEL_20:
          v6 = -6.0;
          break;
        case 8:
LABEL_22:
          v6 = *(double *)this;
          break;
        default:
          if (a2 == 16)
            goto LABEL_90;
          goto LABEL_24;
      }
      v5 = 1;
      goto LABEL_24;
    }
    if (a2 <= 127)
    {
LABEL_17:
      if (a2 == 32)
      {
        v5 = 0;
        v6 = *(double *)this;
      }
      else if (a2 == 64)
      {
        v5 = 0;
        v6 = -6.0;
      }
      goto LABEL_24;
    }
    if (a2 == 128)
      goto LABEL_84;
    if (a2 == 256)
      goto LABEL_85;
    if (a2 != 512)
      goto LABEL_24;
LABEL_90:
    v39 = *((double *)this + 1);
    v40 = *((_QWORD *)this + 2);
    v41 = *((double *)this + 5);
    v42 = (char *)operator new(0x20uLL);
    *(_QWORD *)v42 = &off_1E1BFA5A0;
    *((double *)v42 + 1) = v41;
    *((double *)v42 + 2) = v39;
    *((_QWORD *)v42 + 3) = v40;
    v43 = (char *)operator new(0x20uLL);
    *(_QWORD *)v43 = &off_1E1BFA5A0;
    *(_OWORD *)(v43 + 8) = *(_OWORD *)(v42 + 8);
    *((_QWORD *)v43 + 3) = *((_QWORD *)v42 + 3);
    v60 = v43;
    v61 = xmmword_189CD7DF0;
    operator delete(v42);
    GEOFunctionInterceptor::GEOFunctionInterceptor((uint64_t)v54, (uint64_t)v59, v41 * *((double *)this + 3), *((double *)this + 4));
    v44 = *((double *)this + 5);
    GEOFunctionInterceptor::nextMaxOrMin((GEOFunctionInterceptor *)v54, (a2 == 16) ^ (v39 <= 0.0));
    v46 = v45;
    v47 = v58;
    if (v58 == v57)
    {
      v48 = 4;
      v47 = v57;
    }
    else
    {
      if (!v58)
        goto LABEL_95;
      v48 = 5;
    }
    (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_95:
    v49 = v60;
    if (v60 == v59)
    {
      v50 = 4;
      v49 = v59;
    }
    else
    {
      if (!v60)
        return v44 * v46;
      v50 = 5;
    }
    (*(void (**)(void))(*v49 + 8 * v50))();
    return v44 * v46;
  }
  if (a2 <= 31)
  {
    switch(a2)
    {
      case 1:
        goto LABEL_6;
      case 2:
        goto LABEL_21;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_24;
      case 4:
        goto LABEL_20;
      case 8:
        goto LABEL_22;
      default:
        if (a2 != 16)
          goto LABEL_24;
        v7 = *((double *)this + 5);
        v8 = (GEORiseTransitSet *)((char *)this + 48);
        v9 = 1;
        break;
    }
    goto LABEL_88;
  }
  if (a2 <= 127)
    goto LABEL_17;
  switch(a2)
  {
    case 128:
LABEL_84:
      v5 = 0;
      v6 = -12.0;
      break;
    case 256:
LABEL_85:
      v5 = 0;
      v6 = -18.0;
      break;
    case 512:
      v7 = *((double *)this + 5);
      v8 = (GEORiseTransitSet *)((char *)this + 48);
      v9 = 0;
LABEL_88:
      GEOFunctionInterceptor::nextMaxOrMin(v8, v9);
      return v7 * v38;
  }
LABEL_24:
  if (*((double *)this + 5) < 0.0)
    v10 = v5 ^ 1;
  else
    v10 = v5;
  if (*(unsigned __int8 *)(GEOFunctionInterceptor::getPeak((GEORiseTransitSet *)((char *)this + 48), 0) + 56) == v10)
  {
    v11 = 1;
  }
  else if (v10 != *((double *)this + 46) <= v6)
  {
    v11 = 2;
  }
  else
  {
    v11 = 0;
  }
  if (*((double *)this + 7) == *((double *)this + 9))
    v12 = 1;
  else
    v12 = 3;
  v13 = 0.0;
  if (v11 < v12)
  {
    while (1)
    {
      Peak = (double *)GEOFunctionInterceptor::getPeak(v4, v11);
      v15 = GEOFunctionInterceptor::getPeak(v4, v11 + 1);
      v16 = *((double *)this + 47);
      v17 = *((double *)this + 45);
      v18 = *(unsigned __int8 *)(v15 + 56);
      if (GEOLocalPeak::mightReach((GEOLocalPeak *)Peak, v6))
        break;
LABEL_40:
      v11 += 2;
      if (v11 >= v12)
        return v13;
    }
    while (1)
    {
      GEOLocalPeak::getY((uint64_t)Peak, *((_QWORD *)this + 42), 2);
      v20 = v19;
      v21 = Peak[3];
      if (v18 == v19 < v6)
        break;
      if (v21 - Peak[1] >= v16)
      {
        GEOLocalPeak::tighten((uint64_t)Peak, (uint64_t)this + 312);
        if (GEOLocalPeak::mightReach((GEOLocalPeak *)Peak, v6))
          continue;
      }
      goto LABEL_40;
    }
    while (1)
    {
      if (*(double *)(v15 + 24) < v17 || !GEOLocalPeak::mightReach((GEOLocalPeak *)v15, v6))
        goto LABEL_40;
      GEOLocalPeak::getY(v15, *((_QWORD *)this + 42), 0);
      v23 = v22;
      if (v18 == v22 > v6)
        break;
      if (*(double *)(v15 + 24) - *(double *)(v15 + 8) < v16)
        goto LABEL_40;
      GEOLocalPeak::tighten(v15, (uint64_t)this + 312);
    }
    v24 = *(double *)(v15 + 8);
    std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v54, (uint64_t)this + 312);
    v56 = *(_OWORD *)((char *)this + 344);
    v60 = 0;
    v25 = operator new(0x38uLL);
    *(_QWORD *)v25 = &off_1E1BFA230;
    std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)(v25 + 8), (uint64_t)v54);
    *(_OWORD *)(v25 + 40) = v56;
    v60 = v25;
    v26 = v24 - v21;
    v27 = (v23 - v20) / (v24 - v21);
    v28 = (v6 - (v23 - v27 * v24)) / v27;
    v52 = v17;
    if (v24 - v21 <= v16)
    {
      if (v24 >= v28)
        v35 = (v6 - (v23 - v27 * v24)) / v27;
      else
        v35 = v24;
      if (v21 >= v35)
        v33 = v21;
      else
        v33 = v35;
      v34 = 5;
    }
    else
    {
      do
      {
        v29 = v21 + v26 * 0.05;
        if (v28 > v29)
        {
          v30 = v24 - v26 * 0.05;
          v29 = v28;
          if (v28 >= v30)
            v29 = v30;
        }
        v53 = v29;
        if (!v60)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *, double *))(*(_QWORD *)v60 + 48))(v60, &v53);
        if (v27 > 0.0 != v31 >= v6)
        {
          v21 = v29;
          v20 = v31;
        }
        else
        {
          v24 = v29;
          v23 = v31;
        }
        v26 = v24 - v21;
        v27 = (v23 - v20) / (v24 - v21);
        v28 = (v6 - (v23 - v27 * v24)) / v27;
      }
      while (v24 - v21 > v16);
      v25 = v60;
      if (v24 >= v28)
        v32 = (v6 - (v23 - v27 * v24)) / v27;
      else
        v32 = v24;
      if (v21 >= v32)
        v33 = v21;
      else
        v33 = v32;
      if (v60 != v59)
      {
        v13 = 0.0;
        if (!v60)
          goto LABEL_76;
        v34 = 5;
LABEL_75:
        (*(void (**)(_BYTE *))(*(_QWORD *)v25 + 8 * v34))(v25);
LABEL_76:
        v36 = v55;
        if (v55 == v54)
        {
          v36 = v54;
          v37 = 4;
        }
        else
        {
          if (!v55)
          {
LABEL_81:
            if (v33 < v52)
              goto LABEL_40;
            return v33 * *((double *)this + 5);
          }
          v37 = 5;
        }
        (*(void (**)(void))(*v36 + 8 * v37))();
        goto LABEL_81;
      }
      v25 = v59;
      v34 = 4;
    }
    v13 = 0.0;
    goto LABEL_75;
  }
  return v13;
}

void sub_1886957EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,_QWORD *a49)
{
  uint64_t v49;
  uint64_t v50;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;

  v52 = a49;
  if (a49 == (_QWORD *)(v49 + 264))
  {
    v53 = 4;
    v52 = (_QWORD *)(v49 + 264);
  }
  else
  {
    if (!a49)
      goto LABEL_6;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_6:
  v54 = *(_QWORD **)(v50 - 184);
  if (v54 == (_QWORD *)(v50 - 208))
  {
    v55 = 4;
    v54 = (_QWORD *)(v50 - 208);
  }
  else
  {
    if (!v54)
      goto LABEL_11;
    v55 = 5;
  }
  (*(void (**)(_QWORD *))(*v54 + 8 * v55))(v54);
LABEL_11:
  _Unwind_Resume(exception_object);
}

BOOL GEOPDAddressObjectReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  _BOOL8 v22;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          PBReaderReadData();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v18;

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v20 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v21 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v20;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_26;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v22 = v3[*v6] == 0;
  }
  else
  {
LABEL_26:
    v22 = 0;
  }
  objc_sync_exit(v3);

  return v22;
}

void sub_188695C9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void geo::codec::VectorTile::~VectorTile(geo::codec::VectorTile *this, GeoCodecsVertexPool *a2)
{
  geo::codec::VectorTile *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  geo::codec::Allocator *v13;
  uint64_t v14;
  geo::codec::Allocator *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  GeoCodecsVertexPool *v19;
  GeoCodecsVertexPool *v20;
  GeoCodecsVertexPool *v21;
  GeoCodecsVertexPool *v22;
  GeoCodecsVertexPool *v23;
  GeoCodecsVertexPool *v24;
  GeoCodecsVertexPool *v25;
  GeoCodecsVertexPool *v26;
  GeoCodecsVertexPool *v27;
  GeoCodecsVertexPool *v28;
  GeoCodecsVertexPool *v29;
  GeoCodecsVertexPool *v30;
  geo::codec::Allocator *v31;
  GeoCodecsVertexPool *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  geo::codec::Allocator *v46;
  GeoCodecsVertexPool *v47;
  uint64_t v48;
  geo::codec::Allocator *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  geo::codec::Allocator *DebugBlobDealloc;
  GeoCodecsVertexPool *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  geo::codec::Allocator *v81;
  uint64_t v82;
  geo::codec::Allocator *v83;
  uint64_t v84;
  uint64_t v85;
  geo::codec::Allocator *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  uint64_t v96;
  uint64_t i;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t j;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  void *v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t *v347;

  v2 = this;
  if (*((_QWORD *)this + 17))
  {
    v3 = geo::codec::Allocator::instance(this);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)v2 + 17), 0);
  }
  if (*((_QWORD *)v2 + 32))
  {
    v4 = geo::codec::Allocator::instance(this);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)v2 + 32), 0);
  }
  if (*((_QWORD *)v2 + 34))
  {
    v5 = geo::codec::Allocator::instance(this);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)v2 + 34), 0);
  }
  if (*((_QWORD *)v2 + 83))
  {
    v6 = geo::codec::Allocator::instance(this);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)v2 + 83), 0);
  }
  if (*((_QWORD *)v2 + 86))
  {
    v7 = geo::codec::Allocator::instance(this);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)v2 + 86), 0);
  }
  if (*((_QWORD *)v2 + 89))
  {
    v8 = geo::codec::Allocator::instance(this);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)v2 + 89), 0);
  }
  if (*((_QWORD *)v2 + 91))
  {
    v9 = geo::codec::Allocator::instance(this);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 40))(v9, *((_QWORD *)v2 + 91), 0);
  }
  if (*((_QWORD *)v2 + 94))
  {
    v10 = geo::codec::Allocator::instance(this);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 40))(v10, *((_QWORD *)v2 + 94), 0);
  }
  v11 = (_QWORD *)*((_QWORD *)v2 + 96);
  if (v11)
  {
    v12 = geo::codec::Allocator::instance(this);
    v13 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 40))(v12, v11[1], 0);
    v14 = geo::codec::Allocator::instance(v13);
    v15 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 40))(v14, v11[4], 0);
    if (v11[3])
    {
      v16 = geo::codec::Allocator::instance(v15);
      v15 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 40))(v16, v11[3], 0);
    }
    v17 = geo::codec::Allocator::instance(v15);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v17 + 40))(v17, v11, 0);
  }
  if (*((_QWORD *)v2 + 97))
  {
    v18 = geo::codec::Allocator::instance(this);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v18 + 40))(v18, *((_QWORD *)v2 + 97), 0);
  }
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 99), a2);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 100), v19);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 101), v20);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 102), v21);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 103), v22);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 104), v23);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 105), v24);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 440), v25);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 382), v26);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 396), v27);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 410), v28);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 424), v29);
  v31 = geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 461), v30);
  if (*((_QWORD *)v2 + 111))
  {
    v33 = *((_QWORD *)v2 + 112);
    if (v33)
    {
      v34 = 0;
      v35 = 16;
      do
      {
        v31 = *(geo::codec::Allocator **)(*((_QWORD *)v2 + 111) + v35);
        if (v31)
        {
          free(v31);
          v33 = *((_QWORD *)v2 + 112);
        }
        ++v34;
        v35 += 24;
      }
      while (v34 < v33);
    }
    v36 = geo::codec::Allocator::instance(v31);
    v31 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v36 + 40))(v36, *((_QWORD *)v2 + 111), 0);
  }
  if (*((_QWORD *)v2 + 131))
  {
    v37 = geo::codec::Allocator::instance(v31);
    v31 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v37 + 40))(v37, *((_QWORD *)v2 + 131), 0);
  }
  if (*((_QWORD *)v2 + 133))
  {
    v38 = geo::codec::Allocator::instance(v31);
    v31 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v38 + 40))(v38, *((_QWORD *)v2 + 133), 0);
  }
  if (*((_QWORD *)v2 + 150))
  {
    v39 = geo::codec::Allocator::instance(v31);
    v31 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v39 + 40))(v39, *((_QWORD *)v2 + 150), 0);
  }
  if (*((_QWORD *)v2 + 152))
  {
    v40 = geo::codec::Allocator::instance(v31);
    v31 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v40 + 40))(v40, *((_QWORD *)v2 + 152), 0);
  }
  if (*((_QWORD *)v2 + 154))
  {
    v41 = geo::codec::Allocator::instance(v31);
    v31 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v41 + 40))(v41, *((_QWORD *)v2 + 154), 0);
  }
  if (*((_QWORD *)v2 + 156))
  {
    v42 = geo::codec::Allocator::instance(v31);
    v31 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v42 + 40))(v42, *((_QWORD *)v2 + 156), 0);
  }
  if (*((_QWORD *)v2 + 159))
  {
    v43 = geo::codec::Allocator::instance(v31);
    v31 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v43 + 40))(v43, *((_QWORD *)v2 + 159), 0);
  }
  if (*((_QWORD *)v2 + 172))
  {
    v44 = geo::codec::Allocator::instance(v31);
    v31 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v44 + 40))(v44, *((_QWORD *)v2 + 172), 0);
  }
  if (*((_QWORD *)v2 + 173))
  {
    v45 = geo::codec::Allocator::instance(v31);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v45 + 40))(v45, *((_QWORD *)v2 + 173), 0);
  }
  v46 = geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 175), v32);
  if (*((_QWORD *)v2 + 180))
  {
    v48 = geo::codec::Allocator::instance(v46);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v48 + 40))(v48, *((_QWORD *)v2 + 180), 0);
  }
  v49 = geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 182), v47);
  if (*((_QWORD *)v2 + 187))
  {
    v50 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v50 + 40))(v50, *((_QWORD *)v2 + 187), 0);
  }
  if (*((_QWORD *)v2 + 189))
  {
    v51 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v51 + 40))(v51, *((_QWORD *)v2 + 189), 0);
  }
  if (*((_QWORD *)v2 + 191))
  {
    v52 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v52 + 40))(v52, *((_QWORD *)v2 + 191), 0);
  }
  if (*((_QWORD *)v2 + 192))
  {
    v53 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v53 + 40))(v53, *((_QWORD *)v2 + 192), 0);
  }
  if (*((_QWORD *)v2 + 193))
  {
    v54 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v54 + 40))(v54, *((_QWORD *)v2 + 193), 0);
  }
  if (*((_QWORD *)v2 + 199))
  {
    v55 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v55 + 40))(v55, *((_QWORD *)v2 + 199), 0);
  }
  if (*((_QWORD *)v2 + 200))
  {
    v56 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v56 + 40))(v56, *((_QWORD *)v2 + 200), 0);
  }
  if (*((_QWORD *)v2 + 202))
  {
    v57 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v57 + 40))(v57, *((_QWORD *)v2 + 202), 0);
  }
  if (*((_QWORD *)v2 + 203))
  {
    v58 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v58 + 40))(v58, *((_QWORD *)v2 + 203), 0);
  }
  if (*((_QWORD *)v2 + 205))
  {
    v59 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v59 + 40))(v59, *((_QWORD *)v2 + 205), 0);
  }
  if (*((_QWORD *)v2 + 207))
  {
    v60 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v60 + 40))(v60, *((_QWORD *)v2 + 207), 0);
  }
  if (*((_QWORD *)v2 + 208))
  {
    v61 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v61 + 40))(v61, *((_QWORD *)v2 + 208), 0);
  }
  if (*((_QWORD *)v2 + 210))
  {
    v62 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v62 + 40))(v62, *((_QWORD *)v2 + 210), 0);
  }
  if (*((_QWORD *)v2 + 212))
  {
    v63 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v63 + 40))(v63, *((_QWORD *)v2 + 212), 0);
  }
  if (*((_QWORD *)v2 + 219))
  {
    v64 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v64 + 40))(v64, *((_QWORD *)v2 + 219), 0);
  }
  if (*((_QWORD *)v2 + 221))
  {
    v65 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v65 + 40))(v65, *((_QWORD *)v2 + 221), 0);
  }
  if (*((_QWORD *)v2 + 222))
  {
    v66 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v66 + 40))(v66, *((_QWORD *)v2 + 222), 0);
  }
  if (*((_QWORD *)v2 + 224))
  {
    v67 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v67 + 40))(v67, *((_QWORD *)v2 + 224), 0);
  }
  if (*((_QWORD *)v2 + 226))
  {
    v68 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v68 + 40))(v68, *((_QWORD *)v2 + 226), 0);
  }
  if (*((_QWORD *)v2 + 228))
  {
    v69 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v69 + 40))(v69, *((_QWORD *)v2 + 228), 0);
  }
  if (*((_QWORD *)v2 + 230))
  {
    v70 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v70 + 40))(v70, *((_QWORD *)v2 + 230), 0);
  }
  if (*((_QWORD *)v2 + 232))
  {
    v71 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v71 + 40))(v71, *((_QWORD *)v2 + 232), 0);
  }
  if (*((_QWORD *)v2 + 234))
  {
    v72 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v72 + 40))(v72, *((_QWORD *)v2 + 234), 0);
  }
  if (*((_QWORD *)v2 + 236))
  {
    v73 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v73 + 40))(v73, *((_QWORD *)v2 + 236), 0);
  }
  if (*((_QWORD *)v2 + 85))
  {
    v74 = geo::codec::Allocator::instance(v49);
    v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, *((_QWORD *)v2 + 85), 0);
  }
  if (*((_QWORD *)v2 + 93))
  {
    v75 = geo::codec::Allocator::instance(v49);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v75 + 40))(v75, *((_QWORD *)v2 + 93), 0);
  }
  DebugBlobDealloc = geo::codec::VectorTile::DaVinciReadDebugBlobDealloc((geo::codec::Allocator **)v2);
  if (*((_QWORD *)v2 + 360))
  {
    v78 = geo::codec::Allocator::instance(DebugBlobDealloc);
    DebugBlobDealloc = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v78 + 40))(v78, *((_QWORD *)v2 + 360), 0);
  }
  v79 = *((_QWORD *)v2 + 279);
  if (v79)
  {
    v80 = geo::codec::Allocator::instance(DebugBlobDealloc);
    v81 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v80 + 40))(v80, *(_QWORD *)(v79 + 24), 0);
    v82 = geo::codec::Allocator::instance(v81);
    v83 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v82 + 40))(v82, *(_QWORD *)(v79 + 16), 0);
    v84 = geo::codec::Allocator::instance(v83);
    DebugBlobDealloc = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v84 + 40))(v84, v79, 0);
  }
  if (*((_QWORD *)v2 + 280))
  {
    DebugBlobDealloc = (geo::codec::Allocator *)geo::codec::Allocator::instance(DebugBlobDealloc);
    v85 = *((_QWORD *)v2 + 280);
    if (v85)
    {
      v86 = DebugBlobDealloc;
      std::__tree<std::__value_type<unsigned char,std::vector<unsigned long long>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned long long>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned long long>>>>::destroy(v85 + 24, *(_QWORD **)(v85 + 32));
      std::__tree<std::__value_type<unsigned char,std::vector<unsigned long long>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned long long>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned long long>>>>::destroy(v85, *(_QWORD **)(v85 + 8));
      DebugBlobDealloc = (geo::codec::Allocator *)(*(uint64_t (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v86 + 40))(v86, v85, 48);
    }
  }
  if (*((_QWORD *)v2 + 373))
  {
    v87 = geo::codec::Allocator::instance(DebugBlobDealloc);
    DebugBlobDealloc = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v87 + 40))(v87, *((_QWORD *)v2 + 373), 0);
  }
  if (*((_BYTE *)v2 + 3004))
  {
    v88 = geo::codec::Allocator::instance(DebugBlobDealloc);
    DebugBlobDealloc = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v88 + 40))(v88, *((_QWORD *)v2 + 376), 0);
    *((_BYTE *)v2 + 3004) = 0;
  }
  if (*((_QWORD *)v2 + 75))
  {
    v89 = geo::codec::Allocator::instance(DebugBlobDealloc);
    DebugBlobDealloc = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v89 + 40))(v89, *((_QWORD *)v2 + 75), 0);
  }
  if (*((_QWORD *)v2 + 82))
  {
    v90 = geo::codec::Allocator::instance(DebugBlobDealloc);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v90 + 40))(v90, *((_QWORD *)v2 + 82), 0);
  }
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 106), v77);
  v91 = *((_QWORD *)v2 + 147);
  v92 = *((_QWORD *)v2 + 146);
  while (v91 != v92)
  {
    v93 = *(std::__shared_weak_count **)(v91 - 8);
    if (v93)
    {
      p_shared_owners = (unint64_t *)&v93->__shared_owners_;
      do
        v95 = __ldaxr(p_shared_owners);
      while (__stlxr(v95 - 1, p_shared_owners));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    v91 -= 16;
  }
  *((_QWORD *)v2 + 147) = v92;
  v96 = *((_QWORD *)v2 + 63);
  for (i = *((_QWORD *)v2 + 64); i != v96; i -= 224)
  {
    v98 = *(std::__shared_weak_count **)(i - 192);
    if (!v98)
      goto LABEL_132;
    v99 = (unint64_t *)&v98->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (v100)
    {
LABEL_132:
      v101 = *(std::__shared_weak_count **)(i - 216);
      if (!v101)
        continue;
LABEL_133:
      std::__shared_weak_count::__release_weak(v101);
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
    v101 = *(std::__shared_weak_count **)(i - 216);
    if (v101)
      goto LABEL_133;
  }
  *((_QWORD *)v2 + 64) = v96;
  if (*((_QWORD *)v2 + 465))
  {
    v102 = (_QWORD *)*((_QWORD *)v2 + 464);
    if (v102)
    {
      do
      {
        v103 = (_QWORD *)*v102;
        operator delete(v102);
        v102 = v103;
      }
      while (v103);
    }
    *((_QWORD *)v2 + 464) = 0;
    v104 = *((_QWORD *)v2 + 463);
    if (v104)
    {
      for (j = 0; j != v104; ++j)
        *(_QWORD *)(*((_QWORD *)v2 + 462) + 8 * j) = 0;
    }
    *((_QWORD *)v2 + 465) = 0;
  }
  v106 = *((_QWORD *)v2 + 472);
  if (v106)
  {
    *((_QWORD *)v2 + 473) = v106;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 475) + 40))(*((_QWORD *)v2 + 475), v106, *((_QWORD *)v2 + 474) - v106);
  }
  v107 = *((_QWORD *)v2 + 468);
  if (v107)
  {
    v108 = *((_QWORD *)v2 + 469);
    v109 = *((_QWORD *)v2 + 468);
    if (v108 != v107)
    {
      do
      {
        v108 -= 128;
        geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>::destroy((uint64_t)v2 + 3768, v108);
      }
      while (v108 != v107);
      v109 = *((_QWORD *)v2 + 468);
    }
    *((_QWORD *)v2 + 469) = v107;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 471) + 40))(*((_QWORD *)v2 + 471), v109, *((_QWORD *)v2 + 470) - v109);
  }
  v110 = (_QWORD *)*((_QWORD *)v2 + 464);
  if (v110)
  {
    do
    {
      v111 = (_QWORD *)*v110;
      operator delete(v110);
      v110 = v111;
    }
    while (v111);
  }
  v112 = (void *)*((_QWORD *)v2 + 462);
  *((_QWORD *)v2 + 462) = 0;
  if (v112)
    operator delete(v112);
  v113 = (void *)*((_QWORD *)v2 + 458);
  if (v113)
  {
    *((_QWORD *)v2 + 459) = v113;
    operator delete(v113);
  }
  v114 = (void *)*((_QWORD *)v2 + 455);
  if (v114)
  {
    *((_QWORD *)v2 + 456) = v114;
    operator delete(v114);
  }
  v115 = (void *)*((_QWORD *)v2 + 452);
  if (v115)
  {
    *((_QWORD *)v2 + 453) = v115;
    operator delete(v115);
  }
  v116 = (void *)*((_QWORD *)v2 + 449);
  if (v116)
  {
    *((_QWORD *)v2 + 450) = v116;
    operator delete(v116);
  }
  v117 = (void *)*((_QWORD *)v2 + 446);
  if (v117)
  {
    *((_QWORD *)v2 + 447) = v117;
    operator delete(v117);
  }
  v118 = *((_QWORD *)v2 + 441);
  if (v118)
  {
    *((_QWORD *)v2 + 442) = v118;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 444) + 40))(*((_QWORD *)v2 + 444), v118, *((_QWORD *)v2 + 443) - v118);
  }
  v119 = *((_QWORD *)v2 + 436);
  if (v119)
  {
    v120 = *((_QWORD *)v2 + 437);
    v121 = *((_QWORD *)v2 + 436);
    if (v120 != v119)
    {
      do
        GeoCodecsMultiPolygonFeature::~GeoCodecsMultiPolygonFeature((GeoCodecsMultiPolygonFeature *)(v120 - 128));
      while (v120 != v119);
      v121 = *((_QWORD *)v2 + 436);
    }
    *((_QWORD *)v2 + 437) = v119;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 439) + 40))(*((_QWORD *)v2 + 439), v121, *((_QWORD *)v2 + 438) - v121);
  }
  GeoCodecsContourLinesInfo::~GeoCodecsContourLinesInfo((geo::codec::VectorTile *)((char *)v2 + 3360));
  GeoCodecsContourLinesInfo::~GeoCodecsContourLinesInfo((geo::codec::VectorTile *)((char *)v2 + 3248));
  GeoCodecsContourLinesInfo::~GeoCodecsContourLinesInfo((geo::codec::VectorTile *)((char *)v2 + 3136));
  GeoCodecsContourLinesInfo::~GeoCodecsContourLinesInfo((geo::codec::VectorTile *)((char *)v2 + 3024));
  v122 = *((_QWORD *)v2 + 369);
  if (v122)
  {
    *((_QWORD *)v2 + 370) = v122;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 372) + 40))(*((_QWORD *)v2 + 372), v122, *((_QWORD *)v2 + 371) - v122);
  }
  v123 = *((_QWORD *)v2 + 365);
  if (v123)
  {
    v124 = *((_QWORD *)v2 + 366);
    v125 = *((_QWORD *)v2 + 365);
    if (v124 != v123)
    {
      do
      {
        v126 = *(_QWORD *)(v124 - 32);
        if (v126)
        {
          *(_QWORD *)(v124 - 24) = v126;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v124 - 8) + 40))(*(_QWORD *)(v124 - 8), v126, *(_QWORD *)(v124 - 16) - v126);
        }
        v124 -= 40;
      }
      while (v124 != v123);
      v125 = *((_QWORD *)v2 + 365);
    }
    *((_QWORD *)v2 + 366) = v123;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 368) + 40))(*((_QWORD *)v2 + 368), v125, *((_QWORD *)v2 + 367) - v125);
  }
  v127 = *((_QWORD *)v2 + 364);
  *((_QWORD *)v2 + 364) = 0;
  if (v127)
    MEMORY[0x18D76437C](v127, 0x1000C40504FFAC1);
  v128 = (void *)*((_QWORD *)v2 + 361);
  if (v128)
  {
    *((_QWORD *)v2 + 362) = v128;
    operator delete(v128);
  }
  std::mutex::~mutex((std::mutex *)((char *)v2 + 2728));
  v129 = *((_QWORD *)v2 + 337);
  if (v129)
  {
    v130 = *((_QWORD *)v2 + 338);
    v131 = *((_QWORD *)v2 + 337);
    if (v130 != v129)
    {
      v132 = *((_QWORD *)v2 + 338);
      do
      {
        v134 = *(_QWORD *)(v132 - 32);
        v132 -= 32;
        v133 = v134;
        if (v134)
        {
          *(_QWORD *)(v130 - 24) = v133;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v130 - 8) + 40))(*(_QWORD *)(v130 - 8), v133, *(_QWORD *)(v130 - 16) - v133);
        }
        v130 = v132;
      }
      while (v132 != v129);
      v131 = *((_QWORD *)v2 + 337);
    }
    *((_QWORD *)v2 + 338) = v129;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 340) + 40))(*((_QWORD *)v2 + 340), v131, *((_QWORD *)v2 + 339) - v131);
  }
  v135 = *((_QWORD *)v2 + 333);
  if (v135)
  {
    v136 = *((_QWORD *)v2 + 334);
    v137 = *((_QWORD *)v2 + 333);
    if (v136 != v135)
    {
      v138 = *((_QWORD *)v2 + 334);
      do
      {
        v140 = *(_QWORD *)(v138 - 32);
        v138 -= 32;
        v139 = v140;
        if (v140)
        {
          *(_QWORD *)(v136 - 24) = v139;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v136 - 8) + 40))(*(_QWORD *)(v136 - 8), v139, *(_QWORD *)(v136 - 16) - v139);
        }
        v136 = v138;
      }
      while (v138 != v135);
      v137 = *((_QWORD *)v2 + 333);
    }
    *((_QWORD *)v2 + 334) = v135;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 336) + 40))(*((_QWORD *)v2 + 336), v137, *((_QWORD *)v2 + 335) - v137);
  }
  v141 = *((_QWORD *)v2 + 329);
  if (v141)
  {
    v142 = *((_QWORD *)v2 + 330);
    v143 = *((_QWORD *)v2 + 329);
    if (v142 != v141)
    {
      v144 = *((_QWORD *)v2 + 330);
      do
      {
        v146 = *(_QWORD *)(v144 - 32);
        v144 -= 32;
        v145 = v146;
        if (v146)
        {
          *(_QWORD *)(v142 - 24) = v145;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v142 - 8) + 40))(*(_QWORD *)(v142 - 8), v145, *(_QWORD *)(v142 - 16) - v145);
        }
        v142 = v144;
      }
      while (v144 != v141);
      v143 = *((_QWORD *)v2 + 329);
    }
    *((_QWORD *)v2 + 330) = v141;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 332) + 40))(*((_QWORD *)v2 + 332), v143, *((_QWORD *)v2 + 331) - v143);
  }
  v147 = *((_QWORD *)v2 + 325);
  if (v147)
  {
    v148 = *((_QWORD *)v2 + 326);
    v149 = *((_QWORD *)v2 + 325);
    if (v148 != v147)
    {
      v150 = *((_QWORD *)v2 + 326);
      do
      {
        v152 = *(_QWORD *)(v150 - 32);
        v150 -= 32;
        v151 = v152;
        if (v152)
        {
          *(_QWORD *)(v148 - 24) = v151;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v148 - 8) + 40))(*(_QWORD *)(v148 - 8), v151, *(_QWORD *)(v148 - 16) - v151);
        }
        v148 = v150;
      }
      while (v150 != v147);
      v149 = *((_QWORD *)v2 + 325);
    }
    *((_QWORD *)v2 + 326) = v147;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 328) + 40))(*((_QWORD *)v2 + 328), v149, *((_QWORD *)v2 + 327) - v149);
  }
  v153 = *((_QWORD *)v2 + 321);
  if (v153)
  {
    v154 = *((_QWORD *)v2 + 322);
    v155 = *((_QWORD *)v2 + 321);
    if (v154 != v153)
    {
      v156 = *((_QWORD *)v2 + 322);
      do
      {
        v158 = *(_QWORD *)(v156 - 32);
        v156 -= 32;
        v157 = v158;
        if (v158)
        {
          *(_QWORD *)(v154 - 24) = v157;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v154 - 8) + 40))(*(_QWORD *)(v154 - 8), v157, *(_QWORD *)(v154 - 16) - v157);
        }
        v154 = v156;
      }
      while (v156 != v153);
      v155 = *((_QWORD *)v2 + 321);
    }
    *((_QWORD *)v2 + 322) = v153;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 324) + 40))(*((_QWORD *)v2 + 324), v155, *((_QWORD *)v2 + 323) - v155);
  }
  v159 = *((_QWORD *)v2 + 317);
  if (v159)
  {
    v160 = *((_QWORD *)v2 + 318);
    v161 = *((_QWORD *)v2 + 317);
    if (v160 != v159)
    {
      v162 = *((_QWORD *)v2 + 318);
      do
      {
        v164 = *(_QWORD *)(v162 - 32);
        v162 -= 32;
        v163 = v164;
        if (v164)
        {
          *(_QWORD *)(v160 - 24) = v163;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v160 - 8) + 40))(*(_QWORD *)(v160 - 8), v163, *(_QWORD *)(v160 - 16) - v163);
        }
        v160 = v162;
      }
      while (v162 != v159);
      v161 = *((_QWORD *)v2 + 317);
    }
    *((_QWORD *)v2 + 318) = v159;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 320) + 40))(*((_QWORD *)v2 + 320), v161, *((_QWORD *)v2 + 319) - v161);
  }
  v165 = *((_QWORD *)v2 + 313);
  if (v165)
  {
    v166 = *((_QWORD *)v2 + 314);
    v167 = *((_QWORD *)v2 + 313);
    if (v166 != v165)
    {
      v168 = *((_QWORD *)v2 + 314);
      do
      {
        v170 = *(_QWORD *)(v168 - 32);
        v168 -= 32;
        v169 = v170;
        if (v170)
        {
          *(_QWORD *)(v166 - 24) = v169;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v166 - 8) + 40))(*(_QWORD *)(v166 - 8), v169, *(_QWORD *)(v166 - 16) - v169);
        }
        v166 = v168;
      }
      while (v168 != v165);
      v167 = *((_QWORD *)v2 + 313);
    }
    *((_QWORD *)v2 + 314) = v165;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 316) + 40))(*((_QWORD *)v2 + 316), v167, *((_QWORD *)v2 + 315) - v167);
  }
  v171 = (void *)*((_QWORD *)v2 + 307);
  if (v171)
  {
    *((_QWORD *)v2 + 308) = v171;
    operator delete(v171);
  }
  v172 = *((_QWORD *)v2 + 303);
  if (v172)
  {
    *((_QWORD *)v2 + 304) = v172;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 306) + 40))(*((_QWORD *)v2 + 306), v172, *((_QWORD *)v2 + 305) - v172);
  }
  v173 = (_QWORD *)*((_QWORD *)v2 + 300);
  if (v173)
  {
    do
    {
      v174 = (_QWORD *)*v173;
      operator delete(v173);
      v173 = v174;
    }
    while (v174);
  }
  v175 = (void *)*((_QWORD *)v2 + 298);
  *((_QWORD *)v2 + 298) = 0;
  if (v175)
    operator delete(v175);
  v176 = *((_QWORD *)v2 + 294);
  if (v176)
  {
    *((_QWORD *)v2 + 295) = v176;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 297) + 40))(*((_QWORD *)v2 + 297), v176, *((_QWORD *)v2 + 296) - v176);
  }
  v177 = *((_QWORD *)v2 + 290);
  if (v177)
  {
    v178 = *((_QWORD *)v2 + 291);
    v179 = *((_QWORD *)v2 + 290);
    if (v178 != v177)
    {
      do
      {
        v180 = *(std::__shared_weak_count **)(v178 - 32);
        if (v180)
        {
          v181 = (unint64_t *)&v180->__shared_owners_;
          do
            v182 = __ldaxr(v181);
          while (__stlxr(v182 - 1, v181));
          if (!v182)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v180->__on_zero_shared)(v180, v179);
            std::__shared_weak_count::__release_weak(v180);
          }
        }
        v178 -= 40;
      }
      while (v178 != v177);
      v179 = *((_QWORD *)v2 + 290);
    }
    *((_QWORD *)v2 + 291) = v177;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 293) + 40))(*((_QWORD *)v2 + 293), v179, *((_QWORD *)v2 + 292) - v179);
  }
  v183 = *((_QWORD *)v2 + 282);
  if (v183)
  {
    *((_QWORD *)v2 + 283) = v183;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 285) + 40))(*((_QWORD *)v2 + 285), v183, *((_QWORD *)v2 + 284) - v183);
  }
  v184 = *((_QWORD *)v2 + 275);
  if (v184)
  {
    v185 = *((_QWORD *)v2 + 276);
    v186 = *((_QWORD *)v2 + 275);
    if (v185 != v184)
    {
      do
      {
        v187 = *(std::__shared_weak_count **)(v185 - 16);
        if (v187)
        {
          v188 = (unint64_t *)&v187->__shared_owners_;
          do
            v189 = __ldaxr(v188);
          while (__stlxr(v189 - 1, v188));
          if (!v189)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v187->__on_zero_shared)(v187, v186);
            std::__shared_weak_count::__release_weak(v187);
          }
        }
        v185 -= 72;
      }
      while (v185 != v184);
      v186 = *((_QWORD *)v2 + 275);
    }
    *((_QWORD *)v2 + 276) = v184;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 278) + 40))(*((_QWORD *)v2 + 278), v186, *((_QWORD *)v2 + 277) - v186);
  }
  v190 = *((_QWORD *)v2 + 263);
  if (v190)
  {
    *((_QWORD *)v2 + 264) = v190;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 266) + 40))(*((_QWORD *)v2 + 266), v190, *((_QWORD *)v2 + 265) - v190);
  }
  v191 = *((_QWORD *)v2 + 259);
  if (v191)
  {
    v192 = *((_QWORD *)v2 + 260);
    v193 = *((_QWORD *)v2 + 259);
    if (v192 != v191)
    {
      do
      {
        v195 = *(_QWORD *)(v192 - 32);
        if (v195)
        {
          v196 = *(_QWORD *)(v192 - 24);
          v194 = *(_QWORD *)(v192 - 32);
          if (v196 != v195)
          {
            do
            {
              v197 = *(std::__shared_weak_count **)(v196 - 8);
              if (v197)
              {
                v198 = (unint64_t *)&v197->__shared_owners_;
                do
                  v199 = __ldaxr(v198);
                while (__stlxr(v199 - 1, v198));
                if (!v199)
                {
                  ((void (*)(std::__shared_weak_count *, uint64_t))v197->__on_zero_shared)(v197, v194);
                  std::__shared_weak_count::__release_weak(v197);
                }
              }
              v196 -= 32;
            }
            while (v196 != v195);
            v194 = *(_QWORD *)(v192 - 32);
          }
          *(_QWORD *)(v192 - 24) = v195;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v192 - 8) + 40))(*(_QWORD *)(v192 - 8), v194, *(_QWORD *)(v192 - 16) - v194);
        }
        v192 -= 40;
      }
      while (v192 != v191);
      v193 = *((_QWORD *)v2 + 259);
    }
    *((_QWORD *)v2 + 260) = v191;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 262) + 40))(*((_QWORD *)v2 + 262), v193, *((_QWORD *)v2 + 261) - v193);
  }
  v200 = *((_QWORD *)v2 + 246);
  if (v200)
  {
    *((_QWORD *)v2 + 247) = v200;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 249) + 40))(*((_QWORD *)v2 + 249), v200, *((_QWORD *)v2 + 248) - v200);
  }
  v201 = (_QWORD *)*((_QWORD *)v2 + 241);
  if (v201)
  {
    do
    {
      v202 = (_QWORD *)*v201;
      operator delete(v201);
      v201 = v202;
    }
    while (v202);
  }
  v203 = (void *)*((_QWORD *)v2 + 239);
  *((_QWORD *)v2 + 239) = 0;
  if (v203)
    operator delete(v203);
  v204 = *((_QWORD *)v2 + 215);
  if (v204)
  {
    v205 = *((_QWORD *)v2 + 216);
    v206 = *((_QWORD *)v2 + 215);
    if (v205 != v204)
    {
      do
      {
        v207 = *(std::__shared_weak_count **)(v205 - 8);
        if (v207)
        {
          v208 = (unint64_t *)&v207->__shared_owners_;
          do
            v209 = __ldaxr(v208);
          while (__stlxr(v209 - 1, v208));
          if (!v209)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v207->__on_zero_shared)(v207, v206);
            std::__shared_weak_count::__release_weak(v207);
          }
        }
        v205 -= 16;
      }
      while (v205 != v204);
      v206 = *((_QWORD *)v2 + 215);
    }
    *((_QWORD *)v2 + 216) = v204;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 218) + 40))(*((_QWORD *)v2 + 218), v206, *((_QWORD *)v2 + 217) - v206);
  }
  v210 = *((_QWORD *)v2 + 195);
  if (v210)
  {
    v211 = *((_QWORD *)v2 + 196);
    v212 = *((_QWORD *)v2 + 195);
    if (v211 == v210)
    {
LABEL_324:
      *((_QWORD *)v2 + 196) = v210;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 198) + 40))(*((_QWORD *)v2 + 198), v212, *((_QWORD *)v2 + 197) - v212);
      goto LABEL_325;
    }
    while (2)
    {
      v213 = *(std::__shared_weak_count **)(v211 - 216);
      if (!v213)
        goto LABEL_319;
      v214 = (unint64_t *)&v213->__shared_owners_;
      do
        v215 = __ldaxr(v214);
      while (__stlxr(v215 - 1, v214));
      if (!v215)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v213->__on_zero_shared)(v213, v212);
        std::__shared_weak_count::__release_weak(v213);
        v216 = *(std::__shared_weak_count **)(v211 - 240);
        if (v216)
LABEL_320:
          std::__shared_weak_count::__release_weak(v216);
      }
      else
      {
LABEL_319:
        v216 = *(std::__shared_weak_count **)(v211 - 240);
        if (v216)
          goto LABEL_320;
      }
      v211 -= 248;
      if (v211 == v210)
      {
        v212 = *((_QWORD *)v2 + 195);
        goto LABEL_324;
      }
      continue;
    }
  }
LABEL_325:
  v217 = *((_QWORD *)v2 + 183);
  if (v217)
  {
    v218 = *((_QWORD *)v2 + 184);
    v219 = *((_QWORD *)v2 + 183);
    if (v218 == v217)
    {
LABEL_338:
      *((_QWORD *)v2 + 184) = v217;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 186) + 40))(*((_QWORD *)v2 + 186), v219, *((_QWORD *)v2 + 185) - v219);
      goto LABEL_339;
    }
    while (2)
    {
      v220 = *(std::__shared_weak_count **)(v218 - 72);
      if (!v220)
        goto LABEL_333;
      v221 = (unint64_t *)&v220->__shared_owners_;
      do
        v222 = __ldaxr(v221);
      while (__stlxr(v222 - 1, v221));
      if (!v222)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v220->__on_zero_shared)(v220, v219);
        std::__shared_weak_count::__release_weak(v220);
        v223 = *(std::__shared_weak_count **)(v218 - 96);
        if (v223)
LABEL_334:
          std::__shared_weak_count::__release_weak(v223);
      }
      else
      {
LABEL_333:
        v223 = *(std::__shared_weak_count **)(v218 - 96);
        if (v223)
          goto LABEL_334;
      }
      v218 -= 104;
      if (v218 == v217)
      {
        v219 = *((_QWORD *)v2 + 183);
        goto LABEL_338;
      }
      continue;
    }
  }
LABEL_339:
  v224 = *((_QWORD *)v2 + 176);
  if (v224)
  {
    v225 = *((_QWORD *)v2 + 177);
    v226 = *((_QWORD *)v2 + 176);
    if (v225 == v224)
    {
LABEL_352:
      *((_QWORD *)v2 + 177) = v224;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 179) + 40))(*((_QWORD *)v2 + 179), v226, *((_QWORD *)v2 + 178) - v226);
      goto LABEL_353;
    }
    while (2)
    {
      v227 = v225 - 344;
      v228 = *(std::__shared_weak_count **)(v225 - 312);
      if (!v228)
        goto LABEL_347;
      v229 = (unint64_t *)&v228->__shared_owners_;
      do
        v230 = __ldaxr(v229);
      while (__stlxr(v230 - 1, v229));
      if (!v230)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v228->__on_zero_shared)(v228, v226);
        std::__shared_weak_count::__release_weak(v228);
        v231 = *(std::__shared_weak_count **)(v225 - 336);
        if (v231)
LABEL_348:
          std::__shared_weak_count::__release_weak(v231);
      }
      else
      {
LABEL_347:
        v231 = *(std::__shared_weak_count **)(v225 - 336);
        if (v231)
          goto LABEL_348;
      }
      v225 -= 344;
      if (v227 == v224)
      {
        v226 = *((_QWORD *)v2 + 176);
        goto LABEL_352;
      }
      continue;
    }
  }
LABEL_353:
  v232 = *((_QWORD *)v2 + 168);
  if (v232)
  {
    v233 = *((_QWORD *)v2 + 169);
    v234 = *((_QWORD *)v2 + 168);
    if (v233 != v232)
    {
      do
      {
        v235 = *(std::__shared_weak_count **)(v233 - 176);
        if (v235)
          std::__shared_weak_count::__release_weak(v235);
        v233 -= 184;
      }
      while (v233 != v232);
      v234 = *((_QWORD *)v2 + 168);
    }
    *((_QWORD *)v2 + 169) = v232;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 171) + 40))(*((_QWORD *)v2 + 171), v234, *((_QWORD *)v2 + 170) - v234);
  }
  v236 = *((_QWORD *)v2 + 164);
  if (v236)
  {
    v237 = *((_QWORD *)v2 + 165);
    v238 = *((_QWORD *)v2 + 164);
    if (v237 != v236)
    {
      do
      {
        v239 = *(std::__shared_weak_count **)(v237 - 40);
        if (v239)
        {
          v240 = (unint64_t *)&v239->__shared_owners_;
          do
            v241 = __ldaxr(v240);
          while (__stlxr(v241 - 1, v240));
          if (!v241)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v239->__on_zero_shared)(v239, v238);
            std::__shared_weak_count::__release_weak(v239);
          }
        }
        v237 -= 72;
      }
      while (v237 != v236);
      v238 = *((_QWORD *)v2 + 164);
    }
    *((_QWORD *)v2 + 165) = v236;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 167) + 40))(*((_QWORD *)v2 + 167), v238, *((_QWORD *)v2 + 166) - v238);
  }
  v242 = *((_QWORD *)v2 + 160);
  if (v242)
  {
    v243 = *((_QWORD *)v2 + 161);
    v244 = *((_QWORD *)v2 + 160);
    if (v243 == v242)
    {
LABEL_385:
      *((_QWORD *)v2 + 161) = v242;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 163) + 40))(*((_QWORD *)v2 + 163), v244, *((_QWORD *)v2 + 162) - v244);
      goto LABEL_386;
    }
    while (2)
    {
      v245 = *(std::__shared_weak_count **)(v243 - 72);
      if (!v245)
        goto LABEL_380;
      v246 = (unint64_t *)&v245->__shared_owners_;
      do
        v247 = __ldaxr(v246);
      while (__stlxr(v247 - 1, v246));
      if (!v247)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v245->__on_zero_shared)(v245, v244);
        std::__shared_weak_count::__release_weak(v245);
        v248 = *(std::__shared_weak_count **)(v243 - 96);
        if (v248)
LABEL_381:
          std::__shared_weak_count::__release_weak(v248);
      }
      else
      {
LABEL_380:
        v248 = *(std::__shared_weak_count **)(v243 - 96);
        if (v248)
          goto LABEL_381;
      }
      v243 -= 104;
      if (v243 == v242)
      {
        v244 = *((_QWORD *)v2 + 160);
        goto LABEL_385;
      }
      continue;
    }
  }
LABEL_386:
  v249 = *((_QWORD *)v2 + 146);
  if (v249)
  {
    v250 = *((_QWORD *)v2 + 147);
    v251 = *((_QWORD *)v2 + 146);
    if (v250 != v249)
    {
      do
      {
        v252 = *(std::__shared_weak_count **)(v250 - 8);
        if (v252)
        {
          v253 = (unint64_t *)&v252->__shared_owners_;
          do
            v254 = __ldaxr(v253);
          while (__stlxr(v254 - 1, v253));
          if (!v254)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v252->__on_zero_shared)(v252, v251);
            std::__shared_weak_count::__release_weak(v252);
          }
        }
        v250 -= 16;
      }
      while (v250 != v249);
      v251 = *((_QWORD *)v2 + 146);
    }
    *((_QWORD *)v2 + 147) = v249;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 149) + 40))(*((_QWORD *)v2 + 149), v251, *((_QWORD *)v2 + 148) - v251);
  }
  v255 = *((_QWORD *)v2 + 142);
  if (v255)
  {
    v256 = *((_QWORD *)v2 + 143);
    v257 = *((_QWORD *)v2 + 142);
    if (v256 != v255)
    {
      do
      {
        v258 = *(std::__shared_weak_count **)(v256 - 8);
        if (v258)
        {
          v259 = (unint64_t *)&v258->__shared_owners_;
          do
            v260 = __ldaxr(v259);
          while (__stlxr(v260 - 1, v259));
          if (!v260)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v258->__on_zero_shared)(v258, v257);
            std::__shared_weak_count::__release_weak(v258);
          }
        }
        v256 -= 16;
      }
      while (v256 != v255);
      v257 = *((_QWORD *)v2 + 142);
    }
    *((_QWORD *)v2 + 143) = v255;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 145) + 40))(*((_QWORD *)v2 + 145), v257, *((_QWORD *)v2 + 144) - v257);
  }
  std::__tree<std::shared_ptr<FeatureStyleAttributes const>,FeatureStyleAttributesSet::FeatureStyleAttributesCompare,std::allocator<std::shared_ptr<FeatureStyleAttributes const>>>::destroy((uint64_t)v2 + 1112, *((_QWORD **)v2 + 140));
  v261 = *((_QWORD *)v2 + 135);
  if (v261)
  {
    *((_QWORD *)v2 + 136) = v261;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 138) + 40))(*((_QWORD *)v2 + 138), v261, *((_QWORD *)v2 + 137) - v261);
  }
  v262 = *((_QWORD *)v2 + 127);
  if (v262)
  {
    *((_QWORD *)v2 + 128) = v262;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 130) + 40))(*((_QWORD *)v2 + 130), v262, *((_QWORD *)v2 + 129) - v262);
  }
  if (*((char *)v2 + 1015) < 0)
  {
    operator delete(*((void **)v2 + 124));
    if (*((char *)v2 + 991) < 0)
      goto LABEL_417;
LABEL_414:
    v263 = *((_QWORD *)v2 + 117);
    if (v263)
    {
LABEL_418:
      *((_QWORD *)v2 + 118) = v263;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 120) + 40))(*((_QWORD *)v2 + 120), v263, *((_QWORD *)v2 + 119) - v263);
    }
  }
  else
  {
    if ((*((char *)v2 + 991) & 0x80000000) == 0)
      goto LABEL_414;
LABEL_417:
    operator delete(*((void **)v2 + 121));
    v263 = *((_QWORD *)v2 + 117);
    if (v263)
      goto LABEL_418;
  }
  v264 = *((_QWORD *)v2 + 113);
  if (v264)
  {
    *((_QWORD *)v2 + 114) = v264;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 116) + 40))(*((_QWORD *)v2 + 116), v264, *((_QWORD *)v2 + 115) - v264);
  }
  v265 = *((_QWORD *)v2 + 107);
  if (v265)
  {
    *((_QWORD *)v2 + 108) = v265;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 110) + 40))(*((_QWORD *)v2 + 110), v265, *((_QWORD *)v2 + 109) - v265);
  }
  v266 = (_QWORD *)*((_QWORD *)v2 + 79);
  if (v266)
  {
    do
    {
      v273 = (_QWORD *)*v266;
      v274 = (void *)v266[3];
      if (v274 != (void *)v266[5])
        free(v274);
      operator delete(v266);
      v266 = v273;
    }
    while (v273);
  }
  v267 = (void *)*((_QWORD *)v2 + 77);
  *((_QWORD *)v2 + 77) = 0;
  if (v267)
    operator delete(v267);
  v268 = *((_QWORD *)v2 + 71);
  if (v268)
  {
    *((_QWORD *)v2 + 72) = v268;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 74) + 40))(*((_QWORD *)v2 + 74), v268, *((_QWORD *)v2 + 73) - v268);
  }
  v269 = *((_QWORD *)v2 + 67);
  if (v269)
  {
    *((_QWORD *)v2 + 68) = v269;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 70) + 40))(*((_QWORD *)v2 + 70), v269, *((_QWORD *)v2 + 69) - v269);
  }
  v270 = *((_QWORD *)v2 + 63);
  if (v270)
  {
    v271 = *((_QWORD *)v2 + 64);
    v272 = *((_QWORD *)v2 + 63);
    if (v271 == v270)
    {
LABEL_446:
      *((_QWORD *)v2 + 64) = v270;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 66) + 40))(*((_QWORD *)v2 + 66), v272, *((_QWORD *)v2 + 65) - v272);
      goto LABEL_447;
    }
    while (2)
    {
      v275 = *(std::__shared_weak_count **)(v271 - 192);
      if (!v275)
        goto LABEL_441;
      v276 = (unint64_t *)&v275->__shared_owners_;
      do
        v277 = __ldaxr(v276);
      while (__stlxr(v277 - 1, v276));
      if (!v277)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v275->__on_zero_shared)(v275, v272);
        std::__shared_weak_count::__release_weak(v275);
        v278 = *(std::__shared_weak_count **)(v271 - 216);
        if (v278)
LABEL_442:
          std::__shared_weak_count::__release_weak(v278);
      }
      else
      {
LABEL_441:
        v278 = *(std::__shared_weak_count **)(v271 - 216);
        if (v278)
          goto LABEL_442;
      }
      v271 -= 224;
      if (v271 == v270)
      {
        v272 = *((_QWORD *)v2 + 63);
        goto LABEL_446;
      }
      continue;
    }
  }
LABEL_447:
  v347 = (uint64_t *)((char *)v2 + 472);
  std::vector<GeoCodecs3DBuildingFeature,geo::StdAllocator<GeoCodecs3DBuildingFeature,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v347);
  v347 = (uint64_t *)((char *)v2 + 440);
  std::vector<GeoCodecs3DBuildingFeature,geo::StdAllocator<GeoCodecs3DBuildingFeature,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v347);
  v279 = *((_QWORD *)v2 + 51);
  if (v279)
  {
    v280 = *((_QWORD *)v2 + 52);
    v281 = *((_QWORD *)v2 + 51);
    if (v280 == v279)
    {
LABEL_460:
      *((_QWORD *)v2 + 52) = v279;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 54) + 40))(*((_QWORD *)v2 + 54), v281, *((_QWORD *)v2 + 53) - v281);
      goto LABEL_461;
    }
    while (2)
    {
      v282 = *(std::__shared_weak_count **)(v280 - 104);
      if (!v282)
        goto LABEL_455;
      v283 = (unint64_t *)&v282->__shared_owners_;
      do
        v284 = __ldaxr(v283);
      while (__stlxr(v284 - 1, v283));
      if (!v284)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v282->__on_zero_shared)(v282, v281);
        std::__shared_weak_count::__release_weak(v282);
        v285 = *(std::__shared_weak_count **)(v280 - 128);
        if (v285)
LABEL_456:
          std::__shared_weak_count::__release_weak(v285);
      }
      else
      {
LABEL_455:
        v285 = *(std::__shared_weak_count **)(v280 - 128);
        if (v285)
          goto LABEL_456;
      }
      v280 -= 136;
      if (v280 == v279)
      {
        v281 = *((_QWORD *)v2 + 51);
        goto LABEL_460;
      }
      continue;
    }
  }
LABEL_461:
  v286 = *((_QWORD *)v2 + 47);
  if (v286)
  {
    v287 = *((_QWORD *)v2 + 48);
    v288 = *((_QWORD *)v2 + 47);
    if (v287 == v286)
    {
LABEL_474:
      *((_QWORD *)v2 + 48) = v286;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 50) + 40))(*((_QWORD *)v2 + 50), v288, *((_QWORD *)v2 + 49) - v288);
      goto LABEL_475;
    }
    while (2)
    {
      v289 = *(std::__shared_weak_count **)(v287 - 104);
      if (!v289)
        goto LABEL_469;
      v290 = (unint64_t *)&v289->__shared_owners_;
      do
        v291 = __ldaxr(v290);
      while (__stlxr(v291 - 1, v290));
      if (!v291)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v289->__on_zero_shared)(v289, v288);
        std::__shared_weak_count::__release_weak(v289);
        v292 = *(std::__shared_weak_count **)(v287 - 128);
        if (v292)
LABEL_470:
          std::__shared_weak_count::__release_weak(v292);
      }
      else
      {
LABEL_469:
        v292 = *(std::__shared_weak_count **)(v287 - 128);
        if (v292)
          goto LABEL_470;
      }
      v287 -= 136;
      if (v287 == v286)
      {
        v288 = *((_QWORD *)v2 + 47);
        goto LABEL_474;
      }
      continue;
    }
  }
LABEL_475:
  v293 = *((_QWORD *)v2 + 43);
  if (v293)
  {
    *((_QWORD *)v2 + 44) = v293;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 46) + 40))(*((_QWORD *)v2 + 46), v293, *((_QWORD *)v2 + 45) - v293);
  }
  v294 = *((_QWORD *)v2 + 39);
  if (v294)
  {
    *((_QWORD *)v2 + 40) = v294;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 42) + 40))(*((_QWORD *)v2 + 42), v294, *((_QWORD *)v2 + 41) - v294);
  }
  v295 = *((_QWORD *)v2 + 35);
  if (v295)
  {
    v296 = *((_QWORD *)v2 + 36);
    v297 = *((_QWORD *)v2 + 35);
    if (v296 == v295)
    {
LABEL_492:
      *((_QWORD *)v2 + 36) = v295;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 38) + 40))(*((_QWORD *)v2 + 38), v297, *((_QWORD *)v2 + 37) - v297);
      goto LABEL_493;
    }
    while (2)
    {
      v298 = *(std::__shared_weak_count **)(v296 - 104);
      if (!v298)
        goto LABEL_487;
      v299 = (unint64_t *)&v298->__shared_owners_;
      do
        v300 = __ldaxr(v299);
      while (__stlxr(v300 - 1, v299));
      if (!v300)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v298->__on_zero_shared)(v298, v297);
        std::__shared_weak_count::__release_weak(v298);
        v301 = *(std::__shared_weak_count **)(v296 - 128);
        if (v301)
LABEL_488:
          std::__shared_weak_count::__release_weak(v301);
      }
      else
      {
LABEL_487:
        v301 = *(std::__shared_weak_count **)(v296 - 128);
        if (v301)
          goto LABEL_488;
      }
      v296 -= 136;
      if (v296 == v295)
      {
        v297 = *((_QWORD *)v2 + 35);
        goto LABEL_492;
      }
      continue;
    }
  }
LABEL_493:
  v302 = *((_QWORD *)v2 + 27);
  if (v302)
  {
    v303 = *((_QWORD *)v2 + 28);
    v304 = *((_QWORD *)v2 + 27);
    if (v303 == v302)
    {
LABEL_506:
      *((_QWORD *)v2 + 28) = v302;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 30) + 40))(*((_QWORD *)v2 + 30), v304, *((_QWORD *)v2 + 29) - v304);
      goto LABEL_507;
    }
    while (2)
    {
      v305 = *(std::__shared_weak_count **)(v303 - 120);
      if (!v305)
        goto LABEL_501;
      v306 = (unint64_t *)&v305->__shared_owners_;
      do
        v307 = __ldaxr(v306);
      while (__stlxr(v307 - 1, v306));
      if (!v307)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v305->__on_zero_shared)(v305, v304);
        std::__shared_weak_count::__release_weak(v305);
        v308 = *(std::__shared_weak_count **)(v303 - 144);
        if (v308)
LABEL_502:
          std::__shared_weak_count::__release_weak(v308);
      }
      else
      {
LABEL_501:
        v308 = *(std::__shared_weak_count **)(v303 - 144);
        if (v308)
          goto LABEL_502;
      }
      v303 -= 152;
      if (v303 == v302)
      {
        v304 = *((_QWORD *)v2 + 27);
        goto LABEL_506;
      }
      continue;
    }
  }
LABEL_507:
  v309 = *((_QWORD *)v2 + 23);
  if (v309)
  {
    v310 = *((_QWORD *)v2 + 24);
    v311 = *((_QWORD *)v2 + 23);
    if (v310 == v309)
    {
LABEL_520:
      *((_QWORD *)v2 + 24) = v309;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 26) + 40))(*((_QWORD *)v2 + 26), v311, *((_QWORD *)v2 + 25) - v311);
      goto LABEL_521;
    }
    while (2)
    {
      v312 = *(std::__shared_weak_count **)(v310 - 112);
      if (!v312)
        goto LABEL_515;
      v313 = (unint64_t *)&v312->__shared_owners_;
      do
        v314 = __ldaxr(v313);
      while (__stlxr(v314 - 1, v313));
      if (!v314)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v312->__on_zero_shared)(v312, v311);
        std::__shared_weak_count::__release_weak(v312);
        v315 = *(std::__shared_weak_count **)(v310 - 136);
        if (v315)
LABEL_516:
          std::__shared_weak_count::__release_weak(v315);
      }
      else
      {
LABEL_515:
        v315 = *(std::__shared_weak_count **)(v310 - 136);
        if (v315)
          goto LABEL_516;
      }
      v310 -= 144;
      if (v310 == v309)
      {
        v311 = *((_QWORD *)v2 + 23);
        goto LABEL_520;
      }
      continue;
    }
  }
LABEL_521:
  v316 = *((_QWORD *)v2 + 19);
  if (v316)
  {
    v317 = *((_QWORD *)v2 + 20);
    v318 = *((_QWORD *)v2 + 19);
    if (v317 == v316)
    {
LABEL_534:
      *((_QWORD *)v2 + 20) = v316;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 22) + 40))(*((_QWORD *)v2 + 22), v318, *((_QWORD *)v2 + 21) - v318);
      goto LABEL_535;
    }
    while (2)
    {
      v319 = *(std::__shared_weak_count **)(v317 - 144);
      if (!v319)
        goto LABEL_529;
      v320 = (unint64_t *)&v319->__shared_owners_;
      do
        v321 = __ldaxr(v320);
      while (__stlxr(v321 - 1, v320));
      if (!v321)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v319->__on_zero_shared)(v319, v318);
        std::__shared_weak_count::__release_weak(v319);
        v322 = *(std::__shared_weak_count **)(v317 - 168);
        if (v322)
LABEL_530:
          std::__shared_weak_count::__release_weak(v322);
      }
      else
      {
LABEL_529:
        v322 = *(std::__shared_weak_count **)(v317 - 168);
        if (v322)
          goto LABEL_530;
      }
      v317 -= 176;
      if (v317 == v316)
      {
        v318 = *((_QWORD *)v2 + 19);
        goto LABEL_534;
      }
      continue;
    }
  }
LABEL_535:
  v323 = *((_QWORD *)v2 + 12);
  if (v323)
  {
    v324 = *((_QWORD *)v2 + 13);
    v325 = *((_QWORD *)v2 + 12);
    if (v324 == v323)
    {
LABEL_548:
      *((_QWORD *)v2 + 13) = v323;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 15) + 40))(*((_QWORD *)v2 + 15), v325, *((_QWORD *)v2 + 14) - v325);
      goto LABEL_549;
    }
    while (2)
    {
      v326 = *(std::__shared_weak_count **)(v324 - 96);
      if (!v326)
        goto LABEL_543;
      v327 = (unint64_t *)&v326->__shared_owners_;
      do
        v328 = __ldaxr(v327);
      while (__stlxr(v328 - 1, v327));
      if (!v328)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v326->__on_zero_shared)(v326, v325);
        std::__shared_weak_count::__release_weak(v326);
        v329 = *(std::__shared_weak_count **)(v324 - 120);
        if (v329)
LABEL_544:
          std::__shared_weak_count::__release_weak(v329);
      }
      else
      {
LABEL_543:
        v329 = *(std::__shared_weak_count **)(v324 - 120);
        if (v329)
          goto LABEL_544;
      }
      v324 -= 128;
      if (v324 == v323)
      {
        v325 = *((_QWORD *)v2 + 12);
        goto LABEL_548;
      }
      continue;
    }
  }
LABEL_549:
  v330 = *((_QWORD *)v2 + 8);
  if (v330)
  {
    v331 = *((_QWORD *)v2 + 9);
    v332 = *((_QWORD *)v2 + 8);
    if (v331 == v330)
    {
LABEL_562:
      *((_QWORD *)v2 + 9) = v330;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 11) + 40))(*((_QWORD *)v2 + 11), v332, *((_QWORD *)v2 + 10) - v332);
      goto LABEL_563;
    }
    while (2)
    {
      v333 = *(std::__shared_weak_count **)(v331 - 72);
      if (!v333)
        goto LABEL_557;
      v334 = (unint64_t *)&v333->__shared_owners_;
      do
        v335 = __ldaxr(v334);
      while (__stlxr(v335 - 1, v334));
      if (!v335)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v333->__on_zero_shared)(v333, v332);
        std::__shared_weak_count::__release_weak(v333);
        v336 = *(std::__shared_weak_count **)(v331 - 96);
        if (v336)
LABEL_558:
          std::__shared_weak_count::__release_weak(v336);
      }
      else
      {
LABEL_557:
        v336 = *(std::__shared_weak_count **)(v331 - 96);
        if (v336)
          goto LABEL_558;
      }
      v331 -= 104;
      if (v331 == v330)
      {
        v332 = *((_QWORD *)v2 + 8);
        goto LABEL_562;
      }
      continue;
    }
  }
LABEL_563:
  v337 = *((_QWORD *)v2 + 4);
  if (v337)
  {
    v338 = *((_QWORD *)v2 + 5);
    v339 = *((_QWORD *)v2 + 4);
    if (v338 == v337)
    {
LABEL_576:
      *((_QWORD *)v2 + 5) = v337;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 7) + 40))(*((_QWORD *)v2 + 7), v339, *((_QWORD *)v2 + 6) - v339);
      goto LABEL_577;
    }
    while (2)
    {
      v340 = *(std::__shared_weak_count **)(v338 - 136);
      if (!v340)
        goto LABEL_571;
      v341 = (unint64_t *)&v340->__shared_owners_;
      do
        v342 = __ldaxr(v341);
      while (__stlxr(v342 - 1, v341));
      if (!v342)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v340->__on_zero_shared)(v340, v339);
        std::__shared_weak_count::__release_weak(v340);
        v343 = *(std::__shared_weak_count **)(v338 - 160);
        if (v343)
LABEL_572:
          std::__shared_weak_count::__release_weak(v343);
      }
      else
      {
LABEL_571:
        v343 = *(std::__shared_weak_count **)(v338 - 160);
        if (v343)
          goto LABEL_572;
      }
      v338 -= 168;
      if (v338 == v337)
      {
        v339 = *((_QWORD *)v2 + 4);
        goto LABEL_576;
      }
      continue;
    }
  }
LABEL_577:
  v344 = (std::__shared_weak_count *)*((_QWORD *)v2 + 3);
  if (v344)
  {
    v345 = (unint64_t *)&v344->__shared_owners_;
    do
      v346 = __ldaxr(v345);
    while (__stlxr(v346 - 1, v345));
    if (!v346)
    {
      ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
      std::__shared_weak_count::__release_weak(v344);
    }
  }
}

geo::codec::Allocator *geo::codec::VertexPoolDealloc(geo::codec::Allocator *this, GeoCodecsVertexPool *a2)
{
  geo::codec::Allocator *v2;
  uint64_t v3;
  geo::codec::Allocator *v4;
  uint64_t v5;
  geo::codec::Allocator *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (this)
  {
    v2 = this;
    v3 = geo::codec::Allocator::instance(this);
    v4 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)v2 + 1), 0);
    v5 = geo::codec::Allocator::instance(v4);
    v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)v2 + 4), 0);
    if (*((_QWORD *)v2 + 3))
    {
      v7 = geo::codec::Allocator::instance(v6);
      v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)v2 + 3), 0);
    }
    if (*((_QWORD *)v2 + 7))
    {
      v8 = geo::codec::Allocator::instance(v6);
      v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)v2 + 7), 0);
    }
    if (*((_QWORD *)v2 + 8))
    {
      v9 = geo::codec::Allocator::instance(v6);
      v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 40))(v9, *((_QWORD *)v2 + 8), 0);
    }
    v10 = geo::codec::Allocator::instance(v6);
    return (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v10 + 40))(v10, v2, 0);
  }
  return this;
}

void sub_188698028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<`anonymous namespace'::RequesterTileKeys>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id WeakRetained;
  uint64_t v8;
  void *v9;

  if (a2 != a3)
  {
    v3 = a2;
    v5 = *(_QWORD *)(a1 + 8);
    if (a3 != v5)
    {
      v6 = 8 * ((a3 - a2) >> 3);
      do
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + v6));
        objc_storeWeak((id *)v3, WeakRetained);

        v8 = *(_QWORD *)(v3 + v6 + 8);
        *(_QWORD *)(v3 + v6 + 8) = 0;
        v9 = *(void **)(v3 + 8);
        *(_QWORD *)(v3 + 8) = v8;

        *(_QWORD *)(v3 + 16) = *(_QWORD *)(v3 + v6 + 16);
        v3 += 24;
      }
      while (v3 + v6 != v5);
    }
  }
}

void sub_188698C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  uint64_t v31;

  std::__hash_table<std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,unsigned long>,std::__unordered_map_hasher<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,unsigned long>,std::hash<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::equal_to<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::__unordered_map_equal<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,unsigned long>,std::equal_to<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::hash<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::allocator<std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,unsigned long>>>::~__hash_table((uint64_t)&a25);
  std::__hash_table<std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,GEOTileKeyList * {__strong}>,std::__unordered_map_hasher<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,GEOTileKeyList * {__strong}>,std::hash<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::equal_to<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::__unordered_map_equal<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,GEOTileKeyList * {__strong}>,std::equal_to<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::hash<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::allocator<std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,GEOTileKeyList * {__strong}>>>::~__hash_table((uint64_t)&a31);
  a31 = (void **)(v31 - 208);
  std::vector<GEORoadEdge * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZ47__GEOTileLoader_proxy_willGoToNetworkForTiles__EUb1_E3__8NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEEclES7_(uint64_t a1, id *this)
{
  void *v4;
  void *v5;
  GEOTileKeyList *v6;
  uint64_t *v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  _QWORD block[4];
  id v17;
  id v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (((unint64_t)this[15] & 0x42) == 2)
  {
    LoadItem::Requester::fireBeginNetwork((LoadItem::Requester *)this);
    v4 = **(void ***)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v4, "objectForKey:", this[1]);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v5)
      {
        v6 = objc_alloc_init(GEOTileKeyList);
        objc_msgSend(**(id **)(a1 + 32), "setObject:forKey:", v6, this[1], 0);
        v5 = v6;
      }
      objc_msgSend(v5, "addKey:", a1 + 16, v5);

    }
  }
  else
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = this[1];
    v9 = operator new(0x18uLL);
    v9[1] = v7;
    v9[2] = v8;
    v10 = *v7;
    *v9 = *v7;
    *(_QWORD *)(v10 + 8) = v9;
    *v7 = (uint64_t)v9;
    ++v7[2];
    v11 = (void *)MEMORY[0x18D765024](this[13]);
    if (((_BYTE)this[15] & 0x40) != 0)
      _cacheMissErr();
    else
      _noNetErr();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZZZ47__GEOTileLoader_proxy_willGoToNetworkForTiles__EUb1_ENK3__8clERN8LoadItem9RequesterE_block_invoke;
    block[3] = &unk_1E1C00038;
    v19 = *(_OWORD *)(a1 + 16);
    v17 = v12;
    v18 = v11;
    v13 = v12;
    v14 = v11;
    LoadItem::Requester::performAsyncOnCallbackQueue((uint64_t)this, block);

  }
}

void sub_188698F3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_188699144(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void LoadItem::Requester::fireBeginNetwork(LoadItem::Requester *this)
{
  void *v2;
  void *v3;

  *((_BYTE *)this + 136) = 1;
  v2 = (void *)MEMORY[0x18D765024](*((_QWORD *)this + 10));
  if (v2)
  {
    v3 = v2;
    dispatch_async(*((dispatch_queue_t *)this + 7), v2);
    v2 = v3;
  }

}

uint64_t geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = a1;
  v4 = *(id *)(a2 + 8);
  v5 = v3;
  v6 = v4;
  if (v6 == v5)
    v7 = 1;
  else
    v7 = objc_msgSend(v5, "isEqual:", v6);

  return v7;
}

void sub_18869922C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_188699434(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,unsigned long>,std::__unordered_map_hasher<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,unsigned long>,std::hash<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::equal_to<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::__unordered_map_equal<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,unsigned long>,std::equal_to<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::hash<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::allocator<std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,unsigned long>>>::__emplace_unique_key_args<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::piecewise_construct_t const&,std::tuple<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&>,std::tuple<>>(float *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v37;

  v7 = objc_msgSend(*(id *)(a2 + 8), "hash");
  v8 = v7;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if ((geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(*((void **)i + 3), a2) & 1) != 0)return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = *a3;
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr((_QWORD *)i + 2, v15);
  *((_QWORD *)i + 5) = 0;
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *((_QWORD *)a1 + 1);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v25)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = a1 + 4;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_55:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v37 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v37)
          operator delete(v37);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v33 = *(_QWORD **)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *(_QWORD *)i = *v34;
LABEL_72:
    *v34 = i;
    goto LABEL_73;
  }
  *(_QWORD *)i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v33[v3] = a1 + 4;
  if (*(_QWORD *)i)
  {
    v35 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_188699898(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,unsigned long>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void sub_1886999E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,unsigned long>,std::__unordered_map_hasher<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,unsigned long>,std::hash<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::equal_to<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::__unordered_map_equal<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,unsigned long>,std::equal_to<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::hash<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::allocator<std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,unsigned long>>>::~__hash_table(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(void **)v2;
      *((_QWORD *)v2 + 2) = &off_1E1BF6460;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,GEOTileKeyList * {__strong}>,std::__unordered_map_hasher<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,GEOTileKeyList * {__strong}>,std::hash<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::equal_to<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::__unordered_map_equal<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,GEOTileKeyList * {__strong}>,std::equal_to<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::hash<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::allocator<std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,GEOTileKeyList * {__strong}>>>::~__hash_table(uint64_t a1)
{
  id *v2;
  id *v3;
  void *v4;

  v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (id *)*v2;

      v2[2] = &off_1E1BF6460;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_188699C0C(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_18869A090(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t addr_obj::AddressObjectProto::InitAsDefaultInstance(addr_obj::AddressObjectProto *this)
{
  addr_obj::V0AddressObjectProto *v2;
  addr_obj::V1AddressObjectProto *v3;
  addr_obj::VenueInfoProto *v4;
  uint64_t result;

  v2 = (addr_obj::V0AddressObjectProto *)addr_obj::LocalizationProto::default_instance(this);
  *((_QWORD *)this + 3) = v2;
  v3 = (addr_obj::V1AddressObjectProto *)addr_obj::V0AddressObjectProto::default_instance(v2);
  *((_QWORD *)this + 7) = v3;
  v4 = (addr_obj::VenueInfoProto *)addr_obj::V1AddressObjectProto::default_instance(v3);
  *((_QWORD *)this + 8) = v4;
  result = addr_obj::VenueInfoProto::default_instance(v4);
  *((_QWORD *)this + 9) = result;
  return result;
}

uint64_t addr_obj::V1AddressObjectProto::default_instance(addr_obj::V1AddressObjectProto *this)
{
  addr_obj::V1AddressObjectProto *v1;

  v1 = (addr_obj::V1AddressObjectProto *)addr_obj::V1AddressObjectProto::default_instance_(this);
  if (!v1)
    v1 = (addr_obj::V1AddressObjectProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  return addr_obj::V1AddressObjectProto::default_instance_(v1);
}

uint64_t addr_obj::VenueInfoProto::default_instance(addr_obj::VenueInfoProto *this)
{
  addr_obj::VenueInfoProto *v1;

  v1 = (addr_obj::VenueInfoProto *)addr_obj::VenueInfoProto::default_instance_(this);
  if (!v1)
    v1 = (addr_obj::VenueInfoProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  return addr_obj::VenueInfoProto::default_instance_(v1);
}

uint64_t addr_obj::V0AddressObjectProto::default_instance(addr_obj::V0AddressObjectProto *this)
{
  addr_obj::V0AddressObjectProto *v1;

  v1 = (addr_obj::V0AddressObjectProto *)addr_obj::V0AddressObjectProto::default_instance_(this);
  if (!v1)
    v1 = (addr_obj::V0AddressObjectProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  return addr_obj::V0AddressObjectProto::default_instance_(v1);
}

uint64_t addr_obj::V0AddressObjectProto::default_instance_(addr_obj::V0AddressObjectProto *this)
{
  unsigned __int8 v1;
  addr_obj::V0AddressObjectProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50428);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50428))
  {
    v3 = (addr_obj::V0AddressObjectProto *)operator new();
    addr_obj::V0AddressObjectProto::V0AddressObjectProto(v3);
    qword_1EDF50420 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50428);
  }
  return qword_1EDF50420;
}

void sub_18869A1AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40892FDF1FLL);
  __cxa_guard_abort(&qword_1EDF50428);
  _Unwind_Resume(a1);
}

addr_obj::V0AddressObjectProto *addr_obj::V0AddressObjectProto::V0AddressObjectProto(addr_obj::V0AddressObjectProto *this)
{
  *(_QWORD *)this = &off_1E1BF9C60;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  addr_obj::V0AddressObjectProto::SharedCtor(this);
  return this;
}

void sub_18869A22C(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;

  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t *addr_obj::V0AddressObjectProto::SharedCtor(addr_obj::V0AddressObjectProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *result;

  *((_DWORD *)this + 22) = 0;
  v2 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  *((_QWORD *)this + 2) = v2;
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v2);
  *((_QWORD *)this + 3) = v3;
  v4 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((_QWORD *)this + 4) = v4;
  v5 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v4);
  *((_QWORD *)this + 5) = v5;
  v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v5);
  *((_QWORD *)this + 6) = v6;
  v7 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  *((_QWORD *)this + 7) = v7;
  v8 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v7);
  *((_QWORD *)this + 8) = v8;
  v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v8);
  *((_QWORD *)this + 9) = v9;
  result = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9);
  *((_QWORD *)this + 10) = result;
  *((_DWORD *)this + 23) = 0;
  return result;
}

uint64_t addr_obj::LocalizationProto::default_instance(addr_obj::LocalizationProto *this)
{
  addr_obj::LocalizationProto *v1;

  v1 = (addr_obj::LocalizationProto *)addr_obj::LocalizationProto::default_instance_(this);
  if (!v1)
    v1 = (addr_obj::LocalizationProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  return addr_obj::LocalizationProto::default_instance_(v1);
}

long double GEOCalculateDistance(double a1, double a2, double a3, double a4)
{
  return GEOCalculateDistanceRadius(a1, a2, a3, a4, 6367000.0);
}

uint64_t addr_obj::V4AddressObjectProto::default_instance(addr_obj::V4AddressObjectProto *this)
{
  addr_obj::V4AddressObjectProto *v1;

  v1 = (addr_obj::V4AddressObjectProto *)addr_obj::V4AddressObjectProto::default_instance_(this);
  if (!v1)
    v1 = (addr_obj::V4AddressObjectProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  return addr_obj::V4AddressObjectProto::default_instance_(v1);
}

uint64_t addr_obj::V4AddressObjectProto::default_instance_(addr_obj::V4AddressObjectProto *this)
{
  unsigned __int8 v1;
  addr_obj::V4AddressObjectProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50468);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50468))
  {
    v3 = (addr_obj::V4AddressObjectProto *)operator new();
    addr_obj::V4AddressObjectProto::V4AddressObjectProto(v3);
    qword_1EDF50460 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50468);
  }
  return qword_1EDF50460;
}

void sub_18869A734(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40A4A8B666);
  __cxa_guard_abort(&qword_1EDF50468);
  _Unwind_Resume(a1);
}

addr_obj::V4AddressObjectProto *addr_obj::V4AddressObjectProto::V4AddressObjectProto(addr_obj::V4AddressObjectProto *this)
{
  *(_QWORD *)this = &off_1E1BF9F20;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_18869A7A0(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;

  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V3AddressObjectProto::default_instance(addr_obj::V3AddressObjectProto *this)
{
  addr_obj::V3AddressObjectProto *v1;

  v1 = (addr_obj::V3AddressObjectProto *)addr_obj::V3AddressObjectProto::default_instance_(this);
  if (!v1)
    v1 = (addr_obj::V3AddressObjectProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  return addr_obj::V3AddressObjectProto::default_instance_(v1);
}

uint64_t addr_obj::V3AddressObjectProto::default_instance_(addr_obj::V3AddressObjectProto *this)
{
  unsigned __int8 v1;
  addr_obj::V3AddressObjectProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50458);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50458))
  {
    v3 = (addr_obj::V3AddressObjectProto *)operator new();
    addr_obj::V3AddressObjectProto::V3AddressObjectProto(v3);
    qword_1EDF50450 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50458);
  }
  return qword_1EDF50450;
}

void sub_18869A848(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40A4A8B666);
  __cxa_guard_abort(&qword_1EDF50458);
  _Unwind_Resume(a1);
}

addr_obj::V3AddressObjectProto *addr_obj::V3AddressObjectProto::V3AddressObjectProto(addr_obj::V3AddressObjectProto *this)
{
  *(_QWORD *)this = &off_1E1BF9E70;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_18869A8B4(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;

  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

id GEOStringForPhoneNumber(void *String)
{
  BOOL v1;

  if (String)
  {
    v1 = *MEMORY[0x1E0C9B0D0] == (_QWORD)String;
    String = 0;
    v1 = v1 || MEMORY[0x1E0D71060] == 0;
    if (!v1)
      String = (void *)CFPhoneNumberCreateString();
  }
  return String;
}

id GEOXPCErrorFromReply(void *a1)
{
  id v1;
  void *v2;
  const char *string;
  __CFString *v4;
  id v5;
  void *v6;
  _QWORD v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (MEMORY[0x18D765A14]() == MEMORY[0x1E0C81310])
  {
    string = xpc_dictionary_get_string(v1, (const char *)*MEMORY[0x1E0C81270]);
    if (string)
      v4 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", string, 1);
    else
      v4 = CFSTR("unknown");
    v5 = (id)*MEMORY[0x1E0C9AFA8];
    v8[0] = v5;
    v8[1] = CFSTR("com.apple.geo.UnderlyingXPCError");
    v9[0] = CFSTR("Unable to connect to geod");
    v9[1] = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:userInfo:", -15, v6);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_18869C104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{

  _Unwind_Resume(a1);
}

void std::__list_imp<NSString * {__strong}>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];

        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_18869C3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned int,_GEOAltitudeTriggerData>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,_GEOAltitudeTriggerData>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,_GEOAltitudeTriggerData>>>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,_GEOAltitudeTriggerData>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,_GEOAltitudeTriggerData>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,_GEOAltitudeTriggerData>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,_GEOAltitudeTriggerData>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,_GEOAltitudeTriggerData>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,_GEOAltitudeTriggerData>>>::destroy(a1[1]);
    v2 = (void *)a1[11];
    if (v2)
    {
      a1[12] = v2;
      operator delete(v2);
    }
    v3 = (void *)a1[8];
    if (v3)
    {
      a1[9] = v3;
      operator delete(v3);
    }

    operator delete(a1);
  }
}

void sub_18869C514(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18869C77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18869CF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id GEOExperimentConfigurationPath()
{
  return +[GEOFilePaths pathFor:](GEOFilePaths, "pathFor:", 29);
}

void sub_18869DCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id GEOGetNetEventRecorderLog()
{
  if (qword_1ECDBC290 != -1)
    dispatch_once(&qword_1ECDBC290, &__block_literal_global_22);
  return (id)qword_1ECDBC288;
}

__CFString *GEODataRequestKindAsString(uint64_t a1)
{
  __CFString *v1;
  void *v2;
  __CFString *v3;
  void *v4;
  void *v5;
  void *v6;

  if ((int)a1 > 2815)
  {
    switch((int)a1)
    {
      case 2848:
        v1 = CFSTR("AddressCorrectionInit");
        break;
      case 2849:
        v1 = CFSTR("AddressCorrectUpdate");
        break;
      case 2850:
        v1 = CFSTR("ABAssign");
        break;
      case 2851:
        v1 = CFSTR("LocationShift");
        break;
      case 2852:
        v1 = CFSTR("SpatialLookup");
        break;
      case 2853:
        v1 = CFSTR("ReportAProblem");
        break;
      case 2854:
        v1 = CFSTR("ImageService");
        break;
      case 2855:
        v1 = CFSTR("BatchRevGeo");
        break;
      case 2856:
        v1 = CFSTR("WiFiQuality");
        break;
      case 2857:
        v1 = CFSTR("TransitUpdate");
        break;
      case 2858:
        v1 = CFSTR("WiFiTile");
        break;
      case 2859:
        v1 = CFSTR("OfflineDataService");
        break;
      case 2860:
        v1 = CFSTR("ConnectivityCheck");
        break;
      default:
        if ((_DWORD)a1 == 2816)
        {
          v1 = CFSTR("ProblemSubmission");
        }
        else
        {
          if ((_DWORD)a1 != 2817)
            goto LABEL_51;
          v1 = CFSTR("ProblemStatus");
        }
        break;
    }
  }
  else
  {
    if ((int)a1 > 255)
    {
      if ((int)a1 > 767)
      {
        if ((int)a1 > 1791)
        {
          if ((_DWORD)a1 != 1792)
          {
            if ((_DWORD)a1 == 2560)
            {
              v1 = CFSTR("LogMessageCollection");
              return v1;
            }
            goto LABEL_51;
          }
          v6 = (void *)MEMORY[0x1E0CB3940];
          if (HIDWORD(a1) >= 0x3F)
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), HIDWORD(a1));
            v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v3 = off_1E1C08990[a1 >> 32];
          }
          objc_msgSend(v6, "stringWithFormat:", CFSTR("UserInitiatedPlaceRequest.%@"), v3);
        }
        else if ((_DWORD)a1 == 768)
        {
          v5 = (void *)MEMORY[0x1E0CB3940];
          if (HIDWORD(a1) >= 0x3F)
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), HIDWORD(a1));
            v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v3 = off_1E1C08990[a1 >> 32];
          }
          objc_msgSend(v5, "stringWithFormat:", CFSTR("PlaceRequest.%@"), v3);
        }
        else
        {
          if ((_DWORD)a1 != 1280)
            goto LABEL_51;
          v2 = (void *)MEMORY[0x1E0CB3940];
          if (HIDWORD(a1) >= 0x3F)
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), HIDWORD(a1));
            v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v3 = off_1E1C08990[a1 >> 32];
          }
          objc_msgSend(v2, "stringWithFormat:", CFSTR("BackgroundPlaceRequest.%@"), v3);
        }
      }
      else
      {
        if ((int)a1 > 671)
        {
          if ((_DWORD)a1 == 672)
          {
            v1 = CFSTR("ETA");
            return v1;
          }
          if ((_DWORD)a1 == 673)
          {
            v1 = CFSTR("ETAU");
            return v1;
          }
          goto LABEL_51;
        }
        if ((_DWORD)a1 != 256)
        {
          if ((_DWORD)a1 == 512)
          {
            v1 = CFSTR("Directions");
            return v1;
          }
LABEL_51:
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown(%i.%i)"), a1, HIDWORD(a1));
          v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
          return v1;
        }
        v4 = (void *)MEMORY[0x1E0CB3940];
        v3 = CFSTR("RASTER_STANDARD");
        switch(HIDWORD(a1))
        {
          case 0:
            break;
          case 1:
            v3 = CFSTR("VECTOR_STANDARD");
            break;
          case 2:
            v3 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER");
            break;
          case 3:
            v3 = CFSTR("VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER");
            break;
          case 4:
            v3 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER");
            break;
          case 5:
            v3 = CFSTR("RASTER_STANDARD_BACKGROUND");
            break;
          case 6:
            v3 = CFSTR("RASTER_HYBRID");
            break;
          case 7:
            v3 = CFSTR("RASTER_SATELLITE");
            break;
          case 8:
            v3 = CFSTR("RASTER_TERRAIN");
            break;
          case 0xB:
            v3 = CFSTR("VECTOR_BUILDINGS");
            break;
          case 0xC:
            v3 = CFSTR("VECTOR_TRAFFIC");
            break;
          case 0xD:
            v3 = CFSTR("VECTOR_POI");
            break;
          case 0xE:
            v3 = CFSTR("SPUTNIK_METADATA");
            break;
          case 0xF:
            v3 = CFSTR("SPUTNIK_C3M");
            break;
          case 0x10:
            v3 = CFSTR("SPUTNIK_DSM");
            break;
          case 0x11:
            v3 = CFSTR("SPUTNIK_DSM_GLOBAL");
            break;
          case 0x12:
            v3 = CFSTR("VECTOR_REALISTIC");
            break;
          case 0x13:
            v3 = CFSTR("VECTOR_LEGACY_REALISTIC");
            break;
          case 0x14:
            v3 = CFSTR("VECTOR_ROADS");
            break;
          case 0x15:
            v3 = CFSTR("RASTER_VEGETATION");
            break;
          case 0x16:
            v3 = CFSTR("VECTOR_TRAFFIC_SKELETON");
            break;
          case 0x17:
            v3 = CFSTR("RASTER_COASTLINE_MASK");
            break;
          case 0x18:
            v3 = CFSTR("RASTER_HILLSHADE");
            break;
          case 0x19:
            v3 = CFSTR("VECTOR_TRAFFIC_WITH_GREEN");
            break;
          case 0x1A:
            v3 = CFSTR("VECTOR_TRAFFIC_STATIC");
            break;
          case 0x1B:
            v3 = CFSTR("RASTER_COASTLINE_DROP_MASK");
            break;
          case 0x1C:
            v3 = CFSTR("VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL");
            break;
          case 0x1D:
            v3 = CFSTR("VECTOR_SPEED_PROFILES");
            break;
          case 0x1E:
            v3 = CFSTR("VECTOR_VENUES");
            break;
          case 0x1F:
            v3 = CFSTR("RASTER_DOWN_SAMPLED");
            break;
          case 0x20:
            v3 = CFSTR("RASTER_COLOR_BALANCED");
            break;
          case 0x21:
            v3 = CFSTR("RASTER_SATELLITE_NIGHT");
            break;
          case 0x22:
            v3 = CFSTR("SPUTNIK_VECTOR_BORDER");
            break;
          case 0x23:
            v3 = CFSTR("RASTER_SATELLITE_DIGITIZE");
            break;
          case 0x24:
            v3 = CFSTR("RASTER_HILLSHADE_PARKS");
            break;
          case 0x25:
            v3 = CFSTR("VECTOR_TRANSIT");
            break;
          case 0x26:
            v3 = CFSTR("RASTER_STANDARD_BASE");
            break;
          case 0x27:
            v3 = CFSTR("RASTER_STANDARD_LABELS");
            break;
          case 0x28:
            v3 = CFSTR("RASTER_HYBRID_ROADS");
            break;
          case 0x29:
            v3 = CFSTR("RASTER_HYBRID_LABELS");
            break;
          case 0x2A:
            v3 = CFSTR("FLYOVER_C3M_MESH");
            break;
          case 0x2B:
            v3 = CFSTR("FLYOVER_C3M_JPEG_TEXTURE");
            break;
          case 0x2C:
            v3 = CFSTR("FLYOVER_C3M_ASTC_TEXTURE");
            break;
          case 0x2D:
            v3 = CFSTR("RASTER_SATELLITE_ASTC");
            break;
          case 0x2E:
            v3 = CFSTR("RASTER_HYBRID_ROADS_AND_LABELS");
            break;
          case 0x2F:
            v3 = CFSTR("VECTOR_TRANSIT_SELECTION");
            break;
          case 0x30:
            v3 = CFSTR("VECTOR_COVERAGE");
            break;
          case 0x34:
            v3 = CFSTR("FLYOVER_METADATA");
            break;
          case 0x35:
            v3 = CFSTR("VECTOR_ROAD_NETWORK");
            break;
          case 0x36:
            v3 = CFSTR("VECTOR_LAND_COVER");
            break;
          case 0x37:
            v3 = CFSTR("VECTOR_DEBUG");
            break;
          case 0x38:
            v3 = CFSTR("VECTOR_STREET_POI");
            break;
          case 0x39:
            v3 = CFSTR("MUNIN_METADATA");
            break;
          case 0x3A:
            v3 = CFSTR("VECTOR_SPR_MERCATOR");
            break;
          case 0x3B:
            v3 = CFSTR("VECTOR_SPR_MODELS");
            break;
          case 0x3C:
            v3 = CFSTR("VECTOR_SPR_MATERIALS");
            break;
          case 0x3D:
            v3 = CFSTR("VECTOR_SPR_METADATA");
            break;
          case 0x3E:
            v3 = CFSTR("VECTOR_TRACKS");
            break;
          case 0x3F:
            v3 = CFSTR("VECTOR_RESERVED_2");
            break;
          case 0x40:
            v3 = CFSTR("VECTOR_STREET_LANDMARKS");
            break;
          case 0x41:
            v3 = CFSTR("COARSE_LOCATION_POLYGONS");
            break;
          case 0x42:
            v3 = CFSTR("VECTOR_SPR_ROADS");
            break;
          case 0x43:
            v3 = CFSTR("VECTOR_SPR_STANDARD");
            break;
          case 0x44:
            v3 = CFSTR("VECTOR_POI_V2");
            break;
          case 0x45:
            v3 = CFSTR("VECTOR_POLYGON_SELECTION");
            break;
          case 0x46:
            v3 = CFSTR("VL_METADATA");
            break;
          case 0x47:
            v3 = CFSTR("VL_DATA");
            break;
          case 0x48:
            v3 = CFSTR("PROACTIVE_APP_CLIP");
            break;
          case 0x49:
            v3 = CFSTR("VECTOR_BUILDINGS_V2");
            break;
          case 0x4A:
            v3 = CFSTR("POI_BUSYNESS");
            break;
          case 0x4B:
            v3 = CFSTR("POI_DP_BUSYNESS");
            break;
          case 0x4C:
            v3 = CFSTR("SMART_INTERFACE_SELECTION");
            break;
          case 0x4D:
            v3 = CFSTR("VECTOR_ASSETS");
            break;
          case 0x4E:
            v3 = CFSTR("SPR_ASSET_METADATA");
            break;
          case 0x4F:
            v3 = CFSTR("VECTOR_SPR_POLAR");
            break;
          case 0x50:
            v3 = CFSTR("SMART_DATA_MODE");
            break;
          case 0x51:
            v3 = CFSTR("CELLULAR_PERFORMANCE_SCORE");
            break;
          case 0x52:
            v3 = CFSTR("VECTOR_SPR_MODELS_OCCLUSION");
            break;
          case 0x53:
            v3 = CFSTR("VECTOR_TOPOGRAPHIC");
            break;
          case 0x54:
            v3 = CFSTR("VECTOR_POI_V2_UPDATE");
            break;
          case 0x55:
            v3 = CFSTR("VECTOR_LIVE_DATA_UPDATES");
            break;
          case 0x56:
            v3 = CFSTR("VECTOR_TRAFFIC_V2");
            break;
          case 0x57:
            v3 = CFSTR("VECTOR_ROAD_SELECTION");
            break;
          case 0x58:
            v3 = CFSTR("VECTOR_REGION_METADATA");
            break;
          case 0x59:
            v3 = CFSTR("RAY_TRACING");
            break;
          case 0x5A:
            v3 = CFSTR("VECTOR_CONTOURS");
            break;
          case 0x5B:
            v3 = CFSTR("RASTER_SATELLITE_POLAR");
            break;
          case 0x5C:
            v3 = CFSTR("VMAP4_ELEVATION");
            break;
          case 0x5D:
            v3 = CFSTR("VMAP4_ELEVATION_POLAR");
            break;
          case 0x5E:
            v3 = CFSTR("CELLULAR_COVERAGE_PLMN");
            break;
          case 0x5F:
            v3 = CFSTR("RASTER_SATELLITE_POLAR_NIGHT");
            break;
          case 0x60:
            v3 = CFSTR("UNUSED_96");
            break;
          case 0x61:
            v3 = CFSTR("UNUSED_97");
            break;
          case 0x62:
            v3 = CFSTR("UNUSED_98");
            break;
          case 0x63:
            v3 = CFSTR("UNUSED_99");
            break;
          case 0x64:
            v3 = CFSTR("UNUSED_100");
            break;
          case 0x65:
            v3 = CFSTR("UNUSED_101");
            break;
          case 0x66:
            v3 = CFSTR("UNUSED_102");
            break;
          case 0x67:
            v3 = CFSTR("UNUSED_103");
            break;
          case 0x68:
            v3 = CFSTR("UNUSED_104");
            break;
          case 0x69:
            v3 = CFSTR("UNUSED_105");
            break;
          case 0x6A:
            v3 = CFSTR("UNUSED_106");
            break;
          case 0x6B:
            v3 = CFSTR("UNUSED_107");
            break;
          case 0x6C:
            v3 = CFSTR("UNUSED_108");
            break;
          case 0x6D:
            v3 = CFSTR("UNUSED_109");
            break;
          case 0x6E:
            v3 = CFSTR("UNUSED_110");
            break;
          case 0x6F:
            v3 = CFSTR("UNUSED_111");
            break;
          case 0x70:
            v3 = CFSTR("UNUSED_112");
            break;
          case 0x71:
            v3 = CFSTR("UNUSED_113");
            break;
          case 0x72:
            v3 = CFSTR("UNUSED_114");
            break;
          case 0x73:
            v3 = CFSTR("UNUSED_115");
            break;
          case 0x74:
            v3 = CFSTR("UNUSED_116");
            break;
          case 0x75:
            v3 = CFSTR("UNUSED_117");
            break;
          case 0x76:
            v3 = CFSTR("UNUSED_118");
            break;
          case 0x77:
            v3 = CFSTR("UNUSED_119");
            break;
          default:
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), HIDWORD(a1));
            v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
            break;
        }
        objc_msgSend(v4, "stringWithFormat:", CFSTR("Tile.%@"), v3);
      }
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();

      return v1;
    }
    v1 = CFSTR("CurrentCountry");
    switch((int)a1)
    {
      case 1:
        return v1;
      case 2:
        v1 = CFSTR("SearchAttribution");
        break;
      case 3:
        v1 = CFSTR("ResourceManifest");
        break;
      case 4:
        v1 = CFSTR("ResourceData");
        break;
      case 5:
        v1 = CFSTR("SearchAttributionData");
        break;
      case 6:
        v1 = CFSTR("NetworkDefaults");
        break;
      case 15:
        v1 = CFSTR("AnalyticsUpload");
        break;
      default:
        goto LABEL_51;
    }
  }
  return v1;
}

void sub_18869EAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18869EF14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18869F058(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18869F5D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18869F8F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18869F9AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18869FAD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

NSObject *readNetworkDefaultsFromFile(uint64_t *a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  +[GEOFilePaths urlFor:](GEOFilePaths, "urlFor:", 23);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    v5 = 0;
    goto LABEL_12;
  }
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:options:error:", v2, 1, a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    GEOGetNetworkDefaultsLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = *a1;
      v10 = 138412290;
      v11 = v6;
      _os_log_impl(&dword_1885A9000, v4, OS_LOG_TYPE_ERROR, "Could not read network defaults: %@", (uint8_t *)&v10, 0xCu);
    }
    goto LABEL_10;
  }
  objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v3, 0, 0, a1);
  v4 = objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    GEOGetNetworkDefaultsLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *a1;
      v10 = 138412290;
      v11 = v8;
      _os_log_impl(&dword_1885A9000, v7, OS_LOG_TYPE_ERROR, "Could not decode network defaults: %@", (uint8_t *)&v10, 0xCu);
    }

LABEL_10:
    v5 = 0;
    goto LABEL_11;
  }
  v4 = v4;
  v5 = v4;
LABEL_11:

LABEL_12:
  return v5;
}

void sub_18869FEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1886A0058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readTransitSystems(geo::codec::Allocator *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v18;
  uint64_t v19;
  std::chrono::steady_clock::time_point v20;
  std::__shared_weak_count *v21;
  unint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  FILE *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  int TransitSystemsChapterIDSet;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t i;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _DWORD *v144;
  unint64_t v145;
  uint64_t v146;
  _DWORD *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t *v153;
  std::__shared_weak_count *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  int v163;
  unint64_t v164;
  unint64_t v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _BYTE *v170;
  uint64_t v171;
  char TransitSystemsChapterLabelSet;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unsigned int v182;
  const char *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unsigned int v190;
  uint64_t v191;
  FILE *v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unsigned int v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  const void *v207;
  size_t v208;
  _QWORD *v209;
  uint64_t v210;
  unsigned int v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unsigned int v223;
  _QWORD *v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unsigned int v228;
  unint64_t v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t **v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  BOOL appended;
  char v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unsigned int v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unsigned int v256;
  uint64_t *v257;
  uint64_t v258;
  const void *v259;
  size_t v260;
  _QWORD *v261;
  uint64_t v262;
  unsigned int v263;
  unint64_t v264;
  unint64_t v265;
  unsigned int v266;
  int v267;
  unsigned int v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  unsigned int *v272;
  int v273;
  int v274;
  unint64_t v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  unint64_t v284;
  unsigned int v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int v292;
  int v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unsigned int v297;
  unsigned int v298;
  int v299;
  uint64_t *__key[2];
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  const char *v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  _QWORD **v309;
  _QWORD *v310[2];
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  const char *v315;
  _QWORD v316[3];
  _QWORD *v317;
  _QWORD v318[3];
  _QWORD *v319;
  _QWORD v320[3];
  _QWORD *v321;
  _QWORD v322[3];
  _QWORD *v323;
  uint64_t v324;

  v324 = *MEMORY[0x1E0C80C00];
  v309 = v310;
  v310[0] = 0;
  v310[1] = 0;
  v311 = 0;
  v312 = 0;
  v313 = 0;
  v314 = geo::codec::Allocator::instance(a1);
  v4 = *a2;
  v5 = *((_QWORD *)a1 + 1);
  if (!v5)
  {
LABEL_5:
    v8 = 0;
    v305 = "ChapterTransitSystems";
    v306 = v4;
    v9 = a2[1];
    v307 = (std::__shared_weak_count *)v9;
    if (!v9)
      goto LABEL_10;
    goto LABEL_8;
  }
  v6 = 0;
  v7 = 0;
  while (*(_WORD *)(*(_QWORD *)a1 + 16 * v6) != 128)
  {
    v6 = ++v7;
    if (v5 <= v7)
      goto LABEL_5;
  }
  v8 = geo::codec::chapterAt((uint64_t)a1, v7, 128, v4 + 1912);
  v4 = *a2;
  v305 = "ChapterTransitSystems";
  v306 = v4;
  v9 = a2[1];
  v307 = (std::__shared_weak_count *)v9;
  if (v9)
  {
LABEL_8:
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
LABEL_10:
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v12.__d_.__rep_;
  if (!v8)
  {
    v18 = v12.__d_.__rep_;
    v19 = 1;
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v315 = "ChapterTransitSystems";
    if ("ChapterTransitSystems")
      goto LABEL_29;
    goto LABEL_15;
  }
  v14 = *(_QWORD *)(v8 + 48);
  v13 = *(_QWORD *)(v8 + 56);
  v15 = v13 - v14;
  if (v13 >= v14)
  {
    v16 = 0;
    *(_BYTE *)(v8 + 32) = 1;
    v22 = *(_QWORD *)(v8 + 40) + v14;
    *(_QWORD *)(v8 + 16) = v15;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 8) = v22;
    v17 = 8 * v15;
    if (8 * v15 < 5)
    {
LABEL_23:
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5930;
      goto LABEL_24;
    }
  }
  else
  {
    v16 = *(_QWORD *)(v8 + 24);
    v17 = 8 * *(_QWORD *)(v8 + 16);
    if (v16 + 5 > v17)
      goto LABEL_23;
  }
  v23 = 0;
  v24 = (uint64_t *)(v8 + 8);
  v25 = *(_QWORD *)(v8 + 8);
  v26 = 5;
  do
  {
    v27 = 8 - (v16 & 7);
    if (v26 < v27)
      v27 = v26;
    v23 = (*(unsigned __int8 *)(v25 + (v16 >> 3)) >> (8 - (v16 & 7) - v27)) & ~(-1 << v27) | (v23 << v27);
    v16 += v27;
    *(_QWORD *)(v8 + 24) = v16;
    v26 -= v27;
  }
  while (v26);
  v28 = (v23 + 1);
  if (v16 + v28 > v17)
    goto LABEL_23;
  v44 = 0;
  if (v23 != -1)
  {
    do
    {
      v45 = 8 - (v16 & 7);
      if (v28 < v45)
        v45 = v28;
      v44 = (*(unsigned __int8 *)(v25 + (v16 >> 3)) >> (8 - (v16 & 7) - v45)) & ~(-1 << v45) | (v44 << v45);
      v16 += v45;
      *(_QWORD *)(v8 + 24) = v16;
      v28 -= v45;
    }
    while (v28);
  }
  v46 = *a2;
  v47 = v44;
  v48 = *(_QWORD *)(*a2 + 1320);
  v49 = *(_QWORD *)(*a2 + 1312);
  v50 = 0x8E38E38E38E38E39 * ((v48 - v49) >> 3);
  v51 = v44 - v50;
  if (v44 <= v50)
  {
    if (v44 >= v50)
      goto LABEL_90;
    v62 = v49 + 72 * v44;
    while (v48 != v62)
    {
      v63 = *(std::__shared_weak_count **)(v48 - 40);
      if (v63)
      {
        p_shared_owners = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(p_shared_owners);
        while (__stlxr(v65 - 1, p_shared_owners));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v48 -= 72;
    }
    goto LABEL_75;
  }
  v52 = *(_QWORD *)(v46 + 1328);
  if (0x8E38E38E38E38E39 * ((v52 - v48) >> 3) >= v51)
  {
    v62 = v48 + 72 * v51;
    v66 = 72 * v44 - 8 * ((v48 - v49) >> 3);
    do
    {
      if (v48)
      {
        *(_QWORD *)(v48 + 64) = 0;
        *(_OWORD *)(v48 + 32) = 0uLL;
        *(_OWORD *)(v48 + 48) = 0uLL;
        *(_OWORD *)v48 = 0uLL;
        *(_OWORD *)(v48 + 16) = 0uLL;
      }
      v48 += 72;
      v66 -= 72;
    }
    while (v66);
LABEL_75:
    *(_QWORD *)(v46 + 1320) = v62;
    goto LABEL_90;
  }
  v53 = 0x8E38E38E38E38E39 * ((v52 - v49) >> 3);
  v54 = 2 * v53;
  if (2 * v53 <= v44)
    v54 = v44;
  if (v53 >= 0x1C71C71C71C71C7)
    v55 = 0x38E38E38E38E38ELL;
  else
    v55 = v54;
  v56 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v46 + 1336) + 16))(*(_QWORD *)(v46 + 1336), 72 * v55, 8);
  v57 = v56 + 72 * v50;
  v58 = v56 + 72 * v47;
  v59 = 72 * v47 - 72 * v50;
  v60 = 0uLL;
  v61 = v57;
  do
  {
    if (v61)
    {
      *(_QWORD *)(v61 + 64) = 0;
      *(_OWORD *)(v61 + 32) = 0uLL;
      *(_OWORD *)(v61 + 48) = 0uLL;
      *(_OWORD *)v61 = 0uLL;
      *(_OWORD *)(v61 + 16) = 0uLL;
    }
    v61 += 72;
    v59 -= 72;
  }
  while (v59);
  v67 = v56 + 72 * v55;
  v68 = *(_QWORD *)(v46 + 1320);
  v69 = *(_QWORD *)(v46 + 1312);
  if (v68 == v69)
  {
    *(_QWORD *)(v46 + 1312) = v57;
    *(_QWORD *)(v46 + 1320) = v58;
    v75 = *(_QWORD *)(v46 + 1328);
    *(_QWORD *)(v46 + 1328) = v67;
  }
  else
  {
    v70 = 0;
    do
    {
      v71 = v57 + v70;
      v72 = v68 + v70;
      v73 = *(_OWORD *)(v68 + v70 - 72);
      *(_QWORD *)(v71 - 56) = *(_QWORD *)(v68 + v70 - 56);
      *(_OWORD *)(v71 - 72) = v73;
      *(_OWORD *)(v71 - 48) = *(_OWORD *)(v68 + v70 - 48);
      *(_QWORD *)(v72 - 48) = 0;
      *(_QWORD *)(v72 - 40) = 0;
      v60 = *(__n128 *)(v68 + v70 - 32);
      *(_OWORD *)(v71 - 20) = *(_OWORD *)(v68 + v70 - 20);
      *(__n128 *)(v71 - 32) = v60;
      v70 -= 72;
    }
    while (v68 + v70 != v69);
    v68 = *(_QWORD *)(v46 + 1312);
    v74 = *(_QWORD *)(v46 + 1320);
    *(_QWORD *)(v46 + 1312) = v57 + v70;
    *(_QWORD *)(v46 + 1320) = v58;
    v75 = *(_QWORD *)(v46 + 1328);
    *(_QWORD *)(v46 + 1328) = v67;
    while (v74 != v68)
    {
      v76 = *(std::__shared_weak_count **)(v74 - 40);
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v74 -= 72;
    }
  }
  if (v68)
    (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(**(_QWORD **)(v46 + 1336) + 40))(*(_QWORD *)(v46 + 1336), v68, v75 - v68, v60);
LABEL_90:
  v79 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(*a2 + 1320) - *(_QWORD *)(*a2 + 1312)) >> 3);
  v322[0] = &off_1E1BFA8B8;
  v322[1] = a2;
  v323 = v322;
  TransitSystemsChapterIDSet = geo::codec::_readTransitSystemsChapterIDSet((uint64_t *)(v8 + 8), v79, (uint64_t)v322);
  v81 = v323;
  if (v323 == v322)
  {
    v82 = 4;
    v81 = v322;
  }
  else
  {
    if (!v323)
      goto LABEL_95;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_95:
  if (!TransitSystemsChapterIDSet)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5935;
    goto LABEL_24;
  }
  v83 = *a2;
  v84 = *(_QWORD *)(*a2 + 1320);
  v85 = *(_QWORD *)(*a2 + 1312);
  v86 = v84 - v85;
  if (v84 != v85)
  {
    v87 = 0;
    v88 = 0;
    v89 = v86 / 72;
    v90 = *(_QWORD *)(v8 + 24);
    v91 = 8 * *(_QWORD *)(v8 + 16);
    if (v89 <= 1)
      v89 = 1;
    while (v90 + 5 <= v91)
    {
      v93 = 0;
      v94 = *v24;
      v95 = 5;
      do
      {
        v96 = 8 - (v90 & 7);
        if (v95 < v96)
          v96 = v95;
        v93 = (*(unsigned __int8 *)(v94 + (v90 >> 3)) >> (8 - (v90 & 7) - v96)) & ~(-1 << v96) | (v93 << v96);
        v90 += v96;
        *(_QWORD *)(v8 + 24) = v90;
        v95 -= v96;
      }
      while (v95);
      v97 = (v93 + 1);
      if (v90 + v97 > v91)
        break;
      v98 = 0;
      if ((_DWORD)v97)
      {
        do
        {
          v99 = 8 - (v90 & 7);
          if (v97 < v99)
            v99 = v97;
          v98 = (*(unsigned __int8 *)(v94 + (v90 >> 3)) >> (8 - (v90 & 7) - v99)) & ~(-1 << v99) | (v98 << v99);
          v90 += v99;
          *(_QWORD *)(v8 + 24) = v90;
          v97 -= v99;
        }
        while (v97);
      }
      v92 = (_QWORD *)(v85 + 72 * v87);
      *v92 = v88;
      v92[1] = v98;
      v88 += v98;
      if (++v87 == v89)
        goto LABEL_115;
    }
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5940;
LABEL_24:
    v31 = fprintf(v29, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v30);
    v19 = 0;
    if (!a1)
      goto LABEL_28;
    goto LABEL_25;
  }
  v88 = 0;
LABEL_115:
  v100 = v88;
  v101 = *(_QWORD *)(v83 + 1288);
  v102 = *(_QWORD *)(v83 + 1280);
  v103 = 0x4EC4EC4EC4EC4EC5 * ((v101 - v102) >> 3);
  v104 = v100 - v103;
  if (v100 <= v103)
  {
    if (v100 >= v103)
      goto LABEL_159;
    v114 = v102 + 104 * v100;
    while (v101 != v114)
    {
      v115 = *(std::__shared_weak_count **)(v101 - 72);
      if (v115)
      {
        v116 = (unint64_t *)&v115->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      v118 = *(std::__shared_weak_count **)(v101 - 96);
      if (v118)
        std::__shared_weak_count::__release_weak(v118);
      v101 -= 104;
    }
    goto LABEL_141;
  }
  v105 = *(_QWORD *)(v83 + 1296);
  if (0x4EC4EC4EC4EC4EC5 * ((v105 - v101) >> 3) >= v104)
  {
    v114 = v101 + 104 * v104;
    v119 = 104 * v100 - 8 * ((v101 - v102) >> 3);
    do
    {
      if (v101)
      {
        *(_QWORD *)(v101 + 96) = 0;
        *(_OWORD *)(v101 + 64) = 0uLL;
        *(_OWORD *)(v101 + 80) = 0uLL;
        *(_OWORD *)(v101 + 32) = 0uLL;
        *(_OWORD *)(v101 + 48) = 0uLL;
        *(_OWORD *)v101 = 0uLL;
        *(_OWORD *)(v101 + 16) = 0uLL;
      }
      v101 += 104;
      v119 -= 104;
    }
    while (v119);
LABEL_141:
    *(_QWORD *)(v83 + 1288) = v114;
    goto LABEL_159;
  }
  v106 = 0x4EC4EC4EC4EC4EC5 * ((v105 - v102) >> 3);
  v107 = 2 * v106;
  if (2 * v106 <= v100)
    v107 = v100;
  if (v106 >= 0x13B13B13B13B13BLL)
    v108 = 0x276276276276276;
  else
    v108 = v107;
  v109 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v83 + 1304) + 16))(*(_QWORD *)(v83 + 1304), 104 * v108, 8);
  v110 = v109 + 104 * v103;
  v111 = v109 + 104 * v100;
  v112 = 104 * v100 - 104 * v103;
  v113 = v110;
  do
  {
    if (v113)
    {
      *(_QWORD *)(v113 + 96) = 0;
      *(_OWORD *)(v113 + 64) = 0uLL;
      *(_OWORD *)(v113 + 80) = 0uLL;
      *(_OWORD *)(v113 + 32) = 0uLL;
      *(_OWORD *)(v113 + 48) = 0uLL;
      *(_OWORD *)v113 = 0uLL;
      *(_OWORD *)(v113 + 16) = 0uLL;
    }
    v113 += 104;
    v112 -= 104;
  }
  while (v112);
  v120 = v109 + 104 * v108;
  v121 = *(_QWORD *)(v83 + 1288);
  v122 = *(_QWORD *)(v83 + 1280);
  if (v121 == v122)
  {
    *(_QWORD *)(v83 + 1280) = v110;
    *(_QWORD *)(v83 + 1288) = v111;
    v130 = *(_QWORD *)(v83 + 1296);
    *(_QWORD *)(v83 + 1296) = v120;
  }
  else
  {
    v123 = 0;
    do
    {
      v124 = v110 + v123;
      v125 = v121 + v123;
      *(_OWORD *)(v124 - 104) = *(_OWORD *)(v121 + v123 - 104);
      *(_QWORD *)(v125 - 104) = 0;
      *(_QWORD *)(v125 - 96) = 0;
      *(_OWORD *)(v124 - 88) = *(_OWORD *)(v121 + v123 - 88);
      *(_QWORD *)(v124 - 72) = *(_QWORD *)(v121 + v123 - 72);
      *(_QWORD *)(v125 - 80) = 0;
      *(_QWORD *)(v125 - 72) = 0;
      v126 = *(_OWORD *)(v121 + v123 - 64);
      v127 = *(_OWORD *)(v121 + v123 - 48);
      *(_DWORD *)(v124 - 32) = *(_DWORD *)(v121 + v123 - 32);
      *(_OWORD *)(v124 - 64) = v126;
      *(_OWORD *)(v124 - 48) = v127;
      v128 = *(_OWORD *)(v121 + v123 - 24);
      *(_QWORD *)(v124 - 8) = *(_QWORD *)(v121 + v123 - 8);
      *(_OWORD *)(v124 - 24) = v128;
      v123 -= 104;
    }
    while (v121 + v123 != v122);
    v121 = *(_QWORD *)(v83 + 1280);
    v129 = *(_QWORD *)(v83 + 1288);
    *(_QWORD *)(v83 + 1280) = v110 + v123;
    *(_QWORD *)(v83 + 1288) = v111;
    v130 = *(_QWORD *)(v83 + 1296);
    *(_QWORD *)(v83 + 1296) = v120;
    while (v129 != v121)
    {
      v131 = *(std::__shared_weak_count **)(v129 - 72);
      if (v131)
      {
        v132 = (unint64_t *)&v131->__shared_owners_;
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
      }
      v134 = *(std::__shared_weak_count **)(v129 - 96);
      if (v134)
        std::__shared_weak_count::__release_weak(v134);
      v129 -= 104;
    }
  }
  if (v121)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v83 + 1304) + 40))(*(_QWORD *)(v83 + 1304), v121, v130 - v121);
LABEL_159:
  v135 = *a2;
  v136 = *(_QWORD *)(*a2 + 1312);
  v137 = 954437177 * ((unint64_t)(*(_QWORD *)(*a2 + 1320) - v136) >> 3);
  if ((_DWORD)v137)
  {
    for (i = 0; i != v137; ++i)
    {
      v139 = (uint64_t *)(v136 + 72 * i);
      v140 = v139[1];
      if (v140)
      {
        v141 = *v139;
        v142 = *(_QWORD *)(v135 + 1280);
        if (v140 == 1)
        {
          v143 = 0;
        }
        else
        {
          v143 = v140 & 0xFFFFFFFFFFFFFFFELL;
          v144 = (_DWORD *)(v142 + 104 * v141 + 188);
          v145 = v140 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            *(v144 - 26) = i;
            *v144 = i;
            v144 += 52;
            v145 -= 2;
          }
          while (v145);
          if (v140 == v143)
            continue;
        }
        v146 = v140 - v143;
        v147 = (_DWORD *)(v142 + 104 * (v143 + v141) + 84);
        do
        {
          *v147 = i;
          v147 += 26;
          --v146;
        }
        while (v146);
      }
    }
  }
  v148 = *(_QWORD *)(v135 + 1280);
  if (*(_QWORD *)(v135 + 1288) != v148)
  {
    v149 = 0;
    do
    {
      v150 = a2[1];
      if (v150)
      {
        v151 = (unint64_t *)(v150 + 16);
        do
          v152 = __ldxr(v151);
        while (__stxr(v152 + 1, v151));
      }
      v153 = (uint64_t *)(v148 + 104 * v149);
      v154 = (std::__shared_weak_count *)v153[1];
      *v153 = v135;
      v153[1] = v150;
      if (v154)
        std::__shared_weak_count::__release_weak(v154);
      v135 = *a2;
      v148 = *(_QWORD *)(*a2 + 1280);
      *(_QWORD *)(v148 + 104 * v149++ + 92) = -1;
    }
    while (v149 < 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v135 + 1288) - v148) >> 3));
  }
  v155 = *a2;
  if ((_DWORD)v100)
  {
    v156 = 0;
    v157 = *(_QWORD *)(v8 + 24);
    v158 = 8 * *(_QWORD *)(v8 + 16);
    while (1)
    {
      if (v157 + 8 > v158)
      {
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 5965;
        goto LABEL_24;
      }
      v159 = 0;
      v160 = *v24;
      v161 = 8;
      do
      {
        v162 = 8 - (v157 & 7);
        if (v161 < v162)
          v162 = v161;
        v159 = (*(unsigned __int8 *)(v160 + (v157 >> 3)) >> (8 - (v157 & 7) - v162)) & ~(-1 << v162) | (v159 << v162);
        v157 += v162;
        *(_QWORD *)(v8 + 24) = v157;
        v161 -= v162;
      }
      while (v161);
      if (v157 + 8 > v158)
      {
        v29 = (FILE *)*MEMORY[0x1E0C80C10];
        v30 = 5966;
        goto LABEL_24;
      }
      v163 = 0;
      v164 = 8;
      do
      {
        v165 = 8 - (v157 & 7);
        if (v164 < v165)
          v165 = v164;
        v163 = (*(unsigned __int8 *)(v160 + (v157 >> 3)) >> (8 - (v157 & 7) - v165)) & ~(-1 << v165) | (v163 << v165);
        v157 += v165;
        *(_QWORD *)(v8 + 24) = v157;
        v164 -= v165;
      }
      while (v164);
      if (v157 + 8 > v158)
        break;
      v166 = 0;
      v167 = 8;
      do
      {
        v168 = 8 - (v157 & 7);
        if (v167 < v168)
          v168 = v167;
        v166 = (*(unsigned __int8 *)(v160 + (v157 >> 3)) >> (8 - (v157 & 7) - v168)) & ~(-1 << v168) | (v166 << v168);
        v157 += v168;
        *(_QWORD *)(v8 + 24) = v157;
        v167 -= v168;
      }
      while (v167);
      v169 = *(_QWORD *)(v155 + 1280);
      v170 = (_BYTE *)(v169 + 104 * v156);
      v170[80] = v159;
      v170[81] = v163;
      v170[82] = v166;
      v170[83] = -1;
      if (++v156 == v100)
        goto LABEL_199;
    }
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5967;
    goto LABEL_24;
  }
  v169 = *(_QWORD *)(v155 + 1280);
LABEL_199:
  if (!geo::codec::decodeAttributeSet<GeoCodecsFeature>(1, (uint64_t *)(v8 + 8), -991146299 * ((unint64_t)(*(_QWORD *)(v155 + 1288) - v169) >> 3), (uint64_t)&v309, v169, 104))
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5977;
    goto LABEL_24;
  }
  v171 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(*a2 + 1288) - *(_QWORD *)(*a2 + 1280)) >> 3);
  v320[0] = &off_1E1BFA910;
  v320[1] = a2;
  v321 = v320;
  TransitSystemsChapterLabelSet = geo::codec::_readTransitSystemsChapterLabelSet((uint64_t *)(v8 + 8), v171, (uint64_t)v320, a2);
  v173 = v321;
  if (v321 == v320)
  {
    v174 = 4;
    v173 = v320;
  }
  else
  {
    if (!v321)
      goto LABEL_209;
    v174 = 5;
  }
  (*(void (**)(void))(*v173 + 8 * v174))();
LABEL_209:
  if ((TransitSystemsChapterLabelSet & 1) == 0)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5983;
    goto LABEL_24;
  }
  v175 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(*a2 + 1288) - *(_QWORD *)(*a2 + 1280)) >> 3);
  v318[0] = &off_1E1BFA968;
  v318[1] = a2;
  v319 = v318;
  v176 = geo::codec::_readTransitSystemsChapterIDSet((uint64_t *)(v8 + 8), v175, (uint64_t)v318);
  v177 = v319;
  if (v319 == v318)
  {
    v178 = 4;
    v177 = v318;
  }
  else
  {
    if (!v319)
      goto LABEL_216;
    v178 = 5;
  }
  (*(void (**)(void))(*v177 + 8 * v178))();
LABEL_216:
  if ((v176 & 1) == 0)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5987;
    goto LABEL_24;
  }
  if ((geo::codec::_convertTransitLineKeys((geo::codec::Allocator *)(*a2 + 1616), *(_QWORD *)(*a2 + 1632), (geo::codec::Allocator **)(*a2 + 1624), a2) & 1) == 0)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5990;
    goto LABEL_24;
  }
  if ((geo::codec::_convertTransitLineKeys((geo::codec::Allocator *)(*a2 + 1592), *(_QWORD *)(*a2 + 1608), (geo::codec::Allocator **)(*a2 + 1600), a2) & 1) == 0)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5992;
    goto LABEL_24;
  }
  v179 = *(_QWORD *)(v8 + 24);
  v180 = v179 + 1;
  v181 = 8 * *(_QWORD *)(v8 + 16);
  if (v179 + 1 > v181)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 5995;
    goto LABEL_24;
  }
  v182 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v179 >> 3));
  *(_QWORD *)(v8 + 24) = v180;
  if (((v182 >> (~(_BYTE)v179 & 7)) & 1) != 0)
  {
    v304 = 0;
    if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v304, 5uLL))
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 5998;
      goto LABEL_24;
    }
    v303 = 0;
    if ((BitstreamUnpackVar32((uint64_t *)(v8 + 8), (int *)&v303) & 1) == 0)
    {
      v29 = (FILE *)*MEMORY[0x1E0C80C10];
      v30 = 6001;
      goto LABEL_24;
    }
    v315 = 0;
    if (!geo::codec::_makeSpaceForShields((geo::codec::Allocator *)v303, &v315, a2))
    {
      v192 = (FILE *)*MEMORY[0x1E0C80C10];
      v193 = 6005;
      goto LABEL_306;
    }
    v183 = v315;
    v184 = (_QWORD *)*a2;
    v185 = *(_QWORD *)(*a2 + 1280);
    if (*(_QWORD *)(*a2 + 1288) != v185)
    {
      v186 = 0;
      v187 = 0;
      v188 = v304;
      do
      {
        v189 = *(_QWORD *)(v8 + 24);
        if (v189 + 1 > 8 * *(_QWORD *)(v8 + 16))
        {
          v192 = (FILE *)*MEMORY[0x1E0C80C10];
          v193 = 6009;
          goto LABEL_306;
        }
        v190 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v189 >> 3));
        *(_QWORD *)(v8 + 24) = v189 + 1;
        if (((v190 >> (~(_BYTE)v189 & 7)) & 1) != 0)
        {
          LODWORD(__key[0]) = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)__key, v188))
          {
            v193 = 6012;
            goto LABEL_305;
          }
          v184 = (_QWORD *)*a2;
          if ((unint64_t)v183 >= *(_QWORD *)(*a2 + 1072))
          {
            v193 = 6013;
            goto LABEL_305;
          }
          v191 = v185 + v186;
          *(_BYTE *)(v191 + 72) = 1;
          *(_DWORD *)(v191 + 60) = (_DWORD)v183;
          *(_QWORD *)(v184[133] + 32 * (_QWORD)v183++ + 24) = LODWORD(__key[0]);
        }
        else
        {
          v184 = (_QWORD *)*a2;
        }
        ++v187;
        v185 = v184[160];
        v186 += 104;
      }
      while (v187 < 0x4EC4EC4EC4EC4EC5 * ((v184[161] - v185) >> 3));
    }
    if (v183 != (const char *)v184[134])
    {
      v192 = (FILE *)*MEMORY[0x1E0C80C10];
      v193 = 6020;
      goto LABEL_306;
    }
    v194 = v184[107];
    v195 = v184[108];
    v302 = 0;
    if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v302, 5uLL))
    {
      v192 = (FILE *)*MEMORY[0x1E0C80C10];
      v193 = 6026;
      goto LABEL_306;
    }
    v196 = *(_QWORD *)(*a2 + 1280);
    if (*(_QWORD *)(*a2 + 1288) != v196)
    {
      v197 = 0;
      v198 = 0;
      v199 = v195 - v194;
      v200 = v302;
      while (1)
      {
        v202 = *(_QWORD *)(v8 + 24);
        if (v202 + 1 > 8 * *(_QWORD *)(v8 + 16))
          break;
        v203 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v202 >> 3));
        *(_QWORD *)(v8 + 24) = v202 + 1;
        if (((v203 >> (~(_BYTE)v202 & 7)) & 1) != 0)
        {
          v301 = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v301, v200))
          {
            v193 = 6034;
            goto LABEL_305;
          }
          v204 = (uint64_t *)v301;
          if (v199 <= v301)
          {
            v193 = 6035;
            goto LABEL_305;
          }
          if (!*(_BYTE *)(v196 + v197 + 72))
          {
            v193 = 6036;
            goto LABEL_305;
          }
          v205 = *(unsigned int *)(v196 + v197 + 60);
          v206 = *a2;
          *(_QWORD *)(*(_QWORD *)(*a2 + 1064) + 32 * v205) = v194 + v301;
          v207 = *(const void **)(v206 + 888);
          v208 = *(_QWORD *)(v206 + 896);
          __key[0] = v204;
          v209 = bsearch(__key, v207, v208, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
          if (v209)
            v210 = v209[2];
          else
            v210 = 0;
          v201 = *a2;
          *(_QWORD *)(*(_QWORD *)(*a2 + 1064) + 32 * v205 + 8) = v210;
        }
        else
        {
          v201 = *a2;
        }
        ++v198;
        v196 = *(_QWORD *)(v201 + 1280);
        v197 += 104;
        if (v198 >= 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v201 + 1288) - v196) >> 3))
          goto LABEL_260;
      }
      v192 = (FILE *)*MEMORY[0x1E0C80C10];
      v193 = 6031;
LABEL_306:
      v31 = fprintf(v192, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v193);
      v19 = 0;
      if (!a1)
        goto LABEL_28;
      goto LABEL_25;
    }
LABEL_260:
    v180 = *(_QWORD *)(v8 + 24);
    v181 = 8 * *(_QWORD *)(v8 + 16);
  }
  if (v180 + 1 > v181)
  {
    v29 = (FILE *)*MEMORY[0x1E0C80C10];
    v30 = 6047;
    goto LABEL_24;
  }
  v211 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v180 >> 3));
  *(_QWORD *)(v8 + 24) = v180 + 1;
  if (((v211 >> (~(_BYTE)v180 & 7)) & 1) != 0)
  {
    LODWORD(__key[0]) = 0;
    if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)__key, 5uLL))
    {
      v192 = (FILE *)*MEMORY[0x1E0C80C10];
      v193 = 6050;
      goto LABEL_306;
    }
    if (*(_QWORD *)(*a2 + 1288) != *(_QWORD *)(*a2 + 1280))
    {
      v212 = 0;
      v213 = (LODWORD(__key[0]) + 1);
      v214 = 88;
      do
      {
        v217 = *(_QWORD *)(v8 + 24);
        if (v217 + 1 > 8 * *(_QWORD *)(v8 + 16))
        {
          v192 = (FILE *)*MEMORY[0x1E0C80C10];
          v193 = 6054;
          goto LABEL_306;
        }
        v218 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v217 >> 3));
        *(_QWORD *)(v8 + 24) = v217 + 1;
        if (((v218 >> (~(_BYTE)v217 & 7)) & 1) != 0)
        {
          LODWORD(v315) = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v315, v213))
          {
            v192 = (FILE *)*MEMORY[0x1E0C80C10];
            v193 = 6057;
            goto LABEL_306;
          }
          v215 = *a2;
          v216 = *(_QWORD *)(*a2 + 1280);
          *(float *)(v216 + v214) = (float)v315 * 0.1;
        }
        else
        {
          v215 = *a2;
          v216 = *(_QWORD *)(*a2 + 1280);
        }
        ++v212;
        v214 += 104;
      }
      while (v212 < 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v215 + 1288) - v216) >> 3));
    }
  }
  if (*(_DWORD *)(v8 + 64) >= 0x15u)
  {
    v219 = *a2;
    v220 = *(_QWORD *)(*a2 + 1312);
    if (*(_QWORD *)(*a2 + 1320) != v220)
    {
      v221 = 0;
      while (1)
      {
        v222 = *(_QWORD *)(v8 + 24);
        if (v222 + 1 > 8 * *(_QWORD *)(v8 + 16))
        {
          v192 = (FILE *)*MEMORY[0x1E0C80C10];
          v193 = 6068;
          goto LABEL_306;
        }
        v223 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v222 >> 3));
        *(_QWORD *)(v8 + 24) = v222 + 1;
        if (((v223 >> (~(_BYTE)v222 & 7)) & 1) != 0)
        {
          v224 = (_QWORD *)(v220 + 72 * v221);
          v225 = v224[1];
          if (v225)
            break;
        }
LABEL_278:
        ++v221;
        v220 = *(_QWORD *)(v219 + 1312);
        if (v221 >= 0x8E38E38E38E38E39 * ((*(_QWORD *)(v219 + 1320) - v220) >> 3))
          goto LABEL_289;
      }
      v226 = 0;
      while (1)
      {
        v227 = *(_QWORD *)(v8 + 24);
        if (v227 + 1 > 8 * *(_QWORD *)(v8 + 16))
          break;
        v228 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v227 >> 3));
        *(_QWORD *)(v8 + 24) = v227 + 1;
        if (((v228 >> (~(_BYTE)v227 & 7)) & 1) != 0)
        {
          LODWORD(__key[0]) = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)__key, 8uLL))
          {
            v192 = (FILE *)*MEMORY[0x1E0C80C10];
            v193 = 6076;
            goto LABEL_306;
          }
          *(_BYTE *)(*(_QWORD *)(*a2 + 1280) + 104 * (v226 + *v224) + 83) = __key[0];
          v225 = v224[1];
        }
        if (++v226 >= v225)
        {
          v219 = *a2;
          goto LABEL_278;
        }
      }
      v192 = (FILE *)*MEMORY[0x1E0C80C10];
      v193 = 6073;
      goto LABEL_306;
    }
  }
LABEL_289:
  v229 = *(_QWORD *)(v8 + 24);
  if (v229 + 1 > 8 * *(_QWORD *)(v8 + 16))
  {
    v193 = 6086;
    goto LABEL_305;
  }
  v230 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v229 >> 3));
  *(_QWORD *)(v8 + 24) = v229 + 1;
  if (((v230 >> (~(_BYTE)v229 & 7)) & 1) != 0
    && !geo::codec::decodeAttributeSet<GeoCodecsPBTransitSystemInfo>(-1, (uint64_t *)(v8 + 8), 954437177 * ((*(_QWORD *)(*a2 + 1320) - *(_QWORD *)(*a2 + 1312)) >> 3), *a2 + 1112, *(_QWORD *)(*a2 + 1312), 72))
  {
    v193 = 6088;
    goto LABEL_305;
  }
  v231 = *a2;
  v232 = *(_QWORD *)(*a2 + 1312);
  if (*(_QWORD *)(*a2 + 1320) != v232)
  {
    v233 = 0;
    while (1)
    {
      v235 = (_QWORD *)(v232 + 72 * v233);
      if (v235[1])
        break;
LABEL_295:
      ++v233;
      v232 = *(_QWORD *)(v231 + 1312);
      v234 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(v231 + 1320) - v232) >> 3);
      if (v233 >= v234)
        goto LABEL_309;
    }
    v236 = 0;
    v237 = (uint64_t **)(v232 + 72 * v233 + 24);
    while (1)
    {
      v238 = *a2;
      v239 = v236 + *v235;
      v240 = *(_QWORD *)(*a2 + 1280);
      __key[0] = 0;
      __key[1] = 0;
      appended = geo::codec::appendStyleAttributes(__key, v237, v240 + 104 * v239 + 24, v238 + 1112);
      std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)__key);
      if (!appended)
        break;
      if ((unint64_t)++v236 >= v235[1])
      {
        v231 = *a2;
        goto LABEL_295;
      }
    }
    v192 = (FILE *)*MEMORY[0x1E0C80C10];
    v193 = 6097;
    goto LABEL_306;
  }
  v234 = 0;
LABEL_309:
  v316[0] = &off_1E1BFA9C0;
  v316[1] = a2;
  v317 = v316;
  v242 = geo::codec::_readTransitSystemsChapterLabelSet((uint64_t *)(v8 + 8), v234, (uint64_t)v316, a2);
  v243 = v317;
  if (v317 == v316)
  {
    v244 = 4;
    v243 = v316;
  }
  else
  {
    if (!v317)
      goto LABEL_315;
    v244 = 5;
  }
  (*(void (**)(void))(*v243 + 8 * v244))();
LABEL_315:
  if ((v242 & 1) == 0)
  {
    v192 = (FILE *)*MEMORY[0x1E0C80C10];
    v193 = 6107;
    goto LABEL_306;
  }
  v245 = *(_QWORD *)(v8 + 24);
  if (v245 + 1 > 8 * *(_QWORD *)(v8 + 16))
  {
    v192 = (FILE *)*MEMORY[0x1E0C80C10];
    v193 = 6114;
    goto LABEL_306;
  }
  v246 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v245 >> 3));
  *(_QWORD *)(v8 + 24) = v245 + 1;
  if (((v246 >> (~(_BYTE)v245 & 7)) & 1) != 0)
  {
    v304 = 0;
    if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v304, 5uLL))
    {
      v192 = (FILE *)*MEMORY[0x1E0C80C10];
      v193 = 6117;
      goto LABEL_306;
    }
    v303 = 0;
    if ((BitstreamUnpackVar32((uint64_t *)(v8 + 8), (int *)&v303) & 1) == 0)
    {
      v192 = (FILE *)*MEMORY[0x1E0C80C10];
      v193 = 6120;
      goto LABEL_306;
    }
    v315 = 0;
    if ((geo::codec::_makeSpaceForLabels((geo::codec::Allocator *)v303, &v315, a2) & 1) == 0)
    {
      v192 = (FILE *)*MEMORY[0x1E0C80C10];
      v193 = 6123;
      goto LABEL_306;
    }
    v247 = *a2;
    v248 = v315;
    v249 = *(_QWORD *)(*a2 + 1280);
    if (*(_QWORD *)(*a2 + 1288) != v249)
    {
      v250 = 0;
      v251 = *(_QWORD *)(v247 + 856);
      v252 = *(_QWORD *)(v247 + 864) - v251;
      v295 = v304;
      v253 = 92;
      do
      {
        v255 = *(_QWORD *)(v8 + 24);
        if (v255 + 1 > 8 * *(_QWORD *)(v8 + 16))
        {
          v192 = (FILE *)*MEMORY[0x1E0C80C10];
          v193 = 6130;
          goto LABEL_306;
        }
        v256 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v255 >> 3));
        *(_QWORD *)(v8 + 24) = v255 + 1;
        if (((v256 >> (~(_BYTE)v255 & 7)) & 1) != 0)
        {
          v302 = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v302, v295))
          {
            v193 = 6133;
            goto LABEL_305;
          }
          v257 = (uint64_t *)v302;
          if (v252 <= v302)
          {
            v193 = 6134;
            goto LABEL_305;
          }
          *(_DWORD *)(v249 + v253) = (_DWORD)v248;
          v258 = *a2;
          *(_QWORD *)(*(_QWORD *)(*a2 + 1048) + 24 * (_QWORD)v248) = (char *)v257 + v251;
          v259 = *(const void **)(v258 + 888);
          v260 = *(_QWORD *)(v258 + 896);
          __key[0] = v257;
          v261 = bsearch(__key, v259, v260, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
          if (v261)
            v262 = v261[2];
          else
            v262 = 0;
          v247 = *a2;
          *(_QWORD *)(*(_QWORD *)(*a2 + 1048) + 24 * (_QWORD)v248++ + 8) = v262;
        }
        else
        {
          v247 = *a2;
        }
        ++v250;
        v249 = *(_QWORD *)(v247 + 1280);
        v253 += 104;
      }
      while (v250 < 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v247 + 1288) - v249) >> 3));
    }
    if (v248 != *(const char **)(v247 + 1056))
    {
      v192 = (FILE *)*MEMORY[0x1E0C80C10];
      v193 = 6142;
      goto LABEL_306;
    }
  }
  else
  {
    v247 = *a2;
  }
  v31 = geo::codec::_convertTransitLineKeys((geo::codec::Allocator *)(v247 + 1376), *(_QWORD *)(v247 + 1392), (geo::codec::Allocator **)(v247 + 1384), a2);
  if ((v31 & 1) == 0)
  {
    v192 = (FILE *)*MEMORY[0x1E0C80C10];
    v193 = 6147;
    goto LABEL_306;
  }
  if (*(_DWORD *)(v8 + 64) >= 0x2Cu)
  {
    LODWORD(__key[0]) = 0;
    if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), __key, 5uLL))
    {
      v192 = (FILE *)*MEMORY[0x1E0C80C10];
      v193 = 6151;
      goto LABEL_306;
    }
    LODWORD(v315) = 0;
    v31 = BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v315, 5uLL);
    if ((v31 & 1) == 0)
    {
      v192 = (FILE *)*MEMORY[0x1E0C80C10];
      v193 = 6154;
      goto LABEL_306;
    }
    v254 = *(_QWORD *)(v8 + 24);
    if (v254 + 1 > 8 * *(_QWORD *)(v8 + 16))
    {
      v192 = (FILE *)*MEMORY[0x1E0C80C10];
      v193 = 6157;
      goto LABEL_306;
    }
    v263 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v254 >> 3));
    *(_QWORD *)(v8 + 24) = v254 + 1;
    if (((v263 >> (~(_BYTE)v254 & 7)) & 1) != 0)
    {
      v304 = 0;
      if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v304, 5uLL))
      {
        v192 = (FILE *)*MEMORY[0x1E0C80C10];
        v193 = 6161;
        goto LABEL_306;
      }
      v303 = 0;
      if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v303, 5uLL))
      {
        v192 = (FILE *)*MEMORY[0x1E0C80C10];
        v193 = 6164;
        goto LABEL_306;
      }
      v302 = 0;
      v31 = BitstreamUnpackVar32((uint64_t *)(v8 + 8), (int *)&v302);
      if (!(_DWORD)v31)
      {
        v192 = (FILE *)*MEMORY[0x1E0C80C10];
        v193 = 6167;
        goto LABEL_306;
      }
      v292 = v302;
      if (v302)
      {
        v293 = 0;
        v296 = v304;
        v294 = v303;
        v264 = LODWORD(__key[0]);
        v265 = v315;
        while (1)
        {
          v301 = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v301, v296))
          {
            v193 = 6171;
            goto LABEL_305;
          }
          v266 = v301;
          if (v301 == -1)
          {
            v193 = 6172;
            goto LABEL_305;
          }
          v299 = 0;
          v31 = BitstreamUnpack((uint64_t *)(v8 + 8), &v299, v294);
          if (!(_DWORD)v31)
          {
            v192 = (FILE *)*MEMORY[0x1E0C80C10];
            v193 = 6175;
            goto LABEL_306;
          }
          v267 = v299;
          if (v299)
            break;
LABEL_376:
          if (++v293 == v292)
            goto LABEL_377;
        }
        while (1)
        {
          v298 = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v298, v264))
          {
            v193 = 6179;
            goto LABEL_305;
          }
          v268 = v298;
          v269 = *(_QWORD *)(*a2 + 1312);
          if (0x8E38E38E38E38E39 * ((*(_QWORD *)(*a2 + 1320) - v269) >> 3) <= v298)
          {
            v193 = 6180;
            goto LABEL_305;
          }
          v297 = 0;
          v31 = BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v297, v265);
          if (!(_DWORD)v31)
          {
            v193 = 6185;
            goto LABEL_305;
          }
          v270 = (_QWORD *)(v269 + 72 * v268);
          if (v270[1] <= (unint64_t)v297)
            break;
          v271 = *(_QWORD *)(*a2 + 1280) + 104 * (*v270 + v297);
          v274 = *(_DWORD *)(v271 + 96);
          v272 = (unsigned int *)(v271 + 96);
          v273 = v274;
          if (v274 != -1 && v273 != v266)
          {
            v193 = 6189;
            goto LABEL_305;
          }
          *v272 = v266;
          if (!--v267)
            goto LABEL_376;
        }
        v193 = 6186;
LABEL_305:
        v192 = (FILE *)*MEMORY[0x1E0C80C10];
        goto LABEL_306;
      }
    }
LABEL_377:
    if (*(_DWORD *)(v8 + 64) >= 0x2Eu)
    {
      LODWORD(__key[0]) = 0;
      v31 = BitstreamUnpackBitcount((uint64_t *)(v8 + 8), __key, 5uLL);
      if ((v31 & 1) == 0)
      {
        v192 = (FILE *)*MEMORY[0x1E0C80C10];
        v193 = 6199;
        goto LABEL_306;
      }
      v276 = *(_QWORD *)(v8 + 24);
      if (v276 + 1 > 8 * *(_QWORD *)(v8 + 16))
      {
        v192 = (FILE *)*MEMORY[0x1E0C80C10];
        v193 = 6202;
        goto LABEL_306;
      }
      v277 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v276 >> 3));
      *(_QWORD *)(v8 + 24) = v276 + 1;
      if (((v277 >> (~(_BYTE)v276 & 7)) & 1) != 0)
      {
        v278 = *a2;
        v279 = *(_QWORD *)(*a2 + 1312);
        if (*(_QWORD *)(*a2 + 1320) != v279)
        {
          v280 = 0;
          v281 = LODWORD(__key[0]);
          while (1)
          {
            v282 = (_QWORD *)(v279 + 72 * v280);
            if (v282[1])
              break;
LABEL_390:
            ++v280;
            v279 = *(_QWORD *)(v278 + 1312);
            if (v280 >= 0x8E38E38E38E38E39 * ((*(_QWORD *)(v278 + 1320) - v279) >> 3))
              goto LABEL_396;
          }
          v283 = 0;
          while (1)
          {
            LODWORD(v315) = 0;
            v31 = BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v315, v281);
            if (!(_DWORD)v31)
              break;
            v278 = *a2;
            *(_DWORD *)(*(_QWORD *)(*a2 + 1280) + 104 * (v283 + *v282) + 100) = (_DWORD)v315;
            if ((unint64_t)++v283 >= v282[1])
              goto LABEL_390;
          }
          v192 = (FILE *)*MEMORY[0x1E0C80C10];
          v193 = 6209;
          goto LABEL_306;
        }
      }
LABEL_396:
      if (*(_DWORD *)(v8 + 64) >= 0x30u)
      {
        v284 = *(_QWORD *)(v8 + 24);
        if (v284 + 1 > 8 * *(_QWORD *)(v8 + 16))
        {
          v192 = (FILE *)*MEMORY[0x1E0C80C10];
          v193 = 6220;
          goto LABEL_306;
        }
        v285 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v284 >> 3));
        *(_QWORD *)(v8 + 24) = v284 + 1;
        if (((v285 >> (~(_BYTE)v284 & 7)) & 1) != 0)
        {
          LODWORD(__key[0]) = 0;
          v31 = BitstreamUnpackBitcount((uint64_t *)(v8 + 8), __key, 5uLL);
          if (!(_DWORD)v31)
          {
            v192 = (FILE *)*MEMORY[0x1E0C80C10];
            v193 = 6224;
            goto LABEL_306;
          }
          if (*(_QWORD *)(*a2 + 1320) != *(_QWORD *)(*a2 + 1312))
          {
            v286 = 0;
            v287 = LODWORD(__key[0]);
            v288 = 64;
            while (1)
            {
              LODWORD(v315) = 0;
              v31 = BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v315, v287);
              if (!(_DWORD)v31)
                break;
              v289 = *a2;
              v290 = *(_QWORD *)(*a2 + 1312);
              *(_DWORD *)(v290 + v288) = (_DWORD)v315;
              ++v286;
              v288 += 72;
              if (v286 >= 0x8E38E38E38E38E39 * ((*(_QWORD *)(v289 + 1320) - v290) >> 3))
                goto LABEL_408;
            }
            v192 = (FILE *)*MEMORY[0x1E0C80C10];
            v193 = 6228;
            goto LABEL_306;
          }
        }
      }
    }
  }
LABEL_408:
  v291 = *(_QWORD *)(v8 + 48) + (*(_QWORD *)(v8 + 24) >> 3);
  if ((*(_QWORD *)(v8 + 24) & 7) != 0)
    ++v291;
  *(_QWORD *)(v8 + 48) = v291;
  *(_BYTE *)(v8 + 32) = 0;
  v19 = 1;
  if (a1)
  {
LABEL_25:
    if (*(_BYTE *)v8)
    {
      v32 = geo::codec::Allocator::instance((geo::codec::Allocator *)v31);
      v31 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v32 + 40))(v32, *(_QWORD *)(v8 + 40), 0);
    }
    v33 = geo::codec::Allocator::instance((geo::codec::Allocator *)v31);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v33 + 40))(v33, v8, 0);
  }
LABEL_28:
  v18 = rep;
  v34 = v305;
  v4 = v306;
  v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v315 = v34;
  if (v34)
  {
LABEL_29:
    __key[0] = (uint64_t *)&v315;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v4 + 1912, (uint64_t *)&v315, (uint64_t)&std::piecewise_construct, __key)+ 4) = (double)((v20.__d_.__rep_ - v18) / 1000) * 0.001;
    v21 = v307;
    if (!v307)
      goto LABEL_33;
    goto LABEL_30;
  }
LABEL_15:
  v21 = v307;
  if (!v307)
    goto LABEL_33;
LABEL_30:
  v35 = (unint64_t *)&v21->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (v36)
  {
LABEL_33:
    v37 = v311;
    if (!v311)
      goto LABEL_44;
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  v37 = v311;
  if (!v311)
    goto LABEL_44;
LABEL_34:
  v38 = v312;
  v39 = v37;
  if (v312 != v37)
  {
    do
    {
      v40 = *(std::__shared_weak_count **)(v38 - 8);
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v40->__on_zero_shared)(v40, v39);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v38 -= 16;
    }
    while (v38 != v37);
    v39 = v311;
  }
  v312 = v37;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v314 + 40))(v314, v39, v313 - v39);
LABEL_44:
  std::__tree<std::shared_ptr<FeatureStyleAttributes const>,FeatureStyleAttributesSet::FeatureStyleAttributesCompare,std::allocator<std::shared_ptr<FeatureStyleAttributes const>>>::destroy((uint64_t)&v309, v310[0]);
  return v19;
}

void sub_1886A2000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  FeatureStyleAttributesSet::~FeatureStyleAttributesSet((FeatureStyleAttributesSet *)va1);
  _Unwind_Resume(a1);
}

void sub_1886A21C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDComponentFilterReadAllFrom(uint64_t a1, void *a2, int a3)
{
  _BOOL8 Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 756))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDComponentFilterReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 760));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 752) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 756) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDComponentFilterReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDComponentFilterReadAllFrom_initialTag;
  Specified = GEOPDComponentFilterReadSpecified(a1, (char *)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDComponentFilterCallReadAllRecursiveWithoutSynchronized((uint64_t *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 760));
  return Specified;
}

void sub_1886A23F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDComponentFilterReadSpecified(uint64_t a1, char *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  int32x2_t v14;
  int32x2_t v15;
  int8x16_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  int32x2_t v34;
  uint32x4_t v35;
  unsigned int v36;
  int32x2_t v37;
  _BYTE *v38;
  uint64_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int v55;
  unsigned int v56;
  _BYTE *v57;
  int8x8_t v58;
  int8x8_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  char v65;
  int *v66;
  int *v67;
  int *v68;
  int *v69;
  int *v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  int v79;
  unint64_t v81;
  BOOL v82;
  int *v83;
  int v84;
  int v85;
  BOOL v86;
  GEOPDEntityFilter *v87;
  uint64_t v88;
  id v89;
  void *v90;
  int v91;
  void *v92;
  char v93;
  int v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  _BOOL8 v123;
  int v124;
  int *v125;
  int v126;
  int v127;
  unint64_t v128;
  int v129;
  int v130;
  void *v131;
  int v133;
  char v134;
  int *v135;
  char v136;
  char v137;

  if (!a2)
    return 0;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 760));
  *(_QWORD *)&a2[*MEMORY[0x1E0D82BD8]] = *(unsigned int *)(a1 + 756);
  objc_msgSend(a2, "seekToOffset:", *(unsigned int *)(a1 + 752));
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = *(_QWORD *)(a1 + 764);
  v12 = *(unsigned int *)(a1 + 772);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v14 = (int32x2_t)(v13 >> 43);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v15 = (int32x2_t)(v13 >> 35);
  v16.i64[0] = 0x100000001;
  v16.i64[1] = 0x100000001;
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v17 = (int32x2_t)(v13 >> 49);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v18 = (int32x2_t)(v13 >> 61);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v19 = (int32x2_t)(v13 >> 42);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v20 = (int32x2_t)(v13 >> 40);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v21 = (int32x2_t)(v13 >> 39);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v22 = (int32x2_t)(v13 >> 48);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v23 = (int32x2_t)(v13 >> 53);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v24 = (int32x2_t)(v13 >> 47);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v25 = (int32x2_t)(v13 >> 54);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v26 = (int32x2_t)(v13 >> 60);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  *(int32x2_t *)v27.i8 = vzip1_s32((int32x2_t)(v13 >> 44), v26);
  v27.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v12 >> 21), (int32x2_t)(v12 >> 22));
  *(int32x2_t *)v28.i8 = vzip1_s32((int32x2_t)(v12 >> 20), (int32x2_t)(v12 >> 26));
  v28.u64[1] = (unint64_t)vzip1_s32(v25, v24);
  v29 = (int32x4_t)vandq_s8(v28, v16);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v30 = (int32x4_t)vandq_s8(v27, v16);
  v28.i64[0] = v13 >> 38;
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v27.i64[0] = v13 >> 37;
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v31 = (int32x2_t)(v13 >> 33);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v32 = (int32x2_t)(v13 >> 34);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v33 = v32;
  v34 = (int32x2_t)(v13 >> 32);
  v35 = (uint32x4_t)vdupq_n_s32(v11);
  v36 = vaddvq_s32(vaddq_s32(vaddq_s32(v30, v29), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v35, (uint32x4_t)xmmword_189CD7BE0), v16)))+ (v11 >> 31);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v37 = (int32x2_t)(v13 >> 55);
  v29.i32[0] = v11;
  v29.i32[1] = (v11 >> 46) | ((_DWORD)v12 << 18);
  v38 = a2;
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v39 = v13 >> 58;
  v29.i32[2] = (v11 >> 57) | ((_DWORD)v12 << 7);
  v29.i32[3] = (v11 >> 63) | (2 * v12);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v40 = (int32x2_t)(v13 >> 51);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v41 = (int32x2_t)(v13 >> 62);
  *((_QWORD *)&v13 + 1) = v12;
  *(_QWORD *)&v13 = v11;
  v42 = vzip1_s32(v15, v14);
  *(int32x2_t *)v43.i8 = vzip1_s32((int32x2_t)(v12 >> 19), (int32x2_t)(v12 >> 16));
  v43.u64[1] = (unint64_t)v42;
  *(int32x2_t *)v44.i8 = vzip1_s32((int32x2_t)(v12 >> 9), (int32x2_t)(v12 >> 13));
  v44.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v12 >> 15), (int32x2_t)(v12 >> 6));
  *(int32x2_t *)v45.i8 = vzip1_s32(v17, (int32x2_t)(v12 >> 10));
  v45.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v12 >> 2), v18);
  *(int32x2_t *)v46.i8 = vzip1_s32((int32x2_t)(v12 >> 25), (int32x2_t)(v12 >> 7));
  v46.u64[1] = (unint64_t)vzip1_s32(v20, v19);
  *(int32x2_t *)v47.i8 = vzip1_s32(v21, (int32x2_t)(v12 >> 23));
  v47.u64[1] = (unint64_t)vzip1_s32(v23, v22);
  v48 = (int32x4_t)vandq_s8(v43, v16);
  v49 = (int32x4_t)vandq_s8(v44, v16);
  v50 = (int32x4_t)vandq_s8(v45, v16);
  v51 = (int32x4_t)vandq_s8(v46, v16);
  v52 = (int32x4_t)vandq_s8(v47, v16);
  *(int32x2_t *)v53.i8 = vzip1_s32(*(int32x2_t *)v28.i8, (int32x2_t)(v12 >> 3));
  v53.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v12 >> 24), *(int32x2_t *)v27.i8);
  v54 = (int32x4_t)vandq_s8(v53, v16);
  *(int32x2_t *)v53.i8 = vzip1_s32(v34, v33);
  v53.u64[1] = (unint64_t)vzip1_s32(v31, (int32x2_t)(v12 >> 11));
  v55 = ((v11 & 0x800000000000000) != 0)
      + ((v11 >> 4) & 1)
      + (v12 & 1)
      + ((v11 >> 29) & 1)
      + vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v35, (uint32x4_t)xmmword_189CD7BD0), v16), v48), vaddq_s32(v49, v50)));
  v56 = vaddvq_s32(vaddq_s32(vaddq_s32(v51, v54), vaddq_s32(v52, (int32x4_t)vandq_s8(v53, v16)))) + v36;
  v16.i32[0] = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)v29, v16));
  v49.i64[0] = v39;
  v57 = v38;
  v54.i32[0] = v11 >> 28;
  v54.i32[1] = HIBYTE(v11) | ((_DWORD)v12 << 8);
  v53.i32[0] = v11 >> 7;
  v53.i32[1] = (v11 >> 36) | ((_DWORD)v12 << 28);
  v58.i32[0] = v11 >> 27;
  v58.i32[1] = (v11 >> 52) | ((_DWORD)v12 << 12);
  v17.i32[0] = v11 >> 26;
  v17.i32[1] = *(_DWORD *)(a1 + 772) >> 5;
  v19.i32[0] = *(_DWORD *)(a1 + 772) >> 17;
  v19.i32[1] = v11 >> 8;
  v59.i32[0] = (v11 >> 41) | ((_DWORD)v12 << 23);
  v59.i32[1] = v11 >> 19;
  v16.i32[1] = (v12 >> 27) & 1;
  *(int32x2_t *)v16.i8 = vadd_s32(vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vzip1_s32(*(int32x2_t *)v49.i8, v37), (int8x8_t)0x100000001), (int32x2_t)vand_s8(*(int8x8_t *)v54.i8, (int8x8_t)0x100000001)), vadd_s32(vadd_s32((int32x2_t)vand_s8(*(int8x8_t *)v53.i8, (int8x8_t)0x100000001), (int32x2_t)vand_s8(v58, (int8x8_t)0x100000001)), vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v35.i8, (uint32x2_t)0xFFFFFFF5FFFFFFF4), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vzip1_s32((int32x2_t)(v12 >> 14), (int32x2_t)(v12 >> 4)),
                                                (int8x8_t)0x100000001)))),
                             vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v35.i8, (uint32x2_t)0xFFFFFFE2FFFFFFF2), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)v19, (int8x8_t)0x100000001)), vadd_s32((int32x2_t)vand_s8((int8x8_t)vzip1_s32(v41, v40), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)v17, (int8x8_t)0x100000001))), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v35.i8, (uint32x2_t)0xFFFFFFF3FFFFFFFALL), (int8x8_t)0x100000001), (int32x2_t)vand_s8(
                                                (int8x8_t)vzip1_s32((int32x2_t)(v12 >> 1), (int32x2_t)(v13 >> 45)),
                                                (int8x8_t)0x100000001)),
                                 vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v35.i8, (uint32x2_t)0xFFFFFFF0FFFFFFF7), (int8x8_t)0x100000001), (int32x2_t)vand_s8(v59, (int8x8_t)0x100000001))))), vadd_s32(*(int32x2_t *)v16.i8, (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v35.i8, (uint32x2_t)0xFFFFFFEFFFFFFFE9), (int8x8_t)0x100000001)));
  v60 = vadd_s32(*(int32x2_t *)v16.i8, vdup_lane_s32(*(int32x2_t *)v16.i8, 1)).u32[0]
      + ((v12 >> 8) & 1)
      + ((v12 >> 18) & 1)
      + ((v11 >> 21) & 1)
      + ((v11 >> 3) & 1)
      + ((v11 >> 20) & 1)
      + ((v11 >> 50) & 1)
      + (BYTE3(v11) & 1)
      + ((v12 >> 12) & 1)
      + v55
      + v56;
  while (2)
  {
    v61 = 1;
    v62 = 1;
    v63 = 1;
    switch(a3[v6])
    {
      case -4:
        ++v60;
        goto LABEL_8;
      case -3:
        v7 = 1;
        goto LABEL_7;
      case -2:
        v62 = v9;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v64 = v60 > 0x49;
        v65 = v64 | v10;
        v134 = v64 & ~(_BYTE)v10 | v8;
        v136 = v64 | v10 | v134;
        if ((((v64 | v10) | v7) & 1) != 0)
          v66 = 0;
        else
          v66 = a3;
        v135 = v66;
        v137 = (v66 == 0) | v65;
        v67 = (int *)MEMORY[0x1E0D82BF0];
        v68 = (int *)MEMORY[0x1E0D82BC8];
        v69 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v60;
LABEL_7:
        v61 = v8;
LABEL_8:
        v62 = v9;
        v63 = v10;
LABEL_10:
        ++v6;
        v8 = v61;
        v9 = v62;
        v10 = v63;
        continue;
    }
    break;
  }
  while (2)
  {
    v70 = (int *)MEMORY[0x1E0D82BD8];
    if (*(_QWORD *)&v57[*v67] >= *(_QWORD *)&v57[*MEMORY[0x1E0D82BD8]] || v57[*v68])
      goto LABEL_716;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    while (1)
    {
      v74 = *v67;
      v75 = *(_QWORD *)&v57[v74];
      v76 = v75 + 1;
      if (v75 == -1 || v76 > *(_QWORD *)&v57[*v70])
        break;
      v77 = *(_BYTE *)(*(_QWORD *)&v57[*v69] + v75);
      *(_QWORD *)&v57[v74] = v76;
      v73 |= (unint64_t)(v77 & 0x7F) << v71;
      if ((v77 & 0x80) == 0)
        goto LABEL_25;
      v71 += 7;
      if (v72++ >= 9)
      {
        v73 = 0;
        v79 = v57[*v68];
        goto LABEL_27;
      }
    }
    v57[*v68] = 1;
LABEL_25:
    v79 = v57[*v68];
    if (v57[*v68])
      v73 = 0;
LABEL_27:
    if (v79 || (v73 & 7) == 4)
    {
LABEL_716:
      v133 = 1;
      goto LABEL_717;
    }
    v81 = v73 >> 3;
    v82 = v65;
    if ((v137 & 1) == 0)
    {
      v83 = v135;
      do
      {
        v85 = *v83++;
        v84 = v85;
        v82 = v85 != 0;
        if (v85)
          v86 = v84 == (_DWORD)v81;
        else
          v86 = 1;
      }
      while (!v86);
    }
    switch((int)v81)
    {
      case 1:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x400000) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_825;
          v87 = objc_alloc_init(GEOPDEntityFilter);
          if (GEOPDEntityFilterReadAllFrom((uint64_t)v87, v57))
          {
            PBReaderRecallMark();
            v88 = 192;
            goto LABEL_500;
          }
          goto LABEL_824;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_825;
        v94 = *(_DWORD *)(a1 + 764);
        goto LABEL_632;
      case 2:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x400000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 15);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDPlaceInfoFilter);
        if (!GEOPDPlaceInfoFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 384;
        goto LABEL_500;
      case 3:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v96 = *(_DWORD *)(a1 + 764);
          goto LABEL_565;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDRoadAccessInfoFilter);
        if (!GEOPDRoadAccessInfoFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 32;
        goto LABEL_500;
      case 4:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x400) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v97 = *(_DWORD *)(a1 + 764);
          goto LABEL_568;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDBoundsFilter);
        if (!GEOPDBoundsFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 96;
        goto LABEL_500;
      case 5:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v98 = *(_DWORD *)(a1 + 764);
          goto LABEL_611;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDAddressFilter);
        if (!GEOPDAddressFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 56;
        goto LABEL_500;
      case 6:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x200000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 26);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDRatingFilter);
        if (!GEOPDRatingFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 472;
        goto LABEL_500;
      case 7:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x8000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = *(int *)(a1 + 768);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDReviewFilter);
        if (!GEOPDReviewFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 520;
        goto LABEL_500;
      case 8:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x80000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 12);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDPhotoFilter);
        if (!GEOPDPhotoFilterReadAllFrom(v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 360;
        goto LABEL_500;
      case 9:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x800000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 4);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDHoursFilter);
        if (!GEOPDHoursFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 296;
        goto LABEL_500;
      case 10:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x10000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v99 = *(_DWORD *)(a1 + 772);
          goto LABEL_646;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDTransitInfoFilter);
        if (!GEOPDTransitInfoFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 656;
        goto LABEL_500;
      case 11:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x80000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v100 = *(_DWORD *)(a1 + 772);
          goto LABEL_670;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDTransitScheduleFilter);
        if (!GEOPDTransitScheduleFilterReadAllFrom((uint64_t)v87, v57, v9 & 1))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 680;
        goto LABEL_500;
      case 12:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x800000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v101 = *(_DWORD *)(a1 + 764);
          goto LABEL_618;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDETAFilter);
        if (!GEOPDETAFilterReadAllFrom((uint64_t)v87, v57, v9 & 1))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 200;
        goto LABEL_500;
      case 13:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x10000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          LODWORD(v95) = 8 * *(_DWORD *)(a1 + 764);
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDFlyoverFilter);
        if (!GEOPDFlyoverFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 240;
        goto LABEL_500;
      case 14:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x400000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 27);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDRawAttributeFilter);
        if (!GEOPDRawAttributeFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 480;
        goto LABEL_500;
      case 15:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v102 = *(_DWORD *)(a1 + 764);
          goto LABEL_586;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDAmenitiesFilter);
        if (!GEOPDAmenitiesFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 72;
        goto LABEL_500;
      case 16:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v103 = *(_DWORD *)(a1 + 772);
          goto LABEL_558;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDStyleAttributesFilter);
        if (!GEOPDStyleAttributesFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 576;
        goto LABEL_500;
      case 20:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x8000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v104 = *(_DWORD *)(a1 + 772);
          goto LABEL_659;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDTransitIncidentFilter);
        if (!GEOPDTransitIncidentFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 648;
        goto LABEL_500;
      case 21:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x2000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v105 = *(_DWORD *)(a1 + 772);
          goto LABEL_623;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDTransitAssociatedInfoFilter);
        if (!GEOPDTransitAssociatedInfoFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 632;
        goto LABEL_500;
      case 22:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v106 = *(_DWORD *)(a1 + 772);
          goto LABEL_573;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDTextBlockFilter);
        if (!GEOPDTextBlockFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 600;
        goto LABEL_500;
      case 23:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x8000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v107 = *(_DWORD *)(a1 + 764);
          goto LABEL_594;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDFactoidFilter);
        if (!GEOPDFactoidFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 232;
        goto LABEL_500;
      case 24:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x4000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v108 = *(_DWORD *)(a1 + 772);
          goto LABEL_549;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDTransitAttributionFilter);
        if (!GEOPDTransitAttributionFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 640;
        goto LABEL_500;
      case 25:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x1000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v109 = *(_DWORD *)(a1 + 764);
          goto LABEL_693;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDBusinessClaimFilter);
        if (!GEOPDBusinessClaimFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 112;
        goto LABEL_500;
      case 26:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x4000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v108 = *(_DWORD *)(a1 + 764);
LABEL_549:
          LODWORD(v95) = v108 << 17;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDCaptionedPhotoFilter);
        if (!GEOPDCaptionedPhotoFilterReadAllFrom((uint64_t)v87, v57, v9 & 1))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 128;
        goto LABEL_500;
      case 27:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x20000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v110 = *(_DWORD *)(a1 + 772);
          goto LABEL_591;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDTransitInfoSnippetFilter);
        if (!GEOPDTransitInfoSnippetFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 664;
        goto LABEL_500;
      case 29:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x4000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v111 = *(_DWORD *)(a1 + 764);
          goto LABEL_637;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDExternalActionFilter);
        if (!GEOPDExternalActionFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 224;
        goto LABEL_500;
      case 30:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x4000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 31);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDResultSnippetFilter);
        if (!GEOPDResultSnippetFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 512;
        goto LABEL_500;
      case 31:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v103 = *(_DWORD *)(a1 + 764);
LABEL_558:
          LODWORD(v95) = v103 << 25;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDAddressObjectFilter);
        if (!GEOPDAddressObjectFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 64;
        goto LABEL_500;
      case 32:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v112 = *(_DWORD *)(a1 + 772);
          goto LABEL_665;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDSimpleRestaurantMenuTextFilter);
        if (!GEOPDSimpleRestaurantMenuTextFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 536;
        goto LABEL_500;
      case 33:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x2000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 30);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDRestaurantReservationLinkFilter);
        if (!GEOPDRestaurantReservationLinkFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 504;
        goto LABEL_500;
      case 34:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v96 = *(_DWORD *)(a1 + 772);
LABEL_565:
          LODWORD(v95) = v96 << 29;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDSpatialLookupFilter);
        if (!GEOPDSpatialLookupFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 544;
        goto LABEL_500;
      case 36:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x400) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v97 = *(_DWORD *)(a1 + 772);
LABEL_568:
          LODWORD(v95) = v97 << 21;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDTipFilter);
        if (!GEOPDTipFilterReadAllFrom(v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 608;
        goto LABEL_500;
      case 37:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x2000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 18);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDPlacecardURLFilter);
        if (!GEOPDPlacecardURLFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 408;
        goto LABEL_500;
      case 38:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v106 = *(_DWORD *)(a1 + 764);
LABEL_573:
          LODWORD(v95) = v106 << 22;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDAssociatedAppFilter);
        if (!GEOPDAssociatedAppFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 88;
        goto LABEL_500;
      case 39:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x20000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 10);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDMessageLinkFilter);
        if (!GEOPDMessageLinkFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 344;
        goto LABEL_500;
      case 40:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x80000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = *(int *)(a1 + 767);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDQuickLinkFilter);
        if (!GEOPDQuickLinkFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 456;
        goto LABEL_500;
      case 41:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x100000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 25);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDRapFilter);
        if (!GEOPDRapFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 464;
        goto LABEL_500;
      case 42:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x40000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 11);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDOfflineAreaFilter);
        if (!GEOPDOfflineAreaFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 352;
        goto LABEL_500;
      case 43:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x10000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 9);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDLocationEventFilter);
        if (!GEOPDLocationEventFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 336;
        goto LABEL_500;
      case 44:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v102 = *(_DWORD *)(a1 + 772);
LABEL_586:
          LODWORD(v95) = v102 << 24;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDSupportsOfflineMapsFilter);
        if (!GEOPDSupportsOfflineMapsFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 584;
        goto LABEL_500;
      case 48:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x2000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v113 = *(_DWORD *)(a1 + 772);
          goto LABEL_662;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDVenueInfoFilter);
        if (!GEOPDVenueInfoFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 728;
        goto LABEL_500;
      case 50:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x20000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v110 = *(_DWORD *)(a1 + 764);
LABEL_591:
          LODWORD(v95) = v110 << 14;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDContainedPlaceFilter);
        if (!GEOPDContainedPlaceFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 152;
        goto LABEL_500;
      case 51:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x8000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v107 = *(_DWORD *)(a1 + 772);
LABEL_594:
          LODWORD(v95) = 16 * v107;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDWifiFingerprintFilter);
        if (!GEOPDWifiFingerprintFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 744;
        goto LABEL_500;
      case 52:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x1000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 5);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDIconFilter);
        if (!GEOPDIconFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 304;
        goto LABEL_500;
      case 53:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x10000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 21);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDPriceDescriptionFilter);
        if (!GEOPDPriceDescriptionFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 432;
        goto LABEL_500;
      case 54:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x800) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v114 = *(_DWORD *)(a1 + 764);
          goto LABEL_711;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDBrowseCategoriesFilter);
        if (!GEOPDBrowseCategoriesFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 104;
        goto LABEL_500;
      case 55:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v115 = *(_DWORD *)(a1 + 772);
          goto LABEL_698;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDStorefrontFilter);
        if (!GEOPDStorefrontFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 560;
        goto LABEL_500;
      case 56:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x40000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          LODWORD(v95) = 2 * *(_DWORD *)(a1 + 764);
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDGroundViewLabelFilter);
        if (!GEOPDGroundViewLabelFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 256;
        goto LABEL_500;
      case 57:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v116 = *(_DWORD *)(a1 + 764);
          goto LABEL_673;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDAnnotatedItemListFilter);
        if (!GEOPDAnnotatedItemListFilterReadAllFrom(v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 80;
        goto LABEL_500;
      case 58:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x8000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 20);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDPoiEventFilter);
        if (!GEOPDPoiEventFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 424;
        goto LABEL_500;
      case 59:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v98 = *(_DWORD *)(a1 + 772);
LABEL_611:
          LODWORD(v95) = v98 << 26;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDStorefrontPresentationFilter);
        if (!GEOPDStorefrontPresentationFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 568;
        goto LABEL_500;
      case 60:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x1000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 17);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDPlacecardLayoutConfigurationFilter);
        if (!GEOPDPlacecardLayoutConfigurationFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 400;
        goto LABEL_500;
      case 61:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x20000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 22);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDPrototypeContainerFilter);
        if (!GEOPDPrototypeContainerFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 440;
        goto LABEL_500;
      case 62:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x800000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v101 = *(_DWORD *)(a1 + 772);
LABEL_618:
          LODWORD(v95) = v101 << 8;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDVehiclePositionFilter);
        if (!GEOPDVehiclePositionFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 712;
        goto LABEL_500;
      case 63:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x8000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = *(int *)(a1 + 765);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDLinkedServiceFilter);
        if (!GEOPDLinkedServiceFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 328;
        goto LABEL_500;
      case 64:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x2000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v105 = *(_DWORD *)(a1 + 764);
LABEL_623:
          LODWORD(v95) = v105 << 18;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDBusinessHoursFilter);
        if (!GEOPDBusinessHoursFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 120;
        goto LABEL_500;
      case 65:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x100000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 13);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDPlaceCollectionFilter);
        if (!GEOPDPlaceCollectionFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 368;
        goto LABEL_500;
      case 66:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x1000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 29);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDRelatedPlaceFilter);
        if (!GEOPDRelatedPlaceFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 496;
        goto LABEL_500;
      case 67:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x200000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v117 = *(_DWORD *)(a1 + 772);
          goto LABEL_679;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDTransitTripStopFilter);
        if (!GEOPDTransitTripStopFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 696;
        goto LABEL_500;
      case 68:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x400000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v94 = *(_DWORD *)(a1 + 772);
LABEL_632:
          LODWORD(v95) = v94 << 9;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDTransitTripStopTimeFilter);
        if (!GEOPDTransitTripStopTimeFilterReadAllFrom((uint64_t)v87, v57, v9 & 1))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 704;
        goto LABEL_500;
      case 69:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x100000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v118 = *(_DWORD *)(a1 + 772);
          goto LABEL_685;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDTransitTripGeometryFilter);
        if (!GEOPDTransitTripGeometryFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 688;
        goto LABEL_500;
      case 70:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x4000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v111 = *(_DWORD *)(a1 + 772);
LABEL_637:
          LODWORD(v95) = 32 * v111;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDWalletCategoryInformationFilter);
        if (!GEOPDWalletCategoryInformationFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 736;
        goto LABEL_500;
      case 71:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x40000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 23);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDPublisherFilter);
        if (!GEOPDPublisherFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 448;
        goto LABEL_500;
      case 73:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x800000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = *(int *)(a1 + 766);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDPlaceQuestionnaireFilter);
        if (!GEOPDPlaceQuestionnaireFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 392;
        goto LABEL_500;
      case 74:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x200000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 14);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDPlaceCollectionItemFilter);
        if (!GEOPDPlaceCollectionItemFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 376;
        goto LABEL_500;
      case 76:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x10000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v99 = *(_DWORD *)(a1 + 764);
LABEL_646:
          LODWORD(v95) = v99 << 15;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDCollectionIdsFilter);
        if (!GEOPDCollectionIdsFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 144;
        goto LABEL_500;
      case 77:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x2000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 6);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDISO3166CodeFilter);
        if (!GEOPDISO3166CodeFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 312;
        goto LABEL_500;
      case 78:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x1000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v119 = *(_DWORD *)(a1 + 772);
          goto LABEL_690;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDVendorAmenitiesFilter);
        if (!GEOPDVendorAmenitiesFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 720;
        goto LABEL_500;
      case 81:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v120 = *(_DWORD *)(a1 + 772);
          goto LABEL_682;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDStorefrontFacesFilter);
        if (!GEOPDStorefrontFacesFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 552;
        goto LABEL_500;
      case 82:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 764) & 0x80000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = *(int *)(a1 + 764);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDGuideGroupFilter);
        if (!GEOPDGuideGroupFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 264;
        goto LABEL_500;
      case 83:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x40000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v121 = *(_DWORD *)(a1 + 764);
          goto LABEL_676;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDContainmentPlaceFilter);
        if (!GEOPDContainmentPlaceFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 160;
        goto LABEL_500;
      case 84:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x8000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v104 = *(_DWORD *)(a1 + 764);
LABEL_659:
          LODWORD(v95) = v104 << 16;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDCategorizedPhotosFilter);
        if (!GEOPDCategorizedPhotosFilterReadAllFrom((uint64_t)v87, v57, v9 & 1))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 136;
        goto LABEL_500;
      case 85:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x2000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v113 = *(_DWORD *)(a1 + 764);
LABEL_662:
          LODWORD(v95) = v113 << 6;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDExploreGuidesFilter);
        if (!GEOPDExploreGuidesFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 216;
        goto LABEL_500;
      case 86:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v112 = *(_DWORD *)(a1 + 764);
LABEL_665:
          LODWORD(v95) = v112 << 30;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDAboutFilter);
        if (!GEOPDAboutFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 24;
        goto LABEL_500;
      case 87:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x4000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 7);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDLabelGeometryFilter);
        if (!GEOPDLabelGeometryFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 320;
        goto LABEL_500;
      case 88:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x80000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v100 = *(_DWORD *)(a1 + 764);
LABEL_670:
          LODWORD(v95) = v100 << 12;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDEnhancedPlacementFilter);
        if (!GEOPDEnhancedPlacementFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 168;
        goto LABEL_500;
      case 89:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v116 = *(_DWORD *)(a1 + 772);
LABEL_673:
          LODWORD(v95) = v116 << 23;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDTemplatePlaceFilter);
        if (!GEOPDTemplatePlaceFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 592;
        goto LABEL_500;
      case 91:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x40000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v121 = *(_DWORD *)(a1 + 772);
LABEL_676:
          LODWORD(v95) = v121 << 13;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDTransitPaymentMethodInfoFilter);
        if (!GEOPDTransitPaymentMethodInfoFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 672;
        goto LABEL_500;
      case 93:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x200000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v117 = *(_DWORD *)(a1 + 764);
LABEL_679:
          LODWORD(v95) = v117 << 10;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDEnrichmentInfoFilter);
        if (!GEOPDEnrichmentInfoFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 184;
        goto LABEL_500;
      case 94:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v120 = *(_DWORD *)(a1 + 764);
LABEL_682:
          LODWORD(v95) = v120 << 28;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDActionDataFilter);
        if (!GEOPDActionDataFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 40;
        goto LABEL_500;
      case 95:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x100000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v118 = *(_DWORD *)(a1 + 764);
LABEL_685:
          LODWORD(v95) = v118 << 11;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDEnrichmentDataFilter);
        if (!GEOPDEnrichmentDataFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 176;
        goto LABEL_500;
      case 96:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x4000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 19);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDPOIClaimFilter);
        if (!GEOPDPOIClaimFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 416;
        goto LABEL_500;
      case 97:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x1000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v119 = *(_DWORD *)(a1 + 764);
LABEL_690:
          LODWORD(v95) = v119 << 7;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDEVChargerFilter);
        if (!GEOPDEVChargerFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 208;
        goto LABEL_500;
      case 98:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x1000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v109 = *(_DWORD *)(a1 + 772);
LABEL_693:
          LODWORD(v95) = v109 << 19;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDTrailHeadFilter);
        if (!GEOPDTrailHeadFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 624;
        goto LABEL_500;
      case 100:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x800000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 28);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDRefreshIdFilter);
        if (!GEOPDRefreshIdFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 488;
        goto LABEL_500;
      case 101:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v115 = *(_DWORD *)(a1 + 764);
LABEL_698:
          LODWORD(v95) = v115 << 27;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDAddressWithComponentsFilter);
        if (!GEOPDAddressWithComponentsFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 48;
        goto LABEL_500;
      case 102:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          LODWORD(v95) = *(_DWORD *)(a1 + 772) << 31;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDSearchResultPlacePhotoFilter);
        if (!GEOPDSearchResultPlacePhotoFilterReadAllFrom(v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 528;
        goto LABEL_500;
      case 103:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x20000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          LODWORD(v95) = 4 * *(_DWORD *)(a1 + 764);
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDForwardInfoFilter);
        if (!GEOPDForwardInfoFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 248;
        goto LABEL_500;
      case 104:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x100000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 1);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDHikeAssociatedInfoFilter);
        if (!GEOPDHikeAssociatedInfoFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 272;
        goto LABEL_500;
      case 105:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x400000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 3);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDHikeSummaryFilter);
        if (!GEOPDHikeSummaryFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 288;
        goto LABEL_500;
      case 106:
        if (!v82)
          goto LABEL_501;
        if ((*(_QWORD *)(a1 + 764) & 0x200000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v95 = (int)(*(uint64_t *)(a1 + 764) >> 2);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDHikeGeometryFilter);
        if (!GEOPDHikeGeometryFilterReadAllFrom((uint64_t)v87, v57))
          goto LABEL_824;
        PBReaderRecallMark();
        v88 = 280;
        goto LABEL_500;
      case 107:
        if (!v82)
          goto LABEL_501;
        if ((*(_DWORD *)(a1 + 772) & 0x800) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_825;
          v114 = *(_DWORD *)(a1 + 772);
LABEL_711:
          LODWORD(v95) = v114 << 20;
LABEL_712:
          v95 = (int)v95;
LABEL_713:
          v6 += v95 >> 31;
LABEL_714:
          v68 = (int *)MEMORY[0x1E0D82BC8];
LABEL_715:
          if (!(v136 & 1 | (v6 != 0)))
            goto LABEL_716;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_825;
        v87 = objc_alloc_init(GEOPDTooltipFilter);
        if (GEOPDTooltipFilterReadAllFrom((uint64_t)v87, v57))
        {
          PBReaderRecallMark();
          v88 = 616;
LABEL_500:
          v92 = *(void **)(a1 + v88);
          *(_QWORD *)(a1 + v88) = v87;

          --v6;
          goto LABEL_714;
        }
LABEL_824:

LABEL_825:
        v133 = 0;
        v68 = (int *)MEMORY[0x1E0D82BC8];
LABEL_717:
        if ((v134 & 1) != 0)
LABEL_718:
          *(_QWORD *)(a1 + 764) |= 1uLL;
        if (v65 & 1 | ((v133 & 1) == 0))
        {
          v122 = *(_DWORD *)(a1 + 772) | 0xFFFFFFF;
          *(_QWORD *)(a1 + 764) |= 0xFFFFFFFFFFFFFFFELL;
          *(_DWORD *)(a1 + 772) = v122;
        }
        else if (v135)
        {
          v124 = *v135;
          if (*v135)
          {
            v125 = v135 + 1;
            do
            {
              v126 = v124 - 1;
              v127 = 0;
              v128 = 0x400000;
              switch(v126)
              {
                case 0:
                  goto LABEL_816;
                case 1:
                  v127 = 0;
                  v128 = 0x400000000000;
                  goto LABEL_816;
                case 2:
                  v127 = 0;
                  v128 = 4;
                  goto LABEL_816;
                case 3:
                  v127 = 0;
                  v128 = 1024;
                  goto LABEL_816;
                case 4:
                  v127 = 0;
                  v128 = 32;
                  goto LABEL_816;
                case 5:
                  v127 = 0;
                  v128 = 0x200000000000000;
                  goto LABEL_816;
                case 6:
                  v127 = 0;
                  v128 = 0x8000000000000000;
                  goto LABEL_816;
                case 7:
                  v127 = 0;
                  v128 = 0x80000000000;
                  goto LABEL_816;
                case 8:
                  v127 = 0;
                  v128 = 0x800000000;
                  goto LABEL_816;
                case 9:
                  v128 = 0;
                  v127 = 0x10000;
                  goto LABEL_816;
                case 10:
                  v128 = 0;
                  v127 = 0x80000;
                  goto LABEL_816;
                case 11:
                  v127 = 0;
                  v128 = 0x800000;
                  goto LABEL_816;
                case 12:
                  v127 = 0;
                  v128 = 0x10000000;
                  goto LABEL_816;
                case 13:
                  v127 = 0;
                  v128 = 0x400000000000000;
                  goto LABEL_816;
                case 14:
                  v127 = 0;
                  v128 = 128;
                  goto LABEL_816;
                case 15:
                  v128 = 0;
                  v127 = 64;
                  goto LABEL_816;
                case 19:
                  v128 = 0;
                  v127 = 0x8000;
                  goto LABEL_816;
                case 20:
                  v128 = 0;
                  v127 = 0x2000;
                  goto LABEL_816;
                case 21:
                  v128 = 0;
                  v127 = 512;
                  goto LABEL_816;
                case 22:
                  v127 = 0;
                  v128 = 0x8000000;
                  goto LABEL_816;
                case 23:
                  v128 = 0;
                  v127 = 0x4000;
                  goto LABEL_816;
                case 24:
                  v127 = 0;
                  v128 = 4096;
                  goto LABEL_816;
                case 25:
                  v127 = 0;
                  v128 = 0x4000;
                  goto LABEL_816;
                case 26:
                  v128 = 0;
                  v127 = 0x20000;
                  goto LABEL_816;
                case 28:
                  v127 = 0;
                  v128 = 0x4000000;
                  goto LABEL_816;
                case 29:
                  v127 = 0;
                  v128 = 0x4000000000000000;
                  goto LABEL_816;
                case 30:
                  v127 = 0;
                  v128 = 64;
                  goto LABEL_816;
                case 31:
                  v128 = 0;
                  v127 = 2;
                  goto LABEL_816;
                case 32:
                  v127 = 0;
                  v128 = 0x2000000000000000;
                  goto LABEL_816;
                case 33:
                  v128 = 0;
                  v127 = 4;
                  goto LABEL_816;
                case 35:
                  v128 = 0;
                  v127 = 1024;
                  goto LABEL_816;
                case 36:
                  v127 = 0;
                  v128 = 0x2000000000000;
                  goto LABEL_816;
                case 37:
                  v127 = 0;
                  v128 = 512;
                  goto LABEL_816;
                case 38:
                  v127 = 0;
                  v128 = 0x20000000000;
                  goto LABEL_816;
                case 39:
                  v127 = 0;
                  v128 = 0x80000000000000;
                  goto LABEL_816;
                case 40:
                  v127 = 0;
                  v128 = 0x100000000000000;
                  goto LABEL_816;
                case 41:
                  v127 = 0;
                  v128 = 0x40000000000;
                  goto LABEL_816;
                case 42:
                  v127 = 0;
                  v128 = 0x10000000000;
                  goto LABEL_816;
                case 43:
                  v128 = 0;
                  v127 = 128;
                  goto LABEL_816;
                case 47:
                  v128 = 0;
                  v127 = 0x2000000;
                  goto LABEL_816;
                case 49:
                  v127 = 0;
                  v128 = 0x20000;
                  goto LABEL_816;
                case 50:
                  v128 = 0;
                  v127 = 0x8000000;
                  goto LABEL_816;
                case 51:
                  v127 = 0;
                  v128 = 0x1000000000;
                  goto LABEL_816;
                case 52:
                  v127 = 0;
                  v128 = 0x10000000000000;
                  goto LABEL_816;
                case 53:
                  v127 = 0;
                  v128 = 2048;
                  goto LABEL_816;
                case 54:
                  v128 = 0;
                  v127 = 16;
                  goto LABEL_816;
                case 55:
                  v127 = 0;
                  v128 = 0x40000000;
                  goto LABEL_816;
                case 56:
                  v127 = 0;
                  v128 = 256;
                  goto LABEL_816;
                case 57:
                  v127 = 0;
                  v128 = 0x8000000000000;
                  goto LABEL_816;
                case 58:
                  v128 = 0;
                  v127 = 32;
                  goto LABEL_816;
                case 59:
                  v127 = 0;
                  v128 = 0x1000000000000;
                  goto LABEL_816;
                case 60:
                  v127 = 0;
                  v128 = 0x20000000000000;
                  goto LABEL_816;
                case 61:
                  v128 = 0;
                  v127 = 0x800000;
                  goto LABEL_816;
                case 62:
                  v127 = 0;
                  v128 = 0x8000000000;
                  goto LABEL_816;
                case 63:
                  v127 = 0;
                  v128 = 0x2000;
                  goto LABEL_816;
                case 64:
                  v127 = 0;
                  v128 = 0x100000000000;
                  goto LABEL_816;
                case 65:
                  v127 = 0;
                  v128 = 0x1000000000000000;
                  goto LABEL_816;
                case 66:
                  v128 = 0;
                  v127 = 0x200000;
                  goto LABEL_816;
                case 67:
                  v128 = 0;
                  v127 = 0x400000;
                  goto LABEL_816;
                case 68:
                  v128 = 0;
                  v127 = 0x100000;
                  goto LABEL_816;
                case 69:
                  v128 = 0;
                  v127 = 0x4000000;
                  goto LABEL_816;
                case 70:
                  v127 = 0;
                  v128 = 0x40000000000000;
                  goto LABEL_816;
                case 72:
                  v127 = 0;
                  v128 = 0x800000000000;
                  goto LABEL_816;
                case 73:
                  v127 = 0;
                  v128 = 0x200000000000;
                  goto LABEL_816;
                case 75:
                  v127 = 0;
                  v128 = 0x10000;
                  goto LABEL_816;
                case 76:
                  v127 = 0;
                  v128 = 0x2000000000;
                  goto LABEL_816;
                case 77:
                  v128 = 0;
                  v127 = 0x1000000;
                  goto LABEL_816;
                case 80:
                  v128 = 0;
                  v127 = 8;
                  goto LABEL_816;
                case 81:
                  v127 = 0;
                  v128 = 0x80000000;
                  goto LABEL_816;
                case 82:
                  v127 = 0;
                  v128 = 0x40000;
                  goto LABEL_816;
                case 83:
                  v127 = 0;
                  v128 = 0x8000;
                  goto LABEL_816;
                case 84:
                  v127 = 0;
                  v128 = 0x2000000;
                  goto LABEL_816;
                case 85:
                  v127 = 0;
                  v128 = 2;
                  goto LABEL_816;
                case 86:
                  v127 = 0;
                  v128 = 0x4000000000;
                  goto LABEL_816;
                case 87:
                  v127 = 0;
                  v128 = 0x80000;
                  goto LABEL_816;
                case 88:
                  v128 = 0;
                  v127 = 256;
                  goto LABEL_816;
                case 90:
                  v128 = 0;
                  v127 = 0x40000;
                  goto LABEL_816;
                case 92:
                  v127 = 0;
                  v128 = 0x200000;
                  goto LABEL_816;
                case 93:
                  v127 = 0;
                  v128 = 8;
                  goto LABEL_816;
                case 94:
                  v127 = 0;
                  v128 = 0x100000;
                  goto LABEL_816;
                case 95:
                  v127 = 0;
                  v128 = 0x4000000000000;
                  goto LABEL_816;
                case 96:
                  v127 = 0;
                  v128 = 0x1000000;
                  goto LABEL_816;
                case 97:
                  v128 = 0;
                  v127 = 4096;
                  goto LABEL_816;
                case 99:
                  v127 = 0;
                  v128 = 0x800000000000000;
                  goto LABEL_816;
                case 100:
                  v127 = 0;
                  v128 = 16;
                  goto LABEL_816;
                case 101:
                  v128 = 0;
                  v127 = 1;
                  goto LABEL_816;
                case 102:
                  v127 = 0;
                  v128 = 0x20000000;
                  goto LABEL_816;
                case 103:
                  v127 = 0;
                  v128 = 0x100000000;
                  goto LABEL_816;
                case 104:
                  v127 = 0;
                  v128 = 0x400000000;
                  goto LABEL_816;
                case 105:
                  v127 = 0;
                  v128 = 0x200000000;
                  goto LABEL_816;
                case 106:
                  v128 = 0;
                  v127 = 2048;
LABEL_816:
                  v129 = *(_DWORD *)(a1 + 772) | v127;
                  *(_QWORD *)(a1 + 764) |= v128;
                  *(_DWORD *)(a1 + 772) = v129;
                  break;
                default:
                  break;
              }
              v130 = *v125++;
              v124 = v130;
            }
            while (v130);
          }
        }
        if (v133)
        {
          v123 = v57[*v68] == 0;
          if ((v65 & 1) == 0)
            return v123;
LABEL_822:
          v131 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v123 = 0;
          if ((v65 & 1) != 0)
            goto LABEL_822;
        }
        return v123;
      default:
        if ((v134 & 1) == 0 || (*(_QWORD *)(a1 + 764) & 1) != 0)
        {
LABEL_501:
          v93 = PBReaderSkipValueWithTag();
          v68 = (int *)MEMORY[0x1E0D82BC8];
          if ((v93 & 1) == 0)
          {
            v133 = 0;
            goto LABEL_717;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v89 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v90 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v89;

          }
          v91 = PBUnknownFieldAdd();
          v68 = (int *)MEMORY[0x1E0D82BC8];
          if (!v91)
          {
            v133 = 0;
            goto LABEL_718;
          }
        }
        goto LABEL_715;
    }
  }
}

void sub_1886A62DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886A639C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886A646C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDAmenitiesFilterReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            v20 = 0;
LABEL_34:
          *(_BYTE *)(a1 + 16) = v20 != 0;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_1886A66EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDPlaceCollectionFilterReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  BOOL v69;
  uint64_t v70;
  _BOOL8 v71;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 28) |= 1u;
            while (2)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
                *(_QWORD *)&v3[v21] = v23;
                v20 |= (unint64_t)(v24 & 0x7F) << v18;
                if (v24 < 0)
                {
                  v18 += 7;
                  v15 = v19++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_76;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_76:
            *(_DWORD *)(a1 + 16) = v20;
            continue;
          case 2u:
            v27 = 0;
            v28 = 0;
            v29 = 0;
            *(_BYTE *)(a1 + 28) |= 0x40u;
            while (1)
            {
              v30 = *v4;
              v31 = *(_QWORD *)&v3[v30];
              v32 = v31 + 1;
              if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
                break;
              v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
              *(_QWORD *)&v3[v30] = v32;
              v29 |= (unint64_t)(v33 & 0x7F) << v27;
              if ((v33 & 0x80) == 0)
                goto LABEL_78;
              v27 += 7;
              v15 = v28++ >= 9;
              if (v15)
              {
                v29 = 0;
                goto LABEL_80;
              }
            }
            v3[*v6] = 1;
LABEL_78:
            if (v3[*v6])
              v29 = 0;
LABEL_80:
            v69 = v29 != 0;
            v70 = 25;
            goto LABEL_101;
          case 3u:
            v34 = 0;
            v35 = 0;
            v36 = 0;
            *(_BYTE *)(a1 + 28) |= 0x10u;
            while (2)
            {
              v37 = *v4;
              v38 = *(_QWORD *)&v3[v37];
              v39 = v38 + 1;
              if (v38 == -1 || v39 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v40 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v38);
                *(_QWORD *)&v3[v37] = v39;
                v36 |= (unint64_t)(v40 & 0x7F) << v34;
                if (v40 < 0)
                {
                  v34 += 7;
                  v15 = v35++ >= 9;
                  if (v15)
                  {
                    v36 = 0;
                    goto LABEL_84;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v36 = 0;
LABEL_84:
            v69 = v36 != 0;
            v70 = 23;
            goto LABEL_101;
          case 4u:
            v41 = 0;
            v42 = 0;
            v43 = 0;
            *(_BYTE *)(a1 + 28) |= 2u;
            while (2)
            {
              v44 = *v4;
              v45 = *(_QWORD *)&v3[v44];
              v46 = v45 + 1;
              if (v45 == -1 || v46 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v47 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v45);
                *(_QWORD *)&v3[v44] = v46;
                v43 |= (unint64_t)(v47 & 0x7F) << v41;
                if (v47 < 0)
                {
                  v41 += 7;
                  v15 = v42++ >= 9;
                  if (v15)
                  {
                    v43 = 0;
                    goto LABEL_88;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v43 = 0;
LABEL_88:
            v69 = v43 != 0;
            v70 = 20;
            goto LABEL_101;
          case 5u:
            v48 = 0;
            v49 = 0;
            v50 = 0;
            *(_BYTE *)(a1 + 28) |= 0x20u;
            while (2)
            {
              v51 = *v4;
              v52 = *(_QWORD *)&v3[v51];
              v53 = v52 + 1;
              if (v52 == -1 || v53 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v54 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v52);
                *(_QWORD *)&v3[v51] = v53;
                v50 |= (unint64_t)(v54 & 0x7F) << v48;
                if (v54 < 0)
                {
                  v48 += 7;
                  v15 = v49++ >= 9;
                  if (v15)
                  {
                    v50 = 0;
                    goto LABEL_92;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v50 = 0;
LABEL_92:
            v69 = v50 != 0;
            v70 = 24;
            goto LABEL_101;
          case 6u:
            v55 = 0;
            v56 = 0;
            v57 = 0;
            *(_BYTE *)(a1 + 28) |= 4u;
            while (2)
            {
              v58 = *v4;
              v59 = *(_QWORD *)&v3[v58];
              v60 = v59 + 1;
              if (v59 == -1 || v60 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v61 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v59);
                *(_QWORD *)&v3[v58] = v60;
                v57 |= (unint64_t)(v61 & 0x7F) << v55;
                if (v61 < 0)
                {
                  v55 += 7;
                  v15 = v56++ >= 9;
                  if (v15)
                  {
                    v57 = 0;
                    goto LABEL_96;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v57 = 0;
LABEL_96:
            v69 = v57 != 0;
            v70 = 21;
            goto LABEL_101;
          case 7u:
            v62 = 0;
            v63 = 0;
            v64 = 0;
            *(_BYTE *)(a1 + 28) |= 8u;
            break;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v26 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v25;

            }
            if (!PBUnknownFieldAdd())
              goto LABEL_104;
            continue;
        }
        while (1)
        {
          v65 = *v4;
          v66 = *(_QWORD *)&v3[v65];
          v67 = v66 + 1;
          if (v66 == -1 || v67 > *(_QWORD *)&v3[*v5])
            break;
          v68 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v66);
          *(_QWORD *)&v3[v65] = v67;
          v64 |= (unint64_t)(v68 & 0x7F) << v62;
          if ((v68 & 0x80) == 0)
            goto LABEL_98;
          v62 += 7;
          v15 = v63++ >= 9;
          if (v15)
          {
            v64 = 0;
            goto LABEL_100;
          }
        }
        v3[*v6] = 1;
LABEL_98:
        if (v3[*v6])
          v64 = 0;
LABEL_100:
        v69 = v64 != 0;
        v70 = 22;
LABEL_101:
        *(_BYTE *)(a1 + v70) = v69;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v71 = v3[*v6] == 0;
  }
  else
  {
LABEL_104:
    v71 = 0;
  }
  objc_sync_exit(v3);

  return v71;
}

void sub_1886A6D7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSupportsOfflineMapsFilterReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  int v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  BOOL v18;
  id v19;
  void *v20;
  _BOOL8 v21;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v8 = v3[*v6];
      if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
        break;
      if (v3[*v6])
      {
        v8 = 1;
        break;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)&v3[v12];
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)&v3[*v5])
          break;
        v15 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v13);
        *(_QWORD *)&v3[v12] = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_13;
        v9 += 7;
        if (v10++ >= 9)
        {
          v17 = 0;
          v8 = v3[*v6];
          goto LABEL_16;
        }
      }
      v3[*v6] = 1;
LABEL_13:
      v8 = v3[*v6];
      if (v3[*v6])
        v17 = 0;
      else
        v17 = v11;
LABEL_16:
      if (v8)
        v18 = 1;
      else
        v18 = (v17 & 7) == 4;
      if (v18)
        break;
      if (!*(_QWORD *)(a1 + 8))
      {
        v19 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v20 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v19;

      }
      if ((PBUnknownFieldAdd() & 1) == 0)
        goto LABEL_23;
    }
    v21 = v8 == 0;
  }
  else
  {
LABEL_23:
    v21 = 0;
  }
  objc_sync_exit(v3);

  return v21;
}

void sub_1886A6F28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDResultSnippetFilterReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  id v26;
  void *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  _BOOL8 v56;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (2)
      {
        if (!v3[*v6])
        {
          v8 = 0;
          v9 = 0;
          v10 = 0;
          while (1)
          {
            v11 = *v4;
            v12 = *(_QWORD *)&v3[v11];
            v13 = v12 + 1;
            if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
              break;
            v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
            *(_QWORD *)&v3[v11] = v13;
            v10 |= (unint64_t)(v14 & 0x7F) << v8;
            if ((v14 & 0x80) == 0)
              goto LABEL_13;
            v8 += 7;
            v15 = v9++ >= 9;
            if (v15)
            {
              v10 = 0;
              v16 = v3[*v6];
              goto LABEL_15;
            }
          }
          v3[*v6] = 1;
LABEL_13:
          v16 = v3[*v6];
          if (v3[*v6])
            v10 = 0;
LABEL_15:
          v17 = v10 & 7;
          if (!v16 && v17 != 4)
          {
            switch((v10 >> 3))
            {
              case 1u:
                v19 = 0;
                v20 = 0;
                v21 = 0;
                *(_BYTE *)(a1 + 52) |= 2u;
                while (1)
                {
                  v22 = *v4;
                  v23 = *(_QWORD *)&v3[v22];
                  v24 = v23 + 1;
                  if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
                    break;
                  v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
                  *(_QWORD *)&v3[v22] = v24;
                  v21 |= (unint64_t)(v25 & 0x7F) << v19;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_59;
                  v19 += 7;
                  v15 = v20++ >= 9;
                  if (v15)
                  {
                    LODWORD(v21) = 0;
                    goto LABEL_61;
                  }
                }
                v3[*v6] = 1;
LABEL_59:
                if (v3[*v6])
                  LODWORD(v21) = 0;
LABEL_61:
                v48 = 44;
                goto LABEL_70;
              case 2u:
                v28 = 0;
                v29 = 0;
                v30 = 0;
                *(_BYTE *)(a1 + 52) |= 4u;
                while (2)
                {
                  v31 = *v4;
                  v32 = *(_QWORD *)&v3[v31];
                  v33 = v32 + 1;
                  if (v32 == -1 || v33 > *(_QWORD *)&v3[*v5])
                  {
                    v3[*v6] = 1;
                  }
                  else
                  {
                    v34 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v32);
                    *(_QWORD *)&v3[v31] = v33;
                    v30 |= (unint64_t)(v34 & 0x7F) << v28;
                    if (v34 < 0)
                    {
                      v28 += 7;
                      v15 = v29++ >= 9;
                      if (v15)
                      {
                        v30 = 0;
                        goto LABEL_65;
                      }
                      continue;
                    }
                  }
                  break;
                }
                if (v3[*v6])
                  v30 = 0;
LABEL_65:
                *(_BYTE *)(a1 + 48) = v30 != 0;
                goto LABEL_71;
              case 3u:
                v35 = 0;
                v36 = 0;
                v21 = 0;
                *(_BYTE *)(a1 + 52) |= 1u;
                while (2)
                {
                  v37 = *v4;
                  v38 = *(_QWORD *)&v3[v37];
                  v39 = v38 + 1;
                  if (v38 == -1 || v39 > *(_QWORD *)&v3[*v5])
                  {
                    v3[*v6] = 1;
                  }
                  else
                  {
                    v40 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v38);
                    *(_QWORD *)&v3[v37] = v39;
                    v21 |= (unint64_t)(v40 & 0x7F) << v35;
                    if (v40 < 0)
                    {
                      v35 += 7;
                      v15 = v36++ >= 9;
                      if (v15)
                      {
                        LODWORD(v21) = 0;
                        goto LABEL_69;
                      }
                      continue;
                    }
                  }
                  break;
                }
                if (v3[*v6])
                  LODWORD(v21) = 0;
LABEL_69:
                v48 = 40;
LABEL_70:
                *(_DWORD *)(a1 + v48) = v21;
                goto LABEL_71;
              case 4u:
                if (v17 == 2)
                {
                  if (!PBReaderPlaceMark())
                    goto LABEL_84;
                  while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5] && !v3[*v6])
                  {
                    v41 = 0;
                    v42 = 0;
                    v43 = 0;
                    while (1)
                    {
                      v44 = *v4;
                      v45 = *(_QWORD *)&v3[v44];
                      v46 = v45 + 1;
                      if (v45 == -1 || v46 > *(_QWORD *)&v3[*v5])
                        break;
                      v47 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v45);
                      *(_QWORD *)&v3[v44] = v46;
                      v43 |= (unint64_t)(v47 & 0x7F) << v41;
                      if (v47 < 0)
                      {
                        v41 += 7;
                        v15 = v42++ >= 9;
                        if (!v15)
                          continue;
                      }
                      goto LABEL_57;
                    }
                    v3[*v6] = 1;
LABEL_57:
                    PBRepeatedInt32Add();
                  }
                  PBReaderRecallMark();
                }
                else
                {
                  v49 = 0;
                  v50 = 0;
                  v51 = 0;
                  while (1)
                  {
                    v52 = *v4;
                    v53 = *(_QWORD *)&v3[v52];
                    v54 = v53 + 1;
                    if (v53 == -1 || v54 > *(_QWORD *)&v3[*v5])
                      break;
                    v55 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v53);
                    *(_QWORD *)&v3[v52] = v54;
                    v51 |= (unint64_t)(v55 & 0x7F) << v49;
                    if (v55 < 0)
                    {
                      v49 += 7;
                      v15 = v50++ >= 9;
                      if (!v15)
                        continue;
                    }
                    goto LABEL_82;
                  }
                  v3[*v6] = 1;
LABEL_82:
                  PBRepeatedInt32Add();
                }
LABEL_71:
                if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
                  break;
                continue;
              default:
                if (!*(_QWORD *)(a1 + 8))
                {
                  v26 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
                  v27 = *(void **)(a1 + 8);
                  *(_QWORD *)(a1 + 8) = v26;

                }
                if (!PBUnknownFieldAdd())
                  goto LABEL_84;
                goto LABEL_71;
            }
          }
        }
        break;
      }
    }
    v56 = v3[*v6] == 0;
  }
  else
  {
LABEL_84:
    v56 = 0;
  }
  objc_sync_exit(v3);

  return v56;
}

void sub_1886A7494(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDRelatedPlaceFilterReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  id v32;
  void *v33;
  _BOOL8 v34;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v28 = *v4;
            v29 = *(_QWORD *)&v3[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&v3[*v5])
              break;
            v31 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
            *(_QWORD *)&v3[v28] = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if ((v31 & 0x80) == 0)
              goto LABEL_44;
            v25 += 7;
            v15 = v26++ >= 9;
            if (v15)
            {
              v27 = 0;
              goto LABEL_46;
            }
          }
          v3[*v6] = 1;
LABEL_44:
          if (v3[*v6])
            v27 = 0;
LABEL_46:
          *(_BYTE *)(a1 + 20) = v27 != 0;
        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_40;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_42;
            }
          }
          v3[*v6] = 1;
LABEL_40:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_42:
          *(_DWORD *)(a1 + 16) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v32 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v33 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v32;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_49;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v34 = v3[*v6] == 0;
  }
  else
  {
LABEL_49:
    v34 = 0;
  }
  objc_sync_exit(v3);

  return v34;
}

void sub_1886A77C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDQuickLinkFilterReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_34:
          *(_DWORD *)(a1 + 16) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_1886A7A40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDPublisherFilterReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            v20 = 0;
LABEL_34:
          *(_BYTE *)(a1 + 16) = v20 != 0;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_1886A7CC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDOfflineAreaFilterReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  int v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  BOOL v18;
  id v19;
  void *v20;
  _BOOL8 v21;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v8 = v3[*v6];
      if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
        break;
      if (v3[*v6])
      {
        v8 = 1;
        break;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)&v3[v12];
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)&v3[*v5])
          break;
        v15 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v13);
        *(_QWORD *)&v3[v12] = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_13;
        v9 += 7;
        if (v10++ >= 9)
        {
          v17 = 0;
          v8 = v3[*v6];
          goto LABEL_16;
        }
      }
      v3[*v6] = 1;
LABEL_13:
      v8 = v3[*v6];
      if (v3[*v6])
        v17 = 0;
      else
        v17 = v11;
LABEL_16:
      if (v8)
        v18 = 1;
      else
        v18 = (v17 & 7) == 4;
      if (v18)
        break;
      if (!*(_QWORD *)(a1 + 8))
      {
        v19 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v20 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v19;

      }
      if ((PBUnknownFieldAdd() & 1) == 0)
        goto LABEL_23;
    }
    v21 = v8 == 0;
  }
  else
  {
LABEL_23:
    v21 = 0;
  }
  objc_sync_exit(v3);

  return v21;
}

void sub_1886A7E6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDFactoidFilterReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            v20 = 0;
LABEL_34:
          *(_BYTE *)(a1 + 16) = v20 != 0;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_1886A80EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDCaptionedPhotoFilterReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDCaptionedPhotoFilterReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDCaptionedPhotoFilterReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDCaptionedPhotoFilterReadAllFrom_initialTag;
  Specified = GEOPDCaptionedPhotoFilterReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1886A8274(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDRapReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  id v23;
  void *v24;
  _BOOL8 v25;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
              break;
            v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
            *(_QWORD *)&v3[v20] = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_32;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            LODWORD(v19) = 0;
LABEL_34:
          *(_DWORD *)(a1 + 16) = v19;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v23 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v24 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v23;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v25 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v25 = 0;
  }
  objc_sync_exit(v3);

  return v25;
}

void sub_1886A882C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::FileOptions::~FileOptions(AddrObjGoogle::protobuf::FileOptions *this)
{
  AddrObjGoogle::protobuf::FileOptions::~FileOptions(this);
  JUMPOUT(0x18D76437CLL);
}

{
  *(_QWORD *)this = &off_1E1BF5118;
  AddrObjGoogle::protobuf::FileOptions::SharedDtor(this);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 9);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((AddrObjGoogle::protobuf::FileOptions *)((char *)this + 32));
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet((AddrObjGoogle::protobuf::FileOptions *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

uint64_t AddrObjGoogle::protobuf::FileOptions::SharedDtor(AddrObjGoogle::protobuf::FileOptions *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  v2 = (uint64_t *)*((_QWORD *)this + 5);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 5);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  v5 = (uint64_t *)*((_QWORD *)this + 6);
  v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  if (v5 != v6)
  {
    v7 = *((_QWORD *)this + 6);
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      v6 = (uint64_t *)MEMORY[0x18D76437C](v7, 0x1012C40EC159624);
    }
  }
  v8 = (uint64_t *)*((_QWORD *)this + 8);
  v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  if (v8 != v9)
  {
    v10 = *((_QWORD *)this + 8);
    if (v10)
    {
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      v9 = (uint64_t *)MEMORY[0x18D76437C](v10, 0x1012C40EC159624);
    }
  }
  return AddrObjGoogle::protobuf::FileOptions::default_instance_((AddrObjGoogle::protobuf::FileOptions *)v9);
}

void AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(AddrObjGoogle::protobuf *this, uint64_t a2, uint64_t a3, const char *a4)
{
  AddrObjGoogle::protobuf::FileDescriptorSet *v4;
  AddrObjGoogle::protobuf::FileDescriptorProto *v5;
  AddrObjGoogle::protobuf::FileOptions *v6;
  AddrObjGoogle::protobuf::SourceCodeInfo *v7;
  AddrObjGoogle::protobuf::DescriptorProto *v8;
  AddrObjGoogle::protobuf::MessageOptions *v9;
  AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *v10;
  AddrObjGoogle::protobuf::FieldDescriptorProto *v11;
  AddrObjGoogle::protobuf::FieldOptions *v12;
  AddrObjGoogle::protobuf::EnumDescriptorProto *v13;
  AddrObjGoogle::protobuf::EnumOptions *v14;
  AddrObjGoogle::protobuf::EnumValueDescriptorProto *v15;
  AddrObjGoogle::protobuf::EnumValueOptions *v16;
  AddrObjGoogle::protobuf::ServiceDescriptorProto *v17;
  AddrObjGoogle::protobuf::ServiceOptions *v18;
  AddrObjGoogle::protobuf::MethodDescriptorProto *v19;
  AddrObjGoogle::protobuf::MethodOptions *v20;
  AddrObjGoogle::protobuf::FileOptions *v21;
  AddrObjGoogle::protobuf::MessageOptions *v22;
  AddrObjGoogle::protobuf::FieldOptions *v23;
  AddrObjGoogle::protobuf::EnumOptions *v24;
  AddrObjGoogle::protobuf::EnumValueOptions *v25;
  AddrObjGoogle::protobuf::ServiceOptions *v26;
  AddrObjGoogle::protobuf::MethodOptions *v27;
  AddrObjGoogle::protobuf::UninterpretedOption *v28;
  AddrObjGoogle::protobuf::UninterpretedOption_NamePart *v29;
  AddrObjGoogle::protobuf::SourceCodeInfo *v30;
  AddrObjGoogle::protobuf::SourceCodeInfo_Location *v31;
  void (*v32)(void);

  if ((byte_1EDF507B0 & 1) == 0)
  {
    byte_1EDF507B0 = 1;
    AddrObjGoogle::protobuf::internal::VerifyVersion((AddrObjGoogle::protobuf::internal *)0x1E9808, (AddrObjGoogle::protobuf::internal *)0x1E9808, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/descriptor.pb.cc", a4);
    AddrObjGoogle::protobuf::DescriptorPool::InternalAddGeneratedFile((AddrObjGoogle::protobuf::DescriptorPool *)&unk_189C5D8CC, (const void *)0x1027);
    AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedFile("google/protobuf/descriptor.proto", (std::string::size_type)sub_1887FC268);
    v5 = (AddrObjGoogle::protobuf::FileDescriptorProto *)AddrObjGoogle::protobuf::FileDescriptorSet::default_instance_(v4);
    v6 = (AddrObjGoogle::protobuf::FileOptions *)AddrObjGoogle::protobuf::FileDescriptorProto::default_instance_(v5);
    v7 = (AddrObjGoogle::protobuf::SourceCodeInfo *)AddrObjGoogle::protobuf::FileOptions::default_instance(v6);
    *((_QWORD *)v6 + 23) = v7;
    v8 = (AddrObjGoogle::protobuf::DescriptorProto *)AddrObjGoogle::protobuf::SourceCodeInfo::default_instance(v7);
    *((_QWORD *)v6 + 24) = v8;
    v9 = (AddrObjGoogle::protobuf::MessageOptions *)AddrObjGoogle::protobuf::DescriptorProto::default_instance_(v8);
    v10 = (AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *)AddrObjGoogle::protobuf::MessageOptions::default_instance(v9);
    *((_QWORD *)v9 + 18) = v10;
    v11 = (AddrObjGoogle::protobuf::FieldDescriptorProto *)AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::default_instance_(v10);
    v12 = (AddrObjGoogle::protobuf::FieldOptions *)AddrObjGoogle::protobuf::FieldDescriptorProto::default_instance_(v11);
    v13 = (AddrObjGoogle::protobuf::EnumDescriptorProto *)AddrObjGoogle::protobuf::FieldOptions::default_instance(v12);
    *((_QWORD *)v12 + 7) = v13;
    v14 = (AddrObjGoogle::protobuf::EnumOptions *)AddrObjGoogle::protobuf::EnumDescriptorProto::default_instance_(v13);
    v15 = (AddrObjGoogle::protobuf::EnumValueDescriptorProto *)AddrObjGoogle::protobuf::EnumOptions::default_instance(v14);
    *((_QWORD *)v14 + 6) = v15;
    v16 = (AddrObjGoogle::protobuf::EnumValueOptions *)AddrObjGoogle::protobuf::EnumValueDescriptorProto::default_instance_(v15);
    v17 = (AddrObjGoogle::protobuf::ServiceDescriptorProto *)AddrObjGoogle::protobuf::EnumValueOptions::default_instance(v16);
    *((_QWORD *)v16 + 3) = v17;
    v18 = (AddrObjGoogle::protobuf::ServiceOptions *)AddrObjGoogle::protobuf::ServiceDescriptorProto::default_instance_(v17);
    v19 = (AddrObjGoogle::protobuf::MethodDescriptorProto *)AddrObjGoogle::protobuf::ServiceOptions::default_instance(v18);
    *((_QWORD *)v18 + 6) = v19;
    v20 = (AddrObjGoogle::protobuf::MethodOptions *)AddrObjGoogle::protobuf::MethodDescriptorProto::default_instance_(v19);
    v21 = (AddrObjGoogle::protobuf::FileOptions *)AddrObjGoogle::protobuf::MethodOptions::default_instance(v20);
    *((_QWORD *)v20 + 5) = v21;
    v22 = (AddrObjGoogle::protobuf::MessageOptions *)AddrObjGoogle::protobuf::FileOptions::default_instance_(v21);
    v23 = (AddrObjGoogle::protobuf::FieldOptions *)AddrObjGoogle::protobuf::MessageOptions::default_instance_(v22);
    v24 = (AddrObjGoogle::protobuf::EnumOptions *)AddrObjGoogle::protobuf::FieldOptions::default_instance_(v23);
    v25 = (AddrObjGoogle::protobuf::EnumValueOptions *)AddrObjGoogle::protobuf::EnumOptions::default_instance_(v24);
    v26 = (AddrObjGoogle::protobuf::ServiceOptions *)AddrObjGoogle::protobuf::EnumValueOptions::default_instance_(v25);
    v27 = (AddrObjGoogle::protobuf::MethodOptions *)AddrObjGoogle::protobuf::ServiceOptions::default_instance_(v26);
    v28 = (AddrObjGoogle::protobuf::UninterpretedOption *)AddrObjGoogle::protobuf::MethodOptions::default_instance_(v27);
    v29 = (AddrObjGoogle::protobuf::UninterpretedOption_NamePart *)AddrObjGoogle::protobuf::UninterpretedOption::default_instance_(v28);
    v30 = (AddrObjGoogle::protobuf::SourceCodeInfo *)AddrObjGoogle::protobuf::UninterpretedOption_NamePart::default_instance_(v29);
    v31 = (AddrObjGoogle::protobuf::SourceCodeInfo_Location *)AddrObjGoogle::protobuf::SourceCodeInfo::default_instance_(v30);
    AddrObjGoogle::protobuf::SourceCodeInfo_Location::default_instance_(v31);
    AddrObjGoogle::protobuf::internal::OnShutdown((AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::protobuf_ShutdownFile_google_2fprotobuf_2fdescriptor_2eproto, v32);
  }
}

uint64_t AddrObjGoogle::protobuf::FieldOptions::default_instance_(AddrObjGoogle::protobuf::FieldOptions *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::FieldOptions *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF505C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF505C8))
  {
    v3 = (AddrObjGoogle::protobuf::FieldOptions *)operator new();
    AddrObjGoogle::protobuf::FieldOptions::FieldOptions(v3);
    qword_1EDF505C0 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF505C8);
  }
  return qword_1EDF505C0;
}

void sub_1886A903C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C409A5D65B8);
  __cxa_guard_abort(&qword_1EDF505C8);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::FileOptions::default_instance_(AddrObjGoogle::protobuf::FileOptions *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::FileOptions *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF505A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF505A8))
  {
    v3 = (AddrObjGoogle::protobuf::FileOptions *)operator new();
    AddrObjGoogle::protobuf::FileOptions::FileOptions(v3);
    qword_1EDF505A0 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF505A8);
  }
  return qword_1EDF505A0;
}

void sub_1886A90E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C4072609925);
  __cxa_guard_abort(&qword_1EDF505A8);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::EnumValueOptions::default_instance_(AddrObjGoogle::protobuf::EnumValueOptions *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::EnumValueOptions *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF505E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF505E8))
  {
    v3 = (AddrObjGoogle::protobuf::EnumValueOptions *)operator new();
    AddrObjGoogle::protobuf::EnumValueOptions::EnumValueOptions(v3);
    qword_1EDF505E0 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF505E8);
  }
  return qword_1EDF505E0;
}

void sub_1886A9194(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C406A05FE54);
  __cxa_guard_abort(&qword_1EDF505E8);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::SourceCodeInfo::default_instance_(AddrObjGoogle::protobuf::SourceCodeInfo *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::SourceCodeInfo *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50648);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50648))
  {
    v3 = (AddrObjGoogle::protobuf::SourceCodeInfo *)operator new();
    AddrObjGoogle::protobuf::SourceCodeInfo::SourceCodeInfo(v3);
    qword_1EDF50640 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50648);
  }
  return qword_1EDF50640;
}

void sub_1886A9240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40F1948F29);
  __cxa_guard_abort(&qword_1EDF50648);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::ServiceOptions::default_instance_(AddrObjGoogle::protobuf::ServiceOptions *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::ServiceOptions *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF505F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF505F8))
  {
    v3 = (AddrObjGoogle::protobuf::ServiceOptions *)operator new();
    AddrObjGoogle::protobuf::ServiceOptions::ServiceOptions(v3);
    qword_1EDF505F0 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF505F8);
  }
  return qword_1EDF505F0;
}

void sub_1886A92EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C406A05FE54);
  __cxa_guard_abort(&qword_1EDF505F8);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::MessageOptions::default_instance_(AddrObjGoogle::protobuf::MessageOptions *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::MessageOptions *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF505B8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF505B8))
  {
    v3 = (AddrObjGoogle::protobuf::MessageOptions *)operator new();
    AddrObjGoogle::protobuf::MessageOptions::MessageOptions(v3);
    qword_1EDF505B0 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF505B8);
  }
  return qword_1EDF505B0;
}

void sub_1886A9398(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40ABAA5818);
  __cxa_guard_abort(&qword_1EDF505B8);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::MethodOptions::default_instance_(AddrObjGoogle::protobuf::MethodOptions *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::MethodOptions *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50608);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50608))
  {
    v3 = (AddrObjGoogle::protobuf::MethodOptions *)operator new();
    AddrObjGoogle::protobuf::MethodOptions::MethodOptions(v3);
    qword_1EDF50600 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50608);
  }
  return qword_1EDF50600;
}

void sub_1886A9444(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C406A05FE54);
  __cxa_guard_abort(&qword_1EDF50608);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::EnumOptions::default_instance_(AddrObjGoogle::protobuf::EnumOptions *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::EnumOptions *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF505D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF505D8))
  {
    v3 = (AddrObjGoogle::protobuf::EnumOptions *)operator new();
    AddrObjGoogle::protobuf::EnumOptions::EnumOptions(v3);
    qword_1EDF505D0 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF505D8);
  }
  return qword_1EDF505D0;
}

void sub_1886A94F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40FFAE3E5BLL);
  __cxa_guard_abort(&qword_1EDF505D8);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::internal::VerifyVersion(AddrObjGoogle::protobuf::internal *this, AddrObjGoogle::protobuf::internal *a2, const std::string::value_type *a3, const char *a4)
{
  const std::string::value_type *v7;
  std::string::size_type v8;
  const std::string::value_type *p_p;
  std::string::size_type v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  void *__p;
  std::string::size_type v16;
  unsigned __int8 v17;
  void *v18;
  std::string::size_type v19;
  unsigned __int8 v20;
  int v21;
  const char *v22;
  int v23;
  std::string v24;
  char __str[127];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((int)a2 > 2005000)
  {
    v21 = 3;
    v22 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/stubs/common.cc";
    v23 = 62;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program requires version ");
    AddrObjGoogle::protobuf::internal::VersionString(a2, &v18);
    if ((v20 & 0x80u) == 0)
      v7 = (const std::string::value_type *)&v18;
    else
      v7 = (const std::string::value_type *)v18;
    if ((v20 & 0x80u) == 0)
      v8 = v20;
    else
      v8 = v19;
    std::string::append(&v24, v7, v8);
    std::string::append(&v24, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 2, 5, 0);
    v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v17 & 0x80u) == 0)
      v10 = v17;
    else
      v10 = v16;
    std::string::append(&v24, p_p, v10);
    std::string::append(&v24, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    AddrObjGoogle::protobuf::internal::LogMessage::Finish((AddrObjGoogle::protobuf::internal::LogMessage *)&v21);
    if ((char)v17 < 0)
      operator delete(__p);
    if ((char)v20 < 0)
      operator delete(v18);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  if ((int)this < 2005000)
  {
    v21 = 3;
    v22 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/stubs/common.cc";
    v23 = 73;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program was compiled against version ");
    AddrObjGoogle::protobuf::internal::VersionString(this, &v18);
    if ((v20 & 0x80u) == 0)
      v11 = (const std::string::value_type *)&v18;
    else
      v11 = (const std::string::value_type *)v18;
    if ((v20 & 0x80u) == 0)
      v12 = v20;
    else
      v12 = v19;
    std::string::append(&v24, v11, v12);
    std::string::append(&v24, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 2, 5, 0);
    v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0)
      v13 = (const std::string::value_type *)&__p;
    else
      v13 = (const std::string::value_type *)__p;
    if ((v17 & 0x80u) == 0)
      v14 = v17;
    else
      v14 = v16;
    std::string::append(&v24, v13, v14);
    std::string::append(&v24, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    AddrObjGoogle::protobuf::internal::LogMessage::Finish((AddrObjGoogle::protobuf::internal::LogMessage *)&v21);
    if ((char)v17 < 0)
      operator delete(__p);
    if ((char)v20 < 0)
      operator delete(v18);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1886A9820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedFile(const std::string::value_type *a1, std::string::size_type a2)
{
  uint64_t v4;
  char v5;
  std::string *v6;
  std::string *v7;
  char v8;
  std::string v9[2];

  v4 = sub_1887F4F30();
  v9[0].__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
  v9[0].__r_.__value_.__l.__size_ = a2;
  std::__hash_table<std::__hash_value_type<char const*,void (*)(std::string const&)>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,void (*)(std::string const&)>,AddrObjGoogle::protobuf::hash<char const*>,AddrObjGoogle::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,void (*)(std::string const&)>,AddrObjGoogle::protobuf::streq,AddrObjGoogle::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,void (*)(std::string const&)>>>::__emplace_unique_key_args<char const*,std::pair<char const* const,void (*)(std::string const&)>>(v4 + 8, (const char **)&v9[0].__r_.__value_.__l.__data_, v9);
  if ((v5 & 1) == 0)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/message.cc", 281);
    v6 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v9, "File is already registered: ");
    v7 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v6, a1);
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v8, (AddrObjGoogle::protobuf::internal::LogMessage *)v7);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
}

void sub_1886A9918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unint64_t *AddrObjGoogle::protobuf::GoogleOnceInitImpl(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v5;

  v2 = *result;
  __dmb(0xBu);
  if (v2 != 2)
  {
    v3 = (uint64_t *)result;
    do
    {
      while (!__ldaxr(result))
      {
        if (!__stlxr(1uLL, result))
        {
          result = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
          __dmb(0xBu);
          *v3 = 2;
          return result;
        }
      }
      __clrex();
    }
    while (!*result);
    if (*result == 1)
    {
      do
      {
        result = (unint64_t *)sched_yield();
        v5 = *v3;
        __dmb(0xBu);
      }
      while (v5 == 1);
    }
  }
  return result;
}

uint64_t AddrObjGoogle::protobuf::internal::FunctionClosure0::Run(uint64_t (**this)(void))
{
  int v2;
  uint64_t result;

  v2 = *((unsigned __int8 *)this + 16);
  result = this[1]();
  if (this)
  {
    if (v2)
      return (*((uint64_t (**)(uint64_t (**)(void)))*this + 1))(this);
  }
  return result;
}

void AddrObjGoogle::protobuf::internal::OnShutdown(AddrObjGoogle::protobuf::internal *this, void (*a2)(void))
{
  uint64_t v3;
  pthread_mutex_t **v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;

  v3 = AddrObjGoogle::protobuf::internal::shutdown_functions_init;
  __dmb(0xBu);
  if (v3 != 2)
  {
    v19[0] = &off_1E1BF6040;
    v19[1] = AddrObjGoogle::protobuf::internal::InitShutdownFunctions;
    v20 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&AddrObjGoogle::protobuf::internal::shutdown_functions_init, (uint64_t)v19);
  }
  v4 = (pthread_mutex_t **)AddrObjGoogle::protobuf::internal::shutdown_functions_mutex;
  AddrObjGoogle::protobuf::internal::Mutex::Lock((pthread_mutex_t **)AddrObjGoogle::protobuf::internal::shutdown_functions_mutex);
  v5 = (void **)AddrObjGoogle::protobuf::internal::shutdown_functions;
  v6 = *(_QWORD **)(AddrObjGoogle::protobuf::internal::shutdown_functions + 8);
  v7 = *(_QWORD *)(AddrObjGoogle::protobuf::internal::shutdown_functions + 16);
  if ((unint64_t)v6 >= v7)
  {
    v9 = ((uint64_t)v6 - *(_QWORD *)AddrObjGoogle::protobuf::internal::shutdown_functions) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v10 = v7 - *(_QWORD *)AddrObjGoogle::protobuf::internal::shutdown_functions;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>(AddrObjGoogle::protobuf::internal::shutdown_functions + 16, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = this;
    v8 = v14 + 8;
    v17 = (char *)*v5;
    v16 = (char *)v5[1];
    if (v16 != *v5)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*v5;
    }
    *v5 = v14;
    v5[1] = v8;
    v5[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = this;
    v8 = v6 + 1;
  }
  v5[1] = v8;
  AddrObjGoogle::protobuf::internal::Mutex::Unlock(v4);
}

void sub_1886A9B40(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  AddrObjGoogle::protobuf::internal::Mutex::Unlock(v1);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::internal::Mutex::Unlock(pthread_mutex_t **this)
{
  int v1;
  int v2;
  char *v3;
  int v4;
  const char *v5;
  int v6;
  std::string __p;

  v1 = pthread_mutex_unlock(*this);
  if (v1)
  {
    v2 = v1;
    v4 = 3;
    v5 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/stubs/common.cc";
    v6 = 312;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "pthread_mutex_unlock: ");
    v3 = strerror(v2);
    std::string::append(&__p, v3);
    AddrObjGoogle::protobuf::internal::LogMessage::Finish((AddrObjGoogle::protobuf::internal::LogMessage *)&v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1886A9BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AddrObjGoogle::protobuf::internal::Mutex::Lock(pthread_mutex_t **this)
{
  int v1;
  int v2;
  char *v3;
  int v4;
  const char *v5;
  int v6;
  std::string __p;

  v1 = pthread_mutex_lock(*this);
  if (v1)
  {
    v2 = v1;
    v4 = 3;
    v5 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/stubs/common.cc";
    v6 = 305;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "pthread_mutex_lock: ");
    v3 = strerror(v2);
    std::string::append(&__p, v3);
    AddrObjGoogle::protobuf::internal::LogMessage::Finish((AddrObjGoogle::protobuf::internal::LogMessage *)&v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1886A9CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<char const*,void (*)(std::string const&)>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,void (*)(std::string const&)>,AddrObjGoogle::protobuf::hash<char const*>,AddrObjGoogle::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,void (*)(std::string const&)>,AddrObjGoogle::protobuf::streq,AddrObjGoogle::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,void (*)(std::string const&)>>>::__emplace_unique_key_args<char const*,std::pair<char const* const,void (*)(std::string const&)>>(uint64_t a1, const char **a2, _OWORD *a3)
{
  unint64_t v3;
  const char *v6;
  char v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = *a2;
  v7 = **a2;
  if (v7)
  {
    v8 = 0;
    v9 = (unsigned __int8 *)(v6 + 1);
    do
    {
      v8 = 5 * v8 + v7;
      v10 = *v9++;
      v7 = v10;
    }
    while (v10);
  }
  else
  {
    v8 = 0;
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v11)
        v3 = v8 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v8;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v8)
        {
          if (!strcmp(*((const char **)i + 2), v6))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  *((_OWORD *)i + 1) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11)
        v3 = v8 % v11;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v11 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_43:
    *v24 = i;
    goto LABEL_44;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_43;
  }
LABEL_44:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1886A9F0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,std::__unordered_map_hasher<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,AddrObjGoogle::protobuf::hash<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,std::equal_to<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,true>,std::__unordered_map_equal<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,std::equal_to<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,AddrObjGoogle::protobuf::hash<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,true>,std::allocator<std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>>>::__emplace_unique_key_args<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,std::pair<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int> const,AddrObjGoogle::protobuf::internal::ExtensionInfo>>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  __int128 v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = *(int *)(a2 + 8);
  v7 = v6 - *(_QWORD *)a2 + (*(_QWORD *)a2 << 16);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v6 - *(_QWORD *)a2 + (*(_QWORD *)a2 << 16);
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *(_QWORD *)a2 && *((_DWORD *)v11 + 6) == (_DWORD)v6)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x40uLL);
  *v11 = 0;
  v11[1] = v7;
  v14 = a3[1];
  *((_OWORD *)v11 + 1) = *a3;
  *((_OWORD *)v11 + 2) = v14;
  *((_OWORD *)v11 + 3) = a3[2];
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v11 = *v22;
LABEL_42:
    *v22 = v11;
    goto LABEL_43;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    v23 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1886AA140(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void addr_obj::geo3::protobuf_AddDesc_geo3_2dslim_2eproto(addr_obj::geo3 *this, uint64_t a2, uint64_t a3, const char *a4)
{
  addr_obj::geo3::StructuredAddress *v4;
  addr_obj::geo3::StructuredAddress_SubPremise *v5;
  addr_obj::geo3::Address *v6;
  addr_obj::geo3::StructuredAddress *v7;
  void (*v8)(void);

  if ((byte_1EDF50388 & 1) == 0)
  {
    byte_1EDF50388 = 1;
    AddrObjGoogle::protobuf::internal::VerifyVersion((AddrObjGoogle::protobuf::internal *)0x1E9808, (AddrObjGoogle::protobuf::internal *)0x1E9808, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/geo3-slim.pb.cc", a4);
    AddrObjGoogle::protobuf::DescriptorPool::InternalAddGeneratedFile((AddrObjGoogle::protobuf::DescriptorPool *)&unk_189C5D09C, (const void *)0x3CE);
    AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedFile("geo3-slim.proto", (std::string::size_type)sub_1887F27D8);
    v5 = (addr_obj::geo3::StructuredAddress_SubPremise *)addr_obj::geo3::StructuredAddress::default_instance_(v4);
    v6 = (addr_obj::geo3::Address *)addr_obj::geo3::StructuredAddress_SubPremise::default_instance_(v5);
    v7 = (addr_obj::geo3::StructuredAddress *)addr_obj::geo3::Address::default_instance_(v6);
    *((_QWORD *)v7 + 5) = addr_obj::geo3::StructuredAddress::default_instance(v7);
    AddrObjGoogle::protobuf::internal::OnShutdown((AddrObjGoogle::protobuf::internal *)addr_obj::geo3::protobuf_ShutdownFile_geo3_2dslim_2eproto, v8);
  }
}

uint64_t addr_obj::geo3::StructuredAddress::default_instance(addr_obj::geo3::StructuredAddress *this)
{
  addr_obj::geo3::StructuredAddress *v1;

  v1 = (addr_obj::geo3::StructuredAddress *)addr_obj::geo3::StructuredAddress::default_instance_(this);
  if (!v1)
    v1 = (addr_obj::geo3::StructuredAddress *)addr_obj::geo3::protobuf_AddDesc_geo3_2dslim_2eproto(0);
  return addr_obj::geo3::StructuredAddress::default_instance_(v1);
}

uint64_t addr_obj::geo3::StructuredAddress_SubPremise::default_instance_(addr_obj::geo3::StructuredAddress_SubPremise *this)
{
  unsigned __int8 v1;
  addr_obj::geo3::StructuredAddress_SubPremise *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50508);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50508))
  {
    v3 = (addr_obj::geo3::StructuredAddress_SubPremise *)operator new();
    addr_obj::geo3::StructuredAddress_SubPremise::StructuredAddress_SubPremise(v3);
    qword_1EDF50500 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50508);
  }
  return qword_1EDF50500;
}

void sub_1886AA280(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40BEA49330);
  __cxa_guard_abort(&qword_1EDF50508);
  _Unwind_Resume(a1);
}

addr_obj::geo3::StructuredAddress_SubPremise *addr_obj::geo3::StructuredAddress_SubPremise::StructuredAddress_SubPremise(addr_obj::geo3::StructuredAddress_SubPremise *this)
{
  AddrObjGoogle::protobuf::internal *v2;

  *(_QWORD *)this = &off_1E1BFA080;
  v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_1886AA308(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;

  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::internal::InitShutdownFunctions(AddrObjGoogle::protobuf::internal *this)
{
  _QWORD *v1;
  _QWORD *v2;
  pthread_mutex_t *v3;
  uint64_t result;

  v1 = (_QWORD *)operator new();
  v1[1] = 0;
  v1[2] = 0;
  *v1 = 0;
  AddrObjGoogle::protobuf::internal::shutdown_functions = (uint64_t)v1;
  v2 = (_QWORD *)operator new();
  v3 = (pthread_mutex_t *)operator new();
  *v2 = v3;
  result = pthread_mutex_init(v3, 0);
  AddrObjGoogle::protobuf::internal::shutdown_functions_mutex = (uint64_t)v2;
  return result;
}

void sub_1886AA3B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::UninterpretedOption_NamePart::default_instance_(AddrObjGoogle::protobuf::UninterpretedOption_NamePart *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::UninterpretedOption_NamePart *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50618);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50618))
  {
    v3 = (AddrObjGoogle::protobuf::UninterpretedOption_NamePart *)operator new();
    AddrObjGoogle::protobuf::UninterpretedOption_NamePart::UninterpretedOption_NamePart(v3);
    qword_1EDF50610 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50618);
  }
  return qword_1EDF50610;
}

void sub_1886AA450(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40ED7A6C83);
  __cxa_guard_abort(&qword_1EDF50618);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::UninterpretedOption_NamePart *AddrObjGoogle::protobuf::UninterpretedOption_NamePart::UninterpretedOption_NamePart(AddrObjGoogle::protobuf::UninterpretedOption_NamePart *this)
{
  AddrObjGoogle::protobuf::internal *v2;

  *(_QWORD *)this = &off_1E1BF5E30;
  v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_DWORD *)this + 7) = 0;
  *((_QWORD *)this + 2) = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((_BYTE *)this + 24) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_1886AA4DC(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;

  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

_QWORD *AddrObjGoogle::protobuf::EncodedDescriptorDatabase::EncodedDescriptorDatabase(_QWORD *this)
{
  this[2] = 0;
  *this = &off_1E1BF5DF0;
  this[1] = this + 2;
  this[5] = 0;
  this[3] = 0;
  this[4] = this + 5;
  this[8] = 0;
  this[9] = 0;
  this[10] = 0;
  this[6] = 0;
  this[7] = this + 8;
  this[11] = 0;
  this[12] = 0;
  return this;
}

uint64_t AddrObjGoogle::protobuf::SourceCodeInfo_Location::default_instance_(AddrObjGoogle::protobuf::SourceCodeInfo_Location *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::SourceCodeInfo_Location *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50638);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50638))
  {
    v3 = (AddrObjGoogle::protobuf::SourceCodeInfo_Location *)operator new();
    AddrObjGoogle::protobuf::SourceCodeInfo_Location::SourceCodeInfo_Location(v3);
    qword_1EDF50630 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50638);
  }
  return qword_1EDF50630;
}

void sub_1886AA5B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10B1C40E36E17E1);
  __cxa_guard_abort(&qword_1EDF50638);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::SourceCodeInfo_Location *AddrObjGoogle::protobuf::SourceCodeInfo_Location::SourceCodeInfo_Location(AddrObjGoogle::protobuf::SourceCodeInfo_Location *this)
{
  AddrObjGoogle::protobuf::internal *v2;
  uint64_t *v3;

  *(_QWORD *)this = &off_1E1BF5C90;
  v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 20) = 0;
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((_QWORD *)this + 8) = v3;
  *((_QWORD *)this + 9) = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((_DWORD *)this + 21) = 0;
  return this;
}

void sub_1886AA654(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;

  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::ServiceDescriptorProto::default_instance_(AddrObjGoogle::protobuf::ServiceDescriptorProto *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::ServiceDescriptorProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50588);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50588))
  {
    v3 = (AddrObjGoogle::protobuf::ServiceDescriptorProto *)operator new();
    AddrObjGoogle::protobuf::ServiceDescriptorProto::ServiceDescriptorProto(v3);
    qword_1EDF50580 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50588);
  }
  return qword_1EDF50580;
}

void sub_1886AA714(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C407FD52222);
  __cxa_guard_abort(&qword_1EDF50588);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::ServiceDescriptorProto *AddrObjGoogle::protobuf::ServiceDescriptorProto::ServiceDescriptorProto(AddrObjGoogle::protobuf::ServiceDescriptorProto *this)
{
  AddrObjGoogle::protobuf::internal *v2;

  *(_QWORD *)this = &off_1E1BF5BE0;
  v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 2) = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 15) = 0;
  return this;
}

void sub_1886AA7AC(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;
  uint64_t *v3;
  uint64_t *v4;

  v4 = v3;
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v4);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::MethodDescriptorProto::default_instance_(AddrObjGoogle::protobuf::MethodDescriptorProto *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::MethodDescriptorProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50598);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50598))
  {
    v3 = (AddrObjGoogle::protobuf::MethodDescriptorProto *)operator new();
    AddrObjGoogle::protobuf::MethodDescriptorProto::MethodDescriptorProto(v3);
    qword_1EDF50590 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50598);
  }
  return qword_1EDF50590;
}

void sub_1886AA858(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C4093195C21);
  __cxa_guard_abort(&qword_1EDF50598);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::MethodDescriptorProto *AddrObjGoogle::protobuf::MethodDescriptorProto::MethodDescriptorProto(AddrObjGoogle::protobuf::MethodDescriptorProto *this)
{
  *(_QWORD *)this = &off_1E1BF5B30;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  AddrObjGoogle::protobuf::MethodDescriptorProto::SharedCtor(this);
  return this;
}

void sub_1886AA8D8(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;

  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t *AddrObjGoogle::protobuf::MethodDescriptorProto::SharedCtor(AddrObjGoogle::protobuf::MethodDescriptorProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *result;

  *((_DWORD *)this + 12) = 0;
  v2 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  *((_QWORD *)this + 2) = v2;
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v2);
  *((_QWORD *)this + 3) = v3;
  result = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((_QWORD *)this + 4) = result;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 13) = 0;
  return result;
}

uint64_t AddrObjGoogle::protobuf::UninterpretedOption::default_instance_(AddrObjGoogle::protobuf::UninterpretedOption *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::UninterpretedOption *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50628);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50628))
  {
    v3 = (AddrObjGoogle::protobuf::UninterpretedOption *)operator new();
    AddrObjGoogle::protobuf::UninterpretedOption::UninterpretedOption(v3);
    qword_1EDF50620 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50628);
  }
  return qword_1EDF50620;
}

void sub_1886AA9B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40AD0F7D02);
  __cxa_guard_abort(&qword_1EDF50628);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::UninterpretedOption *AddrObjGoogle::protobuf::UninterpretedOption::UninterpretedOption(AddrObjGoogle::protobuf::UninterpretedOption *this)
{
  *(_QWORD *)this = &off_1E1BF59A8;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  AddrObjGoogle::protobuf::UninterpretedOption::SharedCtor(this);
  return this;
}

void sub_1886AAA40(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;
  uint64_t *v3;
  uint64_t *v4;

  v4 = v3;
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v4);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t *AddrObjGoogle::protobuf::UninterpretedOption::SharedCtor(AddrObjGoogle::protobuf::UninterpretedOption *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *result;

  *((_DWORD *)this + 22) = 0;
  v2 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  *((_QWORD *)this + 5) = v2;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v2);
  *((_QWORD *)this + 9) = v3;
  result = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((_QWORD *)this + 10) = result;
  *((_DWORD *)this + 23) = 0;
  return result;
}

uint64_t AddrObjGoogle::protobuf::FileDescriptorSet::default_instance_(AddrObjGoogle::protobuf::FileDescriptorSet *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::FileDescriptorSet *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50518);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50518))
  {
    v3 = (AddrObjGoogle::protobuf::FileDescriptorSet *)operator new();
    AddrObjGoogle::protobuf::FileDescriptorSet::FileDescriptorSet(v3);
    qword_1EDF50510 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50518);
  }
  return qword_1EDF50510;
}

void sub_1886AAB2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40F1948F29);
  __cxa_guard_abort(&qword_1EDF50518);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::FileDescriptorSet *AddrObjGoogle::protobuf::FileDescriptorSet::FileDescriptorSet(AddrObjGoogle::protobuf::FileDescriptorSet *this)
{
  *(_QWORD *)this = &off_1E1BF5798;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1886AABA0(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;

  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::EnumValueOptions *AddrObjGoogle::protobuf::EnumValueOptions::EnumValueOptions(AddrObjGoogle::protobuf::EnumValueOptions *this)
{
  *(_QWORD *)this = &off_1E1BF56C0;
  AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((_QWORD *)this + 1);
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 4);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  return this;
}

void sub_1886AAC0C(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::internal::ExtensionSet *v2;

  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::EnumValueOptions::default_instance(AddrObjGoogle::protobuf::EnumValueOptions *this)
{
  AddrObjGoogle::protobuf::EnumValueOptions *v1;

  v1 = (AddrObjGoogle::protobuf::EnumValueOptions *)AddrObjGoogle::protobuf::EnumValueOptions::default_instance_(this);
  if (!v1)
    v1 = (AddrObjGoogle::protobuf::EnumValueOptions *)AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0);
  return AddrObjGoogle::protobuf::EnumValueOptions::default_instance_(v1);
}

AddrObjGoogle::protobuf::SourceCodeInfo *AddrObjGoogle::protobuf::SourceCodeInfo::SourceCodeInfo(AddrObjGoogle::protobuf::SourceCodeInfo *this)
{
  *(_QWORD *)this = &off_1E1BF5560;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1886AAC8C(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;

  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::SourceCodeInfo::default_instance(AddrObjGoogle::protobuf::SourceCodeInfo *this)
{
  AddrObjGoogle::protobuf::SourceCodeInfo *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;

  v1 = (AddrObjGoogle::protobuf::SourceCodeInfo *)AddrObjGoogle::protobuf::SourceCodeInfo::default_instance_(this);
  if (!v1)
    AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0, v2, v3, v4);
  return AddrObjGoogle::protobuf::SourceCodeInfo::default_instance_(v1);
}

AddrObjGoogle::protobuf::ServiceOptions *AddrObjGoogle::protobuf::ServiceOptions::ServiceOptions(AddrObjGoogle::protobuf::ServiceOptions *this)
{
  *(_QWORD *)this = &off_1E1BF54B0;
  AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((_QWORD *)this + 1);
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 4);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  return this;
}

void sub_1886AAD14(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::internal::ExtensionSet *v2;

  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::ServiceOptions::default_instance(AddrObjGoogle::protobuf::ServiceOptions *this)
{
  AddrObjGoogle::protobuf::ServiceOptions *v1;

  v1 = (AddrObjGoogle::protobuf::ServiceOptions *)AddrObjGoogle::protobuf::ServiceOptions::default_instance_(this);
  if (!v1)
    v1 = (AddrObjGoogle::protobuf::ServiceOptions *)AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0);
  return AddrObjGoogle::protobuf::ServiceOptions::default_instance_(v1);
}

AddrObjGoogle::protobuf::MessageOptions *AddrObjGoogle::protobuf::MessageOptions::MessageOptions(AddrObjGoogle::protobuf::MessageOptions *this)
{
  *(_QWORD *)this = &off_1E1BF5400;
  AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((_QWORD *)this + 1);
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 4);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_WORD *)this + 32) = 0;
  *((_DWORD *)this + 17) = 0;
  *((_DWORD *)this + 18) = 0;
  return this;
}

void sub_1886AADB0(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::internal::ExtensionSet *v2;

  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::MessageOptions::default_instance(AddrObjGoogle::protobuf::MessageOptions *this)
{
  AddrObjGoogle::protobuf::MessageOptions *v1;

  v1 = (AddrObjGoogle::protobuf::MessageOptions *)AddrObjGoogle::protobuf::MessageOptions::default_instance_(this);
  if (!v1)
    v1 = (AddrObjGoogle::protobuf::MessageOptions *)AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0);
  return AddrObjGoogle::protobuf::MessageOptions::default_instance_(v1);
}

uint64_t AddrObjGoogle::protobuf::DescriptorPool::DescriptorPool(uint64_t a1, uint64_t a2, uint64_t a3)
{
  AddrObjGoogle::protobuf::internal::Mutex *v6;
  uint64_t v7;

  v6 = (AddrObjGoogle::protobuf::internal::Mutex *)operator new();
  AddrObjGoogle::protobuf::internal::Mutex::Mutex(v6);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = operator new();
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_QWORD *)(v7 + 48) = 0;
  *(_DWORD *)(v7 + 56) = 1065353216;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_DWORD *)(v7 + 96) = 1065353216;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 200) = 0u;
  *(_OWORD *)(v7 + 216) = 0u;
  *(_DWORD *)(v7 + 232) = 1065353216;
  *(_OWORD *)(v7 + 240) = 0u;
  *(_OWORD *)(v7 + 256) = 0u;
  *(_DWORD *)(v7 + 272) = 1065353216;
  *(_QWORD *)(v7 + 288) = 0;
  *(_QWORD *)(v7 + 296) = 0;
  *(_QWORD *)(v7 + 280) = v7 + 288;
  *(_OWORD *)(v7 + 368) = 0u;
  *(_OWORD *)(v7 + 384) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  *(_OWORD *)(v7 + 352) = 0u;
  *(_OWORD *)(v7 + 304) = 0u;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_QWORD *)(a1 + 32) = v7;
  *(_WORD *)(a1 + 40) = 1;
  return a1;
}

void sub_1886AAED4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::internal::Mutex *AddrObjGoogle::protobuf::internal::Mutex::Mutex(AddrObjGoogle::protobuf::internal::Mutex *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)operator new();
  *(_QWORD *)this = v2;
  pthread_mutex_init(v2, 0);
  return this;
}

uint64_t AddrObjGoogle::protobuf::MethodOptions::default_instance(AddrObjGoogle::protobuf::MethodOptions *this)
{
  AddrObjGoogle::protobuf::MethodOptions *v1;

  v1 = (AddrObjGoogle::protobuf::MethodOptions *)AddrObjGoogle::protobuf::MethodOptions::default_instance_(this);
  if (!v1)
    v1 = (AddrObjGoogle::protobuf::MethodOptions *)AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0);
  return AddrObjGoogle::protobuf::MethodOptions::default_instance_(v1);
}

uint64_t AddrObjGoogle::protobuf::FieldOptions::default_instance(AddrObjGoogle::protobuf::FieldOptions *this)
{
  AddrObjGoogle::protobuf::FieldOptions *v1;

  v1 = (AddrObjGoogle::protobuf::FieldOptions *)AddrObjGoogle::protobuf::FieldOptions::default_instance_(this);
  if (!v1)
    v1 = (AddrObjGoogle::protobuf::FieldOptions *)AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0);
  return AddrObjGoogle::protobuf::FieldOptions::default_instance_(v1);
}

uint64_t AddrObjGoogle::protobuf::FileOptions::default_instance(AddrObjGoogle::protobuf::FileOptions *this)
{
  AddrObjGoogle::protobuf::FileOptions *v1;

  v1 = (AddrObjGoogle::protobuf::FileOptions *)AddrObjGoogle::protobuf::FileOptions::default_instance_(this);
  if (!v1)
    v1 = (AddrObjGoogle::protobuf::FileOptions *)AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0);
  return AddrObjGoogle::protobuf::FileOptions::default_instance_(v1);
}

uint64_t AddrObjGoogle::protobuf::EnumOptions::default_instance(AddrObjGoogle::protobuf::EnumOptions *this)
{
  AddrObjGoogle::protobuf::EnumOptions *v1;

  v1 = (AddrObjGoogle::protobuf::EnumOptions *)AddrObjGoogle::protobuf::EnumOptions::default_instance_(this);
  if (!v1)
    v1 = (AddrObjGoogle::protobuf::EnumOptions *)AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0);
  return AddrObjGoogle::protobuf::EnumOptions::default_instance_(v1);
}

void sub_1886AB5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1886ABD4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886AC1FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886AC2E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id uniqueIdentifierForTileGroup(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;

  v9 = a5;
  v10 = a4;
  v11 = a2;
  v12 = a1;
  objc_msgSend(a3, "allObjects");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "sortedArrayUsingSelector:", sel_compare_);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "allObjects");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v15, "sortedArrayUsingSelector:", sel_compare_);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = (void *)MEMORY[0x1E0CB3940];
  v18 = objc_msgSend(v12, "identifier");

  objc_msgSend(v14, "componentsJoinedByString:", CFSTR(","));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "componentsJoinedByString:", CFSTR(","));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v9, "identifier");

  objc_msgSend(v17, "stringWithFormat:", CFSTR("%@:%i:%i:scl=%@&scn=%@&dsid=%u"), v11, v18, 13, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  return v22;
}

void sub_1886AC878(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886ACA34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886ACD30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886AD048(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886AD400(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886AD62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1886AE388(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886AE66C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886AE92C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886AE9E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886AEA9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleRoundedBuildings()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ShelbyvilleRoundedBuildings, (uint64_t)off_1EDF4AFC8);
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleColorizedBuildings()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ShelbyvilleColorizedBuildings, (uint64_t)off_1EDF4AFD8);
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleBuildingHeights()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ShelbyvilleBuildingHeights, (uint64_t)off_1EDF4AFE8);
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleAdvancedWater()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ShelbyvilleAdvancedWater, (uint64_t)off_1EDF4AFA8);
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleAdvancedLighting()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ShelbyvilleAdvancedLighting, (uint64_t)off_1EDF4AFB8);
}

id GEOConfigGetString(int a1, uint64_t a2)
{
  return _getValue(a1, a2, 1, 0, 0, 0);
}

void SearchFoundationLibrary()
{
  void *v0;

  if (!SearchFoundationLibraryCore_frameworkLibrary)
  {
    SearchFoundationLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!SearchFoundationLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

void ___setDefaultDict_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(*(id *)(a1 + 32), "count");
  if (v3)
  {
    _valueForKeyPath(v5, *(void **)(a1 + 32), 0, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = v5;
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v4);
  if (v3)

}

void sub_1886AF2F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886AF3DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886AF4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL GEOPDAddressObjectFilterReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  id v26;
  void *v27;
  _BOOL8 v28;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
              break;
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_36;
            v19 += 7;
            v15 = v20++ >= 9;
            if (v15)
            {
              v21 = 0;
              goto LABEL_38;
            }
          }
          v3[*v6] = 1;
LABEL_36:
          if (v3[*v6])
            v21 = 0;
LABEL_38:
          *(_BYTE *)(a1 + 24) = v21 != 0;
        }
        else if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          if (v18)
            -[GEOPDAddressObjectFilter addLibraryVersion:](a1, v18);

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v26 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v27 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v26;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_41;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v28 = v3[*v6] == 0;
  }
  else
  {
LABEL_41:
    v28 = 0;
  }
  objc_sync_exit(v3);

  return v28;
}

void sub_1886AF9E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDComponentValueReadAllFrom(uint64_t a1, void *a2, int a3)
{
  _BYTE *v5;
  _DWORD *v6;
  uint64_t Specified;

  v5 = a2;
  objc_sync_enter(v5);
  if (a3)
    v6 = &GEOPDComponentValueReadAllFrom_recursiveTag;
  else
    v6 = 0;
  Specified = GEOPDComponentValueReadSpecified(a1, v5, v6);
  objc_sync_exit(v5);

  return Specified;
}

void sub_1886AFBCC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDComponentValueReadSpecified(uint64_t a1, _BYTE *a2, _DWORD *a3)
{
  _BOOL4 v5;
  uint64_t result;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  int v19;
  GEOPDEntity *v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;

  if (!a2)
    return 0;
  if (a3)
    v5 = *a3 == -1;
  else
    v5 = 0;
  v7 = (int *)MEMORY[0x1E0D82BF0];
  v8 = (int *)MEMORY[0x1E0D82BD8];
  v9 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a2[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a2[*MEMORY[0x1E0D82BD8]])
    return a2[*v9] == 0;
  v10 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (a2[*v9])
      return a2[*v9] == 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = *v7;
      v15 = *(_QWORD *)&a2[v14];
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)&a2[*v8])
        break;
      v17 = *(_BYTE *)(*(_QWORD *)&a2[*v10] + v15);
      *(_QWORD *)&a2[v14] = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << v11;
      if ((v17 & 0x80) == 0)
        goto LABEL_17;
      v11 += 7;
      if (v12++ >= 9)
      {
        v13 = 0;
        v19 = a2[*v9];
        goto LABEL_19;
      }
    }
    a2[*v9] = 1;
LABEL_17:
    v19 = a2[*v9];
    if (a2[*v9])
      v13 = 0;
LABEL_19:
    if (v19 || (v13 & 7) == 4)
      return a2[*v9] == 0;
    switch((v13 >> 3))
    {
      case 1u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDEntity);
        if (!GEOPDEntityReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 192;
        goto LABEL_310;
      case 2u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDPlaceInfo);
        if (!GEOPDPlaceInfoReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 400;
        goto LABEL_310;
      case 3u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDRoadAccessInfo);
        if (!GEOPDRoadAccessInfoReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 24;
        goto LABEL_310;
      case 4u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDBounds);
        if (!GEOPDBoundsReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 88;
        goto LABEL_310;
      case 5u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDAddress);
        if (!GEOPDAddressReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 56;
        goto LABEL_310;
      case 6u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDRating);
        if (!GEOPDRatingReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 488;
        goto LABEL_310;
      case 7u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDReview);
        if (!GEOPDReviewReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 536;
        goto LABEL_310;
      case 8u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDPhoto);
        if (!GEOPDPhotoReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 368;
        goto LABEL_310;
      case 9u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDHours);
        if (!GEOPDHoursReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 296;
        goto LABEL_310;
      case 0xAu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTransitInfo);
        if (!GEOPDTransitInfoReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 680;
        goto LABEL_310;
      case 0xBu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTransitSchedule);
        if (!GEOPDTransitScheduleReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 704;
        goto LABEL_310;
      case 0xCu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDETA);
        if (!GEOPDETAReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 200;
        goto LABEL_310;
      case 0xDu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDFlyover);
        if (!GEOPDFlyoverReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 240;
        goto LABEL_310;
      case 0xEu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDRawAttribute);
        if (!GEOPDRawAttributeReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 496;
        goto LABEL_310;
      case 0xFu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDAmenities);
        if (!GEOPDAmenitiesReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 64;
        goto LABEL_310;
      case 0x10u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOStyleAttributes);
        if (!GEOStyleAttributesReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 592;
        goto LABEL_310;
      case 0x14u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTransitIncident);
        if (!GEOPDTransitIncidentReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 664;
        goto LABEL_310;
      case 0x15u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTransitAssociatedInfo);
        if (!GEOPDTransitAssociatedInfoReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 648;
        goto LABEL_310;
      case 0x16u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTextBlock);
        if (!GEOPDTextBlockReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 616;
        goto LABEL_310;
      case 0x17u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDFactoid);
        if (!GEOPDFactoidReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 232;
        goto LABEL_310;
      case 0x18u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTransitAttribution);
        if (!GEOPDTransitAttributionReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 656;
        goto LABEL_310;
      case 0x19u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDBusinessClaim);
        if (!GEOPDBusinessClaimReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 112;
        goto LABEL_310;
      case 0x1Au:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDCaptionedPhoto);
        if (!GEOPDCaptionedPhotoReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 128;
        goto LABEL_310;
      case 0x1Bu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTransitInfoSnippet);
        if (!GEOPDTransitInfoSnippetReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 672;
        goto LABEL_310;
      case 0x1Du:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDExternalAction);
        if (!GEOPDExternalActionReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 224;
        goto LABEL_310;
      case 0x1Eu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDResultSnippet);
        if (!GEOPDResultSnippetReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 528;
        goto LABEL_310;
      case 0x1Fu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDAddressObject);
        if (!GEOPDAddressObjectReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 40;
        goto LABEL_310;
      case 0x20u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDSimpleRestaurantMenuText);
        if (!GEOPDSimpleRestaurantMenuTextReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 552;
        goto LABEL_310;
      case 0x21u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDRestaurantReservationLink);
        if (!GEOPDRestaurantReservationLinkReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 520;
        goto LABEL_310;
      case 0x22u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDSpatialLookupResult);
        if (!GEOPDSpatialLookupResultReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 560;
        goto LABEL_310;
      case 0x24u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTip);
        if (!GEOPDTipReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 624;
        goto LABEL_310;
      case 0x25u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDPlacecardURL);
        if (!GEOPDPlacecardURLReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 424;
        goto LABEL_310;
      case 0x26u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDAssociatedApp);
        if (!GEOPDAssociatedAppReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 80;
        goto LABEL_310;
      case 0x27u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDMessageLink);
        if (!GEOPDMessageLinkReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 344;
        goto LABEL_310;
      case 0x28u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDQuickLink);
        if (!GEOPDQuickLinkReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 472;
        goto LABEL_310;
      case 0x29u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDRap);
        if (!GEOPDRapReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 480;
        goto LABEL_310;
      case 0x2Au:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDOfflineArea);
        if (!GEOPDOfflineAreaReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 360;
        goto LABEL_310;
      case 0x2Bu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDLocationEvent);
        if (!GEOPDLocationEventReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 336;
        goto LABEL_310;
      case 0x2Cu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDSupportsOfflineMaps);
        if (!GEOPDSupportsOfflineMapsReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 600;
        goto LABEL_310;
      case 0x30u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDVenueInfo);
        if (!GEOPDVenueInfoReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 752;
        goto LABEL_310;
      case 0x32u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDContainedPlace);
        if (!GEOPDContainedPlaceReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 152;
        goto LABEL_310;
      case 0x33u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDWifiFingerprint);
        if (!GEOPDWifiFingerprintReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 760;
        goto LABEL_310;
      case 0x34u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDIcon);
        if (!GEOPDIconReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 304;
        goto LABEL_310;
      case 0x35u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDPriceDescription);
        if (!GEOPDPriceDescriptionReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 448;
        goto LABEL_310;
      case 0x36u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDBrowseCategories);
        if (!GEOPDBrowseCategoriesReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 96;
        goto LABEL_310;
      case 0x37u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDStorefront);
        if (!GEOPDStorefrontReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 584;
        goto LABEL_310;
      case 0x38u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDGroundViewLabel);
        if (!GEOPDGroundViewLabelReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 256;
        goto LABEL_310;
      case 0x39u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDAnnotatedItemList);
        if (!GEOPDAnnotatedItemListReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 72;
        goto LABEL_310;
      case 0x3Au:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDPoiEvent);
        if (!GEOPDPoiEventReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 440;
        goto LABEL_310;
      case 0x3Bu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDStorefrontPresentation);
        if (!GEOPDStorefrontPresentationReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 576;
        goto LABEL_310;
      case 0x3Cu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDPlacecardLayoutConfiguration);
        if (!GEOPDPlacecardLayoutConfigurationReadAllFrom(v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 416;
        goto LABEL_310;
      case 0x3Du:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDPrototypeContainer);
        if (!GEOPDPrototypeContainerReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 456;
        goto LABEL_310;
      case 0x3Eu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPBTransitVehiclePosition);
        if (!GEOPBTransitVehiclePositionReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 736;
        goto LABEL_310;
      case 0x3Fu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDLinkedService);
        if (!GEOPDLinkedServiceReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 328;
        goto LABEL_310;
      case 0x40u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDBusinessHours);
        if (!GEOPDBusinessHoursReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 120;
        goto LABEL_310;
      case 0x41u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDPlaceCollection);
        if (!GEOPDPlaceCollectionReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 392;
        goto LABEL_310;
      case 0x42u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDRelatedPlace);
        if (!GEOPDRelatedPlaceReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 512;
        goto LABEL_310;
      case 0x43u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTransitTripStop);
        if (!GEOPDTransitTripStopReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 728;
        goto LABEL_310;
      case 0x44u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTransitTripStopTime);
        if (!GEOPDTransitTripStopTimeReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 720;
        goto LABEL_310;
      case 0x45u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTransitTripGeometry);
        if (!GEOPDTransitTripGeometryReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 712;
        goto LABEL_310;
      case 0x46u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDBrowseCategories);
        if (!GEOPDBrowseCategoriesReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 376;
        goto LABEL_310;
      case 0x47u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDPublisher);
        if (!GEOPDPublisherReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 464;
        goto LABEL_310;
      case 0x48u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDMiniBrowseCategories);
        if (!GEOPDMiniBrowseCategoriesReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 352;
        goto LABEL_310;
      case 0x49u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDPlaceQuestionnaireResult);
        if (!GEOPDPlaceQuestionnaireResultReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 408;
        goto LABEL_310;
      case 0x4Au:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDPlaceCollectionItem);
        if (!GEOPDPlaceCollectionItemReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 384;
        goto LABEL_310;
      case 0x4Cu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDCollectionIds);
        if (!GEOPDCollectionIdsReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 144;
        goto LABEL_310;
      case 0x4Du:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDISO3166Code);
        if (!GEOPDISO3166CodeReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 312;
        goto LABEL_310;
      case 0x4Eu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDAmenities);
        if (!GEOPDAmenitiesReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 744;
        goto LABEL_310;
      case 0x4Fu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTransitNearbySchedule);
        if (!GEOPDTransitNearbyScheduleReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 688;
        goto LABEL_310;
      case 0x51u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDStorefrontFaces);
        if (!GEOPDStorefrontFacesReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 568;
        goto LABEL_310;
      case 0x52u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDGuideGroup);
        if (!GEOPDGuideGroupReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 264;
        goto LABEL_310;
      case 0x53u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDContainmentPlace);
        if (!GEOPDContainmentPlaceReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 160;
        goto LABEL_310;
      case 0x54u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDCategorizedPhotos);
        if (!GEOPDCategorizedPhotosReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 136;
        goto LABEL_310;
      case 0x55u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDExploreGuides);
        if (!GEOPDExploreGuidesReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 216;
        goto LABEL_310;
      case 0x56u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDAbout);
        if (!GEOPDAboutReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 16;
        goto LABEL_310;
      case 0x57u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDLabelGeometry);
        if (!GEOPDLabelGeometryReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 320;
        goto LABEL_310;
      case 0x58u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDEnhancedPlacement);
        if (!GEOPDEnhancedPlacementReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 168;
        goto LABEL_310;
      case 0x59u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTemplatePlace);
        if (!GEOPDTemplatePlaceReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 608;
        goto LABEL_310;
      case 0x5Bu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTransitPaymentMethodInfo);
        if (!GEOPDTransitPaymentMethodInfoReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 696;
        goto LABEL_310;
      case 0x5Cu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDBusinessAssets);
        if (!GEOPDBusinessAssetsReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 104;
        goto LABEL_310;
      case 0x5Du:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDEnrichmentInfo);
        if (!GEOPDEnrichmentInfoReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 184;
        goto LABEL_310;
      case 0x5Eu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDActionData);
        if (!GEOPDActionDataReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 32;
        goto LABEL_310;
      case 0x5Fu:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDEnrichmentData);
        if (!GEOPDEnrichmentDataReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 176;
        goto LABEL_310;
      case 0x60u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDPOIClaim);
        if (!GEOPDPOIClaimReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 432;
        goto LABEL_310;
      case 0x61u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDEVCharger);
        if (!GEOPDEVChargerReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 208;
        goto LABEL_310;
      case 0x62u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTrailHead);
        if (!GEOPDTrailHeadReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 640;
        goto LABEL_310;
      case 0x63u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDTooltip);
        if (!GEOPDTooltipReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 632;
        goto LABEL_310;
      case 0x64u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDRefreshId);
        if (!GEOPDRefreshIdReadAllFrom((uint64_t)v21, a2))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 504;
        goto LABEL_310;
      case 0x65u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDAddressWithComponents);
        if (!GEOPDAddressWithComponentsReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 48;
        goto LABEL_310;
      case 0x66u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDSearchResultPlacePhoto);
        if (!GEOPDSearchResultPlacePhotoReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 544;
        goto LABEL_310;
      case 0x67u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDForwardInfo);
        if (!GEOPDForwardInfoReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 248;
        goto LABEL_310;
      case 0x68u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDHikeAssociatedInfo);
        if (!GEOPDHikeAssociatedInfoReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 272;
        goto LABEL_310;
      case 0x69u:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDHikeSummary);
        if (!GEOPDHikeSummaryReadAllFrom((uint64_t)v21, a2, v5))
          goto LABEL_313;
        PBReaderRecallMark();
        v22 = 288;
        goto LABEL_310;
      case 0x6Au:
        if ((PBReaderPlaceMark() & 1) == 0)
          return 0;
        v21 = objc_alloc_init(GEOPDHikeGeometry);
        if (GEOPDHikeGeometryReadAllFrom((uint64_t)v21, a2))
        {
          PBReaderRecallMark();
          v22 = 280;
LABEL_310:
          v25 = *(void **)(a1 + v22);
          *(_QWORD *)(a1 + v22) = v21;

LABEL_311:
          if (*(_QWORD *)&a2[*v7] >= *(_QWORD *)&a2[*v8])
            return a2[*v9] == 0;
          continue;
        }
LABEL_313:

        return 0;
      default:
        if (!*(_QWORD *)(a1 + 8))
        {
          v23 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v24 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v23;

        }
        result = PBUnknownFieldAdd();
        if (!(_DWORD)result)
          return result;
        goto LABEL_311;
    }
  }
}

unint64_t GEOPDEntityReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 284))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDEntityReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 288));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 280) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 284) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDEntityReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDEntityReadAllFrom_initialTag;
  Specified = GEOPDEntityReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDEntityCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 288));
  return Specified;
}

void sub_1886B1B30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDEntityReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64x2_t v14;
  int8x16_t v15;
  uint32x4_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  char v23;
  int *v24;
  int *v25;
  int v26;
  char v27;
  int *v28;
  int *v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  BOOL v37;
  int v38;
  int v39;
  unint64_t v41;
  BOOL v42;
  int *v43;
  int v44;
  int v45;
  BOOL v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  GEOLocalizedString *v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  id v71;
  void *v72;
  int v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  char v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  int *v126;
  int *v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  uint64_t v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  char v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  char v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  void *v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  char v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char v171;
  char v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char v177;
  int *v178;
  int *v179;
  char v180;
  unsigned int v181;
  uint64_t v182;
  int *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char v187;
  char v188;
  char v189;
  uint64_t v190;
  BOOL v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  char v201;
  char v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char v208;
  int v209;
  uint64_t v210;
  void *v211;
  char v213;
  char v214;
  char v215;
  char v216;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 288));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 284);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 280));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = *(_QWORD *)(a1 + 328);
  v14 = (uint64x2_t)vdupq_n_s64(v13);
  v15.i64[0] = 0x100000001;
  v15.i64[1] = 0x100000001;
  v16 = (uint32x4_t)vdupq_n_s32(v13);
  v17 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_189CD7C40), (int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_189CD7C30)), v15))+ ((v13 >> 22) & 1)+ ((v13 >> 38) & 1)+ ((v13 >> 26) & 1)+ ((v13 >> 21) & 1)+ ((v13 >> 40) & 1)+ ((v13 >> 23) & 1)+ ((v13 >> 18) & 1)+ vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_189CD7C10), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_189CD7C20), v15)))+ vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_189CD7C00), (int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_189CD7BF0)),
                                v15))
      + (v13 >> 31);
  while (2)
  {
    v18 = 1;
    v19 = 1;
    v20 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v17;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v19 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v21 = v17 > 0x11;
        v22 = v21 & ~(_BYTE)v12 | v10;
        v23 = v21 | v12;
        if ((((v21 | v12) | v9) & 1) != 0)
          v24 = 0;
        else
          v24 = a3;
        v25 = (int *)MEMORY[0x1E0D82BF0];
        v26 = 1;
        v27 = v21 & ~(_BYTE)v12 | v10;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v7))
          goto LABEL_447;
        v213 = v22;
        v214 = v23 | v22;
        v216 = (v24 == 0) | v23;
        v28 = (int *)MEMORY[0x1E0D82BC8];
        v29 = (int *)MEMORY[0x1E0D82BB8];
        v215 = v23;
        break;
      default:
        ++v17;
LABEL_7:
        v18 = v10;
LABEL_8:
        v19 = v11;
        v20 = v12;
LABEL_10:
        ++v8;
        v10 = v18;
        v11 = v19;
        v12 = v20;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v28))
      goto LABEL_441;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    while (1)
    {
      v33 = *v25;
      v34 = *(_QWORD *)(v3 + v33);
      v35 = v34 + 1;
      if (v34 == -1 || v35 > *(_QWORD *)(v3 + *v7))
        break;
      v36 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v34);
      *(_QWORD *)(v3 + v33) = v35;
      v32 |= (unint64_t)(v36 & 0x7F) << v30;
      if ((v36 & 0x80) == 0)
        goto LABEL_25;
      v30 += 7;
      v37 = v31++ >= 9;
      if (v37)
      {
        v32 = 0;
        v38 = *(unsigned __int8 *)(v3 + *v28);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v28) = 1;
LABEL_25:
    v38 = *(unsigned __int8 *)(v3 + *v28);
    if (*(_BYTE *)(v3 + *v28))
      v32 = 0;
LABEL_27:
    v39 = v32 & 7;
    if (v38 || v39 == 4)
    {
LABEL_441:
      v26 = 1;
      goto LABEL_446;
    }
    v41 = v32 >> 3;
    v42 = v23;
    if ((v216 & 1) == 0)
    {
      v43 = v24;
      do
      {
        v45 = *v43++;
        v44 = v45;
        v42 = v45 != 0;
        if (v45)
          v46 = v44 == (_DWORD)v41;
        else
          v46 = 1;
      }
      while (!v46);
    }
    switch((int)v41)
    {
      case 1:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        *(_QWORD *)(a1 + 328) |= 0x800uLL;
        while (1)
        {
          v50 = *v25;
          v51 = *(_QWORD *)(v3 + v50);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(v3 + *v7))
            break;
          v53 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v51);
          *(_QWORD *)(v3 + v50) = v52;
          v49 |= (unint64_t)(v53 & 0x7F) << v47;
          if ((v53 & 0x80) == 0)
            goto LABEL_321;
          v47 += 7;
          v37 = v48++ >= 9;
          if (v37)
          {
            LODWORD(v49) = 0;
            goto LABEL_323;
          }
        }
        *(_BYTE *)(v3 + *v28) = 1;
LABEL_321:
        if (*(_BYTE *)(v3 + *v28))
          LODWORD(v49) = 0;
LABEL_323:
        v190 = 316;
        goto LABEL_385;
      case 2:
        if (!v42)
          goto LABEL_318;
        if ((*(_BYTE *)(a1 + 332) & 0x40) == 0)
        {
          PBReaderReadString();
          v54 = objc_claimAutoreleasedReturnValue();
          v55 = 248;
          goto LABEL_245;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_444;
        v194 = *(_QWORD *)(a1 + 328) << 25;
        goto LABEL_415;
      case 3:
        if (!v42 || (*(_BYTE *)(a1 + 330) & 0x40) != 0)
          goto LABEL_316;
        PBReaderReadString();
        v56 = (GEOLocalizedString *)objc_claimAutoreleasedReturnValue();
        if (v56)
          -[GEOPDEntity _addNoFlagsAltTelephone:](a1, v56);
        goto LABEL_259;
      case 4:
        if (!v42)
          goto LABEL_318;
        if ((*(_BYTE *)(a1 + 331) & 4) == 0)
        {
          PBReaderReadString();
          v54 = objc_claimAutoreleasedReturnValue();
          v55 = 136;
          goto LABEL_245;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_444;
        v194 = *(_QWORD *)(a1 + 328) << 37;
        goto LABEL_415;
      case 5:
        if (!v42 || (*(_BYTE *)(a1 + 330) & 0x20) != 0)
          goto LABEL_316;
        PBReaderReadString();
        v56 = (GEOLocalizedString *)objc_claimAutoreleasedReturnValue();
        if (v56)
          -[GEOPDEntity _addNoFlagsAltFax:](a1, v56);
        goto LABEL_259;
      case 6:
        if (!v42)
          goto LABEL_318;
        if ((*(_BYTE *)(a1 + 333) & 1) == 0)
        {
          PBReaderReadString();
          v54 = objc_claimAutoreleasedReturnValue();
          v55 = 264;
          goto LABEL_245;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_444;
        v194 = *(_QWORD *)(a1 + 328) << 23;
        goto LABEL_415;
      case 7:
        if (!v42 || (*(_BYTE *)(a1 + 330) & 0x80) != 0)
          goto LABEL_316;
        PBReaderReadString();
        v56 = (GEOLocalizedString *)objc_claimAutoreleasedReturnValue();
        if (v56)
          -[GEOPDEntity _addNoFlagsAltUrl:](a1, v56);
        goto LABEL_259;
      case 8:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        *(_QWORD *)(a1 + 328) |= 0x8000uLL;
        while (2)
        {
          v60 = *v25;
          v61 = *(_QWORD *)(v3 + v60);
          v62 = v61 + 1;
          if (v61 == -1 || v62 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v61);
            *(_QWORD *)(v3 + v60) = v62;
            v59 |= (unint64_t)(v63 & 0x7F) << v57;
            if (v63 < 0)
            {
              v57 += 7;
              v37 = v58++ >= 9;
              if (v37)
              {
                v59 = 0;
                goto LABEL_327;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          v59 = 0;
LABEL_327:
        v191 = v59 != 0;
        v192 = 323;
        goto LABEL_368;
      case 9:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        *(_QWORD *)(a1 + 328) |= 0x4000uLL;
        while (2)
        {
          v67 = *v25;
          v68 = *(_QWORD *)(v3 + v67);
          v69 = v68 + 1;
          if (v68 == -1 || v69 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v70 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v68);
            *(_QWORD *)(v3 + v67) = v69;
            v66 |= (unint64_t)(v70 & 0x7F) << v64;
            if (v70 < 0)
            {
              v64 += 7;
              v37 = v65++ >= 9;
              if (v37)
              {
                v66 = 0;
                goto LABEL_331;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          v66 = 0;
LABEL_331:
        v191 = v66 != 0;
        v192 = 322;
        goto LABEL_368;
      case 10:
        if (!v42 || (*(_BYTE *)(a1 + 332) & 2) != 0)
          goto LABEL_316;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_444;
        v56 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v56, (void *)v3, v11 & 1))
          goto LABEL_443;
        PBReaderRecallMark();
        -[GEOPDEntity _addNoFlagsName:](a1, v56);
        goto LABEL_259;
      case 11:
        if (!v42 || (*(_BYTE *)(a1 + 332) & 0x10) != 0)
          goto LABEL_316;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_444;
        v56 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v56, (void *)v3, v11 & 1))
          goto LABEL_443;
        PBReaderRecallMark();
        -[GEOPDEntity _addNoFlagsSpokenName:](a1, v56);
        goto LABEL_259;
      case 12:
        if (!v42 || (*(_BYTE *)(a1 + 331) & 0x10) != 0)
          goto LABEL_316;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_444;
        v56 = objc_alloc_init(GEOPDCategory);
        if (!GEOPDCategoryReadAllFrom((uint64_t)v56, (void *)v3, v11 & 1))
          goto LABEL_443;
        PBReaderRecallMark();
        -[GEOPDEntity _addNoFlagsLocalizedCategory:](a1, v56);
        goto LABEL_259;
      case 14:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v74 = 0;
        v75 = 0;
        v76 = 0;
        *(_QWORD *)(a1 + 328) |= 0x20000uLL;
        while (2)
        {
          v77 = *v25;
          v78 = *(_QWORD *)(v3 + v77);
          v79 = v78 + 1;
          if (v78 == -1 || v79 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v80 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v78);
            *(_QWORD *)(v3 + v77) = v79;
            v76 |= (unint64_t)(v80 & 0x7F) << v74;
            if (v80 < 0)
            {
              v74 += 7;
              v37 = v75++ >= 9;
              if (v37)
              {
                v76 = 0;
                goto LABEL_335;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          v76 = 0;
LABEL_335:
        v191 = v76 != 0;
        v192 = 325;
        goto LABEL_368;
      case 15:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v81 = 0;
        v82 = 0;
        v83 = 0;
        *(_QWORD *)(a1 + 328) |= 0x1000uLL;
        while (2)
        {
          v84 = *v25;
          v85 = *(_QWORD *)(v3 + v84);
          v86 = v85 + 1;
          if (v85 == -1 || v86 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v87 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v85);
            *(_QWORD *)(v3 + v84) = v86;
            v83 |= (unint64_t)(v87 & 0x7F) << v81;
            if (v87 < 0)
            {
              v81 += 7;
              v37 = v82++ >= 9;
              if (v37)
              {
                v83 = 0;
                goto LABEL_339;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          v83 = 0;
LABEL_339:
        v191 = v83 != 0;
        v192 = 320;
        goto LABEL_368;
      case 16:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v88 = 0;
        v89 = 0;
        v90 = 0;
        *(_QWORD *)(a1 + 328) |= 0x10000uLL;
        while (2)
        {
          v91 = *v25;
          v92 = *(_QWORD *)(v3 + v91);
          v93 = v92 + 1;
          if (v92 == -1 || v93 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v94 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v92);
            *(_QWORD *)(v3 + v91) = v93;
            v90 |= (unint64_t)(v94 & 0x7F) << v88;
            if (v94 < 0)
            {
              v88 += 7;
              v37 = v89++ >= 9;
              if (v37)
              {
                v90 = 0;
                goto LABEL_343;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          v90 = 0;
LABEL_343:
        v191 = v90 != 0;
        v192 = 324;
        goto LABEL_368;
      case 17:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v95 = 0;
        v96 = 0;
        v49 = 0;
        *(_QWORD *)(a1 + 328) |= 0x40uLL;
        while (2)
        {
          v97 = *v25;
          v98 = *(_QWORD *)(v3 + v97);
          v99 = v98 + 1;
          if (v98 == -1 || v99 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v100 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v98);
            *(_QWORD *)(v3 + v97) = v99;
            v49 |= (unint64_t)(v100 & 0x7F) << v95;
            if (v100 < 0)
            {
              v95 += 7;
              v37 = v96++ >= 9;
              if (v37)
              {
                LODWORD(v49) = 0;
                goto LABEL_347;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          LODWORD(v49) = 0;
LABEL_347:
        v190 = 296;
        goto LABEL_385;
      case 18:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v101 = 0;
        v102 = 0;
        v49 = 0;
        *(_QWORD *)(a1 + 328) |= 0x400uLL;
        while (2)
        {
          v103 = *v25;
          v104 = *(_QWORD *)(v3 + v103);
          v105 = v104 + 1;
          if (v104 == -1 || v105 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v106 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v104);
            *(_QWORD *)(v3 + v103) = v105;
            v49 |= (unint64_t)(v106 & 0x7F) << v101;
            if (v106 < 0)
            {
              v101 += 7;
              v37 = v102++ >= 9;
              if (v37)
              {
                LODWORD(v49) = 0;
                goto LABEL_351;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          LODWORD(v49) = 0;
LABEL_351:
        v190 = 312;
        goto LABEL_385;
      case 19:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v107 = 0;
        v108 = 0;
        v49 = 0;
        *(_QWORD *)(a1 + 328) |= 0x200uLL;
        while (2)
        {
          v109 = *v25;
          v110 = *(_QWORD *)(v3 + v109);
          v111 = v110 + 1;
          if (v110 == -1 || v111 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v112 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v110);
            *(_QWORD *)(v3 + v109) = v111;
            v49 |= (unint64_t)(v112 & 0x7F) << v107;
            if (v112 < 0)
            {
              v107 += 7;
              v37 = v108++ >= 9;
              if (v37)
              {
                LODWORD(v49) = 0;
                goto LABEL_355;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          LODWORD(v49) = 0;
LABEL_355:
        v190 = 308;
        goto LABEL_385;
      case 20:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v113 = 0;
        v114 = 0;
        v115 = 0;
        *(_QWORD *)(a1 + 328) |= 2uLL;
        while (2)
        {
          v116 = *v25;
          v117 = *(_QWORD *)(v3 + v116);
          v118 = v117 + 1;
          if (v117 == -1 || v118 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v119 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v117);
            *(_QWORD *)(v3 + v116) = v118;
            v115 |= (unint64_t)(v119 & 0x7F) << v113;
            if (v119 < 0)
            {
              v113 += 7;
              v37 = v114++ >= 9;
              if (v37)
              {
                v115 = 0;
                goto LABEL_359;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          v115 = 0;
LABEL_359:
        v193 = 112;
        goto LABEL_390;
      case 21:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v120 = 0;
        v121 = 0;
        v49 = 0;
        *(_QWORD *)(a1 + 328) |= 0x20uLL;
        while (2)
        {
          v122 = *v25;
          v123 = *(_QWORD *)(v3 + v122);
          v124 = v123 + 1;
          if (v123 == -1 || v124 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v125 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v123);
            *(_QWORD *)(v3 + v122) = v124;
            v49 |= (unint64_t)(v125 & 0x7F) << v120;
            if (v125 < 0)
            {
              v120 += 7;
              v37 = v121++ >= 9;
              if (v37)
              {
                LODWORD(v49) = 0;
                goto LABEL_363;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          LODWORD(v49) = 0;
LABEL_363:
        v190 = 292;
        goto LABEL_385;
      case 22:
        if (!v42 || (*(_BYTE *)(a1 + 330) & 0x10) != 0)
          goto LABEL_318;
        if (v39 != 2)
        {
          v195 = 0;
          v196 = 0;
          v197 = 0;
          while (1)
          {
            v198 = *v25;
            v199 = *(_QWORD *)(v3 + v198);
            v200 = v199 + 1;
            if (v199 == -1 || v200 > *(_QWORD *)(v3 + *v7))
              break;
            v201 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v199);
            *(_QWORD *)(v3 + v198) = v200;
            v197 |= (unint64_t)(v201 & 0x7F) << v195;
            if (v201 < 0)
            {
              v195 += 7;
              v37 = v196++ >= 9;
              if (!v37)
                continue;
            }
            goto LABEL_438;
          }
          *(_BYTE *)(v3 + *v28) = 1;
LABEL_438:
          PBRepeatedInt32Add();
          goto LABEL_416;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_444;
        while (1)
        {
          v126 = (int *)MEMORY[0x1E0D82BD8];
          v127 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v25) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_420;
          }
          v128 = 0;
          v129 = 0;
          v130 = 0;
          v131 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v132 = *v25;
            v133 = *(_QWORD *)(v3 + v132);
            v134 = v133 + 1;
            if (v133 == -1 || v134 > *(_QWORD *)(v3 + *v126))
              break;
            v135 = *(_BYTE *)(*(_QWORD *)(v3 + *v131) + v133);
            *(_QWORD *)(v3 + v132) = v134;
            v130 |= (unint64_t)(v135 & 0x7F) << v128;
            if (v135 < 0)
            {
              v128 += 7;
              v37 = v129++ >= 9;
              if (!v37)
                continue;
            }
            goto LABEL_183;
          }
          *(_BYTE *)(v3 + *v127) = 1;
LABEL_183:
          PBRepeatedInt32Add();
        }
      case 23:
        if (!v42)
          goto LABEL_318;
        if ((*(_BYTE *)(a1 + 332) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_444;
          v194 = *(_QWORD *)(a1 + 328) << 29;
          goto LABEL_415;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_444;
        v56 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v56, (void *)v3, v11 & 1))
          goto LABEL_443;
        PBReaderRecallMark();
        v136 = 216;
        goto LABEL_306;
      case 24:
        if (!v42)
          goto LABEL_318;
        if ((*(_BYTE *)(a1 + 332) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_444;
          v194 = *(_QWORD *)(a1 + 328) << 28;
          goto LABEL_415;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_444;
        v56 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v56, (void *)v3, v11 & 1))
          goto LABEL_443;
        PBReaderRecallMark();
        v136 = 224;
        goto LABEL_306;
      case 25:
        if (!v42)
          goto LABEL_318;
        if ((*(_BYTE *)(a1 + 332) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_444;
          v194 = *(_QWORD *)(a1 + 328) << 26;
          goto LABEL_415;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_444;
        v56 = objc_alloc_init(GEOStyleAttributes);
        if (!GEOStyleAttributesReadAllFrom((uint64_t)v56, (void *)v3))
          goto LABEL_443;
        PBReaderRecallMark();
        v136 = 240;
        goto LABEL_306;
      case 26:
        if (!v42)
          goto LABEL_318;
        if ((*(_BYTE *)(a1 + 333) & 2) == 0)
        {
          PBReaderReadString();
          v54 = objc_claimAutoreleasedReturnValue();
          v55 = 272;
          goto LABEL_245;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_444;
        v194 = *(_QWORD *)(a1 + 328) << 22;
        goto LABEL_415;
      case 27:
        if (!v42)
          goto LABEL_318;
        if ((*(_BYTE *)(a1 + 331) & 0x40) == 0)
        {
          PBReaderReadString();
          v54 = objc_claimAutoreleasedReturnValue();
          v55 = 176;
          goto LABEL_245;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_444;
        v194 = *(_QWORD *)(a1 + 328) << 33;
        goto LABEL_415;
      case 28:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v137 = 0;
        v138 = 0;
        v139 = 0;
        *(_QWORD *)(a1 + 328) |= 0x2000uLL;
        while (2)
        {
          v140 = *v25;
          v141 = *(_QWORD *)(v3 + v140);
          v142 = v141 + 1;
          if (v141 == -1 || v142 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v143 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v141);
            *(_QWORD *)(v3 + v140) = v142;
            v139 |= (unint64_t)(v143 & 0x7F) << v137;
            if (v143 < 0)
            {
              v137 += 7;
              v37 = v138++ >= 9;
              if (v37)
              {
                v139 = 0;
                goto LABEL_367;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          v139 = 0;
LABEL_367:
        v191 = v139 != 0;
        v192 = 321;
LABEL_368:
        *(_BYTE *)(a1 + v192) = v191;
        goto LABEL_417;
      case 29:
        if (!v42 || (*(_BYTE *)(a1 + 331) & 1) != 0)
          goto LABEL_316;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_444;
        v56 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v56, (void *)v3, v11 & 1))
          goto LABEL_443;
        PBReaderRecallMark();
        -[GEOPDEntity _addNoFlagsAlternateSearchableName:](a1, v56);
        goto LABEL_259;
      case 30:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v144 = 0;
        v145 = 0;
        v115 = 0;
        *(_QWORD *)(a1 + 328) |= 8uLL;
        while (2)
        {
          v146 = *v25;
          v147 = *(_QWORD *)(v3 + v146);
          v148 = v147 + 1;
          if (v147 == -1 || v148 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v149 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v147);
            *(_QWORD *)(v3 + v146) = v148;
            v115 |= (unint64_t)(v149 & 0x7F) << v144;
            if (v149 < 0)
            {
              v144 += 7;
              v37 = v145++ >= 9;
              if (v37)
              {
                v115 = 0;
                goto LABEL_372;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          v115 = 0;
LABEL_372:
        v193 = 144;
        goto LABEL_390;
      case 31:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v150 = 0;
        v151 = 0;
        v115 = 0;
        *(_QWORD *)(a1 + 328) |= 4uLL;
        while (2)
        {
          v152 = *v25;
          v153 = *(_QWORD *)(v3 + v152);
          v154 = v153 + 1;
          if (v153 == -1 || v154 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v155 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v153);
            *(_QWORD *)(v3 + v152) = v154;
            v115 |= (unint64_t)(v155 & 0x7F) << v150;
            if (v155 < 0)
            {
              v150 += 7;
              v37 = v151++ >= 9;
              if (v37)
              {
                v115 = 0;
                goto LABEL_376;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          v115 = 0;
LABEL_376:
        v193 = 120;
        goto LABEL_390;
      case 32:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v156 = 0;
        v157 = 0;
        v115 = 0;
        *(_QWORD *)(a1 + 328) |= 1uLL;
        while (2)
        {
          v158 = *v25;
          v159 = *(_QWORD *)(v3 + v158);
          v160 = v159 + 1;
          if (v159 == -1 || v160 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v161 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v159);
            *(_QWORD *)(v3 + v158) = v160;
            v115 |= (unint64_t)(v161 & 0x7F) << v156;
            if (v161 < 0)
            {
              v156 += 7;
              v37 = v157++ >= 9;
              if (v37)
              {
                v115 = 0;
                goto LABEL_380;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          v115 = 0;
LABEL_380:
        v193 = 104;
        goto LABEL_390;
      case 33:
        if (!v42)
          goto LABEL_318;
        if ((*(_BYTE *)(a1 + 332) & 1) == 0)
        {
          PBReaderReadString();
          v54 = objc_claimAutoreleasedReturnValue();
          v55 = 200;
LABEL_245:
          v162 = *(void **)(a1 + v55);
          *(_QWORD *)(a1 + v55) = v54;
          goto LABEL_307;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_444;
        v194 = *(_QWORD *)(a1 + 328) << 31;
        goto LABEL_415;
      case 34:
        if (!v42 || (*(_BYTE *)(a1 + 331) & 0x80) != 0)
          goto LABEL_316;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_444;
        v56 = objc_alloc_init(GEOPDCategory);
        if (!GEOPDCategoryReadAllFrom((uint64_t)v56, (void *)v3, v11 & 1))
          goto LABEL_443;
        PBReaderRecallMark();
        -[GEOPDEntity _addNoFlagsModernLocalizedCategory:](a1, v56);
        goto LABEL_259;
      case 35:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        *(_QWORD *)(a1 + 328) |= 0x80uLL;
        v163 = *v25;
        v164 = *(_QWORD *)(v3 + v163);
        if (v164 <= 0xFFFFFFFFFFFFFFFBLL && v164 + 4 <= *(_QWORD *)(v3 + *v7))
        {
          v165 = *(_DWORD *)(*(_QWORD *)(v3 + *v29) + v164);
          *(_QWORD *)(v3 + v163) = v164 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v28) = 1;
          v165 = 0;
        }
        *(_DWORD *)(a1 + 300) = v165;
        goto LABEL_417;
      case 36:
        if (v42 && (*(_BYTE *)(a1 + 331) & 0x20) == 0)
        {
          PBReaderReadString();
          v56 = (GEOLocalizedString *)objc_claimAutoreleasedReturnValue();
          if (v56)
            -[GEOPDEntity _addNoFlagsMapsAltCategoryId:](a1, v56);
LABEL_259:

          goto LABEL_416;
        }
LABEL_316:
        v188 = PBReaderSkipValueWithTag();
        v7 = (int *)MEMORY[0x1E0D82BD8];
        v28 = (int *)MEMORY[0x1E0D82BC8];
        if ((v188 & 1) == 0)
          goto LABEL_444;
        goto LABEL_417;
      case 37:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v166 = 0;
        v167 = 0;
        v49 = 0;
        *(_QWORD *)(a1 + 328) |= 0x100uLL;
        while (2)
        {
          v168 = *v25;
          v169 = *(_QWORD *)(v3 + v168);
          v170 = v169 + 1;
          if (v169 == -1 || v170 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v171 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v169);
            *(_QWORD *)(v3 + v168) = v170;
            v49 |= (unint64_t)(v171 & 0x7F) << v166;
            if (v171 < 0)
            {
              v166 += 7;
              v37 = v167++ >= 9;
              if (v37)
              {
                LODWORD(v49) = 0;
                goto LABEL_384;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          LODWORD(v49) = 0;
LABEL_384:
        v190 = 304;
LABEL_385:
        *(_DWORD *)(a1 + v190) = v49;
        goto LABEL_417;
      case 38:
        if (!v42)
          goto LABEL_318;
        if ((*(_BYTE *)(a1 + 331) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_444;
          v194 = *(_QWORD *)(a1 + 328) << 36;
          goto LABEL_415;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_444;
        v56 = objc_alloc_init(GEOPDInlineRapEnablement);
        if (!GEOPDInlineRapEnablementReadAllFrom((uint64_t)v56, (void *)v3))
          goto LABEL_443;
        PBReaderRecallMark();
        v136 = 152;
        goto LABEL_306;
      case 39:
        if ((v9 & 1) == 0)
          goto LABEL_318;
        v172 = 0;
        v173 = 0;
        v115 = 0;
        *(_QWORD *)(a1 + 328) |= 0x10uLL;
        while (2)
        {
          v174 = *v25;
          v175 = *(_QWORD *)(v3 + v174);
          v176 = v175 + 1;
          if (v175 == -1 || v176 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v28) = 1;
          }
          else
          {
            v177 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v175);
            *(_QWORD *)(v3 + v174) = v176;
            v115 |= (unint64_t)(v177 & 0x7F) << v172;
            if (v177 < 0)
            {
              v172 += 7;
              v37 = v173++ >= 9;
              if (v37)
              {
                v115 = 0;
                goto LABEL_389;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v28))
          v115 = 0;
LABEL_389:
        v193 = 184;
LABEL_390:
        *(_QWORD *)(a1 + v193) = v115;
        goto LABEL_417;
      case 40:
        if (!v42 || (*(_BYTE *)(a1 + 330) & 8) != 0)
          goto LABEL_318;
        if (v39 != 2)
        {
          v202 = 0;
          v203 = 0;
          v204 = 0;
          while (1)
          {
            v205 = *v25;
            v206 = *(_QWORD *)(v3 + v205);
            v207 = v206 + 1;
            if (v206 == -1 || v207 > *(_QWORD *)(v3 + *v7))
              break;
            v208 = *(_BYTE *)(*(_QWORD *)(v3 + *v29) + v206);
            *(_QWORD *)(v3 + v205) = v207;
            v204 |= (unint64_t)(v208 & 0x7F) << v202;
            if (v208 < 0)
            {
              v202 += 7;
              v37 = v203++ >= 9;
              if (!v37)
                continue;
            }
            goto LABEL_440;
          }
          *(_BYTE *)(v3 + *v28) = 1;
LABEL_440:
          PBRepeatedUInt64Add();
          goto LABEL_416;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_444;
        while (1)
        {
          v178 = (int *)MEMORY[0x1E0D82BD8];
          v179 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v25) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            break;
          }
          v180 = 0;
          v181 = 0;
          v182 = 0;
          v183 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v184 = *v25;
            v185 = *(_QWORD *)(v3 + v184);
            v186 = v185 + 1;
            if (v185 == -1 || v186 > *(_QWORD *)(v3 + *v178))
              break;
            v187 = *(_BYTE *)(*(_QWORD *)(v3 + *v183) + v185);
            *(_QWORD *)(v3 + v184) = v186;
            v182 |= (unint64_t)(v187 & 0x7F) << v180;
            if (v187 < 0)
            {
              v180 += 7;
              v37 = v181++ >= 9;
              if (!v37)
                continue;
            }
            goto LABEL_295;
          }
          *(_BYTE *)(v3 + *v179) = 1;
LABEL_295:
          PBRepeatedUInt64Add();
        }
LABEL_420:
        PBReaderRecallMark();
        v28 = (int *)MEMORY[0x1E0D82BC8];
        v7 = (int *)MEMORY[0x1E0D82BD8];
        goto LABEL_417;
      case 41:
        if (!v42)
          goto LABEL_318;
        if ((*(_BYTE *)(a1 + 331) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_444;
          v194 = *(_QWORD *)(a1 + 328) << 38;
          goto LABEL_415;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_444;
        v56 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v56, (void *)v3, v11 & 1))
          goto LABEL_443;
        PBReaderRecallMark();
        v136 = 128;
        goto LABEL_306;
      case 42:
        if (!v42)
          goto LABEL_318;
        if ((*(_BYTE *)(a1 + 332) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_444;
          v194 = *(_QWORD *)(a1 + 328) << 24;
LABEL_415:
          v8 += v194 >> 63;
LABEL_416:
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v28 = (int *)MEMORY[0x1E0D82BC8];
LABEL_417:
          if (!(v214 & 1 | (v8 != 0)))
          {
            v26 = 1;
            goto LABEL_445;
          }
          v23 = v215;
          v29 = (int *)MEMORY[0x1E0D82BB8];
          if (*(_QWORD *)(v3 + *v25) >= *(_QWORD *)(v3 + *v7))
            goto LABEL_441;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_444;
        v56 = objc_alloc_init(GEOPDURLData);
        if (GEOPDURLDataReadAllFrom((uint64_t)v56, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          v136 = 256;
LABEL_306:
          v162 = *(void **)(a1 + v136);
          *(_QWORD *)(a1 + v136) = v56;
LABEL_307:

          --v8;
          goto LABEL_416;
        }
LABEL_443:

LABEL_444:
        v26 = 0;
LABEL_445:
        v23 = v215;
LABEL_446:
        v27 = v213;
LABEL_447:
        if ((v27 & 1) != 0)
LABEL_448:
          *(_QWORD *)(a1 + 328) |= 0x40000uLL;
        if (v23 & 1 | ((v26 & 1) == 0))
        {
          *(_QWORD *)(a1 + 328) |= 0x3FFFFF80000uLL;
        }
        else if (v24)
        {
          while (1)
          {
            v209 = *v24++;
            v210 = 0x4000000000;
            switch(v209)
            {
              case 0:
                goto LABEL_476;
              case 2:
                goto LABEL_475;
              case 3:
                v210 = 0x400000;
                goto LABEL_475;
              case 4:
                v210 = 0x4000000;
                goto LABEL_475;
              case 5:
                v210 = 0x200000;
                goto LABEL_475;
              case 6:
                v210 = 0x10000000000;
                goto LABEL_475;
              case 7:
                v210 = 0x800000;
                goto LABEL_475;
              case 10:
                v210 = 0x200000000;
                goto LABEL_475;
              case 11:
                v210 = 0x1000000000;
                goto LABEL_475;
              case 12:
                v210 = 0x10000000;
                goto LABEL_475;
              case 22:
                v210 = 0x100000;
                goto LABEL_475;
              case 23:
                v210 = 0x400000000;
                goto LABEL_475;
              case 24:
                v210 = 0x800000000;
                goto LABEL_475;
              case 25:
                v210 = 0x2000000000;
                goto LABEL_475;
              case 26:
                v210 = 0x20000000000;
                goto LABEL_475;
              case 27:
                v210 = 0x40000000;
                goto LABEL_475;
              case 29:
                v210 = 0x1000000;
                goto LABEL_475;
              case 33:
                v210 = 0x100000000;
                goto LABEL_475;
              case 34:
                v210 = 0x80000000;
                goto LABEL_475;
              case 36:
                v210 = 0x20000000;
                goto LABEL_475;
              case 38:
                v210 = 0x8000000;
                goto LABEL_475;
              case 40:
                v210 = 0x80000;
                goto LABEL_475;
              case 41:
                v210 = 0x2000000;
                goto LABEL_475;
              case 42:
                v210 = 0x8000000000;
LABEL_475:
                *(_QWORD *)(a1 + 328) |= v210;
                break;
              default:
                continue;
            }
          }
        }
LABEL_476:
        if (v26)
        {
          v3 = *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]) == 0;
          if ((v23 & 1) == 0)
            return v3;
LABEL_480:
          v211 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v23 & 1) != 0)
            goto LABEL_480;
        }
        return v3;
      default:
        if ((v213 & 1) == 0 || (*(_BYTE *)(a1 + 330) & 4) != 0)
        {
LABEL_318:
          v189 = PBReaderSkipValueWithTag();
          v28 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          if ((v189 & 1) == 0)
            goto LABEL_444;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v71 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v72 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v71;

          }
          v73 = PBUnknownFieldAdd();
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v28 = (int *)MEMORY[0x1E0D82BC8];
          if (!v73)
          {
            v26 = 0;
            v23 = v215;
            goto LABEL_448;
          }
        }
        goto LABEL_417;
    }
  }
}

BOOL GEOPDSupportsOfflineMapsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  id v32;
  void *v33;
  _BOOL8 v34;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v28 = *v4;
            v29 = *(_QWORD *)&v3[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&v3[*v5])
              break;
            v31 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
            *(_QWORD *)&v3[v28] = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if ((v31 & 0x80) == 0)
              goto LABEL_44;
            v25 += 7;
            v15 = v26++ >= 9;
            if (v15)
            {
              LODWORD(v27) = 0;
              goto LABEL_46;
            }
          }
          v3[*v6] = 1;
LABEL_44:
          if (v3[*v6])
            LODWORD(v27) = 0;
LABEL_46:
          *(_DWORD *)(a1 + 16) = v27;
        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_40;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_42;
            }
          }
          v3[*v6] = 1;
LABEL_40:
          if (v3[*v6])
            v20 = 0;
LABEL_42:
          *(_BYTE *)(a1 + 20) = v20 != 0;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v32 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v33 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v32;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_49;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v34 = v3[*v6] == 0;
  }
  else
  {
LABEL_49:
    v34 = 0;
  }
  objc_sync_exit(v3);

  return v34;
}

void sub_1886B3F94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOStyleAttributesReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  GEOStyleAttribute *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  id v26;
  void *v27;
  _BOOL8 v28;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
              break;
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_36;
            v19 += 7;
            v15 = v20++ >= 9;
            if (v15)
            {
              v21 = 0;
              goto LABEL_38;
            }
          }
          v3[*v6] = 1;
LABEL_36:
          if (v3[*v6])
            v21 = 0;
LABEL_38:
          *(_QWORD *)(a1 + 24) = v21;
        }
        else if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_42;
          v18 = objc_alloc_init(GEOStyleAttribute);
          if (!GEOStyleAttributeReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_42;
          }
          PBReaderRecallMark();
          objc_msgSend((id)a1, "addAttribute:", v18, 0, 0);

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v26 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v27 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v26;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_42;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v28 = v3[*v6] == 0;
  }
  else
  {
LABEL_42:
    v28 = 0;
  }
  objc_sync_exit(v3);

  return v28;
}

void sub_1886B42E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDPOIClaimReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  id v35;
  void *v36;
  BOOL v37;
  uint64_t v38;
  _BOOL8 v39;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          PBReaderReadString();
          v26 = objc_claimAutoreleasedReturnValue();
          v27 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v26;

        }
        else
        {
          if ((_DWORD)v18 == 2)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            *(_BYTE *)(a1 + 28) |= 1u;
            while (1)
            {
              v31 = *v4;
              v32 = *(_QWORD *)&v3[v31];
              v33 = v32 + 1;
              if (v32 == -1 || v33 > *(_QWORD *)&v3[*v5])
                break;
              v34 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v32);
              *(_QWORD *)&v3[v31] = v33;
              v30 |= (unint64_t)(v34 & 0x7F) << v28;
              if ((v34 & 0x80) == 0)
                goto LABEL_46;
              v28 += 7;
              v15 = v29++ >= 9;
              if (v15)
              {
                v30 = 0;
                goto LABEL_48;
              }
            }
            v3[*v6] = 1;
LABEL_46:
            if (v3[*v6])
              v30 = 0;
LABEL_48:
            v37 = v30 != 0;
            v38 = 24;
            goto LABEL_49;
          }
          if ((_DWORD)v18 == 1)
          {
            v19 = 0;
            v20 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 28) |= 2u;
            while (1)
            {
              v22 = *v4;
              v23 = *(_QWORD *)&v3[v22];
              v24 = v23 + 1;
              if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
                break;
              v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
              *(_QWORD *)&v3[v22] = v24;
              v21 |= (unint64_t)(v25 & 0x7F) << v19;
              if ((v25 & 0x80) == 0)
                goto LABEL_42;
              v19 += 7;
              v15 = v20++ >= 9;
              if (v15)
              {
                v21 = 0;
                goto LABEL_44;
              }
            }
            v3[*v6] = 1;
LABEL_42:
            if (v3[*v6])
              v21 = 0;
LABEL_44:
            v37 = v21 != 0;
            v38 = 25;
LABEL_49:
            *(_BYTE *)(a1 + v38) = v37;
            continue;
          }
          if (!*(_QWORD *)(a1 + 8))
          {
            v35 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v36 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v35;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_52;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v39 = v3[*v6] == 0;
  }
  else
  {
LABEL_52:
    v39 = 0;
  }
  objc_sync_exit(v3);

  return v39;
}

void sub_1886B4648(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDEnhancedPlacementReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  _BOOL8 v44;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        v17 = v10 & 7;
        if (v16 || v17 == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            if (v17 == 2)
            {
              if (!PBReaderPlaceMark())
                goto LABEL_65;
              while (1)
              {
                if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5] || v3[*v6])
                {
                  PBReaderRecallMark();
                  goto LABEL_63;
                }
                v19 = 0;
                v20 = 0;
                v21 = 0;
                while (1)
                {
                  v22 = *v4;
                  v23 = *(_QWORD *)&v3[v22];
                  v24 = v23 + 1;
                  if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
                    break;
                  v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
                  *(_QWORD *)&v3[v22] = v24;
                  v21 |= (unint64_t)(v25 & 0x7F) << v19;
                  if (v25 < 0)
                  {
                    v19 += 7;
                    v15 = v20++ >= 9;
                    if (!v15)
                      continue;
                  }
                  goto LABEL_32;
                }
                v3[*v6] = 1;
LABEL_32:
                PBRepeatedUInt64Add();
              }
            }
            v36 = 0;
            v37 = 0;
            v38 = 0;
            break;
          case 2u:
            *(_BYTE *)(a1 + 56) |= 1u;
            v28 = *v4;
            v29 = *(_QWORD *)&v3[v28];
            if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v30 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v29);
              *(_QWORD *)&v3[v28] = v29 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v30 = 0;
            }
            *(_QWORD *)(a1 + 40) = v30;
            continue;
          case 3u:
            *(_BYTE *)(a1 + 56) |= 4u;
            v31 = *v4;
            v32 = *(_QWORD *)&v3[v31];
            if (v32 <= 0xFFFFFFFFFFFFFFFBLL && v32 + 4 <= *(_QWORD *)&v3[*v5])
            {
              v33 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v32);
              *(_QWORD *)&v3[v31] = v32 + 4;
            }
            else
            {
              v3[*v6] = 1;
              v33 = 0;
            }
            v43 = 52;
            goto LABEL_62;
          case 4u:
            *(_BYTE *)(a1 + 56) |= 2u;
            v34 = *v4;
            v35 = *(_QWORD *)&v3[v34];
            if (v35 <= 0xFFFFFFFFFFFFFFFBLL && v35 + 4 <= *(_QWORD *)&v3[*v5])
            {
              v33 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v35);
              *(_QWORD *)&v3[v34] = v35 + 4;
            }
            else
            {
              v3[*v6] = 1;
              v33 = 0;
            }
            v43 = 48;
LABEL_62:
            *(_DWORD *)(a1 + v43) = v33;
            continue;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v26 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v27 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v26;

            }
            if (!PBUnknownFieldAdd())
              goto LABEL_65;
            continue;
        }
        while (1)
        {
          v39 = *v4;
          v40 = *(_QWORD *)&v3[v39];
          v41 = v40 + 1;
          if (v40 == -1 || v41 > *(_QWORD *)&v3[*v5])
            break;
          v42 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v40);
          *(_QWORD *)&v3[v39] = v41;
          v38 |= (unint64_t)(v42 & 0x7F) << v36;
          if (v42 < 0)
          {
            v36 += 7;
            v15 = v37++ >= 9;
            if (!v15)
              continue;
          }
          goto LABEL_55;
        }
        v3[*v6] = 1;
LABEL_55:
        PBRepeatedUInt64Add();
LABEL_63:
        ;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v44 = v3[*v6] == 0;
  }
  else
  {
LABEL_65:
    v44 = 0;
  }
  objc_sync_exit(v3);

  return v44;
}

void sub_1886B4AF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886B5DE0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDStorefrontPresentationFilterReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;
  _BOOL8 v16;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v7 = v2[*v5];
      if (*(_QWORD *)&v2[*v3] >= *(_QWORD *)&v2[*v4])
        break;
      if (v2[*v5])
      {
        v7 = 1;
        break;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)&v2[v11];
        if (v12 == -1 || v12 >= *(_QWORD *)&v2[*v4])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v12);
        *(_QWORD *)&v2[v11] = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_13;
        v8 += 7;
        if (v9++ >= 9)
        {
          LOBYTE(v10) = 0;
          v7 = v2[*v5];
          goto LABEL_15;
        }
      }
      v2[*v5] = 1;
LABEL_13:
      v7 = v2[*v5];
      if (v2[*v5])
        LOBYTE(v10) = 0;
LABEL_15:
      if (v7)
        v15 = 1;
      else
        v15 = (v10 & 7) == 4;
      if (v15)
        break;
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_20;
    }
    v16 = v7 == 0;
  }
  else
  {
LABEL_20:
    v16 = 0;
  }
  objc_sync_exit(v2);

  return v16;
}

void sub_1886B5FE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDStorefrontFilterReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;
  _BOOL8 v16;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v7 = v2[*v5];
      if (*(_QWORD *)&v2[*v3] >= *(_QWORD *)&v2[*v4])
        break;
      if (v2[*v5])
      {
        v7 = 1;
        break;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)&v2[v11];
        if (v12 == -1 || v12 >= *(_QWORD *)&v2[*v4])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v12);
        *(_QWORD *)&v2[v11] = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_13;
        v8 += 7;
        if (v9++ >= 9)
        {
          LOBYTE(v10) = 0;
          v7 = v2[*v5];
          goto LABEL_15;
        }
      }
      v2[*v5] = 1;
LABEL_13:
      v7 = v2[*v5];
      if (v2[*v5])
        LOBYTE(v10) = 0;
LABEL_15:
      if (v7)
        v15 = 1;
      else
        v15 = (v10 & 7) == 4;
      if (v15)
        break;
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_20;
    }
    v16 = v7 == 0;
  }
  else
  {
LABEL_20:
    v16 = 0;
  }
  objc_sync_exit(v2);

  return v16;
}

void sub_1886B6144(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOGetGEOFilePathsLog()
{
  if (qword_1ECDBC158 != -1)
    dispatch_once(&qword_1ECDBC158, &__block_literal_global_201);
  return (id)qword_1ECDBC150;
}

id GEOGetGEOFilePathsLog_0()
{
  if (qword_1ECDBC5E8 != -1)
    dispatch_once(&qword_1ECDBC5E8, &__block_literal_global_15_1);
  return (id)_MergedGlobals_286;
}

void sub_1886B64F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886B692C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDGroundViewLabelReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  GEOPDGroundViewLabelInfo *v27;
  id v28;
  void *v29;
  _BOOL8 v30;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v17 = v11++ >= 9;
          if (v17)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 2)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_42;
          v27 = objc_alloc_init(GEOPDGroundViewLabelInfo);
          if (!GEOPDGroundViewLabelInfoReadAllFrom((uint64_t)v27, v5, a3))
          {

            goto LABEL_42;
          }
          PBReaderRecallMark();
          -[GEOPDGroundViewLabel addGroundViewLabelInfo:](a1, v27);

        }
        else if ((v12 >> 3) == 1)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            v23 = *v6;
            v24 = *(_QWORD *)&v5[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&v5[*v7])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v24);
            *(_QWORD *)&v5[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_36;
            v20 += 7;
            v17 = v21++ >= 9;
            if (v17)
            {
              v22 = 0;
              goto LABEL_38;
            }
          }
          v5[*v8] = 1;
LABEL_36:
          if (v5[*v8])
            v22 = 0;
LABEL_38:
          *(_QWORD *)(a1 + 24) = v22;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v28 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v29 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v28;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_42;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v30 = v5[*v8] == 0;
  }
  else
  {
LABEL_42:
    v30 = 0;
  }
  objc_sync_exit(v5);

  return v30;
}

void sub_1886B6C18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDGroundViewLabelInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDGroundViewLabelInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDGroundViewLabelInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDGroundViewLabelInfoReadAllFrom_initialTag;
  Specified = GEOPDGroundViewLabelInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_1886B6DA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDGroundViewLabelInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  char v48;
  char v49;
  uint64_t v50;
  int v51;
  char v52;
  void *v53;
  int v55;
  int *v56;
  char v57;
  char v58;
  char v59;
  BOOL v60;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 76)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFDFFFCFFFBLL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 1;
        v15 = v14 & ~(_BYTE)v7;
        v16 = v14 | v7;
        v57 = v15 | v8;
        v58 = v16 | v15 | v8;
        if (((v16 | v9) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v59 = (v17 == 0) | v16;
        v60 = v16;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_77;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_77:
      v55 = 1;
      goto LABEL_78;
    }
    v31 = v23 >> 3;
    v32 = v60;
    if ((v59 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_61;
        if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 40;
          goto LABEL_60;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_94;
        v49 = 8 * *(_BYTE *)(a1 + 76);
        goto LABEL_69;
      case 2:
        if (!v32)
          goto LABEL_61;
        if ((*(_BYTE *)(a1 + 76) & 0x20) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 48;
          goto LABEL_60;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_94;
        v49 = 4 * *(_BYTE *)(a1 + 76);
        goto LABEL_69;
      case 3:
        if ((v9 & 1) == 0)
          goto LABEL_61;
        *(_BYTE *)(a1 + 76) |= 2u;
        v42 = *v18;
        v43 = *(_QWORD *)(v3 + v42);
        if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v44 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v43);
          *(_QWORD *)(v3 + v42) = v43 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v19) = 1;
          v44 = 0;
        }
        v50 = 56;
        goto LABEL_75;
      case 4:
        if ((v9 & 1) == 0)
          goto LABEL_61;
        *(_BYTE *)(a1 + 76) |= 1u;
        v45 = *v18;
        v46 = *(_QWORD *)(v3 + v45);
        if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v44 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v46);
          *(_QWORD *)(v3 + v45) = v46 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v19) = 1;
          v44 = 0;
        }
        v50 = 24;
LABEL_75:
        *(_QWORD *)(a1 + v50) = v44;
        goto LABEL_76;
      case 5:
        if (!v32)
          goto LABEL_61;
        if ((*(_BYTE *)(a1 + 76) & 8) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 32;
LABEL_60:
          v47 = *(void **)(a1 + v38);
          *(_QWORD *)(a1 + v38) = v37;

          --v10;
LABEL_70:
          v19 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_76;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v49 = 16 * *(_BYTE *)(a1 + 76);
LABEL_69:
          v10 += v49 >> 7;
          goto LABEL_70;
        }
LABEL_94:
        v55 = 0;
        v56 = &OBJC_IVAR___GEOXPCReply__methodName;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_79:
        if ((v57 & 1) != 0)
LABEL_80:
          *(_BYTE *)(a1 + v56[1019]) |= 4u;
        if (v60 || (v55 & 1) == 0)
        {
          *(_BYTE *)(a1 + v56[1019]) |= 0x10u;
          *(_BYTE *)(a1 + v56[1019]) |= 0x20u;
          *(_BYTE *)(a1 + v56[1019]) |= 8u;
        }
        else if (v17)
        {
          while (1)
          {
            v51 = *v17++;
            v52 = 16;
            switch(v51)
            {
              case 0:
                goto LABEL_88;
              case 1:
                goto LABEL_87;
              case 2:
                v52 = 32;
                goto LABEL_87;
              case 5:
                v52 = 8;
LABEL_87:
                *(_BYTE *)(a1 + v56[1019]) |= v52;
                break;
              default:
                continue;
            }
          }
        }
LABEL_88:
        if (v55)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if (v60)
        {
          v53 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v57 & 1) == 0 || (*(_BYTE *)(a1 + 76) & 4) != 0)
        {
LABEL_61:
          v48 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v48 & 1) == 0)
          {
            v55 = 0;
LABEL_78:
            v56 = &OBJC_IVAR___GEOXPCReply__methodName;
            goto LABEL_79;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v40 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v39;

          }
          v41 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v41)
          {
            v55 = 0;
            v56 = &OBJC_IVAR___GEOXPCReply__methodName;
            goto LABEL_80;
          }
        }
LABEL_76:
        if (!(v58 & 1 | (v10 != 0)))
          goto LABEL_77;
        continue;
    }
  }
}

BOOL GEOStyleAttributeReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  void *v34;
  _BOOL8 v35;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_49;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          goto LABEL_49;
        if ((v10 >> 3) == 2)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEOStyleAttribute__key;
              goto LABEL_41;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEOStyleAttribute__key;
              goto LABEL_44;
            }
          }
          v26 = &OBJC_IVAR___GEOStyleAttribute__key;
LABEL_42:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_44:
          *(_DWORD *)(a1 + *v26) = v20;
          goto LABEL_45;
        }
        if (!*(_QWORD *)(a1 + 8))
        {
          v33 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v34 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v33;

        }
        if ((PBUnknownFieldAdd() & 1) == 0)
          goto LABEL_50;
LABEL_45:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_49;
      }
      v27 = 0;
      v28 = 0;
      v20 = 0;
      *(_BYTE *)(a1 + 24) |= 2u;
      while (1)
      {
        v29 = *v4;
        v30 = *(_QWORD *)&v3[v29];
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
          break;
        v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
        *(_QWORD *)&v3[v29] = v31;
        v20 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0)
        {
          v26 = &OBJC_IVAR___GEOStyleAttribute__value;
          goto LABEL_42;
        }
        v27 += 7;
        v25 = v28++ > 8;
        if (v25)
        {
          LODWORD(v20) = 0;
          v26 = &OBJC_IVAR___GEOStyleAttribute__value;
          goto LABEL_44;
        }
      }
      v26 = &OBJC_IVAR___GEOStyleAttribute__value;
LABEL_41:
      v3[*v6] = 1;
      goto LABEL_42;
    }
LABEL_49:
    v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_50:
    v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_1886B7A04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886B7DD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSourceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDSourceReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDSourceReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDSourceReadAllFrom_initialTag;
  Specified = GEOPDSourceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1886B7F58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSourceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  void *v48;
  int v49;
  char v50;
  char v51;
  int v52;
  int v53;
  char v54;
  void *v55;
  int v57;
  int *v58;
  char v59;
  char v60;
  char v61;
  BOOL v62;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 & ~(_BYTE)v7;
        v16 = v14 | v7;
        v59 = v15 | v8;
        v60 = v16 | v15 | v8;
        if (((v16 | v9) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v61 = (v17 == 0) | v16;
        v62 = v16;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_72;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_72:
      v57 = 1;
LABEL_73:
      v58 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
      goto LABEL_74;
    }
    v31 = v23 >> 3;
    v32 = v62;
    if ((v61 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 != 3)
      break;
    if (v32)
    {
      if ((*(_BYTE *)(a1 + 56) & 8) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_93;
        v51 = 16 * *(_BYTE *)(a1 + 56);
        goto LABEL_71;
      }
      PBReaderReadString();
      v44 = objc_claimAutoreleasedReturnValue();
      v45 = 32;
      goto LABEL_53;
    }
LABEL_60:
    v50 = PBReaderSkipValueWithTag();
    v19 = (int *)MEMORY[0x1E0D82BC8];
    if ((v50 & 1) == 0)
    {
      v57 = 0;
      goto LABEL_73;
    }
LABEL_61:
    if (!(v60 & 1 | (v10 != 0)))
      goto LABEL_72;
  }
  if ((_DWORD)v31 != 2)
  {
    if ((_DWORD)v31 == 1)
    {
      if ((v9 & 1) != 0)
      {
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 56) |= 1u;
        while (1)
        {
          v40 = *v18;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v41);
          *(_QWORD *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0)
            goto LABEL_64;
          v37 += 7;
          v28 = v38++ >= 9;
          if (v28)
          {
            LODWORD(v39) = 0;
            goto LABEL_66;
          }
        }
        *(_BYTE *)(v3 + *v19) = 1;
LABEL_64:
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v39) = 0;
LABEL_66:
        *(_DWORD *)(a1 + 52) = v39;
        goto LABEL_61;
      }
    }
    else if ((v59 & 1) != 0 && (*(_BYTE *)(a1 + 56) & 2) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v47 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v48 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v47;

      }
      v49 = PBUnknownFieldAdd();
      v19 = (int *)MEMORY[0x1E0D82BC8];
      if (!v49)
      {
        v57 = 0;
        v58 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
        goto LABEL_75;
      }
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (!v32)
    goto LABEL_60;
  if ((*(_BYTE *)(a1 + 56) & 4) == 0)
  {
    PBReaderReadString();
    v44 = objc_claimAutoreleasedReturnValue();
    v45 = 24;
LABEL_53:
    v46 = *(void **)(a1 + v45);
    *(_QWORD *)(a1 + v45) = v44;

    v19 = (int *)MEMORY[0x1E0D82BC8];
    --v10;
    goto LABEL_61;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v51 = 32 * *(_BYTE *)(a1 + 56);
LABEL_71:
    v10 += v51 >> 7;
    v19 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_61;
  }
LABEL_93:
  v57 = 0;
  v58 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_74:
  if ((v59 & 1) == 0)
    goto LABEL_76;
LABEL_75:
  *(_BYTE *)(a1 + v58[354]) |= 2u;
LABEL_76:
  if (v62 || (v57 & 1) == 0)
  {
    *(_BYTE *)(a1 + v58[354]) |= 4u;
    *(_BYTE *)(a1 + v58[354]) |= 8u;
    goto LABEL_86;
  }
  if (v17)
  {
    while (2)
    {
      while (1)
      {
        v53 = *v17++;
        v52 = v53;
        if (v53 == 2)
          break;
        if (v52 == 3)
        {
          v54 = 8;
          goto LABEL_85;
        }
        if (!v52)
          goto LABEL_86;
      }
      v54 = 4;
LABEL_85:
      *(_BYTE *)(a1 + v58[354]) |= v54;
      continue;
    }
  }
LABEL_86:
  if (v57)
    v3 = *(_BYTE *)(v3 + *v19) == 0;
  else
    v3 = 0;
  if (v62)
  {
    v55 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

BOOL geo::codec::readRenderableTransforms(geo::codec::Allocator *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v19[2];
  uint64_t v20;
  geo::codec::Allocator *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  geo::codec::Allocator *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30[4];
  __int16 v31;
  __int16 v32;
  _QWORD v33[2];

  v33[0] = a4;
  v33[1] = a5;
  v5 = a3[6];
  if ((unint64_t)(v5 + 4) > a3[7])
    return 0;
  v7 = *(_DWORD *)(a3[5] + v5);
  a3[6] = v5 + 4;
  if (!v7)
    return 1;
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  v21 = (geo::codec::Allocator *)geo::codec::Allocator::instance(a1);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v21);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = geo::codec::Allocator::instance(v25);
  v30[1] = v7;
  v10 = a3[6];
  v11 = a3[7];
  v12 = v10 + 4;
  if (v10 + 4 > v11)
    goto LABEL_10;
  v13 = a3[5];
  v30[2] = *(_DWORD *)(v13 + v10);
  a3[6] = v12;
  v14 = v10 + 8;
  if (v10 + 8 > v11)
    goto LABEL_10;
  v30[3] = *(_DWORD *)(v13 + v12);
  a3[6] = v14;
  v15 = v10 + 10;
  if (v10 + 10 > v11)
    goto LABEL_10;
  v31 = *(_WORD *)(v13 + v14);
  a3[6] = v15;
  v16 = v10 + 12;
  if (v16 <= v11
    && (v32 = *(_WORD *)(v13 + v15), a3[6] = v16, geo::codec::chapterReadVarUint32(a3, v30))
    && geo::codec::decodePointCloud(a3, v30, v19))
  {
    geo::codec::dequantizePointCloud((geo::codec::Allocator *)v19, (float *)v33, (uint64_t *)a1, a2, (uint64_t)v30);
    v17 = 1;
  }
  else
  {
LABEL_10:
    v17 = 0;
  }
  if (v26)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 40))(v29, v26, v28 - v26);
  if (v22)
    (*(void (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v25 + 40))(v25, v22, v24 - v22);
  if (v19[0])
    (*(void (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v21 + 40))(v21, v19[0], v20 - v19[0]);
  return v17 != 0;
}

void sub_1886B8A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  GeoCodecsPointCloud::~GeoCodecsPointCloud((GeoCodecsPointCloud *)va);
  _Unwind_Resume(a1);
}

_QWORD *geo::codec::dequantizePointCloud(geo::codec::Allocator *a1, float *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  geo::codec::Allocator *v8;
  unsigned int v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  __float2 v27;
  __float2 v28;
  __float2 v29;
  __int16 v30;
  float v31;
  float v32;
  unint64_t v33;
  uint8x8_t v34;
  void **v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  _BOOL8 v50;
  unint64_t v51;
  unint64_t v52;
  size_t prime;
  void *v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  size_t v58;
  size_t v59;
  size_t v60;
  _QWORD *i;
  size_t v62;
  uint64_t v63;
  unint64_t v64;
  uint8x8_t v65;
  uint64_t v66;
  _QWORD *v67;
  float v68;
  void *v69;
  unint64_t v70;
  uint64_t v71;
  size_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float *v82;
  unint64_t v83;
  float *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _DWORD *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _DWORD *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  __int128 *v123;
  uint64_t v124;
  __int128 v125;
  int v126;
  uint64_t v127;
  _QWORD *v128;
  geo::codec::Allocator *v129;
  int v130;
  int v131;
  int v132;
  int v135;
  _QWORD *v136;
  float v137;
  float v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  float v145;
  int v146;
  float v147;
  unsigned int v148;
  _QWORD *v149;
  _QWORD *v150;
  char *v151;
  _QWORD *v152;
  _DWORD *v153[2];
  char v154;

  v8 = a1;
  v9 = *(_DWORD *)(a5 + 4);
  v149 = 0;
  v150 = 0;
  v151 = 0;
  result = (_QWORD *)geo::codec::Allocator::instance(a1);
  v152 = result;
  if (!v9)
  {
    v128 = 0;
    v11 = *(_QWORD *)v8;
    if (*((_QWORD *)v8 + 1) == *(_QWORD *)v8)
      goto LABEL_151;
LABEL_5:
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v132 = 3 * v9;
    v130 = 7 * v9;
    v131 = 6 * v9;
    v136 = a3 + 2;
    v129 = v8;
    while (1)
    {
      v16 = (v14 + v130);
      v17 = *((_QWORD *)v8 + 4);
      if (v16 >= (*((_QWORD *)v8 + 5) - v17) >> 2)
        v135 = 0;
      else
        v135 = *(_DWORD *)(v17 + 4 * v16);
      v142 = *(_DWORD *)(v11 + 4 * v12);
      v18 = 4 * (v13 + 1);
      v141 = *(_DWORD *)(v11 + v18);
      v19 = 4 * (v13 + 2);
      v140 = *(_DWORD *)(v11 + v19);
      v146 = *(_DWORD *)(v17 + 4 * (v13 + v132 + 1));
      v143 = *(_DWORD *)(v17 + 4 * (v13 + v132));
      v144 = *(_DWORD *)(v17 + 4 * (v13 + v132 + 2));
      v20 = *(unsigned int *)(v17 + 4 * (v14 + v131));
      v21 = a2[1];
      v139 = *((__int16 *)a2 + 1);
      v22 = *(__int16 *)a2;
      v137 = a2[3];
      v138 = a2[2];
      v23 = 1.0 / (float)(unsigned __int16)((1 << *(_WORD *)(a5 + 16)) - 1);
      v24 = (float)((float)*(int *)(v17 + 4 * v13) * v23) * 6.28318531 + -3.14159265;
      v25 = (float)((float)*(int *)(v17 + v18) * v23) * 6.28318531 + -3.14159265;
      v26 = (float)((float)*(int *)(v17 + v19) * v23) * 6.28318531 + -3.14159265;
      v27 = __sincosf_stret(v24 * 0.5);
      v28 = __sincosf_stret(v25 * 0.5);
      v29 = __sincosf_stret(v26 * 0.5);
      v30 = *(_WORD *)(a5 + 18);
      v31 = *(float *)(a5 + 8);
      v32 = *(float *)(a5 + 12);
      v33 = a3[1];
      if (v33)
      {
        v34 = (uint8x8_t)vcnt_s8((int8x8_t)v33);
        v34.i16[0] = vaddlv_u8(v34);
        if (v34.u32[0] > 1uLL)
        {
          v5 = v20;
          if (v33 <= v20)
            v5 = v20 % v33;
        }
        else
        {
          v5 = ((_DWORD)v33 - 1) & v20;
        }
        v35 = *(void ***)(*a3 + 8 * v5);
        if (v35)
        {
          v36 = *v35;
          if (*v35)
          {
            if (v34.u32[0] < 2uLL)
            {
              while (1)
              {
                v38 = *((_QWORD *)v36 + 1);
                if (v38 == v20)
                {
                  if (*((_DWORD *)v36 + 4) == (_DWORD)v20)
                    goto LABEL_69;
                }
                else if ((v38 & (v33 - 1)) != v5)
                {
                  goto LABEL_31;
                }
                v36 = *(void **)v36;
                if (!v36)
                  goto LABEL_31;
              }
            }
            do
            {
              v37 = *((_QWORD *)v36 + 1);
              if (v37 == v20)
              {
                if (*((_DWORD *)v36 + 4) == (_DWORD)v20)
                {
LABEL_69:
                  v68 = *(float *)(a5 + 12);
                  v44 = v144;
                  v43 = v146;
                  v46 = v142;
                  v45 = v143;
                  v48 = v140;
                  v47 = v141;
                  v49 = v139;
                  goto LABEL_105;
                }
              }
              else
              {
                if (v37 >= v33)
                  v37 %= v33;
                if (v37 != v5)
                  break;
              }
              v36 = *(void **)v36;
            }
            while (v36);
          }
        }
      }
LABEL_31:
      v36 = operator new(0x38uLL);
      v153[0] = v36;
      v153[1] = a3 + 2;
      *(_QWORD *)v36 = 0;
      *((_QWORD *)v36 + 1) = v20;
      *((_DWORD *)v36 + 4) = v20;
      *((_QWORD *)v36 + 4) = 0;
      *((_QWORD *)v36 + 5) = 0;
      *((_QWORD *)v36 + 3) = 0;
      *((_QWORD *)v36 + 6) = geo::codec::Allocator::instance((geo::codec::Allocator *)v36);
      v154 = 1;
      v39 = (float)(unint64_t)(a3[3] + 1);
      v40 = *((float *)a3 + 8);
      if (!v33 || (float)(v40 * (float)v33) < v39)
        break;
      v41 = *a3;
      v42 = *(_QWORD **)(*a3 + 8 * v5);
      if (v42)
        goto LABEL_34;
LABEL_84:
      *(_QWORD *)v36 = *v136;
      *v136 = v36;
      *(_QWORD *)(v41 + 8 * v5) = v136;
      v44 = v144;
      v43 = v146;
      v46 = v142;
      v45 = v143;
      v48 = v140;
      v47 = v141;
      v49 = v139;
      if (*(_QWORD *)v36)
      {
        v70 = *(_QWORD *)(*(_QWORD *)v36 + 8);
        if ((v33 & (v33 - 1)) != 0)
        {
          if (v70 >= v33)
            v70 %= v33;
        }
        else
        {
          v70 &= v33 - 1;
        }
        v42 = (_QWORD *)(*a3 + 8 * v70);
        goto LABEL_103;
      }
LABEL_104:
      v68 = v32;
      ++a3[3];
LABEL_105:
      v73 = v21 * (float)v46;
      v74 = v21 * (float)v47;
      v75 = (float)((float)v22 + (float)((float)(v138 * (float)(v49 - v22)) * (float)v48)) / v137;
      v76 = (float)((float)(v28.__cosval * v27.__cosval) * v29.__cosval)
          + (float)((float)(v28.__sinval * v27.__sinval) * v29.__sinval);
      v77 = -(float)((float)((float)(v28.__sinval * v27.__cosval) * v29.__sinval)
                   - (float)((float)(v28.__cosval * v27.__sinval) * v29.__cosval));
      v78 = (float)(v68 - v31) / (float)~(-1 << v30);
      v79 = v31 + (float)(v78 * (float)v45);
      v80 = v31 + (float)(v78 * (float)v43);
      v81 = v31 + (float)(v78 * (float)v44);
      v82 = (float *)*((_QWORD *)v36 + 4);
      v83 = *((_QWORD *)v36 + 5);
      if ((unint64_t)v82 >= v83)
      {
        v85 = *((_QWORD *)v36 + 3);
        v86 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v82 - v85) >> 3);
        v87 = v86 + 1;
        if (v86 + 1 > 0x666666666666666)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v88 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v83 - v85) >> 3);
        if (2 * v88 > v87)
          v87 = 2 * v88;
        if (v88 >= 0x333333333333333)
          v89 = 0x666666666666666;
        else
          v89 = v87;
        if (v89)
        {
          v145 = v81;
          v147 = v80;
          v90 = v75;
          v91 = v74;
          v92 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v36 + 6) + 16))(*((_QWORD *)v36 + 6), 40 * v89, 4);
          v93 = v92 + 40 * v86;
          v94 = v92 + 40 * v89;
          if (v92)
          {
            *(float *)v93 = v73;
            *(float *)(v93 + 4) = v91;
            *(float *)(v93 + 8) = v90;
            *(float *)(v93 + 12) = -(float)((float)((float)(v28.__sinval * v27.__sinval) * v29.__cosval)
                                          - (float)((float)(v28.__cosval * v27.__cosval) * v29.__sinval));
            *(float *)(v93 + 16) = (float)((float)(v28.__sinval * v27.__cosval) * v29.__cosval)
                                 + (float)((float)(v28.__cosval * v27.__sinval) * v29.__sinval);
            *(float *)(v93 + 20) = v77;
            *(float *)(v93 + 24) = v76;
            v95 = v92 + 40 * v86;
            *(float *)(v95 + 28) = v79;
            *(float *)(v95 + 32) = v147;
            *(float *)(v95 + 36) = v145;
          }
          v97 = *((_QWORD *)v36 + 3);
          v96 = *((_QWORD *)v36 + 4);
          v98 = v92 + 40 * v86;
          if (v96 == v97)
          {
LABEL_124:
            v84 = (float *)(v93 + 40);
            *((_QWORD *)v36 + 3) = v98;
            *((_QWORD *)v36 + 4) = v93 + 40;
            v103 = *((_QWORD *)v36 + 5);
            *((_QWORD *)v36 + 5) = v94;
            if (!v96)
              goto LABEL_126;
            goto LABEL_125;
          }
        }
        else
        {
          v94 = 0;
          v93 = 40 * v86;
          v97 = *((_QWORD *)v36 + 3);
          v96 = *((_QWORD *)v36 + 4);
          v98 = 40 * v86;
          if (v96 == v97)
            goto LABEL_124;
        }
        do
        {
          v99 = *(_QWORD *)(v96 - 40);
          v96 -= 40;
          v100 = *(_DWORD *)(v96 + 8);
          *(_QWORD *)(v98 - 40) = v99;
          v98 -= 40;
          *(_DWORD *)(v98 + 8) = v100;
          v101 = *(_QWORD *)(v96 + 12);
          *(_DWORD *)(v98 + 20) = *(_DWORD *)(v96 + 20);
          *(_QWORD *)(v98 + 12) = v101;
          *(_DWORD *)(v98 + 24) = *(_DWORD *)(v96 + 24);
          v102 = *(_QWORD *)(v96 + 28);
          *(_DWORD *)(v98 + 36) = *(_DWORD *)(v96 + 36);
          *(_QWORD *)(v98 + 28) = v102;
        }
        while (v96 != v97);
        v96 = *((_QWORD *)v36 + 3);
        v84 = (float *)(v93 + 40);
        *((_QWORD *)v36 + 3) = v98;
        *((_QWORD *)v36 + 4) = v93 + 40;
        v103 = *((_QWORD *)v36 + 5);
        *((_QWORD *)v36 + 5) = v94;
        if (!v96)
          goto LABEL_126;
LABEL_125:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v36 + 6) + 40))(*((_QWORD *)v36 + 6), v96, v103 - v96);
        goto LABEL_126;
      }
      if (v82)
      {
        *v82 = v73;
        v82[1] = v74;
        v82[2] = v75;
        v82[3] = -(float)((float)((float)(v28.__sinval * v27.__sinval) * v29.__cosval)
                        - (float)((float)(v28.__cosval * v27.__cosval) * v29.__sinval));
        v82[4] = (float)((float)(v28.__sinval * v27.__cosval) * v29.__cosval)
               + (float)((float)(v28.__cosval * v27.__sinval) * v29.__sinval);
        v82[5] = v77;
        v82[6] = v76;
        v82[7] = v79;
        v82[8] = v80;
        v82[9] = v81;
      }
      v84 = v82 + 10;
LABEL_126:
      *((_QWORD *)v36 + 4) = v84;
      v148 = v20;
      v153[0] = &v148;
      result = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a4, &v148, (uint64_t)&std::piecewise_construct, v153);
      v104 = result;
      v105 = (_DWORD *)result[4];
      v106 = result[5];
      if ((unint64_t)v105 >= v106)
      {
        v107 = result[3];
        v108 = ((uint64_t)v105 - v107) >> 2;
        v109 = v108 + 1;
        if ((unint64_t)(v108 + 1) >> 62)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v110 = v106 - v107;
        if (v110 >> 1 > v109)
          v109 = v110 >> 1;
        if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL)
          v111 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v111 = v109;
        if (v111)
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)result[6] + 16))(result[6], 4 * v111, 4);
          v112 = (_DWORD *)result + v108;
          v113 = (char *)result + 4 * v111;
          if (result)
            *v112 = v135;
          v8 = v129;
          v114 = v104[3];
          v115 = v104[4];
          v116 = (uint64_t)result + 4 * v108;
          v117 = v115 - v114;
          if (v115 == v114)
            goto LABEL_149;
        }
        else
        {
          v113 = 0;
          v112 = (_DWORD *)(4 * v108);
          v8 = v129;
          v114 = result[3];
          v115 = result[4];
          v116 = 4 * v108;
          v117 = v115 - v114;
          if (v115 == v114)
            goto LABEL_149;
        }
        v118 = v117 - 4;
        if (v118 < 0x1C)
        {
          v116 = (uint64_t)v112;
        }
        else
        {
          v116 = (uint64_t)v112;
          if ((unint64_t)(v115 - (_QWORD)v112) >= 0x20)
          {
            v119 = (v118 >> 2) + 1;
            v120 = 4 * (v119 & 0x7FFFFFFFFFFFFFF8);
            v121 = v115 - v120;
            v116 = (uint64_t)&v112[v120 / 0xFFFFFFFFFFFFFFFCLL];
            v122 = v112 - 4;
            v123 = (__int128 *)(v115 - 16);
            v124 = v119 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v125 = *v123;
              *(v122 - 1) = *(v123 - 1);
              *v122 = v125;
              v122 -= 2;
              v123 -= 2;
              v124 -= 8;
            }
            while (v124);
            v115 = v121;
            if (v119 == (v119 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_149:
              v15 = v112 + 1;
              v104[3] = v116;
              v104[4] = v112 + 1;
              v127 = v104[5];
              v104[5] = v113;
              if (v114)
                result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v104[6] + 40))(v104[6], v114, v127 - v114);
              goto LABEL_7;
            }
          }
        }
        do
        {
          v126 = *(_DWORD *)(v115 - 4);
          v115 -= 4;
          *(_DWORD *)(v116 - 4) = v126;
          v116 -= 4;
        }
        while (v115 != v114);
        goto LABEL_149;
      }
      v8 = v129;
      if (v105)
        *v105 = v135;
      v15 = v105 + 1;
LABEL_7:
      ++v14;
      v104[4] = v15;
      v11 = *(_QWORD *)v8;
      v13 += 3;
      v12 = v13;
      if (v13 >= (unint64_t)((uint64_t)(*((_QWORD *)v8 + 1) - *(_QWORD *)v8) >> 2))
        goto LABEL_151;
    }
    v50 = (v33 & (v33 - 1)) != 0;
    if (v33 < 3)
      v50 = 1;
    v51 = v50 | (2 * v33);
    v52 = vcvtps_u32_f32(v39 / v40);
    if (v51 <= v52)
      prime = v52;
    else
      prime = v51;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v33 = a3[1];
    if (prime <= v33)
    {
      if (prime >= v33)
        goto LABEL_82;
      v64 = vcvtps_u32_f32((float)(unint64_t)a3[3] / *((float *)a3 + 8));
      if (v33 < 3 || (v65 = (uint8x8_t)vcnt_s8((int8x8_t)v33), v65.i16[0] = vaddlv_u8(v65), v65.u32[0] > 1uLL))
      {
        v64 = std::__next_prime(v64);
      }
      else
      {
        v66 = 1 << -(char)__clz(v64 - 1);
        if (v64 >= 2)
          v64 = v66;
      }
      if (prime <= v64)
        prime = v64;
      if (prime >= v33)
      {
        v33 = a3[1];
        if ((v33 & (v33 - 1)) == 0)
          goto LABEL_83;
LABEL_95:
        if (v33 <= v20)
        {
          v5 = v20 % v33;
          v41 = *a3;
          v42 = *(_QWORD **)(*a3 + 8 * (v20 % v33));
          if (!v42)
            goto LABEL_84;
        }
        else
        {
          v5 = v20;
          v41 = *a3;
          v42 = *(_QWORD **)(*a3 + 8 * v20);
          if (!v42)
            goto LABEL_84;
        }
LABEL_34:
        *(_QWORD *)v36 = *v42;
        v44 = v144;
        v43 = v146;
        v46 = v142;
        v45 = v143;
        v48 = v140;
        v47 = v141;
        v49 = v139;
LABEL_103:
        *v42 = v36;
        goto LABEL_104;
      }
      if (!prime)
      {
        v69 = (void *)*a3;
        *a3 = 0;
        if (v69)
          operator delete(v69);
        v33 = 0;
        a3[1] = 0;
        goto LABEL_83;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v54 = operator new(8 * prime);
    v55 = (void *)*a3;
    *a3 = (uint64_t)v54;
    if (v55)
      operator delete(v55);
    v56 = 0;
    a3[1] = prime;
    do
      *(_QWORD *)(*a3 + 8 * v56++) = 0;
    while (prime != v56);
    v57 = (_QWORD *)*v136;
    if (!*v136)
    {
LABEL_94:
      v33 = prime;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_95;
LABEL_83:
      v5 = ((_DWORD)v33 - 1) & v20;
      v41 = *a3;
      v42 = *(_QWORD **)(*a3 + 8 * v5);
      if (!v42)
        goto LABEL_84;
      goto LABEL_34;
    }
    v58 = v57[1];
    v59 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v60 = v58 & v59;
      *(_QWORD *)(*a3 + 8 * v60) = v136;
      for (i = (_QWORD *)*v57; *v57; i = (_QWORD *)*v57)
      {
        v62 = i[1] & v59;
        if (v62 == v60)
        {
          v57 = i;
        }
        else if (*(_QWORD *)(*a3 + 8 * v62))
        {
          *v57 = *i;
          v63 = 8 * v62;
          *i = **(_QWORD **)(*a3 + v63);
          **(_QWORD **)(*a3 + v63) = i;
        }
        else
        {
          *(_QWORD *)(*a3 + 8 * v62) = v57;
          v57 = i;
          v60 = v62;
        }
      }
      goto LABEL_94;
    }
    if (v58 < prime)
    {
      *(_QWORD *)(*a3 + 8 * v58) = v136;
      v67 = (_QWORD *)*v57;
      if (*v57)
        goto LABEL_89;
      goto LABEL_81;
    }
    v58 %= prime;
    *(_QWORD *)(*a3 + 8 * v58) = v136;
    v67 = (_QWORD *)*v57;
    if (!*v57)
    {
LABEL_81:
      v33 = prime;
LABEL_82:
      if ((v33 & (v33 - 1)) != 0)
        goto LABEL_95;
      goto LABEL_83;
    }
    while (1)
    {
LABEL_89:
      v72 = v67[1];
      if (v72 >= prime)
        v72 %= prime;
      if (v72 == v58)
        goto LABEL_88;
      if (*(_QWORD *)(*a3 + 8 * v72))
      {
        *v57 = *v67;
        v71 = 8 * v72;
        *v67 = **(_QWORD **)(*a3 + v71);
        **(_QWORD **)(*a3 + v71) = v67;
        v67 = v57;
LABEL_88:
        v57 = v67;
        v67 = (_QWORD *)*v67;
        if (!v67)
          goto LABEL_94;
      }
      else
      {
        *(_QWORD *)(*a3 + 8 * v72) = v57;
        v57 = v67;
        v67 = (_QWORD *)*v67;
        v58 = v72;
        if (!v67)
          goto LABEL_94;
      }
    }
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*result + 16))(result, 44 * v9, 4);
  v149 = result;
  v150 = result;
  v128 = result;
  v151 = (char *)result + 44 * v9;
  v11 = *(_QWORD *)v8;
  if (*((_QWORD *)v8 + 1) != *(_QWORD *)v8)
    goto LABEL_5;
LABEL_151:
  if (v128)
  {
    v150 = v128;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, int64_t))(*v152 + 40))(v152, v128, v151 - (char *)v128);
  }
  return result;
}

void sub_1886B95F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::vector<std::pair<int,geo::Transform<float>>,geo::StdAllocator<std::pair<int,geo::Transform<float>>,geo::codec::Allocator>>::~vector[abi:ne180100](&a26);
  _Unwind_Resume(a1);
}

void sub_1886B960C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<geo::Transform<float>,geo::StdAllocator<geo::Transform<float>,geo::codec::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<geo::Transform<float>,geo::StdAllocator<geo::Transform<float>,geo::codec::Allocator>>>,void *>>>>::~unique_ptr[abi:ne180100](&a31);
  std::vector<std::pair<int,geo::Transform<float>>,geo::StdAllocator<std::pair<int,geo::Transform<float>>,geo::codec::Allocator>>::~vector[abi:ne180100](&a26);
  _Unwind_Resume(a1);
}

void sub_1886B9634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::vector<std::pair<int,geo::Transform<float>>,geo::StdAllocator<std::pair<int,geo::Transform<float>>,geo::codec::Allocator>>::~vector[abi:ne180100](&a26);
  _Unwind_Resume(a1);
}

void sub_1886B9648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::vector<std::pair<int,geo::Transform<float>>,geo::StdAllocator<std::pair<int,geo::Transform<float>>,geo::codec::Allocator>>::~vector[abi:ne180100](&a26);
  _Unwind_Resume(a1);
}

void sub_1886B9660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::vector<std::pair<int,geo::Transform<float>>,geo::StdAllocator<std::pair<int,geo::Transform<float>>,geo::codec::Allocator>>::~vector[abi:ne180100](&a26);
  _Unwind_Resume(a1);
}

void sub_1886B9674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::vector<std::pair<int,geo::Transform<float>>,geo::StdAllocator<std::pair<int,geo::Transform<float>>,geo::codec::Allocator>>::~vector[abi:ne180100](&a26);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  int8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x38uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v11[6] = geo::codec::Allocator::instance((geo::codec::Allocator *)v11);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v23 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v23)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v23)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v23 < 3uLL || (v25 = (uint8x8_t)vcnt_s8(v23), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < *(_QWORD *)&v23)
LABEL_37:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
      if (v18)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    v27 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1886B99B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::decodePointCloud(_QWORD *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  geo::codec::Allocator *v26;
  geo::codec::Allocator *v27;
  uint64_t v28;
  unint64_t v29;
  geo::codec::Allocator *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  int v44;
  size_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  _QWORD *v53;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  geo::codec::Allocator *v59;
  char *v60;
  geo::codec::Allocator *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74[2];

  if (a1[6] + (unint64_t)*a2 > a1[7])
    return 0;
  v6 = operator new();
  v7 = operator new();
  *(_QWORD *)(v7 + 240) = 0;
  *(_OWORD *)(v7 + 208) = 0u;
  *(_OWORD *)(v7 + 224) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_DWORD *)(v7 + 76) = 1065353216;
  *(_DWORD *)(v7 + 208) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_DWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  v74[0] = (uint64_t *)v6;
  v8 = a1[5] + a1[6];
  v9 = *a2;
  *(_QWORD *)v6 = v7;
  *(_QWORD *)(v6 + 8) = v8;
  *(_QWORD *)(v6 + 16) = v9;
  *(_QWORD *)(v6 + 24) = v9;
  v10 = mgcl::gpcc::Decoder::parseMetadata(v74);
  v11 = v74[0];
  if (v10)
  {
    v74[0] = 0;
    if (v11)
    {
      v12 = (void *)v11[4];
      if (v12)
      {
        v11[5] = (uint64_t)v12;
        operator delete(v12);
      }
      v13 = (_QWORD *)*v11;
      *v11 = 0;
      if (v13)
        std::default_delete<gcl::gpcc::Decoder::Impl>::operator()[abi:ne180100]((uint64_t)v11, v13);
      MEMORY[0x18D76437C](v11, 0x1030C40A5E9B400);
    }
    return 0;
  }
  v14 = *((int *)v74[0] + 14);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v71, 3 * v14);
  v68 = v71;
  v69 = (*((_QWORD *)&v71 + 1) - (_QWORD)v71) >> 2;
  v70 = 3;
  v15 = v74[0][5] - v74[0][4];
  v16 = (int)(v15 >> 4);
  LODWORD(v62) = 0;
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v65, 4 * v16, &v62);
  v17 = v65;
  if (*((_QWORD *)&v65 + 1) == (_QWORD)v65)
  {
    v20 = 0;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = v74[0][4];
    v22 = (v74[0][5] - v21) >> 4;
    v23 = (uint64_t)(*((_QWORD *)&v65 + 1) - v65) >> 2;
    do
    {
      if (v22 <= (v18 & 0x7FFFFFFFu))
        v24 = 0;
      else
        v24 = (_DWORD *)(v21 + 16 * (v18 & 0x7FFFFFFF));
      v25 = (_DWORD *)(v17 + 4 * v19);
      *v25 = *v24;
      v25[1] = v24[1];
      v25[2] = v24[2];
      v25[3] = v24[3];
      v20 += (int)v24[2] * (uint64_t)(int)v14;
      v19 += 4;
      ++v18;
    }
    while (v19 < v23);
  }
  v26 = std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v62, v20);
  v59 = 0;
  v60 = 0;
  v27 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v26);
  v28 = v15 << 28;
  v61 = v27;
  v29 = (unint64_t)(v15 << 28) >> 32;
  if (v29)
  {
    if (v28 < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v27 = (geo::codec::Allocator *)(*(uint64_t (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, 16 * v16, 8);
    v30 = v27;
    v31 = 0;
    v59 = v27;
    v60 = (char *)v27 + 16 * v16;
    do
    {
      v32 = (_QWORD *)((char *)v27 + v31);
      if ((geo::codec::Allocator *)((char *)v27 + v31))
      {
        *v32 = 0;
        v32[1] = 0;
      }
      v31 += 16;
    }
    while (16 * v16 != v31);
  }
  else
  {
    v30 = 0;
  }
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v33 = geo::codec::Allocator::instance(v27);
  v58 = v33;
  if (!v29)
  {
    v34 = 0;
    v35 = 0;
    if ((v15 & 0xFFFFFFFF0) == 0)
      goto LABEL_36;
    goto LABEL_33;
  }
  if (v28 < 0)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v36 = 8 * v16;
  v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, 8 * v16, 8);
  v35 = v37;
  v38 = 0;
  v34 = v37 + 8 * v16;
  v55 = v37;
  v57 = v34;
  do
  {
    if (v37 + v38)
      *(_QWORD *)(v37 + v38) = 0;
    v38 += 8;
  }
  while (v36 != v38);
  v56 = v37 + v36;
  if ((v15 & 0xFFFFFFFF0) != 0)
  {
LABEL_33:
    v39 = 0;
    v40 = 0;
    v41 = 0;
    do
    {
      v42 = *(_DWORD *)(v65 + v39 + 8);
      v43 = (char *)v30 + v39;
      *(_QWORD *)v43 = v62 + 4 * v41;
      *((_DWORD *)v43 + 2) = v42 * v14;
      *((_DWORD *)v43 + 3) = v42;
      v30 = v59;
      v35 = v55;
      *(_QWORD *)(v55 + 8 * v40) = (char *)v59 + v39;
      v41 += v42 * (uint64_t)(int)v14;
      ++v40;
      v39 += 16;
    }
    while (v16 != v40);
    v34 = v56;
  }
LABEL_36:
  v44 = mgcl::gpcc::Decoder::decode(v74, (uint64_t)&v68, v35, (v34 - v35) >> 3);
  if (v44)
  {
    v45 = v55;
    if (!v55)
      goto LABEL_51;
LABEL_50:
    (*(void (**)(uint64_t, size_t, size_t))(*(_QWORD *)v58 + 40))(v58, v45, v57 - v45);
    goto LABEL_51;
  }
  v46 = 3 * *((int *)v74[0] + 14);
  v47 = (uint64_t)(*((_QWORD *)&v71 + 1) - v71) >> 2;
  if (v46 <= v47)
  {
    if (v46 < v47)
      *((_QWORD *)&v71 + 1) = v71 + 12 * *((int *)v74[0] + 14);
  }
  else
  {
    std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::__append((uint64_t)&v71, v46 - v47);
  }
  v48 = *a3;
  if (*a3)
  {
    a3[1] = v48;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3[3] + 40))(a3[3], v48, a3[2] - v48);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  *(_OWORD *)a3 = v71;
  a3[2] = v72;
  v72 = 0;
  v71 = 0uLL;
  v49 = a3[4];
  if (v49)
  {
    a3[5] = v49;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3[7] + 40))(a3[7], v49, a3[6] - v49);
    a3[4] = 0;
    a3[5] = 0;
    a3[6] = 0;
  }
  v50 = a3[8];
  *((_OWORD *)a3 + 2) = v62;
  a3[6] = v63;
  v63 = 0;
  v62 = 0uLL;
  if (v50)
  {
    a3[9] = v50;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3[11] + 40))(a3[11], v50, a3[10] - v50);
    a3[8] = 0;
    a3[9] = 0;
    a3[10] = 0;
  }
  *((_OWORD *)a3 + 4) = v65;
  a3[10] = v66;
  v66 = 0;
  v65 = 0uLL;
  v45 = v55;
  if (v55)
    goto LABEL_50;
LABEL_51:
  if (v59)
    (*(void (**)(geo::codec::Allocator *, geo::codec::Allocator *, int64_t))(*(_QWORD *)v61 + 40))(v61, v59, v60 - (char *)v59);
  if ((_QWORD)v62)
  {
    *((_QWORD *)&v62 + 1) = v62;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v64 + 40))(v64, v62, v63 - v62);
  }
  if ((_QWORD)v65)
  {
    *((_QWORD *)&v65 + 1) = v65;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v67 + 40))(v67, v65, v66 - v65);
  }
  if ((_QWORD)v71)
  {
    *((_QWORD *)&v71 + 1) = v71;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v73 + 40))(v73, v71, v72 - v71);
  }
  v51 = v74[0];
  v74[0] = 0;
  if (v51)
  {
    v52 = (void *)v51[4];
    if (v52)
    {
      v51[5] = (uint64_t)v52;
      operator delete(v52);
    }
    v53 = (_QWORD *)*v51;
    *v51 = 0;
    if (v53)
      std::default_delete<gcl::gpcc::Decoder::Impl>::operator()[abi:ne180100]((uint64_t)v51, v53);
    MEMORY[0x18D76437C](v51, 0x1030C40A5E9B400);
  }
  if (v44)
    return 0;
  a1[6] += *a2;
  return 1;
}

void sub_1886B9F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  std::vector<mgcl::gpcc::IntArrayBuffer,geo::StdAllocator<mgcl::gpcc::IntArrayBuffer,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va1);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va2);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v5 - 128));
  mgcl::gpcc::Decoder::~Decoder((mgcl::gpcc::Decoder *)(v5 - 96));
  _Unwind_Resume(a1);
}

void sub_1886BA024(_Unwind_Exception *a1)
{
  uint64_t v1;

  mgcl::gpcc::Decoder::~Decoder((mgcl::gpcc::Decoder *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_1886BA038(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x1030C40A5E9B400);
  _Unwind_Resume(a1);
}

uint64_t mgcl::gpcc::Decoder::decode(uint64_t **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t (***v26)();
  uint64_t v27;
  uint64_t (***v28)();
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  const char *i;
  unsigned int v36;
  unint64_t v37;
  _DWORD *v38;
  _OWORD *v39;
  int v40;
  int j;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v56;
  void *__p;
  char *v58;
  char *v59;
  _QWORD v60[2];
  int v61;
  _BYTE v62[12];
  uint64_t v63;
  int v64;
  _BYTE v65[24];
  _BYTE *v66;
  _BYTE v67[24];
  _BYTE *v68;
  _QWORD v69[3];
  _QWORD *v70;
  _QWORD v71[3];
  _QWORD *v72;
  _QWORD v73[3];
  _QWORD *v74;
  _BYTE v75[24];
  _BYTE *v76;
  uint64_t (**v77)();
  void **p_p;
  uint64_t *v79;
  uint64_t (***v80)();
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if (!(*a1)[1] || !v4[3])
    return 5;
  *(_QWORD *)&v62[4] = 0;
  v63 = 0;
  v7 = *(_DWORD *)(a2 + 12);
  v8 = *(int *)(a2 + 8);
  v60[0] = *(_QWORD *)a2;
  v60[1] = v8;
  v61 = 4;
  *(_QWORD *)v62 = (4 * v7);
  __p = 0;
  v58 = 0;
  v59 = 0;
  if (a3 && a4)
  {
    if (a4 >> 59)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v10 = 32 * a4;
    __p = operator new(32 * a4);
    v59 = (char *)__p + 32 * a4;
    bzero(__p, 32 * a4);
    v58 = (char *)__p + v10;
    v11 = *v4;
    if (*v4)
    {
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v13 = *(void **)(v11 + 8);
        if (v12 >= 0x40)
          bzero(v13, 8 * (v12 >> 6));
        if ((v12 & 0x3F) != 0)
          *((_QWORD *)v13 + (v12 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v12 & 0x3F));
      }
    }
    v14 = 0;
    v15 = 0;
    do
    {
      v20 = *(uint64_t **)(a3 + 8 * v15);
      if (v20)
      {
        if ((v15 & 0x80000000) == 0)
        {
          v21 = **a1;
          if (v21)
          {
            if (*(_QWORD *)(v21 + 16) > (unint64_t)v15)
              *(_QWORD *)(*(_QWORD *)(v21 + 8) + (((unint64_t)v15 >> 3) & 0x1FFFFFF8)) |= 1 << v15;
          }
        }
        v16 = *v20;
        v17 = *((_DWORD *)v20 + 2);
        v18 = 4 * *((_DWORD *)v20 + 3);
        v19 = (char *)__p + v14;
        *(_QWORD *)v19 = v16;
        *((_QWORD *)v19 + 1) = v17;
        *((_DWORD *)v19 + 4) = 4;
        *((_DWORD *)v19 + 5) = v18;
        v19[24] = 0;
      }
      ++v15;
      v14 += 32;
    }
    while (a4 != v15);
  }
  else
  {
    v23 = *v4;
    if (*v4)
    {
      v24 = *(_QWORD *)(v23 + 16);
      if (v24)
      {
        v25 = *(void **)(v23 + 8);
        if (v24 >= 0x40)
          bzero(v25, 8 * (v24 >> 6));
        if ((v24 & 0x3F) != 0)
          *((_QWORD *)v25 + (v24 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v24 & 0x3F));
      }
    }
  }
  v66 = 0;
  v68 = 0;
  v70 = 0;
  v72 = 0;
  v74 = 0;
  v76 = 0;
  v77 = &off_1E1BFAFF0;
  p_p = (void **)v60;
  v79 = &v63;
  v80 = &v77;
  std::__function::__value_func<gcl::gpcc::ArrayBuffer ()(unsigned long)>::swap[abi:ne180100](&v77, v69);
  v26 = v80;
  if (v80 == &v77)
  {
    v27 = 4;
    v26 = &v77;
  }
  else
  {
    if (!v80)
      goto LABEL_32;
    v27 = 5;
  }
  (*v26)[v27]();
LABEL_32:
  v77 = &off_1E1BFB048;
  p_p = &__p;
  v79 = &v63;
  v80 = &v77;
  std::__function::__value_func<gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::swap[abi:ne180100](&v77, v71);
  v28 = v80;
  if (v80 == &v77)
  {
    v29 = 4;
    v28 = &v77;
  }
  else
  {
    if (!v80)
      goto LABEL_37;
    v29 = 5;
  }
  (*v28)[v29]();
LABEL_37:
  v77 = &off_1E1BFB0A0;
  p_p = (void **)&v63;
  v80 = &v77;
  std::__function::__value_func<void ()(int,unsigned long)>::swap[abi:ne180100](&v77, v73);
  v30 = v80;
  if (v80 == &v77)
  {
    v31 = 4;
    v30 = &v77;
  }
  else
  {
    if (!v80)
      goto LABEL_42;
    v31 = 5;
  }
  (*v30)[v31]();
LABEL_42:
  v32 = *a1;
  v33 = (*a1)[3];
  v56 = 0;
  v34 = *v32;
  for (i = (const char *)v32[1]; *v32; v34 = *v32)
  {
    if (i)
    {
      v36 = gcl::gpcc::Decoder::Impl::decode((gcl::gpcc::Decoder::Impl *)v34, i, v33, &v56, (const gcl::gpcc::Decoder::Delegate *)v65);
      if (v36)
      {
        *((_DWORD *)*a1 + 14) = v63;
        if (v36 >= 5)
          v22 = 5;
        else
          v22 = v36;
        v43 = v76;
        if (v76 != v75)
          goto LABEL_61;
LABEL_67:
        v44 = 4;
        v43 = v75;
LABEL_68:
        (*(void (**)(void))(*v43 + 8 * v44))();
        goto LABEL_69;
      }
      v37 = v56;
      v32 = *a1;
      if (!v56)
        goto LABEL_60;
    }
    else
    {
      v56 = 0;
      v39 = (_OWORD *)(v34 + 216);
      v38 = *(_DWORD **)(v34 + 216);
      if (!v38)
        goto LABEL_60;
      v40 = *(_DWORD *)(v34 + 212);
      if (v40 >= 1)
      {
        for (j = 0; j < v40; ++j)
        {
          v42 = v38[1];
          *v38 += *(_DWORD *)(v34 + 188);
          v38[1] = v42 + *(_DWORD *)(v34 + 192);
          v38[2] += *(_DWORD *)(v34 + 196);
          v38 = (_DWORD *)((char *)v38 + *(int *)(v34 + 236));
          v40 = *(_DWORD *)(v34 + 212);
        }
      }
      if (v74)
      {
        v64 = *(_DWORD *)(v34 + 184);
        v77 = (uint64_t (**)())v40;
        (*(void (**)(_QWORD *, int *, uint64_t (***)()))(*v74 + 48))(v74, &v64, &v77);
      }
      *v39 = 0u;
      v39[1] = 0u;
      v37 = v56;
      v32 = *a1;
      if (!v56)
      {
LABEL_60:
        v22 = 0;
        *((_DWORD *)v32 + 14) = v63;
        v43 = v76;
        if (v76 == v75)
          goto LABEL_67;
        goto LABEL_61;
      }
    }
    v33 -= v37;
    if (v33)
      i += v37;
    else
      i = 0;
    v56 = 0;
  }
  *((_DWORD *)v32 + 14) = v63;
  v22 = 5;
  v43 = v76;
  if (v76 == v75)
    goto LABEL_67;
LABEL_61:
  if (v43)
  {
    v44 = 5;
    goto LABEL_68;
  }
LABEL_69:
  v45 = v74;
  if (v74 == v73)
  {
    v46 = 4;
    v45 = v73;
  }
  else
  {
    if (!v74)
      goto LABEL_74;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_74:
  v47 = v72;
  if (v72 == v71)
  {
    v48 = 4;
    v47 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_79;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_79:
  v49 = v70;
  if (v70 == v69)
  {
    v50 = 4;
    v49 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_84;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_84:
  v51 = v68;
  if (v68 == v67)
  {
    v52 = 4;
    v51 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_89;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_89:
  v53 = v66;
  if (v66 == v65)
  {
    v54 = 4;
    v53 = v65;
  }
  else
  {
    if (!v66)
      goto LABEL_94;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_94:
  if (__p)
  {
    v58 = (char *)__p;
    operator delete(__p);
  }
  return v22;
}

void sub_1886BA638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mgcl::gpcc::Decoder::parseMetadata(uint64_t **this)
{
  uint64_t *v1;
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t (***v6)();
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  _DWORD *v13;
  _OWORD *v14;
  int v15;
  int i;
  int v17;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v33;
  int v34;
  int v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[3];
  _QWORD *v39;
  _BYTE v40[24];
  _BYTE *v41;
  _BYTE v42[24];
  _BYTE *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  uint64_t (**v48)();
  int *v49;
  uint64_t (***v50)();
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v1 = *this;
  *((_DWORD *)v1 + 14) = 0;
  if (!v1[1] || !v1[3])
    return 5;
  v34 = 0;
  v37 = 0;
  v39 = 0;
  v41 = 0;
  v43 = 0;
  v45 = 0;
  v47 = 0;
  v48 = &off_1E1BFAF40;
  v49 = (int *)(v1 + 4);
  v50 = &v48;
  std::__function::__value_func<BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::swap[abi:ne180100](&v48, v36);
  v3 = v50;
  if (v50 == &v48)
  {
    v4 = 4;
    v3 = &v48;
  }
  else
  {
    if (!v50)
      goto LABEL_9;
    v4 = 5;
  }
  (*v3)[v4]();
LABEL_9:
  v48 = &off_1E1BFAF98;
  v49 = &v34;
  v50 = &v48;
  std::__function::__value_func<BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::swap[abi:ne180100](&v48, v38);
  v6 = v50;
  if (v50 == &v48)
  {
    v7 = 4;
    v6 = &v48;
  }
  else
  {
    if (!v50)
      goto LABEL_14;
    v7 = 5;
  }
  (*v6)[v7]();
LABEL_14:
  v8 = *this;
  v9 = (*this)[3];
  v33 = 0;
  v10 = *v8;
  v11 = (const char *)v8[1];
  if (*v8)
  {
    while (1)
    {
      if (v11)
      {
        v12 = gcl::gpcc::Decoder::Impl::decode((gcl::gpcc::Decoder::Impl *)v10, v11, v9, &v33, (const gcl::gpcc::Decoder::Delegate *)v36);
        v5 = v12;
        if ((_DWORD)v12)
        {
          if ((v12 - 1) < 4)
          {
            v20 = v47;
            if (v47 == v46)
              goto LABEL_37;
            goto LABEL_34;
          }
LABEL_65:
          v5 = 5;
          v20 = v47;
          if (v47 != v46)
            goto LABEL_34;
          goto LABEL_37;
        }
      }
      else
      {
        v33 = 0;
        v14 = (_OWORD *)(v10 + 216);
        v13 = *(_DWORD **)(v10 + 216);
        if (v13)
        {
          v15 = *(_DWORD *)(v10 + 212);
          if (v15 >= 1)
          {
            for (i = 0; i < v15; ++i)
            {
              v17 = v13[1];
              *v13 += *(_DWORD *)(v10 + 188);
              v13[1] = v17 + *(_DWORD *)(v10 + 192);
              v13[2] += *(_DWORD *)(v10 + 196);
              v13 = (_DWORD *)((char *)v13 + *(int *)(v10 + 236));
              v15 = *(_DWORD *)(v10 + 212);
            }
          }
          if (v45)
          {
            v35 = *(_DWORD *)(v10 + 184);
            v48 = (uint64_t (**)())v15;
            (*(void (**)(_BYTE *, int *, uint64_t (***)()))(*(_QWORD *)v45 + 48))(v45, &v35, &v48);
          }
          *v14 = 0u;
          v14[1] = 0u;
        }
      }
      if (!v33 || v9 <= v33)
        break;
      v11 += v33;
      v9 -= v33;
      v19 = *this;
      v33 = 0;
      v10 = *v19;
      if (!*v19)
        goto LABEL_65;
    }
    v5 = 0;
    *((_DWORD *)*this + 14) = v34;
    v20 = v47;
    if (v47 != v46)
      goto LABEL_34;
    goto LABEL_37;
  }
  v5 = 5;
  v20 = v47;
  if (v47 == v46)
  {
LABEL_37:
    v21 = 4;
    v20 = v46;
    goto LABEL_38;
  }
LABEL_34:
  if (!v20)
    goto LABEL_39;
  v21 = 5;
LABEL_38:
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_39:
  v22 = v45;
  if (v45 == v44)
  {
    v23 = 4;
    v22 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_44;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_44:
  v24 = v43;
  if (v43 == v42)
  {
    v25 = 4;
    v24 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_49;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_49:
  v26 = v41;
  if (v41 == v40)
  {
    v27 = 4;
    v26 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_54;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_54:
  v28 = v39;
  if (v39 == v38)
  {
    v29 = 4;
    v28 = v38;
    goto LABEL_58;
  }
  if (v39)
  {
    v29 = 5;
LABEL_58:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  v30 = v37;
  if (v37 == v36)
  {
    v31 = 4;
    v30 = v36;
    goto LABEL_63;
  }
  if (v37)
  {
    v31 = 5;
LABEL_63:
    (*(void (**)(void))(*v30 + 8 * v31))();
  }
  return v5;
}

void sub_1886BAA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  gcl::gpcc::Decoder::Delegate::~Delegate((gcl::gpcc::Decoder::Delegate *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4>,void ()(int,unsigned long)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E1BFAE90;
}

__n128 std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E1BFAE38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFAD88;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E1BFAD30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_1,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFAF98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_0,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFAF40;
  a2[1] = v2;
  return result;
}

void sub_1886BAB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1886BAEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t geomapregion::Polygon::contains(const Point *this, const Point *a2, double a3, double a4)
{
  int v4;
  unsigned int v5;
  int64_t v6;
  double v7;
  double v8;
  double *p_v;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v19;
  int v20;
  _BOOL4 v21;

  v4 = 0;
  if (a2 == this)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (((char *)a2 - (char *)this) >> 4) - 1;
    if (((char *)a2 - (char *)this) >> 4 != 1)
    {
      v4 = 0;
      v7 = *(double *)&this->v;
      v8 = *(double *)&this[2].v;
      p_v = (double *)&this[6].v;
      do
      {
        v10 = v7;
        v7 = *(p_v - 1);
        v11 = *p_v;
        v12 = v7 - v10;
        v13 = a3 - v10;
        v14 = *p_v - v8;
        v15 = (a4 - v8) * (v7 - v10) - (a3 - v10) * v14;
        if (fabs(v15) <= 1.0e-20)
        {
          v16 = (a4 - v8) * v14 + v13 * v12;
          v17 = v14 * v14 + v12 * v12;
          if (v16 >= 0.0 && v17 >= v16)
          {
            v5 = 1;
            goto LABEL_19;
          }
        }
        v19 = v11 <= a4;
        if (v15 >= 0.0)
          v19 = 0;
        v20 = v19 << 31 >> 31;
        v21 = v11 > a4;
        if (v15 <= 0.0)
          v21 = 0;
        if (v8 <= a4)
          v20 = v21;
        v4 += v20;
        p_v += 2;
        v8 = v11;
        --v6;
      }
      while (v6);
      v5 = 0;
    }
  }
LABEL_19:
  if (v4)
    return 1;
  else
    return v5;
}

unint64_t GEOURLInfoSetReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64x2_t v12;
  int8x16_t v13;
  uint32x4_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  BOOL v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  id v44;
  void *v45;
  int v46;
  GEOURLInfo *v47;
  uint64_t v48;
  void *v49;
  char v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  void *v54;
  int v56;
  char v57;
  char v58;
  char v59;
  char v60;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 480));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 476);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 472));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = *(_QWORD *)(a1 + 488);
  v12 = (uint64x2_t)vdupq_n_s64(v11);
  v13.i64[0] = 0x100000001;
  v13.i64[1] = 0x100000001;
  v14 = (uint32x4_t)vdupq_n_s32(v11);
  *(int32x2_t *)v12.i8 = vadd_s32(vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD1D0)), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)__PAIR64__(v11 >> 46, v11 >> 22), (int8x8_t)0x100000001)), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)__PAIR64__(v11 >> 55, v11 >> 25), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8,
                                                            (uint32x2_t)0xFFFFFFF4FFFFFFEFLL),
                                                (int8x8_t)0x100000001)),
                                 vadd_s32((int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD1F0)), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFF8FFFFFFFDLL), (int8x8_t)0x100000001)))), vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFF6FFFFFFFBLL), (int8x8_t)0x100000001), (int32x2_t)vand_s8(
                                                (int8x8_t)__PAIR64__(v11 >> 9, v11 >> 41),
                                                (int8x8_t)0x100000001)),
                                 vadd_s32((int32x2_t)vand_s8((int8x8_t)__PAIR64__(v11 >> 54, v11 >> 11), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)__PAIR64__(HIBYTE(v11), v11 >> 23), (int8x8_t)0x100000001))), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFFAFFFFFFFELL), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD200)), (int8x8_t)0x100000001)), vadd_s32(
                                   (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFF3FFFFFFEBLL), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFFCFFFFFFE3), (int8x8_t)0x100000001))))), vadd_s32((int32x2_t)__PAIR64__((v11 >> 18) & 1, vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v12,
                                                                                       (uint64x2_t)xmmword_189CCD0C0),
                                                                          (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD180)), v13), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CCD190), v13), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CCD1A0), v13))), (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD1C0), (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD1B0)), v13)))),
                             (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD1E0)), (int8x8_t)0x100000001)));
  v15 = vadd_s32(*(int32x2_t *)v12.i8, vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0]
      + ((v11 >> 39) & 1)
      + (BYTE3(v11) & 1)
      + ((v11 >> 53) & 1)
      + (WORD1(v11) & 1)
      + ((v11 >> 33) & 1)
      + ((v11 >> 35) & 1)
      + ((v11 >> 34) & 1)
      + ((v11 >> 19) & 1)
      + ((v11 >> 1) & 1)
      + (v11 >> 31);
  while (2)
  {
    v16 = 1;
    v17 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v18 = v15 > 0x2B;
        v57 = v18 & ~(_BYTE)v10 | v9;
        v58 = v18 | v10 | v57;
        if ((((v18 | v10) | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v59 = (v19 == 0) | v18 | v10;
        v60 = v18 | v10;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v15;
LABEL_7:
        v16 = v9;
LABEL_8:
        v17 = v10;
LABEL_9:
        ++v7;
        v9 = v16;
        v10 = v17;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_452;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      if (v27 == -1 || v27 >= *(_QWORD *)(v3 + *v6))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v27 + 1;
      v25 |= (unint64_t)(v28 & 0x7F) << v23;
      if ((v28 & 0x80) == 0)
        goto LABEL_24;
      v23 += 7;
      v29 = v24++ >= 9;
      if (v29)
      {
        v25 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_24:
    v30 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_26:
    if (v30 || (v25 & 7) == 4)
    {
LABEL_452:
      v56 = 1;
      goto LABEL_453;
    }
    v32 = v25 >> 3;
    v33 = v60;
    if ((v59 & 1) == 0)
    {
      v34 = v19;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_333;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_QWORD *)(a1 + 488) |= 1uLL;
        while (1)
        {
          v41 = *v20;
          v42 = *(_QWORD *)(v3 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v42);
          *(_QWORD *)(v3 + v41) = v42 + 1;
          v40 |= (unint64_t)(v43 & 0x7F) << v38;
          if ((v43 & 0x80) == 0)
            goto LABEL_336;
          v38 += 7;
          v29 = v39++ >= 9;
          if (v29)
          {
            LODWORD(v40) = 0;
            goto LABEL_338;
          }
        }
        *(_BYTE *)(v3 + *v21) = 1;
LABEL_336:
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v40) = 0;
LABEL_338:
        *(_DWORD *)(a1 + 484) = v40;
        goto LABEL_451;
      case 2:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 493) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 16;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 384;
        goto LABEL_332;
      case 3:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 494) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 14;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 400;
        goto LABEL_332;
      case 4:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 490) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 41;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 184;
        goto LABEL_332;
      case 5:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 491) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 38;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 208;
        goto LABEL_332;
      case 6:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 490) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 46;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 144;
        goto LABEL_332;
      case 7:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 494) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 13;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 408;
        goto LABEL_332;
      case 8:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 488) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 60;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 32;
        goto LABEL_332;
      case 9:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 488) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 58;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 48;
        goto LABEL_332;
      case 10:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 492) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 26;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 304;
        goto LABEL_332;
      case 11:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 493) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 19;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 360;
        goto LABEL_332;
      case 12:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 493) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 20;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 352;
        goto LABEL_332;
      case 13:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 494) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 15;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 392;
        goto LABEL_332;
      case 14:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 493) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 22;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 336;
        goto LABEL_332;
      case 15:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 489) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 52;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 96;
        goto LABEL_332;
      case 16:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 490) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 40;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 192;
        goto LABEL_332;
      case 17:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 493) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 21;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 344;
        goto LABEL_332;
      case 18:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 488) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 61;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 24;
        goto LABEL_332;
      case 19:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 490) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 42;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 176;
        goto LABEL_332;
      case 20:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 491) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 34;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 240;
        goto LABEL_332;
      case 21:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 494) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 12;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 416;
        goto LABEL_332;
      case 22:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 493) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 17;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 376;
        goto LABEL_332;
      case 23:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 490) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 45;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 152;
        goto LABEL_332;
      case 24:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 493) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 23;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 328;
        goto LABEL_332;
      case 25:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 491) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 33;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 248;
        goto LABEL_332;
      case 26:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 489) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 49;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 120;
        goto LABEL_332;
      case 27:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 490) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 43;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 168;
        goto LABEL_332;
      case 28:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 489) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 48;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 128;
        goto LABEL_332;
      case 29:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 494) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 8;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 448;
        goto LABEL_332;
      case 30:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 491) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 32;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 256;
        goto LABEL_332;
      case 31:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 489) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 51;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 104;
        goto LABEL_332;
      case 32:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 495) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 6;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 464;
        goto LABEL_332;
      case 33:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 491) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 36;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 224;
        goto LABEL_332;
      case 34:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 491) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 37;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 216;
        goto LABEL_332;
      case 35:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 491) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 35;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 232;
        goto LABEL_332;
      case 36:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 488) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 56;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 64;
        goto LABEL_332;
      case 37:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 489) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 55;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 72;
        goto LABEL_332;
      case 38:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 489) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 53;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 88;
        goto LABEL_332;
      case 39:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 489) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 54;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 80;
        goto LABEL_332;
      case 40:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 494) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 9;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 440;
        goto LABEL_332;
      case 41:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 495) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 7;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 456;
        goto LABEL_332;
      case 42:
        if (!v33 || (*(_BYTE *)(a1 + 488) & 0x40) != 0)
          goto LABEL_333;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        -[GEOURLInfoSet _addNoFlagsAlternateResourcesURL:](a1, v47);

        goto LABEL_450;
      case 43:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 494) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 11;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 424;
        goto LABEL_332;
      case 44:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 489) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 50;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 112;
        goto LABEL_332;
      case 45:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 488) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 59;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 40;
        goto LABEL_332;
      case 46:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 492) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 24;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 320;
        goto LABEL_332;
      case 47:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 491) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 39;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 200;
        goto LABEL_332;
      case 48:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 494) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 10;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 432;
        goto LABEL_332;
      case 49:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 490) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 47;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 136;
        goto LABEL_332;
      case 50:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 492) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 25;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 312;
        goto LABEL_332;
      case 51:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 492) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 27;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 296;
        goto LABEL_332;
      case 52:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 493) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 18;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 368;
        goto LABEL_332;
      case 53:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 492) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 31;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 264;
        goto LABEL_332;
      case 54:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 492) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 30;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 272;
        goto LABEL_332;
      case 55:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 492) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 28;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 288;
        goto LABEL_332;
      case 56:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 492) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 29;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
          goto LABEL_521;
        PBReaderRecallMark();
        v48 = 280;
        goto LABEL_332;
      case 57:
        if (!v33)
          goto LABEL_333;
        if ((*(_BYTE *)(a1 + 490) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_522;
          v51 = *(_QWORD *)(a1 + 488) << 44;
LABEL_449:
          v7 += v51 >> 63;
LABEL_450:
          v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_451:
          v22 = (int *)MEMORY[0x1E0D82BB8];
          if (!(v58 & 1 | (v7 != 0)))
            goto LABEL_452;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_522;
        v47 = objc_alloc_init(GEOURLInfo);
        if (GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
        {
          PBReaderRecallMark();
          v48 = 160;
LABEL_332:
          v49 = *(void **)(a1 + v48);
          *(_QWORD *)(a1 + v48) = v47;

          --v7;
          goto LABEL_450;
        }
LABEL_521:

LABEL_522:
        v56 = 0;
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_453:
        if ((v57 & 1) != 0)
LABEL_454:
          *(_QWORD *)(a1 + 488) |= 2uLL;
        if (v60 & 1 | ((v56 & 1) == 0))
        {
          *(_QWORD *)(a1 + 488) |= 0x3FFFFFFFFFFFFFCuLL;
        }
        else if (v19)
        {
          while (1)
          {
            v52 = *v19++;
            v53 = 0x800000000000;
            switch(v52)
            {
              case 0:
                goto LABEL_515;
              case 2:
                goto LABEL_514;
              case 3:
                v53 = 0x2000000000000;
                goto LABEL_514;
              case 4:
                v53 = 0x400000;
                goto LABEL_514;
              case 5:
                v53 = 0x2000000;
                goto LABEL_514;
              case 6:
                v53 = 0x20000;
                goto LABEL_514;
              case 7:
                v53 = 0x4000000000000;
                goto LABEL_514;
              case 8:
                v53 = 8;
                goto LABEL_514;
              case 9:
                v53 = 32;
                goto LABEL_514;
              case 10:
                v53 = 0x2000000000;
                goto LABEL_514;
              case 11:
                v53 = 0x100000000000;
                goto LABEL_514;
              case 12:
                v53 = 0x80000000000;
                goto LABEL_514;
              case 13:
                v53 = 0x1000000000000;
                goto LABEL_514;
              case 14:
                v53 = 0x20000000000;
                goto LABEL_514;
              case 15:
                v53 = 2048;
                goto LABEL_514;
              case 16:
                v53 = 0x800000;
                goto LABEL_514;
              case 17:
                v53 = 0x40000000000;
                goto LABEL_514;
              case 18:
                v53 = 4;
                goto LABEL_514;
              case 19:
                v53 = 0x200000;
                goto LABEL_514;
              case 20:
                v53 = 0x20000000;
                goto LABEL_514;
              case 21:
                v53 = 0x8000000000000;
                goto LABEL_514;
              case 22:
                v53 = 0x400000000000;
                goto LABEL_514;
              case 23:
                v53 = 0x40000;
                goto LABEL_514;
              case 24:
                v53 = 0x10000000000;
                goto LABEL_514;
              case 25:
                v53 = 0x40000000;
                goto LABEL_514;
              case 26:
                v53 = 0x4000;
                goto LABEL_514;
              case 27:
                v53 = 0x100000;
                goto LABEL_514;
              case 28:
                v53 = 0x8000;
                goto LABEL_514;
              case 29:
                v53 = 0x80000000000000;
                goto LABEL_514;
              case 30:
                v53 = 0x80000000;
                goto LABEL_514;
              case 31:
                v53 = 4096;
                goto LABEL_514;
              case 32:
                v53 = 0x200000000000000;
                goto LABEL_514;
              case 33:
                v53 = 0x8000000;
                goto LABEL_514;
              case 34:
                v53 = 0x4000000;
                goto LABEL_514;
              case 35:
                v53 = 0x10000000;
                goto LABEL_514;
              case 36:
                v53 = 128;
                goto LABEL_514;
              case 37:
                v53 = 256;
                goto LABEL_514;
              case 38:
                v53 = 1024;
                goto LABEL_514;
              case 39:
                v53 = 512;
                goto LABEL_514;
              case 40:
                v53 = 0x40000000000000;
                goto LABEL_514;
              case 41:
                v53 = 0x100000000000000;
                goto LABEL_514;
              case 42:
                v53 = 64;
                goto LABEL_514;
              case 43:
                v53 = 0x10000000000000;
                goto LABEL_514;
              case 44:
                v53 = 0x2000;
                goto LABEL_514;
              case 45:
                v53 = 16;
                goto LABEL_514;
              case 46:
                v53 = 0x8000000000;
                goto LABEL_514;
              case 47:
                v53 = 0x1000000;
                goto LABEL_514;
              case 48:
                v53 = 0x20000000000000;
                goto LABEL_514;
              case 49:
                v53 = 0x10000;
                goto LABEL_514;
              case 50:
                v53 = 0x4000000000;
                goto LABEL_514;
              case 51:
                v53 = 0x1000000000;
                goto LABEL_514;
              case 52:
                v53 = 0x200000000000;
                goto LABEL_514;
              case 53:
                v53 = 0x100000000;
                goto LABEL_514;
              case 54:
                v53 = 0x200000000;
                goto LABEL_514;
              case 55:
                v53 = 0x800000000;
                goto LABEL_514;
              case 56:
                v53 = 0x400000000;
                goto LABEL_514;
              case 57:
                v53 = 0x80000;
LABEL_514:
                *(_QWORD *)(a1 + 488) |= v53;
                break;
              default:
                continue;
            }
          }
        }
LABEL_515:
        if (v56)
          v3 = *(_BYTE *)(v3 + *v21) == 0;
        else
          v3 = 0;
        if ((v60 & 1) != 0)
        {
          v54 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v57 & 1) == 0 || (*(_BYTE *)(a1 + 488) & 2) != 0)
        {
LABEL_333:
          v50 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if ((v50 & 1) == 0)
          {
            v56 = 0;
            goto LABEL_453;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v44 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v45 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v44;

          }
          v46 = PBUnknownFieldAdd();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if (!v46)
          {
            v56 = 0;
            goto LABEL_454;
          }
        }
        goto LABEL_451;
    }
  }
}

BOOL GEOURLInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  _BOOL8 v41;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            PBReaderReadString();
            v17 = objc_claimAutoreleasedReturnValue();
            v18 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v17;

            continue;
          case 2u:
            v21 = 0;
            v22 = 0;
            v23 = 0;
            *(_BYTE *)(a1 + 32) |= 4u;
            while (1)
            {
              v24 = *v4;
              v25 = *(_QWORD *)&v3[v24];
              if (v25 == -1 || v25 >= *(_QWORD *)&v3[*v5])
                break;
              v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v25);
              *(_QWORD *)&v3[v24] = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if ((v26 & 0x80) == 0)
                goto LABEL_47;
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_49;
              }
            }
            v3[*v6] = 1;
LABEL_47:
            if (v3[*v6])
              v23 = 0;
LABEL_49:
            v39 = v23 != 0;
            v40 = 29;
            goto LABEL_54;
          case 3u:
            v27 = 0;
            v28 = 0;
            v29 = 0;
            *(_BYTE *)(a1 + 32) |= 2u;
            while (2)
            {
              v30 = *v4;
              v31 = *(_QWORD *)&v3[v30];
              if (v31 == -1 || v31 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
                *(_QWORD *)&v3[v30] = v31 + 1;
                v29 |= (unint64_t)(v32 & 0x7F) << v27;
                if (v32 < 0)
                {
                  v27 += 7;
                  v14 = v28++ >= 9;
                  if (v14)
                  {
                    v29 = 0;
                    goto LABEL_53;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v29 = 0;
LABEL_53:
            v39 = v29 != 0;
            v40 = 28;
LABEL_54:
            *(_BYTE *)(a1 + v40) = v39;
            continue;
          case 4u:
            v33 = 0;
            v34 = 0;
            v35 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            break;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v19 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v20 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v19;

            }
            if (!PBUnknownFieldAdd())
              goto LABEL_61;
            continue;
        }
        while (1)
        {
          v36 = *v4;
          v37 = *(_QWORD *)&v3[v36];
          if (v37 == -1 || v37 >= *(_QWORD *)&v3[*v5])
            break;
          v38 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
          *(_QWORD *)&v3[v36] = v37 + 1;
          v35 |= (unint64_t)(v38 & 0x7F) << v33;
          if ((v38 & 0x80) == 0)
            goto LABEL_56;
          v33 += 7;
          v14 = v34++ >= 9;
          if (v14)
          {
            LODWORD(v35) = 0;
            goto LABEL_58;
          }
        }
        v3[*v6] = 1;
LABEL_56:
        if (v3[*v6])
          LODWORD(v35) = 0;
LABEL_58:
        *(_DWORD *)(a1 + 24) = v35;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v41 = v3[*v6] == 0;
  }
  else
  {
LABEL_61:
    v41 = 0;
  }
  objc_sync_exit(v3);

  return v41;
}

void sub_1886BE4A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886BE690(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886BE878(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *GEOPDStorefrontPresentationIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPDStorefrontPresentationIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1886BEAC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886BEC60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886BEE2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886BF0E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886BF194(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886BF630(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886BF6F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886C01F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *GEOPDEntityIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPDEntityIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 72);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1886C0434(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886C05E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886C0DF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886C1588(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *GEOPDPlaceRequestParametersIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPDPlaceRequestParametersIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 118);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1886C16B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ___initKeyChangeListeners_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *global_queue;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "addObserverForName:object:queue:usingBlock:", CFSTR("_GEOConfigKeysChangedNotification"), 0, 0, &__block_literal_global_116_0);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)unk_1ECDBC338;
  unk_1ECDBC338 = v1;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObserverForName:object:queue:usingBlock:", CFSTR("GEOCountryConfigurationCountryCodeDidChangeNotification"), 0, 0, &__block_literal_global_119);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)unk_1ECDBC340;
  unk_1ECDBC340 = v4;

  global_queue = geo_get_global_queue();
  notify_register_dispatch("GEODaemonDidStartDarwinNotification", &dword_1ECDBC2FC, global_queue, &__block_literal_global_121_0);

  GEOReadStoredCountryCode();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)qword_1ECDBC308;
  qword_1ECDBC308 = v7;

  v9 = geo_isolater_create();
  v10 = (void *)qword_1ECDBC310;
  qword_1ECDBC310 = v9;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)qword_1ECDBC318;
  qword_1ECDBC318 = v11;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)unk_1ECDBC320;
  unk_1ECDBC320 = v13;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)qword_1ECDBC328;
  qword_1ECDBC328 = v15;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = (void *)unk_1ECDBC330;
  unk_1ECDBC330 = v17;

}

_QWORD *GEOReadStoredCountryCode()
{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;

  _GEOReadStoredCountryCodeWithFallback();
  v0 = (_QWORD *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v0 = (_QWORD *)v0[2];
  v2 = v0;

  return v2;
}

BOOL GEOPDPlaceInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  int v39;
  int v40;
  int v42;
  _BOOL8 v43;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
        case 8u:
        case 9u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOLatLngIsValid(a1))
            goto LABEL_32;
          goto LABEL_82;
        case 2u:
          if (v16 != 1)
            goto LABEL_82;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_50;
          v20 = v19 + 8;
          if (v20 > *(_QWORD *)&a1[*v3])
            goto LABEL_50;
          *(_QWORD *)&a1[v18] = v20;
          continue;
        case 4u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOTimezoneIsValid(a1))
            goto LABEL_32;
          goto LABEL_82;
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_82;
          v21 = 0;
          while (1)
          {
            v22 = *v2;
            v23 = *(_QWORD *)&a1[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&a1[*v3])
              goto LABEL_49;
            v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
            *(_QWORD *)&a1[v22] = v24;
            if (v25 < 0)
            {
              v26 = v21++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_51;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_82;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              break;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v26 = v27++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_51;
          }
LABEL_49:
          v14 = *v4;
LABEL_50:
          a1[v14] = 1;
          continue;
        case 7u:
          if (v16 != 2 || !PBReaderPlaceMark())
            goto LABEL_82;
          objc_msgSend(a1, "position", 0, 0);
          objc_msgSend(a1, "length");
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_82;
          continue;
      }
      while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (1)
        {
          v35 = *v2;
          v36 = *(_QWORD *)&a1[v35];
          v37 = v36 + 1;
          if (v36 == -1 || v37 > *(_QWORD *)&a1[*v3])
            break;
          v38 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v36);
          *(_QWORD *)&a1[v35] = v37;
          v34 |= (unint64_t)(v38 & 0x7F) << v32;
          if ((v38 & 0x80) == 0)
            goto LABEL_66;
          v32 += 7;
          v13 = v33++ >= 9;
          if (v13)
          {
            v34 = 0;
            v39 = a1[*v4];
            goto LABEL_68;
          }
        }
        a1[*v4] = 1;
LABEL_66:
        v39 = a1[*v4];
        if (a1[*v4])
          v34 = 0;
LABEL_68:
        v40 = v34 & 7;
        if (v39 || v40 == 4)
          break;
        if ((v34 >> 3) == 1)
        {
          if (v40 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_81:
            PBReaderRecallMark();
            goto LABEL_82;
          }
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_81;
        }
      }
      v42 = a1[*v4];
      PBReaderRecallMark();
      if (v42)
      {
LABEL_82:
        PBReaderRecallMark();
        return 0;
      }
LABEL_32:
      PBReaderRecallMark();
LABEL_51:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v43 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v43;
}

BOOL GEOPDMapsIdentifierIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDShardedIdIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOPDShardedIdIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  _BOOL8 v49;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
LABEL_78:
    v49 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v49;
  }
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (a1[*v4])
      goto LABEL_78;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *v2;
      v10 = *(_QWORD *)&a1[v9];
      v11 = v10 + 1;
      if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
        break;
      v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
      *(_QWORD *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0)
        goto LABEL_12;
      v6 += 7;
      if (v7++ >= 9)
      {
        v8 = 0;
        v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v14 = a1[*v4];
    if (a1[*v4])
      v8 = 0;
LABEL_14:
    v15 = v8 & 7;
    if (v14 || v15 == 4)
      goto LABEL_78;
    v17 = v8 >> 3;
    switch((v8 >> 3))
    {
      case 1u:
        if ((v8 & 7) != 0)
          goto LABEL_77;
        v18 = 0;
        while (1)
        {
          v19 = *v2;
          v20 = *(_QWORD *)&a1[v19];
          v21 = v20 + 1;
          if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
            goto LABEL_73;
          v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
          *(_QWORD *)&a1[v19] = v21;
          if (v22 < 0)
          {
            v23 = v18++ > 8;
            if (!v23)
              continue;
          }
          goto LABEL_74;
        }
      case 2u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
          goto LABEL_77;
        PBReaderRecallMark();
        goto LABEL_74;
      case 3u:
        if ((v8 & 7) != 0)
          goto LABEL_77;
        v29 = 0;
        while (1)
        {
          v30 = *v2;
          v31 = *(_QWORD *)&a1[v30];
          v32 = v31 + 1;
          if (v31 == -1 || v32 > *(_QWORD *)&a1[*v3])
            goto LABEL_73;
          v33 = *(char *)(*(_QWORD *)&a1[*v5] + v31);
          *(_QWORD *)&a1[v30] = v32;
          if (v33 < 0)
          {
            v23 = v29++ > 8;
            if (!v23)
              continue;
          }
          goto LABEL_74;
        }
      case 4u:
        if ((v8 & 7) != 0)
          goto LABEL_77;
        v34 = 0;
        while (1)
        {
          v35 = *v2;
          v36 = *(_QWORD *)&a1[v35];
          v37 = v36 + 1;
          if (v36 == -1 || v37 > *(_QWORD *)&a1[*v3])
            goto LABEL_73;
          v38 = *(char *)(*(_QWORD *)&a1[*v5] + v36);
          *(_QWORD *)&a1[v35] = v37;
          if (v38 < 0)
          {
            v23 = v34++ > 8;
            if (!v23)
              continue;
          }
          goto LABEL_74;
        }
      case 5u:
        if ((v8 & 7) != 0)
          goto LABEL_77;
        v39 = 0;
        while (1)
        {
          v40 = *v2;
          v41 = *(_QWORD *)&a1[v40];
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)&a1[*v3])
            goto LABEL_73;
          v43 = *(char *)(*(_QWORD *)&a1[*v5] + v41);
          *(_QWORD *)&a1[v40] = v42;
          if (v43 < 0)
          {
            v23 = v39++ > 8;
            if (!v23)
              continue;
          }
          goto LABEL_74;
        }
      default:
        if ((_DWORD)v17 == 50)
        {
          if ((v8 & 7) != 0)
            goto LABEL_77;
          v44 = 0;
          while (1)
          {
            v45 = *v2;
            v46 = *(_QWORD *)&a1[v45];
            v47 = v46 + 1;
            if (v46 == -1 || v47 > *(_QWORD *)&a1[*v3])
              goto LABEL_73;
            v48 = *(char *)(*(_QWORD *)&a1[*v5] + v46);
            *(_QWORD *)&a1[v45] = v47;
            if (v48 < 0)
            {
              v23 = v44++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_74;
          }
        }
        if ((_DWORD)v17 == 51)
        {
          if ((v8 & 7) != 0)
            goto LABEL_77;
          v24 = 0;
          while (1)
          {
            v25 = *v2;
            v26 = *(_QWORD *)&a1[v25];
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
              break;
            v28 = *(char *)(*(_QWORD *)&a1[*v5] + v26);
            *(_QWORD *)&a1[v25] = v27;
            if (v28 < 0)
            {
              v23 = v24++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_74;
          }
LABEL_73:
          a1[*v4] = 1;
LABEL_74:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_78;
          continue;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
          goto LABEL_74;
LABEL_77:
        PBReaderRecallMark();
        return 0;
    }
  }
}

BOOL GEOLatLngIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v29;
  char v30;
  char v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL4 v36;
  _BOOL8 v37;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v39[0] = 0;
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_60;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
      {
LABEL_60:
        v36 = HIDWORD(v39[0]) != 0;
        goto LABEL_54;
      }
      v18 = v8 >> 3;
      if ((int)(v8 >> 3) > 2)
      {
        if ((_DWORD)v18 != 3)
        {
          if ((_DWORD)v18 != 100)
          {
LABEL_41:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_58;
            goto LABEL_50;
          }
          if ((v8 & 7) != 0)
            goto LABEL_58;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              break;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0 && v23++ <= 8)
              continue;
            goto LABEL_50;
          }
          v14 = *v4;
          goto LABEL_49;
        }
      }
      else if ((_DWORD)v18 == 1)
      {
        v29 = 0;
        v30 = 1;
        while (1)
        {
          v31 = v30;
          v32 = *((_DWORD *)v39 + v29);
          if (!v32)
            break;
          if (v32 != 1)
          {
            v30 = 0;
            v29 = 1;
            if ((v31 & 1) != 0)
              continue;
          }
          goto LABEL_58;
        }
        *((_DWORD *)v39 + v29) = 1;
      }
      else
      {
        if ((_DWORD)v18 != 2)
          goto LABEL_41;
        v19 = 0;
        v20 = 1;
        while (1)
        {
          v21 = v20;
          v22 = *((_DWORD *)v39 + v19);
          if (!v22)
            break;
          if (v22 != 2)
          {
            v20 = 0;
            v19 = 1;
            if ((v21 & 1) != 0)
              continue;
          }
          goto LABEL_58;
        }
        *((_DWORD *)v39 + v19) = 2;
      }
      if (v16 != 1)
      {
LABEL_58:
        PBReaderRecallMark();
        return 0;
      }
      v33 = *v2;
      v34 = *(_QWORD *)&a1[v33];
      if (v34 <= 0xFFFFFFFFFFFFFFF7)
      {
        v35 = v34 + 8;
        if (v35 <= *(_QWORD *)&a1[*v3])
        {
          *(_QWORD *)&a1[v33] = v35;
          goto LABEL_50;
        }
      }
LABEL_49:
      a1[v14] = 1;
LABEL_50:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_60;
    }
  }
  v36 = 0;
LABEL_54:
  if (a1[*v4])
    v37 = 0;
  else
    v37 = v36;
  PBReaderRecallMark();
  return v37;
}

uint64_t GEOTimezoneIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  int v16;
  uint64_t v18;
  BOOL v19;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *v2;
        v11 = *(_QWORD *)&a1[v10];
        v12 = v11 + 1;
        if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v11);
        *(_QWORD *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        if (v8++ >= 9)
        {
          v9 = 0;
          v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v15 = a1[*v4];
      if (a1[*v4])
        v9 = 0;
LABEL_14:
      v16 = v9 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v9 >> 3) == 1)
      {
        v18 = 0;
        if (v5 || v16 != 2)
          goto LABEL_33;
        v5 = 1;
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_34:
          v18 = 0;
          goto LABEL_33;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_34;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  if (a1[*v4])
    v19 = 1;
  else
    v19 = v5 == 0;
  v18 = !v19;
LABEL_33:
  PBReaderRecallMark();
  return v18;
}

void sub_1886C67CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1886C6910(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t mgcl::bldg::BldgDecoderV1::decode(unint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t (**a5)())
{
  uint64_t v5;
  unsigned __int8 *v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t (***v19)();
  uint64_t v20;
  uint64_t (***v21)();
  _QWORD *v22;
  uint64_t (***v23)();
  uint64_t v24;
  uint64_t (***v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t (***v30)();
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  gcl::gpcc::Decoder::Impl *i;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  _OWORD *v38;
  int v39;
  int j;
  int v41;
  uint64_t (***v42)();
  uint64_t v43;
  int v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  gcl::gpcc::Decoder::Impl *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  gcl::gpcc::Decoder::Impl *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  _QWORD v65[3];
  _QWORD *v66;
  _QWORD v67[3];
  _QWORD *v68;
  _QWORD v69[3];
  _QWORD *v70;
  _QWORD v71[3];
  _QWORD *v72;
  _QWORD v73[3];
  _QWORD *v74;
  _QWORD v75[3];
  uint64_t (***v76)();
  __int128 v77;
  uint64_t (**v78)();
  __int128 *v79;
  uint64_t *v80;
  uint64_t (***v81)();
  unint64_t v82[5];

  v82[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a4;
  v5 = 3;
  if (!a3 || !a4)
    return v5;
  v10 = *a3;
  v9 = a3 + 1;
  *(_DWORD *)(a1 + 1144) = (v10 >> 4) & 3;
  v11 = a1 + 1148;
  *(_BYTE *)(a1 + 1150) = (v10 & 8) != 0;
  *(_BYTE *)(a1 + 1151) = (v10 & 4) != 0;
  v12 = (v10 >> 1) & 1;
  if ((v10 & 0x40) != 0)
    v13 = 0;
  else
    v13 = v12;
  *(_BYTE *)(a1 + 1152) = v13;
  *(_WORD *)(a1 + 1148) = 0;
  v14 = a4 - 1;
  do
  {
    *(_QWORD *)(a1 + 8) = v14;
    if (v14 == -1)
      break;
    *(_QWORD *)a1 = v9;
    v15 = (char)*(v9++ - 1);
    --v14;
  }
  while ((v15 & 0x80000000) == 0);
  v77 = xmmword_189CFC070;
  v61 = (uint64_t)&v61;
  v62 = &v61;
  v63 = 0;
  v16 = operator new();
  *(_QWORD *)(v16 + 240) = 0;
  *(_OWORD *)(v16 + 208) = 0u;
  *(_OWORD *)(v16 + 224) = 0u;
  *(_OWORD *)(v16 + 176) = 0u;
  *(_OWORD *)(v16 + 192) = 0u;
  *(_OWORD *)(v16 + 144) = 0u;
  *(_OWORD *)(v16 + 160) = 0u;
  *(_OWORD *)(v16 + 112) = 0u;
  *(_OWORD *)(v16 + 128) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_DWORD *)(v16 + 76) = 1065353216;
  *(_DWORD *)(v16 + 208) = 0;
  v60 = (gcl::gpcc::Decoder::Impl *)v16;
  v66 = 0;
  v68 = 0;
  v70 = 0;
  v72 = 0;
  v74 = 0;
  v76 = 0;
  v78 = &off_1E1BFAD30;
  v79 = &v77;
  v80 = &v61;
  v81 = &v78;
  std::__function::__value_func<BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::swap[abi:ne180100](&v78, v65);
  v17 = v81;
  if (v81 == &v78)
  {
    v18 = 4;
    v17 = &v78;
  }
  else
  {
    if (!v81)
      goto LABEL_14;
    v18 = 5;
  }
  (*v17)[v18]();
LABEL_14:
  v78 = &off_1E1BFAD88;
  v79 = (__int128 *)a1;
  v81 = &v78;
  std::__function::__value_func<BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::swap[abi:ne180100](&v78, v67);
  v19 = v81;
  if (v81 == &v78)
  {
    v20 = 4;
    v19 = &v78;
  }
  else
  {
    if (!v81)
      goto LABEL_19;
    v20 = 5;
  }
  (*v19)[v20]();
LABEL_19:
  v21 = (uint64_t (***)())operator new(0x28uLL);
  *v21 = &off_1E1BFADE0;
  v21[1] = a5;
  v22 = v69;
  v21[2] = (uint64_t (**)())&v61;
  v21[3] = (uint64_t (**)())&v60;
  v21[4] = (uint64_t (**)())a1;
  v81 = v21;
  std::__function::__value_func<gcl::gpcc::ArrayBuffer ()(unsigned long)>::swap[abi:ne180100](&v78, v69);
  v23 = v81;
  if (v81 == &v78)
  {
    v24 = 4;
    v23 = &v78;
  }
  else
  {
    if (!v81)
      goto LABEL_24;
    v24 = 5;
  }
  (*v23)[v24]();
LABEL_24:
  v78 = &off_1E1BFAE38;
  v79 = (__int128 *)a1;
  v80 = &v61;
  v81 = &v78;
  std::__function::__value_func<gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::swap[abi:ne180100](&v78, v71);
  v25 = v81;
  if (v81 == &v78)
  {
    v26 = 4;
    v25 = &v78;
  }
  else
  {
    if (!v81)
      goto LABEL_29;
    v26 = 5;
  }
  (*v25)[v26]();
LABEL_29:
  v78 = &off_1E1BFAE90;
  v81 = &v78;
  std::__function::__value_func<void ()(int,unsigned long)>::swap[abi:ne180100](&v78, v73);
  v27 = v81;
  if (v81 == &v78)
  {
    v28 = 4;
    v27 = &v78;
  }
  else
  {
    if (!v81)
      goto LABEL_34;
    v28 = 5;
  }
  (*v27)[v28]();
LABEL_34:
  v29 = (uint64_t (***)())v75;
  v78 = &off_1E1BFAEE8;
  v79 = (__int128 *)a1;
  v30 = v76;
  if (v76 == v75)
  {
    v82[0] = (unint64_t)&off_1E1BFAEE8;
    v82[1] = a1;
    v81 = 0;
    (*(void (**)(_QWORD *, uint64_t (***)()))(v75[0] + 24))(v75, &v78);
    ((void (*)(uint64_t (***)()))(*v76)[4])(v76);
    v76 = 0;
    v81 = &v78;
    (*(void (**)(unint64_t *, _QWORD *))(v82[0] + 24))(v82, v75);
    (*(void (**)(unint64_t *))(v82[0] + 32))(v82);
    v76 = (uint64_t (***)())v75;
    v30 = v81;
    if (v81 != &v78)
      goto LABEL_36;
LABEL_39:
    v31 = 4;
    v30 = &v78;
    goto LABEL_40;
  }
  v75[0] = &off_1E1BFAEE8;
  v75[1] = a1;
  v81 = v76;
  v76 = (uint64_t (***)())v75;
  if (v30 == &v78)
    goto LABEL_39;
LABEL_36:
  if (!v30)
    goto LABEL_41;
  v31 = 5;
LABEL_40:
  (*v30)[v31]();
LABEL_41:
  v33 = *(const char **)a1;
  v32 = *(_QWORD *)(a1 + 8);
  v82[0] = 0;
  for (i = v60; v60; i = v60)
  {
    if (v33)
    {
      v35 = gcl::gpcc::Decoder::Impl::decode(i, v33, v32, v82, (const gcl::gpcc::Decoder::Delegate *)v65);
      v5 = v35;
      if ((_DWORD)v35)
      {
        if ((v35 - 1) < 4)
          goto LABEL_60;
        break;
      }
      v36 = v82[0];
      if (!v82[0])
      {
LABEL_63:
        v5 = 0;
        v44 = *(_DWORD *)v11;
        *(_BYTE *)(a2 + 4) = *(_BYTE *)(v11 + 4);
        *(_DWORD *)a2 = v44;
        v42 = v76;
        if (v76 != v75)
          goto LABEL_61;
LABEL_64:
        v43 = 4;
LABEL_65:
        ((void (*)(uint64_t (***)()))(*v29)[v43])(v29);
        goto LABEL_66;
      }
    }
    else
    {
      v82[0] = 0;
      v38 = (_OWORD *)((char *)i + 216);
      v37 = (_DWORD *)*((_QWORD *)i + 27);
      if (!v37)
        goto LABEL_63;
      v39 = *((_DWORD *)i + 53);
      if (v39 >= 1)
      {
        for (j = 0; j < v39; ++j)
        {
          v41 = v37[1];
          *v37 += *((_DWORD *)i + 47);
          v37[1] = v41 + *((_DWORD *)i + 48);
          v37[2] += *((_DWORD *)i + 49);
          v37 = (_DWORD *)((char *)v37 + *((int *)i + 59));
          v39 = *((_DWORD *)i + 53);
        }
      }
      if (v74)
      {
        v64 = *((_DWORD *)i + 46);
        v78 = (uint64_t (**)())v39;
        (*(void (**)(_QWORD *, int *, uint64_t (***)()))(*v74 + 48))(v74, &v64, &v78);
      }
      *v38 = 0u;
      v38[1] = 0u;
      v36 = v82[0];
      if (!v82[0])
        goto LABEL_63;
    }
    v32 -= v36;
    if (v32)
      v33 += v36;
    else
      v33 = 0;
    v82[0] = 0;
  }
  v5 = 5;
LABEL_60:
  v42 = v76;
  if (v76 == v75)
    goto LABEL_64;
LABEL_61:
  if (v42)
  {
    v43 = 5;
    v29 = v42;
    goto LABEL_65;
  }
LABEL_66:
  v45 = v74;
  if (v74 == v73)
  {
    v46 = 4;
    v45 = v73;
  }
  else
  {
    if (!v74)
      goto LABEL_71;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_71:
  v47 = v72;
  if (v72 == v71)
  {
    v48 = 4;
    v47 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_76;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_76:
  if (v70 == v69)
  {
    v49 = 4;
  }
  else
  {
    if (!v70)
      goto LABEL_81;
    v49 = 5;
    v22 = v70;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v49))(v22);
LABEL_81:
  v50 = v68;
  if (v68 == v67)
  {
    v51 = 4;
    v50 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_86;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_86:
  v52 = v66;
  if (v66 == v65)
  {
    v53 = 4;
    v52 = v65;
    goto LABEL_90;
  }
  if (v66)
  {
    v53 = 5;
LABEL_90:
    (*(void (**)(void))(*v52 + 8 * v53))();
  }
  v54 = v60;
  v60 = 0;
  if (v54)
    std::default_delete<gcl::gpcc::Decoder::Impl>::operator()[abi:ne180100]((uint64_t)&v60, v54);
  if (v63)
  {
    v56 = v61;
    v55 = v62;
    v57 = *v62;
    *(_QWORD *)(v57 + 8) = *(_QWORD *)(v61 + 8);
    **(_QWORD **)(v56 + 8) = v57;
    v63 = 0;
    if (v55 != &v61)
    {
      do
      {
        v58 = (uint64_t *)v55[1];
        operator delete(v55);
        v55 = v58;
      }
      while (v58 != &v61);
    }
  }
  return v5;
}

void sub_1886C7784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t gcl::gpcc::Decoder::Impl::decode(gcl::gpcc::Decoder::Impl *this, const char *a2, unint64_t a3, unint64_t *a4, const gcl::gpcc::Decoder::Delegate *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v10;
  unsigned __int8 *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  const void *v18;
  int64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  _DWORD *v33;
  _OWORD *v34;
  int v35;
  int i;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  _DWORD *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  _BOOL4 v52;
  _DWORD *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  char *v84;
  __int128 v85;
  __int128 v86;
  char **v87;
  const void *v88;
  int64_t v89;
  char *v90;
  char *v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  char *v96;
  char *v97;
  void *v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  void *v106;
  void *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  unint64_t v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  int v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  char *v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD v155[3];
  __int128 v156;
  __int128 v157;
  char *v158;
  char *v159;
  _BYTE v160[24];
  int v161[2];
  int v162[2];
  _OWORD v163[174];
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  if (a3 < 6 || (v5 = bswap32(*(_DWORD *)(a2 + 1)), v5 + 5 > a3))
  {
    v6 = 0;
    if (a4)
      *a4 = 0;
    return v6;
  }
  v10 = *(unsigned __int8 *)a2;
  if (a4)
    *a4 = (v5 + 5);
  v11 = (unsigned __int8 *)(a2 + 5);
  v6 = 0;
  switch(v10)
  {
    case 0:
      if (*((_BYTE *)this + 2))
        return 0;
      v6 = gcl::gpcc::HlsIo::parseSps((uint64_t)this, (unsigned __int8 *)a2 + 5, v5, (uint64_t)this + 32, 0);
      if ((_DWORD)v6)
        return v6;
      v59 = (void **)((char *)this + 8);
      v60 = *((_QWORD *)this + 11) - *((_QWORD *)this + 10);
      v61 = v60 >> 5;
      v62 = *((_QWORD *)this + 2);
      v63 = (v60 >> 5) - v62;
      if (v60 >> 5 <= v62)
      {
        *((_QWORD *)this + 2) = v61;
LABEL_162:
        v109 = *((_QWORD *)this + 10);
        v110 = *((_QWORD *)this + 11);
        v111 = (v110 - v109) >> 5;
        v113 = (char *)*((_QWORD *)this + 19);
        v112 = (char *)*((_QWORD *)this + 20);
        v114 = (char *)(v112 - v113);
        v115 = 0x8E38E38E38E38E39 * ((v112 - v113) >> 2);
        v116 = v111 - v115;
        if (v111 <= v115)
        {
          if (v111 < v115)
            *((_QWORD *)this + 20) = &v113[36 * v111];
        }
        else
        {
          v117 = *((_QWORD *)this + 21);
          if (0x8E38E38E38E38E39 * ((v117 - (uint64_t)v112) >> 2) >= v116)
          {
            v130 = &v112[36 * v116];
            v131 = 36 * v111 - (_QWORD)v114 - 36;
            if (v131 < 0x24)
              goto LABEL_222;
            v132 = v131 / 0x24 + 1;
            v133 = v112 + 32;
            v134 = v132 & 0xFFFFFFFFFFFFFFELL;
            do
            {
              *(_OWORD *)v133 = xmmword_189CFB420;
              *((_OWORD *)v133 + 1) = xmmword_189CFB440;
              *((_OWORD *)v133 - 2) = xmmword_189CFB430;
              *((_OWORD *)v133 - 1) = xmmword_189CFB450;
              *((_QWORD *)v133 + 4) = 0x100000002;
              v133 += 72;
              v134 -= 2;
            }
            while (v134);
            v112 += 36 * (v132 & 0xFFFFFFFFFFFFFFELL);
            if (v132 != (v132 & 0xFFFFFFFFFFFFFFELL))
            {
LABEL_222:
              do
              {
                *((_DWORD *)v112 + 8) = 1;
                *(_OWORD *)v112 = xmmword_189CFB430;
                *((_OWORD *)v112 + 1) = xmmword_189CFB450;
                v112 += 36;
              }
              while (v112 != v130);
            }
            *((_QWORD *)this + 20) = v130;
          }
          else
          {
            if (v110 - v109 < 0)
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v118 = 0x1C71C71C71C71C72 * ((v117 - (uint64_t)v113) >> 2);
            if (v118 <= v111)
              v118 = (v110 - v109) >> 5;
            if (0x8E38E38E38E38E39 * ((v117 - (uint64_t)v113) >> 2) >= 0x38E38E38E38E38ELL)
              v119 = 0x71C71C71C71C71CLL;
            else
              v119 = v118;
            if (v119 > 0x71C71C71C71C71CLL)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v120 = (char *)operator new(36 * v119);
            v121 = &v120[4 * ((v112 - v113) >> 2)];
            v122 = &v120[36 * v111];
            v123 = 36 * v111 - (_QWORD)v114 - 36;
            v124 = v121;
            if (v123 < 0x24)
              goto LABEL_223;
            v125 = v123 / 0x24 + 1;
            v124 = &v121[36 * (v125 & 0xFFFFFFFFFFFFFFELL)];
            v126 = (uint64_t)&v120[4 * ((v112 - v113) >> 2) + 32];
            v127 = v125 & 0xFFFFFFFFFFFFFFELL;
            do
            {
              *(_OWORD *)v126 = xmmword_189CFB420;
              *(_OWORD *)(v126 + 16) = xmmword_189CFB440;
              *(_OWORD *)(v126 - 32) = xmmword_189CFB430;
              *(_OWORD *)(v126 - 16) = xmmword_189CFB450;
              *(_QWORD *)(v126 + 32) = 0x100000002;
              v126 += 72;
              v127 -= 2;
            }
            while (v127);
            if (v125 != (v125 & 0xFFFFFFFFFFFFFFELL))
            {
LABEL_223:
              do
              {
                *((_DWORD *)v124 + 8) = 1;
                *(_OWORD *)v124 = xmmword_189CFB430;
                *((_OWORD *)v124 + 1) = xmmword_189CFB450;
                v124 += 36;
              }
              while (v124 != v122);
            }
            if (v112 != v113)
            {
              do
              {
                v128 = *(_OWORD *)(v112 - 36);
                v129 = *(_OWORD *)(v112 - 20);
                *((_DWORD *)v121 - 1) = *((_DWORD *)v112 - 1);
                *(_OWORD *)(v121 - 20) = v129;
                *(_OWORD *)(v121 - 36) = v128;
                v121 -= 36;
                v112 -= 36;
              }
              while (v112 != v113);
              v112 = v113;
            }
            *((_QWORD *)this + 19) = v121;
            *((_QWORD *)this + 20) = v122;
            *((_QWORD *)this + 21) = &v120[36 * v119];
            if (v112)
              operator delete(v112);
          }
          v109 = *((_QWORD *)this + 10);
          v110 = *((_QWORD *)this + 11);
        }
        if (v109 == v110)
        {
LABEL_199:
          v6 = 0;
          *((_BYTE *)this + 2) = 1;
          return v6;
        }
        v135 = 0;
        v136 = 0;
        while (1)
        {
          *(int32x2_t *)&v141 = vrev64_s32(*(int32x2_t *)v109);
          DWORD2(v141) = *(_DWORD *)(v109 + 8);
          HIDWORD(v141) = DWORD2(v141);
          *(_OWORD *)((char *)v163 + 4) = v141;
          HIDWORD(v163[1]) = *(_DWORD *)(v109 + 20);
          LOBYTE(v163[2]) = *(_BYTE *)(v109 + 24);
          *(_QWORD *)((char *)&v163[1] + 4) = *(_QWORD *)(v109 + 12);
          LODWORD(v163[0]) = *(_DWORD *)(v109 + 28);
          v142 = *((_QWORD *)a5 + 3);
          if (!v142)
            break;
          LODWORD(v158) = v136;
          v143 = (*(uint64_t (**)(uint64_t, _OWORD *, char **))(*(_QWORD *)v142 + 48))(v142, v163, &v158);
          v144 = (uint64_t *)((char *)*v59 + 8 * (v136 >> 6));
          v145 = 1 << v136;
          if (!v143)
            goto LABEL_198;
          v137 = *v144 | v145;
LABEL_193:
          *v144 = v137;
          v138 = *((_QWORD *)this + 19) + v135;
          v139 = v163[0];
          v140 = v163[1];
          *(_DWORD *)(v138 + 32) = v163[2];
          *(_OWORD *)v138 = v139;
          *(_OWORD *)(v138 + 16) = v140;
          ++v136;
          v109 += 32;
          v135 += 36;
          if (v109 == v110)
            goto LABEL_199;
        }
        v144 = (uint64_t *)((char *)*v59 + 8 * (v136 >> 6));
        v145 = 1 << v136;
LABEL_198:
        v137 = *v144 & ~v145;
        goto LABEL_193;
      }
      v64 = *((_QWORD *)this + 3);
      if (v64 << 6 >= v63 && v62 <= (v64 << 6) - v63)
      {
        v65 = (unint64_t *)(*((_QWORD *)this + 1) + 8 * (v62 >> 6));
        v66 = *((_QWORD *)this + 2) & 0x3FLL;
        *((_QWORD *)this + 2) = v61;
LABEL_152:
        if (v63)
        {
          if ((_DWORD)v66)
          {
            if ((64 - v66) >= v63)
              v108 = v63;
            else
              v108 = (64 - v66);
            *v65++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v66 - v108)) & (-1 << v66));
            v63 -= v108;
          }
          if (v63 >= 0x40)
            bzero(v65, 8 * (v63 >> 6));
          if ((v63 & 0x3F) != 0)
            v65[v63 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v63 & 0x3F));
        }
        goto LABEL_162;
      }
      memset(v163, 0, 24);
      if (v60 < 0)
        goto LABEL_140;
      if ((unint64_t)(v64 << 6) > 0x3FFFFFFFFFFFFFFELL)
      {
        v103 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v103 = v64 << 7;
        if (v64 << 7 <= ((v61 + 63) & 0xFFFFFFFFFFFFFFC0))
          v103 = (v61 + 63) & 0xFFFFFFFFFFFFFFC0;
        if (!v103)
        {
          v105 = 0;
          v154 = v64;
          v106 = *v59;
          if ((uint64_t)v62 >= 1)
            goto LABEL_143;
          goto LABEL_149;
        }
        if ((v103 & 0x8000000000000000) != 0)
LABEL_140:
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      v104 = ((v103 - 1) >> 6) + 1;
      v105 = operator new(8 * v104);
      *v105 = 0;
      *(_QWORD *)&v163[1] = v104;
      v154 = v64;
      v106 = *v59;
      if ((uint64_t)v62 >= 1)
      {
LABEL_143:
        v66 = v62 >> 6;
        if (v62 >= 0x40)
        {
          v107 = v106;
          memmove(v105, v106, 8 * v66);
          v106 = v107;
        }
        v65 = &v105[v66];
        if ((v62 & 0x3F) != 0)
        {
          *v65 = *v65 & ~(0xFFFFFFFFFFFFFFFFLL >> -(v62 & 0x3F)) | *((_QWORD *)v106 + v66) & (0xFFFFFFFFFFFFFFFFLL >> -(v62 & 0x3F));
          LODWORD(v66) = v62 & 0x3F;
        }
        else
        {
          LODWORD(v66) = 0;
        }
        goto LABEL_150;
      }
LABEL_149:
      LODWORD(v66) = 0;
      v65 = v105;
LABEL_150:
      *((_QWORD *)this + 1) = v105;
      *((_QWORD *)this + 2) = v61;
      *((_QWORD *)this + 3) = *(_QWORD *)&v163[1];
      *((_QWORD *)&v163[0] + 1) = v62;
      *(_QWORD *)&v163[1] = v154;
      if (v106)
        operator delete(v106);
      goto LABEL_152;
    case 1:
      *(_QWORD *)&v163[0] = 0;
      DWORD2(v163[0]) = 1;
      BYTE12(v163[0]) = 1;
      LODWORD(v163[1]) = 0;
      WORD2(v163[1]) = 0;
      DWORD2(v163[1]) = 8;
      WORD6(v163[1]) = 0;
      BYTE14(v163[1]) = 0;
      *(_QWORD *)&v163[2] = 3;
      DWORD2(v163[2]) = 0;
      v6 = gcl::gpcc::HlsIo::parseGps((uint64_t)this, (_BYTE *)a2 + 5, v5, (uint64_t)v163, 0);
      if ((_DWORD)v6)
        return v6;
      v24 = (char *)*((_QWORD *)this + 13);
      v25 = (char *)*((_QWORD *)this + 14);
      if (v24 == v25)
        goto LABEL_30;
      v26 = (char *)*((_QWORD *)this + 13);
      while (*(_DWORD *)v26 != LODWORD(v163[0]))
      {
        v26 += 44;
        if (v26 == v25)
        {
LABEL_30:
          v27 = *((_QWORD *)this + 15);
          if ((unint64_t)v25 >= v27)
          {
            v71 = 0x2E8BA2E8BA2E8BA3 * ((v25 - v24) >> 2) + 1;
            if (v71 > 0x5D1745D1745D174)
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v72 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v27 - (_QWORD)v24) >> 2);
            if (2 * v72 > v71)
              v71 = 2 * v72;
            if (v72 >= 0x2E8BA2E8BA2E8BALL)
              v73 = 0x5D1745D1745D174;
            else
              v73 = v71;
            if (v73)
            {
              if (v73 > 0x5D1745D1745D174)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v74 = (char *)operator new(44 * v73);
            }
            else
            {
              v74 = 0;
            }
            v99 = &v74[4 * ((v25 - v24) >> 2)];
            v100 = v163[1];
            *(_OWORD *)v99 = v163[0];
            *((_OWORD *)v99 + 1) = v100;
            *(_OWORD *)(v99 + 28) = *(_OWORD *)((char *)&v163[1] + 12);
            v30 = v99 + 44;
            if (v24 != v25)
            {
              do
              {
                v101 = *(_OWORD *)(v25 - 44);
                v102 = *(_OWORD *)(v25 - 28);
                *((_OWORD *)v99 - 1) = *((_OWORD *)v25 - 1);
                *(_OWORD *)(v99 - 28) = v102;
                *(_OWORD *)(v99 - 44) = v101;
                v99 -= 44;
                v25 -= 44;
              }
              while (v25 != v24);
              v24 = (char *)*((_QWORD *)this + 13);
            }
            *((_QWORD *)this + 13) = v99;
            *((_QWORD *)this + 14) = v30;
            *((_QWORD *)this + 15) = &v74[44 * v73];
            if (v24)
              operator delete(v24);
          }
          else
          {
            v28 = v163[0];
            v29 = v163[1];
            *(_OWORD *)(v25 + 28) = *(_OWORD *)((char *)&v163[1] + 12);
            *(_OWORD *)v25 = v28;
            *((_OWORD *)v25 + 1) = v29;
            v30 = v25 + 44;
          }
          v6 = 0;
          *((_QWORD *)this + 14) = v30;
          return v6;
        }
      }
      return 0;
    case 2:
      v34 = (_OWORD *)((char *)this + 216);
      v33 = (_DWORD *)*((_QWORD *)this + 27);
      if (v33)
      {
        v35 = *((_DWORD *)this + 53);
        if (v35 >= 1)
        {
          for (i = 0; i < v35; ++i)
          {
            v37 = v33[1];
            *v33 += *((_DWORD *)this + 47);
            v33[1] = v37 + *((_DWORD *)this + 48);
            v33[2] += *((_DWORD *)this + 49);
            v33 = (_DWORD *)((char *)v33 + *((int *)this + 59));
            v35 = *((_DWORD *)this + 53);
          }
        }
        v38 = *((_QWORD *)a5 + 19);
        if (v38)
        {
          LODWORD(v158) = *((_DWORD *)this + 46);
          *(_QWORD *)&v163[0] = v35;
          (*(void (**)(uint64_t, char **, _OWORD *))(*(_QWORD *)v38 + 48))(v38, &v158, v163);
        }
        *v34 = 0u;
        *(_OWORD *)((char *)this + 232) = 0u;
      }
      v39 = 0;
      v6 = 0;
      v40 = 0;
      v41 = 0;
      *((_DWORD *)this + 53) = 0;
      v42 = (_DWORD *)((char *)this + 212);
      *((_DWORD *)this + 46) = -1;
      v43 = &v11[v5];
      v44 = -1;
      v45 = v11;
      break;
    case 3:
      *(_QWORD *)&v163[0] = 0;
      DWORD2(v163[0]) = 0;
      BYTE12(v163[0]) = 1;
      v163[1] = xmmword_189CFB410;
      LOBYTE(v163[2]) = 0;
      memset((char *)&v163[2] + 4, 0, 37);
      v6 = gcl::gpcc::HlsIo::parseAps((uint64_t)this, (unsigned __int8 *)a2 + 5, v5, (uint64_t)v163, 0);
      if ((_DWORD)v6)
        goto LABEL_132;
      v12 = (char *)*((_QWORD *)this + 16);
      v13 = (char *)*((_QWORD *)this + 17);
      if (v12 == v13)
        goto LABEL_20;
      v14 = (char *)*((_QWORD *)this + 16);
      do
      {
        if (*(_DWORD *)v14 == LODWORD(v163[0]))
        {
          v6 = 0;
          goto LABEL_132;
        }
        v14 += 80;
      }
      while (v14 != v13);
LABEL_20:
      v15 = *((_QWORD *)this + 18);
      if ((unint64_t)v13 >= v15)
      {
        v67 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 4) + 1;
        if (v67 > 0x333333333333333)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v68 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - (_QWORD)v12) >> 4);
        if (2 * v68 > v67)
          v67 = 2 * v68;
        if (v68 >= 0x199999999999999)
          v69 = 0x333333333333333;
        else
          v69 = v67;
        *(_QWORD *)&v160[16] = (char *)this + 144;
        if (v69)
        {
          if (v69 > 0x333333333333333)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v70 = (char *)operator new(80 * v69);
        }
        else
        {
          v70 = 0;
        }
        v84 = &v70[16 * ((v13 - v12) >> 4)];
        v158 = v70;
        v159 = v84;
        *(_QWORD *)v160 = v84;
        *(_QWORD *)&v160[8] = &v70[80 * v69];
        v153 = *(_QWORD *)&v160[8];
        v85 = v163[0];
        v86 = v163[1];
        *((_QWORD *)v84 + 5) = 0;
        *(_OWORD *)v84 = v85;
        *((_OWORD *)v84 + 1) = v86;
        *((_QWORD *)v84 + 6) = 0;
        v87 = (char **)(v84 + 48);
        v88 = (const void *)*((_QWORD *)&v163[2] + 1);
        *((_QWORD *)v84 + 4) = *(_QWORD *)&v163[2];
        *((_QWORD *)v84 + 7) = 0;
        v89 = *(_QWORD *)&v163[3] - (_QWORD)v88;
        if (*(const void **)&v163[3] != v88)
        {
          if (v89 < 0)
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v90 = (char *)operator new(*(_QWORD *)&v163[3] - (_QWORD)v88);
          *((_QWORD *)v84 + 5) = v90;
          *v87 = v90;
          v91 = &v90[8 * (v89 >> 3)];
          *((_QWORD *)v84 + 7) = v91;
          memcpy(v90, v88, v89);
          *v87 = v91;
        }
        v92 = &v70[16 * ((v13 - v12) >> 4)];
        *((_QWORD *)v92 + 8) = *(_QWORD *)&v163[4];
        v92[72] = BYTE8(v163[4]);
        v23 = v84 + 80;
        *(_QWORD *)v160 = v84 + 80;
        if (v12 == v13)
        {
          *((_QWORD *)this + 16) = v84;
          *((_QWORD *)this + 17) = v23;
          *((_QWORD *)this + 18) = v153;
        }
        else
        {
          do
          {
            v93 = *((_OWORD *)v13 - 5);
            v94 = *((_OWORD *)v13 - 4);
            *((_QWORD *)v84 - 6) = *((_QWORD *)v13 - 6);
            *((_OWORD *)v84 - 5) = v93;
            *((_OWORD *)v84 - 4) = v94;
            *((_QWORD *)v84 - 4) = 0;
            *((_QWORD *)v84 - 3) = 0;
            *(_OWORD *)(v84 - 40) = *(_OWORD *)(v13 - 40);
            *((_QWORD *)v84 - 3) = *((_QWORD *)v13 - 3);
            *((_QWORD *)v13 - 5) = 0;
            *((_QWORD *)v13 - 4) = 0;
            *((_QWORD *)v13 - 3) = 0;
            v95 = *((_QWORD *)v13 - 2);
            *(v84 - 8) = *(v13 - 8);
            *((_QWORD *)v84 - 2) = v95;
            v84 -= 80;
            v13 -= 80;
          }
          while (v13 != v12);
          v12 = (char *)*((_QWORD *)this + 16);
          v96 = (char *)*((_QWORD *)this + 17);
          *((_QWORD *)this + 16) = v84;
          v97 = *(char **)v160;
          *(_OWORD *)((char *)this + 136) = *(_OWORD *)v160;
          v23 = v97;
          while (v96 != v12)
          {
            v98 = (void *)*((_QWORD *)v96 - 5);
            if (v98)
            {
              *((_QWORD *)v96 - 4) = v98;
              operator delete(v98);
            }
            v96 -= 80;
          }
        }
        if (v12)
          operator delete(v12);
      }
      else
      {
        v16 = v163[0];
        v17 = v163[1];
        *((_QWORD *)v13 + 4) = *(_QWORD *)&v163[2];
        *((_QWORD *)v13 + 5) = 0;
        *(_OWORD *)v13 = v16;
        *((_OWORD *)v13 + 1) = v17;
        *((_QWORD *)v13 + 6) = 0;
        *((_QWORD *)v13 + 7) = 0;
        v18 = (const void *)*((_QWORD *)&v163[2] + 1);
        v19 = *(_QWORD *)&v163[3] - *((_QWORD *)&v163[2] + 1);
        if (*(_QWORD *)&v163[3] != *((_QWORD *)&v163[2] + 1))
        {
          if (v19 < 0)
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v20 = (char *)operator new(*(_QWORD *)&v163[3] - *((_QWORD *)&v163[2] + 1));
          *((_QWORD *)v13 + 5) = v20;
          *((_QWORD *)v13 + 6) = v20;
          v21 = &v20[8 * (v19 >> 3)];
          *((_QWORD *)v13 + 7) = v21;
          memcpy(v20, v18, v19);
          *((_QWORD *)v13 + 6) = v21;
        }
        v22 = *(_QWORD *)&v163[4];
        v13[72] = BYTE8(v163[4]);
        *((_QWORD *)v13 + 8) = v22;
        v23 = v13 + 80;
        *((_QWORD *)this + 17) = v13 + 80;
      }
      v6 = 0;
      *((_QWORD *)this + 17) = v23;
LABEL_132:
      if (*((_QWORD *)&v163[2] + 1))
      {
        *(_QWORD *)&v163[3] = *((_QWORD *)&v163[2] + 1);
        operator delete(*((void **)&v163[2] + 1));
      }
      return v6;
    case 4:
      v161[0] = 0;
      *(_QWORD *)v162 = 0;
      v6 = gcl::gpcc::HlsIo::parseAbhIds(this, (const unsigned __int8 *)a2 + 5, v5, v162, &v162[1], v161);
      if ((_DWORD)v6)
        return v6;
      v56 = v162[1];
      if (v162[1] < 0 || v162[1] >= *((_DWORD *)this + 4) || v162[0] != *((_DWORD *)this + 46))
        return 3;
      if (*((_BYTE *)this + 3)
        || ((*(_QWORD *)(*((_QWORD *)this + 1) + (((unint64_t)v162[1] >> 3) & 0x1FFFFFF8)) >> SLOBYTE(v162[1])) & 1) == 0)
      {
        return 0;
      }
      v58 = (_DWORD *)*((_QWORD *)this + 16);
      v57 = (_DWORD *)*((_QWORD *)this + 17);
      if (v58 == v57)
        return 3;
      v6 = 3;
      while (*v58 != v161[0])
      {
        v58 += 20;
        if (v58 == v57)
          return v6;
      }
      if (v58[1] != *((_DWORD *)this + 8))
        return 3;
      v146 = *((_QWORD *)a5 + 15);
      if (!v146)
        return 5;
      v147 = *((_QWORD *)this + 10);
      memset(v163, 0, 32);
      v149 = (char *)*((int *)this + 53);
      v148 = (int *)((char *)this + 212);
      v150 = *(_QWORD *)(v148 - 15) + 36 * v162[1];
      LODWORD(v156) = v162[1];
      v158 = v149;
      (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, __int128 *, char **))(*(_QWORD *)v146 + 48))(v163, v146, v150, &v156, &v158);
      v151 = *v148;
      v152 = *(_DWORD *)(v147 + 32 * v56);
      if (*((_QWORD *)&v163[0] + 1) < (unint64_t)(v152 * *v148))
        return 1;
      v6 = 5;
      switch(LODWORD(v163[1]))
      {
        case 1:
          return gcl::gpcc::RawAttributeDecoder::decode((uint64_t)&v158, (uint64_t)v58, v151, *(_BYTE **)&v163[0], v152, *(_DWORD *)(v147 + 32 * v56 + 8), SDWORD1(v163[1]), v11, v5);
        case 2:
          return gcl::gpcc::RawAttributeDecoder::decode((uint64_t)&v158, (uint64_t)v58, v151, *(char **)&v163[0], v152, *(_DWORD *)(v147 + 32 * v56 + 8), SDWORD1(v163[1]), v11, v5);
        case 4:
          return gcl::gpcc::RawAttributeDecoder::decode((uint64_t)&v158, (uint64_t)v58, v151, *(char **)&v163[0], v152, *(_DWORD *)(v147 + 32 * v56 + 8), SDWORD1(v163[1]), v11, v5);
        case 8:
          return gcl::gpcc::RawAttributeDecoder::decode((uint64_t)&v158, (uint64_t)v58, v151, *(char **)&v163[0], v152, *(_DWORD *)(v147 + 32 * v56 + 8), SDWORD1(v163[1]), v11, v5);
        default:
          return v6;
      }
      return v6;
    case 5:
      return v6;
    default:
      if (v10 == 255)
      {
        if (!(_DWORD)v5)
          return 3;
        if (*v11)
        {
          return 4;
        }
        else
        {
          v6 = 0;
          *((_BYTE *)this + 1) = 1;
        }
      }
      else
      {
        v31 = *((_QWORD *)a5 + 23);
        if (!v31)
          return 5;
        v155[0] = a2 + 5;
        v155[1] = v5;
        v155[2] = v5;
        LODWORD(v163[0]) = v10;
        return (*(uint64_t (**)(uint64_t, _OWORD *, _QWORD *))(*(_QWORD *)v31 + 48))(v31, v163, v155);
      }
      return v6;
  }
  do
  {
    v48 = v44;
    if (!v41)
    {
      if (v45 == v43)
      {
        v41 = 0;
        v6 = 3;
        v45 = &v11[v5];
        ++v44;
        continue;
      }
      v46 = *v45++;
      v39 = v46;
      v41 = 128;
    }
    v47 = (v41 & v39) != 0;
    v40 = v41 >> 1;
    v41 >>= 1;
    ++v44;
    if (v47)
      break;
  }
  while ((v48 + 1) < 0x3F);
  v49 = 0;
  if ((_DWORD)v44)
  {
    v50 = (v48 & 0x3F) + 1;
    while (1)
    {
      if (v40)
        goto LABEL_52;
      if (v45 == v43)
      {
        v40 = 0;
        v6 = 3;
        v45 = &v11[v5];
        v49 *= 2;
        if (!--v50)
          break;
      }
      else
      {
        v51 = *v45++;
        v39 = v51;
        v40 = 128;
LABEL_52:
        v52 = (v40 & v39) != 0;
        v40 >>= 1;
        v49 = (2 * v49) | v52;
        if (!--v50)
          break;
      }
    }
  }
  if (!(_DWORD)v6)
  {
    v54 = (_DWORD *)*((_QWORD *)this + 13);
    v53 = (_DWORD *)*((_QWORD *)this + 14);
    if (v54 == v53)
      return 3;
    v55 = (char *)this + 176;
    v6 = 3;
    while (*v54 != (v49 | (1 << v44)) - 1)
    {
      v54 += 11;
      if (v54 == v53)
        return v6;
    }
    if (v54[1] != *((_DWORD *)this + 8))
      return 3;
    *(_QWORD *)v161 = 0;
    v6 = gcl::gpcc::HlsIo::parseGsh((uint64_t)this, v11, v5, (uint64_t)v54, (_DWORD *)this + 44, v161);
    if (!(_DWORD)v6)
    {
      v75 = *((_DWORD *)this + 51);
      if (v75 > 0x15)
        return 5;
      v158 = *(char **)((char *)this + 188);
      LODWORD(v159) = *((_DWORD *)this + 49);
      HIDWORD(v159) = 1 << v75;
      *(_DWORD *)v160 = 1 << v75;
      *(_DWORD *)&v160[4] = 1 << v75;
      *(_DWORD *)&v160[8] = *((_DWORD *)this + 52);
      *(_QWORD *)&v160[12] = *((_QWORD *)this + 6);
      *(_DWORD *)&v160[20] = *((_DWORD *)this + 14);
      *((_BYTE *)this + 3) = 0;
      v76 = *((_QWORD *)a5 + 7);
      if (v76)
      {
        v77 = *((_DWORD *)this + 45);
        LODWORD(v163[0]) = *((_DWORD *)this + 46);
        LODWORD(v156) = v77;
        v78 = (*(uint64_t (**)(uint64_t, _OWORD *, __int128 *, char **))(*(_QWORD *)v76 + 48))(v76, v163, &v156, &v158);
        *((_BYTE *)this + 3) = v78 ^ 1;
        if (((v78 ^ 1) & 1) != 0)
          return 0;
      }
      v79 = *((_QWORD *)a5 + 11);
      if (!v79)
        return 5;
      v80 = *((unsigned int *)this + 52);
      if ((v80 - 2097153) < 0xFFE00000)
        return 5;
      v156 = 0u;
      v157 = 0u;
      *(_QWORD *)&v163[0] = v80;
      (*(void (**)(__int128 *__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)v79 + 48))(&v156, v79, v163);
      if (!(_QWORD)v156)
        return 5;
      if (*((_QWORD *)&v156 + 1) < (unint64_t)(3 * *((int *)this + 52)))
      {
        return 1;
      }
      else if ((_DWORD)v157 == 4)
      {
        v81 = v157;
        *v34 = v156;
        *(_OWORD *)((char *)this + 232) = v81;
        v82 = *((_QWORD *)this + 27);
        v83 = *((_DWORD *)this + 59);
        gcl::gpcc::GeometryDecoderBasic::GeometryDecoderBasic((gcl::gpcc::GeometryDecoderBasic *)v163);
        v6 = gcl::gpcc::GeometryDecoderBasic::decodeSlice((uint64_t)v163, (uint64_t)v54, (uint64_t)v55, &v11[*(_QWORD *)v161], (int)v5 - v161[0], v82, v83, v42);
        gcl::gpcc::GeometryDecoderBasic::~GeometryDecoderBasic((gcl::gpcc::GeometryDecoderBasic *)v163);
      }
      else
      {
        return 6;
      }
    }
  }
  return v6;
}

void sub_1886C88C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  gcl::gpcc::GeometryDecoderBasic::~GeometryDecoderBasic((gcl::gpcc::GeometryDecoderBasic *)&a27);
  _Unwind_Resume(a1);
}

void sub_1886C88DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gcl::gpcc::HlsIo::parseAps(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  _BOOL4 v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  int v52;
  _BOOL4 v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int v62;
  _BOOL4 v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  int v70;
  BOOL v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  int v75;
  _BOOL4 v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  int v85;
  _BOOL4 v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  int v90;
  BOOL v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  int v95;
  _BOOL4 v96;
  int v97;
  BOOL v98;
  uint64_t v99;
  unsigned int v100;
  int v101;
  int v102;
  BOOL v103;
  uint64_t v104;
  int v105;
  unsigned int v106;
  int v107;
  _BOOL4 v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t result;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  BOOL v121;
  uint64_t v122;
  BOOL v123;
  int v124;
  unsigned int v125;
  int v126;
  _BOOL4 v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  BOOL v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  _BOOL4 v137;
  int v138;
  BOOL v139;
  unsigned int v140;
  BOOL v141;
  unsigned __int8 *v142;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = &a2[a3];
  v13 = -1;
  v14 = a2;
  do
  {
    v15 = v13;
    if (!v11)
    {
      if (v14 == v12)
      {
        v11 = 0;
        v10 = 3;
        v14 = &a2[a3];
        ++v13;
        continue;
      }
      v16 = *v14++;
      v8 = v16;
      v11 = 128;
    }
    v17 = (v11 & v8) != 0;
    v9 = v11 >> 1;
    v11 >>= 1;
    ++v13;
    if (v17)
      break;
  }
  while ((v15 + 1) < 0x3F);
  v18 = 0;
  if ((_DWORD)v13)
  {
    v19 = (v15 & 0x3F) + 1;
    v20 = v9;
    while (1)
    {
      if (v20)
        goto LABEL_12;
      if (v14 == v12)
      {
        v20 = 0;
        v10 = 3;
        v14 = &a2[a3];
        v18 *= 2;
        if (!--v19)
          break;
      }
      else
      {
        v21 = *v14++;
        v8 = v21;
        v20 = 128;
LABEL_12:
        v22 = (v20 & v8) != 0;
        v9 = v20 >> 1;
        v20 >>= 1;
        v18 = (2 * v18) | v22;
        if (!--v19)
          break;
      }
    }
  }
  *(_DWORD *)a4 = (v18 | (1 << v13)) - 1;
  v23 = -1;
  v24 = v9;
  while (2)
  {
    v25 = v23;
    if (v24)
    {
LABEL_20:
      v27 = (v24 & v8) != 0;
      v9 = v24 >> 1;
      v24 >>= 1;
      ++v23;
      if (v27)
        break;
    }
    else
    {
      if (v14 != v12)
      {
        v26 = *v14++;
        v8 = v26;
        v24 = 128;
        goto LABEL_20;
      }
      v24 = 0;
      v10 = 3;
      v14 = &a2[a3];
      ++v23;
    }
    if ((v25 + 1) < 0x3F)
      continue;
    break;
  }
  v28 = 0;
  if ((_DWORD)v23)
  {
    v29 = (v25 & 0x3F) + 1;
    v30 = v9;
    while (1)
    {
      if (v30)
        goto LABEL_27;
      if (v14 == v12)
      {
        v30 = 0;
        v10 = 3;
        v14 = &a2[a3];
        v28 *= 2;
        if (!--v29)
          break;
      }
      else
      {
        v31 = *v14++;
        v8 = v31;
        v30 = 128;
LABEL_27:
        v32 = (v30 & v8) != 0;
        v9 = v30 >> 1;
        v30 >>= 1;
        v28 = (2 * v28) | v32;
        if (!--v29)
          break;
      }
    }
  }
  *(_DWORD *)(a4 + 4) = (v28 | (1 << v23)) - 1;
  v33 = -1;
  v34 = v9;
  while (2)
  {
    v35 = v33;
    if (v34)
    {
LABEL_35:
      v37 = (v34 & v8) != 0;
      v9 = v34 >> 1;
      v34 >>= 1;
      ++v33;
      if (v37)
        break;
    }
    else
    {
      if (v14 != v12)
      {
        v36 = *v14++;
        v8 = v36;
        v34 = 128;
        goto LABEL_35;
      }
      v34 = 0;
      v10 = 3;
      v14 = &a2[a3];
      ++v33;
    }
    if ((v35 + 1) < 0x3F)
      continue;
    break;
  }
  v38 = 0;
  if ((_DWORD)v33)
  {
    v39 = (v35 & 0x3F) + 1;
    v40 = v9;
    while (1)
    {
      if (v40)
        goto LABEL_42;
      if (v14 == v12)
      {
        v40 = 0;
        v10 = 3;
        v14 = &a2[a3];
        v38 *= 2;
        if (!--v39)
          break;
      }
      else
      {
        v41 = *v14++;
        v8 = v41;
        v40 = 128;
LABEL_42:
        v42 = (v40 & v8) != 0;
        v9 = v40 >> 1;
        v40 >>= 1;
        v38 = (2 * v38) | v42;
        if (!--v39)
          break;
      }
    }
  }
  v43 = v38 | (1 << v33);
  *(_DWORD *)(a4 + 8) = v43 - 1;
  v44 = -1;
  v45 = v9;
  while (2)
  {
    v46 = v44;
    if (v45)
    {
LABEL_50:
      v48 = (v45 & v8) != 0;
      v9 = v45 >> 1;
      v45 >>= 1;
      ++v44;
      if (v48)
        break;
    }
    else
    {
      if (v14 != v12)
      {
        v47 = *v14++;
        v8 = v47;
        v45 = 128;
        goto LABEL_50;
      }
      v45 = 0;
      v10 = 3;
      v14 = &a2[a3];
      ++v44;
    }
    if ((v46 + 1) < 0x3F)
      continue;
    break;
  }
  v49 = 0;
  if ((_DWORD)v44)
  {
    v50 = (v46 & 0x3F) + 1;
    v51 = v9;
    while (1)
    {
      if (v51)
        goto LABEL_57;
      if (v14 == v12)
      {
        v51 = 0;
        v10 = 3;
        v14 = &a2[a3];
        v49 *= 2;
        if (!--v50)
          break;
      }
      else
      {
        v52 = *v14++;
        v8 = v52;
        v51 = 128;
LABEL_57:
        v53 = (v51 & v8) != 0;
        v9 = v51 >> 1;
        v51 >>= 1;
        v49 = (2 * v49) | v53;
        if (!--v50)
          break;
      }
    }
  }
  *(_DWORD *)(a4 + 64) = (v49 | (1 << v44)) - 1;
  v54 = -1;
  v55 = v9;
  while (2)
  {
    v56 = v54;
    if (v55)
    {
LABEL_65:
      v58 = (v55 & v8) != 0;
      v9 = v55 >> 1;
      v55 >>= 1;
      ++v54;
      if (v58)
        break;
    }
    else
    {
      if (v14 != v12)
      {
        v57 = *v14++;
        v8 = v57;
        v55 = 128;
        goto LABEL_65;
      }
      v55 = 0;
      v10 = 3;
      v14 = &a2[a3];
      ++v54;
    }
    if ((v56 + 1) < 0x3F)
      continue;
    break;
  }
  v59 = 0;
  if ((_DWORD)v54)
  {
    v60 = (v56 & 0x3F) + 1;
    v61 = v9;
    while (1)
    {
      if (v61)
        goto LABEL_72;
      if (v14 == v12)
      {
        v61 = 0;
        v10 = 3;
        v14 = &a2[a3];
        v59 *= 2;
        if (!--v60)
          break;
      }
      else
      {
        v62 = *v14++;
        v8 = v62;
        v61 = 128;
LABEL_72:
        v63 = (v61 & v8) != 0;
        v9 = v61 >> 1;
        v61 >>= 1;
        v59 = (2 * v59) | v63;
        if (!--v60)
          break;
      }
    }
  }
  v64 = (v59 | (1 << v54)) - 1;
  if ((v64 & 1) != 0)
    v64 = ((v64 & 1) + v64) >> 1;
  else
    LODWORD(v64) = -(int)(((v64 & 1) + v64) >> 1);
  *(_DWORD *)(a4 + 68) = v64;
  if (v9)
  {
LABEL_82:
    v66 = v9 >> 1;
    *(_BYTE *)(a4 + 72) = (v9 & v8) != 0;
    if ((v43 | 2) != 3)
      goto LABEL_175;
    goto LABEL_83;
  }
  if (v14 != v12)
  {
    v65 = *v14++;
    v8 = v65;
    v9 = 128;
    goto LABEL_82;
  }
  v66 = 0;
  v10 = 3;
  v14 = &a2[a3];
  *(_BYTE *)(a4 + 72) = 0;
  if ((v43 | 2) == 3)
  {
LABEL_83:
    v67 = -1;
    v68 = v66;
    while (1)
    {
      v69 = v67;
      if (v68)
        goto LABEL_87;
      if (v14 != v12)
        break;
      v68 = 0;
      v10 = 3;
      v14 = &a2[a3];
      ++v67;
LABEL_88:
      if ((v69 + 1) >= 0x3F)
      {
LABEL_91:
        v72 = 0;
        if ((_DWORD)v67)
        {
          v73 = (v69 & 0x3F) + 1;
          v74 = v66;
          while (1)
          {
            if (v74)
              goto LABEL_94;
            if (v14 == v12)
            {
              v74 = 0;
              v10 = 3;
              v14 = &a2[a3];
              v72 *= 2;
              if (!--v73)
                break;
            }
            else
            {
              v75 = *v14++;
              v8 = v75;
              v74 = 128;
LABEL_94:
              v76 = (v74 & v8) != 0;
              v66 = v74 >> 1;
              v74 >>= 1;
              v72 = (2 * v72) | v76;
              if (!--v73)
                break;
            }
          }
        }
        *(_DWORD *)(a4 + 16) = (v72 | (1 << v67)) - 1;
        v77 = -1;
        v78 = v66;
        while (2)
        {
          v79 = v77;
          if (v78)
          {
LABEL_102:
            v81 = (v78 & v8) != 0;
            v66 = v78 >> 1;
            v78 >>= 1;
            ++v77;
            if (v81)
              break;
          }
          else
          {
            if (v14 != v12)
            {
              v80 = *v14++;
              v8 = v80;
              v78 = 128;
              goto LABEL_102;
            }
            v78 = 0;
            v10 = 3;
            v14 = &a2[a3];
            ++v77;
          }
          if ((v79 + 1) < 0x3F)
            continue;
          break;
        }
        v82 = 0;
        if ((_DWORD)v77)
        {
          v83 = (v79 & 0x3F) + 1;
          v84 = v66;
          while (1)
          {
            if (v84)
              goto LABEL_109;
            if (v14 == v12)
            {
              v84 = 0;
              v10 = 3;
              v14 = &a2[a3];
              v82 *= 2;
              if (!--v83)
                break;
            }
            else
            {
              v85 = *v14++;
              v8 = v85;
              v84 = 128;
LABEL_109:
              v86 = (v84 & v8) != 0;
              v66 = v84 >> 1;
              v84 >>= 1;
              v82 = (2 * v82) | v86;
              if (!--v83)
                break;
            }
          }
        }
        *(_DWORD *)(a4 + 20) = (v82 | (1 << v77)) - 1;
        v87 = -1;
        v88 = v66;
        while (2)
        {
          v89 = v87;
          if (v88)
          {
LABEL_117:
            v91 = (v88 & v8) != 0;
            v66 = v88 >> 1;
            v88 >>= 1;
            ++v87;
            if (v91)
              break;
          }
          else
          {
            if (v14 != v12)
            {
              v90 = *v14++;
              v8 = v90;
              v88 = 128;
              goto LABEL_117;
            }
            v88 = 0;
            v10 = 3;
            v14 = &a2[a3];
            ++v87;
          }
          if ((v89 + 1) < 0x3F)
            continue;
          break;
        }
        v92 = 0;
        if ((_DWORD)v87)
        {
          v93 = (v89 & 0x3F) + 1;
          v94 = v66;
          while (1)
          {
            if (v94)
              goto LABEL_124;
            if (v14 == v12)
            {
              v94 = 0;
              v10 = 3;
              v14 = &a2[a3];
              v92 *= 2;
              if (!--v93)
                break;
            }
            else
            {
              v95 = *v14++;
              v8 = v95;
              v94 = 128;
LABEL_124:
              v96 = (v94 & v8) != 0;
              v66 = v94 >> 1;
              v94 >>= 1;
              v92 = (2 * v92) | v96;
              if (!--v93)
                break;
            }
          }
        }
        *(_DWORD *)(a4 + 28) = (v92 | (1 << v87)) - 1;
        if (v66)
        {
LABEL_131:
          v98 = (v66 & v8) != 0;
          v66 = v66 >> 1;
        }
        else
        {
          if (v14 != v12)
          {
            v97 = *v14++;
            v8 = v97;
            v66 = 128;
            goto LABEL_131;
          }
          v66 = 0;
          v98 = 0;
          v10 = 3;
          v14 = &a2[a3];
        }
        *(_BYTE *)(a4 + 12) = v98;
        v99 = -1;
        v100 = v66;
        while (2)
        {
          v101 = v99;
          if (v100)
          {
LABEL_136:
            v103 = (v100 & v8) != 0;
            v66 = v100 >> 1;
            v100 >>= 1;
            ++v99;
            if (v103)
              break;
          }
          else
          {
            if (v14 != v12)
            {
              v102 = *v14++;
              v8 = v102;
              v100 = 128;
              goto LABEL_136;
            }
            v100 = 0;
            v10 = 3;
            v14 = &a2[a3];
            ++v99;
          }
          if ((v101 + 1) < 0x3F)
            continue;
          break;
        }
        v104 = 0;
        if ((_DWORD)v99)
        {
          v105 = (v101 & 0x3F) + 1;
          v106 = v66;
          while (1)
          {
            if (v106)
              goto LABEL_143;
            if (v14 == v12)
            {
              v106 = 0;
              v10 = 3;
              v14 = &a2[a3];
              v104 *= 2;
              if (!--v105)
                break;
            }
            else
            {
              v107 = *v14++;
              v8 = v107;
              v106 = 128;
LABEL_143:
              v108 = (v106 & v8) != 0;
              v66 = v106 >> 1;
              v106 >>= 1;
              v104 = (2 * v104) | v108;
              if (!--v105)
                break;
            }
          }
        }
        v109 = (v104 | (1 << v99)) - 1;
        *(_DWORD *)(a4 + 36) = v109;
        if ((v109 & 0x80000000) != 0)
          return 3;
        v110 = *(_QWORD *)(a4 + 40);
        v111 = (*(_QWORD *)(a4 + 48) - v110) >> 3;
        if (v109 <= v111)
        {
          if (v109 < v111)
            *(_QWORD *)(a4 + 48) = v110 + 8 * v109;
        }
        else
        {
          std::vector<long long>::__append(a4 + 40, v109 - v111);
          v109 = *(_DWORD *)(a4 + 36);
        }
        if ((int)v109 < 1)
          goto LABEL_175;
        v113 = 0;
        v114 = *(_QWORD *)(a4 + 40);
LABEL_157:
        v116 = 0;
        v117 = 63;
        v118 = v66;
        while (1)
        {
          v119 = v117;
          if (v118)
            goto LABEL_161;
          if (v14 != v12)
            break;
          v118 = 0;
          v10 = 3;
          v14 = v12;
          v122 = v116 + 1;
LABEL_162:
          v117 = v119 + 1;
          v123 = v116 >= 0x3F;
          v116 = v122;
          if (v123)
          {
LABEL_166:
            if ((_DWORD)v122 == 1)
            {
              v115 = 0;
LABEL_156:
              *(_QWORD *)(v114 + 8 * v113++) = (v115 | (1 << (v122 - 1))) - 1;
              if (v113 == v109)
                goto LABEL_175;
              goto LABEL_157;
            }
            v115 = 0;
            v124 = (v119 & 0x3F) + 1;
            v125 = v66;
            while (1)
            {
LABEL_170:
              if (v125)
                goto LABEL_169;
              if (v14 != v12)
                break;
              v125 = 0;
              v10 = 3;
              v14 = v12;
              v115 *= 2;
              if (!--v124)
                goto LABEL_156;
            }
            v126 = *v14++;
            v8 = v126;
            v125 = 128;
LABEL_169:
            v127 = (v125 & v8) != 0;
            v66 = v125 >> 1;
            v125 >>= 1;
            v115 = (2 * v115) | v127;
            if (!--v124)
              goto LABEL_156;
            goto LABEL_170;
          }
        }
        v120 = *v14++;
        v8 = v120;
        v118 = 128;
LABEL_161:
        v121 = (v118 & v8) != 0;
        v66 = v118 >> 1;
        v118 >>= 1;
        v122 = v116 + 1;
        if (v121)
          goto LABEL_166;
        goto LABEL_162;
      }
    }
    v70 = *v14++;
    v8 = v70;
    v68 = 128;
LABEL_87:
    v71 = (v68 & v8) != 0;
    v66 = v68 >> 1;
    v68 >>= 1;
    ++v67;
    if (v71)
      goto LABEL_91;
    goto LABEL_88;
  }
LABEL_175:
  *(_BYTE *)(a4 + 32) = 0;
  if (*(_DWORD *)(a4 + 8))
    goto LABEL_196;
  v128 = -1;
  v129 = v66;
  while (2)
  {
    v130 = v128;
    if (v129)
    {
LABEL_180:
      v132 = (v129 & v8) != 0;
      v66 = v129 >> 1;
      v129 >>= 1;
      ++v128;
      if (v132)
        break;
    }
    else
    {
      if (v14 != v12)
      {
        v131 = *v14++;
        v8 = v131;
        v129 = 128;
        goto LABEL_180;
      }
      v129 = 0;
      v10 = 3;
      v14 = v12;
      ++v128;
    }
    if ((v130 + 1) < 0x3F)
      continue;
    break;
  }
  v133 = 0;
  if ((_DWORD)v128)
  {
    v134 = (v130 & 0x3F) + 1;
    v135 = v66;
    while (1)
    {
      if (v135)
        goto LABEL_187;
      if (v14 == v12)
      {
        v135 = 0;
        v10 = 3;
        v14 = v12;
        v133 *= 2;
        if (!--v134)
          break;
      }
      else
      {
        v136 = *v14++;
        v8 = v136;
        v135 = 128;
LABEL_187:
        v137 = (v135 & v8) != 0;
        v66 = v135 >> 1;
        v135 >>= 1;
        v133 = (2 * v133) | v137;
        if (!--v134)
          break;
      }
    }
  }
  *(_DWORD *)(a4 + 24) = (v133 | (1 << v128)) - 1;
  if (v66)
  {
LABEL_194:
    v139 = (v66 & v8) != 0;
    v66 >>= 1;
  }
  else
  {
    if (v14 != v12)
    {
      v138 = *v14++;
      v8 = v138;
      v66 = 128;
      goto LABEL_194;
    }
    v66 = 0;
    v139 = 0;
    v10 = 3;
    v14 = v12;
  }
  *(_BYTE *)(a4 + 32) = v139;
LABEL_196:
  if (v14 == v12)
    v140 = 3;
  else
    v140 = v10;
  if (v66)
    result = v10;
  else
    result = v140;
  if (a5)
  {
    if (v66)
      v141 = 1;
    else
      v141 = v14 == v12;
    if (v141)
      v142 = v14;
    else
      v142 = v14 + 1;
    *a5 = v142 - a2;
  }
  return result;
}

uint64_t gcl::gpcc::HlsIo::parseAbhIds(gcl::gpcc::HlsIo *this, const unsigned __int8 *a2, uint64_t a3, int *a4, int *a5, int *a6)
{
  int v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  const unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  _BOOL4 v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  int v37;
  _BOOL4 v38;

  v6 = 0;
  v7 = 0;
  result = 0;
  v9 = 0;
  v10 = &a2[a3];
  v11 = -1;
  do
  {
    v12 = v11;
    if (!v9)
    {
      if (a2 == v10)
      {
        v9 = 0;
        result = 3;
        a2 = v10;
        ++v11;
        continue;
      }
      v13 = *a2++;
      v6 = v13;
      v9 = 128;
    }
    v14 = (v9 & v6) != 0;
    v7 = v9 >> 1;
    v9 >>= 1;
    ++v11;
    if (v14)
      break;
  }
  while ((v12 + 1) < 0x3F);
  v15 = 0;
  if ((_DWORD)v11)
  {
    v16 = (v12 & 0x3F) + 1;
    v17 = v7;
    while (1)
    {
      if (v17)
        goto LABEL_12;
      if (a2 == v10)
      {
        v17 = 0;
        result = 3;
        a2 = v10;
        v15 *= 2;
        if (!--v16)
          break;
      }
      else
      {
        v18 = *a2++;
        v6 = v18;
        v17 = 128;
LABEL_12:
        v19 = (v17 & v6) != 0;
        v7 = v17 >> 1;
        v17 >>= 1;
        v15 = (2 * v15) | v19;
        if (!--v16)
          break;
      }
    }
  }
  *a6 = (v15 | (1 << v11)) - 1;
  v20 = -1;
  v21 = v7;
  while (2)
  {
    v22 = v20;
    if (v21)
    {
LABEL_20:
      v24 = (v21 & v6) != 0;
      v7 = v21 >> 1;
      v21 >>= 1;
      ++v20;
      if (v24)
        break;
    }
    else
    {
      if (a2 != v10)
      {
        v23 = *a2++;
        v6 = v23;
        v21 = 128;
        goto LABEL_20;
      }
      v21 = 0;
      result = 3;
      a2 = v10;
      ++v20;
    }
    if ((v22 + 1) < 0x3F)
      continue;
    break;
  }
  v25 = 0;
  if ((_DWORD)v20)
  {
    v26 = (v22 & 0x3F) + 1;
    v27 = v7;
    while (1)
    {
      if (v27)
        goto LABEL_27;
      if (a2 == v10)
      {
        v27 = 0;
        result = 3;
        a2 = v10;
        v25 *= 2;
        if (!--v26)
          break;
      }
      else
      {
        v28 = *a2++;
        v6 = v28;
        v27 = 128;
LABEL_27:
        v29 = (v27 & v6) != 0;
        v7 = v27 >> 1;
        v27 >>= 1;
        v25 = (2 * v25) | v29;
        if (!--v26)
          break;
      }
    }
  }
  *a5 = (v25 | (1 << v20)) - 1;
  v30 = -1;
  v31 = v7;
  while (2)
  {
    v32 = v30;
    if (v31)
    {
LABEL_35:
      v34 = (v31 & v6) != 0;
      v7 = v31 >> 1;
      v31 >>= 1;
      ++v30;
      if (v34)
        break;
    }
    else
    {
      if (a2 != v10)
      {
        v33 = *a2++;
        v6 = v33;
        v31 = 128;
        goto LABEL_35;
      }
      v31 = 0;
      result = 3;
      a2 = v10;
      ++v30;
    }
    if ((v32 + 1) < 0x3F)
      continue;
    break;
  }
  v35 = 0;
  if ((_DWORD)v30)
  {
    v36 = (v32 & 0x3F) + 1;
    while (1)
    {
      if (v7)
        goto LABEL_42;
      if (a2 == v10)
      {
        v7 = 0;
        result = 3;
        a2 = v10;
        v35 *= 2;
        if (!--v36)
          break;
      }
      else
      {
        v37 = *a2++;
        v6 = v37;
        v7 = 128;
LABEL_42:
        v38 = (v7 & v6) != 0;
        v7 >>= 1;
        v35 = (2 * v35) | v38;
        if (!--v36)
          break;
      }
    }
  }
  *a4 = (v35 | (1 << v30)) - 1;
  return result;
}

double std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::operator()(uint64_t a1, int *a2, int *a3)
{
  _DWORD *v4;
  int v5;
  double **v6;
  int v7;
  int v8;
  int v9;
  double *v10;
  double result;
  double *v12;

  v4 = *(_DWORD **)(a1 + 8);
  v5 = *a2;
  if (*v4 != *a2 && v4[1] != v5 && v4[2] != v5 && v4[3] != v5)
  {
    v6 = *(double ***)(a1 + 16);
    v7 = *a3;
    v8 = v5 - 1936749072;
    v9 = a2[3];
    v10 = (double *)operator new(0x40uLL);
    *((_DWORD *)v10 + 4) = v7;
    *((_DWORD *)v10 + 5) = v8;
    result = *(double *)(a2 + 1);
    v10[3] = result;
    *((_DWORD *)v10 + 8) = v9;
    v12 = *v6;
    *(_QWORD *)v10 = *v6;
    *((_QWORD *)v10 + 1) = v6;
    *((_QWORD *)v12 + 1) = v10;
    *v6 = v10;
    v6[2] = (double *)((char *)v6[2] + 1);
  }
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::operator()@<X0>(uint64_t result@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v5 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v6 = *a2;
  v7 = *a3;
  v8 = *(_QWORD *)(v5 + 1168);
  *(_QWORD *)(a4 + 8) = (*(_QWORD *)(v5 + 1176) - v8) >> 5;
  *(_DWORD *)(a4 + 20) = 32;
  switch(v6)
  {
    case 1936749056:
      *(_QWORD *)a4 = v8;
      *(_DWORD *)(a4 + 16) = 8;
      *(_BYTE *)(a4 + 24) = 1;
      break;
    case 1936749057:
      *(_QWORD *)a4 = v8 + 28;
      *(_DWORD *)(a4 + 16) = 2;
      *(_BYTE *)(a4 + 24) = 1;
      *(_BYTE *)(v5 + 1149) = 1;
      break;
    case 1936749058:
      *(_QWORD *)a4 = v8 + 20;
      *(_DWORD *)(a4 + 16) = 4;
      *(_BYTE *)(a4 + 24) = 0;
      break;
    case 1936749059:
      *(_QWORD *)a4 = v8 + 24;
      *(_DWORD *)(a4 + 16) = 4;
      *(_BYTE *)(a4 + 24) = 0;
      break;
    default:
      v9 = *(_QWORD *)(v4 + 8);
      if (v9 == v4)
      {
LABEL_6:
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
      else
      {
        while (*(_DWORD *)(v9 + 16) != v7)
        {
          v9 = *(_QWORD *)(v9 + 8);
          if (v9 == v4)
            goto LABEL_6;
        }
        v10 = *(_DWORD *)(v9 + 48);
        v11 = *(int *)(v9 + 52);
        *(_QWORD *)a4 = *(_QWORD *)(v9 + 40);
        *(_QWORD *)(a4 + 8) = v11;
        v12 = *(_DWORD *)(v9 + 56);
        *(_DWORD *)(a4 + 16) = v10;
        *(_DWORD *)(a4 + 20) = v12;
        *(_BYTE *)(a4 + 24) = 0;
      }
      break;
  }
  return result;
}

uint64_t gcl::gpcc::RawAttributeDecoder::decode(uint64_t a1, uint64_t a2, int a3, char *a4, int a5, int a6, int a7, unsigned __int8 *a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  _BOOL4 v25;
  size_t v27;
  char v28;
  uint64_t v29;
  _QWORD v30[2];
  int v31;
  void *v32[2];
  void *__p[2];
  __int128 v34;

  LODWORD(v14) = a3;
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)__p = 0u;
  v34 = 0u;
  v29 = 0;
  v15 = gcl::gpcc::HlsIo::parseAsh((uint64_t)&v28, a8, a9, a2, (uint64_t)v30, &v29);
  if (!(_DWORD)v15)
  {
    if (a9 - v29 < (unint64_t)((a5 * (int)v14 * a6 + 7) >> 3))
    {
      v15 = 3;
      goto LABEL_19;
    }
    if ((int)v14 < 1 || a5 < 1)
    {
      v15 = 0;
    }
    else
    {
      if (a6)
      {
        v16 = 0;
        v15 = 0;
        v17 = 0;
        v18 = 0;
        v19 = &a8[v29];
        while (1)
        {
          v20 = 0;
          do
          {
            v21 = 0;
            v22 = (((_BYTE)a6 - 1) & 0x3F) + 1;
            v23 = v17;
            do
            {
              while (1)
              {
                if (v23)
                  goto LABEL_13;
                if (v19 == &a8[a9])
                  break;
                v24 = *v19++;
                v18 = v24;
                v23 = 128;
LABEL_13:
                v25 = (v23 & v18) != 0;
                v17 = v23 >> 1;
                v23 >>= 1;
                v21 = (2 * v21) | v25;
                if (!--v22)
                  goto LABEL_10;
              }
              v23 = 0;
              v15 = 3;
              v19 = &a8[a9];
              v21 *= 2;
              --v22;
            }
            while (v22);
LABEL_10:
            *(_DWORD *)&a4[4 * v20++ + v16 * a7] = v21;
          }
          while (v20 != a5);
          if (++v16 == v14)
            goto LABEL_19;
        }
      }
      v27 = 4 * a5;
      v14 = v14;
      v15 = 0;
      do
      {
        bzero(a4, v27);
        a4 += a7;
        --v14;
      }
      while (v14);
    }
  }
LABEL_19:
  if (__p[1])
  {
    *(void **)&v34 = __p[1];
    operator delete(__p[1]);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  return v15;
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  _BOOL4 v25;
  size_t v27;
  char v28;
  uint64_t v29;
  _QWORD v30[2];
  int v31;
  void *v32[2];
  void *__p[2];
  __int128 v34;

  LODWORD(v14) = a3;
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)__p = 0u;
  v34 = 0u;
  v29 = 0;
  v15 = gcl::gpcc::HlsIo::parseAsh((uint64_t)&v28, a8, a9, a2, (uint64_t)v30, &v29);
  if (!(_DWORD)v15)
  {
    if (a9 - v29 < (unint64_t)((a5 * (int)v14 * a6 + 7) >> 3))
    {
      v15 = 3;
      goto LABEL_19;
    }
    if ((int)v14 < 1 || a5 < 1)
    {
      v15 = 0;
    }
    else
    {
      if (a6)
      {
        v16 = 0;
        v15 = 0;
        v17 = 0;
        v18 = 0;
        v19 = &a8[v29];
        while (1)
        {
          v20 = 0;
          do
          {
            v21 = 0;
            v22 = (((_BYTE)a6 - 1) & 0x3F) + 1;
            v23 = v17;
            do
            {
              while (1)
              {
                if (v23)
                  goto LABEL_13;
                if (v19 == &a8[a9])
                  break;
                v24 = *v19++;
                v18 = v24;
                v23 = 128;
LABEL_13:
                v25 = (v23 & v18) != 0;
                v17 = v23 >> 1;
                v23 >>= 1;
                v21 = (2 * v21) | v25;
                if (!--v22)
                  goto LABEL_10;
              }
              v23 = 0;
              v15 = 3;
              v19 = &a8[a9];
              v21 *= 2;
              --v22;
            }
            while (v22);
LABEL_10:
            *(_WORD *)&a4[2 * v20++ + v16 * a7] = v21;
          }
          while (v20 != a5);
          if (++v16 == v14)
            goto LABEL_19;
        }
      }
      v27 = 2 * a5;
      v14 = v14;
      v15 = 0;
      do
      {
        bzero(a4, v27);
        a4 += a7;
        --v14;
      }
      while (v14);
    }
  }
LABEL_19:
  if (__p[1])
  {
    *(void **)&v34 = __p[1];
    operator delete(__p[1]);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  return v15;
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  _BOOL4 v25;
  size_t v27;
  char v28;
  uint64_t v29;
  _QWORD v30[2];
  int v31;
  void *v32[2];
  void *__p[2];
  __int128 v34;

  LODWORD(v14) = a3;
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)__p = 0u;
  v34 = 0u;
  v29 = 0;
  v15 = gcl::gpcc::HlsIo::parseAsh((uint64_t)&v28, a8, a9, a2, (uint64_t)v30, &v29);
  if (!(_DWORD)v15)
  {
    if (a9 - v29 < (unint64_t)((a5 * (int)v14 * a6 + 7) >> 3))
    {
      v15 = 3;
      goto LABEL_19;
    }
    if ((int)v14 < 1 || a5 < 1)
    {
      v15 = 0;
    }
    else
    {
      if (a6)
      {
        v16 = 0;
        v15 = 0;
        v17 = 0;
        v18 = 0;
        v19 = &a8[v29];
        while (1)
        {
          v20 = 0;
          do
          {
            v21 = 0;
            v22 = (((_BYTE)a6 - 1) & 0x3F) + 1;
            v23 = v17;
            do
            {
              while (1)
              {
                if (v23)
                  goto LABEL_13;
                if (v19 == &a8[a9])
                  break;
                v24 = *v19++;
                v18 = v24;
                v23 = 128;
LABEL_13:
                v25 = (v23 & v18) != 0;
                v17 = v23 >> 1;
                v23 >>= 1;
                v21 = (2 * v21) | v25;
                if (!--v22)
                  goto LABEL_10;
              }
              v23 = 0;
              v15 = 3;
              v19 = &a8[a9];
              v21 *= 2;
              --v22;
            }
            while (v22);
LABEL_10:
            *(_QWORD *)&a4[8 * v20++ + v16 * a7] = v21;
          }
          while (v20 != a5);
          if (++v16 == v14)
            goto LABEL_19;
        }
      }
      v27 = 8 * a5;
      v14 = v14;
      v15 = 0;
      do
      {
        bzero(a4, v27);
        a4 += a7;
        --v14;
      }
      while (v14);
    }
  }
LABEL_19:
  if (__p[1])
  {
    *(void **)&v34 = __p[1];
    operator delete(__p[1]);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  return v15;
}

void sub_1886C9BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = a15;
    if (!a15)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = a15;
    if (!a15)
      goto LABEL_3;
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t gcl::gpcc::HlsIo::parseAsh(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  int v56;
  BOOL v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  int v61;
  _BOOL4 v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  BOOL v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  int v93;
  int v94;
  BOOL v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  int v99;
  _BOOL4 v100;
  int v101;
  unsigned int v102;
  int v103;
  _BOOL4 v104;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = &a2[a3];
  v12 = -1;
  v13 = a2;
  do
  {
    v14 = v12;
    if (!v10)
    {
      if (v13 == v11)
      {
        v10 = 0;
        v9 = 3;
        v13 = &a2[a3];
        ++v12;
        continue;
      }
      v15 = *v13++;
      v7 = v15;
      v10 = 128;
    }
    v16 = (v10 & v7) != 0;
    v8 = v10 >> 1;
    v10 >>= 1;
    ++v12;
    if (v16)
      break;
  }
  while ((v14 + 1) < 0x3F);
  v17 = 0;
  if ((_DWORD)v12)
  {
    v18 = (v14 & 0x3F) + 1;
    v19 = v8;
    while (1)
    {
      if (v19)
        goto LABEL_12;
      if (v13 == v11)
      {
        v19 = 0;
        v9 = 3;
        v13 = &a2[a3];
        v17 *= 2;
        if (!--v18)
          break;
      }
      else
      {
        v20 = *v13++;
        v7 = v20;
        v19 = 128;
LABEL_12:
        v21 = (v19 & v7) != 0;
        v8 = v19 >> 1;
        v19 >>= 1;
        v17 = (2 * v17) | v21;
        if (!--v18)
          break;
      }
    }
  }
  *(_DWORD *)a5 = (v17 | (1 << v12)) - 1;
  v22 = -1;
  v23 = v8;
  while (2)
  {
    v24 = v22;
    if (v23)
    {
LABEL_20:
      v26 = (v23 & v7) != 0;
      v8 = v23 >> 1;
      v23 >>= 1;
      ++v22;
      if (v26)
        break;
    }
    else
    {
      if (v13 != v11)
      {
        v25 = *v13++;
        v7 = v25;
        v23 = 128;
        goto LABEL_20;
      }
      v23 = 0;
      v9 = 3;
      v13 = &a2[a3];
      ++v22;
    }
    if ((v24 + 1) < 0x3F)
      continue;
    break;
  }
  v27 = 0;
  if ((_DWORD)v22)
  {
    v28 = (v24 & 0x3F) + 1;
    v29 = v8;
    while (1)
    {
      if (v29)
        goto LABEL_27;
      if (v13 == v11)
      {
        v29 = 0;
        v9 = 3;
        v13 = &a2[a3];
        v27 *= 2;
        if (!--v28)
          break;
      }
      else
      {
        v30 = *v13++;
        v7 = v30;
        v29 = 128;
LABEL_27:
        v31 = (v29 & v7) != 0;
        v8 = v29 >> 1;
        v29 >>= 1;
        v27 = (2 * v27) | v31;
        if (!--v28)
          break;
      }
    }
  }
  *(_DWORD *)(a5 + 4) = (v27 | (1 << v22)) - 1;
  v32 = -1;
  v33 = v8;
  while (2)
  {
    v34 = v32;
    if (v33)
    {
LABEL_35:
      v36 = (v33 & v7) != 0;
      v8 = v33 >> 1;
      v33 >>= 1;
      ++v32;
      if (v36)
        break;
    }
    else
    {
      if (v13 != v11)
      {
        v35 = *v13++;
        v7 = v35;
        v33 = 128;
        goto LABEL_35;
      }
      v33 = 0;
      v9 = 3;
      v13 = &a2[a3];
      ++v32;
    }
    if ((v34 + 1) < 0x3F)
      continue;
    break;
  }
  v37 = 0;
  if ((_DWORD)v32)
  {
    v38 = (v34 & 0x3F) + 1;
    v39 = v8;
    while (1)
    {
      if (v39)
        goto LABEL_42;
      if (v13 == v11)
      {
        v39 = 0;
        v9 = 3;
        v13 = &a2[a3];
        v37 *= 2;
        if (!--v38)
          break;
      }
      else
      {
        v40 = *v13++;
        v7 = v40;
        v39 = 128;
LABEL_42:
        v41 = (v39 & v7) != 0;
        v8 = v39 >> 1;
        v39 >>= 1;
        v37 = (2 * v37) | v41;
        if (!--v38)
          break;
      }
    }
  }
  *(_DWORD *)(a5 + 8) = (v37 | (1 << v32)) - 1;
  if (!*(_BYTE *)(a4 + 72))
    goto LABEL_84;
  v42 = -1;
  v43 = v8;
  while (2)
  {
    v44 = v42;
    if (v43)
    {
LABEL_51:
      v46 = (v43 & v7) != 0;
      v8 = v43 >> 1;
      v43 >>= 1;
      ++v42;
      if (v46)
        break;
    }
    else
    {
      if (v13 != v11)
      {
        v45 = *v13++;
        v7 = v45;
        v43 = 128;
        goto LABEL_51;
      }
      v43 = 0;
      v9 = 3;
      v13 = &a2[a3];
      ++v42;
    }
    if ((v44 + 1) < 0x3F)
      continue;
    break;
  }
  v47 = 0;
  if ((_DWORD)v42)
  {
    v48 = (v44 & 0x3F) + 1;
    v49 = v8;
    while (1)
    {
      if (v49)
        goto LABEL_58;
      if (v13 == v11)
      {
        v49 = 0;
        v9 = 3;
        v13 = &a2[a3];
        v47 *= 2;
        if (!--v48)
          break;
      }
      else
      {
        v50 = *v13++;
        v7 = v50;
        v49 = 128;
LABEL_58:
        v51 = (v49 & v7) != 0;
        v8 = v49 >> 1;
        v49 >>= 1;
        v47 = (2 * v47) | v51;
        if (!--v48)
          break;
      }
    }
  }
  v52 = (v47 | (1 << v42)) - 1;
  if ((v52 & 1) != 0)
    v52 = ((v52 & 1) + v52) >> 1;
  else
    LODWORD(v52) = -(int)(((v52 & 1) + v52) >> 1);
  *(_DWORD *)(a5 + 12) = v52;
  v53 = -1;
  v54 = v8;
  while (2)
  {
    v55 = v53;
    if (v54)
    {
LABEL_69:
      v57 = (v54 & v7) != 0;
      v8 = v54 >> 1;
      v54 >>= 1;
      ++v53;
      if (v57)
        break;
    }
    else
    {
      if (v13 != v11)
      {
        v56 = *v13++;
        v7 = v56;
        v54 = 128;
        goto LABEL_69;
      }
      v54 = 0;
      v9 = 3;
      v13 = &a2[a3];
      ++v53;
    }
    if ((v55 + 1) < 0x3F)
      continue;
    break;
  }
  v58 = 0;
  if ((_DWORD)v53)
  {
    v59 = (v55 & 0x3F) + 1;
    v60 = v8;
    while (1)
    {
      if (v60)
        goto LABEL_76;
      if (v13 == v11)
      {
        v60 = 0;
        v9 = 3;
        v13 = &a2[a3];
        v58 *= 2;
        if (!--v59)
          break;
      }
      else
      {
        v61 = *v13++;
        v7 = v61;
        v60 = 128;
LABEL_76:
        v62 = (v60 & v7) != 0;
        v8 = v60 >> 1;
        v60 >>= 1;
        v58 = (2 * v58) | v62;
        if (!--v59)
          break;
      }
    }
  }
  v63 = (v58 | (1 << v53)) - 1;
  if ((v63 & 1) != 0)
    v63 = ((v63 & 1) + v63) >> 1;
  else
    LODWORD(v63) = -(int)(((v63 & 1) + v63) >> 1);
  *(_DWORD *)(a5 + 16) = v63;
LABEL_84:
  if (v8)
  {
    if ((v8 & v7) == 0)
      goto LABEL_144;
LABEL_89:
    v65 = *(unsigned int *)(a4 + 36);
    if ((v65 & 0x80000000) == 0)
    {
      v66 = v65 + 1;
      v67 = *(_QWORD *)(a5 + 24);
      v68 = (uint64_t *)(a5 + 24);
      v69 = (*(_QWORD *)(a5 + 32) - v67) >> 2;
      v70 = a6;
      if (v66 <= v69)
      {
        if (v66 < v69)
          *(_QWORD *)(a5 + 32) = v67 + 4 * v66;
      }
      else
      {
        v71 = a5;
        std::vector<int>::__append((std::vector<int> *)(a5 + 24), v66 - v69);
        a5 = v71;
      }
      v72 = v8 >> 1;
      v73 = *(_QWORD *)(a5 + 48);
      v74 = (uint64_t *)(a5 + 48);
      v75 = (*(_QWORD *)(a5 + 56) - v73) >> 2;
      if (v66 <= v75)
      {
        a6 = v70;
        if (v66 < v75)
          *(_QWORD *)(a5 + 56) = v73 + 4 * v66;
      }
      else
      {
        std::vector<int>::__append((std::vector<int> *)(a5 + 48), v66 - v75);
        v73 = *v74;
        a6 = v70;
      }
      v76 = 0;
      v77 = *v68;
      while (1)
      {
        v80 = 0;
        v81 = 63;
        v82 = v72;
        do
        {
          v83 = v81;
          if (!v82)
          {
            if (v13 == v11)
            {
              v82 = 0;
              v9 = 3;
              v13 = v11;
              v86 = v80 + 1;
              goto LABEL_110;
            }
            v84 = *v13++;
            v7 = v84;
            v82 = 128;
          }
          v85 = (v82 & v7) != 0;
          v72 = v82 >> 1;
          v82 >>= 1;
          v86 = v80 + 1;
          if (v85)
            break;
LABEL_110:
          v81 = v83 + 1;
          v87 = v80 >= 0x3F;
          v80 = v86;
        }
        while (!v87);
        if ((_DWORD)v86 != 1)
        {
          v88 = 0;
          v101 = (v83 & 0x3F) + 1;
          v102 = v72;
          while (1)
          {
            if (v102)
              goto LABEL_138;
            if (v13 == v11)
            {
              v102 = 0;
              v9 = 3;
              v13 = v11;
              v88 *= 2;
              if (!--v101)
                goto LABEL_116;
            }
            else
            {
              v103 = *v13++;
              v7 = v103;
              v102 = 128;
LABEL_138:
              v104 = (v102 & v7) != 0;
              v72 = v102 >> 1;
              v102 >>= 1;
              v88 = (2 * v88) | v104;
              if (!--v101)
                goto LABEL_116;
            }
          }
        }
        v88 = 0;
LABEL_116:
        v89 = 0;
        v90 = (v88 | (1 << (v86 - 1))) - 1;
        if ((v90 & 1) != 0)
          v90 = ((v90 & 1) + v90) >> 1;
        else
          LODWORD(v90) = -(int)(((v90 & 1) + v90) >> 1);
        *(_DWORD *)(v77 + 4 * v76) = v90;
        v91 = 63;
        v92 = v72;
        while (2)
        {
          v93 = v91;
          if (v92)
          {
LABEL_123:
            v95 = (v92 & v7) != 0;
            v72 = v92 >> 1;
            v92 >>= 1;
            v96 = v89 + 1;
            if (v95)
              break;
          }
          else
          {
            if (v13 != v11)
            {
              v94 = *v13++;
              v7 = v94;
              v92 = 128;
              goto LABEL_123;
            }
            v92 = 0;
            v9 = 3;
            v13 = v11;
            v96 = v89 + 1;
          }
          v91 = v93 + 1;
          v87 = v89 >= 0x3F;
          v89 = v96;
          if (!v87)
            continue;
          break;
        }
        if ((_DWORD)v96 != 1)
        {
          v78 = 0;
          v97 = (v93 & 0x3F) + 1;
          v98 = v72;
          while (1)
          {
            if (v98)
              goto LABEL_131;
            if (v13 == v11)
            {
              v98 = 0;
              v9 = 3;
              v13 = v11;
              v78 *= 2;
              if (!--v97)
                goto LABEL_101;
            }
            else
            {
              v99 = *v13++;
              v7 = v99;
              v98 = 128;
LABEL_131:
              v100 = (v98 & v7) != 0;
              v72 = v98 >> 1;
              v98 >>= 1;
              v78 = (2 * v78) | v100;
              if (!--v97)
                goto LABEL_101;
            }
          }
        }
        v78 = 0;
LABEL_101:
        v79 = (v78 | (1 << (v96 - 1))) - 1;
        if ((v79 & 1) != 0)
          v79 = ((v79 & 1) + v79) >> 1;
        else
          LODWORD(v79) = -(int)(((v79 & 1) + v79) >> 1);
        *(_DWORD *)(v73 + 4 * v76++) = v79;
        if (v76 == v66)
          goto LABEL_144;
      }
    }
    return 3;
  }
  else
  {
    if (v13 == v11)
    {
      v9 = 3;
      v13 = &a2[a3];
    }
    else
    {
      v64 = *v13++;
      v7 = v64;
      v8 = 128;
      if ((v64 & 0x80) != 0)
        goto LABEL_89;
    }
LABEL_144:
    if (a6)
      *a6 = v13 - a2;
  }
  return v9;
}

double std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5>,gcl::Error ()(int,gcl::gpcc::ByteBuffer)>::operator()(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  const char *v6;
  __int128 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  unint64_t v28;
  char *v29;
  __int128 *v30;
  unint64_t v31;
  __int128 v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  char *v39;
  void *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  BOOL v64;
  unsigned int v65;
  int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  size_t v85;
  char *v86;
  char *v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  unint64_t v93;
  char *v94;
  __int128 *v95;
  unint64_t v96;
  __int128 v97;
  char *v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char v103;
  char *v104;
  void *v105;
  _DWORD *v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  BOOL v114;
  unsigned int v115;
  int v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  unint64_t v130;
  int v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  unint64_t v137;
  unsigned int v138;
  int v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  BOOL v147;
  unsigned int v148;
  int v149;
  int v150;
  uint64_t v151;
  unint64_t v152;
  int v153;
  unint64_t v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  int v158;
  int v159;
  uint64_t v160;
  unint64_t v161;
  int v162;
  unint64_t v163;
  int v164;
  int v165;
  unsigned int v166;
  uint64_t v167;
  unint64_t v168;
  int v169;
  unint64_t v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  int v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  int v180;
  unint64_t v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  BOOL v190;
  _BOOL4 v191;
  unsigned int v192;
  int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  BOOL v199;
  unsigned int v200;
  int v201;
  int v202;
  uint64_t v203;
  unint64_t v204;
  int v205;
  unint64_t v206;
  unsigned int v207;
  unsigned int v208;
  int v209;
  int v210;
  int v211;
  uint64_t v212;
  unint64_t v213;
  int v214;
  unint64_t v215;
  int v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  size_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  __int128 *v228;
  unint64_t v229;
  __int128 v230;
  char *v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char v236;
  void *v237;
  int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  int v242;
  int v243;
  unsigned int v244;
  uint64_t v245;
  unint64_t v246;
  int v247;
  unint64_t v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  int v254;
  int v255;
  int v256;
  unsigned int v257;
  uint64_t v258;
  unint64_t v259;
  int v260;
  unint64_t v261;
  int v262;
  int v263;
  unsigned int v264;
  uint64_t v265;
  unint64_t v266;
  int v267;
  unint64_t v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  BOOL v272;
  int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  _BOOL4 v278;
  unsigned int v279;
  int v280;
  char *v281;
  char *v282;
  int v283;
  int v284;
  int v285;
  int v286;
  BOOL v287;
  unint64_t v288;
  uint64_t v289;
  size_t v290;
  char *v291;
  char *v292;
  char *v293;
  char *v294;
  int v295;
  int v296;
  char *v297;
  char *v298;
  int64_t v299;
  unint64_t v300;
  char *v301;
  char *v302;
  unint64_t v303;
  __int128 v304;
  char *v305;
  char *v306;
  unint64_t v307;
  uint64_t v308;
  char *v309;
  char v310;
  void *v311;
  unsigned int v312;
  unsigned int v313;
  int v314;
  int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  BOOL v320;
  _BOOL4 v321;
  unsigned int v322;
  int v323;
  int v324;
  uint64_t v325;
  unint64_t v326;
  int v327;
  unint64_t v328;
  unsigned int v329;
  unsigned int v330;
  int v331;
  int v332;
  int v333;
  uint64_t v334;
  unint64_t v335;
  int v336;
  unint64_t v337;
  int v338;
  int v339;
  unsigned int v340;
  uint64_t v341;
  unint64_t v342;
  int v343;
  unint64_t v344;
  int v345;
  unsigned int v346;
  int v347;
  int v348;
  int v349;
  unsigned int v350;
  unsigned int v351;
  int v352;
  int v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  BOOL v358;
  _BOOL4 v359;
  unsigned int v360;
  int v361;
  int v362;
  uint64_t v363;
  unint64_t v364;
  int v365;
  unint64_t v366;
  unsigned int v367;
  unsigned int v368;
  int v369;
  int v370;
  int v371;
  uint64_t v372;
  unint64_t v373;
  int v374;
  unint64_t v375;
  int v376;
  int v377;
  unsigned int v378;
  uint64_t v379;
  unint64_t v380;
  int v381;
  unint64_t v382;
  int v383;
  unsigned int v384;
  int v385;
  int v386;
  int v387;
  unsigned int v388;
  unsigned int v389;
  int v390;
  int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  BOOL v396;
  _BOOL4 v397;
  unsigned int v398;
  int v399;
  int v400;
  uint64_t v401;
  unint64_t v402;
  int v403;
  unint64_t v404;
  unsigned int v405;
  unsigned int v406;
  int v407;
  int v408;
  int v409;
  uint64_t v410;
  unint64_t v411;
  int v412;
  unint64_t v413;
  int v414;
  int v415;
  unsigned int v416;
  uint64_t v417;
  unint64_t v418;
  int v419;
  unint64_t v420;
  unsigned int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  unsigned int v427;
  uint64_t v428;
  unint64_t v429;
  int v430;
  unint64_t v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  BOOL v435;
  int v436;
  unsigned int v437;
  int v438;
  int v439;
  unsigned int v440;
  uint64_t v441;
  unint64_t v442;
  int v443;
  unint64_t v444;
  unsigned int v445;
  unsigned int v446;
  unsigned int v447;
  BOOL v448;
  int v449;
  unsigned int v450;
  int v451;
  int v452;
  unsigned int v453;
  uint64_t v454;
  unint64_t v455;
  int v456;
  unint64_t v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  BOOL v461;
  int v462;
  unsigned int v463;
  int v464;
  int v465;
  unsigned int v466;
  unsigned int v467;
  int v468;
  BOOL v469;
  unsigned int v470;
  int v471;
  int v472;
  uint64_t v473;
  unint64_t v474;
  int v475;
  unint64_t v476;
  unsigned int v477;
  unsigned int v478;
  int v479;
  int v480;
  int v481;
  uint64_t v482;
  unint64_t v483;
  int v484;
  unint64_t v485;
  unsigned int v486;
  unsigned int v487;
  _BOOL4 v488;
  unsigned int v489;
  int v490;
  int v491;
  uint64_t v492;
  unint64_t v493;
  int v494;
  unint64_t v495;
  void *v496;
  _QWORD *v497;
  int32x2_t *v498;
  int64_t v499;
  int v500;
  char v501;
  int v502;
  int32x2_t *v503;
  int v504;
  int v505;
  void *__p[2];
  char *v507;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = *(unsigned __int8 **)a3;
  v6 = *(const char **)(a3 + 16);
  if (v4 == 253)
  {
    if (!mgcl::muid::decompress((mgcl::muid *)v5, v6, 0, 0, *(_QWORD *)(v3 + 1168), (unint64_t *)0x20, (uint64_t)(*(_QWORD *)(v3 + 1176) - *(_QWORD *)(v3 + 1168)) >> 5))*(_BYTE *)(v3 + 1148) = 1;
    return result;
  }
  if (v4 != 254)
    return result;
  *(_DWORD *)(v3 + 16) = (_DWORD)v6;
  *(_QWORD *)(v3 + 24) = v5;
  *(_QWORD *)&v7 = 0xFFFF000000000000;
  *((_QWORD *)&v7 + 1) = 0xFFFF000000000000;
  *(_OWORD *)(v3 + 40) = v7;
  *(_QWORD *)(v3 + 56) = 16;
  if (!(_DWORD)v6)
  {
    v8 = -16777216;
    goto LABEL_12;
  }
  v8 = *v5 << 24;
  *(_DWORD *)(v3 + 48) = v8;
  if ((_DWORD)v6 == 1)
  {
LABEL_12:
    v9 = v8 | 0xFF0000;
    goto LABEL_13;
  }
  v9 = v8 | (v5[1] << 16);
  *(_DWORD *)(v3 + 48) = v9;
  if (v6 <= 2)
  {
LABEL_13:
    v10 = v9 | 0xFF00;
    goto LABEL_14;
  }
  v10 = v9 | (v5[2] << 8);
  *(_DWORD *)(v3 + 48) = v10;
  if ((_DWORD)v6 == 3)
  {
LABEL_14:
    v11 = 255;
    goto LABEL_15;
  }
  v11 = v5[3];
LABEL_15:
  *(_DWORD *)(v3 + 48) = v11 | v10;
  *(_QWORD *)(v3 + 32) = 3;
  memcpy((void *)(v3 + 64), &gcl::ArithmeticDecoder::probUpdateLutInterleaved, 0x400uLL);
  *(_OWORD *)__p = 0uLL;
  v507 = 0;
  v498 = *(int32x2_t **)(v3 + 1176);
  v503 = *(int32x2_t **)(v3 + 1168);
  v13 = 2 * ((char *)v498 - (char *)v503);
  v14 = v13 - (((char *)v498 - (char *)v503) >> 2);
  if (v13 != ((char *)v498 - (char *)v503) >> 2)
  {
    if (v14 < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    __p[0] = operator new(v13 - (((char *)v498 - (char *)v503) >> 2));
    __p[1] = __p[0];
    v507 = (char *)__p[0] + v14;
  }
  if (v503 != v498)
  {
    v15 = v3 + 1106;
    v16 = v3 + 1122;
    do
    {
      if ((unint64_t)(v507 - (char *)__p[1]) >= 0x18)
      {
        *(_OWORD *)__p[1] = 0uLL;
        *((_QWORD *)__p[1] + 2) = 0;
        v25 = (uint64_t)__p[1] + 24;
        __p[1] = (char *)__p[1] + 24;
        goto LABEL_53;
      }
      v17 = (char *)__p[1] - (char *)__p[0];
      v18 = (char *)__p[1] - (char *)__p[0] + 24;
      if (v18 < 0)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v19 = v507 - (char *)__p[0];
      if (2 * (v507 - (char *)__p[0]) > (unint64_t)v18)
        v18 = 2 * v19;
      if (v19 >= 0x3FFFFFFFFFFFFFFFLL)
        v20 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        v21 = (char *)operator new(v20);
        v22 = &v21[v17];
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
        *((_QWORD *)v22 + 2) = 0;
        if (__p[0] != __p[1])
          goto LABEL_30;
      }
      else
      {
        v21 = 0;
        v22 = (char *)((char *)__p[1] - (char *)__p[0]);
        *(_QWORD *)v17 = 0;
        *(_QWORD *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 16) = 0;
        if (__p[0] != __p[1])
        {
LABEL_30:
          if (v17 < 8)
          {
            v23 = (unint64_t)__p[1];
            v24 = v22;
            goto LABEL_47;
          }
          v23 = (unint64_t)__p[1];
          v24 = v22;
          if ((void *)((char *)__p[0] - (char *)v21) < (void *)0x20)
            goto LABEL_47;
          if (v17 >= 0x20)
          {
            v28 = v17 & 0xFFFFFFFFFFFFFFE0;
            v29 = &v21[v17 - 16];
            v30 = (__int128 *)((char *)__p[1] - 16);
            v31 = v17 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v32 = *v30;
              *((_OWORD *)v29 - 1) = *(v30 - 1);
              *(_OWORD *)v29 = v32;
              v29 -= 32;
              v30 -= 2;
              v31 -= 32;
            }
            while (v31);
            if (v17 != v28)
            {
              if ((v17 & 0x18) == 0)
              {
                v24 = &v22[-v28];
                v23 = (unint64_t)__p[1] - v28;
                goto LABEL_47;
              }
              goto LABEL_42;
            }
          }
          else
          {
            v28 = 0;
LABEL_42:
            v23 = (unint64_t)__p[1] - (v17 & 0xFFFFFFFFFFFFFFF8);
            v24 = &v22[-(v17 & 0xFFFFFFFFFFFFFFF8)];
            v33 = &v21[(char *)__p[1] - v28 - (char *)__p[0] - 8];
            v34 = (uint64_t *)((char *)__p[1] - v28 - 8);
            v35 = v28 - (v17 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v36 = *v34--;
              *(_QWORD *)v33 = v36;
              v33 -= 8;
              v35 += 8;
            }
            while (v35);
            if (v17 != (v17 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_47:
              v37 = v24 - 1;
              do
              {
                v38 = *(_BYTE *)--v23;
                *v37-- = v38;
              }
              while ((void *)v23 != __p[0]);
            }
          }
          v26 = v21;
          v27 = v22 + 24;
          goto LABEL_50;
        }
      }
      v26 = v22;
      v27 = v22 + 24;
LABEL_50:
      v39 = &v21[v20];
      v40 = __p[0];
      v25 = (uint64_t)v27;
      __p[0] = v26;
      __p[1] = v27;
      v507 = v39;
      if (v40)
        operator delete(v40);
      v16 = v3 + 1122;
LABEL_53:
      *(_QWORD *)(v25 - 24) = 0;
      v41 = v25 - 24;
      *(_QWORD *)(v41 + 8) = 0;
      *(_QWORD *)(v41 + 16) = 0;
      *(int32x2_t *)(v41 + 8) = *v503;
      *(_WORD *)(v41 + 16) = v503[3].i16[2];
      *(_BYTE *)(v3 + 1153) = 1;
      *(_DWORD *)v41 = 1;
      v42 = *(unsigned __int16 *)(v3 + 1090);
      v44 = *(_DWORD *)(v3 + 44);
      v43 = *(_DWORD *)(v3 + 48);
      if (v44 < 0x40000001)
      {
        v45 = *(_DWORD *)(v3 + 56);
        while (1)
        {
          v43 *= 2;
          *(_DWORD *)(v3 + 56) = --v45;
          if (v45)
            goto LABEL_57;
          v48 = *(_QWORD *)(v3 + 32);
          *(_QWORD *)(v3 + 32) = v48 + 1;
          v49 = *(unsigned int *)(v3 + 16);
          if (v48 + 1 >= v49)
          {
            v50 = 65280;
            v51 = v48 + 2;
            *(_QWORD *)(v3 + 32) = v51;
            if (v51 >= v49)
            {
LABEL_63:
              v46 = 255;
              goto LABEL_56;
            }
          }
          else
          {
            v50 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v48 + 1) << 8;
            v51 = v48 + 2;
            *(_QWORD *)(v3 + 32) = v51;
            if (v51 >= v49)
              goto LABEL_63;
          }
          v46 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v51);
LABEL_56:
          v43 |= v50 | v46;
          v45 = 16;
          *(_DWORD *)(v3 + 56) = 16;
LABEL_57:
          v47 = 2 * v44;
          v54 = v44 >= 0x20000001;
          v44 *= 2;
          if (v54)
            goto LABEL_65;
        }
      }
      v47 = *(_DWORD *)(v3 + 44);
LABEL_65:
      v52 = (HIWORD(v47) * v42) & 0xFFFF0000;
      v53 = v47 - v52;
      v54 = v43 >= v52;
      *(_WORD *)(v3 + 1090) = *(_WORD *)(v3 + 2 * ((v42 >> 7) & 0x1FE | (v43 >= v52)) + 64) + v42;
      if (v43 < v52)
        v55 = v52;
      else
        v55 = v53;
      if (v43 < v52)
        v52 = 0;
      *(_DWORD *)(v3 + 44) = v55;
      v56 = *(_DWORD *)v41;
      if (v54)
        ++v56;
      v57 = v43 - v52;
      *(_DWORD *)(v3 + 48) = v57;
      *(_DWORD *)v41 = v56;
      if (v56 > 1)
      {
        v58 = 0;
        v59 = *(_DWORD *)(v3 + 44);
        v60 = 1;
        if (v59 >= 0x40000001)
        {
          while (1)
          {
            v61 = v59;
LABEL_75:
            v62 = (v61 >> 1) & 0x7FFF0000;
            v59 = v61 - v62;
            v63 = v57 >= v62 ? (v61 >> 1) & 0x7FFF0000 : 0;
            v64 = v57 >= v62;
            v57 -= v63;
            v65 = v64 ? v59 : v62;
            *(_DWORD *)(v3 + 44) = v65;
            *(_DWORD *)(v3 + 48) = v57;
            if (!v64)
              break;
            v58 += 1 << v60++;
            if (v59 < 0x40000001)
              goto LABEL_84;
          }
          while (v62 >= 0x40000001)
          {
            v72 = v62;
LABEL_95:
            v73 = (v72 >> 1) & 0x7FFF0000;
            v62 = v72 - v73;
            v74 = v57 >= v73;
            if (v57 < v73)
            {
              v62 = v73;
              v73 = 0;
            }
            v57 -= v73;
            *(_DWORD *)(v3 + 44) = v62;
            *(_DWORD *)(v3 + 48) = v57;
            v58 += v74 << --v60;
            if (!v60)
            {
              v56 = *(_DWORD *)v41 + v58;
              *(_DWORD *)v41 = v56;
              goto LABEL_110;
            }
          }
          v75 = *(_DWORD *)(v3 + 56);
          while (2)
          {
            v57 *= 2;
            *(_DWORD *)(v3 + 56) = --v75;
            if (v75)
              goto LABEL_102;
            v77 = *(_QWORD *)(v3 + 32);
            *(_QWORD *)(v3 + 32) = v77 + 1;
            v78 = *(unsigned int *)(v3 + 16);
            if (v77 + 1 >= v78)
            {
              v79 = 65280;
              v80 = v77 + 2;
              *(_QWORD *)(v3 + 32) = v80;
              if (v80 >= v78)
                goto LABEL_108;
            }
            else
            {
              v79 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v77 + 1) << 8;
              v80 = v77 + 2;
              *(_QWORD *)(v3 + 32) = v80;
              if (v80 >= v78)
              {
LABEL_108:
                v76 = 255;
LABEL_101:
                v57 |= v79 | v76;
                v75 = 16;
                *(_DWORD *)(v3 + 56) = 16;
LABEL_102:
                v72 = 2 * v62;
                v54 = v62 >= 0x20000001;
                v62 *= 2;
                if (v54)
                  goto LABEL_95;
                continue;
              }
            }
            break;
          }
          v76 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v80);
          goto LABEL_101;
        }
LABEL_84:
        v66 = *(_DWORD *)(v3 + 56);
        while (2)
        {
          v57 *= 2;
          *(_DWORD *)(v3 + 56) = --v66;
          if (v66)
            goto LABEL_87;
          v68 = *(_QWORD *)(v3 + 32);
          *(_QWORD *)(v3 + 32) = v68 + 1;
          v69 = *(unsigned int *)(v3 + 16);
          if (v68 + 1 >= v69)
          {
            v70 = 65280;
            v71 = v68 + 2;
            *(_QWORD *)(v3 + 32) = v71;
            if (v71 >= v69)
              goto LABEL_93;
          }
          else
          {
            v70 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v68 + 1) << 8;
            v71 = v68 + 2;
            *(_QWORD *)(v3 + 32) = v71;
            if (v71 >= v69)
            {
LABEL_93:
              v67 = 255;
LABEL_86:
              v57 |= v70 | v67;
              v66 = 16;
              *(_DWORD *)(v3 + 56) = 16;
LABEL_87:
              v61 = 2 * v59;
              v54 = v59 >= 0x20000001;
              v59 *= 2;
              if (v54)
                goto LABEL_75;
              continue;
            }
          }
          break;
        }
        v67 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v71);
        goto LABEL_86;
      }
LABEL_110:
      if (v56 >= 1)
      {
        v500 = 0;
        v81 = 0;
        do
        {
          v501 = v81;
          v502 = v56;
          v82 = (char *)__p[1] - (char *)__p[0];
          v499 = (char *)__p[1] - (char *)__p[0];
          if ((unint64_t)(v507 - (char *)__p[1]) >= 0x10)
          {
            *(_OWORD *)__p[1] = 0uLL;
            v90 = (uint64_t)__p[1] + 16;
            __p[1] = (char *)__p[1] + 16;
            goto LABEL_145;
          }
          v83 = v82 + 16;
          if ((uint64_t)(v82 + 16) < 0)
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v84 = v507 - (char *)__p[0];
          if (2 * (v507 - (char *)__p[0]) > v83)
            v83 = 2 * v84;
          if (v84 >= 0x3FFFFFFFFFFFFFFFLL)
            v85 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v85 = v83;
          if (v85)
          {
            v86 = (char *)operator new(v85);
            v87 = &v86[v82];
            *(_QWORD *)v87 = 0;
            *((_QWORD *)v87 + 1) = 0;
            if (__p[1] != __p[0])
              goto LABEL_122;
          }
          else
          {
            v86 = 0;
            v87 = (char *)((char *)__p[1] - (char *)__p[0]);
            *(_QWORD *)v82 = 0;
            *(_QWORD *)(v82 + 8) = 0;
            if (__p[1] != __p[0])
            {
LABEL_122:
              if (v82 < 8)
              {
                v88 = (unint64_t)__p[1];
                v89 = v87;
                goto LABEL_139;
              }
              v88 = (unint64_t)__p[1];
              v89 = v87;
              if ((void *)((char *)__p[0] - (char *)v86) < (void *)0x20)
                goto LABEL_139;
              if (v82 >= 0x20)
              {
                v93 = v82 & 0xFFFFFFFFFFFFFFE0;
                v94 = &v86[v82 - 16];
                v95 = (__int128 *)((char *)__p[1] - 16);
                v96 = v82 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v97 = *v95;
                  *((_OWORD *)v94 - 1) = *(v95 - 1);
                  *(_OWORD *)v94 = v97;
                  v94 -= 32;
                  v95 -= 2;
                  v96 -= 32;
                }
                while (v96);
                if (v82 != v93)
                {
                  if ((v82 & 0x18) == 0)
                  {
                    v89 = &v87[-v93];
                    v88 = (unint64_t)__p[1] - v93;
                    goto LABEL_139;
                  }
                  goto LABEL_134;
                }
              }
              else
              {
                v93 = 0;
LABEL_134:
                v88 = (unint64_t)__p[1] - (v82 & 0xFFFFFFFFFFFFFFF8);
                v89 = &v87[-(v82 & 0xFFFFFFFFFFFFFFF8)];
                v98 = &v86[(char *)__p[1] - v93 - (char *)__p[0] - 8];
                v99 = (uint64_t *)((char *)__p[1] - v93 - 8);
                v100 = v93 - (v82 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v101 = *v99--;
                  *(_QWORD *)v98 = v101;
                  v98 -= 8;
                  v100 += 8;
                }
                while (v100);
                if (v82 != (v82 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_139:
                  v102 = v89 - 1;
                  do
                  {
                    v103 = *(_BYTE *)--v88;
                    *v102-- = v103;
                  }
                  while ((void *)v88 != __p[0]);
                }
              }
              v91 = v86;
              v92 = v87 + 16;
              goto LABEL_142;
            }
          }
          v91 = v87;
          v92 = v87 + 16;
LABEL_142:
          v104 = &v86[v85];
          v105 = __p[0];
          v90 = (uint64_t)v92;
          __p[0] = v91;
          __p[1] = v92;
          v507 = v104;
          if (v105)
            operator delete(v105);
          v16 = v3 + 1122;
LABEL_145:
          *(_QWORD *)(v90 - 16) = 0;
          *(_QWORD *)(v90 - 8) = 0;
          v106 = (_DWORD *)(v90 - 16);
          v106[2] = v503[2].i32[0] + *(_DWORD *)(v3 + 1140) + v503[2].i32[1];
          v106[3] = v500;
          if (*(_BYTE *)(v3 + 1153))
            goto LABEL_254;
          if (*(_BYTE *)(v3 + 1151))
          {
            v107 = 0;
            v109 = *(_DWORD *)(v3 + 44);
            v108 = *(_DWORD *)(v3 + 48);
            v110 = 1;
            if (v109 >= 0x40000001)
            {
              while (1)
              {
                v111 = v109;
LABEL_149:
                v112 = (v111 >> 1) & 0x7FFF0000;
                v109 = v111 - v112;
                v113 = v108 >= v112 ? (v111 >> 1) & 0x7FFF0000 : 0;
                v114 = v108 >= v112;
                v108 -= v113;
                v115 = v114 ? v109 : v112;
                *(_DWORD *)(v3 + 44) = v115;
                *(_DWORD *)(v3 + 48) = v108;
                if (!v114)
                  break;
                v107 += 1 << v110++;
                if (v109 < 0x40000001)
                  goto LABEL_158;
              }
              do
              {
                if (v112 < 0x40000001)
                {
                  v125 = *(_DWORD *)(v3 + 56);
                  while (1)
                  {
                    v108 *= 2;
                    *(_DWORD *)(v3 + 56) = --v125;
                    if (v125)
                      goto LABEL_176;
                    v127 = *(_QWORD *)(v3 + 32);
                    *(_QWORD *)(v3 + 32) = v127 + 1;
                    v128 = *(unsigned int *)(v3 + 16);
                    if (v127 + 1 >= v128)
                    {
                      v129 = 65280;
                      v130 = v127 + 2;
                      *(_QWORD *)(v3 + 32) = v130;
                      if (v130 >= v128)
                      {
LABEL_182:
                        v126 = 255;
                        goto LABEL_175;
                      }
                    }
                    else
                    {
                      v129 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v127 + 1) << 8;
                      v130 = v127 + 2;
                      *(_QWORD *)(v3 + 32) = v130;
                      if (v130 >= v128)
                        goto LABEL_182;
                    }
                    v126 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v130);
LABEL_175:
                    v108 |= v129 | v126;
                    v125 = 16;
                    *(_DWORD *)(v3 + 56) = 16;
LABEL_176:
                    v122 = 2 * v112;
                    v54 = v112 >= 0x20000001;
                    v112 *= 2;
                    if (v54)
                      goto LABEL_169;
                  }
                }
                v122 = v112;
LABEL_169:
                v123 = (v122 >> 1) & 0x7FFF0000;
                v112 = v122 - v123;
                v124 = v108 >= v123;
                if (v108 < v123)
                {
                  v112 = v123;
                  v123 = 0;
                }
                v108 -= v123;
                *(_DWORD *)(v3 + 44) = v112;
                *(_DWORD *)(v3 + 48) = v108;
                v107 += v124 << --v110;
              }
              while (v110);
              if (v107)
              {
                if (v112 < 0x40000001)
                {
                  v131 = *(_DWORD *)(v3 + 56);
                  while (1)
                  {
                    v108 *= 2;
                    *(_DWORD *)(v3 + 56) = --v131;
                    if (v131)
                      goto LABEL_188;
                    v134 = *(_QWORD *)(v3 + 32);
                    *(_QWORD *)(v3 + 32) = v134 + 1;
                    v135 = *(unsigned int *)(v3 + 16);
                    if (v134 + 1 >= v135)
                    {
                      v136 = 65280;
                      v137 = v134 + 2;
                      *(_QWORD *)(v3 + 32) = v137;
                      if (v137 >= v135)
                      {
LABEL_194:
                        v132 = 255;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      v136 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v134 + 1) << 8;
                      v137 = v134 + 2;
                      *(_QWORD *)(v3 + 32) = v137;
                      if (v137 >= v135)
                        goto LABEL_194;
                    }
                    v132 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v137);
LABEL_187:
                    v108 |= v136 | v132;
                    v131 = 16;
                    *(_DWORD *)(v3 + 56) = 16;
LABEL_188:
                    v133 = 2 * v112;
                    v54 = v112 >= 0x20000001;
                    v112 *= 2;
                    if (v54)
                      goto LABEL_196;
                  }
                }
                v133 = v112;
LABEL_196:
                v138 = (v133 >> 1) & 0x7FFF0000;
                v139 = v133 - v138;
                if (v108 < v138)
                {
                  v139 = (v133 >> 1) & 0x7FFF0000;
                  v138 = 0;
                  v107 = -v107;
                }
                *(_DWORD *)(v3 + 44) = v139;
                *(_DWORD *)(v3 + 48) = v108 - v138;
              }
              *(_DWORD *)(v90 - 8) += v107;
              goto LABEL_200;
            }
LABEL_158:
            v116 = *(_DWORD *)(v3 + 56);
            while (2)
            {
              v108 *= 2;
              *(_DWORD *)(v3 + 56) = --v116;
              if (v116)
                goto LABEL_161;
              v118 = *(_QWORD *)(v3 + 32);
              *(_QWORD *)(v3 + 32) = v118 + 1;
              v119 = *(unsigned int *)(v3 + 16);
              if (v118 + 1 >= v119)
              {
                v120 = 65280;
                v121 = v118 + 2;
                *(_QWORD *)(v3 + 32) = v121;
                if (v121 >= v119)
                  goto LABEL_167;
              }
              else
              {
                v120 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v118 + 1) << 8;
                v121 = v118 + 2;
                *(_QWORD *)(v3 + 32) = v121;
                if (v121 >= v119)
                {
LABEL_167:
                  v117 = 255;
LABEL_160:
                  v108 |= v120 | v117;
                  v116 = 16;
                  *(_DWORD *)(v3 + 56) = 16;
LABEL_161:
                  v111 = 2 * v109;
                  v54 = v109 >= 0x20000001;
                  v109 *= 2;
                  if (v54)
                    goto LABEL_149;
                  continue;
                }
              }
              break;
            }
            v117 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v121);
            goto LABEL_160;
          }
LABEL_200:
          if (!*(_BYTE *)(v3 + 1152))
            goto LABEL_254;
          v140 = 0;
          v142 = *(_DWORD *)(v3 + 44);
          v141 = *(_DWORD *)(v3 + 48);
          v143 = 1;
          if (v142 < 0x40000001)
          {
LABEL_212:
            v149 = *(_DWORD *)(v3 + 56);
            while (2)
            {
              v141 *= 2;
              *(_DWORD *)(v3 + 56) = --v149;
              if (v149)
                goto LABEL_215;
              v151 = *(_QWORD *)(v3 + 32);
              *(_QWORD *)(v3 + 32) = v151 + 1;
              v152 = *(unsigned int *)(v3 + 16);
              if (v151 + 1 >= v152)
              {
                v153 = 65280;
                v154 = v151 + 2;
                *(_QWORD *)(v3 + 32) = v154;
                if (v154 >= v152)
                  goto LABEL_221;
              }
              else
              {
                v153 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v151 + 1) << 8;
                v154 = v151 + 2;
                *(_QWORD *)(v3 + 32) = v154;
                if (v154 >= v152)
                {
LABEL_221:
                  v150 = 255;
LABEL_214:
                  v141 |= v153 | v150;
                  v149 = 16;
                  *(_DWORD *)(v3 + 56) = 16;
LABEL_215:
                  v144 = 2 * v142;
                  v54 = v142 >= 0x20000001;
                  v142 *= 2;
                  if (v54)
                    goto LABEL_203;
                  continue;
                }
              }
              break;
            }
            v150 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v154);
            goto LABEL_214;
          }
          while (1)
          {
            v144 = v142;
LABEL_203:
            v145 = (v144 >> 1) & 0x7FFF0000;
            v142 = v144 - v145;
            v146 = v141 >= v145 ? (v144 >> 1) & 0x7FFF0000 : 0;
            v147 = v141 >= v145;
            v141 -= v146;
            v148 = v147 ? v142 : v145;
            *(_DWORD *)(v3 + 44) = v148;
            *(_DWORD *)(v3 + 48) = v141;
            if (!v147)
              break;
            v140 += 1 << v143++;
            if (v142 < 0x40000001)
              goto LABEL_212;
          }
          do
          {
            if (v145 < 0x40000001)
            {
              v158 = *(_DWORD *)(v3 + 56);
              while (1)
              {
                v141 *= 2;
                *(_DWORD *)(v3 + 56) = --v158;
                if (v158)
                  goto LABEL_230;
                v160 = *(_QWORD *)(v3 + 32);
                *(_QWORD *)(v3 + 32) = v160 + 1;
                v161 = *(unsigned int *)(v3 + 16);
                if (v160 + 1 >= v161)
                {
                  v162 = 65280;
                  v163 = v160 + 2;
                  *(_QWORD *)(v3 + 32) = v163;
                  if (v163 >= v161)
                  {
LABEL_236:
                    v159 = 255;
                    goto LABEL_229;
                  }
                }
                else
                {
                  v162 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v160 + 1) << 8;
                  v163 = v160 + 2;
                  *(_QWORD *)(v3 + 32) = v163;
                  if (v163 >= v161)
                    goto LABEL_236;
                }
                v159 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v163);
LABEL_229:
                v141 |= v162 | v159;
                v158 = 16;
                *(_DWORD *)(v3 + 56) = 16;
LABEL_230:
                v155 = 2 * v145;
                v54 = v145 >= 0x20000001;
                v145 *= 2;
                if (v54)
                  goto LABEL_223;
              }
            }
            v155 = v145;
LABEL_223:
            v156 = (v155 >> 1) & 0x7FFF0000;
            v145 = v155 - v156;
            v157 = v141 >= v156;
            if (v141 < v156)
            {
              v145 = v156;
              v156 = 0;
            }
            v141 -= v156;
            *(_DWORD *)(v3 + 44) = v145;
            *(_DWORD *)(v3 + 48) = v141;
            v140 += v157 << --v143;
          }
          while (v143);
          if (v140)
          {
            if (v145 < 0x40000001)
            {
              v164 = *(_DWORD *)(v3 + 56);
              while (1)
              {
                v141 *= 2;
                *(_DWORD *)(v3 + 56) = --v164;
                if (v164)
                  goto LABEL_242;
                v167 = *(_QWORD *)(v3 + 32);
                *(_QWORD *)(v3 + 32) = v167 + 1;
                v168 = *(unsigned int *)(v3 + 16);
                if (v167 + 1 >= v168)
                {
                  v169 = 65280;
                  v170 = v167 + 2;
                  *(_QWORD *)(v3 + 32) = v170;
                  if (v170 >= v168)
                  {
LABEL_248:
                    v165 = 255;
                    goto LABEL_241;
                  }
                }
                else
                {
                  v169 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v167 + 1) << 8;
                  v170 = v167 + 2;
                  *(_QWORD *)(v3 + 32) = v170;
                  if (v170 >= v168)
                    goto LABEL_248;
                }
                v165 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v170);
LABEL_241:
                v141 |= v169 | v165;
                v164 = 16;
                *(_DWORD *)(v3 + 56) = 16;
LABEL_242:
                v166 = 2 * v145;
                v54 = v145 >= 0x20000001;
                v145 *= 2;
                if (v54)
                  goto LABEL_250;
              }
            }
            v166 = v145;
LABEL_250:
            v171 = (v166 >> 1) & 0x7FFF0000;
            v172 = v166 - v171;
            if (v141 < v171)
            {
              v172 = (v166 >> 1) & 0x7FFF0000;
              v171 = 0;
              v140 = -v140;
            }
            *(_DWORD *)(v3 + 44) = v172;
            *(_DWORD *)(v3 + 48) = v141 - v171;
          }
          *(_DWORD *)(v90 - 4) += v140;
LABEL_254:
          if (*(_BYTE *)(v3 + 1150))
          {
            v174 = *(_DWORD *)(v3 + 44);
            v173 = *(_DWORD *)(v3 + 48);
            if (v174 < 0x40000001)
            {
              v175 = *(_DWORD *)(v3 + 56);
              while (1)
              {
                v173 *= 2;
                *(_DWORD *)(v3 + 56) = --v175;
                if (v175)
                  goto LABEL_259;
                v178 = *(_QWORD *)(v3 + 32);
                *(_QWORD *)(v3 + 32) = v178 + 1;
                v179 = *(unsigned int *)(v3 + 16);
                if (v178 + 1 >= v179)
                {
                  v180 = 65280;
                  v181 = v178 + 2;
                  *(_QWORD *)(v3 + 32) = v181;
                  if (v181 >= v179)
                  {
LABEL_265:
                    v176 = 255;
                    goto LABEL_258;
                  }
                }
                else
                {
                  v180 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v178 + 1) << 8;
                  v181 = v178 + 2;
                  *(_QWORD *)(v3 + 32) = v181;
                  if (v181 >= v179)
                    goto LABEL_265;
                }
                v176 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v181);
LABEL_258:
                v173 |= v180 | v176;
                v175 = 16;
                *(_DWORD *)(v3 + 56) = 16;
LABEL_259:
                v177 = 2 * v174;
                v54 = v174 >= 0x20000001;
                v174 *= 2;
                if (v54)
                  goto LABEL_746;
              }
            }
            v177 = *(_DWORD *)(v3 + 44);
LABEL_746:
            v486 = *(unsigned __int16 *)(v3 + 1088);
            v487 = (HIWORD(v177) * v486) & 0xFFFF0000;
            v183 = v177 - v487;
            v488 = v173 >= v487;
            *(_WORD *)(v3 + 1088) = *(_WORD *)(v3 + 2 * ((v486 >> 7) & 0x1FE | v488) + 64) + v486;
            if (v173 >= v487)
            {
              v489 = v487;
            }
            else
            {
              v183 = v487;
              v489 = 0;
            }
            v182 = v173 - v489;
            *(_DWORD *)(v3 + 44) = v183;
            *(_DWORD *)(v3 + 48) = v182;
            *(_BYTE *)(v90 - 12) = v488;
            v184 = *(unsigned __int16 *)(v3 + 1092);
            if (v183 < 0x40000001)
            {
LABEL_750:
              v490 = *(_DWORD *)(v3 + 56);
              while (2)
              {
                v182 *= 2;
                *(_DWORD *)(v3 + 56) = --v490;
                if (v490)
                  goto LABEL_753;
                v492 = *(_QWORD *)(v3 + 32);
                *(_QWORD *)(v3 + 32) = v492 + 1;
                v493 = *(unsigned int *)(v3 + 16);
                if (v492 + 1 >= v493)
                {
                  v494 = 65280;
                  v495 = v492 + 2;
                  *(_QWORD *)(v3 + 32) = v495;
                  if (v495 >= v493)
                    goto LABEL_759;
                }
                else
                {
                  v494 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v492 + 1) << 8;
                  v495 = v492 + 2;
                  *(_QWORD *)(v3 + 32) = v495;
                  if (v495 >= v493)
                  {
LABEL_759:
                    v491 = 255;
LABEL_752:
                    v182 |= v494 | v491;
                    v490 = 16;
                    *(_DWORD *)(v3 + 56) = 16;
LABEL_753:
                    v185 = 2 * v183;
                    v54 = v183 >= 0x20000001;
                    v183 *= 2;
                    if (v54)
                      goto LABEL_268;
                    continue;
                  }
                }
                break;
              }
              v491 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v495);
              goto LABEL_752;
            }
          }
          else
          {
            v183 = *(_DWORD *)(v3 + 44);
            v182 = *(_DWORD *)(v3 + 48);
            v184 = *(unsigned __int16 *)(v3 + 1092);
            if (v183 < 0x40000001)
              goto LABEL_750;
          }
          v185 = v183;
LABEL_268:
          v186 = 0;
          v187 = (HIWORD(v185) * v184) & 0xFFFF0000;
          if (v182 < v187)
            v188 = 0;
          else
            v188 = (HIWORD(v185) * v184) & 0xFFFF0000;
          v189 = v182 - v188;
          v190 = v182 >= v187;
          v191 = v182 >= v187;
          *(_WORD *)(v3 + 1092) = *(_WORD *)(v3 + 2 * ((v184 >> 7) & 0x1FE | v191) + 64) + v184;
          if (v182 < v187)
            v192 = (HIWORD(v185) * v184) & 0xFFFF0000;
          else
            v192 = v185 - v187;
          *(_DWORD *)(v3 + 44) = v192;
          *(_DWORD *)(v3 + 48) = v189;
          *v106 = v191;
          if (!v190)
          {
LABEL_313:
            v505 = 0;
            v216 = v186 + 1;
            while (1)
            {
              v504 = v216;
              if ((unint64_t)(v507 - (char *)__p[1]) >= 4)
              {
                *(_DWORD *)__p[1] = 0;
                v225 = (uint64_t)__p[1] + 4;
                __p[1] = (char *)__p[1] + 4;
                goto LABEL_347;
              }
              v217 = (char *)__p[1] - (char *)__p[0];
              v218 = (char *)__p[1] - (char *)__p[0] + 4;
              if (v218 < 0)
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              v219 = v507 - (char *)__p[0];
              if (2 * (v507 - (char *)__p[0]) > (unint64_t)v218)
                v218 = 2 * v219;
              if (v219 >= 0x3FFFFFFFFFFFFFFFLL)
                v220 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v220 = v218;
              if (v220)
              {
                v221 = (char *)operator new(v220);
                v222 = &v221[v217];
                *(_DWORD *)&v221[v217] = 0;
                v223 = (uint64_t)&v221[v217 + 4];
                if (__p[1] == __p[0])
                  goto LABEL_344;
              }
              else
              {
                v221 = 0;
                v222 = (char *)((char *)__p[1] - (char *)__p[0]);
                *(_DWORD *)v217 = 0;
                v223 = v217 + 4;
                if (__p[1] == __p[0])
                  goto LABEL_344;
              }
              if (v217 >= 8)
              {
                v224 = (unint64_t)__p[1];
                if ((void *)((char *)__p[0] - (char *)v221) >= (void *)0x20)
                {
                  if (v217 < 0x20)
                  {
                    v226 = 0;
LABEL_336:
                    v224 = (unint64_t)__p[1] - (v217 & 0xFFFFFFFFFFFFFFF8);
                    v222 -= v217 & 0xFFFFFFFFFFFFFFF8;
                    v231 = &v221[(char *)__p[1] - v226 - (char *)__p[0] - 8];
                    v232 = (uint64_t *)((char *)__p[1] - v226 - 8);
                    v233 = v226 - (v217 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      v234 = *v232--;
                      *(_QWORD *)v231 = v234;
                      v231 -= 8;
                      v233 += 8;
                    }
                    while (v233);
                    if (v217 == (v217 & 0xFFFFFFFFFFFFFFF8))
                      goto LABEL_343;
                    goto LABEL_341;
                  }
                  v226 = v217 & 0xFFFFFFFFFFFFFFE0;
                  v227 = &v221[v217 - 16];
                  v228 = (__int128 *)((char *)__p[1] - 16);
                  v229 = v217 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v230 = *v228;
                    *((_OWORD *)v227 - 1) = *(v228 - 1);
                    *(_OWORD *)v227 = v230;
                    v227 -= 32;
                    v228 -= 2;
                    v229 -= 32;
                  }
                  while (v229);
                  if (v217 == v226)
                    goto LABEL_343;
                  if ((v217 & 0x18) != 0)
                    goto LABEL_336;
                  v222 -= v226;
                  v224 = (unint64_t)__p[1] - v226;
                }
              }
              else
              {
                v224 = (unint64_t)__p[1];
              }
LABEL_341:
              v235 = v222 - 1;
              do
              {
                v236 = *(_BYTE *)--v224;
                *v235-- = v236;
              }
              while ((void *)v224 != __p[0]);
LABEL_343:
              v222 = v221;
LABEL_344:
              v237 = __p[0];
              v225 = v223;
              __p[0] = v222;
              __p[1] = (void *)v223;
              v507 = &v221[v220];
              if (v237)
                operator delete(v237);
              v16 = v3 + 1122;
LABEL_347:
              *(_DWORD *)(v225 - 4) = 0;
              v238 = *(_DWORD *)(v3 + 1140) + v503[2].i32[0];
              *(int32x2_t *)(v3 + 1156) = vadd_s32(*(int32x2_t *)(v3 + 1132), v503[1]);
              *(_DWORD *)(v3 + 1164) = v238;
              *(_DWORD *)(v225 - 4) = 3;
              v239 = *(_DWORD *)(v3 + 44);
              v240 = *(_DWORD *)(v3 + 48);
              v241 = *(unsigned __int16 *)(v3 + 1096);
              if (v239 < 0x40000001)
              {
                v242 = *(_DWORD *)(v3 + 56);
                while (1)
                {
                  v240 *= 2;
                  *(_DWORD *)(v3 + 56) = --v242;
                  if (v242)
                    goto LABEL_351;
                  v245 = *(_QWORD *)(v3 + 32);
                  *(_QWORD *)(v3 + 32) = v245 + 1;
                  v246 = *(unsigned int *)(v3 + 16);
                  if (v245 + 1 >= v246)
                  {
                    v247 = 65280;
                    v248 = v245 + 2;
                    *(_QWORD *)(v3 + 32) = v248;
                    if (v248 >= v246)
                    {
LABEL_357:
                      v243 = 255;
                      goto LABEL_350;
                    }
                  }
                  else
                  {
                    v247 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v245 + 1) << 8;
                    v248 = v245 + 2;
                    *(_QWORD *)(v3 + 32) = v248;
                    if (v248 >= v246)
                      goto LABEL_357;
                  }
                  v243 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v248);
LABEL_350:
                  v240 |= v247 | v243;
                  v242 = 16;
                  *(_DWORD *)(v3 + 56) = 16;
LABEL_351:
                  v244 = 2 * v239;
                  v54 = v239 >= 0x20000001;
                  v239 *= 2;
                  if (v54)
                    goto LABEL_359;
                }
              }
              v244 = *(_DWORD *)(v3 + 44);
LABEL_359:
              v249 = (HIWORD(v244) * v241) & 0xFFFF0000;
              v250 = v244 - v249;
              if (v240 < v249)
                v251 = 0;
              else
                v251 = (HIWORD(v244) * v241) & 0xFFFF0000;
              v252 = v240 - v251;
              *(_WORD *)(v3 + 1096) = *(_WORD *)(v3 + 2 * ((v241 >> 7) & 0x1FE | (v240 >= v249)) + 64) + v241;
              if (v240 < v249)
                v253 = (HIWORD(v244) * v241) & 0xFFFF0000;
              else
                v253 = v244 - v249;
              *(_DWORD *)(v3 + 44) = v253;
              *(_DWORD *)(v3 + 48) = v252;
              if (v240 >= v249)
              {
                v254 = 0;
                if (v250 < 0x40000001)
                  goto LABEL_367;
                goto LABEL_401;
              }
              if (v249 < 0x40000001)
              {
                v262 = *(_DWORD *)(v3 + 56);
                while (2)
                {
                  v252 *= 2;
                  *(_DWORD *)(v3 + 56) = --v262;
                  if (v262)
                    goto LABEL_381;
                  v265 = *(_QWORD *)(v3 + 32);
                  *(_QWORD *)(v3 + 32) = v265 + 1;
                  v266 = *(unsigned int *)(v3 + 16);
                  if (v265 + 1 >= v266)
                  {
                    v267 = 65280;
                    v268 = v265 + 2;
                    *(_QWORD *)(v3 + 32) = v268;
                    if (v268 >= v266)
                      goto LABEL_387;
                  }
                  else
                  {
                    v267 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v265 + 1) << 8;
                    v268 = v265 + 2;
                    *(_QWORD *)(v3 + 32) = v268;
                    if (v268 >= v266)
                    {
LABEL_387:
                      v263 = 255;
LABEL_380:
                      v252 |= v267 | v263;
                      v262 = 16;
                      *(_DWORD *)(v3 + 56) = 16;
LABEL_381:
                      v264 = 2 * v249;
                      v54 = v249 >= 0x20000001;
                      v249 *= 2;
                      if (v54)
                        goto LABEL_389;
                      continue;
                    }
                  }
                  break;
                }
                v263 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v268);
                goto LABEL_380;
              }
              v264 = v249;
LABEL_389:
              v269 = *(unsigned __int16 *)(v3 + 1098);
              v270 = (HIWORD(v264) * v269) & 0xFFFF0000;
              v250 = v264 - v270;
              if (v252 < v270)
                v271 = 0;
              else
                v271 = (HIWORD(v264) * v269) & 0xFFFF0000;
              v272 = v252 >= v270;
              v252 -= v271;
              v273 = v272;
              *(_WORD *)(v3 + 1098) = *(_WORD *)(v3 + 2 * ((v269 >> 7) & 0x1FE | v273) + 64) + v269;
              if (v272)
                v274 = v250;
              else
                v274 = v270;
              *(_DWORD *)(v3 + 44) = v274;
              *(_DWORD *)(v3 + 48) = v252;
              if (v272)
              {
                v254 = 2;
                if (v250 < 0x40000001)
                  goto LABEL_367;
                goto LABEL_401;
              }
              if (v270 < 0x40000001)
              {
                v425 = *(_DWORD *)(v3 + 56);
                while (2)
                {
                  v252 *= 2;
                  *(_DWORD *)(v3 + 56) = --v425;
                  if (v425)
                    goto LABEL_636;
                  v428 = *(_QWORD *)(v3 + 32);
                  *(_QWORD *)(v3 + 32) = v428 + 1;
                  v429 = *(unsigned int *)(v3 + 16);
                  if (v428 + 1 >= v429)
                  {
                    v430 = 65280;
                    v431 = v428 + 2;
                    *(_QWORD *)(v3 + 32) = v431;
                    if (v431 >= v429)
                      goto LABEL_642;
                  }
                  else
                  {
                    v430 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v428 + 1) << 8;
                    v431 = v428 + 2;
                    *(_QWORD *)(v3 + 32) = v431;
                    if (v431 >= v429)
                    {
LABEL_642:
                      v426 = 255;
LABEL_635:
                      v252 |= v430 | v426;
                      v425 = 16;
                      *(_DWORD *)(v3 + 56) = 16;
LABEL_636:
                      v427 = 2 * v270;
                      v54 = v270 >= 0x20000001;
                      v270 *= 2;
                      if (v54)
                        goto LABEL_644;
                      continue;
                    }
                  }
                  break;
                }
                v426 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v431);
                goto LABEL_635;
              }
              v427 = v270;
LABEL_644:
              v432 = *(unsigned __int16 *)(v3 + 1100);
              v433 = (HIWORD(v427) * v432) & 0xFFFF0000;
              v250 = v427 - v433;
              if (v252 < v433)
                v434 = 0;
              else
                v434 = (HIWORD(v427) * v432) & 0xFFFF0000;
              v435 = v252 >= v433;
              v252 -= v434;
              v436 = v435;
              *(_WORD *)(v3 + 1100) = *(_WORD *)(v3 + 2 * ((v432 >> 7) & 0x1FE | v436) + 64) + v432;
              if (v435)
                v437 = v250;
              else
                v437 = v433;
              *(_DWORD *)(v3 + 44) = v437;
              *(_DWORD *)(v3 + 48) = v252;
              if (v435)
              {
                v254 = 4;
                if (v250 < 0x40000001)
                  goto LABEL_367;
                goto LABEL_401;
              }
              if (v433 < 0x40000001)
              {
                v438 = *(_DWORD *)(v3 + 56);
                while (2)
                {
                  v252 *= 2;
                  *(_DWORD *)(v3 + 56) = --v438;
                  if (v438)
                    goto LABEL_661;
                  v441 = *(_QWORD *)(v3 + 32);
                  *(_QWORD *)(v3 + 32) = v441 + 1;
                  v442 = *(unsigned int *)(v3 + 16);
                  if (v441 + 1 >= v442)
                  {
                    v443 = 65280;
                    v444 = v441 + 2;
                    *(_QWORD *)(v3 + 32) = v444;
                    if (v444 >= v442)
                      goto LABEL_667;
                  }
                  else
                  {
                    v443 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v441 + 1) << 8;
                    v444 = v441 + 2;
                    *(_QWORD *)(v3 + 32) = v444;
                    if (v444 >= v442)
                    {
LABEL_667:
                      v439 = 255;
LABEL_660:
                      v252 |= v443 | v439;
                      v438 = 16;
                      *(_DWORD *)(v3 + 56) = 16;
LABEL_661:
                      v440 = 2 * v433;
                      v54 = v433 >= 0x20000001;
                      v433 *= 2;
                      if (v54)
                        goto LABEL_669;
                      continue;
                    }
                  }
                  break;
                }
                v439 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v444);
                goto LABEL_660;
              }
              v440 = v433;
LABEL_669:
              v445 = *(unsigned __int16 *)(v3 + 1102);
              v446 = (HIWORD(v440) * v445) & 0xFFFF0000;
              v250 = v440 - v446;
              if (v252 < v446)
                v447 = 0;
              else
                v447 = (HIWORD(v440) * v445) & 0xFFFF0000;
              v448 = v252 >= v446;
              v252 -= v447;
              v449 = v448;
              *(_WORD *)(v3 + 1102) = *(_WORD *)(v3 + 2 * ((v445 >> 7) & 0x1FE | v449) + 64) + v445;
              if (v448)
                v450 = v250;
              else
                v450 = v446;
              *(_DWORD *)(v3 + 44) = v450;
              *(_DWORD *)(v3 + 48) = v252;
              if (v448)
              {
                v254 = 6;
                if (v250 < 0x40000001)
                  goto LABEL_367;
                goto LABEL_401;
              }
              if (v446 < 0x40000001)
              {
                v451 = *(_DWORD *)(v3 + 56);
                while (2)
                {
                  v252 *= 2;
                  *(_DWORD *)(v3 + 56) = --v451;
                  if (v451)
                    goto LABEL_686;
                  v454 = *(_QWORD *)(v3 + 32);
                  *(_QWORD *)(v3 + 32) = v454 + 1;
                  v455 = *(unsigned int *)(v3 + 16);
                  if (v454 + 1 >= v455)
                  {
                    v456 = 65280;
                    v457 = v454 + 2;
                    *(_QWORD *)(v3 + 32) = v457;
                    if (v457 >= v455)
                      goto LABEL_692;
                  }
                  else
                  {
                    v456 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v454 + 1) << 8;
                    v457 = v454 + 2;
                    *(_QWORD *)(v3 + 32) = v457;
                    if (v457 >= v455)
                    {
LABEL_692:
                      v452 = 255;
LABEL_685:
                      v252 |= v456 | v452;
                      v451 = 16;
                      *(_DWORD *)(v3 + 56) = 16;
LABEL_686:
                      v453 = 2 * v446;
                      v54 = v446 >= 0x20000001;
                      v446 *= 2;
                      if (v54)
                        goto LABEL_694;
                      continue;
                    }
                  }
                  break;
                }
                v452 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v457);
                goto LABEL_685;
              }
              v453 = v446;
LABEL_694:
              v458 = *(unsigned __int16 *)(v3 + 1104);
              v459 = (HIWORD(v453) * v458) & 0xFFFF0000;
              v250 = v453 - v459;
              if (v252 < v459)
                v460 = 0;
              else
                v460 = (HIWORD(v453) * v458) & 0xFFFF0000;
              v461 = v252 >= v459;
              v252 -= v460;
              v462 = v461;
              *(_WORD *)(v3 + 1104) = *(_WORD *)(v3 + 2 * ((v458 >> 7) & 0x1FE | v462) + 64) + v458;
              if (v461)
                v463 = v250;
              else
                v463 = v459;
              *(_DWORD *)(v3 + 44) = v463;
              *(_DWORD *)(v3 + 48) = v252;
              if (!v461)
              {
                v464 = 0;
                v465 = 2;
                if (v459 >= 0x40000001)
                {
                  while (1)
                  {
                    v466 = v459;
LABEL_709:
                    v467 = (v466 >> 1) & 0x7FFF0000;
                    v459 = v466 - v467;
                    v468 = v252 >= v467 ? (v466 >> 1) & 0x7FFF0000 : 0;
                    v469 = v252 >= v467;
                    v252 -= v468;
                    v470 = v469 ? v459 : v467;
                    *(_DWORD *)(v3 + 44) = v470;
                    *(_DWORD *)(v3 + 48) = v252;
                    if (!v469)
                      break;
                    v464 += 1 << v465++;
                    if (v459 < 0x40000001)
                      goto LABEL_718;
                  }
                  while (2)
                  {
                    if (v467 < 0x40000001)
                    {
                      v480 = *(_DWORD *)(v3 + 56);
                      while (2)
                      {
                        v252 *= 2;
                        *(_DWORD *)(v3 + 56) = --v480;
                        if (v480)
                          goto LABEL_736;
                        v482 = *(_QWORD *)(v3 + 32);
                        *(_QWORD *)(v3 + 32) = v482 + 1;
                        v483 = *(unsigned int *)(v3 + 16);
                        if (v482 + 1 >= v483)
                        {
                          v484 = 65280;
                          v485 = v482 + 2;
                          *(_QWORD *)(v3 + 32) = v485;
                          if (v485 >= v483)
                            goto LABEL_742;
                        }
                        else
                        {
                          v484 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v482 + 1) << 8;
                          v485 = v482 + 2;
                          *(_QWORD *)(v3 + 32) = v485;
                          if (v485 >= v483)
                          {
LABEL_742:
                            v481 = 255;
LABEL_735:
                            v252 |= v484 | v481;
                            v480 = 16;
                            *(_DWORD *)(v3 + 56) = 16;
LABEL_736:
                            v477 = 2 * v467;
                            v54 = v467 >= 0x20000001;
                            v467 *= 2;
                            if (v54)
                              goto LABEL_729;
                            continue;
                          }
                        }
                        break;
                      }
                      v481 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v485);
                      goto LABEL_735;
                    }
                    v477 = v467;
LABEL_729:
                    v478 = (v477 >> 1) & 0x7FFF0000;
                    v467 = v477 - v478;
                    v479 = v252 >= v478;
                    if (v252 < v478)
                    {
                      v467 = v478;
                      v478 = 0;
                    }
                    v252 -= v478;
                    *(_DWORD *)(v3 + 44) = v467;
                    *(_DWORD *)(v3 + 48) = v252;
                    v464 += v479 << --v465;
                    if (v465)
                      continue;
                    break;
                  }
                  v280 = *(_DWORD *)(v225 - 4) + v464 + 8;
                  *(_DWORD *)(v225 - 4) = v280;
                  if (v280 < 1)
                    goto LABEL_314;
LABEL_408:
                  v281 = (char *)__p[1];
                  v282 = v507;
                  while (2)
                  {
                    if ((unint64_t)(v282 - v281) >= 0xC)
                    {
                      *((_DWORD *)v281 + 2) = 0;
                      *(_QWORD *)v281 = 0;
                      __p[1] = v281 + 12;
                      v281 += 12;
                      v295 = *(unsigned __int8 *)(v3 + 1153);
                      if (!*(_BYTE *)(v3 + 1153))
                        goto LABEL_447;
                      goto LABEL_409;
                    }
                    v288 = v281 - (char *)__p[0];
                    v289 = v281 - (char *)__p[0] + 12;
                    if (v289 < 0)
                      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                    if (2 * (v282 - (char *)__p[0]) > (unint64_t)v289)
                      v289 = 2 * (v282 - (char *)__p[0]);
                    if ((unint64_t)(v282 - (char *)__p[0]) >= 0x3FFFFFFFFFFFFFFFLL)
                      v290 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v290 = v289;
                    if (v290)
                    {
                      v291 = (char *)operator new(v290);
                      v292 = &v291[v288];
                      *((_DWORD *)v292 + 2) = 0;
                      *(_QWORD *)v292 = 0;
                      if (v281 != __p[0])
                        goto LABEL_422;
LABEL_427:
                      v296 = v280;
                      v297 = v292;
                      v298 = v292 + 12;
                      v299 = 0;
LABEL_444:
                      v282 = &v291[v290];
                      v311 = __p[0];
                      v281 = &v298[v299];
                      __p[0] = v297;
                      __p[1] = &v298[v299];
                      v507 = v282;
                      if (v311)
                        operator delete(v311);
                      v16 = v3 + 1122;
                      v280 = v296;
                      v295 = *(unsigned __int8 *)(v3 + 1153);
                      if (!*(_BYTE *)(v3 + 1153))
                      {
LABEL_447:
                        v313 = *(_DWORD *)(v3 + 44);
                        v312 = *(_DWORD *)(v3 + 48);
                        v314 = 2;
                        v315 = 7;
                        v316 = *(unsigned __int16 *)(v3 + 1120);
                        if (v313 >= 0x40000001)
                        {
                          while (1)
                          {
                            v317 = v313;
LABEL_449:
                            v318 = (HIWORD(v317) * v316) & 0xFFFF0000;
                            v313 = v317 - v318;
                            v319 = v312 < v318 ? 0 : (HIWORD(v317) * v316) & 0xFFFF0000;
                            v320 = v312 >= v318;
                            v312 -= v319;
                            v321 = v320;
                            *(_WORD *)(v15 + 2 * v315) = *(_WORD *)(v3 + 2 * ((v316 >> 7) & 0x1FE | v321) + 64)
                                                         + v316;
                            v322 = v320 ? v313 : v318;
                            *(_DWORD *)(v3 + 44) = v322;
                            *(_DWORD *)(v3 + 48) = v312;
                            if (!v320)
                              break;
                            v295 += 1 << v314++;
                            if (v315)
                              --v315;
                            else
                              v315 = 0;
                            v316 = *(unsigned __int16 *)(v15 + 2 * v315);
                            if (v313 < 0x40000001)
                              goto LABEL_464;
                          }
                          while (2)
                          {
                            if (v318 < 0x40000001)
                            {
                              v332 = *(_DWORD *)(v3 + 56);
                              while (2)
                              {
                                v312 *= 2;
                                *(_DWORD *)(v3 + 56) = --v332;
                                if (v332)
                                  goto LABEL_482;
                                v334 = *(_QWORD *)(v3 + 32);
                                *(_QWORD *)(v3 + 32) = v334 + 1;
                                v335 = *(unsigned int *)(v3 + 16);
                                if (v334 + 1 >= v335)
                                {
                                  v336 = 65280;
                                  v337 = v334 + 2;
                                  *(_QWORD *)(v3 + 32) = v337;
                                  if (v337 >= v335)
                                    goto LABEL_488;
                                }
                                else
                                {
                                  v336 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v334 + 1) << 8;
                                  v337 = v334 + 2;
                                  *(_QWORD *)(v3 + 32) = v337;
                                  if (v337 >= v335)
                                  {
LABEL_488:
                                    v333 = 255;
LABEL_481:
                                    v312 |= v336 | v333;
                                    v332 = 16;
                                    *(_DWORD *)(v3 + 56) = 16;
LABEL_482:
                                    v329 = 2 * v318;
                                    v54 = v318 >= 0x20000001;
                                    v318 *= 2;
                                    if (v54)
                                      goto LABEL_475;
                                    continue;
                                  }
                                }
                                break;
                              }
                              v333 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v337);
                              goto LABEL_481;
                            }
                            v329 = v318;
LABEL_475:
                            v330 = (v329 >> 1) & 0x7FFF0000;
                            v318 = v329 - v330;
                            v331 = v312 >= v330;
                            if (v312 < v330)
                            {
                              v318 = v330;
                              v330 = 0;
                            }
                            v312 -= v330;
                            *(_DWORD *)(v3 + 44) = v318;
                            *(_DWORD *)(v3 + 48) = v312;
                            v295 += v331 << --v314;
                            if (v314)
                              continue;
                            break;
                          }
                          if (v295)
                          {
                            if (v318 < 0x40000001)
                            {
                              v338 = *(_DWORD *)(v3 + 56);
                              while (2)
                              {
                                v312 *= 2;
                                *(_DWORD *)(v3 + 56) = --v338;
                                if (v338)
                                  goto LABEL_494;
                                v341 = *(_QWORD *)(v3 + 32);
                                *(_QWORD *)(v3 + 32) = v341 + 1;
                                v342 = *(unsigned int *)(v3 + 16);
                                if (v341 + 1 >= v342)
                                {
                                  v343 = 65280;
                                  v344 = v341 + 2;
                                  *(_QWORD *)(v3 + 32) = v344;
                                  if (v344 >= v342)
                                    goto LABEL_500;
                                }
                                else
                                {
                                  v343 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v341 + 1) << 8;
                                  v344 = v341 + 2;
                                  *(_QWORD *)(v3 + 32) = v344;
                                  if (v344 >= v342)
                                  {
LABEL_500:
                                    v339 = 255;
LABEL_493:
                                    v312 |= v343 | v339;
                                    v338 = 16;
                                    *(_DWORD *)(v3 + 56) = 16;
LABEL_494:
                                    v340 = 2 * v318;
                                    v54 = v318 >= 0x20000001;
                                    v318 *= 2;
                                    if (v54)
                                      goto LABEL_503;
                                    continue;
                                  }
                                }
                                break;
                              }
                              v339 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v344);
                              goto LABEL_493;
                            }
                            v340 = v318;
LABEL_503:
                            v346 = (v340 >> 1) & 0x7FFF0000;
                            v347 = v340 - v346;
                            if (v312 >= v346)
                            {
                              v348 = (v340 >> 1) & 0x7FFF0000;
                            }
                            else
                            {
                              v347 = (v340 >> 1) & 0x7FFF0000;
                              v348 = 0;
                            }
                            if (v312 >= v346)
                              v345 = v295;
                            else
                              v345 = -v295;
                            *(_DWORD *)(v3 + 44) = v347;
                            *(_DWORD *)(v3 + 48) = v312 - v348;
                          }
                          else
                          {
                            v345 = 0;
                          }
                          v349 = 0;
                          *((_DWORD *)v281 - 3) = v345;
                          v351 = *(_DWORD *)(v3 + 44);
                          v350 = *(_DWORD *)(v3 + 48);
                          v352 = 2;
                          v353 = 7;
                          v354 = *(unsigned __int16 *)(v3 + 1120);
                          if (v351 >= 0x40000001)
                          {
                            while (1)
                            {
                              v355 = v351;
LABEL_512:
                              v356 = (HIWORD(v355) * v354) & 0xFFFF0000;
                              v351 = v355 - v356;
                              v357 = v350 < v356 ? 0 : (HIWORD(v355) * v354) & 0xFFFF0000;
                              v358 = v350 >= v356;
                              v350 -= v357;
                              v359 = v358;
                              *(_WORD *)(v15 + 2 * v353) = *(_WORD *)(v3 + 2 * ((v354 >> 7) & 0x1FE | v359) + 64)
                                                           + v354;
                              v360 = v358 ? v351 : v356;
                              *(_DWORD *)(v3 + 44) = v360;
                              *(_DWORD *)(v3 + 48) = v350;
                              if (!v358)
                                break;
                              v349 += 1 << v352++;
                              if (v353)
                                --v353;
                              else
                                v353 = 0;
                              v354 = *(unsigned __int16 *)(v15 + 2 * v353);
                              if (v351 < 0x40000001)
                                goto LABEL_527;
                            }
                            while (2)
                            {
                              if (v356 < 0x40000001)
                              {
                                v370 = *(_DWORD *)(v3 + 56);
                                while (2)
                                {
                                  v350 *= 2;
                                  *(_DWORD *)(v3 + 56) = --v370;
                                  if (v370)
                                    goto LABEL_545;
                                  v372 = *(_QWORD *)(v3 + 32);
                                  *(_QWORD *)(v3 + 32) = v372 + 1;
                                  v373 = *(unsigned int *)(v3 + 16);
                                  if (v372 + 1 >= v373)
                                  {
                                    v374 = 65280;
                                    v375 = v372 + 2;
                                    *(_QWORD *)(v3 + 32) = v375;
                                    if (v375 >= v373)
                                      goto LABEL_551;
                                  }
                                  else
                                  {
                                    v374 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v372 + 1) << 8;
                                    v375 = v372 + 2;
                                    *(_QWORD *)(v3 + 32) = v375;
                                    if (v375 >= v373)
                                    {
LABEL_551:
                                      v371 = 255;
LABEL_544:
                                      v350 |= v374 | v371;
                                      v370 = 16;
                                      *(_DWORD *)(v3 + 56) = 16;
LABEL_545:
                                      v367 = 2 * v356;
                                      v54 = v356 >= 0x20000001;
                                      v356 *= 2;
                                      if (v54)
                                        goto LABEL_538;
                                      continue;
                                    }
                                  }
                                  break;
                                }
                                v371 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v375);
                                goto LABEL_544;
                              }
                              v367 = v356;
LABEL_538:
                              v368 = (v367 >> 1) & 0x7FFF0000;
                              v356 = v367 - v368;
                              v369 = v350 >= v368;
                              if (v350 < v368)
                              {
                                v356 = v368;
                                v368 = 0;
                              }
                              v350 -= v368;
                              *(_DWORD *)(v3 + 44) = v356;
                              *(_DWORD *)(v3 + 48) = v350;
                              v349 += v369 << --v352;
                              if (v352)
                                continue;
                              break;
                            }
                            if (v349)
                            {
                              if (v356 < 0x40000001)
                              {
                                v376 = *(_DWORD *)(v3 + 56);
                                while (2)
                                {
                                  v350 *= 2;
                                  *(_DWORD *)(v3 + 56) = --v376;
                                  if (v376)
                                    goto LABEL_557;
                                  v379 = *(_QWORD *)(v3 + 32);
                                  *(_QWORD *)(v3 + 32) = v379 + 1;
                                  v380 = *(unsigned int *)(v3 + 16);
                                  if (v379 + 1 >= v380)
                                  {
                                    v381 = 65280;
                                    v382 = v379 + 2;
                                    *(_QWORD *)(v3 + 32) = v382;
                                    if (v382 >= v380)
                                      goto LABEL_563;
                                  }
                                  else
                                  {
                                    v381 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v379 + 1) << 8;
                                    v382 = v379 + 2;
                                    *(_QWORD *)(v3 + 32) = v382;
                                    if (v382 >= v380)
                                    {
LABEL_563:
                                      v377 = 255;
LABEL_556:
                                      v350 |= v381 | v377;
                                      v376 = 16;
                                      *(_DWORD *)(v3 + 56) = 16;
LABEL_557:
                                      v378 = 2 * v356;
                                      v54 = v356 >= 0x20000001;
                                      v356 *= 2;
                                      if (v54)
                                        goto LABEL_566;
                                      continue;
                                    }
                                  }
                                  break;
                                }
                                v377 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v382);
                                goto LABEL_556;
                              }
                              v378 = v356;
LABEL_566:
                              v384 = (v378 >> 1) & 0x7FFF0000;
                              v385 = v378 - v384;
                              if (v350 >= v384)
                              {
                                v386 = (v378 >> 1) & 0x7FFF0000;
                              }
                              else
                              {
                                v385 = (v378 >> 1) & 0x7FFF0000;
                                v386 = 0;
                              }
                              if (v350 >= v384)
                                v383 = v349;
                              else
                                v383 = -v349;
                              *(_DWORD *)(v3 + 44) = v385;
                              *(_DWORD *)(v3 + 48) = v350 - v386;
                            }
                            else
                            {
                              v383 = 0;
                            }
                            v387 = 0;
                            *((_DWORD *)v281 - 2) = v383;
                            v389 = *(_DWORD *)(v3 + 44);
                            v388 = *(_DWORD *)(v3 + 48);
                            v390 = 1;
                            v391 = 4;
                            v392 = *(unsigned __int16 *)(v16 + 8);
                            if (v389 >= 0x40000001)
                            {
                              while (1)
                              {
                                v393 = v389;
LABEL_575:
                                v394 = (HIWORD(v393) * v392) & 0xFFFF0000;
                                v389 = v393 - v394;
                                v395 = v388 < v394 ? 0 : (HIWORD(v393) * v392) & 0xFFFF0000;
                                v396 = v388 >= v394;
                                v388 -= v395;
                                v397 = v396;
                                *(_WORD *)(v16 + 2 * v391) = *(_WORD *)(v3 + 2 * ((v392 >> 7) & 0x1FE | v397) + 64)
                                                             + v392;
                                v398 = v396 ? v389 : v394;
                                *(_DWORD *)(v3 + 44) = v398;
                                *(_DWORD *)(v3 + 48) = v388;
                                if (!v396)
                                  break;
                                v387 += 1 << v390++;
                                if (v391)
                                  --v391;
                                else
                                  v391 = 0;
                                v392 = *(unsigned __int16 *)(v16 + 2 * v391);
                                if (v389 < 0x40000001)
                                  goto LABEL_590;
                              }
                              while (2)
                              {
                                if (v394 < 0x40000001)
                                {
                                  v408 = *(_DWORD *)(v3 + 56);
                                  while (2)
                                  {
                                    v388 *= 2;
                                    *(_DWORD *)(v3 + 56) = --v408;
                                    if (v408)
                                      goto LABEL_608;
                                    v410 = *(_QWORD *)(v3 + 32);
                                    *(_QWORD *)(v3 + 32) = v410 + 1;
                                    v411 = *(unsigned int *)(v3 + 16);
                                    if (v410 + 1 >= v411)
                                    {
                                      v412 = 65280;
                                      v413 = v410 + 2;
                                      *(_QWORD *)(v3 + 32) = v413;
                                      if (v413 >= v411)
                                        goto LABEL_614;
                                    }
                                    else
                                    {
                                      v412 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v410 + 1) << 8;
                                      v413 = v410 + 2;
                                      *(_QWORD *)(v3 + 32) = v413;
                                      if (v413 >= v411)
                                      {
LABEL_614:
                                        v409 = 255;
LABEL_607:
                                        v388 |= v412 | v409;
                                        v408 = 16;
                                        *(_DWORD *)(v3 + 56) = 16;
LABEL_608:
                                        v405 = 2 * v394;
                                        v54 = v394 >= 0x20000001;
                                        v394 *= 2;
                                        if (v54)
                                          goto LABEL_601;
                                        continue;
                                      }
                                    }
                                    break;
                                  }
                                  v409 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v413);
                                  goto LABEL_607;
                                }
                                v405 = v394;
LABEL_601:
                                v406 = (v405 >> 1) & 0x7FFF0000;
                                v394 = v405 - v406;
                                v407 = v388 >= v406;
                                if (v388 < v406)
                                {
                                  v394 = v406;
                                  v406 = 0;
                                }
                                v388 -= v406;
                                *(_DWORD *)(v3 + 44) = v394;
                                *(_DWORD *)(v3 + 48) = v388;
                                v387 += v407 << --v390;
                                if (v390)
                                  continue;
                                break;
                              }
                              if (v387)
                              {
                                if (v394 < 0x40000001)
                                {
                                  v414 = *(_DWORD *)(v3 + 56);
                                  while (2)
                                  {
                                    v388 *= 2;
                                    *(_DWORD *)(v3 + 56) = --v414;
                                    if (v414)
                                      goto LABEL_620;
                                    v417 = *(_QWORD *)(v3 + 32);
                                    *(_QWORD *)(v3 + 32) = v417 + 1;
                                    v418 = *(unsigned int *)(v3 + 16);
                                    if (v417 + 1 >= v418)
                                    {
                                      v419 = 65280;
                                      v420 = v417 + 2;
                                      *(_QWORD *)(v3 + 32) = v420;
                                      if (v420 >= v418)
                                        goto LABEL_626;
                                    }
                                    else
                                    {
                                      v419 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v417 + 1) << 8;
                                      v420 = v417 + 2;
                                      *(_QWORD *)(v3 + 32) = v420;
                                      if (v420 >= v418)
                                      {
LABEL_626:
                                        v415 = 255;
LABEL_619:
                                        v388 |= v419 | v415;
                                        v414 = 16;
                                        *(_DWORD *)(v3 + 56) = 16;
LABEL_620:
                                        v416 = 2 * v394;
                                        v54 = v394 >= 0x20000001;
                                        v394 *= 2;
                                        if (v54)
                                          goto LABEL_628;
                                        continue;
                                      }
                                    }
                                    break;
                                  }
                                  v415 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v420);
                                  goto LABEL_619;
                                }
                                v416 = v394;
LABEL_628:
                                v421 = (v416 >> 1) & 0x7FFF0000;
                                v422 = v416 - v421;
                                if (v388 < v421)
                                {
                                  v422 = (v416 >> 1) & 0x7FFF0000;
                                  v421 = 0;
                                  v387 = -v387;
                                }
                                *(_DWORD *)(v3 + 44) = v422;
                                *(_DWORD *)(v3 + 48) = v388 - v421;
                              }
                              *((_DWORD *)v281 - 1) = v387;
                              v423 = *((_DWORD *)v281 - 2);
                              v424 = *((_DWORD *)v281 - 3) + *(_DWORD *)(v3 + 1156);
                              *((_DWORD *)v281 - 3) = v424;
                              *((_DWORD *)v281 - 2) = v423 + *(_DWORD *)(v3 + 1160);
                              *((_DWORD *)v281 - 1) = *(_DWORD *)(v3 + 1164) + v387;
                              *(_DWORD *)(v3 + 1156) = v424;
                              *(_DWORD *)(v3 + 1160) = *((_DWORD *)v281 - 2);
                              *(_DWORD *)(v3 + 1164) = *((_DWORD *)v281 - 1);
                              v284 = *((_DWORD *)v281 - 2);
                              v285 = *((_DWORD *)v281 - 3) << *(_DWORD *)(v3 + 1144);
LABEL_410:
                              *((_DWORD *)v281 - 3) = v285;
                              *((_DWORD *)v281 - 2) = v284 << *(_DWORD *)(v3 + 1144);
                              v286 = v505;
                              if (v505 <= *((_DWORD *)v281 - 1))
                                v286 = *((_DWORD *)v281 - 1);
                              v505 = v286;
                              v287 = __OFSUB__(v280--, 1);
                              if ((v280 < 0) ^ v287 | (v280 == 0))
                                goto LABEL_314;
                              continue;
                            }
LABEL_590:
                            v399 = *(_DWORD *)(v3 + 56);
                            while (2)
                            {
                              v388 *= 2;
                              *(_DWORD *)(v3 + 56) = --v399;
                              if (v399)
                                goto LABEL_593;
                              v401 = *(_QWORD *)(v3 + 32);
                              *(_QWORD *)(v3 + 32) = v401 + 1;
                              v402 = *(unsigned int *)(v3 + 16);
                              if (v401 + 1 >= v402)
                              {
                                v403 = 65280;
                                v404 = v401 + 2;
                                *(_QWORD *)(v3 + 32) = v404;
                                if (v404 >= v402)
                                  goto LABEL_599;
                              }
                              else
                              {
                                v403 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v401 + 1) << 8;
                                v404 = v401 + 2;
                                *(_QWORD *)(v3 + 32) = v404;
                                if (v404 >= v402)
                                {
LABEL_599:
                                  v400 = 255;
LABEL_592:
                                  v388 |= v403 | v400;
                                  v399 = 16;
                                  *(_DWORD *)(v3 + 56) = 16;
LABEL_593:
                                  v393 = 2 * v389;
                                  v54 = v389 >= 0x20000001;
                                  v389 *= 2;
                                  if (v54)
                                    goto LABEL_575;
                                  continue;
                                }
                              }
                              break;
                            }
                            v400 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v404);
                            goto LABEL_592;
                          }
LABEL_527:
                          v361 = *(_DWORD *)(v3 + 56);
                          while (2)
                          {
                            v350 *= 2;
                            *(_DWORD *)(v3 + 56) = --v361;
                            if (v361)
                              goto LABEL_530;
                            v363 = *(_QWORD *)(v3 + 32);
                            *(_QWORD *)(v3 + 32) = v363 + 1;
                            v364 = *(unsigned int *)(v3 + 16);
                            if (v363 + 1 >= v364)
                            {
                              v365 = 65280;
                              v366 = v363 + 2;
                              *(_QWORD *)(v3 + 32) = v366;
                              if (v366 >= v364)
                                goto LABEL_536;
                            }
                            else
                            {
                              v365 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v363 + 1) << 8;
                              v366 = v363 + 2;
                              *(_QWORD *)(v3 + 32) = v366;
                              if (v366 >= v364)
                              {
LABEL_536:
                                v362 = 255;
LABEL_529:
                                v350 |= v365 | v362;
                                v361 = 16;
                                *(_DWORD *)(v3 + 56) = 16;
LABEL_530:
                                v355 = 2 * v351;
                                v54 = v351 >= 0x20000001;
                                v351 *= 2;
                                if (v54)
                                  goto LABEL_512;
                                continue;
                              }
                            }
                            break;
                          }
                          v362 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v366);
                          goto LABEL_529;
                        }
LABEL_464:
                        v323 = *(_DWORD *)(v3 + 56);
                        while (2)
                        {
                          v312 *= 2;
                          *(_DWORD *)(v3 + 56) = --v323;
                          if (v323)
                            goto LABEL_467;
                          v325 = *(_QWORD *)(v3 + 32);
                          *(_QWORD *)(v3 + 32) = v325 + 1;
                          v326 = *(unsigned int *)(v3 + 16);
                          if (v325 + 1 >= v326)
                          {
                            v327 = 65280;
                            v328 = v325 + 2;
                            *(_QWORD *)(v3 + 32) = v328;
                            if (v328 >= v326)
                              goto LABEL_473;
                          }
                          else
                          {
                            v327 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v325 + 1) << 8;
                            v328 = v325 + 2;
                            *(_QWORD *)(v3 + 32) = v328;
                            if (v328 >= v326)
                            {
LABEL_473:
                              v324 = 255;
LABEL_466:
                              v312 |= v327 | v324;
                              v323 = 16;
                              *(_DWORD *)(v3 + 56) = 16;
LABEL_467:
                              v317 = 2 * v313;
                              v54 = v313 >= 0x20000001;
                              v313 *= 2;
                              if (v54)
                                goto LABEL_449;
                              continue;
                            }
                          }
                          break;
                        }
                        v324 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v328);
                        goto LABEL_466;
                      }
LABEL_409:
                      *(_BYTE *)(v3 + 1153) = 0;
                      v283 = *(_DWORD *)(v3 + 1156);
                      *((_DWORD *)v281 - 3) = v283;
                      v284 = *(_DWORD *)(v3 + 1160);
                      *((_DWORD *)v281 - 2) = v284;
                      *((_DWORD *)v281 - 1) = *(_DWORD *)(v3 + 1164);
                      v285 = v283 << *(_DWORD *)(v3 + 1144);
                      goto LABEL_410;
                    }
                    break;
                  }
                  v291 = 0;
                  v292 = (char *)(v281 - (char *)__p[0]);
                  *(_DWORD *)(v288 + 8) = 0;
                  *(_QWORD *)v288 = 0;
                  if (v281 == __p[0])
                    goto LABEL_427;
LABEL_422:
                  if (v288 < 8)
                  {
                    v293 = v281;
                    v294 = v292;
                    goto LABEL_440;
                  }
                  v293 = v281;
                  v294 = v292;
                  if ((void *)((char *)__p[0] - (char *)v291) < (void *)0x20)
                    goto LABEL_440;
                  if (v288 >= 0x20)
                  {
                    v300 = v288 & 0xFFFFFFFFFFFFFFE0;
                    v301 = &v291[v288 - 16];
                    v302 = v281 - 16;
                    v303 = v288 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v304 = *(_OWORD *)v302;
                      *((_OWORD *)v301 - 1) = *((_OWORD *)v302 - 1);
                      *(_OWORD *)v301 = v304;
                      v301 -= 32;
                      v302 -= 32;
                      v303 -= 32;
                    }
                    while (v303);
                    if (v288 != v300)
                    {
                      if ((v288 & 0x18) == 0)
                      {
                        v294 = &v292[-v300];
                        v293 = &v281[-v300];
                        goto LABEL_440;
                      }
                      goto LABEL_435;
                    }
                  }
                  else
                  {
                    v300 = 0;
LABEL_435:
                    v293 = &v281[-(v288 & 0xFFFFFFFFFFFFFFF8)];
                    v294 = &v292[-(v288 & 0xFFFFFFFFFFFFFFF8)];
                    v305 = &v291[&v281[-v300] - (char *)__p[0] - 8];
                    v306 = &v281[-v300 - 8];
                    v307 = v300 - (v288 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      v308 = *(_QWORD *)v306;
                      v306 -= 8;
                      *(_QWORD *)v305 = v308;
                      v305 -= 8;
                      v307 += 8;
                    }
                    while (v307);
                    if (v288 != (v288 & 0xFFFFFFFFFFFFFFF8))
                    {
LABEL_440:
                      v309 = v294 - 1;
                      do
                      {
                        v310 = *--v293;
                        *v309-- = v310;
                      }
                      while (v293 != __p[0]);
                    }
                  }
                  v296 = v280;
                  v297 = v291;
                  v298 = v292 + 12;
                  v299 = (char *)__p[1] - (char *)v281;
                  if (__p[1] != v281)
                    memmove(v292 + 12, v281, (char *)__p[1] - (char *)v281);
                  goto LABEL_444;
                }
LABEL_718:
                v471 = *(_DWORD *)(v3 + 56);
                while (2)
                {
                  v252 *= 2;
                  *(_DWORD *)(v3 + 56) = --v471;
                  if (v471)
                    goto LABEL_721;
                  v473 = *(_QWORD *)(v3 + 32);
                  *(_QWORD *)(v3 + 32) = v473 + 1;
                  v474 = *(unsigned int *)(v3 + 16);
                  if (v473 + 1 >= v474)
                  {
                    v475 = 65280;
                    v476 = v473 + 2;
                    *(_QWORD *)(v3 + 32) = v476;
                    if (v476 >= v474)
                      goto LABEL_727;
                  }
                  else
                  {
                    v475 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v473 + 1) << 8;
                    v476 = v473 + 2;
                    *(_QWORD *)(v3 + 32) = v476;
                    if (v476 >= v474)
                    {
LABEL_727:
                      v472 = 255;
LABEL_720:
                      v252 |= v475 | v472;
                      v471 = 16;
                      *(_DWORD *)(v3 + 56) = 16;
LABEL_721:
                      v466 = 2 * v459;
                      v54 = v459 >= 0x20000001;
                      v459 *= 2;
                      if (v54)
                        goto LABEL_709;
                      continue;
                    }
                  }
                  break;
                }
                v472 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v476);
                goto LABEL_720;
              }
              v254 = 8;
              if (v250 < 0x40000001)
              {
LABEL_367:
                v255 = *(_DWORD *)(v3 + 56);
                while (2)
                {
                  v252 *= 2;
                  *(_DWORD *)(v3 + 56) = --v255;
                  if (v255)
                    goto LABEL_370;
                  v258 = *(_QWORD *)(v3 + 32);
                  *(_QWORD *)(v3 + 32) = v258 + 1;
                  v259 = *(unsigned int *)(v3 + 16);
                  if (v258 + 1 >= v259)
                  {
                    v260 = 65280;
                    v261 = v258 + 2;
                    *(_QWORD *)(v3 + 32) = v261;
                    if (v261 >= v259)
                      goto LABEL_376;
                  }
                  else
                  {
                    v260 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v258 + 1) << 8;
                    v261 = v258 + 2;
                    *(_QWORD *)(v3 + 32) = v261;
                    if (v261 >= v259)
                    {
LABEL_376:
                      v256 = 255;
LABEL_369:
                      v252 |= v260 | v256;
                      v255 = 16;
                      *(_DWORD *)(v3 + 56) = 16;
LABEL_370:
                      v257 = 2 * v250;
                      v54 = v250 >= 0x20000001;
                      v250 *= 2;
                      if (v54)
                        goto LABEL_402;
                      continue;
                    }
                  }
                  break;
                }
                v256 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v261);
                goto LABEL_369;
              }
LABEL_401:
              v257 = v250;
LABEL_402:
              v275 = *(unsigned __int16 *)(v3 + 1094);
              v276 = (HIWORD(v257) * v275) & 0xFFFF0000;
              v277 = v257 - v276;
              v278 = v252 >= v276;
              *(_WORD *)(v3 + 1094) = *(_WORD *)(v3 + 2 * ((v275 >> 7) & 0x1FE | v278) + 64) + v275;
              if (v252 < v276)
                v279 = v276;
              else
                v279 = v277;
              if (v252 < v276)
                v276 = 0;
              *(_DWORD *)(v3 + 44) = v279;
              *(_DWORD *)(v3 + 48) = v252 - v276;
              v280 = *(_DWORD *)(v225 - 4) + (v254 | v278);
              *(_DWORD *)(v225 - 4) = v280;
              if (v280 >= 1)
                goto LABEL_408;
LABEL_314:
              v216 = v504 - 1;
              if (v504 <= 1)
                goto LABEL_761;
            }
          }
          v193 = 0;
          v194 = *(_DWORD *)(v3 + 44);
          v195 = 1;
          if (v194 < 0x40000001)
          {
LABEL_287:
            v201 = *(_DWORD *)(v3 + 56);
            while (2)
            {
              v189 *= 2;
              *(_DWORD *)(v3 + 56) = --v201;
              if (v201)
                goto LABEL_290;
              v203 = *(_QWORD *)(v3 + 32);
              *(_QWORD *)(v3 + 32) = v203 + 1;
              v204 = *(unsigned int *)(v3 + 16);
              if (v203 + 1 >= v204)
              {
                v205 = 65280;
                v206 = v203 + 2;
                *(_QWORD *)(v3 + 32) = v206;
                if (v206 >= v204)
                  goto LABEL_296;
              }
              else
              {
                v205 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v203 + 1) << 8;
                v206 = v203 + 2;
                *(_QWORD *)(v3 + 32) = v206;
                if (v206 >= v204)
                {
LABEL_296:
                  v202 = 255;
LABEL_289:
                  v189 |= v205 | v202;
                  v201 = 16;
                  *(_DWORD *)(v3 + 56) = 16;
LABEL_290:
                  v196 = 2 * v194;
                  v54 = v194 >= 0x20000001;
                  v194 *= 2;
                  if (v54)
                    goto LABEL_278;
                  continue;
                }
              }
              break;
            }
            v202 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v206);
            goto LABEL_289;
          }
          while (1)
          {
            v196 = v194;
LABEL_278:
            v197 = (v196 >> 1) & 0x7FFF0000;
            v194 = v196 - v197;
            v198 = v189 >= v197 ? (v196 >> 1) & 0x7FFF0000 : 0;
            v199 = v189 >= v197;
            v189 -= v198;
            v200 = v199 ? v194 : v197;
            *(_DWORD *)(v3 + 44) = v200;
            *(_DWORD *)(v3 + 48) = v189;
            if (!v199)
              break;
            v193 += 1 << v195++;
            if (v194 < 0x40000001)
              goto LABEL_287;
          }
          do
          {
            if (v197 < 0x40000001)
            {
              v210 = *(_DWORD *)(v3 + 56);
              while (1)
              {
                v189 *= 2;
                *(_DWORD *)(v3 + 56) = --v210;
                if (v210)
                  goto LABEL_305;
                v212 = *(_QWORD *)(v3 + 32);
                *(_QWORD *)(v3 + 32) = v212 + 1;
                v213 = *(unsigned int *)(v3 + 16);
                if (v212 + 1 >= v213)
                {
                  v214 = 65280;
                  v215 = v212 + 2;
                  *(_QWORD *)(v3 + 32) = v215;
                  if (v215 >= v213)
                  {
LABEL_311:
                    v211 = 255;
                    goto LABEL_304;
                  }
                }
                else
                {
                  v214 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v212 + 1) << 8;
                  v215 = v212 + 2;
                  *(_QWORD *)(v3 + 32) = v215;
                  if (v215 >= v213)
                    goto LABEL_311;
                }
                v211 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + v215);
LABEL_304:
                v189 |= v214 | v211;
                v210 = 16;
                *(_DWORD *)(v3 + 56) = 16;
LABEL_305:
                v207 = 2 * v197;
                v54 = v197 >= 0x20000001;
                v197 *= 2;
                if (v54)
                  goto LABEL_298;
              }
            }
            v207 = v197;
LABEL_298:
            v208 = (v207 >> 1) & 0x7FFF0000;
            v197 = v207 - v208;
            v209 = v189 >= v208;
            if (v189 < v208)
            {
              v197 = v208;
              v208 = 0;
            }
            v189 -= v208;
            *(_DWORD *)(v3 + 44) = v197;
            *(_DWORD *)(v3 + 48) = v189;
            v193 += v209 << --v195;
          }
          while (v195);
          v186 = *v106 + v193;
          *v106 = v186;
          if (v186 >= 0)
            goto LABEL_313;
          v505 = 0;
LABEL_761:
          if ((v501 & 1) == 0)
          {
            v500 = v505 - v503[3].i32[0];
            *(_DWORD *)((char *)__p[0] + v499 + 12) = v500;
          }
          v81 = 1;
          v56 = v502 - 1;
        }
        while (v502 > 1);
      }
      v503 += 4;
    }
    while (v503 != v498);
  }
  v497 = (_QWORD *)(v3 + 1192);
  v496 = *(void **)(v3 + 1192);
  if (v496)
  {
    *(_QWORD *)(v3 + 1200) = v496;
    operator delete(v496);
    *v497 = 0;
    *(_QWORD *)(v3 + 1200) = 0;
    *(_QWORD *)(v3 + 1208) = 0;
  }
  result = *(double *)__p;
  *(_OWORD *)v497 = *(_OWORD *)__p;
  *(_QWORD *)(v3 + 1208) = v507;
  return result;
}

void sub_1886CCC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_0,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  char **v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  v4 = *a3;
  v5 = *(char ***)(a1 + 8);
  v7 = *v5;
  v6 = v5[1];
  v8 = (v6 - *v5) >> 4;
  if (v8 <= v4)
  {
    v9 = v4 + 1;
    v10 = v4 + 1 - v8;
    if (v4 + 1 <= v8)
    {
      if (v4 + 1 < v8)
        v5[1] = &v7[16 * v9];
    }
    else
    {
      v12 = v5[2];
      if (v10 <= (v12 - v6) >> 4)
      {
        v20 = &v6[16 * v10];
        do
        {
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v6 + 1) = 0x800000001;
          v6 += 16;
        }
        while (v6 != v20);
        v5[1] = v20;
      }
      else
      {
        if (v9 >> 60)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v13 = v12 - v7;
        v14 = (v12 - v7) >> 3;
        if (v14 <= v9)
          v14 = v4 + 1;
        if (v13 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = (char *)operator new(16 * v15);
        v17 = &v16[16 * v8];
        v18 = &v16[16 * v9];
        v19 = v17;
        do
        {
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0x800000001;
          v19 += 16;
        }
        while (v19 != v18);
        if (v6 != v7)
        {
          do
          {
            *((_OWORD *)v17 - 1) = *((_OWORD *)v6 - 1);
            v17 -= 16;
            v6 -= 16;
          }
          while (v6 != v7);
          v6 = v7;
        }
        *v5 = v17;
        v5[1] = v18;
        v5[2] = &v16[16 * v15];
        if (v6)
          operator delete(v6);
      }
      v7 = **(char ***)(a1 + 8);
    }
  }
  v21 = &v7[16 * v4];
  *(_DWORD *)v21 = *(_DWORD *)a2 - 1835492204;
  *(_QWORD *)(v21 + 4) = *(_QWORD *)(a2 + 4);
  *((_DWORD *)v21 + 3) = *(_DWORD *)(a2 + 12);
  return 0;
}

uint64_t gcl::gpcc::HlsIo::parseGsh(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, _DWORD *a5, _QWORD *a6)
{
  int v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  int v39;
  _BOOL4 v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  _BOOL4 v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  BOOL v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  int v71;
  _BOOL4 v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  int v78;
  BOOL v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  int v83;
  _BOOL4 v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  int v91;
  BOOL v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  int v96;
  _BOOL4 v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  int v101;
  BOOL v102;
  uint64_t v103;
  int v104;
  int v105;
  _BOOL4 v106;

  v6 = 0;
  v7 = 0;
  result = 0;
  v9 = 0;
  v10 = &a2[a3];
  v11 = -1;
  v12 = a2;
  do
  {
    v13 = v11;
    if (!v9)
    {
      if (v12 == v10)
      {
        v9 = 0;
        result = 3;
        v12 = &a2[a3];
        ++v11;
        continue;
      }
      v14 = *v12++;
      v6 = v14;
      v9 = 128;
    }
    v15 = (v9 & v6) != 0;
    v7 = v9 >> 1;
    v9 >>= 1;
    ++v11;
    if (v15)
      break;
  }
  while ((v13 + 1) < 0x3F);
  v16 = 0;
  if ((_DWORD)v11)
  {
    v17 = (v13 & 0x3F) + 1;
    v18 = v7;
    while (1)
    {
      if (v18)
        goto LABEL_12;
      if (v12 == v10)
      {
        v18 = 0;
        result = 3;
        v12 = &a2[a3];
        v16 *= 2;
        if (!--v17)
          break;
      }
      else
      {
        v19 = *v12++;
        v6 = v19;
        v18 = 128;
LABEL_12:
        v20 = (v18 & v6) != 0;
        v7 = v18 >> 1;
        v18 >>= 1;
        v16 = (2 * v16) | v20;
        if (!--v17)
          break;
      }
    }
  }
  *a5 = (v16 | (1 << v11)) - 1;
  v21 = -1;
  v22 = v7;
  while (2)
  {
    v23 = v21;
    if (v22)
    {
LABEL_20:
      v25 = (v22 & v6) != 0;
      v7 = v22 >> 1;
      v22 >>= 1;
      ++v21;
      if (v25)
        break;
    }
    else
    {
      if (v12 != v10)
      {
        v24 = *v12++;
        v6 = v24;
        v22 = 128;
        goto LABEL_20;
      }
      v22 = 0;
      result = 3;
      v12 = &a2[a3];
      ++v21;
    }
    if ((v23 + 1) < 0x3F)
      continue;
    break;
  }
  v26 = 0;
  if ((_DWORD)v21)
  {
    v27 = (v23 & 0x3F) + 1;
    v28 = v7;
    while (1)
    {
      if (v28)
        goto LABEL_27;
      if (v12 == v10)
      {
        v28 = 0;
        result = 3;
        v12 = &a2[a3];
        v26 *= 2;
        if (!--v27)
          break;
      }
      else
      {
        v29 = *v12++;
        v6 = v29;
        v28 = 128;
LABEL_27:
        v30 = (v28 & v6) != 0;
        v7 = v28 >> 1;
        v28 >>= 1;
        v26 = (2 * v26) | v30;
        if (!--v27)
          break;
      }
    }
  }
  a5[1] = (v26 | (1 << v21)) - 1;
  v31 = -1;
  v32 = v7;
  while (2)
  {
    v33 = v31;
    if (v32)
    {
LABEL_35:
      v35 = (v32 & v6) != 0;
      v7 = v32 >> 1;
      v32 >>= 1;
      ++v31;
      if (v35)
        break;
    }
    else
    {
      if (v12 != v10)
      {
        v34 = *v12++;
        v6 = v34;
        v32 = 128;
        goto LABEL_35;
      }
      v32 = 0;
      result = 3;
      v12 = &a2[a3];
      ++v31;
    }
    if ((v33 + 1) < 0x3F)
      continue;
    break;
  }
  v36 = 0;
  if ((_DWORD)v31)
  {
    v37 = (v33 & 0x3F) + 1;
    v38 = v7;
    while (1)
    {
      if (v38)
        goto LABEL_42;
      if (v12 == v10)
      {
        v38 = 0;
        result = 3;
        v12 = &a2[a3];
        v36 *= 2;
        if (!--v37)
          break;
      }
      else
      {
        v39 = *v12++;
        v6 = v39;
        v38 = 128;
LABEL_42:
        v40 = (v38 & v6) != 0;
        v7 = v38 >> 1;
        v38 >>= 1;
        v36 = (2 * v36) | v40;
        if (!--v37)
          break;
      }
    }
  }
  a5[2] = (v36 | (1 << v31)) - 1;
  if (*(_DWORD *)(a4 + 8))
  {
    v41 = *(unsigned __int8 *)(a4 + 12);
    if (!*(_BYTE *)(a4 + 12))
      goto LABEL_64;
    v42 = -1;
    v43 = v7;
    while (2)
    {
      v44 = v42;
      if (v43)
      {
LABEL_52:
        v46 = (v43 & v6) != 0;
        v7 = v43 >> 1;
        v43 >>= 1;
        ++v42;
        if (v46)
          break;
      }
      else
      {
        if (v12 != v10)
        {
          v45 = *v12++;
          v6 = v45;
          v43 = 128;
          goto LABEL_52;
        }
        v43 = 0;
        result = 3;
        v12 = &a2[a3];
        ++v42;
      }
      if ((v44 + 1) < 0x3F)
        continue;
      break;
    }
    v47 = 0;
    if ((_DWORD)v42)
    {
      v48 = (v44 & 0x3F) + 1;
      v49 = v7;
      while (1)
      {
        if (v49)
          goto LABEL_59;
        if (v12 == v10)
        {
          v49 = 0;
          result = 3;
          v12 = &a2[a3];
          v47 *= 2;
          if (!--v48)
            break;
        }
        else
        {
          v50 = *v12++;
          v6 = v50;
          v49 = 128;
LABEL_59:
          v51 = (v49 & v6) != 0;
          v7 = v49 >> 1;
          v49 >>= 1;
          v47 = (2 * v47) | v51;
          if (!--v48)
            break;
        }
      }
    }
    a5[6] = (v47 | (1 << v42)) - 1;
LABEL_64:
    v52 = -1;
    v53 = v7;
    while (2)
    {
      v54 = v52;
      if (v53)
      {
LABEL_68:
        v56 = (v53 & v6) != 0;
        v7 = v53 >> 1;
        v53 >>= 1;
        ++v52;
        if (v56)
          break;
      }
      else
      {
        if (v12 != v10)
        {
          v55 = *v12++;
          v6 = v55;
          v53 = 128;
          goto LABEL_68;
        }
        v53 = 0;
        result = 3;
        v12 = &a2[a3];
        ++v52;
      }
      if ((v54 + 1) < 0x3F)
        continue;
      break;
    }
    v57 = 0;
    if ((_DWORD)v52)
    {
      v58 = (v54 & 0x3F) + 1;
      v59 = v7;
      while (1)
      {
        if (v59)
          goto LABEL_75;
        if (v12 == v10)
        {
          v59 = 0;
          result = 3;
          v12 = &a2[a3];
          v57 *= 2;
          if (!--v58)
            break;
        }
        else
        {
          v60 = *v12++;
          v6 = v60;
          v59 = 128;
LABEL_75:
          v61 = (v59 & v6) != 0;
          v7 = v59 >> 1;
          v59 >>= 1;
          v57 = (2 * v57) | v61;
          if (!--v58)
            break;
        }
      }
    }
    v62 = v57 | (1 << v52);
    v63 = -1;
    v64 = v7;
    while (2)
    {
      v65 = v63;
      if (v64)
      {
LABEL_83:
        v67 = (v64 & v6) != 0;
        v7 = v64 >> 1;
        v64 >>= 1;
        ++v63;
        if (v67)
          break;
      }
      else
      {
        if (v12 != v10)
        {
          v66 = *v12++;
          v6 = v66;
          v64 = 128;
          goto LABEL_83;
        }
        v64 = 0;
        result = 3;
        v12 = &a2[a3];
        ++v63;
      }
      if ((v65 + 1) < 0x3F)
        continue;
      break;
    }
    v68 = 0;
    if ((_DWORD)v63)
    {
      v69 = (v65 & 0x3F) + 1;
      v70 = v7;
      while (1)
      {
        if (v70)
          goto LABEL_90;
        if (v12 == v10)
        {
          v70 = 0;
          result = 3;
          v12 = v10;
          v68 *= 2;
          if (!--v69)
            break;
        }
        else
        {
          v71 = *v12++;
          v6 = v71;
          v70 = 128;
LABEL_90:
          v72 = (v70 & v6) != 0;
          v7 = v70 >> 1;
          v70 >>= 1;
          v68 = (2 * v68) | v72;
          if (!--v69)
            break;
        }
      }
    }
    v73 = v62 - 1;
    v74 = v68 | (1 << v63);
    v75 = -1;
    v76 = v7;
    while (2)
    {
      v77 = v75;
      if (v76)
      {
LABEL_98:
        v79 = (v76 & v6) != 0;
        v7 = v76 >> 1;
        v76 >>= 1;
        ++v75;
        if (v79)
          break;
      }
      else
      {
        if (v12 != v10)
        {
          v78 = *v12++;
          v6 = v78;
          v76 = 128;
          goto LABEL_98;
        }
        v76 = 0;
        result = 3;
        v12 = v10;
        ++v75;
      }
      if ((v77 + 1) < 0x3F)
        continue;
      break;
    }
    v80 = 0;
    if ((_DWORD)v75)
    {
      v81 = (v77 & 0x3F) + 1;
      v82 = v7;
      while (1)
      {
        if (v82)
          goto LABEL_105;
        if (v12 == v10)
        {
          v82 = 0;
          result = 3;
          v12 = v10;
          v80 *= 2;
          if (!--v81)
            break;
        }
        else
        {
          v83 = *v12++;
          v6 = v83;
          v82 = 128;
LABEL_105:
          v84 = (v82 & v6) != 0;
          v7 = v82 >> 1;
          v82 >>= 1;
          v80 = (2 * v80) | v84;
          if (!--v81)
            break;
        }
      }
    }
    v85 = v74 - 1;
    v86 = (v80 | (1 << v75)) - 1;
    if (*(_DWORD *)(a4 + 8))
    {
      if (v41)
        v87 = a5[6];
      else
        v87 = *(_DWORD *)(a4 + 16);
    }
    else
    {
      LOBYTE(v87) = 0;
    }
    a5[3] = v73 << v87;
    a5[4] = v85 << v87;
    a5[5] = v86 << v87;
  }
  v88 = -1;
  v89 = v7;
  while (2)
  {
    v90 = v88;
    if (v89)
    {
LABEL_119:
      v92 = (v89 & v6) != 0;
      v7 = v89 >> 1;
      v89 >>= 1;
      ++v88;
      if (v92)
        break;
    }
    else
    {
      if (v12 != v10)
      {
        v91 = *v12++;
        v6 = v91;
        v89 = 128;
        goto LABEL_119;
      }
      v89 = 0;
      result = 3;
      v12 = v10;
      ++v88;
    }
    if ((v90 + 1) < 0x3F)
      continue;
    break;
  }
  v93 = 0;
  if ((_DWORD)v88)
  {
    v94 = (v90 & 0x3F) + 1;
    v95 = v7;
    while (1)
    {
      if (v95)
        goto LABEL_126;
      if (v12 == v10)
      {
        v95 = 0;
        result = 3;
        v12 = v10;
        v93 *= 2;
        if (!--v94)
          break;
      }
      else
      {
        v96 = *v12++;
        v6 = v96;
        v95 = 128;
LABEL_126:
        v97 = (v95 & v6) != 0;
        v7 = v95 >> 1;
        v95 >>= 1;
        v93 = (2 * v93) | v97;
        if (!--v94)
          break;
      }
    }
  }
  a5[7] = (v93 | (1 << v88)) - 1;
  v98 = -1;
  v99 = v7;
  while (2)
  {
    v100 = v98;
    if (v99)
    {
LABEL_134:
      v102 = (v99 & v6) != 0;
      v7 = v99 >> 1;
      v99 >>= 1;
      ++v98;
      if (v102)
        break;
    }
    else
    {
      if (v12 != v10)
      {
        v101 = *v12++;
        v6 = v101;
        v99 = 128;
        goto LABEL_134;
      }
      v99 = 0;
      result = 3;
      v12 = v10;
      ++v98;
    }
    if ((v100 + 1) < 0x3F)
      continue;
    break;
  }
  v103 = 0;
  if ((_DWORD)v98)
  {
    v104 = (v100 & 0x3F) + 1;
    while (1)
    {
      if (v7)
        goto LABEL_141;
      if (v12 == v10)
      {
        v7 = 0;
        result = 3;
        v12 = v10;
        v103 *= 2;
        if (!--v104)
          break;
      }
      else
      {
        v105 = *v12++;
        v6 = v105;
        v7 = 128;
LABEL_141:
        v106 = (v7 & v6) != 0;
        v7 >>= 1;
        v103 = (2 * v103) | v106;
        if (!--v104)
          break;
      }
    }
  }
  a5[8] = (v103 | (1 << v98)) - 1;
  if (a6)
    *a6 = v12 - a2;
  return result;
}

uint64_t gcl::gpcc::HlsIo::parseGps(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  _BOOL4 v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  _BOOL4 v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  BOOL *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  _BOOL4 v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  _BOOL4 v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  BOOL v68;
  int v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  BOOL v78;
  int v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  _BOOL4 v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  _BOOL4 v94;
  BOOL v95;
  _BYTE *v96;
  unsigned int v97;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = &a2[a3];
  v10 = -1;
  v11 = a2;
  do
  {
    v14 = v10;
    if (!v8)
    {
      if (v11 == v9)
      {
        v8 = 0;
        v7 = 3;
        v11 = &a2[a3];
        ++v10;
        continue;
      }
      v12 = *v11++;
      v5 = v12;
      v8 = 128;
    }
    v13 = (v8 & v5) != 0;
    v6 = v8 >> 1;
    v8 >>= 1;
    ++v10;
    if (v13)
      break;
  }
  while ((v14 + 1) < 0x3F);
  v15 = 0;
  if ((_DWORD)v10)
  {
    v16 = (v14 & 0x3F) + 1;
    v17 = v6;
    while (1)
    {
      if (v17)
        goto LABEL_11;
      if (v11 == v9)
      {
        v17 = 0;
        v7 = 3;
        v11 = &a2[a3];
        v15 *= 2;
        if (!--v16)
          break;
      }
      else
      {
        v18 = *v11++;
        v5 = v18;
        v17 = 128;
LABEL_11:
        v19 = (v17 & v5) != 0;
        v6 = v17 >> 1;
        v17 >>= 1;
        v15 = (2 * v15) | v19;
        if (!--v16)
          break;
      }
    }
  }
  *(_DWORD *)a4 = (v15 | (1 << v10)) - 1;
  v20 = -1;
  v21 = v6;
  while (2)
  {
    v24 = v20;
    if (!v21)
    {
      if (v11 == v9)
      {
        v21 = 0;
        v7 = 3;
        v11 = &a2[a3];
        ++v20;
        goto LABEL_18;
      }
      v22 = *v11++;
      v5 = v22;
      v21 = 128;
    }
    v23 = (v21 & v5) != 0;
    v6 = v21 >> 1;
    v21 >>= 1;
    ++v20;
    if (v23)
      break;
LABEL_18:
    if ((v24 + 1) < 0x3F)
      continue;
    break;
  }
  v25 = 0;
  if ((_DWORD)v20)
  {
    v26 = (v24 & 0x3F) + 1;
    v27 = v6;
    while (1)
    {
      if (v27)
        goto LABEL_25;
      if (v11 == v9)
      {
        v27 = 0;
        v7 = 3;
        v11 = &a2[a3];
        v25 *= 2;
        if (!--v26)
          break;
      }
      else
      {
        v28 = *v11++;
        v5 = v28;
        v27 = 128;
LABEL_25:
        v29 = (v27 & v5) != 0;
        v6 = v27 >> 1;
        v27 >>= 1;
        v25 = (2 * v25) | v29;
        if (!--v26)
          break;
      }
    }
  }
  *(_DWORD *)(a4 + 4) = (v25 | (1 << v20)) - 1;
  if (!v6)
  {
    if (v11 == v9)
    {
      *(_DWORD *)(a4 + 8) = 0;
      *(_WORD *)(a4 + 20) = 0;
      goto LABEL_76;
    }
    v31 = *v11++;
    v5 = v31;
    v6 = 128;
    v30 = 64;
    *(_DWORD *)(a4 + 8) = (v31 & 0x80) != 0;
    if ((v31 & 0x80) == 0)
      goto LABEL_38;
LABEL_34:
    if (v6 <= 1)
    {
      if (v11 == v9)
      {
        v30 = 0;
        *(_BYTE *)(a4 + 12) = 0;
        v7 = 3;
        v11 = &a2[a3];
LABEL_52:
        v41 = -1;
        v42 = v30;
        while (1)
        {
          v45 = v41;
          if (v42)
            goto LABEL_54;
          if (v11 != v9)
            break;
          v42 = 0;
          v7 = 3;
          v11 = &a2[a3];
          ++v41;
LABEL_55:
          if ((v45 + 1) >= 0x3F)
          {
LABEL_59:
            v46 = 0;
            if ((_DWORD)v41)
            {
              v47 = (v45 & 0x3F) + 1;
              v48 = v30;
              while (1)
              {
                if (v48)
                  goto LABEL_62;
                if (v11 == v9)
                {
                  v48 = 0;
                  v7 = 3;
                  v11 = &a2[a3];
                  v46 *= 2;
                  if (!--v47)
                    break;
                }
                else
                {
                  v49 = *v11++;
                  v5 = v49;
                  v48 = 128;
LABEL_62:
                  v50 = (v48 & v5) != 0;
                  v30 = v48 >> 1;
                  v48 >>= 1;
                  v46 = (2 * v46) | v50;
                  if (!--v47)
                    break;
                }
              }
            }
            *(_DWORD *)(a4 + 16) = (v46 | (1 << v41)) - 1;
            if (!v30)
              goto LABEL_67;
LABEL_39:
            *(_BYTE *)(a4 + 20) = (v30 & v5) != 0;
            if (v30 == 1)
            {
              if (v11 == v9)
              {
                *(_BYTE *)(a4 + 21) = 0;
                goto LABEL_76;
              }
              v5 = *v11;
              *(_BYTE *)(a4 + 21) = *v11 >> 7;
              v35 = 64;
LABEL_45:
              v36 = (v35 & v5) != 0;
              v37 = v35 >> 1;
              *(_BYTE *)(a4 + 28) = v36;
LABEL_46:
              ++v11;
              v38 = (v37 & v5) != 0;
              v39 = v37 >> 1;
              *(_BYTE *)(a4 + 29) = v38;
              v40 = (BOOL *)(a4 + 30);
              goto LABEL_73;
            }
            *(_BYTE *)(a4 + 21) = (v5 & (v30 >> 1)) != 0;
            if (v30 > 3)
            {
              *(_BYTE *)(a4 + 28) = (v5 & (v30 >> 2)) != 0;
              if (v30 > 7)
                goto LABEL_69;
              if (v11 == v9)
                goto LABEL_77;
              v5 = *v11;
              v37 = 128;
              goto LABEL_46;
            }
            if (v11 != v9)
            {
              v5 = *v11;
              v35 = 128;
              goto LABEL_45;
            }
LABEL_76:
            *(_BYTE *)(a4 + 28) = 0;
LABEL_77:
            v54 = 0;
            v53 = 0;
            *(_BYTE *)(a4 + 29) = 0;
            v40 = (BOOL *)(a4 + 30);
            goto LABEL_78;
          }
        }
        v43 = *v11++;
        v5 = v43;
        v42 = 128;
LABEL_54:
        v44 = (v42 & v5) != 0;
        v30 = v42 >> 1;
        v42 >>= 1;
        ++v41;
        if (v44)
          goto LABEL_59;
        goto LABEL_55;
      }
      v32 = *v11++;
      v5 = v32;
      v30 = 128;
    }
    v33 = v30 & v5;
    v34 = (v30 & v5) != 0;
    v30 >>= 1;
    *(_BYTE *)(a4 + 12) = v34;
    if (v33)
      goto LABEL_38;
    goto LABEL_52;
  }
  v30 = v6 >> 1;
  *(_DWORD *)(a4 + 8) = (v6 & v5) != 0;
  if ((v6 & v5) != 0)
    goto LABEL_34;
LABEL_38:
  if (v30)
    goto LABEL_39;
LABEL_67:
  if (v11 == v9)
  {
    *(_WORD *)(a4 + 20) = 0;
    goto LABEL_76;
  }
  v51 = *v11++;
  v5 = v51;
  *(_BYTE *)(a4 + 20) = v51 >> 7;
  *(_BYTE *)(a4 + 21) = (v51 & 0x40) != 0;
  *(_BYTE *)(a4 + 28) = (v51 & 0x20) != 0;
  v30 = 128;
LABEL_69:
  *(_BYTE *)(a4 + 29) = (v5 & (v30 >> 3)) != 0;
  v40 = (BOOL *)(a4 + 30);
  if (v30 > 0xF)
  {
    v39 = v30 >> 4;
LABEL_73:
    v53 = (v39 & v5) != 0;
    v54 = v39 >> 1;
  }
  else
  {
    if (v11 != v9)
    {
      v52 = *v11++;
      v5 = v52;
      v39 = 128;
      goto LABEL_73;
    }
    v54 = 0;
    v53 = 0;
LABEL_78:
    v7 = 3;
    v11 = &a2[a3];
  }
  *v40 = v53;
  v55 = -1;
  v56 = v54;
  while (2)
  {
    v59 = v55;
    if (!v56)
    {
      if (v11 == v9)
      {
        v56 = 0;
        v7 = 3;
        v11 = &a2[a3];
        ++v55;
        goto LABEL_82;
      }
      v57 = *v11++;
      v5 = v57;
      v56 = 128;
    }
    v58 = (v56 & v5) != 0;
    v54 = v56 >> 1;
    v56 >>= 1;
    ++v55;
    if (v58)
      break;
LABEL_82:
    if ((v59 + 1) < 0x3F)
      continue;
    break;
  }
  v60 = 0;
  if ((_DWORD)v55)
  {
    v61 = (v59 & 0x3F) + 1;
    v62 = v54;
    while (1)
    {
      if (v62)
        goto LABEL_89;
      if (v11 == v9)
      {
        v62 = 0;
        v7 = 3;
        v11 = &a2[a3];
        v60 *= 2;
        if (!--v61)
          break;
      }
      else
      {
        v63 = *v11++;
        v5 = v63;
        v62 = 128;
LABEL_89:
        v64 = (v62 & v5) != 0;
        v54 = v62 >> 1;
        v62 >>= 1;
        v60 = (2 * v60) | v64;
        if (!--v61)
          break;
      }
    }
  }
  *(_DWORD *)(a4 + 32) = (v60 | (1 << v55)) - 1;
  v65 = -1;
  v66 = v54;
  while (2)
  {
    v69 = v65;
    if (!v66)
    {
      if (v11 == v9)
      {
        v66 = 0;
        v7 = 3;
        v11 = &a2[a3];
        ++v65;
        goto LABEL_96;
      }
      v67 = *v11++;
      v5 = v67;
      v66 = 128;
    }
    v68 = (v66 & v5) != 0;
    v54 = v66 >> 1;
    v66 >>= 1;
    ++v65;
    if (v68)
      break;
LABEL_96:
    if ((v69 + 1) < 0x3F)
      continue;
    break;
  }
  v70 = 0;
  if ((_DWORD)v65)
  {
    v71 = (v69 & 0x3F) + 1;
    v72 = v54;
    while (1)
    {
      if (v72)
        goto LABEL_103;
      if (v11 == v9)
      {
        v72 = 0;
        v7 = 3;
        v11 = &a2[a3];
        v70 *= 2;
        if (!--v71)
          break;
      }
      else
      {
        v73 = *v11++;
        v5 = v73;
        v72 = 128;
LABEL_103:
        v74 = (v72 & v5) != 0;
        v54 = v72 >> 1;
        v72 >>= 1;
        v70 = (2 * v70) | v74;
        if (!--v71)
          break;
      }
    }
  }
  *(_DWORD *)(a4 + 24) = (v70 | (1 << v65)) - 1;
  v75 = -1;
  v76 = v54;
  while (2)
  {
    v79 = v75;
    if (!v76)
    {
      if (v11 == v9)
      {
        v76 = 0;
        v7 = 3;
        v11 = &a2[a3];
        ++v75;
        goto LABEL_110;
      }
      v77 = *v11++;
      v5 = v77;
      v76 = 128;
    }
    v78 = (v76 & v5) != 0;
    v54 = v76 >> 1;
    v76 >>= 1;
    ++v75;
    if (v78)
      break;
LABEL_110:
    if ((v79 + 1) < 0x3F)
      continue;
    break;
  }
  v80 = 0;
  if ((_DWORD)v75)
  {
    v81 = (v79 & 0x3F) + 1;
    v82 = v54;
    while (1)
    {
      if (v82)
        goto LABEL_117;
      if (v11 == v9)
      {
        v82 = 0;
        v7 = 3;
        v11 = &a2[a3];
        v80 *= 2;
        if (!--v81)
          break;
      }
      else
      {
        v83 = *v11++;
        v5 = v83;
        v82 = 128;
LABEL_117:
        v84 = (v82 & v5) != 0;
        v54 = v82 >> 1;
        v82 >>= 1;
        v80 = (2 * v80) | v84;
        if (!--v81)
          break;
      }
    }
  }
  *(_DWORD *)(a4 + 36) = (v80 | (1 << v75)) - 1;
  v85 = -1;
  v86 = v54;
  while (2)
  {
    v89 = v85;
    if (!v86)
    {
      if (v11 == v9)
      {
        v86 = 0;
        v7 = 3;
        v11 = &a2[a3];
        ++v85;
        goto LABEL_124;
      }
      v87 = *v11++;
      v5 = v87;
      v86 = 128;
    }
    v88 = (v86 & v5) != 0;
    v54 = v86 >> 1;
    v86 >>= 1;
    ++v85;
    if (v88)
      break;
LABEL_124:
    if ((v89 + 1) < 0x3F)
      continue;
    break;
  }
  v90 = 0;
  if ((_DWORD)v85)
  {
    v91 = (v89 & 0x3F) + 1;
    v92 = v54;
    while (1)
    {
      if (v92)
        goto LABEL_131;
      if (v11 == v9)
      {
        v92 = 0;
        v7 = 3;
        v11 = &a2[a3];
        v90 *= 2;
        if (!--v91)
          break;
      }
      else
      {
        v93 = *v11++;
        v5 = v93;
        v92 = 128;
LABEL_131:
        v94 = (v92 & v5) != 0;
        v54 = v92 >> 1;
        v92 >>= 1;
        v90 = (2 * v90) | v94;
        if (!--v91)
          break;
      }
    }
  }
  *(_DWORD *)(a4 + 40) = (v90 | (1 << v85)) - 1;
  if (a5)
  {
    if (v54)
      v95 = 1;
    else
      v95 = v11 == v9;
    if (v95)
      v96 = v11;
    else
      v96 = v11 + 1;
    *a5 = v96 - a2;
  }
  if (v11 == v9)
    v97 = 3;
  else
    v97 = v7;
  if (v54)
    return v7;
  else
    return v97;
}

uint64_t gcl::gpcc::RawAttributeDecoder::decode(uint64_t a1, uint64_t a2, int a3, _BYTE *a4, int a5, int a6, int a7, unsigned __int8 *a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  _BOOL4 v25;
  char v27;
  uint64_t v28;
  _QWORD v29[2];
  int v30;
  void *v31[2];
  void *__p[2];
  __int128 v33;

  LODWORD(v14) = a3;
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  *(_OWORD *)v31 = 0u;
  *(_OWORD *)__p = 0u;
  v33 = 0u;
  v28 = 0;
  v15 = gcl::gpcc::HlsIo::parseAsh((uint64_t)&v27, a8, a9, a2, (uint64_t)v29, &v28);
  if (!(_DWORD)v15)
  {
    if (a9 - v28 < (unint64_t)((a5 * (int)v14 * a6 + 7) >> 3))
    {
      v15 = 3;
      goto LABEL_19;
    }
    if ((int)v14 < 1 || a5 < 1)
    {
      v15 = 0;
    }
    else
    {
      if (a6)
      {
        v16 = 0;
        v15 = 0;
        v17 = 0;
        v18 = 0;
        v19 = &a8[v28];
        while (1)
        {
          v20 = 0;
          do
          {
            v21 = 0;
            v22 = (((_BYTE)a6 - 1) & 0x3F) + 1;
            v23 = v17;
            do
            {
              while (1)
              {
                if (v23)
                  goto LABEL_13;
                if (v19 == &a8[a9])
                  break;
                v24 = *v19++;
                v18 = v24;
                v23 = 128;
LABEL_13:
                v25 = (v23 & v18) != 0;
                v17 = v23 >> 1;
                v23 >>= 1;
                v21 = (2 * v21) | v25;
                if (!--v22)
                  goto LABEL_10;
              }
              v23 = 0;
              v15 = 3;
              v19 = &a8[a9];
              v21 *= 2;
              --v22;
            }
            while (v22);
LABEL_10:
            a4[v16 * a7 + v20++] = v21;
          }
          while (v20 != a5);
          if (++v16 == v14)
            goto LABEL_19;
        }
      }
      v14 = v14;
      v15 = 0;
      do
      {
        bzero(a4, a5);
        a4 += a7;
        --v14;
      }
      while (v14);
    }
  }
LABEL_19:
  if (__p[1])
  {
    *(void **)&v33 = __p[1];
    operator delete(__p[1]);
  }
  if (v31[0])
  {
    v31[1] = v31[0];
    operator delete(v31[0]);
  }
  return v15;
}

void sub_1886CE0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = a15;
    if (!a15)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = a15;
    if (!a15)
      goto LABEL_3;
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t gcl::gpcc::HlsIo::parseSps(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  _BOOL4 v15;
  BOOL v16;
  int v17;
  unsigned __int8 v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  BOOL *v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned __int8 v38;
  _BOOL4 v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned __int8 v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned __int8 v48;
  _BOOL4 v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned __int8 v53;
  BOOL v54;
  uint64_t v55;
  int v56;
  int v57;
  unsigned __int8 v58;
  _BOOL4 v59;
  int v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  __int128 v75;
  char *v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  unsigned __int8 v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  unsigned __int8 v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  unsigned __int8 v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  unsigned __int8 v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  unsigned __int8 v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  unsigned __int8 v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  unsigned __int8 v125;
  int *v126;
  unsigned __int8 v127;
  int v128;
  int v129;
  unsigned __int8 v130;
  _BOOL4 v131;
  int v132;
  int v133;
  unsigned __int8 v134;
  _BOOL4 v135;
  int v136;
  int v137;
  unsigned __int8 v138;
  _BOOL4 v139;
  int v140;
  int v141;
  unsigned __int8 v142;
  _BOOL4 v143;
  int v144;
  int v145;
  unsigned __int8 v146;
  _BOOL4 v147;
  int v148;
  int v149;
  unsigned __int8 v150;
  _BOOL4 v151;
  int v152;
  uint64_t v153;
  int v154;
  int v155;
  int v156;
  unsigned __int8 v157;
  BOOL v158;
  uint64_t v159;
  int v160;
  int v161;
  unsigned __int8 v162;
  _BOOL4 v163;
  int v164;
  int v165;
  unsigned __int8 v166;
  _BOOL4 v167;
  BOOL v168;
  unsigned __int8 *v169;
  unsigned int v170;
  int v172;
  unsigned int v173;
  unsigned __int8 v174;
  unsigned int v175;
  int v176;
  uint64_t v177;
  unsigned int v178;
  int v179;
  unsigned __int8 v180;
  BOOL v181;
  uint64_t v182;
  int v183;
  unsigned int v184;
  unsigned __int8 v185;
  _BOOL4 v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  int v190;
  unsigned __int8 v191;
  BOOL v192;
  uint64_t v193;
  int v194;
  unsigned int v195;
  unsigned __int8 v196;
  _BOOL4 v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  int v201;
  unsigned __int8 v202;
  BOOL v203;
  uint64_t v204;
  int v205;
  unsigned int v206;
  unsigned __int8 v207;
  _BOOL4 v208;
  unsigned int v209;
  uint64_t v210;
  int v211;
  unsigned int v212;
  int v213;
  unsigned __int8 v214;
  BOOL v215;
  unsigned int v216;
  uint64_t v217;
  unsigned int v218;
  int v219;
  unsigned __int8 v220;
  BOOL v221;
  uint64_t v222;
  int v223;
  unsigned int v224;
  unsigned __int8 v225;
  _BOOL4 v226;
  uint64_t v227;
  unsigned int v228;
  int v229;
  unsigned __int8 v230;
  BOOL v231;
  uint64_t v232;
  int v233;
  unsigned int v234;
  unsigned __int8 v235;
  _BOOL4 v236;
  uint64_t v237;
  unsigned int v238;
  int v239;
  unsigned __int8 v240;
  BOOL v241;
  uint64_t v242;
  int v243;
  unsigned int v244;
  unsigned __int8 v245;
  _BOOL4 v246;
  int v247;
  unsigned int v248;
  unsigned __int8 v249;
  int v252;
  unsigned int v253;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = &a2[a3];
  v12 = -24;
  v13 = a2;
  do
  {
    while (1)
    {
      if (v9)
        goto LABEL_3;
      if (v13 == v11)
        break;
      v14 = *v13++;
      v7 = v14;
      v9 = 128;
LABEL_3:
      v15 = (v7 & v9) != 0;
      v6 = v9 >> 1;
      v9 >>= 1;
      v10 = (2 * v10) | v15;
      v16 = __CFADD__(v12++, 1);
      if (v16)
        goto LABEL_8;
    }
    v9 = 0;
    v8 = 3;
    v13 = &a2[a3];
    v10 *= 2;
    v16 = __CFADD__(v12++, 1);
  }
  while (!v16);
LABEL_8:
  *(_DWORD *)(a4 + 4) = v10;
  if (!v6)
  {
    if (v13 == v11)
    {
      v17 = 0;
      goto LABEL_34;
    }
    v21 = *v13++;
    v7 = v21;
    v19 = 64;
    v20 = v21;
    v17 = (v21 >> 6) & 2 | ((v21 & 0x40) != 0);
LABEL_14:
    v22 = v19 >> 1;
    goto LABEL_18;
  }
  v17 = 2 * ((v7 & v6) != 0);
  if (v6 == 1)
  {
    if (v13 != v11)
    {
      v18 = *v13++;
      v7 = v18;
      v19 = 128;
      v20 = v18;
      v17 |= (v18 & 0x80) != 0;
      goto LABEL_14;
    }
LABEL_34:
    v24 = 4 * v17;
LABEL_35:
    v28 = 4 * v24;
LABEL_36:
    v32 = 4 * v28;
LABEL_37:
    *(_DWORD *)(a4 + 8) = v32;
    v33 = (BOOL *)(a4 + 12);
LABEL_38:
    v34 = 0;
    *v33 = 0;
    v8 = 3;
    v13 = &a2[a3];
    goto LABEL_39;
  }
  v19 = v6 >> 1;
  v20 = v7;
  v17 |= (v19 & v7) != 0;
  if (v19 > 1)
    goto LABEL_14;
  if (v13 == v11)
    goto LABEL_34;
  v23 = *v13++;
  v20 = v23;
  v22 = 128;
  v7 = v23;
LABEL_18:
  v24 = (4 * v17) | (2 * ((v22 & v20) != 0));
  if (v22 <= 1)
  {
    if (v13 == v11)
      goto LABEL_35;
    v25 = *v13++;
    v20 = v25;
    v24 |= v25 >> 7;
    v26 = 64;
    goto LABEL_24;
  }
  v24 |= (v20 & (v22 >> 1)) != 0;
  if (v22 > 3)
  {
    v26 = v22 >> 2;
  }
  else
  {
    if (v13 == v11)
      goto LABEL_35;
    v27 = *v13++;
    v20 = v27;
    v26 = 128;
LABEL_24:
    v7 = v20;
  }
  v28 = (4 * v24) | (2 * ((v26 & v20) != 0));
  if (v26 <= 1)
  {
    if (v13 == v11)
      goto LABEL_36;
    v29 = *v13++;
    v20 = v29;
    v28 |= v29 >> 7;
    v30 = 64;
    goto LABEL_32;
  }
  v28 |= (v20 & (v26 >> 1)) != 0;
  if (v26 > 3)
  {
    v30 = v26 >> 2;
  }
  else
  {
    if (v13 == v11)
      goto LABEL_36;
    v31 = *v13++;
    v20 = v31;
    v30 = 128;
LABEL_32:
    v7 = v20;
  }
  v32 = (4 * v28) | (2 * ((v30 & v20) != 0));
  if (v30 > 1)
  {
    v173 = v30 >> 1;
  }
  else
  {
    if (v13 == v11)
      goto LABEL_37;
    v172 = *v13++;
    v20 = v172;
    v173 = 128;
    v7 = v172;
  }
  *(_DWORD *)(a4 + 8) = v32 | ((v173 & v20) != 0);
  v33 = (BOOL *)(a4 + 12);
  if (v173 > 1)
  {
    v175 = v173 >> 1;
    v176 = v175 & v20;
    v34 = v175 >> 1;
    *v33 = v176 != 0;
    if (!v176)
      goto LABEL_39;
    goto LABEL_265;
  }
  if (v13 == v11)
    goto LABEL_38;
  v174 = *v13++;
  v7 = v174;
  v34 = 64;
  *v33 = (v174 & 0x80) != 0;
  if ((v174 & 0x80) != 0)
  {
LABEL_265:
    v177 = -1;
    v178 = v34;
    while (1)
    {
      v179 = v177;
      if (v178)
        goto LABEL_269;
      if (v13 != v11)
        break;
      v178 = 0;
      v8 = 3;
      v13 = &a2[a3];
      ++v177;
LABEL_270:
      if ((v179 + 1) >= 0x3F)
      {
LABEL_273:
        v182 = 0;
        if ((_DWORD)v177)
        {
          v183 = (v179 & 0x3F) + 1;
          v184 = v34;
          while (1)
          {
            if (v184)
              goto LABEL_276;
            if (v13 == v11)
            {
              v184 = 0;
              v8 = 3;
              v13 = &a2[a3];
              v182 *= 2;
              if (!--v183)
                break;
            }
            else
            {
              v185 = *v13++;
              v7 = v185;
              v184 = 128;
LABEL_276:
              v186 = (v7 & v184) != 0;
              v34 = v184 >> 1;
              v184 >>= 1;
              v182 = (2 * v182) | v186;
              if (!--v183)
                break;
            }
          }
        }
        v187 = (v182 | (1 << v177)) - 1;
        if ((v187 & 1) != 0)
          v187 = ((v187 & 1) + v187) >> 1;
        else
          LODWORD(v187) = -(int)(((v187 & 1) + v187) >> 1);
        *(_DWORD *)(a4 + 16) = v187;
        v188 = -1;
        v189 = v34;
        while (2)
        {
          v190 = v188;
          if (v189)
          {
LABEL_287:
            v192 = (v7 & v189) != 0;
            v34 = v189 >> 1;
            v189 >>= 1;
            ++v188;
            if (v192)
              break;
          }
          else
          {
            if (v13 != v11)
            {
              v191 = *v13++;
              v7 = v191;
              v189 = 128;
              goto LABEL_287;
            }
            v189 = 0;
            v8 = 3;
            v13 = &a2[a3];
            ++v188;
          }
          if ((v190 + 1) < 0x3F)
            continue;
          break;
        }
        v193 = 0;
        if ((_DWORD)v188)
        {
          v194 = (v190 & 0x3F) + 1;
          v195 = v34;
          while (1)
          {
            if (v195)
              goto LABEL_294;
            if (v13 == v11)
            {
              v195 = 0;
              v8 = 3;
              v13 = &a2[a3];
              v193 *= 2;
              if (!--v194)
                break;
            }
            else
            {
              v196 = *v13++;
              v7 = v196;
              v195 = 128;
LABEL_294:
              v197 = (v7 & v195) != 0;
              v34 = v195 >> 1;
              v195 >>= 1;
              v193 = (2 * v193) | v197;
              if (!--v194)
                break;
            }
          }
        }
        v198 = (v193 | (1 << v188)) - 1;
        if ((v198 & 1) != 0)
          v198 = ((v198 & 1) + v198) >> 1;
        else
          LODWORD(v198) = -(int)(((v198 & 1) + v198) >> 1);
        *(_DWORD *)(a4 + 20) = v198;
        v199 = -1;
        v200 = v34;
        while (2)
        {
          v201 = v199;
          if (v200)
          {
LABEL_305:
            v203 = (v7 & v200) != 0;
            v34 = v200 >> 1;
            v200 >>= 1;
            ++v199;
            if (v203)
              break;
          }
          else
          {
            if (v13 != v11)
            {
              v202 = *v13++;
              v7 = v202;
              v200 = 128;
              goto LABEL_305;
            }
            v200 = 0;
            v8 = 3;
            v13 = &a2[a3];
            ++v199;
          }
          if ((v201 + 1) < 0x3F)
            continue;
          break;
        }
        v204 = 0;
        if ((_DWORD)v199)
        {
          v205 = (v201 & 0x3F) + 1;
          v206 = v34;
          while (1)
          {
            if (v206)
              goto LABEL_312;
            if (v13 == v11)
            {
              v206 = 0;
              v8 = 3;
              v13 = &a2[a3];
              v204 *= 2;
              if (!--v205)
                break;
            }
            else
            {
              v207 = *v13++;
              v7 = v207;
              v206 = 128;
LABEL_312:
              v208 = (v7 & v206) != 0;
              v34 = v206 >> 1;
              v206 >>= 1;
              v204 = (2 * v204) | v208;
              if (!--v205)
                break;
            }
          }
        }
        v209 = 0;
        v210 = (v204 | (1 << v199)) - 1;
        if ((v210 & 1) != 0)
          v210 = ((v210 & 1) + v210) >> 1;
        else
          LODWORD(v210) = -(int)(((v210 & 1) + v210) >> 1);
        *(_DWORD *)(a4 + 24) = v210;
        v211 = 63;
        v212 = v34;
        while (2)
        {
          v213 = v211;
          if (v212)
          {
LABEL_323:
            v215 = (v7 & v212) != 0;
            v34 = v212 >> 1;
            v212 >>= 1;
            v216 = v209 + 1;
            if (v215)
              break;
          }
          else
          {
            if (v13 != v11)
            {
              v214 = *v13++;
              v7 = v214;
              v212 = 128;
              goto LABEL_323;
            }
            v212 = 0;
            v8 = 3;
            v13 = &a2[a3];
            v216 = v209 + 1;
          }
          v211 = v213 + 1;
          v16 = v209 >= 0x3F;
          v209 = v216;
          if (!v16)
            continue;
          break;
        }
        if (v216 == 1)
        {
LABEL_329:
          v217 = -1;
          v218 = v34;
          while (1)
          {
            v219 = v217;
            if (v218)
              goto LABEL_333;
            if (v13 != v11)
              break;
            v218 = 0;
            v8 = 3;
            v13 = &a2[a3];
            ++v217;
LABEL_334:
            if ((v219 + 1) >= 0x3F)
            {
LABEL_337:
              v222 = 0;
              if ((_DWORD)v217)
              {
                v223 = (v219 & 0x3F) + 1;
                v224 = v34;
                while (1)
                {
                  if (v224)
                    goto LABEL_340;
                  if (v13 == v11)
                  {
                    v224 = 0;
                    v8 = 3;
                    v13 = &a2[a3];
                    v222 *= 2;
                    if (!--v223)
                      break;
                  }
                  else
                  {
                    v225 = *v13++;
                    v7 = v225;
                    v224 = 128;
LABEL_340:
                    v226 = (v7 & v224) != 0;
                    v34 = v224 >> 1;
                    v224 >>= 1;
                    v222 = (2 * v222) | v226;
                    if (!--v223)
                      break;
                  }
                }
              }
              *(_DWORD *)(a4 + 28) = (v222 | (1 << v217)) - 1;
              v227 = -1;
              v228 = v34;
              while (2)
              {
                v229 = v227;
                if (v228)
                {
LABEL_348:
                  v231 = (v7 & v228) != 0;
                  v34 = v228 >> 1;
                  v228 >>= 1;
                  ++v227;
                  if (v231)
                    break;
                }
                else
                {
                  if (v13 != v11)
                  {
                    v230 = *v13++;
                    v7 = v230;
                    v228 = 128;
                    goto LABEL_348;
                  }
                  v228 = 0;
                  v8 = 3;
                  v13 = &a2[a3];
                  ++v227;
                }
                if ((v229 + 1) < 0x3F)
                  continue;
                break;
              }
              v232 = 0;
              if ((_DWORD)v227)
              {
                v233 = (v229 & 0x3F) + 1;
                v234 = v34;
                while (1)
                {
                  if (v234)
                    goto LABEL_355;
                  if (v13 == v11)
                  {
                    v234 = 0;
                    v8 = 3;
                    v13 = &a2[a3];
                    v232 *= 2;
                    if (!--v233)
                      break;
                  }
                  else
                  {
                    v235 = *v13++;
                    v7 = v235;
                    v234 = 128;
LABEL_355:
                    v236 = (v7 & v234) != 0;
                    v34 = v234 >> 1;
                    v234 >>= 1;
                    v232 = (2 * v232) | v236;
                    if (!--v233)
                      break;
                  }
                }
              }
              *(_DWORD *)(a4 + 32) = (v232 | (1 << v227)) - 1;
              v237 = -1;
              v238 = v34;
              while (2)
              {
                v239 = v237;
                if (v238)
                {
LABEL_363:
                  v241 = (v7 & v238) != 0;
                  v34 = v238 >> 1;
                  v238 >>= 1;
                  ++v237;
                  if (v241)
                    goto LABEL_367;
                }
                else
                {
                  if (v13 != v11)
                  {
                    v240 = *v13++;
                    v7 = v240;
                    v238 = 128;
                    goto LABEL_363;
                  }
                  v238 = 0;
                  v8 = 3;
                  v13 = &a2[a3];
                  ++v237;
                }
                if ((v239 + 1) >= 0x3F)
                {
LABEL_367:
                  v242 = 0;
                  if (!(_DWORD)v237)
                  {
LABEL_374:
                    *(_DWORD *)(a4 + 36) = (v242 | (1 << v237)) - 1;
                    goto LABEL_39;
                  }
                  v243 = (v239 & 0x3F) + 1;
                  v244 = v34;
                  while (1)
                  {
LABEL_371:
                    if (v244)
                      goto LABEL_370;
                    if (v13 != v11)
                      break;
                    v244 = 0;
                    v8 = 3;
                    v13 = &a2[a3];
                    v242 *= 2;
                    if (!--v243)
                      goto LABEL_374;
                  }
                  v245 = *v13++;
                  v7 = v245;
                  v244 = 128;
LABEL_370:
                  v246 = (v7 & v244) != 0;
                  v34 = v244 >> 1;
                  v244 >>= 1;
                  v242 = (2 * v242) | v246;
                  if (!--v243)
                    goto LABEL_374;
                  goto LABEL_371;
                }
                continue;
              }
            }
          }
          v220 = *v13++;
          v7 = v220;
          v218 = 128;
LABEL_333:
          v221 = (v7 & v218) != 0;
          v34 = v218 >> 1;
          v218 >>= 1;
          ++v217;
          if (v221)
            goto LABEL_337;
          goto LABEL_334;
        }
        v247 = (v213 & 0x3F) + 1;
        v248 = v34;
        while (1)
        {
LABEL_378:
          if (v248)
            goto LABEL_377;
          if (v13 != v11)
            break;
          v248 = 0;
          v8 = 3;
          v13 = &a2[a3];
          if (!--v247)
            goto LABEL_329;
        }
        v249 = *v13++;
        v7 = v249;
        v248 = 128;
LABEL_377:
        v34 = v248 >> 1;
        v248 >>= 1;
        if (!--v247)
          goto LABEL_329;
        goto LABEL_378;
      }
    }
    v180 = *v13++;
    v7 = v180;
    v178 = 128;
LABEL_269:
    v181 = (v7 & v178) != 0;
    v34 = v178 >> 1;
    v178 >>= 1;
    ++v177;
    if (v181)
      goto LABEL_273;
    goto LABEL_270;
  }
LABEL_39:
  v35 = 0;
  v36 = -32;
  v37 = v34;
  do
  {
    while (1)
    {
      if (v37)
        goto LABEL_41;
      if (v13 == v11)
        break;
      v38 = *v13++;
      v7 = v38;
      v37 = 128;
LABEL_41:
      v39 = (v7 & v37) != 0;
      v34 = v37 >> 1;
      v37 >>= 1;
      v35 = (2 * v35) | v39;
      v16 = __CFADD__(v36++, 1);
      if (v16)
        goto LABEL_46;
    }
    v37 = 0;
    v8 = 3;
    v13 = &a2[a3];
    v35 *= 2;
    v16 = __CFADD__(v36++, 1);
  }
  while (!v16);
LABEL_46:
  *(_DWORD *)(a4 + 44) = v35;
  v40 = -1;
  v41 = v34;
  do
  {
    v42 = v40;
    if (!v41)
    {
      if (v13 == v11)
      {
        v41 = 0;
        v8 = 3;
        v13 = &a2[a3];
        ++v40;
        continue;
      }
      v43 = *v13++;
      v7 = v43;
      v41 = 128;
    }
    v44 = (v7 & v41) != 0;
    v34 = v41 >> 1;
    v41 >>= 1;
    ++v40;
    if (v44)
      break;
  }
  while ((v42 + 1) < 0x3F);
  v45 = 0;
  if ((_DWORD)v40)
  {
    v46 = (v42 & 0x3F) + 1;
    v47 = v34;
    while (1)
    {
      if (v47)
        goto LABEL_57;
      if (v13 == v11)
      {
        v47 = 0;
        v8 = 3;
        v13 = &a2[a3];
        v45 *= 2;
        if (!--v46)
          break;
      }
      else
      {
        v48 = *v13++;
        v7 = v48;
        v47 = 128;
LABEL_57:
        v49 = (v7 & v47) != 0;
        v34 = v47 >> 1;
        v47 >>= 1;
        v45 = (2 * v45) | v49;
        if (!--v46)
          break;
      }
    }
  }
  *(_DWORD *)a4 = (v45 | (1 << v40)) - 1;
  v50 = -1;
  v51 = v34;
  while (2)
  {
    v52 = v50;
    if (v51)
    {
LABEL_65:
      v54 = (v7 & v51) != 0;
      v34 = v51 >> 1;
      v51 >>= 1;
      ++v50;
      if (v54)
        break;
    }
    else
    {
      if (v13 != v11)
      {
        v53 = *v13++;
        v7 = v53;
        v51 = 128;
        goto LABEL_65;
      }
      v51 = 0;
      v8 = 3;
      v13 = &a2[a3];
      ++v50;
    }
    if ((v52 + 1) < 0x3F)
      continue;
    break;
  }
  v55 = 0;
  if ((_DWORD)v50)
  {
    v56 = (v52 & 0x3F) + 1;
    v57 = v34;
    while (1)
    {
      if (v57)
        goto LABEL_72;
      if (v13 == v11)
      {
        v57 = 0;
        v8 = 3;
        v13 = &a2[a3];
        v55 *= 2;
        if (!--v56)
          break;
      }
      else
      {
        v58 = *v13++;
        v7 = v58;
        v57 = 128;
LABEL_72:
        v59 = (v7 & v57) != 0;
        v34 = v57 >> 1;
        v57 >>= 1;
        v55 = (2 * v55) | v59;
        if (!--v56)
          break;
      }
    }
  }
  v60 = (v55 | (1 << v50)) - 1;
  if (v60 >= 1)
  {
    v61 = 0;
    v62 = *(_QWORD **)(a4 + 56);
    while (1)
    {
      v65 = *(_QWORD *)(a4 + 64);
      if ((unint64_t)v62 >= v65)
        break;
      *v62 = 0;
      v62[1] = 0;
      v62[2] = 0;
      v62[3] = 0xFFFFFFFF00000000;
      v62 += 4;
LABEL_95:
      v77 = 0;
      *(_QWORD *)(a4 + 56) = v62;
      v78 = 63;
      v79 = v34;
      do
      {
        v80 = v78;
        if (!v79)
        {
          if (v13 == v11)
          {
            v79 = 0;
            v8 = 3;
            v13 = v11;
            v83 = v77 + 1;
            goto LABEL_100;
          }
          v81 = *v13++;
          v7 = v81;
          v79 = 128;
        }
        v82 = (v7 & v79) != 0;
        v34 = v79 >> 1;
        v79 >>= 1;
        v83 = v77 + 1;
        if (v82)
          break;
LABEL_100:
        v78 = v80 + 1;
        v16 = v77 >= 0x3F;
        v77 = v83;
      }
      while (!v16);
      if ((_DWORD)v83 != 1)
      {
        v84 = 0;
        v128 = (v80 & 0x3F) + 1;
        v129 = v34;
        while (1)
        {
          if (v129)
            goto LABEL_170;
          if (v13 == v11)
          {
            v129 = 0;
            v8 = 3;
            v13 = v11;
            v84 *= 2;
            if (!--v128)
              goto LABEL_106;
          }
          else
          {
            v130 = *v13++;
            v7 = v130;
            v129 = 128;
LABEL_170:
            v131 = (v7 & v129) != 0;
            v34 = v129 >> 1;
            v129 >>= 1;
            v84 = (2 * v84) | v131;
            if (!--v128)
              goto LABEL_106;
          }
        }
      }
      LODWORD(v84) = 0;
LABEL_106:
      v85 = 0;
      *((_DWORD *)v62 - 8) = (v84 | (1 << (v83 - 1))) - 1;
      v86 = 63;
      v87 = v34;
      while (2)
      {
        v88 = v86;
        if (v87)
        {
LABEL_110:
          v90 = (v7 & v87) != 0;
          v34 = v87 >> 1;
          v87 >>= 1;
          v91 = v85 + 1;
          if (v90)
            break;
        }
        else
        {
          if (v13 != v11)
          {
            v89 = *v13++;
            v7 = v89;
            v87 = 128;
            goto LABEL_110;
          }
          v87 = 0;
          v8 = 3;
          v13 = v11;
          v91 = v85 + 1;
        }
        v86 = v88 + 1;
        v16 = v85 >= 0x3F;
        v85 = v91;
        if (!v16)
          continue;
        break;
      }
      if ((_DWORD)v91 != 1)
      {
        v92 = 0;
        v132 = (v88 & 0x3F) + 1;
        v133 = v34;
        while (1)
        {
          if (v133)
            goto LABEL_177;
          if (v13 == v11)
          {
            v133 = 0;
            v8 = 3;
            v13 = v11;
            v92 *= 2;
            if (!--v132)
              goto LABEL_117;
          }
          else
          {
            v134 = *v13++;
            v7 = v134;
            v133 = 128;
LABEL_177:
            v135 = (v7 & v133) != 0;
            v34 = v133 >> 1;
            v133 >>= 1;
            v92 = (2 * v92) | v135;
            if (!--v132)
              goto LABEL_117;
          }
        }
      }
      LODWORD(v92) = 0;
LABEL_117:
      v93 = 0;
      *((_DWORD *)v62 - 7) = (v92 | (1 << (v91 - 1))) - 1;
      v94 = 63;
      v95 = v34;
      while (2)
      {
        v96 = v94;
        if (v95)
        {
LABEL_121:
          v98 = (v7 & v95) != 0;
          v34 = v95 >> 1;
          v95 >>= 1;
          v99 = v93 + 1;
          if (v98)
            break;
        }
        else
        {
          if (v13 != v11)
          {
            v97 = *v13++;
            v7 = v97;
            v95 = 128;
            goto LABEL_121;
          }
          v95 = 0;
          v8 = 3;
          v13 = v11;
          v99 = v93 + 1;
        }
        v94 = v96 + 1;
        v16 = v93 >= 0x3F;
        v93 = v99;
        if (!v16)
          continue;
        break;
      }
      if ((_DWORD)v99 != 1)
      {
        v100 = 0;
        v136 = (v96 & 0x3F) + 1;
        v137 = v34;
        while (1)
        {
          if (v137)
            goto LABEL_184;
          if (v13 == v11)
          {
            v137 = 0;
            v8 = 3;
            v13 = v11;
            v100 *= 2;
            if (!--v136)
              goto LABEL_128;
          }
          else
          {
            v138 = *v13++;
            v7 = v138;
            v137 = 128;
LABEL_184:
            v139 = (v7 & v137) != 0;
            v34 = v137 >> 1;
            v137 >>= 1;
            v100 = (2 * v100) | v139;
            if (!--v136)
              goto LABEL_128;
          }
        }
      }
      LODWORD(v100) = 0;
LABEL_128:
      v101 = 0;
      *((_DWORD *)v62 - 6) = (v100 | (1 << (v99 - 1))) - 1;
      v102 = 63;
      v103 = v34;
      while (2)
      {
        v104 = v102;
        if (v103)
        {
LABEL_132:
          v106 = (v7 & v103) != 0;
          v34 = v103 >> 1;
          v103 >>= 1;
          v107 = v101 + 1;
          if (v106)
            break;
        }
        else
        {
          if (v13 != v11)
          {
            v105 = *v13++;
            v7 = v105;
            v103 = 128;
            goto LABEL_132;
          }
          v103 = 0;
          v8 = 3;
          v13 = v11;
          v107 = v101 + 1;
        }
        v102 = v104 + 1;
        v16 = v101 >= 0x3F;
        v101 = v107;
        if (!v16)
          continue;
        break;
      }
      if ((_DWORD)v107 != 1)
      {
        v108 = 0;
        v140 = (v104 & 0x3F) + 1;
        v141 = v34;
        while (1)
        {
          if (v141)
            goto LABEL_191;
          if (v13 == v11)
          {
            v141 = 0;
            v8 = 3;
            v13 = v11;
            v108 *= 2;
            if (!--v140)
              goto LABEL_139;
          }
          else
          {
            v142 = *v13++;
            v7 = v142;
            v141 = 128;
LABEL_191:
            v143 = (v7 & v141) != 0;
            v34 = v141 >> 1;
            v141 >>= 1;
            v108 = (2 * v108) | v143;
            if (!--v140)
              goto LABEL_139;
          }
        }
      }
      LODWORD(v108) = 0;
LABEL_139:
      v109 = 0;
      *((_DWORD *)v62 - 5) = (v108 | (1 << (v107 - 1))) - 1;
      v110 = 63;
      v111 = v34;
      while (2)
      {
        v112 = v110;
        if (v111)
        {
LABEL_143:
          v114 = (v7 & v111) != 0;
          v34 = v111 >> 1;
          v111 >>= 1;
          v115 = v109 + 1;
          if (v114)
            break;
        }
        else
        {
          if (v13 != v11)
          {
            v113 = *v13++;
            v7 = v113;
            v111 = 128;
            goto LABEL_143;
          }
          v111 = 0;
          v8 = 3;
          v13 = v11;
          v115 = v109 + 1;
        }
        v110 = v112 + 1;
        v16 = v109 >= 0x3F;
        v109 = v115;
        if (!v16)
          continue;
        break;
      }
      if ((_DWORD)v115 != 1)
      {
        v116 = 0;
        v144 = (v112 & 0x3F) + 1;
        v145 = v34;
        while (1)
        {
          if (v145)
            goto LABEL_198;
          if (v13 == v11)
          {
            v145 = 0;
            v8 = 3;
            v13 = v11;
            v116 *= 2;
            if (!--v144)
              goto LABEL_150;
          }
          else
          {
            v146 = *v13++;
            v7 = v146;
            v145 = 128;
LABEL_198:
            v147 = (v7 & v145) != 0;
            v34 = v145 >> 1;
            v145 >>= 1;
            v116 = (2 * v116) | v147;
            if (!--v144)
              goto LABEL_150;
          }
        }
      }
      LODWORD(v116) = 0;
LABEL_150:
      v117 = 0;
      *((_DWORD *)v62 - 4) = (v116 | (1 << (v115 - 1))) - 1;
      v118 = 63;
      v119 = v34;
      while (2)
      {
        v120 = v118;
        if (v119)
        {
LABEL_154:
          v122 = (v7 & v119) != 0;
          v34 = v119 >> 1;
          v119 >>= 1;
          v123 = v117 + 1;
          if (v122)
            break;
        }
        else
        {
          if (v13 != v11)
          {
            v121 = *v13++;
            v7 = v121;
            v119 = 128;
            goto LABEL_154;
          }
          v119 = 0;
          v8 = 3;
          v13 = v11;
          v123 = v117 + 1;
        }
        v118 = v120 + 1;
        v16 = v117 >= 0x3F;
        v117 = v123;
        if (!v16)
          continue;
        break;
      }
      if ((_DWORD)v123 != 1)
      {
        v124 = 0;
        v148 = (v120 & 0x3F) + 1;
        v149 = v34;
        while (1)
        {
          if (v149)
            goto LABEL_205;
          if (v13 == v11)
          {
            v149 = 0;
            v8 = 3;
            v13 = v11;
            v124 *= 2;
            if (!--v148)
              goto LABEL_161;
          }
          else
          {
            v150 = *v13++;
            v7 = v150;
            v149 = 128;
LABEL_205:
            v151 = (v7 & v149) != 0;
            v34 = v149 >> 1;
            v149 >>= 1;
            v124 = (2 * v124) | v151;
            if (!--v148)
              goto LABEL_161;
          }
        }
      }
      LODWORD(v124) = 0;
LABEL_161:
      *((_DWORD *)v62 - 3) = (v124 | (1 << (v123 - 1))) - 1;
      if (!v34)
      {
        if (v13 != v11)
        {
          v125 = *v13++;
          v7 = v125;
          v34 = 128;
          goto LABEL_164;
        }
        v34 = 0;
        *((_BYTE *)v62 - 8) = 0;
        v126 = (int *)v62 - 1;
LABEL_232:
        v8 = 3;
        v13 = v11;
        goto LABEL_233;
      }
LABEL_164:
      *((_BYTE *)v62 - 8) = (v34 & v7) != 0;
      v126 = (int *)v62 - 1;
      if (v34 > 1)
      {
        v152 = v34 >> 1;
        v34 >>= 2;
        if ((v152 & v7) == 0)
          goto LABEL_233;
      }
      else
      {
        if (v13 == v11)
        {
          v34 = 0;
          goto LABEL_232;
        }
        v127 = *v13++;
        v7 = v127;
        v34 = 64;
        if ((v127 & 0x80) == 0)
        {
LABEL_233:
          v64 = 0;
          v164 = -32;
          v165 = v34;
          while (1)
          {
            if (v165)
              goto LABEL_235;
            if (v13 == v11)
            {
              v165 = 0;
              v8 = 3;
              v13 = v11;
              v64 *= 2;
              v16 = __CFADD__(v164++, 1);
              if (v16)
                goto LABEL_80;
            }
            else
            {
              v166 = *v13++;
              v7 = v166;
              v165 = 128;
LABEL_235:
              v167 = (v7 & v165) != 0;
              v34 = v165 >> 1;
              v165 >>= 1;
              v64 = (2 * v64) | v167;
              v16 = __CFADD__(v164++, 1);
              if (v16)
                goto LABEL_80;
            }
          }
        }
      }
      v153 = 0;
      v154 = 63;
      v155 = v34;
      while (2)
      {
        v156 = v154;
        if (v155)
        {
LABEL_215:
          v158 = (v7 & v155) != 0;
          v34 = v155 >> 1;
          v155 >>= 1;
          v159 = v153 + 1;
          if (v158)
            break;
        }
        else
        {
          if (v13 != v11)
          {
            v157 = *v13++;
            v7 = v157;
            v155 = 128;
            goto LABEL_215;
          }
          v155 = 0;
          v8 = 3;
          v13 = v11;
          v159 = v153 + 1;
        }
        v154 = v156 + 1;
        v16 = v153 >= 0x3F;
        v153 = v159;
        if (!v16)
          continue;
        break;
      }
      if ((_DWORD)v159 != 1)
      {
        v63 = 0;
        v160 = (v156 & 0x3F) + 1;
        v161 = v34;
        while (1)
        {
          if (v161)
            goto LABEL_223;
          if (v13 == v11)
          {
            v161 = 0;
            v8 = 3;
            v13 = v11;
            v63 *= 2;
            if (!--v160)
              goto LABEL_79;
          }
          else
          {
            v162 = *v13++;
            v7 = v162;
            v161 = 128;
LABEL_223:
            v163 = (v7 & v161) != 0;
            v34 = v161 >> 1;
            v161 >>= 1;
            v63 = (2 * v63) | v163;
            if (!--v160)
              goto LABEL_79;
          }
        }
      }
      LODWORD(v63) = 0;
LABEL_79:
      v64 = (v63 | (1 << (v159 - 1))) - 1;
LABEL_80:
      *v126 = v64;
      if (++v61 == v60)
        goto LABEL_241;
    }
    v66 = *(_BYTE **)(a4 + 48);
    v67 = ((char *)v62 - v66) >> 5;
    v68 = v67 + 1;
    if ((unint64_t)(v67 + 1) >> 59)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v252 = v61;
    v253 = v8;
    v69 = v65 - (_QWORD)v66;
    if (v69 >> 4 > v68)
      v68 = v69 >> 4;
    v16 = (unint64_t)v69 >= 0x7FFFFFFFFFFFFFE0;
    v70 = 0x7FFFFFFFFFFFFFFLL;
    if (!v16)
      v70 = v68;
    if (v70 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v71 = 32 * v70;
    v72 = (char *)operator new(32 * v70);
    v73 = &v72[32 * v67];
    *(_QWORD *)v73 = 0;
    *((_QWORD *)v73 + 1) = 0;
    *((_QWORD *)v73 + 2) = 0;
    *((_QWORD *)v73 + 3) = 0xFFFFFFFF00000000;
    if (v62 == (_QWORD *)v66)
    {
      v62 = v73 + 32;
      *(_QWORD *)(a4 + 48) = v73;
      *(_QWORD *)(a4 + 56) = v73 + 32;
      *(_QWORD *)(a4 + 64) = &v72[v71];
      if (v66)
        goto LABEL_93;
    }
    else
    {
      v74 = &v72[32 * v67];
      do
      {
        v75 = *((_OWORD *)v62 - 1);
        v76 = v74 - 32;
        *((_OWORD *)v74 - 2) = *((_OWORD *)v62 - 2);
        *((_OWORD *)v74 - 1) = v75;
        v62 -= 4;
        v74 -= 32;
      }
      while (v62 != (_QWORD *)v66);
      v62 = v73 + 32;
      *(_QWORD *)(a4 + 48) = v76;
      *(_QWORD *)(a4 + 56) = v73 + 32;
      *(_QWORD *)(a4 + 64) = &v72[v71];
      if (v66)
LABEL_93:
        operator delete(v66);
    }
    v61 = v252;
    v8 = v253;
    goto LABEL_95;
  }
LABEL_241:
  if (a5)
  {
    if (v34)
      v168 = 1;
    else
      v168 = v13 == v11;
    if (v168)
      v169 = v13;
    else
      v169 = v13 + 1;
    *a5 = v169 - a2;
  }
  if (v13 == v11)
    v170 = 3;
  else
    v170 = v8;
  if (v34)
    return v8;
  else
    return v170;
}

void gcl::gpcc::GeometryDecoderBasic::~GeometryDecoderBasic(gcl::gpcc::GeometryDecoderBasic *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a4 + 36);
  *(_QWORD *)(v4 + 1132) = *(_QWORD *)(a4 + 28);
  *(_DWORD *)(v4 + 1140) = v5;
  return 1;
}

void sub_1886CF8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = a15;
    if (!a15)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = a15;
    if (!a15)
      goto LABEL_3;
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_1,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  **(_DWORD **)(a1 + 8) += *(_DWORD *)(a4 + 24);
  return 0;
}

BOOL GEOPDDatasetABStatusReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  id v23;
  void *v24;
  _BOOL8 v25;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
              break;
            v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
            *(_QWORD *)&v3[v20] = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_32;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            LODWORD(v19) = 0;
LABEL_34:
          *(_DWORD *)(a1 + 16) = v19;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v23 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v24 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v23;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v25 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v25 = 0;
  }
  objc_sync_exit(v3);

  return v25;
}

void sub_1886CFB84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

long double GEOCalculateDistanceHighPrecision(double a1, double a2, double a3, double a4)
{
  double v8;

  v8 = sin(a1 * 0.0174532925) * -21000.0 + 6378160.0;
  return GEOCalculateDistanceRadius(a1, a2, a3, a4, v8);
}

void sub_1886CFD58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDStorefrontPresentationReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDStorefrontPresentationReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDStorefrontPresentationReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDStorefrontPresentationReadAllFrom_initialTag;
  Specified = GEOPDStorefrontPresentationReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 16), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1886CFF0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDStorefrontPresentationReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  int v26;
  unint64_t v28;
  BOOL v29;
  int *v30;
  int v31;
  int v32;
  BOOL v33;
  GEOPDStorefrontView *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  char v39;
  char v40;
  int v41;
  char v42;
  void *v43;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 | (v11 > 1);
        if (v10 & 1 | (v11 > 1) | v8 & 1)
          v15 = 0;
        else
          v15 = a3;
        v16 = (int *)MEMORY[0x1E0D82BF0];
        v17 = (int *)MEMORY[0x1E0D82BC8];
        v18 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_65;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v16;
      v23 = *(_QWORD *)(v3 + v22);
      if (v23 == -1 || v23 >= *(_QWORD *)(v3 + *v6))
        break;
      v24 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v23 + 1;
      v21 |= (unint64_t)(v24 & 0x7F) << v19;
      if ((v24 & 0x80) == 0)
        goto LABEL_23;
      v19 += 7;
      if (v20++ >= 9)
      {
        v21 = 0;
        v26 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_23:
    v26 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v21 = 0;
LABEL_25:
    if (v26 || (v21 & 7) == 4)
    {
LABEL_65:
      if ((v14 & 1) != 0)
      {
        v40 = 1;
        goto LABEL_73;
      }
      if (v15)
      {
        while (1)
        {
          v41 = *v15++;
          v42 = 1;
          switch(v41)
          {
            case 0:
              goto LABEL_74;
            case 4:
              goto LABEL_71;
            case 5:
              v42 = 4;
              goto LABEL_71;
            case 6:
              v42 = 2;
LABEL_71:
              *(_BYTE *)(a1 + 52) |= v42;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_74;
    }
    v28 = v21 >> 3;
    v29 = v14;
    if (!((v15 == 0) | v14 & 1))
    {
      v30 = v15;
      do
      {
        v32 = *v30++;
        v31 = v32;
        v29 = v32 != 0;
        if (v32)
          v33 = v31 == (_DWORD)v28;
        else
          v33 = 1;
      }
      while (!v33);
    }
    if ((_DWORD)v28 != 6)
      break;
    if (!v29)
      goto LABEL_55;
    if ((*(_BYTE *)(a1 + 52) & 2) != 0)
    {
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_72;
      v39 = *(_BYTE *)(a1 + 52) << 6;
LABEL_63:
      v7 += v39 >> 7;
      goto LABEL_64;
    }
    PBReaderReadString();
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v36;

    --v7;
LABEL_64:
    if (!(v14 & 1 | (v7 != 0)))
      goto LABEL_65;
  }
  if ((_DWORD)v28 != 5)
  {
    if ((_DWORD)v28 != 4)
    {
      if (!PBReaderSkipValueWithTag())
        goto LABEL_72;
      goto LABEL_64;
    }
    if (!v29)
      goto LABEL_55;
    if ((*(_BYTE *)(a1 + 52) & 1) != 0)
    {
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_72;
      v7 -= *(_BYTE *)(a1 + 52) & 1;
      goto LABEL_64;
    }
    if ((PBReaderPlaceMark() & 1) == 0)
      goto LABEL_72;
    v34 = objc_alloc_init(GEOPDStorefrontView);
    if (!GEOPDStorefrontViewReadAllFrom((uint64_t)v34, (void *)v3, v9 & 1))
      goto LABEL_79;
    PBReaderRecallMark();
    v35 = 16;
    goto LABEL_52;
  }
  if (!v29)
  {
LABEL_55:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_72;
    goto LABEL_64;
  }
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_72:
      v40 = 0;
      goto LABEL_73;
    }
    v39 = 32 * *(_BYTE *)(a1 + 52);
    goto LABEL_63;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_72;
  v34 = objc_alloc_init(GEOPDStorefrontView);
  if (GEOPDStorefrontViewReadAllFrom((uint64_t)v34, (void *)v3, v9 & 1))
  {
    PBReaderRecallMark();
    v35 = 32;
LABEL_52:
    v38 = *(void **)(a1 + v35);
    *(_QWORD *)(a1 + v35) = v34;

    --v7;
    v17 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_64;
  }
LABEL_79:

  v40 = 0;
  v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_73:
  *(_BYTE *)(a1 + 52) |= 1u;
  *(_BYTE *)(a1 + 52) |= 4u;
  *(_BYTE *)(a1 + 52) |= 2u;
  if ((v40 & 1) != 0)
  {
LABEL_74:
    v3 = *(_BYTE *)(v3 + *v17) == 0;
    if ((v14 & 1) == 0)
      return v3;
    goto LABEL_75;
  }
  v3 = 0;
  if ((v14 & 1) != 0)
  {
LABEL_75:
    v43 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

id GEOGetThrottleToken(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = a1;
  v4 = objc_opt_class();
  GEODecodeXPCValue(v3, "throttleToken", v4, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1886D0788(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GEODecodeXPCValue(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const void *data;
  void *v7;
  BOOL v8;
  void *v9;
  void *v10;
  void *v11;
  size_t length;

  length = 0;
  data = xpc_dictionary_get_data(a1, a2, &length);
  v7 = 0;
  if (length)
    v8 = data == 0;
  else
    v8 = 1;
  if (!v8)
  {
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", data);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)MEMORY[0x1E0CB3710];
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "unarchivedObjectOfClasses:fromData:error:", v11, v9, a4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v7;
}

void sub_1886D0998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void addr_obj::AddressObjectFactory::fromBytes(addr_obj::Logger *a1@<X0>, unsigned __int8 *a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  std::string *p_p;
  std::string::size_type size;
  void *v10[2];
  char v11;
  void *v12;
  char v13;
  void *v14[2];
  char v15;
  std::string __p;
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  if (addr_obj::Logger::isInitialized(a1))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"input parameters: ", 18);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Base64::encodeString(bytes)", 27);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"==", 2);
    addr_obj::Base64::encodeString(a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(v14, "fromBytes");
    std::stringbuf::str();
    std::string::basic_string[abi:ne180100]<0>(v10, "");
    addr_obj::Logger::log(2, (uint64_t)&__p, 62, (uint64_t)v14, (uint64_t)&v12, (uint64_t)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    if (v13 < 0)
      operator delete(v12);
    if (v15 < 0)
      operator delete(v14[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v17[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v17[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v18 < 0)
      operator delete((void *)v17[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D764310](&v19);
  }
  addr_obj::AddressObjectFactory::parseBytes(a2, a3);
}

void sub_1886D0B94(void *__p, int a2, int a3, __int16 a4, char a5, char a6, std::string *a7, void *a8, void *__pa, int a10, __int16 a11, char a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,__int128 a21,std::string::size_type a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v37;
  void *v38;
  const std::string::value_type *v39;
  std::string *v40;
  __int128 v41;
  void *v42;

  if (SHIBYTE(a14) < 0)
    operator delete(__pa);
  if (a20 < 0)
    operator delete(a15);
  if (SHIBYTE(a22) < 0)
    operator delete((void *)a21);
  if (a29 < 0)
    operator delete(a24);
  std::ostringstream::~ostringstream((uint64_t)&a30);
  v37 = __cxa_begin_catch(__p);
  if (a2 == 2)
  {
    v38 = v37;
    std::string::basic_string[abi:ne180100]<0>(&a30, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a24, "fromBytes");
    std::string::basic_string[abi:ne180100]<0>(&a15, "Exception caught during formatting of the log line: ");
    v39 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
    v40 = std::string::append((std::string *)&a15, v39);
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    a22 = v40->__r_.__value_.__r.__words[2];
    a21 = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(2, (uint64_t)&a30, 62, (uint64_t)&a24, (uint64_t)&a21, (uint64_t)&__pa);
    if (SHIBYTE(a14) < 0)
      operator delete(__pa);
    if (SHIBYTE(a22) < 0)
      operator delete((void *)a21);
    if (a20 < 0)
    {
      v42 = a15;
LABEL_20:
      operator delete(v42);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a30, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a24, "fromBytes");
    std::string::basic_string[abi:ne180100]<0>(&a21, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a15, "");
    addr_obj::Logger::log(2, (uint64_t)&a30, 62, (uint64_t)&a24, (uint64_t)&a21, (uint64_t)&a15);
    if (a20 < 0)
      operator delete(a15);
    if (SHIBYTE(a22) < 0)
    {
      v42 = (void *)a21;
      goto LABEL_20;
    }
  }
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  __cxa_end_catch();
  JUMPOUT(0x1886D0B68);
}

void sub_1886D18C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1886D18B8);
}

void sub_1886D19CC()
{
  __cxa_end_catch();
  JUMPOUT(0x1886D1724);
}

BOOL addr_obj::Logger::isInitialized(addr_obj::Logger *this)
{
  return addr_obj::Logger::callback_ != 0;
}

void addr_obj::AddressObjectFactory::parseBytes(unsigned __int8 *a1@<X1>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  std::string *v6;
  std::string::size_type size;
  _QWORD *v8;
  _QWORD *v9;
  addr_obj::Logger *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  std::runtime_error *exception;
  void *v16[2];
  char v17;
  std::string v18;
  void *v19[2];
  char v20;
  void *v21[2];
  unsigned __int8 v22;
  std::string v23[11];
  void *v24[2];
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  _BYTE v30[96];

  v4 = addr_obj::AddressObjectProto::AddressObjectProto((addr_obj::AddressObjectProto *)v30);
  if (!AddrObjGoogle::protobuf::MessageLite::ParseFromString(v4, (uint64_t *)a1))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"failed MessageLite::ParseFromString() from ", 43);
    addr_obj::Base64::encodeString(a1, v23);
    if ((v23[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = v23;
    else
      v6 = (std::string *)v23[0].__r_.__value_.__r.__words[0];
    if ((v23[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23[0].__r_.__value_.__r.__words[2]);
    else
      size = v23[0].__r_.__value_.__l.__size_;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, size);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; library version: ",
           19);
    v10 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"11.3.0", 6);
    if (SHIBYTE(v23[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23[0].__r_.__value_.__l.__data_);
    if (addr_obj::Logger::isInitialized(v10))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
      std::stringbuf::str();
      if ((v22 & 0x80u) == 0)
        v11 = v21;
      else
        v11 = (void **)v21[0];
      if ((v22 & 0x80u) == 0)
        v12 = v22;
      else
        v12 = (uint64_t)v21[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v11, v12);
      if ((char)v22 < 0)
        operator delete(v21[0]);
      std::string::basic_string[abi:ne180100]<0>(v21, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
      std::string::basic_string[abi:ne180100]<0>(v19, "parseBytes");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v16, "");
      addr_obj::Logger::log(16, (uint64_t)v21, 261, (uint64_t)v19, (uint64_t)&v18, (uint64_t)v16);
      if (v17 < 0)
        operator delete(v16[0]);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      if (v20 < 0)
        operator delete(v19[0]);
      if ((char)v22 < 0)
        operator delete(v21[0]);
      std::ostringstream::~ostringstream((uint64_t)v23);
    }
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"; at ", 5);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp", 94);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v23, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)&v23[0].__r_.__value_.__l.__data_, (uint64_t)v21);
  }
  addr_obj::Localization::Localization((addr_obj::Localization *)v24, (const addr_obj::AddressObjectProto *)v30);
  addr_obj::AddressObjectFactory::fromProto((const addr_obj::AddressObjectProto *)v30, (const addr_obj::Localization *)v24, a2);
  if (v29 < 0)
    operator delete(__p);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24[0]);
  addr_obj::AddressObjectProto::~AddressObjectProto((addr_obj::AddressObjectProto *)v30);
}

void sub_1886D1FE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v30)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v31);
    JUMPOUT(0x1886D2094);
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_1886D203C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::ostringstream::~ostringstream((uint64_t)&v26);
  JUMPOUT(0x1886D2094);
}

void sub_1886D2078(_Unwind_Exception *a1)
{
  uint64_t v1;

  addr_obj::AddressObjectProto::~AddressObjectProto((addr_obj::AddressObjectProto *)(v1 - 128));
  _Unwind_Resume(a1);
}

void addr_obj::AddressObjectFactory::fromProto(const addr_obj::AddressObjectProto *a1@<X1>, const addr_obj::Localization *a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v7;
  addr_obj::V0AddressObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  addr_obj::Logger *v12;
  void **v13;
  uint64_t v14;
  addr_obj::AddressObjectProto *v15;
  uint64_t v16;
  int *v17;
  addr_obj::V4AddressObjectProto *v18;
  int *v19;
  addr_obj::V4AddressObjectProto *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  addr_obj::AddressObjectProto *v31;
  uint64_t v32;
  int *v33;
  addr_obj::V3AddressObjectProto *Message;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  addr_obj::Logger *v46;
  void **v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  std::runtime_error *v51;
  _QWORD *v52;
  _QWORD *v53;
  std::runtime_error *exception;
  void *v55[2];
  char v56;
  __int128 v57;
  std::string v58;
  std::string v59;
  void *v60[2];
  unsigned __int8 v61;
  void *__p[2];
  unsigned __int8 v63;
  void *v64[2];
  char v65;
  _OWORD v66[5];
  int v67;
  int v68;

  if ((*((_BYTE *)a1 + 88) & 2) == 0)
    goto LABEL_7;
  v7 = *((_QWORD *)a1 + 2);
  if ((*(char *)(v7 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v7 + 23))
      goto LABEL_4;
LABEL_7:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v66);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"library_version is missing in proto: ", 37);
    v10 = addr_obj::operator<<(v9, a1);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; library version: ",
            19);
    v12 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v12))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v64);
      std::stringbuf::str();
      if ((v63 & 0x80u) == 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if ((v63 & 0x80u) == 0)
        v14 = v63;
      else
        v14 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v13, v14);
      if ((char)v63 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
      std::string::basic_string[abi:ne180100]<0>(v60, "fromProto");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(&v58, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 72, (uint64_t)v60, (uint64_t)&v59, (uint64_t)&v58);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if ((char)v61 < 0)
        operator delete(v60[0]);
      if ((char)v63 < 0)
        operator delete(__p[0]);
      std::ostringstream::~ostringstream((uint64_t)v64);
    }
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"; at ", 5);
    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp", 94);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v64, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v64, (uint64_t)__p);
  }
  if (!*(_QWORD *)(v7 + 8))
    goto LABEL_7;
LABEL_4:
  addr_obj::Fingerprints::Fingerprints((addr_obj::Fingerprints *)__p, a1);
  v57 = 0uLL;
  switch(*((_DWORD *)a1 + 20))
  {
    case 0:
      v8 = (addr_obj::V0AddressObject *)operator new();
      addr_obj::V0AddressObject::V0AddressObject(v8, a2, (const addr_obj::Fingerprints *)__p, a1);
      std::shared_ptr<addr_obj::V0AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V0AddressObject,void>(v66, (uint64_t)v8);
      goto LABEL_63;
    case 1:
      v42 = operator new();
      LODWORD(v64[0]) = 1;
      addr_obj::V1AddressObject::V1AddressObject(v42, a2, __p, a1, v64);
      std::shared_ptr<addr_obj::V1AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V1AddressObject,void>(v66, v42);
      goto LABEL_63;
    case 2:
      v30 = operator new();
      LODWORD(v64[0]) = 2;
      addr_obj::V2AddressObject::V2AddressObject(v30, a2, __p, a1, v64);
      std::shared_ptr<addr_obj::V2AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V2AddressObject,void>(v66, v30);
LABEL_63:
      v57 = v66[0];
      goto LABEL_64;
    case 3:
      addr_obj::AddressObjectProto::AddressObjectProto((addr_obj::AddressObjectProto *)v66);
      addr_obj::AddressObjectProto::CopyFrom((addr_obj::AddressObjectProto *)v66, a1);
      v68 |= 1u;
      v67 = 1;
      v32 = *((_QWORD *)a1 + 8);
      if (!v32)
      {
        v31 = (addr_obj::AddressObjectProto *)addr_obj::AddressObjectProto::default_instance_(v31);
        v32 = *((_QWORD *)v31 + 8);
      }
      v33 = addr_obj::V3AddressObjectProto::v3address(v31);
      Message = (addr_obj::V3AddressObjectProto *)AddrObjGoogle::protobuf::internal::ExtensionSet::GetMessage(v32 + 8, *v33, *((_QWORD *)v33 + 1));
      v35 = *((_QWORD *)Message + 2);
      if (!v35)
        v35 = *(_QWORD *)(addr_obj::V3AddressObjectProto::default_instance_(Message) + 16);
      std::string::basic_string[abi:ne180100]<0>(v64, "downconvert_v3_v1+venue");
      std::string::basic_string[abi:ne180100]<0>(v60, "fromProto");
      addr_obj::Fingerprints::add((uint64_t *)__p, (uint64_t)v64, (uint64_t)v60);
      if ((char)v61 < 0)
        operator delete(v60[0]);
      if (v65 < 0)
        operator delete(v64[0]);
      v36 = operator new();
      LODWORD(v60[0]) = 1;
      addr_obj::V1AddressObject::V1AddressObject(v36, a2, __p, v66, v35, v60);
      std::shared_ptr<addr_obj::V1AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V1AddressObject,void>(v64, v36);
      v37 = *(_OWORD *)v64;
      v64[0] = 0;
      v64[1] = 0;
      v38 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
      v57 = v37;
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v27 = (std::__shared_weak_count *)v64[1];
      if (!v64[1])
        goto LABEL_61;
      v41 = (unint64_t *)((char *)v64[1] + 8);
      do
        v29 = __ldaxr(v41);
      while (__stlxr(v29 - 1, v41));
      break;
    case 4:
      addr_obj::AddressObjectProto::AddressObjectProto((addr_obj::AddressObjectProto *)v66);
      addr_obj::AddressObjectProto::CopyFrom((addr_obj::AddressObjectProto *)v66, a1);
      v68 |= 1u;
      v67 = 2;
      v16 = *((_QWORD *)a1 + 8);
      if (!v16)
      {
        v15 = (addr_obj::AddressObjectProto *)addr_obj::AddressObjectProto::default_instance_(v15);
        v16 = *((_QWORD *)v15 + 8);
      }
      v17 = addr_obj::V2AddressObjectProto::v2address(v15);
      v18 = (addr_obj::V4AddressObjectProto *)AddrObjGoogle::protobuf::internal::ExtensionSet::GetMessage(v16 + 8, *v17, *((_QWORD *)v17 + 1));
      v19 = addr_obj::V4AddressObjectProto::v4address(v18);
      v20 = (addr_obj::V4AddressObjectProto *)AddrObjGoogle::protobuf::internal::ExtensionSet::GetMessage((uint64_t)v18 + 8, *v19, *((_QWORD *)v19 + 1));
      v21 = *((_QWORD *)v20 + 2);
      if (!v21)
        v21 = *(_QWORD *)(addr_obj::V4AddressObjectProto::default_instance_(v20) + 16);
      std::string::basic_string[abi:ne180100]<0>(v64, "downconvert_v4_v2+venue");
      std::string::basic_string[abi:ne180100]<0>(v60, "fromProto");
      addr_obj::Fingerprints::add((uint64_t *)__p, (uint64_t)v64, (uint64_t)v60);
      if ((char)v61 < 0)
        operator delete(v60[0]);
      if (v65 < 0)
        operator delete(v64[0]);
      v22 = operator new();
      LODWORD(v60[0]) = 2;
      addr_obj::V2AddressObject::V2AddressObject(v22, a2, __p, v66, v21, v60);
      std::shared_ptr<addr_obj::V2AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V2AddressObject,void>(v64, v22);
      v23 = *(_OWORD *)v64;
      v64[0] = 0;
      v64[1] = 0;
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
      v57 = v23;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)v64[1];
      if (!v64[1])
        goto LABEL_61;
      v28 = (unint64_t *)((char *)v64[1] + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v66);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"unexpected proto.address_object_version in ", 43);
      v44 = addr_obj::operator<<(v43, a1);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"; library version: ",
              19);
      v46 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"11.3.0", 6);
      if (addr_obj::Logger::isInitialized(v46))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v64);
        std::stringbuf::str();
        if ((v61 & 0x80u) == 0)
          v47 = v60;
        else
          v47 = (void **)v60[0];
        if ((v61 & 0x80u) == 0)
          v48 = v61;
        else
          v48 = (uint64_t)v60[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v47, v48);
        if ((char)v61 < 0)
          operator delete(v60[0]);
        std::string::basic_string[abi:ne180100]<0>(v60, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v59, "fromProto");
        std::stringbuf::str();
        std::string::basic_string[abi:ne180100]<0>(v55, "");
        addr_obj::Logger::log(16, (uint64_t)v60, 109, (uint64_t)&v59, (uint64_t)&v58, (uint64_t)v55);
        if (v56 < 0)
          operator delete(v55[0]);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v58.__r_.__value_.__l.__data_);
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v59.__r_.__value_.__l.__data_);
        if ((char)v61 < 0)
          operator delete(v60[0]);
        std::ostringstream::~ostringstream((uint64_t)v64);
      }
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"; at ", 5);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp", 94);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)":", 1);
      std::ostream::operator<<();
      v51 = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
      std::string::basic_string[abi:ne180100]<0>(v64, "DataError");
      std::stringbuf::str();
      addr_obj::Exception<std::runtime_error>::Exception(v51, (const void **)v64, (uint64_t)v60);
  }
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
LABEL_61:
  addr_obj::AddressObjectProto::~AddressObjectProto((addr_obj::AddressObjectProto *)v66);
LABEL_64:
  *a3 = v57;
  *(_QWORD *)&v66[0] = __p;
  std::vector<addr_obj::Fingerprints::Fingerprint>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
}

void sub_1886D2FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v40;

  if (a31 < 0)
    operator delete(__p);
  if (a37 < 0)
  {
    operator delete(a32);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v40);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void sub_1886D3020(_Unwind_Exception *a1)
{
  uint64_t v2;

  __cxa_end_catch();
  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

void sub_1886D3040()
{
  uint64_t v0;
  uint64_t v1;
  void **v2;

  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&v0);
  v2 = (void **)&v1;
  std::vector<addr_obj::Fingerprints::Fingerprint>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x1886D3178);
}

void sub_1886D3140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  addr_obj::AddressObjectProto::~AddressObjectProto((addr_obj::AddressObjectProto *)&a63);
  JUMPOUT(0x1886D3150);
}

uint64_t addr_obj::Logger::log(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(uint64_t, void **, uint64_t, uint64_t);
  void *__p;
  char v26;
  _QWORD v27[11];
  char v28;
  uint64_t v29;

  if (addr_obj::Logger::callback_)
  {
    v10 = result;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"library version: ", 17);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"11.3.0", 6);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"; ", 2);
    v14 = *(char *)(a2 + 23);
    if (v14 >= 0)
      v15 = a2;
    else
      v15 = *(_QWORD *)a2;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a2 + 23);
    else
      v16 = *(_QWORD *)(a2 + 8);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    v18 = (_QWORD *)std::ostream::operator<<();
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)":", 1);
    v20 = *(char *)(a4 + 23);
    if (v20 >= 0)
      v21 = a4;
    else
      v21 = *(_QWORD *)a4;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a4 + 23);
    else
      v22 = *(_QWORD *)(a4 + 8);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)";", 1);
    v24 = (void (*)(uint64_t, void **, uint64_t, uint64_t))addr_obj::Logger::callback_;
    if (addr_obj::Logger::callback_)
    {
      std::stringbuf::str();
      v24(v10, &__p, a5, a6);
      if (v26 < 0)
        operator delete(__p);
    }
    v27[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v27[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v28 < 0)
      operator delete((void *)v27[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D764310](&v29);
  }
  return result;
}

void sub_1886D3324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void addr_obj::Base64::encodeString(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  std::string::value_type __s[1024];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  addr_obj::Base64::Internal::encodeString(a1, a2, __s, 0x400uLL);
}

void sub_1886D33C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,uint64_t a23,void *a24)
{
  uint64_t v24;
  addr_obj::Logger *v26;
  uint64_t isInitialized;
  _QWORD *v28;
  __int128 *v29;
  __int128 v30;

  if (a2)
  {
    if (*(char *)(v24 + 23) < 0)
      operator delete(*(void **)v24);
    v26 = (addr_obj::Logger *)__cxa_begin_catch(exception_object);
    isInitialized = addr_obj::Logger::isInitialized(v26);
    if ((_DWORD)isInitialized)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a24);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a24, (uint64_t)"encodeString", 12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" failed", 7);
      std::string::basic_string[abi:ne180100]<0>(&a21, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Base64.cpp");
      std::string::basic_string[abi:ne180100]<0>(&a18, "encodeString");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      addr_obj::Logger::log(16, (uint64_t)&a21, 272, (uint64_t)&a18, (uint64_t)&a15, (uint64_t)&__p);
      if (a14 < 0)
        operator delete(__p);
      if (SHIBYTE(a17) < 0)
        operator delete(a15);
      if (SHIBYTE(a20) < 0)
        operator delete(a18);
      if (SHIBYTE(a23) < 0)
        operator delete(a21);
      isInitialized = std::ostringstream::~ostringstream((uint64_t)&a24);
    }
    v29 = addr_obj::emptyString((addr_obj *)isInitialized);
    if (*((char *)v29 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v24, *(const std::string::value_type **)v29, *((_QWORD *)v29 + 1));
    }
    else
    {
      v30 = *v29;
      *(_QWORD *)(v24 + 16) = *((_QWORD *)v29 + 2);
      *(_OWORD *)v24 = v30;
    }
    __cxa_end_catch();
    JUMPOUT(0x1886D3394);
  }
  _Unwind_Resume(exception_object);
}

void addr_obj::Base64::Internal::encodeString(unsigned __int8 *a1, std::string *this, std::string::value_type *__s, unint64_t a4)
{
  int v5;
  unint64_t v6;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  std::string::value_type *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  std::string::size_type v18;
  _QWORD *v19;
  _QWORD *v20;
  addr_obj::Logger *v21;
  void **v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  std::runtime_error *exception;
  std::string __str;
  void *v28[2];
  char v29;
  std::string v30;
  void *v31[2];
  char v32;
  void *__p[2];
  unsigned __int8 v34;
  void *v35[2];
  _QWORD v36[33];

  if (a4 <= 1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"buffer size must be greater than 1, not ", 40);
    v19 = (_QWORD *)std::ostream::operator<<();
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"; library version: ",
            19);
    v21 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v21))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
      std::stringbuf::str();
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v22, v23);
      if ((char)v34 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Base64.cpp");
      std::string::basic_string[abi:ne180100]<0>(v31, "encodeString");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v28, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 196, (uint64_t)v31, (uint64_t)&v30, (uint64_t)v28);
      if (v29 < 0)
        operator delete(v28[0]);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (v32 < 0)
        operator delete(v31[0]);
      if ((char)v34 < 0)
        operator delete(__p[0]);
      std::ostringstream::~ostringstream((uint64_t)v35);
    }
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"; at ", 5);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Base64.cpp", 80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v35, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v35, (uint64_t)__p);
  }
  memset(&__str, 0, sizeof(__str));
  v5 = (char)a1[23];
  if (v5 >= 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  if (!v6)
    goto LABEL_32;
  v8 = 0;
  LOBYTE(v9) = 0;
  if (v5 >= 0)
    v10 = a1;
  else
    v10 = *(unsigned __int8 **)a1;
  if (a4 <= 3)
    v11 = 1;
  else
    v11 = a4 >> 1;
  do
  {
    if (v11 >= v6)
      v12 = v6;
    else
      v12 = v11;
    v13 = &v10[v12];
    v14 = __s;
    if (v8 == 2)
      goto LABEL_21;
    if (v8 == 1)
    {
LABEL_19:
      if (v10 == v13)
      {
        v8 = 1;
        goto LABEL_26;
      }
      v16 = *v10++;
      *v14++ = aAbcdefghijklmn[(v9 | (v16 >> 4))];
      LOBYTE(v9) = 4 * (v16 & 0xF);
LABEL_21:
      if (v10 == v13)
      {
        v8 = 2;
        goto LABEL_26;
      }
      v17 = *v10++;
      *v14 = aAbcdefghijklmn[v9 | ((unint64_t)v17 >> 6)];
      v9 = v17 & 0x3F;
      v14[1] = aAbcdefghijklmn[v9];
      v14 += 2;
    }
    if (v10 != v13)
    {
      v15 = *v10++;
      *v14++ = aAbcdefghijklmn[(unint64_t)v15 >> 2];
      LOBYTE(v9) = 16 * (v15 & 3);
      goto LABEL_19;
    }
    v8 = 0;
LABEL_26:
    std::string::append(&__str, __s, v14 - __s);
    v10 = v13;
    v6 -= v12;
  }
  while (v6);
  if (v8 == 2)
  {
    v18 = 1;
    std::string::append(&__str, 1uLL, aAbcdefghijklmn[v9]);
LABEL_31:
    std::string::append(&__str, v18, 61);
  }
  else if (v8 == 1)
  {
    std::string::append(&__str, 1uLL, aAbcdefghijklmn[v9]);
    v18 = 2;
    goto LABEL_31;
  }
LABEL_32:
  std::string::operator=(this, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1886D454C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v34 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v34)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v35);
    JUMPOUT(0x1886D45E8);
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

void sub_1886D45AC()
{
  uint64_t v0;

  __cxa_end_catch();
  std::ostringstream::~ostringstream((uint64_t)&v0);
  JUMPOUT(0x1886D45E8);
}

uint64_t addr_obj::V2AddressObject::V2AddressObject(uint64_t a1, __int128 *a2, __int128 **a3, const addr_obj::AddressObjectProto *a4, int *a5)
{
  uint64_t v7;

  v7 = addr_obj::V1AddressObject::V1AddressObject(a1, a2, a3, (uint64_t)a4, a5);
  *(_QWORD *)v7 = &off_1E1BF9500;
  *(_OWORD *)(v7 + 728) = 0u;
  *(_OWORD *)(v7 + 744) = 0u;
  *(_OWORD *)(v7 + 760) = 0u;
  *(_OWORD *)(v7 + 776) = 0u;
  *(_OWORD *)(v7 + 792) = 0u;
  *(_OWORD *)(v7 + 808) = 0u;
  *(_OWORD *)(v7 + 824) = 0u;
  *(_OWORD *)(v7 + 840) = 0u;
  *(_OWORD *)(v7 + 856) = 0u;
  *(_OWORD *)(v7 + 872) = 0u;
  *(_OWORD *)(v7 + 888) = 0u;
  *(_OWORD *)(v7 + 904) = 0u;
  *(_OWORD *)(v7 + 920) = 0u;
  *(_OWORD *)(v7 + 936) = 0u;
  *(_OWORD *)(v7 + 952) = 0u;
  *(_OWORD *)(v7 + 968) = 0u;
  *(_OWORD *)(v7 + 984) = 0u;
  *(_OWORD *)(v7 + 1000) = 0u;
  addr_obj::V2AddressObject::init((addr_obj::V2AddressObject *)v7, a4);
  return a1;
}

void sub_1886D4670(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 1015) < 0)
    operator delete(*(void **)(v1 + 992));
  if (*(char *)(v1 + 991) < 0)
    operator delete(*(void **)(v1 + 968));
  if (*(char *)(v1 + 967) < 0)
    operator delete(*(void **)(v1 + 944));
  if (*(char *)(v1 + 943) < 0)
    operator delete(*(void **)(v1 + 920));
  if (*(char *)(v1 + 919) < 0)
    operator delete(*(void **)(v1 + 896));
  if (*(char *)(v1 + 895) < 0)
    operator delete(*(void **)(v1 + 872));
  if (*(char *)(v1 + 871) < 0)
    operator delete(*(void **)(v1 + 848));
  if (*(char *)(v1 + 847) < 0)
    operator delete(*(void **)(v1 + 824));
  if (*(char *)(v1 + 823) < 0)
    operator delete(*(void **)(v1 + 800));
  if (*(char *)(v1 + 799) < 0)
    operator delete(*(void **)(v1 + 776));
  if (*(char *)(v1 + 775) < 0)
    operator delete(*(void **)(v1 + 752));
  if (*(char *)(v1 + 751) < 0)
    operator delete(*v2);
  addr_obj::V1AddressObject::~V1AddressObject((addr_obj::V1AddressObject *)v1);
  _Unwind_Resume(a1);
}

std::string *addr_obj::Localization::Localization(std::string *this, const addr_obj::AddressObjectProto *a2)
{
  std::string *v4;
  std::string *v5;
  _QWORD *v6;
  const std::string **v7;
  void *__p[2];
  char v10;
  void *v11;
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  v4 = this + 2;
  v5 = this + 1;
  this[2].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this->__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0u;
  if ((*((_BYTE *)a2 + 88) & 4) != 0)
  {
    v7 = (const std::string **)*((_QWORD *)a2 + 3);
    if (!v7)
      v7 = *(const std::string ***)(addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)this)
                                  + 24);
    std::string::operator=(this, v7[2]);
    std::string::operator=(v5, v7[3]);
    std::string::operator=(v4, v7[4]);
  }
  else if (addr_obj::Logger::isInitialized((addr_obj::Logger *)this))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"proto is missing localization: ", 31);
    addr_obj::operator<<(v6, a2);
    std::string::basic_string[abi:ne180100]<0>(v15, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
    std::string::basic_string[abi:ne180100]<0>(v13, "Localization");
    std::stringbuf::str();
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    addr_obj::Logger::log(16, (uint64_t)v15, 30, (uint64_t)v13, (uint64_t)&v11, (uint64_t)__p);
    if (v10 < 0)
      operator delete(__p[0]);
    if (v12 < 0)
      operator delete(v11);
    if (v14 < 0)
      operator delete(v13[0]);
    if (v16 < 0)
      operator delete(v15[0]);
    v17[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v17[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v18 < 0)
      operator delete((void *)v17[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D764310](&v19);
  }
  return this;
}

void sub_1886D4908(void *__p, int a2, int a3, __int16 a4, char a5, char a6, std::string *a7, void *a8, void *__pa, int a10, __int16 a11, char a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,__int128 a21,std::string::size_type a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v37;
  void *v38;
  const std::string::value_type *v39;
  std::string *v40;
  __int128 v41;

  if (SHIBYTE(a14) < 0)
    operator delete(__pa);
  if (a20 < 0)
    operator delete(a15);
  if (SHIBYTE(a22) < 0)
    operator delete((void *)a21);
  if (a29 < 0)
    operator delete(a24);
  std::ostringstream::~ostringstream((uint64_t)&a30);
  v37 = __cxa_begin_catch(__p);
  if (a2 == 2)
  {
    v38 = v37;
    std::string::basic_string[abi:ne180100]<0>(&a30, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a24, "Localization");
    std::string::basic_string[abi:ne180100]<0>(&a15, "Exception caught during formatting of the log line: ");
    v39 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
    v40 = std::string::append((std::string *)&a15, v39);
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    a22 = v40->__r_.__value_.__r.__words[2];
    a21 = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a30, 30, (uint64_t)&a24, (uint64_t)&a21, (uint64_t)&__pa);
    if (SHIBYTE(a14) < 0)
      operator delete(__pa);
    if (SHIBYTE(a22) < 0)
      operator delete((void *)a21);
    if (a20 < 0)
      operator delete(a15);
    if (a29 < 0)
      operator delete(a24);
    if (a35 < 0)
      operator delete(a30);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a30, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a24, "Localization");
    std::string::basic_string[abi:ne180100]<0>(&a21, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a15, "");
    addr_obj::Logger::log(16, (uint64_t)&a30, 30, (uint64_t)&a24, (uint64_t)&a21, (uint64_t)&a15);
    if (a20 < 0)
      operator delete(a15);
    if (SHIBYTE(a22) < 0)
      operator delete((void *)a21);
    if (a29 < 0)
      operator delete(a24);
    if (a35 < 0)
      operator delete(a30);
  }
  __cxa_end_catch();
  JUMPOUT(0x1886D48ECLL);
}

void sub_1886D4B3C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1886D4A90);
}

void sub_1886D4C50()
{
  __cxa_end_catch();
  JUMPOUT(0x1886D4C64);
}

void sub_1886D4EC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDContainmentPlaceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDContainmentPlaceReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDContainmentPlaceReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDContainmentPlaceReadAllFrom_initialTag;
  Specified = GEOPDContainmentPlaceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1886D5078(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDContainmentPlaceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEOPDMapsIdentifier *v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  int v44;
  char v45;
  char v46;
  char v47;
  int v48;
  int v49;
  void *v50;
  int v52;
  int *v53;
  char v54;
  char v55;
  char v56;
  BOOL v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v7 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v54 = v17;
        v55 = v18 | v17;
        if (((v18 | v7) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v56 = (v19 == 0) | v18;
        v57 = v18;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v8;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_66;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_66:
      v52 = 1;
      goto LABEL_67;
    }
    v33 = v25 >> 3;
    v34 = v57;
    if ((v56 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    if ((_DWORD)v33 == 2)
      break;
    if ((_DWORD)v33 == 1)
    {
      if (v34)
      {
        if ((*(_BYTE *)(a1 + 52) & 2) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_87;
          v39 = objc_alloc_init(GEOPDMapsIdentifier);
          if (!GEOPDMapsIdentifierReadAllFrom((uint64_t)v39, (void *)v3))
            goto LABEL_86;
          PBReaderRecallMark();
          v40 = 24;
LABEL_50:
          v41 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v39;

          --v8;
LABEL_64:
          v21 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_65;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_87;
        v46 = *(_BYTE *)(a1 + 52) << 6;
LABEL_63:
        v8 += v46 >> 7;
        goto LABEL_64;
      }
    }
    else if ((v54 & 1) != 0 && (*(_BYTE *)(a1 + 52) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v42 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v43 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v42;

      }
      v44 = PBUnknownFieldAdd();
      v21 = (int *)MEMORY[0x1E0D82BC8];
      if (!v44)
      {
        v52 = 0;
        v53 = &OBJC_IVAR___GEOXPCReply__methodName;
        goto LABEL_69;
      }
      goto LABEL_65;
    }
LABEL_57:
    v45 = PBReaderSkipValueWithTag();
    v21 = (int *)MEMORY[0x1E0D82BC8];
    if ((v45 & 1) == 0)
    {
      v52 = 0;
LABEL_67:
      v53 = &OBJC_IVAR___GEOXPCReply__methodName;
      goto LABEL_68;
    }
LABEL_65:
    if (!(v55 & 1 | (v8 != 0)))
      goto LABEL_66;
  }
  if (!v34)
    goto LABEL_57;
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_87;
    v46 = 32 * *(_BYTE *)(a1 + 52);
    goto LABEL_63;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_87;
  v39 = objc_alloc_init(GEOFormattedString);
  if (GEOFormattedStringReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    v40 = 32;
    goto LABEL_50;
  }
LABEL_86:

LABEL_87:
  v52 = 0;
  v53 = &OBJC_IVAR___GEOXPCReply__methodName;
  v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_68:
  if ((v54 & 1) == 0)
    goto LABEL_70;
LABEL_69:
  *(_BYTE *)(a1 + v53[871]) |= 1u;
LABEL_70:
  if (v57 || (v52 & 1) == 0)
  {
    *(_BYTE *)(a1 + v53[871]) |= 2u;
    *(_BYTE *)(a1 + v53[871]) |= 4u;
    goto LABEL_80;
  }
  if (v19)
  {
    while (1)
    {
      v49 = *v19++;
      v48 = v49;
      if (v49 == 1)
        break;
      if (v48 == 2)
      {
        v47 = 4;
LABEL_76:
        *(_BYTE *)(a1 + v53[871]) |= v47;
      }
      else if (!v48)
      {
        goto LABEL_80;
      }
    }
    v47 = 2;
    goto LABEL_76;
  }
LABEL_80:
  if (v52)
    v3 = *(_BYTE *)(v3 + *v21) == 0;
  else
    v3 = 0;
  if (v57)
  {
    v50 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1886D5688(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886D5854(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDISO3166CodeReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDISO3166CodeReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDISO3166CodeReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDISO3166CodeReadAllFrom_initialTag;
  Specified = GEOPDISO3166CodeReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_1886D59F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDISO3166CodeReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  GEOLatLngE7 *v37;
  void *v38;
  id v39;
  void *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  char v52;
  int v53;
  char v54;
  void *v55;
  int v57;
  int *v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 64)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFFFFFCFFFDFFFELL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v60 = v16 & ~(_BYTE)v11 | v7;
        v61 = v16 | v11 | v60;
        v59 = v8;
        if ((((v16 | v11) | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v62 = (v17 == 0) | v16 | v11;
        v63 = v16 | v11;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v7;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v9;
        v7 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_81;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_81:
      v57 = 1;
      goto LABEL_82;
    }
    v31 = v23 >> 3;
    v32 = v63;
    if ((v62 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 64) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_99;
          v37 = objc_alloc_init(GEOLatLngE7);
          if (GEOLatLngE7ReadAllFrom((uint64_t)v37, (void *)v3))
          {
            PBReaderRecallMark();
            v38 = *(void **)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v37;
            goto LABEL_57;
          }

          goto LABEL_99;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_99;
        v52 = 16 * *(_BYTE *)(a1 + 64);
        goto LABEL_78;
      case 2:
        if (!v32)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 64) & 4) == 0)
        {
          PBReaderReadString();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = 24;
          goto LABEL_56;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_99;
        v52 = 32 * *(_BYTE *)(a1 + 64);
        goto LABEL_78;
      case 3:
        if (!v32)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 64) & 0x10) == 0)
        {
          PBReaderReadString();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = 40;
LABEL_56:
          v38 = *(void **)(a1 + v43);
          *(_QWORD *)(a1 + v43) = v42;
LABEL_57:

          --v9;
LABEL_79:
          v19 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_80;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v52 = 8 * *(_BYTE *)(a1 + 64);
LABEL_78:
          v9 += v52 >> 7;
          goto LABEL_79;
        }
LABEL_99:
        v57 = 0;
        v58 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_83:
        if ((v60 & 1) != 0)
LABEL_84:
          *(_BYTE *)(a1 + v58[33]) |= 2u;
        if (v63 & 1 | ((v57 & 1) == 0))
        {
          *(_BYTE *)(a1 + v58[33]) |= 8u;
          *(_BYTE *)(a1 + v58[33]) |= 4u;
          *(_BYTE *)(a1 + v58[33]) |= 0x10u;
        }
        else if (v17)
        {
          while (1)
          {
            v53 = *v17++;
            v54 = 8;
            switch(v53)
            {
              case 0:
                goto LABEL_92;
              case 1:
                goto LABEL_91;
              case 2:
                v54 = 4;
                goto LABEL_91;
              case 3:
                v54 = 16;
LABEL_91:
                *(_BYTE *)(a1 + v58[33]) |= v54;
                break;
              default:
                continue;
            }
          }
        }
LABEL_92:
        if (v57)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if ((v63 & 1) != 0)
        {
          v55 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 4:
        if ((v59 & 1) == 0)
          goto LABEL_66;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (2)
        {
          v47 = *v18;
          v48 = *(_QWORD *)(v3 + v47);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v48);
            *(_QWORD *)(v3 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              v28 = v45++ >= 9;
              if (v28)
              {
                v46 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v46 = 0;
LABEL_71:
        *(_BYTE *)(a1 + 60) = v46 != 0;
        goto LABEL_80;
      default:
        if ((v60 & 1) == 0 || (*(_BYTE *)(a1 + 64) & 2) != 0)
        {
LABEL_66:
          v51 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v51 & 1) == 0)
          {
            v57 = 0;
LABEL_82:
            v58 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
            goto LABEL_83;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v40 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v39;

          }
          v41 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v41)
          {
            v57 = 0;
            v58 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
            goto LABEL_84;
          }
        }
LABEL_80:
        if (!(v61 & 1 | (v9 != 0)))
          goto LABEL_81;
        continue;
    }
  }
}

uint64_t geo::codec::_decodeDaVinciRenderables(geo::codec::Allocator *a1, int8x8_t *a2, uint64_t a3, uint64_t *a4, _WORD *a5, uint64_t *a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  FILE *v9;
  int v10;
  uint64_t result;
  _QWORD *v12;
  _WORD *v14;
  geo::codec::Allocator *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  geo::codec::Allocator *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _DWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _WORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _BYTE *v72;
  unint64_t v73;
  _WORD *v74;
  _WORD *v75;
  _QWORD *v76;
  geo::codec::Allocator **v77;
  uint64_t v78;
  geo::codec::Allocator *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int8x8_t v83;
  uint8x8_t v84;
  unint64_t v85;
  int8x8_t *v86;
  uint64_t v87;
  int8x8_t *v88;
  unint64_t v89;
  int8x8_t v90;
  uint8x8_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  float v109;
  uint64_t v110;
  float v111;
  uint64_t v112;
  float v113;
  uint64_t v114;
  float v115;
  unint64_t v116;
  int v117;
  _QWORD *v118;
  _QWORD *v119;
  _DWORD *v120;
  unint64_t v121;
  _DWORD *v122;
  uint64_t **v123;
  uint64_t *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  geo::codec::Allocator **v129;
  geo::codec::Allocator *v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  _DWORD *v141;
  __int32 v142;
  int v143;
  int v144;
  int v145;
  int v146;
  __int32 v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _DWORD *v159;
  uint64_t v160;
  uint64_t v161;
  _DWORD *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _OWORD *v167;
  __int128 *v168;
  uint64_t v169;
  __int128 v170;
  int v171;
  uint64_t v172;
  int8x8_t v173;
  uint64_t **v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _DWORD *v182;
  unint64_t v183;
  uint64_t **v184;
  uint64_t *v185;
  uint64_t v186;
  unint64_t v187;
  _WORD *v188;
  _QWORD *v189;
  _WORD *v190;
  unsigned int v191;
  int v192;
  uint64_t *v194;
  _QWORD *v195;
  geo::codec::Allocator **v196;
  int8x8_t *v197;
  float32x4_t v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  unsigned int v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  int v213;
  float32x4_t v214;
  float v215;
  float v216;
  float v217;
  int v218;
  float v219;
  float v220;
  float v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;

  *a7 = 0;
  v7 = *((_QWORD *)a1 + 6);
  v8 = v7 + 2;
  if ((unint64_t)(v7 + 2) > *((_QWORD *)a1 + 7))
  {
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    v10 = 7820;
    goto LABEL_3;
  }
  v12 = a7;
  v14 = a5;
  v17 = a1;
  v18 = *(unsigned __int16 *)(*((_QWORD *)a1 + 5) + v7);
  *a5 = v18;
  *((_QWORD *)a1 + 6) = v8;
  v19 = *a6;
  a6[1] = *a6;
  if (v18 <= (a6[2] - v19) >> 3)
    goto LABEL_16;
  v20 = 8 * v18;
  a1 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a6[3] + 16))(a6[3], 8 * v18, 8);
  v21 = *a6;
  v22 = a6[1];
  v23 = a1;
  if (v22 != *a6)
  {
    v24 = v22 - *a6 - 8;
    if (v24 < 0x38)
    {
      v23 = a1;
    }
    else
    {
      v23 = a1;
      if ((unint64_t)(v22 - (_QWORD)a1) >= 0x20)
      {
        v25 = (v24 >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v27 = v22 - v26;
        v23 = (geo::codec::Allocator *)((char *)a1 - v26);
        v28 = (_OWORD *)((char *)a1 - 16);
        v29 = (__int128 *)(v22 - 16);
        v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v31 = *v29;
          *(v28 - 1) = *(v29 - 1);
          *v28 = v31;
          v28 -= 2;
          v29 -= 2;
          v30 -= 4;
        }
        while (v30);
        v22 = v27;
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_14;
      }
    }
    do
    {
      v32 = *(_QWORD *)(v22 - 8);
      v22 -= 8;
      *((_QWORD *)v23 - 1) = v32;
      v23 = (geo::codec::Allocator *)((char *)v23 - 8);
    }
    while (v22 != v21);
  }
LABEL_14:
  *a6 = (uint64_t)v23;
  a6[1] = (uint64_t)a1;
  v33 = a6[2];
  a6[2] = (uint64_t)a1 + v20;
  if (v21)
    a1 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6[3] + 40))(a6[3], v21, v33 - v21);
LABEL_16:
  v34 = geo::codec::Allocator::instance(a1);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v34 + 24))(v34, (unsigned __int16)*v14, 48);
  *a4 = result;
  if (!*v14)
    return 1;
  v35 = 0;
  v197 = a2;
  v194 = a4;
  while (1)
  {
    v37 = *((_QWORD *)v17 + 6);
    v36 = *((_QWORD *)v17 + 7);
    v38 = v37 + 1;
    if (v37 + 1 > v36)
    {
      v9 = (FILE *)*MEMORY[0x1E0C80C10];
      v10 = 7830;
      goto LABEL_3;
    }
    v39 = *a4;
    v40 = *((_QWORD *)v17 + 5);
    v41 = *(_BYTE *)(v40 + v37);
    *((_QWORD *)v17 + 6) = v38;
    *(_BYTE *)(v39 + 48 * v35 + 45) = v41 & 1;
    if ((v41 & 1) == 0)
    {
      v42 = v37 + 3;
      if (v37 + 3 > v36)
      {
        v9 = (FILE *)*MEMORY[0x1E0C80C10];
        v10 = 7854;
        goto LABEL_3;
      }
      v43 = *(unsigned __int16 *)(v40 + v38);
      *((_QWORD *)v17 + 6) = v42;
      *(_QWORD *)(v39 + 48 * v35 + 24) = v43;
      v44 = (_QWORD *)(v39 + 48 * v35 + 16);
      if ((v41 & 2) != 0)
        goto LABEL_55;
      goto LABEL_154;
    }
    v45 = (_DWORD *)(v39 + 48 * v35 + 24);
    if (*((_DWORD *)v17 + 16) < 0x11u)
    {
      v59 = v37 + 5;
      if (v59 > v36)
      {
        v9 = (FILE *)*MEMORY[0x1E0C80C10];
        v10 = 7842;
        goto LABEL_3;
      }
      *v45 = *(_DWORD *)(v40 + v38);
      *((_QWORD *)v17 + 6) = v59;
      v47 = (_QWORD *)a6[1];
      v48 = a6[2];
      if ((unint64_t)v47 >= v48)
      {
LABEL_26:
        v49 = ((uint64_t)v47 - *a6) >> 3;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v51 = v48 - *a6;
        if (v51 >> 2 > v50)
          v50 = v51 >> 2;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        if (v50)
        {
          v52 = v14;
          v53 = 8 * v50;
          result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a6[3] + 16))(a6[3], 8 * v50, 8);
          v54 = (_QWORD *)(result + 8 * v49);
          v50 = result + v53;
          if (result)
            *v54 = *(_QWORD *)v45;
          v14 = v52;
          v55 = *a6;
          v56 = a6[1];
          v57 = result + 8 * v49;
          v58 = v56 - *a6;
          if (v56 == *a6)
          {
LABEL_51:
            v70 = v54 + 1;
            *a6 = v57;
            a6[1] = (uint64_t)(v54 + 1);
            v71 = a6[2];
            a6[2] = v50;
            if (v55)
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6[3] + 40))(a6[3], v55, v71 - v55);
              a6[1] = (uint64_t)v70;
              v60 = *((_QWORD *)v17 + 6);
              v36 = *((_QWORD *)v17 + 7);
              if (*((_DWORD *)v17 + 16) < 0x15u)
                break;
            }
            else
            {
              a6[1] = (uint64_t)v70;
              v60 = *((_QWORD *)v17 + 6);
              v36 = *((_QWORD *)v17 + 7);
              if (*((_DWORD *)v17 + 16) < 0x15u)
                break;
            }
            goto LABEL_53;
          }
        }
        else
        {
          v54 = (_QWORD *)(8 * v49);
          v55 = *a6;
          v56 = a6[1];
          v57 = 8 * v49;
          v58 = v56 - *a6;
          if (v56 == *a6)
            goto LABEL_51;
        }
        v61 = v58 - 8;
        if (v61 < 0x38)
        {
          v57 = (uint64_t)v54;
        }
        else
        {
          v57 = (uint64_t)v54;
          if ((unint64_t)(v56 - (_QWORD)v54) >= 0x20)
          {
            v62 = (v61 >> 3) + 1;
            v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = v56 - v63;
            v57 = (uint64_t)&v54[v63 / 0xFFFFFFFFFFFFFFF8];
            v65 = v54 - 2;
            v66 = (__int128 *)(v56 - 16);
            v67 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v68 = *v66;
              *(v65 - 1) = *(v66 - 1);
              *v65 = v68;
              v65 -= 2;
              v66 -= 2;
              v67 -= 4;
            }
            while (v67);
            v56 = v64;
            if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_51;
          }
        }
        do
        {
          v69 = *(_QWORD *)(v56 - 8);
          v56 -= 8;
          *(_QWORD *)(v57 - 8) = v69;
          v57 -= 8;
        }
        while (v56 != v55);
        goto LABEL_51;
      }
    }
    else
    {
      v46 = v37 + 9;
      if (v46 > v36)
      {
        v9 = (FILE *)*MEMORY[0x1E0C80C10];
        v10 = 7840;
        goto LABEL_3;
      }
      *(_QWORD *)v45 = *(_QWORD *)(v40 + v38);
      *((_QWORD *)v17 + 6) = v46;
      v47 = (_QWORD *)a6[1];
      v48 = a6[2];
      if ((unint64_t)v47 >= v48)
        goto LABEL_26;
    }
    if (v47)
      *v47 = *(_QWORD *)v45;
    a6[1] = (uint64_t)(v47 + 1);
    v60 = *((_QWORD *)v17 + 6);
    v36 = *((_QWORD *)v17 + 7);
    if (*((_DWORD *)v17 + 16) < 0x15u)
      break;
LABEL_53:
    v42 = v60 + 8;
    if (v60 + 8 > v36)
    {
      v9 = (FILE *)*MEMORY[0x1E0C80C10];
      v10 = 7847;
      goto LABEL_3;
    }
    v40 = *((_QWORD *)v17 + 5);
    *(_QWORD *)(v39 + 48 * v35 + 32) = *(_QWORD *)(v40 + v60);
    *((_QWORD *)v17 + 6) = v42;
    v44 = (_QWORD *)(v39 + 48 * v35 + 16);
    if ((v41 & 2) != 0)
      goto LABEL_55;
LABEL_154:
    *v44 = 0;
    v72 = (_BYTE *)(v39 + 48 * v35 + 44);
    if ((v41 & 0x10) != 0)
      goto LABEL_57;
LABEL_155:
    *v72 = 0;
    v73 = v39 + 48 * v35;
    v74 = (_WORD *)(v73 + 42);
    if ((v41 & 4) != 0)
      goto LABEL_59;
LABEL_156:
    *v74 = 1;
    v180 = (_QWORD *)v73;
    v181 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
    v182 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v181 + 24))(v181, 1, 48);
    *v180 = v182;
    *v182 = 1065353216;
    v182[5] = 1065353216;
    v182[10] = 1065353216;
LABEL_157:
    ++v35;
    result = 1;
    a4 = v194;
    if (v35 >= (unsigned __int16)*v14)
      return result;
  }
  v42 = v60 + 2;
  if (v60 + 2 > v36)
  {
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    v10 = 7849;
    goto LABEL_3;
  }
  v40 = *((_QWORD *)v17 + 5);
  v179 = v39 + 48 * v35;
  *(_WORD *)(v179 + 40) = *(_WORD *)(v40 + v60);
  *((_QWORD *)v17 + 6) = v42;
  *(_QWORD *)(v179 + 32) = 0;
  v44 = (_QWORD *)(v179 + 16);
  if ((v41 & 2) == 0)
    goto LABEL_154;
LABEL_55:
  if (v42 + 8 > v36)
  {
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    v10 = 7860;
    goto LABEL_3;
  }
  *v44 = *(_QWORD *)(v40 + v42);
  *((_QWORD *)v17 + 6) = v42 + 8;
  v42 += 8;
  v72 = (_BYTE *)(v39 + 48 * v35 + 44);
  if ((v41 & 0x10) == 0)
    goto LABEL_155;
LABEL_57:
  if (v42 + 1 > v36)
  {
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    v10 = 7866;
    goto LABEL_3;
  }
  *v72 = *(_BYTE *)(v40 + v42);
  v42 = *((_QWORD *)v17 + 6) + 1;
  *((_QWORD *)v17 + 6) = v42;
  v73 = v39 + 48 * v35;
  v74 = (_WORD *)(v73 + 42);
  if ((v41 & 4) == 0)
    goto LABEL_156;
LABEL_59:
  if ((unint64_t)(v42 + 2) > *((_QWORD *)v17 + 7))
  {
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    v10 = 7873;
    goto LABEL_3;
  }
  v75 = v14;
  v76 = v12;
  *v74 = *(_WORD *)(*((_QWORD *)v17 + 5) + v42);
  *((_QWORD *)v17 + 6) = v42 + 2;
  v77 = (geo::codec::Allocator **)v73;
  v78 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
  v79 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v78 + 24))(v78, (unsigned __int16)*v74, 48);
  v196 = v77;
  *v77 = v79;
  v80 = geo::codec::Allocator::instance(v79);
  v81 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v80 + 24))(v80, (unsigned __int16)*v74, 1);
  v82 = v39 + 48 * v35;
  *(_QWORD *)(v82 + 8) = v81;
  v195 = (_QWORD *)(v82 + 8);
  if ((v41 & 8) != 0)
  {
    LODWORD(v87) = (unsigned __int16)*v74;
    v12 = v76;
    v14 = v75;
    v88 = v197;
    goto LABEL_65;
  }
  v83 = v197[1];
  if (!*(_QWORD *)&v83)
    goto LABEL_181;
  v12 = v76;
  v14 = v75;
  v84 = (uint8x8_t)vcnt_s8(v83);
  v84.i16[0] = vaddlv_u8(v84);
  if (v84.u32[0] > 1uLL)
  {
    v85 = v35;
    v86 = v197;
    if (*(_QWORD *)&v83 <= v35)
      v85 = v35 % *(_QWORD *)&v83;
  }
  else
  {
    v85 = (*(_QWORD *)&v83 + 0xFFFFLL) & v35;
    v86 = v197;
  }
  v173 = *v86;
  v174 = *(uint64_t ***)(*(_QWORD *)&v173 + 8 * v85);
  if (!v174 || (v175 = *v174) == 0)
  {
LABEL_181:
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    v10 = 7879;
    goto LABEL_3;
  }
  v176 = *(_QWORD *)&v83 - 1;
  if (v84.u32[0] < 2uLL)
  {
    while (1)
    {
      v177 = v175[1];
      if (v177 == v35)
      {
        if (*((_DWORD *)v175 + 4) == (_DWORD)v35)
          goto LABEL_159;
      }
      else if ((v177 & v176) != v85)
      {
        goto LABEL_181;
      }
      v175 = (uint64_t *)*v175;
      if (!v175)
        goto LABEL_181;
    }
  }
  while (2)
  {
    v178 = v175[1];
    if (v178 != v35)
    {
      if (v178 >= *(_QWORD *)&v83)
        v178 %= *(_QWORD *)&v83;
      if (v178 != v85)
        goto LABEL_181;
      goto LABEL_145;
    }
    if (*((_DWORD *)v175 + 4) != (_DWORD)v35)
    {
LABEL_145:
      v175 = (uint64_t *)*v175;
      if (!v175)
        goto LABEL_181;
      continue;
    }
    break;
  }
LABEL_159:
  if (v84.u32[0] > 1uLL)
  {
    v183 = v35;
    v88 = v197;
    if (*(_QWORD *)&v83 <= v35)
      v183 = v35 % *(_QWORD *)&v83;
  }
  else
  {
    v183 = (*(_QWORD *)&v83 + 0xFFFFLL) & v35;
    v88 = v197;
  }
  v184 = *(uint64_t ***)(*(_QWORD *)&v173 + 8 * v183);
  if (!v184 || (v185 = *v184) == 0)
LABEL_202:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v87 = (unsigned __int16)*v74;
  if (v84.u32[0] < 2uLL)
  {
    while (1)
    {
      v186 = v185[1];
      if (v186 == v35)
      {
        if (*((_DWORD *)v185 + 4) == (_DWORD)v35)
          goto LABEL_171;
      }
      else if ((v186 & v176) != v183)
      {
        goto LABEL_202;
      }
      v185 = (uint64_t *)*v185;
      if (!v185)
        goto LABEL_202;
    }
  }
  while (2)
  {
    v187 = v185[1];
    if (v187 != v35)
    {
      if (v187 >= *(_QWORD *)&v83)
        v187 %= *(_QWORD *)&v83;
      if (v187 != v183)
        goto LABEL_202;
      goto LABEL_174;
    }
    if (*((_DWORD *)v185 + 4) != (_DWORD)v35)
    {
LABEL_174:
      v185 = (uint64_t *)*v185;
      if (!v185)
        goto LABEL_202;
      continue;
    }
    break;
  }
LABEL_171:
  if (0xCCCCCCCCCCCCCCCDLL * ((v185[4] - v185[3]) >> 3) != v87)
  {
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    v10 = 7880;
    goto LABEL_3;
  }
LABEL_65:
  if (!(_DWORD)v87)
    goto LABEL_132;
  v89 = 0;
LABEL_67:
  if ((v41 & 8) == 0)
  {
    v90 = v88[1];
    if (!*(_QWORD *)&v90)
      goto LABEL_202;
    v91 = (uint8x8_t)vcnt_s8(v90);
    v91.i16[0] = vaddlv_u8(v91);
    if (v91.u32[0] > 1uLL)
    {
      v92 = v35;
      if (*(_QWORD *)&v90 <= v35)
        v92 = v35 % *(_QWORD *)&v90;
    }
    else
    {
      v92 = (*(_QWORD *)&v90 + 0xFFFFLL) & v35;
    }
    v123 = *(uint64_t ***)(*(_QWORD *)v88 + 8 * v92);
    if (!v123)
      goto LABEL_202;
    v124 = *v123;
    if (!v124)
      goto LABEL_202;
    if (v91.u32[0] < 2uLL)
    {
      v125 = *(_QWORD *)&v90 - 1;
      while (1)
      {
        v127 = v124[1];
        if (v127 == v35)
        {
          if (*((_DWORD *)v124 + 4) == (_DWORD)v35)
            goto LABEL_105;
        }
        else if ((v127 & v125) != v92)
        {
          goto LABEL_202;
        }
        v124 = (uint64_t *)*v124;
        if (!v124)
          goto LABEL_202;
      }
    }
    while (1)
    {
      v126 = v124[1];
      if (v126 == v35)
      {
        if (*((_DWORD *)v124 + 4) == (_DWORD)v35)
        {
LABEL_105:
          v128 = v124[3] + 40 * v89;
          v111 = *(float *)(v128 + 16);
          v113 = *(float *)(v128 + 20);
          v97 = *(_DWORD *)v128;
          v99 = *(_DWORD *)(v128 + 4);
          v101 = *(_DWORD *)(v128 + 8);
          v109 = *(float *)(v128 + 12);
          v115 = *(float *)(v128 + 24);
          v103 = *(_DWORD *)(v128 + 28);
          v105 = *(_DWORD *)(v128 + 32);
          v107 = *(_DWORD *)(v128 + 36);
LABEL_106:
          v129 = v196;
LABEL_107:
          *(_BYTE *)(*v195 + v89) = 0;
          v130 = *v129;
          v131 = (float)(v111 + v111) * v111;
          v132 = (float)(v113 + v113) * v113;
          v133 = (float)(v109 + v109) * v111;
          v134 = (float)(v113 + v113) * v115;
          v135 = v133 - v134;
          v214.f32[0] = 1.0 - (float)(v131 + v132);
          v214.f32[1] = v134 + v133;
          v136 = 1.0 - (float)((float)(v109 + v109) * v109);
          v215 = v135;
          v216 = v136 - v132;
          v137 = v113 * (float)(v109 + v109);
          v138 = v115 * (float)(v111 + v111);
          v139 = v113 * (float)(v111 + v111);
          v140 = v115 * (float)(v109 + v109);
          v219 = v137 + v138;
          v220 = v139 - v140;
          v214.f32[2] = v137 - v138;
          v217 = v139 + v140;
          v221 = v136 - v131;
          v214.i32[3] = 0;
          v218 = 0;
          v141 = (_DWORD *)((char *)v130 + 48 * v89);
          v222 = 0;
          v223 = v97;
          v224 = v99;
          v225 = v101;
          v226 = 1065353216;
          v212 = 0;
          v210 = 0u;
          v211 = 0u;
          v209 = 0u;
          v213 = 1065353216;
          v208 = v103;
          LODWORD(v210) = v105;
          DWORD1(v211) = v107;
          gm::operator*<float,4,4,4>(&v214, (uint64_t)&v208, &v198);
          v142 = v198.i32[1];
          v143 = v202;
          v144 = v203;
          v145 = v199;
          v146 = v200;
          v147 = v198.i32[2];
          v148 = v201;
          v149 = v205;
          v150 = v206;
          v151 = v204;
          v152 = v207;
          *v141 = v198.i32[0];
          v141[1] = v145;
          v141[2] = v143;
          v141[3] = v149;
          v141[4] = v142;
          v141[5] = v146;
          v141[6] = v144;
          v141[7] = v150;
          v141[8] = v147;
          v141[9] = v148;
          v141[10] = v151;
          v141[11] = v152;
          ++v89;
          v88 = v197;
          if (v89 >= (unsigned __int16)*v74)
          {
LABEL_132:
            *v12 += *((_QWORD *)v17 + 6) - v42;
            goto LABEL_157;
          }
          goto LABEL_67;
        }
      }
      else
      {
        if (v126 >= *(_QWORD *)&v90)
          v126 %= *(_QWORD *)&v90;
        if (v126 != v92)
          goto LABEL_202;
      }
      v124 = (uint64_t *)*v124;
      if (!v124)
        goto LABEL_202;
    }
  }
  v93 = *((_QWORD *)v17 + 6);
  v94 = *((_QWORD *)v17 + 7);
  v95 = v93 + 4;
  if (v93 + 4 > v94)
  {
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    v10 = 7890;
  }
  else
  {
    v96 = *((_QWORD *)v17 + 5);
    v97 = *(_DWORD *)(v96 + v93);
    *((_QWORD *)v17 + 6) = v95;
    v98 = v93 + 8;
    if (v93 + 8 > v94)
    {
      v9 = (FILE *)*MEMORY[0x1E0C80C10];
      v10 = 7891;
    }
    else
    {
      v99 = *(_DWORD *)(v96 + v95);
      *((_QWORD *)v17 + 6) = v98;
      v100 = v93 + 12;
      if (v93 + 12 > v94)
      {
        v9 = (FILE *)*MEMORY[0x1E0C80C10];
        v10 = 7892;
      }
      else
      {
        v101 = *(_DWORD *)(v96 + v98);
        *((_QWORD *)v17 + 6) = v100;
        v102 = v93 + 16;
        if (v93 + 16 > v94)
        {
          v9 = (FILE *)*MEMORY[0x1E0C80C10];
          v10 = 7894;
        }
        else
        {
          v103 = *(_DWORD *)(v96 + v100);
          *((_QWORD *)v17 + 6) = v102;
          v104 = v93 + 20;
          if (v93 + 20 > v94)
          {
            v9 = (FILE *)*MEMORY[0x1E0C80C10];
            v10 = 7895;
          }
          else
          {
            v105 = *(_DWORD *)(v96 + v102);
            *((_QWORD *)v17 + 6) = v104;
            v106 = v93 + 24;
            if (v93 + 24 > v94)
            {
              v9 = (FILE *)*MEMORY[0x1E0C80C10];
              v10 = 7896;
            }
            else
            {
              v107 = *(_DWORD *)(v96 + v104);
              *((_QWORD *)v17 + 6) = v106;
              v108 = v93 + 28;
              if (v93 + 28 > v94)
              {
                v9 = (FILE *)*MEMORY[0x1E0C80C10];
                v10 = 7898;
              }
              else
              {
                v109 = *(float *)(v96 + v106);
                *((_QWORD *)v17 + 6) = v108;
                v110 = v93 + 32;
                if (v93 + 32 > v94)
                {
                  v9 = (FILE *)*MEMORY[0x1E0C80C10];
                  v10 = 7899;
                }
                else
                {
                  v111 = *(float *)(v96 + v108);
                  *((_QWORD *)v17 + 6) = v110;
                  v112 = v93 + 36;
                  if (v93 + 36 > v94)
                  {
                    v9 = (FILE *)*MEMORY[0x1E0C80C10];
                    v10 = 7900;
                  }
                  else
                  {
                    v113 = *(float *)(v96 + v110);
                    *((_QWORD *)v17 + 6) = v112;
                    v114 = v93 + 40;
                    if (v93 + 40 > v94)
                    {
                      v9 = (FILE *)*MEMORY[0x1E0C80C10];
                      v10 = 7901;
                    }
                    else
                    {
                      v115 = *(float *)(v96 + v112);
                      *((_QWORD *)v17 + 6) = v114;
                      if (*((_DWORD *)v17 + 16) < 0x14u)
                        goto LABEL_106;
                      v116 = v93 + 42;
                      if (v116 <= v94)
                      {
                        v117 = *(unsigned __int16 *)(v96 + v114);
                        *((_QWORD *)v17 + 6) = v116;
                        if (!v117)
                          goto LABEL_106;
                        v191 = v103;
                        v192 = v97;
                        v190 = v14;
                        v208 = v35;
                        v214.i64[0] = (uint64_t)&v208;
                        v118 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a3, &v208, (uint64_t)&std::piecewise_construct, &v214);
                        v119 = v118;
                        v120 = (_DWORD *)v118[4];
                        v121 = v118[5];
                        if ((unint64_t)v120 < v121)
                        {
                          if (v120)
                            *v120 = v117;
                          v122 = v120 + 1;
LABEL_130:
                          v129 = v196;
                          v103 = v191;
                          v97 = v192;
                          goto LABEL_131;
                        }
                        v189 = v12;
                        v153 = v118[3];
                        v154 = ((uint64_t)v120 - v153) >> 2;
                        v155 = v154 + 1;
                        if ((unint64_t)(v154 + 1) >> 62)
                          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                        v156 = v121 - v153;
                        if (v156 >> 1 > v155)
                          v155 = v156 >> 1;
                        if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL)
                          v155 = 0x3FFFFFFFFFFFFFFFLL;
                        if (v155)
                        {
                          v188 = v74;
                          v157 = 4 * v155;
                          v158 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v118[6] + 16))(v118[6], 4 * v155, 4);
                          v159 = (_DWORD *)(v158 + 4 * v154);
                          v155 = v158 + v157;
                          if (v158)
                            *v159 = v117;
                          v74 = v188;
                          v12 = v189;
                        }
                        else
                        {
                          v159 = (_DWORD *)(4 * v154);
                          v12 = v189;
                        }
                        v160 = v119[3];
                        v161 = v119[4];
                        v162 = v159;
                        if (v161 != v160)
                        {
                          v163 = v161 - v160 - 4;
                          if (v163 < 0x1C)
                          {
                            v162 = v159;
                          }
                          else
                          {
                            v162 = v159;
                            if ((unint64_t)(v161 - (_QWORD)v159) >= 0x20)
                            {
                              v164 = (v163 >> 2) + 1;
                              v165 = 4 * (v164 & 0x7FFFFFFFFFFFFFF8);
                              v166 = v161 - v165;
                              v162 = &v159[v165 / 0xFFFFFFFFFFFFFFFCLL];
                              v167 = v159 - 4;
                              v168 = (__int128 *)(v161 - 16);
                              v169 = v164 & 0x7FFFFFFFFFFFFFF8;
                              do
                              {
                                v170 = *v168;
                                *(v167 - 1) = *(v168 - 1);
                                *v167 = v170;
                                v167 -= 2;
                                v168 -= 2;
                                v169 -= 8;
                              }
                              while (v169);
                              v161 = v166;
                              if (v164 == (v164 & 0x7FFFFFFFFFFFFFF8))
                                goto LABEL_128;
                            }
                          }
                          do
                          {
                            v171 = *(_DWORD *)(v161 - 4);
                            v161 -= 4;
                            *--v162 = v171;
                          }
                          while (v161 != v160);
                        }
LABEL_128:
                        v122 = v159 + 1;
                        v119[3] = v162;
                        v119[4] = v159 + 1;
                        v172 = v119[5];
                        v119[5] = v155;
                        if (!v160)
                          goto LABEL_130;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v119[6] + 40))(v119[6], v160, v172 - v160);
                        v129 = v196;
                        v103 = v191;
                        v97 = v192;
LABEL_131:
                        v119[4] = v122;
                        v14 = v190;
                        goto LABEL_107;
                      }
                      v9 = (FILE *)*MEMORY[0x1E0C80C10];
                      v10 = 7905;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_3:
  fprintf(v9, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v10);
  return 0;
}

float32x4_t gm::operator*<float,4,4,4>@<Q0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t result;

  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 36);
  v6 = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 44);
  v8 = *(_QWORD *)(a2 + 52);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(float *)(a2 + 60);
  v11 = *a1;
  v12 = a1[1];
  v13 = a1[2];
  v14 = a1[3];
  v15 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)(a2 + 16))), v12, COERCE_FLOAT(*(_OWORD *)(a2 + 20))), v13, COERCE_FLOAT(*(_OWORD *)(a2 + 24))), v14, COERCE_FLOAT(*(_OWORD *)(a2 + 28)));
  *a3 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2)), v12, COERCE_FLOAT(*(_OWORD *)(a2 + 4))), v13, COERCE_FLOAT(*(_OWORD *)(a2 + 8))), v14, COERCE_FLOAT(*(_OWORD *)(a2 + 12)));
  a3[1] = v15;
  result = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v11, *(float *)&v3), v12, *(float *)&v5), v13, *(float *)&v6), v14, *(float *)&v7);
  a3[2] = result;
  a3[3] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v11, *(float *)&v4), v12, *(float *)&v8), v13, *(float *)&v9), v14, v10);
  return result;
}

uint64_t addr_obj::VenueFieldProto::default_instance_(addr_obj::VenueFieldProto *this)
{
  unsigned __int8 v1;
  addr_obj::VenueFieldProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF504D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF504D8))
  {
    v3 = (addr_obj::VenueFieldProto *)operator new();
    addr_obj::VenueFieldProto::VenueFieldProto(v3);
    qword_1EDF504D0 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF504D8);
  }
  return qword_1EDF504D0;
}

void sub_1886D73A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40380937A6);
  __cxa_guard_abort(&qword_1EDF504D8);
  _Unwind_Resume(a1);
}

addr_obj::VenueFieldProto *addr_obj::VenueFieldProto::VenueFieldProto(addr_obj::VenueFieldProto *this)
{
  *(_QWORD *)this = &off_1E1BF9648;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_1886D7410(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;

  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void geo::codec::initWithVMP4AndLocData(const char *a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const std::string *a6@<X6>, geo::codec::VectorTile **a7@<X8>)
{
  FILE *v9;
  geo::codec::Allocator *v15;
  uint64_t v16;
  uint64_t v17;
  geo::codec::Allocator *v18;
  geo::codec::Allocator *v19;
  geo::codec::Allocator *v20;
  geo::codec::Allocator *v21;
  geo::codec::Allocator *v22;
  geo::codec::Allocator *v23;
  geo::codec::Allocator *v24;
  geo::codec::Allocator *v25;
  geo::codec::Allocator *v26;
  geo::codec::Allocator *v27;
  geo::codec::Allocator *v28;
  geo::codec::Allocator *v29;
  geo::codec::Allocator *v30;
  geo::codec::Allocator *v31;
  geo::codec::Allocator *v32;
  geo::codec::Allocator *v33;
  geo::codec::Allocator *v34;
  geo::codec::Allocator *v35;
  geo::codec::Allocator *v36;
  geo::codec::Allocator *v37;
  geo::codec::Allocator *v38;
  geo::codec::Allocator *v39;
  geo::codec::Allocator *v40;
  geo::codec::Allocator *v41;
  geo::codec::Allocator *v42;
  geo::codec::Allocator *v43;
  geo::codec::Allocator *v44;
  geo::codec::Allocator *v45;
  geo::codec::Allocator *v46;
  geo::codec::Allocator *v47;
  geo::codec::Allocator *v48;
  geo::codec::Allocator *v49;
  geo::codec::Allocator *v50;
  geo::codec::Allocator *v51;
  geo::codec::Allocator *v52;
  geo::codec::Allocator *v53;
  geo::codec::Allocator *v54;
  geo::codec::Allocator *v55;
  geo::codec::Allocator *v56;
  geo::codec::Allocator *v57;
  geo::codec::Allocator *v58;
  geo::codec::Allocator *v59;
  geo::codec::Allocator *v60;
  geo::codec::Allocator *v61;
  geo::codec::Allocator *v62;
  geo::codec::Allocator *v63;
  geo::codec::Allocator *v64;
  geo::codec::Allocator *v65;
  geo::codec::Allocator *v66;
  geo::codec::Allocator *v67;
  geo::codec::Allocator *v68;
  geo::codec::Allocator *v69;
  geo::codec::Allocator *v70;
  geo::codec::Allocator *v71;
  geo::codec::Allocator *v72;
  geo::codec::Allocator *v73;
  geo::codec::Allocator *v74;
  geo::codec::Allocator *v75;
  geo::codec::Allocator *v76;
  geo::codec::Allocator *v77;
  geo::codec::Allocator *v78;
  geo::codec::Allocator *v79;
  geo::codec::Allocator *v80;
  std::chrono::steady_clock::time_point v81;
  int v82;
  uint64_t v83;
  uint64_t *v84;
  int64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t *v99;
  int64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  _OWORD *v103;
  unint64_t v104;
  __int128 v105;
  char v106;
  uint64_t *v107;
  unint64_t v108;
  _OWORD *v109;
  __int128 *v110;
  unint64_t v111;
  __int128 v112;
  char v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t *v118;
  geo::codec::VectorTile *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::chrono::steady_clock::time_point v126;
  uint64_t VarUint32;
  unint64_t v128;
  unint64_t v129;
  BOOL v130;
  unint64_t v131;
  int v132;
  int v133;
  FILE *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v139;
  unint64_t *p_shared_owners;
  unint64_t v141;
  double v142;
  double v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  int v148;
  int v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int v158;
  unint64_t v159;
  unsigned int v160;
  unint64_t v161;
  uint64_t v162;
  std::chrono::steady_clock::time_point v163;
  __int128 v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t *v168;
  std::string *__str;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  geo::codec::VectorTile *v171[2];
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  const char *v180;
  geo::codec::VectorTile *v181;
  geo::codec::VectorTile *v182;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v183;
  const char *v184;

  if (a4 + a2 > a6[1].__r_.__value_.__r.__words[0])
  {
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    if (a5)
      fprintf(v9, "%s:%d VMP4 Parse: The VectorTile (%d, %d, %d) is too big too parse.\n");
    else
      fprintf(v9, "%s:%d VMP4 Parse: The VectorTile has no GeoCodecsTileKey\n");
    goto LABEL_8;
  }
  if (a2 < 4 || (v15 = (geo::codec::Allocator *)strncmp(a1, "VMP4", 4uLL), (_DWORD)v15))
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Trying to initialize VectorTile (%d, %d, %d) with non-VMP4 data.\n");
LABEL_8:
    *a7 = 0;
    a7[1] = 0;
    return;
  }
  __str = (std::string *)a6;
  v16 = geo::codec::Allocator::instance(v15);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, 3840, 8);
  *(_QWORD *)v17 = &off_1E1BFB528;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = v16;
  bzero((void *)(v17 + 32), 0xEE0uLL);
  *(_DWORD *)(v17 + 32) = -1;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_QWORD *)(v17 + 80) = 0;
  v19 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v18);
  *(_QWORD *)(v17 + 88) = v19;
  *(_QWORD *)(v17 + 96) = 0;
  *(_QWORD *)(v17 + 104) = 0;
  *(_QWORD *)(v17 + 112) = 0;
  v20 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v19);
  *(_QWORD *)(v17 + 120) = v20;
  *(_QWORD *)(v17 + 128) = 0;
  *(_QWORD *)(v17 + 136) = 0;
  *(_QWORD *)(v17 + 144) = 0;
  v21 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v20);
  *(_QWORD *)(v17 + 152) = v21;
  *(_OWORD *)(v17 + 160) = 0u;
  *(_OWORD *)(v17 + 176) = 0u;
  *(_OWORD *)(v17 + 192) = 0u;
  v22 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v21);
  *(_QWORD *)(v17 + 208) = v22;
  *(_QWORD *)(v17 + 216) = 0;
  *(_QWORD *)(v17 + 224) = 0;
  *(_QWORD *)(v17 + 232) = 0;
  v23 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v22);
  *(_QWORD *)(v17 + 240) = v23;
  *(_QWORD *)(v17 + 248) = 0;
  *(_QWORD *)(v17 + 256) = 0;
  *(_QWORD *)(v17 + 264) = 0;
  v24 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v23);
  *(_QWORD *)(v17 + 272) = v24;
  *(_QWORD *)(v17 + 328) = 0;
  *(_OWORD *)(v17 + 280) = 0u;
  *(_OWORD *)(v17 + 296) = 0u;
  *(_OWORD *)(v17 + 312) = 0u;
  v25 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v24);
  *(_QWORD *)(v17 + 336) = v25;
  *(_QWORD *)(v17 + 344) = 0;
  *(_QWORD *)(v17 + 352) = 0;
  *(_QWORD *)(v17 + 360) = 0;
  v26 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v25);
  *(_QWORD *)(v17 + 368) = v26;
  *(_QWORD *)(v17 + 376) = 0;
  *(_QWORD *)(v17 + 384) = 0;
  *(_QWORD *)(v17 + 392) = 0;
  v27 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v26);
  *(_QWORD *)(v17 + 400) = v27;
  *(_QWORD *)(v17 + 408) = 0;
  *(_QWORD *)(v17 + 416) = 0;
  *(_QWORD *)(v17 + 424) = 0;
  v28 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v27);
  *(_QWORD *)(v17 + 432) = v28;
  *(_QWORD *)(v17 + 440) = 0;
  *(_QWORD *)(v17 + 448) = 0;
  *(_QWORD *)(v17 + 456) = 0;
  v29 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v28);
  *(_QWORD *)(v17 + 464) = v29;
  *(_QWORD *)(v17 + 472) = 0;
  *(_QWORD *)(v17 + 480) = 0;
  *(_QWORD *)(v17 + 488) = 0;
  v30 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v29);
  *(_QWORD *)(v17 + 496) = v30;
  *(_QWORD *)(v17 + 504) = 0;
  *(_QWORD *)(v17 + 520) = 0;
  *(_QWORD *)(v17 + 512) = 0;
  v31 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v30);
  *(_QWORD *)(v17 + 528) = v31;
  *(_QWORD *)(v17 + 536) = 0;
  *(_QWORD *)(v17 + 552) = 0;
  *(_QWORD *)(v17 + 544) = 0;
  v32 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v31);
  *(_QWORD *)(v17 + 560) = v32;
  *(_QWORD *)(v17 + 568) = 0;
  *(_QWORD *)(v17 + 584) = 0;
  *(_QWORD *)(v17 + 576) = 0;
  v33 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v32);
  *(_QWORD *)(v17 + 592) = v33;
  *(_QWORD *)(v17 + 600) = 0;
  *(_QWORD *)(v17 + 616) = 0;
  *(_QWORD *)(v17 + 608) = 0;
  v34 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v33);
  *(_QWORD *)(v17 + 624) = v34;
  *(_QWORD *)(v17 + 632) = 0;
  *(_DWORD *)(v17 + 640) = 0;
  *(_OWORD *)(v17 + 648) = 0u;
  *(_OWORD *)(v17 + 664) = 0u;
  *(_DWORD *)(v17 + 680) = 1065353216;
  *(_OWORD *)(v17 + 688) = 0u;
  *(_DWORD *)(v17 + 704) = 0;
  *(_QWORD *)(v17 + 712) = 0;
  *(_QWORD *)(v17 + 728) = 0;
  *(_QWORD *)(v17 + 720) = 0;
  *(_QWORD *)(v17 + 904) = 0;
  *(_OWORD *)(v17 + 744) = 0u;
  *(_OWORD *)(v17 + 760) = 0u;
  *(_OWORD *)(v17 + 776) = 0u;
  *(_OWORD *)(v17 + 792) = 0u;
  *(_OWORD *)(v17 + 808) = 0u;
  *(_OWORD *)(v17 + 824) = 0u;
  *(_OWORD *)(v17 + 840) = 0u;
  *(_OWORD *)(v17 + 856) = 0u;
  *(_OWORD *)(v17 + 872) = 0u;
  *(_OWORD *)(v17 + 888) = 0u;
  v35 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v34);
  *(_QWORD *)(v17 + 912) = v35;
  *(_QWORD *)(v17 + 952) = 0;
  *(_OWORD *)(v17 + 920) = 0u;
  *(_OWORD *)(v17 + 936) = 0u;
  v36 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v35);
  *(_QWORD *)(v17 + 960) = v36;
  *(_QWORD *)(v17 + 968) = 0;
  *(_QWORD *)(v17 + 984) = 0;
  *(_QWORD *)(v17 + 976) = 0;
  v37 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v36);
  *(_QWORD *)(v17 + 992) = v37;
  *(_QWORD *)(v17 + 1064) = 0;
  *(_OWORD *)(v17 + 1000) = 0u;
  *(_OWORD *)(v17 + 1016) = 0u;
  *(_OWORD *)(v17 + 1032) = 0u;
  *(_OWORD *)(v17 + 1048) = 0u;
  v38 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v37);
  *(_QWORD *)(v17 + 1072) = v38;
  *(_QWORD *)(v17 + 1128) = 0;
  *(_OWORD *)(v17 + 1080) = 0u;
  *(_OWORD *)(v17 + 1096) = 0u;
  *(_OWORD *)(v17 + 1112) = 0u;
  v39 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v38);
  *(_QWORD *)(v17 + 1136) = v39;
  *(_QWORD *)(v17 + 1152) = 0;
  *(_QWORD *)(v17 + 1168) = 0;
  *(_QWORD *)(v17 + 1160) = 0;
  *(_QWORD *)(v17 + 1144) = v17 + 1152;
  *(_QWORD *)(v17 + 1184) = 0;
  *(_QWORD *)(v17 + 1176) = 0;
  v40 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v39);
  *(_QWORD *)(v17 + 1192) = v40;
  *(_QWORD *)(v17 + 1200) = 0;
  *(_QWORD *)(v17 + 1216) = 0;
  *(_QWORD *)(v17 + 1208) = 0;
  v41 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v40);
  *(_QWORD *)(v17 + 1224) = v41;
  *(_OWORD *)(v17 + 1232) = 0u;
  *(_OWORD *)(v17 + 1248) = 0u;
  *(_OWORD *)(v17 + 1264) = 0u;
  *(_OWORD *)(v17 + 1280) = 0u;
  *(_OWORD *)(v17 + 1296) = 0u;
  *(_OWORD *)(v17 + 1312) = 0u;
  *(_QWORD *)(v17 + 1328) = 0;
  v42 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v41);
  *(_QWORD *)(v17 + 1336) = v42;
  *(_QWORD *)(v17 + 1344) = 0;
  *(_QWORD *)(v17 + 1360) = 0;
  *(_QWORD *)(v17 + 1352) = 0;
  v43 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v42);
  *(_QWORD *)(v17 + 1368) = v43;
  *(_QWORD *)(v17 + 1376) = 0;
  *(_QWORD *)(v17 + 1392) = 0;
  *(_QWORD *)(v17 + 1384) = 0;
  v44 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v43);
  *(_QWORD *)(v17 + 1400) = v44;
  *(_OWORD *)(v17 + 1408) = 0u;
  *(_OWORD *)(v17 + 1424) = 0u;
  *(_OWORD *)(v17 + 1440) = 0u;
  *(_QWORD *)(v17 + 1456) = 0;
  v45 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v44);
  *(_QWORD *)(v17 + 1464) = v45;
  *(_OWORD *)(v17 + 1472) = 0u;
  *(_OWORD *)(v17 + 1488) = 0u;
  *(_OWORD *)(v17 + 1504) = 0u;
  v46 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v45);
  *(_QWORD *)(v17 + 1520) = v46;
  *(_QWORD *)(v17 + 1608) = 0;
  *(_OWORD *)(v17 + 1528) = 0u;
  *(_OWORD *)(v17 + 1544) = 0u;
  *(_OWORD *)(v17 + 1560) = 0u;
  *(_OWORD *)(v17 + 1576) = 0u;
  *(_OWORD *)(v17 + 1592) = 0u;
  v47 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v46);
  *(_QWORD *)(v17 + 1616) = v47;
  *(_QWORD *)(v17 + 1752) = 0;
  *(_QWORD *)(v17 + 1768) = 0;
  *(_QWORD *)(v17 + 1760) = 0;
  *(_OWORD *)(v17 + 1624) = 0u;
  *(_OWORD *)(v17 + 1640) = 0u;
  *(_OWORD *)(v17 + 1656) = 0u;
  *(_OWORD *)(v17 + 1672) = 0u;
  *(_OWORD *)(v17 + 1688) = 0u;
  *(_OWORD *)(v17 + 1704) = 0u;
  *(_OWORD *)(v17 + 1720) = 0u;
  *(_OWORD *)(v17 + 1729) = 0u;
  v48 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v47);
  *(_QWORD *)(v17 + 1776) = v48;
  *(_QWORD *)(v17 + 1856) = 0;
  *(_DWORD *)(v17 + 1864) = 0;
  *(_QWORD *)(v17 + 1872) = 0;
  *(_DWORD *)(v17 + 1880) = 0;
  *(_QWORD *)(v17 + 1888) = 0;
  *(_DWORD *)(v17 + 1896) = 0;
  *(_QWORD *)(v17 + 1904) = 0;
  *(_DWORD *)(v17 + 1912) = 0;
  *(_DWORD *)(v17 + 1848) = 0;
  *(_OWORD *)(v17 + 1784) = 0u;
  *(_OWORD *)(v17 + 1800) = 0u;
  *(_OWORD *)(v17 + 1816) = 0u;
  *(_OWORD *)(v17 + 1832) = 0u;
  *(_OWORD *)(v17 + 1920) = 0u;
  *(_OWORD *)(v17 + 1936) = 0u;
  *(_OWORD *)(v17 + 1952) = 0u;
  *(_QWORD *)(v17 + 1968) = 0;
  *(_DWORD *)(v17 + 1976) = 1065353216;
  *(_DWORD *)(v17 + 1984) = 0;
  *(_BYTE *)(v17 + 1988) = 0;
  *(_DWORD *)(v17 + 1992) = 0;
  *(_QWORD *)(v17 + 2016) = 0;
  *(_OWORD *)(v17 + 2000) = 0u;
  v49 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v48);
  *(_QWORD *)(v17 + 2024) = v49;
  *(_WORD *)(v17 + 2032) = 0;
  *(_QWORD *)(v17 + 2040) = 0;
  *(_WORD *)(v17 + 2048) = 0;
  *(_QWORD *)(v17 + 2056) = 0;
  *(_DWORD *)(v17 + 2064) = 0;
  *(_QWORD *)(v17 + 2072) = 0;
  *(_WORD *)(v17 + 2080) = 0;
  *(_QWORD *)(v17 + 2120) = 0;
  *(_OWORD *)(v17 + 2088) = 0u;
  *(_OWORD *)(v17 + 2104) = 0u;
  v50 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v49);
  *(_QWORD *)(v17 + 2128) = v50;
  *(_QWORD *)(v17 + 2136) = 0;
  *(_QWORD *)(v17 + 2152) = 0;
  *(_QWORD *)(v17 + 2144) = 0;
  v51 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v50);
  *(_QWORD *)(v17 + 2160) = v51;
  *(_WORD *)(v17 + 2168) = 0;
  *(_QWORD *)(v17 + 2176) = 0;
  *(_WORD *)(v17 + 2184) = 0;
  *(_QWORD *)(v17 + 2192) = 0;
  *(_WORD *)(v17 + 2200) = 0;
  *(_QWORD *)(v17 + 2208) = 0;
  *(_WORD *)(v17 + 2216) = 0;
  *(_OWORD *)(v17 + 2224) = 0u;
  *(_OWORD *)(v17 + 2240) = 0u;
  v52 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v51);
  *(_QWORD *)(v17 + 2256) = v52;
  *(_OWORD *)(v17 + 2264) = 0u;
  *(_OWORD *)(v17 + 2280) = 0u;
  *(_OWORD *)(v17 + 2296) = 0u;
  v53 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v52);
  *(_QWORD *)(v17 + 2312) = v53;
  *(_WORD *)(v17 + 2320) = 0;
  *(_QWORD *)(v17 + 2328) = 0;
  *(_WORD *)(v17 + 2336) = 0;
  *(_OWORD *)(v17 + 2344) = 0u;
  *(_OWORD *)(v17 + 2360) = 0u;
  v54 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v53);
  *(_QWORD *)(v17 + 2376) = v54;
  *(_QWORD *)(v17 + 2384) = 0;
  *(_QWORD *)(v17 + 2400) = 0;
  *(_QWORD *)(v17 + 2392) = 0;
  v55 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v54);
  *(_QWORD *)(v17 + 2408) = v55;
  *(_OWORD *)(v17 + 2416) = 0u;
  *(_OWORD *)(v17 + 2432) = 0u;
  *(_DWORD *)(v17 + 2448) = 1065353216;
  *(_QWORD *)(v17 + 2456) = 0;
  *(_QWORD *)(v17 + 2472) = 0;
  *(_QWORD *)(v17 + 2464) = 0;
  v56 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v55);
  *(_QWORD *)(v17 + 2480) = v56;
  *(_QWORD *)(v17 + 2488) = 0;
  *(_QWORD *)(v17 + 2504) = 0;
  *(_QWORD *)(v17 + 2496) = 0;
  *(_OWORD *)(v17 + 2512) = xmmword_189CC14F0;
  *(_BYTE *)(v17 + 2528) = 0;
  *(_QWORD *)(v17 + 2536) = 0;
  *(_QWORD *)(v17 + 2552) = 0;
  *(_QWORD *)(v17 + 2544) = 0;
  v57 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v56);
  *(_QWORD *)(v17 + 2560) = v57;
  *(_QWORD *)(v17 + 2568) = 0;
  *(_QWORD *)(v17 + 2584) = 0;
  *(_QWORD *)(v17 + 2576) = 0;
  v58 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v57);
  *(_QWORD *)(v17 + 2592) = v58;
  *(_QWORD *)(v17 + 2600) = 0;
  *(_QWORD *)(v17 + 2616) = 0;
  *(_QWORD *)(v17 + 2608) = 0;
  v59 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v58);
  *(_QWORD *)(v17 + 2624) = v59;
  *(_QWORD *)(v17 + 2632) = 0;
  *(_QWORD *)(v17 + 2648) = 0;
  *(_QWORD *)(v17 + 2640) = 0;
  v60 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v59);
  *(_QWORD *)(v17 + 2656) = v60;
  *(_QWORD *)(v17 + 2664) = 0;
  *(_QWORD *)(v17 + 2680) = 0;
  *(_QWORD *)(v17 + 2672) = 0;
  v61 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v60);
  *(_QWORD *)(v17 + 2688) = v61;
  *(_QWORD *)(v17 + 2696) = 0;
  *(_QWORD *)(v17 + 2712) = 0;
  *(_QWORD *)(v17 + 2704) = 0;
  v62 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v61);
  *(_QWORD *)(v17 + 2720) = v62;
  *(_QWORD *)(v17 + 2728) = 0;
  *(_QWORD *)(v17 + 2744) = 0;
  *(_QWORD *)(v17 + 2736) = 0;
  v63 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v62);
  *(_QWORD *)(v17 + 2752) = v63;
  *(_QWORD *)(v17 + 2760) = 850045863;
  *(_QWORD *)(v17 + 2880) = 0;
  *(_WORD *)(v17 + 2888) = 0;
  *(_OWORD *)(v17 + 2768) = 0u;
  *(_OWORD *)(v17 + 2784) = 0u;
  *(_OWORD *)(v17 + 2800) = 0u;
  *(_OWORD *)(v17 + 2816) = 0u;
  *(_WORD *)(v17 + 2832) = 0;
  *(_WORD *)(v17 + 2872) = 0;
  *(_OWORD *)(v17 + 2840) = 0u;
  *(_OWORD *)(v17 + 2856) = 0u;
  *(_QWORD *)(v17 + 2892) = 0;
  *(_QWORD *)(v17 + 2898) = 0;
  *(_DWORD *)(v17 + 2972) = 0;
  *(_OWORD *)(v17 + 2908) = 0u;
  *(_OWORD *)(v17 + 2924) = 0u;
  *(_OWORD *)(v17 + 2940) = 0u;
  *(_OWORD *)(v17 + 2956) = 0u;
  v64 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v63);
  *(_QWORD *)(v17 + 2976) = v64;
  *(_QWORD *)(v17 + 2984) = 0;
  *(_QWORD *)(v17 + 3000) = 0;
  *(_QWORD *)(v17 + 2992) = 0;
  v65 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v64);
  *(_QWORD *)(v17 + 3008) = v65;
  *(_QWORD *)(v17 + 3016) = 0;
  *(_DWORD *)(v17 + 3024) = 0;
  *(_DWORD *)(v17 + 3032) = 0;
  *(_BYTE *)(v17 + 3036) = 0;
  *(_BYTE *)(v17 + 3048) = 6;
  *(_QWORD *)(v17 + 3056) = 0;
  *(_QWORD *)(v17 + 3072) = 0;
  *(_QWORD *)(v17 + 3064) = 0;
  v66 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v65);
  *(_QWORD *)(v17 + 3080) = v66;
  *(_QWORD *)(v17 + 3088) = 0;
  *(_DWORD *)(v17 + 3096) = 0;
  *(_QWORD *)(v17 + 3104) = 0;
  *(_QWORD *)(v17 + 3120) = 0;
  *(_QWORD *)(v17 + 3112) = 0;
  v67 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v66);
  *(_QWORD *)(v17 + 3128) = v67;
  *(_QWORD *)(v17 + 3136) = 0;
  *(_QWORD *)(v17 + 3152) = 0;
  *(_QWORD *)(v17 + 3144) = 0;
  v68 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v67);
  *(_QWORD *)(v17 + 3160) = v68;
  *(_QWORD *)(v17 + 3168) = 0;
  *(_QWORD *)(v17 + 3184) = 0;
  *(_QWORD *)(v17 + 3176) = 0;
  v69 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v68);
  *(_QWORD *)(v17 + 3192) = v69;
  *(_QWORD *)(v17 + 3200) = 0;
  *(_DWORD *)(v17 + 3208) = 0;
  *(_QWORD *)(v17 + 3216) = 0;
  *(_QWORD *)(v17 + 3232) = 0;
  *(_QWORD *)(v17 + 3224) = 0;
  v70 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v69);
  *(_QWORD *)(v17 + 3240) = v70;
  *(_QWORD *)(v17 + 3248) = 0;
  *(_QWORD *)(v17 + 3264) = 0;
  *(_QWORD *)(v17 + 3256) = 0;
  v71 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v70);
  *(_QWORD *)(v17 + 3272) = v71;
  *(_QWORD *)(v17 + 3280) = 0;
  *(_QWORD *)(v17 + 3296) = 0;
  *(_QWORD *)(v17 + 3288) = 0;
  v72 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v71);
  *(_QWORD *)(v17 + 3304) = v72;
  *(_QWORD *)(v17 + 3312) = 0;
  *(_DWORD *)(v17 + 3320) = 0;
  *(_QWORD *)(v17 + 3328) = 0;
  *(_QWORD *)(v17 + 3344) = 0;
  *(_QWORD *)(v17 + 3336) = 0;
  v73 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v72);
  *(_QWORD *)(v17 + 3352) = v73;
  *(_QWORD *)(v17 + 3360) = 0;
  *(_QWORD *)(v17 + 3376) = 0;
  *(_QWORD *)(v17 + 3368) = 0;
  v74 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v73);
  *(_QWORD *)(v17 + 3384) = v74;
  *(_QWORD *)(v17 + 3392) = 0;
  *(_QWORD *)(v17 + 3408) = 0;
  *(_QWORD *)(v17 + 3400) = 0;
  v75 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v74);
  *(_QWORD *)(v17 + 3416) = v75;
  *(_QWORD *)(v17 + 3424) = 0;
  *(_DWORD *)(v17 + 3432) = 0;
  *(_QWORD *)(v17 + 3440) = 0;
  *(_QWORD *)(v17 + 3456) = 0;
  *(_QWORD *)(v17 + 3448) = 0;
  v76 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v75);
  *(_QWORD *)(v17 + 3464) = v76;
  *(_QWORD *)(v17 + 3472) = 0;
  *(_QWORD *)(v17 + 3488) = 0;
  *(_QWORD *)(v17 + 3480) = 0;
  v77 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v76);
  *(_QWORD *)(v17 + 3496) = v77;
  *(_QWORD *)(v17 + 3504) = 0;
  *(_BYTE *)(v17 + 3512) = 0;
  *(_QWORD *)(v17 + 3520) = 0;
  *(_QWORD *)(v17 + 3536) = 0;
  *(_QWORD *)(v17 + 3528) = 0;
  v78 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v77);
  *(_QWORD *)(v17 + 3544) = v78;
  *(_OWORD *)(v17 + 3552) = 0u;
  *(_OWORD *)(v17 + 3568) = 0u;
  v79 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v78);
  *(_QWORD *)(v17 + 3584) = v79;
  *(_DWORD *)(v17 + 3592) = 0;
  *(_OWORD *)(v17 + 3600) = 0u;
  *(_OWORD *)(v17 + 3616) = 0u;
  *(_OWORD *)(v17 + 3632) = 0u;
  *(_OWORD *)(v17 + 3648) = 0u;
  *(_OWORD *)(v17 + 3664) = 0u;
  *(_OWORD *)(v17 + 3680) = 0u;
  *(_OWORD *)(v17 + 3696) = 0u;
  *(_OWORD *)(v17 + 3712) = 0u;
  *(_OWORD *)(v17 + 3728) = 0u;
  *(_OWORD *)(v17 + 3744) = 0u;
  *(_DWORD *)(v17 + 3760) = 1065353216;
  *(_QWORD *)(v17 + 3776) = 0;
  *(_QWORD *)(v17 + 3792) = 0;
  *(_QWORD *)(v17 + 3784) = 0;
  v80 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v79);
  *(_QWORD *)(v17 + 3800) = v80;
  *(_QWORD *)(v17 + 3808) = 0;
  *(_QWORD *)(v17 + 3824) = 0;
  *(_QWORD *)(v17 + 3816) = 0;
  *(_QWORD *)(v17 + 3832) = geo::codec::Allocator::instance(v80);
  v171[0] = (geo::codec::VectorTile *)(v17 + 32);
  v171[1] = (geo::codec::VectorTile *)v17;
  v81.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v81.__d_.__rep_;
  v82 = *(_DWORD *)(a5 + 7);
  *(_QWORD *)(v17 + 36) = *(_QWORD *)a5;
  *(_DWORD *)(v17 + 43) = v82;
  if (!a4)
  {
    std::string::operator=((std::string *)(v17 + 1000), a6);
    std::string::operator=((std::string *)((char *)v171[0] + 992), a6);
    goto LABEL_55;
  }
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v83 = geo::codec::Allocator::instance((geo::codec::Allocator *)v81.__d_.__rep_);
  v178 = v83;
  if (a4 >= 1)
  {
    v84 = v176;
    if (v177 - (uint64_t)v176 < a4)
    {
      v85 = (char *)v176 - (char *)v175;
      v86 = (char *)v176 - (char *)v175 + a4;
      if (v86 < 0)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v168 = v175;
      v87 = v177 - (_QWORD)v175;
      if (2 * (v177 - (uint64_t)v175) > (unint64_t)v86)
        v86 = 2 * v87;
      if (v87 >= 0x3FFFFFFFFFFFFFFFLL)
        v88 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v88 = v86;
      if (v88)
      {
        v89 = v88;
        v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v83 + 16))(v83, v88, 1);
      }
      else
      {
        v89 = 0;
        v90 = 0;
      }
      v95 = (uint64_t *)(v90 + v85);
      v96 = (uint64_t *)(v90 + v85 + a4);
      v97 = a4;
      v98 = (_BYTE *)(v90 + v85);
      do
      {
        if (v98)
          *v98 = *a3;
        ++v98;
        ++a3;
        --v97;
      }
      while (v97);
      v99 = v175;
      if (v175 == v84)
        goto LABEL_40;
      v100 = (char *)v84 - (char *)v175;
      if ((unint64_t)((char *)v84 - (char *)v175) >= 0x20)
      {
        v101 = v84;
        if ((unint64_t)v168 - v90 >= 0x20)
        {
          v101 = (uint64_t *)((char *)v84 - (v100 & 0xFFFFFFFFFFFFFFE0));
          v95 = (uint64_t *)((char *)v95 - (v100 & 0xFFFFFFFFFFFFFFE0));
          v102 = v84 - 2;
          v103 = (_OWORD *)(v90 + (char *)(v84 - 2) - (char *)v168);
          v104 = v100 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v105 = *(_OWORD *)v102;
            *(v103 - 1) = *((_OWORD *)v102 - 1);
            *v103 = v105;
            v103 -= 2;
            v102 -= 4;
            v104 -= 32;
          }
          while (v104);
          if (v100 == (v100 & 0xFFFFFFFFFFFFFFE0))
            goto LABEL_40;
        }
      }
      else
      {
        v101 = v84;
      }
      do
      {
        v106 = *((_BYTE *)v101 - 1);
        v101 = (uint64_t *)((char *)v101 - 1);
        *((_BYTE *)v95 - 1) = v106;
        v95 = (uint64_t *)((char *)v95 - 1);
      }
      while (v101 != v99);
LABEL_40:
      v107 = v176;
      v108 = (char *)v176 - (char *)v84;
      if (v176 != v84)
      {
        if (v108 < 0x20)
          goto LABEL_238;
        if ((unint64_t)(v90 + a4 - (_QWORD)v168) < 0x20)
          goto LABEL_238;
        v96 = (uint64_t *)((char *)v96 + (v108 & 0xFFFFFFFFFFFFFFE0));
        v109 = (_OWORD *)((char *)v84 + a4 - (char *)v168 + v90 + 16);
        v110 = (__int128 *)(v84 + 2);
        v111 = v108 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v112 = *v110;
          *(v109 - 1) = *(v110 - 1);
          *v109 = v112;
          v109 += 2;
          v110 += 2;
          v111 -= 32;
        }
        while (v111);
        v84 = (uint64_t *)((char *)v84 + (v108 & 0xFFFFFFFFFFFFFFE0));
        if (v108 != (v108 & 0xFFFFFFFFFFFFFFE0))
        {
LABEL_238:
          do
          {
            v113 = *(_BYTE *)v84;
            v84 = (uint64_t *)((char *)v84 + 1);
            *(_BYTE *)v96 = v113;
            v96 = (uint64_t *)((char *)v96 + 1);
          }
          while (v84 != v107);
        }
      }
      v114 = v175;
      v115 = v177;
      v175 = v95;
      v176 = v96;
      v177 = v90 + v89;
      if (v114)
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v178 + 40))(v178, v114, v115 - (_QWORD)v114);
      goto LABEL_49;
    }
    v91 = v176;
    v92 = a4;
    v93 = a3;
    v94 = v176;
    do
    {
      if (v94)
        *(_BYTE *)v94 = *v93;
      ++v93;
      v94 = (uint64_t *)((char *)v94 + 1);
      v91 = (uint64_t *)((char *)v91 + 1);
      --v92;
    }
    while (v92);
    v176 = v94;
  }
LABEL_49:
  v116 = geo::codec::decodeLocalizations();
  if ((v116 & 1) == 0)
  {
    v116 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 253);
    v117 = 12;
    v118 = v175;
    if (!v175)
      goto LABEL_54;
    goto LABEL_53;
  }
  v117 = 0;
  v118 = v175;
  if (v175)
  {
LABEL_53:
    v176 = v118;
    v116 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v178 + 40))(v178, v118, v177 - (_QWORD)v118);
  }
LABEL_54:
  if (v117)
    goto LABEL_224;
LABEL_55:
  if ((geo::codec::initTile((uint64_t *)&v172, (uint64_t)a1, a2) & 1) != 0)
  {
    v119 = v171[0];
    *((_QWORD *)v171[0] + 237) = a2;
    if (*((_QWORD *)&v172 + 1))
    {
      v120 = 0;
      v121 = 0;
      while (*(_WORD *)(v172 + 16 * v120) != 1)
      {
        v120 = ++v121;
        if (*((_QWORD *)&v172 + 1) <= (unint64_t)v121)
          goto LABEL_60;
      }
      v122 = geo::codec::chapterAt((uint64_t)&v172, v121, 1, (uint64_t)v119 + 1912);
      v119 = v171[0];
    }
    else
    {
LABEL_60:
      v122 = 0;
    }
    v180 = "ChapterGlobal";
    v181 = v119;
    v123 = (std::__shared_weak_count *)v171[1];
    v182 = v171[1];
    if (v171[1])
    {
      v124 = (unint64_t *)((char *)v171[1] + 8);
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
    v126.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v183 = v126.__d_.__rep_;
    if (!v122)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 406);
      v133 = 0;
      goto LABEL_78;
    }
    VarUint32 = geo::codec::chapterReadVarUint32((_QWORD *)v122, (unsigned int *)(v122 + 64));
    if ((VarUint32 & 1) == 0)
    {
      v134 = (FILE *)*MEMORY[0x1E0C80C10];
      v132 = 408;
      goto LABEL_75;
    }
    DWORD1(v173) = *(_DWORD *)(v122 + 64);
    v129 = *(_QWORD *)(v122 + 48);
    v128 = *(_QWORD *)(v122 + 56);
    v130 = v128 >= v129;
    v131 = v128 - v129;
    if (!v130)
    {
      v132 = 411;
LABEL_74:
      v134 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_75;
    }
    v135 = *(_QWORD *)(v122 + 40) + v129;
    *(_QWORD *)(v122 + 8) = v135;
    *(_BYTE *)(v122 + 32) = 1;
    *(_QWORD *)(v122 + 16) = v131;
    *(_QWORD *)(v122 + 24) = 0;
    v136 = 8 * v131;
    if (v136 < 0x1A)
    {
      v132 = 414;
      goto LABEL_74;
    }
    v150 = 0;
    v151 = 26;
    do
    {
      v152 = 8 - (v150 & 7);
      if (v151 < v152)
        v152 = v151;
      v150 += v152;
      v151 -= v152;
    }
    while (v151);
    *(_QWORD *)(v122 + 24) = v150;
    if (v150 + 26 > v136)
    {
      v134 = (FILE *)*MEMORY[0x1E0C80C10];
      v132 = 415;
      goto LABEL_75;
    }
    v153 = 26;
    do
    {
      v154 = 8 - (v150 & 7);
      if (v153 < v154)
        v154 = v153;
      v150 += v154;
      v153 -= v154;
    }
    while (v153);
    *(_QWORD *)(v122 + 24) = v150;
    if (v150 + 8 > v136)
    {
      v134 = (FILE *)*MEMORY[0x1E0C80C10];
      v132 = 416;
      goto LABEL_75;
    }
    v155 = 8;
    do
    {
      v156 = 8 - (v150 & 7);
      if (v155 < v156)
        v156 = v155;
      v150 += v156;
      v155 -= v156;
    }
    while (v155);
    *(_QWORD *)(v122 + 24) = v150;
    v157 = v150 + 1;
    if (v150 + 1 > v136)
    {
      v134 = (FILE *)*MEMORY[0x1E0C80C10];
      v132 = 420;
      goto LABEL_75;
    }
    v158 = *(unsigned __int8 *)(v135 + (v150 >> 3));
    *(_QWORD *)(v122 + 24) = v157;
    if (((v158 >> (~(_BYTE)v150 & 7)) & 1) != 0)
    {
      LODWORD(v175) = 0;
      if (!BitstreamUnpack((uint64_t *)(v122 + 8), (int *)&v175, 5uLL))
      {
        v134 = (FILE *)*MEMORY[0x1E0C80C10];
        v132 = 423;
        goto LABEL_75;
      }
      VarUint32 = BitstreamUnpack((uint64_t *)(v122 + 8), (int *)&v184, ((_DWORD)v175 + 1));
      if ((VarUint32 & 1) == 0)
      {
        v134 = (FILE *)*MEMORY[0x1E0C80C10];
        v132 = 426;
        goto LABEL_75;
      }
      v157 = *(_QWORD *)(v122 + 24) + 1;
      v136 = 8 * *(_QWORD *)(v122 + 16);
      if (v157 > v136)
      {
        v134 = (FILE *)*MEMORY[0x1E0C80C10];
        v132 = 428;
        goto LABEL_75;
      }
      *(_QWORD *)(v122 + 24) = v157;
    }
    v159 = v157 + 1;
    if (v157 + 1 <= v136)
    {
      v160 = *(unsigned __int8 *)(*(_QWORD *)(v122 + 8) + (v157 >> 3));
      *(_QWORD *)(v122 + 24) = v159;
      if (((v160 >> (~(_BYTE)v157 & 7)) & 1) != 0)
      {
        v175 = 0;
        v176 = 0;
        v178 = 0;
        v179 = 0;
        if (!geo::codec::decodeAttributeSet<GeoCodecsFeature>(-1, (uint64_t *)(v122 + 8), 1u, (uint64_t)v171[0] + 1112, (uint64_t)&v175, 0))
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 435);
          GeoCodecsFeature::~GeoCodecsFeature((GeoCodecsFeature *)&v175);
          v133 = 0;
          if (!*(_BYTE *)v122)
            goto LABEL_77;
          goto LABEL_76;
        }
        std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((_QWORD *)v171[0] + 2, v178, v179);
        GeoCodecsFeature::~GeoCodecsFeature((GeoCodecsFeature *)&v175);
        v159 = *(_QWORD *)(v122 + 24);
      }
      v161 = *(_QWORD *)(v122 + 48) + (v159 >> 3);
      if ((v159 & 7) != 0)
        ++v161;
      *(_QWORD *)(v122 + 48) = v161;
      *(_BYTE *)(v122 + 32) = 0;
      v133 = 1;
      if (!*(_BYTE *)v122)
        goto LABEL_77;
LABEL_76:
      v137 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
      VarUint32 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v137 + 40))(v137, *(_QWORD *)(v122 + 40), 0);
      goto LABEL_77;
    }
    v134 = (FILE *)*MEMORY[0x1E0C80C10];
    v132 = 432;
LABEL_75:
    VarUint32 = fprintf(v134, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v132);
    v133 = 0;
    if (!*(_BYTE *)v122)
    {
LABEL_77:
      v138 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v138 + 40))(v138, v122, 0);
LABEL_78:
      v139 = std::chrono::steady_clock::now().__d_.__rep_;
      v184 = "ChapterGlobal";
      v175 = (uint64_t *)&v184;
      *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>((uint64_t)v119 + 1912, (uint64_t *)&v184, (uint64_t)&std::piecewise_construct, &v175)+ 4) = (double)((v139 - v126.__d_.__rep_) / 1000) * 0.001;
      if (v123)
      {
        p_shared_owners = (unint64_t *)&v123->__shared_owners_;
        do
          v141 = __ldaxr(p_shared_owners);
        while (__stlxr(v141 - 1, p_shared_owners));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      if (v133)
      {
        if (geo::codec::_readLabels(&v172, v171))
        {
          if (geo::codec::_readPois(&v172, (uint64_t)__str, (uint64_t *)v171))
          {
            if (geo::codec::_readPoisAddendum(&v172, (uint64_t *)v171))
            {
              if (geo::codec::_readLines(&v172, (uint64_t *)v171))
              {
                if (geo::codec::_readPolygons((uint64_t *)&v172, (uint64_t *)v171))
                {
                  if (geo::codec::_readVenues(&v172, (_QWORD *)a5, v171))
                  {
                    if (geo::codec::_readCoastlines((uint64_t)&v172, v171))
                    {
                      if (geo::codec::_readChapter3DBuildings(&v172, 39, (uint64_t *)v171[0] + 55, (uint64_t *)v171))
                      {
                        if (geo::codec::_readChapter3DBuildings(&v172, 140, (uint64_t *)v171[0] + 59, (uint64_t *)v171))
                        {
                          if (geo::codec::_readModernBuildings(&v172, 139, (GeoCodecsVertexPool *)((char *)v171[0] + 824), (unint64_t *)v171[0] + 47, v171))
                          {
                            if (geo::codec::_readModernBuildings(&v172, 96, (GeoCodecsVertexPool *)((char *)v171[0] + 832), (unint64_t *)v171[0] + 51, v171))
                            {
                              if (geo::codec::_readTileReferences(&v172, a5, v171))
                              {
                                if (geo::codec::_readLinesExtendedChapter(&v172, (uint64_t *)v171))
                                {
                                  if (geo::codec::_readTransitNetwork(&v172, (_QWORD *)a5, (uint64_t *)v171))
                                  {
                                    if (geo::codec::_readTransitSystems((geo::codec::Allocator *)&v172, (uint64_t *)v171))
                                    {
                                      if (geo::codec::_populateTransitNodeStyleAttributes((uint64_t *)v171))
                                      {
                                        if (geo::codec::_readTransitMZROverride(&v172, v171))
                                        {
                                          if (geo::codec::_readVenueMZROverride(&v172, (uint64_t *)v171))
                                          {
                                            if (geo::codec::_readPOIMzrOverrides(&v172, v171))
                                            {
                                              if (geo::codec::_readCoverage(&v172, v171))
                                              {
                                                if (geo::codec::_readLabelPlacementMetadata(&v172, v171))
                                                {
                                                  if (geo::codec::_readRoadNetwork(&v172, (_QWORD *)a5, (GeoCodecsVertexPool **)v171))
                                                  {
                                                    if (geo::codec::_readStorefronts(&v172, v171))
                                                    {
                                                      if (geo::codec::_readElevationRaster(&v172, v171))
                                                      {
                                                        if (geo::codec::_readDTMRaster(&v172, v171))
                                                        {
                                                          if (geo::codec::_readMaterialRasters(&v172, (uint64_t *)v171))
                                                          {
                                                            if (geo::codec::_readStyleAttributeRasters((geo::codec::Allocator *)&v172, (uint64_t *)v171, *((_WORD *)v171[0] + 1428) != 0))
                                                            {
                                                              if (geo::codec::_readDebugBlob(&v172, (uint64_t *)v171))
                                                              {
                                                                if (geo::codec::_readDaVinciBuildings(&v172, v171))
                                                                {
                                                                  if (geo::codec::_readDaVinciLandmarks(&v172, (uint64_t *)v171))
                                                                  {
                                                                    if (geo::codec::_readDaVinciMetadata(&v172, v171))
                                                                    {
                                                                      if (geo::codec::_readDaVinciTrafficSkeleton(&v172, (unint64_t *)a5, v171))
                                                                      {
                                                                        if (geo::codec::_readDaVinciTrafficSkeletonOld(&v172, (unint64_t *)a5, v171))
                                                                        {
                                                                          if (geo::codec::_readLineAttributes(&v172, v171))
                                                                          {
                                                                            if (geo::codec::_readLineAttributesOld(&v172, (uint64_t *)a5, v171))
                                                                            {
                                                                              if (geo::codec::_readAnnotationLabels(&v172, (uint64_t *)v171))
                                                                              {
                                                                                if (geo::codec::_readDaVinciAssetMetadata(&v172, v171))
                                                                                {
                                                                                  if (geo::codec::_readRunningTracks(&v172, v171))
                                                                                  {
                                                                                    if (geo::codec::_readHillShadeRaster(&v172, (uint64_t *)v171))
                                                                                    {
                                                                                      if (geo::codec::_readContourLines((geo::codec::Allocator *)&v172, (uint64_t *)v171, 0, 0))
                                                                                      {
                                                                                        if (geo::codec::_readContourLines((geo::codec::Allocator *)&v172, (uint64_t *)v171, 1, 0))
                                                                                        {
                                                                                          if (geo::codec::_readContourLines((geo::codec::Allocator *)&v172, (uint64_t *)v171, 0, 1))
                                                                                          {
                                                                                            if (geo::codec::_readContourLines((geo::codec::Allocator *)&v172, (uint64_t *)v171, 1, 1))
                                                                                            {
                                                                                              if (geo::codec::_readLiveFeatures(&v172, v171))
                                                                                              {
                                                                                                if (geo::codec::_readLiveFeaturesMetadatas(&v172, v171))
                                                                                                {
                                                                                                  if (geo::codec::_readRegionMetadata(&v172, (uint64_t)v171))
                                                                                                  {
                                                                                                    if (geo::codec::_readCompressedPolygons(&v172, (uint64_t)v171))
                                                                                                    {
                                                                                                      if (geo::codec::_readSupplementalFeatureIDs(&v172, (uint64_t *)v171))
                                                                                                      {
                                                                                                        if (geo::codec::_readPOIUpdates(&v172, (uint64_t *)v171))
                                                                                                        {
                                                                                                          if (__str[1].__r_.__value_.__s.__data_[8])
                                                                                                            v148 = geo::codec::_postDecoding((geo::codec::Allocator *)v171);
                                                                                                          else
                                                                                                            v148 = 1;
                                                                                                          v116 = (uint64_t)geo::codec::VectorTile::buildingTileIntersectionInfo((void **)v171[0], v142, v143, v144, v145, v146, v147);
                                                                                                          goto LABEL_225;
                                                                                                        }
                                                                                                        v149 = 327;
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        v149 = 326;
                                                                                                      }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      v149 = 325;
                                                                                                    }
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    v149 = 324;
                                                                                                  }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  v149 = 322;
                                                                                                }
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                v149 = 321;
                                                                                              }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              v149 = 318;
                                                                                            }
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v149 = 317;
                                                                                          }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v149 = 314;
                                                                                        }
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v149 = 313;
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      v149 = 312;
                                                                                    }
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v149 = 309;
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  v149 = 307;
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                v149 = 306;
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              v149 = 305;
                                                                            }
                                                                          }
                                                                          else
                                                                          {
                                                                            v149 = 304;
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          v149 = 303;
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        v149 = 302;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      v149 = 301;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    v149 = 300;
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  v149 = 299;
                                                                }
                                                              }
                                                              else
                                                              {
                                                                v149 = 298;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              v149 = 297;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            v149 = 296;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          v149 = 295;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        v149 = 294;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      v149 = 292;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    v149 = 290;
                                                  }
                                                }
                                                else
                                                {
                                                  v149 = 289;
                                                }
                                              }
                                              else
                                              {
                                                v149 = 288;
                                              }
                                            }
                                            else
                                            {
                                              v149 = 287;
                                            }
                                          }
                                          else
                                          {
                                            v149 = 286;
                                          }
                                        }
                                        else
                                        {
                                          v149 = 285;
                                        }
                                      }
                                      else
                                      {
                                        v149 = 284;
                                      }
                                    }
                                    else
                                    {
                                      v149 = 282;
                                    }
                                  }
                                  else
                                  {
                                    v149 = 281;
                                  }
                                }
                                else
                                {
                                  v149 = 279;
                                }
                              }
                              else
                              {
                                v149 = 278;
                              }
                            }
                            else
                            {
                              v149 = 277;
                            }
                          }
                          else
                          {
                            v149 = 276;
                          }
                        }
                        else
                        {
                          v149 = 275;
                        }
                      }
                      else
                      {
                        v149 = 274;
                      }
                    }
                    else
                    {
                      v149 = 273;
                    }
                  }
                  else
                  {
                    v149 = 272;
                  }
                }
                else
                {
                  v149 = 271;
                }
              }
              else
              {
                v149 = 270;
              }
            }
            else
            {
              v149 = 269;
            }
          }
          else
          {
            v149 = 268;
          }
        }
        else
        {
          v149 = 267;
        }
      }
      else
      {
        v149 = 266;
      }
      v116 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v149);
LABEL_224:
      v148 = 0;
LABEL_225:
      if ((_QWORD)v172)
      {
        v162 = geo::codec::Allocator::instance((geo::codec::Allocator *)v116);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v162 + 40))(v162, v172, 0);
      }
      v173 = 0u;
      v174 = 0u;
      v172 = 0u;
      if (v148)
      {
        v163.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v164 = *(_OWORD *)v171;
        *((double *)v171[0] + 238) = (double)((v163.__d_.__rep_ - rep) / 1000) * 0.001;
        *(_OWORD *)a7 = v164;
        a7 = v171;
      }
      goto LABEL_229;
    }
    goto LABEL_76;
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Could not read header\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 260);
LABEL_229:
  *a7 = 0;
  a7[1] = 0;
  v165 = (std::__shared_weak_count *)v171[1];
  if (v171[1])
  {
    v166 = (unint64_t *)((char *)v171[1] + 8);
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
}

void sub_1886D8B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  GeoCodecsFeature::~GeoCodecsFeature((GeoCodecsFeature *)&a26);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v26 - 136));
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1886D8B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::~vector[abi:ne180100](&a26);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1886D8BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v9 - 136));
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1886D8CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readChapter3DBuildings(_QWORD *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  const char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::chrono::steady_clock::time_point v17;
  uint64_t VarUint32;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  geo::codec::Allocator *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35;
  uint64_t v36;
  std::chrono::steady_clock::time_point v37;
  FILE *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  char *v63;
  _OWORD *v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char **v90;
  char *v91;
  char *v92;
  char **v93;
  BOOL v94;
  unint64_t v95;
  size_t v96;
  uint64_t v97;
  unint64_t v98;
  size_t v99;
  size_t v100;
  int v101;
  std::__shared_weak_count *v102;
  uint64_t *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v119;
  unsigned int v120;
  uint64_t *v121;
  std::__shared_weak_count *v122;
  const char *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v127;

  v8 = *a4;
  v9 = a1[1];
  if (v9)
  {
    v10 = 0;
    v11 = 0;
    while (*(unsigned __int16 *)(*a1 + 16 * v10) != a2)
    {
      v10 = ++v11;
      if (v9 <= v11)
        goto LABEL_5;
    }
    v12 = (_QWORD *)geo::codec::chapterAt((uint64_t)a1, v11, a2, v8 + 1912);
    v8 = *a4;
  }
  else
  {
LABEL_5:
    v12 = 0;
  }
  v13 = chapterTypeAsString(a2);
  v123 = v13;
  v124 = v8;
  v14 = (std::__shared_weak_count *)a4[1];
  v125 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v17.__d_.__rep_;
  if (!v12)
  {
    v35 = v17.__d_.__rep_;
    v36 = 1;
    v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v127 = (uint64_t)v13;
    if (!v13)
      goto LABEL_128;
    goto LABEL_127;
  }
  v121 = 0;
  v122 = 0;
  LODWORD(v127) = 0;
  VarUint32 = geo::codec::chapterReadVarUint32(v12, (unsigned int *)&v127);
  if ((VarUint32 & 1) == 0)
  {
    v38 = (FILE *)*MEMORY[0x1E0C80C10];
    v39 = 4345;
    goto LABEL_118;
  }
  v19 = v127;
  if (v127 >= 0x10000)
  {
    v38 = (FILE *)*MEMORY[0x1E0C80C10];
    v39 = 4347;
    goto LABEL_118;
  }
  v20 = *a3;
  v21 = a3[1];
  v22 = 0x6DB6DB6DB6DB6DB7 * ((v21 - *a3) >> 4);
  v23 = v127 - v22;
  if (v127 <= v22)
  {
    if (v127 >= v22)
      goto LABEL_66;
    v40 = v20 + 112 * v127;
    if (v21 != v40)
    {
      do
      {
        v41 = *(_QWORD *)(v21 - 32);
        if (v41)
        {
          *(_QWORD *)(v21 - 24) = v41;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v21 - 8) + 40))(*(_QWORD *)(v21 - 8), v41, *(_QWORD *)(v21 - 16) - v41);
        }
        v42 = *(std::__shared_weak_count **)(v21 - 80);
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v45 = *(std::__shared_weak_count **)(v21 - 104);
        if (v45)
          std::__shared_weak_count::__release_weak(v45);
        v21 -= 112;
      }
      while (v21 != v40);
      v21 = v40;
    }
    goto LABEL_62;
  }
  v24 = a3[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v24 - v21) >> 4) >= v23)
  {
    v46 = v21 + 112 * v23;
    v47 = 112 * v127 - 16 * ((v21 - *a3) >> 4);
    do
    {
      if (v21)
      {
        *(_OWORD *)(v21 + 80) = 0u;
        *(_OWORD *)(v21 + 96) = 0u;
        *(_OWORD *)(v21 + 48) = 0u;
        *(_OWORD *)(v21 + 64) = 0u;
        *(_OWORD *)(v21 + 16) = 0u;
        *(_OWORD *)(v21 + 32) = 0u;
        *(_OWORD *)v21 = 0u;
        VarUint32 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
        *(_QWORD *)(v21 + 104) = VarUint32;
      }
      v21 += 112;
      v47 -= 112;
    }
    while (v47);
    v21 = v46;
LABEL_62:
    a3[1] = v21;
    goto LABEL_66;
  }
  v25 = 0x6DB6DB6DB6DB6DB7 * ((v24 - v20) >> 4);
  v26 = 2 * v25;
  if (2 * v25 <= v127)
    v26 = v127;
  if (v25 >= 0x124924924924924)
    v27 = 0x249249249249249;
  else
    v27 = v26;
  v28 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3[3] + 16))(a3[3], 112 * v27, 8);
  v29 = 112 * v22;
  v30 = (char *)v28 + 112 * v22;
  v31 = (char *)v28 + 112 * v27;
  v32 = (char *)v28 + 112 * v19;
  v33 = 112 * v19 - v29;
  v34 = v30;
  do
  {
    if (v34)
    {
      *((_OWORD *)v34 + 5) = 0u;
      *((_OWORD *)v34 + 6) = 0u;
      *((_OWORD *)v34 + 3) = 0u;
      *((_OWORD *)v34 + 4) = 0u;
      *((_OWORD *)v34 + 1) = 0u;
      *((_OWORD *)v34 + 2) = 0u;
      *(_OWORD *)v34 = 0u;
      v28 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v28);
      *((_QWORD *)v34 + 13) = v28;
    }
    v34 += 112;
    v33 -= 112;
  }
  while (v33);
  v48 = *a3;
  v49 = a3[1];
  if (v49 == *a3)
  {
    *a3 = (uint64_t)v30;
    a3[1] = (uint64_t)v32;
    v57 = a3[2];
    a3[2] = (uint64_t)v31;
  }
  else
  {
    v50 = 0;
    do
    {
      v51 = v49 + v50;
      v52 = &v30[v50];
      *((_OWORD *)v52 - 7) = *(_OWORD *)(v49 + v50 - 112);
      *(_QWORD *)(v51 - 112) = 0;
      *(_QWORD *)(v51 - 104) = 0;
      *((_OWORD *)v52 - 6) = *(_OWORD *)(v49 + v50 - 96);
      *((_QWORD *)v52 - 10) = *(_QWORD *)(v49 + v50 - 80);
      v53 = *(_OWORD *)(v49 + v50 - 72);
      v54 = *(_OWORD *)(v49 + v50 - 56);
      v55 = *(_DWORD *)(v49 + v50 - 40);
      *(_QWORD *)(v51 - 88) = 0;
      *(_QWORD *)(v51 - 80) = 0;
      *((_DWORD *)v52 - 10) = v55;
      *(_OWORD *)(v52 - 56) = v54;
      *((_QWORD *)v52 - 3) = 0;
      *((_QWORD *)v52 - 2) = 0;
      *((_QWORD *)v52 - 4) = 0;
      *(_OWORD *)(v52 - 72) = v53;
      *((_QWORD *)v52 - 1) = *(_QWORD *)(v49 + v50 - 8);
      *((_OWORD *)v52 - 2) = *(_OWORD *)(v49 + v50 - 32);
      *((_QWORD *)v52 - 2) = *(_QWORD *)(v49 + v50 - 16);
      *(_QWORD *)(v51 - 32) = 0;
      *(_QWORD *)(v51 - 24) = 0;
      *(_QWORD *)(v51 - 16) = 0;
      v50 -= 112;
    }
    while (v49 + v50 != v48);
    v49 = *a3;
    v56 = a3[1];
    *a3 = (uint64_t)&v30[v50];
    a3[1] = (uint64_t)v32;
    v57 = a3[2];
    a3[2] = (uint64_t)v31;
    while (v56 != v49)
    {
      v58 = *(_QWORD *)(v56 - 32);
      if (v58)
      {
        *(_QWORD *)(v56 - 24) = v58;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v56 - 8) + 40))(*(_QWORD *)(v56 - 8), v58, *(_QWORD *)(v56 - 16) - v58);
      }
      v59 = *(std::__shared_weak_count **)(v56 - 80);
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v62 = *(std::__shared_weak_count **)(v56 - 104);
      if (v62)
        std::__shared_weak_count::__release_weak(v62);
      v56 -= 112;
    }
  }
  if (v49)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3[3] + 40))(a3[3], v49, v57 - v49);
LABEL_66:
  v63 = (char *)operator new(0x40uLL);
  *((_QWORD *)v63 + 1) = 0;
  *((_QWORD *)v63 + 2) = 0;
  *(_QWORD *)v63 = &off_1E1BFB2F8;
  *(_OWORD *)(v63 + 24) = 0u;
  *(_OWORD *)(v63 + 40) = 0u;
  *(_DWORD *)(v63 + 55) = 0;
  v64 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *((_QWORD *)v63 + 3) = v64;
  if (v64)
  {
    *(_QWORD *)&v65 = -1;
    *((_QWORD *)&v65 + 1) = -1;
    v64[14] = v65;
    v64[15] = v65;
    v64[12] = v65;
    v64[13] = v65;
    v64[10] = v65;
    v64[11] = v65;
    v64[8] = v65;
    v64[9] = v65;
    v64[6] = v65;
    v64[7] = v65;
    v64[4] = v65;
    v64[5] = v65;
    v64[2] = v65;
    v64[3] = v65;
    *v64 = v65;
    v64[1] = v65;
  }
  *(_QWORD *)v64 = 0x400000005;
  *(_WORD *)(v63 + 57) = 1025;
  v66 = v122;
  v121 = (uint64_t *)(v63 + 24);
  v122 = (std::__shared_weak_count *)v63;
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (uint64_t)FeatureStyleAttributesSet::insert(*a4 + 1112, (uint64_t *)&v121);
  v71 = *(uint64_t **)v69;
  v70 = *(std::__shared_weak_count **)(v69 + 8);
  if (v70)
  {
    v72 = (unint64_t *)&v70->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = v122;
  v121 = v71;
  v122 = v70;
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if ((_DWORD)v127)
  {
    v77 = 0;
    while (1)
    {
      v78 = *a3;
      v80 = *a4;
      v79 = a4[1];
      if (v79)
      {
        v81 = (unint64_t *)(v79 + 16);
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      v83 = (_QWORD *)(v78 + 112 * v77);
      v84 = (std::__shared_weak_count *)v83[1];
      *v83 = v80;
      v83[1] = v79;
      if (v84)
        std::__shared_weak_count::__release_weak(v84);
      v120 = 0;
      v85 = v12[6];
      if ((unint64_t)(v85 + 8) > v12[7])
      {
        v39 = 4361;
        goto LABEL_117;
      }
      v86 = *(_QWORD *)(v12[5] + v85);
      v12[6] = v85 + 8;
      if (!geo::codec::chapterReadVarUint32(v12, &v120))
      {
        v39 = 4362;
        goto LABEL_117;
      }
      v87 = v120;
      if (v120 >> 18)
      {
        v39 = 4364;
        goto LABEL_117;
      }
      v88 = v78 + 112 * v77;
      v91 = *(char **)(v88 + 80);
      v90 = (char **)(v88 + 80);
      v89 = v91;
      v83[5] = v86;
      v93 = v90 + 1;
      v92 = v90[1];
      v94 = v87 >= v92 - v91;
      v95 = v87 - (v92 - v91);
      if (v87 <= v92 - v91)
      {
        if (!v94)
        {
          v92 = &v89[v87];
          *v93 = &v89[v87];
        }
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::__append((uint64_t)v90, v95);
        v89 = *v90;
        v92 = *v93;
      }
      v96 = v92 - v89;
      v97 = v12[6];
      if (v97 + v96 > v12[7])
      {
        v39 = 4369;
        goto LABEL_117;
      }
      v69 = (uint64_t)memcpy(v89, (const void *)(v12[5] + v97), v96);
      v98 = v12[7];
      v99 = v12[6] + v96;
      v12[6] = v99;
      v100 = v99 + 1;
      if (v99 + 1 > v98)
        break;
      v101 = *(unsigned __int8 *)(v12[5] + v99);
      v12[6] = v100;
      if (v101)
      {
        v69 = geo::codec::accumulateStyleAttributes(*a4 + 1112, (uint64_t *)&v121, v12, (uint64_t)v83);
        if ((v69 & 1) == 0)
        {
          v39 = 4378;
          goto LABEL_117;
        }
      }
      else
      {
        v103 = v121;
        v102 = v122;
        if (v122)
        {
          v104 = (unint64_t *)&v122->__shared_owners_;
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 1, v104));
        }
        v106 = (std::__shared_weak_count *)v83[4];
        v83[3] = v103;
        v83[4] = v102;
        if (v106)
        {
          v107 = (unint64_t *)&v106->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
      }
      ++v77;
      v36 = 1;
      if (v77 >= v127)
        goto LABEL_110;
    }
    v39 = 4372;
LABEL_117:
    v38 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_118:
    v69 = fprintf(v38, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v39);
    v36 = 0;
    if (!a1)
      goto LABEL_122;
    goto LABEL_119;
  }
  v36 = 1;
LABEL_110:
  if (a1)
  {
LABEL_119:
    if (*(_BYTE *)v12)
    {
      v109 = geo::codec::Allocator::instance((geo::codec::Allocator *)v69);
      v69 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v109 + 40))(v109, v12[5], 0);
    }
    v110 = geo::codec::Allocator::instance((geo::codec::Allocator *)v69);
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v110 + 40))(v110, v12, 0);
  }
LABEL_122:
  v111 = v122;
  if (v122)
  {
    v112 = (unint64_t *)&v122->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
      v119 = (uint64_t)v123;
      v8 = v124;
      v35 = rep;
      v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v127 = v119;
      if (!v119)
        goto LABEL_128;
      goto LABEL_127;
    }
  }
  v114 = (uint64_t)v123;
  v8 = v124;
  v35 = rep;
  v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v127 = v114;
  if (v114)
  {
LABEL_127:
    v121 = &v127;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v8 + 1912, &v127, (uint64_t)&std::piecewise_construct, &v121)+ 4) = (double)((v37.__d_.__rep_ - v35) / 1000) * 0.001;
  }
LABEL_128:
  v115 = v125;
  if (v125)
  {
    v116 = (unint64_t *)&v125->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  return v36;
}

void sub_1886D95B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va1);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readModernBuildings(_QWORD *a1, int a2, GeoCodecsVertexPool *a3, unint64_t *a4, _QWORD *a5)
{
  unint64_t v5;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  FILE *v32;
  int v33;
  geo::codec::Allocator *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  const char *v42;
  std::chrono::steady_clock::time_point v43;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  _BYTE *v65;
  size_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  size_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  int i;
  uint64_t v101;
  uint64_t j;
  int v103;
  float v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  unint64_t v108;
  _BYTE *v109;
  unint64_t v110;
  unsigned int v111;
  unint64_t v112;
  unsigned int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  size_t v123;
  int v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  size_t v135;
  int v136;
  uint64_t v137;
  size_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD v142[2];
  __int128 v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  __int128 *v148;
  std::__shared_weak_count *v149;
  const char *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;

  if (!a3)
    return 0;
  v5 = a1[1];
  if (!v5)
    return 1;
  v10 = 0;
  v11 = 0;
  while (*(unsigned __int16 *)(*a1 + 16 * v10) != a2)
  {
    v10 = ++v11;
    if (v5 <= v11)
      return 1;
  }
  v13 = geo::codec::chapterAt((uint64_t)a1, v11, a2, *a5 + 1912);
  if (!v13)
    return 1;
  v14 = v13;
  v15 = chapterTypeAsString(a2);
  v17 = *a5;
  v16 = (std::__shared_weak_count *)a5[1];
  v150 = v15;
  v151 = v17;
  v152 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v148 = 0;
  v149 = 0;
  v21 = *(_QWORD *)(v14 + 48);
  v20 = *(_QWORD *)(v14 + 56);
  v22 = v20 >= v21;
  v23 = v20 - v21;
  if (v22)
  {
    *(_BYTE *)(v14 + 32) = 1;
    v24 = *(_QWORD *)(v14 + 40) + v21;
    *(_QWORD *)(v14 + 16) = v23;
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 8) = v24;
  }
  if ((geo::codec::decodeSectionEncoding((geo::codec::Allocator *)(v14 + 8), a3, 0, 0, 0) & 1) == 0)
  {
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    v33 = 3012;
    goto LABEL_26;
  }
  v25 = *(_QWORD *)(v14 + 24);
  v26 = 8 * *(_QWORD *)(v14 + 16);
  if (v25 + 5 > v26)
    goto LABEL_22;
  v27 = 0;
  v28 = *(_QWORD *)(v14 + 8);
  v29 = 5;
  do
  {
    v30 = 8 - (v25 & 7);
    if (v29 < v30)
      v30 = v29;
    v27 = (*(unsigned __int8 *)(v28 + (v25 >> 3)) >> (8 - (v25 & 7) - v30)) & ~(-1 << v30) | (v27 << v30);
    v25 += v30;
    *(_QWORD *)(v14 + 24) = v25;
    v29 -= v30;
  }
  while (v29);
  v31 = (v27 + 1);
  if (v25 + v31 > v26)
  {
LABEL_22:
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    v33 = 3013;
    goto LABEL_26;
  }
  v48 = 0;
  if (v27 != -1)
  {
    do
    {
      v49 = 8 - (v25 & 7);
      if (v31 < v49)
        v49 = v31;
      v48 = (*(unsigned __int8 *)(v28 + (v25 >> 3)) >> (8 - (v25 & 7) - v49)) & ~(-1 << v49) | (v48 << v49);
      v25 += v49;
      *(_QWORD *)(v14 + 24) = v25;
      v31 -= v49;
    }
    while (v31);
  }
  if (v25 + 5 > v26)
    goto LABEL_50;
  v50 = 0;
  v51 = 5;
  do
  {
    v52 = 8 - (v25 & 7);
    if (v51 < v52)
      v52 = v51;
    v50 = (*(unsigned __int8 *)(v28 + (v25 >> 3)) >> (8 - (v25 & 7) - v52)) & ~(-1 << v52) | (v50 << v52);
    v25 += v52;
    *(_QWORD *)(v14 + 24) = v25;
    v51 -= v52;
  }
  while (v51);
  v53 = (v50 + 1);
  if (v25 + v53 > v26)
  {
LABEL_50:
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    v33 = 3014;
    goto LABEL_26;
  }
  v54 = 0;
  if (v50 != -1)
  {
    do
    {
      v55 = 8 - (v25 & 7);
      if (v53 < v55)
        v55 = v53;
      v54 = (*(unsigned __int8 *)(v28 + (v25 >> 3)) >> (8 - (v25 & 7) - v55)) & ~(-1 << v55) | (v54 << v55);
      v25 += v55;
      *(_QWORD *)(v14 + 24) = v25;
      v53 -= v55;
    }
    while (v53);
    if (v54 >= 0x10000)
    {
      v32 = (FILE *)*MEMORY[0x1E0C80C10];
      v33 = 3017;
      goto LABEL_26;
    }
  }
  v56 = v54;
  v57 = a4[1];
  v58 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v57 - *a4) >> 3);
  v59 = v54 - v58;
  if (v54 <= v58)
  {
    if (v54 < v58)
    {
      v60 = *a4 + 136 * v54;
      while (v57 != v60)
      {
        v61 = *(std::__shared_weak_count **)(v57 - 104);
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v61->__on_zero_shared)(v61, v59);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v64 = *(std::__shared_weak_count **)(v57 - 128);
        if (v64)
          std::__shared_weak_count::__release_weak(v64);
        v57 -= 136;
      }
      a4[1] = v60;
    }
  }
  else
  {
    std::vector<GeoCodecsBuildingFootprintFeature,geo::StdAllocator<GeoCodecsBuildingFootprintFeature,geo::codec::Allocator>>::__append(a4, v59);
  }
  v65 = *(_BYTE **)&a3->var0;
  v66 = *(_QWORD *)(*(_QWORD *)&a3->var0 + 40);
  v67 = 4 * v66;
  v68 = (uint64_t *)(*a5 + 312);
  v69 = *v68;
  v70 = *(_QWORD *)(*a5 + 320);
  if (*v68 == v70)
  {
    std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::resize((uint64_t)v68, 4 * v66);
    v72 = 0;
  }
  else
  {
    v71 = v70 - v69;
    std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::resize((uint64_t)v68, v70 - v69 + v67);
    v72 = v71 >> 2;
  }
  v73 = *a5;
  if (!*(_QWORD *)(*a5 + 312))
  {
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    v33 = 3034;
    goto LABEL_26;
  }
  v140 = *(_QWORD *)(*a5 + 312);
  v141 = v72;
  v74 = v73 + 344;
  v76 = *(_QWORD *)(v73 + 344);
  v75 = *(_QWORD *)(v73 + 352);
  if (v76 == v75)
  {
    std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::resize(v74, 4 * v66);
    v81 = 0;
  }
  else
  {
    v77 = v65;
    v78 = v66;
    v79 = v56;
    v80 = v75 - v76;
    std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::resize(v74, v75 - v76 + v67);
    v81 = v80 >> 2;
    v56 = v79;
    v66 = v78;
    v65 = v77;
  }
  v82 = *(_QWORD *)(*a5 + 344);
  if (!v82)
  {
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    v33 = 3044;
    goto LABEL_26;
  }
  v83 = v81;
  v146 = 0;
  v147 = 0;
  v145 = 0;
  if (!BitstreamUnpack((uint64_t *)(v14 + 8), (int *)&v147 + 1, 4uLL))
  {
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    v33 = 3055;
    goto LABEL_26;
  }
  if (!BitstreamUnpack((uint64_t *)(v14 + 8), (int *)&v147, 4uLL))
  {
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    v33 = 3056;
    goto LABEL_26;
  }
  if (!BitstreamUnpack((uint64_t *)(v14 + 8), (int *)&v146 + 1, 4uLL))
  {
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    v33 = 3057;
    goto LABEL_26;
  }
  if (!BitstreamUnpack((uint64_t *)(v14 + 8), (int *)&v146, 4uLL))
  {
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    v33 = 3058;
    goto LABEL_26;
  }
  v138 = v66;
  v139 = v56;
  if (!BitstreamUnpack((uint64_t *)(v14 + 8), (int *)&v145, 4uLL))
  {
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    v33 = 3059;
    goto LABEL_26;
  }
  v84 = *(_QWORD *)(v14 + 24);
  v85 = v84 + 1;
  v86 = 8 * *(_QWORD *)(v14 + 16);
  if (v84 + 1 > v86)
  {
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    v33 = 3060;
    goto LABEL_26;
  }
  v87 = *(_QWORD *)(v14 + 8);
  v88 = *(unsigned __int8 *)(v87 + (v84 >> 3));
  *(_QWORD *)(v14 + 24) = v85;
  v89 = v84 + 2;
  if (v84 + 2 > v86)
  {
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    v33 = 3061;
    goto LABEL_26;
  }
  v90 = *(unsigned __int8 *)(v87 + (v85 >> 3));
  *(_QWORD *)(v14 + 24) = v89;
  v91 = v84 + 3;
  if (v84 + 3 > v86)
  {
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    v33 = 3062;
    goto LABEL_26;
  }
  v92 = *(unsigned __int8 *)(v87 + (v89 >> 3));
  *(_QWORD *)(v14 + 24) = v91;
  v93 = v84 + 4;
  if (v84 + 4 > v86)
  {
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    v33 = 3063;
    goto LABEL_26;
  }
  v94 = *(unsigned __int8 *)(v87 + (v91 >> 3));
  *(_QWORD *)(v14 + 24) = v93;
  if (!(_DWORD)v56)
  {
LABEL_145:
    v114 = *(_QWORD *)(v14 + 48) + (v93 >> 3);
    if ((v93 & 7) != 0)
      ++v114;
    *(_QWORD *)(v14 + 48) = v114;
    *(_BYTE *)(v14 + 32) = 0;
    _ZNSt3__111make_sharedB8ne180100I22FeatureStyleAttributesJEvEENS_10shared_ptrIT_EEDpOT0_(&v143);
    v115 = v143;
    **(_QWORD **)v143 = 0x400000005;
    *(_WORD *)(v115 + 33) = 1025;
    std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>((uint64_t)&v148, &v143);
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&v143);
    v116 = FeatureStyleAttributesSet::insert(*a5 + 1112, (uint64_t *)&v148);
    v117 = v116[1];
    v142[0] = *v116;
    v142[1] = v117;
    if (v117)
    {
      v118 = (unint64_t *)(v117 + 8);
      do
        v119 = __ldxr(v118);
      while (__stxr(v119 + 1, v118));
    }
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)v142);
    v35 = (geo::codec::Allocator *)geo::codec::decodeAttributeSet<GeoCodecsFeature>(4, (uint64_t *)(v14 + 8), v139, *a5 + 1112, *a4, 136);
    if ((v35 & 1) == 0)
    {
      v32 = (FILE *)*MEMORY[0x1E0C80C10];
      v33 = 3141;
      goto LABEL_26;
    }
    v12 = 1;
    if (*(_BYTE *)v14)
      goto LABEL_27;
    goto LABEL_28;
  }
  v130 = 0;
  v135 = 0;
  v126 = (1 << (~(_BYTE)v84 & 7)) & v88;
  v124 = (1 << (~(_BYTE)v85 & 7)) & v90;
  v122 = (1 << (~(_BYTE)v89 & 7)) & v92;
  v125 = v146;
  v134 = v145;
  v127 = HIDWORD(v147);
  v133 = v147;
  v121 = (1 << (~(_BYTE)v91 & 7)) & v94;
  v129 = HIDWORD(v146);
  while (1)
  {
    v128 = *a4;
    v131 = *a4 + 136 * v130;
    *(_QWORD *)(v131 + 112) = 0;
    v96 = *a5;
    v95 = a5[1];
    if (v95)
    {
      v97 = (unint64_t *)(v95 + 16);
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    v99 = *(std::__shared_weak_count **)(v131 + 8);
    *(_QWORD *)v131 = v96;
    *(_QWORD *)(v131 + 8) = v95;
    if (v99)
      std::__shared_weak_count::__release_weak(v99);
    *(_OWORD *)(v131 + 80) = xmmword_189CC14F0;
    if (v48)
    {
      LODWORD(v143) = 0;
      if (!BitstreamUnpack((uint64_t *)(v14 + 8), (int *)&v143, v125))
      {
        v32 = (FILE *)*MEMORY[0x1E0C80C10];
        v33 = 3076;
        goto LABEL_26;
      }
      for (i = v143; i; --i)
      {
        if (!BitstreamUnpack((uint64_t *)(v14 + 8), &v144, v134))
        {
          v32 = (FILE *)*MEMORY[0x1E0C80C10];
          v33 = 3079;
          goto LABEL_26;
        }
      }
    }
    LODWORD(v143) = 0;
    if (!BitstreamUnpack((uint64_t *)(v14 + 8), (int *)&v143, v127))
    {
      v32 = (FILE *)*MEMORY[0x1E0C80C10];
      v33 = 3084;
      goto LABEL_26;
    }
    v101 = v143;
    v123 = v135 + v143;
    if (v123 > v138)
    {
      v32 = (FILE *)*MEMORY[0x1E0C80C10];
      v33 = 3085;
      goto LABEL_26;
    }
    *(_DWORD *)(v131 + 96) = v135;
    *(_DWORD *)(v131 + 100) = v101;
    *(_QWORD *)(v131 + 112) = v141;
    if (v126)
    {
      v136 = v101;
      for (j = v141; v136; --v136)
      {
        v144 = 0;
        if (!BitstreamUnpack((uint64_t *)(v14 + 8), &v144, v133))
        {
          v32 = (FILE *)*MEMORY[0x1E0C80C10];
          v33 = 3094;
          goto LABEL_26;
        }
        *(float *)(v140 + 4 * v141) = (float)v144 / (float)~(-1 << *v65);
        j = ++v141;
      }
    }
    else
    {
      if ((_DWORD)v101)
      {
        v137 = 4 * v101;
        bzero((void *)(v140 + 4 * v141), 4 * v101);
        v120 = (v101 - 1);
        j = v141 + v120 + 1;
        *(_QWORD *)(v128 + 136 * v130 + 120) = v83;
        if (v124)
          goto LABEL_127;
        goto LABEL_133;
      }
      j = v141;
    }
    *(_QWORD *)(v128 + 136 * v130 + 120) = v83;
    if (v124)
    {
      if ((_DWORD)v101)
      {
        while (1)
        {
LABEL_127:
          v106 = *(_QWORD *)(v14 + 24);
          if (v106 + 1 > 8 * *(_QWORD *)(v14 + 16))
          {
            v32 = (FILE *)*MEMORY[0x1E0C80C10];
            v33 = 3107;
            goto LABEL_26;
          }
          v107 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 8) + (v106 >> 3));
          *(_QWORD *)(v14 + 24) = v106 + 1;
          v144 = 0;
          if (((v107 >> (~(_BYTE)v106 & 7)) & 1) != 0)
          {
            if (!BitstreamUnpack((uint64_t *)(v14 + 8), &v144, v129))
            {
              v32 = (FILE *)*MEMORY[0x1E0C80C10];
              v33 = 3110;
              goto LABEL_26;
            }
            v103 = v144;
          }
          else
          {
            v103 = 0;
          }
          v104 = (float)v103 / (float)~(-1 << *v65);
          v105 = v83 + 1;
          *(float *)(v82 + 4 * v83++) = v104;
          LODWORD(v101) = v101 - 1;
          if (!(_DWORD)v101)
          {
            v141 = j;
            v83 = v105;
            goto LABEL_136;
          }
        }
      }
      goto LABEL_134;
    }
    if ((_DWORD)v101)
    {
      v137 = 4 * v101;
      v120 = (v101 - 1);
LABEL_133:
      bzero((void *)(v82 + 4 * v83), v137);
      v83 += v120 + 1;
    }
LABEL_134:
    v141 = j;
LABEL_136:
    v108 = v128 + 136 * v130;
    *(_BYTE *)(v108 + 128) = 0;
    v109 = (_BYTE *)(v108 + 128);
    if (v122)
    {
      v110 = *(_QWORD *)(v14 + 24);
      if (v110 + 1 > 8 * *(_QWORD *)(v14 + 16))
      {
        v32 = (FILE *)*MEMORY[0x1E0C80C10];
        v33 = 3123;
        goto LABEL_26;
      }
      v111 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 8) + (v110 >> 3));
      *(_QWORD *)(v14 + 24) = v110 + 1;
      *v109 = (v111 >> (~(_BYTE)v110 & 7)) & 1;
    }
    *(_QWORD *)(v131 + 40) = 0;
    v132 = (unint64_t *)(v131 + 40);
    if (v121)
    {
      v112 = *(_QWORD *)(v14 + 24);
      if (v112 + 1 > 8 * *(_QWORD *)(v14 + 16))
      {
        v33 = 3130;
        goto LABEL_164;
      }
      v113 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 8) + (v112 >> 3));
      *(_QWORD *)(v14 + 24) = v112 + 1;
      if (((v113 >> (~(_BYTE)v112 & 7)) & 1) != 0 && !BitstreamUnpack64((uint64_t *)(v14 + 8), v132, 0x40uLL))
        break;
    }
    v135 = v123;
    if (++v130 == v139)
    {
      v93 = *(_QWORD *)(v14 + 24);
      goto LABEL_145;
    }
  }
  v33 = 3132;
LABEL_164:
  v32 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_26:
  v35 = (geo::codec::Allocator *)fprintf(v32, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v33);
  v12 = 0;
  if (!*(_BYTE *)v14)
    goto LABEL_28;
LABEL_27:
  v36 = geo::codec::Allocator::instance(v35);
  v35 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v36 + 40))(v36, *(_QWORD *)(v14 + 40), 0);
LABEL_28:
  v37 = geo::codec::Allocator::instance(v35);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v37 + 40))(v37, v14, 0);
  v38 = v149;
  if (v149)
  {
    v39 = (unint64_t *)&v149->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v42 = v150;
  v41 = v151;
  v43.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v44 = rep;
  *(_QWORD *)&v143 = v42;
  if (v42)
  {
    v148 = &v143;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v41 + 1912, (uint64_t *)&v143, (uint64_t)&std::piecewise_construct, (uint64_t **)&v148)+ 4) = (double)((v43.__d_.__rep_ - v44) / 1000) * 0.001;
  }
  v45 = v152;
  if (v152)
  {
    v46 = (unint64_t *)&v152->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  return v12;
}

void sub_1886DA32C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100](v1 - 136);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readDaVinciMetadata(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  geo::codec::Allocator *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  FILE *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  geo::codec::Allocator *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  geo::codec::Allocator *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  geo::codec::Allocator *v39;
  uint64_t v40;
  geo::codec::Allocator *v41;
  uint64_t v42;
  uint64_t v43;
  geo::codec::Allocator *v44;
  uint64_t v45;
  std::chrono::steady_clock::time_point v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  geo::codec::Allocator *v51;
  unsigned int v52;
  geo::codec::Allocator *v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  char v61;
  geo::codec::Allocator *v62;
  unint64_t v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  int v84;
  FILE *v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  std::chrono::steady_clock::time_point v90;
  const char *v91;
  const char **v92;

  v2 = a1[1];
  if (!v2)
    return 1;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 103)
  {
    v4 = ++v5;
    if (v2 <= v5)
      return 1;
  }
  v6 = (_QWORD *)geo::codec::chapterAt((uint64_t)a1, v5, 103, *a2 + 1912);
  if (!v6)
    return 1;
  v7 = v6;
  v8 = v6[6];
  if ((unint64_t)(v8 + 4) > v6[7])
    return 1;
  v11 = *(_DWORD *)(v6[5] + v8);
  v6[6] = v8 + 4;
  v12 = (std::__shared_weak_count *)a2[1];
  v88 = *a2;
  v89 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v90.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v15 = geo::codec::Allocator::instance((geo::codec::Allocator *)v90.__d_.__rep_);
  v16 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 24))(v15, 1, 32);
  *(_QWORD *)(*a2 + 2232) = v16;
  if (v11 == 68)
  {
    if ((v11 & 0xFF00) == 0x5600)
    {
      if ((v11 & 0xFF0000) == 0x650000)
      {
        if (HIBYTE(v11) == 109)
        {
          v17 = v7[6];
          v18 = v7[7];
          v19 = v17 + 4;
          if (v17 + 4 <= v18)
          {
            v22 = v7[5];
            v23 = *(_DWORD *)(v22 + v17);
            *((_DWORD *)v7 + 16) = v23;
            v7[6] = v19;
            if (v23 <= 0xF)
            {
              v20 = (FILE *)*MEMORY[0x1E0C80C10];
              v21 = 10237;
            }
            else if (v17 + 8 <= v18)
            {
              *(_DWORD *)v16 = *(_DWORD *)(v22 + v19);
              v24 = v7[6];
              v25 = v7[7];
              v7[6] = v24 + 4;
              if (v24 + 8 <= v25)
              {
                *(_DWORD *)(*(_QWORD *)(*a2 + 2232) + 4) = *(_DWORD *)(v7[5] + v24 + 4);
                v26 = v7[6];
                v27 = v7[7];
                v28 = v26 + 4;
                v7[6] = v26 + 4;
                v29 = v26 + 6;
                if (v29 <= v27)
                {
                  v49 = *(unsigned __int16 *)(v7[5] + v28);
                  *(_WORD *)(*(_QWORD *)(*a2 + 2232) + 8) = v49;
                  v7[6] = v29;
                  v50 = geo::codec::Allocator::instance(v16);
                  v51 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, 2 * (v49 * v49), 8);
                  v31 = v51;
                  *(_QWORD *)(*(_QWORD *)(*a2 + 2232) + 16) = v51;
                  if ((_DWORD)v49)
                  {
                    v52 = 0;
                    v53 = v51;
LABEL_46:
                    v54 = 0;
                    while (1)
                    {
                      v55 = v7[6];
                      v56 = v7[7];
                      v57 = v55 + 1;
                      if (v55 + 1 > v56)
                      {
                        v84 = 10255;
                        goto LABEL_68;
                      }
                      v58 = v7[5];
                      v59 = *(_BYTE *)(v58 + v55);
                      v7[6] = v57;
                      v60 = v55 + 2;
                      if (v60 > v56)
                        break;
                      v61 = *(_BYTE *)(v58 + v57);
                      v7[6] = v60;
                      v62 = (geo::codec::Allocator *)((char *)v53 + 2);
                      *(_BYTE *)v53 = v59;
                      *((_BYTE *)v53 + 1) = v61;
                      ++v54;
                      v53 = (geo::codec::Allocator *)((char *)v53 + 2);
                      if (v54 >= v49)
                      {
                        ++v52;
                        v53 = v62;
                        if (v52 < v49)
                          goto LABEL_46;
                        goto LABEL_51;
                      }
                    }
                    v84 = 10256;
LABEL_68:
                    v30 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v84);
                    v32 = 0;
                    v9 = 0;
                    if (*(_BYTE *)v7)
                      goto LABEL_32;
                    goto LABEL_33;
                  }
LABEL_51:
                  v64 = v7[6];
                  v63 = v7[7];
                  v65 = v63 >= v64;
                  v66 = v63 - v64;
                  if (v65)
                  {
                    *((_BYTE *)v7 + 32) = 1;
                    v67 = v7[5] + v64;
                    v7[2] = v66;
                    v7[3] = 0;
                    v7[1] = v67;
                  }
                  v68 = geo::codec::Allocator::instance(v51);
                  v30 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v68 + 24))(v68, (v49 * v49), 1);
                  v32 = v30;
                  *(_QWORD *)(*(_QWORD *)(*a2 + 2232) + 24) = v30;
                  if ((_DWORD)v49)
                  {
                    v69 = 0;
                    v70 = v7[3];
                    v71 = 8 * v7[2];
                    v72 = (_BYTE *)v30;
LABEL_56:
                    v73 = v72;
                    v74 = v49;
                    v75 = v70;
                    while (1)
                    {
                      v70 = v75 + 1;
                      if (v75 + 1 > v71)
                        break;
                      v76 = v7[1];
                      v77 = *(unsigned __int8 *)(v76 + (v75 >> 3));
                      v7[3] = v70;
                      *v73++ |= (v77 >> (~(_BYTE)v75++ & 7)) & 1;
                      if (!--v74)
                      {
                        ++v69;
                        v72 += v49;
                        if (v69 != v49)
                          goto LABEL_56;
                        v78 = 0;
                        v79 = (_BYTE *)v30;
                        while (2)
                        {
                          v80 = v79;
                          v81 = v49;
                          v82 = v70;
                          do
                          {
                            v70 = v82 + 1;
                            if (v82 + 1 > v71)
                            {
                              v85 = (FILE *)*MEMORY[0x1E0C80C10];
                              v86 = 10279;
                              goto LABEL_71;
                            }
                            v83 = *(unsigned __int8 *)(v76 + (v82 >> 3));
                            v7[3] = v70;
                            *v80++ |= 2 * ((v83 >> (~(_BYTE)v82++ & 7)) & 1);
                            --v81;
                          }
                          while (v81);
                          ++v78;
                          v79 += v49;
                          if (v78 != v49)
                            continue;
                          goto LABEL_74;
                        }
                      }
                    }
                    v85 = (FILE *)*MEMORY[0x1E0C80C10];
                    v86 = 10271;
LABEL_71:
                    v30 = fprintf(v85, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v86);
                    v9 = 0;
                    if (*(_BYTE *)v7)
                      goto LABEL_32;
                    goto LABEL_33;
                  }
                  v70 = v7[3];
LABEL_74:
                  v87 = v7[6] + (v70 >> 3);
                  if ((v70 & 7) != 0)
                    ++v87;
                  v7[6] = v87;
                  *((_BYTE *)v7 + 32) = 0;
                  v9 = 1;
                  if (!*(_BYTE *)v7)
                    goto LABEL_33;
                  goto LABEL_32;
                }
                v20 = (FILE *)*MEMORY[0x1E0C80C10];
                v21 = 10242;
              }
              else
              {
                v20 = (FILE *)*MEMORY[0x1E0C80C10];
                v21 = 10240;
              }
            }
            else
            {
              v20 = (FILE *)*MEMORY[0x1E0C80C10];
              v21 = 10239;
            }
          }
          else
          {
            v20 = (FILE *)*MEMORY[0x1E0C80C10];
            v21 = 10236;
          }
        }
        else
        {
          v20 = (FILE *)*MEMORY[0x1E0C80C10];
          v21 = 10234;
        }
      }
      else
      {
        v20 = (FILE *)*MEMORY[0x1E0C80C10];
        v21 = 10233;
      }
    }
    else
    {
      v20 = (FILE *)*MEMORY[0x1E0C80C10];
      v21 = 10232;
    }
  }
  else
  {
    v20 = (FILE *)*MEMORY[0x1E0C80C10];
    v21 = 10231;
  }
  v30 = fprintf(v20, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v21);
  v31 = 0;
  v32 = 0;
  v9 = 0;
  if (*(_BYTE *)v7)
  {
LABEL_32:
    v33 = geo::codec::Allocator::instance((geo::codec::Allocator *)v30);
    v30 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v33 + 40))(v33, v7[5], 0);
  }
LABEL_33:
  v34 = geo::codec::Allocator::instance((geo::codec::Allocator *)v30);
  v35 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v34 + 40))(v34, v7, 0);
  if ((v9 & 1) == 0)
  {
    v36 = *a2;
    v37 = *(_QWORD *)(*a2 + 2232);
    if (v37)
    {
      v38 = geo::codec::Allocator::instance(v35);
      v39 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v38 + 40))(v38, *(_QWORD *)(v37 + 24), 0);
      v40 = geo::codec::Allocator::instance(v39);
      v41 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v40 + 40))(v40, *(_QWORD *)(v37 + 16), 0);
      v42 = geo::codec::Allocator::instance(v41);
      v35 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v42 + 40))(v42, v37, 0);
      v36 = *a2;
    }
    *(_QWORD *)(v36 + 2232) = 0;
    v43 = geo::codec::Allocator::instance(v35);
    v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v43 + 40))(v43, v31, 0);
    v45 = geo::codec::Allocator::instance(v44);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v45 + 40))(v45, v32, 0);
  }
  v46.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v91 = "ChapterDaVinciMetadata";
  if ("ChapterDaVinciMetadata")
  {
    v92 = &v91;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v88 + 1912, (uint64_t *)&v91, (uint64_t)&std::piecewise_construct, (uint64_t **)&v92)+ 4) = (double)((v46.__d_.__rep_ - v90.__d_.__rep_) / 1000) * 0.001;
  }
  if (v89)
  {
    v47 = (unint64_t *)&v89->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  return v9;
}

void sub_1886DA9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

void sub_1886DA9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

void sub_1886DAA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

void sub_1886DAA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readCoastlines(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::chrono::steady_clock::time_point v15;
  FILE *v16;
  int v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::chrono::steady_clock::time_point v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t VarUint32;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  geo::codec::Allocator *v32;
  geo::codec::Allocator *v33;
  char v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  FILE *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  geo::codec::Allocator *v52;
  uint64_t v53;
  geo::codec::Allocator *v54;
  uint64_t v55;
  uint64_t v56;
  geo::codec::Allocator *v57;
  uint64_t v58;
  geo::codec::Allocator *v59;
  uint64_t v60;
  uint64_t v61;
  geo::codec::Allocator *v62;
  uint64_t v63;
  geo::codec::Allocator *v64;
  uint64_t v65;
  uint64_t v66;
  geo::codec::Allocator *v67;
  uint64_t v68;
  geo::codec::Allocator *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  geo::codec::Allocator *v89;
  uint64_t v90;
  geo::codec::Allocator *v91;
  uint64_t v92;
  uint64_t v93;
  geo::codec::Allocator *v94;
  uint64_t v95;
  geo::codec::Allocator *v96;
  uint64_t v97;
  geo::codec::Allocator *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  _OWORD *v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  uint64_t *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  geo::codec::Allocator *v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  std::__shared_weak_count *v131;
  uint64_t *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  FILE *v138;
  int v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  FILE *v143;
  int v144;
  int v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  geo::codec::Allocator *v151;
  uint64_t v152;
  geo::codec::Allocator *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  _OWORD *v158;
  __int128 v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  geo::codec::Allocator *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  _QWORD *v183;
  std::__shared_weak_count *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  std::__shared_weak_count *v215;
  uint64_t *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  geo::codec::Allocator *v224;
  uint64_t v225;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v226;
  unint64_t v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t **v231;
  std::__shared_weak_count *v232;
  geo::codec::Allocator *v233;
  geo::codec::Allocator *v234;
  const char *v235;
  uint64_t *v236[2];

  v2 = a1;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    goto LABEL_30;
  v5 = 0;
  v6 = 0;
  v7 = *a2;
  while (*(_WORD *)(*(_QWORD *)a1 + 16 * v5) != 38)
  {
    v5 = ++v6;
    if (v3 <= v6)
      goto LABEL_5;
  }
  a1 = geo::codec::chapterAt(a1, v6, 38, *a2 + 1912);
  if (!a1)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (!v3)
      goto LABEL_30;
    v7 = *a2;
LABEL_5:
    v8 = 0;
    v9 = 0;
    while (*(_WORD *)(*(_QWORD *)v2 + 16 * v8) != 34)
    {
      v8 = ++v9;
      if (v3 <= v9)
        goto LABEL_30;
    }
    a1 = geo::codec::chapterAt(v2, v9, 34, v7 + 1912);
    if (a1)
    {
      v18 = (_QWORD *)a1;
      v233 = 0;
      v234 = 0;
      v231 = 0;
      v232 = 0;
      v230 = 0;
      v19 = (std::__shared_weak_count *)a2[1];
      v228 = *a2;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if ((geo::codec::chapterReadVarUint32(v18, (unsigned int *)&v230 + 1) & 1) == 0)
      {
        VarUint32 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 4201);
        v32 = 0;
        v33 = 0;
        v24 = 0;
LABEL_65:
        v50 = 0;
LABEL_66:
        if (v234)
        {
          v51 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
          v52 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v51 + 40))(v51, *((_QWORD *)v234 + 1), 0);
          v53 = geo::codec::Allocator::instance(v52);
          v54 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v53 + 40))(v53, *((_QWORD *)v234 + 4), 0);
          v55 = geo::codec::Allocator::instance(v54);
          VarUint32 = (*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v55 + 40))(v55, v234, 0);
        }
        if (v233)
        {
          v56 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
          v57 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v56 + 40))(v56, *((_QWORD *)v233 + 1), 0);
          v58 = geo::codec::Allocator::instance(v57);
          v59 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v58 + 40))(v58, *((_QWORD *)v233 + 4), 0);
          v60 = geo::codec::Allocator::instance(v59);
          VarUint32 = (*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v60 + 40))(v60, v233, 0);
        }
        if (v33)
        {
          v61 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
          v62 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v61 + 40))(v61, *((_QWORD *)v33 + 1), 0);
          v63 = geo::codec::Allocator::instance(v62);
          v64 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v63 + 40))(v63, *((_QWORD *)v33 + 4), 0);
          v65 = geo::codec::Allocator::instance(v64);
          VarUint32 = (*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v65 + 40))(v65, v33, 0);
        }
        if (v32)
        {
          v66 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
          v67 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v66 + 40))(v66, *((_QWORD *)v32 + 1), 0);
          v68 = geo::codec::Allocator::instance(v67);
          v69 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v68 + 40))(v68, *((_QWORD *)v32 + 4), 0);
          v70 = geo::codec::Allocator::instance(v69);
          VarUint32 = (*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v70 + 40))(v70, v32, 0);
        }
        if (v24)
        {
          if (*(_BYTE *)v24)
          {
            v71 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
            VarUint32 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v71 + 40))(v71, *(_QWORD *)(v24 + 40), 0);
          }
          v72 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v72 + 40))(v72, v24, 0);
        }
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v235 = "ChapterCoastlineFeatures";
        v236[0] = (uint64_t *)&v235;
        a1 = (uint64_t)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v228 + 1912, (uint64_t *)&v235, (uint64_t)&std::piecewise_construct, v236);
        *(double *)(a1 + 32) = (double)((rep - v22.__d_.__rep_) / 1000) * 0.001;
        if (v19)
        {
          v74 = (unint64_t *)&v19->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v76 = v232;
        if (v232)
        {
          v77 = (unint64_t *)&v232->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        v10 = 0;
        if ((v50 & 1) != 0)
        {
          v31 = 1;
LABEL_92:
          if (*(_BYTE *)v18)
          {
            v79 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
            a1 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v79 + 40))(v79, v18[5], 0);
          }
          v80 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
          a1 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v80 + 40))(v80, v18, 0);
          goto LABEL_95;
        }
        v41 = 4024;
LABEL_91:
        a1 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v41);
        v31 = 0;
        if (!v18)
          goto LABEL_95;
        goto LABEL_92;
      }
      v23 = geo::codec::chapterAt(v2, HIDWORD(v230), 20, *a2 + 1912);
      v24 = v23;
      if (v23)
      {
        if ((geo::codec::decodeVertices(v23, &v234, (uint64_t *)&v233, *(_DWORD *)(v23 + 64) > 0x43u) & 1) != 0)
        {
          VarUint32 = geo::codec::chapterReadVarUint32(v18, (unsigned int *)&v230);
          if ((VarUint32 & 1) != 0)
          {
            if (!(_DWORD)v230)
            {
              v32 = 0;
              v33 = 0;
              v50 = 1;
              goto LABEL_66;
            }
            v26 = *a2;
            v27 = (std::__shared_weak_count *)(*a2 + 64);
            v28 = *(_QWORD *)(*a2 + 72);
            v29 = 0x4EC4EC4EC4EC4EC5 * ((int64_t)(v28 - (unint64_t)v27->__vftable) >> 3);
            v30 = v230 - v29;
            if (v230 <= v29)
            {
              if (v230 < v29)
              {
                v84 = (uint64_t)v27->__vftable + 104 * v230;
                while (v28 != v84)
                {
                  v85 = *(std::__shared_weak_count **)(v28 - 72);
                  if (v85)
                  {
                    v86 = (unint64_t *)&v85->__shared_owners_;
                    do
                      v87 = __ldaxr(v86);
                    while (__stlxr(v87 - 1, v86));
                    if (!v87)
                    {
                      ((void (*)(std::__shared_weak_count *, unint64_t))v85->__on_zero_shared)(v85, v30);
                      std::__shared_weak_count::__release_weak(v85);
                    }
                  }
                  v27 = *(std::__shared_weak_count **)(v28 - 96);
                  if (v27)
                    std::__shared_weak_count::__release_weak(v27);
                  v28 -= 104;
                }
                *(_QWORD *)(v26 + 72) = v84;
              }
            }
            else
            {
              std::vector<GeoCodecsMultiSectionFeature,geo::StdAllocator<GeoCodecsMultiSectionFeature,geo::codec::Allocator>>::__append((uint64_t *)v27, v30);
            }
            if (v234)
            {
              v88 = geo::codec::Allocator::instance((geo::codec::Allocator *)v27);
              v89 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v88 + 24))(v88, 1, 48);
              v33 = v89;
              if (v89)
              {
                v90 = geo::codec::Allocator::instance(v89);
                v91 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v90 + 24))(v90, *((_QWORD *)v234 + 2), 12);
                *((_QWORD *)v33 + 1) = v91;
                v92 = geo::codec::Allocator::instance(v91);
                v93 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v92 + 24))(v92, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(*a2 + 72) - *(_QWORD *)(*a2 + 64)) >> 3), 16);
                *((_QWORD *)v33 + 4) = v93;
                if (*((_QWORD *)v33 + 1))
                {
                  if (v93)
                  {
                    v32 = 0;
                    v94 = v234;
LABEL_125:
                    v227 = *((_QWORD *)v94 + 2);
                    v101 = (char *)operator new(0x40uLL);
                    *((_QWORD *)v101 + 1) = 0;
                    *((_QWORD *)v101 + 2) = 0;
                    *(_QWORD *)v101 = &off_1E1BFB2F8;
                    *(_OWORD *)(v101 + 24) = 0u;
                    *(_OWORD *)(v101 + 40) = 0u;
                    *(_DWORD *)(v101 + 55) = 0;
                    v102 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
                    *((_QWORD *)v101 + 3) = v102;
                    if (v102)
                    {
                      *(_QWORD *)&v103 = -1;
                      *((_QWORD *)&v103 + 1) = -1;
                      v102[14] = v103;
                      v102[15] = v103;
                      v102[12] = v103;
                      v102[13] = v103;
                      v102[10] = v103;
                      v102[11] = v103;
                      v102[8] = v103;
                      v102[9] = v103;
                      v102[6] = v103;
                      v102[7] = v103;
                      v102[4] = v103;
                      v102[5] = v103;
                      v102[2] = v103;
                      v102[3] = v103;
                      *v102 = v103;
                      v102[1] = v103;
                    }
                    *(_QWORD *)v102 = 0x500000005;
                    *(_WORD *)(v101 + 57) = 1281;
                    v104 = v232;
                    v231 = (uint64_t **)(v101 + 24);
                    v232 = (std::__shared_weak_count *)v101;
                    if (v104)
                    {
                      v105 = (unint64_t *)&v104->__shared_owners_;
                      do
                        v106 = __ldaxr(v105);
                      while (__stlxr(v106 - 1, v105));
                      if (!v106)
                      {
                        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                        std::__shared_weak_count::__release_weak(v104);
                      }
                    }
                    VarUint32 = (uint64_t)FeatureStyleAttributesSet::insert(*a2 + 1112, (uint64_t *)&v231);
                    v108 = *(uint64_t **)VarUint32;
                    v107 = *(std::__shared_weak_count **)(VarUint32 + 8);
                    if (v107)
                    {
                      v109 = (unint64_t *)&v107->__shared_owners_;
                      do
                        v110 = __ldxr(v109);
                      while (__stxr(v110 + 1, v109));
                    }
                    v111 = v232;
                    v231 = (uint64_t **)v108;
                    v232 = v107;
                    if (v111)
                    {
                      v112 = (unint64_t *)&v111->__shared_owners_;
                      do
                        v113 = __ldaxr(v112);
                      while (__stlxr(v113 - 1, v112));
                      if (!v113)
                      {
                        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                        std::__shared_weak_count::__release_weak(v111);
                      }
                    }
                    v114 = *a2;
                    v115 = *(_QWORD *)(*a2 + 64);
                    if (*(_QWORD *)(*a2 + 72) != v115)
                    {
                      v116 = 0;
                      v226 = v22.__d_.__rep_;
                      while (1)
                      {
                        v117 = a2[1];
                        if (v117)
                        {
                          v118 = (unint64_t *)(v117 + 16);
                          do
                            v119 = __ldxr(v118);
                          while (__stxr(v119 + 1, v118));
                        }
                        v120 = (_QWORD *)(v115 + 104 * v116);
                        v121 = (std::__shared_weak_count *)v120[1];
                        *v120 = v114;
                        v120[1] = v117;
                        if (v121)
                          std::__shared_weak_count::__release_weak(v121);
                        v122 = v115 + 104 * v116;
                        *(_OWORD *)(v122 + 80) = xmmword_189CC14F0;
                        *(_DWORD *)(v122 + 100) = 1;
                        LODWORD(v236[0]) = 0;
                        LODWORD(v235) = 0;
                        v229 = 0;
                        if ((geo::codec::chapterReadVarUint32(v18, (unsigned int *)v236) & 1) == 0)
                        {
                          v145 = 4251;
                          goto LABEL_186;
                        }
                        if (!geo::codec::chapterReadVarUint32(v18, (unsigned int *)&v235))
                        {
                          v145 = 4252;
                          goto LABEL_186;
                        }
                        if (!geo::codec::chapterReadVarUint32(v18, &v229))
                        {
                          v145 = 4253;
                          goto LABEL_186;
                        }
                        v123 = LODWORD(v236[0]);
                        v124 = v235;
                        if (v227 < ((_DWORD)v235 + LODWORD(v236[0])))
                          break;
                        v125 = v234;
                        if (v234)
                        {
                          v126 = *((_QWORD *)v33 + 5);
                          v127 = (_QWORD *)(*((_QWORD *)v33 + 4) + 16 * v126);
                          *v127 = *((_QWORD *)v33 + 2);
                          v127[1] = v124;
                          VarUint32 = (uint64_t)memcpy((void *)(*((_QWORD *)v33 + 1) + 12 * *((_QWORD *)v33 + 2)), (const void *)(*((_QWORD *)v125 + 1) + 12 * v123), 12 * v124);
                          v129 = (_QWORD *)((char *)v33 + 16);
                          v128 = (_QWORD *)((char *)v33 + 40);
                        }
                        else
                        {
                          v126 = *((_QWORD *)v32 + 5);
                          v130 = (_QWORD *)(*((_QWORD *)v32 + 4) + 16 * v126);
                          *v130 = *((_QWORD *)v32 + 2);
                          v130[1] = v124;
                          VarUint32 = (uint64_t)memcpy((void *)(*((_QWORD *)v32 + 1) + 8 * *((_QWORD *)v32 + 2)), (const void *)(*((_QWORD *)v233 + 1) + 8 * v123), 8 * v124);
                          v129 = (_QWORD *)((char *)v32 + 16);
                          v128 = (_QWORD *)((char *)v32 + 40);
                        }
                        *v129 += v235;
                        ++*v128;
                        *(_DWORD *)(v115 + 104 * v116 + 96) = v126;
                        if (v229)
                        {
                          v22.__d_.__rep_ = v226;
                          VarUint32 = geo::codec::accumulateStyleAttributes(*a2 + 1112, (uint64_t *)&v231, v18, v115 + 104 * v116);
                          if ((VarUint32 & 1) == 0)
                          {
                            v145 = 4278;
                            goto LABEL_186;
                          }
                        }
                        else
                        {
                          v132 = (uint64_t *)v231;
                          v131 = v232;
                          v22.__d_.__rep_ = v226;
                          if (v232)
                          {
                            v133 = (unint64_t *)&v232->__shared_owners_;
                            do
                              v134 = __ldxr(v133);
                            while (__stxr(v134 + 1, v133));
                          }
                          v135 = (std::__shared_weak_count *)v120[4];
                          v120[3] = v132;
                          v120[4] = v131;
                          if (v135)
                          {
                            v136 = (unint64_t *)&v135->__shared_owners_;
                            do
                              v137 = __ldaxr(v136);
                            while (__stlxr(v137 - 1, v136));
                            if (!v137)
                            {
                              ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                              std::__shared_weak_count::__release_weak(v135);
                            }
                          }
                        }
                        ++v116;
                        v114 = *a2;
                        v115 = *(_QWORD *)(*a2 + 64);
                        if (v116 >= 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(*a2 + 72) - v115) >> 3))
                          goto LABEL_169;
                      }
                      v145 = 4255;
LABEL_186:
                      VarUint32 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v145);
                      goto LABEL_65;
                    }
LABEL_169:
                    if (!v33 || v32)
                    {
                      *(_QWORD *)(v114 + 808) = v32;
                      v50 = 1;
                      v32 = 0;
                      goto LABEL_66;
                    }
                    v140 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
                    v141 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v140 + 24))(v140, 1, 72);
                    v142 = *a2;
                    *(_QWORD *)(*a2 + 808) = v141;
                    if (v141)
                    {
                      v141[5] = *((_QWORD *)v33 + 5);
                      VarUint32 = geo::codec::_createLOD(v33, v141, 0, (*(_QWORD *)(v142 + 4) & 0x3F00uLL) > 0xE00, 0, 0, 0, 0);
                      v32 = 0;
                      v50 = 1;
                      goto LABEL_66;
                    }
                    v138 = (FILE *)*MEMORY[0x1E0C80C10];
                    v139 = 4286;
                    goto LABEL_184;
                  }
                  v138 = (FILE *)*MEMORY[0x1E0C80C10];
                  v139 = 4226;
                }
                else
                {
                  v138 = (FILE *)*MEMORY[0x1E0C80C10];
                  v139 = 4225;
                }
              }
              else
              {
                v138 = (FILE *)*MEMORY[0x1E0C80C10];
                v139 = 4222;
              }
LABEL_184:
              VarUint32 = fprintf(v138, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v139);
              v32 = 0;
              goto LABEL_65;
            }
            v95 = geo::codec::Allocator::instance((geo::codec::Allocator *)v27);
            v96 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v95 + 24))(v95, 1, 72);
            v32 = v96;
            if (v96)
            {
              v97 = geo::codec::Allocator::instance(v96);
              v98 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v97 + 24))(v97, *((_QWORD *)v233 + 2), 8);
              *((_QWORD *)v32 + 1) = v98;
              v99 = geo::codec::Allocator::instance(v98);
              v100 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v99 + 24))(v99, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(*a2 + 72) - *(_QWORD *)(*a2 + 64)) >> 3), 16);
              *((_QWORD *)v32 + 4) = v100;
              if (v100)
              {
                v33 = 0;
                v94 = v233;
                goto LABEL_125;
              }
              v143 = (FILE *)*MEMORY[0x1E0C80C10];
              v144 = 4234;
            }
            else
            {
              v143 = (FILE *)*MEMORY[0x1E0C80C10];
              v144 = 4230;
            }
            VarUint32 = fprintf(v143, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v144);
            goto LABEL_64;
          }
          v42 = (FILE *)*MEMORY[0x1E0C80C10];
          v43 = 4207;
        }
        else
        {
          v42 = (FILE *)*MEMORY[0x1E0C80C10];
          v43 = 4205;
        }
      }
      else
      {
        v42 = (FILE *)*MEMORY[0x1E0C80C10];
        v43 = 4203;
      }
      VarUint32 = fprintf(v42, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v43);
      v32 = 0;
LABEL_64:
      v33 = 0;
      goto LABEL_65;
    }
LABEL_30:
    v10 = 0;
    goto LABEL_31;
  }
  v10 = (_QWORD *)a1;
  v12 = *a2;
  v11 = (std::__shared_weak_count *)a2[1];
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v231 = 0;
  v232 = 0;
  LODWORD(v236[0]) = 0;
  LODWORD(v235) = 0;
  LODWORD(v234) = 0;
  if ((geo::codec::chapterReadVarUint32(v10, (unsigned int *)v236) & 1) == 0)
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 4045;
    goto LABEL_36;
  }
  if (LODWORD(v236[0]) != *(_DWORD *)(v2 + 40))
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 4050;
    goto LABEL_36;
  }
  if (*(_BYTE *)(v2 + 44))
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 4051;
LABEL_36:
    fprintf(v16, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v17);
    v34 = 0;
    goto LABEL_37;
  }
  v44 = *(_QWORD *)(*a2 + 800);
  if (!v44)
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 4052;
    goto LABEL_36;
  }
  if (!*(_QWORD *)(v44 + 8))
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 4053;
    goto LABEL_36;
  }
  if (!*(_QWORD *)(v44 + 32))
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 4054;
    goto LABEL_36;
  }
  if ((geo::codec::chapterReadVarUint32(v10, (unsigned int *)&v234) & 1) == 0)
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 4056;
    goto LABEL_36;
  }
  if ((geo::codec::chapterReadVarUint32(v10, (unsigned int *)&v235) & 1) == 0)
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 4057;
    goto LABEL_36;
  }
  v34 = 1;
  if ((_DWORD)v234 && (_DWORD)v235)
  {
    if (v234 >= 0x40000)
    {
      v16 = (FILE *)*MEMORY[0x1E0C80C10];
      v17 = 4063;
    }
    else if (v235 >= 0x10000)
    {
      v16 = (FILE *)*MEMORY[0x1E0C80C10];
      v17 = 4064;
    }
    else
    {
      v45 = *a2;
      v46 = (std::__shared_weak_count *)(*a2 + 64);
      v47 = *(_QWORD *)(*a2 + 72);
      v48 = 0x4EC4EC4EC4EC4EC5 * ((int64_t)(v47 - (unint64_t)v46->__vftable) >> 3);
      v49 = v235 - v48;
      if (v235 <= v48)
      {
        if (v235 < v48)
        {
          v146 = (uint64_t)v46->__vftable + 104 * v235;
          while (v47 != v146)
          {
            v147 = *(std::__shared_weak_count **)(v47 - 72);
            if (v147)
            {
              v148 = (unint64_t *)&v147->__shared_owners_;
              do
                v149 = __ldaxr(v148);
              while (__stlxr(v149 - 1, v148));
              if (!v149)
              {
                ((void (*)(std::__shared_weak_count *, unint64_t))v147->__on_zero_shared)(v147, v49);
                std::__shared_weak_count::__release_weak(v147);
              }
            }
            v46 = *(std::__shared_weak_count **)(v47 - 96);
            if (v46)
              std::__shared_weak_count::__release_weak(v46);
            v47 -= 104;
          }
          *(_QWORD *)(v45 + 72) = v146;
        }
      }
      else
      {
        std::vector<GeoCodecsMultiSectionFeature,geo::StdAllocator<GeoCodecsMultiSectionFeature,geo::codec::Allocator>>::__append((uint64_t *)v46, v49);
      }
      v150 = geo::codec::Allocator::instance((geo::codec::Allocator *)v46);
      v151 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v150 + 24))(v150, 1, 72);
      *(_QWORD *)(*a2 + 808) = v151;
      if (v151)
      {
        *((_QWORD *)v151 + 2) = v234;
        v152 = geo::codec::Allocator::instance(v151);
        v153 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v152 + 24))(v152, v234, 8);
        v154 = *(_QWORD *)(*a2 + 808);
        *(_QWORD *)(v154 + 8) = v153;
        if (v153)
        {
          *(_QWORD *)(v154 + 40) = v235;
          v155 = geo::codec::Allocator::instance(v153);
          v156 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v155 + 24))(v155, v235, 16);
          *(_QWORD *)(*(_QWORD *)(*a2 + 808) + 32) = v156;
          if (v156)
          {
            v157 = (char *)operator new(0x40uLL);
            *((_QWORD *)v157 + 1) = 0;
            *((_QWORD *)v157 + 2) = 0;
            *(_QWORD *)v157 = &off_1E1BFB2F8;
            *(_OWORD *)(v157 + 24) = 0u;
            *(_OWORD *)(v157 + 40) = 0u;
            *(_DWORD *)(v157 + 55) = 0;
            v158 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
            *((_QWORD *)v157 + 3) = v158;
            if (v158)
            {
              *(_QWORD *)&v159 = -1;
              *((_QWORD *)&v159 + 1) = -1;
              v158[14] = v159;
              v158[15] = v159;
              v158[12] = v159;
              v158[13] = v159;
              v158[10] = v159;
              v158[11] = v159;
              v158[8] = v159;
              v158[9] = v159;
              v158[6] = v159;
              v158[7] = v159;
              v158[4] = v159;
              v158[5] = v159;
              v158[2] = v159;
              v158[3] = v159;
              *v158 = v159;
              v158[1] = v159;
            }
            *(_QWORD *)v158 = 0x500000005;
            *(_WORD *)(v157 + 57) = 1281;
            v160 = v232;
            v231 = (uint64_t **)(v157 + 24);
            v232 = (std::__shared_weak_count *)v157;
            if (v160)
            {
              v161 = (unint64_t *)&v160->__shared_owners_;
              do
                v162 = __ldaxr(v161);
              while (__stlxr(v162 - 1, v161));
              if (!v162)
              {
                ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                std::__shared_weak_count::__release_weak(v160);
              }
            }
            v163 = FeatureStyleAttributesSet::insert(*a2 + 1112, (uint64_t *)&v231);
            v165 = (uint64_t *)*v163;
            v164 = v163[1];
            if (v164)
            {
              v166 = (unint64_t *)(v164 + 8);
              do
                v167 = __ldxr(v166);
              while (__stxr(v167 + 1, v166));
            }
            v168 = v232;
            v231 = (uint64_t **)v165;
            v232 = (std::__shared_weak_count *)v164;
            if (v168)
            {
              v169 = (unint64_t *)&v168->__shared_owners_;
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
              }
            }
            *(_QWORD *)(*(_QWORD *)(*a2 + 808) + 48) = 0;
            v171 = geo::codec::Allocator::instance((geo::codec::Allocator *)v163);
            v172 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v171 + 24))(v171, 0x9D89D89D89D89D8ALL* ((uint64_t)(*(_QWORD *)(*a2 + 72) - *(_QWORD *)(*a2 + 64)) >> 3), 32);
            *(_QWORD *)(*(_QWORD *)(*a2 + 808) + 56) = v172;
            if (v172)
            {
              v173 = geo::codec::Allocator::instance(v172);
              v174 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v173 + 24))(v173, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(*a2 + 72) - *(_QWORD *)(*a2 + 64)) >> 3), 16);
              v175 = (_QWORD *)*a2;
              v176 = *(_QWORD *)(*a2 + 808);
              *(_QWORD *)(v176 + 64) = v174;
              if (v174)
              {
                v177 = v175[8];
                if (v175[9] != v177)
                {
                  v178 = 0;
                  v179 = 0;
                  while (1)
                  {
                    v180 = a2[1];
                    if (v180)
                    {
                      v181 = (unint64_t *)(v180 + 16);
                      do
                        v182 = __ldxr(v181);
                      while (__stxr(v182 + 1, v181));
                    }
                    v183 = (_QWORD *)(v177 + 104 * v179);
                    v184 = (std::__shared_weak_count *)v183[1];
                    *v183 = v175;
                    v183[1] = v180;
                    if (v184)
                      std::__shared_weak_count::__release_weak(v184);
                    v185 = v177 + 104 * v179;
                    *(_OWORD *)(v185 + 80) = xmmword_189CC14F0;
                    *(_DWORD *)(v185 + 96) = v179;
                    *(_DWORD *)(v185 + 100) = 1;
                    LODWORD(v233) = 0;
                    v230 = 0;
                    v229 = 0;
                    if ((geo::codec::chapterReadVarUint32(v10, (unsigned int *)&v233) & 1) == 0)
                      break;
                    if (!geo::codec::chapterReadVarUint32(v10, (unsigned int *)&v230 + 1))
                    {
                      v17 = 4097;
                      goto LABEL_286;
                    }
                    if (!geo::codec::chapterReadVarUint32(v10, (unsigned int *)&v230))
                    {
                      v17 = 4098;
                      goto LABEL_286;
                    }
                    v174 = geo::codec::chapterReadVarUint32(v10, &v229);
                    if (!(_DWORD)v174)
                    {
                      v17 = 4099;
                      goto LABEL_286;
                    }
                    v186 = v233;
                    v187 = *a2;
                    v188 = *(_QWORD **)(*a2 + 800);
                    if (v188[5] <= (unint64_t)v233)
                    {
                      v17 = 4101;
                      goto LABEL_286;
                    }
                    v189 = (uint64_t *)(v188[4] + 16 * v233);
                    v191 = *v189;
                    v190 = v189[1];
                    if (v190 + v191 > v188[2])
                    {
                      v17 = 4104;
                      goto LABEL_286;
                    }
                    v192 = HIDWORD(v230);
                    if (v190 <= HIDWORD(v230))
                    {
                      v17 = 4105;
                      goto LABEL_286;
                    }
                    v193 = v230;
                    v194 = v178 + v230;
                    if (v194 > v234)
                    {
                      v17 = 4106;
                      goto LABEL_286;
                    }
                    v195 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v187 + 808) + 32) + 16 * v179);
                    *v195 = v178;
                    v195[1] = v193;
                    if ((_DWORD)v193)
                    {
                      v196 = 8 * v178;
                      v197 = v193;
                      do
                      {
                        v174 = *(_QWORD *)(*(_QWORD *)(*a2 + 808) + 8);
                        *(_QWORD *)(v174 + v196) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 + 800) + 8)
                                                             + 8 * ((v192 - 1 + v197) % v190 + v191));
                        v196 += 8;
                        --v197;
                      }
                      while (v197);
                      v187 = *a2;
                      v188 = *(_QWORD **)(*a2 + 800);
                      v178 = v194;
                    }
                    v198 = v188[8];
                    if (v198)
                    {
                      v199 = *(_QWORD *)(v198 + 16 * v186 + 8);
                      v200 = 16 * v186;
                      if (v199)
                      {
                        v201 = v188[7] + 32 * *(_QWORD *)(v198 + 16 * v186);
                        while (*(_QWORD *)(v201 + 24) != v192 % v190)
                        {
                          v201 += 32;
                          if (!--v199)
                            goto LABEL_243;
                        }
                        v203 = *(_QWORD *)(*(_QWORD *)(v187 + 808) + 56)
                             + 32 * *(_QWORD *)(*(_QWORD *)(v187 + 808) + 48);
                        v204 = *(_OWORD *)(v201 + 16);
                        *(_OWORD *)v203 = *(_OWORD *)v201;
                        *(_OWORD *)(v203 + 16) = v204;
                        *(_QWORD *)(v203 + 8) = v179;
                        *(_QWORD *)(v203 + 16) = 0;
                        *(_QWORD *)(v203 + 24) = (v193 - 1);
                        v187 = *a2;
                        ++*(_QWORD *)(*(_QWORD *)(*a2 + 808) + 48);
                        v202 = 1;
                      }
                      else
                      {
LABEL_243:
                        v202 = 0;
                      }
                      v205 = *(_QWORD *)(v187 + 800);
                      v206 = *(_QWORD *)(v205 + 64);
                      if (v206)
                      {
                        v207 = *(_QWORD *)(v206 + 16 * v186 + 8);
                        if (v207)
                        {
                          v208 = (v192 + v193 - 1) % v190;
                          v209 = *(_QWORD *)(v205 + 56) + 32 * *(_QWORD *)(v206 + v200);
                          while (*(_QWORD *)(v209 + 24) != v208)
                          {
                            v209 += 32;
                            if (!--v207)
                              goto LABEL_253;
                          }
                          ++v202;
                          v210 = *(_QWORD *)(*(_QWORD *)(v187 + 808) + 56)
                               + 32 * *(_QWORD *)(*(_QWORD *)(v187 + 808) + 48);
                          v211 = *(_OWORD *)(v209 + 16);
                          *(_OWORD *)v210 = *(_OWORD *)v209;
                          *(_OWORD *)(v210 + 16) = v211;
                          *(_QWORD *)(v210 + 16) = 0;
                          *(_QWORD *)(v210 + 24) = 0;
                          *(_QWORD *)(v210 + 8) = v179;
                          v187 = *a2;
                          ++*(_QWORD *)(*(_QWORD *)(*a2 + 808) + 48);
                        }
                      }
                    }
                    else
                    {
                      v202 = 0;
                    }
LABEL_253:
                    v212 = *(_QWORD *)(v187 + 808);
                    v213 = *(_QWORD *)(v212 + 48) - v202;
                    v214 = (uint64_t *)(*(_QWORD *)(v212 + 64) + 16 * v179);
                    *v214 = v213;
                    v214[1] = v202;
                    if (v229)
                    {
                      v174 = geo::codec::accumulateStyleAttributes(v187 + 1112, (uint64_t *)&v231, v10, v177 + 104 * v179);
                      if ((v174 & 1) == 0)
                      {
                        v17 = 4158;
                        goto LABEL_286;
                      }
                    }
                    else
                    {
                      v216 = (uint64_t *)v231;
                      v215 = v232;
                      if (v232)
                      {
                        v217 = (unint64_t *)&v232->__shared_owners_;
                        do
                          v218 = __ldxr(v217);
                        while (__stxr(v218 + 1, v217));
                      }
                      v219 = (std::__shared_weak_count *)v183[4];
                      v183[3] = v216;
                      v183[4] = v215;
                      if (v219)
                      {
                        v220 = (unint64_t *)&v219->__shared_owners_;
                        do
                          v221 = __ldaxr(v220);
                        while (__stlxr(v221 - 1, v220));
                        if (!v221)
                        {
                          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                          std::__shared_weak_count::__release_weak(v219);
                        }
                      }
                    }
                    ++v179;
                    v175 = (_QWORD *)*a2;
                    v177 = *(_QWORD *)(*a2 + 64);
                    if (v179 >= 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(*a2 + 72) - v177) >> 3))
                    {
                      if (*(_QWORD *)(v175[101] + 48))
                        goto LABEL_271;
LABEL_281:
                      v223 = geo::codec::Allocator::instance((geo::codec::Allocator *)v174);
                      v224 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v223 + 40))(v223, *(_QWORD *)(*(_QWORD *)(*a2 + 808) + 56), 0);
                      *(_QWORD *)(*(_QWORD *)(*a2 + 808) + 56) = 0;
                      v225 = geo::codec::Allocator::instance(v224);
                      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v225 + 40))(v225, *(_QWORD *)(*(_QWORD *)(*a2 + 808) + 64), 0);
                      *(_QWORD *)(*(_QWORD *)(*a2 + 808) + 64) = 0;
                      goto LABEL_282;
                    }
                  }
                  v17 = 4096;
LABEL_286:
                  v16 = (FILE *)*MEMORY[0x1E0C80C10];
                  goto LABEL_36;
                }
                v178 = 0;
                if (!*(_QWORD *)(v176 + 48))
                  goto LABEL_281;
LABEL_271:
                v222 = geo::codec::Allocator::instance((geo::codec::Allocator *)v174);
                *(_QWORD *)(*(_QWORD *)(*a2 + 808) + 56) = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v222 + 32))(v222, *(_QWORD *)(*(_QWORD *)(*a2 + 808) + 56), 32 * *(_QWORD *)(*(_QWORD *)(*a2 + 808) + 48));
LABEL_282:
                if (v178 == v234)
                {
                  v34 = 1;
                  goto LABEL_37;
                }
                v16 = (FILE *)*MEMORY[0x1E0C80C10];
                v17 = 4175;
              }
              else
              {
                v16 = (FILE *)*MEMORY[0x1E0C80C10];
                v17 = 4086;
              }
            }
            else
            {
              v16 = (FILE *)*MEMORY[0x1E0C80C10];
              v17 = 4084;
            }
          }
          else
          {
            v16 = (FILE *)*MEMORY[0x1E0C80C10];
            v17 = 4075;
          }
        }
        else
        {
          v16 = (FILE *)*MEMORY[0x1E0C80C10];
          v17 = 4072;
        }
      }
      else
      {
        v16 = (FILE *)*MEMORY[0x1E0C80C10];
        v17 = 4069;
      }
    }
    goto LABEL_36;
  }
LABEL_37:
  v35 = v232;
  if (v232)
  {
    v36 = (unint64_t *)&v232->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = std::chrono::steady_clock::now().__d_.__rep_;
  v236[0] = (uint64_t *)"ChapterWrappingCoastlineFeatures";
  v231 = v236;
  a1 = (uint64_t)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v12 + 1912, (uint64_t *)v236, (uint64_t)&std::piecewise_construct, (uint64_t **)&v231);
  *(double *)(a1 + 32) = (double)((v38 - v15.__d_.__rep_) / 1000) * 0.001;
  if (v11)
  {
    v39 = (unint64_t *)&v11->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if ((v34 & 1) == 0)
  {
    v18 = 0;
    v41 = 4020;
    goto LABEL_91;
  }
LABEL_31:
  v31 = 1;
  if (v2)
  {
LABEL_95:
    if (v10)
    {
      if (*(_BYTE *)v10)
      {
        v81 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
        a1 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v81 + 40))(v81, v10[5], 0);
      }
      v82 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
      (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v82 + 40))(v82, v10, 0);
    }
  }
  return v31;
}

void sub_1886DC080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t *a26,std::__shared_weak_count *a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *v36;
  unint64_t v37;

  v32 = a27;
  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  *(_QWORD *)(v30 - 96) = "ChapterWrappingCoastlineFeatures";
  a26 = (uint64_t *)(v30 - 96);
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v29 + 1912, (uint64_t *)(v30 - 96), (uint64_t)&std::piecewise_construct, &a26)+ 4) = (double)((rep - v28) / 1000) * 0.001;
  if (v27)
  {
    v36 = (unint64_t *)&v27->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readDebugBlob(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  FILE *v28;
  int v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t k;
  _QWORD *v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  uint64_t v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  void **v45;
  void *v46;
  void **v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  std::chrono::steady_clock::time_point v51;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  void **v56;
  void *v57;
  void **v58;
  void *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  FILE *v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  float *v97;
  int v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int32x2_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  float v107;
  uint64_t v108;
  _BOOL8 v109;
  uint64_t v110;
  geo::codec::Allocator *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int32x2_t v115;
  _BOOL8 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  int32x2_t v127;
  int64x2_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  geo::codec::Allocator *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  geo::codec::Allocator *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  FILE *v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int16 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned __int16 *v209;
  unsigned __int16 v210;
  unsigned __int16 v211;
  uint64_t v212;
  uint64_t v213;
  uint16x8_t *v214;
  uint16x8_t v215;
  unint64_t v216;
  uint16x8_t v217;
  uint64_t v218;
  unsigned __int16 *v219;
  unsigned __int16 v220;
  unsigned int v221;
  uint64_t v222;
  geo::codec::Allocator *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  char v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unsigned int v237;
  _QWORD *v238;
  uint64_t v239;
  unint64_t v240;
  double *v241;
  double *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unint64_t v249;
  unint64_t v250;
  unsigned int v251;
  _DWORD *v252;
  float *v253;
  float v254;
  uint64_t v255;
  unsigned int v256;
  uint64_t v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  unint64_t v263;
  unint64_t v264;
  unsigned int v265;
  uint64_t v266;
  unint64_t v267;
  BOOL v268;
  BOOL v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  unsigned int v276;
  unint64_t v277;
  float *v278;
  uint64_t v279;
  unint64_t v280;
  BOOL v281;
  uint64_t v282;
  int32x4_t v283;
  uint64x2_t v284;
  float64x2_t v285;
  double v286;
  unsigned int v287;
  unint64_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float *v291;
  int32x2_t v292;
  int32x2_t *v293;
  float32x2_t *v294;
  float32_t v295;
  int v296;
  int *v297;
  int v298;
  uint64_t v300;
  int *v301;
  uint64_t *v302;
  uint64_t v303;
  int *v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unsigned int v308;
  uint64_t v309;
  float v310;
  unsigned int v311;
  float32x2_t *v312;
  double v313;
  double v314;
  float32_t v315;
  float32x2_t *v316;
  float v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  double v321;
  uint64_t v322;
  double v323;
  double v324;
  double v325;
  double v326;
  float v327;
  uint64_t v328;
  float v329;
  uint64_t v330;
  unint64_t v331;
  int v332;
  float v333;
  float v334;
  float v335;
  uint64_t v336;
  int v337;
  float v338;
  float v339;
  float v340;
  uint64_t v342;
  int *v343;
  _QWORD *v344;
  uint64_t v345;
  _QWORD *v346;
  int32x4_t *v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  BOOL v353;
  unint64_t v354;
  int v355;
  unsigned int v356;
  int32x4_t *v357;
  float32x4_t *v358;
  unint64_t v359;
  float32x4_t v360;
  int *v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  _DWORD *v368;
  unsigned int v369;
  int v370;
  int v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  char v375;
  uint64_t v376;
  uint64_t v377;
  FILE *v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t *v382;
  unint64_t v383;
  uint64_t v384;
  FILE *v385;
  int v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  char v390;
  uint64_t v391;
  unint64_t *v392;
  unint64_t v393;
  uint64_t v394;
  FILE *v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t *v423;
  uint64_t *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t *v431;
  unint64_t v432;
  std::chrono::steady_clock::time_point v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  int v439;
  uint64_t v440;
  int v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  int v446;
  uint64_t v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  const float *v451;
  double v452;
  uint64_t v453;
  double v454;
  int32x2_t v455;
  double v456;
  unint64_t v457;
  unsigned int v458;
  double v459;
  int v460;
  uint64_t v461;
  int v462;
  float v463;
  float *v464;
  int32x2_t v465;
  unint64_t v466;
  unint64_t v467;
  int v468;
  int v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unsigned int v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unint64_t v484;
  uint64_t v485;
  int16x8_t v486;
  int16x8_t *v487;
  unint64_t v488;
  int16x8_t v489;
  uint64_t v490;
  _WORD *v491;
  unint64_t v492;
  uint64_t v493;
  geo::codec::Allocator *v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t v498;
  unsigned int v499;
  _WORD *v500;
  uint64_t v501;
  int v502;
  unint64_t v503;
  BOOL v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unsigned __int16 v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  int v516;
  unint64_t v517;
  char v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  __int16 v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unsigned __int16 v527;
  unint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t *v533;
  uint64_t *v534;
  uint64_t v535;
  uint64_t v536;
  __int16 v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t *v541;
  unint64_t v542;
  unint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  unsigned int v547;
  unsigned int i;
  unint64_t v549;
  unint64_t v550;
  int v551;
  unint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  unint64_t *v556;
  unint64_t v557;
  std::chrono::steady_clock::time_point v558;
  uint64_t v559;
  uint64_t v560;
  geo::codec::Allocator *v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  geo::codec::Allocator **v567;
  _WORD *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  geo::codec::Allocator *v573;
  unint64_t v574;
  unint64_t v575;
  uint64_t v576;
  unint64_t v577;
  geo::codec::Allocator *v578;
  uint64_t v579;
  uint64_t v580;
  _WORD *v581;
  uint64_t v582;
  geo::codec::Allocator *v583;
  uint64_t v584;
  _QWORD *v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t v591;
  uint64_t v592;
  _WORD *v593;
  uint64_t v594;
  _QWORD *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  geo::codec::Allocator *v601;
  uint64_t v602;
  uint64_t *v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  _WORD *v607;
  uint64_t v608;
  unint64_t v609;
  unint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t Transformation;
  uint64_t v614;
  uint64_t *v615;
  unint64_t j;
  uint64_t v617;
  uint64_t v618;
  _WORD *v619;
  uint64_t v620;
  geo::codec::Allocator *v621;
  uint64_t v622;
  unint64_t v623;
  uint64_t v624;
  unint64_t v625;
  uint64_t v626;
  _WORD *v627;
  uint64_t v628;
  geo::codec::Allocator *v629;
  unint64_t v630;
  uint64_t v631;
  unint64_t v632;
  uint64_t v633;
  int v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  unint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t *v643;
  unint64_t v644;
  uint64_t v645;
  unint64_t v646;
  uint64_t v647;
  uint64_t *v648;
  unint64_t v649;
  uint64_t *v650;
  uint64_t v651;
  unint64_t v652;
  uint64_t v653;
  unint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  unint64_t v658;
  uint64_t v659;
  uint64_t *v660;
  uint64_t v661;
  uint64_t *v662;
  uint64_t v663;
  uint64_t v664;
  float v665;
  float v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  unint64_t *v671;
  unint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unint64_t *v678;
  unint64_t v679;
  int v680;
  uint64_t v681;
  uint64_t v682;
  geo::codec::Allocator *v683;
  uint64_t v684;
  void *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unint64_t *v689;
  unint64_t v690;
  int v691;
  uint64_t v692;
  unint64_t v693;
  uint64_t v694;
  uint64_t v695;
  unint64_t v696;
  unint64_t v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  unsigned __int16 *v706;
  int v707;
  unint64_t v708;
  _QWORD *v709;
  int v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  int v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  int v719;
  float64x2_t v723;
  double v724;
  uint64_t v725;
  float32x2_t *v726;
  uint64_t v727;
  uint64_t v728;
  float32x2_t *v729;
  uint64_t v730;
  float32x4_t v731;
  uint64_t v732;
  float *v733;
  float v734;
  uint64_t VarUint32;
  uint64_t v736;
  unint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  unint64_t v741;
  FILE *v742;
  int v743;
  NSObject *v744;
  uint64_t v745;
  uint64_t v746;
  uint64x2_t *v747;
  int v748;
  uint64_t v749;
  uint64_t v750;
  char v751;
  uint64_t v752;
  uint64_t v753;
  int *v754;
  uint64_t v755;
  uint64_t v756;
  int v757;
  uint64_t v758;
  unsigned int v759;
  int v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  unint64_t *v764;
  unint64_t *v765;
  unsigned __int8 v766;
  uint64_t v767;
  int v768;
  int *v769;
  _QWORD *v770;
  unsigned int v771;
  uint64_t *v772;
  int v773;
  uint64_t v774;
  uint64_t v775;
  int *v776;
  uint64_t v777;
  uint64_t v778;
  int v779;
  int v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  unint64_t v784;
  unsigned int v785;
  unint64_t v786;
  unsigned int v787;
  _BYTE *v788;
  double v789;
  uint64_t v790;
  _WORD *v791;
  __int16 v792;
  unint64_t v793;
  unint64_t v794;
  int *v795;
  _WORD *v796;
  uint64_t v797;
  int v798;
  uint64_t v799;
  unint64_t v800;
  char v801;
  uint64_t v802;
  uint64_t v803;
  unint64_t v804;
  uint64_t v805;
  unint64_t v806;
  uint64_t v807;
  unint64_t v808;
  float64x2_t v809;
  double v810;
  unint64_t v811[2];
  double v812;
  __int128 v813;
  double v814;
  float64x2_t v815;
  double v816;
  int v817[2];
  uint64_t v818;
  uint64_t v819;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v820;
  int *v821;
  int *v822;
  uint64_t v823;
  uint64_t v824;
  int *v825;
  uint64_t v826;
  uint64_t v827;
  geo::codec::Allocator *v828;
  __int128 v829;
  __int128 v830;
  void *__src;
  uint64_t v832;
  uint64_t v833;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v834;
  int v835;
  float v836;
  float v837;
  char v838;
  uint64_t *v839;
  int v840;
  unsigned int v841;
  unsigned int v842;
  unsigned int v843;
  __int128 v844;
  __int16 v845;
  uint64_t v846;
  unsigned int v847;
  unsigned int v848;
  double v849;
  double v850;
  double v851;
  unsigned __int16 v852;
  int v853;
  char v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  __int128 __p;
  __int128 v864;
  int v865;
  __int128 v866;
  __int128 v867;
  int v868;
  const char *v869;
  uint64_t v870;
  std::__shared_weak_count *v871;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint8_t buf[8];
  uint64_t v874;
  uint64_t v875;
  geo::codec::Allocator *v876;
  uint64_t v877;
  float32x4x3_t v878;
  float32x4x3_t v879;
  float32x4x3_t v880;
  float32x4x3_t v881;

  v877 = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  if (!v2)
    return 1;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 100)
  {
    v4 = ++v5;
    if (v2 <= v5)
      return 1;
  }
  v6 = geo::codec::chapterAt((uint64_t)a1, v5, 100, *a2 + 1912);
  if (!v6)
    return 1;
  v7 = v6;
  v9 = *a2;
  v8 = a2[1];
  v869 = "ChapterDebugBlob";
  v870 = v9;
  v871 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v12 = *(_QWORD *)(v7 + 48);
  v13 = *(_QWORD *)(v7 + 56);
  v14 = v12 + 4;
  if (v12 + 4 <= v13)
  {
    v21 = *(_DWORD *)(*(_QWORD *)(v7 + 40) + v12);
    v15 = v21;
    v16 = BYTE1(v21);
    v17 = BYTE2(v21);
    v18 = HIBYTE(v21);
    *(_QWORD *)(v7 + 48) = v14;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
  }
  v866 = 0u;
  v867 = 0u;
  v868 = 1065353216;
  __p = 0u;
  v864 = 0u;
  v865 = 1065353216;
  v860 = 0;
  v859 = 0;
  v861 = 0;
  {
    v802 = operator new();
    geo::MallocZoneAllocator::MallocZoneAllocator(v802, "GeoCodec", 0x99AFC36000000008, 0, 0);
    geo::codec::Allocator::instance(void)::alloc = v802;
  }
  v862 = geo::codec::Allocator::instance(void)::alloc;
  v856 = 0;
  v855 = 0;
  v857 = 0;
  {
    v803 = operator new();
    geo::MallocZoneAllocator::MallocZoneAllocator(v803, "GeoCodec", 0x99AFC36000000008, 0, 0);
    geo::codec::Allocator::instance(void)::alloc = v803;
  }
  v858 = geo::codec::Allocator::instance(void)::alloc;
  if (v14 > v13)
  {
LABEL_18:
    v24 = 1;
    goto LABEL_31;
  }
  if (v15 != 68)
  {
    v28 = (FILE *)*MEMORY[0x1E0C80C10];
    v29 = 8068;
    goto LABEL_29;
  }
  if (v16 != 86)
  {
    v28 = (FILE *)*MEMORY[0x1E0C80C10];
    v29 = 8069;
    goto LABEL_29;
  }
  if (v17 != 100)
  {
    v28 = (FILE *)*MEMORY[0x1E0C80C10];
    v29 = 8070;
    goto LABEL_29;
  }
  if (v18 != 118)
  {
    v28 = (FILE *)*MEMORY[0x1E0C80C10];
    v29 = 8071;
    goto LABEL_29;
  }
  v26 = *(_QWORD *)(v7 + 48);
  v25 = *(_QWORD *)(v7 + 56);
  v27 = v26 + 4;
  if (v26 + 4 > v25)
  {
    v28 = (FILE *)*MEMORY[0x1E0C80C10];
    v29 = 8072;
LABEL_29:
    fprintf(v28, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v29);
    goto LABEL_30;
  }
  v60 = *(_QWORD *)(v7 + 40);
  v61 = *(_DWORD *)(v60 + v26);
  *(_DWORD *)(v7 + 64) = v61;
  *(_QWORD *)(v7 + 48) = v27;
  if (v61 <= 0xF)
  {
    v28 = (FILE *)*MEMORY[0x1E0C80C10];
    v29 = 8073;
    goto LABEL_29;
  }
  v62 = *a2;
  *(_DWORD *)(*a2 + 2792) = v61;
  v63 = v26 + 8;
  if (v26 + 8 > v25)
  {
    v28 = (FILE *)*MEMORY[0x1E0C80C10];
    v29 = 8076;
    goto LABEL_29;
  }
  *(_DWORD *)(v62 + 1952) = *(_DWORD *)(v60 + v27);
  *(_QWORD *)(v7 + 48) = v63;
  *(_BYTE *)(v62 + 1956) = 0;
  if (*(_DWORD *)(v7 + 64) >= 0x11u)
  {
    if (v26 + 9 > v25)
    {
      v28 = (FILE *)*MEMORY[0x1E0C80C10];
      v29 = 8080;
      goto LABEL_29;
    }
    *(_BYTE *)(v62 + 1956) = *(_BYTE *)(v60 + v63);
    v25 = *(_QWORD *)(v7 + 56);
    v63 = *(_QWORD *)(v7 + 48) + 1;
    *(_QWORD *)(v7 + 48) = v63;
    v62 = *a2;
  }
  v64 = v63 + 4;
  if (v63 + 4 > v25)
  {
    v28 = (FILE *)*MEMORY[0x1E0C80C10];
    v29 = 8083;
    goto LABEL_29;
  }
  v65 = *(_QWORD *)(v7 + 40);
  v66 = *(_DWORD *)(v65 + v63);
  *(_DWORD *)(v62 + 1960) = v66;
  *(_QWORD *)(v7 + 48) = v64;
  v67 = v63 + 8;
  if (v67 > v25)
  {
    v28 = (FILE *)*MEMORY[0x1E0C80C10];
    v29 = 8085;
    goto LABEL_29;
  }
  v68 = *(_DWORD *)(v65 + v64);
  *(_QWORD *)(v7 + 48) = v67;
  std::vector<GeoCodecsVectorTilePoint3D,geo::StdAllocator<GeoCodecsVectorTilePoint3D,geo::codec::Allocator>>::resize(v62 + 1968, (v66 + v68));
  v69 = *a2;
  v70 = *(_DWORD *)(*a2 + 1952);
  v854 = 0;
  v845 = 0;
  v838 = 0;
  if ((v70 & 4) != 0)
  {
    if (!geo::codec::DepthDequantizer::readInfo((uint64_t)&v835, (_QWORD *)v7))
    {
      v28 = (FILE *)*MEMORY[0x1E0C80C10];
      v29 = 8097;
      goto LABEL_29;
    }
    v69 = *a2;
  }
  v801 = v70;
  v798 = v68;
  __src = "ChapterDebugBlob_UncompressedVertices";
  v832 = v69;
  v71 = a2[1];
  v833 = v71;
  if (v71)
  {
    v72 = (unint64_t *)(v71 + 8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v834 = std::chrono::steady_clock::now().__d_.__rep_;
  v74 = *(_QWORD *)(v7 + 48);
  if (*(_BYTE *)(*a2 + 1956) == 1)
  {
    geo::codec::ECEFDequantizer::readInfo((uint64_t)&v839, (_QWORD *)v7, (v70 & 4) == 0);
    v80 = *(_QWORD *)(v7 + 48);
    v81 = *(_QWORD *)(v7 + 56);
    v82 = v80 + 2;
    if (v80 + 2 > v81)
    {
      v78 = (FILE *)*MEMORY[0x1E0C80C10];
      v79 = 8138;
      goto LABEL_202;
    }
    v83 = *(_QWORD *)(v7 + 40);
    v84 = *(unsigned __int16 *)(v83 + v80);
    *(_QWORD *)(v7 + 48) = v82;
    v85 = v80 + 4;
    if (v80 + 4 > v81)
    {
      v78 = (FILE *)*MEMORY[0x1E0C80C10];
      v79 = 8139;
      goto LABEL_202;
    }
    v792 = *(_WORD *)(v83 + v82);
    *(_QWORD *)(v7 + 48) = v85;
    v88 = v80 + 8;
    _CF = v81 >= v80 + 8;
    v90 = v81 - (v80 + 8);
    if (!_CF)
    {
      v78 = (FILE *)*MEMORY[0x1E0C80C10];
      v79 = 8141;
      goto LABEL_202;
    }
    v785 = *(_DWORD *)(v83 + v85);
    *(_QWORD *)(v7 + 8) = v83 + v88;
    v93 = (uint64_t *)(v7 + 8);
    *(_QWORD *)(v7 + 48) = v88;
    *(_BYTE *)(v7 + 32) = 1;
    *(_QWORD *)(v7 + 16) = v90;
    *(_QWORD *)(v7 + 24) = 0;
    if (*(_DWORD *)(*a2 + 1960))
    {
      v94 = 0;
      v95 = 0;
      do
      {
        *(_DWORD *)buf = 0;
        if (!BitstreamUnpack((uint64_t *)(v7 + 8), (int *)buf, (unsigned __int16)v839))
        {
          v78 = (FILE *)*MEMORY[0x1E0C80C10];
          v79 = 8149;
          goto LABEL_202;
        }
        LODWORD(v829) = 0;
        if (!BitstreamUnpack((uint64_t *)(v7 + 8), (int *)&v829, WORD1(v839)))
        {
          v78 = (FILE *)*MEMORY[0x1E0C80C10];
          v79 = 8152;
          goto LABEL_202;
        }
        LODWORD(v825) = 0;
        if (!BitstreamUnpack((uint64_t *)(v7 + 8), (int *)&v825, WORD2(v839)))
        {
          v78 = (FILE *)*MEMORY[0x1E0C80C10];
          v79 = 8155;
          goto LABEL_202;
        }
        v96 = *a2;
        v97 = (float *)(*(_QWORD *)(*a2 + 1968) + v94);
        v98 = v829;
        v99 = (int)v825;
        *v97 = *(float *)&v844 + (float)(*((float *)&v844 + 3) * (float)(int)(v841 + *(_DWORD *)buf));
        v97[1] = *((float *)&v844 + 1) + (float)(*((float *)&v844 + 3) * (float)(int)(v842 + v98));
        v97[2] = *((float *)&v844 + 2) + (float)(*((float *)&v844 + 3) * (float)(int)(v843 + v99));
        ++v95;
        v94 += 12;
      }
      while (v95 < *(unsigned int *)(v96 + 1960));
    }
  }
  else
  {
    if (*(_BYTE *)(*a2 + 1956))
    {
      v78 = (FILE *)*MEMORY[0x1E0C80C10];
      v79 = 8162;
      goto LABEL_202;
    }
    if ((geo::codec::MercatorDequantizer::readInfo((uint64_t)&v846, (_QWORD *)v7) & 1) == 0)
    {
      v78 = (FILE *)*MEMORY[0x1E0C80C10];
      v79 = 8104;
      goto LABEL_202;
    }
    v75 = *(_QWORD *)(v7 + 48);
    v76 = *(_QWORD *)(v7 + 56);
    v77 = v75 + 2;
    if (v75 + 2 > v76)
    {
      v78 = (FILE *)*MEMORY[0x1E0C80C10];
      v79 = 8107;
      goto LABEL_202;
    }
    v86 = *(_QWORD *)(v7 + 40);
    v84 = *(unsigned __int16 *)(v86 + v75);
    *(_QWORD *)(v7 + 48) = v77;
    v87 = v75 + 4;
    if (v75 + 4 > v76)
    {
      v78 = (FILE *)*MEMORY[0x1E0C80C10];
      v79 = 8108;
      goto LABEL_202;
    }
    v792 = *(_WORD *)(v86 + v77);
    *(_QWORD *)(v7 + 48) = v87;
    v91 = v75 + 8;
    _CF = v76 >= v75 + 8;
    v92 = v76 - (v75 + 8);
    if (!_CF)
    {
      v78 = (FILE *)*MEMORY[0x1E0C80C10];
      v79 = 8109;
      goto LABEL_202;
    }
    v785 = *(_DWORD *)(v86 + v87);
    *(_QWORD *)(v7 + 8) = v86 + v91;
    v93 = (uint64_t *)(v7 + 8);
    *(_QWORD *)(v7 + 48) = v91;
    *(_BYTE *)(v7 + 32) = 1;
    *(_QWORD *)(v7 + 16) = v92;
    *(_QWORD *)(v7 + 24) = 0;
    if (*(_DWORD *)(*a2 + 1960))
    {
      v100 = 0;
      v101 = 0;
      do
      {
        *(_DWORD *)buf = 0;
        LODWORD(v829) = 0;
        if (!BitstreamUnpack((uint64_t *)(v7 + 8), (int *)buf, (unsigned __int16)v846))
        {
          v79 = 8117;
          goto LABEL_201;
        }
        if (!BitstreamUnpack((uint64_t *)(v7 + 8), (int *)&v829, (unsigned __int16)v846))
        {
          v79 = 8118;
          goto LABEL_201;
        }
        v102 = *a2;
        v103 = (int32x2_t)vld1_dup_f32((const float *)&v846 + 1);
        *(float32x2_t *)(*(_QWORD *)(*a2 + 1968) + v100) = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(vadd_s32(v103, (int32x2_t)__PAIR64__(v829, *(unsigned int *)buf)))), v850));
        ++v101;
        v104 = *(unsigned int *)(v102 + 1960);
        v100 += 12;
      }
      while (v101 < v104);
      if ((_DWORD)v104)
      {
        v105 = 0;
        v106 = 8;
        do
        {
          *(_DWORD *)buf = 0;
          if (!BitstreamUnpack((uint64_t *)(v7 + 8), (int *)buf, v852))
          {
            v78 = (FILE *)*MEMORY[0x1E0C80C10];
            v79 = 8127;
            goto LABEL_202;
          }
          v107 = ((double)(__int16)v847
                + v851
                * (double)(v853 + (unint64_t)*(unsigned int *)buf)
                * (double)(SHIWORD(v847) - (__int16)v847))
               * v849;
          v108 = *a2;
          *(float *)(*(_QWORD *)(*a2 + 1968) + v106) = v107;
          ++v105;
          v106 += 12;
        }
        while (v105 < *(unsigned int *)(v108 + 1960));
      }
    }
  }
  LODWORD(v825) = 0;
  v109 = BitstreamUnpack(v93, (int *)&v825, 0x10uLL);
  if (!v109)
  {
    v78 = (FILE *)*MEMORY[0x1E0C80C10];
    v79 = 8168;
    goto LABEL_202;
  }
  v110 = geo::codec::Allocator::instance((geo::codec::Allocator *)v109);
  v782 = v825;
  v111 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v110 + 16))(v110, 16 * v825, 8);
  *(_QWORD *)(*a2 + 2008) = v111;
  v112 = geo::codec::Allocator::instance(v111);
  v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v112 + 16))(v112, 24 * v782, 8);
  v114 = *a2;
  *(_QWORD *)(*a2 + 2024) = v113;
  if (!(_DWORD)v782)
    goto LABEL_162;
  v779 = 0;
  v789 = 1.0 / (double)(1 << (v792 - 1));
  v793 = v84;
  v115 = vdup_n_s32(v785);
  do
  {
    *(_DWORD *)buf = 0;
    LODWORD(v829) = 0;
    if (!BitstreamUnpack(v93, (int *)buf, 0x20uLL))
    {
      v79 = 8175;
LABEL_201:
      v78 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_202;
    }
    if (!BitstreamUnpack(v93, (int *)&v829, 0x10uLL))
    {
      v79 = 8176;
      goto LABEL_201;
    }
    LODWORD(v821) = 0;
    v116 = BitstreamUnpack(v93, (int *)&v821, 8uLL);
    if (!v116)
    {
      v78 = (FILE *)*MEMORY[0x1E0C80C10];
      v79 = 8178;
      goto LABEL_202;
    }
    if (v821 >= 2)
    {
      v78 = (FILE *)*MEMORY[0x1E0C80C10];
      v79 = 8179;
      goto LABEL_202;
    }
    if ((_DWORD)v821 == 1)
    {
      v129 = *(_QWORD *)(*a2 + 2024);
      v130 = *(unsigned __int16 *)(*a2 + 2016);
      v131 = v129 + 24 * *(unsigned __int16 *)(*a2 + 2016);
      *(_WORD *)(*a2 + 2016) = v130 + 1;
      *(_DWORD *)v131 = *(_DWORD *)buf;
      *(_WORD *)(v131 + 4) = v829;
      if (!BitstreamUnpack(v93, (int *)(v131 + 8), 0x20uLL))
      {
        v78 = (FILE *)*MEMORY[0x1E0C80C10];
        v79 = 8206;
        goto LABEL_202;
      }
      if (!BitstreamUnpack(v93, (int *)(v129 + 24 * v130 + 12), 0x20uLL))
      {
        v78 = (FILE *)*MEMORY[0x1E0C80C10];
        v79 = 8207;
        goto LABEL_202;
      }
      if (!BitstreamUnpack(v93, (int *)(v129 + 24 * v130 + 16), 0x20uLL))
      {
        v78 = (FILE *)*MEMORY[0x1E0C80C10];
        v79 = 8208;
        goto LABEL_202;
      }
      v113 = BitstreamUnpack(v93, (int *)(v129 + 24 * v130 + 20), 0x20uLL);
      if ((v113 & 1) == 0)
      {
        v78 = (FILE *)*MEMORY[0x1E0C80C10];
        v79 = 8209;
        goto LABEL_202;
      }
    }
    else
    {
      v117 = *(_QWORD *)(*a2 + 2008);
      v118 = *(unsigned __int16 *)(*a2 + 2000);
      v119 = v117 + 16 * v118;
      *(_WORD *)(*a2 + 2000) = v118 + 1;
      *(_DWORD *)v119 = *(_DWORD *)buf;
      v120 = v829;
      *(_WORD *)(v119 + 4) = v829;
      v121 = geo::codec::Allocator::instance((geo::codec::Allocator *)v116);
      v122 = 8 * v120;
      v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v121 + 16))(v121, 8 * v120, 8);
      v123 = v117 + 16 * v118;
      *(_QWORD *)(v123 + 8) = v113;
      v124 = (uint64_t *)(v123 + 8);
      if ((_DWORD)v120)
      {
        v125 = 0;
        while (1)
        {
          v126 = *v124;
          v817[0] = 0;
          LODWORD(v815.f64[0]) = 0;
          if (!BitstreamUnpack(v93, v817, v793))
          {
            v79 = 0x2000;
            goto LABEL_201;
          }
          v113 = BitstreamUnpack(v93, (int *)&v815, v793);
          if (!(_DWORD)v113)
            break;
          v127 = vadd_s32((int32x2_t)__PAIR64__(LODWORD(v815.f64[0]), v817[0]), v115);
          v128.i64[0] = v127.i32[0];
          v128.i64[1] = v127.i32[1];
          *(float32x2_t *)(v126 + v125) = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_s64(v128), v789));
          v125 += 8;
          if (v122 == v125)
            goto LABEL_160;
        }
        v79 = 8193;
        goto LABEL_201;
      }
    }
LABEL_160:
    ++v779;
  }
  while (v779 != (_DWORD)v782);
  v114 = *a2;
LABEL_162:
  if (*(_WORD *)(v114 + 2000))
  {
    v132 = geo::codec::Allocator::instance((geo::codec::Allocator *)v113);
    v113 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v132 + 32))(v132, *(_QWORD *)(*a2 + 2008), 16 * *(unsigned __int16 *)(*a2 + 2000));
    goto LABEL_172;
  }
  if (*(_QWORD *)(v114 + 2008))
  {
    v133 = geo::codec::Allocator::instance((geo::codec::Allocator *)v113);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v133 + 40))(v133, *(_QWORD *)(*a2 + 2008), 0);
    v113 = 0;
LABEL_172:
    v114 = *a2;
    *(_QWORD *)(*a2 + 2008) = v113;
  }
  if (*(_WORD *)(v114 + 2016))
  {
    v134 = geo::codec::Allocator::instance((geo::codec::Allocator *)v113);
    v135 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v134 + 32))(v134, *(_QWORD *)(*a2 + 2024), 24 * *(unsigned __int16 *)(*a2 + 2016));
    v114 = *a2;
    *(_QWORD *)(*a2 + 2024) = v135;
  }
  else if (*(_QWORD *)(v114 + 2024))
  {
    v136 = geo::codec::Allocator::instance((geo::codec::Allocator *)v113);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v136 + 40))(v136, *(_QWORD *)(*a2 + 2008), 0);
    v114 = *a2;
    *(_QWORD *)(*a2 + 2008) = 0;
  }
  if ((*(_QWORD *)(v7 + 24) & 7) != 0)
    v137 = *(_QWORD *)(v7 + 48) + (*(_QWORD *)(v7 + 24) >> 3) + 1;
  else
    v137 = *(_QWORD *)(v7 + 48) + (*(_QWORD *)(v7 + 24) >> 3);
  *(_QWORD *)(v7 + 48) = v137;
  *(_BYTE *)(v7 + 32) = 0;
  *(_QWORD *)&v829 = "ChapterDebugBlob_UncompressedVertices";
  *(_QWORD *)buf = &v829;
  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v114 + 1912, (uint64_t *)&v829, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)[3] = v137 - v74;
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&__src);
  v139 = *(_QWORD *)(v7 + 48);
  v140 = *(_QWORD *)(v7 + 56);
  v141 = v139 + 4;
  if (v139 + 4 > v140)
  {
    v28 = (FILE *)*MEMORY[0x1E0C80C10];
    v29 = 8234;
    goto LABEL_29;
  }
  v142 = *(_QWORD *)(v7 + 40);
  *(_DWORD *)(*a2 + 2032) = *(_DWORD *)(v142 + v139);
  *(_QWORD *)(v7 + 48) = v141;
  v143 = v139 + 8;
  if (v139 + 8 > v140)
  {
    v28 = (FILE *)*MEMORY[0x1E0C80C10];
    v29 = 8235;
    goto LABEL_29;
  }
  v780 = *(_DWORD *)(v142 + v141);
  *(_QWORD *)(v7 + 48) = v143;
  if (*(_DWORD *)(v7 + 64) < 0x16u)
  {
    v147 = 0;
  }
  else
  {
    v145 = v139 + 12;
    if (v145 > v140)
    {
      v28 = (FILE *)*MEMORY[0x1E0C80C10];
      v29 = 8237;
      goto LABEL_29;
    }
    v147 = *(_DWORD *)(v142 + v143);
    *(_QWORD *)(v7 + 48) = v145;
  }
  v149 = geo::codec::Allocator::instance(v138);
  v150 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v149 + 24))(v149, (v147 + v780 + *(_DWORD *)(*a2 + 2032)), 2);
  v151 = *a2;
  *(_QWORD *)(v151 + 2040) = v150;
  __src = "ChapterDebugBlob_UncompressedIndexes";
  v832 = v151;
  v152 = a2[1];
  v833 = v152;
  if (v152)
  {
    v153 = (unint64_t *)(v152 + 8);
    do
      v154 = __ldxr(v153);
    while (__stxr(v154 + 1, v153));
  }
  v834 = 0;
  v834 = std::chrono::steady_clock::now().__d_.__rep_;
  v155 = *(_QWORD *)(v7 + 48);
  v156 = *a2;
  v157 = *(unsigned int *)(*a2 + 2032);
  if ((_DWORD)v157)
  {
    v158 = 0;
    v159 = *(_QWORD *)(v7 + 56);
    v160 = 2 * v157;
    while (1)
    {
      v161 = v155 + v158 + 2;
      if (v161 > v159)
        break;
      *(_WORD *)(*(_QWORD *)(v156 + 2040) + v158) = *(_WORD *)(*(_QWORD *)(v7 + 40) + v155 + v158);
      *(_QWORD *)(v7 + 48) = v161;
      v158 += 2;
      if (v160 == v158)
      {
        v162 = v155 + v158;
        goto LABEL_217;
      }
    }
    v78 = (FILE *)*MEMORY[0x1E0C80C10];
    v79 = 8246;
LABEL_202:
    fprintf(v78, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v79);
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&__src);
    goto LABEL_30;
  }
  v162 = *(_QWORD *)(v7 + 48);
LABEL_217:
  *(_QWORD *)&v829 = "ChapterDebugBlob_UncompressedIndexes";
  *(_QWORD *)buf = &v829;
  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v156 + 1912, (uint64_t *)&v829, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)[3] = v162 - v155;
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&__src);
  v832 = 0;
  __src = 0;
  v833 = 0;
  v834 = geo::codec::Allocator::instance(v163);
  v164 = geo::codec::_readMaterials(v7, (unint64_t *)&__src, &v855, &v859, *a2 + 1112, 0);
  if ((v164 & 1) == 0)
  {
    v171 = (FILE *)*MEMORY[0x1E0C80C10];
    v172 = 8252;
    goto LABEL_221;
  }
  *(_WORD *)(*a2 + 2800) = (v832 - (_DWORD)__src) >> 3;
  v165 = geo::codec::Allocator::instance((geo::codec::Allocator *)v164);
  v166 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v165 + 16))(v165, 8 * *(unsigned __int16 *)(*a2 + 2800), 8);
  v167 = *a2;
  *(_QWORD *)(v167 + 2824) = v166;
  memcpy(v166, __src, 8 * *(unsigned __int16 *)(v167 + 2800));
  v168 = *(_QWORD *)(v7 + 48);
  v169 = *(_QWORD *)(v7 + 56);
  v170 = v168 + 2;
  if (v168 + 2 > v169)
  {
    v171 = (FILE *)*MEMORY[0x1E0C80C10];
    v172 = 8259;
LABEL_221:
    fprintf(v171, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v172);
    goto LABEL_222;
  }
  v173 = *(_QWORD *)(v7 + 40);
  v174 = *(unsigned __int16 *)(v173 + v168);
  *(_QWORD *)(v7 + 48) = v170;
  v175 = *a2;
  v767 = v174;
  *(_WORD *)(*a2 + 2048) = v174;
  v176 = v168 + 4;
  if (v168 + 4 > v169)
  {
    v171 = (FILE *)*MEMORY[0x1E0C80C10];
    v172 = 8262;
    goto LABEL_221;
  }
  v763 = *(unsigned __int16 *)(v173 + v170);
  *(_QWORD *)(v7 + 48) = v176;
  v177 = v168 + 6;
  if (v168 + 6 > v169)
  {
    v171 = (FILE *)*MEMORY[0x1E0C80C10];
    v172 = 8263;
    goto LABEL_221;
  }
  v178 = *(unsigned __int16 *)(v173 + v176);
  *(_QWORD *)(v7 + 48) = v177;
  if (*(_DWORD *)(v7 + 64) < 0x16u)
  {
    v180 = 0;
  }
  else
  {
    v179 = v168 + 8;
    if (v179 > v169)
    {
      v171 = (FILE *)*MEMORY[0x1E0C80C10];
      v172 = 8265;
      goto LABEL_221;
    }
    v180 = *(unsigned __int16 *)(v173 + v177);
    *(_QWORD *)(v7 + 48) = v179;
  }
  *(_QWORD *)buf = "ChapterDebugBlob_UncompressedMesh";
  v874 = v175;
  v181 = a2[1];
  v875 = v181;
  if (v181)
  {
    v182 = (unint64_t *)(v181 + 8);
    do
      v183 = __ldxr(v182);
    while (__stxr(v183 + 1, v182));
  }
  v876 = 0;
  v876 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
  v184 = *(_QWORD *)(v7 + 48);
  v185 = geo::codec::Allocator::instance(v876);
  v186 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v185 + 24))(v185, v763 + v767 + v178 + v180, 64);
  v187 = *a2;
  *(_QWORD *)(*a2 + 2056) = v186;
  if ((_DWORD)v767)
  {
    v188 = 0;
    while (1)
    {
      v191 = *(_QWORD *)(v7 + 48);
      if ((unint64_t)(v191 + 1) > *(_QWORD *)(v7 + 56))
      {
        v370 = 8277;
        goto LABEL_579;
      }
      v192 = *(_QWORD *)(v187 + 2056);
      v193 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 40) + v191);
      *(_BYTE *)(v192 + (v188 << 6)) = v193;
      v194 = *(_QWORD *)(v7 + 48);
      *(_QWORD *)(v7 + 48) = v194 + 1;
      if (v193 > 3)
      {
        v370 = 8278;
        goto LABEL_579;
      }
      v195 = v194 + 2;
      v196 = *(_QWORD *)(v7 + 56);
      if (v194 + 2 > v196)
      {
        v370 = 8280;
        goto LABEL_579;
      }
      v197 = *(_QWORD *)(v7 + 40);
      v198 = *(unsigned __int8 *)(v197 + v194 + 1);
      *(_QWORD *)(v7 + 48) = v195;
      if (v198 > 1)
      {
        v370 = 8281;
        goto LABEL_579;
      }
      v199 = v192 + (v188 << 6);
      *(_BYTE *)(v199 + 24) = v198 != 0;
      v200 = v194 + 6;
      if (v194 + 6 > v196)
      {
        v370 = 8283;
        goto LABEL_579;
      }
      v201 = *(_DWORD *)(v197 + v195);
      *(_DWORD *)(v199 + 4) = v201;
      *(_QWORD *)(v7 + 48) = v200;
      v187 = *a2;
      if (v201 >= *(_DWORD *)(*a2 + 1960))
      {
        v370 = 8284;
        goto LABEL_579;
      }
      v202 = v194 + 10;
      if (v194 + 10 > v196)
      {
        v370 = 8285;
        goto LABEL_579;
      }
      v203 = *(unsigned int *)(v197 + v200);
      *(_DWORD *)(v192 + (v188 << 6) + 12) = v203;
      *(_QWORD *)(v7 + 48) = v202;
      if (v203 >= *(_DWORD *)(v187 + 2032))
      {
        v370 = 8286;
        goto LABEL_579;
      }
      v204 = v194 + 14;
      if (v204 > v196)
      {
        v370 = 8287;
        goto LABEL_579;
      }
      v205 = *(_DWORD *)(v197 + v202);
      *(_DWORD *)(v192 + (v188 << 6) + 16) = v205;
      *(_QWORD *)(v7 + 48) = v204;
      v206 = (v203 + v205);
      if (v206 > *(_DWORD *)(v187 + 2032))
      {
        v370 = 8288;
        goto LABEL_579;
      }
      v207 = *(_QWORD *)(v187 + 2040);
      if ((v193 | 2) == 3)
        break;
      if (v203 >= v206)
        goto LABEL_242;
      v212 = v206 - v203;
      if ((unint64_t)(v206 - v203) < 0x10)
      {
        v189 = 0;
        v213 = v203;
LABEL_269:
        v218 = v206 - v213;
        v219 = (unsigned __int16 *)(v207 + 2 * v213);
        do
        {
          v221 = *v219++;
          v220 = v221;
          if (v189 <= v221)
            v189 = v220;
          --v218;
        }
        while (v218);
        goto LABEL_243;
      }
      v213 = (v212 & 0xFFFFFFFFFFFFFFF0) + v203;
      v214 = (uint16x8_t *)(v207 + 2 * v203 + 16);
      v215 = 0uLL;
      v216 = v212 & 0xFFFFFFFFFFFFFFF0;
      v217 = 0uLL;
      do
      {
        v215 = vmaxq_u16(v215, v214[-1]);
        v217 = vmaxq_u16(v217, *v214);
        v214 += 2;
        v216 -= 16;
      }
      while (v216);
      v189 = vmaxvq_u16(vmaxq_u16(v215, v217));
      if (v212 != (v212 & 0xFFFFFFFFFFFFFFF0))
        goto LABEL_269;
LABEL_243:
      v190 = v192 + (v188 << 6);
      *(_DWORD *)(v190 + 8) = v189 + 1;
      *(_QWORD *)(v190 + 32) = 0;
      *(_QWORD *)(v190 + 40) = 0;
      if (++v188 == v767)
        goto LABEL_274;
    }
    if (v203 < v206)
    {
      v189 = 0;
      v208 = v206 - v203;
      v209 = (unsigned __int16 *)(v207 + 2 * v203);
      do
      {
        v211 = *v209++;
        v210 = v211;
        if (v211 == 0xFFFF)
          v210 = v189;
        if (v189 <= v210)
          v189 = v210;
        --v208;
      }
      while (v208);
      goto LABEL_243;
    }
LABEL_242:
    v189 = 0;
    goto LABEL_243;
  }
LABEL_274:
  v222 = *(_QWORD *)(v7 + 48);
  v825 = (int *)"ChapterDebugBlob_UncompressedMesh";
  *(_QWORD *)&v829 = &v825;
  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v187 + 1912, (uint64_t *)&v825, (uint64_t)&std::piecewise_construct, (uint64_t **)&v829)[3] = v222 - v184;
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
  if (!(_DWORD)v763)
    goto LABEL_449;
  LODWORD(v808) = 0;
  *(_QWORD *)buf = 0;
  v874 = 0;
  v875 = 0;
  v876 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v223);
  v829 = 0uLL;
  *(_QWORD *)&v830 = 0;
  *((_QWORD *)&v830 + 1) = geo::codec::Allocator::instance(v876);
  v825 = 0;
  v826 = 0;
  v827 = 0;
  v828 = (geo::codec::Allocator *)geo::codec::Allocator::instance(*((geo::codec::Allocator **)&v830 + 1));
  v821 = 0;
  v822 = 0;
  v823 = 0;
  v824 = geo::codec::Allocator::instance(v828);
  std::chrono::steady_clock::now();
  v225 = *a2;
  v224 = a2[1];
  *(_QWORD *)v817 = "ChapterDebugBlob_CompressedMeshes";
  v818 = v225;
  v819 = v224;
  if (v224)
  {
    v226 = (unint64_t *)(v224 + 8);
    do
      v227 = __ldxr(v226);
    while (__stxr(v227 + 1, v226));
  }
  v820 = 0;
  v760 = 0;
  v773 = 0;
  v820 = std::chrono::steady_clock::now().__d_.__rep_;
  if ((v801 & 4) != 0)
    v228 = 7;
  else
    v228 = 6;
  v758 = *(_QWORD *)(v7 + 48);
  v766 = v228;
  while (2)
  {
    v230 = *(_QWORD *)(*a2 + 2056);
    ++*(_WORD *)(*a2 + 2048);
    v231 = *(_QWORD *)(v7 + 48);
    v232 = *(_QWORD *)(v7 + 56);
    v233 = v231 + 4;
    if (v231 + 4 > v232)
    {
      v371 = 8334;
      goto LABEL_447;
    }
    v234 = *(_QWORD *)(v7 + 40);
    v777 = *(unsigned int *)(v234 + v231);
    *(_QWORD *)(v7 + 48) = v233;
    v235 = v231 + 8;
    if (v235 > v232)
    {
      v371 = 8335;
      goto LABEL_447;
    }
    v236 = v230 + (v767 << 6);
    v237 = *(_DWORD *)(v234 + v233);
    *(_QWORD *)(v7 + 48) = v235;
    *(_BYTE *)(v236 + ((unint64_t)(unsigned __int16)v773 << 6)) = 0;
    v761 = (unsigned __int16)v773;
    v762 = v236;
    v238 = (_QWORD *)(v236 + ((unint64_t)(unsigned __int16)v773 << 6));
    v238[4] = 0;
    v238 += 4;
    *((_BYTE *)v238 - 8) = 0;
    *((_DWORD *)v238 - 7) = v777;
    v759 = v237;
    *((_DWORD *)v238 - 5) = v237;
    v765 = v238;
    v238[1] = 0;
    v764 = v238 + 1;
    if (!geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)&v808))
    {
      v371 = 8344;
      goto LABEL_447;
    }
    ++v773;
    if (!(_DWORD)v808)
    {
LABEL_284:
      if (++v760 >= v763)
      {
        v372 = *(_QWORD *)(v7 + 48);
        v373 = *a2;
        *(_QWORD *)&v813 = "ChapterDebugBlob_CompressedMeshes";
        *(_QWORD *)&v815.f64[0] = &v813;
        v374 = 0;
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v373 + 1912, (uint64_t *)&v813, (uint64_t)&std::piecewise_construct, (uint64_t **)&v815)[3] = v372 - v758;
        v375 = 1;
        goto LABEL_448;
      }
      continue;
    }
    break;
  }
  v239 = *(_QWORD *)(v7 + 48);
  if (v239 + (unint64_t)v808 > *(_QWORD *)(v7 + 56))
  {
    v375 = 0;
    v374 = 1;
    goto LABEL_448;
  }
  v240 = geo::codec::decompressBinaryBlob((_DWORD *)(*(_QWORD *)(v7 + 40) + v239), v808, (uint64_t *)buf, (uint64_t *)&v829, &v825, (uint64_t *)&v821);
  if ((v240 & 1) == 0)
  {
    v371 = 8352;
    goto LABEL_447;
  }
  *(_QWORD *)(v7 + 48) += v808;
  v241 = *(double **)buf;
  v242 = (double *)v874;
  v243 = (v874 - *(_QWORD *)buf) / 12;
  *(_DWORD *)(v762 + (v761 << 6) + 8) = v243;
  v244 = *a2;
  if (!*(_BYTE *)(*a2 + 1956))
  {
    if (v242 == v241)
      goto LABEL_351;
    v255 = *(_QWORD *)(v244 + 1968);
    v256 = HIDWORD(v846);
    v257 = v853;
    v258 = (double)(SHIWORD(v847) - (__int16)v847);
    v259 = (double)(__int16)v847;
    v260 = v851;
    v261 = v850;
    v262 = v849;
    if (v243 <= 1)
      v263 = 1;
    else
      v263 = v243;
    if (v263 >= 0xC)
    {
      v265 = 0;
      v264 = 0;
      if (v243 <= 1)
        v279 = 1;
      else
        v279 = v243;
      v280 = v279 - 1;
      v240 = __CFADD__((_DWORD)v777, v279 - 1);
      v281 = !is_mul_ok(v280, 0xCuLL);
      if ((_DWORD)v280 != -1 && (v240 & 1) == 0)
      {
        v240 = HIDWORD(v280);
        if (!HIDWORD(v280))
        {
          v240 = v255 + 12 * v777;
          v282 = 12 * v280;
          if (v240 + 4 + v282 >= v240 + 4
            && !v281
            && v240 + 8 + v282 >= v240 + 8
            && !v281
            && v240 + v282 >= v240
            && !v281)
          {
            v264 = v263 & 0xFFFFFFFFFFFFFFFCLL;
            v265 = v263 & 0xFFFFFFFC;
            v283 = vdupq_n_s32(HIDWORD(v846));
            v284 = (uint64x2_t)vdupq_n_s64(v853);
            v285 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v259, 0);
            v286 = v851 * v258;
            v287 = v777;
            v288 = v263 & 0xFFFFFFFFFFFFFFFCLL;
            v240 = (unint64_t)v241;
            do
            {
              v880 = vld3q_f32((const float *)v240);
              v240 += 48;
              v289 = vcvtq_f32_s32(vaddq_s32(v283, (int32x4_t)v880.val[0]));
              v881.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v289.f32), v261)), vmulq_n_f64(vcvt_hight_f64_f32(v289), v261));
              v290 = vcvtq_f32_s32(vaddq_s32(v283, (int32x4_t)v880.val[1]));
              v881.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v290.f32), v261)), vmulq_n_f64(vcvt_hight_f64_f32(v290), v261));
              v881.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(v285, vcvtq_f64_u64(vaddw_u32(v284, *(uint32x2_t *)v880.val[2].f32)), v286), v262)), vmulq_n_f64(vmlaq_n_f64(v285, vcvtq_f64_u64(vaddw_high_u32(v284, (uint32x4_t)v880.val[2])), v286), v262));
              v291 = (float *)(v255 + 12 * v287);
              vst3q_f32(v291, v881);
              v287 += 4;
              v288 -= 4;
            }
            while (v288);
            if (v263 == v264)
              goto LABEL_351;
          }
        }
      }
    }
    else
    {
      v264 = 0;
      v265 = 0;
    }
    v292 = vdup_n_s32(v256);
    do
    {
      v293 = (int32x2_t *)((char *)v241 + 12 * v264);
      v294 = (float32x2_t *)(v255 + 12 * (v777 + v265));
      *v294 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(vadd_s32(v292, *v293))), v261));
      v295 = (v259 + v260 * v258 * (double)(v257 + (unint64_t)v293[1].u32[0])) * v262;
      v294[1].f32[0] = v295;
      v264 = ++v265;
    }
    while (v243 > v265);
    goto LABEL_351;
  }
  if (*(_BYTE *)(*a2 + 1956) == 1 && v242 != v241)
  {
    v245 = *(_QWORD *)(v244 + 1968);
    v246 = v841;
    v247 = v842;
    v248 = v843;
    if (v243 <= 1)
      v249 = 1;
    else
      v249 = v243;
    if (v249 < 0xC)
    {
LABEL_298:
      v250 = 0;
      v251 = 0;
      goto LABEL_299;
    }
    v251 = 0;
    v250 = 0;
    if (v243 <= 1)
      v266 = 1;
    else
      v266 = v243;
    v267 = v266 - 1;
    v268 = __CFADD__((_DWORD)v777, v266 - 1);
    v269 = !is_mul_ok(v267, 0xCuLL);
    if ((_DWORD)v267 == -1)
      goto LABEL_836;
    if (v268)
      goto LABEL_836;
    if (HIDWORD(v267))
      goto LABEL_836;
    v270 = v245 + 12 * v777;
    v271 = 12 * v267;
    if (v270 + 4 + v271 < v270 + 4 || v269 || v270 + 8 + v271 < v270 + 8 || v269 || v270 + v271 < v270 || v269)
      goto LABEL_836;
    if (v243 <= 1)
      v272 = 1;
    else
      v272 = v243;
    if ((unint64_t)&v844 < v245 + 12 * (v272 + v777)
      && v245 + 12 * (unint64_t)v777 < (unint64_t)&v845)
    {
      goto LABEL_298;
    }
    v273 = vdupq_n_s32(v841);
    v274 = vdupq_n_s32(v842);
    v250 = v249 & 0xFFFFFFFFFFFFFFFCLL;
    v275 = vdupq_n_s32(v843);
    v276 = v777;
    v277 = v249 & 0xFFFFFFFFFFFFFFFCLL;
    v240 = (unint64_t)v241;
    do
    {
      v878 = vld3q_f32((const float *)v240);
      v240 += 48;
      v879.val[0] = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v844, 0), vcvtq_f32_s32(vaddq_s32(v273, (int32x4_t)v878.val[0])), *((float *)&v844 + 3));
      v879.val[1] = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v844 + 4), 0), vcvtq_f32_s32(vaddq_s32(v274, (int32x4_t)v878.val[1])), *((float *)&v844 + 3));
      v879.val[2] = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v844 + 8), 0), vcvtq_f32_s32(vaddq_s32(v275, (int32x4_t)v878.val[2])), *((float *)&v844 + 3));
      v278 = (float *)(v245 + 12 * v276);
      vst3q_f32(v278, v879);
      v276 += 4;
      v277 -= 4;
    }
    while (v277);
    v251 = v249 & 0xFFFFFFFC;
    if (v249 != v250)
    {
LABEL_836:
      do
      {
LABEL_299:
        v252 = (_DWORD *)v241 + 3 * v250;
        v240 = v252[1];
        v253 = (float *)(v245 + 12 * (v777 + v251));
        v254 = *(float *)&v844 + (float)(*((float *)&v844 + 3) * (float)(int)(v246 + *v252));
        LODWORD(v252) = v252[2];
        *v253 = v254;
        v253[1] = *((float *)&v844 + 1) + (float)(*((float *)&v844 + 3) * (float)(int)(v247 + v240));
        v253[2] = *((float *)&v844 + 2) + (float)(*((float *)&v844 + 3) * (float)(int)(v248 + (_DWORD)v252));
        v250 = ++v251;
      }
      while (v243 > v251);
    }
  }
LABEL_351:
  v776 = v821;
  if (v822 != v821)
  {
    v775 = 0;
    v771 = 0;
    v794 = 0;
    v786 = 0;
    while (2)
    {
      v296 = LOBYTE(v776[18 * v775]);
      v297 = &v776[18 * v775];
      v298 = v297[1];
      v769 = v297 + 1;
      _ZF = v296 == v766 && v298 == 1;
      if (_ZF)
      {
        v300 = geo::codec::Allocator::instance((geo::codec::Allocator *)v240);
        v301 = &v776[18 * v775];
        v303 = *((_QWORD *)v301 + 1);
        v302 = (uint64_t *)(v301 + 2);
        v772 = v302 + 1;
        v240 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v300 + 16))(v300, v302[1] - v303, 8);
        v786 = v240;
        v304 = &v776[18 * v775];
        v790 = *((_QWORD *)v304 + 5);
        v770 = v304 + 10;
        v783 = *((_QWORD *)v304 + 6);
        v774 = *a2;
        if (*(_BYTE *)(*a2 + 1956))
        {
          if (*(_BYTE *)(*a2 + 1956) == 1)
          {
            v305 = *v772;
            v306 = *v302;
            if (*v772 != *v302)
            {
              if ((v801 & 4) != 0)
              {
                v330 = 0;
                v331 = (*v772 - *v302) >> 2;
                v332 = v835;
                do
                {
                  while (v790 != v783 && !*(_BYTE *)(v790 + v330))
                  {
                    *(_DWORD *)(v786 + 4 * v330++) = 0;
                    if (v331 <= v330)
                      goto LABEL_393;
                  }
                  v333 = v836;
                  v334 = v837 * (float)(v332 + *(_DWORD *)(v306 + 4 * v330));
                  v335 = powf(v836, v334);
                  if (v333 <= 1.0)
                    v335 = v334;
                  *(float *)(v786 + 4 * v330++) = v335;
                }
                while (v331 > v330);
              }
              else
              {
                v307 = 0;
                v308 = 1;
                v768 = v840;
                do
                {
                  while (v790 == v783 || *(_BYTE *)(*v770 + v307))
                  {
                    v309 = 4 * v307;
                    v310 = *((float *)&v844 + 3) * (float)(v768 + *(_DWORD *)(v306 + 4 * v307));
                    v311 = v777 + v308 - 1;
                    v312 = (float32x2_t *)(*(_QWORD *)(v774 + 1968) + 12 * v311);
                    v313 = v312[1].f32[0];
                    v815 = vcvtq_f64_f32(*v312);
                    v816 = v313;
                    geo::Coordinate3D<geo::Degrees,double>::Coordinate3D<double>((double *)&v813, v815.f64);
                    *(_OWORD *)v811 = v813;
                    v314 = v310;
                    v812 = v314;
                    v240 = (unint64_t)geo::Geocentric<double>::Geocentric<geo::Degrees,double>(v809.f64, (double *)v811);
                    v315 = v810;
                    v316 = (float32x2_t *)(*(_QWORD *)(v774 + 1968) + 12 * v311);
                    *v316 = vcvt_f32_f64(v809);
                    v316[1].f32[0] = v315;
                    v317 = v314 - v814;
                    *(float *)(v786 + v309) = v317;
                    v305 = *v772;
                    v306 = *v302;
                    v307 = v308++;
                    if (v307 >= (*v772 - *v302) >> 2)
                      goto LABEL_393;
                  }
                  *(_DWORD *)(v786 + 4 * v307) = 0;
                  v307 = v308++;
                }
                while (v307 < (v305 - v306) >> 2);
              }
            }
          }
        }
        else
        {
          v318 = *v302;
          if (*v772 != *v302)
          {
            v319 = (*v772 - *v302) >> 2;
            if ((v801 & 4) != 0)
            {
              v336 = 0;
              v337 = v835;
              do
              {
                while (v790 != v783 && !*(_BYTE *)(v790 + v336))
                {
                  *(_DWORD *)(v786 + 4 * v336++) = 0;
                  if (v319 <= v336)
                    goto LABEL_393;
                }
                v338 = v836;
                v339 = v837 * (float)(v337 + *(_DWORD *)(v318 + 4 * v336));
                v340 = powf(v836, v339);
                if (v338 <= 1.0)
                  v340 = v339;
                *(float *)(v786 + 4 * v336++) = v340;
              }
              while (v319 > v336);
            }
            else
            {
              v320 = 0;
              v321 = (double)(SHIWORD(v847) - (__int16)v847);
              v322 = v853;
              v323 = (double)(__int16)v847;
              v324 = v851;
              v325 = v849;
              v326 = 1.0 / v849;
              do
              {
                while (v790 == v783 || *(_BYTE *)(v790 + v320))
                {
                  v327 = (v323 + v324 * v321 * (double)(v322 + (unint64_t)*(unsigned int *)(v318 + 4 * v320)))
                       * v325;
                  v328 = *(_QWORD *)(v774 + 1968) + 12 * (v777 + v320);
                  v329 = (float)(v327 - *(float *)(v328 + 8)) * v326;
                  *(float *)(v240 + 4 * v320) = v329;
                  *(float *)(v328 + 8) = v327;
                  if (v319 <= ++v320)
                    goto LABEL_393;
                }
                *(_DWORD *)(v240 + 4 * v320++) = 0;
              }
              while (v319 > v320);
            }
          }
        }
LABEL_393:
        *v765 = v786;
        v296 = LOBYTE(v776[18 * v775]);
        v298 = *v769;
      }
      if (v296 != 8 || v298 != 1)
        goto LABEL_354;
      v342 = geo::codec::Allocator::instance((geo::codec::Allocator *)v240);
      v343 = &v776[18 * v775];
      v345 = *((_QWORD *)v343 + 1);
      v344 = v343 + 2;
      v346 = v344 + 1;
      v240 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v342 + 16))(v342, v344[1] - v345, 8);
      v794 = v240;
      v347 = (int32x4_t *)*v344;
      if (v344[1] != *v344)
      {
        v348 = (uint64_t)(*v346 - *v344) >> 2;
        if (v348 <= 1)
          v349 = 1;
        else
          v349 = (uint64_t)(*v346 - *v344) >> 2;
        if (v349 < 0xC
          || (v348 <= 1 ? (v350 = 1) : (v350 = (uint64_t)(*v346 - *v344) >> 2),
              (v351 = v350 - 1, _ZF = (_DWORD)v351 == -1, v352 = HIDWORD(v351), !_ZF) ? (v353 = v352 == 0) : (v353 = 0),
              !v353))
        {
          v354 = 0;
          v355 = 0;
          goto LABEL_412;
        }
        v354 = v349 & 0xFFFFFFFFFFFFFFF8;
        v355 = v349 & 0xFFFFFFF8;
        v357 = v347 + 1;
        v358 = (float32x4_t *)(v240 + 16);
        v359 = v349 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v360 = vcvtq_f32_s32(*v357);
          v358[-1] = vcvtq_f32_s32(v357[-1]);
          *v358 = v360;
          v357 += 2;
          v358 += 2;
          v359 -= 8;
        }
        while (v359);
        if (v349 != v354)
        {
LABEL_412:
          v356 = v355 + 1;
          do
          {
            *(float *)(v240 + 4 * v354) = (float)v347->i32[v354];
            v354 = v356++;
          }
          while (v348 > v354);
        }
      }
      *v764 = v240;
LABEL_354:
      v776 = v821;
      v775 = ++v771;
      if (0x8E38E38E38E38E39 * (((char *)v822 - (char *)v821) >> 3) <= v771)
        goto LABEL_420;
      continue;
    }
  }
  v786 = 0;
  v794 = 0;
LABEL_420:
  v361 = v825;
  v362 = v826 - (_QWORD)v825;
  v363 = (v826 - (uint64_t)v825) >> 2;
  if (v363 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v829 + 1) - v829) >> 2))
  {
    if (*((_QWORD *)&v829 + 1) == (_QWORD)v829)
      goto LABEL_282;
    v364 = 0;
    v365 = 0;
    v366 = *a2;
    v367 = *(_QWORD *)(*a2 + 2040);
    v368 = (_DWORD *)(v829 + 4);
    v369 = v759;
    do
    {
      *(_WORD *)(v367 + 2 * v369) = *(v368 - 1);
      *(_WORD *)(v367 + 2 * (v369 + 1)) = *v368;
      *(_WORD *)(v367 + 2 * (v369 + 2)) = v368[1];
      if (v361[v364] != (_DWORD)v767 - 1 + (unsigned __int16)v773)
      {
        if (v365)
          *(_DWORD *)(v365 + 16) = v369 - *(_DWORD *)(v365 + 12);
        v365 = *(_QWORD *)(v366 + 2056) + (v767 << 6) + ((unint64_t)(unsigned __int16)v773 << 6);
        *(_BYTE *)v365 = 0;
        *(_BYTE *)(v365 + 24) = 1;
        *(_DWORD *)(v365 + 4) = v777;
        *(_DWORD *)(v365 + 12) = v369;
        *(_QWORD *)(v365 + 32) = v786;
        *(_QWORD *)(v365 + 40) = v794;
        ++v773;
        ++*(_WORD *)(v366 + 2048);
      }
      v368 += 3;
      ++v364;
      v369 += 3;
    }
    while (v363 > v364);
    if (!v365)
    {
LABEL_282:
      v229 = 3 * (v362 >> 2);
    }
    else
    {
      v229 = 3 * (v362 >> 2);
      *(_DWORD *)(v365 + 16) = v229 + v759 - *(_DWORD *)(v365 + 12);
    }
    *(_DWORD *)(v762 + (v761 << 6) + 16) = v229;
    goto LABEL_284;
  }
  v371 = 8445;
LABEL_447:
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v371);
  v375 = 0;
  v374 = 6;
LABEL_448:
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)v817);
  *(_QWORD *)v817 = &v821;
  std::vector<GeoCodecsVertexAttributesData,geo::StdAllocator<GeoCodecsVertexAttributesData,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)v817);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v825);
  std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v829);
  std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)buf);
  if ((v375 & 1) == 0)
  {
LABEL_457:
    std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&__src);
    if (v374)
    {
      v24 = 0;
      v19 = 0;
      if (v374 == 6)
        goto LABEL_31;
      goto LABEL_67;
    }
    goto LABEL_18;
  }
LABEL_449:
  v376 = *a2;
  LODWORD(v377) = *(_DWORD *)(*a2 + 2032) + v780;
  *(_DWORD *)(*a2 + 2032) = v377;
  if (*(_DWORD *)(v7 + 64) < 0x16u)
    goto LABEL_470;
  v811[0] = 0;
  if ((geo::codec::chapterReadVarInt64((_QWORD *)v7, (uint64_t *)v811) & 1) == 0)
  {
    v378 = (FILE *)*MEMORY[0x1E0C80C10];
    v379 = 8483;
LABEL_455:
    fprintf(v378, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v379);
LABEL_456:
    v374 = 6;
    goto LABEL_457;
  }
  if (!v811[0])
    goto LABEL_469;
  if (*(_QWORD *)(v7 + 48) + v811[0] > *(_QWORD *)(v7 + 56))
  {
    v374 = 1;
    goto LABEL_457;
  }
  v381 = *a2;
  v380 = a2[1];
  *(_QWORD *)buf = "ChapterDebugBlob_CompressedPolyline";
  v874 = v381;
  v875 = v380;
  if (v380)
  {
    v382 = (unint64_t *)(v380 + 8);
    do
      v383 = __ldxr(v382);
    while (__stxr(v383 + 1, v382));
  }
  v876 = 0;
  v876 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
  mgcl::polyline::Decoder::Decoder((mgcl::polyline::Decoder *)&v809);
  v815 = 0uLL;
  v816 = 0.0;
  mgcl::polyline::Decoder::getPositionsInfo(*(_QWORD *)(v7 + 40) + *(_QWORD *)(v7 + 48), v811[0], (uint64_t)&v815);
  v778 = *(_QWORD *)(v7 + 48);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v829, 3 * SHIDWORD(v815.f64[1]));
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v825, SLODWORD(v816));
  v781 = SHIDWORD(v816);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v821, SHIDWORD(v816));
  v808 = 0;
  v384 = mgcl::polyline::Decoder::decompressPositions((uint64_t **)&v809, (const unsigned __int8 *)(*(_QWORD *)(v7 + 40) + *(_QWORD *)(v7 + 48)), v811[0], &v808, (int *)v829, v825, v821);
  if ((_DWORD)v384)
  {
    v385 = (FILE *)*MEMORY[0x1E0C80C10];
    v386 = 8500;
LABEL_467:
    fprintf(v385, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v386);
    v390 = 0;
    v374 = 6;
    goto LABEL_468;
  }
  v387 = *(_QWORD *)(v7 + 56);
  v388 = *(_QWORD *)(v7 + 48) + v811[0];
  *(_QWORD *)(v7 + 48) = v388;
  v389 = v388 + 4;
  if (v388 + 4 > v387)
  {
    v385 = (FILE *)*MEMORY[0x1E0C80C10];
    v386 = 8504;
    goto LABEL_467;
  }
  v442 = *(unsigned int *)(*(_QWORD *)(v7 + 40) + v388);
  *(_QWORD *)(v7 + 48) = v389;
  v443 = *a2;
  v444 = *(_QWORD *)(*a2 + 1968);
  v445 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*a2 + 1976) - v444) >> 2);
  v784 = v442;
  if (v445 > v442)
  {
    v446 = *(unsigned __int8 *)(v443 + 1956);
    v447 = v829;
    v448 = v841;
    v449 = v842;
    v450 = v843;
    v451 = (const float *)&v846 + 1;
    v452 = v850;
    v453 = v853;
    v454 = (double)(__int16)v847;
    v455 = (int32x2_t)vld1_dup_f32(v451);
    v456 = v849;
    v457 = v784;
    v458 = v784 + 1;
    LODWORD(v384) = 2;
    v459 = v851 * (double)(SHIWORD(v847) - (__int16)v847);
    do
    {
      v464 = (float *)(v444 + 12 * v457);
      if (v446 == 1)
      {
        v460 = *(_DWORD *)(v447 + 4 * v384);
        v461 = v444 + 12 * v457;
        v462 = v449 + *(_DWORD *)(v447 + 4 * (v384 - 1));
        *v464 = *(float *)&v844
              + (float)(*((float *)&v844 + 3) * (float)(int)(v448 + *(_DWORD *)(v447 + 4 * (v384 - 2))));
        *(float *)(v461 + 4) = *((float *)&v844 + 1) + (float)(*((float *)&v844 + 3) * (float)v462);
        v463 = *((float *)&v844 + 2) + (float)(*((float *)&v844 + 3) * (float)(int)(v450 + v460));
      }
      else
      {
        if (v446)
          goto LABEL_514;
        v465.i32[0] = *(_DWORD *)(v447 + 4 * (v384 - 2));
        v465.i32[1] = *(_DWORD *)(v447 + 4 * (v384 - 1));
        *(float32x2_t *)v464 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(vadd_s32(v455, v465))), v452));
        v463 = (v454 + v459 * (double)(v453 + (unint64_t)*(unsigned int *)(v447 + 4 * v384)))
             * v456;
        v461 = v444 + 12 * v457;
      }
      *(float *)(v461 + 8) = v463;
LABEL_514:
      v457 = v458++;
      v384 = (v384 + 3);
    }
    while (v445 > v457);
  }
  if (!(_DWORD)v781)
    goto LABEL_552;
  v804 = 0;
  v787 = 0;
  while (2)
  {
    v795 = v821;
    if (v804 >= v822 - v821)
      std::vector<zilch::GeoCoordinates>::__throw_out_of_range[abi:ne180100]();
    *(_QWORD *)v817 = 0;
    v818 = 0;
    v819 = 0;
    v820 = geo::codec::Allocator::instance((geo::codec::Allocator *)v384);
    std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::reserve((uint64_t)v817, v795[v804]);
    LODWORD(v466) = v795[v804];
    if ((_DWORD)v466)
    {
      v467 = 0;
      v468 = 0;
      do
      {
        if (v787 + v467 >= (v826 - (uint64_t)v825) >> 2)
          std::vector<zilch::GeoCoordinates>::__throw_out_of_range[abi:ne180100]();
        LODWORD(v813) = v825[v787 + v467];
        v469 = v813;
        std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::emplace_back<int const&>((uint64_t)v817, &v813);
        v468 += v469;
        ++v467;
        v466 = v795[v804];
      }
      while (v467 < v466);
    }
    else
    {
      v468 = 0;
    }
    v470 = *a2;
    v471 = *(_QWORD *)(*a2 + 2056);
    v472 = *(unsigned __int16 *)(*a2 + 2048);
    *(_WORD *)(*a2 + 2048) = v472 + 1;
    v473 = v471 + (v472 << 6);
    *(_DWORD *)(v473 + 12) = v377;
    v474 = *(_QWORD *)v817;
    v475 = v818 - *(_QWORD *)v817;
    if (v818 != *(_QWORD *)v817)
    {
      v476 = 0;
      v477 = 0;
      v478 = v475 >> 2;
      _CF = v475 >> 2 != 0;
      v479 = (v475 >> 2) - 1;
      if (v479 == 0 || !_CF)
        v478 = 1;
      v480 = v377;
      do
      {
        v377 = *(_DWORD *)(v474 + 4 * v476) + v480;
        if (v480 < v377)
        {
          v481 = v480;
          v482 = *(_QWORD *)(v470 + 2040);
          v483 = v377 - v480;
          if (v483 >= 0x10)
          {
            v484 = (v483 & 0xFFFFFFFFFFFFFFF0) + v480;
            v485 = v477 + (v483 & 0xFFFFFFFFFFFFFFF0);
            v486 = vaddq_s16(vdupq_n_s16(v477), (int16x8_t)xmmword_189CFDBA0);
            v487 = (int16x8_t *)(v482 + 2 * v481 + 16);
            v488 = v483 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v489.i64[0] = 0x8000800080008;
              v489.i64[1] = 0x8000800080008;
              v487[-1] = v486;
              *v487 = vaddq_s16(v486, v489);
              v489.i64[0] = 0x10001000100010;
              v489.i64[1] = 0x10001000100010;
              v486 = vaddq_s16(v486, v489);
              v487 += 2;
              v488 -= 16;
            }
            while (v488);
            v477 = v485;
            if (v483 == (v483 & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_541;
          }
          else
          {
            v484 = v480;
            v485 = v477;
          }
          v490 = v377 - v484;
          v491 = (_WORD *)(v482 + 2 * v484);
          do
          {
            v477 = v485 + 1;
            *v491++ = v485++;
            --v490;
          }
          while (v490);
        }
LABEL_541:
        if (v476 != v479)
        {
          *(_WORD *)(*(_QWORD *)(v470 + 2040) + 2 * v377) = -1;
          LODWORD(v377) = v377 + 1;
        }
        ++v476;
        v480 = v377;
      }
      while (v476 != v478);
    }
    *(_DWORD *)(v473 + 16) = v468 + v466 - 1;
    *(_BYTE *)v473 = 3;
    *(_BYTE *)(v473 + 24) = 0;
    *(_DWORD *)(v473 + 4) = v784;
    *(_DWORD *)(v473 + 8) = v468;
    LODWORD(v784) = v468 + v784;
    v787 += v795[v804];
    v384 = (uint64_t)std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)v817);
    if (++v804 != v781)
      continue;
    break;
  }
  v443 = *a2;
  v389 = *(_QWORD *)(v7 + 48);
LABEL_552:
  *(_QWORD *)&v813 = "ChapterDebugBlob_CompressedPolyline";
  *(_QWORD *)v817 = &v813;
  v374 = 0;
  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v443 + 1912, (uint64_t *)&v813, (uint64_t)&std::piecewise_construct, (uint64_t **)v817)[3] = v389 - v778;
  v390 = 1;
LABEL_468:
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v821);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v825);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v829);
  mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)&v809);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
  if ((v390 & 1) == 0)
    goto LABEL_457;
LABEL_469:
  v376 = *a2;
LABEL_470:
  *(_DWORD *)(v376 + 2032) = v377;
  *(_DWORD *)(v376 + 1960) += v798;
  *(_QWORD *)buf = "ChapterDebugBlob_Decals";
  v874 = v376;
  v391 = a2[1];
  v875 = v391;
  if (v391)
  {
    v392 = (unint64_t *)(v391 + 8);
    do
      v393 = __ldxr(v392);
    while (__stxr(v393 + 1, v392));
  }
  v876 = 0;
  v876 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
  v394 = *(_QWORD *)(v7 + 48);
  if ((unint64_t)(v394 + 2) > *(_QWORD *)(v7 + 56))
  {
    v395 = (FILE *)*MEMORY[0x1E0C80C10];
    v370 = 8571;
    goto LABEL_580;
  }
  v396 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 40) + v394);
  *(_QWORD *)(v7 + 48) = v394 + 2;
  std::vector<GeoCodecsDaVinciDecal,geo::StdAllocator<GeoCodecsDaVinciDecal,geo::codec::Allocator>>::resize((unint64_t *)(*a2 + 2200), v396);
  v397 = *(_QWORD *)(v7 + 48);
  if (!(_DWORD)v396)
  {
LABEL_493:
    v428 = *a2;
    v825 = (int *)"ChapterDebugBlob_Decals";
    *(_QWORD *)&v829 = &v825;
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v428 + 1912, (uint64_t *)&v825, (uint64_t)&std::piecewise_construct, (uint64_t **)&v829)[3] = v397 - v394;
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
    v430 = *a2;
    v429 = a2[1];
    *(_QWORD *)buf = "ChapterDebugBlob_Building";
    v874 = v430;
    v875 = v429;
    if (v429)
    {
      v431 = (unint64_t *)(v429 + 8);
      do
        v432 = __ldxr(v431);
      while (__stxr(v432 + 1, v431));
    }
    v876 = 0;
    v433.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v876 = (geo::codec::Allocator *)v433.__d_.__rep_;
    v435 = *(_QWORD *)(v7 + 48);
    v434 = *(_QWORD *)(v7 + 56);
    v436 = v435 + 4;
    if (v435 + 4 > v434)
    {
      v370 = 8615;
      goto LABEL_579;
    }
    v437 = *a2;
    v438 = *(_QWORD *)(v7 + 40);
    v439 = *(_DWORD *)(v438 + v435);
    *(_DWORD *)(*a2 + 2248) = v439;
    *(_QWORD *)(v7 + 48) = v436;
    v440 = v435 + 8;
    if (v435 + 8 > v434)
    {
      v370 = 8616;
      goto LABEL_579;
    }
    v441 = *(_DWORD *)(v438 + v436);
    *(_DWORD *)(v437 + 2252) = v441;
    *(_QWORD *)(v7 + 48) = v440;
    if ((v439 + v441) > *(_DWORD *)(v437 + 1960))
    {
      v370 = 8617;
      goto LABEL_579;
    }
    if (v435 + 10 > v434)
    {
      v370 = 8620;
      goto LABEL_579;
    }
    *(_WORD *)(v437 + 2288) = *(_WORD *)(v438 + v440);
    *(_QWORD *)(v7 + 48) = v435 + 10;
    v493 = geo::codec::Allocator::instance((geo::codec::Allocator *)v433.__d_.__rep_);
    v494 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v493 + 16))(v493, 8 * *(unsigned __int16 *)(*a2 + 2288), 8);
    v495 = *a2;
    *(_QWORD *)(v495 + 2296) = v494;
    v497 = *(_QWORD *)(v7 + 48);
    v496 = *(_QWORD *)(v7 + 56);
    if (*(_WORD *)(v495 + 2288))
    {
      v498 = 0;
      v499 = 0;
      v500 = (_WORD *)((char *)v494 + 4);
      while (1)
      {
        *((_DWORD *)v500 - 1) = v499;
        v501 = v497 + 2;
        if (v497 + 2 > v496)
          break;
        v502 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 40) + v497);
        *v500 = v502;
        *(_QWORD *)(v7 + 48) = v501;
        v499 += v502;
        if (v499 > *(_DWORD *)(v495 + 2252))
        {
          v370 = 8627;
          goto LABEL_579;
        }
        ++v498;
        v500 += 4;
        v497 = v501;
        if (v498 >= *(unsigned __int16 *)(v495 + 2288))
          goto LABEL_565;
      }
      v370 = 8625;
LABEL_579:
      v395 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_580;
    }
    v501 = *(_QWORD *)(v7 + 48);
LABEL_565:
    if (v501 + 2 > v496)
    {
      v370 = 8631;
      goto LABEL_579;
    }
    *(_WORD *)(v495 + 2304) = *(_WORD *)(*(_QWORD *)(v7 + 40) + v501);
    *(_QWORD *)(v7 + 48) = v501 + 2;
    v505 = geo::codec::Allocator::instance(v494);
    v506 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v505 + 16))(v505, 20 * *(unsigned __int16 *)(*a2 + 2304), 8);
    v507 = *a2;
    *(_QWORD *)(v507 + 2312) = v506;
    v508 = *(_QWORD *)(v7 + 48);
    v509 = *(_QWORD *)(v7 + 56);
    if (*(_WORD *)(v507 + 2304))
    {
      v510 = 0;
      v511 = 0;
      v512 = 0;
      while (1)
      {
        v513 = v508 + 1;
        if (v508 + 1 > v509)
          break;
        v514 = *(_QWORD *)(v507 + 2312);
        v515 = *(_QWORD *)(v7 + 40);
        v516 = *(unsigned __int8 *)(v515 + v508);
        *(_QWORD *)(v7 + 48) = v513;
        *(_BYTE *)(v514 + v510) = v516 != 0;
        v517 = v508 + 2;
        if (v508 + 2 > v509)
        {
          v370 = 8638;
          goto LABEL_579;
        }
        v518 = *(_BYTE *)(v515 + v513);
        *(_QWORD *)(v7 + 48) = v517;
        v519 = v514 + v510;
        *(_BYTE *)(v514 + v510 + 1) = v518;
        if (v508 + 6 > v509)
        {
          v370 = 8640;
          goto LABEL_579;
        }
        *(_DWORD *)(v519 + 4) = *(_DWORD *)(v515 + v517);
        v520 = *(_QWORD *)(v7 + 48);
        v521 = v520 + 4;
        *(_QWORD *)(v7 + 48) = v520 + 4;
        *(_DWORD *)(v519 + 12) = v512;
        v508 = v520 + 6;
        v509 = *(_QWORD *)(v7 + 56);
        if (v508 > v509)
        {
          v370 = 8642;
          goto LABEL_579;
        }
        v522 = *(_WORD *)(*(_QWORD *)(v7 + 40) + v521);
        *(_WORD *)(v514 + v510 + 16) = v522;
        *(_QWORD *)(v7 + 48) = v508;
        v512 += v522 + 1;
        v507 = *a2;
        if (*(unsigned __int16 *)(*a2 + 2288) < v512)
        {
          v370 = 8644;
          goto LABEL_579;
        }
        ++v511;
        v510 += 20;
        if (v511 >= *(unsigned __int16 *)(v507 + 2304))
          goto LABEL_575;
      }
      v370 = 8636;
      goto LABEL_579;
    }
LABEL_575:
    if (v508 + 2 > v509)
    {
      v370 = 8649;
      goto LABEL_579;
    }
    v523 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 40) + v508);
    *(_QWORD *)(v7 + 48) = v508 + 2;
    std::vector<GeoCodecsDaVinciBuilding,geo::StdAllocator<GeoCodecsDaVinciBuilding,geo::codec::Allocator>>::resize((unint64_t *)(v507 + 2320), v523);
    v524 = *a2;
    v525 = *(_QWORD *)(v7 + 48);
    if ((_DWORD)v523)
    {
      v526 = 0;
      v527 = 0;
      v528 = *(_QWORD *)(v7 + 56);
      v805 = 40 * v523;
      while (1)
      {
        v529 = v525 + 8;
        if (v525 + 8 > v528)
          break;
        v530 = *(_QWORD *)(v524 + 2320);
        v531 = *(_QWORD *)(v7 + 40);
        *(_QWORD *)(v530 + v526 + 24) = *(_QWORD *)(v531 + v525);
        *(_QWORD *)(v7 + 48) = v529;
        if (v525 + 10 > v528)
        {
          v370 = 8658;
          goto LABEL_579;
        }
        v532 = *(unsigned __int16 *)(v531 + v529);
        *(_QWORD *)(v7 + 48) = v525 + 10;
        v533 = (uint64_t *)(v855 + 16 * v532);
        v534 = (uint64_t *)(*(_QWORD *)(v524 + 1136) + 16 * *(_QWORD *)(v859 + 8 * v532));
        std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((_QWORD *)(v530 + v526), *v534, v534[1]);
        if (!*((_BYTE *)v533 + 8))
          v533 = (uint64_t *)*v533;
        v535 = v530 + v526;
        *(_QWORD *)(v535 + 16) = *v533;
        *(_WORD *)(v535 + 32) = v527;
        v536 = *(_QWORD *)(v7 + 48);
        v528 = *(_QWORD *)(v7 + 56);
        v525 = v536 + 2;
        if (v536 + 2 > v528)
        {
          v370 = 8669;
          goto LABEL_579;
        }
        v537 = *(_WORD *)(*(_QWORD *)(v7 + 40) + v536);
        *(_WORD *)(v535 + 34) = v537;
        *(_QWORD *)(v7 + 48) = v525;
        v527 += v537;
        v524 = *a2;
        if (*(unsigned __int16 *)(*a2 + 2304) < v527)
        {
          v370 = 8671;
          goto LABEL_579;
        }
        *(_BYTE *)(v530 + v526 + 36) = 0;
        v526 += 40;
        if (v805 == v526)
          goto LABEL_590;
      }
      v370 = 8655;
      goto LABEL_579;
    }
LABEL_590:
    v825 = (int *)"ChapterDebugBlob_Building";
    *(_QWORD *)&v829 = &v825;
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v524 + 1912, (uint64_t *)&v825, (uint64_t)&std::piecewise_construct, (uint64_t **)&v829)[3] = v525 - v435;
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
    v538 = *(_QWORD *)(v7 + 48);
    v540 = *a2;
    v539 = a2[1];
    *(_QWORD *)buf = "ChapterDebugBlob_Primitives";
    v874 = v540;
    v875 = v539;
    if (v539)
    {
      v541 = (unint64_t *)(v539 + 8);
      do
        v542 = __ldxr(v541);
      while (__stxr(v542 + 1, v541));
    }
    v876 = 0;
    v876 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
    v544 = *(_QWORD *)(v7 + 48);
    v543 = *(_QWORD *)(v7 + 56);
    v545 = v544 + 2;
    if (v544 + 2 > v543)
    {
      v370 = 8685;
      goto LABEL_579;
    }
    v546 = *(_QWORD *)(v7 + 40);
    v547 = *(unsigned __int16 *)(v546 + v544);
    *(_QWORD *)(v7 + 48) = v545;
    if (v547)
    {
      for (i = 0; i < v547; ++i)
      {
        v549 = v545 + 2;
        if (v545 + 2 > v543)
        {
          v370 = 8688;
          goto LABEL_579;
        }
        *(_QWORD *)(v7 + 48) = v549;
        v550 = v545 + 6;
        if (v545 + 6 > v543)
        {
          v370 = 8690;
          goto LABEL_579;
        }
        v551 = *(_DWORD *)(v546 + v549);
        *(_QWORD *)(v7 + 48) = v550;
        if (v551)
        {
          v552 = v545 + 14;
          do
          {
            if (v552 > v543)
            {
              v370 = 8693;
              goto LABEL_579;
            }
            *(_QWORD *)(v7 + 48) = v552;
            if (v552 + 2 > v543)
            {
              v370 = 8695;
              goto LABEL_579;
            }
            *(_QWORD *)(v7 + 48) = v552 + 2;
            if (v552 + 4 > v543)
            {
              v370 = 8697;
              goto LABEL_579;
            }
            *(_QWORD *)(v7 + 48) = v552 + 4;
            v552 += 12;
            --v551;
          }
          while (v551);
          v550 = v552 - 8;
        }
        v545 = v550;
      }
    }
    else
    {
      v550 = v545;
    }
    v553 = *a2;
    v825 = (int *)"ChapterDebugBlob_Primitives";
    *(_QWORD *)&v829 = &v825;
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v553 + 1912, (uint64_t *)&v825, (uint64_t)&std::piecewise_construct, (uint64_t **)&v829)[3] = v550 - v538;
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
    v799 = *(_QWORD *)(v7 + 48);
    v555 = *a2;
    v554 = a2[1];
    *(_QWORD *)buf = "ChapterDebugBlob_Scenes";
    v874 = v555;
    v875 = v554;
    if (v554)
    {
      v556 = (unint64_t *)(v554 + 8);
      do
        v557 = __ldxr(v556);
      while (__stxr(v557 + 1, v556));
    }
    v876 = 0;
    v558.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v876 = (geo::codec::Allocator *)v558.__d_.__rep_;
    v559 = *(_QWORD *)(v7 + 48);
    if ((unint64_t)(v559 + 2) > *(_QWORD *)(v7 + 56))
    {
      v370 = 8706;
      goto LABEL_579;
    }
    *(_WORD *)(*a2 + 2152) = *(_WORD *)(*(_QWORD *)(v7 + 40) + v559);
    *(_QWORD *)(v7 + 48) = v559 + 2;
    v560 = geo::codec::Allocator::instance((geo::codec::Allocator *)v558.__d_.__rep_);
    v561 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v560 + 16))(v560, 56 * *(unsigned __int16 *)(*a2 + 2152), 8);
    v562 = *a2;
    *(_QWORD *)(v562 + 2160) = v561;
    if (*(_WORD *)(v562 + 2152))
    {
      v806 = 0;
      do
      {
        v563 = *(_QWORD *)(v7 + 48);
        v564 = *(_QWORD *)(v7 + 56);
        v565 = v563 + 2;
        if (v563 + 2 > v564)
        {
          v370 = 8711;
          goto LABEL_579;
        }
        v566 = *(_QWORD *)(v562 + 2160);
        v567 = (geo::codec::Allocator **)(v566 + 56 * v806);
        v568 = v567 + 5;
        v569 = *(_QWORD *)(v7 + 40);
        *((_WORD *)v567 + 20) = *(_WORD *)(v569 + v563);
        *(_QWORD *)(v7 + 48) = v565;
        v570 = v563 + 4;
        if (v563 + 4 > v564)
        {
          v370 = 8712;
          goto LABEL_579;
        }
        v796 = (_WORD *)(v566 + 56 * v806 + 42);
        *v796 = *(_WORD *)(v569 + v565);
        *(_QWORD *)(v7 + 48) = v570;
        v571 = v563 + 6;
        if (v563 + 6 > v564)
        {
          v370 = 8713;
          goto LABEL_579;
        }
        v791 = (_WORD *)(v566 + 56 * v806 + 44);
        *v791 = *(_WORD *)(v569 + v570);
        *(_QWORD *)(v7 + 48) = v571;
        if (v563 + 7 > v564)
        {
          v370 = 8714;
          goto LABEL_579;
        }
        v788 = (_BYTE *)(v566 + 56 * v806 + 48);
        *v788 = *(_BYTE *)(v569 + v571);
        ++*(_QWORD *)(v7 + 48);
        v572 = geo::codec::Allocator::instance(v561);
        v573 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v572 + 16))(v572, 4 * (unsigned __int16)*v568, 8);
        *v567 = v573;
        v574 = *(_QWORD *)(v7 + 48);
        v575 = *(_QWORD *)(v7 + 56);
        if (*v568)
        {
          v576 = 0;
          v577 = 0;
          do
          {
            if (v574 + 1 > v575)
            {
              v370 = 8719;
              goto LABEL_579;
            }
            v578 = *v567;
            *((_BYTE *)*v567 + v576) = *(_BYTE *)(*(_QWORD *)(v7 + 40) + v574);
            v579 = *(_QWORD *)(v7 + 48);
            v575 = *(_QWORD *)(v7 + 56);
            v580 = v579 + 1;
            *(_QWORD *)(v7 + 48) = v579 + 1;
            v574 = v579 + 3;
            if (v574 > v575)
            {
              v370 = 8720;
              goto LABEL_579;
            }
            *(_WORD *)((char *)v578 + v576 + 2) = *(_WORD *)(*(_QWORD *)(v7 + 40) + v580);
            *(_QWORD *)(v7 + 48) = v574;
            ++v577;
            v576 += 4;
          }
          while (v577 < (unsigned __int16)*v568);
        }
        if (v574 + 2 > v575)
        {
          v370 = 8723;
          goto LABEL_579;
        }
        v581 = (_WORD *)(v566 + 56 * v806 + 46);
        *v581 = *(_WORD *)(*(_QWORD *)(v7 + 40) + v574);
        *(_QWORD *)(v7 + 48) = v574 + 2;
        v582 = geo::codec::Allocator::instance(v573);
        v583 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v582 + 16))(v582, 16 * (unsigned __int16)*v581, 8);
        v584 = v566 + 56 * v806;
        *(_QWORD *)(v584 + 24) = v583;
        v585 = (_QWORD *)(v584 + 24);
        if (*v581)
        {
          v586 = 0;
          do
          {
            v587 = *(_QWORD *)(v7 + 48);
            if ((unint64_t)(v587 + 1) > *(_QWORD *)(v7 + 56))
            {
              v370 = 8727;
              goto LABEL_579;
            }
            v588 = *v585 + 16 * v586;
            *(_BYTE *)(v588 + 8) = *(_BYTE *)(*(_QWORD *)(v7 + 40) + v587);
            ++*(_QWORD *)(v7 + 48);
            v589 = geo::codec::Allocator::instance(v583);
            v583 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v589 + 16))(v589, 16 * *(unsigned __int8 *)(v588 + 8), 8);
            *(_QWORD *)v588 = v583;
            v590 = *(unsigned __int8 *)(v588 + 8);
            if (*(_BYTE *)(v588 + 8))
            {
              v592 = *(_QWORD *)(v7 + 48);
              v591 = *(_QWORD *)(v7 + 56);
              v593 = (_WORD *)((char *)v583 + 8);
              v594 = v855;
              do
              {
                if (v592 + 2 > v591)
                {
                  v370 = 8731;
                  goto LABEL_579;
                }
                v596 = *(_QWORD *)(v7 + 40);
                *v593 = *(_WORD *)(v596 + v592);
                *(_QWORD *)(v7 + 48) = v592 + 2;
                v597 = v592 + 4;
                if (v592 + 4 > v591)
                {
                  v370 = 8734;
                  goto LABEL_579;
                }
                v598 = *(unsigned __int16 *)(v596 + v592 + 2);
                *(_QWORD *)(v7 + 48) = v597;
                v599 = v594 + 16 * v598;
                if (*(_BYTE *)(v599 + 8))
                {
                  v595 = *(_QWORD **)v599;
                  if (!v595)
                  {
                    v370 = 8738;
                    goto LABEL_579;
                  }
                }
                else
                {
                  v595 = **(_QWORD ***)v599;
                  if (!v595)
                  {
                    v370 = 8741;
                    goto LABEL_579;
                  }
                }
                *((_QWORD *)v593 - 1) = v595;
                v593 += 8;
                v592 = v597;
                --v590;
              }
              while (v590);
            }
            ++v586;
          }
          while (v586 < (unsigned __int16)*v581);
        }
        v600 = geo::codec::Allocator::instance(v583);
        v601 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v600 + 16))(v600, 16 * (unsigned __int16)*v796, 8);
        v602 = v566 + 56 * v806;
        *(_QWORD *)(v602 + 8) = v601;
        v603 = (uint64_t *)(v602 + 8);
        if (*v796)
        {
          v604 = 0;
          do
          {
            v605 = *(_QWORD *)(v7 + 48);
            if ((unint64_t)(v605 + 2) > *(_QWORD *)(v7 + 56))
            {
              v370 = 8751;
              goto LABEL_579;
            }
            v606 = *v603;
            v607 = (_WORD *)(*v603 + 16 * v604);
            *v607 = *(_WORD *)(*(_QWORD *)(v7 + 40) + v605);
            *(_QWORD *)(v7 + 48) = v605 + 2;
            v608 = geo::codec::Allocator::instance(v601);
            v601 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v608 + 16))(v608, 2 * (unsigned __int16)*v607, 8);
            *(_QWORD *)(v606 + 16 * v604 + 8) = v601;
            if (*v607)
            {
              v609 = 0;
              v611 = *(_QWORD *)(v7 + 48);
              v610 = *(_QWORD *)(v7 + 56);
              do
              {
                if (v611 + 2 > v610)
                {
                  v370 = 8754;
                  goto LABEL_579;
                }
                *((_WORD *)v601 + v609) = *(_WORD *)(*(_QWORD *)(v7 + 40) + v611);
                *(_QWORD *)(v7 + 48) = v611 + 2;
                ++v609;
                v611 += 2;
              }
              while (v609 < (unsigned __int16)*v607);
            }
            ++v604;
          }
          while (v604 < (unsigned __int16)*v796);
        }
        v612 = geo::codec::Allocator::instance(v601);
        Transformation = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v612 + 16))(v612, 32 * (unsigned __int16)*v791, 8);
        v614 = v566 + 56 * v806;
        *(_QWORD *)(v614 + 16) = Transformation;
        v615 = (uint64_t *)(v614 + 16);
        if (*v791)
        {
          for (j = 0; j < (unsigned __int16)*v791; ++j)
          {
            v617 = *(_QWORD *)(v7 + 48);
            if ((unint64_t)(v617 + 2) > *(_QWORD *)(v7 + 56))
            {
              v370 = 8761;
              goto LABEL_579;
            }
            v618 = *v615;
            v619 = (_WORD *)(*v615 + 32 * j);
            *v619 = *(_WORD *)(*(_QWORD *)(v7 + 40) + v617);
            *(_QWORD *)(v7 + 48) = v617 + 2;
            v620 = geo::codec::Allocator::instance((geo::codec::Allocator *)Transformation);
            v621 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v620 + 16))(v620, 2 * (unsigned __int16)*v619, 8);
            v622 = v618 + 32 * j;
            *(_QWORD *)(v622 + 8) = v621;
            v624 = *(_QWORD *)(v7 + 48);
            v623 = *(_QWORD *)(v7 + 56);
            if (*v619)
            {
              v625 = 0;
              do
              {
                v626 = v624 + 2;
                if (v624 + 2 > v623)
                {
                  v370 = 8764;
                  goto LABEL_579;
                }
                *((_WORD *)v621 + v625) = *(_WORD *)(*(_QWORD *)(v7 + 40) + v624);
                *(_QWORD *)(v7 + 48) = v626;
                ++v625;
                v624 += 2;
              }
              while (v625 < (unsigned __int16)*v619);
            }
            else
            {
              v626 = *(_QWORD *)(v7 + 48);
            }
            if (v626 + 2 > v623)
            {
              v370 = 8767;
              goto LABEL_579;
            }
            v627 = (_WORD *)(v622 + 2);
            *(_WORD *)(v622 + 2) = *(_WORD *)(*(_QWORD *)(v7 + 40) + v626);
            *(_QWORD *)(v7 + 48) = v626 + 2;
            v628 = geo::codec::Allocator::instance(v621);
            v629 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v628 + 16))(v628, 2 * (unsigned __int16)*v627, 8);
            *(_QWORD *)(v618 + 32 * j + 16) = v629;
            v631 = *(_QWORD *)(v7 + 48);
            v630 = *(_QWORD *)(v7 + 56);
            if (*v627)
            {
              v632 = 0;
              do
              {
                v633 = v631 + 2;
                if (v631 + 2 > v630)
                {
                  v370 = 8770;
                  goto LABEL_579;
                }
                *((_WORD *)v629 + v632) = *(_WORD *)(*(_QWORD *)(v7 + 40) + v631);
                *(_QWORD *)(v7 + 48) = v633;
                ++v632;
                v631 += 2;
              }
              while (v632 < (unsigned __int16)*v627);
            }
            else
            {
              v633 = *(_QWORD *)(v7 + 48);
            }
            if (v633 + 1 > v630)
            {
              v370 = 8774;
              goto LABEL_579;
            }
            v634 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 40) + v633);
            *(_QWORD *)(v7 + 48) = v633 + 1;
            v635 = geo::codec::Allocator::instance(v629);
            Transformation = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v635 + 24))(v635, 1, 48);
            *(_QWORD *)(v618 + 32 * j + 24) = Transformation;
            if (v634)
            {
              Transformation = geo::codec::readTransformation((_QWORD *)v7, (_DWORD *)Transformation);
              if ((Transformation & 1) == 0)
              {
                v370 = 8778;
                goto LABEL_579;
              }
            }
            else
            {
              *(_DWORD *)Transformation = 1065353216;
              *(_DWORD *)(Transformation + 20) = 1065353216;
              *(_DWORD *)(Transformation + 40) = 1065353216;
            }
          }
        }
        v636 = geo::codec::Allocator::instance((geo::codec::Allocator *)Transformation);
        v561 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v636 + 16))(v636, 2 * *v788, 8);
        *(_QWORD *)(v566 + 56 * v806 + 32) = v561;
        v637 = *v788;
        if (*v788)
        {
          v639 = *(_QWORD *)(v7 + 48);
          v638 = *(_QWORD *)(v7 + 56);
          do
          {
            if (v639 + 2 > v638)
            {
              v370 = 8788;
              goto LABEL_579;
            }
            *(_WORD *)v561 = *(_WORD *)(*(_QWORD *)(v7 + 40) + v639);
            v561 = (geo::codec::Allocator *)((char *)v561 + 2);
            *(_QWORD *)(v7 + 48) = v639 + 2;
            v639 += 2;
            --v637;
          }
          while (v637);
        }
        v562 = *a2;
        ++v806;
      }
      while (v806 < *(unsigned __int16 *)(*a2 + 2152));
    }
    v640 = *(_QWORD *)(v7 + 48);
    v825 = (int *)"ChapterDebugBlob_Scenes";
    *(_QWORD *)&v829 = &v825;
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v562 + 1912, (uint64_t *)&v825, (uint64_t)&std::piecewise_construct, (uint64_t **)&v829)[3] = v640 - v799;
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
    v797 = *(_QWORD *)(v7 + 48);
    v642 = *a2;
    v641 = a2[1];
    *(_QWORD *)buf = "ChapterDebugBlob_Assets";
    v874 = v642;
    v875 = v641;
    if (v641)
    {
      v643 = (unint64_t *)(v641 + 8);
      do
        v644 = __ldxr(v643);
      while (__stxr(v644 + 1, v643));
    }
    v876 = 0;
    v876 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
    v645 = *(_QWORD *)(v7 + 48);
    if ((unint64_t)(v645 + 2) > *(_QWORD *)(v7 + 56))
    {
      v370 = 8798;
      goto LABEL_579;
    }
    v646 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 40) + v645);
    *(_QWORD *)(v7 + 48) = v645 + 2;
    v800 = v646;
    std::vector<GeoCodecsDaVinciAsset,geo::StdAllocator<GeoCodecsDaVinciAsset,geo::codec::Allocator>>::resize(*a2 + 2072, v646);
    if ((_DWORD)v800)
    {
      v807 = 0;
      while (1)
      {
        v647 = *(_QWORD *)(v7 + 48);
        if ((unint64_t)(v647 + 2) > *(_QWORD *)(v7 + 56))
        {
          v370 = 8802;
          goto LABEL_579;
        }
        v648 = (uint64_t *)(*(_QWORD *)(*a2 + 2072) + 40 * v807);
        v649 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 40) + v647);
        *(_WORD *)v648 = v649;
        *(_QWORD *)(v7 + 48) = v647 + 2;
        v650 = v648 + 1;
        std::vector<GeoCodecsDaVinciAttributedMesh,geo::StdAllocator<GeoCodecsDaVinciAttributedMesh,geo::codec::Allocator>>::resize(v648 + 1, v649);
        if (*(_WORD *)v648)
          break;
LABEL_697:
        if (++v807 == v800)
          goto LABEL_708;
      }
      v651 = 0;
      v652 = 0;
      while (1)
      {
        v653 = *(_QWORD *)(v7 + 48);
        v654 = *(_QWORD *)(v7 + 56);
        v655 = v653 + 2;
        if (v653 + 2 > v654)
          break;
        v656 = *(_QWORD *)(v7 + 40);
        v657 = *v650;
        *(_WORD *)(*v650 + v651) = *(_WORD *)(v656 + v653);
        *(_QWORD *)(v7 + 48) = v655;
        v658 = v653 + 4;
        if (v658 > v654)
        {
          v370 = 8808;
          goto LABEL_579;
        }
        v659 = *(unsigned __int16 *)(v656 + v655);
        *(_QWORD *)(v7 + 48) = v658;
        v660 = (uint64_t *)(*(_QWORD *)(*a2 + 1136) + 16 * *(_QWORD *)(v859 + 8 * v659));
        v661 = v657 + v651;
        std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((_QWORD *)(v657 + v651 + 16), *v660, v660[1]);
        v662 = (uint64_t *)(v855 + 16 * v659);
        if (!*((_BYTE *)v662 + 8))
          v662 = (uint64_t *)*v662;
        *(_QWORD *)(v661 + 8) = *v662;
        ++v652;
        v651 += 32;
        if (v652 >= *(unsigned __int16 *)v648)
          goto LABEL_697;
      }
      v370 = 8806;
      goto LABEL_579;
    }
LABEL_708:
    v663 = *a2;
    v664 = *(_QWORD *)(v7 + 48);
    v825 = (int *)"ChapterDebugBlob_Assets";
    *(_QWORD *)&v829 = &v825;
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v663 + 1912, (uint64_t *)&v825, (uint64_t)&std::piecewise_construct, (uint64_t **)&v829)[3] = v664 - v797;
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
    if (v854)
    {
      v665 = v850;
      v666 = v851;
      v667 = v847;
      v668 = v848;
    }
    else
    {
      v668 = 0;
      v667 = 0;
      v666 = *((float *)&v844 + 3);
      v665 = *((float *)&v844 + 3);
    }
    v670 = *a2;
    v669 = a2[1];
    *(_QWORD *)buf = "ChapterDebugBlob_CompressedAssetLocations";
    v874 = v670;
    v875 = v669;
    if (v669)
    {
      v671 = (unint64_t *)(v669 + 8);
      do
        v672 = __ldxr(v671);
      while (__stxr(v672 + 1, v671));
    }
    v876 = 0;
    v876 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
    v673 = *(_QWORD *)(v7 + 48);
    if (!geo::codec::readRenderableTransforms((geo::codec::Allocator *)&v866, (uint64_t)&__p, (_QWORD *)v7, v667 | ((unint64_t)LODWORD(v665) << 32), LODWORD(v666) | (unint64_t)(v668 << 32)))
    {
      v395 = (FILE *)*MEMORY[0x1E0C80C10];
      v370 = 8845;
      goto LABEL_580;
    }
    v674 = *a2;
    v675 = *(_QWORD *)(v7 + 48);
    v825 = (int *)"ChapterDebugBlob_CompressedAssetLocations";
    *(_QWORD *)&v829 = &v825;
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v674 + 1912, (uint64_t *)&v825, (uint64_t)&std::piecewise_construct, (uint64_t **)&v829)[3] = v675 - v673;
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
    v677 = *a2;
    v676 = a2[1];
    *(_QWORD *)buf = "ChapterDebugBlob_AssetsLocation";
    v874 = v677;
    v875 = v676;
    if (v676)
    {
      v678 = (unint64_t *)(v676 + 8);
      do
        v679 = __ldxr(v678);
      while (__stxr(v679 + 1, v678));
    }
    v876 = 0;
    v876 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
    v829 = 0uLL;
    *(_QWORD *)&v830 = 0;
    *((_QWORD *)&v830 + 1) = geo::codec::Allocator::instance(v876);
    *(_QWORD *)v817 = 0;
    v680 = geo::codec::_decodeDaVinciRenderables((geo::codec::Allocator *)v7, (int8x8_t *)&v866, (uint64_t)&__p, (uint64_t *)(*a2 + 2176), (_WORD *)(*a2 + 2168), (uint64_t *)&v829, v817);
    if ((v680 & 1) != 0)
    {
      v681 = *a2;
      v682 = *(_QWORD *)v817;
      v821 = (int *)"ChapterDebugBlob_AssetsLocation";
      v825 = (int *)&v821;
      v683 = (geo::codec::Allocator *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v681 + 1912, (uint64_t *)&v821, (uint64_t)&std::piecewise_construct, (uint64_t **)&v825);
      *((_QWORD *)v683 + 3) = v682;
      *(_WORD *)(*a2 + 2796) = (DWORD2(v829) - v829) >> 3;
      v684 = geo::codec::Allocator::instance(v683);
      v685 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v684 + 16))(v684, *((_QWORD *)&v829 + 1) - v829, 8);
      *(_QWORD *)(*a2 + 2808) = v685;
      memcpy(v685, (const void *)v829, *((_QWORD *)&v829 + 1) - v829);
      v374 = 0;
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 8857);
      v374 = 6;
    }
    std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v829);
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
    if (!v680)
      goto LABEL_457;
    if (*(_DWORD *)(v7 + 64) < 0x12u)
      goto LABEL_776;
    if ((geo::codec::_decodeMaterialModifiers((_QWORD *)v7, a2) & 1) == 0)
    {
      v171 = (FILE *)*MEMORY[0x1E0C80C10];
      v172 = 8866;
      goto LABEL_221;
    }
    v686 = *(_QWORD *)(v7 + 48);
    v688 = *a2;
    v687 = a2[1];
    *(_QWORD *)buf = "ChapterDebugBlob_MaterialModifiers";
    v874 = v688;
    v875 = v687;
    if (v687)
    {
      v689 = (unint64_t *)(v687 + 8);
      do
        v690 = __ldxr(v689);
      while (__stxr(v690 + 1, v689));
    }
    v876 = 0;
    v876 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v821) = 0;
    if ((geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)&v821) & 1) == 0)
    {
      v370 = 8871;
      goto LABEL_579;
    }
    std::unordered_map<unsigned short,unsigned short>::reserve[abi:ne180100](*a2 + 2384, v821);
    if ((_DWORD)v821)
    {
      v691 = 0;
      while (1)
      {
        v692 = *(_QWORD *)(v7 + 48);
        v693 = *(_QWORD *)(v7 + 56);
        v694 = v692 + 2;
        if (v692 + 2 > v693)
          break;
        v695 = *(_QWORD *)(v7 + 40);
        v696 = *(unsigned __int16 *)(v695 + v692);
        *(_QWORD *)(v7 + 48) = v694;
        v697 = v692 + 4;
        if (v697 > v693)
        {
          v370 = 8877;
          goto LABEL_579;
        }
        v698 = *(unsigned __int16 *)(v695 + v694);
        *(_QWORD *)(v7 + 48) = v697;
        v699 = *a2;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*a2 + 2328) - *(_QWORD *)(*a2 + 2320)) >> 3) <= v696)
        {
          v370 = 8878;
          goto LABEL_579;
        }
        if (v698 >= (uint64_t)(*(_QWORD *)(v699 + 2112) - *(_QWORD *)(v699 + 2104)) >> 4)
        {
          v370 = 8879;
          goto LABEL_579;
        }
        std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,unsigned short>>(v699 + 2384, v696, v696, v698);
        if (++v691 >= v821)
          goto LABEL_745;
      }
      v370 = 8876;
      goto LABEL_579;
    }
LABEL_745:
    v700 = *a2;
    v701 = *(_QWORD *)(v7 + 48);
    v825 = (int *)"ChapterDebugBlob_MaterialModifiers";
    *(_QWORD *)&v829 = &v825;
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v700 + 1912, (uint64_t *)&v825, (uint64_t)&std::piecewise_construct, (uint64_t **)&v829)[3] = v701 - v686;
    v702 = *(unsigned __int16 *)(*a2 + 2168);
    if (*(_WORD *)(*a2 + 2168))
    {
      v703 = 0;
      do
      {
        if (std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::find[abi:ne180100](__p, *((unint64_t *)&__p + 1), v703))
        {
          v704 = *(_QWORD *)(*a2 + 2176);
          v705 = v704 + 48 * v703;
          v707 = *(unsigned __int16 *)(v705 + 42);
          v706 = (unsigned __int16 *)(v705 + 42);
          if (v707)
          {
            v708 = 0;
            v709 = (_QWORD *)(v704 + 48 * v703 + 8);
            do
            {
              v710 = *(_DWORD *)(*std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::at(__p, *((unint64_t *)&__p + 1), v703)+ 4 * v708);
              if (v710)
              {
                v711 = (v710 - 1);
                v712 = *(_QWORD *)(*a2 + 2104);
                if (v711 >= (*(_QWORD *)(*a2 + 2112) - v712) >> 4)
                {
                  v395 = (FILE *)*MEMORY[0x1E0C80C10];
                  v370 = 8896;
                  goto LABEL_580;
                }
                v713 = v712 + 16 * v711;
                if (*(_BYTE *)(v713 + 12))
                  *(_BYTE *)(*v709 + v708) |= 1u;
                if (*(_BYTE *)(v713 + 13))
                  *(_BYTE *)(*v709 + v708) |= 2u;
              }
              ++v708;
            }
            while (v708 < *v706);
          }
        }
        ++v703;
      }
      while (v703 != v702);
    }
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
    if (*(_DWORD *)(v7 + 64) <= 0x16u)
    {
LABEL_776:
      LOBYTE(v715) = 15;
    }
    else
    {
      v714 = *(_QWORD *)(v7 + 48);
      if ((unint64_t)(v714 + 1) > *(_QWORD *)(v7 + 56))
      {
        v171 = (FILE *)*MEMORY[0x1E0C80C10];
        v172 = 8918;
        goto LABEL_221;
      }
      v715 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 40) + v714);
      *(_QWORD *)(v7 + 48) = v714 + 1;
      if (!v715)
      {
        if (qword_1ECDBCDF8 != -1)
          dispatch_once(&qword_1ECDBCDF8, &__block_literal_global_217);
        v744 = _MergedGlobals_352;
        LOBYTE(v715) = 15;
        if (os_log_type_enabled((os_log_t)_MergedGlobals_352, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = 15;
          _os_log_impl(&dword_1885A9000, v744, OS_LOG_TYPE_ERROR, "Signed distance resolution cannot be 0. Defaulting to %d", buf, 8u);
        }
      }
    }
    v716 = *(unsigned __int16 *)(*a2 + 2048);
    if (*(_WORD *)(*a2 + 2048))
    {
      v717 = 0;
      v718 = *(_QWORD *)(*a2 + 2056);
      v719 = ~(-1 << v715);
      __asm { FMOV            V2.2D, #1.0 }
      v723 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v719), 0));
      v724 = 1.0 / (double)v719;
      do
      {
        v725 = v718 + (v717 << 6);
        v726 = *(float32x2_t **)(v725 + 40);
        if (!v726)
          goto LABEL_779;
        v727 = *(unsigned int *)(v725 + 8);
        if (!(_DWORD)v727)
          goto LABEL_779;
        if (v727 >= 8)
        {
          v728 = v727 & 0xFFFFFFF8;
          v729 = v726 + 2;
          v730 = v728;
          do
          {
            v731 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*v729), v723)), vmulq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v729->f32), v723));
            *(float32x4_t *)v729[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v729[-2]), v723)), vmulq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v729[-2].f32), v723));
            *(float32x4_t *)v729->f32 = v731;
            v729 += 4;
            v730 -= 8;
          }
          while (v730);
          if (v728 == v727)
            goto LABEL_779;
        }
        else
        {
          v728 = 0;
        }
        v732 = v727 - v728;
        v733 = (float *)v726 + v728;
        do
        {
          v734 = *v733 * v724;
          *v733++ = v734;
          --v732;
        }
        while (v732);
LABEL_779:
        ++v717;
      }
      while (v717 != v716);
    }
    if (*(_DWORD *)(v7 + 64) <= 0x17u)
      goto LABEL_833;
    LODWORD(v825) = 0;
    LODWORD(v821) = 0;
    v817[0] = 0;
    LODWORD(v815.f64[0]) = 0;
    if ((geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)&v825) & 1) == 0)
    {
      v378 = (FILE *)*MEMORY[0x1E0C80C10];
      v379 = 8939;
      goto LABEL_455;
    }
    if ((geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)&v821) & 1) == 0)
    {
      v378 = (FILE *)*MEMORY[0x1E0C80C10];
      v379 = 8940;
      goto LABEL_455;
    }
    if ((geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)v817) & 1) == 0)
    {
      v378 = (FILE *)*MEMORY[0x1E0C80C10];
      v379 = 8941;
      goto LABEL_455;
    }
    if ((geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)&v815) & 1) == 0)
    {
      v378 = (FILE *)*MEMORY[0x1E0C80C10];
      v379 = 8942;
      goto LABEL_455;
    }
    if (!(_DWORD)v825)
    {
LABEL_833:
      std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&__src);
      goto LABEL_18;
    }
    LODWORD(v813) = 0;
    VarUint32 = geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)&v813);
    if ((VarUint32 & 1) == 0)
    {
      v378 = (FILE *)*MEMORY[0x1E0C80C10];
      v379 = 8946;
      goto LABEL_455;
    }
    v736 = *(_QWORD *)(v7 + 48);
    v737 = v736 + v813;
    if (v737 > *(_QWORD *)(v7 + 56))
    {
      v378 = (FILE *)*MEMORY[0x1E0C80C10];
      v379 = 8949;
      goto LABEL_455;
    }
    v738 = *(_QWORD *)(v7 + 40);
    *(_QWORD *)(v7 + 48) = v737;
    *(_QWORD *)buf = 0;
    v874 = 0;
    v875 = 0;
    v876 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
    if (!geo::codec::decompressiArray(v738 + v736, v813, (int32x4_t **)buf))
    {
      v742 = (FILE *)*MEMORY[0x1E0C80C10];
      v743 = 8952;
      goto LABEL_820;
    }
    LODWORD(v811[0]) = 0;
    v739 = geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)v811);
    if ((v739 & 1) == 0)
    {
      v742 = (FILE *)*MEMORY[0x1E0C80C10];
      v743 = 8955;
      goto LABEL_820;
    }
    v740 = *(_QWORD *)(v7 + 48);
    v741 = v740 + LODWORD(v811[0]);
    if (v741 > *(_QWORD *)(v7 + 56))
    {
      v742 = (FILE *)*MEMORY[0x1E0C80C10];
      v743 = 8958;
LABEL_820:
      fprintf(v742, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v743);
      std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)buf);
      goto LABEL_456;
    }
    v745 = *(_QWORD *)(v7 + 40);
    *(_QWORD *)(v7 + 48) = v741;
    v746 = geo::codec::Allocator::instance((geo::codec::Allocator *)v739);
    v747 = (uint64x2_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v746 + 16))(v746, 8 * v825, 8);
    *(_QWORD *)(*a2 + 2064) = v747;
    v829 = 0u;
    v830 = 0u;
    if (mgcl::ints::IntDecompressor<unsigned long long>::decompress((uint64_t *)&v829, (unsigned __int8 *)(v745 + v740), LODWORD(v811[0]), (char)v821, v817[0], v825, v747))
    {
      v748 = 8963;
    }
    else
    {
      v749 = *a2;
      v750 = (LODWORD(v815.f64[0]) + 1);
      if (v750 <= *(unsigned __int16 *)(*a2 + 2048))
      {
        if (LODWORD(v815.f64[0]) != -1)
        {
          v752 = *(_QWORD *)(v749 + 2064);
          v753 = *(_QWORD *)(v749 + 2056);
          v754 = *(int **)buf;
          v755 = v753 + 48;
          do
          {
            *(_QWORD *)v755 = 0;
            *(_DWORD *)(v755 + 8) = *v754;
            v757 = *v754++;
            v756 = v757;
            if (v757 >= 1)
            {
              *(_QWORD *)v755 = v752;
              v752 += 8 * v756;
            }
            v755 += 64;
            --v750;
          }
          while (v750);
        }
        v374 = 0;
        v751 = 1;
LABEL_832:
        mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v829);
        std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)buf);
        if ((v751 & 1) == 0)
          goto LABEL_457;
        goto LABEL_833;
      }
      v748 = 8967;
    }
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v748);
    v751 = 0;
    v374 = 6;
    goto LABEL_832;
  }
  v398 = 0;
  v399 = *(_QWORD *)(v7 + 56);
  v400 = 72 * v396;
  while (1)
  {
    if (v397 + 4 > v399)
    {
      v395 = (FILE *)*MEMORY[0x1E0C80C10];
      v370 = 8575;
      goto LABEL_580;
    }
    v401 = *(_QWORD *)(*a2 + 2200);
    *(_DWORD *)(v401 + v398 + 8) = *(_DWORD *)(*(_QWORD *)(v7 + 40) + v397);
    v402 = *(_QWORD *)(v7 + 48);
    v403 = *(_QWORD *)(v7 + 56);
    *(_QWORD *)(v7 + 48) = v402 + 4;
    if (v402 + 8 > v403)
    {
      v395 = (FILE *)*MEMORY[0x1E0C80C10];
      v370 = 8576;
      goto LABEL_580;
    }
    *(_DWORD *)(v401 + v398 + 12) = *(_DWORD *)(*(_QWORD *)(v7 + 40) + v402 + 4);
    v404 = *(_QWORD *)(v7 + 48);
    v405 = *(_QWORD *)(v7 + 56);
    *(_QWORD *)(v7 + 48) = v404 + 4;
    if (v404 + 8 > v405)
    {
      v395 = (FILE *)*MEMORY[0x1E0C80C10];
      v370 = 8577;
      goto LABEL_580;
    }
    *(_DWORD *)(v401 + v398 + 16) = *(_DWORD *)(*(_QWORD *)(v7 + 40) + v404 + 4);
    v406 = *(_QWORD *)(v7 + 48);
    v407 = *(_QWORD *)(v7 + 56);
    *(_QWORD *)(v7 + 48) = v406 + 4;
    if (v406 + 8 > v407)
    {
      v395 = (FILE *)*MEMORY[0x1E0C80C10];
      v370 = 8578;
      goto LABEL_580;
    }
    *(_DWORD *)(v401 + v398 + 20) = *(_DWORD *)(*(_QWORD *)(v7 + 40) + v406 + 4);
    v408 = *(_QWORD *)(v7 + 48);
    v409 = *(_QWORD *)(v7 + 56);
    *(_QWORD *)(v7 + 48) = v408 + 4;
    if (v408 + 8 > v409)
    {
      v395 = (FILE *)*MEMORY[0x1E0C80C10];
      v370 = 8579;
      goto LABEL_580;
    }
    *(_DWORD *)(v401 + v398 + 24) = *(_DWORD *)(*(_QWORD *)(v7 + 40) + v408 + 4);
    v410 = *(_QWORD *)(v7 + 48);
    v411 = *(_QWORD *)(v7 + 56);
    *(_QWORD *)(v7 + 48) = v410 + 4;
    if (v410 + 8 > v411)
    {
      v395 = (FILE *)*MEMORY[0x1E0C80C10];
      v370 = 8580;
      goto LABEL_580;
    }
    *(_DWORD *)(v401 + v398 + 28) = *(_DWORD *)(*(_QWORD *)(v7 + 40) + v410 + 4);
    v412 = *(_QWORD *)(v7 + 48);
    v413 = *(_QWORD *)(v7 + 56);
    *(_QWORD *)(v7 + 48) = v412 + 4;
    if (v412 + 8 > v413)
    {
      v395 = (FILE *)*MEMORY[0x1E0C80C10];
      v370 = 8581;
      goto LABEL_580;
    }
    *(_DWORD *)(v401 + v398 + 32) = *(_DWORD *)(*(_QWORD *)(v7 + 40) + v412 + 4);
    v414 = *(_QWORD *)(v7 + 48);
    v415 = *(_QWORD *)(v7 + 56);
    *(_QWORD *)(v7 + 48) = v414 + 4;
    if (v414 + 8 > v415)
    {
      v395 = (FILE *)*MEMORY[0x1E0C80C10];
      v370 = 8582;
      goto LABEL_580;
    }
    *(_DWORD *)(v401 + v398 + 36) = *(_DWORD *)(*(_QWORD *)(v7 + 40) + v414 + 4);
    v416 = *(_QWORD *)(v7 + 48);
    v417 = *(_QWORD *)(v7 + 56);
    *(_QWORD *)(v7 + 48) = v416 + 4;
    if (v416 + 8 > v417)
    {
      v395 = (FILE *)*MEMORY[0x1E0C80C10];
      v370 = 8583;
      goto LABEL_580;
    }
    *(_DWORD *)(v401 + v398 + 40) = *(_DWORD *)(*(_QWORD *)(v7 + 40) + v416 + 4);
    v418 = *(_QWORD *)(v7 + 48);
    v419 = *(_QWORD *)(v7 + 56);
    v420 = v418 + 4;
    *(_QWORD *)(v7 + 48) = v418 + 4;
    if (*(_DWORD *)(v7 + 64) <= 0xFu)
      break;
    v421 = v418 + 6;
    if (v421 > v419)
    {
      v395 = (FILE *)*MEMORY[0x1E0C80C10];
      v370 = 8594;
      goto LABEL_580;
    }
    v422 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 40) + v420);
    *(_QWORD *)(v7 + 48) = v421;
    v423 = (uint64_t *)(v855 + 16 * v422);
    v424 = (uint64_t *)(*(_QWORD *)(*a2 + 1136) + 16 * *(_QWORD *)(v859 + 8 * v422));
    std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((_QWORD *)(v401 + v398 + 48), *v424, v424[1]);
    if (!*((_BYTE *)v423 + 8))
      v423 = (uint64_t *)*v423;
    *(_QWORD *)(v401 + v398) = *v423;
    v425 = *(_QWORD *)(v7 + 48);
    v399 = *(_QWORD *)(v7 + 56);
    v426 = v425 + 2;
    if (v425 + 2 > v399)
    {
      v395 = (FILE *)*MEMORY[0x1E0C80C10];
      v370 = 8605;
      goto LABEL_580;
    }
    v427 = *(_QWORD *)(v7 + 40);
    *(_WORD *)(v401 + v398 + 66) = *(_WORD *)(v427 + v425);
    *(_QWORD *)(v7 + 48) = v426;
    v397 = v425 + 4;
    if (v425 + 4 > v399)
    {
      v395 = (FILE *)*MEMORY[0x1E0C80C10];
      v370 = 8606;
      goto LABEL_580;
    }
    *(_WORD *)(v401 + v398 + 64) = *(_WORD *)(v427 + v426);
    *(_QWORD *)(v7 + 48) = v397;
    v398 += 72;
    if (v400 == v398)
      goto LABEL_493;
  }
  v492 = v418 + 12;
  if (v418 + 12 <= v419)
  {
    *(_QWORD *)(v401 + v398) = *(_QWORD *)(*(_QWORD *)(v7 + 40) + v420);
    v503 = v418 + 14;
    v504 = v503 > v419;
    if (v503 > v419)
      v503 = v492;
    *(_QWORD *)(v7 + 48) = v503;
    v395 = (FILE *)*MEMORY[0x1E0C80C10];
    v370 = 8587;
    if (!v504)
      v370 = 8588;
  }
  else
  {
    v395 = (FILE *)*MEMORY[0x1E0C80C10];
    v370 = 8585;
  }
LABEL_580:
  fprintf(v395, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v370);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
LABEL_222:
  std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&__src);
LABEL_30:
  v24 = 0;
LABEL_31:
  if (*(_BYTE *)v7)
  {
    {
      v146 = operator new();
      geo::MallocZoneAllocator::MallocZoneAllocator(v146, "GeoCodec", 0x99AFC36000000008, 0, 0);
      geo::codec::Allocator::instance(void)::alloc = v146;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v7 + 40), 0);
  }
  {
    v144 = operator new();
    geo::MallocZoneAllocator::MallocZoneAllocator(v144, "GeoCodec", 0x99AFC36000000008, 0, 0);
    geo::codec::Allocator::instance(void)::alloc = v144;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v7, 0);
  if ((v24 & 1) != 0)
  {
    v19 = 1;
  }
  else
  {
    geo::codec::VectorTile::DaVinciReadDebugBlobDealloc((geo::codec::Allocator **)*a2);
    v32 = v855;
    for (k = v856; v32 != k; v32 += 16)
    {
      if (v32)
      {
        if (!*(_BYTE *)(v32 + 8))
        {
          v34 = *(_QWORD **)v32;
          if (*(_QWORD *)v32)
          {
            if (v34[2])
            {
              if ((v35 & 1) == 0
              {
                v40 = operator new();
                geo::MallocZoneAllocator::MallocZoneAllocator(v40, "GeoCodec", 0x99AFC36000000008, 0, 0);
                geo::codec::Allocator::instance(void)::alloc = v40;
              }
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                              + 40))(geo::codec::Allocator::instance(void)::alloc, v34[2], 0);
            }
            if (v34[3])
            {
              if ((v36 & 1) == 0
              {
                v41 = operator new();
                geo::MallocZoneAllocator::MallocZoneAllocator(v41, "GeoCodec", 0x99AFC36000000008, 0, 0);
                geo::codec::Allocator::instance(void)::alloc = v41;
              }
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                              + 40))(geo::codec::Allocator::instance(void)::alloc, v34[3], 0);
            }
            v37 = v34[4];
            if (v37)
            {
              if (*(_QWORD *)(v37 + 8))
              {
                if ((v38 & 1) == 0
                {
                  v43 = operator new();
                  geo::MallocZoneAllocator::MallocZoneAllocator(v43, "GeoCodec", 0x99AFC36000000008, 0, 0);
                  geo::codec::Allocator::instance(void)::alloc = v43;
                }
                (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(v34[4] + 8), 0);
              }
              if ((v39 & 1) == 0
              {
                v42 = operator new();
                geo::MallocZoneAllocator::MallocZoneAllocator(v42, "GeoCodec", 0x99AFC36000000008, 0, 0);
                geo::codec::Allocator::instance(void)::alloc = v42;
              }
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                              + 40))(geo::codec::Allocator::instance(void)::alloc, v34[4], 0);
            }
          }
        }
      }
    }
    if (*(_QWORD *)(*a2 + 2064))
    {
      {
        v148 = operator new();
        geo::MallocZoneAllocator::MallocZoneAllocator(v148, "GeoCodec", 0x99AFC36000000008, 0, 0);
        geo::codec::Allocator::instance(void)::alloc = v148;
      }
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(_QWORD *)(*a2 + 2064), 0);
      v19 = 0;
      *(_QWORD *)(*a2 + 2064) = 0;
    }
    else
    {
      v19 = 0;
    }
  }
LABEL_67:
  if (v855)
  {
    v856 = v855;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v858 + 40))(v858, v855, v857 - v855);
  }
  if (v859)
  {
    v860 = v859;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v862 + 40))(v862, v859, v861 - v859);
  }
  v45 = (void **)v864;
  if ((_QWORD)v864)
  {
    do
    {
      v56 = (void **)*v45;
      v57 = v45[3];
      if (v57)
      {
        v45[4] = v57;
        (*(void (**)(void *, void *, int64_t))(*(_QWORD *)v45[6] + 40))(v45[6], v57, (_BYTE *)v45[5] - (_BYTE *)v57);
      }
      operator delete(v45);
      v45 = v56;
    }
    while (v56);
  }
  v46 = (void *)__p;
  *(_QWORD *)&__p = 0;
  if (v46)
    operator delete(v46);
  v47 = (void **)v867;
  if ((_QWORD)v867)
  {
    do
    {
      v58 = (void **)*v47;
      v59 = v47[3];
      if (v59)
      {
        v47[4] = v59;
        (*(void (**)(void *, void *, int64_t))(*(_QWORD *)v47[6] + 40))(v47[6], v59, (_BYTE *)v47[5] - (_BYTE *)v59);
      }
      operator delete(v47);
      v47 = v58;
    }
    while (v58);
  }
  v48 = (void *)v866;
  *(_QWORD *)&v866 = 0;
  if (v48)
    operator delete(v48);
  v50 = (uint64_t)v869;
  v49 = v870;
  v51.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v52 = rep;
  v846 = v50;
  if (v50)
  {
    v839 = &v846;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v49 + 1912, &v846, (uint64_t)&std::piecewise_construct, &v839)+ 4) = (double)((v51.__d_.__rep_ - v52) / 1000) * 0.001;
  }
  v53 = v871;
  if (v871)
  {
    p_shared_owners = (unint64_t *)&v871->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  return v19;
}

void sub_1886E0B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;

  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a71);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v71 - 176));
  std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&STACK[0x218]);
  std::vector<VMP4Material,geo::StdAllocator<VMP4Material,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&STACK[0x2C0]);
  std::vector<unsigned long,geo::StdAllocator<unsigned long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&STACK[0x2E0]);
  std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::~unordered_map[abi:ne180100]((uint64_t)&STACK[0x300]);
  std::unordered_map<unsigned int,std::vector<geo::Transform<float>,geo::StdAllocator<geo::Transform<float>,geo::codec::Allocator>>>::~unordered_map[abi:ne180100](v71 - 256);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v71 - 216));
  _Unwind_Resume(a1);
}

void sub_1886E0E60(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t geo::codec::initTile(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  __int128 v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25[4];
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v4 = 0uLL;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  v26 = 0;
  v27 = a2;
  v29 = a3;
  if (a3 < 4)
    goto LABEL_33;
  if (a3 < 6)
    goto LABEL_33;
  if (*(_DWORD *)a2 != 877677910)
    goto LABEL_33;
  *((_WORD *)a1 + 8) = *(_WORD *)(a2 + 4);
  if (a3 < 8)
    goto LABEL_33;
  v7 = *(unsigned __int16 *)(a2 + 6);
  if (!*(_WORD *)(a2 + 6))
  {
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_20;
  }
  a1[1] = v7;
  v8 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  v9 = 16 * v7;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 16 * v7, 8);
  v4 = 0uLL;
  *a1 = result;
  if (result)
  {
    v11 = 0;
    v12 = (unsigned int *)(result + 4);
    v13 = -1;
    do
    {
      if (v11 + 10 > a3)
        goto LABEL_32;
      *((_WORD *)v12 - 2) = *(_WORD *)(a2 + v11 + 8);
      if (v11 + 14 > a3)
        goto LABEL_32;
      v14 = *(_DWORD *)(a2 + v11 + 10);
      *v12 = v14;
      if (v11 + 18 > a3)
        goto LABEL_32;
      v12[1] = *(_DWORD *)(a2 + v11 + 14);
      if (v14 < v13)
        v13 = v14;
      v11 += 10;
      v12 += 4;
    }
    while (10 * v7 != v11);
    v28 = v11 + 8;
    if (v11 + 8 < (unint64_t)v13)
    {
      v15 = 0;
      while (1)
      {
        result = geo::codec::chapterReadVarUint32(v25, (unsigned int *)(*a1 + v15 + 12));
        if ((result & 1) == 0)
          break;
        v15 += 16;
        if (v9 == v15)
          goto LABEL_20;
      }
      v4 = 0uLL;
      if (!*a1)
        goto LABEL_33;
      goto LABEL_32;
    }
    if (v7 < 2)
    {
      v19 = 0;
LABEL_37:
      v23 = v7 - v19;
      v24 = (_DWORD *)(result + 16 * v19 + 12);
      do
      {
        *v24 = -1;
        v24 += 4;
        --v23;
      }
      while (v23);
      goto LABEL_20;
    }
    v19 = (unsigned __int16)v7 & 0xFFFE;
    v21 = (_DWORD *)(result + 28);
    v22 = v19;
    do
    {
      *(v21 - 4) = -1;
      *v21 = -1;
      v21 += 8;
      v22 -= 2;
    }
    while (v22);
    if (v19 != v7)
      goto LABEL_37;
LABEL_20:
    a1[3] = a2;
    a1[4] = a3;
    *((_DWORD *)a1 + 5) = 70;
    v16 = a1[1];
    if (!v16)
      return 1;
    v17 = (_DWORD *)(*a1 + 8);
    result = 1;
    while (*v17 && (*v17 + *(v17 - 1)) <= a3)
    {
      v17 += 4;
      if (!--v16)
        return result;
    }
LABEL_32:
    v20 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v20 + 40))(v20, *a1, 0);
    v4 = 0uLL;
  }
LABEL_33:
  result = 0;
  *((_OWORD *)a1 + 1) = v4;
  *((_OWORD *)a1 + 2) = v4;
  *(_OWORD *)a1 = v4;
  return result;
}

uint64_t geo::codec::_populateTransitNodeStyleAttributes(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t result;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  __int128 v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  geo::codec::Allocator *v48;
  std::__shared_weak_count *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 1408);
  v3 = *(_QWORD *)(*a1 + 1416) - v2;
  if (!v3)
    return 1;
  v5 = 0;
  v6 = v3 / 344;
  if (v6 <= 1)
    v6 = 1;
  v7 = (_QWORD *)(v2 + 312);
  do
  {
    v8 = v5;
    v9 = *(v7 - 10);
    *(v7 - 1) = v5;
    *v7 = v9;
    v5 += v9;
    v7 += 43;
    --v6;
  }
  while (v6);
  if (!v5)
    return 1;
  v10 = *(_QWORD **)(v1 + 1728);
  v11 = *(_QWORD *)(v1 + 1720);
  v12 = ((uint64_t)v10 - v11) >> 4;
  v13 = v5 - v12;
  if (v5 <= v12)
  {
    if (v5 >= v12)
      goto LABEL_47;
    v24 = (_QWORD *)(v11 + 16 * v5);
    while (v10 != v24)
    {
      v25 = (std::__shared_weak_count *)*(v10 - 1);
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v10 -= 2;
    }
    goto LABEL_33;
  }
  v14 = *(_QWORD *)(v1 + 1736);
  if (v13 <= (v14 - (uint64_t)v10) >> 4)
  {
    v28 = 16 * v13;
    v24 = &v10[2 * v13];
    do
    {
      if (v10)
      {
        *v10 = 0;
        v10[1] = 0;
      }
      v10 += 2;
      v28 -= 16;
    }
    while (v28);
LABEL_33:
    *(_QWORD *)(v1 + 1728) = v24;
    goto LABEL_47;
  }
  if (v5 >> 60)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v15 = v14 - v11;
  v16 = v15 >> 3;
  if (v15 >> 3 <= v5)
    v16 = v5;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
    v17 = 0xFFFFFFFFFFFFFFFLL;
  else
    v17 = v16;
  v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 1744) + 16))(*(_QWORD *)(v1 + 1744), 16 * v17, 8);
  v19 = (_QWORD *)(v18 + 16 * v12);
  v20 = v18 + 16 * v5;
  v21 = 16 * (v8 + v9) - 16 * v12;
  v22 = v19;
  do
  {
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
    }
    v22 += 2;
    v21 -= 16;
  }
  while (v21);
  v29 = v18 + 16 * v17;
  v30 = *(_QWORD **)(v1 + 1728);
  v31 = *(_QWORD **)(v1 + 1720);
  if (v30 == v31)
  {
    *(_QWORD *)(v1 + 1720) = v19;
    *(_QWORD *)(v1 + 1728) = v20;
    v34 = *(_QWORD *)(v1 + 1736);
    *(_QWORD *)(v1 + 1736) = v29;
  }
  else
  {
    do
    {
      v32 = *((_OWORD *)v30 - 1);
      v30 -= 2;
      *((_OWORD *)v19 - 1) = v32;
      v19 -= 2;
      *v30 = 0;
      v30[1] = 0;
    }
    while (v30 != v31);
    v30 = *(_QWORD **)(v1 + 1720);
    v33 = *(_QWORD **)(v1 + 1728);
    *(_QWORD *)(v1 + 1720) = v19;
    *(_QWORD *)(v1 + 1728) = v20;
    v34 = *(_QWORD *)(v1 + 1736);
    *(_QWORD *)(v1 + 1736) = v29;
    while (v33 != v30)
    {
      v35 = (std::__shared_weak_count *)*(v33 - 1);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v33 -= 2;
    }
  }
  if (v30)
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v1 + 1744) + 40))(*(_QWORD *)(v1 + 1744), v30, v34 - (_QWORD)v30);
LABEL_47:
  v38 = *a1;
  v39 = *(_QWORD *)(*a1 + 1408);
  if (*(_QWORD *)(*a1 + 1416) == v39)
    return 1;
  v40 = 0;
  while (1)
  {
    v41 = (_QWORD *)(v39 + 344 * v40);
    v43 = v41 + 29;
    v42 = v41[29];
    if (v42)
      break;
LABEL_103:
    ++v40;
    v39 = *(_QWORD *)(v38 + 1408);
    result = 1;
    if (v40 >= 0x82FA0BE82FA0BE83 * ((*(_QWORD *)(v38 + 1416) - v39) >> 3))
      return result;
  }
  v44 = 0;
  v45 = v39 + 344 * v40;
  v46 = (_QWORD *)(v45 + 304);
  v83 = (_QWORD *)(v45 + 224);
  while (v42 > v44)
  {
    v47 = (std::__shared_weak_count *)v41[1];
    if (!v47)
      break;
    v48 = (geo::codec::Allocator *)std::__shared_weak_count::lock(v47);
    if (!v48)
      break;
    v49 = (std::__shared_weak_count *)v48;
    v50 = (_QWORD *)*v41;
    if (*v41)
    {
      v51 = *(_QWORD *)(v50[180] + 8 * (*v83 + v44));
      v52 = v50[165];
      v53 = v50[164];
      v54 = 0x8E38E38E38E38E39 * ((v52 - v53) >> 3);
      v55 = v53 + 72 * v51;
      if (v51 >= v54)
        v56 = 0;
      else
        v56 = v55;
    }
    else
    {
      v56 = 0;
    }
    v57 = (unint64_t *)((char *)v48 + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      (*(void (**)(geo::codec::Allocator *))(*(_QWORD *)v48 + 16))(v48);
      std::__shared_weak_count::__release_weak(v49);
    }
    if (!v56)
      break;
    v60 = *(_QWORD *)(v56 + 24);
    v59 = *(std::__shared_weak_count **)(v56 + 32);
    v88 = v60;
    v89 = v59;
    if (v59)
    {
      v61 = (unint64_t *)&v59->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v63 = v41[3];
    v90 = v63;
    v64 = (std::__shared_weak_count *)v41[4];
    v91 = v64;
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = geo::codec::Allocator::instance(v48);
    v67 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v87 + 16))(v87, 32, 8);
    v84 = v67;
    v85 = v67;
    v86 = v67 + 4;
    if (v67)
    {
      *v67 = v60;
      v67[1] = v59;
      if (v59)
      {
        v68 = (unint64_t *)&v59->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
    }
    v67[2] = v63;
    v67[3] = v64;
    if (v64)
    {
      v70 = (unint64_t *)&v64->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
      v85 = v67 + 4;
      do
        v72 = __ldaxr(v70);
      while (__stlxr(v72 - 1, v70));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    else
    {
      v85 = v67 + 4;
    }
    v73 = v89;
    if (v89)
    {
      v74 = (unint64_t *)&v89->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76 = geo::codec::unionStyleAttributes((uint64_t *)&v84, (uint64_t *)(*(_QWORD *)(*a1 + 1720) + 16 * (*v46 + v44)), *a1 + 1112);
    if ((v76 & 1) == 0)
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 6375);
    v77 = (uint64_t)v84;
    if (v84)
    {
      v78 = v85;
      v79 = (uint64_t)v84;
      if (v85 != v84)
      {
        do
        {
          v80 = (std::__shared_weak_count *)*(v78 - 1);
          if (v80)
          {
            v81 = (unint64_t *)&v80->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *, uint64_t))v80->__on_zero_shared)(v80, v79);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          v78 -= 2;
        }
        while (v78 != (_QWORD *)v77);
        v79 = (uint64_t)v84;
      }
      v85 = (_QWORD *)v77;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v87 + 40))(v87, v79, (uint64_t)v86 - v79);
    }
    if ((v76 & 1) == 0)
      return 0;
    ++v44;
    v42 = *v43;
    if (v44 >= *v43)
    {
      v38 = *a1;
      goto LABEL_103;
    }
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 6372);
  return 0;
}

void sub_1886E1740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t geo::codec::_readDaVinciTrafficSkeletonOld(_QWORD *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::chrono::steady_clock::time_point v14;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  FILE *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL8 v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v44;
  uint64_t v45;
  geo::codec::Allocator *v46;
  double v47;
  double v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  int8x16_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  float v73;
  int v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  float v86;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  float *v97;
  unint64_t v98;
  float v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  float32x2_t v105;
  int v106;
  double v107;
  unint64_t v108;
  unint64_t v109;
  unsigned int v111;
  unsigned int v112;
  float32x2_t v113;
  float32x2_t v114;
  unsigned int v115;
  double v116;
  float v117;
  float v118;
  BOOL v119;
  float v120;
  BOOL v121;
  _BOOL4 v122;
  double v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  double v127;
  float32x2_t v128;
  float32x2_t v129;
  double v130;
  unsigned int v131;
  float32x2_t v132;
  float32x2_t v133;
  double v134;
  double v135;
  int v136;
  unint64_t v137;
  uint64_t v138;
  float v139;
  float v140;
  unint64_t v141;
  float v142;
  uint64_t v143;
  float *v144;
  float v145;
  double v146;
  float32x2_t v147;
  float32x2_t v148;
  double v149;
  unsigned int v150;
  float32x2_t v151;
  uint64_t v152;
  float32x2_t *v153;
  float v154;
  int8x16_t v155;
  int32x4_t *v156;
  float64x2_t v157;
  unsigned int v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  const float *i32;
  int32x4_t v163;
  int32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  FILE *v172;
  int v173;
  int v174;
  FILE *v175;
  int v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int log;
  NSObject *loga;
  NSObject *logb;
  int v187;
  uint64_t v188;
  int v189;
  unint64_t v190;
  float *v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  unsigned int v195;
  float32x2_t *v196;
  char v197;
  unsigned int v198;
  unint64_t v199;
  int v200;
  int v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD v207[4];
  unsigned int *v208;
  uint64_t v209;
  uint64_t v210;
  geo::codec::Allocator *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  geo::codec::Allocator *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  geo::codec::Allocator *v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  geo::codec::Allocator *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  geo::codec::Allocator *v231;
  int v232;
  int v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int v236;
  unsigned int v237;
  const char *v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v241;
  _BYTE buf[24];
  _BYTE v243[6];
  _BYTE v244[10];
  __int16 v245;
  double v246;
  uint64_t v247;
  float32x4x2_t v248;

  v247 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = a1[1];
  if (!v7)
  {
LABEL_5:
    v10 = 0;
    v238 = "ChapterTrafficSkeleton1";
    v239 = v6;
    v11 = (std::__shared_weak_count *)a3[1];
    v240 = v11;
    if (!v11)
      goto LABEL_10;
    goto LABEL_8;
  }
  v8 = 0;
  v9 = 0;
  while (*(_WORD *)(*a1 + 16 * v8) != 146)
  {
    v8 = ++v9;
    if (v7 <= v9)
      goto LABEL_5;
  }
  v10 = geo::codec::chapterAt((uint64_t)a1, v9, 146, v6 + 1912);
  v6 = *a3;
  v11 = (std::__shared_weak_count *)a3[1];
  v238 = "ChapterTrafficSkeleton1";
  v239 = v6;
  v240 = v11;
  if (v11)
  {
LABEL_8:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
LABEL_10:
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v14.__d_.__rep_;
  v241 = v14.__d_.__rep_;
  if (!v10)
  {
    v16 = 1;
    goto LABEL_30;
  }
  if (*(_QWORD *)(*a3 + 2928) != *(_QWORD *)(*a3 + 2920))
  {
    v16 = 1;
    goto LABEL_26;
  }
  v14.__d_.__rep_ = geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)(v10 + 64));
  if ((v14.__d_.__rep_ & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 10526;
    goto LABEL_24;
  }
  if (*(_DWORD *)(v10 + 64) != 1)
  {
LABEL_25:
    v16 = 0;
LABEL_26:
    if (a1)
    {
      if (*(_BYTE *)v10)
      {
        v23 = geo::codec::Allocator::instance((geo::codec::Allocator *)v14.__d_.__rep_);
        v14.__d_.__rep_ = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 40))(v23, *(_QWORD *)(v10 + 40), 0);
      }
      v24 = geo::codec::Allocator::instance((geo::codec::Allocator *)v14.__d_.__rep_);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 40))(v24, v10, 0);
    }
    goto LABEL_30;
  }
  v237 = 0;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, &v237) & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 10533;
    goto LABEL_24;
  }
  v236 = 0;
  v235 = 0;
  v234 = 0;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, &v236) & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 10540;
    goto LABEL_24;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v235 + 1) & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 10541;
    goto LABEL_24;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v235) & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 10542;
    goto LABEL_24;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, &v234) & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 10543;
    goto LABEL_24;
  }
  v18 = *(_QWORD *)(v10 + 48);
  v17 = *(_QWORD *)(v10 + 56);
  _CF = v17 >= v18;
  v20 = v17 - v18;
  if (!_CF)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 10544;
LABEL_24:
    v14.__d_.__rep_ = fprintf(v21, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v22);
    goto LABEL_25;
  }
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v10 + 40) + v18;
  *(_BYTE *)(v10 + 32) = 1;
  *(_QWORD *)(v10 + 16) = v20;
  *(_QWORD *)(v10 + 24) = 0;
  v233 = 0;
  v232 = 0;
  if (!BitstreamUnpack((uint64_t *)(v10 + 8), &v233, 5uLL))
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 10551;
    goto LABEL_24;
  }
  v197 = ++v233;
  v29 = BitstreamUnpack((uint64_t *)(v10 + 8), &v232, 5uLL);
  if (!v29)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 10553;
    goto LABEL_24;
  }
  v194 = ++v232;
  v192 = *a3;
  v228 = 0;
  v229 = 0;
  v230 = 0;
  v231 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)v29);
  v224 = 0;
  v225 = 0;
  v226 = 0;
  v227 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v231);
  v220 = 0;
  v221 = 0;
  v222 = 0;
  v223 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v227);
  v216 = 0;
  v217 = 0;
  v218 = 0;
  v219 = geo::codec::Allocator::instance(v223);
  if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), v236, (uint64_t)&v228) & 1) == 0)
  {
    v172 = (FILE *)*MEMORY[0x1E0C80C10];
    v173 = 10578;
LABEL_179:
    fprintf(v172, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v173);
    v16 = 0;
    v174 = 2;
    goto LABEL_180;
  }
  if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), HIDWORD(v235), (uint64_t)&v224) & 1) == 0)
  {
    v172 = (FILE *)*MEMORY[0x1E0C80C10];
    v173 = 10579;
    goto LABEL_179;
  }
  if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), v235, (uint64_t)&v220) & 1) == 0)
  {
    v172 = (FILE *)*MEMORY[0x1E0C80C10];
    v173 = 10580;
    goto LABEL_179;
  }
  v30 = geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), v234, (uint64_t)&v216);
  if ((v30 & 1) == 0)
  {
    v172 = (FILE *)*MEMORY[0x1E0C80C10];
    v173 = 10581;
    goto LABEL_179;
  }
  if (v228 != v229)
  {
    v31 = (_QWORD *)(v229 - 8);
    if (v229 - 8 > v228)
    {
      v32 = v228 + 8;
      do
      {
        v33 = *(_QWORD *)(v32 - 8);
        *(_QWORD *)(v32 - 8) = *v31;
        *v31-- = v33;
        _CF = v32 >= (unint64_t)v31;
        v32 += 8;
      }
      while (!_CF);
    }
  }
  v34 = (_QWORD *)(v225 - 8);
  v35 = v224 != v225 && (unint64_t)v34 > v224;
  if (v35)
  {
    v36 = v224 + 8;
    do
    {
      v37 = *(_QWORD *)(v36 - 8);
      *(_QWORD *)(v36 - 8) = *v34;
      *v34-- = v37;
      _CF = v36 >= (unint64_t)v34;
      v36 += 8;
    }
    while (!_CF);
  }
  v38 = (_QWORD *)(v221 - 8);
  if (v220 != v221 && (unint64_t)v38 > v220)
  {
    v40 = v220 + 8;
    do
    {
      v41 = *(_QWORD *)(v40 - 8);
      *(_QWORD *)(v40 - 8) = *v38;
      *v38-- = v41;
      _CF = v40 >= (unint64_t)v38;
      v40 += 8;
    }
    while (!_CF);
  }
  v42 = (_QWORD *)(v217 - 8);
  if (v216 != v217 && (unint64_t)v42 > v216)
  {
    v44 = v216 + 8;
    do
    {
      v45 = *(_QWORD *)(v44 - 8);
      *(_QWORD *)(v44 - 8) = *v42;
      *v42-- = v45;
      _CF = v44 >= (unint64_t)v42;
      v44 += 8;
    }
    while (!_CF);
  }
  v212 = 0;
  v213 = 0;
  v214 = 0;
  v215 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)v30);
  v208 = 0;
  v209 = 0;
  v210 = 0;
  v211 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v215);
  memset(v207, 0, 24);
  v46 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v211);
  v207[3] = v46;
  if (!v236)
  {
    v200 = 0;
    v16 = 1;
    goto LABEL_191;
  }
  v177 = (uint64_t *)(v192 + 2920);
  v179 = *(_QWORD *)(*a3 + 792);
  v180 = 0;
  v178 = *(_QWORD *)(v179 + 32);
  v193 = *(_QWORD *)(*a3 + 32);
  v181 = ~(-1 << v197);
  v182 = *(_QWORD *)(*a3 + 40);
  v47 = 1.0 / (double)v181;
  __asm { FMOV            V9.2S, #1.0 }
  v51 = 1.0 / (double)~(-1 << v194);
LABEL_78:
  v203 = 0;
  v204 = 0;
  v205 = 0;
  v206 = geo::codec::Allocator::instance(v46);
  v195 = *(_DWORD *)(v229 - 8);
  v229 -= 8;
  if (v182 == v193)
  {
    v198 = 0;
  }
  else
  {
    v52 = 0;
    v198 = 0;
    v53 = v195;
    while (1)
    {
      v54 = *(_DWORD *)(v193 + 168 * v52 + 100);
      v195 = v53;
      v55 = v53 - v54;
      if (v53 < v54)
        break;
      v52 = ++v198;
      v53 = v55;
      if (0xCF3CF3CF3CF3CF3DLL * ((v182 - v193) >> 3) <= v198)
      {
        v198 = 0;
        v195 = v55;
        break;
      }
    }
  }
  v202 = (const char *)__PAIR64__(v195, v198);
  v56 = *(_QWORD *)(v10 + 24);
  v57 = v56 + 1;
  v58 = 8 * *(_QWORD *)(v10 + 16);
  if (v56 + 1 > v58)
  {
    v175 = (FILE *)*MEMORY[0x1E0C80C10];
    v176 = 10615;
    goto LABEL_190;
  }
  v59 = *(_QWORD *)(v10 + 8);
  v60 = *(unsigned __int8 *)(v59 + (v56 >> 3));
  *(_QWORD *)(v10 + 24) = v57;
  v189 = (1 << (~(_BYTE)v56 & 7)) & v60;
  if (v189)
  {
    v61 = v56 + 2;
    if (v61 > v58)
    {
      v175 = (FILE *)*MEMORY[0x1E0C80C10];
      v176 = 10618;
      goto LABEL_190;
    }
    v62 = *(unsigned __int8 *)(v59 + (v57 >> 3));
    *(_QWORD *)(v10 + 24) = v61;
    v187 = (v62 >> (~(_BYTE)v57 & 7)) & 1;
    v57 = v61;
  }
  else
  {
    LOBYTE(v187) = 0;
  }
  v63 = v57 + 1;
  if (v57 + 1 > v58)
  {
    v175 = (FILE *)*MEMORY[0x1E0C80C10];
    v176 = 10622;
    goto LABEL_190;
  }
  v64 = *(unsigned __int8 *)(v59 + (v57 >> 3));
  *(_QWORD *)(v10 + 24) = v63;
  log = (1 << (~(_BYTE)v57 & 7)) & v64;
  if (log)
  {
    v65 = v57 + 2;
    if (v65 > v58)
    {
      v175 = (FILE *)*MEMORY[0x1E0C80C10];
      v176 = 10625;
      goto LABEL_190;
    }
    v66 = *(unsigned __int8 *)(v59 + (v63 >> 3));
    *(_QWORD *)(v10 + 24) = v65;
    v183 = (v66 >> (~(_BYTE)v63 & 7)) & 1;
  }
  else
  {
    LOBYTE(v183) = 0;
  }
  if (v213 != v212)
    v213 = v212;
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::resize((uint64_t)&v208, 0);
  while (1)
  {
    v67 = *(_QWORD *)(v225 - 8);
    v225 -= 8;
    *(_QWORD *)buf = v67;
    std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::emplace_back<long long>((uint64_t)&v212, buf);
    v69 = *(_QWORD *)(v10 + 24);
    v70 = v69 + 1;
    v71 = 8 * *(_QWORD *)(v10 + 16);
    if (v69 + 1 > v71)
    {
      v175 = (FILE *)*MEMORY[0x1E0C80C10];
      v176 = 10634;
      goto LABEL_190;
    }
    if (((*(unsigned __int8 *)(*(_QWORD *)(v10 + 8) + (v69 >> 3)) >> (~(_BYTE)v69 & 7)) & 1) != 0)
      break;
LABEL_114:
    if (v70 > v71)
    {
      v175 = (FILE *)*MEMORY[0x1E0C80C10];
      v176 = 10673;
      goto LABEL_190;
    }
    *(_QWORD *)(v10 + 24) = v70;
    if (*(_QWORD *)(v213 - 8) >= v181)
    {
      v91 = v204;
      v188 = v203;
      v190 = (v204 - v203) >> 5;
      if (v204 != v203)
      {
        v92 = v208;
        v93 = (v209 - (uint64_t)v208) >> 2;
        v94 = v212;
        v95 = (v213 - v212) >> 3;
        v96 = (v204 - v203) >> 5;
        if (v190 <= 1)
          v96 = 1;
        v97 = (float *)(v203 + 4);
        do
        {
          if (!v93)
            std::vector<zilch::GeoCoordinates>::__throw_out_of_range[abi:ne180100]();
          v98 = *v92;
          if (v95 <= v98)
            std::vector<zilch::GeoCoordinates>::__throw_out_of_range[abi:ne180100]();
          v99 = (double)*(uint64_t *)(v94 + 8 * v98) * v47;
          *v97 = v99;
          v97 += 8;
          ++v92;
          --v93;
          --v96;
        }
        while (v96);
      }
      v100 = (uint64_t *)(v178 + 16 * (*(_DWORD *)(v193 + 168 * v198 + 96) + v195));
      v101 = *(_QWORD *)(v179 + 8);
      v103 = *v100;
      v102 = v100[1];
      v196 = (float32x2_t *)(v101 + 8 * *v100);
      v104 = v102 - 1;
      if (v102 == 1)
      {
        v107 = 0.0;
      }
      else
      {
        v105 = *v196;
        v106 = v102 - 1;
        v107 = 0.0;
        if ((v102 - 1) >= 8
          && ((v108 = v102 - 2, _ZF = (_DWORD)v108 == -1, v109 = HIDWORD(v108), !_ZF) ? (_ZF = v109 == 0) : (_ZF = 0),
              _ZF))
        {
          v111 = v106 & 0xFFFFFFF8;
          v68.u64[1] = (unint64_t)*v196;
          v155 = (int8x16_t)vdupq_lane_s32((int32x2_t)v105, 0);
          v156 = (int32x4_t *)(v101 + 8 * v103 + 40);
          v157 = 0uLL;
          v158 = v106 & 0xFFFFFFF8;
          v159 = 0uLL;
          v160 = 0uLL;
          v161 = 0uLL;
          do
          {
            i32 = (const float *)v156[-2].i32;
            v248 = vld2q_f32(i32);
            v164 = *v156;
            v163 = v156[1];
            v156 += 4;
            v165 = (float32x4_t)vuzp1q_s32(v164, v163);
            v166 = (float32x4_t)vuzp2q_s32(v164, v163);
            v167 = vsubq_f32((float32x4_t)vextq_s8(v155, (int8x16_t)v248.val[0], 0xCuLL), v248.val[0]);
            v168 = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v248.val[0], (int8x16_t)v165, 0xCuLL), v165);
            v169 = vsubq_f32((float32x4_t)vextq_s8(v68, (int8x16_t)v248.val[1], 0xCuLL), v248.val[1]);
            v248.val[0] = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v248.val[1], (int8x16_t)v166, 0xCuLL), v166);
            v170 = vsqrtq_f32(vmlaq_f32(vmulq_f32(v167, v167), v169, v169));
            v171 = vsqrtq_f32(vmlaq_f32(vmulq_f32(v168, v168), v248.val[0], v248.val[0]));
            v159 = vaddq_f64(v159, vcvt_hight_f64_f32(v170));
            v157 = vaddq_f64(v157, vcvtq_f64_f32(*(float32x2_t *)v170.f32));
            v161 = vaddq_f64(v161, vcvt_hight_f64_f32(v171));
            v160 = vaddq_f64(v160, vcvtq_f64_f32(*(float32x2_t *)v171.f32));
            v68 = (int8x16_t)v166;
            v155 = (int8x16_t)v165;
            v158 -= 8;
          }
          while (v158);
          v107 = vaddvq_f64(vaddq_f64(vaddq_f64(v160, v157), vaddq_f64(v161, v159)));
          if (v106 != v111)
          {
            v105 = (float32x2_t)vextq_s8((int8x16_t)v163, (int8x16_t)v163, 8uLL).u64[0];
            goto LABEL_130;
          }
        }
        else
        {
          v111 = 0;
LABEL_130:
          v112 = v111 + 1;
          do
          {
            v113 = v196[v112];
            v114 = vsub_f32(v105, v113);
            v107 = v107 + sqrtf(vaddv_f32(vmul_f32(v114, v114)));
            v35 = v104 > v112++;
            v105 = v113;
          }
          while (v35);
        }
      }
      if (v91 != v188)
      {
        v199 = 0;
        v115 = 0;
        v116 = 0.0;
        while (1)
        {
          v191 = (float *)(v188 + 32 * v199);
          v118 = *v191;
          v119 = *v191 >= 0.0 && v118 <= 1.0;
          if (!v119 || ((v120 = v191[1], v120 >= 0.0) ? (v121 = v120 <= 1.0) : (v121 = 0), !v121))
          {
            if (qword_1ECDBCDF8 != -1)
              dispatch_once(&qword_1ECDBCDF8, &__block_literal_global_217);
            loga = _MergedGlobals_352;
            v122 = os_log_type_enabled((os_log_t)_MergedGlobals_352, OS_LOG_TYPE_ERROR);
            v118 = *v191;
            if (v122)
            {
              v123 = *(float *)(v188 + 32 * v199 + 4);
              v124 = *((unsigned __int16 *)a2 + 4);
              v125 = *a2;
              v126 = (*a2 >> 14) & 0x3FFFFFF;
              *(_DWORD *)buf = 134219008;
              *(double *)&buf[4] = v118;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v123;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)v243 = v126;
              *(_WORD *)&v243[4] = 1024;
              *(_DWORD *)v244 = ((v125 >> 40) | (v124 << 24)) & 0x3FFFFFF;
              *(_WORD *)&v244[4] = 1024;
              *(_DWORD *)&v244[6] = (v125 >> 8) & 0x3F;
              _os_log_impl(&dword_1885A9000, loga, OS_LOG_TYPE_ERROR, "SectionBegin/SectionEnd outside of range: SectionBegin = %f, SectionEnd = %f, in Traffic Skeleton (%d, %d, %d).", buf, 0x28u);
              v118 = *v191;
            }
          }
          v127 = -(v116 - v107 * v118);
          v128 = v196[v115 + 1];
          v129 = vsub_f32(v196[v115], v128);
          v130 = sqrtf(vaddv_f32(vmul_f32(v129, v129)));
          if (v127 > v130)
          {
            v131 = v115;
            do
            {
              v127 = v127 - v130;
              v116 = v116 + v130;
              v115 = v131 + 1;
              v132 = v196[v131 + 2];
              v133 = vsub_f32(v128, v132);
              v130 = sqrtf(vaddv_f32(vmul_f32(v133, v133)));
              ++v131;
              v128 = v132;
            }
            while (v127 > v130);
          }
          v134 = (double)v115;
          v135 = v127 / v130 + (double)v115;
          if (v135 >= 0.0)
            goto LABEL_157;
          if (qword_1ECDBCDF8 != -1)
            break;
          logb = _MergedGlobals_352;
          if (os_log_type_enabled((os_log_t)_MergedGlobals_352, OS_LOG_TYPE_ERROR))
            goto LABEL_156;
LABEL_157:
          v142 = v135;
          *v191 = v142;
          v143 = v188 + 32 * v199;
          v145 = *(float *)(v143 + 4);
          v144 = (float *)(v143 + 4);
          v146 = -(v116 - v107 * v145);
          v147 = v196[v115 + 1];
          v148 = vsub_f32(v196[v115], v147);
          v149 = sqrtf(vaddv_f32(vmul_f32(v148, v148)));
          if (v146 > v149)
          {
            do
            {
              v146 = v146 - v149;
              v116 = v116 + v149;
              v150 = v115 + 2;
              ++v115;
              v151 = vsub_f32(v147, v196[v150]);
              v149 = sqrtf(vaddv_f32(vmul_f32(v151, v151)));
              v147 = v196[v150];
            }
            while (v146 > v149);
            v134 = (double)v115;
          }
          v117 = v134 - v142 + v146 / v149;
          *v144 = v117;
          ++v199;
          v188 = v203;
          v190 = (v204 - v203) >> 5;
          if (v199 >= v190)
            goto LABEL_162;
        }
        dispatch_once(&qword_1ECDBCDF8, &__block_literal_global_217);
        logb = _MergedGlobals_352;
        if (!os_log_type_enabled((os_log_t)_MergedGlobals_352, OS_LOG_TYPE_ERROR))
          goto LABEL_157;
LABEL_156:
        v136 = *((unsigned __int16 *)a2 + 4);
        v137 = *a2;
        v138 = (*a2 >> 14) & 0x3FFFFFF;
        v139 = *v191;
        v140 = *(float *)(v188 + 32 * v199 + 4);
        v141 = *a2 >> 40;
        *(_DWORD *)buf = 134219264;
        *(double *)&buf[4] = v135;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v138;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = (v141 | (v136 << 24)) & 0x3FFFFFF;
        *(_WORD *)v243 = 1024;
        *(_DWORD *)&v243[2] = (v137 >> 8) & 0x3F;
        *(_WORD *)v244 = 2048;
        *(double *)&v244[2] = v139;
        v245 = 2048;
        v246 = v140;
        _os_log_impl(&dword_1885A9000, logb, OS_LOG_TYPE_ERROR, "Vertex Offset is negative (%f) in Traffic Skeleton (%d, %d, %d). Original sectionBegin = %f, sectionEng = %f)", buf, 0x32u);
        goto LABEL_157;
      }
LABEL_162:
      if (v190)
      {
        v152 = 0;
        do
        {
          v153 = (float32x2_t *)(v203 + v152);
          if (!*(_BYTE *)(v203 + v152 + 25))
          {
            *(_QWORD *)&buf[8] = -*(_QWORD *)&v153[1];
            v154 = v153->f32[1];
            *(float *)buf = v154 + v153->f32[0];
            *(float *)&buf[4] = -v154;
            *(_WORD *)v243 = v153[3].i8[0] == 0;
            *(int32x2_t *)&buf[16] = vrev64_s32((int32x2_t)vsub_f32(_D9, v153[2]));
            v243[3] = 0;
            std::vector<GeoCodecsTrafficSkeletonRecord,geo::StdAllocator<GeoCodecsTrafficSkeletonRecord,geo::codec::Allocator>>::emplace_back<GeoCodecsTrafficSkeletonRecord&>((uint64_t)&v203, buf);
          }
          v152 += 32;
          --v190;
        }
        while (v190);
      }
      std::vector<GeoCodecsTrafficSkeleton,geo::StdAllocator<GeoCodecsTrafficSkeleton,geo::codec::Allocator>>::emplace_back<GeoCodecsTrafficSkeleton&>(v177, &v202);
      GeoCodecsTrafficSkeleton::~GeoCodecsTrafficSkeleton((GeoCodecsTrafficSkeleton *)&v202);
      v200 = 0;
      v16 = 1;
      if (++v180 >= (unint64_t)v236)
        goto LABEL_191;
      goto LABEL_78;
    }
  }
  while (1)
  {
    std::vector<GeoCodecsTrafficSkeletonRecord,geo::StdAllocator<GeoCodecsTrafficSkeletonRecord,geo::codec::Allocator>>::emplace_back<>((uint64_t)&v203);
    v72 = v204;
    v73 = (double)*(uint64_t *)(v213 - 8) * v47;
    *(float *)(v204 - 32) = v73;
    *(_DWORD *)buf = 0;
    if ((BitstreamUnpackUnary((uint64_t *)(v10 + 8), buf) & 1) == 0)
    {
      v175 = (FILE *)*MEMORY[0x1E0C80C10];
      v176 = 10640;
      goto LABEL_190;
    }
    v201 = *(_DWORD *)buf + ((unint64_t)(v213 - v212) >> 3) - 1;
    std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::emplace_back<unsigned int>((uint64_t)&v208, &v201);
    LOBYTE(v74) = v187;
    if (!v189)
    {
      v75 = *(_QWORD *)(v10 + 24);
      if (v75 + 1 > 8 * *(_QWORD *)(v10 + 16))
      {
        v175 = (FILE *)*MEMORY[0x1E0C80C10];
        v176 = 10645;
        goto LABEL_190;
      }
      v76 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 8) + (v75 >> 3));
      *(_QWORD *)(v10 + 24) = v75 + 1;
      v74 = (v76 >> (~(_BYTE)v75 & 7)) & 1;
    }
    v77 = *(_QWORD *)(v221 - 8);
    v221 -= 8;
    *(_QWORD *)(v72 - 24) = v77;
    LOBYTE(v78) = v183;
    if (!log)
      break;
LABEL_106:
    *(_BYTE *)(v72 - 8) = v74;
    *(_DWORD *)(v72 - 16) = 0;
    v81 = *(_QWORD *)(v10 + 24);
    v82 = v81 + 1;
    v71 = 8 * *(_QWORD *)(v10 + 16);
    if (v81 + 1 > v71)
    {
      v176 = 10659;
      goto LABEL_189;
    }
    v83 = *(_QWORD *)(v10 + 8);
    v84 = *(unsigned __int8 *)(v83 + (v81 >> 3));
    *(_QWORD *)(v10 + 24) = v82;
    if (((v84 >> (~(_BYTE)v81 & 7)) & 1) != 0)
    {
      v85 = *(_QWORD *)(v217 - 8);
      v217 -= 8;
      v86 = (double)v85 * v51;
      *(float *)(v72 - 16) = v86;
    }
    *(_DWORD *)(v72 - 12) = 1065353216;
    v87 = v81 + 2;
    if (v81 + 2 > v71)
    {
      v176 = 10665;
      goto LABEL_189;
    }
    v88 = *(unsigned __int8 *)(v83 + (v82 >> 3));
    *(_QWORD *)(v10 + 24) = v87;
    if (((v88 >> (~(_BYTE)v82 & 7)) & 1) != 0)
    {
      v89 = *(_QWORD *)(v217 - 8);
      v217 -= 8;
      v90 = (double)v89 * v51;
      *(float *)(v72 - 12) = v90;
    }
    *(_BYTE *)(v72 - 7) = v78;
    *(_BYTE *)(v72 - 5) = 0;
    v70 = v81 + 3;
    if (v81 + 3 > v71)
    {
      v176 = 10671;
      goto LABEL_189;
    }
    if (((*(unsigned __int8 *)(v83 + (v87 >> 3)) >> (~(_BYTE)v87 & 7)) & 1) == 0)
      goto LABEL_114;
  }
  v79 = *(_QWORD *)(v10 + 24);
  if (v79 + 1 <= 8 * *(_QWORD *)(v10 + 16))
  {
    v80 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 8) + (v79 >> 3));
    *(_QWORD *)(v10 + 24) = v79 + 1;
    v78 = (v80 >> (~(_BYTE)v79 & 7)) & 1;
    goto LABEL_106;
  }
  v176 = 10651;
LABEL_189:
  v175 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_190:
  fprintf(v175, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v176);
  GeoCodecsTrafficSkeleton::~GeoCodecsTrafficSkeleton((GeoCodecsTrafficSkeleton *)&v202);
  v16 = 0;
  v200 = 2;
LABEL_191:
  std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t)v207);
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v208);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&v212);
  v174 = v200;
LABEL_180:
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v216);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v220);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v224);
  v14.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v228);
  if ((v174 | 2) == 2)
    goto LABEL_26;
LABEL_30:
  v25 = std::chrono::steady_clock::now().__d_.__rep_;
  v202 = "ChapterTrafficSkeleton1";
  *(_QWORD *)buf = &v202;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6 + 1912, (uint64_t *)&v202, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)+ 4) = (double)((v25 - rep) / 1000) * 0.001;
  if (v11)
  {
    v26 = (unint64_t *)&v11->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v16 & 1;
}

void sub_1886E2A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;

  GeoCodecsTrafficSkeleton::~GeoCodecsTrafficSkeleton((GeoCodecsTrafficSkeleton *)&a32);
  std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t)&a37);
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100](&a41);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a45);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a49);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a53);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a57);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a61);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v61 - 256));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readLinesExtendedChapter(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  FILE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  std::chrono::steady_clock::time_point v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  const char **v78;
  _QWORD *v79;
  uint64_t v80;
  const void *v81;
  size_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  const char **v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unint64_t v119;
  unsigned int v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unsigned int v128;
  BOOL v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132[2];
  const char *v133;
  uint64_t v134;
  const char **__key;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  const char *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  _QWORD v146[3];
  _QWORD *v147;
  _QWORD v148[3];
  _QWORD *v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = a1[1];
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    while (*(_WORD *)(*a1 + 16 * v6) != 145)
    {
      v6 = ++v7;
      if (v5 <= v7)
        goto LABEL_5;
    }
    v8 = geo::codec::chapterAt((uint64_t)a1, v7, 145, v4 + 1912);
    v4 = *a2;
    v142 = "ChapterLinesExtended";
    v143 = v4;
    v9 = a2[1];
    v144 = (std::__shared_weak_count *)v9;
    if (v9)
      goto LABEL_8;
  }
  else
  {
LABEL_5:
    v8 = 0;
    v142 = "ChapterLinesExtended";
    v143 = v4;
    v9 = a2[1];
    v144 = (std::__shared_weak_count *)v9;
    if (v9)
    {
LABEL_8:
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v12.__d_.__rep_;
  if (!v8)
    goto LABEL_27;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v8, (unsigned int *)(v8 + 64)) & 1) == 0)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = 1427;
    goto LABEL_17;
  }
  v141 = 0;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v8, &v141) & 1) == 0)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = 1430;
    goto LABEL_17;
  }
  if (*(_DWORD *)(v8 + 64) < v141)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = 1431;
    goto LABEL_17;
  }
  if (v141 != 1)
  {
LABEL_27:
    v16 = 1;
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v133 = "ChapterLinesExtended";
    if (!"ChapterLinesExtended")
      goto LABEL_29;
    goto LABEL_28;
  }
  v140 = 0;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v8, &v140) & 1) == 0)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = 1437;
    goto LABEL_17;
  }
  std::vector<GeoCodecsPhysicalFeature,geo::StdAllocator<GeoCodecsPhysicalFeature,geo::codec::Allocator>>::resize((uint64_t *)(*a2 + 152), v140);
  v21 = *a2;
  v22 = *(_QWORD *)(*a2 + 160);
  if (v22 == *(_QWORD *)(*a2 + 152))
  {
    v28 = *(_QWORD *)(*a2 + 160);
  }
  else
  {
    v23 = 0;
    v22 = *(_QWORD *)(*a2 + 152);
    do
    {
      v29 = a2[1];
      if (v29)
      {
        v30 = (unint64_t *)(v29 + 16);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v32 = (uint64_t *)(v22 + 176 * v23);
      v33 = (std::__shared_weak_count *)v32[1];
      *v32 = v21;
      v32[1] = v29;
      if (v33)
        std::__shared_weak_count::__release_weak(v33);
      ++v23;
      v21 = *a2;
      v22 = *(_QWORD *)(*a2 + 152);
      v28 = *(_QWORD *)(*a2 + 160);
    }
    while (v23 < 0x2E8BA2E8BA2E8BA3 * ((v28 - v22) >> 4));
  }
  v34 = *(_QWORD *)(v8 + 48);
  v35 = *(_QWORD *)(v8 + 56);
  v36 = v35 >= v34;
  v37 = v35 - v34;
  if (!v36)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = 1445;
    goto LABEL_17;
  }
  v38 = (char *)(*(_QWORD *)(v8 + 40) + v34);
  *(_QWORD *)(v8 + 8) = v38;
  *(_BYTE *)(v8 + 32) = 1;
  *(_QWORD *)(v8 + 16) = v37;
  *(_QWORD *)(v8 + 24) = 0;
  if ((v37 & 0x1FFFFFFFFFFFFFFFLL) == 0)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = 1449;
    goto LABEL_17;
  }
  v39 = *v38;
  *(_QWORD *)(v8 + 24) = 1;
  if (v39 < 0)
  {
    LODWORD(__key) = 0;
    if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &__key, 5uLL))
    {
      v14 = 1452;
      goto LABEL_86;
    }
    v21 = *a2;
    v43 = *(_QWORD *)(*a2 + 152);
    v44 = *(_QWORD *)(*a2 + 160) - v43;
    if (v44)
    {
      v45 = v44 / 176;
      v46 = __key;
      v47 = *(_QWORD *)(v8 + 24);
      v48 = 8 * *(_QWORD *)(v8 + 16);
      if ((_DWORD)__key)
      {
        v49 = 0;
        v50 = 0;
        if (v45 <= 1)
          v45 = 1;
        while (1)
        {
          v51 = v43 + 176 * v49;
          *(_DWORD *)(v51 + 96) = v50;
          if (v47 + v46 > v48)
            break;
          v52 = 0;
          v53 = *(_QWORD *)(v8 + 8);
          v54 = v46;
          do
          {
            v55 = 8 - (v47 & 7);
            if (v54 < v55)
              v55 = v54;
            v52 = (*(unsigned __int8 *)(v53 + (v47 >> 3)) >> (8 - (v47 & 7) - v55)) & ~(-1 << v55) | (v52 << v55);
            v47 += v55;
            *(_QWORD *)(v8 + 24) = v47;
            v54 -= v55;
          }
          while (v54);
          *(_DWORD *)(v51 + 100) = v52;
          v50 += v52;
          if (++v49 == v45)
            goto LABEL_70;
        }
      }
      else
      {
        if (v47 <= v48)
        {
          if (v45 <= 1)
            v69 = 1;
          else
            v69 = v45;
          if (v69 >= 2)
          {
            v70 = v69 & 0xFFFFFFFFFFFFFFFELL;
            v71 = (_QWORD *)(v43 + 272);
            v72 = v69 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              *(v71 - 22) = 0;
              *v71 = 0;
              v71 += 44;
              v72 -= 2;
            }
            while (v72);
            if (v69 == v70)
              goto LABEL_70;
          }
          else
          {
            v70 = 0;
          }
          v73 = (_QWORD *)(v43 + 176 * v70 + 96);
          v74 = v69 - v70;
          do
          {
            *v73 = 0;
            v73 += 22;
            --v74;
          }
          while (v74);
          goto LABEL_70;
        }
        *(_DWORD *)(v43 + 96) = 0;
      }
      v14 = 1456;
      goto LABEL_86;
    }
  }
  else
  {
    v40 = v28 - v22;
    if (!v40)
      goto LABEL_70;
    v41 = v40 / 176;
    if (v41 <= 1)
      v41 = 1;
    if (v41 < 2)
    {
      v42 = 0;
LABEL_68:
      v58 = (_DWORD *)(v22 + 176 * v42 + 100);
      do
      {
        *(v58 - 1) = v42;
        *v58 = 1;
        v58 += 44;
        ++v42;
      }
      while (v41 != v42);
      goto LABEL_70;
    }
    v56 = 0;
    v42 = v41 & 0xFFFFFFFFFFFFFFFELL;
    v57 = (_DWORD *)(v22 + 276);
    do
    {
      *(v57 - 1) = v56 + 1;
      *v57 = 1;
      *(v57 - 45) = v56;
      *(v57 - 44) = 1;
      v56 += 2;
      v57 += 88;
    }
    while (v42 != v56);
    if (v41 != v42)
      goto LABEL_68;
  }
LABEL_70:
  if ((geo::codec::decodeSectionEncoding((geo::codec::Allocator *)(v8 + 8), (GeoCodecsVertexPool *)(v21 + 848), 0, 0, 0) & 1) == 0)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = 1467;
    goto LABEL_17;
  }
  if ((geo::codec::decodeSectionZEncoding((geo::codec::Allocator *)(v8 + 8), *(_QWORD **)(*a2 + 848)) & 1) == 0)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = 1468;
    goto LABEL_17;
  }
  v59 = *(_QWORD *)(v8 + 24);
  v60 = v59 + 1;
  v61 = 8 * *(_QWORD *)(v8 + 16);
  if (v59 + 1 > v61)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = 1471;
    goto LABEL_17;
  }
  v62 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v59 >> 3));
  *(_QWORD *)(v8 + 24) = v60;
  if (((v62 >> (~(_BYTE)v59 & 7)) & 1) != 0)
  {
    LODWORD(v132[0]) = 0;
    if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), v132, 2uLL))
    {
      v13 = (FILE *)*MEMORY[0x1E0C80C10];
      v14 = 1474;
      goto LABEL_17;
    }
    v139 = 0;
    if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v139, 5uLL))
    {
      v13 = (FILE *)*MEMORY[0x1E0C80C10];
      v14 = 1476;
      goto LABEL_17;
    }
    v133 = 0;
    if ((geo::codec::_makeSpaceForLabels((geo::codec::Allocator *)(0x2E8BA2E8BA2E8BA3* ((uint64_t)(*(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152)) >> 4)), &v133, a2) & 1) == 0)
    {
      v13 = (FILE *)*MEMORY[0x1E0C80C10];
      v14 = 1479;
      goto LABEL_17;
    }
    v63 = (_QWORD *)*a2;
    if (*(_QWORD *)(*a2 + 160) != *(_QWORD *)(*a2 + 152))
    {
      v64 = 0;
      v131 = v63[107];
      v65 = v63[108] - v131;
      v66 = v133;
      v67 = LODWORD(v132[0]);
      v68 = v139;
      do
      {
        v75 = *(_QWORD *)(v8 + 24);
        if (v75 + 1 > 8 * *(_QWORD *)(v8 + 16))
        {
          v13 = (FILE *)*MEMORY[0x1E0C80C10];
          v14 = 1484;
          goto LABEL_17;
        }
        v76 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v75 >> 3));
        *(_QWORD *)(v8 + 24) = v75 + 1;
        if (((v76 >> (~(_BYTE)v75 & 7)) & 1) != 0)
        {
          v138 = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v138, v67))
          {
            v13 = (FILE *)*MEMORY[0x1E0C80C10];
            v14 = 1487;
            goto LABEL_17;
          }
          v77 = v138;
          if (v138)
          {
            v137 = 0;
            if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v137, v68))
            {
              v133 = v66;
              v14 = 1492;
              goto LABEL_86;
            }
            v78 = (const char **)v137;
            if (v65 <= v137)
            {
              v133 = v66;
              v14 = 1493;
              goto LABEL_86;
            }
            v79 = (_QWORD *)*a2;
            if ((unint64_t)v66 >= *(_QWORD *)(*a2 + 1056))
            {
              v133 = v66;
              v14 = 1494;
              goto LABEL_86;
            }
            v80 = v79[131] + 24 * (_QWORD)v66;
            *(_QWORD *)v80 = v131 + v137;
            *(_DWORD *)(v80 + 16) = 0;
            v81 = (const void *)v79[111];
            v82 = v79[112];
            __key = v78;
            v83 = bsearch(&__key, v81, v82, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
            v84 = v83 ? v83[2] : 0;
            v85 = *a2;
            v86 = (_QWORD *)(*(_QWORD *)(*a2 + 1048) + 24 * (_QWORD)v66);
            v86[1] = v84;
            v87 = *(_QWORD *)(v85 + 152) + 176 * v64;
            *(_BYTE *)(v87 + 73) = 1;
            *(_DWORD *)(v87 + 56) = (_DWORD)v66;
            *(_QWORD *)(v87 + 16) = *v86;
            ++v66;
            if (v77 >= 2)
            {
              v88 = v77 - 1;
              while (1)
              {
                LODWORD(__key) = 0;
                if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&__key, v68))
                  break;
                if (v65 <= __key)
                {
                  v14 = 1511;
                  goto LABEL_86;
                }
                if (!--v88)
                  goto LABEL_100;
              }
              v133 = v66;
              v14 = 1510;
LABEL_86:
              v13 = (FILE *)*MEMORY[0x1E0C80C10];
              goto LABEL_17;
            }
          }
LABEL_100:
          v63 = (_QWORD *)*a2;
        }
        ++v64;
      }
      while (v64 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v63[20] - v63[19]) >> 4));
    }
    v60 = *(_QWORD *)(v8 + 24);
    v61 = 8 * *(_QWORD *)(v8 + 16);
  }
  if (v60 + 1 > v61)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = 1518;
    goto LABEL_17;
  }
  v89 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v60 >> 3));
  *(_QWORD *)(v8 + 24) = v60 + 1;
  if (((v89 >> (~(_BYTE)v60 & 7)) & 1) != 0)
  {
    if (!geo::codec::decodeAttributeSet<GeoCodecsFeature>(21, (uint64_t *)(v8 + 8), -1171354717 * ((*(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152)) >> 4), *a2 + 1112, *(_QWORD *)(*a2 + 152), 176))
    {
      v13 = (FILE *)*MEMORY[0x1E0C80C10];
      v14 = 1521;
      goto LABEL_17;
    }
  }
  else
  {
    _ZNSt3__111make_sharedB8ne180100I22FeatureStyleAttributesJEvEENS_10shared_ptrIT_EEDpOT0_(&__key);
    v90 = __key;
    *(_QWORD *)*__key = 0x1500000005;
    *(_WORD *)((char *)v90 + 33) = 5377;
    v132[0] = (uint64_t)v90;
    v132[1] = v136;
    if (v136)
    {
      v91 = (unint64_t *)(v136 + 8);
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
    v93 = FeatureStyleAttributesSet::insert(*a2 + 1112, v132);
    v94 = v93[1];
    v133 = (const char *)*v93;
    v134 = v94;
    if (v94)
    {
      v95 = (unint64_t *)(v94 + 8);
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)v132);
    v97 = *(_QWORD *)(*a2 + 152);
    if (*(_QWORD *)(*a2 + 160) != v97)
    {
      v98 = 0;
      v99 = 24;
      do
      {
        std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((_QWORD *)(v97 + v99), (uint64_t)v133, v134);
        ++v98;
        v97 = *(_QWORD *)(*a2 + 152);
        v99 += 176;
      }
      while (v98 < 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(*a2 + 160) - v97) >> 4));
    }
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&v133);
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&__key);
  }
  v100 = *(_QWORD *)(v8 + 24);
  if (v100 + 1 > 8 * *(_QWORD *)(v8 + 16))
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = 1532;
    goto LABEL_17;
  }
  v101 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v100 >> 3));
  *(_QWORD *)(v8 + 24) = v100 + 1;
  v102 = ~(_BYTE)v100 & 7;
  v103 = *a2;
  if (((v101 >> v102) & 1) != 0)
  {
    v104 = *(_QWORD *)(v103 + 160);
    if (v104 != *(_QWORD *)(v103 + 152))
    {
      v105 = 0;
      v106 = 40;
      v104 = *(_QWORD *)(v103 + 152);
      while (1)
      {
        v108 = *(_QWORD *)(v8 + 24);
        if (v108 + 1 > 8 * *(_QWORD *)(v8 + 16))
          break;
        v109 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v108 >> 3));
        *(_QWORD *)(v8 + 24) = v108 + 1;
        if (((v109 >> (~(_BYTE)v108 & 7)) & 1) != 0)
        {
          if (!BitstreamUnpack64((uint64_t *)(v8 + 8), (unint64_t *)(v104 + v106), 0x40uLL))
          {
            v14 = 1538;
            goto LABEL_86;
          }
          v103 = *a2;
        }
        ++v105;
        v104 = *(_QWORD *)(v103 + 152);
        v107 = *(_QWORD *)(v103 + 160);
        v106 += 176;
        if (v105 >= 0x2E8BA2E8BA2E8BA3 * ((v107 - v104) >> 4))
          goto LABEL_147;
      }
      v14 = 1536;
      goto LABEL_86;
    }
    v107 = *(_QWORD *)(v103 + 160);
  }
  else
  {
    v104 = *(_QWORD *)(v103 + 152);
    v107 = *(_QWORD *)(v103 + 160);
  }
LABEL_147:
  v148[0] = &off_1E1BFAA70;
  v148[1] = a2;
  v149 = v148;
  geo::codec::decodeZoomRanks((uint64_t *)(v8 + 8), 0x2E8BA2E8BA2E8BA3 * ((v107 - v104) >> 4), (uint64_t)v148);
  v110 = v149;
  if (v149 == v148)
  {
    v111 = 4;
    v110 = v148;
  }
  else
  {
    if (!v149)
      goto LABEL_152;
    v111 = 5;
  }
  (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_152:
  v112 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152)) >> 4);
  v146[0] = &off_1E1BFAAC8;
  v146[1] = a2;
  v147 = v146;
  geo::codec::decodeZoomRanks((uint64_t *)(v8 + 8), v112, (uint64_t)v146);
  v15 = (uint64_t)v147;
  if (v147 == v146)
  {
    v113 = 4;
    v15 = (uint64_t)v146;
  }
  else
  {
    if (!v147)
      goto LABEL_157;
    v113 = 5;
  }
  v15 = (*(uint64_t (**)(void))(*(_QWORD *)v15 + 8 * v113))();
LABEL_157:
  v114 = *(_QWORD *)(v8 + 24);
  v115 = v114 + 1;
  v116 = 8 * *(_QWORD *)(v8 + 16);
  if (v114 + 1 > v116)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = 1554;
    goto LABEL_17;
  }
  v117 = *(_QWORD *)(v8 + 8);
  v118 = *(unsigned __int8 *)(v117 + (v114 >> 3));
  *(_QWORD *)(v8 + 24) = v115;
  if (((v118 >> (~(_BYTE)v114 & 7)) & 1) == 0)
  {
LABEL_185:
    v129 = (v115 & 7) == 0;
    v130 = *(_QWORD *)(v8 + 48) + (v115 >> 3);
    if (!v129)
      ++v130;
    *(_QWORD *)(v8 + 48) = v130;
    *(_BYTE *)(v8 + 32) = 0;
    v16 = 1;
    if (a1)
      goto LABEL_18;
    goto LABEL_21;
  }
  LODWORD(__key) = 1;
  v119 = v114 + 2;
  if (v119 > v116)
  {
    v14 = 1558;
    goto LABEL_86;
  }
  v120 = *(unsigned __int8 *)(v117 + (v115 >> 3));
  *(_QWORD *)(v8 + 24) = v119;
  if (((v120 >> (~(_BYTE)v115 & 7)) & 1) != 0
    && !BitstreamUnpackVar32((uint64_t *)(v8 + 8), (int *)&__key))
  {
    v14 = 1560;
    goto LABEL_86;
  }
  LODWORD(v133) = 0;
  v15 = BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v133, 5uLL);
  if (!(_DWORD)v15)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = 1564;
    goto LABEL_17;
  }
  v121 = *a2;
  if (*(_QWORD *)(*a2 + 160) == *(_QWORD *)(*a2 + 152))
  {
LABEL_184:
    v115 = *(_QWORD *)(v8 + 24);
    goto LABEL_185;
  }
  v122 = 0;
  v123 = v133;
  v124 = (int)__key;
  v125 = 168;
  while (1)
  {
    v127 = *(_QWORD *)(v8 + 24);
    if (v127 + 1 > 8 * *(_QWORD *)(v8 + 16))
    {
      v13 = (FILE *)*MEMORY[0x1E0C80C10];
      v14 = 1567;
      goto LABEL_17;
    }
    v128 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v127 >> 3));
    *(_QWORD *)(v8 + 24) = v127 + 1;
    if (((v128 >> (~(_BYTE)v127 & 7)) & 1) != 0)
      break;
    v126 = *(_QWORD *)(v121 + 152);
LABEL_171:
    ++v122;
    v125 += 176;
    if (v122 >= 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v121 + 160) - v126) >> 4))
      goto LABEL_184;
  }
  LODWORD(v132[0]) = 0;
  v15 = BitstreamUnpack((uint64_t *)(v8 + 8), (int *)v132, v123);
  if ((_DWORD)v15)
  {
    v121 = *a2;
    v126 = *(_QWORD *)(*a2 + 152);
    *(float *)(v126 + v125) = (float)(LODWORD(v132[0]) * v124);
    goto LABEL_171;
  }
  v13 = (FILE *)*MEMORY[0x1E0C80C10];
  v14 = 1570;
LABEL_17:
  v15 = fprintf(v13, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v14);
  v16 = 0;
  if (a1)
  {
LABEL_18:
    if (*(_BYTE *)v8)
    {
      v17 = geo::codec::Allocator::instance((geo::codec::Allocator *)v15);
      v15 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 40))(v17, *(_QWORD *)(v8 + 40), 0);
    }
    v18 = geo::codec::Allocator::instance((geo::codec::Allocator *)v15);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v18 + 40))(v18, v8, 0);
  }
LABEL_21:
  v19 = v142;
  v4 = v143;
  v12.__d_.__rep_ = rep;
  v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v133 = v19;
  if (v19)
  {
LABEL_28:
    __key = &v133;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v4 + 1912, (uint64_t *)&v133, (uint64_t)&std::piecewise_construct, (uint64_t **)&__key)+ 4) = (double)((v20.__d_.__rep_ - v12.__d_.__rep_) / 1000) * 0.001;
  }
LABEL_29:
  v24 = v144;
  if (v144)
  {
    p_shared_owners = (unint64_t *)&v144->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v16;
}

void sub_1886E3924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&a21);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readTransitMZROverride(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  FILE *v26;
  int v27;
  geo::codec::Allocator *v28;
  uint64_t v29;
  uint64_t v30;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  int v50;
  float v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  float v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  FILE *v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  const char *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  const char *v82;
  const char **v83;

  v2 = a1[1];
  if (!v2)
    return 1;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 112)
  {
    v4 = ++v5;
    if (v2 <= v5)
      return 1;
  }
  v6 = geo::codec::chapterAt((uint64_t)a1, v5, 112, *a2 + 1912);
  if (!v6)
    return 1;
  v7 = v6;
  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v78 = "ChapterTransitMZROverride";
  v79 = v9;
  v80 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v12.__d_.__rep_;
  v14 = *(_QWORD *)(v7 + 48);
  v13 = *(_QWORD *)(v7 + 56);
  v15 = v13 - v14;
  if (v13 >= v14)
  {
    v16 = 0;
    *(_BYTE *)(v7 + 32) = 1;
    v20 = *(_QWORD *)(v7 + 40) + v14;
    *(_QWORD *)(v7 + 16) = v15;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 8) = v20;
    v17 = 8 * v15;
    if (8 * v15 < 5)
    {
LABEL_21:
      v26 = (FILE *)*MEMORY[0x1E0C80C10];
      v27 = 6397;
      goto LABEL_22;
    }
  }
  else
  {
    v16 = *(_QWORD *)(v7 + 24);
    v17 = 8 * *(_QWORD *)(v7 + 16);
    if (v16 + 5 > v17)
      goto LABEL_21;
  }
  v21 = 0;
  v22 = *(_QWORD *)(v7 + 8);
  v23 = 5;
  do
  {
    v24 = 8 - (v16 & 7);
    if (v23 < v24)
      v24 = v23;
    v21 = (*(unsigned __int8 *)(v22 + (v16 >> 3)) >> (8 - (v16 & 7) - v24)) & ~(-1 << v24) | (v21 << v24);
    v16 += v24;
    *(_QWORD *)(v7 + 24) = v16;
    v23 -= v24;
  }
  while (v23);
  v25 = (v21 + 1);
  if (v16 + v25 > v17)
    goto LABEL_21;
  v34 = 0;
  if (v21 != -1)
  {
    do
    {
      v35 = 8 - (v16 & 7);
      if (v25 < v35)
        v35 = v25;
      v34 = (*(unsigned __int8 *)(v22 + (v16 >> 3)) >> (8 - (v16 & 7) - v35)) & ~(-1 << v35) | (v34 << v35);
      v16 += v35;
      *(_QWORD *)(v7 + 24) = v16;
      v25 -= v35;
    }
    while (v25);
  }
  if (v16 + 5 > v17)
  {
    v26 = (FILE *)*MEMORY[0x1E0C80C10];
    v27 = 6400;
    goto LABEL_22;
  }
  v36 = 0;
  v37 = 5;
  do
  {
    v38 = 8 - (v16 & 7);
    if (v37 < v38)
      v38 = v37;
    v36 = (*(unsigned __int8 *)(v22 + (v16 >> 3)) >> (8 - (v16 & 7) - v38)) & ~(-1 << v38) | (v36 << v38);
    v16 += v38;
    *(_QWORD *)(v7 + 24) = v16;
    v37 -= v38;
  }
  while (v37);
  if (v16 + 5 > v17)
  {
    v26 = (FILE *)*MEMORY[0x1E0C80C10];
    v27 = 6404;
    goto LABEL_22;
  }
  v39 = 0;
  v40 = (v36 + 1);
  v41 = 5;
  do
  {
    v42 = 8 - (v16 & 7);
    if (v41 < v42)
      v42 = v41;
    v39 = (*(unsigned __int8 *)(v22 + (v16 >> 3)) >> (8 - (v16 & 7) - v42)) & ~(-1 << v42) | (v39 << v42);
    v16 += v42;
    *(_QWORD *)(v7 + 24) = v16;
    v41 -= v42;
  }
  while (v41);
  if (v16 + 5 > v17)
    goto LABEL_51;
  v43 = 0;
  v44 = (v39 + 1);
  v45 = 5;
  do
  {
    v46 = 8 - (v16 & 7);
    if (v45 < v46)
      v46 = v45;
    v43 = (*(unsigned __int8 *)(v22 + (v16 >> 3)) >> (8 - (v16 & 7) - v46)) & ~(-1 << v46) | (v43 << v46);
    v16 += v46;
    *(_QWORD *)(v7 + 24) = v16;
    v45 -= v46;
  }
  while (v45);
  v47 = (v43 + 1);
  if (v16 + v47 > v17)
  {
LABEL_51:
    v26 = (FILE *)*MEMORY[0x1E0C80C10];
    v27 = 6408;
    goto LABEL_22;
  }
  if (v43 == -1)
    goto LABEL_65;
  v48 = 0;
  do
  {
    v49 = 8 - (v16 & 7);
    if (v47 < v49)
      v49 = v47;
    v48 = (*(unsigned __int8 *)(v22 + (v16 >> 3)) >> (8 - (v16 & 7) - v49)) & ~(-1 << v49) | (v48 << v49);
    v16 += v49;
    *(_QWORD *)(v7 + 24) = v16;
    v47 -= v49;
  }
  while (v47);
  if (!v48)
  {
LABEL_65:
    v26 = (FILE *)*MEMORY[0x1E0C80C10];
    v27 = 6409;
    goto LABEL_22;
  }
  if (v16 + 5 > v17)
    goto LABEL_64;
  v50 = 0;
  v51 = (float)v48;
  v52 = 5;
  do
  {
    v53 = 8 - (v16 & 7);
    if (v52 < v53)
      v53 = v52;
    v50 = (*(unsigned __int8 *)(v22 + (v16 >> 3)) >> (8 - (v16 & 7) - v53)) & ~(-1 << v53) | (v50 << v53);
    v16 += v53;
    *(_QWORD *)(v7 + 24) = v16;
    v52 -= v53;
  }
  while (v52);
  v54 = (v50 + 1);
  if (v16 + v54 > v17)
  {
LABEL_64:
    v26 = (FILE *)*MEMORY[0x1E0C80C10];
    v27 = 6413;
    goto LABEL_22;
  }
  v76 = v44;
  v55 = 0;
  if (v50 != -1)
  {
    do
    {
      v56 = 8 - (v16 & 7);
      if (v54 < v56)
        v56 = v54;
      v55 = (*(unsigned __int8 *)(v22 + (v16 >> 3)) >> (8 - (v16 & 7) - v56)) & ~(-1 << v56) | (v55 << v56);
      v16 += v56;
      *(_QWORD *)(v7 + 24) = v16;
      v54 -= v56;
    }
    while (v54);
  }
  v77 = 0;
  v28 = (geo::codec::Allocator *)BitstreamUnpack((uint64_t *)(v7 + 8), &v77, 5uLL);
  if ((v28 & 1) == 0)
  {
    v26 = (FILE *)*MEMORY[0x1E0C80C10];
    v27 = 6416;
LABEL_22:
    v28 = (geo::codec::Allocator *)fprintf(v26, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v27);
    v18 = 0;
    if (!*(_BYTE *)v7)
      goto LABEL_24;
    goto LABEL_23;
  }
  v74 = v9;
  v75 = ++v77;
  v57 = v76;
  if (!v34)
  {
LABEL_95:
    v71 = *(_QWORD *)(v7 + 48) + (*(_QWORD *)(v7 + 24) >> 3);
    if ((*(_QWORD *)(v7 + 24) & 7) != 0)
      ++v71;
    *(_QWORD *)(v7 + 48) = v71;
    *(_BYTE *)(v7 + 32) = 0;
    v18 = 1;
    goto LABEL_106;
  }
  v58 = 0;
  v59 = 1.0 / v51;
  while (1)
  {
    v60 = *(_QWORD *)(v7 + 24);
    v61 = v60 + 1;
    v62 = 8 * *(_QWORD *)(v7 + 16);
    if (v60 + 1 > v62)
    {
      v72 = (FILE *)*MEMORY[0x1E0C80C10];
      v73 = 6425;
      goto LABEL_105;
    }
    v63 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + (v60 >> 3));
    *(_QWORD *)(v7 + 24) = v61;
    if (((v63 >> (~(_BYTE)v60 & 7)) & 1) == 0)
      break;
    if (v61 + v57 > v62)
    {
      v72 = (FILE *)*MEMORY[0x1E0C80C10];
      v73 = 6428;
      goto LABEL_105;
    }
    if ((_DWORD)v57)
    {
      v64 = v57;
      do
      {
        v65 = 8 - (v61 & 7);
        if (v64 < v65)
          v65 = v64;
        v61 += v65;
        v64 -= v65;
      }
      while (v64);
      v66 = 0;
      *(_QWORD *)(v7 + 24) = v61;
    }
    else
    {
      v66 = 0;
    }
LABEL_87:
    if (v61 + 1 > v62)
    {
      v72 = (FILE *)*MEMORY[0x1E0C80C10];
      v73 = 6440;
      goto LABEL_105;
    }
    v68 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + (v61 >> 3));
    *(_QWORD *)(v7 + 24) = v61 + 1;
    if (((v68 >> (~(_BYTE)v61 & 7)) & 1) != 0)
    {
      v69 = v66;
      LODWORD(v83) = 0;
      v28 = (geo::codec::Allocator *)BitstreamUnpack((uint64_t *)(v7 + 8), (int *)&v83, v75);
      if (!(_DWORD)v28)
      {
        v72 = (FILE *)*MEMORY[0x1E0C80C10];
        v73 = 6443;
        goto LABEL_105;
      }
      v70 = (float)((_DWORD)v83 + v55) * v59;
      v57 = v76;
      v66 = v69;
    }
    else
    {
      v70 = 100.0;
    }
    if (v66)
      *(float *)(v66 + 160) = v70;
    if (++v58 == v34)
      goto LABEL_95;
  }
  LODWORD(v83) = 0;
  v28 = (geo::codec::Allocator *)BitstreamUnpack((uint64_t *)(v7 + 8), (int *)&v83, v40);
  if (!(_DWORD)v28)
  {
    v73 = 6433;
    goto LABEL_104;
  }
  v67 = *(_QWORD *)(*a2 + 504);
  if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*a2 + 512) - v67) >> 5) > (unint64_t)v83)
  {
    v66 = v67 + 224 * v83;
    v61 = *(_QWORD *)(v7 + 24);
    v62 = 8 * *(_QWORD *)(v7 + 16);
    v57 = v76;
    goto LABEL_87;
  }
  v73 = 6434;
LABEL_104:
  v72 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_105:
  v28 = (geo::codec::Allocator *)fprintf(v72, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v73);
  v18 = 0;
LABEL_106:
  v9 = v74;
  if (*(_BYTE *)v7)
  {
LABEL_23:
    v29 = geo::codec::Allocator::instance(v28);
    v28 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 40))(v29, *(_QWORD *)(v7 + 40), 0);
  }
LABEL_24:
  v30 = geo::codec::Allocator::instance(v28);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v30 + 40))(v30, v7, 0);
  v31 = std::chrono::steady_clock::now().__d_.__rep_;
  v82 = "ChapterTransitMZROverride";
  v83 = &v82;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)&v82, (uint64_t)&std::piecewise_construct, (uint64_t **)&v83)+ 4) = (double)((v31 - v12.__d_.__rep_) / 1000) * 0.001;
  if (v8)
  {
    v32 = (unint64_t *)&v8->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v18;
}

void sub_1886E41E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readVenueMZROverride(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  const char *v48;
  const char **v49;

  v2 = a1[1];
  if (!v2)
    return 1;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 136)
  {
    v4 = ++v5;
    if (v2 <= v5)
      return 1;
  }
  v6 = geo::codec::chapterAt((uint64_t)a1, v5, 136, *a2 + 1912);
  if (!v6)
    return 1;
  v7 = v6;
  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v13 = *(_QWORD *)(v7 + 48);
  v14 = *(_QWORD *)(v7 + 56);
  v15 = v14 - v13;
  if (v14 >= v13)
  {
    v16 = 0;
    *(_BYTE *)(v7 + 32) = 1;
    v20 = *(_QWORD *)(v7 + 40) + v13;
    *(_QWORD *)(v7 + 16) = v15;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 8) = v20;
    v17 = 8 * v15;
    if (v17 < 5)
    {
LABEL_21:
      v26 = 6476;
      goto LABEL_22;
    }
  }
  else
  {
    v16 = *(_QWORD *)(v7 + 24);
    v17 = 8 * *(_QWORD *)(v7 + 16);
    if (v16 + 5 > v17)
      goto LABEL_21;
  }
  v21 = 0;
  v22 = *(_QWORD *)(v7 + 8);
  v23 = 5;
  do
  {
    v24 = 8 - (v16 & 7);
    if (v23 < v24)
      v24 = v23;
    v21 = (*(unsigned __int8 *)(v22 + (v16 >> 3)) >> (8 - (v16 & 7) - v24)) & ~(-1 << v24) | (v21 << v24);
    v16 += v24;
    *(_QWORD *)(v7 + 24) = v16;
    v23 -= v24;
  }
  while (v23);
  v25 = (v21 + 1);
  if (v16 + v25 > v17)
    goto LABEL_21;
  v33 = 0;
  if ((_DWORD)v25)
  {
    do
    {
      v34 = 8 - (v16 & 7);
      if (v25 < v34)
        v34 = v25;
      v33 = (*(unsigned __int8 *)(v22 + (v16 >> 3)) >> (8 - (v16 & 7) - v34)) & ~(-1 << v34) | (v33 << v34);
      v16 += v34;
      *(_QWORD *)(v7 + 24) = v16;
      v25 -= v34;
    }
    while (v25);
  }
  if (v16 + 5 > v17)
  {
    v26 = 6479;
    goto LABEL_22;
  }
  v35 = 0;
  v36 = 5;
  do
  {
    v37 = 8 - (v16 & 7);
    if (v36 < v37)
      v37 = v36;
    v27 = (-1 << v37);
    v35 = (*(unsigned __int8 *)(v22 + (v16 >> 3)) >> (8 - (v16 & 7) - v37)) & ~(_DWORD)v27 | (v35 << v37);
    v16 += v37;
    *(_QWORD *)(v7 + 24) = v16;
    v36 -= v37;
  }
  while (v36);
  if (!v33)
  {
LABEL_54:
    v47 = v13 + (v16 >> 3);
    if ((v16 & 7) != 0)
      ++v47;
    *(_QWORD *)(v7 + 48) = v47;
    *(_BYTE *)(v7 + 32) = 0;
    v18 = 1;
    if (!*(_BYTE *)v7)
      goto LABEL_24;
    goto LABEL_23;
  }
  v38 = *a2;
  v39 = __CFADD__(v35, 1);
  v40 = (v35 + 1);
  if (!v39)
  {
    v41 = 0;
    v27 = 0x6DB6DB6DB6DB6DB7;
    while (v16 + v40 <= v17)
    {
      LODWORD(v42) = 0;
      v43 = v40;
      do
      {
        v44 = 8 - (v16 & 7);
        if (v43 < v44)
          v44 = v43;
        v42 = (*(unsigned __int8 *)(v22 + (v16 >> 3)) >> (8 - (v16 & 7) - v44)) & ~(-1 << v44) | ((_DWORD)v42 << v44);
        v16 += v44;
        *(_QWORD *)(v7 + 24) = v16;
        v43 -= v44;
      }
      while (v43);
      v45 = *(_QWORD *)(v38 + 504);
      if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v38 + 512) - v45) >> 5) <= v42)
        goto LABEL_58;
      *(_BYTE *)(v45 + 224 * v42 + 211) = 1;
      if (++v41 == v33)
        goto LABEL_54;
    }
    goto LABEL_43;
  }
  if (v16 + v40 > v17)
  {
LABEL_43:
    v26 = 6483;
    goto LABEL_22;
  }
  v46 = *(_QWORD *)(v38 + 504);
  if (*(_QWORD *)(v38 + 512) != v46)
  {
    *(_BYTE *)(v46 + 211) = 1;
    goto LABEL_54;
  }
LABEL_58:
  v26 = 6484;
LABEL_22:
  v27 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v26);
  v18 = 0;
  if (*(_BYTE *)v7)
  {
LABEL_23:
    v28 = geo::codec::Allocator::instance((geo::codec::Allocator *)v27);
    v27 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v28 + 40))(v28, *(_QWORD *)(v7 + 40), 0);
  }
LABEL_24:
  v29 = geo::codec::Allocator::instance((geo::codec::Allocator *)v27);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 40))(v29, v7, 0);
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v48 = "ChapterVenueMZROverride";
  v49 = &v48;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)&v48, (uint64_t)&std::piecewise_construct, (uint64_t **)&v49)+ 4) = (double)((rep - v12.__d_.__rep_) / 1000) * 0.001;
  if (v8)
  {
    v31 = (unint64_t *)&v8->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v18;
}

void sub_1886E4640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readDaVinciLandmarks(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  size_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  void *v31;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v32;
  unint64_t *v33;
  unint64_t v34;
  void **v35;
  void *v36;
  void *v37;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  unsigned __int16 v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  uint8x8_t v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  void *__p[2];
  void *v68[2];
  int v69;
  _OWORD v70[2];
  int v71;
  const char *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v75;

  v2 = a1[1];
  if (!v2)
    goto LABEL_12;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 147)
  {
    v4 = ++v5;
    if (v2 <= v5)
      goto LABEL_12;
  }
  v6 = geo::codec::chapterAt((uint64_t)a1, v5, 147, *a2 + 1912);
  if (!v6)
  {
LABEL_12:
    v17 = 1;
    return v17 & 1;
  }
  v7 = v6;
  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v72 = "ChapterDaVinciLandmarks";
  v73 = v9;
  v74 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v12.__d_.__rep_;
  v75 = v12.__d_.__rep_;
  memset(v70, 0, sizeof(v70));
  v71 = 1065353216;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v68 = 0u;
  v69 = 1065353216;
  v14 = *(_QWORD *)(v7 + 48);
  v15 = v14 + 4;
  if ((unint64_t)(v14 + 4) > *(_QWORD *)(v7 + 56))
  {
    v16 = 9291;
    goto LABEL_18;
  }
  v19 = *(_DWORD *)(*(_QWORD *)(v7 + 40) + v14);
  *(_QWORD *)(v7 + 48) = v15;
  if (v19 < 0x10)
  {
    v16 = 9292;
    goto LABEL_18;
  }
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v66 = geo::codec::Allocator::instance((geo::codec::Allocator *)v12.__d_.__rep_);
  v62 = 0;
  v20 = *a2;
  *(_WORD *)(v20 + 2798) = 0;
  v21 = geo::codec::_decodeDaVinciRenderables((geo::codec::Allocator *)v7, (int8x8_t *)v70, (uint64_t)__p, (uint64_t *)(v20 + 2192), (_WORD *)(v20 + 2184), (uint64_t *)&v63, &v62);
  if ((v21 & 1) != 0)
  {
    v22 = v63;
    v23 = v64 - (_BYTE *)v63;
    *(_WORD *)(*a2 + 2798) += ((_DWORD)v64 - (_DWORD)v63) >> 3;
    v24 = geo::codec::Allocator::instance((geo::codec::Allocator *)v21);
    v25 = (void *)(*(uint64_t (**)(uint64_t, size_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v23, 8);
    *(_QWORD *)(*a2 + 2816) = v25;
    v26 = (uint64_t)memcpy(v25, v22, v23);
    v27 = 0;
  }
  else
  {
    v26 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 9300);
    v27 = 6;
    v22 = v63;
  }
  if (v22)
  {
    v64 = v22;
    v26 = (*(uint64_t (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)v66 + 40))(v66, v22, v65 - (_QWORD)v22);
  }
  if (v27 == 6)
    goto LABEL_19;
  if (*(_DWORD *)(v7 + 64) < 0x14u)
    goto LABEL_91;
  v26 = geo::codec::_decodeMaterialModifiers((_QWORD *)v7, a2);
  if (!(_DWORD)v26)
  {
    v16 = 9308;
    goto LABEL_18;
  }
  v37 = (void *)*(unsigned __int16 *)(*a2 + 2184);
  if (!*(_WORD *)(*a2 + 2184) || (v38 = (int8x8_t)__p[1], !__p[1]))
  {
LABEL_91:
    v17 = 1;
    if (*(_BYTE *)v7)
      goto LABEL_20;
    goto LABEL_21;
  }
  v39 = 0;
LABEL_41:
  v40 = (uint8x8_t)vcnt_s8(v38);
  v40.i16[0] = vaddlv_u8(v40);
  if (v40.u32[0] > 1uLL)
  {
    v41 = v39;
    if (*(_QWORD *)&v38 <= v39)
      v41 = v39 % *(_QWORD *)&v38;
  }
  else
  {
    v41 = (*(_QWORD *)&v38 + 0xFFFFLL) & v39;
  }
  v42 = (uint64_t **)*((_QWORD *)__p[0] + v41);
  if (!v42 || (v43 = *v42) == 0)
  {
LABEL_88:
    while ((void *)++v39 != v37)
    {
      v38 = (int8x8_t)__p[1];
      if (__p[1])
        goto LABEL_41;
    }
    goto LABEL_91;
  }
  if (v40.u32[0] < 2uLL)
  {
    v44 = *(_QWORD *)&v38 - 1;
    while (1)
    {
      v46 = v43[1];
      if (v46 == v39)
      {
        if (*((_DWORD *)v43 + 4) == (_DWORD)v39)
          goto LABEL_61;
      }
      else if ((v46 & v44) != v41)
      {
        goto LABEL_88;
      }
      v43 = (uint64_t *)*v43;
      if (!v43)
        goto LABEL_88;
    }
  }
  while (1)
  {
    v45 = v43[1];
    if (v45 == v39)
      break;
    if (v45 >= *(_QWORD *)&v38)
      v45 %= *(_QWORD *)&v38;
    if (v45 != v41)
      goto LABEL_88;
LABEL_50:
    v43 = (uint64_t *)*v43;
    if (!v43)
      goto LABEL_88;
  }
  if (*((_DWORD *)v43 + 4) != (_DWORD)v39)
    goto LABEL_50;
LABEL_61:
  v47 = *(_QWORD *)(*a2 + 2192);
  v48 = v47 + 48 * v39;
  v51 = *(unsigned __int16 *)(v48 + 42);
  v49 = (unsigned __int16 *)(v48 + 42);
  v50 = v51;
  if (!v51)
    goto LABEL_88;
  v52 = 0;
  v53 = (_QWORD *)(v47 + 48 * v39 + 8);
  while (2)
  {
    if (!__p[1])
      goto LABEL_95;
    v54 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v54.i16[0] = vaddlv_u8(v54);
    if (v54.u32[0] > 1uLL)
    {
      v55 = v39;
      if (__p[1] <= (void *)v39)
        v55 = v39 % (unint64_t)__p[1];
    }
    else
    {
      v55 = ((unint64_t)__p[1] + 0xFFFF) & v39;
    }
    v56 = (uint64_t *)*((_QWORD *)__p[0] + v55);
    if (!v56 || (v26 = *v56) == 0)
LABEL_95:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (v54.u32[0] < 2uLL)
    {
      while (1)
      {
        v58 = *(_QWORD *)(v26 + 8);
        if (v58 == v39)
        {
          if (*(_DWORD *)(v26 + 16) == (_DWORD)v39)
            goto LABEL_84;
        }
        else if ((v58 & ((unint64_t)__p[1] - 1)) != v55)
        {
          goto LABEL_95;
        }
        v26 = *(_QWORD *)v26;
        if (!v26)
          goto LABEL_95;
      }
    }
    while (2)
    {
      v57 = *(_QWORD *)(v26 + 8);
      if (v57 != v39)
      {
        if ((void *)v57 >= __p[1])
          v57 %= (unint64_t)__p[1];
        if (v57 != v55)
          goto LABEL_95;
        goto LABEL_74;
      }
      if (*(_DWORD *)(v26 + 16) != (_DWORD)v39)
      {
LABEL_74:
        v26 = *(_QWORD *)v26;
        if (!v26)
          goto LABEL_95;
        continue;
      }
      break;
    }
LABEL_84:
    v59 = *(_DWORD *)(*(_QWORD *)(v26 + 24) + 4 * v52);
    if (!v59)
      goto LABEL_63;
    v60 = (v59 - 1);
    v61 = *(_QWORD *)(*a2 + 2104);
    v26 = *(_QWORD *)(*a2 + 2112) - v61;
    if (v60 < v26 >> 4)
    {
      if (*(_BYTE *)(v61 + 16 * v60 + 12))
      {
        *(_BYTE *)(*v53 + v52) |= 1u;
        v50 = *v49;
      }
LABEL_63:
      if (++v52 >= (unint64_t)v50)
        goto LABEL_88;
      continue;
    }
    break;
  }
  v16 = 9321;
LABEL_18:
  v26 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v16);
LABEL_19:
  v17 = 0;
  if (*(_BYTE *)v7)
  {
LABEL_20:
    v28 = geo::codec::Allocator::instance((geo::codec::Allocator *)v26);
    v26 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v28 + 40))(v28, *(_QWORD *)(v7 + 40), 0);
  }
LABEL_21:
  v29 = geo::codec::Allocator::instance((geo::codec::Allocator *)v26);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 40))(v29, v7, 0);
  v30 = (void **)v68[0];
  if (v68[0])
  {
    do
    {
      v35 = (void **)*v30;
      v36 = v30[3];
      if (v36)
      {
        v30[4] = v36;
        (*(void (**)(void *, void *, int64_t))(*(_QWORD *)v30[6] + 40))(v30[6], v36, (_BYTE *)v30[5] - (_BYTE *)v36);
      }
      operator delete(v30);
      v30 = v35;
    }
    while (v35);
  }
  v31 = __p[0];
  __p[0] = 0;
  if (v31)
    operator delete(v31);
  v32 = std::chrono::steady_clock::now().__d_.__rep_;
  __p[0] = "ChapterDaVinciLandmarks";
  *(_QWORD *)&v70[0] = __p;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)__p, (uint64_t)&std::piecewise_construct, (uint64_t **)v70)+ 4) = (double)((v32 - rep) / 1000) * 0.001;
  if (v8)
  {
    v33 = (unint64_t *)&v8->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v17 & 1;
}

void sub_1886E4C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  std::unordered_map<unsigned int,std::vector<geo::Transform<float>,geo::StdAllocator<geo::Transform<float>,geo::codec::Allocator>>>::~unordered_map[abi:ne180100]((uint64_t)va2);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v5 - 112));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readDaVinciBuildings(_QWORD *a1, geo::codec::VectorTile **a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  geo::codec::VectorTile *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  uint64_t v13;
  FILE *v14;
  int v15;
  uint64_t v16;
  unsigned int v18;
  BOOL v19;
  geo::codec::VectorTile *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  uint64_t v26;
  int v27;
  geo::codec::Allocator *v28;
  geo::codec::VectorTile **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  geo::codec::VectorTile *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  geo::codec::Allocator *v56;
  uint64_t v57;
  geo::codec::Allocator *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  double v71;
  double v72;
  double v73;
  uint64x2_t v74;
  float64x2_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  float *v84;
  float v85;
  float v86;
  float *v87;
  uint64_t v88;
  unsigned int v89;
  char *v90;
  unsigned int v91;
  uint64_t v92;
  const float *v93;
  const double *v94;
  int32x4_t v95;
  float64x2_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  float *v101;
  uint64_t v102;
  const float *v103;
  float32x4_t v104;
  float32x4_t v105;
  uint64_t v106;
  unsigned int *v107;
  float *v108;
  unsigned int v109;
  float v110;
  uint64_t v111;
  double v112;
  double v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  geo::codec::VectorTile *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  geo::codec::Allocator *v123;
  uint64_t v124;
  uint64_t v125;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  _QWORD *v131;
  geo::codec::VectorTile *v132;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v133;
  geo::codec::VectorTile *v134;
  int v135;
  geo::codec::VectorTile **v136;
  _BYTE *v137;
  _BYTE *v138;
  uint64_t v139;
  int v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  geo::codec::Allocator *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  geo::codec::Allocator *v153;
  uint64_t (**v154)();
  __int16 v155;
  __int16 v156;
  double v157;
  double v158[2];
  int v159;
  char v160;
  unsigned int v161;
  const char *v162;
  geo::codec::VectorTile *v163;
  std::__shared_weak_count *v164;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  int v166;
  _BYTE *v167;
  void *v168;
  uint64_t v169;
  _BYTE *v170;
  void *v171;
  uint64_t v172;
  int v173;
  __int128 v174;
  uint64_t v175;
  int v176;
  unsigned __int8 v177;
  uint64_t (*v178[3])();
  uint64_t (**v179)();
  uint64_t v180;
  float32x4x3_t v181;
  float32x4x3_t v182;

  v180 = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  if (!v2)
    return 1;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 142)
  {
    v4 = ++v5;
    if (v2 <= v5)
      return 1;
  }
  v6 = geo::codec::chapterAt((uint64_t)a1, v5, 142, (uint64_t)*a2 + 1912);
  if (!v6)
    return 1;
  v7 = (_QWORD *)v6;
  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v162 = "ChapterDaVinciBuildings";
  v163 = v9;
  v164 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v12.__d_.__rep_;
  v161 = 0;
  v160 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v153 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)v12.__d_.__rep_);
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v149 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v153);
  v142 = 0;
  v143 = 0;
  v144 = 0;
  v145 = geo::codec::Allocator::instance(v149);
  v13 = v7[6];
  if ((unint64_t)(v13 + 4) > v7[7])
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 9240;
    goto LABEL_109;
  }
  v18 = *(_DWORD *)(v7[5] + v13);
  v7[6] = v13 + 4;
  if (v18 - 16 >= 5)
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 9241;
    goto LABEL_109;
  }
  if ((geo::codec::MercatorDequantizer::readInfo((uint64_t)&v154, v7) & 1) == 0)
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 9243;
    goto LABEL_109;
  }
  if ((geo::codec::chapterReadVarUint32(v7, &v161) & 1) == 0)
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 9245;
    goto LABEL_109;
  }
  v19 = v18 > 0x13;
  v136 = a2;
  v20 = *a2;
  v21 = v19;
  *((_BYTE *)v20 + 2496) = v21;
  v22 = v7[5];
  v23 = v7[6];
  v24 = v161;
  v176 = 16843009;
  v177 = 0;
  v174 = 0uLL;
  v175 = 0;
  v173 = 0;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v166 = 0;
  v25 = (uint64_t (**)())operator new(0x40uLL);
  *v25 = (uint64_t (*)())&off_1E1BFAB20;
  v25[1] = (uint64_t (*)())((char *)&v166 + 3);
  v25[2] = (uint64_t (*)())((char *)&v166 + 2);
  v25[3] = (uint64_t (*)())((char *)&v166 + 1);
  v25[4] = (uint64_t (*)())((char *)v20 + 2352);
  v25[5] = (uint64_t (*)())&v170;
  v25[6] = (uint64_t (*)())&v166;
  v25[7] = (uint64_t (*)())&v167;
  v179 = v25;
  v27 = mgcl::bldg::decompress((unsigned __int8 *)(v22 + v23), v24, (uint64_t)&v176, &v174, &v173, v178);
  v28 = (geo::codec::Allocator *)v179;
  v29 = a2;
  if (v179 == v178)
  {
    v30 = 4;
    v28 = (geo::codec::Allocator *)v178;
    goto LABEL_27;
  }
  if (v179)
  {
    v30 = 5;
LABEL_27:
    v28 = (geo::codec::Allocator *)(*(uint64_t (**)(void))(*(_QWORD *)v28 + 8 * v30))();
  }
  if (BYTE2(v166))
  {
    if (!HIBYTE(v166))
    {
      v31 = *((_QWORD *)v20 + 294);
      *((_QWORD *)v20 + 295) = v31;
      v32 = *((_QWORD *)v20 + 296);
      v26 = v32 - v31;
      if (v32 != v31)
      {
        *((_QWORD *)v20 + 294) = 0;
        *((_QWORD *)v20 + 295) = 0;
        *((_QWORD *)v20 + 296) = 0;
        if (v31)
          v28 = (geo::codec::Allocator *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v20 + 297)
                                                                                             + 40))(*((_QWORD *)v20 + 297), v31, v26);
      }
    }
  }
  if (!v27)
  {
    v33 = *a2;
    v34 = *((_QWORD *)*a2 + 291);
    v35 = *((_QWORD *)*v136 + 290);
    v36 = 0xCCCCCCCCCCCCCCCDLL * ((v34 - v35) >> 3);
    v37 = v173 - v36;
    if (v173 <= v36)
    {
      if (v173 < v36)
      {
        v38 = v35 + 40 * v173;
        while (v34 != v38)
        {
          v39 = *(std::__shared_weak_count **)(v34 - 32);
          if (v39)
          {
            v40 = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t, uint64_t))v39->__on_zero_shared)(v39, v37, v26);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v34 -= 40;
        }
        *((_QWORD *)v33 + 291) = v38;
      }
    }
    else
    {
      std::vector<GeoCodecsDaVinciBuilding,geo::StdAllocator<GeoCodecsDaVinciBuilding,geo::codec::Allocator>>::__append((unint64_t *)v33 + 290, v37);
    }
    v131 = v7;
    v132 = v9;
    v133 = v12.__d_.__rep_;
    v141 = *((_QWORD *)&v174 + 1);
    v42 = (unsigned int *)v174;
    v43 = *((_QWORD *)&v174 + 1) - v174;
    if ((uint64_t)(*((_QWORD *)&v174 + 1) - v174) < 1)
    {
      v46 = 0;
      v45 = 0;
      v44 = 0;
    }
    else
    {
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = (int *)v174;
      do
      {
        v49 = *v47;
        v47 += 6;
        v48 = v49;
        if (v49 >= 1)
        {
          v50 = 0;
          do
          {
            v52 = *v47;
            v47 += 4;
            v51 = v52;
            if ((v52 & 0x80000000) == 0)
            {
              v53 = v51 + 1;
              do
              {
                v54 = *v47;
                v47 += 3 * *v47 + 1;
                v46 += v54;
                --v53;
              }
              while (v53);
            }
            v45 += v51 + 1;
            ++v50;
          }
          while (v50 != v48);
        }
        v44 += v48;
      }
      while ((unint64_t)v47 < *((_QWORD *)&v174 + 1));
    }
    v135 = v44;
    v55 = geo::codec::Allocator::instance(v28);
    v56 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v55 + 24))(v55, 20, v135);
    v57 = geo::codec::Allocator::instance(v56);
    v58 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v57 + 24))(v57, 8, v45);
    v59 = geo::codec::Allocator::instance(v58);
    v130 = v8;
    if (v46)
    {
      if (v46 < 0)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v60 = 12 * v46;
      v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, v60, 4);
      v62 = v61;
      v63 = 0;
      v129 = v61 + v60;
      do
      {
        v64 = v61 + v63;
        if (v61 + v63)
        {
          *(_DWORD *)(v64 + 8) = 0;
          *(_QWORD *)v64 = 0;
        }
        v63 += 12;
      }
      while (v60 != v63);
    }
    else
    {
      v129 = 0;
      v62 = 0;
    }
    v65 = v177;
    v134 = *v136;
    *((_BYTE *)*v136 + 3480) = v177;
    if (v43 >= 1)
    {
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      v138 = v170;
      v139 = *((_QWORD *)v134 + 290);
      v137 = v167;
      v70 = v159;
      v71 = v157;
      v72 = v158[1] * (double)(v156 - v155);
      v73 = (double)v155;
      v74 = (uint64x2_t)vdupq_n_s64(v159);
      v75 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v73, 0);
      do
      {
        v76 = v66;
        v77 = *v42;
        v78 = *((_QWORD *)v42 + 1);
        v79 = v139 + 40 * v66;
        *(_BYTE *)(v79 + 36) = 0;
        v80 = (char *)(v79 + 36);
        *(_QWORD *)(v80 - 12) = v78;
        *(_QWORD *)(v80 - 20) = *((unsigned __int16 *)v42 + 8);
        *((_WORD *)v80 - 1) = v77;
        *((_WORD *)v80 - 2) = v69;
        if (BYTE1(v166) && v138[v76])
        {
          *v80 = 1;
          v81 = 5;
          if (!(_BYTE)v166)
            goto LABEL_74;
        }
        else
        {
          v81 = 4;
          if (!(_BYTE)v166)
            goto LABEL_74;
        }
        if (v137[v76])
          *v80 = v81;
LABEL_74:
        v140 = v76;
        v42 += 6;
        if ((int)v77 >= 1)
        {
          v82 = 0;
          while (1)
          {
            v83 = v82 + v69;
            v84 = (float *)((char *)v56 + 20 * v83);
            *((_BYTE *)v84 + 1) = 0;
            *(_BYTE *)v84 = *((_BYTE *)v42 + 4);
            v85 = (v73 + v72 * (double)((unint64_t)v42[2] + v70)) * v71;
            v84[1] = v85;
            if (!v65)
              break;
            v86 = (v73 + v72 * (double)((unint64_t)v42[3] + v70)) * v71;
            v87 = (float *)((char *)v56 + 20 * v83);
            v87[2] = v86;
            *((_DWORD *)v87 + 3) = v68;
            v89 = *v42;
            v42 += 4;
            v88 = v89;
            *((_WORD *)v87 + 8) = v89;
            if ((v89 & 0x80000000) == 0)
              goto LABEL_81;
LABEL_76:
            v68 += v88 + 1;
            if (++v82 == v77)
              goto LABEL_66;
          }
          v90 = (char *)v56 + 20 * v83;
          *((_DWORD *)v90 + 2) = 0;
          *((_DWORD *)v90 + 3) = v68;
          v91 = *v42;
          v42 += 4;
          v88 = v91;
          *((_WORD *)v90 + 8) = v91;
          if ((v91 & 0x80000000) != 0)
            goto LABEL_76;
LABEL_81:
          v92 = 0;
          v93 = (const float *)&v154 + 1;
          v94 = v158;
          v95 = (int32x4_t)vld1q_dup_f32(v93);
          v96 = vld1q_dup_f64(v94);
          while (2)
          {
            v97 = (int)*v42;
            v98 = (char *)v58 + 8 * v92 + 8 * v68;
            v99 = *v42;
            *((_WORD *)v98 + 2) = v97;
            *(_DWORD *)v98 = v67;
            if ((int)v97 > 0)
            {
              if (v97 < 4)
              {
                v100 = 0;
                goto LABEL_89;
              }
              v100 = v99 & 0xFFFFFFFC;
              v101 = (float *)(v62 + 12 * v67);
              v102 = v100;
              v103 = (const float *)(v42 + 1);
              do
              {
                v181 = vld3q_f32(v103);
                v103 += 12;
                v104 = vcvtq_f32_s32(vaddq_s32((int32x4_t)v181.val[0], v95));
                v182.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v96, vcvtq_f64_f32(*(float32x2_t *)v104.f32))), vmulq_f64(v96, vcvt_hight_f64_f32(v104)));
                v105 = vcvtq_f32_s32(vaddq_s32((int32x4_t)v181.val[1], v95));
                v182.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v96, vcvtq_f64_f32(*(float32x2_t *)v105.f32))), vmulq_f64(v96, vcvt_hight_f64_f32(v105)));
                v182.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(v75, vcvtq_f64_u64(vaddw_u32(v74, *(uint32x2_t *)v181.val[2].f32)), v72), v71)), vmulq_n_f64(vmlaq_n_f64(v75, vcvtq_f64_u64(vaddw_high_u32(v74, (uint32x4_t)v181.val[2])), v72), v71));
                vst3q_f32(v101, v182);
                v101 += 12;
                v102 -= 4;
              }
              while (v102);
              v97 = v99;
              if (v100 != v99)
              {
LABEL_89:
                v106 = v99 - v100;
                v107 = &v42[3 * v100 + 3];
                v108 = (float *)(v62 + 8 + 12 * (v100 + v67));
                do
                {
                  *((float32x2_t *)v108 - 1) = vcvt_f32_f64(vmulq_f64(v96, vcvtq_f64_f32(vcvt_f32_s32(vadd_s32(*(int32x2_t *)(v107 - 2), *(int32x2_t *)v95.i8)))));
                  v109 = *v107;
                  v107 += 3;
                  v110 = (v73 + v72 * (double)((unint64_t)v109 + v70)) * v71;
                  *v108 = v110;
                  v108 += 3;
                  --v106;
                }
                while (v106);
                v97 = v99;
              }
            }
            v67 += v99;
            v42 += 3 * v97 + 1;
            if (++v92 == v88 + 1)
              goto LABEL_76;
            continue;
          }
        }
LABEL_66:
        v69 += v77;
        v66 = v140 + 1;
      }
      while ((unint64_t)v42 < v141);
    }
    *((_QWORD *)v134 + 289) = v56;
    *((_WORD *)v134 + 1152) = v135;
    *((_QWORD *)v134 + 287) = v58;
    *((_WORD *)v134 + 1144) = v45;
    v111 = *((_QWORD *)v134 + 282);
    v9 = v132;
    v12.__d_.__rep_ = v133;
    v7 = v131;
    v29 = v136;
    if (v111)
    {
      *((_QWORD *)v134 + 283) = v111;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v134 + 285) + 40))(*((_QWORD *)v134 + 285), v111, *((_QWORD *)v134 + 284) - v111);
      *((_QWORD *)v134 + 282) = 0;
      *((_QWORD *)v134 + 283) = 0;
      *((_QWORD *)v134 + 284) = 0;
    }
    *((_QWORD *)v134 + 282) = v62;
    v8 = v130;
    *((_QWORD *)v134 + 283) = v129;
    *((_QWORD *)v134 + 284) = v129;
    *((_DWORD *)*v136 + 563) = v46;
    v27 = 0;
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  if (v170)
  {
    v171 = v170;
    operator delete(v170);
  }
  if ((_QWORD)v174)
    operator delete((void *)v174);
  if (v27)
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 9251;
  }
  else
  {
    v7[6] += v161;
    if (geo::codec::_readMaterials((uint64_t)v7, &v142, &v146, &v150, (uint64_t)*v29 + 1112, 1))
    {
      v118 = *v29;
      v119 = *((_QWORD *)*v29 + 290);
      v120 = (unsigned __int16)(-13107 * ((*((_DWORD *)*v29 + 582) - v119) >> 3));
      if (-13107 * (unsigned __int16)((*((_DWORD *)*v29 + 582) - v119) >> 3))
      {
        v121 = v146;
        v122 = (_QWORD *)(v119 + 16);
        do
        {
          *v122 = *(_QWORD *)(v121 + 16 * *(unsigned __int16 *)v122);
          v122 += 5;
          --v120;
        }
        while (v120);
      }
      geo::codec::VectorTile::calculateBuildingTileBound(v118, v112, v113, v114, v115, v116, v117);
      *((double *)*v29 + 434) = v157;
      v16 = 1;
      goto LABEL_110;
    }
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 9255;
  }
LABEL_109:
  v123 = (geo::codec::Allocator *)fprintf(v14, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v15);
  v16 = 0;
LABEL_110:
  if (*(_BYTE *)v7)
  {
    v124 = geo::codec::Allocator::instance(v123);
    v123 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v124 + 40))(v124, v7[5], 0);
  }
  v125 = geo::codec::Allocator::instance(v123);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v125 + 40))(v125, v7, 0);
  if (v142)
  {
    v143 = v142;
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v145 + 40))(v145, v142, v144 - v142);
  }
  if (v146)
  {
    v147 = v146;
    (*(void (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v149 + 40))(v149, v146, v148 - v146);
  }
  if (v150)
  {
    v151 = v150;
    (*(void (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v153 + 40))(v153, v150, v152 - v150);
  }
  v126 = std::chrono::steady_clock::now().__d_.__rep_;
  v178[0] = (uint64_t (*)())"ChapterDaVinciBuildings";
  v154 = v178;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>((uint64_t)v9 + 1912, (uint64_t *)v178, (uint64_t)&std::piecewise_construct, (uint64_t **)&v154)+ 4) = (double)((v126 - v12.__d_.__rep_) / 1000) * 0.001;
  if (v8)
  {
    v127 = (unint64_t *)&v8->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v16;
}

