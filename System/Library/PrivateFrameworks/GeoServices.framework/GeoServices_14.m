BOOL GEORPUserSearchInputIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2)
            goto LABEL_48;
          goto LABEL_22;
        case 2u:
          if (v15 == 2)
            goto LABEL_22;
          goto LABEL_48;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceIsValid(a1))
            goto LABEL_48;
          goto LABEL_35;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAutocompleteEntryIsValid(a1))
            goto LABEL_48;
          goto LABEL_35;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_48;
LABEL_35:
          PBReaderRecallMark();
          continue;
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_48;
          v17 = 0;
          break;
        default:
LABEL_22:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_48:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v18 = *v2;
        v19 = *(_QWORD *)&a1[v18];
        v20 = v19 + 1;
        if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
          break;
        v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
        *(_QWORD *)&a1[v18] = v20;
        if (v21 < 0 && v17++ <= 8)
          continue;
        goto LABEL_36;
      }
      a1[*v4] = 1;
LABEL_36:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

BOOL GEORPInstructionCorrectionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  _BOOL8 v28;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_51;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_41;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_48;
          }
        case 2u:
          if (v15 == 2)
            goto LABEL_47;
          goto LABEL_51;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPPhotoWithMetadataIsValid(a1))
            goto LABEL_51;
          PBReaderRecallMark();
          continue;
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_51;
          v23 = 0;
          break;
        case 5u:
          if (v15 == 2)
            goto LABEL_47;
          goto LABEL_51;
        case 6u:
          if (v15 == 2)
            goto LABEL_47;
          goto LABEL_51;
        case 7u:
          if (v15 == 2)
            goto LABEL_47;
          goto LABEL_51;
        default:
LABEL_47:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_51:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v24 = *v2;
        v25 = *(_QWORD *)&a1[v24];
        v26 = v25 + 1;
        if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
          break;
        v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
        *(_QWORD *)&a1[v24] = v26;
        if (v27 < 0)
        {
          v22 = v23++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_48;
      }
LABEL_41:
      a1[*v4] = 1;
LABEL_48:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v28 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v28;
}

void sub_1893BAA30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPDirectionsProblemIsDirty(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v2 = *(_WORD *)(a1 + 92);
  if ((v2 & 0x2CC) != 0)
    return 1;
  if ((*(_WORD *)(a1 + 92) & 0x100) != 0)
  {
    if ((GEORPUserSearchInputIsDirty(*(os_unfair_lock_s **)(a1 + 64)) & 1) != 0)
      return 1;
    v2 = *(_WORD *)(a1 + 92);
  }
  if ((v2 & 0x10) != 0)
  {
    if ((GEORPUserSearchInputIsDirty(*(os_unfair_lock_s **)(a1 + 32)) & 1) != 0)
      return 1;
    v2 = *(_WORD *)(a1 + 92);
  }
  if ((v2 & 0x20) == 0)
  {
    if ((v2 & 4) == 0)
      return 0;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v5 = *(id *)(a1 + 16);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v17;
LABEL_15:
      v9 = 0;
      while (1)
      {
        if (*(_QWORD *)v17 != v8)
          objc_enumerationMutation(v5);
        if ((GEOTransitSuggestedRouteIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v16 + 1) + 8 * v9)) & 1) != 0)
          break;
        if (v7 == ++v9)
        {
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
          if (v7)
            goto LABEL_15;
          goto LABEL_21;
        }
      }
    }
    else
    {
LABEL_21:

      if ((*(_WORD *)(a1 + 92) & 0x20) == 0)
        return 0;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v5 = *(id *)(a1 + 40);
      v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
      if (!v3)
      {
LABEL_32:

        return v3;
      }
      v10 = *(_QWORD *)v13;
LABEL_24:
      v11 = 0;
      while (1)
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v5);
        if ((GEORPInstructionCorrectionIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v12 + 1) + 8 * v11)) & 1) != 0)
          break;
        if (v3 == ++v11)
        {
          v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
          if (v3)
            goto LABEL_24;
          goto LABEL_32;
        }
      }
    }
    v3 = 1;
    goto LABEL_32;
  }
  return 1;
}

os_unfair_lock_s *GEORPDirectionsProblemIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPDirectionsProblemIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 20);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1893BB550(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPFeatureHandleReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  _BOOL8 v62;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 60) |= 1u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                goto LABEL_75;
              v18 += 7;
              v15 = v19++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_77;
              }
            }
            v3[*v6] = 1;
LABEL_75:
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_77:
            v61 = 32;
            goto LABEL_102;
          case 2u:
            v25 = 0;
            v26 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 60) |= 2u;
            while (2)
            {
              v27 = *v4;
              v28 = *(_QWORD *)&v3[v27];
              v29 = v28 + 1;
              if (v28 == -1 || v29 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v30 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v28);
                *(_QWORD *)&v3[v27] = v29;
                v20 |= (unint64_t)(v30 & 0x7F) << v25;
                if (v30 < 0)
                {
                  v25 += 7;
                  v15 = v26++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_81;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_81:
            v61 = 36;
            goto LABEL_102;
          case 3u:
            v31 = 0;
            v32 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 60) |= 4u;
            while (2)
            {
              v33 = *v4;
              v34 = *(_QWORD *)&v3[v33];
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v36 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v34);
                *(_QWORD *)&v3[v33] = v35;
                v20 |= (unint64_t)(v36 & 0x7F) << v31;
                if (v36 < 0)
                {
                  v31 += 7;
                  v15 = v32++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_85;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_85:
            v61 = 40;
            goto LABEL_102;
          case 4u:
            v37 = 0;
            v38 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 60) |= 8u;
            while (2)
            {
              v39 = *v4;
              v40 = *(_QWORD *)&v3[v39];
              v41 = v40 + 1;
              if (v40 == -1 || v41 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v42 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v40);
                *(_QWORD *)&v3[v39] = v41;
                v20 |= (unint64_t)(v42 & 0x7F) << v37;
                if (v42 < 0)
                {
                  v37 += 7;
                  v15 = v38++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_89;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_89:
            v61 = 44;
            goto LABEL_102;
          case 5u:
            v43 = 0;
            v44 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 60) |= 0x20u;
            while (2)
            {
              v45 = *v4;
              v46 = *(_QWORD *)&v3[v45];
              v47 = v46 + 1;
              if (v46 == -1 || v47 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v48 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v46);
                *(_QWORD *)&v3[v45] = v47;
                v20 |= (unint64_t)(v48 & 0x7F) << v43;
                if (v48 < 0)
                {
                  v43 += 7;
                  v15 = v44++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_93;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_93:
            v61 = 52;
            goto LABEL_102;
          case 6u:
            v49 = 0;
            v50 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 60) |= 0x10u;
            while (2)
            {
              v51 = *v4;
              v52 = *(_QWORD *)&v3[v51];
              v53 = v52 + 1;
              if (v52 == -1 || v53 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v54 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v52);
                *(_QWORD *)&v3[v51] = v53;
                v20 |= (unint64_t)(v54 & 0x7F) << v49;
                if (v54 < 0)
                {
                  v49 += 7;
                  v15 = v50++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_97;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_97:
            v61 = 48;
            goto LABEL_102;
          case 7u:
            v55 = 0;
            v56 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 60) |= 0x40u;
            break;
          case 8u:
            if (!PBReaderPlaceMark())
              goto LABEL_105;
            -[GEORPFeatureHandle _reserveStyleAttributes:](a1, 1uLL);
            if (!GEORPFeatureHandleStyleAttributeReadAllFrom((_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * *(_QWORD *)(a1 + 16)), (uint64_t)v3))goto LABEL_105;
            PBReaderRecallMark();
            ++*(_QWORD *)(a1 + 16);
            continue;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_105;
            continue;
        }
        while (1)
        {
          v57 = *v4;
          v58 = *(_QWORD *)&v3[v57];
          v59 = v58 + 1;
          if (v58 == -1 || v59 > *(_QWORD *)&v3[*v5])
            break;
          v60 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v58);
          *(_QWORD *)&v3[v57] = v59;
          v20 |= (unint64_t)(v60 & 0x7F) << v55;
          if ((v60 & 0x80) == 0)
            goto LABEL_99;
          v55 += 7;
          v15 = v56++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_101;
          }
        }
        v3[*v6] = 1;
LABEL_99:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_101:
        v61 = 56;
LABEL_102:
        *(_DWORD *)(a1 + v61) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v62 = v3[*v6] == 0;
  }
  else
  {
LABEL_105:
    v62 = 0;
  }
  objc_sync_exit(v3);

  return v62;
}

void sub_1893BF808(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPFeatureHandleReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPFeatureHandleReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893BF868(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPFeatureHandleStyleAttributeIsValid(void *a1)
{
  _BOOL8 v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend(a1, "position");
  v6 = objc_msgSend(a1, "length");
  v2 = GEORPFeatureHandleStyleAttributeReadAllFrom(&v4, (uint64_t)a1);
  PBReaderRecallMark();
  return v2;
}

uint64_t GEORPFeatureHandleStyleAttributeWriteTo()
{
  PBDataWriterWriteInt32Field();
  return PBDataWriterWriteInt32Field();
}

id GEORPFeatureHandleStyleAttributeDescription(unsigned int *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CB3940];
  _GEORPFeatureHandleStyleAttributeDictionaryRepresentation(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("GEORPFeatureHandleStyleAttribute<%p> %@"), a1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _GEORPFeatureHandleStyleAttributeDictionaryRepresentation(unsigned int *a1)
{
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v3, CFSTR("key"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[1]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("value"));

  return v2;
}

void _GEORPFeatureHandleStyleAttributeFromDictionaryRepresentation(void *a1, _DWORD *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a1;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("key"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    *a2 = objc_msgSend(v4, "intValue");

  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("value"));
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    a2[1] = objc_msgSend(v5, "intValue");

}

BOOL GEORPFeatureHandleStyleAttributeReadFrom(_DWORD *a1, uint64_t a2)
{
  return GEORPFeatureHandleStyleAttributeReadAllFrom(a1, a2);
}

BOOL GEORPFeatureHandleStyleAttributeReadAllFrom(_DWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  _DWORD *v7;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  _DWORD *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = a1 + 1;
    v8 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v3;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v4))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        if (v10++ >= 9)
        {
          v11 = 0;
          v17 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v17 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v11 = 0;
LABEL_14:
      if (v17 || (v11 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v11 >> 3) == 1)
        break;
      if ((v11 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
          {
            v27 = v7;
            goto LABEL_38;
          }
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0)
            break;
          v19 += 7;
          v26 = v20++ > 8;
          if (v26)
          {
            LODWORD(v21) = 0;
            v27 = v7;
            goto LABEL_41;
          }
        }
        v27 = v7;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_41:
        *v27 = v21;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v28 = 0;
    v29 = 0;
    v21 = 0;
    while (1)
    {
      v30 = *v3;
      v31 = *(_QWORD *)(a2 + v30);
      v32 = v31 + 1;
      if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
        break;
      v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v31);
      *(_QWORD *)(a2 + v30) = v32;
      v21 |= (unint64_t)(v33 & 0x7F) << v28;
      if ((v33 & 0x80) == 0)
      {
        v27 = a1;
        goto LABEL_39;
      }
      v28 += 7;
      v26 = v29++ > 8;
      if (v26)
      {
        LODWORD(v21) = 0;
        v27 = a1;
        goto LABEL_41;
      }
    }
    v27 = a1;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL GEORPFeatureHandleStyleAttributeEquals(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t GEORPFeatureHandleStyleAttributeHash()
{
  return PBHashBytes();
}

void sub_1893C08F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPInstructionCorrectionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  char v55;
  char v56;
  int v57;
  char v58;
  void *v59;
  GEORPPhotoWithMetadata *v61;
  char v62;
  char v63;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 76)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFDFFFBFFFEFFFCLL) & 0xFF01FF01FF01FF01))+ ((*(_BYTE *)(a1 + 76) & 0x40) != 0));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 3;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v63 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v62 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_98;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_98:
      if ((v15 & 1) != 0)
      {
        v56 = 1;
        goto LABEL_110;
      }
      if (v16)
      {
        while (1)
        {
          v57 = *v16++;
          v58 = 4;
          switch(v57)
          {
            case 0:
              goto LABEL_111;
            case 2:
              goto LABEL_106;
            case 3:
              v58 = 16;
              goto LABEL_106;
            case 5:
              v58 = 32;
              goto LABEL_106;
            case 6:
              v58 = 8;
              goto LABEL_106;
            case 7:
              v58 = 64;
LABEL_106:
              *(_BYTE *)(a1 + 76) |= v58;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_111;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if ((v63 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_74;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        *(_BYTE *)(a1 + 76) |= 1u;
        while (1)
        {
          v39 = *v17;
          v40 = *(_QWORD *)(v3 + v39);
          v41 = v40 + 1;
          if (v40 == -1 || v41 > *(_QWORD *)(v3 + *v6))
            break;
          v42 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v40);
          *(_QWORD *)(v3 + v39) = v41;
          v38 |= (unint64_t)(v42 & 0x7F) << v36;
          if ((v42 & 0x80) == 0)
            goto LABEL_77;
          v36 += 7;
          v27 = v37++ >= 9;
          if (v27)
          {
            LODWORD(v38) = 0;
            goto LABEL_79;
          }
        }
        *(_BYTE *)(v3 + *v18) = 1;
LABEL_77:
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_79:
        v54 = 68;
        goto LABEL_84;
      case 2:
        if (!v31)
          goto LABEL_74;
        if ((*(_BYTE *)(a1 + 76) & 4) == 0)
        {
          PBReaderReadString();
          v44 = objc_claimAutoreleasedReturnValue();
          v45 = 16;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_109;
        v55 = 32 * *(_BYTE *)(a1 + 76);
        goto LABEL_95;
      case 3:
        if (!v31)
          goto LABEL_74;
        if ((*(_BYTE *)(a1 + 76) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_109;
          v55 = 8 * *(_BYTE *)(a1 + 76);
LABEL_95:
          v7 += v55 >> 7;
LABEL_96:
          v15 = v62;
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_97:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_98;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_109;
        v61 = objc_alloc_init(GEORPPhotoWithMetadata);
        if (GEORPPhotoWithMetadataReadAllFrom((uint64_t)v61, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v46 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v61;
LABEL_73:

          --v7;
          goto LABEL_96;
        }

LABEL_109:
        v56 = 0;
        v15 = v62;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_110:
        *(_BYTE *)(a1 + 76) |= 4u;
        *(_BYTE *)(a1 + 76) |= 0x10u;
        *(_BYTE *)(a1 + 76) |= 0x20u;
        *(_BYTE *)(a1 + 76) |= 8u;
        *(_BYTE *)(a1 + 76) |= 0x40u;
        if ((v56 & 1) != 0)
        {
LABEL_111:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_112;
        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
          {
LABEL_112:
            v59 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_74;
        v47 = 0;
        v48 = 0;
        v38 = 0;
        *(_BYTE *)(a1 + 76) |= 2u;
        while (2)
        {
          v49 = *v17;
          v50 = *(_QWORD *)(v3 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v50);
            *(_QWORD *)(v3 + v49) = v51;
            v38 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              v27 = v48++ >= 9;
              if (v27)
              {
                LODWORD(v38) = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_83:
        v54 = 72;
LABEL_84:
        *(_DWORD *)(a1 + v54) = v38;
        goto LABEL_97;
      case 5:
        if (!v31)
          goto LABEL_74;
        if ((*(_BYTE *)(a1 + 76) & 0x20) == 0)
        {
          PBReaderReadData();
          v44 = objc_claimAutoreleasedReturnValue();
          v45 = 40;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_109;
        v55 = 4 * *(_BYTE *)(a1 + 76);
        goto LABEL_95;
      case 6:
        if (!v31)
          goto LABEL_74;
        if ((*(_BYTE *)(a1 + 76) & 8) == 0)
        {
          PBReaderReadString();
          v44 = objc_claimAutoreleasedReturnValue();
          v45 = 24;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_109;
        v55 = 16 * *(_BYTE *)(a1 + 76);
        goto LABEL_95;
      case 7:
        if (!v31)
        {
LABEL_74:
          v53 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v62;
          if ((v53 & 1) == 0)
          {
LABEL_107:
            v56 = 0;
            goto LABEL_110;
          }
          goto LABEL_97;
        }
        if ((*(_BYTE *)(a1 + 76) & 0x40) == 0)
        {
          PBReaderReadString();
          v44 = objc_claimAutoreleasedReturnValue();
          v45 = 48;
LABEL_72:
          v46 = *(void **)(a1 + v45);
          *(_QWORD *)(a1 + v45) = v44;
          goto LABEL_73;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_109;
        v55 = 2 * *(_BYTE *)(a1 + 76);
        goto LABEL_95;
      default:
        v43 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v62;
        if (!v43)
          goto LABEL_107;
        goto LABEL_97;
    }
  }
}

void sub_1893C1174(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C132C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C146C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C15A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C1D04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPInstructionCorrectionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPInstructionCorrectionReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPInstructionCorrectionReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPInstructionCorrectionReadAllFrom_initialTag;
  Specified = GEORPInstructionCorrectionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1893C1EA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPInstructionCorrectionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPInstructionCorrectionReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893C1F04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPhotoWithMetadataIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 != 2)
            goto LABEL_34;
          goto LABEL_24;
        case 2u:
        case 4u:
        case 5u:
          if (v16 != 1)
            goto LABEL_34;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && (v20 = v19 + 8, v20 <= *(_QWORD *)&a1[*v3]))
            *(_QWORD *)&a1[v18] = v20;
          else
            a1[v14] = 1;
          goto LABEL_31;
        case 3u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_34;
          PBReaderRecallMark();
          goto LABEL_31;
        default:
LABEL_24:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_34:
            PBReaderRecallMark();
            return 0;
          }
LABEL_31:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_32;
          break;
      }
    }
  }
LABEL_32:
  v21 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v21;
}

void sub_1893C2344(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPInstructionCorrectionIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = *(unsigned __int8 *)(a1 + 76);
  if ((v2 & 0x84) != 0)
    return 1;
  if ((v2 & 0x10) != 0)
  {
    if (GEORPPhotoWithMetadataIsDirty(*(_QWORD *)(a1 + 32)))
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 76);
  }
  if ((v2 & 0x28) != 0)
    return 1;
  return (v2 >> 6) & 1;
}

os_unfair_lock_s *GEORPInstructionCorrectionIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPInstructionCorrectionIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 16);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1893C27D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C2D64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPManifestURLReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  int *v15;
  int *v16;
  BOOL v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  int v38;
  char v39;
  char v40;
  char v41;
  int v42;
  int v43;
  void *v44;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v7 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1)
    v14 = 0;
  else
    v14 = a3;
  v15 = (int *)MEMORY[0x1E0D82BF0];
  v16 = (int *)MEMORY[0x1E0D82BC8];
  if (v12)
    v17 = 1;
  else
    v17 = v14 == 0;
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v16))
      goto LABEL_62;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v15;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      if (v20++ >= 9)
      {
        v21 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v16);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v16) = 1;
LABEL_27:
    v27 = *(unsigned __int8 *)(v3 + *v16);
    if (*(_BYTE *)(v3 + *v16))
      v21 = 0;
LABEL_29:
    if (v27 || (v21 & 7) == 4)
    {
LABEL_62:
      if (v13)
      {
        v41 = 1;
        goto LABEL_72;
      }
      if (v14)
      {
        do
        {
          while (1)
          {
            v43 = *v14++;
            v42 = v43;
            if (v43 != 1 && v42 != 2)
              break;
            *(_BYTE *)(a1 + 44) |= v42;
          }
        }
        while (v42);
      }
      goto LABEL_73;
    }
    v29 = v21 >> 3;
    v30 = v13;
    if (!v17)
    {
      v31 = v14;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 != 2)
    {
      if ((_DWORD)v29 != 1)
      {
        v38 = PBReaderSkipValueWithTag();
        v16 = (int *)MEMORY[0x1E0D82BC8];
        if (!v38)
          goto LABEL_70;
        goto LABEL_58;
      }
      if (v30)
      {
        if ((*(_BYTE *)(a1 + 44) & 1) == 0)
        {
          PBReaderReadString();
          v35 = objc_claimAutoreleasedReturnValue();
          v36 = 16;
          goto LABEL_48;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_71;
        v9 -= *(_BYTE *)(a1 + 44) & 1;
LABEL_57:
        v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_58:
        if (v9)
          v40 = 1;
        else
          v40 = v13;
        if ((v40 & 1) == 0)
          goto LABEL_62;
        continue;
      }
LABEL_51:
      v39 = PBReaderSkipValueWithTag();
      v16 = (int *)MEMORY[0x1E0D82BC8];
      if ((v39 & 1) == 0)
      {
LABEL_70:
        v41 = 0;
        goto LABEL_72;
      }
      goto LABEL_58;
    }
    break;
  }
  if (!v30)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    PBReaderReadString();
    v35 = objc_claimAutoreleasedReturnValue();
    v36 = 24;
LABEL_48:
    v37 = *(void **)(a1 + v36);
    *(_QWORD *)(a1 + v36) = v35;

    v16 = (int *)MEMORY[0x1E0D82BC8];
    --v9;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
    goto LABEL_57;
  }
LABEL_71:
  v41 = 0;
  v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_72:
  *(_BYTE *)(a1 + 44) |= 1u;
  *(_BYTE *)(a1 + 44) |= 2u;
  if ((v41 & 1) != 0)
  {
LABEL_73:
    v3 = *(_BYTE *)(v3 + *v16) == 0;
    if (!v13)
      return v3;
    goto LABEL_74;
  }
  v3 = 0;
  if (v13)
  {
LABEL_74:
    v44 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1893C3274(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C3640(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPManifestURLReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t v6;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPManifestURLReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPManifestURLReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPManifestURLReadAllFrom_initialTag;
  v6 = GEORPManifestURLReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v6;
}

void sub_1893C37C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPManifestURLReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t v4;

  v3 = a2;
  objc_sync_enter(v3);
  v4 = GEORPManifestURLReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return v4;
}

void sub_1893C3828(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C39A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPManifestURLIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 44) & 7) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_1893C3C38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C3F6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPMapLocationReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  GEOLatLng *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  void *v45;
  void *v46;
  char v47;
  char v48;
  char v49;
  int v50;
  char v51;
  void *v52;
  char v54;
  char v55;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 64)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFDFFFCFFFEFFFFLL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 2;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v55 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v20 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        v54 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_76;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v17;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v23 = 0;
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_76:
      if ((v15 & 1) != 0)
      {
        v49 = 1;
        goto LABEL_88;
      }
      if (v16)
      {
        while (1)
        {
          v50 = *v16++;
          v51 = 4;
          switch(v50)
          {
            case 0:
              goto LABEL_89;
            case 1:
              goto LABEL_83;
            case 2:
              v51 = 2;
              goto LABEL_83;
            case 5:
              v51 = 16;
              goto LABEL_83;
            case 6:
              v51 = 8;
LABEL_83:
              *(_BYTE *)(a1 + v20[363]) |= v51;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_89;
    }
    v31 = v23 >> 3;
    v32 = v15;
    if ((v55 & 1) == 0)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_61;
        if ((*(_BYTE *)(a1 + v20[363]) & 4) == 0)
        {
          PBReaderReadData();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 24;
          goto LABEL_60;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_85;
        v48 = 32 * *(_BYTE *)(a1 + v20[363]);
        goto LABEL_71;
      case 2:
        if (!v32)
          goto LABEL_61;
        if ((*(_BYTE *)(a1 + v20[363]) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_85;
          v48 = *(_BYTE *)(a1 + v20[363]) << 6;
          goto LABEL_71;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_85;
        v39 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v39, (void *)v3))
          goto LABEL_86;
        PBReaderRecallMark();
        v40 = 16;
        goto LABEL_56;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_61;
        *(_BYTE *)(a1 + v20[363]) |= 1u;
        v41 = *v17;
        v42 = *(_QWORD *)(v3 + v41);
        if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v43 = *(_DWORD *)(*(_QWORD *)(v3 + *v19) + v42);
          *(_QWORD *)(v3 + v41) = v42 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v43 = 0;
        }
        *(_DWORD *)(a1 + 60) = v43;
        goto LABEL_75;
      case 5:
        if (!v32)
          goto LABEL_61;
        if ((*(_BYTE *)(a1 + v20[363]) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_85;
          v48 = 8 * *(_BYTE *)(a1 + v20[363]);
LABEL_71:
          v7 += v48 >> 7;
LABEL_72:
          v15 = v54;
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_75:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_76;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_85;
        v39 = objc_alloc_init(GEOPDViewportInfo);
        if (GEOPDViewportInfoReadAllFrom((uint64_t)v39, (void *)v3))
        {
          PBReaderRecallMark();
          v40 = 40;
LABEL_56:
          v45 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v39;

          --v7;
          v20 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
          goto LABEL_72;
        }
LABEL_86:

        v49 = 0;
        v20 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
LABEL_87:
        v15 = v54;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_88:
        *(_BYTE *)(a1 + v20[363]) |= 4u;
        *(_BYTE *)(a1 + v20[363]) |= 2u;
        *(_BYTE *)(a1 + v20[363]) |= 0x10u;
        *(_BYTE *)(a1 + v20[363]) |= 8u;
        if ((v49 & 1) != 0)
        {
LABEL_89:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_90;
        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
          {
LABEL_90:
            v52 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 6:
        if (!v32)
        {
LABEL_61:
          v47 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v54;
          if ((v47 & 1) == 0)
          {
LABEL_84:
            v49 = 0;
            goto LABEL_88;
          }
          goto LABEL_75;
        }
        if ((*(_BYTE *)(a1 + v20[363]) & 8) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 32;
LABEL_60:
          v46 = *(void **)(a1 + v38);
          *(_QWORD *)(a1 + v38) = v37;

          --v7;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_85:
          v49 = 0;
          goto LABEL_87;
        }
        v48 = 16 * *(_BYTE *)(a1 + v20[363]);
        goto LABEL_71;
      default:
        v44 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v54;
        if (!v44)
          goto LABEL_84;
        goto LABEL_75;
    }
  }
}

void sub_1893C46D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C487C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C49B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C5028(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPMapLocationReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPMapLocationReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPMapLocationReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPMapLocationReadAllFrom_initialTag;
  Specified = GEORPMapLocationReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 16), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_1893C51DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPMapLocationReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPMapLocationReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893C523C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPMapLocationIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 != 2)
            goto LABEL_39;
          goto LABEL_34;
        case 2u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_39;
          goto LABEL_32;
        case 3u:
          if (v16 != 5)
            goto LABEL_39;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFFBLL && (v20 = v19 + 4, v20 <= *(_QWORD *)&a1[*v3]))
            *(_QWORD *)&a1[v18] = v20;
          else
            a1[v14] = 1;
          goto LABEL_35;
        case 5u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDViewportInfoIsValid(a1))
            goto LABEL_39;
LABEL_32:
          PBReaderRecallMark();
          goto LABEL_35;
        case 6u:
          if (v16 == 2)
            goto LABEL_34;
          goto LABEL_39;
        default:
LABEL_34:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_39:
            PBReaderRecallMark();
            return 0;
          }
LABEL_35:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_38;
          break;
      }
    }
  }
LABEL_38:
  v21 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v21;
}

void sub_1893C5690(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPMapLocationIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = (*(_BYTE *)(a1 + 64) & 0x3E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_1893C5A68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C5FE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPMerchantLookupContextReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint16x4_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  int v65;
  char v66;
  __int16 v67;
  char v68;
  int v69;
  __int16 v70;
  void *v71;
  GEOPDMapsIdentifier *v73;
  char v74;
  char v75;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 124);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 120));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 140));
  v12 = (unsigned __int16)(vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16(v11, (uint16x4_t)0xFFF7FFF5FFF8FFF6) & 0xFF01FF01FF01FF01))
                         + ((*(_WORD *)(a1 + 140) >> 12) & 1)
                         + ((*(_WORD *)(a1 + 140) >> 7) & 1)
                         + ((*(_WORD *)(a1 + 140) >> 5) & 1))
      + (unsigned __int16)vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16(v11, (uint16x4_t)0xFFFAFFFCFFF3FFF2), (int8x8_t)0x1000100010001));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v13 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v15 = v12 > 7;
        v16 = v10 | v15;
        if ((((v10 | v15) | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v75 = (v17 == 0) | v16;
        v20 = (int *)MEMORY[0x1E0D82BB8];
        v74 = v10 | v15;
        break;
      default:
        ++v12;
LABEL_6:
        v13 = v9;
        v14 = v10;
LABEL_8:
        ++v7;
        v9 = v13;
        v10 = v14;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_151;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_151:
      if ((v16 & 1) != 0)
      {
        v68 = 1;
        goto LABEL_153;
      }
      if (v17)
      {
        while (1)
        {
          v69 = *v17++;
          v70 = 256;
          switch(v69)
          {
            case 0:
              goto LABEL_169;
            case 2:
              goto LABEL_168;
            case 3:
              v70 = 1024;
              goto LABEL_168;
            case 4:
              v70 = 2048;
              goto LABEL_168;
            case 5:
              v70 = 512;
              goto LABEL_168;
            case 6:
              v70 = 4096;
              goto LABEL_168;
            case 7:
              v70 = 128;
              goto LABEL_168;
            case 8:
              v70 = 32;
              goto LABEL_168;
            case 10:
              v70 = 0x4000;
              goto LABEL_168;
            case 11:
              v70 = 0x2000;
              goto LABEL_168;
            case 12:
              v70 = 16;
              goto LABEL_168;
            case 16:
              v70 = 64;
LABEL_168:
              *(_WORD *)(a1 + 140) |= v70;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_169;
    }
    v31 = v23 >> 3;
    v32 = v16;
    if ((v75 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_109;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 140) |= 1u;
        while (1)
        {
          v40 = *v18;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v41);
          *(_QWORD *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0)
            goto LABEL_112;
          v37 += 7;
          v28 = v38++ >= 9;
          if (v28)
          {
            v39 = 0;
            goto LABEL_114;
          }
        }
        *(_BYTE *)(v3 + *v19) = 1;
LABEL_112:
        if (*(_BYTE *)(v3 + *v19))
          v39 = 0;
LABEL_114:
        *(_QWORD *)(a1 + 64) = v39;
        goto LABEL_147;
      case 2:
        if (!v32)
          goto LABEL_109;
        if ((*(_WORD *)(a1 + 140) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_174;
          v67 = *(_WORD *)(a1 + 140) << 7;
          goto LABEL_145;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_174;
        v73 = objc_alloc_init(GEOPDMapsIdentifier);
        if (!GEOPDMapsIdentifierReadAllFrom((uint64_t)v73, (void *)v3))
          goto LABEL_173;
        PBReaderRecallMark();
        v44 = 48;
        goto LABEL_107;
      case 3:
        if (!v32)
          goto LABEL_109;
        if ((*(_WORD *)(a1 + 140) & 0x400) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 72;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_174;
        v67 = 32 * *(_WORD *)(a1 + 140);
        goto LABEL_145;
      case 4:
        if (!v32)
          goto LABEL_109;
        if ((*(_WORD *)(a1 + 140) & 0x800) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 80;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_174;
        v67 = 16 * *(_WORD *)(a1 + 140);
        goto LABEL_145;
      case 5:
        if (!v32)
          goto LABEL_109;
        if ((*(_WORD *)(a1 + 140) & 0x200) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 56;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_174;
        v67 = *(_WORD *)(a1 + 140) << 6;
        goto LABEL_145;
      case 6:
        if (!v32)
          goto LABEL_109;
        if ((*(_WORD *)(a1 + 140) & 0x1000) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 88;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_174;
        v67 = 8 * *(_WORD *)(a1 + 140);
        goto LABEL_145;
      case 7:
        if (!v32)
          goto LABEL_109;
        if ((*(_WORD *)(a1 + 140) & 0x80) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 40;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_174;
        v67 = *(_WORD *)(a1 + 140) << 8;
        goto LABEL_145;
      case 8:
        if (!v32)
          goto LABEL_109;
        if ((*(_WORD *)(a1 + 140) & 0x20) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 24;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_174;
        v67 = *(_WORD *)(a1 + 140) << 10;
        goto LABEL_145;
      case 9:
        if ((v8 & 1) == 0)
          goto LABEL_109;
        *(_WORD *)(a1 + 140) |= 2u;
        v47 = *v18;
        v48 = *(_QWORD *)(v3 + v47);
        if (v48 <= 0xFFFFFFFFFFFFFFF7 && v48 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v49 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v48);
          *(_QWORD *)(v3 + v47) = v48 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v19) = 1;
          v49 = 0;
        }
        *(_QWORD *)(a1 + 104) = v49;
        goto LABEL_147;
      case 10:
        if (!v32)
          goto LABEL_109;
        if ((*(_WORD *)(a1 + 140) & 0x4000) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 112;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_174;
        v67 = 2 * *(_WORD *)(a1 + 140);
        goto LABEL_145;
      case 11:
        if (!v32)
          goto LABEL_109;
        if ((*(_WORD *)(a1 + 140) & 0x2000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_174;
          v67 = 4 * *(_WORD *)(a1 + 140);
          goto LABEL_145;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_174;
        v73 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v73, (void *)v3, v9 & 1))
          goto LABEL_173;
        PBReaderRecallMark();
        v44 = 96;
        goto LABEL_107;
      case 12:
        if (!v32)
          goto LABEL_109;
        if ((*(_WORD *)(a1 + 140) & 0x10) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 16;
LABEL_83:
          v50 = *(void **)(a1 + v46);
          *(_QWORD *)(a1 + v46) = v45;
          goto LABEL_108;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_174;
        v67 = *(_WORD *)(a1 + 140) << 11;
        goto LABEL_145;
      case 13:
        if ((v8 & 1) == 0)
          goto LABEL_109;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        *(_WORD *)(a1 + 140) |= 8u;
        while (2)
        {
          v54 = *v18;
          v55 = *(_QWORD *)(v3 + v54);
          v56 = v55 + 1;
          if (v55 == -1 || v56 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v55);
            *(_QWORD *)(v3 + v54) = v56;
            v53 |= (unint64_t)(v57 & 0x7F) << v51;
            if (v57 < 0)
            {
              v51 += 7;
              v28 = v52++ >= 9;
              if (v28)
              {
                v53 = 0;
                goto LABEL_118;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v53 = 0;
LABEL_118:
        *(_BYTE *)(a1 + 136) = v53 != 0;
        goto LABEL_147;
      case 14:
        if ((v8 & 1) == 0)
          goto LABEL_109;
        v58 = 0;
        v59 = 0;
        v60 = 0;
        *(_WORD *)(a1 + 140) |= 4u;
        while (2)
        {
          v61 = *v18;
          v62 = *(_QWORD *)(v3 + v61);
          v63 = v62 + 1;
          if (v62 == -1 || v63 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v62);
            *(_QWORD *)(v3 + v61) = v63;
            v60 |= (unint64_t)(v64 & 0x7F) << v58;
            if (v64 < 0)
            {
              v58 += 7;
              v28 = v59++ >= 9;
              if (v28)
              {
                LODWORD(v60) = 0;
                goto LABEL_122;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v60) = 0;
LABEL_122:
        *(_DWORD *)(a1 + 132) = v60;
        goto LABEL_147;
      case 16:
        if (!v32)
        {
LABEL_109:
          v66 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          v16 = v74;
          if ((v66 & 1) == 0)
          {
LABEL_172:
            v68 = 0;
            goto LABEL_153;
          }
LABEL_147:
          if (!(v16 & 1 | (v7 != 0)))
            goto LABEL_151;
          continue;
        }
        if ((*(_WORD *)(a1 + 140) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_174;
          v67 = *(_WORD *)(a1 + 140) << 9;
LABEL_145:
          v7 += v67 >> 15;
LABEL_146:
          v16 = v74;
          v19 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_147;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_174;
        v73 = objc_alloc_init(GEOPDBankTransactionInformation);
        if (GEOPDBankTransactionInformationReadAllFrom((uint64_t)v73, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v44 = 32;
LABEL_107:
          v50 = *(void **)(a1 + v44);
          *(_QWORD *)(a1 + v44) = v73;
LABEL_108:

          --v7;
          goto LABEL_146;
        }
LABEL_173:

LABEL_174:
        v68 = 0;
        v16 = v74;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_153:
        *(_WORD *)(a1 + 140) |= 0x100u;
        *(_WORD *)(a1 + 140) |= 0x400u;
        *(_WORD *)(a1 + 140) |= 0x800u;
        *(_WORD *)(a1 + 140) |= 0x200u;
        *(_WORD *)(a1 + 140) |= 0x1000u;
        *(_WORD *)(a1 + 140) |= 0x80u;
        *(_WORD *)(a1 + 140) |= 0x20u;
        *(_WORD *)(a1 + 140) |= 0x4000u;
        *(_WORD *)(a1 + 140) |= 0x2000u;
        *(_WORD *)(a1 + 140) |= 0x10u;
        *(_WORD *)(a1 + 140) |= 0x40u;
        if ((v68 & 1) != 0)
        {
LABEL_169:
          v3 = *(_BYTE *)(v3 + *v19) == 0;
          if ((v16 & 1) != 0)
            goto LABEL_170;
          return v3;
        }
        v3 = 0;
        if ((v16 & 1) == 0)
          return v3;
LABEL_170:
        v71 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      default:
        v65 = PBReaderSkipValueWithTag();
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v16 = v74;
        if (!v65)
          goto LABEL_172;
        goto LABEL_147;
    }
  }
}

void sub_1893C6CC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C6E00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C6F40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C7080(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C71C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C72FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C74B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C75F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C7730(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C7AD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893C88D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPMerchantLookupContextReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 124))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPMerchantLookupContextReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 120) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 124) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPMerchantLookupContextReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPMerchantLookupContextReadAllFrom_initialTag;
  Specified = GEORPMerchantLookupContextReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 48), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 96), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  return Specified;
}

void sub_1893C8A98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPMerchantLookupContextReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPMerchantLookupContextReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893C8AF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPMerchantLookupContextIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  _BOOL8 v37;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_82;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              goto LABEL_71;
            v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0)
            {
              v23 = v18++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_79;
          }
        case 2u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1))
            goto LABEL_82;
          goto LABEL_78;
        case 3u:
          if (v16 == 2)
            goto LABEL_73;
          goto LABEL_82;
        case 4u:
          if (v16 == 2)
            goto LABEL_73;
          goto LABEL_82;
        case 5u:
          if (v16 == 2)
            goto LABEL_73;
          goto LABEL_82;
        case 6u:
          if (v16 == 2)
            goto LABEL_73;
          goto LABEL_82;
        case 7u:
          if (v16 == 2)
            goto LABEL_73;
          goto LABEL_82;
        case 8u:
          if (v16 == 2)
            goto LABEL_73;
          goto LABEL_82;
        case 9u:
          if (v16 != 1)
            goto LABEL_82;
          v24 = *v2;
          v25 = *(_QWORD *)&a1[v24];
          if (v25 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_72;
          v26 = v25 + 8;
          if (v26 > *(_QWORD *)&a1[*v3])
            goto LABEL_72;
          *(_QWORD *)&a1[v24] = v26;
          continue;
        case 0xAu:
          if (v16 == 2)
            goto LABEL_73;
          goto LABEL_82;
        case 0xBu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLocationIsValid(a1))
            goto LABEL_82;
          goto LABEL_78;
        case 0xCu:
          if (v16 == 2)
            goto LABEL_73;
          goto LABEL_82;
        case 0xDu:
          if ((v8 & 7) != 0)
            goto LABEL_82;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_71;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v23 = v27++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_79;
          }
        case 0xEu:
          if ((v8 & 7) != 0)
            goto LABEL_82;
          v32 = 0;
          break;
        case 0x10u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDBankTransactionInformationIsValid(a1))
            goto LABEL_82;
LABEL_78:
          PBReaderRecallMark();
          continue;
        default:
LABEL_73:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_82:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v33 = *v2;
        v34 = *(_QWORD *)&a1[v33];
        v35 = v34 + 1;
        if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
          break;
        v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
        *(_QWORD *)&a1[v33] = v35;
        if (v36 < 0)
        {
          v23 = v32++ > 8;
          if (!v23)
            continue;
        }
        goto LABEL_79;
      }
LABEL_71:
      v14 = *v4;
LABEL_72:
      a1[v14] = 1;
LABEL_79:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v37 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v37;
}

void sub_1893C91F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPMerchantLookupContextIsDirty(uint64_t a1)
{
  __int16 v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  v2 = *(_WORD *)(a1 + 140);
  if ((v2 & 0xDFA0) != 0)
    return 1;
  if ((*(_WORD *)(a1 + 140) & 0x2000) != 0)
  {
    if (GEOLocationIsDirty(*(os_unfair_lock_s **)(a1 + 96)))
      return 1;
    v2 = *(_WORD *)(a1 + 140);
  }
  if ((v2 & 0x10) != 0)
    return 1;
  if ((v2 & 0x40) != 0)
    return (uint64_t)GEOPDBankTransactionInformationIsDirty(*(os_unfair_lock_s **)(a1 + 32));
  else
    return 0;
}

os_unfair_lock_s *GEORPMerchantLookupContextIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPMerchantLookupContextIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 32);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEORPMerchantLookupContextClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  int HasSensitiveFields;
  void *v7;
  _DWORD *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  id v13;

  if (!a3)
  {
    objc_msgSend(a1, "transactionLocation");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "clearSensitiveFields:", a2);

LABEL_10:
    objc_msgSend(a1, "merchantBankTransactionInfo");
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "clearSensitiveFields:", a2);
    goto LABEL_11;
  }
  if (objc_msgSend(a1, "hasTransactionLocation")
    && (objc_msgSend(a1, "transactionLocation"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v5),
        v5,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "transactionLocation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (_DWORD *)objc_msgSend(v7, "copy");

    GEOLocationClearSensitiveFields(v8);
    objc_msgSend(a1, "setTransactionLocation:", v8);
  }
  else
  {
    objc_msgSend(a1, "transactionLocation");
    v8 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

  if (!objc_msgSend(a1, "hasMerchantBankTransactionInfo"))
    goto LABEL_10;
  objc_msgSend(a1, "merchantBankTransactionInfo");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = GEOPDBankTransactionInformationHasSensitiveFields(v10);

  if (!v11)
    goto LABEL_10;
  objc_msgSend(a1, "merchantBankTransactionInfo");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (id)objc_msgSend(v12, "copy");

  GEOPDBankTransactionInformationClearSensitiveFields((uint64_t)v13, a2, 0);
  objc_msgSend(a1, "setMerchantBankTransactionInfo:", v13);
LABEL_11:

}

uint64_t GEORPMerchantLookupContextHasSensitiveFields(void *a1)
{
  void *v2;
  uint64_t HasSensitiveFields;
  void *v4;

  if (!a1)
    return 0;
  objc_msgSend(a1, "transactionLocation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((GEOLocationHasSensitiveFields((uint64_t)v2) & 1) != 0)
  {
    HasSensitiveFields = 1;
  }
  else
  {
    objc_msgSend(a1, "merchantBankTransactionInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOPDBankTransactionInformationHasSensitiveFields(v4);

  }
  return HasSensitiveFields;
}

void sub_1893C9ABC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPMerchantLookupCorrectionsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  _BOOL8 v40;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          v28 = 0;
          v29 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 12) |= 4u;
          while (1)
          {
            v30 = *v4;
            v31 = *(_QWORD *)&v3[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              break;
            v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
            *(_QWORD *)&v3[v30] = v32;
            v21 |= (unint64_t)(v33 & 0x7F) << v28;
            if ((v33 & 0x80) == 0)
            {
              v27 = &OBJC_IVAR___GEORPMerchantLookupCorrections__isOtherIssue;
              goto LABEL_49;
            }
            v28 += 7;
            v26 = v29++ > 8;
            if (v26)
            {
              v21 = 0;
              v27 = &OBJC_IVAR___GEORPMerchantLookupCorrections__isOtherIssue;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEORPMerchantLookupCorrections__isOtherIssue;
LABEL_48:
          v3[*v6] = 1;
        }
        else if ((_DWORD)v18 == 2)
        {
          v34 = 0;
          v35 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 12) |= 2u;
          while (1)
          {
            v36 = *v4;
            v37 = *(_QWORD *)&v3[v36];
            v38 = v37 + 1;
            if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEORPMerchantLookupCorrections__isMerchantIncorrect;
              goto LABEL_48;
            }
            v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
            *(_QWORD *)&v3[v36] = v38;
            v21 |= (unint64_t)(v39 & 0x7F) << v34;
            if ((v39 & 0x80) == 0)
              break;
            v34 += 7;
            v26 = v35++ > 8;
            if (v26)
            {
              v21 = 0;
              v27 = &OBJC_IVAR___GEORPMerchantLookupCorrections__isMerchantIncorrect;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEORPMerchantLookupCorrections__isMerchantIncorrect;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_58;
            continue;
          }
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 12) |= 1u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEORPMerchantLookupCorrections__isCategoryIncorrect;
              goto LABEL_48;
            }
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              break;
            v19 += 7;
            v26 = v20++ > 8;
            if (v26)
            {
              v21 = 0;
              v27 = &OBJC_IVAR___GEORPMerchantLookupCorrections__isCategoryIncorrect;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEORPMerchantLookupCorrections__isCategoryIncorrect;
        }
LABEL_49:
        if (v3[*v6])
          v21 = 0;
LABEL_51:
        *(_BYTE *)(a1 + *v27) = v21 != 0;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v40 = v3[*v6] == 0;
  }
  else
  {
LABEL_58:
    v40 = 0;
  }
  objc_sync_exit(v3);

  return v40;
}

void sub_1893CAB30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPMerchantLookupCorrectionsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPMerchantLookupCorrectionsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893CAB90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPMerchantLookupCorrectionsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_48;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_48;
      v16 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v16 == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_50;
        v28 = 0;
        while (1)
        {
          v29 = *v2;
          v30 = *(_QWORD *)&a1[v29];
          v31 = v30 + 1;
          if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
            goto LABEL_45;
          v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
          *(_QWORD *)&a1[v29] = v31;
          if (v32 < 0)
          {
            v22 = v28++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_47;
        }
      }
      if ((_DWORD)v16 == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_50;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0)
          {
            v22 = v17++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_47;
        }
LABEL_45:
        a1[*v4] = 1;
        goto LABEL_47;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_50:
        v33 = 0;
        goto LABEL_49;
      }
LABEL_47:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_48;
    }
    if ((v8 & 7) != 0)
      goto LABEL_50;
    v23 = 0;
    while (1)
    {
      v24 = *v2;
      v25 = *(_QWORD *)&a1[v24];
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
        goto LABEL_45;
      v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
      *(_QWORD *)&a1[v24] = v26;
      if (v27 < 0)
      {
        v22 = v23++ > 8;
        if (!v22)
          continue;
      }
      goto LABEL_47;
    }
  }
LABEL_48:
  v33 = a1[*v4] == 0;
LABEL_49:
  PBReaderRecallMark();
  return v33;
}

BOOL GEORPNavigationSettingsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  void *v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  _BOOL8 v84;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_WORD *)(a1 + 52) |= 4u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                goto LABEL_87;
              v18 += 7;
              v15 = v19++ >= 9;
              if (v15)
              {
                v20 = 0;
                goto LABEL_89;
              }
            }
            v3[*v6] = 1;
LABEL_87:
            if (v3[*v6])
              v20 = 0;
LABEL_89:
            v81 = 32;
            goto LABEL_110;
          case 2u:
            v25 = 0;
            v26 = 0;
            v20 = 0;
            *(_WORD *)(a1 + 52) |= 1u;
            while (2)
            {
              v27 = *v4;
              v28 = *(_QWORD *)&v3[v27];
              v29 = v28 + 1;
              if (v28 == -1 || v29 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v30 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v28);
                *(_QWORD *)&v3[v27] = v29;
                v20 |= (unint64_t)(v30 & 0x7F) << v25;
                if (v30 < 0)
                {
                  v25 += 7;
                  v15 = v26++ >= 9;
                  if (v15)
                  {
                    v20 = 0;
                    goto LABEL_93;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v20 = 0;
LABEL_93:
            v81 = 8;
            goto LABEL_110;
          case 3u:
            v31 = 0;
            v32 = 0;
            v33 = 0;
            *(_WORD *)(a1 + 52) |= 0x40u;
            while (2)
            {
              v34 = *v4;
              v35 = *(_QWORD *)&v3[v34];
              v36 = v35 + 1;
              if (v35 == -1 || v36 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v37 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v35);
                *(_QWORD *)&v3[v34] = v36;
                v33 |= (unint64_t)(v37 & 0x7F) << v31;
                if (v37 < 0)
                {
                  v31 += 7;
                  v15 = v32++ >= 9;
                  if (v15)
                  {
                    v33 = 0;
                    goto LABEL_97;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v33 = 0;
LABEL_97:
            v82 = v33 != 0;
            v83 = 46;
            goto LABEL_119;
          case 4u:
            v38 = 0;
            v39 = 0;
            v40 = 0;
            *(_WORD *)(a1 + 52) |= 0x20u;
            while (2)
            {
              v41 = *v4;
              v42 = *(_QWORD *)&v3[v41];
              v43 = v42 + 1;
              if (v42 == -1 || v43 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v44 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v42);
                *(_QWORD *)&v3[v41] = v43;
                v40 |= (unint64_t)(v44 & 0x7F) << v38;
                if (v44 < 0)
                {
                  v38 += 7;
                  v15 = v39++ >= 9;
                  if (v15)
                  {
                    v40 = 0;
                    goto LABEL_101;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v40 = 0;
LABEL_101:
            v82 = v40 != 0;
            v83 = 45;
            goto LABEL_119;
          case 5u:
            v45 = 0;
            v46 = 0;
            v47 = 0;
            *(_WORD *)(a1 + 52) |= 0x100u;
            while (2)
            {
              v48 = *v4;
              v49 = *(_QWORD *)&v3[v48];
              v50 = v49 + 1;
              if (v49 == -1 || v50 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v51 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v49);
                *(_QWORD *)&v3[v48] = v50;
                v47 |= (unint64_t)(v51 & 0x7F) << v45;
                if (v51 < 0)
                {
                  v45 += 7;
                  v15 = v46++ >= 9;
                  if (v15)
                  {
                    v47 = 0;
                    goto LABEL_105;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v47 = 0;
LABEL_105:
            v82 = v47 != 0;
            v83 = 48;
            goto LABEL_119;
          case 6u:
            v52 = 0;
            v53 = 0;
            v20 = 0;
            *(_WORD *)(a1 + 52) |= 2u;
            while (2)
            {
              v54 = *v4;
              v55 = *(_QWORD *)&v3[v54];
              v56 = v55 + 1;
              if (v55 == -1 || v56 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v57 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v55);
                *(_QWORD *)&v3[v54] = v56;
                v20 |= (unint64_t)(v57 & 0x7F) << v52;
                if (v57 < 0)
                {
                  v52 += 7;
                  v15 = v53++ >= 9;
                  if (v15)
                  {
                    v20 = 0;
                    goto LABEL_109;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v20 = 0;
LABEL_109:
            v81 = 16;
LABEL_110:
            *(_QWORD *)(a1 + v81) = v20;
            continue;
          case 7u:
            v58 = 0;
            v59 = 0;
            v60 = 0;
            *(_WORD *)(a1 + 52) |= 0x10u;
            while (2)
            {
              v61 = *v4;
              v62 = *(_QWORD *)&v3[v61];
              v63 = v62 + 1;
              if (v62 == -1 || v63 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v64 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v62);
                *(_QWORD *)&v3[v61] = v63;
                v60 |= (unint64_t)(v64 & 0x7F) << v58;
                if (v64 < 0)
                {
                  v58 += 7;
                  v15 = v59++ >= 9;
                  if (v15)
                  {
                    v60 = 0;
                    goto LABEL_114;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v60 = 0;
LABEL_114:
            v82 = v60 != 0;
            v83 = 44;
            goto LABEL_119;
          case 8u:
            PBReaderReadString();
            v65 = objc_claimAutoreleasedReturnValue();
            v66 = *(void **)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v65;

            continue;
          case 9u:
            v67 = 0;
            v68 = 0;
            v69 = 0;
            *(_WORD *)(a1 + 52) |= 0x80u;
            while (2)
            {
              v70 = *v4;
              v71 = *(_QWORD *)&v3[v70];
              v72 = v71 + 1;
              if (v71 == -1 || v72 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v73 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v71);
                *(_QWORD *)&v3[v70] = v72;
                v69 |= (unint64_t)(v73 & 0x7F) << v67;
                if (v73 < 0)
                {
                  v67 += 7;
                  v15 = v68++ >= 9;
                  if (v15)
                  {
                    v69 = 0;
                    goto LABEL_118;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v69 = 0;
LABEL_118:
            v82 = v69 != 0;
            v83 = 47;
LABEL_119:
            *(_BYTE *)(a1 + v83) = v82;
            continue;
          case 0xAu:
            v74 = 0;
            v75 = 0;
            v76 = 0;
            *(_WORD *)(a1 + 52) |= 8u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_127;
            continue;
        }
        while (1)
        {
          v77 = *v4;
          v78 = *(_QWORD *)&v3[v77];
          v79 = v78 + 1;
          if (v78 == -1 || v79 > *(_QWORD *)&v3[*v5])
            break;
          v80 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v78);
          *(_QWORD *)&v3[v77] = v79;
          v76 |= (unint64_t)(v80 & 0x7F) << v74;
          if ((v80 & 0x80) == 0)
            goto LABEL_123;
          v74 += 7;
          v15 = v75++ >= 9;
          if (v15)
          {
            LODWORD(v76) = 0;
            goto LABEL_125;
          }
        }
        v3[*v6] = 1;
LABEL_123:
        if (v3[*v6])
          LODWORD(v76) = 0;
LABEL_125:
        *(_DWORD *)(a1 + 40) = v76;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v84 = v3[*v6] == 0;
  }
  else
  {
LABEL_127:
    v84 = 0;
  }
  objc_sync_exit(v3);

  return v84;
}

void sub_1893CC8B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPNavigationSettingsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPNavigationSettingsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893CC910(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPNavigationSettingsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  _BOOL8 v63;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_98;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_94;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_95;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_98;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_94;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_95;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_98;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_94;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_95;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_98;
          v33 = 0;
          while (1)
          {
            v34 = *v2;
            v35 = *(_QWORD *)&a1[v34];
            v36 = v35 + 1;
            if (v35 == -1 || v36 > *(_QWORD *)&a1[*v3])
              goto LABEL_94;
            v37 = *(char *)(*(_QWORD *)&a1[*v5] + v35);
            *(_QWORD *)&a1[v34] = v36;
            if (v37 < 0)
            {
              v22 = v33++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_95;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_98;
          v38 = 0;
          while (1)
          {
            v39 = *v2;
            v40 = *(_QWORD *)&a1[v39];
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)&a1[*v3])
              goto LABEL_94;
            v42 = *(char *)(*(_QWORD *)&a1[*v5] + v40);
            *(_QWORD *)&a1[v39] = v41;
            if (v42 < 0)
            {
              v22 = v38++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_95;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_98;
          v43 = 0;
          while (1)
          {
            v44 = *v2;
            v45 = *(_QWORD *)&a1[v44];
            v46 = v45 + 1;
            if (v45 == -1 || v46 > *(_QWORD *)&a1[*v3])
              goto LABEL_94;
            v47 = *(char *)(*(_QWORD *)&a1[*v5] + v45);
            *(_QWORD *)&a1[v44] = v46;
            if (v47 < 0)
            {
              v22 = v43++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_95;
          }
        case 7u:
          if ((v8 & 7) != 0)
            goto LABEL_98;
          v48 = 0;
          while (1)
          {
            v49 = *v2;
            v50 = *(_QWORD *)&a1[v49];
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)&a1[*v3])
              goto LABEL_94;
            v52 = *(char *)(*(_QWORD *)&a1[*v5] + v50);
            *(_QWORD *)&a1[v49] = v51;
            if (v52 < 0)
            {
              v22 = v48++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_95;
          }
        case 8u:
          if (v15 == 2)
            goto LABEL_76;
          goto LABEL_98;
        case 9u:
          if ((v8 & 7) != 0)
            goto LABEL_98;
          v53 = 0;
          while (1)
          {
            v54 = *v2;
            v55 = *(_QWORD *)&a1[v54];
            v56 = v55 + 1;
            if (v55 == -1 || v56 > *(_QWORD *)&a1[*v3])
              goto LABEL_94;
            v57 = *(char *)(*(_QWORD *)&a1[*v5] + v55);
            *(_QWORD *)&a1[v54] = v56;
            if (v57 < 0)
            {
              v22 = v53++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_95;
          }
        case 0xAu:
          if ((v8 & 7) != 0)
            goto LABEL_98;
          v58 = 0;
          break;
        default:
LABEL_76:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_98:
          v63 = 0;
          goto LABEL_97;
      }
      while (1)
      {
        v59 = *v2;
        v60 = *(_QWORD *)&a1[v59];
        v61 = v60 + 1;
        if (v60 == -1 || v61 > *(_QWORD *)&a1[*v3])
          break;
        v62 = *(char *)(*(_QWORD *)&a1[*v5] + v60);
        *(_QWORD *)&a1[v59] = v61;
        if (v62 < 0)
        {
          v22 = v58++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_95;
      }
LABEL_94:
      a1[*v4] = 1;
LABEL_95:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v63 = a1[*v4] == 0;
LABEL_97:
  PBReaderRecallMark();
  return v63;
}

void sub_1893CD9EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPNotificationReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  BOOL v15;
  int *v16;
  int *v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  int v38;
  char v39;
  char v40;
  char v41;
  int v42;
  int v43;
  char v44;
  void *v45;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v7 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1)
    v14 = 0;
  else
    v14 = a3;
  if (v12)
    v15 = 1;
  else
    v15 = v14 == 0;
  v16 = (int *)MEMORY[0x1E0D82BF0];
  v17 = (int *)MEMORY[0x1E0D82BC8];
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_62;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v16;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      if (v20++ >= 9)
      {
        v21 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_27:
    v27 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v21 = 0;
LABEL_29:
    if (v27 || (v21 & 7) == 4)
    {
LABEL_62:
      if (v13)
      {
        v41 = 1;
        goto LABEL_74;
      }
      if (!v14)
        goto LABEL_75;
      while (1)
      {
        v43 = *v14++;
        v42 = v43;
        if (v43 == 1)
          break;
        if (v42 == 2)
        {
          v44 = 1;
LABEL_71:
          *(_BYTE *)(a1 + 44) |= v44;
        }
        else if (!v42)
        {
          goto LABEL_75;
        }
      }
      v44 = 2;
      goto LABEL_71;
    }
    v29 = v21 >> 3;
    v30 = v13;
    if (!v15)
    {
      v31 = v14;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 != 2)
    {
      if ((_DWORD)v29 != 1)
      {
        v38 = PBReaderSkipValueWithTag();
        v17 = (int *)MEMORY[0x1E0D82BC8];
        if (!v38)
          goto LABEL_72;
        goto LABEL_58;
      }
      if (v30)
      {
        if ((*(_BYTE *)(a1 + 44) & 2) == 0)
        {
          PBReaderReadString();
          v35 = objc_claimAutoreleasedReturnValue();
          v36 = 24;
          goto LABEL_48;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_73;
        v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
LABEL_57:
        v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_58:
        if (v9)
          v40 = 1;
        else
          v40 = v13;
        if ((v40 & 1) == 0)
          goto LABEL_62;
        continue;
      }
LABEL_51:
      v39 = PBReaderSkipValueWithTag();
      v17 = (int *)MEMORY[0x1E0D82BC8];
      if ((v39 & 1) == 0)
      {
LABEL_72:
        v41 = 0;
        goto LABEL_74;
      }
      goto LABEL_58;
    }
    break;
  }
  if (!v30)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 44) & 1) == 0)
  {
    PBReaderReadString();
    v35 = objc_claimAutoreleasedReturnValue();
    v36 = 16;
LABEL_48:
    v37 = *(void **)(a1 + v36);
    *(_QWORD *)(a1 + v36) = v35;

    v17 = (int *)MEMORY[0x1E0D82BC8];
    --v9;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v9 -= *(_BYTE *)(a1 + 44) & 1;
    goto LABEL_57;
  }
LABEL_73:
  v41 = 0;
  v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_74:
  *(_BYTE *)(a1 + 44) |= 2u;
  *(_BYTE *)(a1 + 44) |= 1u;
  if ((v41 & 1) != 0)
  {
LABEL_75:
    v3 = *(_BYTE *)(v3 + *v17) == 0;
    if (v13)
      goto LABEL_76;
  }
  else
  {
    v3 = 0;
    if (v13)
    {
LABEL_76:
      v45 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

    }
  }
  return v3;
}

void sub_1893CDF04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893CE2D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPNotificationReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPNotificationReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPNotificationReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPNotificationReadAllFrom_initialTag;
  Specified = GEORPNotificationReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_1893CE460(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPNotificationReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPNotificationReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893CE4C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPNotificationIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_27;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_27;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2)
          goto LABEL_29;
        goto LABEL_23;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_29:
        v17 = 0;
        goto LABEL_28;
      }
LABEL_26:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_27;
    }
    if (v15 != 2)
      goto LABEL_29;
LABEL_23:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_29;
    goto LABEL_26;
  }
LABEL_27:
  v17 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v17;
}

void sub_1893CE7F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPNotificationIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 44) & 7) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_1893CEA78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPersonalizedMapsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  unint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  GEORPAddress *v28;
  void *v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _BOOL8 v37;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v17 = v11++ >= 9;
          if (v17)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        v20 = v12 >> 3;
        if ((v12 >> 3) == 3)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_53;
          v28 = objc_alloc_init(GEORPAddress);
          if (!GEORPAddressReadAllFrom((uint64_t)v28, v5, a3))
          {

            goto LABEL_53;
          }
          PBReaderRecallMark();
          v29 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v28;

        }
        else
        {
          if ((_DWORD)v20 == 2)
          {
            v30 = 0;
            v31 = 0;
            v23 = 0;
            *(_BYTE *)(a1 + 24) |= 2u;
            while (1)
            {
              v32 = *v6;
              v33 = *(_QWORD *)&v5[v32];
              v34 = v33 + 1;
              if (v33 == -1 || v34 > *(_QWORD *)&v5[*v7])
                break;
              v35 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v33);
              *(_QWORD *)&v5[v32] = v34;
              v23 |= (unint64_t)(v35 & 0x7F) << v30;
              if ((v35 & 0x80) == 0)
                goto LABEL_46;
              v30 += 7;
              v17 = v31++ >= 9;
              if (v17)
              {
                LODWORD(v23) = 0;
                goto LABEL_48;
              }
            }
            v5[*v8] = 1;
LABEL_46:
            if (v5[*v8])
              LODWORD(v23) = 0;
LABEL_48:
            v36 = 20;
          }
          else
          {
            if ((_DWORD)v20 != 1)
            {
              if (!PBReaderSkipValueWithTag())
                goto LABEL_53;
              continue;
            }
            v21 = 0;
            v22 = 0;
            v23 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v24 = *v6;
              v25 = *(_QWORD *)&v5[v24];
              v26 = v25 + 1;
              if (v25 == -1 || v26 > *(_QWORD *)&v5[*v7])
                break;
              v27 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v25);
              *(_QWORD *)&v5[v24] = v26;
              v23 |= (unint64_t)(v27 & 0x7F) << v21;
              if ((v27 & 0x80) == 0)
                goto LABEL_42;
              v21 += 7;
              v17 = v22++ >= 9;
              if (v17)
              {
                LODWORD(v23) = 0;
                goto LABEL_44;
              }
            }
            v5[*v8] = 1;
LABEL_42:
            if (v5[*v8])
              LODWORD(v23) = 0;
LABEL_44:
            v36 = 16;
          }
          *(_DWORD *)(a1 + v36) = v23;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v37 = v5[*v8] == 0;
  }
  else
  {
LABEL_53:
    v37 = 0;
  }
  objc_sync_exit(v5);

  return v37;
}

void sub_1893CF908(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPersonalizedMapsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPPersonalizedMapsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893CF968(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPersonalizedMapsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  _BOOL8 v29;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEORPAddressIsValid(a1))
        {
LABEL_46:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          if ((v8 & 7) != 0)
            goto LABEL_46;
          v24 = 0;
          while (1)
          {
            v25 = *v2;
            v26 = *(_QWORD *)&a1[v25];
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
              goto LABEL_41;
            v28 = *(char *)(*(_QWORD *)&a1[*v5] + v26);
            *(_QWORD *)&a1[v25] = v27;
            if (v28 < 0)
            {
              v23 = v24++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_43;
          }
        }
        if ((_DWORD)v17 == 1)
        {
          if ((v8 & 7) != 0)
            goto LABEL_46;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              break;
            v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0)
            {
              v23 = v18++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_43;
          }
LABEL_41:
          a1[*v4] = 1;
          continue;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_46;
      }
LABEL_43:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v29 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v29;
}

void sub_1893D01A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPhotoWithMetadataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  int *v16;
  int *v17;
  int *v18;
  BOOL v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  void *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  int v52;
  int v53;
  char v54;
  int *v55;
  void *v56;
  GEOLatLng *v58;
  BOOL v59;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 68) >> 3) & 1) + ((*(unsigned __int8 *)(a1 + 68) >> 4) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v7;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 & 1 | v11;
        v15 = v14 != 0;
        if ((v14 != 0) | v8 & 1)
          v16 = 0;
        else
          v16 = a3;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (v14)
          v19 = 1;
        else
          v19 = v16 == 0;
        v59 = v19;
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v7;
        v13 = v10;
LABEL_8:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_82;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v17;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_26;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_28;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_26:
    v29 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v23 = 0;
LABEL_28:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_82:
      if (v15)
      {
        v51 = 1;
LABEL_93:
        v55 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        goto LABEL_94;
      }
      if (!v16)
        goto LABEL_95;
      while (1)
      {
        v53 = *v16++;
        v52 = v53;
        if (v53 == 1)
          break;
        if (v52 == 3)
        {
          v54 = 16;
LABEL_91:
          *(_BYTE *)(a1 + 68) |= v54;
        }
        else if (!v52)
        {
          goto LABEL_95;
        }
      }
      v54 = 8;
      goto LABEL_91;
    }
    v31 = v23 >> 3;
    v32 = v15;
    if (!v59)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_63;
        if ((*(_BYTE *)(a1 + 68) & 8) == 0)
        {
          PBReaderReadData();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v37;
          goto LABEL_54;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_101;
        v48 = 16 * *(_BYTE *)(a1 + 68);
        goto LABEL_69;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_63;
        *(_BYTE *)(a1 + 68) |= 1u;
        v40 = *v17;
        v41 = *(_QWORD *)(v3 + v40);
        if (v41 <= 0xFFFFFFFFFFFFFFF7 && v41 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v42 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v41);
          *(_QWORD *)(v3 + v40) = v41 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v42 = 0;
        }
        v49 = 16;
        goto LABEL_77;
      case 3:
        if (!v32)
          goto LABEL_63;
        if ((*(_BYTE *)(a1 + 68) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_101;
          v48 = 8 * *(_BYTE *)(a1 + 68);
LABEL_69:
          v9 += v48 >> 7;
          goto LABEL_70;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_101;
        v58 = objc_alloc_init(GEOLatLng);
        if (GEOLatLngReadAllFrom((uint64_t)v58, (void *)v3))
        {
          PBReaderRecallMark();
          v38 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v58;
LABEL_54:

          --v9;
LABEL_70:
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_78:
          if (v9)
            v50 = 1;
          else
            v50 = v15;
          if ((v50 & 1) == 0)
            goto LABEL_82;
          continue;
        }

LABEL_101:
        v51 = 0;
        v55 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_94:
        *(_BYTE *)(a1 + v55[369]) |= 8u;
        *(_BYTE *)(a1 + v55[369]) |= 0x10u;
        if ((v51 & 1) != 0)
        {
LABEL_95:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if (v15)
            goto LABEL_96;
        }
        else
        {
          v3 = 0;
          if (v15)
          {
LABEL_96:
            v56 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_63;
        *(_BYTE *)(a1 + 68) |= 2u;
        v43 = *v17;
        v44 = *(_QWORD *)(v3 + v43);
        if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v42 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v44);
          *(_QWORD *)(v3 + v43) = v44 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v42 = 0;
        }
        v49 = 40;
        goto LABEL_77;
      case 5:
        if ((v8 & 1) != 0)
        {
          *(_BYTE *)(a1 + 68) |= 4u;
          v45 = *v17;
          v46 = *(_QWORD *)(v3 + v45);
          if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(_QWORD *)(v3 + *v6))
          {
            v42 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v46);
            *(_QWORD *)(v3 + v45) = v46 + 8;
          }
          else
          {
            *(_BYTE *)(v3 + *v18) = 1;
            v42 = 0;
          }
          v49 = 48;
LABEL_77:
          *(_QWORD *)(a1 + v49) = v42;
          goto LABEL_78;
        }
LABEL_63:
        v47 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if ((v47 & 1) != 0)
          goto LABEL_78;
LABEL_92:
        v51 = 0;
        goto LABEL_93;
      default:
        v39 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (!v39)
          goto LABEL_92;
        goto LABEL_78;
    }
  }
}

void sub_1893D093C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893D1074(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPhotoWithMetadataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPPhotoWithMetadataReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPPhotoWithMetadataReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPPhotoWithMetadataReadAllFrom_initialTag;
  Specified = GEORPPhotoWithMetadataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1893D1214(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPhotoWithMetadataReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPPhotoWithMetadataReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893D1274(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893D1454(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPhotoWithMetadataIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = (*(_BYTE *)(a1 + 68) & 0x38) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_1893D181C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893D1E00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPlaceInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  GEOPDPlaceResponse *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char v42;
  char v43;
  char v44;
  int v45;
  char v46;
  void *v47;
  int v49;
  char v50;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 | (v11 > 2);
        if (((v14 | v8) & 1) != 0)
          v15 = 0;
        else
          v15 = a3;
        LODWORD(v16) = v14;
        v50 = (v15 == 0) | v14;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_70;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_70:
      if ((v16 & 1) != 0)
      {
        v44 = 1;
        goto LABEL_82;
      }
      if (v15)
      {
        while (1)
        {
          v45 = *v15++;
          v46 = 1;
          switch(v45)
          {
            case 0:
              goto LABEL_83;
            case 1:
              goto LABEL_77;
            case 2:
              v46 = 2;
              goto LABEL_77;
            case 3:
              v46 = 4;
              goto LABEL_77;
            case 4:
              v46 = 8;
LABEL_77:
              *(_BYTE *)(a1 + 60) |= v46;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_83;
    }
    v30 = v22 >> 3;
    v31 = (char)v16;
    if ((v50 & 1) == 0)
    {
      v32 = v15;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31)
          goto LABEL_57;
        if ((*(_BYTE *)(a1 + 60) & 1) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_79;
          v49 = (int)v16;
          v16 = objc_alloc_init(GEOPDPlaceRequest);
          if (GEOPDPlaceRequestReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
          {
            PBReaderRecallMark();
            v36 = 16;
            goto LABEL_49;
          }
          goto LABEL_80;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_79;
        v7 -= *(_BYTE *)(a1 + 60) & 1;
        goto LABEL_68;
      case 2:
        if (!v31)
          goto LABEL_57;
        if ((*(_BYTE *)(a1 + 60) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_79;
          v43 = *(_BYTE *)(a1 + 60) << 6;
LABEL_67:
          v7 += v43 >> 7;
LABEL_68:
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_69:
          if (!(v16 & 1 | (v7 != 0)))
            goto LABEL_70;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_79;
        v49 = (int)v16;
        v16 = objc_alloc_init(GEOPDPlaceResponse);
        if (GEOPDPlaceResponseReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v36 = 24;
LABEL_49:
          v38 = *(void **)(a1 + v36);
          *(_QWORD *)(a1 + v36) = v16;

          --v7;
          LODWORD(v16) = v49;
          goto LABEL_68;
        }
LABEL_80:

        v44 = 0;
        LOBYTE(v16) = v49;
LABEL_81:
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_82:
        *(_BYTE *)(a1 + 60) |= 1u;
        *(_BYTE *)(a1 + 60) |= 2u;
        *(_BYTE *)(a1 + 60) |= 4u;
        *(_BYTE *)(a1 + 60) |= 8u;
        if ((v44 & 1) != 0)
        {
LABEL_83:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v16 & 1) != 0)
            goto LABEL_84;
        }
        else
        {
          v3 = 0;
          if ((v16 & 1) != 0)
          {
LABEL_84:
            v47 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 3:
        if (!v31)
          goto LABEL_57;
        if ((*(_BYTE *)(a1 + 60) & 4) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 32;
          goto LABEL_56;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_79;
        v43 = 32 * *(_BYTE *)(a1 + 60);
        goto LABEL_67;
      case 4:
        if (!v31)
        {
LABEL_57:
          v42 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if ((v42 & 1) == 0)
          {
LABEL_78:
            v44 = 0;
            goto LABEL_82;
          }
          goto LABEL_69;
        }
        if ((*(_BYTE *)(a1 + 60) & 8) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 40;
LABEL_56:
          v41 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v39;

          --v7;
          goto LABEL_68;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_79:
          v44 = 0;
          goto LABEL_81;
        }
        v43 = 16 * *(_BYTE *)(a1 + 60);
        goto LABEL_67;
      default:
        v37 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (!v37)
          goto LABEL_78;
        goto LABEL_69;
    }
  }
}

void sub_1893D24DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893D2620(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893D2764(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893D2D10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPlaceInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPPlaceInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPPlaceInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPPlaceInfoReadAllFrom_initialTag;
  Specified = GEORPPlaceInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 16), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_1893D2EC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPlaceInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPPlaceInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893D2F28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPlaceInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOPDPlaceRequestIsValid(a1))
            goto LABEL_26;
          goto LABEL_33;
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceResponseIsValid(a1))
            goto LABEL_33;
LABEL_26:
          PBReaderRecallMark();
          goto LABEL_31;
        case 3u:
          if (v15 == 2)
            goto LABEL_30;
          goto LABEL_33;
        case 4u:
          if (v15 == 2)
            goto LABEL_30;
          goto LABEL_33;
        default:
LABEL_30:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_33:
            PBReaderRecallMark();
            return 0;
          }
LABEL_31:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_32;
          break;
      }
    }
  }
LABEL_32:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_1893D3308(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPPlaceInfoIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = *(unsigned __int8 *)(a1 + 60);
  if ((v2 & 0x10) != 0)
    return 1;
  if ((v2 & 1) != 0)
  {
    if ((GEOPDPlaceRequestIsDirty(*(os_unfair_lock_s **)(a1 + 16)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 60);
  }
  if ((v2 & 2) != 0)
  {
    if ((GEOPDPlaceResponseIsDirty(*(os_unfair_lock_s **)(a1 + 24)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 60);
  }
  if ((v2 & 4) == 0)
    return (v2 >> 3) & 1;
  return 1;
}

os_unfair_lock_s *GEORPPlaceInfoIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPPlaceInfoIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEORPPlaceInfoClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  int HasSensitiveFields;
  void *v7;
  id v8;

  if (a3
    && objc_msgSend(a1, "hasPlaceRequest")
    && (objc_msgSend(a1, "placeRequest"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEOPDPlaceRequestHasSensitiveFields(v5, a2),
        v5,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "placeRequest");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (id)objc_msgSend(v7, "copy");

    GEOPDPlaceRequestClearSensitiveFields(v8, a2, 0);
    objc_msgSend(a1, "setPlaceRequest:", v8);
  }
  else
  {
    objc_msgSend(a1, "placeRequest");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

}

void *GEORPPlaceInfoHasSensitiveFields(void *result, uint64_t a2)
{
  void *v3;
  uint64_t HasSensitiveFields;

  if (result)
  {
    objc_msgSend(result, "placeRequest");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOPDPlaceRequestHasSensitiveFields(v3, a2);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void sub_1893D37EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPlaceProblemReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  _BOOL8 v40;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          v28 = 0;
          v29 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 4u;
          while (1)
          {
            v30 = *v4;
            v31 = *(_QWORD *)&v3[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              break;
            v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
            *(_QWORD *)&v3[v30] = v32;
            v21 |= (unint64_t)(v33 & 0x7F) << v28;
            if ((v33 & 0x80) == 0)
            {
              v27 = &OBJC_IVAR___GEORPPlaceProblem__problematicDepartureSequenceIndex;
              goto LABEL_49;
            }
            v28 += 7;
            v26 = v29++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEORPPlaceProblem__problematicDepartureSequenceIndex;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEORPPlaceProblem__problematicDepartureSequenceIndex;
LABEL_48:
          v3[*v6] = 1;
        }
        else if ((_DWORD)v18 == 2)
        {
          v34 = 0;
          v35 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 2u;
          while (1)
          {
            v36 = *v4;
            v37 = *(_QWORD *)&v3[v36];
            v38 = v37 + 1;
            if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEORPPlaceProblem__componentValueIndex;
              goto LABEL_48;
            }
            v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
            *(_QWORD *)&v3[v36] = v38;
            v21 |= (unint64_t)(v39 & 0x7F) << v34;
            if ((v39 & 0x80) == 0)
              break;
            v34 += 7;
            v26 = v35++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEORPPlaceProblem__componentValueIndex;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEORPPlaceProblem__componentValueIndex;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_58;
            continue;
          }
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEORPPlaceProblem__componentIndex;
              goto LABEL_48;
            }
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              break;
            v19 += 7;
            v26 = v20++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEORPPlaceProblem__componentIndex;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEORPPlaceProblem__componentIndex;
        }
LABEL_49:
        if (v3[*v6])
          LODWORD(v21) = 0;
LABEL_51:
        *(_DWORD *)(a1 + *v27) = v21;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v40 = v3[*v6] == 0;
  }
  else
  {
LABEL_58:
    v40 = 0;
  }
  objc_sync_exit(v3);

  return v40;
}

void sub_1893D42F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPlaceProblemReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPPlaceProblemReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893D4350(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPlaceProblemIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_48;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_48;
      v16 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v16 == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_50;
        v28 = 0;
        while (1)
        {
          v29 = *v2;
          v30 = *(_QWORD *)&a1[v29];
          v31 = v30 + 1;
          if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
            goto LABEL_45;
          v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
          *(_QWORD *)&a1[v29] = v31;
          if (v32 < 0)
          {
            v22 = v28++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_47;
        }
      }
      if ((_DWORD)v16 == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_50;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0)
          {
            v22 = v17++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_47;
        }
LABEL_45:
        a1[*v4] = 1;
        goto LABEL_47;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_50:
        v33 = 0;
        goto LABEL_49;
      }
LABEL_47:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_48;
    }
    if ((v8 & 7) != 0)
      goto LABEL_50;
    v23 = 0;
    while (1)
    {
      v24 = *v2;
      v25 = *(_QWORD *)&a1[v24];
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
        goto LABEL_45;
      v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
      *(_QWORD *)&a1[v24] = v26;
      if (v27 < 0)
      {
        v22 = v23++ > 8;
        if (!v22)
          continue;
      }
      goto LABEL_47;
    }
  }
LABEL_48:
  v33 = a1[*v4] == 0;
LABEL_49:
  PBReaderRecallMark();
  return v33;
}

void sub_1893D4C88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  int v44;
  int *v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  int v72;
  char v73;
  void *v74;
  GEORPProblemCorrections *v76;
  char v77;
  char v78;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 76) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 76) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 76) >> 3) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 1;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_110;
        v78 = (v16 == 0) | v15;
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v77 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v18))
      goto LABEL_110;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    v29 = v22 & 7;
    if (v28 || v29 == 4)
    {
LABEL_110:
      if ((v15 & 1) != 0)
      {
        v71 = 1;
        goto LABEL_112;
      }
      if (v16)
      {
        while (1)
        {
          v72 = *v16++;
          v73 = 4;
          switch(v72)
          {
            case 0:
              goto LABEL_120;
            case 2:
              goto LABEL_119;
            case 4:
              v73 = 16;
              goto LABEL_119;
            case 5:
              v73 = 8;
LABEL_119:
              *(_BYTE *)(a1 + 76) |= v73;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_120;
    }
    v31 = v22 >> 3;
    v32 = v15;
    if ((v78 & 1) == 0)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_81;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 76) |= 2u;
        while (1)
        {
          v40 = *v17;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v41);
          *(_QWORD *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0)
            goto LABEL_84;
          v37 += 7;
          v27 = v38++ >= 9;
          if (v27)
          {
            LODWORD(v39) = 0;
            goto LABEL_86;
          }
        }
        *(_BYTE *)(v3 + *v18) = 1;
LABEL_84:
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_86:
        v62 = 72;
        goto LABEL_91;
      case 2:
        if (!v32 || (*(_BYTE *)(a1 + 76) & 4) != 0)
          goto LABEL_81;
        if (v29 != 2)
        {
          v64 = 0;
          v65 = 0;
          v66 = 0;
          while (1)
          {
            v67 = *v17;
            v68 = *(_QWORD *)(v3 + v67);
            v69 = v68 + 1;
            if (v68 == -1 || v69 > *(_QWORD *)(v3 + *v6))
              break;
            v70 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v68);
            *(_QWORD *)(v3 + v67) = v69;
            v66 |= (unint64_t)(v70 & 0x7F) << v64;
            if (v70 < 0)
            {
              v64 += 7;
              v27 = v65++ >= 9;
              if (!v27)
                continue;
            }
            goto LABEL_106;
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_106:
          PBRepeatedInt32Add();
          goto LABEL_107;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_125;
        while (1)
        {
          v45 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          while (1)
          {
            v49 = *v17;
            v50 = *(_QWORD *)(v3 + v49);
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)(v3 + *v6))
              break;
            v52 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v50);
            *(_QWORD *)(v3 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              v27 = v47++ >= 9;
              if (!v27)
                continue;
            }
            goto LABEL_61;
          }
          *(_BYTE *)(v3 + *v45) = 1;
LABEL_61:
          PBRepeatedInt32Add();
        }
        PBReaderRecallMark();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v77;
        goto LABEL_108;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_81;
        v53 = 0;
        v54 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 76) |= 1u;
        while (2)
        {
          v55 = *v17;
          v56 = *(_QWORD *)(v3 + v55);
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v56);
            *(_QWORD *)(v3 + v55) = v57;
            v39 |= (unint64_t)(v58 & 0x7F) << v53;
            if (v58 < 0)
            {
              v53 += 7;
              v27 = v54++ >= 9;
              if (v27)
              {
                LODWORD(v39) = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_90:
        v62 = 68;
LABEL_91:
        *(_DWORD *)(a1 + v62) = v39;
        goto LABEL_108;
      case 4:
        if (!v32)
          goto LABEL_81;
        if ((*(_BYTE *)(a1 + 76) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_125;
          v63 = 8 * *(_BYTE *)(a1 + 76);
          goto LABEL_96;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_125;
        v76 = objc_alloc_init(GEORPProblemCorrections);
        if (!GEORPProblemCorrectionsReadAllFrom((uint64_t)v76, (void *)v3, v9 & 1))
          goto LABEL_124;
        PBReaderRecallMark();
        v59 = 48;
        goto LABEL_80;
      case 5:
        if (!v32)
        {
LABEL_81:
          v61 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v77;
          if ((v61 & 1) == 0)
          {
LABEL_123:
            v71 = 0;
            goto LABEL_112;
          }
LABEL_108:
          if (!(v15 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_110;
          continue;
        }
        if ((*(_BYTE *)(a1 + 76) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_125;
          v63 = 16 * *(_BYTE *)(a1 + 76);
LABEL_96:
          v7 += v63 >> 7;
LABEL_107:
          v15 = v77;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_108;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_125;
        v76 = objc_alloc_init(GEORPProblemContext);
        if (GEORPProblemContextReadAllFrom((uint64_t)v76, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v59 = 40;
LABEL_80:
          v60 = *(void **)(a1 + v59);
          *(_QWORD *)(a1 + v59) = v76;

          --v7;
          goto LABEL_107;
        }
LABEL_124:

LABEL_125:
        v71 = 0;
        v15 = v77;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_112:
        *(_BYTE *)(a1 + 76) |= 4u;
        *(_BYTE *)(a1 + 76) |= 0x10u;
        *(_BYTE *)(a1 + 76) |= 8u;
        if ((v71 & 1) != 0)
        {
LABEL_120:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_121;
          return v3;
        }
        v3 = 0;
        if ((v15 & 1) == 0)
          return v3;
LABEL_121:
        v74 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      default:
        v44 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v77;
        if (!v44)
          goto LABEL_123;
        goto LABEL_108;
    }
  }
}

void sub_1893D695C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893D6A9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893D8330(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPProblemReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPProblemReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPProblemReadAllFrom_initialTag;
  Specified = GEORPProblemReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 48), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1893D84E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPProblemReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893D8548(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  _BOOL8 v38;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_67;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_44;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_53;
          }
        case 2u:
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_67:
              PBReaderRecallMark();
              return 0;
            }
LABEL_56:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v33 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v34 = *v2;
                v35 = *(_QWORD *)&a1[v34];
                v36 = v35 + 1;
                if (v35 == -1 || v36 > *(_QWORD *)&a1[*v3])
                  break;
                v37 = *(char *)(*(_QWORD *)&a1[*v5] + v35);
                *(_QWORD *)&a1[v34] = v36;
                if (v37 < 0)
                {
                  v13 = v33++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_56;
              }
              a1[*v4] = 1;
            }
LABEL_52:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_67;
            while (1)
            {
              v23 = *v2;
              v24 = *(_QWORD *)&a1[v23];
              v25 = v24 + 1;
              if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
                break;
              v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
              *(_QWORD *)&a1[v23] = v25;
              if (v26 < 0)
              {
                v27 = v15++;
                if (v27 <= 8)
                  continue;
              }
              goto LABEL_53;
            }
LABEL_44:
            a1[*v4] = 1;
          }
LABEL_53:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_65;
          break;
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_67;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_44;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_53;
          }
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPProblemCorrectionsIsValid(a1))
            goto LABEL_67;
          goto LABEL_52;
        case 5u:
          if (v15 == 2 && PBReaderPlaceMark() && GEORPProblemContextIsValid(a1))
            goto LABEL_52;
          goto LABEL_67;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_67;
          goto LABEL_53;
      }
    }
  }
LABEL_65:
  v38 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v38;
}

BOOL GEORPProblemCorrectionsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEORPCorrectedFieldIsValid(a1))
            goto LABEL_69;
          goto LABEL_74;
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPCorrectedLabelIsValid(a1))
            goto LABEL_74;
          goto LABEL_69;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPCorrectedCoordinateIsValid(a1))
            goto LABEL_74;
          goto LABEL_69;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPCorrectedSearchIsValid(a1))
            goto LABEL_74;
          goto LABEL_69;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPMapLocationIsValid(a1))
            goto LABEL_74;
          goto LABEL_69;
        case 6u:
          if (v15 == 2)
            goto LABEL_40;
          goto LABEL_74;
        case 8u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPPlaceProblemIsValid(a1))
            goto LABEL_74;
          goto LABEL_69;
        case 9u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPDirectionsProblemIsValid(a1))
            goto LABEL_74;
          goto LABEL_69;
        case 0xAu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPPhotoWithMetadataIsValid(a1))
            goto LABEL_74;
          goto LABEL_69;
        case 0xEu:
          if ((v8 & 7) != 0)
            goto LABEL_74;
          v17 = 0;
          break;
        case 0xFu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPCorrectedFlagIsValid(a1))
            goto LABEL_74;
          goto LABEL_69;
        case 0x10u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPMerchantLookupCorrectionsIsValid(a1))
            goto LABEL_74;
LABEL_69:
          PBReaderRecallMark();
          continue;
        default:
LABEL_40:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_74:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v18 = *v2;
        v19 = *(_QWORD *)&a1[v18];
        v20 = v19 + 1;
        if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
          break;
        v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
        *(_QWORD *)&a1[v18] = v20;
        if (v21 < 0 && v17++ <= 8)
          continue;
        goto LABEL_70;
      }
      a1[*v4] = 1;
LABEL_70:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

BOOL GEORPProblemContextIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  _BOOL8 v37;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOSessionIDIsValid(a1))
            goto LABEL_123;
          goto LABEL_126;
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_126;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              goto LABEL_94;
            v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0)
            {
              v23 = v18++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_124;
          }
        case 3u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPlaceIsValid(a1))
            goto LABEL_126;
          goto LABEL_123;
        case 4u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEORPMapLocationIsValid(a1))
            goto LABEL_126;
          goto LABEL_123;
        case 6u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEORPVisibleTileSetIsValid(a1))
            goto LABEL_126;
          goto LABEL_123;
        case 7u:
          if (v16 == 2)
            goto LABEL_84;
          goto LABEL_126;
        case 8u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceIsValid(a1))
            goto LABEL_126;
          goto LABEL_123;
        case 9u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEODirectionsRequestIsValid(a1))
            goto LABEL_126;
          goto LABEL_123;
        case 0xAu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEODirectionsResponseIsValid(a1))
            goto LABEL_126;
          goto LABEL_123;
        case 0xCu:
          if (v16 == 2)
            goto LABEL_84;
          goto LABEL_126;
        case 0xDu:
          if (v16 != 1)
            goto LABEL_126;
          v24 = *v2;
          v25 = *(_QWORD *)&a1[v24];
          if (v25 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_95;
          v26 = v25 + 8;
          if (v26 > *(_QWORD *)&a1[*v3])
            goto LABEL_95;
          *(_QWORD *)&a1[v24] = v26;
          continue;
        case 0xEu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEORPAuxiliaryControlIsValid(a1))
            goto LABEL_126;
          goto LABEL_123;
        case 0xFu:
          if ((v8 & 7) != 0)
            goto LABEL_126;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_94;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v23 = v27++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_124;
          }
        case 0x10u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEORPTransitLineTileInfoIsValid(a1))
            goto LABEL_126;
          goto LABEL_123;
        case 0x12u:
        case 0x18u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEORPPlaceInfoIsValid(a1))
            goto LABEL_126;
          goto LABEL_123;
        case 0x13u:
          if (v16 == 2)
            goto LABEL_84;
          goto LABEL_126;
        case 0x14u:
          if ((v8 & 7) != 0)
            goto LABEL_126;
          v32 = 0;
          break;
        case 0x15u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOABAssignmentResponseIsValid(a1))
            goto LABEL_126;
          goto LABEL_123;
        case 0x16u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEORPSuggestionListIsValid(a1))
            goto LABEL_126;
          goto LABEL_123;
        case 0x17u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEORPCurrentEnvironmentManifestURLsIsValid(a1))
            goto LABEL_126;
          goto LABEL_123;
        case 0x19u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOServicesStateIsValid(a1))
            goto LABEL_126;
          goto LABEL_123;
        case 0x1Au:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEORPPersonalizedMapsIsValid(a1))
            goto LABEL_126;
          goto LABEL_123;
        case 0x1Bu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEORPNavigationSettingsIsValid(a1))
            goto LABEL_126;
          goto LABEL_123;
        case 0x1Cu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEORPMerchantLookupContextIsValid(a1))
            goto LABEL_126;
LABEL_123:
          PBReaderRecallMark();
          continue;
        default:
LABEL_84:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_126:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v33 = *v2;
        v34 = *(_QWORD *)&a1[v33];
        v35 = v34 + 1;
        if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
          break;
        v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
        *(_QWORD *)&a1[v33] = v35;
        if (v36 < 0)
        {
          v23 = v32++ > 8;
          if (!v23)
            continue;
        }
        goto LABEL_124;
      }
LABEL_94:
      v14 = *v4;
LABEL_95:
      a1[v14] = 1;
LABEL_124:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v37 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v37;
}

void sub_1893D94EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPProblemIsDirty(uint64_t a1)
{
  char v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = *(_BYTE *)(a1 + 76);
  if ((v2 & 0x24) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 76) & 0x10) != 0)
  {
    if ((GEORPProblemCorrectionsIsDirty(*(os_unfair_lock_s **)(a1 + 48)) & 1) != 0)
      return 1;
    v2 = *(_BYTE *)(a1 + 76);
  }
  if ((v2 & 8) != 0)
    return (uint64_t)GEORPProblemContextIsDirty(*(os_unfair_lock_s **)(a1 + 40));
  else
    return 0;
}

os_unfair_lock_s *GEORPProblemIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPProblemIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 16);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEORPProblemClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int HasSensitiveFields;
  void *v13;
  id v14;

  if (!a3)
  {
    objc_msgSend(a1, "problemCorrections");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "clearSensitiveFields:", a2);

LABEL_10:
    objc_msgSend(a1, "problemContext");
    v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "clearSensitiveFields:", a2);
    goto LABEL_11;
  }
  if (objc_msgSend(a1, "hasProblemCorrections")
    && (objc_msgSend(a1, "problemCorrections"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = GEORPProblemCorrectionsHasSensitiveFields(v5, a2),
        v5,
        v6))
  {
    objc_msgSend(a1, "problemCorrections");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v7, "copy");

    objc_msgSend(v8, "correctedSearch");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "clearSensitiveFields:", a2);

    objc_msgSend(a1, "setProblemCorrections:", v8);
  }
  else
  {
    objc_msgSend(a1, "problemCorrections");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

  if (!objc_msgSend(a1, "hasProblemContext"))
    goto LABEL_10;
  objc_msgSend(a1, "problemContext");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  HasSensitiveFields = GEORPProblemContextHasSensitiveFields((uint64_t)v11, a2);

  if (!HasSensitiveFields)
    goto LABEL_10;
  objc_msgSend(a1, "problemContext");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (id)objc_msgSend(v13, "copy");

  GEORPProblemContextClearSensitiveFields((id *)v14, a2, 0);
  objc_msgSend(a1, "setProblemContext:", v14);
LABEL_11:

}

uint64_t GEORPProblemHasSensitiveFields(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t HasSensitiveFields;
  void *v6;

  if (!a1)
    return 0;
  objc_msgSend(a1, "problemCorrections");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((GEORPProblemCorrectionsHasSensitiveFields(v4, a2) & 1) != 0)
  {
    HasSensitiveFields = 1;
  }
  else
  {
    objc_msgSend(a1, "problemContext");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEORPProblemContextHasSensitiveFields((uint64_t)v6, a2);

  }
  return HasSensitiveFields;
}

void *GEORPProblemCorrectionsHasSensitiveFields(void *result, uint64_t a2)
{
  void *v3;
  uint64_t HasSensitiveFields;

  if (result)
  {
    objc_msgSend(result, "correctedSearch");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEORPCorrectedSearchHasSensitiveFields(v3, a2);

    return (void *)HasSensitiveFields;
  }
  return result;
}

uint64_t GEORPProblemContextHasSensitiveFields(uint64_t result, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  char HasSensitiveFields;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  _BYTE v41[128];
  _BYTE v42[128];
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = (void *)result;
    objc_msgSend((id)result, "placeInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (GEORPPlaceInfoHasSensitiveFields(v4, a2))
    {
LABEL_3:

      return 1;
    }
    objc_msgSend(v3, "merchantLookupContext");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEORPMerchantLookupContextHasSensitiveFields(v5);

    if ((HasSensitiveFields & 1) != 0)
      return 1;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    objc_msgSend(v3, "directionsRequests");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v36, v43, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v37;
LABEL_9:
      v10 = 0;
      while (1)
      {
        if (*(_QWORD *)v37 != v9)
          objc_enumerationMutation(v4);
        if ((GEODirectionsRequestHasSensitiveFields(*(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * v10)) & 1) != 0)
          goto LABEL_3;
        if (v8 == ++v10)
        {
          v8 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v36, v43, 16);
          if (v8)
            goto LABEL_9;
          break;
        }
      }
    }

    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    objc_msgSend(v3, "directionsResponses");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v32, v42, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v33;
LABEL_17:
      v14 = 0;
      while (1)
      {
        if (*(_QWORD *)v33 != v13)
          objc_enumerationMutation(v4);
        if ((GEODirectionsResponseHasSensitiveFields(*(void **)(*((_QWORD *)&v32 + 1) + 8 * v14)) & 1) != 0)
          goto LABEL_3;
        if (v12 == ++v14)
        {
          v12 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v32, v42, 16);
          if (v12)
            goto LABEL_17;
          break;
        }
      }
    }

    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    objc_msgSend(v3, "autocompleteSuggestionLists");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v41, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v29;
LABEL_25:
      v18 = 0;
      while (1)
      {
        if (*(_QWORD *)v29 != v17)
          objc_enumerationMutation(v4);
        if ((GEORPSuggestionListHasSensitiveFields(*(void **)(*((_QWORD *)&v28 + 1) + 8 * v18), a2) & 1) != 0)
          goto LABEL_3;
        if (v16 == ++v18)
        {
          v16 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v41, 16);
          if (v16)
            goto LABEL_25;
          break;
        }
      }
    }

    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    objc_msgSend(v3, "directionsWaypointPlaceInfos", 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v24, v40, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v25;
      while (2)
      {
        v23 = 0;
        do
        {
          if (*(_QWORD *)v25 != v22)
            objc_enumerationMutation(v19);
          if ((GEORPPlaceInfoHasSensitiveFields(*(void **)(*((_QWORD *)&v24 + 1) + 8 * v23), a2) & 1) != 0)
          {

            return 1;
          }
          ++v23;
        }
        while (v21 != v23);
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v24, v40, 16);
        if (v21)
          continue;
        break;
      }
    }

    return 0;
  }
  return result;
}

void GEORPProblemCorrectionsClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  int HasSensitiveFields;
  void *v7;
  id v8;

  if (a3
    && objc_msgSend(a1, "hasCorrectedSearch")
    && (objc_msgSend(a1, "correctedSearch"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEORPCorrectedSearchHasSensitiveFields(v5, a2),
        v5,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "correctedSearch");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (id)objc_msgSend(v7, "copy");

    GEORPCorrectedSearchClearSensitiveFields(v8, a2, 0);
    objc_msgSend(a1, "setCorrectedSearch:", v8);
  }
  else
  {
    objc_msgSend(a1, "correctedSearch");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

}

void GEORPProblemContextClearSensitiveFields(id *a1, uint64_t a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  id *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  void *v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  int HasSensitiveFields;
  void *v31;
  id v32;

  -[GEORPProblemContext _readDirectionsRequests]((uint64_t)a1);
  if (objc_msgSend(a1[9], "count"))
  {
    v6 = 0;
    do
    {
      objc_msgSend(a1[9], "objectAtIndexedSubscript:", v6);
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = (void *)v7;
      if (a3 && GEODirectionsRequestHasSensitiveFields(v7))
      {
        v9 = (id *)objc_msgSend(v8, "copy");
        GEODirectionsRequestClearSensitiveFields(v9, a2, 0);
        objc_msgSend(a1[9], "replaceObjectAtIndex:withObject:", v6, v9);

      }
      else
      {
        objc_msgSend(v8, "clearSensitiveFields:", a2);
      }

      ++v6;
    }
    while (v6 < objc_msgSend(a1[9], "count"));
  }
  -[GEORPProblemContext _readDirectionsResponses]((uint64_t)a1);
  if (objc_msgSend(a1[10], "count"))
  {
    v10 = 0;
    do
    {
      objc_msgSend(a1[10], "objectAtIndexedSubscript:", v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = v11;
      if (a3 && GEODirectionsResponseHasSensitiveFields(v11))
      {
        v13 = (void *)objc_msgSend(v12, "copy");
        GEODirectionsResponseClearSensitiveFields((uint64_t)v13, a2, 0);
        objc_msgSend(a1[10], "replaceObjectAtIndex:withObject:", v10, v13);

      }
      else
      {
        objc_msgSend(v12, "clearSensitiveFields:", a2);
      }

      ++v10;
    }
    while (v10 < objc_msgSend(a1[10], "count"));
  }
  if ((a3 & 1) != 0
    && objc_msgSend(a1, "hasPlaceInfo")
    && (objc_msgSend(a1, "placeInfo"),
        v14 = (void *)objc_claimAutoreleasedReturnValue(),
        v15 = GEORPPlaceInfoHasSensitiveFields(v14, a2),
        v14,
        v15))
  {
    objc_msgSend(a1, "placeInfo");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (void *)objc_msgSend(v16, "copy");

    objc_msgSend(v17, "placeRequest");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "clearSensitiveFields:", a2);

    objc_msgSend(a1, "setPlaceInfo:", v17);
  }
  else
  {
    objc_msgSend(a1, "placeInfo");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "clearSensitiveFields:", a2);
  }

  -[GEORPProblemContext _readAutocompleteSuggestionLists]((uint64_t)a1);
  if (objc_msgSend(a1[4], "count"))
  {
    v19 = 0;
    do
    {
      objc_msgSend(a1[4], "objectAtIndexedSubscript:", v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v20;
      if (a3 && GEORPSuggestionListHasSensitiveFields(v20, a2))
      {
        v22 = (void *)objc_msgSend(v21, "copy");
        objc_msgSend(v22, "autocompleteRequest");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "clearSensitiveFields:", a2);

        objc_msgSend(a1[4], "replaceObjectAtIndex:withObject:", v19, v22);
      }
      else
      {
        objc_msgSend(v21, "clearSensitiveFields:", a2);
      }

      ++v19;
    }
    while (v19 < objc_msgSend(a1[4], "count"));
  }
  -[GEORPProblemContext _readDirectionsWaypointPlaceInfos]((uint64_t)a1);
  if (objc_msgSend(a1[11], "count"))
  {
    v24 = 0;
    do
    {
      objc_msgSend(a1[11], "objectAtIndexedSubscript:", v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = v25;
      if (a3 && GEORPPlaceInfoHasSensitiveFields(v25, a2))
      {
        v27 = (void *)objc_msgSend(v26, "copy");
        objc_msgSend(v27, "placeRequest");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "clearSensitiveFields:", a2);

        objc_msgSend(a1[11], "replaceObjectAtIndex:withObject:", v24, v27);
      }
      else
      {
        objc_msgSend(v26, "clearSensitiveFields:", a2);
      }

      ++v24;
    }
    while (v24 < objc_msgSend(a1[11], "count"));
  }
  if ((a3 & 1) != 0
    && objc_msgSend(a1, "hasMerchantLookupContext")
    && (objc_msgSend(a1, "merchantLookupContext"),
        v29 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEORPMerchantLookupContextHasSensitiveFields(v29),
        v29,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "merchantLookupContext");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = (id)objc_msgSend(v31, "copy");

    GEORPMerchantLookupContextClearSensitiveFields(v32, a2, 0);
    objc_msgSend(a1, "setMerchantLookupContext:", v32);
  }
  else
  {
    objc_msgSend(a1, "merchantLookupContext");
    v32 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "clearSensitiveFields:", a2);
  }

}

void sub_1893DA3A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893DA888(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemCollectionRequestReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;
  GEORPUserCredentials *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  int v42;
  char v43;
  __int16 v44;
  char v45;
  int v46;
  int v47;
  __int16 v48;
  void *v49;
  int v51;
  char v52;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 100);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 96));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = *(unsigned __int16 *)(a1 + 108);
  v12 = ((v11 >> 9) & 1)
      + ((v11 >> 8) & 1)
      + ((v11 >> 1) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(v11), (uint16x4_t)0xFFFCFFFBFFFAFFFDLL), (int8x8_t)0x1000100010001))+ (v11 & 1)+ ((v11 >> 7) & 1)+ ((v11 >> 2) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v13 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v15 = v10 | (v12 > 7);
        if (((v15 | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        LODWORD(v17) = v15;
        v52 = (v16 == 0) | v15;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_6:
        v13 = v9;
        v14 = v10;
LABEL_8:
        ++v7;
        v9 = v13;
        v10 = v14;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_104;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_104:
      if ((v17 & 1) != 0)
      {
        v45 = 1;
        goto LABEL_123;
      }
      if (v16)
      {
        while (1)
        {
          v47 = *v16++;
          v46 = v47;
          v48 = 64;
          switch(v47)
          {
            case 0:
              goto LABEL_124;
            case 1:
              goto LABEL_118;
            case 2:
              v48 = 8;
              goto LABEL_118;
            case 3:
              v48 = 32;
              goto LABEL_118;
            case 4:
              v48 = 1;
              goto LABEL_118;
            case 5:
              v48 = 16;
              goto LABEL_118;
            case 6:
              v48 = 128;
              goto LABEL_118;
            case 7:
              v48 = 4;
              goto LABEL_118;
            case 8:
              v48 = 256;
              goto LABEL_118;
            case 9:
              v48 = 512;
              goto LABEL_118;
            default:
              if (v46 != 201)
                continue;
              v48 = 2;
LABEL_118:
              *(_WORD *)(a1 + 108) |= v48;
              break;
          }
        }
      }
      goto LABEL_124;
    }
    v31 = v23 >> 3;
    v32 = (char)v17;
    if ((v52 & 1) == 0)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32 || (*(_WORD *)(a1 + 108) & 0x40) != 0)
          goto LABEL_81;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_120;
        v51 = (int)v17;
        v17 = objc_alloc_init(GEORPProblem);
        if (!GEORPProblemReadAllFrom((uint64_t)v17, (void *)v3, v9 & 1))
          goto LABEL_121;
        PBReaderRecallMark();
        -[GEORPProblemCollectionRequest _addNoFlagsRequestElement:](a1, v17);

        goto LABEL_78;
      case 2:
        if (!v32)
          goto LABEL_81;
        if ((*(_WORD *)(a1 + 108) & 8) == 0)
        {
          PBReaderReadString();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = 40;
          goto LABEL_71;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_120;
        v44 = *(_WORD *)(a1 + 108) << 12;
        goto LABEL_101;
      case 3:
        if (!v32)
          goto LABEL_81;
        if ((*(_WORD *)(a1 + 108) & 0x20) == 0)
        {
          PBReaderReadString();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = 56;
          goto LABEL_71;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_120;
        v44 = *(_WORD *)(a1 + 108) << 10;
        goto LABEL_101;
      case 4:
        if (!v32)
          goto LABEL_81;
        if ((*(_WORD *)(a1 + 108) & 1) == 0)
        {
          PBReaderReadString();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = 16;
          goto LABEL_71;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_120;
        v7 -= *(_WORD *)(a1 + 108) & 1;
        goto LABEL_102;
      case 5:
        if (!v32)
          goto LABEL_81;
        if ((*(_WORD *)(a1 + 108) & 0x10) == 0)
        {
          PBReaderReadString();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = 48;
          goto LABEL_71;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_120;
        v44 = *(_WORD *)(a1 + 108) << 11;
        goto LABEL_101;
      case 6:
        if (!v32)
          goto LABEL_81;
        if ((*(_WORD *)(a1 + 108) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_120;
          v44 = *(_WORD *)(a1 + 108) << 8;
          goto LABEL_101;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_120;
        v51 = (int)v17;
        v17 = objc_alloc_init(GEORPUserCredentials);
        if (!GEORPUserCredentialsReadAllFrom((uint64_t)v17, (void *)v3, v9 & 1))
          goto LABEL_121;
        PBReaderRecallMark();
        v37 = 72;
        goto LABEL_77;
      case 7:
        if (!v32)
          goto LABEL_81;
        if ((*(_WORD *)(a1 + 108) & 4) == 0)
        {
          PBReaderReadData();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = 32;
          goto LABEL_71;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_120;
        v44 = *(_WORD *)(a1 + 108) << 13;
        goto LABEL_101;
      case 8:
        if (!v32)
          goto LABEL_81;
        if ((*(_WORD *)(a1 + 108) & 0x100) == 0)
        {
          PBReaderReadString();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = 80;
LABEL_71:
          v40 = *(void **)(a1 + v39);
          *(_QWORD *)(a1 + v39) = v38;

          --v7;
          goto LABEL_102;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_120;
        v44 = *(_WORD *)(a1 + 108) << 7;
        goto LABEL_101;
      case 9:
        if (!v32)
          goto LABEL_81;
        if ((*(_WORD *)(a1 + 108) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_120:
            v45 = 0;
            goto LABEL_122;
          }
          v44 = *(_WORD *)(a1 + 108) << 6;
LABEL_101:
          v7 += v44 >> 15;
          goto LABEL_102;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_120;
        v51 = (int)v17;
        v17 = objc_alloc_init(GEOLocation);
        if (GEOLocationReadAllFrom((uint64_t)v17, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v37 = 88;
LABEL_77:
          v41 = *(void **)(a1 + v37);
          *(_QWORD *)(a1 + v37) = v17;

          --v7;
LABEL_78:
          LODWORD(v17) = v51;
LABEL_102:
          v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_103:
          if (!(v17 & 1 | (v7 != 0)))
            goto LABEL_104;
          continue;
        }
LABEL_121:

        v45 = 0;
        LOBYTE(v17) = v51;
LABEL_122:
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_123:
        *(_WORD *)(a1 + 108) |= 0x40u;
        *(_WORD *)(a1 + 108) |= 8u;
        *(_WORD *)(a1 + 108) |= 0x20u;
        *(_WORD *)(a1 + 108) |= 1u;
        *(_WORD *)(a1 + 108) |= 0x10u;
        *(_WORD *)(a1 + 108) |= 0x80u;
        *(_WORD *)(a1 + 108) |= 4u;
        *(_WORD *)(a1 + 108) |= 0x100u;
        *(_WORD *)(a1 + 108) |= 0x200u;
        *(_WORD *)(a1 + 108) |= 2u;
        if ((v45 & 1) != 0)
        {
LABEL_124:
          v3 = *(_BYTE *)(v3 + *v19) == 0;
          if ((v17 & 1) != 0)
            goto LABEL_125;
        }
        else
        {
          v3 = 0;
          if ((v17 & 1) != 0)
          {
LABEL_125:
            v49 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        if ((_DWORD)v31 != 201)
        {
          v42 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v42)
            goto LABEL_119;
          goto LABEL_103;
        }
        if (!v32)
        {
LABEL_81:
          v43 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v43 & 1) == 0)
          {
LABEL_119:
            v45 = 0;
            goto LABEL_123;
          }
          goto LABEL_103;
        }
        if ((*(_WORD *)(a1 + 108) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_120;
          v44 = *(_WORD *)(a1 + 108) << 14;
          goto LABEL_101;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_120;
        v51 = (int)v17;
        v17 = objc_alloc_init(GEORPDebugSettings);
        if (!GEORPDebugSettingsReadAllFrom((uint64_t)v17, (void *)v3))
          goto LABEL_121;
        PBReaderRecallMark();
        v37 = 24;
        goto LABEL_77;
    }
  }
}

void sub_1893DB47C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893DB5C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893DB704(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893DB848(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893DB98C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893DBAD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893DBC10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893DBD54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893DBE94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893DCA64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPProblemCollectionRequestCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = a1[8];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v8);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  objc_msgSend(a1[9], "readAll:", 1);
  objc_msgSend(a1[11], "readAll:", 1);
  return objc_msgSend(a1[3], "readAll:", 1);
}

unint64_t GEORPProblemCollectionRequestReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 100))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPProblemCollectionRequestReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 96) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 100) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPProblemCollectionRequestReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPProblemCollectionRequestReadAllFrom_initialTag;
  Specified = GEORPProblemCollectionRequestReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEORPProblemCollectionRequestCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
  return Specified;
}

void sub_1893DCD2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemCollectionRequestReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPProblemCollectionRequestReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893DCD8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemCollectionRequestIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEORPProblemIsValid(a1))
            goto LABEL_47;
          goto LABEL_51;
        case 2u:
          if (v15 == 2)
            goto LABEL_48;
          goto LABEL_51;
        case 3u:
          if (v15 == 2)
            goto LABEL_48;
          goto LABEL_51;
        case 4u:
          if (v15 == 2)
            goto LABEL_48;
          goto LABEL_51;
        case 5u:
          if (v15 == 2)
            goto LABEL_48;
          goto LABEL_51;
        case 6u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPUserCredentialsIsValid(a1))
            goto LABEL_51;
          goto LABEL_47;
        case 7u:
          if (v15 == 2)
            goto LABEL_48;
          goto LABEL_51;
        case 8u:
          if (v15 == 2)
            goto LABEL_48;
          goto LABEL_51;
        case 9u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOLocationIsValid(a1))
            goto LABEL_47;
          goto LABEL_51;
        default:
          if ((v8 >> 3) == 201)
          {
            if (v15 != 2 || !PBReaderPlaceMark() || !GEORPDebugSettingsIsValid(a1))
            {
LABEL_51:
              PBReaderRecallMark();
              return 0;
            }
LABEL_47:
            PBReaderRecallMark();
          }
          else
          {
LABEL_48:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_51;
          }
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_50;
          break;
      }
    }
  }
LABEL_50:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEORPUserCredentialsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_27;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_27;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2)
          goto LABEL_29;
        goto LABEL_23;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_29:
        v17 = 0;
        goto LABEL_28;
      }
LABEL_26:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_27;
    }
    if (v15 != 2)
      goto LABEL_29;
LABEL_23:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_29;
    goto LABEL_26;
  }
LABEL_27:
  v17 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v17;
}

void sub_1893DD530(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPProblemCollectionRequestIsDirty(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  v2 = *(_WORD *)(a1 + 108);
  if ((v2 & 0x479) != 0)
    return 1;
  if ((v2 & 0x80) != 0)
  {
    if (GEORPUserCredentialsIsDirty(*(_QWORD *)(a1 + 72)))
      return 1;
    v2 = *(_WORD *)(a1 + 108);
  }
  if ((v2 & 0x104) != 0)
    return 1;
  if ((v2 & 0x200) != 0)
  {
    if (GEOLocationIsDirty(*(os_unfair_lock_s **)(a1 + 88)))
      return 1;
    v2 = *(_WORD *)(a1 + 108);
  }
  if ((v2 & 2) != 0)
    return 1;
  if ((v2 & 0x40) == 0)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v5 = *(id *)(a1 + 64);
  v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v6 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v5);
        if ((GEORPProblemIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v8 + 1) + 8 * i)) & 1) != 0)
        {
          v3 = 1;
          goto LABEL_24;
        }
      }
      v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_24:

  return v3;
}

os_unfair_lock_s *GEORPProblemCollectionRequestIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPProblemCollectionRequestIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 26);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEORPProblemCollectionRequestClearSensitiveFields(id *a1, uint64_t a2, int a3)
{
  unint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int HasSensitiveFields;
  void *v12;
  _DWORD *v13;

  -[GEORPProblemCollectionRequest _readRequestElements]((uint64_t)a1);
  if (objc_msgSend(a1[8], "count"))
  {
    v6 = 0;
    do
    {
      objc_msgSend(a1[8], "objectAtIndexedSubscript:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v7;
      if (a3 && GEORPProblemHasSensitiveFields(v7, a2))
      {
        v9 = (void *)objc_msgSend(v8, "copy");
        GEORPProblemClearSensitiveFields(v9, a2, 0);
        objc_msgSend(a1[8], "replaceObjectAtIndex:withObject:", v6, v9);

      }
      else
      {
        objc_msgSend(v8, "clearSensitiveFields:", a2);
      }

      ++v6;
    }
    while (v6 < objc_msgSend(a1[8], "count"));
  }
  if ((a3 & 1) != 0
    && objc_msgSend(a1, "hasUserLocation")
    && (objc_msgSend(a1, "userLocation"),
        v10 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v10),
        v10,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "userLocation");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (_DWORD *)objc_msgSend(v12, "copy");

    GEOLocationClearSensitiveFields(v13);
    objc_msgSend(a1, "setUserLocation:", v13);
  }
  else
  {
    objc_msgSend(a1, "userLocation");
    v13 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "clearSensitiveFields:", a2);
  }

}

uint64_t GEORPProblemCollectionRequestHasSensitiveFields(void *a1, uint64_t a2)
{
  void *v4;
  char HasSensitiveFields;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  objc_msgSend(a1, "userLocation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v4);

  if ((HasSensitiveFields & 1) != 0)
    return 1;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  objc_msgSend(a1, "requestElements", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    while (2)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        if ((GEORPProblemHasSensitiveFields(*(void **)(*((_QWORD *)&v13 + 1) + 8 * v11), a2) & 1) != 0)
        {
          v6 = 1;
          goto LABEL_15;
        }
        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v9)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_15:

  return v6;
}

void sub_1893DE044(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemCollectionResponseReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          PBReaderReadString();
          v25 = objc_claimAutoreleasedReturnValue();
          v26 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v25;

        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_34:
          *(_DWORD *)(a1 + 16) = v20;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_1893DEFD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemCollectionResponseReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPProblemCollectionResponseReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893DF030(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemCollectionResponseIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if (v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_37:
          v23 = 0;
          goto LABEL_36;
        }
      }
      else if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_37;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8)
            continue;
          goto LABEL_34;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_37;
      }
LABEL_34:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v23 = a1[*v4] == 0;
LABEL_36:
  PBReaderRecallMark();
  return v23;
}

void sub_1893DFA08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEORPProblemContextReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  const float *v11;
  uint32x4_t v12;
  int8x16_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  int *v18;
  BOOL v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  BOOL v30;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  GEOPlace *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  void *v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  int v70;
  char v71;
  int v72;
  int v73;
  void *v74;
  BOOL v76;
  char v77;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 216));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 212);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 208));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (const float *)(a1 + 228);
  v12 = (uint32x4_t)vld1q_dup_f32(v11);
  v13.i64[0] = 0x100000001;
  v13.i64[1] = 0x100000001;
  v14 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_189CDC010), v13), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_189CDC020), v13)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_189CDBFF0), v13), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_189CDC000), v13))), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_189CDC030), v13)));
  while (2)
  {
    v15 = 1;
    v16 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v15 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v17 = v10 | (v14 > 0xF);
        if (((v17 | v8) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v19 = v17;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v77 = (v18 == 0) | v17;
        v22 = (int *)MEMORY[0x1E0D82BB8];
        v76 = v17;
        break;
      default:
        ++v14;
LABEL_6:
        v15 = v9;
        v16 = v10;
LABEL_8:
        ++v7;
        v9 = v15;
        v10 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_218;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_23;
      v23 += 7;
      v30 = v24++ >= 9;
      if (v30)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_23:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_25:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_218:
      if (v19)
      {
        v71 = 1;
        goto LABEL_247;
      }
      if (v18)
      {
        while (1)
        {
          v72 = *v18++;
          v73 = 0x20000;
          switch(v72)
          {
            case 0:
              goto LABEL_248;
            case 3:
              goto LABEL_241;
            case 4:
              v73 = 0x4000;
              goto LABEL_241;
            case 6:
              v73 = 0x1000000;
              goto LABEL_241;
            case 7:
              v73 = 0x400000;
              goto LABEL_241;
            case 8:
              v73 = 0x100000;
              goto LABEL_241;
            case 9:
              v73 = 512;
              goto LABEL_241;
            case 10:
              v73 = 1024;
              goto LABEL_241;
            case 12:
              v73 = 4096;
              goto LABEL_241;
            case 14:
              v73 = 64;
              goto LABEL_241;
            case 16:
              v73 = 0x800000;
              goto LABEL_241;
            case 18:
              v73 = 0x80000;
              goto LABEL_241;
            case 19:
              v73 = 0x2000;
              goto LABEL_241;
            case 21:
              v73 = 128;
              goto LABEL_241;
            case 22:
              v73 = 32;
              goto LABEL_241;
            case 23:
              v73 = 256;
              goto LABEL_241;
            case 24:
              v73 = 2048;
              goto LABEL_241;
            case 25:
              v73 = 0x200000;
              goto LABEL_241;
            case 26:
              v73 = 0x40000;
              goto LABEL_241;
            case 27:
              v73 = 0x10000;
              goto LABEL_241;
            case 28:
              v73 = 0x8000;
LABEL_241:
              *(_DWORD *)(a1 + 228) |= v73;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_248;
    }
    v33 = v25 >> 3;
    v34 = v19;
    if ((v77 & 1) == 0)
    {
      v35 = v18;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_169;
        if (!PBReaderPlaceMark() || (GEOSessionIDReadAllFrom((_QWORD *)(a1 + 16), v3) & 1) == 0)
          goto LABEL_245;
        PBReaderRecallMark();
        *(_DWORD *)(a1 + 228) |= 1u;
        goto LABEL_213;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_169;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        *(_DWORD *)(a1 + 228) |= 0x10u;
        while (2)
        {
          v42 = *v20;
          v43 = *(_QWORD *)(v3 + v42);
          v44 = v43 + 1;
          if (v43 == -1 || v44 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v43);
            *(_QWORD *)(v3 + v42) = v44;
            v41 |= (unint64_t)(v45 & 0x7F) << v39;
            if (v45 < 0)
            {
              v39 += 7;
              v30 = v40++ >= 9;
              if (v30)
              {
                LODWORD(v41) = 0;
                goto LABEL_174;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v41) = 0;
LABEL_174:
        *(_DWORD *)(a1 + 224) = v41;
        goto LABEL_214;
      case 3:
        if (!v34)
          goto LABEL_169;
        if ((*(_BYTE *)(a1 + 230) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_244;
          v70 = (int)(*(_DWORD *)(a1 + 228) << 14) >> 31;
          goto LABEL_211;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_244;
        v46 = objc_alloc_init(GEOPlace);
        if (!GEOPlaceReadAllFrom((uint64_t)v46, (void *)v3, v9 & 1))
          goto LABEL_243;
        PBReaderRecallMark();
        v47 = 136;
        goto LABEL_167;
      case 4:
        if (!v34)
          goto LABEL_169;
        if ((*(_BYTE *)(a1 + 229) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_244;
          v70 = (int)(*(_DWORD *)(a1 + 228) << 17) >> 31;
          goto LABEL_211;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_244;
        v46 = objc_alloc_init(GEORPMapLocation);
        if (!GEORPMapLocationReadAllFrom((uint64_t)v46, (void *)v3, v9 & 1))
          goto LABEL_243;
        PBReaderRecallMark();
        v47 = 112;
        goto LABEL_167;
      case 6:
        if (!v34 || (*(_BYTE *)(a1 + 231) & 1) != 0)
          goto LABEL_169;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_245;
        v46 = objc_alloc_init(GEORPVisibleTileSet);
        if (!GEORPVisibleTileSetReadAllFrom((uint64_t)v46, (void *)v3))
          goto LABEL_243;
        PBReaderRecallMark();
        -[GEORPProblemContext _addNoFlagsVisibleTileSet:](a1, v46);
        goto LABEL_146;
      case 7:
        if (!v34)
          goto LABEL_169;
        if ((*(_BYTE *)(a1 + 230) & 0x40) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 184;
          goto LABEL_117;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_244;
        v70 = (int)(*(_DWORD *)(a1 + 228) << 9) >> 31;
        goto LABEL_211;
      case 8:
        if (!v34)
          goto LABEL_169;
        if ((*(_BYTE *)(a1 + 230) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_244;
          v70 = (int)(*(_DWORD *)(a1 + 228) << 11) >> 31;
          goto LABEL_211;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_244;
        v46 = objc_alloc_init(GEOPDPlace);
        if (!GEOPDPlaceReadAllFrom((uint64_t)v46, (void *)v3, v9 & 1))
          goto LABEL_243;
        PBReaderRecallMark();
        v47 = 168;
        goto LABEL_167;
      case 9:
        if (!v34 || (*(_BYTE *)(a1 + 229) & 2) != 0)
          goto LABEL_169;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_245;
        v46 = objc_alloc_init(GEODirectionsRequest);
        if (!GEODirectionsRequestReadAllFrom((uint64_t)v46, (void *)v3, v9 & 1))
          goto LABEL_243;
        PBReaderRecallMark();
        -[GEORPProblemContext _addNoFlagsDirectionsRequest:](a1, v46);
        goto LABEL_146;
      case 10:
        if (!v34 || (*(_BYTE *)(a1 + 229) & 4) != 0)
          goto LABEL_169;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_245;
        v46 = objc_alloc_init(GEODirectionsResponse);
        if (!GEODirectionsResponseReadAllFrom((uint64_t)v46, (void *)v3, v9 & 1))
          goto LABEL_243;
        PBReaderRecallMark();
        -[GEORPProblemContext _addNoFlagsDirectionsResponse:](a1, v46);
        goto LABEL_146;
      case 12:
        if (!v34)
          goto LABEL_169;
        if ((*(_BYTE *)(a1 + 229) & 0x10) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 96;
          goto LABEL_117;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_244;
        v70 = (int)(*(_DWORD *)(a1 + 228) << 19) >> 31;
        goto LABEL_211;
      case 13:
        if ((v8 & 1) == 0)
          goto LABEL_169;
        *(_DWORD *)(a1 + 228) |= 2u;
        v51 = *v20;
        v52 = *(_QWORD *)(v3 + v51);
        if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v53 = *(_QWORD *)(*(_QWORD *)(v3 + *v22) + v52);
          *(_QWORD *)(v3 + v51) = v52 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v21) = 1;
          v53 = 0;
        }
        *(_QWORD *)(a1 + 48) = v53;
        goto LABEL_214;
      case 14:
        if (!v34 || (*(_BYTE *)(a1 + 228) & 0x40) != 0)
          goto LABEL_169;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_245;
        v46 = objc_alloc_init(GEORPAuxiliaryControl);
        if (!GEORPAuxiliaryControlReadAllFrom((uint64_t)v46, (void *)v3, v9 & 1))
          goto LABEL_243;
        PBReaderRecallMark();
        -[GEORPProblemContext _addNoFlagsAuxiliaryControl:](a1, v46);
        goto LABEL_146;
      case 15:
        if ((v8 & 1) == 0)
          goto LABEL_169;
        v54 = 0;
        v55 = 0;
        v56 = 0;
        *(_DWORD *)(a1 + 228) |= 4u;
        while (2)
        {
          v57 = *v20;
          v58 = *(_QWORD *)(v3 + v57);
          v59 = v58 + 1;
          if (v58 == -1 || v59 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v60 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v58);
            *(_QWORD *)(v3 + v57) = v59;
            v56 |= (unint64_t)(v60 & 0x7F) << v54;
            if (v60 < 0)
            {
              v54 += 7;
              v30 = v55++ >= 9;
              if (v30)
              {
                v56 = 0;
                goto LABEL_178;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v56 = 0;
LABEL_178:
        *(_QWORD *)(a1 + 144) = v56;
        goto LABEL_214;
      case 16:
        if (!v34)
          goto LABEL_169;
        if ((*(_BYTE *)(a1 + 230) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_244;
          v70 = (int)(*(_DWORD *)(a1 + 228) << 8) >> 31;
          goto LABEL_211;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_244;
        v46 = objc_alloc_init(GEORPTransitLineTileInfo);
        if (!GEORPTransitLineTileInfoReadAllFrom((uint64_t)v46, (void *)v3, v9 & 1))
          goto LABEL_243;
        PBReaderRecallMark();
        v47 = 192;
        goto LABEL_167;
      case 18:
        if (!v34)
          goto LABEL_169;
        if ((*(_BYTE *)(a1 + 230) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_244;
          v70 = (int)(*(_DWORD *)(a1 + 228) << 12) >> 31;
          goto LABEL_211;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_244;
        v46 = objc_alloc_init(GEORPPlaceInfo);
        if (!GEORPPlaceInfoReadAllFrom((uint64_t)v46, (void *)v3, v9 & 1))
          goto LABEL_243;
        PBReaderRecallMark();
        v47 = 160;
        goto LABEL_167;
      case 19:
        if (!v34)
          goto LABEL_169;
        if ((*(_BYTE *)(a1 + 229) & 0x20) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 104;
LABEL_117:
          v61 = *(void **)(a1 + v50);
          *(_QWORD *)(a1 + v50) = v49;
          goto LABEL_168;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_244;
        v70 = (int)(*(_DWORD *)(a1 + 228) << 18) >> 31;
        goto LABEL_211;
      case 20:
        if ((v8 & 1) == 0)
          goto LABEL_169;
        v62 = 0;
        v63 = 0;
        v64 = 0;
        *(_DWORD *)(a1 + 228) |= 8u;
        while (2)
        {
          v65 = *v20;
          v66 = *(_QWORD *)(v3 + v65);
          v67 = v66 + 1;
          if (v66 == -1 || v67 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v68 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v66);
            *(_QWORD *)(v3 + v65) = v67;
            v64 |= (unint64_t)(v68 & 0x7F) << v62;
            if (v68 < 0)
            {
              v62 += 7;
              v30 = v63++ >= 9;
              if (v30)
              {
                LODWORD(v64) = 0;
                goto LABEL_182;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v64) = 0;
LABEL_182:
        *(_DWORD *)(a1 + 220) = -(v64 & 1) ^ ((int)v64 >> 1);
        goto LABEL_214;
      case 21:
        if (!v34)
          goto LABEL_169;
        if ((*(_BYTE *)(a1 + 228) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_244;
          v70 = (int)(*(_DWORD *)(a1 + 228) << 24) >> 31;
          goto LABEL_211;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_244;
        v46 = objc_alloc_init(GEOABAssignmentResponse);
        if (!GEOABAssignmentResponseReadAllFrom((uint64_t)v46, (void *)v3, v9 & 1))
          goto LABEL_243;
        PBReaderRecallMark();
        v47 = 56;
        goto LABEL_167;
      case 22:
        if (!v34 || (*(_BYTE *)(a1 + 228) & 0x20) != 0)
          goto LABEL_169;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_245;
        v46 = objc_alloc_init(GEORPSuggestionList);
        if (!GEORPSuggestionListReadAllFrom((uint64_t)v46, (void *)v3, v9 & 1))
          goto LABEL_243;
        PBReaderRecallMark();
        -[GEORPProblemContext _addNoFlagsAutocompleteSuggestionList:](a1, v46);
        goto LABEL_146;
      case 23:
        if (!v34)
          goto LABEL_169;
        if ((*(_BYTE *)(a1 + 229) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_244;
          v70 = (int)(*(_DWORD *)(a1 + 228) << 23) >> 31;
          goto LABEL_211;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_244;
        v46 = objc_alloc_init(GEORPCurrentEnvironmentManifestURLs);
        if (!GEORPCurrentEnvironmentManifestURLsReadAllFrom((uint64_t)v46, (void *)v3, v9 & 1))
          goto LABEL_243;
        PBReaderRecallMark();
        v47 = 64;
        goto LABEL_167;
      case 24:
        if (!v34 || (*(_BYTE *)(a1 + 229) & 8) != 0)
          goto LABEL_169;
        if ((PBReaderPlaceMark() & 1) == 0)
        {
LABEL_245:
          v71 = 0;
          goto LABEL_246;
        }
        v46 = objc_alloc_init(GEORPPlaceInfo);
        if (!GEORPPlaceInfoReadAllFrom((uint64_t)v46, (void *)v3, v9 & 1))
          goto LABEL_243;
        PBReaderRecallMark();
        -[GEORPProblemContext _addNoFlagsDirectionsWaypointPlaceInfo:](a1, v46);
LABEL_146:

        goto LABEL_212;
      case 25:
        if (!v34)
          goto LABEL_169;
        if ((*(_BYTE *)(a1 + 230) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_244;
          v70 = (int)(*(_DWORD *)(a1 + 228) << 10) >> 31;
          goto LABEL_211;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_244;
        v46 = objc_alloc_init(GEOServicesState);
        if (!GEOServicesStateReadAllFrom((uint64_t)v46, (void *)v3))
          goto LABEL_243;
        PBReaderRecallMark();
        v47 = 176;
        goto LABEL_167;
      case 26:
        if (!v34)
          goto LABEL_169;
        if ((*(_BYTE *)(a1 + 230) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_244;
          v70 = (int)(*(_DWORD *)(a1 + 228) << 13) >> 31;
          goto LABEL_211;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_244;
        v46 = objc_alloc_init(GEORPPersonalizedMaps);
        if (!GEORPPersonalizedMapsReadAllFrom((uint64_t)v46, (void *)v3, v9 & 1))
          goto LABEL_243;
        PBReaderRecallMark();
        v47 = 152;
        goto LABEL_167;
      case 27:
        if (!v34)
          goto LABEL_169;
        if ((*(_BYTE *)(a1 + 230) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_244;
          v70 = (int)(*(_DWORD *)(a1 + 228) << 15) >> 31;
          goto LABEL_211;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_244;
        v46 = objc_alloc_init(GEORPNavigationSettings);
        if (!GEORPNavigationSettingsReadAllFrom((uint64_t)v46, (void *)v3))
          goto LABEL_243;
        PBReaderRecallMark();
        v47 = 128;
        goto LABEL_167;
      case 28:
        if (!v34)
        {
LABEL_169:
          v69 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if ((v69 & 1) == 0)
          {
LABEL_242:
            v71 = 0;
            goto LABEL_247;
          }
LABEL_214:
          if (!v19 && v7 == 0)
            goto LABEL_218;
          continue;
        }
        if ((*(_BYTE *)(a1 + 229) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_244;
          v70 = (int)(*(_DWORD *)(a1 + 228) << 16) >> 31;
LABEL_211:
          v7 += v70;
LABEL_212:
          v19 = v76;
LABEL_213:
          v21 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_214;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_244;
        v46 = objc_alloc_init(GEORPMerchantLookupContext);
        if (GEORPMerchantLookupContextReadAllFrom((uint64_t)v46, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v47 = 120;
LABEL_167:
          v61 = *(void **)(a1 + v47);
          *(_QWORD *)(a1 + v47) = v46;
LABEL_168:

          --v7;
          goto LABEL_212;
        }
LABEL_243:

LABEL_244:
        v71 = 0;
        v19 = v76;
LABEL_246:
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_247:
        *(_DWORD *)(a1 + 228) |= 0x20000u;
        *(_DWORD *)(a1 + 228) |= 0x4000u;
        *(_DWORD *)(a1 + 228) |= 0x1000000u;
        *(_DWORD *)(a1 + 228) |= 0x400000u;
        *(_DWORD *)(a1 + 228) |= 0x100000u;
        *(_DWORD *)(a1 + 228) |= 0x200u;
        *(_DWORD *)(a1 + 228) |= 0x400u;
        *(_DWORD *)(a1 + 228) |= 0x1000u;
        *(_DWORD *)(a1 + 228) |= 0x40u;
        *(_DWORD *)(a1 + 228) |= 0x800000u;
        *(_DWORD *)(a1 + 228) |= 0x80000u;
        *(_DWORD *)(a1 + 228) |= 0x2000u;
        *(_DWORD *)(a1 + 228) |= 0x80u;
        *(_DWORD *)(a1 + 228) |= 0x20u;
        *(_DWORD *)(a1 + 228) |= 0x100u;
        *(_DWORD *)(a1 + 228) |= 0x800u;
        *(_DWORD *)(a1 + 228) |= 0x200000u;
        *(_DWORD *)(a1 + 228) |= 0x40000u;
        *(_DWORD *)(a1 + 228) |= 0x10000u;
        *(_DWORD *)(a1 + 228) |= 0x8000u;
        if ((v71 & 1) != 0)
        {
LABEL_248:
          v3 = *(_BYTE *)(v3 + *v21) == 0;
          if (v19)
            goto LABEL_249;
        }
        else
        {
          v3 = 0;
          if (v19)
          {
LABEL_249:
            v74 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v48 = PBReaderSkipValueWithTag();
        v21 = (int *)MEMORY[0x1E0D82BC8];
        if (!v48)
          goto LABEL_242;
        goto LABEL_214;
    }
  }
}

void sub_1893E0E04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E0F50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E1288(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E13D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E1518(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E1850(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E1B88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E1D50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E2108(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E2250(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E2398(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E2560(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E26A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E29E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E2B2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E2E64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E2FAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E30F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E323C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E537C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPProblemContextCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];
  _BYTE v58[128];
  _BYTE v59[128];
  _BYTE v60[128];
  _BYTE v61[128];
  _BYTE v62[128];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[17], "readAll:", 1);
  objc_msgSend(a1[14], "readAll:", 1);
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v2 = a1[25];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v53, v62, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v54;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v54 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v53 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v53, v62, 16);
    }
    while (v4);
  }

  objc_msgSend(a1[21], "readAll:", 1);
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v7 = a1[9];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v49, v61, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v50;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v50 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v49 + 1) + 8 * v11++), "readAll:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v49, v61, 16);
    }
    while (v9);
  }

  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v12 = a1[10];
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v45, v60, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v46;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v46 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v45 + 1) + 8 * v16++), "readAll:", 1);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v45, v60, 16);
    }
    while (v14);
  }

  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v17 = a1[5];
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v41, v59, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v42;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v42 != v20)
          objc_enumerationMutation(v17);
        objc_msgSend(*(id *)(*((_QWORD *)&v41 + 1) + 8 * v21++), "readAll:", 1);
      }
      while (v19 != v21);
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v41, v59, 16);
    }
    while (v19);
  }

  objc_msgSend(a1[24], "readAll:", 1);
  objc_msgSend(a1[20], "readAll:", 1);
  objc_msgSend(a1[7], "readAll:", 1);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v22 = a1[4];
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v37, v58, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v38;
    do
    {
      v26 = 0;
      do
      {
        if (*(_QWORD *)v38 != v25)
          objc_enumerationMutation(v22);
        objc_msgSend(*(id *)(*((_QWORD *)&v37 + 1) + 8 * v26++), "readAll:", 1);
      }
      while (v24 != v26);
      v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v37, v58, 16);
    }
    while (v24);
  }

  objc_msgSend(a1[8], "readAll:", 1);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v27 = a1[11];
  v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v33, v57, 16);
  if (v28)
  {
    v29 = v28;
    v30 = *(_QWORD *)v34;
    do
    {
      v31 = 0;
      do
      {
        if (*(_QWORD *)v34 != v30)
          objc_enumerationMutation(v27);
        objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 8 * v31++), "readAll:", 1, (_QWORD)v33);
      }
      while (v29 != v31);
      v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v33, v57, 16);
    }
    while (v29);
  }

  objc_msgSend(a1[22], "readAll:", 1);
  objc_msgSend(a1[19], "readAll:", 1);
  objc_msgSend(a1[16], "readAll:", 1);
  return objc_msgSend(a1[15], "readAll:", 1);
}

uint64_t GEORPProblemContextReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 212))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPProblemContextReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 216));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 208) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 212) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPProblemContextReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPProblemContextReadAllFrom_initialTag;
  Specified = GEORPProblemContextReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEORPProblemContextCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 216));
  return Specified;
}

void sub_1893E59CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEORPProblemContextReadFrom(uint64_t a1, void *a2)
{
  id v3;
  uint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPProblemContextReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893E5A2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPVisibleTileSetIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  _BOOL8 v29;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEORPVisibleTileKeyIsValid(a1))
        {
LABEL_46:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          if ((v8 & 7) != 0)
            goto LABEL_46;
          v24 = 0;
          while (1)
          {
            v25 = *v2;
            v26 = *(_QWORD *)&a1[v25];
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
              goto LABEL_41;
            v28 = *(char *)(*(_QWORD *)&a1[*v5] + v26);
            *(_QWORD *)&a1[v25] = v27;
            if (v28 < 0)
            {
              v23 = v24++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_43;
          }
        }
        if ((_DWORD)v17 == 1)
        {
          if ((v8 & 7) != 0)
            goto LABEL_46;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              break;
            v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0)
            {
              v23 = v18++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_43;
          }
LABEL_41:
          a1[*v4] = 1;
          continue;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_46;
      }
LABEL_43:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v29 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v29;
}

BOOL GEORPTransitLineTileInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  _BOOL8 v24;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_38;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_38;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        if (v15 != 2)
          goto LABEL_40;
LABEL_32:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_40;
        goto LABEL_37;
      }
      if ((_DWORD)v17 == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_40;
        v18 = 0;
        while (1)
        {
          v19 = *v2;
          v20 = *(_QWORD *)&a1[v19];
          v21 = v20 + 1;
          if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
            break;
          v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
          *(_QWORD *)&a1[v19] = v21;
          if (v22 < 0 && v18++ <= 8)
            continue;
          goto LABEL_37;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_40:
        v24 = 0;
        goto LABEL_39;
      }
LABEL_37:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_38;
    }
    if (v15 != 2)
      goto LABEL_40;
    goto LABEL_32;
  }
LABEL_38:
  v24 = a1[*v4] == 0;
LABEL_39:
  PBReaderRecallMark();
  return v24;
}

BOOL GEORPSuggestionListIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2)
            goto LABEL_36;
          goto LABEL_20;
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPSuggestionEntryIsValid(a1))
            goto LABEL_36;
          goto LABEL_33;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceRequestIsValid(a1))
            goto LABEL_36;
          goto LABEL_33;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceResponseIsValid(a1))
            goto LABEL_36;
LABEL_33:
          PBReaderRecallMark();
          goto LABEL_34;
        default:
LABEL_20:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_36:
            PBReaderRecallMark();
            return 0;
          }
LABEL_34:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_35;
          break;
      }
    }
  }
LABEL_35:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_1893E6890(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPProblemContextIsDirty(uint64_t a1)
{
  int v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  _BYTE v45[128];
  _BYTE v46[128];
  _BYTE v47[128];
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 216));
  v2 = *(_DWORD *)(a1 + 228);
  if ((v2 & 0x2000000) != 0)
    return 1;
  if ((v2 & 0x20000) != 0)
  {
    if ((GEOPlaceIsDirty(*(os_unfair_lock_s **)(a1 + 136)) & 1) != 0)
      return 1;
    v2 = *(_DWORD *)(a1 + 228);
  }
  if ((v2 & 0x4000) != 0)
  {
    if (GEORPMapLocationIsDirty(*(_QWORD *)(a1 + 112)))
      return 1;
    v2 = *(_DWORD *)(a1 + 228);
  }
  if ((v2 & 0x1400000) == 0)
  {
    if ((v2 & 0x100000) == 0)
      goto LABEL_12;
    if ((GEOPDPlaceIsDirty(*(os_unfair_lock_s **)(a1 + 168)) & 1) == 0)
    {
      v2 = *(_DWORD *)(a1 + 228);
LABEL_12:
      if ((v2 & 0x1640) != 0)
        return 1;
      if ((v2 & 0x800000) != 0)
      {
        if (GEORPTransitLineTileInfoIsDirty(*(_QWORD *)(a1 + 192)))
          return 1;
        v2 = *(_DWORD *)(a1 + 228);
      }
      if ((v2 & 0x80000) != 0)
      {
        if ((GEORPPlaceInfoIsDirty(*(os_unfair_lock_s **)(a1 + 160)) & 1) != 0)
          return 1;
        v2 = *(_DWORD *)(a1 + 228);
      }
      if ((v2 & 0x2000) != 0)
        return 1;
      if ((v2 & 0x80) != 0)
      {
        if ((GEOABAssignmentResponseIsDirty(*(os_unfair_lock_s **)(a1 + 56)) & 1) != 0)
          return 1;
        v2 = *(_DWORD *)(a1 + 228);
      }
      if ((v2 & 0x20) != 0)
        return 1;
      if ((v2 & 0x100) != 0)
      {
        if ((GEORPCurrentEnvironmentManifestURLsIsDirty(*(os_unfair_lock_s **)(a1 + 64)) & 1) != 0)
          return 1;
        v2 = *(_DWORD *)(a1 + 228);
      }
      if ((v2 & 0x250800) != 0)
        return 1;
      if ((v2 & 0x8000) != 0)
      {
        if ((GEORPMerchantLookupContextIsDirty(*(os_unfair_lock_s **)(a1 + 120)) & 1) != 0)
          return 1;
        v2 = *(_DWORD *)(a1 + 228);
      }
      if ((v2 & 0x200) != 0)
      {
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v5 = *(id *)(a1 + 72);
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
        if (v6)
        {
          v7 = v6;
          v8 = *(_QWORD *)v41;
LABEL_36:
          v9 = 0;
          while (1)
          {
            if (*(_QWORD *)v41 != v8)
              objc_enumerationMutation(v5);
            if ((GEODirectionsRequestIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v40 + 1) + 8 * v9)) & 1) != 0)
              goto LABEL_84;
            if (v7 == ++v9)
            {
              v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
              if (v7)
                goto LABEL_36;
              break;
            }
          }
        }

        v2 = *(_DWORD *)(a1 + 228);
      }
      if ((v2 & 0x400) != 0)
      {
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v5 = *(id *)(a1 + 80);
        v10 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v36, v47, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v37;
LABEL_46:
          v13 = 0;
          while (1)
          {
            if (*(_QWORD *)v37 != v12)
              objc_enumerationMutation(v5);
            if ((GEODirectionsResponseIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v36 + 1) + 8 * v13)) & 1) != 0)
              goto LABEL_84;
            if (v11 == ++v13)
            {
              v11 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v36, v47, 16);
              if (v11)
                goto LABEL_46;
              break;
            }
          }
        }

        v2 = *(_DWORD *)(a1 + 228);
      }
      if ((v2 & 0x40) != 0)
      {
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v5 = *(id *)(a1 + 40);
        v14 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v32, v46, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v33;
LABEL_56:
          v17 = 0;
          while (1)
          {
            if (*(_QWORD *)v33 != v16)
              objc_enumerationMutation(v5);
            if ((GEORPAuxiliaryControlIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v32 + 1) + 8 * v17)) & 1) != 0)
              goto LABEL_84;
            if (v15 == ++v17)
            {
              v15 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v32, v46, 16);
              if (v15)
                goto LABEL_56;
              break;
            }
          }
        }

        v2 = *(_DWORD *)(a1 + 228);
      }
      if ((v2 & 0x20) != 0)
      {
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v5 = *(id *)(a1 + 32);
        v18 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v28, v45, 16);
        if (v18)
        {
          v19 = v18;
          v20 = *(_QWORD *)v29;
LABEL_66:
          v21 = 0;
          while (1)
          {
            if (*(_QWORD *)v29 != v20)
              objc_enumerationMutation(v5);
            if ((GEORPSuggestionListIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v28 + 1) + 8 * v21)) & 1) != 0)
              goto LABEL_84;
            if (v19 == ++v21)
            {
              v19 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v28, v45, 16);
              if (v19)
                goto LABEL_66;
              break;
            }
          }
        }

        v2 = *(_DWORD *)(a1 + 228);
      }
      if ((v2 & 0x800) == 0)
        return 0;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v5 = *(id *)(a1 + 88);
      v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v44, 16);
      if (!v3)
      {
LABEL_85:

        return v3;
      }
      v22 = *(_QWORD *)v25;
LABEL_77:
      v23 = 0;
      while (1)
      {
        if (*(_QWORD *)v25 != v22)
          objc_enumerationMutation(v5);
        if ((GEORPPlaceInfoIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v24 + 1) + 8 * v23)) & 1) != 0)
          break;
        if (v3 == ++v23)
        {
          v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v44, 16);
          if (v3)
            goto LABEL_77;
          goto LABEL_85;
        }
      }
LABEL_84:
      v3 = 1;
      goto LABEL_85;
    }
  }
  return 1;
}

os_unfair_lock_s *GEORPProblemContextIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPProblemContextIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 54);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void *GEORPSuggestionListHasSensitiveFields(void *result, uint64_t a2)
{
  void *v3;
  uint64_t HasSensitiveFields;

  if (result)
  {
    objc_msgSend(result, "autocompleteRequest");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOPDPlaceRequestHasSensitiveFields(v3, a2);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void GEORPSuggestionListClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  int HasSensitiveFields;
  void *v7;
  id v8;

  if (a3
    && objc_msgSend(a1, "hasAutocompleteRequest")
    && (objc_msgSend(a1, "autocompleteRequest"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEOPDPlaceRequestHasSensitiveFields(v5, a2),
        v5,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "autocompleteRequest");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (id)objc_msgSend(v7, "copy");

    GEOPDPlaceRequestClearSensitiveFields(v8, a2, 0);
    objc_msgSend(a1, "setAutocompleteRequest:", v8);
  }
  else
  {
    objc_msgSend(a1, "autocompleteRequest");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

}

void sub_1893E7F84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E9084(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemCorrectionsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint16x4_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  int *v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  GEORPCorrectedField *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  void *v49;
  char v50;
  __int16 v51;
  char v52;
  int v53;
  __int16 v54;
  void *v55;
  BOOL v57;
  char v58;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 112));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 108);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 104));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 120));
  v12 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16(v11, (uint16x4_t)0xFFF9FFFEFFFDFFFBLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 120) >> 6) & 1)+ ((*(_WORD *)(a1 + 120) >> 1) & 1)+ ((*(_WORD *)(a1 + 120) >> 11) & 1))+ (unsigned __int16)vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16(v11, (uint16x4_t)0xFFF7FFFCFFF6FFF8), (int8x8_t)0x1000100010001));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v13 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v15 = v10 | (v12 > 7);
        if (((v15 | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v17 = v15;
        v58 = (v16 == 0) | v15;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        v57 = v15;
        break;
      default:
        ++v12;
LABEL_6:
        v13 = v9;
        v14 = v10;
LABEL_8:
        ++v7;
        v9 = v13;
        v10 = v14;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_128;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_128:
      if (v17)
      {
        v52 = 1;
        goto LABEL_147;
      }
      if (v16)
      {
        while (1)
        {
          v53 = *v16++;
          v54 = 8;
          switch(v53)
          {
            case 0:
              goto LABEL_148;
            case 1:
              goto LABEL_142;
            case 2:
              v54 = 32;
              goto LABEL_142;
            case 3:
              v54 = 4;
              goto LABEL_142;
            case 4:
              v54 = 128;
              goto LABEL_142;
            case 5:
              v54 = 64;
              goto LABEL_142;
            case 6:
              v54 = 2;
              goto LABEL_142;
            case 8:
              v54 = 2048;
              goto LABEL_142;
            case 9:
              v54 = 256;
              goto LABEL_142;
            case 10:
              v54 = 1024;
              goto LABEL_142;
            case 15:
              v54 = 16;
              goto LABEL_142;
            case 16:
              v54 = 512;
LABEL_142:
              *(_WORD *)(a1 + 120) |= v54;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_148;
    }
    v31 = v23 >> 3;
    v32 = v17;
    if ((v58 & 1) == 0)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32 || (*(_WORD *)(a1 + 120) & 8) != 0)
          goto LABEL_103;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_144;
        v37 = objc_alloc_init(GEORPCorrectedField);
        if (!GEORPCorrectedFieldReadAllFrom((uint64_t)v37, (void *)v3, v9 & 1))
          goto LABEL_145;
        PBReaderRecallMark();
        -[GEORPProblemCorrections _addNoFlagsCorrectedField:](a1, v37);
        goto LABEL_95;
      case 2:
        if (!v32)
          goto LABEL_103;
        if ((*(_WORD *)(a1 + 120) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_144;
          v51 = *(_WORD *)(a1 + 120) << 10;
          goto LABEL_125;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_144;
        v37 = objc_alloc_init(GEORPCorrectedLabel);
        if (!GEORPCorrectedLabelReadAllFrom((uint64_t)v37, (void *)v3, v9 & 1))
          goto LABEL_145;
        PBReaderRecallMark();
        v38 = 48;
        goto LABEL_101;
      case 3:
        if (!v32)
          goto LABEL_103;
        if ((*(_WORD *)(a1 + 120) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_144;
          v51 = *(_WORD *)(a1 + 120) << 13;
          goto LABEL_125;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_144;
        v37 = objc_alloc_init(GEORPCorrectedCoordinate);
        if (!GEORPCorrectedCoordinateReadAllFrom((uint64_t)v37, (void *)v3, v9 & 1))
          goto LABEL_145;
        PBReaderRecallMark();
        v38 = 24;
        goto LABEL_101;
      case 4:
        if (!v32)
          goto LABEL_103;
        if ((*(_WORD *)(a1 + 120) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_144;
          v51 = *(_WORD *)(a1 + 120) << 8;
          goto LABEL_125;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_144;
        v37 = objc_alloc_init(GEORPCorrectedSearch);
        if (!GEORPCorrectedSearchReadAllFrom((uint64_t)v37, (void *)v3, v9 & 1))
          goto LABEL_145;
        PBReaderRecallMark();
        v38 = 64;
        goto LABEL_101;
      case 5:
        if (!v32)
          goto LABEL_103;
        if ((*(_WORD *)(a1 + 120) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_144;
          v51 = *(_WORD *)(a1 + 120) << 9;
          goto LABEL_125;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_144;
        v37 = objc_alloc_init(GEORPMapLocation);
        if (!GEORPMapLocationReadAllFrom((uint64_t)v37, (void *)v3, v9 & 1))
          goto LABEL_145;
        PBReaderRecallMark();
        v38 = 56;
        goto LABEL_101;
      case 6:
        if (!v32)
          goto LABEL_103;
        if ((*(_WORD *)(a1 + 120) & 2) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v39;

          --v7;
          goto LABEL_126;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_144;
        v51 = *(_WORD *)(a1 + 120) << 14;
        goto LABEL_125;
      case 8:
        if (!v32)
          goto LABEL_103;
        if ((*(_WORD *)(a1 + 120) & 0x800) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_144;
          v51 = 16 * *(_WORD *)(a1 + 120);
          goto LABEL_125;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_144;
        v37 = objc_alloc_init(GEORPPlaceProblem);
        if (!GEORPPlaceProblemReadAllFrom((uint64_t)v37, (void *)v3))
          goto LABEL_145;
        PBReaderRecallMark();
        v38 = 96;
        goto LABEL_101;
      case 9:
        if (!v32)
          goto LABEL_103;
        if ((*(_WORD *)(a1 + 120) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_144;
          v51 = *(_WORD *)(a1 + 120) << 7;
          goto LABEL_125;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_144;
        v37 = objc_alloc_init(GEORPDirectionsProblem);
        if (!GEORPDirectionsProblemReadAllFrom((uint64_t)v37, (void *)v3, v9 & 1))
          goto LABEL_145;
        PBReaderRecallMark();
        v38 = 72;
        goto LABEL_101;
      case 10:
        if (!v32 || (*(_WORD *)(a1 + 120) & 0x400) != 0)
          goto LABEL_103;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_144;
        v37 = objc_alloc_init(GEORPPhotoWithMetadata);
        if (!GEORPPhotoWithMetadataReadAllFrom((uint64_t)v37, (void *)v3, v9 & 1))
          goto LABEL_145;
        PBReaderRecallMark();
        -[GEORPProblemCorrections _addNoFlagsPhotoWithMetadata:](a1, v37);
        goto LABEL_95;
      case 14:
        if ((v8 & 1) == 0)
          goto LABEL_103;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 120) |= 1u;
        while (2)
        {
          v45 = *v18;
          v46 = *(_QWORD *)(v3 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v46);
            *(_QWORD *)(v3 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              v28 = v43++ >= 9;
              if (v28)
              {
                v44 = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v44 = 0;
LABEL_108:
        *(_BYTE *)(a1 + 116) = v44 != 0;
        goto LABEL_127;
      case 15:
        if (!v32 || (*(_WORD *)(a1 + 120) & 0x10) != 0)
          goto LABEL_103;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_144;
        v37 = objc_alloc_init(GEORPCorrectedFlag);
        if (!GEORPCorrectedFlagReadAllFrom((uint64_t)v37, (void *)v3))
          goto LABEL_145;
        PBReaderRecallMark();
        -[GEORPProblemCorrections _addNoFlagsCorrectedFlag:](a1, v37);
LABEL_95:

        goto LABEL_102;
      case 16:
        if (!v32)
        {
LABEL_103:
          v50 = PBReaderSkipValueWithTag();
          v20 = (int *)MEMORY[0x1E0D82BB8];
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v50 & 1) == 0)
          {
LABEL_143:
            v52 = 0;
            goto LABEL_147;
          }
LABEL_127:
          if (!v17 && v7 == 0)
            goto LABEL_128;
          continue;
        }
        if ((*(_WORD *)(a1 + 120) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_144:
            v52 = 0;
            goto LABEL_146;
          }
          v51 = *(_WORD *)(a1 + 120) << 6;
LABEL_125:
          v7 += v51 >> 15;
          goto LABEL_126;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_144;
        v37 = objc_alloc_init(GEORPMerchantLookupCorrections);
        if (GEORPMerchantLookupCorrectionsReadAllFrom((uint64_t)v37, (void *)v3))
        {
          PBReaderRecallMark();
          v38 = 80;
LABEL_101:
          v49 = *(void **)(a1 + v38);
          *(_QWORD *)(a1 + v38) = v37;

          --v7;
LABEL_102:
          v17 = v57;
LABEL_126:
          v19 = (int *)MEMORY[0x1E0D82BC8];
          v20 = (int *)MEMORY[0x1E0D82BB8];
          goto LABEL_127;
        }
LABEL_145:

        v52 = 0;
        v17 = v57;
LABEL_146:
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_147:
        *(_WORD *)(a1 + 120) |= 8u;
        *(_WORD *)(a1 + 120) |= 0x20u;
        *(_WORD *)(a1 + 120) |= 4u;
        *(_WORD *)(a1 + 120) |= 0x80u;
        *(_WORD *)(a1 + 120) |= 0x40u;
        *(_WORD *)(a1 + 120) |= 2u;
        *(_WORD *)(a1 + 120) |= 0x800u;
        *(_WORD *)(a1 + 120) |= 0x100u;
        *(_WORD *)(a1 + 120) |= 0x400u;
        *(_WORD *)(a1 + 120) |= 0x10u;
        *(_WORD *)(a1 + 120) |= 0x200u;
        if ((v52 & 1) != 0)
        {
LABEL_148:
          v3 = *(_BYTE *)(v3 + *v19) == 0;
          if (v17)
            goto LABEL_149;
        }
        else
        {
          v3 = 0;
          if (v17)
          {
LABEL_149:
            v55 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v41 = PBReaderSkipValueWithTag();
        v20 = (int *)MEMORY[0x1E0D82BB8];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        if (!v41)
          goto LABEL_143;
        goto LABEL_127;
    }
  }
}

void sub_1893E9EA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893E9FE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EA128(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EA26C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EA3B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EA4F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EA634(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EA778(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EAB18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EAE4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EBF10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPProblemCorrectionsCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v2 = a1[4];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v27;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v27 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
    }
    while (v4);
  }

  objc_msgSend(a1[6], "readAll:", 1);
  objc_msgSend(a1[3], "readAll:", 1);
  objc_msgSend(a1[8], "readAll:", 1);
  objc_msgSend(a1[7], "readAll:", 1);
  objc_msgSend(a1[12], "readAll:", 1);
  objc_msgSend(a1[9], "readAll:", 1);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v7 = a1[11];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v31, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v23;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v23 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * v11++), "readAll:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v31, 16);
    }
    while (v9);
  }

  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v12 = a1[5];
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v30, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v19;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v19 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * v16++), "readAll:", 1, (_QWORD)v18);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v30, 16);
    }
    while (v14);
  }

  return objc_msgSend(a1[10], "readAll:", 1);
}

unint64_t GEORPProblemCorrectionsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 108))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPProblemCorrectionsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 104) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 108) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPProblemCorrectionsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPProblemCorrectionsReadAllFrom_initialTag;
  Specified = GEORPProblemCorrectionsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEORPProblemCorrectionsCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  return Specified;
}

void sub_1893EC348(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemCorrectionsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPProblemCorrectionsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893EC3A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EC7EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPProblemCorrectionsIsDirty(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 112));
  v2 = *(_WORD *)(a1 + 120);
  if ((v2 & 0x1008) != 0)
    return 1;
  if ((v2 & 0x20) != 0)
  {
    if (GEORPCorrectedLabelIsDirty(*(_QWORD *)(a1 + 48)))
      return 1;
    v2 = *(_WORD *)(a1 + 120);
  }
  if ((v2 & 4) != 0)
  {
    if (GEORPCorrectedCoordinateIsDirty(*(_QWORD *)(a1 + 24)))
      return 1;
    v2 = *(_WORD *)(a1 + 120);
  }
  if ((v2 & 0x80) != 0)
  {
    if ((GEORPCorrectedSearchIsDirty(*(os_unfair_lock_s **)(a1 + 64)) & 1) != 0)
      return 1;
    v2 = *(_WORD *)(a1 + 120);
  }
  if ((v2 & 0x40) != 0)
  {
    if (GEORPMapLocationIsDirty(*(_QWORD *)(a1 + 56)))
      return 1;
    v2 = *(_WORD *)(a1 + 120);
  }
  if ((v2 & 0x802) == 0)
  {
    if ((v2 & 0x100) != 0)
    {
      if ((GEORPDirectionsProblemIsDirty(*(os_unfair_lock_s **)(a1 + 72)) & 1) != 0)
        return 1;
      v2 = *(_WORD *)(a1 + 120);
    }
    if ((v2 & 0x610) == 0)
    {
      if ((v2 & 8) != 0)
      {
        v18 = 0u;
        v19 = 0u;
        v16 = 0u;
        v17 = 0u;
        v5 = *(id *)(a1 + 32);
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
        if (v6)
        {
          v7 = v6;
          v8 = *(_QWORD *)v17;
LABEL_24:
          v9 = 0;
          while (1)
          {
            if (*(_QWORD *)v17 != v8)
              objc_enumerationMutation(v5);
            if (GEORPCorrectedFieldIsDirty(*(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v9)))
              goto LABEL_42;
            if (v7 == ++v9)
            {
              v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
              if (v7)
                goto LABEL_24;
              break;
            }
          }
        }

        v2 = *(_WORD *)(a1 + 120);
      }
      if ((v2 & 0x400) == 0)
        return 0;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v5 = *(id *)(a1 + 88);
      v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
      if (!v3)
      {
LABEL_43:

        return v3;
      }
      v10 = *(_QWORD *)v13;
LABEL_35:
      v11 = 0;
      while (1)
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v5);
        if (GEORPPhotoWithMetadataIsDirty(*(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v11)))
          break;
        if (v3 == ++v11)
        {
          v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
          if (v3)
            goto LABEL_35;
          goto LABEL_43;
        }
      }
LABEL_42:
      v3 = 1;
      goto LABEL_43;
    }
  }
  return 1;
}

os_unfair_lock_s *GEORPProblemCorrectionsIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPProblemCorrectionsIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 28);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1893ED3EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EDD64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemOptInRequestReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  void *v46;
  char v47;
  char v48;
  char v49;
  int v50;
  char v51;
  void *v52;
  GEORPUserCredentials *v54;
  char v55;
  char v56;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 64)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFFFFFEFFFDLL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 2;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v56 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v55 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_80;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_80:
      if ((v15 & 1) != 0)
      {
        v49 = 1;
        goto LABEL_91;
      }
      if (v16)
      {
        while (1)
        {
          v50 = *v16++;
          v51 = 4;
          switch(v50)
          {
            case 0:
              goto LABEL_92;
            case 1:
              goto LABEL_87;
            case 3:
              v51 = 8;
              goto LABEL_87;
            case 4:
              v51 = 2;
              goto LABEL_87;
            case 5:
              v51 = 16;
LABEL_87:
              *(_BYTE *)(a1 + 64) |= v51;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_92;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if ((v56 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31)
          goto LABEL_63;
        if ((*(_BYTE *)(a1 + 64) & 4) == 0)
        {
          PBReaderReadString();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = 24;
          goto LABEL_61;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_90;
        v48 = 32 * *(_BYTE *)(a1 + 64);
        goto LABEL_77;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_63;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (2)
        {
          v42 = *v17;
          v43 = *(_QWORD *)(v3 + v42);
          v44 = v43 + 1;
          if (v43 == -1 || v44 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v43);
            *(_QWORD *)(v3 + v42) = v44;
            v41 |= (unint64_t)(v45 & 0x7F) << v39;
            if (v45 < 0)
            {
              v39 += 7;
              v27 = v40++ >= 9;
              if (v27)
              {
                v41 = 0;
                goto LABEL_68;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v41 = 0;
LABEL_68:
        *(_BYTE *)(a1 + 60) = v41 != 0;
        goto LABEL_79;
      case 3:
        if (!v31)
          goto LABEL_63;
        if ((*(_BYTE *)(a1 + 64) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_90;
          v48 = 16 * *(_BYTE *)(a1 + 64);
LABEL_77:
          v7 += v48 >> 7;
LABEL_78:
          v15 = v55;
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_79:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_80;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_90;
        v54 = objc_alloc_init(GEORPUserCredentials);
        if (GEORPUserCredentialsReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v46 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v54;
LABEL_62:

          --v7;
          goto LABEL_78;
        }

LABEL_90:
        v49 = 0;
        v15 = v55;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_91:
        *(_BYTE *)(a1 + 64) |= 4u;
        *(_BYTE *)(a1 + 64) |= 8u;
        *(_BYTE *)(a1 + 64) |= 2u;
        *(_BYTE *)(a1 + 64) |= 0x10u;
        if ((v49 & 1) != 0)
        {
LABEL_92:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_93;
        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
          {
LABEL_93:
            v52 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 4:
        if (!v31)
          goto LABEL_63;
        if ((*(_BYTE *)(a1 + 64) & 2) == 0)
        {
          PBReaderReadData();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = 16;
          goto LABEL_61;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_90;
        v48 = *(_BYTE *)(a1 + 64) << 6;
        goto LABEL_77;
      case 5:
        if (!v31)
        {
LABEL_63:
          v47 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v55;
          if ((v47 & 1) == 0)
          {
LABEL_88:
            v49 = 0;
            goto LABEL_91;
          }
          goto LABEL_79;
        }
        if ((*(_BYTE *)(a1 + 64) & 0x10) == 0)
        {
          PBReaderReadString();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = 40;
LABEL_61:
          v46 = *(void **)(a1 + v37);
          *(_QWORD *)(a1 + v37) = v36;
          goto LABEL_62;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_90;
        v48 = 8 * *(_BYTE *)(a1 + 64);
        goto LABEL_77;
      default:
        v38 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v55;
        if (!v38)
          goto LABEL_88;
        goto LABEL_79;
    }
  }
}

void sub_1893EE534(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EE678(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EE7B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EEE00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemOptInRequestReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPProblemOptInRequestReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 48) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 52) = objc_msgSend(v6, "length");
      Specified = GEORPProblemOptInRequestReadSpecified(a1, (unint64_t)v6, (int *)&GEORPProblemOptInRequestReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_1893EEF78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EF408(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893EF710(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F0514(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F08DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemRequestReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;
  GEORPUserCredentials *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  char v43;
  __int16 v44;
  char v45;
  int v46;
  int v47;
  __int16 v48;
  void *v49;
  int v51;
  char v52;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 100);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 96));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = *(unsigned __int16 *)(a1 + 108);
  v12 = ((v11 >> 6) & 1)
      + ((v11 >> 1) & 1)
      + ((v11 >> 3) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(v11), (uint16x4_t)0xFFFCFFFEFFF9FFF8), (int8x8_t)0x1000100010001))+ (v11 & 1)+ ((v11 >> 9) & 1)+ ((v11 >> 5) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v13 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v15 = v10 | (v12 > 7);
        if (((v15 | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        LODWORD(v17) = v15;
        v52 = (v16 == 0) | v15;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_6:
        v13 = v9;
        v14 = v10;
LABEL_8:
        ++v7;
        v9 = v13;
        v10 = v14;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_109;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_109:
      if ((v17 & 1) != 0)
      {
        v45 = 1;
        goto LABEL_128;
      }
      if (v16)
      {
        while (1)
        {
          v47 = *v16++;
          v46 = v47;
          v48 = 128;
          switch(v47)
          {
            case 0:
              goto LABEL_129;
            case 1:
              goto LABEL_123;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
              continue;
            case 6:
              v48 = 256;
              goto LABEL_123;
            case 9:
              v48 = 1;
              goto LABEL_123;
            case 10:
              v48 = 4;
              goto LABEL_123;
            case 11:
              v48 = 16;
              goto LABEL_123;
            case 12:
              v48 = 512;
              goto LABEL_123;
            case 13:
              v48 = 32;
              goto LABEL_123;
            case 14:
              v48 = 2;
              goto LABEL_123;
            case 15:
              v48 = 64;
              goto LABEL_123;
            default:
              if (v46 != 202)
                continue;
              v48 = 8;
LABEL_123:
              *(_WORD *)(a1 + 108) |= v48;
              break;
          }
        }
      }
      goto LABEL_129;
    }
    v31 = v23 >> 3;
    v32 = (char)v17;
    if ((v52 & 1) == 0)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_84;
        if ((*(_WORD *)(a1 + 108) & 0x80) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_125;
          v51 = (int)v17;
          v17 = objc_alloc_init(GEORPProblem);
          if (GEORPProblemReadAllFrom((uint64_t)v17, (void *)v3, v9 & 1))
          {
            PBReaderRecallMark();
            v37 = 72;
            goto LABEL_79;
          }
          goto LABEL_126;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_125;
        v44 = *(_WORD *)(a1 + 108) << 8;
        goto LABEL_106;
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
        goto LABEL_48;
      case 6:
        if (!v32)
          goto LABEL_84;
        if ((*(_WORD *)(a1 + 108) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_125;
          v44 = *(_WORD *)(a1 + 108) << 7;
          goto LABEL_106;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_125;
        v51 = (int)v17;
        v17 = objc_alloc_init(GEORPUserCredentials);
        if (!GEORPUserCredentialsReadAllFrom((uint64_t)v17, (void *)v3, v9 & 1))
          goto LABEL_126;
        PBReaderRecallMark();
        v37 = 80;
        goto LABEL_79;
      case 9:
        if (!v32)
          goto LABEL_84;
        if ((*(_WORD *)(a1 + 108) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_125;
          v7 -= *(_WORD *)(a1 + 108) & 1;
          goto LABEL_107;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_125;
        v51 = (int)v17;
        v17 = objc_alloc_init(GEOPDAnalyticMetadata);
        if (!GEOPDAnalyticMetadataReadAllFrom((uint64_t)v17, (void *)v3, v9 & 1))
          goto LABEL_126;
        PBReaderRecallMark();
        v37 = 16;
        goto LABEL_79;
      case 10:
        if (!v32)
          goto LABEL_84;
        if ((*(_WORD *)(a1 + 108) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_125;
          v44 = *(_WORD *)(a1 + 108) << 13;
          goto LABEL_106;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_125;
        v51 = (int)v17;
        v17 = objc_alloc_init(GEOPDClientMetadata);
        if (!GEOPDClientMetadataReadAllFrom((uint64_t)v17, (void *)v3, v9 & 1))
          goto LABEL_126;
        PBReaderRecallMark();
        v37 = 32;
        goto LABEL_79;
      case 11:
        if (!v32)
          goto LABEL_84;
        if ((*(_WORD *)(a1 + 108) & 0x10) == 0)
        {
          PBReaderReadData();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 48;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_125;
        v44 = *(_WORD *)(a1 + 108) << 11;
        goto LABEL_106;
      case 12:
        if (!v32)
          goto LABEL_84;
        if ((*(_WORD *)(a1 + 108) & 0x200) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 88;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_125;
        v44 = *(_WORD *)(a1 + 108) << 6;
        goto LABEL_106;
      case 13:
        if (!v32)
          goto LABEL_84;
        if ((*(_WORD *)(a1 + 108) & 0x20) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 56;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_125;
        v44 = *(_WORD *)(a1 + 108) << 10;
        goto LABEL_106;
      case 14:
        if (!v32)
          goto LABEL_84;
        if ((*(_WORD *)(a1 + 108) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_125;
          v44 = *(_WORD *)(a1 + 108) << 14;
LABEL_106:
          v7 += v44 >> 15;
LABEL_107:
          v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_108:
          if (!(v17 & 1 | (v7 != 0)))
            goto LABEL_109;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_125;
        v51 = (int)v17;
        v17 = objc_alloc_init(GEORPClientCapabilities);
        if (GEORPClientCapabilitiesReadAllFrom((uint64_t)v17, (void *)v3))
        {
          PBReaderRecallMark();
          v37 = 24;
LABEL_79:
          v41 = *(void **)(a1 + v37);
          *(_QWORD *)(a1 + v37) = v17;

          --v7;
          LODWORD(v17) = v51;
          goto LABEL_107;
        }
LABEL_126:

        v45 = 0;
        LOBYTE(v17) = v51;
LABEL_127:
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_128:
        *(_WORD *)(a1 + 108) |= 0x80u;
        *(_WORD *)(a1 + 108) |= 0x100u;
        *(_WORD *)(a1 + 108) |= 1u;
        *(_WORD *)(a1 + 108) |= 4u;
        *(_WORD *)(a1 + 108) |= 0x10u;
        *(_WORD *)(a1 + 108) |= 0x200u;
        *(_WORD *)(a1 + 108) |= 0x20u;
        *(_WORD *)(a1 + 108) |= 2u;
        *(_WORD *)(a1 + 108) |= 0x40u;
        *(_WORD *)(a1 + 108) |= 8u;
        if ((v45 & 1) != 0)
        {
LABEL_129:
          v3 = *(_BYTE *)(v3 + *v19) == 0;
          if ((v17 & 1) != 0)
            goto LABEL_130;
        }
        else
        {
          v3 = 0;
          if ((v17 & 1) != 0)
          {
LABEL_130:
            v49 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 15:
        if (!v32)
          goto LABEL_84;
        if ((*(_WORD *)(a1 + 108) & 0x40) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 64;
LABEL_83:
          v42 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v39;

          --v7;
          goto LABEL_107;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_125;
        v44 = *(_WORD *)(a1 + 108) << 9;
        goto LABEL_106;
      default:
        if ((_DWORD)v31 != 202)
        {
LABEL_48:
          v38 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v38)
            goto LABEL_124;
          goto LABEL_108;
        }
        if (!v32)
        {
LABEL_84:
          v43 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v43 & 1) == 0)
          {
LABEL_124:
            v45 = 0;
            goto LABEL_128;
          }
          goto LABEL_108;
        }
        if ((*(_WORD *)(a1 + 108) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_125;
          v51 = (int)v17;
          v17 = objc_alloc_init(GEORPDebugSettings);
          if (!GEORPDebugSettingsReadAllFrom((uint64_t)v17, (void *)v3))
            goto LABEL_126;
          PBReaderRecallMark();
          v37 = 40;
          goto LABEL_79;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_125:
          v45 = 0;
          goto LABEL_127;
        }
        v44 = *(_WORD *)(a1 + 108) << 12;
        goto LABEL_106;
    }
  }
}

void sub_1893F1368(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F14AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F15F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F1730(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F1874(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F19B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F1AF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F1C3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F1D80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F27B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPProblemRequestCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  objc_msgSend(a1[9], "readAll:", 1);
  objc_msgSend(a1[10], "readAll:", 1);
  objc_msgSend(a1[2], "readAll:", 1);
  objc_msgSend(a1[4], "readAll:", 1);
  objc_msgSend(a1[3], "readAll:", 1);
  return objc_msgSend(a1[5], "readAll:", 1);
}

unint64_t GEORPProblemRequestReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 100))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPProblemRequestReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 96) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 100) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPProblemRequestReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPProblemRequestReadAllFrom_initialTag;
  Specified = GEORPProblemRequestReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEORPProblemRequestCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
  return Specified;
}

void sub_1893F29D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemRequestReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPProblemRequestReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893F2A30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemRequestIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEORPProblemIsValid(a1))
            goto LABEL_50;
          goto LABEL_55;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
          goto LABEL_52;
        case 6u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPUserCredentialsIsValid(a1))
            goto LABEL_55;
          goto LABEL_50;
        case 9u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAnalyticMetadataIsValid(a1))
            goto LABEL_55;
          goto LABEL_50;
        case 0xAu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDClientMetadataIsValid(a1))
            goto LABEL_55;
          goto LABEL_50;
        case 0xBu:
          if (v15 == 2)
            goto LABEL_52;
          goto LABEL_55;
        case 0xCu:
          if (v15 == 2)
            goto LABEL_52;
          goto LABEL_55;
        case 0xDu:
          if (v15 == 2)
            goto LABEL_52;
          goto LABEL_55;
        case 0xEu:
          if (v15 == 2 && PBReaderPlaceMark() && GEORPClientCapabilitiesIsValid(a1))
            goto LABEL_50;
          goto LABEL_55;
        case 0xFu:
          if (v15 == 2)
            goto LABEL_52;
          goto LABEL_55;
        default:
          if ((v8 >> 3) == 202)
          {
            if (v15 != 2 || !PBReaderPlaceMark() || !GEORPDebugSettingsIsValid(a1))
            {
LABEL_55:
              PBReaderRecallMark();
              return 0;
            }
LABEL_50:
            PBReaderRecallMark();
          }
          else
          {
LABEL_52:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_55;
          }
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_54;
          break;
      }
    }
  }
LABEL_54:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_1893F2F98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPProblemRequestIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  v2 = *(unsigned __int16 *)(a1 + 108);
  if ((v2 & 0x400) != 0)
    return 1;
  if ((v2 & 0x80) != 0)
  {
    if ((GEORPProblemIsDirty(*(os_unfair_lock_s **)(a1 + 72)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int16 *)(a1 + 108);
  }
  if ((v2 & 0x100) != 0)
  {
    if (GEORPUserCredentialsIsDirty(*(_QWORD *)(a1 + 80)))
      return 1;
    v2 = *(unsigned __int16 *)(a1 + 108);
  }
  if ((v2 & 1) != 0)
  {
    if (GEOPDAnalyticMetadataIsDirty(*(os_unfair_lock_s **)(a1 + 16)))
      return 1;
    v2 = *(unsigned __int16 *)(a1 + 108);
  }
  if ((v2 & 4) == 0)
    goto LABEL_14;
  if ((GEOPDClientMetadataIsDirty(*(os_unfair_lock_s **)(a1 + 32)) & 1) != 0)
    return 1;
  v2 = *(unsigned __int16 *)(a1 + 108);
LABEL_14:
  if ((v2 & 0x272) != 0)
    return 1;
  return (v2 >> 3) & 1;
}

os_unfair_lock_s *GEORPProblemRequestIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPProblemRequestIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 26);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEORPProblemRequestClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  int HasSensitiveFields;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  id v13;

  if (!a3)
  {
    objc_msgSend(a1, "problem");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "clearSensitiveFields:", a2);

LABEL_10:
    objc_msgSend(a1, "clientMetadata");
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "clearSensitiveFields:", a2);
    goto LABEL_11;
  }
  if (objc_msgSend(a1, "hasProblem")
    && (objc_msgSend(a1, "problem"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEORPProblemHasSensitiveFields(v5, a2),
        v5,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "problem");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v7, "copy");

    GEORPProblemClearSensitiveFields(v8, a2, 0);
    objc_msgSend(a1, "setProblem:", v8);
  }
  else
  {
    objc_msgSend(a1, "problem");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

  if (!objc_msgSend(a1, "hasClientMetadata"))
    goto LABEL_10;
  objc_msgSend(a1, "clientMetadata");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = GEOPDClientMetadataHasSensitiveFields(v10);

  if (!v11)
    goto LABEL_10;
  objc_msgSend(a1, "clientMetadata");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (id)objc_msgSend(v12, "copy");

  GEOPDClientMetadataClearSensitiveFields((id *)v13, a2, 0);
  objc_msgSend(a1, "setClientMetadata:", v13);
LABEL_11:

}

uint64_t GEORPProblemRequestHasSensitiveFields(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t HasSensitiveFields;
  void *v6;

  if (!a1)
    return 0;
  objc_msgSend(a1, "problem");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((GEORPProblemHasSensitiveFields(v4, a2) & 1) != 0)
  {
    HasSensitiveFields = 1;
  }
  else
  {
    objc_msgSend(a1, "clientMetadata");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOPDClientMetadataHasSensitiveFields(v6);

  }
  return HasSensitiveFields;
}

void sub_1893F370C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemResponseReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  void *v34;
  _BOOL8 v35;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v28 |= (unint64_t)(v32 & 0x7F) << v26;
            if ((v32 & 0x80) == 0)
              goto LABEL_44;
            v26 += 7;
            v15 = v27++ >= 9;
            if (v15)
            {
              v28 = 0;
              goto LABEL_46;
            }
          }
          v3[*v6] = 1;
LABEL_44:
          if (v3[*v6])
            v28 = 0;
LABEL_46:
          *(_BYTE *)(a1 + 20) = v28 != 0;
        }
        else if ((_DWORD)v18 == 2)
        {
          PBReaderReadString();
          v33 = objc_claimAutoreleasedReturnValue();
          v34 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v33;

        }
        else if ((_DWORD)v18 == 1)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
              break;
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_40;
            v19 += 7;
            v15 = v20++ >= 9;
            if (v15)
            {
              LODWORD(v21) = 0;
              goto LABEL_42;
            }
          }
          v3[*v6] = 1;
LABEL_40:
          if (v3[*v6])
            LODWORD(v21) = 0;
LABEL_42:
          *(_DWORD *)(a1 + 16) = v21;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_49;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_49:
    v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_1893F4804(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemResponseReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPProblemResponseReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893F4864(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemResponseIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  _BOOL8 v29;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_41;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_41;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        if (v15 != 2)
          goto LABEL_43;
      }
      else if ((_DWORD)v17 == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_43;
        v18 = 0;
        while (1)
        {
          v19 = *v2;
          v20 = *(_QWORD *)&a1[v19];
          v21 = v20 + 1;
          if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
            break;
          v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
          *(_QWORD *)&a1[v19] = v21;
          if (v22 < 0)
          {
            v23 = v18++ > 8;
            if (!v23)
              continue;
          }
          goto LABEL_40;
        }
LABEL_37:
        a1[*v4] = 1;
        goto LABEL_40;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_43:
        v29 = 0;
        goto LABEL_42;
      }
LABEL_40:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_41;
    }
    if ((v8 & 7) != 0)
      goto LABEL_43;
    v24 = 0;
    while (1)
    {
      v25 = *v2;
      v26 = *(_QWORD *)&a1[v25];
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
        goto LABEL_37;
      v28 = *(char *)(*(_QWORD *)&a1[*v5] + v26);
      *(_QWORD *)&a1[v25] = v27;
      if (v28 < 0)
      {
        v23 = v24++ > 8;
        if (!v23)
          continue;
      }
      goto LABEL_40;
    }
  }
LABEL_41:
  v29 = a1[*v4] == 0;
LABEL_42:
  PBReaderRecallMark();
  return v29;
}

void sub_1893F5088(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemStatusReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  void *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  int v53;
  char v54;
  void *v55;
  GEORPResolution *v57;
  char v58;
  char v59;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 72)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFDFFFCFFFBLL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 2;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v59 = (v16 == 0) | v15;
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v58 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_90;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_90:
      if ((v15 & 1) != 0)
      {
        v52 = 1;
        goto LABEL_101;
      }
      if (v16)
      {
        while (1)
        {
          v53 = *v16++;
          v54 = 16;
          switch(v53)
          {
            case 0:
              goto LABEL_102;
            case 1:
              goto LABEL_97;
            case 4:
              v54 = 32;
              goto LABEL_97;
            case 5:
              v54 = 8;
              goto LABEL_97;
            case 6:
              v54 = 4;
LABEL_97:
              *(_BYTE *)(a1 + 72) |= v54;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_102;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if ((v59 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 72) & 0x10) == 0)
        {
          PBReaderReadString();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v36;
          goto LABEL_70;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_100;
        v51 = 8 * *(_BYTE *)(a1 + 72);
        goto LABEL_85;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_71;
        *(_BYTE *)(a1 + 72) |= 1u;
        v39 = *v17;
        v40 = *(_QWORD *)(v3 + v39);
        if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v41 = *(_QWORD *)(*(_QWORD *)(v3 + *v19) + v40);
          *(_QWORD *)(v3 + v39) = v40 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v41 = 0;
        }
        *(_QWORD *)(a1 + 16) = v41;
        goto LABEL_89;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_71;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_BYTE *)(a1 + 72) |= 2u;
        while (2)
        {
          v45 = *v17;
          v46 = *(_QWORD *)(v3 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v46);
            *(_QWORD *)(v3 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              v27 = v43++ >= 9;
              if (v27)
              {
                LODWORD(v44) = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v44) = 0;
LABEL_76:
        *(_DWORD *)(a1 + 68) = v44;
        goto LABEL_89;
      case 4:
        if (!v31)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 72) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_100;
          v51 = 4 * *(_BYTE *)(a1 + 72);
          goto LABEL_85;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_100;
        v57 = objc_alloc_init(GEORPResolution);
        if (!GEORPResolutionReadAllFrom((uint64_t)v57, (void *)v3, v9 & 1))
          goto LABEL_99;
        PBReaderRecallMark();
        v49 = 48;
        goto LABEL_69;
      case 5:
        if (!v31)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 72) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_100;
          v51 = 16 * *(_BYTE *)(a1 + 72);
          goto LABEL_85;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_100;
        v57 = objc_alloc_init(GEORPNotification);
        if (!GEORPNotificationReadAllFrom((uint64_t)v57, (void *)v3, v9 & 1))
          goto LABEL_99;
        PBReaderRecallMark();
        v49 = 32;
        goto LABEL_69;
      case 6:
        if (!v31)
        {
LABEL_71:
          v50 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v58;
          if ((v50 & 1) == 0)
          {
LABEL_98:
            v52 = 0;
            goto LABEL_101;
          }
LABEL_89:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_90;
          continue;
        }
        if ((*(_BYTE *)(a1 + 72) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_100;
          v51 = 32 * *(_BYTE *)(a1 + 72);
LABEL_85:
          v7 += v51 >> 7;
LABEL_86:
          v15 = v58;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_89;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_100;
        v57 = objc_alloc_init(GEORPDetails);
        if (GEORPDetailsReadAllFrom((uint64_t)v57, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v49 = 24;
LABEL_69:
          v37 = *(void **)(a1 + v49);
          *(_QWORD *)(a1 + v49) = v57;
LABEL_70:

          --v7;
          goto LABEL_86;
        }
LABEL_99:

LABEL_100:
        v52 = 0;
        v15 = v58;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_101:
        *(_BYTE *)(a1 + 72) |= 0x10u;
        *(_BYTE *)(a1 + 72) |= 0x20u;
        *(_BYTE *)(a1 + 72) |= 8u;
        *(_BYTE *)(a1 + 72) |= 4u;
        if ((v52 & 1) != 0)
        {
LABEL_102:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_103;
        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
          {
LABEL_103:
            v55 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v38 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v58;
        if (!v38)
          goto LABEL_98;
        goto LABEL_89;
    }
  }
}

void sub_1893F5B08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F5C48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F5D8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F658C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemStatusReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPProblemStatusReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPProblemStatusReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPProblemStatusReadAllFrom_initialTag;
  Specified = GEORPProblemStatusReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 48), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1893F6754(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemStatusReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPProblemStatusReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893F67B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemStatusIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  _BOOL8 v27;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 != 2)
            goto LABEL_51;
          goto LABEL_20;
        case 2u:
          if (v16 != 1)
            goto LABEL_51;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_47;
          v20 = v19 + 8;
          if (v20 > *(_QWORD *)&a1[*v3])
            goto LABEL_47;
          *(_QWORD *)&a1[v18] = v20;
          continue;
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_51;
          v21 = 0;
          break;
        case 4u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEORPResolutionIsValid(a1))
            goto LABEL_51;
          goto LABEL_45;
        case 5u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEORPNotificationIsValid(a1))
            goto LABEL_51;
          goto LABEL_45;
        case 6u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEORPDetailsIsValid(a1))
            goto LABEL_51;
LABEL_45:
          PBReaderRecallMark();
          continue;
        default:
LABEL_20:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_51:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v22 = *v2;
        v23 = *(_QWORD *)&a1[v22];
        v24 = v23 + 1;
        if (v23 == -1 || v24 > *(_QWORD *)&a1[*v3])
          break;
        v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
        *(_QWORD *)&a1[v22] = v24;
        if (v25 < 0 && v21++ <= 8)
          continue;
        goto LABEL_48;
      }
      v14 = *v4;
LABEL_47:
      a1[v14] = 1;
LABEL_48:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v27 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v27;
}

BOOL GEORPResolutionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  _BOOL8 v32;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 != 1)
            goto LABEL_59;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_55;
          v20 = v19 + 8;
          if (v20 > *(_QWORD *)&a1[*v3])
            goto LABEL_55;
          *(_QWORD *)&a1[v18] = v20;
          continue;
        case 3u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
            goto LABEL_59;
          goto LABEL_32;
        case 4u:
          if (v16 == 2)
            goto LABEL_44;
          goto LABEL_59;
        case 5u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceIsValid(a1))
            goto LABEL_59;
LABEL_32:
          PBReaderRecallMark();
          continue;
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_59;
          v21 = 0;
          while (1)
          {
            v22 = *v2;
            v23 = *(_QWORD *)&a1[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&a1[*v3])
              goto LABEL_54;
            v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
            *(_QWORD *)&a1[v22] = v24;
            if (v25 < 0)
            {
              v26 = v21++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_56;
          }
        case 7u:
          if (v16 == 2)
            goto LABEL_44;
          goto LABEL_59;
        case 8u:
          if (v16 == 2)
            goto LABEL_44;
          goto LABEL_59;
        case 9u:
          if ((v8 & 7) != 0)
            goto LABEL_59;
          v27 = 0;
          break;
        default:
LABEL_44:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_59:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v28 = *v2;
        v29 = *(_QWORD *)&a1[v28];
        v30 = v29 + 1;
        if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
          break;
        v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
        *(_QWORD *)&a1[v28] = v30;
        if (v31 < 0)
        {
          v26 = v27++ > 8;
          if (!v26)
            continue;
        }
        goto LABEL_56;
      }
LABEL_54:
      v14 = *v4;
LABEL_55:
      a1[v14] = 1;
LABEL_56:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v32 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v32;
}

void sub_1893F6FB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPProblemStatusIsDirty(uint64_t a1)
{
  char v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = *(_BYTE *)(a1 + 72);
  if ((v2 & 0x50) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 72) & 0x20) != 0)
  {
    if (GEORPResolutionIsDirty(*(_QWORD *)(a1 + 48)))
      return 1;
    v2 = *(_BYTE *)(a1 + 72);
  }
  if ((v2 & 8) == 0)
    goto LABEL_9;
  if (GEORPNotificationIsDirty(*(_QWORD *)(a1 + 32)))
    return 1;
  v2 = *(_BYTE *)(a1 + 72);
LABEL_9:
  if ((v2 & 4) != 0)
    return (uint64_t)GEORPDetailsIsDirty(*(os_unfair_lock_s **)(a1 + 24));
  else
    return 0;
}

os_unfair_lock_s *GEORPProblemStatusIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPProblemStatusIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 16);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1893F7464(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F79F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemStatusRequestReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *v39;
  void *v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  __int16 v49;
  char v50;
  int v51;
  __int16 v52;
  void *v53;
  GEORPUserCredentials *v55;
  void *v56;
  char v57;
  char v58;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 76);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 72));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 88)), (uint16x4_t)0xFFFDFFFCFFF9FFFALL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 88) >> 2) & 1)+ ((*(_WORD *)(a1 + 88) >> 1) & 1)+ ((*(_WORD *)(a1 + 88) >> 5) & 1));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 4;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v58 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v57 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_103;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_103:
      if ((v15 & 1) != 0)
      {
        v50 = 1;
        goto LABEL_117;
      }
      if (v16)
      {
        while (1)
        {
          v51 = *v16++;
          v52 = 128;
          switch(v51)
          {
            case 0:
              goto LABEL_118;
            case 1:
              goto LABEL_113;
            case 2:
              v52 = 64;
              goto LABEL_113;
            case 3:
              v52 = 16;
              goto LABEL_113;
            case 4:
              v52 = 8;
              goto LABEL_113;
            case 5:
              v52 = 4;
              goto LABEL_113;
            case 6:
              v52 = 2;
              goto LABEL_113;
            case 7:
              v52 = 32;
LABEL_113:
              *(_WORD *)(a1 + 88) |= v52;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_118;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if ((v58 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31)
          goto LABEL_82;
        if ((*(_WORD *)(a1 + 88) & 0x80) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_116;
          v55 = objc_alloc_init(GEORPUserCredentials);
          if (GEORPUserCredentialsReadAllFrom((uint64_t)v55, (void *)v3, v9 & 1))
          {
            PBReaderRecallMark();
            v36 = 64;
            goto LABEL_72;
          }
          goto LABEL_115;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_116;
        v49 = *(_WORD *)(a1 + 88) << 8;
        goto LABEL_100;
      case 2:
        if (!v31)
          goto LABEL_82;
        if ((*(_WORD *)(a1 + 88) & 0x40) == 0)
        {
          PBReaderReadString();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = *(void **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v38;
          goto LABEL_73;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_116;
        v49 = *(_WORD *)(a1 + 88) << 9;
        goto LABEL_100;
      case 3:
        if (!v31 || (*(_WORD *)(a1 + 88) & 0x10) != 0)
          goto LABEL_82;
        PBReaderReadString();
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        if (v40)
        {
          v56 = v40;
          -[GEORPProblemStatusRequest _addNoFlagsProblemId:](a1, v40);
          v40 = v56;
        }

        goto LABEL_101;
      case 4:
        if (!v31)
          goto LABEL_82;
        if ((*(_WORD *)(a1 + 88) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_116;
          v49 = *(_WORD *)(a1 + 88) << 12;
          goto LABEL_100;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_116;
        v55 = objc_alloc_init(GEORPClientCapabilities);
        if (!GEORPClientCapabilitiesReadAllFrom((uint64_t)v55, (void *)v3))
          goto LABEL_115;
        PBReaderRecallMark();
        v36 = 32;
        goto LABEL_72;
      case 5:
        if (!v31)
          goto LABEL_82;
        if ((*(_WORD *)(a1 + 88) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_116;
          v49 = *(_WORD *)(a1 + 88) << 13;
          goto LABEL_100;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_116;
        v55 = objc_alloc_init(GEOPDAnalyticMetadata);
        if (!GEOPDAnalyticMetadataReadAllFrom((uint64_t)v55, (void *)v3, v9 & 1))
          goto LABEL_115;
        PBReaderRecallMark();
        v36 = 24;
        goto LABEL_72;
      case 6:
        if (!v31)
          goto LABEL_82;
        if ((*(_WORD *)(a1 + 88) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_116;
          v49 = *(_WORD *)(a1 + 88) << 14;
          goto LABEL_100;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_116;
        v55 = objc_alloc_init(GEOABSecondPartyPlaceRequestClientMetaData);
        if (!GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom((uint64_t)v55, (void *)v3, v9 & 1))
          goto LABEL_115;
        PBReaderRecallMark();
        v36 = 16;
        goto LABEL_72;
      case 7:
        if (!v31)
          goto LABEL_82;
        if ((*(_WORD *)(a1 + 88) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_116;
          v49 = *(_WORD *)(a1 + 88) << 10;
LABEL_100:
          v7 += v49 >> 15;
LABEL_101:
          v15 = v57;
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_102:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_103;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_116;
        v55 = objc_alloc_init(GEOServicesState);
        if (GEOServicesStateReadAllFrom((uint64_t)v55, (void *)v3))
        {
          PBReaderRecallMark();
          v36 = 48;
LABEL_72:
          v39 = *(void **)(a1 + v36);
          *(_QWORD *)(a1 + v36) = v55;
LABEL_73:

          --v7;
          goto LABEL_101;
        }
LABEL_115:

LABEL_116:
        v50 = 0;
        v15 = v57;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_117:
        *(_WORD *)(a1 + 88) |= 0x80u;
        *(_WORD *)(a1 + 88) |= 0x40u;
        *(_WORD *)(a1 + 88) |= 0x10u;
        *(_WORD *)(a1 + 88) |= 8u;
        *(_WORD *)(a1 + 88) |= 4u;
        *(_WORD *)(a1 + 88) |= 2u;
        *(_WORD *)(a1 + 88) |= 0x20u;
        if ((v50 & 1) != 0)
        {
LABEL_118:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_119;
        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
          {
LABEL_119:
            v53 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 8:
        if ((v8 & 1) != 0)
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          *(_WORD *)(a1 + 88) |= 1u;
          while (1)
          {
            v44 = *v17;
            v45 = *(_QWORD *)(v3 + v44);
            v46 = v45 + 1;
            if (v45 == -1 || v46 > *(_QWORD *)(v3 + *v6))
              break;
            v47 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v45);
            *(_QWORD *)(v3 + v44) = v46;
            v43 |= (unint64_t)(v47 & 0x7F) << v41;
            if ((v47 & 0x80) == 0)
              goto LABEL_85;
            v41 += 7;
            v27 = v42++ >= 9;
            if (v27)
            {
              v43 = 0;
              goto LABEL_87;
            }
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_85:
          if (*(_BYTE *)(v3 + *v18))
            v43 = 0;
LABEL_87:
          *(_BYTE *)(a1 + 84) = v43 != 0;
        }
        else
        {
LABEL_82:
          v48 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v57;
          if ((v48 & 1) == 0)
          {
LABEL_114:
            v50 = 0;
            goto LABEL_117;
          }
        }
        goto LABEL_102;
      default:
        v37 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v57;
        if (!v37)
          goto LABEL_114;
        goto LABEL_102;
    }
  }
}

void sub_1893F837C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F84C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F87F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F8938(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F8A7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F8BC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893F95DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPProblemStatusRequestCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  objc_msgSend(a1[8], "readAll:", 1);
  objc_msgSend(a1[4], "readAll:", 1);
  objc_msgSend(a1[3], "readAll:", 1);
  objc_msgSend(a1[2], "readAll:", 1);
  return objc_msgSend(a1[6], "readAll:", 1);
}

unint64_t GEORPProblemStatusRequestReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 76))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPProblemStatusRequestReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 76) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPProblemStatusRequestReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPProblemStatusRequestReadAllFrom_initialTag;
  Specified = GEORPProblemStatusRequestReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEORPProblemStatusRequestCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_1893F97E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemStatusRequestReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPProblemStatusRequestReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893F9844(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemStatusRequestIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEORPUserCredentialsIsValid(a1))
            goto LABEL_43;
          goto LABEL_56;
        case 2u:
          if (v15 == 2)
            goto LABEL_26;
          goto LABEL_56;
        case 3u:
          if (v15 == 2)
            goto LABEL_26;
          goto LABEL_56;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPClientCapabilitiesIsValid(a1))
            goto LABEL_56;
          goto LABEL_43;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAnalyticMetadataIsValid(a1))
            goto LABEL_56;
          goto LABEL_43;
        case 6u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOABSecondPartyPlaceRequestClientMetaDataIsValid(a1))
            goto LABEL_56;
          goto LABEL_43;
        case 7u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOServicesStateIsValid(a1))
            goto LABEL_56;
LABEL_43:
          PBReaderRecallMark();
          continue;
        case 8u:
          if ((v8 & 7) != 0)
            goto LABEL_56;
          v17 = 0;
          break;
        default:
LABEL_26:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_56:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v18 = *v2;
        v19 = *(_QWORD *)&a1[v18];
        v20 = v19 + 1;
        if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
          break;
        v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
        *(_QWORD *)&a1[v18] = v20;
        if (v21 < 0 && v17++ <= 8)
          continue;
        goto LABEL_44;
      }
      a1[*v4] = 1;
LABEL_44:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

void sub_1893F9E38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPProblemStatusRequestIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v2 = *(unsigned __int16 *)(a1 + 88);
  if ((v2 & 0x100) != 0)
    return 1;
  if ((v2 & 0x80) != 0)
  {
    if (GEORPUserCredentialsIsDirty(*(_QWORD *)(a1 + 64)))
      return 1;
    v2 = *(unsigned __int16 *)(a1 + 88);
  }
  if ((v2 & 0x58) != 0)
    return 1;
  if ((v2 & 4) != 0)
  {
    if (GEOPDAnalyticMetadataIsDirty(*(os_unfair_lock_s **)(a1 + 24)))
      return 1;
    v2 = *(unsigned __int16 *)(a1 + 88);
  }
  if ((v2 & 2) != 0)
  {
    if ((GEOABSecondPartyPlaceRequestClientMetaDataIsDirty(*(os_unfair_lock_s **)(a1 + 16)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int16 *)(a1 + 88);
  }
  return (v2 >> 5) & 1;
}

os_unfair_lock_s *GEORPProblemStatusRequestIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPProblemStatusRequestIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 20);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1893FA41C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemStatusResponseReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  GEORPProblemStatus *v27;
  _BOOL8 v28;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v17 = v11++ >= 9;
          if (v17)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 2)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_40;
          v27 = objc_alloc_init(GEORPProblemStatus);
          if (!GEORPProblemStatusReadAllFrom((uint64_t)v27, v5, a3))
          {

            goto LABEL_40;
          }
          PBReaderRecallMark();
          objc_msgSend((id)a1, "addProblemStatus:", v27, 0, 0);

        }
        else if ((v12 >> 3) == 1)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v23 = *v6;
            v24 = *(_QWORD *)&v5[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&v5[*v7])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v24);
            *(_QWORD *)&v5[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_34;
            v20 += 7;
            v17 = v21++ >= 9;
            if (v17)
            {
              LODWORD(v22) = 0;
              goto LABEL_36;
            }
          }
          v5[*v8] = 1;
LABEL_34:
          if (v5[*v8])
            LODWORD(v22) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 16) = v22;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_40;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v28 = v5[*v8] == 0;
  }
  else
  {
LABEL_40:
    v28 = 0;
  }
  objc_sync_exit(v5);

  return v28;
}

void sub_1893FB678(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemStatusResponseReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPProblemStatusResponseReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893FB6D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemStatusResponseIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEORPProblemStatusIsValid(a1))
        {
LABEL_38:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_38;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8)
            continue;
          goto LABEL_35;
        }
        a1[*v4] = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_38;
      }
LABEL_35:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

void sub_1893FC1D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPResolutionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  GEOMapRegion *v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  __int16 v59;
  char v60;
  int v61;
  __int16 v62;
  void *v63;
  GEOMapRegion *v65;
  char v66;
  char v67;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 76);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 72));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 88)), (uint16x4_t)0xFFFAFFF9FFFDFFFBLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 88) >> 4) & 1));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 3;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v67 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v66 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_104;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_104:
      if ((v15 & 1) != 0)
      {
        v60 = 1;
        goto LABEL_116;
      }
      if (v16)
      {
        while (1)
        {
          v61 = *v16++;
          v62 = 8;
          switch(v61)
          {
            case 0:
              goto LABEL_117;
            case 3:
              goto LABEL_112;
            case 4:
              v62 = 32;
              goto LABEL_112;
            case 5:
              v62 = 128;
              goto LABEL_112;
            case 7:
              v62 = 64;
              goto LABEL_112;
            case 8:
              v62 = 16;
LABEL_112:
              *(_WORD *)(a1 + 88) |= v62;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_117;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if ((v67 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_83;
        *(_WORD *)(a1 + 88) |= 1u;
        v36 = *v17;
        v37 = *(_QWORD *)(v3 + v36);
        if (v37 <= 0xFFFFFFFFFFFFFFF7 && v37 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v38 = *(_QWORD *)(*(_QWORD *)(v3 + *v19) + v37);
          *(_QWORD *)(v3 + v36) = v37 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v38 = 0;
        }
        *(_QWORD *)(a1 + 48) = v38;
        goto LABEL_103;
      case 3:
        if (!v31)
          goto LABEL_83;
        if ((*(_WORD *)(a1 + 88) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_115;
          v59 = *(_WORD *)(a1 + 88) << 12;
LABEL_99:
          v7 += v59 >> 15;
          goto LABEL_100;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_115;
        v65 = objc_alloc_init(GEOMapRegion);
        if (GEOMapRegionReadAllFrom((uint64_t)v65, (void *)v3))
        {
          PBReaderRecallMark();
          v40 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v65;
LABEL_74:

          --v7;
LABEL_100:
          v15 = v66;
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_103:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_104;
          continue;
        }
LABEL_114:

LABEL_115:
        v60 = 0;
        v15 = v66;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_116:
        *(_WORD *)(a1 + 88) |= 8u;
        *(_WORD *)(a1 + 88) |= 0x20u;
        *(_WORD *)(a1 + 88) |= 0x80u;
        *(_WORD *)(a1 + 88) |= 0x40u;
        *(_WORD *)(a1 + 88) |= 0x10u;
        if ((v60 & 1) != 0)
        {
LABEL_117:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_118;
        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
          {
LABEL_118:
            v63 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 4:
        if (!v31 || (*(_WORD *)(a1 + 88) & 0x20) != 0)
          goto LABEL_83;
        PBReaderReadString();
        v41 = (GEOMapRegion *)objc_claimAutoreleasedReturnValue();
        if (!v41)
          goto LABEL_58;
        v65 = v41;
        -[GEORPResolution _addNoFlagsLocalizedChangeList:](a1, v41);
        goto LABEL_57;
      case 5:
        if (!v31 || (*(_WORD *)(a1 + 88) & 0x80) != 0)
          goto LABEL_83;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_115;
        v65 = objc_alloc_init(GEOPDPlace);
        if (!GEOPDPlaceReadAllFrom((uint64_t)v65, (void *)v3, v9 & 1))
          goto LABEL_114;
        PBReaderRecallMark();
        -[GEORPResolution _addNoFlagsUpdatedPlace:](a1, v65);
LABEL_57:
        v41 = v65;
LABEL_58:

        goto LABEL_100;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_83;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 88) |= 2u;
        while (2)
        {
          v45 = *v17;
          v46 = *(_QWORD *)(v3 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v46);
            *(_QWORD *)(v3 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              v27 = v43++ >= 9;
              if (v27)
              {
                v44 = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v44 = 0;
LABEL_88:
        *(_QWORD *)(a1 + 56) = v44;
        goto LABEL_103;
      case 7:
        if (!v31)
          goto LABEL_83;
        if ((*(_WORD *)(a1 + 88) & 0x40) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 40;
          goto LABEL_73;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_115;
        v59 = *(_WORD *)(a1 + 88) << 9;
        goto LABEL_99;
      case 8:
        if (!v31)
          goto LABEL_83;
        if ((*(_WORD *)(a1 + 88) & 0x10) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 24;
LABEL_73:
          v40 = *(void **)(a1 + v50);
          *(_QWORD *)(a1 + v50) = v49;
          goto LABEL_74;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_115;
        v59 = *(_WORD *)(a1 + 88) << 11;
        goto LABEL_99;
      case 9:
        if ((v8 & 1) != 0)
        {
          v51 = 0;
          v52 = 0;
          v53 = 0;
          *(_WORD *)(a1 + 88) |= 4u;
          while (1)
          {
            v54 = *v17;
            v55 = *(_QWORD *)(v3 + v54);
            v56 = v55 + 1;
            if (v55 == -1 || v56 > *(_QWORD *)(v3 + *v6))
              break;
            v57 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v55);
            *(_QWORD *)(v3 + v54) = v56;
            v53 |= (unint64_t)(v57 & 0x7F) << v51;
            if ((v57 & 0x80) == 0)
              goto LABEL_90;
            v51 += 7;
            v27 = v52++ >= 9;
            if (v27)
            {
              LODWORD(v53) = 0;
              goto LABEL_92;
            }
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_90:
          if (*(_BYTE *)(v3 + *v18))
            LODWORD(v53) = 0;
LABEL_92:
          *(_DWORD *)(a1 + 84) = v53;
        }
        else
        {
LABEL_83:
          v58 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v66;
          if ((v58 & 1) == 0)
          {
LABEL_113:
            v60 = 0;
            goto LABEL_116;
          }
        }
        goto LABEL_103;
      default:
        v39 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v66;
        if (!v39)
          goto LABEL_113;
        goto LABEL_103;
    }
  }
}

void sub_1893FCAE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893FCE18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893FD1C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893FD308(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893FE0D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEORPResolutionCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 16), "readAll:", 1);
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = *(id *)(a1 + 64);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v7);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

unint64_t GEORPResolutionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 76))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPResolutionReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 76) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPResolutionReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPResolutionReadAllFrom_initialTag;
  Specified = GEORPResolutionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEORPResolutionCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_1893FE374(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPResolutionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPResolutionReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1893FE3D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1893FE73C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPResolutionIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v2 = (*(_WORD *)(a1 + 88) & 0x1F8) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return v2;
}

void sub_1893FEE9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPSuggestedRouteIndexReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  _BOOL8 v48;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        v17 = v10 & 7;
        if (v16 || v17 == 4)
          break;
        v19 = v10 >> 3;
        if ((v10 >> 3) == 5)
        {
          if (v17 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_73;
            while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5] && !v3[*v6])
            {
              v27 = 0;
              v28 = 0;
              v29 = 0;
              while (1)
              {
                v30 = *v4;
                v31 = *(_QWORD *)&v3[v30];
                v32 = v31 + 1;
                if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
                  break;
                v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
                *(_QWORD *)&v3[v30] = v32;
                v29 |= (unint64_t)(v33 & 0x7F) << v27;
                if (v33 < 0)
                {
                  v27 += 7;
                  v15 = v28++ >= 9;
                  if (!v15)
                    continue;
                }
                goto LABEL_41;
              }
              v3[*v6] = 1;
LABEL_41:
              PBRepeatedUInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v41 = 0;
            v42 = 0;
            v43 = 0;
            while (1)
            {
              v44 = *v4;
              v45 = *(_QWORD *)&v3[v44];
              v46 = v45 + 1;
              if (v45 == -1 || v46 > *(_QWORD *)&v3[*v5])
                break;
              v47 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v45);
              *(_QWORD *)&v3[v44] = v46;
              v43 |= (unint64_t)(v47 & 0x7F) << v41;
              if (v47 < 0)
              {
                v41 += 7;
                v15 = v42++ >= 9;
                if (!v15)
                  continue;
              }
              goto LABEL_71;
            }
            v3[*v6] = 1;
LABEL_71:
            PBRepeatedUInt32Add();
          }
        }
        else
        {
          if ((_DWORD)v19 == 3)
          {
            v34 = 0;
            v35 = 0;
            v22 = 0;
            *(_BYTE *)(a1 + 40) |= 2u;
            while (1)
            {
              v36 = *v4;
              v37 = *(_QWORD *)&v3[v36];
              v38 = v37 + 1;
              if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
                break;
              v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
              *(_QWORD *)&v3[v36] = v38;
              v22 |= (unint64_t)(v39 & 0x7F) << v34;
              if ((v39 & 0x80) == 0)
                goto LABEL_56;
              v34 += 7;
              v15 = v35++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_58;
              }
            }
            v3[*v6] = 1;
LABEL_56:
            if (v3[*v6])
              LODWORD(v22) = 0;
LABEL_58:
            v40 = 36;
          }
          else
          {
            if ((_DWORD)v19 != 2)
            {
              if (!PBReaderSkipValueWithTag())
                goto LABEL_73;
              continue;
            }
            v20 = 0;
            v21 = 0;
            v22 = 0;
            *(_BYTE *)(a1 + 40) |= 1u;
            while (1)
            {
              v23 = *v4;
              v24 = *(_QWORD *)&v3[v23];
              v25 = v24 + 1;
              if (v24 == -1 || v25 > *(_QWORD *)&v3[*v5])
                break;
              v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
              *(_QWORD *)&v3[v23] = v25;
              v22 |= (unint64_t)(v26 & 0x7F) << v20;
              if ((v26 & 0x80) == 0)
                goto LABEL_52;
              v20 += 7;
              v15 = v21++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_54;
              }
            }
            v3[*v6] = 1;
LABEL_52:
            if (v3[*v6])
              LODWORD(v22) = 0;
LABEL_54:
            v40 = 32;
          }
          *(_DWORD *)(a1 + v40) = v22;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v48 = v3[*v6] == 0;
  }
  else
  {
LABEL_73:
    v48 = 0;
  }
  objc_sync_exit(v3);

  return v48;
}

void sub_1893FFFC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPSuggestedRouteIndexReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPSuggestedRouteIndexReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189400028(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPSuggestionEntryReadAllFrom(_BYTE *a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  _BOOL8 v39;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            a1[28] |= 4u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                goto LABEL_47;
              v18 += 7;
              v15 = v19++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_49;
              }
            }
            v3[*v6] = 1;
LABEL_47:
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_49:
            v38 = 24;
            goto LABEL_58;
          case 2u:
            PBReaderReadString();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            if (v25)
              objc_msgSend(a1, "addDisplayLine:", v25);

            continue;
          case 3u:
            v26 = 0;
            v27 = 0;
            v20 = 0;
            a1[28] |= 2u;
            while (2)
            {
              v28 = *v4;
              v29 = *(_QWORD *)&v3[v28];
              v30 = v29 + 1;
              if (v29 == -1 || v30 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v31 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
                *(_QWORD *)&v3[v28] = v30;
                v20 |= (unint64_t)(v31 & 0x7F) << v26;
                if (v31 < 0)
                {
                  v26 += 7;
                  v15 = v27++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_53;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_53:
            v38 = 20;
            goto LABEL_58;
          case 4u:
            v32 = 0;
            v33 = 0;
            v20 = 0;
            a1[28] |= 1u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_61;
            continue;
        }
        while (1)
        {
          v34 = *v4;
          v35 = *(_QWORD *)&v3[v34];
          v36 = v35 + 1;
          if (v35 == -1 || v36 > *(_QWORD *)&v3[*v5])
            break;
          v37 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v35);
          *(_QWORD *)&v3[v34] = v36;
          v20 |= (unint64_t)(v37 & 0x7F) << v32;
          if ((v37 & 0x80) == 0)
            goto LABEL_55;
          v32 += 7;
          v15 = v33++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_57;
          }
        }
        v3[*v6] = 1;
LABEL_55:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_57:
        v38 = 16;
LABEL_58:
        *(_DWORD *)&a1[v38] = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v39 = v3[*v6] == 0;
  }
  else
  {
LABEL_61:
    v39 = 0;
  }
  objc_sync_exit(v3);

  return v39;
}

void sub_189401240(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPSuggestionEntryReadFrom(_BYTE *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPSuggestionEntryReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894012A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPSuggestionEntryIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_50;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_46;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_47;
          }
        case 2u:
          if (v15 == 2)
            goto LABEL_28;
          goto LABEL_50;
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_50;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_46;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_47;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_50;
          v28 = 0;
          break;
        default:
LABEL_28:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_50:
          v33 = 0;
          goto LABEL_49;
      }
      while (1)
      {
        v29 = *v2;
        v30 = *(_QWORD *)&a1[v29];
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
          break;
        v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
        *(_QWORD *)&a1[v29] = v31;
        if (v32 < 0)
        {
          v22 = v28++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_47;
      }
LABEL_46:
      a1[*v4] = 1;
LABEL_47:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v33 = a1[*v4] == 0;
LABEL_49:
  PBReaderRecallMark();
  return v33;
}

void sub_189401E8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPSuggestionListReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  GEOPDPlaceRequest *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  void *v37;
  int v38;
  uint64_t v39;
  void *v40;
  char v41;
  char v42;
  char v43;
  int v44;
  char v45;
  void *v46;
  int v48;
  char v49;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 | (v11 > 2);
        if (((v14 | v8) & 1) != 0)
          v15 = 0;
        else
          v15 = a3;
        LODWORD(v16) = v14;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v49 = (v15 == 0) | v14;
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_70;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_70:
      if ((v16 & 1) != 0)
      {
        v43 = 1;
        goto LABEL_82;
      }
      if (v15)
      {
        while (1)
        {
          v44 = *v15++;
          v45 = 8;
          switch(v44)
          {
            case 0:
              goto LABEL_83;
            case 1:
              goto LABEL_77;
            case 2:
              v45 = 4;
              goto LABEL_77;
            case 3:
              v45 = 1;
              goto LABEL_77;
            case 4:
              v45 = 2;
LABEL_77:
              *(_BYTE *)(a1 + 60) |= v45;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_83;
    }
    v30 = v22 >> 3;
    v31 = (char)v16;
    if ((v49 & 1) == 0)
    {
      v32 = v15;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31)
          goto LABEL_59;
        if ((*(_BYTE *)(a1 + 60) & 8) == 0)
        {
          PBReaderReadString();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v36;

          --v7;
          goto LABEL_68;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_79;
        v42 = 16 * *(_BYTE *)(a1 + 60);
        goto LABEL_67;
      case 2:
        if (!v31 || (*(_BYTE *)(a1 + 60) & 4) != 0)
          goto LABEL_59;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_79;
        v48 = (int)v16;
        v16 = objc_alloc_init(GEORPSuggestionEntry);
        if (!GEORPSuggestionEntryReadAllFrom(v16, (void *)v3))
          goto LABEL_80;
        PBReaderRecallMark();
        -[GEORPSuggestionList _addNoFlagsEntry:](a1, v16);

        goto LABEL_58;
      case 3:
        if (!v31)
          goto LABEL_59;
        if ((*(_BYTE *)(a1 + 60) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_79;
          v7 -= *(_BYTE *)(a1 + 60) & 1;
          goto LABEL_68;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_79;
        v48 = (int)v16;
        v16 = objc_alloc_init(GEOPDPlaceRequest);
        if (!GEOPDPlaceRequestReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
          goto LABEL_80;
        PBReaderRecallMark();
        v39 = 16;
        goto LABEL_57;
      case 4:
        if (!v31)
        {
LABEL_59:
          v41 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if ((v41 & 1) == 0)
          {
LABEL_78:
            v43 = 0;
            goto LABEL_82;
          }
LABEL_69:
          if (!(v16 & 1 | (v7 != 0)))
            goto LABEL_70;
          continue;
        }
        if ((*(_BYTE *)(a1 + 60) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_79:
            v43 = 0;
            goto LABEL_81;
          }
          v42 = *(_BYTE *)(a1 + 60) << 6;
LABEL_67:
          v7 += v42 >> 7;
          goto LABEL_68;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_79;
        v48 = (int)v16;
        v16 = objc_alloc_init(GEOPDPlaceResponse);
        if (GEOPDPlaceResponseReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v39 = 24;
LABEL_57:
          v40 = *(void **)(a1 + v39);
          *(_QWORD *)(a1 + v39) = v16;

          --v7;
LABEL_58:
          LODWORD(v16) = v48;
LABEL_68:
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_69;
        }
LABEL_80:

        v43 = 0;
        LOBYTE(v16) = v48;
LABEL_81:
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_82:
        *(_BYTE *)(a1 + 60) |= 8u;
        *(_BYTE *)(a1 + 60) |= 4u;
        *(_BYTE *)(a1 + 60) |= 1u;
        *(_BYTE *)(a1 + 60) |= 2u;
        if ((v43 & 1) != 0)
        {
LABEL_83:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v16 & 1) != 0)
            goto LABEL_84;
        }
        else
        {
          v3 = 0;
          if ((v16 & 1) != 0)
          {
LABEL_84:
            v46 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v38 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (!v38)
          goto LABEL_78;
        goto LABEL_69;
    }
  }
}

void sub_189402588(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894028B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894029F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189403170(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPSuggestionListCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = a1[4];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v8);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  objc_msgSend(a1[2], "readAll:", 1);
  return objc_msgSend(a1[3], "readAll:", 1);
}

unint64_t GEORPSuggestionListReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPSuggestionListReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPSuggestionListReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPSuggestionListReadAllFrom_initialTag;
  Specified = GEORPSuggestionListReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEORPSuggestionListCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189403424(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPSuggestionListReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPSuggestionListReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189403484(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894036DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPSuggestionListIsDirty(uint64_t a1)
{
  char v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = *(_BYTE *)(a1 + 60);
  if ((v2 & 0x1C) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
  {
    if ((GEOPDPlaceRequestIsDirty(*(os_unfair_lock_s **)(a1 + 16)) & 1) != 0)
      return 1;
    v2 = *(_BYTE *)(a1 + 60);
  }
  if ((v2 & 2) != 0)
    return (uint64_t)GEOPDPlaceResponseIsDirty(*(os_unfair_lock_s **)(a1 + 24));
  else
    return 0;
}

os_unfair_lock_s *GEORPSuggestionListIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPSuggestionListIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189403BDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18940412C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPTransitLineTileInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  BOOL v15;
  int *v16;
  int *v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char v45;
  char v46;
  char v47;
  int v48;
  int v49;
  void *v50;
  BOOL v52;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1) + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v7 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1)
    v14 = 0;
  else
    v14 = a3;
  if (v12)
    v15 = 1;
  else
    v15 = v14 == 0;
  v52 = v15;
  v16 = (int *)MEMORY[0x1E0D82BF0];
  v17 = (int *)MEMORY[0x1E0D82BC8];
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_75;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v16;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      v26 = v20++ >= 9;
      if (v26)
      {
        v21 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_27:
    v27 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v21 = 0;
LABEL_29:
    if (v27 || (v21 & 7) == 4)
    {
LABEL_75:
      if (v13)
      {
        v47 = 1;
        goto LABEL_85;
      }
      if (!v14)
      {
LABEL_86:
        v3 = *(_BYTE *)(v3 + *v17) == 0;
        if (!v13)
          return v3;
        goto LABEL_87;
      }
      while (1)
      {
        v49 = *v14++;
        v48 = v49;
        if (v49 == 2)
          goto LABEL_83;
        if (v48 == 3)
        {
          LOBYTE(v48) = 4;
LABEL_83:
          *(_BYTE *)(a1 + 52) |= v48;
        }
        else if (!v48)
        {
          goto LABEL_86;
        }
      }
    }
    v29 = v21 >> 3;
    v30 = v13;
    if (!v52)
    {
      v31 = v14;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 == 3)
    {
      if (!v30)
        goto LABEL_60;
      if ((*(_BYTE *)(a1 + 52) & 4) == 0)
      {
        PBReaderReadString();
        v42 = objc_claimAutoreleasedReturnValue();
        v43 = 32;
LABEL_57:
        v44 = *(void **)(a1 + v43);
        *(_QWORD *)(a1 + v43) = v42;

        --v9;
        goto LABEL_71;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_84;
      v45 = 32 * *(_BYTE *)(a1 + 52);
LABEL_70:
      v9 += v45 >> 7;
      goto LABEL_71;
    }
    if ((_DWORD)v29 != 2)
    {
      if ((_DWORD)v29 == 1)
      {
        if ((v8 & 1) != 0)
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          *(_BYTE *)(a1 + 52) |= 1u;
          while (1)
          {
            v38 = *v16;
            v39 = *(_QWORD *)(v3 + v38);
            v40 = v39 + 1;
            if (v39 == -1 || v40 > *(_QWORD *)(v3 + *v6))
              break;
            v41 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v39);
            *(_QWORD *)(v3 + v38) = v40;
            v37 |= (unint64_t)(v41 & 0x7F) << v35;
            if ((v41 & 0x80) == 0)
              goto LABEL_63;
            v35 += 7;
            v26 = v36++ >= 9;
            if (v26)
            {
              v37 = 0;
              goto LABEL_65;
            }
          }
          *(_BYTE *)(v3 + *v17) = 1;
LABEL_63:
          if (*(_BYTE *)(v3 + *v17))
            v37 = 0;
LABEL_65:
          *(_QWORD *)(a1 + 16) = v37;
          goto LABEL_71;
        }
LABEL_60:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_84;
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_84;
      }
LABEL_71:
      if (v9)
        v46 = 1;
      else
        v46 = v13;
      if ((v46 & 1) == 0)
        goto LABEL_75;
      continue;
    }
    break;
  }
  if (!v30)
    goto LABEL_60;
  if ((*(_BYTE *)(a1 + 52) & 2) == 0)
  {
    PBReaderReadString();
    v42 = objc_claimAutoreleasedReturnValue();
    v43 = 24;
    goto LABEL_57;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v45 = *(_BYTE *)(a1 + 52) << 6;
    goto LABEL_70;
  }
LABEL_84:
  v47 = 0;
LABEL_85:
  *(_BYTE *)(a1 + 52) |= 2u;
  *(_BYTE *)(a1 + 52) |= 4u;
  if ((v47 & 1) != 0)
    goto LABEL_86;
  v3 = 0;
  if (v13)
  {
LABEL_87:
    v50 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1894046F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189404B74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPTransitLineTileInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPTransitLineTileInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPTransitLineTileInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPTransitLineTileInfoReadAllFrom_initialTag;
  Specified = GEORPTransitLineTileInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189404CFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPTransitLineTileInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPTransitLineTileInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189404D5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189404EFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPTransitLineTileInfoIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 52) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189405204(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894055D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUpdatedLabelReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  int *v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  void *v38;
  GEOLatLng *v39;
  void *v40;
  char v41;
  char v42;
  char v43;
  int v44;
  int v45;
  void *v46;
  BOOL v48;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v7;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 & 1 | v11;
        v15 = v14 != 0;
        if ((v14 != 0) | v8 & 1)
          v16 = 0;
        else
          v16 = a3;
        v17 = v16 == 0;
        if (v14)
          v17 = 1;
        v48 = v17;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v7;
        v13 = v10;
LABEL_8:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_60;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_60:
      if (v15)
      {
        v42 = 1;
        goto LABEL_72;
      }
      if (!v16)
        goto LABEL_73;
      while (1)
      {
        v45 = *v16++;
        v44 = v45;
        if (v45 == 1)
          break;
        if (v44 == 2)
        {
          v43 = 1;
LABEL_66:
          *(_BYTE *)(a1 + 44) |= v43;
        }
        else if (!v44)
        {
          goto LABEL_73;
        }
      }
      v43 = 2;
      goto LABEL_66;
    }
    v31 = v23 >> 3;
    v32 = v15;
    if (!v48)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 == 2)
      break;
    if ((_DWORD)v31 == 1)
    {
      if (v32)
      {
        if ((*(_BYTE *)(a1 + 44) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_71;
          v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
        }
        else
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v37;

          --v9;
        }
        goto LABEL_56;
      }
LABEL_50:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_71;
      goto LABEL_56;
    }
    if (!PBReaderSkipValueWithTag())
      goto LABEL_71;
LABEL_56:
    if (v9)
      v41 = 1;
    else
      v41 = v15;
    if ((v41 & 1) == 0)
      goto LABEL_60;
  }
  if (!v32)
    goto LABEL_50;
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_71:
      v42 = 0;
      goto LABEL_72;
    }
    v9 -= *(_BYTE *)(a1 + 44) & 1;
    goto LABEL_56;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_71;
  v39 = objc_alloc_init(GEOLatLng);
  if (GEOLatLngReadAllFrom((uint64_t)v39, (void *)v3))
  {
    PBReaderRecallMark();
    v40 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v39;

    --v9;
    v19 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_56;
  }

  v42 = 0;
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_72:
  *(_BYTE *)(a1 + 44) |= 2u;
  *(_BYTE *)(a1 + 44) |= 1u;
  if ((v42 & 1) != 0)
  {
LABEL_73:
    v3 = *(_BYTE *)(v3 + *v19) == 0;
    if (v15)
      goto LABEL_74;
  }
  else
  {
    v3 = 0;
    if (v15)
    {
LABEL_74:
      v46 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

    }
  }
  return v3;
}

void sub_189405B64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189405F6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUpdatedLabelReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPUpdatedLabelReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPUpdatedLabelReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPUpdatedLabelReadAllFrom_initialTag;
  Specified = GEORPUpdatedLabelReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 16), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_189406110(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUpdatedLabelReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPUpdatedLabelReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189406170(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894062EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPUpdatedLabelIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 44) & 7) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_1894065A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894068EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUserCredentialsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  int *v15;
  int *v16;
  BOOL v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  int v38;
  char v39;
  char v40;
  char v41;
  int v42;
  int v43;
  char v44;
  void *v45;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v7 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1)
    v14 = 0;
  else
    v14 = a3;
  v15 = (int *)MEMORY[0x1E0D82BF0];
  v16 = (int *)MEMORY[0x1E0D82BC8];
  if (v12)
    v17 = 1;
  else
    v17 = v14 == 0;
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v16))
      goto LABEL_62;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v15;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      if (v20++ >= 9)
      {
        v21 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v16);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v16) = 1;
LABEL_27:
    v27 = *(unsigned __int8 *)(v3 + *v16);
    if (*(_BYTE *)(v3 + *v16))
      v21 = 0;
LABEL_29:
    if (v27 || (v21 & 7) == 4)
    {
LABEL_62:
      if (v13)
      {
        v41 = 1;
        goto LABEL_74;
      }
      if (!v14)
        goto LABEL_75;
      while (1)
      {
        v43 = *v14++;
        v42 = v43;
        if (v43 == 1)
          break;
        if (v42 == 2)
        {
          v44 = 1;
LABEL_71:
          *(_BYTE *)(a1 + 44) |= v44;
        }
        else if (!v42)
        {
          goto LABEL_75;
        }
      }
      v44 = 2;
      goto LABEL_71;
    }
    v29 = v21 >> 3;
    v30 = v13;
    if (!v17)
    {
      v31 = v14;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 != 2)
    {
      if ((_DWORD)v29 != 1)
      {
        v38 = PBReaderSkipValueWithTag();
        v16 = (int *)MEMORY[0x1E0D82BC8];
        if (!v38)
          goto LABEL_72;
        goto LABEL_58;
      }
      if (v30)
      {
        if ((*(_BYTE *)(a1 + 44) & 2) == 0)
        {
          PBReaderReadString();
          v35 = objc_claimAutoreleasedReturnValue();
          v36 = 24;
          goto LABEL_48;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_73;
        v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
LABEL_57:
        v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_58:
        if (v9)
          v40 = 1;
        else
          v40 = v13;
        if ((v40 & 1) == 0)
          goto LABEL_62;
        continue;
      }
LABEL_51:
      v39 = PBReaderSkipValueWithTag();
      v16 = (int *)MEMORY[0x1E0D82BC8];
      if ((v39 & 1) == 0)
      {
LABEL_72:
        v41 = 0;
        goto LABEL_74;
      }
      goto LABEL_58;
    }
    break;
  }
  if (!v30)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 44) & 1) == 0)
  {
    PBReaderReadString();
    v35 = objc_claimAutoreleasedReturnValue();
    v36 = 16;
LABEL_48:
    v37 = *(void **)(a1 + v36);
    *(_QWORD *)(a1 + v36) = v35;

    v16 = (int *)MEMORY[0x1E0D82BC8];
    --v9;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v9 -= *(_BYTE *)(a1 + 44) & 1;
    goto LABEL_57;
  }
LABEL_73:
  v41 = 0;
  v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_74:
  *(_BYTE *)(a1 + 44) |= 2u;
  *(_BYTE *)(a1 + 44) |= 1u;
  if ((v41 & 1) != 0)
  {
LABEL_75:
    v3 = *(_BYTE *)(v3 + *v16) == 0;
    if (v13)
      goto LABEL_76;
  }
  else
  {
    v3 = 0;
    if (v13)
    {
LABEL_76:
      v45 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

    }
  }
  return v3;
}

void sub_189406E04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894071D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUserCredentialsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPUserCredentialsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPUserCredentialsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPUserCredentialsReadAllFrom_initialTag;
  Specified = GEORPUserCredentialsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_18940735C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUserCredentialsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPUserCredentialsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894073BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189407538(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPUserCredentialsIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 44) & 7) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_1894077CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189407B00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUserSearchInputReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  int v51;
  char v52;
  void *v53;
  GEOPDPlace *v55;
  char v56;
  char v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 72)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFFFFFDFFFCFFFBLL) & 0xFF01FF01FF01FF01))+ ((*(_BYTE *)(a1 + 72) & 4) != 0));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 3;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v57 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v56 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_90;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_90:
      if ((v15 & 1) != 0)
      {
        v50 = 1;
        goto LABEL_102;
      }
      if (v16)
      {
        while (1)
        {
          v51 = *v16++;
          v52 = 16;
          switch(v51)
          {
            case 0:
              goto LABEL_103;
            case 1:
              goto LABEL_98;
            case 2:
              v52 = 32;
              goto LABEL_98;
            case 3:
              v52 = 8;
              goto LABEL_98;
            case 4:
              v52 = 2;
              goto LABEL_98;
            case 5:
              v52 = 4;
LABEL_98:
              *(_BYTE *)(a1 + 72) |= v52;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_103;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if ((v57 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 72) & 0x10) == 0)
        {
          PBReaderReadString();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = 40;
          goto LABEL_45;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_101;
        v49 = 8 * *(_BYTE *)(a1 + 72);
        goto LABEL_87;
      case 2:
        if (!v31)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 72) & 0x20) == 0)
        {
          PBReaderReadString();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = 48;
LABEL_45:
          v39 = *(void **)(a1 + v37);
          *(_QWORD *)(a1 + v37) = v36;
          goto LABEL_62;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_101;
        v49 = 4 * *(_BYTE *)(a1 + 72);
        goto LABEL_87;
      case 3:
        if (!v31)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 72) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_101;
          v49 = 16 * *(_BYTE *)(a1 + 72);
          goto LABEL_87;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_101;
        v55 = objc_alloc_init(GEOPDPlace);
        if (!GEOPDPlaceReadAllFrom((uint64_t)v55, (void *)v3, v9 & 1))
          goto LABEL_100;
        PBReaderRecallMark();
        v40 = 32;
        goto LABEL_61;
      case 4:
        if (!v31)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 72) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_101;
          v49 = *(_BYTE *)(a1 + 72) << 6;
          goto LABEL_87;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_101;
        v55 = objc_alloc_init(GEOPDAutocompleteEntry);
        if (!GEOPDAutocompleteEntryReadAllFrom((uint64_t)v55, (void *)v3, v9 & 1))
          goto LABEL_100;
        PBReaderRecallMark();
        v40 = 16;
        goto LABEL_61;
      case 5:
        if (!v31)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 72) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_101;
          v49 = 32 * *(_BYTE *)(a1 + 72);
LABEL_87:
          v7 += v49 >> 7;
LABEL_88:
          v15 = v56;
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_89:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_90;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_101;
        v55 = objc_alloc_init(GEOLatLng);
        if (GEOLatLngReadAllFrom((uint64_t)v55, (void *)v3))
        {
          PBReaderRecallMark();
          v40 = 24;
LABEL_61:
          v39 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v55;
LABEL_62:

          --v7;
          goto LABEL_88;
        }
LABEL_100:

LABEL_101:
        v50 = 0;
        v15 = v56;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_102:
        *(_BYTE *)(a1 + 72) |= 0x10u;
        *(_BYTE *)(a1 + 72) |= 0x20u;
        *(_BYTE *)(a1 + 72) |= 8u;
        *(_BYTE *)(a1 + 72) |= 2u;
        *(_BYTE *)(a1 + 72) |= 4u;
        if ((v50 & 1) != 0)
        {
LABEL_103:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_104;
        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
          {
LABEL_104:
            v53 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 6:
        if ((v8 & 1) != 0)
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          *(_BYTE *)(a1 + 72) |= 1u;
          while (1)
          {
            v44 = *v17;
            v45 = *(_QWORD *)(v3 + v44);
            v46 = v45 + 1;
            if (v45 == -1 || v46 > *(_QWORD *)(v3 + *v6))
              break;
            v47 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v45);
            *(_QWORD *)(v3 + v44) = v46;
            v43 |= (unint64_t)(v47 & 0x7F) << v41;
            if ((v47 & 0x80) == 0)
              goto LABEL_74;
            v41 += 7;
            v27 = v42++ >= 9;
            if (v27)
            {
              LODWORD(v43) = 0;
              goto LABEL_76;
            }
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_74:
          if (*(_BYTE *)(v3 + *v18))
            LODWORD(v43) = 0;
LABEL_76:
          *(_DWORD *)(a1 + 68) = v43;
        }
        else
        {
LABEL_71:
          v48 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v56;
          if ((v48 & 1) == 0)
          {
LABEL_99:
            v50 = 0;
            goto LABEL_102;
          }
        }
        goto LABEL_89;
      default:
        v38 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v56;
        if (!v38)
          goto LABEL_99;
        goto LABEL_89;
    }
  }
}

void sub_189408338(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189408474(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894085B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894086F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18940905C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUserSearchInputReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPUserSearchInputReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPUserSearchInputReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPUserSearchInputReadAllFrom_initialTag;
  Specified = GEORPUserSearchInputReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 16), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189409224(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUserSearchInputReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPUserSearchInputReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189409284(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18940946C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPUserSearchInputIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = *(unsigned __int8 *)(a1 + 72);
  if ((v2 & 0x70) != 0)
    return 1;
  if ((v2 & 8) != 0)
  {
    if ((GEOPDPlaceIsDirty(*(os_unfair_lock_s **)(a1 + 32)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 72);
  }
  if ((v2 & 2) != 0)
  {
    if ((GEOPDAutocompleteEntryIsDirty(*(os_unfair_lock_s **)(a1 + 16)) & 1) == 0)
    {
      v2 = *(unsigned __int8 *)(a1 + 72);
      return (v2 >> 2) & 1;
    }
    return 1;
  }
  return (v2 >> 2) & 1;
}

os_unfair_lock_s *GEORPUserSearchInputIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPUserSearchInputIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 16);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189409910(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEORPVisibleTileKeyDescription(unsigned int *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CB3940];
  _GEORPVisibleTileKeyDictionaryRepresentation(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("GEORPVisibleTileKey<%p> %@"), a1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _GEORPVisibleTileKeyDictionaryRepresentation(unsigned int *a1)
{
  void *v2;
  char v3;
  void *v4;
  void *v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *((_BYTE *)a1 + 12);
  if ((v3 & 1) == 0)
  {
    if ((a1[3] & 2) == 0)
      goto LABEL_3;
LABEL_7:
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1[1]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v7, CFSTR("y"));

    if ((a1[3] & 4) == 0)
      return v2;
    goto LABEL_4;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v6, CFSTR("x"));

  v3 = *((_BYTE *)a1 + 12);
  if ((v3 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v3 & 4) != 0)
  {
LABEL_4:
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1[2]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("z"));

  }
  return v2;
}

void _GEORPVisibleTileKeyFromDictionaryRepresentation(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a1;
  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("x"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_BYTE *)(a2 + 12) |= 1u;
    *(_DWORD *)a2 = objc_msgSend(v3, "unsignedIntValue");
  }

  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("y"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_BYTE *)(a2 + 12) |= 2u;
    *(_DWORD *)(a2 + 4) = objc_msgSend(v4, "unsignedIntValue");
  }

  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("z"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_BYTE *)(a2 + 12) |= 4u;
    *(_DWORD *)(a2 + 8) = objc_msgSend(v5, "unsignedIntValue");
  }

}

BOOL GEORPVisibleTileKeyReadFrom(uint64_t a1, uint64_t a2)
{
  return GEORPVisibleTileKeyReadAllFrom(a1, a2);
}

BOOL GEORPVisibleTileKeyReadAllFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  _DWORD *v7;
  _DWORD *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v18;
  unint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  _DWORD *v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (_DWORD *)(a1 + 8);
    v8 = (_DWORD *)(a1 + 4);
    v9 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = *v3;
        v14 = *(_QWORD *)(a2 + v13);
        v15 = v14 + 1;
        if (v14 == -1 || v15 > *(_QWORD *)(a2 + *v4))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v14);
        *(_QWORD *)(a2 + v13) = v15;
        v12 |= (unint64_t)(v16 & 0x7F) << v10;
        if ((v16 & 0x80) == 0)
          goto LABEL_12;
        v10 += 7;
        if (v11++ >= 9)
        {
          v12 = 0;
          v18 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v18 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v12 = 0;
LABEL_14:
      if (v18 || (v12 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v20 = v12 >> 3;
      if ((v12 >> 3) == 3)
      {
        v30 = 0;
        v31 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 12) |= 4u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          v34 = v33 + 1;
          if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v4))
            break;
          v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v33);
          *(_QWORD *)(a2 + v32) = v34;
          v23 |= (unint64_t)(v35 & 0x7F) << v30;
          if ((v35 & 0x80) == 0)
          {
            v29 = v7;
            goto LABEL_48;
          }
          v30 += 7;
          v28 = v31++ > 8;
          if (v28)
          {
            LODWORD(v23) = 0;
            v29 = v7;
            goto LABEL_50;
          }
        }
        v29 = v7;
LABEL_47:
        *(_BYTE *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if ((_DWORD)v20 == 2)
        break;
      if ((_DWORD)v20 == 1)
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
          {
            v29 = (_DWORD *)a1;
            goto LABEL_47;
          }
          v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v25);
          *(_QWORD *)(a2 + v24) = v26;
          v23 |= (unint64_t)(v27 & 0x7F) << v21;
          if ((v27 & 0x80) == 0)
            break;
          v21 += 7;
          v28 = v22++ > 8;
          if (v28)
          {
            LODWORD(v23) = 0;
            v29 = (_DWORD *)a1;
            goto LABEL_50;
          }
        }
        v29 = (_DWORD *)a1;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_51:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v36 = 0;
    v37 = 0;
    v23 = 0;
    *(_BYTE *)(a1 + 12) |= 2u;
    while (1)
    {
      v38 = *v3;
      v39 = *(_QWORD *)(a2 + v38);
      v40 = v39 + 1;
      if (v39 == -1 || v40 > *(_QWORD *)(a2 + *v4))
      {
        v29 = v8;
        goto LABEL_47;
      }
      v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v39);
      *(_QWORD *)(a2 + v38) = v40;
      v23 |= (unint64_t)(v41 & 0x7F) << v36;
      if ((v41 & 0x80) == 0)
        break;
      v36 += 7;
      v28 = v37++ > 8;
      if (v28)
      {
        LODWORD(v23) = 0;
        v29 = v8;
        goto LABEL_50;
      }
    }
    v29 = v8;
LABEL_48:
    if (*(_BYTE *)(a2 + *v5))
      LODWORD(v23) = 0;
LABEL_50:
    *v29 = v23;
    goto LABEL_51;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t GEORPVisibleTileKeyWriteTo(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 12);
  if ((v2 & 1) != 0)
  {
    result = PBDataWriterWriteUint32Field();
    v2 = *(_BYTE *)(v1 + 12);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        return result;
      return PBDataWriterWriteUint32Field();
    }
  }
  else if ((*(_BYTE *)(result + 12) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PBDataWriterWriteUint32Field();
  if ((*(_BYTE *)(v1 + 12) & 4) != 0)
    return PBDataWriterWriteUint32Field();
  return result;
}

BOOL GEORPVisibleTileKeyEquals(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t GEORPVisibleTileKeyHash()
{
  return PBHashBytes();
}

BOOL GEORPVisibleTileKeyIsValid(void *a1)
{
  _BOOL8 AllFrom;
  _QWORD v4[4];

  v4[2] = objc_msgSend(a1, "position");
  v4[3] = objc_msgSend(a1, "length");
  v4[0] = 0;
  v4[1] = 0;
  AllFrom = GEORPVisibleTileKeyReadAllFrom((uint64_t)v4, (uint64_t)a1);
  PBReaderRecallMark();
  return AllFrom;
}

BOOL GEORPVisibleTileSetReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_52;
          -[GEORPVisibleTileSet _reserveTileKeys:](a1, 1uLL);
          if (!GEORPVisibleTileKeyReadAllFrom(*(_QWORD *)(a1 + 8) + 16 * *(_QWORD *)(a1 + 16), (uint64_t)v3))
            goto LABEL_52;
          PBReaderRecallMark();
          ++*(_QWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v18 == 2)
          {
            v26 = 0;
            v27 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 40) |= 1u;
            while (1)
            {
              v28 = *v4;
              v29 = *(_QWORD *)&v3[v28];
              v30 = v29 + 1;
              if (v29 == -1 || v30 > *(_QWORD *)&v3[*v5])
                break;
              v31 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
              *(_QWORD *)&v3[v28] = v30;
              v21 |= (unint64_t)(v31 & 0x7F) << v26;
              if ((v31 & 0x80) == 0)
                goto LABEL_46;
              v26 += 7;
              v15 = v27++ >= 9;
              if (v15)
              {
                LODWORD(v21) = 0;
                goto LABEL_48;
              }
            }
            v3[*v6] = 1;
LABEL_46:
            if (v3[*v6])
              LODWORD(v21) = 0;
LABEL_48:
            v32 = 32;
          }
          else
          {
            if ((_DWORD)v18 != 1)
            {
              if (!PBReaderSkipValueWithTag())
                goto LABEL_52;
              continue;
            }
            v19 = 0;
            v20 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 40) |= 2u;
            while (1)
            {
              v22 = *v4;
              v23 = *(_QWORD *)&v3[v22];
              v24 = v23 + 1;
              if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
                break;
              v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
              *(_QWORD *)&v3[v22] = v24;
              v21 |= (unint64_t)(v25 & 0x7F) << v19;
              if ((v25 & 0x80) == 0)
                goto LABEL_42;
              v19 += 7;
              v15 = v20++ >= 9;
              if (v15)
              {
                LODWORD(v21) = 0;
                goto LABEL_44;
              }
            }
            v3[*v6] = 1;
LABEL_42:
            if (v3[*v6])
              LODWORD(v21) = 0;
LABEL_44:
            v32 = 36;
          }
          *(_DWORD *)(a1 + v32) = v21;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_52:
    v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_18940D44C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPVisibleTileSetReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPVisibleTileSetReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18940D4AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18940DB34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPWatchAuxiliaryControlReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v27;
  BOOL v28;
  int *v29;
  int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  int v36;
  char v37;
  char v38;
  char v39;
  int v40;
  char v41;
  void *v42;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v7 | (v10 > 1);
  if (v7 & 1 | (v10 > 1) | v8 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  v16 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v15))
      goto LABEL_63;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *v14;
      v21 = *(_QWORD *)(v3 + v20);
      v22 = v21 + 1;
      if (v21 == -1 || v22 > *(_QWORD *)(v3 + *v6))
        break;
      v23 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v21);
      *(_QWORD *)(v3 + v20) = v22;
      v19 |= (unint64_t)(v23 & 0x7F) << v17;
      if ((v23 & 0x80) == 0)
        goto LABEL_24;
      v17 += 7;
      if (v18++ >= 9)
      {
        v19 = 0;
        v25 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_24:
    v25 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v19 = 0;
LABEL_26:
    if (v25 || (v19 & 7) == 4)
    {
LABEL_63:
      if ((v12 & 1) != 0)
      {
        v39 = 1;
        goto LABEL_72;
      }
      if (v13)
      {
        while (1)
        {
          v40 = *v13++;
          v41 = 1;
          switch(v40)
          {
            case 0:
              goto LABEL_73;
            case 1:
              goto LABEL_69;
            case 2:
              v41 = 4;
              goto LABEL_69;
            case 3:
              v41 = 2;
LABEL_69:
              *(_BYTE *)(a1 + 52) |= v41;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_73;
    }
    v27 = v19 >> 3;
    v28 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      v29 = v13;
      do
      {
        v31 = *v29++;
        v30 = v31;
        v28 = v31 != 0;
        if (v31)
          v32 = v30 == (_DWORD)v27;
        else
          v32 = 1;
      }
      while (!v32);
    }
    if ((_DWORD)v27 == 3)
    {
      if (!v28)
        goto LABEL_52;
      if ((*(_BYTE *)(a1 + 52) & 2) == 0)
      {
        PBReaderReadString();
        v33 = objc_claimAutoreleasedReturnValue();
        v34 = 24;
LABEL_49:
        v35 = *(void **)(a1 + v34);
        *(_QWORD *)(a1 + v34) = v33;

        --v9;
        goto LABEL_61;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_71;
      v38 = *(_BYTE *)(a1 + 52) << 6;
LABEL_60:
      v9 += v38 >> 7;
      goto LABEL_61;
    }
    if ((_DWORD)v27 != 2)
    {
      if ((_DWORD)v27 != 1)
      {
        v36 = PBReaderSkipValueWithTag();
        v15 = (int *)MEMORY[0x1E0D82BC8];
        if (!v36)
          goto LABEL_70;
        goto LABEL_62;
      }
      if (v28)
      {
        if ((*(_BYTE *)(a1 + 52) & 1) == 0)
        {
          PBReaderReadString();
          v33 = objc_claimAutoreleasedReturnValue();
          v34 = 16;
          goto LABEL_49;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_71;
        v9 -= *(_BYTE *)(a1 + 52) & 1;
LABEL_61:
        v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_62:
        if (!(v12 & 1 | (v9 != 0)))
          goto LABEL_63;
        continue;
      }
LABEL_52:
      v37 = PBReaderSkipValueWithTag();
      v15 = (int *)MEMORY[0x1E0D82BC8];
      if ((v37 & 1) == 0)
      {
LABEL_70:
        v39 = 0;
        goto LABEL_72;
      }
      goto LABEL_62;
    }
    break;
  }
  if (!v28)
    goto LABEL_52;
  if ((*(_BYTE *)(a1 + 52) & 4) == 0)
  {
    PBReaderReadString();
    v33 = objc_claimAutoreleasedReturnValue();
    v34 = 32;
    goto LABEL_49;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v38 = 32 * *(_BYTE *)(a1 + 52);
    goto LABEL_60;
  }
LABEL_71:
  v39 = 0;
  v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_72:
  *(_BYTE *)(a1 + 52) |= 1u;
  *(_BYTE *)(a1 + 52) |= 4u;
  *(_BYTE *)(a1 + 52) |= 2u;
  if ((v39 & 1) != 0)
  {
LABEL_73:
    v3 = *(_BYTE *)(v3 + *v15) == 0;
    if ((v12 & 1) == 0)
      return v3;
    goto LABEL_74;
  }
  v3 = 0;
  if ((v12 & 1) != 0)
  {
LABEL_74:
    v42 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_18940E0C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18940E200(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18940E66C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPWatchAuxiliaryControlReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPWatchAuxiliaryControlReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPWatchAuxiliaryControlReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPWatchAuxiliaryControlReadAllFrom_initialTag;
  Specified = GEORPWatchAuxiliaryControlReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18940E7F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPWatchAuxiliaryControlReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPWatchAuxiliaryControlReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18940E854(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18940E9EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPWatchAuxiliaryControlIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 52) & 0xF) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_18940ECB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18940F5EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAdditionalEnabledMarketsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOAdditionalEnabledMarketsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18940FE90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAdditionalEnabledMarketsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_27;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_27;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2)
          goto LABEL_29;
        goto LABEL_23;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_29:
        v17 = 0;
        goto LABEL_28;
      }
LABEL_26:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_27;
    }
    if (v15 != 2)
      goto LABEL_29;
LABEL_23:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_29;
    goto LABEL_26;
  }
LABEL_27:
  v17 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v17;
}

BOOL GEOAdditionalEnabledMarketsIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 52) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_1894104E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18941084C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAdvisoryClientCapabilitiesReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  void *v34;
  _BOOL8 v35;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_49;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          goto LABEL_49;
        if ((v10 >> 3) == 2)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 2u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEOAdvisoryClientCapabilities__multipleCardsPerNoticeSupported;
              goto LABEL_41;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              v20 = 0;
              v26 = &OBJC_IVAR___GEOAdvisoryClientCapabilities__multipleCardsPerNoticeSupported;
              goto LABEL_44;
            }
          }
          v26 = &OBJC_IVAR___GEOAdvisoryClientCapabilities__multipleCardsPerNoticeSupported;
LABEL_42:
          if (v3[*v6])
            v20 = 0;
LABEL_44:
          *(_BYTE *)(a1 + *v26) = v20 != 0;
          goto LABEL_45;
        }
        if (!*(_QWORD *)(a1 + 8))
        {
          v33 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v34 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v33;

        }
        if ((PBUnknownFieldAdd() & 1) == 0)
          goto LABEL_50;
LABEL_45:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_49;
      }
      v27 = 0;
      v28 = 0;
      v20 = 0;
      *(_BYTE *)(a1 + 20) |= 1u;
      while (1)
      {
        v29 = *v4;
        v30 = *(_QWORD *)&v3[v29];
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
          break;
        v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
        *(_QWORD *)&v3[v29] = v31;
        v20 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0)
        {
          v26 = &OBJC_IVAR___GEOAdvisoryClientCapabilities__downloadOfflineMapActionSupported;
          goto LABEL_42;
        }
        v27 += 7;
        v25 = v28++ > 8;
        if (v25)
        {
          v20 = 0;
          v26 = &OBJC_IVAR___GEOAdvisoryClientCapabilities__downloadOfflineMapActionSupported;
          goto LABEL_44;
        }
      }
      v26 = &OBJC_IVAR___GEOAdvisoryClientCapabilities__downloadOfflineMapActionSupported;
LABEL_41:
      v3[*v6] = 1;
      goto LABEL_42;
    }
LABEL_49:
    v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_50:
    v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_189411168(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAdvisoryClientCapabilitiesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOAdvisoryClientCapabilitiesReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894111C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAdvisoryClientCapabilitiesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_39;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_39;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_41;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0)
          {
            v21 = v16++ > 8;
            if (!v21)
              continue;
          }
          goto LABEL_38;
        }
LABEL_36:
        a1[*v4] = 1;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        v27 = 0;
        goto LABEL_40;
      }
LABEL_38:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_39;
    }
    if ((v8 & 7) != 0)
      goto LABEL_41;
    v22 = 0;
    while (1)
    {
      v23 = *v2;
      v24 = *(_QWORD *)&a1[v23];
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
        goto LABEL_36;
      v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
      *(_QWORD *)&a1[v23] = v25;
      if (v26 < 0)
      {
        v21 = v22++ > 8;
        if (!v21)
          continue;
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  v27 = a1[*v4] == 0;
LABEL_40:
  PBReaderRecallMark();
  return v27;
}

BOOL GEOAssetReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  id v27;
  void *v28;
  _BOOL8 v29;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&v3[*v5])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
            *(_QWORD *)&v3[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_34;
            v20 += 7;
            v15 = v21++ >= 9;
            if (v15)
            {
              LODWORD(v22) = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6])
            LODWORD(v22) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 24) = v22;
        }
        else if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v18;

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v27 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v28 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v27;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_39;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v29 = v3[*v6] == 0;
  }
  else
  {
LABEL_39:
    v29 = 0;
  }
  objc_sync_exit(v3);

  return v29;
}

void sub_18941213C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAssetReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOAssetReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18941219C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAssetIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_37;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8)
            continue;
          goto LABEL_34;
        }
        a1[*v4] = 1;
      }
      else if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_37:
          v23 = 0;
          goto LABEL_36;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_37;
      }
LABEL_34:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v23 = a1[*v4] == 0;
LABEL_36:
  PBReaderRecallMark();
  return v23;
}

void sub_1894129A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOBusinessReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint32x4_t v14;
  int8x16_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  unsigned __int8 v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  BOOL v34;
  int v35;
  unint64_t v37;
  BOOL v38;
  int *v39;
  int v40;
  int v41;
  BOOL v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  GEORating *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  void *v60;
  id v61;
  void *v62;
  int v63;
  char v64;
  char v65;
  int v66;
  int v67;
  int v68;
  int v69;
  void *v70;
  int v72;
  char v73;
  char v74;
  char v75;
  BOOL v76;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 168));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 164);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 160));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 176);
  v14 = (uint32x4_t)vdupq_n_s32(v13);
  v15.i64[0] = 0x100000001;
  v15.i64[1] = 0x100000001;
  v16 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDD3C0), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDD3D0), v15)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDD3A0), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDD3B0), v15))))+ ((v13 >> 2) & 1);
  while (2)
  {
    v17 = 1;
    v18 = 1;
    v19 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v16;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v18 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v20 = v16 > 0xB;
        v21 = v20 & ~(_BYTE)v12 | v10;
        v22 = v20 | v12;
        v73 = v21;
        v74 = v22 | v21;
        if (((v22 | v9) & 1) != 0)
          v23 = 0;
        else
          v23 = a3;
        v75 = (v23 == 0) | v22;
        v76 = v22;
        v24 = (int *)MEMORY[0x1E0D82BF0];
        v25 = (int *)MEMORY[0x1E0D82BC8];
        v26 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v16;
LABEL_7:
        v17 = v10;
LABEL_8:
        v18 = v11;
        v19 = v12;
LABEL_10:
        ++v8;
        v10 = v17;
        v11 = v18;
        v12 = v19;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v24) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v25))
      goto LABEL_163;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    while (1)
    {
      v30 = *v24;
      v31 = *(_QWORD *)(v3 + v30);
      v32 = v31 + 1;
      if (v31 == -1 || v32 > *(_QWORD *)(v3 + *v7))
        break;
      v33 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v31);
      *(_QWORD *)(v3 + v30) = v32;
      v29 |= (unint64_t)(v33 & 0x7F) << v27;
      if ((v33 & 0x80) == 0)
        goto LABEL_25;
      v27 += 7;
      v34 = v28++ >= 9;
      if (v34)
      {
        v29 = 0;
        v35 = *(unsigned __int8 *)(v3 + *v25);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v25) = 1;
LABEL_25:
    v35 = *(unsigned __int8 *)(v3 + *v25);
    if (*(_BYTE *)(v3 + *v25))
      v29 = 0;
LABEL_27:
    if (v35 || (v29 & 7) == 4)
    {
LABEL_163:
      v72 = 1;
      goto LABEL_164;
    }
    v37 = v29 >> 3;
    v38 = v76;
    if ((v75 & 1) == 0)
    {
      v39 = v23;
      do
      {
        v41 = *v39++;
        v40 = v41;
        v38 = v41 != 0;
        if (v41)
          v42 = v40 == (_DWORD)v37;
        else
          v42 = 1;
      }
      while (!v42);
    }
    if ((int)v37 <= 99)
    {
      switch((int)v37)
      {
        case 1:
          if ((v9 & 1) == 0)
            goto LABEL_138;
          v43 = 0;
          v44 = 0;
          v45 = 0;
          *(_DWORD *)(a1 + 176) |= 1u;
          while (2)
          {
            v46 = *v24;
            v47 = *(_QWORD *)(v3 + v46);
            v48 = v47 + 1;
            if (v47 == -1 || v48 > *(_QWORD *)(v3 + *v7))
            {
              *(_BYTE *)(v3 + *v25) = 1;
            }
            else
            {
              v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v47);
              *(_QWORD *)(v3 + v46) = v48;
              v45 |= (unint64_t)(v49 & 0x7F) << v43;
              if (v49 < 0)
              {
                v43 += 7;
                v34 = v44++ >= 9;
                if (v34)
                {
                  v45 = 0;
                  goto LABEL_143;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(v3 + *v25))
            v45 = 0;
LABEL_143:
          *(_QWORD *)(a1 + 24) = v45;
          goto LABEL_162;
        case 3:
          if (!v38)
            goto LABEL_138;
          if ((*(_BYTE *)(a1 + 177) & 4) == 0)
          {
            PBReaderReadString();
            v51 = objc_claimAutoreleasedReturnValue();
            v52 = 88;
            goto LABEL_84;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_198;
          v66 = (int)(*(_DWORD *)(a1 + 176) << 21) >> 31;
          goto LABEL_160;
        case 5:
          if (!v38)
            goto LABEL_138;
          if ((*(_BYTE *)(a1 + 177) & 0x10) == 0)
          {
            PBReaderReadString();
            v51 = objc_claimAutoreleasedReturnValue();
            v52 = 104;
            goto LABEL_84;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_198;
          v66 = (int)(*(_DWORD *)(a1 + 176) << 19) >> 31;
          goto LABEL_160;
        case 7:
          if (!v38)
            goto LABEL_138;
          if ((*(_BYTE *)(a1 + 178) & 4) == 0)
          {
            PBReaderReadString();
            v51 = objc_claimAutoreleasedReturnValue();
            v52 = 152;
            goto LABEL_84;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_198;
          v66 = (int)(*(_DWORD *)(a1 + 176) << 13) >> 31;
          goto LABEL_160;
        case 8:
          if (!v38)
            goto LABEL_138;
          if ((*(_BYTE *)(a1 + 176) & 8) == 0)
          {
            PBReaderReadString();
            v51 = objc_claimAutoreleasedReturnValue();
            v52 = 32;
            goto LABEL_84;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_198;
          v66 = (int)(*(_DWORD *)(a1 + 176) << 28) >> 31;
          goto LABEL_160;
        case 10:
          if ((v9 & 1) == 0)
            goto LABEL_138;
          v53 = 0;
          v54 = 0;
          v55 = 0;
          *(_DWORD *)(a1 + 176) |= 2u;
          while (2)
          {
            v56 = *v24;
            v57 = *(_QWORD *)(v3 + v56);
            v58 = v57 + 1;
            if (v57 == -1 || v58 > *(_QWORD *)(v3 + *v7))
            {
              *(_BYTE *)(v3 + *v25) = 1;
            }
            else
            {
              v59 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v57);
              *(_QWORD *)(v3 + v56) = v58;
              v55 |= (unint64_t)(v59 & 0x7F) << v53;
              if (v59 < 0)
              {
                v53 += 7;
                v34 = v54++ >= 9;
                if (v34)
                {
                  v55 = 0;
                  goto LABEL_147;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(v3 + *v25))
            v55 = 0;
LABEL_147:
          *(_BYTE *)(a1 + 172) = v55 != 0;
          goto LABEL_162;
        case 11:
          if (!v38 || (*(_BYTE *)(a1 + 177) & 0x80) != 0)
            goto LABEL_136;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_198;
          v50 = objc_alloc_init(GEORating);
          if (!GEORatingReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1))
            goto LABEL_197;
          PBReaderRecallMark();
          -[GEOBusiness _addNoFlagsRating:](a1, v50);
          goto LABEL_129;
        case 12:
          if (!v38)
            goto LABEL_138;
          if ((*(_BYTE *)(a1 + 177) & 2) == 0)
          {
            PBReaderReadString();
            v51 = objc_claimAutoreleasedReturnValue();
            v52 = 80;
LABEL_84:
            v60 = *(void **)(a1 + v52);
            *(_QWORD *)(a1 + v52) = v51;
            goto LABEL_85;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_198;
          v66 = (int)(*(_DWORD *)(a1 + 176) << 22) >> 31;
          goto LABEL_160;
        case 13:
          if (!v38 || (*(_BYTE *)(a1 + 176) & 0x40) != 0)
            goto LABEL_136;
          PBReaderReadString();
          v50 = (GEORating *)objc_claimAutoreleasedReturnValue();
          if (v50)
            -[GEOBusiness _addNoFlagsCategory:](a1, v50);
          goto LABEL_129;
        case 14:
          if (!v38 || (*(_BYTE *)(a1 + 177) & 0x20) != 0)
            goto LABEL_136;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_198;
          v50 = objc_alloc_init(GEOPhoto);
          if (!GEOPhotoReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1))
            goto LABEL_197;
          PBReaderRecallMark();
          -[GEOBusiness _addNoFlagsPhoto:](a1, v50);
          goto LABEL_129;
        case 15:
          if (!v38 || (*(_BYTE *)(a1 + 176) & 0x10) != 0)
            goto LABEL_136;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_198;
          v50 = objc_alloc_init(GEOAttributeKeyValue);
          if (!GEOAttributeKeyValueReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1))
            goto LABEL_197;
          PBReaderRecallMark();
          -[GEOBusiness _addNoFlagsAttributeKeyValue:](a1, v50);
          goto LABEL_129;
        case 16:
          if (!v38 || (*(_BYTE *)(a1 + 177) & 8) != 0)
            goto LABEL_136;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_198;
          v50 = objc_alloc_init(GEOHours);
          if (!GEOHoursReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1))
            goto LABEL_197;
          PBReaderRecallMark();
          -[GEOBusiness _addNoFlagsOpenHours:](a1, v50);
          goto LABEL_129;
        case 17:
          if (!v38)
            goto LABEL_138;
          if ((*(_BYTE *)(a1 + 176) & 0x80) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_198;
            v66 = (int)(*(_DWORD *)(a1 + 176) << 24) >> 31;
LABEL_160:
            v8 += v66;
          }
          else
          {
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_198;
            v50 = objc_alloc_init(GEOLatLng);
            if (!GEOLatLngReadAllFrom((uint64_t)v50, (void *)v3))
              goto LABEL_197;
            PBReaderRecallMark();
            v60 = *(void **)(a1 + 64);
            *(_QWORD *)(a1 + 64) = v50;
LABEL_85:

            --v8;
          }
          break;
        case 19:
          if (!v38 || (*(_BYTE *)(a1 + 177) & 1) != 0)
            goto LABEL_136;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_198;
          v50 = objc_alloc_init(GEOCategory);
          if (!GEOCategoryReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1))
            goto LABEL_197;
          PBReaderRecallMark();
          -[GEOBusiness _addNoFlagsLocalizedCategories:](a1, v50);
          goto LABEL_129;
        case 20:
          if (!v38 || (*(_BYTE *)(a1 + 176) & 0x20) != 0)
            goto LABEL_136;
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_198;
          v50 = objc_alloc_init(GEOSearchAttribution);
          if (!GEOSearchAttributionReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1))
            goto LABEL_197;
          PBReaderRecallMark();
          -[GEOBusiness _addNoFlagsAttribution:](a1, v50);
          goto LABEL_129;
        default:
          goto LABEL_130;
      }
      goto LABEL_161;
    }
    if ((_DWORD)v37 == 100)
      break;
    if ((_DWORD)v37 == 101)
    {
      if (!v38 || (*(_BYTE *)(a1 + 178) & 2) != 0)
        goto LABEL_136;
      PBReaderReadString();
      v50 = (GEORating *)objc_claimAutoreleasedReturnValue();
      if (v50)
        -[GEOBusiness _addNoFlagsStarRating:](a1, v50);
LABEL_129:

LABEL_161:
      v25 = (int *)MEMORY[0x1E0D82BC8];
      v7 = (int *)MEMORY[0x1E0D82BD8];
      v26 = (int *)MEMORY[0x1E0D82BB8];
      goto LABEL_162;
    }
    if ((_DWORD)v37 == 102)
    {
      if (!v38 || (*(_BYTE *)(a1 + 177) & 0x40) != 0)
        goto LABEL_136;
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_198;
      v50 = objc_alloc_init(GEOPlaceDataAmendment);
      if (!GEOPlaceDataAmendmentReadAllFrom((uint64_t)v50, (void *)v3))
        goto LABEL_197;
      PBReaderRecallMark();
      -[GEOBusiness _addNoFlagsPlaceDataAmendment:](a1, v50);
      goto LABEL_129;
    }
LABEL_130:
    if ((v73 & 1) == 0 || (*(_BYTE *)(a1 + 176) & 4) != 0)
    {
LABEL_138:
      v65 = PBReaderSkipValueWithTag();
      v26 = (int *)MEMORY[0x1E0D82BB8];
      v7 = (int *)MEMORY[0x1E0D82BD8];
      v25 = (int *)MEMORY[0x1E0D82BC8];
      if ((v65 & 1) == 0)
      {
LABEL_196:
        v72 = 0;
        goto LABEL_164;
      }
    }
    else
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v61 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v62 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v61;

      }
      v63 = PBUnknownFieldAdd();
      v25 = (int *)MEMORY[0x1E0D82BC8];
      v7 = (int *)MEMORY[0x1E0D82BD8];
      v26 = (int *)MEMORY[0x1E0D82BB8];
      if (!v63)
      {
        v72 = 0;
        goto LABEL_165;
      }
    }
LABEL_162:
    if (!(v74 & 1 | (v8 != 0)))
      goto LABEL_163;
  }
  if (!v38 || (*(_BYTE *)(a1 + 178) & 1) != 0)
  {
LABEL_136:
    v64 = PBReaderSkipValueWithTag();
    v25 = (int *)MEMORY[0x1E0D82BC8];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v26 = (int *)MEMORY[0x1E0D82BB8];
    if ((v64 & 1) == 0)
      goto LABEL_196;
    goto LABEL_162;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_198;
  v50 = objc_alloc_init(GEOSource);
  if (GEOSourceReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1))
  {
    PBReaderRecallMark();
    -[GEOBusiness _addNoFlagsSource:](a1, v50);
    goto LABEL_129;
  }
LABEL_197:

LABEL_198:
  v72 = 0;
  v25 = (int *)MEMORY[0x1E0D82BC8];
LABEL_164:
  if ((v73 & 1) == 0)
    goto LABEL_166;
LABEL_165:
  *(_DWORD *)(a1 + 176) |= 4u;
LABEL_166:
  if (v76 || (v72 & 1) == 0)
  {
    *(_DWORD *)(a1 + 176) |= 0x400u;
    *(_DWORD *)(a1 + 176) |= 0x1000u;
    *(_DWORD *)(a1 + 176) |= 0x40000u;
    *(_DWORD *)(a1 + 176) |= 8u;
    *(_DWORD *)(a1 + 176) |= 0x200u;
    *(_DWORD *)(a1 + 176) |= 0x8000u;
    *(_DWORD *)(a1 + 176) |= 0x40u;
    *(_DWORD *)(a1 + 176) |= 0x2000u;
    *(_DWORD *)(a1 + 176) |= 0x10u;
    *(_DWORD *)(a1 + 176) |= 0x800u;
    *(_DWORD *)(a1 + 176) |= 0x80u;
    *(_DWORD *)(a1 + 176) |= 0x100u;
    *(_DWORD *)(a1 + 176) |= 0x20u;
    *(_DWORD *)(a1 + 176) |= 0x10000u;
    *(_DWORD *)(a1 + 176) |= 0x20000u;
    *(_DWORD *)(a1 + 176) |= 0x4000u;
    goto LABEL_190;
  }
  if (v23)
  {
    while (1)
    {
      v68 = *v23++;
      v67 = v68;
      if (v68 <= 99)
      {
        v69 = 1024;
        switch(v67)
        {
          case 0:
            goto LABEL_190;
          case 3:
            goto LABEL_189;
          case 5:
            v69 = 4096;
            goto LABEL_189;
          case 7:
            v69 = 0x40000;
            goto LABEL_189;
          case 8:
            v69 = 8;
            goto LABEL_189;
          case 11:
            v69 = 0x8000;
            goto LABEL_189;
          case 12:
            v69 = 512;
            goto LABEL_189;
          case 13:
            v69 = 64;
            goto LABEL_189;
          case 14:
            v69 = 0x2000;
            goto LABEL_189;
          case 15:
            v69 = 16;
            goto LABEL_189;
          case 16:
            v69 = 2048;
            goto LABEL_189;
          case 17:
            v69 = 128;
            goto LABEL_189;
          case 19:
            v69 = 256;
            goto LABEL_189;
          case 20:
            v69 = 32;
            goto LABEL_189;
          default:
            continue;
        }
        break;
      }
      switch(v67)
      {
        case 'd':
          v69 = 0x10000;
          break;
        case 'e':
          v69 = 0x20000;
          break;
        case 'f':
          v69 = 0x4000;
          break;
        default:
          continue;
      }
LABEL_189:
      *(_DWORD *)(a1 + 176) |= v69;
    }
  }
LABEL_190:
  if (v72)
    v3 = *(_BYTE *)(v3 + *v25) == 0;
  else
    v3 = 0;
  if (v76)
  {
    v70 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_189413924(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189413A70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189413BB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189413D74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189413EC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894141F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18941452C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189414860(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189414B98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189414ECC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189415018(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18941534C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189415684(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894159BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189415CF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189418A94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189418B5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOBusinessCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[128];
  _BYTE v75[128];
  _BYTE v76[128];
  _BYTE v77[128];
  _BYTE v78[128];
  _BYTE v79[128];
  _BYTE v80[128];
  _BYTE v81[128];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v2 = a1[16];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v70, v81, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v71;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v71 != v5)
          objc_enumerationMutation(v2);
        -[GEORating readAll:](*(_QWORD *)(*((_QWORD *)&v70 + 1) + 8 * v6++), 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v70, v81, 16);
    }
    while (v4);
  }

  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v7 = a1[14];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v66, v80, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v67;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v67 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v66 + 1) + 8 * v11++), "readAll:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v66, v80, 16);
    }
    while (v9);
  }

  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v12 = a1[5];
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v62, v79, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v63;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v63 != v15)
          objc_enumerationMutation(v12);
        -[GEOAttributeKeyValue readAll:](*(_QWORD *)(*((_QWORD *)&v62 + 1) + 8 * v16++), 1);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v62, v79, 16);
    }
    while (v14);
  }

  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v17 = a1[12];
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v58, v78, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v59;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v59 != v20)
          objc_enumerationMutation(v17);
        -[GEOHours readAll:](*(_QWORD *)(*((_QWORD *)&v58 + 1) + 8 * v21++), 1);
      }
      while (v19 != v21);
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v58, v78, 16);
    }
    while (v19);
  }

  objc_msgSend(a1[8], "readAll:", 1);
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v22 = a1[9];
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v54, v77, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v55;
    do
    {
      v26 = 0;
      do
      {
        if (*(_QWORD *)v55 != v25)
          objc_enumerationMutation(v22);
        objc_msgSend(*(id *)(*((_QWORD *)&v54 + 1) + 8 * v26++), "readAll:", 1);
      }
      while (v24 != v26);
      v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v54, v77, 16);
    }
    while (v24);
  }

  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v27 = a1[6];
  v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v50, v76, 16);
  if (v28)
  {
    v29 = v28;
    v30 = *(_QWORD *)v51;
    do
    {
      v31 = 0;
      do
      {
        if (*(_QWORD *)v51 != v30)
          objc_enumerationMutation(v27);
        objc_msgSend(*(id *)(*((_QWORD *)&v50 + 1) + 8 * v31++), "readAll:", 1);
      }
      while (v29 != v31);
      v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v50, v76, 16);
    }
    while (v29);
  }

  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v32 = a1[17];
  v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v46, v75, 16);
  if (v33)
  {
    v34 = v33;
    v35 = *(_QWORD *)v47;
    do
    {
      v36 = 0;
      do
      {
        if (*(_QWORD *)v47 != v35)
          objc_enumerationMutation(v32);
        objc_msgSend(*(id *)(*((_QWORD *)&v46 + 1) + 8 * v36++), "readAll:", 1);
      }
      while (v34 != v36);
      v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v46, v75, 16);
    }
    while (v34);
  }

  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v37 = a1[15];
  v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v42, v74, 16);
  if (v38)
  {
    v39 = v38;
    v40 = *(_QWORD *)v43;
    do
    {
      v41 = 0;
      do
      {
        if (*(_QWORD *)v43 != v40)
          objc_enumerationMutation(v37);
        objc_msgSend(*(id *)(*((_QWORD *)&v42 + 1) + 8 * v41++), "readAll:", 1, (_QWORD)v42);
      }
      while (v39 != v41);
      v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v42, v74, 16);
    }
    while (v39);
  }

}

unint64_t GEOBusinessReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 164))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOBusinessReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 160) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 164) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOBusinessReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOBusinessReadAllFrom_initialTag;
  Specified = GEOBusinessReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOBusinessCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 168));
  return Specified;
}

void sub_189419228(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOBusinessReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOBusinessReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189419288(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOBusinessIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  int v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  int v69;
  int v70;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  int v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  int v91;
  int v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  unsigned int v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  int v106;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  int v124;
  int v125;
  _BOOL8 v126;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
LABEL_295:
    v126 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v126;
  }
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    if (a1[*v4])
      goto LABEL_295;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *v2;
      v10 = *(_QWORD *)&a1[v9];
      v11 = v10 + 1;
      if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
        break;
      v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
      *(_QWORD *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0)
        goto LABEL_12;
      v6 += 7;
      v13 = v7++ >= 9;
      if (v13)
      {
        v8 = 0;
        v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v14 = a1[*v4];
    if (a1[*v4])
      v8 = 0;
LABEL_14:
    v15 = v8 & 7;
    if (v14 || v15 == 4)
      goto LABEL_295;
    v17 = v8 >> 3;
    if ((int)(v8 >> 3) <= 99)
      break;
    switch((_DWORD)v17)
    {
      case 'd':
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOSourceIsValid(a1))
          goto LABEL_301;
        break;
      case 'e':
        if (v15 != 2)
          goto LABEL_301;
LABEL_288:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_301;
        goto LABEL_289;
      case 'f':
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPlaceDataAmendmentIsValid(a1))
          goto LABEL_301;
        break;
      default:
        goto LABEL_288;
    }
LABEL_286:
    PBReaderRecallMark();
LABEL_289:
    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
      goto LABEL_295;
  }
  switch((int)v17)
  {
    case 1:
      if ((v8 & 7) != 0)
        goto LABEL_301;
      v18 = 0;
      while (1)
      {
        v19 = *v2;
        v20 = *(_QWORD *)&a1[v19];
        v21 = v20 + 1;
        if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
          goto LABEL_51;
        v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
        *(_QWORD *)&a1[v19] = v21;
        if (v22 < 0)
        {
          v23 = v18++ > 8;
          if (!v23)
            continue;
        }
        goto LABEL_289;
      }
    case 3:
      if (v15 == 2)
        goto LABEL_288;
      goto LABEL_301;
    case 5:
      if (v15 == 2)
        goto LABEL_288;
      goto LABEL_301;
    case 7:
      if (v15 == 2)
        goto LABEL_288;
      goto LABEL_301;
    case 8:
      if (v15 == 2)
        goto LABEL_288;
      goto LABEL_301;
    case 10:
      if ((v8 & 7) != 0)
        goto LABEL_301;
      v24 = 0;
      while (1)
      {
        v25 = *v2;
        v26 = *(_QWORD *)&a1[v25];
        v27 = v26 + 1;
        if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
          break;
        v28 = *(char *)(*(_QWORD *)&a1[*v5] + v26);
        *(_QWORD *)&a1[v25] = v27;
        if (v28 < 0)
        {
          v23 = v24++ > 8;
          if (!v23)
            continue;
        }
        goto LABEL_289;
      }
LABEL_51:
      a1[*v4] = 1;
      goto LABEL_289;
    case 11:
      if (v15 != 2 || !PBReaderPlaceMark())
        goto LABEL_301;
      objc_msgSend(a1, "position", 0, 0);
      objc_msgSend(a1, "length");
LABEL_55:
      while (2)
      {
        while (2)
        {
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
            goto LABEL_291;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (2)
          {
            v32 = *v2;
            v33 = *(_QWORD *)&a1[v32];
            v34 = v33 + 1;
            if (v33 == -1 || v34 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v33);
              *(_QWORD *)&a1[v32] = v34;
              v31 |= (unint64_t)(v35 & 0x7F) << v29;
              if (v35 < 0)
              {
                v29 += 7;
                v13 = v30++ >= 9;
                if (v13)
                {
                  v31 = 0;
                  v36 = *v4;
                  v37 = a1[v36];
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          v36 = *v4;
          v37 = a1[v36];
          if (a1[v36])
            v31 = 0;
LABEL_67:
          v38 = v31 & 7;
          if (v37)
            v39 = 1;
          else
            v39 = v38 == 4;
          if (v39)
          {
LABEL_291:
            v124 = a1[*v4];
            PBReaderRecallMark();
            if (v124)
              goto LABEL_301;
            goto LABEL_286;
          }
          switch((v31 >> 3))
          {
            case 1u:
            case 2u:
              if (v38 != 1)
                goto LABEL_300;
              v40 = *v2;
              v41 = *(_QWORD *)&a1[v40];
              if (v41 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_169;
              v42 = v41 + 8;
              if (v42 > *(_QWORD *)&a1[*v3])
                goto LABEL_169;
              *(_QWORD *)&a1[v40] = v42;
              continue;
            case 3u:
              if ((v31 & 7) != 0)
                goto LABEL_300;
              v43 = 0;
              while (1)
              {
                v44 = *v2;
                v45 = *(_QWORD *)&a1[v44];
                v46 = v45 + 1;
                if (v45 == -1 || v46 > *(_QWORD *)&a1[*v3])
                  goto LABEL_168;
                v47 = *(char *)(*(_QWORD *)&a1[*v5] + v45);
                *(_QWORD *)&a1[v44] = v46;
                if (v47 < 0)
                {
                  v23 = v43++ > 8;
                  if (!v23)
                    continue;
                }
                goto LABEL_55;
              }
            case 4u:
              if (v38 == 2)
                goto LABEL_171;
              goto LABEL_300;
            case 5u:
              if (v38 == 2)
                goto LABEL_171;
              goto LABEL_300;
            case 6u:
              if (v38 != 2 || !PBReaderPlaceMark())
                goto LABEL_300;
              objc_msgSend(a1, "position");
              objc_msgSend(a1, "length");
LABEL_91:
              if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                goto LABEL_173;
              v48 = 0;
              v49 = 0;
              v50 = 0;
              break;
            case 7u:
              if ((v31 & 7) != 0)
                goto LABEL_300;
              v78 = 0;
              while (1)
              {
                v79 = *v2;
                v80 = *(_QWORD *)&a1[v79];
                v81 = v80 + 1;
                if (v80 == -1 || v81 > *(_QWORD *)&a1[*v3])
                  break;
                v82 = *(char *)(*(_QWORD *)&a1[*v5] + v80);
                *(_QWORD *)&a1[v79] = v81;
                if (v82 < 0)
                {
                  v23 = v78++ > 8;
                  if (!v23)
                    continue;
                }
                goto LABEL_55;
              }
LABEL_168:
              v36 = *v4;
LABEL_169:
              a1[v36] = 1;
              continue;
            case 8u:
              if (v38 == 2)
                goto LABEL_171;
              goto LABEL_300;
            default:
LABEL_171:
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_300;
              continue;
          }
          break;
        }
        while (1)
        {
          v51 = *v2;
          v52 = *(_QWORD *)&a1[v51];
          v53 = v52 + 1;
          if (v52 == -1 || v53 > *(_QWORD *)&a1[*v3])
            break;
          v54 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v52);
          *(_QWORD *)&a1[v51] = v53;
          v50 |= (unint64_t)(v54 & 0x7F) << v48;
          if ((v54 & 0x80) == 0)
            goto LABEL_101;
          v48 += 7;
          v13 = v49++ >= 9;
          if (v13)
          {
            v50 = 0;
            v55 = *v4;
            v56 = a1[v55];
            goto LABEL_103;
          }
        }
        a1[*v4] = 1;
LABEL_101:
        v55 = *v4;
        v56 = a1[v55];
        if (a1[v55])
          v50 = 0;
LABEL_103:
        v57 = v50 & 7;
        if (v56)
          v58 = 1;
        else
          v58 = v57 == 4;
        if (v58)
        {
LABEL_173:
          v83 = a1[*v4];
          PBReaderRecallMark();
          if (!v83)
          {
            PBReaderRecallMark();
            continue;
          }
        }
        else
        {
          switch((v50 >> 3))
          {
            case 1u:
              if (v57 != 2)
                goto LABEL_299;
              goto LABEL_146;
            case 2u:
            case 3u:
              if (v57 != 1)
                goto LABEL_299;
              v59 = *v2;
              v60 = *(_QWORD *)&a1[v59];
              if (v60 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_159;
              v61 = v60 + 8;
              if (v61 > *(_QWORD *)&a1[*v3])
                goto LABEL_159;
              *(_QWORD *)&a1[v59] = v61;
              goto LABEL_91;
            case 4u:
              if (v57 != 2 || !PBReaderPlaceMark())
                goto LABEL_299;
              objc_msgSend(a1, "position");
              objc_msgSend(a1, "length");
              break;
            case 5u:
              if (v57 == 2)
                goto LABEL_146;
              goto LABEL_299;
            case 6u:
              if (v57 == 2)
                goto LABEL_146;
              goto LABEL_299;
            case 7u:
              if ((v50 & 7) != 0)
                goto LABEL_299;
              v72 = 0;
              while (1)
              {
                v73 = *v2;
                v74 = *(_QWORD *)&a1[v73];
                v75 = v74 + 1;
                if (v74 == -1 || v75 > *(_QWORD *)&a1[*v3])
                  break;
                v76 = *(char *)(*(_QWORD *)&a1[*v5] + v74);
                *(_QWORD *)&a1[v73] = v75;
                if (v76 < 0)
                {
                  v23 = v72++ > 8;
                  if (!v23)
                    continue;
                }
                goto LABEL_91;
              }
              v55 = *v4;
LABEL_159:
              a1[v55] = 1;
              goto LABEL_91;
            default:
LABEL_146:
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_299;
              goto LABEL_91;
          }
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
          {
            v62 = 0;
            v63 = 0;
            v64 = 0;
            while (1)
            {
              v65 = *v2;
              v66 = *(_QWORD *)&a1[v65];
              v67 = v66 + 1;
              if (v66 == -1 || v67 > *(_QWORD *)&a1[*v3])
                break;
              v68 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v66);
              *(_QWORD *)&a1[v65] = v67;
              v64 |= (unint64_t)(v68 & 0x7F) << v62;
              if ((v68 & 0x80) == 0)
                goto LABEL_127;
              v62 += 7;
              v13 = v63++ >= 9;
              if (v13)
              {
                v64 = 0;
                v69 = a1[*v4];
                goto LABEL_129;
              }
            }
            a1[*v4] = 1;
LABEL_127:
            v69 = a1[*v4];
            if (a1[*v4])
              v64 = 0;
LABEL_129:
            v70 = v64 & 7;
            if (v69 || v70 == 4)
              break;
            if ((v64 >> 3) == 2)
            {
              if (v70 == 2 && PBReaderPlaceMark() && GEOPhotoIsValid(a1))
              {
                PBReaderRecallMark();
                continue;
              }
LABEL_298:
              PBReaderRecallMark();
              goto LABEL_299;
            }
            if ((v64 >> 3) == 1 && v70 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_298;
          }
          v77 = a1[*v4];
          PBReaderRecallMark();
          if (!v77)
          {
            PBReaderRecallMark();
            goto LABEL_91;
          }
LABEL_299:
          PBReaderRecallMark();
        }
        break;
      }
LABEL_300:
      PBReaderRecallMark();
LABEL_301:
      PBReaderRecallMark();
      return 0;
    case 12:
      if (v15 == 2)
        goto LABEL_288;
      goto LABEL_301;
    case 13:
      if (v15 == 2)
        goto LABEL_288;
      goto LABEL_301;
    case 14:
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOPhotoIsValid(a1))
        goto LABEL_301;
      goto LABEL_286;
    case 15:
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDSearchStringStringPairIsValid(a1))
        goto LABEL_301;
      goto LABEL_286;
    case 16:
      if (v15 != 2 || !PBReaderPlaceMark())
        goto LABEL_301;
      objc_msgSend(a1, "position");
      objc_msgSend(a1, "length");
LABEL_190:
      while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
      {
        v84 = 0;
        v85 = 0;
        v86 = 0;
        while (2)
        {
          v87 = *v2;
          v88 = *(_QWORD *)&a1[v87];
          v89 = v88 + 1;
          if (v88 == -1 || v89 > *(_QWORD *)&a1[*v3])
          {
            a1[*v4] = 1;
          }
          else
          {
            v90 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v88);
            *(_QWORD *)&a1[v87] = v89;
            v86 |= (unint64_t)(v90 & 0x7F) << v84;
            if (v90 < 0)
            {
              v84 += 7;
              v13 = v85++ >= 9;
              if (v13)
              {
                v86 = 0;
                v91 = a1[*v4];
                goto LABEL_202;
              }
              continue;
            }
          }
          break;
        }
        v91 = a1[*v4];
        if (a1[*v4])
          v86 = 0;
LABEL_202:
        v92 = v86 & 7;
        if (v91)
          v93 = 1;
        else
          v93 = v92 == 4;
        if (!v93)
        {
          if ((v86 >> 3) != 2)
          {
            if ((v86 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_300;
              continue;
            }
            if (v92 == 2)
            {
              if (!PBReaderPlaceMark())
                goto LABEL_300;
LABEL_260:
              while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
              {
                v119 = a1[*v4];
                if (a1[*v4])
                  break;
                while (1)
                {
                  v120 = *v2;
                  v121 = *(_QWORD *)&a1[v120];
                  v122 = v121 + 1;
                  if (v121 == -1 || v122 > *(_QWORD *)&a1[*v3])
                    break;
                  v123 = *(char *)(*(_QWORD *)&a1[*v5] + v121);
                  *(_QWORD *)&a1[v120] = v122;
                  if (v123 < 0)
                  {
                    v13 = v119++ >= 9;
                    if (!v13)
                      continue;
                  }
                  goto LABEL_260;
                }
                a1[*v4] = 1;
              }
LABEL_269:
              PBReaderRecallMark();
              continue;
            }
            if ((v86 & 7) == 0)
            {
              do
              {
                v94 = *v2;
                v95 = *(_QWORD *)&a1[v94];
                v96 = v95 + 1;
                if (v95 == -1 || v96 > *(_QWORD *)&a1[*v3])
                {
                  a1[*v4] = 1;
                  goto LABEL_190;
                }
                v97 = *(char *)(*(_QWORD *)&a1[*v5] + v95);
                *(_QWORD *)&a1[v94] = v96;
                if ((v97 & 0x80000000) == 0)
                  break;
                v98 = v92++;
              }
              while (v98 <= 8);
              continue;
            }
            goto LABEL_300;
          }
          if (v92 != 2 || !PBReaderPlaceMark())
            goto LABEL_300;
          objc_msgSend(a1, "position");
          objc_msgSend(a1, "length");
          while (1)
          {
LABEL_218:
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_257;
            v99 = 0;
            v100 = 0;
            v101 = 0;
            while (1)
            {
              v102 = *v2;
              v103 = *(_QWORD *)&a1[v102];
              v104 = v103 + 1;
              if (v103 == -1 || v104 > *(_QWORD *)&a1[*v3])
                break;
              v105 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v103);
              *(_QWORD *)&a1[v102] = v104;
              v101 |= (unint64_t)(v105 & 0x7F) << v99;
              if ((v105 & 0x80) == 0)
                goto LABEL_228;
              v99 += 7;
              v13 = v100++ >= 9;
              if (v13)
              {
                v101 = 0;
                v106 = a1[*v4];
                goto LABEL_230;
              }
            }
            a1[*v4] = 1;
LABEL_228:
            v106 = a1[*v4];
            if (a1[*v4])
              v101 = 0;
LABEL_230:
            if (v106 || (v101 & 7) == 4)
            {
LABEL_257:
              v118 = a1[*v4];
              PBReaderRecallMark();
              if (v118)
                goto LABEL_300;
              goto LABEL_269;
            }
            if ((v101 >> 3) == 2)
              break;
            if ((v101 >> 3) == 1)
            {
              if ((v101 & 7) != 0)
                goto LABEL_296;
              v108 = 0;
              while (1)
              {
                v109 = *v2;
                v110 = *(_QWORD *)&a1[v109];
                v111 = v110 + 1;
                if (v110 == -1 || v111 > *(_QWORD *)&a1[*v3])
                  break;
                v112 = *(char *)(*(_QWORD *)&a1[*v5] + v110);
                *(_QWORD *)&a1[v109] = v111;
                if (v112 < 0)
                {
                  v23 = v108++ > 8;
                  if (!v23)
                    continue;
                }
                goto LABEL_218;
              }
LABEL_252:
              a1[*v4] = 1;
              continue;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
            {
LABEL_296:
              PBReaderRecallMark();
              goto LABEL_300;
            }
          }
          if ((v101 & 7) != 0)
            goto LABEL_296;
          v113 = 0;
          while (1)
          {
            v114 = *v2;
            v115 = *(_QWORD *)&a1[v114];
            v116 = v115 + 1;
            if (v115 == -1 || v116 > *(_QWORD *)&a1[*v3])
              goto LABEL_252;
            v117 = *(char *)(*(_QWORD *)&a1[*v5] + v115);
            *(_QWORD *)&a1[v114] = v116;
            if (v117 < 0)
            {
              v23 = v113++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_218;
          }
        }
        break;
      }
      v125 = a1[*v4];
      PBReaderRecallMark();
      if (v125)
        goto LABEL_301;
      goto LABEL_286;
    case 17:
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
        goto LABEL_301;
      goto LABEL_286;
    case 19:
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOCategoryIsValid(a1))
        goto LABEL_301;
      goto LABEL_286;
    case 20:
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOSearchAttributionIsValid(a1))
        goto LABEL_301;
      goto LABEL_286;
    default:
      goto LABEL_288;
  }
}

BOOL GEOPhotoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  _BOOL8 v24;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_39;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_39;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 != 2)
      {
        if ((_DWORD)v17 == 1)
        {
          if ((v8 & 7) != 0)
            goto LABEL_41;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              break;
            v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0 && v18++ <= 8)
              continue;
            goto LABEL_38;
          }
          a1[*v4] = 1;
          goto LABEL_38;
        }
        goto LABEL_35;
      }
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOPhotoInfoIsValid(a1))
      {
LABEL_41:
        PBReaderRecallMark();
        return 0;
      }
      PBReaderRecallMark();
LABEL_38:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_39;
    }
    if (v15 != 2)
      goto LABEL_41;
LABEL_35:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_41;
    goto LABEL_38;
  }
LABEL_39:
  v24 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v24;
}

BOOL GEOCategoryIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  uint64_t v17;
  char v18;
  char v19;
  int v20;
  uint64_t v21;
  char v22;
  char v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  _BOOL4 v36;
  _BOOL8 v37;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v39[0] = 0;
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v36 = 0;
  }
  else
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 1;
          while (1)
          {
            v19 = v18;
            v20 = *((_DWORD *)v39 + v17);
            if (!v20)
              break;
            if (v20 != 1)
            {
              v18 = 0;
              v17 = 1;
              if ((v19 & 1) != 0)
                continue;
            }
            goto LABEL_60;
          }
          *((_DWORD *)v39 + v17) = 1;
          if (v15 != 2)
            goto LABEL_60;
          goto LABEL_42;
        case 2u:
          v21 = 0;
          v22 = 1;
          while (1)
          {
            v23 = v22;
            v24 = *((_DWORD *)v39 + v21);
            if (!v24)
              break;
            if (v24 != 2)
            {
              v22 = 0;
              v21 = 1;
              if ((v23 & 1) != 0)
                continue;
            }
            goto LABEL_60;
          }
          *((_DWORD *)v39 + v21) = 2;
          if (v15)
          {
LABEL_60:
            PBReaderRecallMark();
            return 0;
          }
          v31 = 0;
          while (1)
          {
            v32 = *v2;
            v33 = *(_QWORD *)&a1[v32];
            v34 = v33 + 1;
            if (v33 == -1 || v34 > *(_QWORD *)&a1[*v3])
              break;
            v35 = *(char *)(*(_QWORD *)&a1[*v5] + v33);
            *(_QWORD *)&a1[v32] = v34;
            if (v35 < 0)
            {
              v30 = v31++ > 8;
              if (!v30)
                continue;
            }
            goto LABEL_53;
          }
LABEL_52:
          a1[*v4] = 1;
LABEL_53:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_54;
          break;
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_60;
          v25 = 0;
          while (1)
          {
            v26 = *v2;
            v27 = *(_QWORD *)&a1[v26];
            v28 = v27 + 1;
            if (v27 == -1 || v28 > *(_QWORD *)&a1[*v3])
              goto LABEL_52;
            v29 = *(char *)(*(_QWORD *)&a1[*v5] + v27);
            *(_QWORD *)&a1[v26] = v28;
            if (v29 < 0)
            {
              v30 = v25++ > 8;
              if (!v30)
                continue;
            }
            goto LABEL_53;
          }
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocalizedNameIsValid(a1))
            goto LABEL_60;
          PBReaderRecallMark();
          goto LABEL_53;
        default:
LABEL_42:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_60;
          goto LABEL_53;
      }
    }
LABEL_54:
    v36 = HIDWORD(v39[0]) != 0;
  }
  if (a1[*v4])
    v37 = 0;
  else
    v37 = v36;
  PBReaderRecallMark();
  return v37;
}

BOOL GEOSearchAttributionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  _BOOL4 v32;
  _BOOL8 v33;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v35[0] = 0;
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_54;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
      {
LABEL_54:
        v32 = HIDWORD(v35[0]) != 0;
        goto LABEL_48;
      }
      v17 = v8 >> 3;
      if ((v8 >> 3) == 1)
        break;
      if ((_DWORD)v17 == 3)
      {
        if (v15 != 2)
          goto LABEL_52;
LABEL_43:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_52;
        goto LABEL_44;
      }
      if ((_DWORD)v17 != 2)
        goto LABEL_43;
      v18 = 0;
      v19 = 1;
      while (1)
      {
        v20 = v19;
        v21 = *((_DWORD *)v35 + v18);
        if (!v21)
          break;
        if (v21 != 2)
        {
          v19 = 0;
          v18 = 1;
          if ((v20 & 1) != 0)
            continue;
        }
        goto LABEL_52;
      }
      *((_DWORD *)v35 + v18) = 2;
      if (v15)
        goto LABEL_52;
      v26 = 0;
      while (1)
      {
        v27 = *v2;
        v28 = *(_QWORD *)&a1[v27];
        v29 = v28 + 1;
        if (v28 == -1 || v29 > *(_QWORD *)&a1[*v3])
          break;
        v30 = *(char *)(*(_QWORD *)&a1[*v5] + v28);
        *(_QWORD *)&a1[v27] = v29;
        if (v30 < 0 && v26++ <= 8)
          continue;
        goto LABEL_44;
      }
      a1[*v4] = 1;
LABEL_44:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_54;
    }
    v22 = 0;
    v23 = 1;
    while (1)
    {
      v24 = v23;
      v25 = *((_DWORD *)v35 + v22);
      if (!v25)
        break;
      if (v25 != 1)
      {
        v23 = 0;
        v22 = 1;
        if ((v24 & 1) != 0)
          continue;
      }
      goto LABEL_52;
    }
    *((_DWORD *)v35 + v22) = 1;
    if (v15 != 2)
    {
LABEL_52:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_43;
  }
  v32 = 0;
LABEL_48:
  if (a1[*v4])
    v33 = 0;
  else
    v33 = v32;
  PBReaderRecallMark();
  return v33;
}

BOOL GEOSourceIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  _BOOL4 v26;
  _BOOL8 v27;
  _QWORD v29[2];

  v29[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v29[0] = 0;
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_39;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
      {
LABEL_39:
        v26 = HIDWORD(v29[0]) != 0;
        goto LABEL_41;
      }
      v17 = v8 >> 3;
      if ((v8 >> 3) == 1)
      {
        v22 = 0;
        v23 = 1;
        while (1)
        {
          v24 = v23;
          v25 = *((_DWORD *)v29 + v22);
          if (!v25)
            break;
          if (v25 != 1)
          {
            v23 = 0;
            v22 = 1;
            if ((v24 & 1) != 0)
              continue;
          }
          goto LABEL_45;
        }
        *((_DWORD *)v29 + v22) = 1;
        if (v15 != 2)
        {
LABEL_45:
          PBReaderRecallMark();
          return 0;
        }
      }
      else if ((_DWORD)v17 == 3)
      {
        if (v15 != 2)
          goto LABEL_45;
      }
      else if ((_DWORD)v17 == 2)
      {
        v18 = 0;
        v19 = 1;
        while (1)
        {
          v20 = v19;
          v21 = *((_DWORD *)v29 + v18);
          if (!v21)
            break;
          if (v21 != 2)
          {
            v19 = 0;
            v18 = 1;
            if ((v20 & 1) != 0)
              continue;
          }
          goto LABEL_45;
        }
        *((_DWORD *)v29 + v18) = 2;
        if (v15 != 2)
          goto LABEL_45;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_45;
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_39;
    }
  }
  v26 = 0;
LABEL_41:
  if (a1[*v4])
    v27 = 0;
  else
    v27 = v26;
  PBReaderRecallMark();
  return v27;
}

BOOL GEOPlaceDataAmendmentIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_33;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8)
            continue;
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        v22 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v22;
}

void sub_18941B690(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOBusinessIsDirty(uint64_t a1)
{
  int v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  _BYTE v55[128];
  _BYTE v56[128];
  _BYTE v57[128];
  _BYTE v58[128];
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 168));
  v2 = *(_DWORD *)(a1 + 176);
  if ((v2 & 0xFFFF8) == 0)
  {
    if ((v2 & 0x2000) != 0)
    {
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v4 = *(id *)(a1 + 112);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v50, v59, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v51;
LABEL_6:
        v8 = 0;
        while (1)
        {
          if (*(_QWORD *)v51 != v7)
            objc_enumerationMutation(v4);
          if (GEOPhotoIsDirty(*(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * v8)))
            goto LABEL_65;
          if (v6 == ++v8)
          {
            v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v50, v59, 16);
            if (v6)
              goto LABEL_6;
            break;
          }
        }
      }

      v2 = *(_DWORD *)(a1 + 176);
    }
    if ((v2 & 0x10) != 0)
    {
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v4 = *(id *)(a1 + 40);
      v9 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v46, v58, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v47;
LABEL_16:
        v12 = 0;
        while (1)
        {
          if (*(_QWORD *)v47 != v11)
            objc_enumerationMutation(v4);
          if (GEOAttributeKeyValueIsDirty(*(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * v12)))
            goto LABEL_65;
          if (v10 == ++v12)
          {
            v10 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v46, v58, 16);
            if (v10)
              goto LABEL_16;
            break;
          }
        }
      }

      v2 = *(_DWORD *)(a1 + 176);
    }
    if ((v2 & 0x800) != 0)
    {
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v4 = *(id *)(a1 + 96);
      v13 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v42, v57, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v43;
LABEL_26:
        v16 = 0;
        while (1)
        {
          if (*(_QWORD *)v43 != v15)
            objc_enumerationMutation(v4);
          v17 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * v16);
          if (v17)
          {
            os_unfair_lock_lock_with_options();
            os_unfair_lock_assert_owner((const os_unfair_lock *)(v17 + 64));
            v18 = *(_BYTE *)(v17 + 68) & 0xE;
            os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 64));
            if (v18)
              goto LABEL_65;
          }
          if (v14 == ++v16)
          {
            v14 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v42, v57, 16);
            if (v14)
              goto LABEL_26;
            break;
          }
        }
      }

      v2 = *(_DWORD *)(a1 + 176);
    }
    if ((v2 & 0x100) != 0)
    {
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v4 = *(id *)(a1 + 72);
      v19 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v38, v56, 16);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)v39;
LABEL_37:
        v22 = 0;
        while (1)
        {
          if (*(_QWORD *)v39 != v21)
            objc_enumerationMutation(v4);
          if ((GEOCategoryIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v38 + 1) + 8 * v22)) & 1) != 0)
            goto LABEL_65;
          if (v20 == ++v22)
          {
            v20 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v38, v56, 16);
            if (v20)
              goto LABEL_37;
            break;
          }
        }
      }

      v2 = *(_DWORD *)(a1 + 176);
    }
    if ((v2 & 0x20) != 0)
    {
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v4 = *(id *)(a1 + 48);
      v23 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v34, v55, 16);
      if (v23)
      {
        v24 = v23;
        v25 = *(_QWORD *)v35;
LABEL_47:
        v26 = 0;
        while (1)
        {
          if (*(_QWORD *)v35 != v25)
            objc_enumerationMutation(v4);
          if (GEOSearchAttributionIsDirty(*(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * v26)))
            goto LABEL_65;
          if (v24 == ++v26)
          {
            v24 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v34, v55, 16);
            if (v24)
              goto LABEL_47;
            break;
          }
        }
      }

      v2 = *(_DWORD *)(a1 + 176);
    }
    if ((v2 & 0x10000) == 0)
      return 0;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v4 = *(id *)(a1 + 136);
    v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v30, v54, 16);
    if (!v3)
    {
LABEL_66:

      return v3;
    }
    v27 = *(_QWORD *)v31;
LABEL_58:
    v28 = 0;
    while (1)
    {
      if (*(_QWORD *)v31 != v27)
        objc_enumerationMutation(v4);
      if (GEOSourceIsDirty(*(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * v28)))
        break;
      if (v3 == ++v28)
      {
        v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v30, v54, 16);
        if (v3)
          goto LABEL_58;
        goto LABEL_66;
      }
    }
LABEL_65:
    v3 = 1;
    goto LABEL_66;
  }
  return 1;
}

os_unfair_lock_s *GEOBusinessIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOBusinessIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 42);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_18941CA30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18941D6E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18941E234(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOBusinessOptionsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  int v16;
  int *v17;
  int *v18;
  _BOOL4 v19;
  int v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  BOOL v30;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEOPhotoOptions *v39;
  id v40;
  void *v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  BOOL v63;
  uint64_t v64;
  int v65;
  int v66;
  char v67;
  void *v68;
  char v70;
  int v71;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 60) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 != 0;
        v15 = v14 & ~(_DWORD)v10 | v7;
        v16 = v14 | v10;
        if ((((v14 | v10) | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = v9 != 0;
        v20 = 1;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_97;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v70 = v15;
        v71 = v19 | v16 | v15;
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (!*(_BYTE *)(v3 + *v21))
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v18;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_24;
      v23 += 7;
      v30 = v24++ >= 9;
      if (v30)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_24:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_26:
    if (v31 || (v25 & 7) == 4)
      break;
    v33 = v25 >> 3;
    v34 = v16;
    if (!((v17 == 0) | v16 & 1))
    {
      v35 = v17;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34 || (*(_BYTE *)(a1 + 60) & 0x20) != 0)
          goto LABEL_78;
        if ((PBReaderPlaceMark() & 1) != 0)
        {
          v39 = objc_alloc_init(GEOPhotoOptions);
          if (GEOPhotoOptionsReadAllFrom((uint64_t)v39, (void *)v3))
          {
            PBReaderRecallMark();
            -[GEOBusinessOptions _addNoFlagsPhotoOptions:](a1, v39);
            goto LABEL_53;
          }

        }
        v20 = 0;
        goto LABEL_96;
      case 2:
        if (!v34 || (*(_BYTE *)(a1 + 60) & 0x10) != 0)
          goto LABEL_78;
        PBReaderReadString();
        v39 = (GEOPhotoOptions *)objc_claimAutoreleasedReturnValue();
        if (v39)
          -[GEOBusinessOptions _addNoFlagsAttributeKey:](a1, v39);
LABEL_53:

        v21 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_93;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_78;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_BYTE *)(a1 + 60) |= 2u;
        while (2)
        {
          v45 = *v18;
          v46 = *(_QWORD *)(v3 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v46);
            *(_QWORD *)(v3 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              v30 = v43++ >= 9;
              if (v30)
              {
                v44 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v44 = 0;
LABEL_83:
        v63 = v44 != 0;
        v64 = 56;
        goto LABEL_92;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_78;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        *(_BYTE *)(a1 + 60) |= 1u;
        while (2)
        {
          v52 = *v18;
          v53 = *(_QWORD *)(v3 + v52);
          v54 = v53 + 1;
          if (v53 == -1 || v54 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v53);
            *(_QWORD *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              v30 = v50++ >= 9;
              if (v30)
              {
                LODWORD(v51) = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v51) = 0;
LABEL_87:
        *(_DWORD *)(a1 + 52) = v51;
        goto LABEL_93;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_78;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        *(_BYTE *)(a1 + 60) |= 4u;
        while (2)
        {
          v59 = *v18;
          v60 = *(_QWORD *)(v3 + v59);
          v61 = v60 + 1;
          if (v60 == -1 || v61 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v62 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v60);
            *(_QWORD *)(v3 + v59) = v61;
            v58 |= (unint64_t)(v62 & 0x7F) << v56;
            if (v62 < 0)
            {
              v56 += 7;
              v30 = v57++ >= 9;
              if (v30)
              {
                v58 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v58 = 0;
LABEL_91:
        v63 = v58 != 0;
        v64 = 57;
LABEL_92:
        *(_BYTE *)(a1 + v64) = v63;
        goto LABEL_93;
      default:
        if ((v70 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 8) != 0)
        {
LABEL_78:
          v20 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if ((v20 & v71 & 1) == 0)
            goto LABEL_96;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v41 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v40;

          }
          v20 = PBUnknownFieldAdd();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if (!v20)
            goto LABEL_98;
LABEL_93:
          if ((v71 & 1) == 0)
            goto LABEL_95;
        }
        if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_95;
        break;
    }
  }
LABEL_95:
  v20 = 1;
LABEL_96:
  LOBYTE(v15) = v70;
LABEL_97:
  if ((v15 & 1) != 0)
LABEL_98:
    *(_BYTE *)(a1 + 60) |= 8u;
  if (!(v16 & 1 | ((v20 & 1) == 0)))
  {
    if (!v17)
      goto LABEL_109;
    while (1)
    {
      v66 = *v17++;
      v65 = v66;
      if (v66 == 1)
        break;
      if (v65 == 2)
      {
        v67 = 16;
LABEL_108:
        *(_BYTE *)(a1 + 60) |= v67;
      }
      else if (!v65)
      {
        goto LABEL_109;
      }
    }
    v67 = 32;
    goto LABEL_108;
  }
  *(_BYTE *)(a1 + 60) |= 0x20u;
  *(_BYTE *)(a1 + 60) |= 0x10u;
LABEL_109:
  if (v20)
  {
    v3 = *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]) == 0;
    if ((v16 & 1) == 0)
      return v3;
    goto LABEL_113;
  }
  v3 = 0;
  if ((v16 & 1) != 0)
  {
LABEL_113:
    v68 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_18941EC78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18941F9C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOBusinessOptionsCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOBusinessOptionsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOBusinessOptionsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOBusinessOptionsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOBusinessOptionsReadAllFrom_initialTag;
  Specified = GEOBusinessOptionsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOBusinessOptionsCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18941FC50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOBusinessOptionsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOBusinessOptionsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18941FCB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOBusinessOptionsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPhotoOptionsIsValid(a1))
            goto LABEL_54;
          PBReaderRecallMark();
          continue;
        case 2u:
          if (v15 == 2)
            goto LABEL_24;
          goto LABEL_54;
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_54;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_50;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_51;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_54;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_50;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_51;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_54;
          v28 = 0;
          break;
        default:
LABEL_24:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_54:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v29 = *v2;
        v30 = *(_QWORD *)&a1[v29];
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
          break;
        v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
        *(_QWORD *)&a1[v29] = v31;
        if (v32 < 0)
        {
          v22 = v28++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_51;
      }
LABEL_50:
      a1[*v4] = 1;
LABEL_51:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v33 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v33;
}

uint64_t GEOPhotoOptionsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = 0;
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_63;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *v2;
        v11 = *(_QWORD *)&a1[v10];
        v12 = v11 + 1;
        if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v11);
        *(_QWORD *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        v14 = v8++ >= 9;
        if (v14)
        {
          v9 = 0;
          v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v15 = a1[*v4];
      if (a1[*v4])
        v9 = 0;
LABEL_14:
      v16 = v9 & 7;
      if (v15 || v16 == 4)
        goto LABEL_63;
      v18 = v9 >> 3;
      if ((v9 >> 3) == 3)
      {
        if (v16 != 2)
        {
          if ((v9 & 7) != 0)
            goto LABEL_71;
          while (1)
          {
            v25 = *v2;
            v26 = *(_QWORD *)&a1[v25];
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
              break;
            v28 = *(char *)(*(_QWORD *)&a1[*v6] + v26);
            *(_QWORD *)&a1[v25] = v27;
            if (v28 < 0)
            {
              v29 = v16++;
              if (v29 <= 8)
                continue;
            }
            goto LABEL_60;
          }
LABEL_47:
          a1[*v4] = 1;
          goto LABEL_60;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_71;
LABEL_50:
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
        {
          v35 = a1[*v4];
          if (a1[*v4])
            break;
          while (1)
          {
            v36 = *v2;
            v37 = *(_QWORD *)&a1[v36];
            v38 = v37 + 1;
            if (v37 == -1 || v38 > *(_QWORD *)&a1[*v3])
              break;
            v39 = *(char *)(*(_QWORD *)&a1[*v6] + v37);
            *(_QWORD *)&a1[v36] = v38;
            if (v39 < 0)
            {
              v14 = v35++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_50;
          }
          a1[*v4] = 1;
        }
        PBReaderRecallMark();
      }
      else
      {
        if ((_DWORD)v18 == 2)
        {
          if ((v9 & 7) != 0)
            goto LABEL_71;
          v30 = 0;
          while (1)
          {
            v31 = *v2;
            v32 = *(_QWORD *)&a1[v31];
            v33 = v32 + 1;
            if (v32 == -1 || v33 > *(_QWORD *)&a1[*v3])
              goto LABEL_47;
            v34 = *(char *)(*(_QWORD *)&a1[*v6] + v32);
            *(_QWORD *)&a1[v31] = v33;
            if (v34 < 0)
            {
              v24 = v30++ > 8;
              if (!v24)
                continue;
            }
            goto LABEL_60;
          }
        }
        if ((_DWORD)v18 == 1)
        {
          if (v5 || (v9 & 7) != 0)
          {
LABEL_71:
            PBReaderRecallMark();
            return 0;
          }
          v19 = 0;
          while (1)
          {
            v20 = *v2;
            v21 = *(_QWORD *)&a1[v20];
            v22 = v21 + 1;
            if (v21 == -1 || v22 > *(_QWORD *)&a1[*v3])
              break;
            v23 = *(char *)(*(_QWORD *)&a1[*v6] + v21);
            *(_QWORD *)&a1[v20] = v22;
            v5 = 1;
            if (v23 < 0)
            {
              v24 = v19++ > 8;
              if (!v24)
                continue;
            }
            goto LABEL_60;
          }
          v5 = 1;
          a1[*v4] = 1;
        }
        else if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
          goto LABEL_71;
        }
      }
LABEL_60:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_63;
    }
  }
  v5 = 0;
LABEL_63:
  if (a1[*v4])
    v40 = 1;
  else
    v40 = v5 == 0;
  v41 = !v40;
  PBReaderRecallMark();
  return v41;
}

void sub_189420638(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOBusinessOptionsIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 60) & 0x70) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189420BC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894210BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCategoryReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  int v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  GEOLocalizedName *v56;
  char v57;
  int v58;
  int v59;
  char v60;
  void *v61;
  int v63;
  int *v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 64) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 1) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v12;
        v13 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v13 = v7;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v65 = v16 & ~(_BYTE)v11 | v8;
        v66 = v9;
        v67 = v16 | v11 | v65;
        if ((((v16 | v11) | v9) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v68 = (v17 == 0) | v16 | v11;
        v69 = v16 | v11;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v7;
        v14 = v8;
LABEL_8:
        v15 = v11;
LABEL_10:
        ++v10;
        v7 = v13;
        v8 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_83;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_83:
      v63 = 1;
      goto LABEL_84;
    }
    v31 = v23 >> 3;
    v32 = v69;
    if ((v68 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_69;
        if ((*(_BYTE *)(a1 + 64) & 4) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v37;

          --v10;
          goto LABEL_81;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_103;
        v10 += *(unsigned __int8 *)(a1 + 64) << 29 >> 31;
        goto LABEL_81;
      case 2:
        if ((v66 & 1) == 0)
          goto LABEL_69;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        while (2)
        {
          v45 = *v18;
          v46 = *(_QWORD *)(v3 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v46);
            *(_QWORD *)(v3 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              v28 = v43++ >= 9;
              if (v28)
              {
                LODWORD(v44) = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v44) = 0;
LABEL_74:
        *(_DWORD *)(a1 + 60) = v44;
        goto LABEL_82;
      case 3:
        if ((v66 & 1) == 0)
          goto LABEL_69;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (2)
        {
          v52 = *v18;
          v53 = *(_QWORD *)(v3 + v52);
          v54 = v53 + 1;
          if (v53 == -1 || v54 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v53);
            *(_QWORD *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              v28 = v50++ >= 9;
              if (v28)
              {
                v51 = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v51 = 0;
LABEL_78:
        *(_QWORD *)(a1 + 32) = v51;
        goto LABEL_82;
      case 4:
        if (!v32 || (*(_BYTE *)(a1 + 64) & 8) != 0)
          goto LABEL_69;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_103;
        v56 = objc_alloc_init(GEOLocalizedName);
        if (GEOLocalizedNameReadAllFrom((uint64_t)v56, (void *)v3, v7 & 1))
        {
          PBReaderRecallMark();
          -[GEOCategory _addNoFlagsLocalizedNames:](a1, v56);

LABEL_81:
          v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_82:
          if (!(v67 & 1 | (v10 != 0)))
            goto LABEL_83;
          continue;
        }

LABEL_103:
        v63 = 0;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_84:
        v64 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
        if ((v65 & 1) != 0)
LABEL_85:
          *(_BYTE *)(a1 + v64[296]) |= 2u;
        if (v69 & 1 | ((v63 & 1) == 0))
        {
          *(_BYTE *)(a1 + v64[296]) |= 4u;
          *(_BYTE *)(a1 + v64[296]) |= 8u;
          goto LABEL_96;
        }
        if (v17)
        {
          while (2)
          {
            while (1)
            {
              v59 = *v17++;
              v58 = v59;
              if (v59 == 1)
                break;
              if (v58 == 4)
              {
                v60 = 8;
                goto LABEL_95;
              }
              if (!v58)
                goto LABEL_96;
            }
            v60 = 4;
LABEL_95:
            *(_BYTE *)(a1 + v64[296]) |= v60;
            continue;
          }
        }
LABEL_96:
        if (v63)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if ((v69 & 1) != 0)
        {
          v61 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v65 & 1) == 0 || (*(_BYTE *)(a1 + 64) & 2) != 0)
        {
LABEL_69:
          v57 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v57 & 1) == 0)
          {
            v63 = 0;
            goto LABEL_84;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v40 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v39;

          }
          v41 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v41)
          {
            v63 = 0;
            v64 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
            goto LABEL_85;
          }
        }
        goto LABEL_82;
    }
  }
}

void sub_189421A5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189421BDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18942262C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOCategoryCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 40);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOCategoryReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOCategoryReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOCategoryReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOCategoryReadAllFrom_initialTag;
  Specified = GEOCategoryReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOCategoryCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_1894228B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCategoryReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOCategoryReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189422918(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocalizedNameIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  _BOOL8 v28;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_47;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_41;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_44;
          }
        case 2u:
          if (v15 == 2)
            goto LABEL_43;
          goto LABEL_47;
        case 3u:
          if (v15 == 2)
            goto LABEL_43;
          goto LABEL_47;
        case 4u:
          if (v15 == 2)
            goto LABEL_43;
          goto LABEL_47;
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_47;
          v23 = 0;
          break;
        case 6u:
          if (v15 == 2)
            goto LABEL_43;
          goto LABEL_47;
        default:
LABEL_43:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_47:
          v28 = 0;
          goto LABEL_46;
      }
      while (1)
      {
        v24 = *v2;
        v25 = *(_QWORD *)&a1[v24];
        v26 = v25 + 1;
        if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
          break;
        v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
        *(_QWORD *)&a1[v24] = v26;
        if (v27 < 0)
        {
          v22 = v23++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_44;
      }
LABEL_41:
      a1[*v4] = 1;
LABEL_44:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v28 = a1[*v4] == 0;
LABEL_46:
  PBReaderRecallMark();
  return v28;
}

void sub_189422E24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOCategoryIsDirty(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  if ((*(_BYTE *)(a1 + 64) & 0x1C) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 64) & 8) == 0)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v3 = *(id *)(a1 + 40);
  v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v3);
        if (GEOLocalizedNameIsDirty(*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * i)))
        {
          v2 = 1;
          goto LABEL_15;
        }
      }
      v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEOCategoryIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOCategoryIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189423380(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189423734(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189423AC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOClientCapabilitiesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  char v25;
  int *v26;
  int *v27;
  int v28;
  int *v29;
  int *v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  BOOL v38;
  int v39;
  int v40;
  unint64_t v42;
  BOOL v43;
  int *v44;
  int v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  void *v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  id v103;
  void *v104;
  int v105;
  GEOFormattedStringClientCapabilities *v106;
  uint64_t v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  char v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  char v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  char v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  char v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  int *v156;
  int *v157;
  char v158;
  unsigned int v159;
  uint64_t v160;
  int *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  char v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  char v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char v179;
  char v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char v193;
  char v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char v200;
  char v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  char v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  char v214;
  char v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  char v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  char v228;
  char v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char v235;
  char v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char v242;
  char v243;
  unsigned int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char v249;
  char v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  char v256;
  char v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char v263;
  char v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  char v270;
  char v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  char v277;
  char v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char v284;
  char v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char v291;
  char v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char v298;
  char v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char v305;
  int *v306;
  int *v307;
  char v308;
  unsigned int v309;
  uint64_t v310;
  int *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  char v315;
  char v316;
  unsigned int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  char v322;
  void *v323;
  char v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  char v329;
  char v330;
  unsigned int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  char v336;
  char v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  char v343;
  char v344;
  unsigned int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  char v350;
  char v351;
  unsigned int v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  char v357;
  char v358;
  unsigned int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  char v364;
  char v365;
  unsigned int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  char v371;
  char v372;
  unsigned int v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  char v378;
  int *v379;
  int *v380;
  char v381;
  unsigned int v382;
  uint64_t v383;
  int *v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  char v388;
  char v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  char v395;
  char v396;
  unsigned int v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  char v402;
  char v403;
  char v404;
  uint64_t v405;
  BOOL v406;
  uint64_t v407;
  uint64_t v408;
  char v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  char v415;
  char v416;
  unsigned int v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  char v422;
  char v423;
  unsigned int v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  char v429;
  char v430;
  int v431;
  int v432;
  char v433;
  unint64_t v434;
  char v435;
  void *v436;
  char v438;
  char v439;
  char v440;
  char v441;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 232));
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 228);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 224));
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  *((_QWORD *)&v11 + 1) = *(unsigned __int8 *)(a1 + 312);
  *(_QWORD *)&v11 = *(_QWORD *)(a1 + 304);
  v12 = (int *)MEMORY[0x1E0D82BD8];
  *(int32x2_t *)v13.i8 = vzip1_s32((int32x2_t)(v11 >> 56), (int32x2_t)(v11 >> 57));
  v13.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v11 >> 54), (int32x2_t)(v11 >> 58));
  *(int32x2_t *)v14.i8 = vzip1_s32((int32x2_t)(v11 >> 48), (int32x2_t)(v11 >> 61));
  v14.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v11 >> 55), (int32x2_t)(v11 >> 62));
  *(int32x2_t *)v15.i8 = vzip1_s32((int32x2_t)(v11 >> 53), (int32x2_t)(v11 >> 52));
  v15.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v11 >> 59), (int32x2_t)(v11 >> 60));
  *(int32x2_t *)v16.i8 = vzip1_s32((int32x2_t)(v11 >> 51), *(int32x2_t *)((char *)&v11 + 8));
  v16.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v11 >> 50), (int32x2_t)(v11 >> 63));
  v17.i64[0] = 0x100000001;
  v17.i64[1] = 0x100000001;
  *(int32x2_t *)v18.i8 = vzip1_s32((int32x2_t)(v11 >> 49), (int32x2_t)(*((_QWORD *)&v11 + 1) >> 1));
  v18.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v11 >> 47), (int32x2_t)(v11 >> 46));
  v19 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v15, v17), (int32x4_t)vandq_s8(v16, v17)), vaddq_s32((int32x4_t)vandq_s8(v13, v17), (int32x4_t)vandq_s8(v14, v17))), (int32x4_t)vandq_s8(v18, v17)));
  while (2)
  {
    v20 = 1;
    v21 = 1;
    v22 = 1;
    switch(a3[v6])
    {
      case -4:
        ++v19;
        goto LABEL_8;
      case -3:
        v7 = 1;
        goto LABEL_7;
      case -2:
        v21 = v9;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v23 = v19 > 0xE;
        v24 = v23 & ~(_BYTE)v10 | v8;
        v25 = v23 | v10;
        if ((((v23 | v10) | v7) & 1) != 0)
          v26 = 0;
        else
          v26 = a3;
        v27 = (int *)MEMORY[0x1E0D82BF0];
        v28 = 1;
        v29 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]))
          goto LABEL_779;
        v438 = v25 | v24;
        v441 = (v26 == 0) | v25;
        v30 = (int *)MEMORY[0x1E0D82BB8];
        v439 = v23 & ~(_BYTE)v10 | v8;
        v440 = v23 | v10;
        break;
      default:
        ++v19;
LABEL_7:
        v20 = v8;
LABEL_8:
        v21 = v9;
        v22 = v10;
LABEL_10:
        ++v6;
        v8 = v20;
        v9 = v21;
        v10 = v22;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v29))
      goto LABEL_774;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    while (1)
    {
      v34 = *v27;
      v35 = *(_QWORD *)(v3 + v34);
      v36 = v35 + 1;
      if (v35 == -1 || v36 > *(_QWORD *)(v3 + *v12))
        break;
      v37 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v35);
      *(_QWORD *)(v3 + v34) = v36;
      v33 |= (unint64_t)(v37 & 0x7F) << v31;
      if ((v37 & 0x80) == 0)
        goto LABEL_25;
      v31 += 7;
      v38 = v32++ >= 9;
      if (v38)
      {
        v33 = 0;
        v39 = *(unsigned __int8 *)(v3 + *v29);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v29) = 1;
LABEL_25:
    v39 = *(unsigned __int8 *)(v3 + *v29);
    if (*(_BYTE *)(v3 + *v29))
      v33 = 0;
LABEL_27:
    v40 = v33 & 7;
    if (v39 || v40 == 4)
    {
LABEL_774:
      v28 = 1;
      if ((v24 & 1) == 0)
        goto LABEL_781;
      goto LABEL_780;
    }
    v42 = v33 >> 3;
    v43 = v25;
    if ((v441 & 1) == 0)
    {
      v44 = v26;
      do
      {
        v46 = *v44++;
        v45 = v46;
        v43 = v46 != 0;
        if (v46)
          v47 = v45 == (_DWORD)v42;
        else
          v47 = 1;
      }
      while (!v47);
    }
    switch((int)v42)
    {
      case 1:
        if (!v43)
          goto LABEL_525;
        if ((*(_QWORD *)(a1 + 304) & 0x10000000000000) == 0)
        {
          PBReaderReadString();
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = 112;
          goto LABEL_513;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_819;
        v408 = (uint64_t)(*(_QWORD *)(a1 + 304) << 11) >> 56;
        goto LABEL_745;
      case 2:
        if (!v43)
          goto LABEL_525;
        if ((*(_QWORD *)(a1 + 304) & 0x20000000000000) == 0)
        {
          PBReaderReadString();
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = 120;
          goto LABEL_513;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_819;
        v408 = (uint64_t)(*(_QWORD *)(a1 + 304) << 10) >> 56;
        goto LABEL_745;
      case 3:
        if (!v43)
          goto LABEL_525;
        if ((*(_QWORD *)(a1 + 304) & 0x800000000000000) == 0)
        {
          PBReaderReadString();
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = 168;
          goto LABEL_513;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_819;
        v408 = (16 * *(_QWORD *)(a1 + 304)) >> 56;
        goto LABEL_745;
      case 4:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v50 = 0;
        v51 = 0;
        v52 = 0;
        *(_QWORD *)(a1 + 304) |= 2uLL;
        while (2)
        {
          v53 = *v27;
          v54 = *(_QWORD *)(v3 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              v38 = v51++ >= 9;
              if (v38)
              {
                LODWORD(v52) = 0;
                goto LABEL_531;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          LODWORD(v52) = 0;
LABEL_531:
        v405 = 240;
        goto LABEL_676;
      case 5:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        *(_QWORD *)(a1 + 304) |= 0x200uLL;
        while (2)
        {
          v60 = *v27;
          v61 = *(_QWORD *)(v3 + v60);
          v62 = v61 + 1;
          if (v61 == -1 || v62 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v61);
            *(_QWORD *)(v3 + v60) = v62;
            v59 |= (unint64_t)(v63 & 0x7F) << v57;
            if (v63 < 0)
            {
              v57 += 7;
              v38 = v58++ >= 9;
              if (v38)
              {
                v59 = 0;
                goto LABEL_535;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v59 = 0;
LABEL_535:
        v406 = v59 != 0;
        v407 = 266;
        goto LABEL_713;
      case 6:
        if (v43 && (*(_QWORD *)(a1 + 304) & 0x100000000000000) == 0)
        {
          PBReaderReadString();
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          if (v64)
            -[GEOClientCapabilities _addNoFlagsDisplayLanguages:](a1, v64);

          goto LABEL_746;
        }
        v403 = PBReaderSkipValueWithTag();
        v29 = (int *)MEMORY[0x1E0D82BC8];
        v12 = (int *)MEMORY[0x1E0D82BD8];
        v30 = (int *)MEMORY[0x1E0D82BB8];
        if ((v403 & 1) == 0)
          goto LABEL_777;
        goto LABEL_748;
      case 7:
        if (!v43)
          goto LABEL_525;
        if ((*(_QWORD *)(a1 + 304) & 0x200000000000000) == 0)
        {
          PBReaderReadString();
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = 152;
          goto LABEL_513;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_819;
        v408 = (uint64_t)(*(_QWORD *)(a1 + 304) << 6) >> 56;
        goto LABEL_745;
      case 8:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v65 = 0;
        v66 = 0;
        v52 = 0;
        *(_QWORD *)(a1 + 304) |= 8uLL;
        while (2)
        {
          v67 = *v27;
          v68 = *(_QWORD *)(v3 + v67);
          v69 = v68 + 1;
          if (v68 == -1 || v69 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v70 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v68);
            *(_QWORD *)(v3 + v67) = v69;
            v52 |= (unint64_t)(v70 & 0x7F) << v65;
            if (v70 < 0)
            {
              v65 += 7;
              v38 = v66++ >= 9;
              if (v38)
              {
                LODWORD(v52) = 0;
                goto LABEL_539;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          LODWORD(v52) = 0;
LABEL_539:
        v405 = 248;
        goto LABEL_676;
      case 9:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v71 = 0;
        v72 = 0;
        v52 = 0;
        *(_QWORD *)(a1 + 304) |= 4uLL;
        while (2)
        {
          v73 = *v27;
          v74 = *(_QWORD *)(v3 + v73);
          v75 = v74 + 1;
          if (v74 == -1 || v75 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v76 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v74);
            *(_QWORD *)(v3 + v73) = v75;
            v52 |= (unint64_t)(v76 & 0x7F) << v71;
            if (v76 < 0)
            {
              v71 += 7;
              v38 = v72++ >= 9;
              if (v38)
              {
                LODWORD(v52) = 0;
                goto LABEL_543;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          LODWORD(v52) = 0;
LABEL_543:
        v405 = 244;
        goto LABEL_676;
      case 10:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v77 = 0;
        v78 = 0;
        v52 = 0;
        *(_QWORD *)(a1 + 304) |= 1uLL;
        while (2)
        {
          v79 = *v27;
          v80 = *(_QWORD *)(v3 + v79);
          v81 = v80 + 1;
          if (v80 == -1 || v81 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v82 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v80);
            *(_QWORD *)(v3 + v79) = v81;
            v52 |= (unint64_t)(v82 & 0x7F) << v77;
            if (v82 < 0)
            {
              v77 += 7;
              v38 = v78++ >= 9;
              if (v38)
              {
                LODWORD(v52) = 0;
                goto LABEL_547;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          LODWORD(v52) = 0;
LABEL_547:
        v405 = 236;
        goto LABEL_676;
      case 11:
        if (!v43)
          goto LABEL_525;
        if ((*(_QWORD *)(a1 + 304) & 0x40000000000000) == 0)
        {
          PBReaderReadString();
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = 128;
          goto LABEL_513;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_819;
        v408 = (uint64_t)(*(_QWORD *)(a1 + 304) << 9) >> 56;
        goto LABEL_745;
      case 12:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v83 = 0;
        v84 = 0;
        v85 = 0;
        *(_QWORD *)(a1 + 304) |= 0x80uLL;
        while (2)
        {
          v86 = *v27;
          v87 = *(_QWORD *)(v3 + v86);
          v88 = v87 + 1;
          if (v87 == -1 || v88 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v89 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v87);
            *(_QWORD *)(v3 + v86) = v88;
            v85 |= (unint64_t)(v89 & 0x7F) << v83;
            if (v89 < 0)
            {
              v83 += 7;
              v38 = v84++ >= 9;
              if (v38)
              {
                v85 = 0;
                goto LABEL_551;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v85 = 0;
LABEL_551:
        v406 = v85 != 0;
        v407 = 264;
        goto LABEL_713;
      case 13:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v90 = 0;
        v91 = 0;
        v92 = 0;
        *(_QWORD *)(a1 + 304) |= 0x4000uLL;
        while (2)
        {
          v93 = *v27;
          v94 = *(_QWORD *)(v3 + v93);
          v95 = v94 + 1;
          if (v94 == -1 || v95 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v96 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v94);
            *(_QWORD *)(v3 + v93) = v95;
            v92 |= (unint64_t)(v96 & 0x7F) << v90;
            if (v96 < 0)
            {
              v90 += 7;
              v38 = v91++ >= 9;
              if (v38)
              {
                v92 = 0;
                goto LABEL_555;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v92 = 0;
LABEL_555:
        v406 = v92 != 0;
        v407 = 271;
        goto LABEL_713;
      case 14:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v97 = 0;
        v98 = 0;
        v52 = 0;
        *(_QWORD *)(a1 + 304) |= 0x40uLL;
        while (2)
        {
          v99 = *v27;
          v100 = *(_QWORD *)(v3 + v99);
          v101 = v100 + 1;
          if (v100 == -1 || v101 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v102 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v100);
            *(_QWORD *)(v3 + v99) = v101;
            v52 |= (unint64_t)(v102 & 0x7F) << v97;
            if (v102 < 0)
            {
              v97 += 7;
              v38 = v98++ >= 9;
              if (v38)
              {
                LODWORD(v52) = 0;
                goto LABEL_559;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          LODWORD(v52) = 0;
LABEL_559:
        v405 = 260;
        goto LABEL_676;
      case 16:
        if (!v43)
          goto LABEL_525;
        if ((*(_QWORD *)(a1 + 304) & 0x400000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_819;
          v408 = (32 * *(_QWORD *)(a1 + 304)) >> 56;
          goto LABEL_745;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_819;
        v106 = objc_alloc_init(GEOFormattedStringClientCapabilities);
        if (!GEOFormattedStringClientCapabilitiesReadAllFrom((uint64_t)v106, (void *)v3))
          goto LABEL_818;
        PBReaderRecallMark();
        v107 = 160;
        goto LABEL_422;
      case 17:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v108 = 0;
        v109 = 0;
        v110 = 0;
        *(_QWORD *)(a1 + 304) |= 0x8000uLL;
        while (2)
        {
          v111 = *v27;
          v112 = *(_QWORD *)(v3 + v111);
          v113 = v112 + 1;
          if (v112 == -1 || v113 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v114 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v112);
            *(_QWORD *)(v3 + v111) = v113;
            v110 |= (unint64_t)(v114 & 0x7F) << v108;
            if (v114 < 0)
            {
              v108 += 7;
              v38 = v109++ >= 9;
              if (v38)
              {
                v110 = 0;
                goto LABEL_563;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v110 = 0;
LABEL_563:
        v406 = v110 != 0;
        v407 = 272;
        goto LABEL_713;
      case 18:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v115 = 0;
        v116 = 0;
        v117 = 0;
        *(_QWORD *)(a1 + 304) |= 0x100uLL;
        while (2)
        {
          v118 = *v27;
          v119 = *(_QWORD *)(v3 + v118);
          v120 = v119 + 1;
          if (v119 == -1 || v120 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v121 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v119);
            *(_QWORD *)(v3 + v118) = v120;
            v117 |= (unint64_t)(v121 & 0x7F) << v115;
            if (v121 < 0)
            {
              v115 += 7;
              v38 = v116++ >= 9;
              if (v38)
              {
                v117 = 0;
                goto LABEL_567;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v117 = 0;
LABEL_567:
        v406 = v117 != 0;
        v407 = 265;
        goto LABEL_713;
      case 19:
        if (!v43)
          goto LABEL_525;
        if ((*(_BYTE *)(a1 + 312) & 1) == 0)
        {
          PBReaderReadString();
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = 208;
          goto LABEL_513;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_819;
        LOBYTE(v408) = *(_BYTE *)(a1 + 312) << 7;
        goto LABEL_742;
      case 20:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v122 = 0;
        v123 = 0;
        v124 = 0;
        *(_QWORD *)(a1 + 304) |= 0x400000000uLL;
        while (2)
        {
          v125 = *v27;
          v126 = *(_QWORD *)(v3 + v125);
          v127 = v126 + 1;
          if (v126 == -1 || v127 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v128 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v126);
            *(_QWORD *)(v3 + v125) = v127;
            v124 |= (unint64_t)(v128 & 0x7F) << v122;
            if (v128 < 0)
            {
              v122 += 7;
              v38 = v123++ >= 9;
              if (v38)
              {
                v124 = 0;
                goto LABEL_571;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v124 = 0;
LABEL_571:
        v406 = v124 != 0;
        v407 = 291;
        goto LABEL_713;
      case 21:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v129 = 0;
        v130 = 0;
        v131 = 0;
        *(_QWORD *)(a1 + 304) |= 0x80000000uLL;
        while (2)
        {
          v132 = *v27;
          v133 = *(_QWORD *)(v3 + v132);
          v134 = v133 + 1;
          if (v133 == -1 || v134 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v135 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v133);
            *(_QWORD *)(v3 + v132) = v134;
            v131 |= (unint64_t)(v135 & 0x7F) << v129;
            if (v135 < 0)
            {
              v129 += 7;
              v38 = v130++ >= 9;
              if (v38)
              {
                v131 = 0;
                goto LABEL_575;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v131 = 0;
LABEL_575:
        v406 = v131 != 0;
        v407 = 288;
        goto LABEL_713;
      case 22:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v136 = 0;
        v137 = 0;
        v138 = 0;
        *(_QWORD *)(a1 + 304) |= 0x40000000uLL;
        while (2)
        {
          v139 = *v27;
          v140 = *(_QWORD *)(v3 + v139);
          v141 = v140 + 1;
          if (v140 == -1 || v141 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v142 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v140);
            *(_QWORD *)(v3 + v139) = v141;
            v138 |= (unint64_t)(v142 & 0x7F) << v136;
            if (v142 < 0)
            {
              v136 += 7;
              v38 = v137++ >= 9;
              if (v38)
              {
                v138 = 0;
                goto LABEL_579;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v138 = 0;
LABEL_579:
        v406 = v138 != 0;
        v407 = 287;
        goto LABEL_713;
      case 23:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v143 = 0;
        v144 = 0;
        v145 = 0;
        *(_QWORD *)(a1 + 304) |= 0x400uLL;
        while (2)
        {
          v146 = *v27;
          v147 = *(_QWORD *)(v3 + v146);
          v148 = v147 + 1;
          if (v147 == -1 || v148 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v149 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v147);
            *(_QWORD *)(v3 + v146) = v148;
            v145 |= (unint64_t)(v149 & 0x7F) << v143;
            if (v149 < 0)
            {
              v143 += 7;
              v38 = v144++ >= 9;
              if (v38)
              {
                v145 = 0;
                goto LABEL_583;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v145 = 0;
LABEL_583:
        v406 = v145 != 0;
        v407 = 267;
        goto LABEL_713;
      case 24:
        if (!v43)
          goto LABEL_525;
        if ((*(_QWORD *)(a1 + 304) & 0x4000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_819;
          v408 = (uint64_t)(*(_QWORD *)(a1 + 304) << 13) >> 56;
          goto LABEL_745;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_819;
        v106 = objc_alloc_init(GEOAbAssignInfo);
        if (!GEOAbAssignInfoReadAllFrom((uint64_t)v106, (void *)v3))
          goto LABEL_818;
        PBReaderRecallMark();
        v107 = 96;
        goto LABEL_422;
      case 25:
        if (!v43)
          goto LABEL_525;
        if ((*(_QWORD *)(a1 + 304) & 0x8000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_819;
          v408 = *(char *)(a1 + 311);
          goto LABEL_745;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_819;
        v106 = objc_alloc_init(GEOLocalTime);
        if (!GEOLocalTimeReadAllFrom((uint64_t)v106, (void *)v3))
          goto LABEL_818;
        PBReaderRecallMark();
        v107 = 200;
        goto LABEL_422;
      case 26:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v150 = 0;
        v151 = 0;
        v52 = 0;
        *(_QWORD *)(a1 + 304) |= 0x20uLL;
        while (2)
        {
          v152 = *v27;
          v153 = *(_QWORD *)(v3 + v152);
          v154 = v153 + 1;
          if (v153 == -1 || v154 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v155 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v153);
            *(_QWORD *)(v3 + v152) = v154;
            v52 |= (unint64_t)(v155 & 0x7F) << v150;
            if (v155 < 0)
            {
              v150 += 7;
              v38 = v151++ >= 9;
              if (v38)
              {
                LODWORD(v52) = 0;
                goto LABEL_587;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          LODWORD(v52) = 0;
LABEL_587:
        v405 = 256;
        goto LABEL_676;
      case 27:
        if (!v43 || (*(_QWORD *)(a1 + 304) & 0x1000000000000) != 0)
          goto LABEL_525;
        if (v40 != 2)
        {
          v409 = 0;
          v410 = 0;
          v411 = 0;
          while (1)
          {
            v412 = *v27;
            v413 = *(_QWORD *)(v3 + v412);
            v414 = v413 + 1;
            if (v413 == -1 || v414 > *(_QWORD *)(v3 + *v12))
              goto LABEL_772;
            v415 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v413);
            *(_QWORD *)(v3 + v412) = v414;
            v411 |= (unint64_t)(v415 & 0x7F) << v409;
            if (v415 < 0)
            {
              v409 += 7;
              v38 = v410++ >= 9;
              if (!v38)
                continue;
            }
            goto LABEL_773;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_819;
        while (1)
        {
          v156 = (int *)MEMORY[0x1E0D82BD8];
          v157 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v27) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_527;
          }
          v158 = 0;
          v159 = 0;
          v160 = 0;
          v161 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v162 = *v27;
            v163 = *(_QWORD *)(v3 + v162);
            v164 = v163 + 1;
            if (v163 == -1 || v164 > *(_QWORD *)(v3 + *v156))
              break;
            v165 = *(_BYTE *)(*(_QWORD *)(v3 + *v161) + v163);
            *(_QWORD *)(v3 + v162) = v164;
            v160 |= (unint64_t)(v165 & 0x7F) << v158;
            if (v165 < 0)
            {
              v158 += 7;
              v38 = v159++ >= 9;
              if (!v38)
                continue;
            }
            goto LABEL_217;
          }
          *(_BYTE *)(v3 + *v157) = 1;
LABEL_217:
          PBRepeatedInt32Add();
        }
      case 28:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v166 = 0;
        v167 = 0;
        v168 = 0;
        *(_QWORD *)(a1 + 304) |= 0x40000uLL;
        while (2)
        {
          v169 = *v27;
          v170 = *(_QWORD *)(v3 + v169);
          v171 = v170 + 1;
          if (v170 == -1 || v171 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v172 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v170);
            *(_QWORD *)(v3 + v169) = v171;
            v168 |= (unint64_t)(v172 & 0x7F) << v166;
            if (v172 < 0)
            {
              v166 += 7;
              v38 = v167++ >= 9;
              if (v38)
              {
                v168 = 0;
                goto LABEL_591;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v168 = 0;
LABEL_591:
        v406 = v168 != 0;
        v407 = 275;
        goto LABEL_713;
      case 29:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v173 = 0;
        v174 = 0;
        v175 = 0;
        *(_QWORD *)(a1 + 304) |= 0x800000000uLL;
        while (2)
        {
          v176 = *v27;
          v177 = *(_QWORD *)(v3 + v176);
          v178 = v177 + 1;
          if (v177 == -1 || v178 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v179 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v177);
            *(_QWORD *)(v3 + v176) = v178;
            v175 |= (unint64_t)(v179 & 0x7F) << v173;
            if (v179 < 0)
            {
              v173 += 7;
              v38 = v174++ >= 9;
              if (v38)
              {
                v175 = 0;
                goto LABEL_595;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v175 = 0;
LABEL_595:
        v406 = v175 != 0;
        v407 = 292;
        goto LABEL_713;
      case 30:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v180 = 0;
        v181 = 0;
        v182 = 0;
        *(_QWORD *)(a1 + 304) |= 0x100000000uLL;
        while (2)
        {
          v183 = *v27;
          v184 = *(_QWORD *)(v3 + v183);
          v185 = v184 + 1;
          if (v184 == -1 || v185 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v186 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v184);
            *(_QWORD *)(v3 + v183) = v185;
            v182 |= (unint64_t)(v186 & 0x7F) << v180;
            if (v186 < 0)
            {
              v180 += 7;
              v38 = v181++ >= 9;
              if (v38)
              {
                v182 = 0;
                goto LABEL_599;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v182 = 0;
LABEL_599:
        v406 = v182 != 0;
        v407 = 289;
        goto LABEL_713;
      case 31:
        if (!v43)
          goto LABEL_525;
        if ((*(_QWORD *)(a1 + 304) & 0x2000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_819;
          v408 = (4 * *(_QWORD *)(a1 + 304)) >> 56;
          goto LABEL_745;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_819;
        v106 = objc_alloc_init(GEOLocalizationCapabilities);
        if (!GEOLocalizationCapabilitiesReadAllFrom((uint64_t)v106, (void *)v3))
          goto LABEL_818;
        PBReaderRecallMark();
        v107 = 184;
        goto LABEL_422;
      case 32:
        if (!v43)
          goto LABEL_525;
        if ((*(_QWORD *)(a1 + 304) & 0x80000000000000) == 0)
        {
          PBReaderReadString();
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = 136;
          goto LABEL_513;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_819;
        v408 = *(char *)(a1 + 310);
        goto LABEL_745;
      case 33:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v187 = 0;
        v188 = 0;
        v189 = 0;
        *(_QWORD *)(a1 + 304) |= 0x200000uLL;
        while (2)
        {
          v190 = *v27;
          v191 = *(_QWORD *)(v3 + v190);
          v192 = v191 + 1;
          if (v191 == -1 || v192 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v193 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v191);
            *(_QWORD *)(v3 + v190) = v192;
            v189 |= (unint64_t)(v193 & 0x7F) << v187;
            if (v193 < 0)
            {
              v187 += 7;
              v38 = v188++ >= 9;
              if (v38)
              {
                v189 = 0;
                goto LABEL_603;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v189 = 0;
LABEL_603:
        v406 = v189 != 0;
        v407 = 278;
        goto LABEL_713;
      case 34:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v194 = 0;
        v195 = 0;
        v196 = 0;
        *(_QWORD *)(a1 + 304) |= 0x200000000uLL;
        while (2)
        {
          v197 = *v27;
          v198 = *(_QWORD *)(v3 + v197);
          v199 = v198 + 1;
          if (v198 == -1 || v199 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v200 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v198);
            *(_QWORD *)(v3 + v197) = v199;
            v196 |= (unint64_t)(v200 & 0x7F) << v194;
            if (v200 < 0)
            {
              v194 += 7;
              v38 = v195++ >= 9;
              if (v38)
              {
                v196 = 0;
                goto LABEL_607;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v196 = 0;
LABEL_607:
        v406 = v196 != 0;
        v407 = 290;
        goto LABEL_713;
      case 35:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v201 = 0;
        v202 = 0;
        v203 = 0;
        *(_QWORD *)(a1 + 304) |= 0x2000000uLL;
        while (2)
        {
          v204 = *v27;
          v205 = *(_QWORD *)(v3 + v204);
          v206 = v205 + 1;
          if (v205 == -1 || v206 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v207 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v205);
            *(_QWORD *)(v3 + v204) = v206;
            v203 |= (unint64_t)(v207 & 0x7F) << v201;
            if (v207 < 0)
            {
              v201 += 7;
              v38 = v202++ >= 9;
              if (v38)
              {
                v203 = 0;
                goto LABEL_611;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v203 = 0;
LABEL_611:
        v406 = v203 != 0;
        v407 = 282;
        goto LABEL_713;
      case 36:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v208 = 0;
        v209 = 0;
        v210 = 0;
        *(_QWORD *)(a1 + 304) |= 0x20000000000uLL;
        while (2)
        {
          v211 = *v27;
          v212 = *(_QWORD *)(v3 + v211);
          v213 = v212 + 1;
          if (v212 == -1 || v213 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v214 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v212);
            *(_QWORD *)(v3 + v211) = v213;
            v210 |= (unint64_t)(v214 & 0x7F) << v208;
            if (v214 < 0)
            {
              v208 += 7;
              v38 = v209++ >= 9;
              if (v38)
              {
                v210 = 0;
                goto LABEL_615;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v210 = 0;
LABEL_615:
        v406 = v210 != 0;
        v407 = 298;
        goto LABEL_713;
      case 37:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v215 = 0;
        v216 = 0;
        v217 = 0;
        *(_QWORD *)(a1 + 304) |= 0x100000000000uLL;
        while (2)
        {
          v218 = *v27;
          v219 = *(_QWORD *)(v3 + v218);
          v220 = v219 + 1;
          if (v219 == -1 || v220 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v221 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v219);
            *(_QWORD *)(v3 + v218) = v220;
            v217 |= (unint64_t)(v221 & 0x7F) << v215;
            if (v221 < 0)
            {
              v215 += 7;
              v38 = v216++ >= 9;
              if (v38)
              {
                v217 = 0;
                goto LABEL_619;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v217 = 0;
LABEL_619:
        v406 = v217 != 0;
        v407 = 301;
        goto LABEL_713;
      case 38:
        if (!v43)
          goto LABEL_525;
        if ((*(_QWORD *)(a1 + 304) & 0x4000000000000000) == 0)
        {
          PBReaderReadString();
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = 192;
          goto LABEL_513;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_819;
        v408 = (2 * *(_QWORD *)(a1 + 304)) >> 56;
        goto LABEL_745;
      case 39:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v222 = 0;
        v223 = 0;
        v224 = 0;
        *(_QWORD *)(a1 + 304) |= 0x200000000000uLL;
        while (2)
        {
          v225 = *v27;
          v226 = *(_QWORD *)(v3 + v225);
          v227 = v226 + 1;
          if (v226 == -1 || v227 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v228 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v226);
            *(_QWORD *)(v3 + v225) = v227;
            v224 |= (unint64_t)(v228 & 0x7F) << v222;
            if (v228 < 0)
            {
              v222 += 7;
              v38 = v223++ >= 9;
              if (v38)
              {
                v224 = 0;
                goto LABEL_623;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v224 = 0;
LABEL_623:
        v406 = v224 != 0;
        v407 = 302;
        goto LABEL_713;
      case 40:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v229 = 0;
        v230 = 0;
        v231 = 0;
        *(_QWORD *)(a1 + 304) |= 0x1000000000uLL;
        while (2)
        {
          v232 = *v27;
          v233 = *(_QWORD *)(v3 + v232);
          v234 = v233 + 1;
          if (v233 == -1 || v234 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v235 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v233);
            *(_QWORD *)(v3 + v232) = v234;
            v231 |= (unint64_t)(v235 & 0x7F) << v229;
            if (v235 < 0)
            {
              v229 += 7;
              v38 = v230++ >= 9;
              if (v38)
              {
                v231 = 0;
                goto LABEL_627;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v231 = 0;
LABEL_627:
        v406 = v231 != 0;
        v407 = 293;
        goto LABEL_713;
      case 41:
        if (!v43)
          goto LABEL_525;
        if ((*(_QWORD *)(a1 + 304) & 0x8000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_819;
          v408 = (uint64_t)(*(_QWORD *)(a1 + 304) << 12) >> 56;
          goto LABEL_745;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_819;
        v106 = objc_alloc_init(GEOAdvisoryClientCapabilities);
        if (!GEOAdvisoryClientCapabilitiesReadAllFrom((uint64_t)v106, (void *)v3))
          goto LABEL_818;
        PBReaderRecallMark();
        v107 = 104;
        goto LABEL_422;
      case 42:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v236 = 0;
        v237 = 0;
        v238 = 0;
        *(_QWORD *)(a1 + 304) |= 0x10000000000uLL;
        while (2)
        {
          v239 = *v27;
          v240 = *(_QWORD *)(v3 + v239);
          v241 = v240 + 1;
          if (v240 == -1 || v241 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v242 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v240);
            *(_QWORD *)(v3 + v239) = v241;
            v238 |= (unint64_t)(v242 & 0x7F) << v236;
            if (v242 < 0)
            {
              v236 += 7;
              v38 = v237++ >= 9;
              if (v38)
              {
                v238 = 0;
                goto LABEL_631;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v238 = 0;
LABEL_631:
        v406 = v238 != 0;
        v407 = 297;
        goto LABEL_713;
      case 43:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v243 = 0;
        v244 = 0;
        v245 = 0;
        *(_QWORD *)(a1 + 304) |= 0x40000000000uLL;
        while (2)
        {
          v246 = *v27;
          v247 = *(_QWORD *)(v3 + v246);
          v248 = v247 + 1;
          if (v247 == -1 || v248 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v249 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v247);
            *(_QWORD *)(v3 + v246) = v248;
            v245 |= (unint64_t)(v249 & 0x7F) << v243;
            if (v249 < 0)
            {
              v243 += 7;
              v38 = v244++ >= 9;
              if (v38)
              {
                v245 = 0;
                goto LABEL_635;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v245 = 0;
LABEL_635:
        v406 = v245 != 0;
        v407 = 299;
        goto LABEL_713;
      case 44:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v250 = 0;
        v251 = 0;
        v252 = 0;
        *(_QWORD *)(a1 + 304) |= 0x20000uLL;
        while (2)
        {
          v253 = *v27;
          v254 = *(_QWORD *)(v3 + v253);
          v255 = v254 + 1;
          if (v254 == -1 || v255 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v256 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v254);
            *(_QWORD *)(v3 + v253) = v255;
            v252 |= (unint64_t)(v256 & 0x7F) << v250;
            if (v256 < 0)
            {
              v250 += 7;
              v38 = v251++ >= 9;
              if (v38)
              {
                v252 = 0;
                goto LABEL_639;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v252 = 0;
LABEL_639:
        v406 = v252 != 0;
        v407 = 274;
        goto LABEL_713;
      case 45:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v257 = 0;
        v258 = 0;
        v259 = 0;
        *(_QWORD *)(a1 + 304) |= 0x10000uLL;
        while (2)
        {
          v260 = *v27;
          v261 = *(_QWORD *)(v3 + v260);
          v262 = v261 + 1;
          if (v261 == -1 || v262 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v263 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v261);
            *(_QWORD *)(v3 + v260) = v262;
            v259 |= (unint64_t)(v263 & 0x7F) << v257;
            if (v263 < 0)
            {
              v257 += 7;
              v38 = v258++ >= 9;
              if (v38)
              {
                v259 = 0;
                goto LABEL_643;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v259 = 0;
LABEL_643:
        v406 = v259 != 0;
        v407 = 273;
        goto LABEL_713;
      case 46:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v264 = 0;
        v265 = 0;
        v266 = 0;
        *(_QWORD *)(a1 + 304) |= 0x8000000000uLL;
        while (2)
        {
          v267 = *v27;
          v268 = *(_QWORD *)(v3 + v267);
          v269 = v268 + 1;
          if (v268 == -1 || v269 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v270 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v268);
            *(_QWORD *)(v3 + v267) = v269;
            v266 |= (unint64_t)(v270 & 0x7F) << v264;
            if (v270 < 0)
            {
              v264 += 7;
              v38 = v265++ >= 9;
              if (v38)
              {
                v266 = 0;
                goto LABEL_647;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v266 = 0;
LABEL_647:
        v406 = v266 != 0;
        v407 = 296;
        goto LABEL_713;
      case 47:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v271 = 0;
        v272 = 0;
        v273 = 0;
        *(_QWORD *)(a1 + 304) |= 0x2000uLL;
        while (2)
        {
          v274 = *v27;
          v275 = *(_QWORD *)(v3 + v274);
          v276 = v275 + 1;
          if (v275 == -1 || v276 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v277 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v275);
            *(_QWORD *)(v3 + v274) = v276;
            v273 |= (unint64_t)(v277 & 0x7F) << v271;
            if (v277 < 0)
            {
              v271 += 7;
              v38 = v272++ >= 9;
              if (v38)
              {
                v273 = 0;
                goto LABEL_651;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v273 = 0;
LABEL_651:
        v406 = v273 != 0;
        v407 = 270;
        goto LABEL_713;
      case 48:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v278 = 0;
        v279 = 0;
        v280 = 0;
        *(_QWORD *)(a1 + 304) |= 0x20000000uLL;
        while (2)
        {
          v281 = *v27;
          v282 = *(_QWORD *)(v3 + v281);
          v283 = v282 + 1;
          if (v282 == -1 || v283 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v284 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v282);
            *(_QWORD *)(v3 + v281) = v283;
            v280 |= (unint64_t)(v284 & 0x7F) << v278;
            if (v284 < 0)
            {
              v278 += 7;
              v38 = v279++ >= 9;
              if (v38)
              {
                v280 = 0;
                goto LABEL_655;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v280 = 0;
LABEL_655:
        v406 = v280 != 0;
        v407 = 286;
        goto LABEL_713;
      case 49:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v285 = 0;
        v286 = 0;
        v287 = 0;
        *(_QWORD *)(a1 + 304) |= 0x10000000uLL;
        while (2)
        {
          v288 = *v27;
          v289 = *(_QWORD *)(v3 + v288);
          v290 = v289 + 1;
          if (v289 == -1 || v290 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v291 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v289);
            *(_QWORD *)(v3 + v288) = v290;
            v287 |= (unint64_t)(v291 & 0x7F) << v285;
            if (v291 < 0)
            {
              v285 += 7;
              v38 = v286++ >= 9;
              if (v38)
              {
                v287 = 0;
                goto LABEL_659;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v287 = 0;
LABEL_659:
        v406 = v287 != 0;
        v407 = 285;
        goto LABEL_713;
      case 50:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v292 = 0;
        v293 = 0;
        v294 = 0;
        *(_QWORD *)(a1 + 304) |= 0x800uLL;
        while (2)
        {
          v295 = *v27;
          v296 = *(_QWORD *)(v3 + v295);
          v297 = v296 + 1;
          if (v296 == -1 || v297 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v298 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v296);
            *(_QWORD *)(v3 + v295) = v297;
            v294 |= (unint64_t)(v298 & 0x7F) << v292;
            if (v298 < 0)
            {
              v292 += 7;
              v38 = v293++ >= 9;
              if (v38)
              {
                v294 = 0;
                goto LABEL_663;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v294 = 0;
LABEL_663:
        v406 = v294 != 0;
        v407 = 268;
        goto LABEL_713;
      case 51:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v299 = 0;
        v300 = 0;
        v301 = 0;
        *(_QWORD *)(a1 + 304) |= 0x1000uLL;
        while (2)
        {
          v302 = *v27;
          v303 = *(_QWORD *)(v3 + v302);
          v304 = v303 + 1;
          if (v303 == -1 || v304 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v305 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v303);
            *(_QWORD *)(v3 + v302) = v304;
            v301 |= (unint64_t)(v305 & 0x7F) << v299;
            if (v305 < 0)
            {
              v299 += 7;
              v38 = v300++ >= 9;
              if (v38)
              {
                v301 = 0;
                goto LABEL_667;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v301 = 0;
LABEL_667:
        v406 = v301 != 0;
        v407 = 269;
        goto LABEL_713;
      case 52:
        if (!v43 || (*(_QWORD *)(a1 + 304) & 0x2000000000000) != 0)
          goto LABEL_525;
        if (v40 != 2)
        {
          v416 = 0;
          v417 = 0;
          v418 = 0;
          while (1)
          {
            v419 = *v27;
            v420 = *(_QWORD *)(v3 + v419);
            v421 = v420 + 1;
            if (v420 == -1 || v421 > *(_QWORD *)(v3 + *v12))
              goto LABEL_772;
            v422 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v420);
            *(_QWORD *)(v3 + v419) = v421;
            v418 |= (unint64_t)(v422 & 0x7F) << v416;
            if (v422 < 0)
            {
              v416 += 7;
              v38 = v417++ >= 9;
              if (!v38)
                continue;
            }
            goto LABEL_773;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_819;
        while (1)
        {
          v306 = (int *)MEMORY[0x1E0D82BD8];
          v307 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v27) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            goto LABEL_527;
          }
          v308 = 0;
          v309 = 0;
          v310 = 0;
          v311 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v312 = *v27;
            v313 = *(_QWORD *)(v3 + v312);
            v314 = v313 + 1;
            if (v313 == -1 || v314 > *(_QWORD *)(v3 + *v306))
              break;
            v315 = *(_BYTE *)(*(_QWORD *)(v3 + *v311) + v313);
            *(_QWORD *)(v3 + v312) = v314;
            v310 |= (unint64_t)(v315 & 0x7F) << v308;
            if (v315 < 0)
            {
              v308 += 7;
              v38 = v309++ >= 9;
              if (!v38)
                continue;
            }
            goto LABEL_408;
          }
          *(_BYTE *)(v3 + *v307) = 1;
LABEL_408:
          PBRepeatedInt32Add();
        }
      case 53:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v316 = 0;
        v317 = 0;
        v318 = 0;
        *(_QWORD *)(a1 + 304) |= 0x400000uLL;
        while (2)
        {
          v319 = *v27;
          v320 = *(_QWORD *)(v3 + v319);
          v321 = v320 + 1;
          if (v320 == -1 || v321 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v322 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v320);
            *(_QWORD *)(v3 + v319) = v321;
            v318 |= (unint64_t)(v322 & 0x7F) << v316;
            if (v322 < 0)
            {
              v316 += 7;
              v38 = v317++ >= 9;
              if (v38)
              {
                v318 = 0;
                goto LABEL_671;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v318 = 0;
LABEL_671:
        v406 = v318 != 0;
        v407 = 279;
        goto LABEL_713;
      case 54:
        if (!v43)
          goto LABEL_525;
        if ((*(_BYTE *)(a1 + 312) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_819;
          LOBYTE(v408) = *(_BYTE *)(a1 + 312) << 6;
LABEL_742:
          v408 = (char)v408;
LABEL_745:
          v6 += v408 >> 7;
LABEL_746:
          v29 = (int *)MEMORY[0x1E0D82BC8];
          v12 = (int *)MEMORY[0x1E0D82BD8];
LABEL_747:
          v30 = (int *)MEMORY[0x1E0D82BB8];
LABEL_748:
          if (!(v438 & 1 | (v6 != 0)))
          {
            v28 = 1;
LABEL_778:
            v24 = v439;
            v25 = v440;
LABEL_779:
            if ((v24 & 1) == 0)
              goto LABEL_781;
LABEL_780:
            *(_QWORD *)(a1 + 304) |= 0x400000000000uLL;
            goto LABEL_781;
          }
          v24 = v439;
          v25 = v440;
          if (*(_QWORD *)(v3 + *v27) >= *(_QWORD *)(v3 + *v12))
            goto LABEL_774;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_819;
        v106 = objc_alloc_init(GEOWalkingSupportedFeatures);
        if (GEOWalkingSupportedFeaturesReadAllFrom((uint64_t)v106, (void *)v3))
        {
          PBReaderRecallMark();
          v107 = 216;
LABEL_422:
          v323 = *(void **)(a1 + v107);
          *(_QWORD *)(a1 + v107) = v106;
LABEL_514:

          --v6;
          goto LABEL_746;
        }
LABEL_818:

LABEL_819:
        v28 = 0;
        v25 = v440;
        v29 = (int *)MEMORY[0x1E0D82BC8];
        if ((v439 & 1) != 0)
          goto LABEL_780;
LABEL_781:
        if (v25 & 1 | ((v28 & 1) == 0))
        {
          v430 = *(_BYTE *)(a1 + 312) | 3;
          *(_QWORD *)(a1 + 304) |= 0xFFFF800000000000;
          *(_BYTE *)(a1 + 312) = v430;
          goto LABEL_812;
        }
        if (v26)
        {
          while (1)
          {
            v432 = *v26++;
            v431 = v432;
            if (v432 <= 37)
            {
              v433 = 0;
              v434 = 0x10000000000000;
              switch(v431)
              {
                case 0:
                  goto LABEL_812;
                case 1:
                  goto LABEL_811;
                case 2:
                  v433 = 0;
                  v434 = 0x20000000000000;
                  goto LABEL_811;
                case 3:
                  v433 = 0;
                  v434 = 0x800000000000000;
                  goto LABEL_811;
                case 6:
                  v433 = 0;
                  v434 = 0x100000000000000;
                  goto LABEL_811;
                case 7:
                  v433 = 0;
                  v434 = 0x200000000000000;
                  goto LABEL_811;
                case 11:
                  v433 = 0;
                  v434 = 0x40000000000000;
                  goto LABEL_811;
                case 16:
                  v433 = 0;
                  v434 = 0x400000000000000;
                  goto LABEL_811;
                case 19:
                  v434 = 0;
                  v433 = 1;
                  goto LABEL_811;
                case 24:
                  v433 = 0;
                  v434 = 0x4000000000000;
                  goto LABEL_811;
                case 25:
                  v433 = 0;
                  v434 = 0x8000000000000000;
                  goto LABEL_811;
                case 27:
                  v433 = 0;
                  v434 = 0x1000000000000;
                  goto LABEL_811;
                case 31:
                  v433 = 0;
                  v434 = 0x2000000000000000;
                  goto LABEL_811;
                case 32:
                  v433 = 0;
                  v434 = 0x80000000000000;
                  goto LABEL_811;
                default:
                  continue;
              }
              break;
            }
            if (v431 > 53)
            {
              switch(v431)
              {
                case '6':
                  v434 = 0;
                  v433 = 2;
                  break;
                case '?':
                  v433 = 0;
                  v434 = 0x800000000000;
                  break;
                case 'A':
                  v433 = 0;
                  v434 = 0x1000000000000000;
                  break;
                default:
                  continue;
              }
            }
            else
            {
              switch(v431)
              {
                case '&':
                  v433 = 0;
                  v434 = 0x4000000000000000;
                  break;
                case ')':
                  v433 = 0;
                  v434 = 0x8000000000000;
                  break;
                case '4':
                  v433 = 0;
                  v434 = 0x2000000000000;
                  break;
                default:
                  continue;
              }
            }
LABEL_811:
            v435 = *(_BYTE *)(a1 + 312) | v433;
            *(_QWORD *)(a1 + 304) |= v434;
            *(_BYTE *)(a1 + 312) = v435;
          }
        }
LABEL_812:
        if (v28)
        {
          v3 = *(_BYTE *)(v3 + *v29) == 0;
          if ((v25 & 1) == 0)
            return v3;
LABEL_816:
          v436 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v25 & 1) != 0)
            goto LABEL_816;
        }
        return v3;
      case 55:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v324 = 0;
        v325 = 0;
        v52 = 0;
        *(_QWORD *)(a1 + 304) |= 0x10uLL;
        while (2)
        {
          v326 = *v27;
          v327 = *(_QWORD *)(v3 + v326);
          v328 = v327 + 1;
          if (v327 == -1 || v328 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v329 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v327);
            *(_QWORD *)(v3 + v326) = v328;
            v52 |= (unint64_t)(v329 & 0x7F) << v324;
            if (v329 < 0)
            {
              v324 += 7;
              v38 = v325++ >= 9;
              if (v38)
              {
                LODWORD(v52) = 0;
                goto LABEL_675;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          LODWORD(v52) = 0;
LABEL_675:
        v405 = 252;
LABEL_676:
        *(_DWORD *)(a1 + v405) = v52;
        goto LABEL_748;
      case 56:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v330 = 0;
        v331 = 0;
        v332 = 0;
        *(_QWORD *)(a1 + 304) |= 0x800000uLL;
        while (2)
        {
          v333 = *v27;
          v334 = *(_QWORD *)(v3 + v333);
          v335 = v334 + 1;
          if (v334 == -1 || v335 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v336 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v334);
            *(_QWORD *)(v3 + v333) = v335;
            v332 |= (unint64_t)(v336 & 0x7F) << v330;
            if (v336 < 0)
            {
              v330 += 7;
              v38 = v331++ >= 9;
              if (v38)
              {
                v332 = 0;
                goto LABEL_680;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v332 = 0;
LABEL_680:
        v406 = v332 != 0;
        v407 = 280;
        goto LABEL_713;
      case 57:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v337 = 0;
        v338 = 0;
        v339 = 0;
        *(_QWORD *)(a1 + 304) |= 0x100000uLL;
        while (2)
        {
          v340 = *v27;
          v341 = *(_QWORD *)(v3 + v340);
          v342 = v341 + 1;
          if (v341 == -1 || v342 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v343 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v341);
            *(_QWORD *)(v3 + v340) = v342;
            v339 |= (unint64_t)(v343 & 0x7F) << v337;
            if (v343 < 0)
            {
              v337 += 7;
              v38 = v338++ >= 9;
              if (v38)
              {
                v339 = 0;
                goto LABEL_684;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v339 = 0;
LABEL_684:
        v406 = v339 != 0;
        v407 = 277;
        goto LABEL_713;
      case 58:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v344 = 0;
        v345 = 0;
        v346 = 0;
        *(_QWORD *)(a1 + 304) |= 0x4000000uLL;
        while (2)
        {
          v347 = *v27;
          v348 = *(_QWORD *)(v3 + v347);
          v349 = v348 + 1;
          if (v348 == -1 || v349 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v350 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v348);
            *(_QWORD *)(v3 + v347) = v349;
            v346 |= (unint64_t)(v350 & 0x7F) << v344;
            if (v350 < 0)
            {
              v344 += 7;
              v38 = v345++ >= 9;
              if (v38)
              {
                v346 = 0;
                goto LABEL_688;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v346 = 0;
LABEL_688:
        v406 = v346 != 0;
        v407 = 283;
        goto LABEL_713;
      case 59:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v351 = 0;
        v352 = 0;
        v353 = 0;
        *(_QWORD *)(a1 + 304) |= 0x4000000000uLL;
        while (2)
        {
          v354 = *v27;
          v355 = *(_QWORD *)(v3 + v354);
          v356 = v355 + 1;
          if (v355 == -1 || v356 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v357 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v355);
            *(_QWORD *)(v3 + v354) = v356;
            v353 |= (unint64_t)(v357 & 0x7F) << v351;
            if (v357 < 0)
            {
              v351 += 7;
              v38 = v352++ >= 9;
              if (v38)
              {
                v353 = 0;
                goto LABEL_692;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v353 = 0;
LABEL_692:
        v406 = v353 != 0;
        v407 = 295;
        goto LABEL_713;
      case 60:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v358 = 0;
        v359 = 0;
        v360 = 0;
        *(_QWORD *)(a1 + 304) |= 0x80000000000uLL;
        while (2)
        {
          v361 = *v27;
          v362 = *(_QWORD *)(v3 + v361);
          v363 = v362 + 1;
          if (v362 == -1 || v363 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v364 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v362);
            *(_QWORD *)(v3 + v361) = v363;
            v360 |= (unint64_t)(v364 & 0x7F) << v358;
            if (v364 < 0)
            {
              v358 += 7;
              v38 = v359++ >= 9;
              if (v38)
              {
                v360 = 0;
                goto LABEL_696;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v360 = 0;
LABEL_696:
        v406 = v360 != 0;
        v407 = 300;
        goto LABEL_713;
      case 61:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v365 = 0;
        v366 = 0;
        v367 = 0;
        *(_QWORD *)(a1 + 304) |= 0x8000000uLL;
        while (2)
        {
          v368 = *v27;
          v369 = *(_QWORD *)(v3 + v368);
          v370 = v369 + 1;
          if (v369 == -1 || v370 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v371 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v369);
            *(_QWORD *)(v3 + v368) = v370;
            v367 |= (unint64_t)(v371 & 0x7F) << v365;
            if (v371 < 0)
            {
              v365 += 7;
              v38 = v366++ >= 9;
              if (v38)
              {
                v367 = 0;
                goto LABEL_700;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v367 = 0;
LABEL_700:
        v406 = v367 != 0;
        v407 = 284;
        goto LABEL_713;
      case 62:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v372 = 0;
        v373 = 0;
        v374 = 0;
        *(_QWORD *)(a1 + 304) |= 0x2000000000uLL;
        while (2)
        {
          v375 = *v27;
          v376 = *(_QWORD *)(v3 + v375);
          v377 = v376 + 1;
          if (v376 == -1 || v377 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v378 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v376);
            *(_QWORD *)(v3 + v375) = v377;
            v374 |= (unint64_t)(v378 & 0x7F) << v372;
            if (v378 < 0)
            {
              v372 += 7;
              v38 = v373++ >= 9;
              if (v38)
              {
                v374 = 0;
                goto LABEL_704;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v374 = 0;
LABEL_704:
        v406 = v374 != 0;
        v407 = 294;
        goto LABEL_713;
      case 63:
        if (!v43 || (*(_QWORD *)(a1 + 304) & 0x800000000000) != 0)
          goto LABEL_525;
        if (v40 != 2)
        {
          v423 = 0;
          v424 = 0;
          v425 = 0;
          while (1)
          {
            v426 = *v27;
            v427 = *(_QWORD *)(v3 + v426);
            v428 = v427 + 1;
            if (v427 == -1 || v428 > *(_QWORD *)(v3 + *v12))
              break;
            v429 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v427);
            *(_QWORD *)(v3 + v426) = v428;
            v425 |= (unint64_t)(v429 & 0x7F) << v423;
            if (v429 < 0)
            {
              v423 += 7;
              v38 = v424++ >= 9;
              if (!v38)
                continue;
            }
            goto LABEL_773;
          }
LABEL_772:
          *(_BYTE *)(v3 + *v29) = 1;
LABEL_773:
          PBRepeatedInt32Add();
          goto LABEL_746;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_819;
        while (1)
        {
          v379 = (int *)MEMORY[0x1E0D82BD8];
          v380 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v27) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8])
            || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
          {
            break;
          }
          v381 = 0;
          v382 = 0;
          v383 = 0;
          v384 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v385 = *v27;
            v386 = *(_QWORD *)(v3 + v385);
            v387 = v386 + 1;
            if (v386 == -1 || v387 > *(_QWORD *)(v3 + *v379))
              break;
            v388 = *(_BYTE *)(*(_QWORD *)(v3 + *v384) + v386);
            *(_QWORD *)(v3 + v385) = v387;
            v383 |= (unint64_t)(v388 & 0x7F) << v381;
            if (v388 < 0)
            {
              v381 += 7;
              v38 = v382++ >= 9;
              if (!v38)
                continue;
            }
            goto LABEL_501;
          }
          *(_BYTE *)(v3 + *v380) = 1;
LABEL_501:
          PBRepeatedInt32Add();
        }
LABEL_527:
        PBReaderRecallMark();
        v12 = (int *)MEMORY[0x1E0D82BD8];
        v29 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_747;
      case 64:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v389 = 0;
        v390 = 0;
        v391 = 0;
        *(_QWORD *)(a1 + 304) |= 0x1000000uLL;
        while (2)
        {
          v392 = *v27;
          v393 = *(_QWORD *)(v3 + v392);
          v394 = v393 + 1;
          if (v393 == -1 || v394 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v395 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v393);
            *(_QWORD *)(v3 + v392) = v394;
            v391 |= (unint64_t)(v395 & 0x7F) << v389;
            if (v395 < 0)
            {
              v389 += 7;
              v38 = v390++ >= 9;
              if (v38)
              {
                v391 = 0;
                goto LABEL_708;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v391 = 0;
LABEL_708:
        v406 = v391 != 0;
        v407 = 281;
        goto LABEL_713;
      case 65:
        if (!v43)
          goto LABEL_525;
        if ((*(_QWORD *)(a1 + 304) & 0x1000000000000000) == 0)
        {
          PBReaderReadString();
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = 176;
LABEL_513:
          v323 = *(void **)(a1 + v49);
          *(_QWORD *)(a1 + v49) = v48;
          goto LABEL_514;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_819;
        v408 = (8 * *(_QWORD *)(a1 + 304)) >> 56;
        goto LABEL_745;
      case 100:
        if ((v7 & 1) == 0)
          goto LABEL_525;
        v396 = 0;
        v397 = 0;
        v398 = 0;
        *(_QWORD *)(a1 + 304) |= 0x80000uLL;
        while (2)
        {
          v399 = *v27;
          v400 = *(_QWORD *)(v3 + v399);
          v401 = v400 + 1;
          if (v400 == -1 || v401 > *(_QWORD *)(v3 + *v12))
          {
            *(_BYTE *)(v3 + *v29) = 1;
          }
          else
          {
            v402 = *(_BYTE *)(*(_QWORD *)(v3 + *v30) + v400);
            *(_QWORD *)(v3 + v399) = v401;
            v398 |= (unint64_t)(v402 & 0x7F) << v396;
            if (v402 < 0)
            {
              v396 += 7;
              v38 = v397++ >= 9;
              if (v38)
              {
                v398 = 0;
                goto LABEL_712;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v29))
          v398 = 0;
LABEL_712:
        v406 = v398 != 0;
        v407 = 276;
LABEL_713:
        *(_BYTE *)(a1 + v407) = v406;
        goto LABEL_748;
      default:
        if ((v24 & 1) == 0 || (*(_QWORD *)(a1 + 304) & 0x400000000000) != 0)
        {
LABEL_525:
          v404 = PBReaderSkipValueWithTag();
          v30 = (int *)MEMORY[0x1E0D82BB8];
          v12 = (int *)MEMORY[0x1E0D82BD8];
          v29 = (int *)MEMORY[0x1E0D82BC8];
          if ((v404 & 1) == 0)
          {
LABEL_777:
            v28 = 0;
            goto LABEL_778;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v103 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v104 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v103;

          }
          v105 = PBUnknownFieldAdd();
          v29 = (int *)MEMORY[0x1E0D82BC8];
          v12 = (int *)MEMORY[0x1E0D82BD8];
          v30 = (int *)MEMORY[0x1E0D82BB8];
          if (!v105)
          {
            v28 = 0;
            v25 = v440;
            goto LABEL_780;
          }
        }
        goto LABEL_748;
    }
  }
}

void sub_189426F5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894270A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894271F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189427FA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894282D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894286D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189428AF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189428C40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189428EB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894291A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894292F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189429524(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189429E28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189429F74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18942A0C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18942A8CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18942ADE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18942B558(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18942FAF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOClientCapabilitiesCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  objc_msgSend(a1[20], "readAll:", 1);
  objc_msgSend(a1[13], "readAll:", 1);
  objc_msgSend(a1[12], "readAll:", 1);
  objc_msgSend(a1[25], "readAll:", 1);
  objc_msgSend(a1[23], "readAll:", 1);
  return objc_msgSend(a1[27], "readAll:", 1);
}

unint64_t GEOClientCapabilitiesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 228))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOClientCapabilitiesReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 232));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 224) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 228) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOClientCapabilitiesReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOClientCapabilitiesReadAllFrom_initialTag;
  Specified = GEOClientCapabilitiesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOClientCapabilitiesCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 232));
  return Specified;
}

void sub_18942FD0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOClientCapabilitiesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOClientCapabilitiesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18942FD6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOClientCapabilitiesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  int v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  int v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  int v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  int v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  int v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  int v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  int v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  int v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  int v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  int v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  int v251;
  unsigned int v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  int v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  int v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  int v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  int v277;
  _BOOL8 v278;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2)
            goto LABEL_488;
          goto LABEL_443;
        case 2u:
          if (v15 == 2)
            goto LABEL_443;
          goto LABEL_488;
        case 3u:
          if (v15 == 2)
            goto LABEL_443;
          goto LABEL_488;
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 6u:
          if (v15 == 2)
            goto LABEL_443;
          goto LABEL_488;
        case 7u:
          if (v15 == 2)
            goto LABEL_443;
          goto LABEL_488;
        case 8u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 9u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v33 = 0;
          while (1)
          {
            v34 = *v2;
            v35 = *(_QWORD *)&a1[v34];
            v36 = v35 + 1;
            if (v35 == -1 || v36 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v37 = *(char *)(*(_QWORD *)&a1[*v5] + v35);
            *(_QWORD *)&a1[v34] = v36;
            if (v37 < 0)
            {
              v22 = v33++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0xAu:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v38 = 0;
          while (1)
          {
            v39 = *v2;
            v40 = *(_QWORD *)&a1[v39];
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v42 = *(char *)(*(_QWORD *)&a1[*v5] + v40);
            *(_QWORD *)&a1[v39] = v41;
            if (v42 < 0)
            {
              v22 = v38++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0xBu:
          if (v15 == 2)
            goto LABEL_443;
          goto LABEL_488;
        case 0xCu:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v43 = 0;
          while (1)
          {
            v44 = *v2;
            v45 = *(_QWORD *)&a1[v44];
            v46 = v45 + 1;
            if (v45 == -1 || v46 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v47 = *(char *)(*(_QWORD *)&a1[*v5] + v45);
            *(_QWORD *)&a1[v44] = v46;
            if (v47 < 0)
            {
              v22 = v43++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0xDu:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v48 = 0;
          while (1)
          {
            v49 = *v2;
            v50 = *(_QWORD *)&a1[v49];
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v52 = *(char *)(*(_QWORD *)&a1[*v5] + v50);
            *(_QWORD *)&a1[v49] = v51;
            if (v52 < 0)
            {
              v22 = v48++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0xEu:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v53 = 0;
          while (1)
          {
            v54 = *v2;
            v55 = *(_QWORD *)&a1[v54];
            v56 = v55 + 1;
            if (v55 == -1 || v56 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v57 = *(char *)(*(_QWORD *)&a1[*v5] + v55);
            *(_QWORD *)&a1[v54] = v56;
            if (v57 < 0)
            {
              v22 = v53++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x10u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringClientCapabilitiesIsValid(a1))
            goto LABEL_488;
          goto LABEL_362;
        case 0x11u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v58 = 0;
          while (1)
          {
            v59 = *v2;
            v60 = *(_QWORD *)&a1[v59];
            v61 = v60 + 1;
            if (v60 == -1 || v61 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v62 = *(char *)(*(_QWORD *)&a1[*v5] + v60);
            *(_QWORD *)&a1[v59] = v61;
            if (v62 < 0)
            {
              v22 = v58++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x12u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v63 = 0;
          while (1)
          {
            v64 = *v2;
            v65 = *(_QWORD *)&a1[v64];
            v66 = v65 + 1;
            if (v65 == -1 || v66 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v67 = *(char *)(*(_QWORD *)&a1[*v5] + v65);
            *(_QWORD *)&a1[v64] = v66;
            if (v67 < 0)
            {
              v22 = v63++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x13u:
          if (v15 == 2)
            goto LABEL_443;
          goto LABEL_488;
        case 0x14u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v68 = 0;
          while (1)
          {
            v69 = *v2;
            v70 = *(_QWORD *)&a1[v69];
            v71 = v70 + 1;
            if (v70 == -1 || v71 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v72 = *(char *)(*(_QWORD *)&a1[*v5] + v70);
            *(_QWORD *)&a1[v69] = v71;
            if (v72 < 0)
            {
              v22 = v68++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x15u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v73 = 0;
          while (1)
          {
            v74 = *v2;
            v75 = *(_QWORD *)&a1[v74];
            v76 = v75 + 1;
            if (v75 == -1 || v76 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v77 = *(char *)(*(_QWORD *)&a1[*v5] + v75);
            *(_QWORD *)&a1[v74] = v76;
            if (v77 < 0)
            {
              v22 = v73++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x16u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v78 = 0;
          while (1)
          {
            v79 = *v2;
            v80 = *(_QWORD *)&a1[v79];
            v81 = v80 + 1;
            if (v80 == -1 || v81 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v82 = *(char *)(*(_QWORD *)&a1[*v5] + v80);
            *(_QWORD *)&a1[v79] = v81;
            if (v82 < 0)
            {
              v22 = v78++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x17u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v83 = 0;
          while (1)
          {
            v84 = *v2;
            v85 = *(_QWORD *)&a1[v84];
            v86 = v85 + 1;
            if (v85 == -1 || v86 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v87 = *(char *)(*(_QWORD *)&a1[*v5] + v85);
            *(_QWORD *)&a1[v84] = v86;
            if (v87 < 0)
            {
              v22 = v83++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x18u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOAbAssignInfoIsValid(a1))
            goto LABEL_488;
          goto LABEL_362;
        case 0x19u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocalTimeIsValid(a1))
            goto LABEL_488;
          goto LABEL_362;
        case 0x1Au:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v88 = 0;
          while (1)
          {
            v89 = *v2;
            v90 = *(_QWORD *)&a1[v89];
            v91 = v90 + 1;
            if (v90 == -1 || v91 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v92 = *(char *)(*(_QWORD *)&a1[*v5] + v90);
            *(_QWORD *)&a1[v89] = v91;
            if (v92 < 0)
            {
              v22 = v88++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x1Bu:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_488;
            while (1)
            {
              v93 = *v2;
              v94 = *(_QWORD *)&a1[v93];
              v95 = v94 + 1;
              if (v94 == -1 || v95 > *(_QWORD *)&a1[*v3])
                goto LABEL_453;
              v96 = *(char *)(*(_QWORD *)&a1[*v5] + v94);
              *(_QWORD *)&a1[v93] = v95;
              if (v96 < 0)
              {
                v97 = v15++;
                if (v97 <= 8)
                  continue;
              }
              goto LABEL_454;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_488;
LABEL_457:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v263 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v264 = *v2;
              v265 = *(_QWORD *)&a1[v264];
              v266 = v265 + 1;
              if (v265 == -1 || v266 > *(_QWORD *)&a1[*v3])
                break;
              v267 = *(char *)(*(_QWORD *)&a1[*v5] + v265);
              *(_QWORD *)&a1[v264] = v266;
              if (v267 < 0)
              {
                v13 = v263++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_457;
            }
            a1[*v4] = 1;
          }
          goto LABEL_362;
        case 0x1Cu:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v98 = 0;
          while (1)
          {
            v99 = *v2;
            v100 = *(_QWORD *)&a1[v99];
            v101 = v100 + 1;
            if (v100 == -1 || v101 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v102 = *(char *)(*(_QWORD *)&a1[*v5] + v100);
            *(_QWORD *)&a1[v99] = v101;
            if (v102 < 0)
            {
              v22 = v98++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x1Du:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v103 = 0;
          while (1)
          {
            v104 = *v2;
            v105 = *(_QWORD *)&a1[v104];
            v106 = v105 + 1;
            if (v105 == -1 || v106 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v107 = *(char *)(*(_QWORD *)&a1[*v5] + v105);
            *(_QWORD *)&a1[v104] = v106;
            if (v107 < 0)
            {
              v22 = v103++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x1Eu:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v108 = 0;
          while (1)
          {
            v109 = *v2;
            v110 = *(_QWORD *)&a1[v109];
            v111 = v110 + 1;
            if (v110 == -1 || v111 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v112 = *(char *)(*(_QWORD *)&a1[*v5] + v110);
            *(_QWORD *)&a1[v109] = v111;
            if (v112 < 0)
            {
              v22 = v108++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x1Fu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocalizationCapabilitiesIsValid(a1))
            goto LABEL_488;
          goto LABEL_362;
        case 0x20u:
          if (v15 == 2)
            goto LABEL_443;
          goto LABEL_488;
        case 0x21u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v113 = 0;
          while (1)
          {
            v114 = *v2;
            v115 = *(_QWORD *)&a1[v114];
            v116 = v115 + 1;
            if (v115 == -1 || v116 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v117 = *(char *)(*(_QWORD *)&a1[*v5] + v115);
            *(_QWORD *)&a1[v114] = v116;
            if (v117 < 0)
            {
              v22 = v113++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x22u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v118 = 0;
          while (1)
          {
            v119 = *v2;
            v120 = *(_QWORD *)&a1[v119];
            v121 = v120 + 1;
            if (v120 == -1 || v121 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v122 = *(char *)(*(_QWORD *)&a1[*v5] + v120);
            *(_QWORD *)&a1[v119] = v121;
            if (v122 < 0)
            {
              v22 = v118++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x23u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v123 = 0;
          while (1)
          {
            v124 = *v2;
            v125 = *(_QWORD *)&a1[v124];
            v126 = v125 + 1;
            if (v125 == -1 || v126 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v127 = *(char *)(*(_QWORD *)&a1[*v5] + v125);
            *(_QWORD *)&a1[v124] = v126;
            if (v127 < 0)
            {
              v22 = v123++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x24u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v128 = 0;
          while (1)
          {
            v129 = *v2;
            v130 = *(_QWORD *)&a1[v129];
            v131 = v130 + 1;
            if (v130 == -1 || v131 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v132 = *(char *)(*(_QWORD *)&a1[*v5] + v130);
            *(_QWORD *)&a1[v129] = v131;
            if (v132 < 0)
            {
              v22 = v128++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x25u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v133 = 0;
          while (1)
          {
            v134 = *v2;
            v135 = *(_QWORD *)&a1[v134];
            v136 = v135 + 1;
            if (v135 == -1 || v136 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v137 = *(char *)(*(_QWORD *)&a1[*v5] + v135);
            *(_QWORD *)&a1[v134] = v136;
            if (v137 < 0)
            {
              v22 = v133++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x26u:
          if (v15 == 2)
            goto LABEL_443;
          goto LABEL_488;
        case 0x27u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v138 = 0;
          while (1)
          {
            v139 = *v2;
            v140 = *(_QWORD *)&a1[v139];
            v141 = v140 + 1;
            if (v140 == -1 || v141 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v142 = *(char *)(*(_QWORD *)&a1[*v5] + v140);
            *(_QWORD *)&a1[v139] = v141;
            if (v142 < 0)
            {
              v22 = v138++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x28u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v143 = 0;
          while (1)
          {
            v144 = *v2;
            v145 = *(_QWORD *)&a1[v144];
            v146 = v145 + 1;
            if (v145 == -1 || v146 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v147 = *(char *)(*(_QWORD *)&a1[*v5] + v145);
            *(_QWORD *)&a1[v144] = v146;
            if (v147 < 0)
            {
              v22 = v143++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x29u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOAdvisoryClientCapabilitiesIsValid(a1))
            goto LABEL_488;
          goto LABEL_362;
        case 0x2Au:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v148 = 0;
          while (1)
          {
            v149 = *v2;
            v150 = *(_QWORD *)&a1[v149];
            v151 = v150 + 1;
            if (v150 == -1 || v151 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v152 = *(char *)(*(_QWORD *)&a1[*v5] + v150);
            *(_QWORD *)&a1[v149] = v151;
            if (v152 < 0)
            {
              v22 = v148++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x2Bu:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v153 = 0;
          while (1)
          {
            v154 = *v2;
            v155 = *(_QWORD *)&a1[v154];
            v156 = v155 + 1;
            if (v155 == -1 || v156 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v157 = *(char *)(*(_QWORD *)&a1[*v5] + v155);
            *(_QWORD *)&a1[v154] = v156;
            if (v157 < 0)
            {
              v22 = v153++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x2Cu:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v158 = 0;
          while (1)
          {
            v159 = *v2;
            v160 = *(_QWORD *)&a1[v159];
            v161 = v160 + 1;
            if (v160 == -1 || v161 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v162 = *(char *)(*(_QWORD *)&a1[*v5] + v160);
            *(_QWORD *)&a1[v159] = v161;
            if (v162 < 0)
            {
              v22 = v158++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x2Du:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v163 = 0;
          while (1)
          {
            v164 = *v2;
            v165 = *(_QWORD *)&a1[v164];
            v166 = v165 + 1;
            if (v165 == -1 || v166 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v167 = *(char *)(*(_QWORD *)&a1[*v5] + v165);
            *(_QWORD *)&a1[v164] = v166;
            if (v167 < 0)
            {
              v22 = v163++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x2Eu:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v168 = 0;
          while (1)
          {
            v169 = *v2;
            v170 = *(_QWORD *)&a1[v169];
            v171 = v170 + 1;
            if (v170 == -1 || v171 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v172 = *(char *)(*(_QWORD *)&a1[*v5] + v170);
            *(_QWORD *)&a1[v169] = v171;
            if (v172 < 0)
            {
              v22 = v168++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x2Fu:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v173 = 0;
          while (1)
          {
            v174 = *v2;
            v175 = *(_QWORD *)&a1[v174];
            v176 = v175 + 1;
            if (v175 == -1 || v176 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v177 = *(char *)(*(_QWORD *)&a1[*v5] + v175);
            *(_QWORD *)&a1[v174] = v176;
            if (v177 < 0)
            {
              v22 = v173++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x30u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v178 = 0;
          while (1)
          {
            v179 = *v2;
            v180 = *(_QWORD *)&a1[v179];
            v181 = v180 + 1;
            if (v180 == -1 || v181 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v182 = *(char *)(*(_QWORD *)&a1[*v5] + v180);
            *(_QWORD *)&a1[v179] = v181;
            if (v182 < 0)
            {
              v22 = v178++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x31u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v183 = 0;
          while (1)
          {
            v184 = *v2;
            v185 = *(_QWORD *)&a1[v184];
            v186 = v185 + 1;
            if (v185 == -1 || v186 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v187 = *(char *)(*(_QWORD *)&a1[*v5] + v185);
            *(_QWORD *)&a1[v184] = v186;
            if (v187 < 0)
            {
              v22 = v183++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x32u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v188 = 0;
          while (1)
          {
            v189 = *v2;
            v190 = *(_QWORD *)&a1[v189];
            v191 = v190 + 1;
            if (v190 == -1 || v191 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v192 = *(char *)(*(_QWORD *)&a1[*v5] + v190);
            *(_QWORD *)&a1[v189] = v191;
            if (v192 < 0)
            {
              v22 = v188++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x33u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v193 = 0;
          while (1)
          {
            v194 = *v2;
            v195 = *(_QWORD *)&a1[v194];
            v196 = v195 + 1;
            if (v195 == -1 || v196 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v197 = *(char *)(*(_QWORD *)&a1[*v5] + v195);
            *(_QWORD *)&a1[v194] = v196;
            if (v197 < 0)
            {
              v22 = v193++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x34u:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_488;
            while (1)
            {
              v198 = *v2;
              v199 = *(_QWORD *)&a1[v198];
              v200 = v199 + 1;
              if (v199 == -1 || v200 > *(_QWORD *)&a1[*v3])
                goto LABEL_453;
              v201 = *(char *)(*(_QWORD *)&a1[*v5] + v199);
              *(_QWORD *)&a1[v198] = v200;
              if (v201 < 0)
              {
                v202 = v15++;
                if (v202 <= 8)
                  continue;
              }
              goto LABEL_454;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_488;
LABEL_467:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v268 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v269 = *v2;
              v270 = *(_QWORD *)&a1[v269];
              v271 = v270 + 1;
              if (v270 == -1 || v271 > *(_QWORD *)&a1[*v3])
                break;
              v272 = *(char *)(*(_QWORD *)&a1[*v5] + v270);
              *(_QWORD *)&a1[v269] = v271;
              if (v272 < 0)
              {
                v13 = v268++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_467;
            }
            a1[*v4] = 1;
          }
          goto LABEL_362;
        case 0x35u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v203 = 0;
          while (1)
          {
            v204 = *v2;
            v205 = *(_QWORD *)&a1[v204];
            v206 = v205 + 1;
            if (v205 == -1 || v206 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v207 = *(char *)(*(_QWORD *)&a1[*v5] + v205);
            *(_QWORD *)&a1[v204] = v206;
            if (v207 < 0)
            {
              v22 = v203++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x36u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOWalkingSupportedFeaturesIsValid(a1))
            goto LABEL_362;
          goto LABEL_488;
        case 0x37u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v208 = 0;
          while (1)
          {
            v209 = *v2;
            v210 = *(_QWORD *)&a1[v209];
            v211 = v210 + 1;
            if (v210 == -1 || v211 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v212 = *(char *)(*(_QWORD *)&a1[*v5] + v210);
            *(_QWORD *)&a1[v209] = v211;
            if (v212 < 0)
            {
              v22 = v208++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x38u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v213 = 0;
          while (1)
          {
            v214 = *v2;
            v215 = *(_QWORD *)&a1[v214];
            v216 = v215 + 1;
            if (v215 == -1 || v216 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v217 = *(char *)(*(_QWORD *)&a1[*v5] + v215);
            *(_QWORD *)&a1[v214] = v216;
            if (v217 < 0)
            {
              v22 = v213++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x39u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v218 = 0;
          while (1)
          {
            v219 = *v2;
            v220 = *(_QWORD *)&a1[v219];
            v221 = v220 + 1;
            if (v220 == -1 || v221 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v222 = *(char *)(*(_QWORD *)&a1[*v5] + v220);
            *(_QWORD *)&a1[v219] = v221;
            if (v222 < 0)
            {
              v22 = v218++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x3Au:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v223 = 0;
          while (1)
          {
            v224 = *v2;
            v225 = *(_QWORD *)&a1[v224];
            v226 = v225 + 1;
            if (v225 == -1 || v226 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v227 = *(char *)(*(_QWORD *)&a1[*v5] + v225);
            *(_QWORD *)&a1[v224] = v226;
            if (v227 < 0)
            {
              v22 = v223++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x3Bu:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v228 = 0;
          while (1)
          {
            v229 = *v2;
            v230 = *(_QWORD *)&a1[v229];
            v231 = v230 + 1;
            if (v230 == -1 || v231 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v232 = *(char *)(*(_QWORD *)&a1[*v5] + v230);
            *(_QWORD *)&a1[v229] = v231;
            if (v232 < 0)
            {
              v22 = v228++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x3Cu:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v233 = 0;
          while (1)
          {
            v234 = *v2;
            v235 = *(_QWORD *)&a1[v234];
            v236 = v235 + 1;
            if (v235 == -1 || v236 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v237 = *(char *)(*(_QWORD *)&a1[*v5] + v235);
            *(_QWORD *)&a1[v234] = v236;
            if (v237 < 0)
            {
              v22 = v233++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x3Du:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v238 = 0;
          while (1)
          {
            v239 = *v2;
            v240 = *(_QWORD *)&a1[v239];
            v241 = v240 + 1;
            if (v240 == -1 || v241 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v242 = *(char *)(*(_QWORD *)&a1[*v5] + v240);
            *(_QWORD *)&a1[v239] = v241;
            if (v242 < 0)
            {
              v22 = v238++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x3Eu:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v243 = 0;
          while (1)
          {
            v244 = *v2;
            v245 = *(_QWORD *)&a1[v244];
            v246 = v245 + 1;
            if (v245 == -1 || v246 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v247 = *(char *)(*(_QWORD *)&a1[*v5] + v245);
            *(_QWORD *)&a1[v244] = v246;
            if (v247 < 0)
            {
              v22 = v243++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x3Fu:
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_488:
              PBReaderRecallMark();
              return 0;
            }
LABEL_477:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v273 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v274 = *v2;
                v275 = *(_QWORD *)&a1[v274];
                v276 = v275 + 1;
                if (v275 == -1 || v276 > *(_QWORD *)&a1[*v3])
                  break;
                v277 = *(char *)(*(_QWORD *)&a1[*v5] + v275);
                *(_QWORD *)&a1[v274] = v276;
                if (v277 < 0)
                {
                  v13 = v273++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_477;
              }
              a1[*v4] = 1;
            }
LABEL_362:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_488;
            while (1)
            {
              v248 = *v2;
              v249 = *(_QWORD *)&a1[v248];
              v250 = v249 + 1;
              if (v249 == -1 || v250 > *(_QWORD *)&a1[*v3])
                break;
              v251 = *(char *)(*(_QWORD *)&a1[*v5] + v249);
              *(_QWORD *)&a1[v248] = v250;
              if (v251 < 0)
              {
                v252 = v15++;
                if (v252 <= 8)
                  continue;
              }
              goto LABEL_454;
            }
LABEL_453:
            a1[*v4] = 1;
          }
LABEL_454:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_486;
          break;
        case 0x40u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v253 = 0;
          while (1)
          {
            v254 = *v2;
            v255 = *(_QWORD *)&a1[v254];
            v256 = v255 + 1;
            if (v255 == -1 || v256 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v257 = *(char *)(*(_QWORD *)&a1[*v5] + v255);
            *(_QWORD *)&a1[v254] = v256;
            if (v257 < 0)
            {
              v22 = v253++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        case 0x41u:
          if (v15 == 2)
            goto LABEL_443;
          goto LABEL_488;
        case 0x64u:
          if ((v8 & 7) != 0)
            goto LABEL_488;
          v258 = 0;
          while (1)
          {
            v259 = *v2;
            v260 = *(_QWORD *)&a1[v259];
            v261 = v260 + 1;
            if (v260 == -1 || v261 > *(_QWORD *)&a1[*v3])
              goto LABEL_453;
            v262 = *(char *)(*(_QWORD *)&a1[*v5] + v260);
            *(_QWORD *)&a1[v259] = v261;
            if (v262 < 0)
            {
              v22 = v258++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_454;
          }
        default:
LABEL_443:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_488;
          goto LABEL_454;
      }
    }
  }
LABEL_486:
  v278 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v278;
}

BOOL GEOFormattedStringClientCapabilitiesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_48;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_48;
      v16 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v16 == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_50;
        v28 = 0;
        while (1)
        {
          v29 = *v2;
          v30 = *(_QWORD *)&a1[v29];
          v31 = v30 + 1;
          if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
            goto LABEL_45;
          v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
          *(_QWORD *)&a1[v29] = v31;
          if (v32 < 0)
          {
            v22 = v28++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_47;
        }
      }
      if ((_DWORD)v16 == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_50;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0)
          {
            v22 = v17++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_47;
        }
LABEL_45:
        a1[*v4] = 1;
        goto LABEL_47;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_50:
        v33 = 0;
        goto LABEL_49;
      }
LABEL_47:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_48;
    }
    if ((v8 & 7) != 0)
      goto LABEL_50;
    v23 = 0;
    while (1)
    {
      v24 = *v2;
      v25 = *(_QWORD *)&a1[v24];
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
        goto LABEL_45;
      v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
      *(_QWORD *)&a1[v24] = v26;
      if (v27 < 0)
      {
        v22 = v23++ > 8;
        if (!v22)
          continue;
      }
      goto LABEL_47;
    }
  }
LABEL_48:
  v33 = a1[*v4] == 0;
LABEL_49:
  PBReaderRecallMark();
  return v33;
}

BOOL GEOWalkingSupportedFeaturesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_33;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8)
            continue;
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        v22 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v22;
}

void sub_189432184(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOClientCapabilitiesIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 232));
  v2 = (*(_QWORD *)(a1 + 304) & 0xFFFF800000000000 | *(_BYTE *)(a1 + 312) & 7) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 232));
  return v2;
}

void sub_189433934(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189435A84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOFormattedStringClientCapabilitiesReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  id v40;
  void *v41;
  _BOOL8 v42;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_59;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          goto LABEL_59;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          v28 = 0;
          v29 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 2u;
          while (1)
          {
            v30 = *v4;
            v31 = *(_QWORD *)&v3[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              break;
            v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
            *(_QWORD *)&v3[v30] = v32;
            v21 |= (unint64_t)(v33 & 0x7F) << v28;
            if ((v33 & 0x80) == 0)
            {
              v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__styleSupported;
              goto LABEL_51;
            }
            v28 += 7;
            v26 = v29++ > 8;
            if (v26)
            {
              v21 = 0;
              v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__styleSupported;
              goto LABEL_53;
            }
          }
          v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__styleSupported;
LABEL_50:
          v3[*v6] = 1;
          goto LABEL_51;
        }
        if ((_DWORD)v18 == 2)
          break;
        if ((_DWORD)v18 == 1)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__concatenatingFormatStringsSupported;
              goto LABEL_50;
            }
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              break;
            v19 += 7;
            v26 = v20++ > 8;
            if (v26)
            {
              v21 = 0;
              v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__concatenatingFormatStringsSupported;
              goto LABEL_53;
            }
          }
          v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__concatenatingFormatStringsSupported;
          goto LABEL_51;
        }
        if (!*(_QWORD *)(a1 + 8))
        {
          v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v41 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v40;

        }
        if ((PBUnknownFieldAdd() & 1) == 0)
          goto LABEL_60;
LABEL_54:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_59;
      }
      v34 = 0;
      v35 = 0;
      v21 = 0;
      *(_BYTE *)(a1 + 20) |= 4u;
      while (1)
      {
        v36 = *v4;
        v37 = *(_QWORD *)&v3[v36];
        v38 = v37 + 1;
        if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
        {
          v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__timestampFormatPatternSupported;
          goto LABEL_50;
        }
        v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
        *(_QWORD *)&v3[v36] = v38;
        v21 |= (unint64_t)(v39 & 0x7F) << v34;
        if ((v39 & 0x80) == 0)
          break;
        v34 += 7;
        v26 = v35++ > 8;
        if (v26)
        {
          v21 = 0;
          v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__timestampFormatPatternSupported;
          goto LABEL_53;
        }
      }
      v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__timestampFormatPatternSupported;
LABEL_51:
      if (v3[*v6])
        v21 = 0;
LABEL_53:
      *(_BYTE *)(a1 + *v27) = v21 != 0;
      goto LABEL_54;
    }
LABEL_59:
    v42 = v3[*v6] == 0;
  }
  else
  {
LABEL_60:
    v42 = 0;
  }
  objc_sync_exit(v3);

  return v42;
}

void sub_1894366C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOFormattedStringClientCapabilitiesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOFormattedStringClientCapabilitiesReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189436720(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOHighlightReadAllFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  _DWORD *v7;
  _DWORD *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v18;
  unint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  _DWORD *v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (_DWORD *)(a1 + 8);
    v8 = (_DWORD *)(a1 + 4);
    v9 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = *v3;
        v14 = *(_QWORD *)(a2 + v13);
        v15 = v14 + 1;
        if (v14 == -1 || v15 > *(_QWORD *)(a2 + *v4))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v14);
        *(_QWORD *)(a2 + v13) = v15;
        v12 |= (unint64_t)(v16 & 0x7F) << v10;
        if ((v16 & 0x80) == 0)
          goto LABEL_12;
        v10 += 7;
        if (v11++ >= 9)
        {
          v12 = 0;
          v18 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v18 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v12 = 0;
LABEL_14:
      if (v18 || (v12 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v20 = v12 >> 3;
      if ((v12 >> 3) == 3)
      {
        v30 = 0;
        v31 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          v34 = v33 + 1;
          if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v4))
            break;
          v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v33);
          *(_QWORD *)(a2 + v32) = v34;
          v23 |= (unint64_t)(v35 & 0x7F) << v30;
          if ((v35 & 0x80) == 0)
          {
            v29 = (_DWORD *)a1;
            goto LABEL_48;
          }
          v30 += 7;
          v28 = v31++ > 8;
          if (v28)
          {
            LODWORD(v23) = 0;
            v29 = (_DWORD *)a1;
            goto LABEL_50;
          }
        }
        v29 = (_DWORD *)a1;
LABEL_47:
        *(_BYTE *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if ((_DWORD)v20 == 2)
        break;
      if ((_DWORD)v20 == 1)
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 12) |= 2u;
        while (1)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
          {
            v29 = v8;
            goto LABEL_47;
          }
          v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v25);
          *(_QWORD *)(a2 + v24) = v26;
          v23 |= (unint64_t)(v27 & 0x7F) << v21;
          if ((v27 & 0x80) == 0)
            break;
          v21 += 7;
          v28 = v22++ > 8;
          if (v28)
          {
            LODWORD(v23) = 0;
            v29 = v8;
            goto LABEL_50;
          }
        }
        v29 = v8;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_51:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v36 = 0;
    v37 = 0;
    v23 = 0;
    *(_BYTE *)(a1 + 12) |= 4u;
    while (1)
    {
      v38 = *v3;
      v39 = *(_QWORD *)(a2 + v38);
      v40 = v39 + 1;
      if (v39 == -1 || v40 > *(_QWORD *)(a2 + *v4))
      {
        v29 = v7;
        goto LABEL_47;
      }
      v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v39);
      *(_QWORD *)(a2 + v38) = v40;
      v23 |= (unint64_t)(v41 & 0x7F) << v36;
      if ((v41 & 0x80) == 0)
        break;
      v36 += 7;
      v28 = v37++ > 8;
      if (v28)
      {
        LODWORD(v23) = 0;
        v29 = v7;
        goto LABEL_50;
      }
    }
    v29 = v7;
LABEL_48:
    if (*(_BYTE *)(a2 + *v5))
      LODWORD(v23) = 0;
LABEL_50:
    *v29 = v23;
    goto LABEL_51;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

unint64_t GEOHoursReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  int *v16;
  int *v17;
  int v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  GEOTimeRange *v45;
  id v46;
  void *v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  int v55;
  int v56;
  char v57;
  void *v58;
  char v60;
  int v61;
  int v62;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 68) >> 2) & 1)
      + (*(_BYTE *)(a1 + 68) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 != 0;
        v15 = v14 & ~(_DWORD)v10 | v7;
        v62 = v14 | v10;
        v16 = (int *)MEMORY[0x1E0D82BF0];
        if ((((v14 | v10) | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v18 = 1;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_81;
        v60 = v14 & ~(_BYTE)v10 | v7;
        v61 = (v9 != 0) | v62 | v15;
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_BYTE *)(v3 + *v19))
      goto LABEL_79;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v16;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_26:
    v30 = v23 & 7;
    if (v29 || v30 == 4)
    {
LABEL_79:
      v18 = 1;
      goto LABEL_80;
    }
    v32 = v23 >> 3;
    v33 = v62;
    if (!((v17 == 0) | v62 & 1))
    {
      v34 = v17;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    if ((_DWORD)v32 == 2)
      break;
    if ((_DWORD)v32 == 1)
    {
      if (v33 && (*(_BYTE *)(a1 + 68) & 2) == 0)
      {
        if (v30 == 2)
        {
          v18 = PBReaderPlaceMark();
          if (!v18)
            goto LABEL_80;
          while (*(_QWORD *)(v3 + *v16) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v19))
          {
            v38 = 0;
            v39 = 0;
            v40 = 0;
            while (1)
            {
              v41 = *v16;
              v42 = *(_QWORD *)(v3 + v41);
              v43 = v42 + 1;
              if (v42 == -1 || v43 > *(_QWORD *)(v3 + *v6))
                break;
              v44 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v42);
              *(_QWORD *)(v3 + v41) = v43;
              v40 |= (unint64_t)(v44 & 0x7F) << v38;
              if (v44 < 0)
              {
                v38 += 7;
                v28 = v39++ >= 9;
                if (!v28)
                  continue;
              }
              goto LABEL_53;
            }
            *(_BYTE *)(v3 + *v19) = 1;
LABEL_53:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v48 = 0;
          v49 = 0;
          v50 = 0;
          while (1)
          {
            v51 = *v16;
            v52 = *(_QWORD *)(v3 + v51);
            v53 = v52 + 1;
            if (v52 == -1 || v53 > *(_QWORD *)(v3 + *v6))
              break;
            v54 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v52);
            *(_QWORD *)(v3 + v51) = v53;
            v50 |= (unint64_t)(v54 & 0x7F) << v48;
            if (v54 < 0)
            {
              v48 += 7;
              v28 = v49++ >= 9;
              if (!v28)
                continue;
            }
            goto LABEL_76;
          }
          *(_BYTE *)(v3 + *v19) = 1;
LABEL_76:
          PBRepeatedInt32Add();
        }
LABEL_77:
        if ((v61 & 1) == 0)
          goto LABEL_79;
        goto LABEL_78;
      }
    }
    else if ((v60 & 1) != 0 && (*(_BYTE *)(a1 + 68) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v46 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v47 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v46;

      }
      v18 = PBUnknownFieldAdd();
      if (!v18)
        goto LABEL_82;
      goto LABEL_77;
    }
LABEL_65:
    v18 = PBReaderSkipValueWithTag();
    if ((v18 & v61 & 1) == 0)
      goto LABEL_80;
LABEL_78:
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6))
      goto LABEL_79;
  }
  if (!v33 || (*(_BYTE *)(a1 + 68) & 4) != 0)
    goto LABEL_65;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_100;
  v45 = objc_alloc_init(GEOTimeRange);
  if (GEOTimeRangeReadAllFrom((uint64_t)v45, (void *)v3))
  {
    PBReaderRecallMark();
    -[GEOHours _addNoFlagsTimeRange:](a1, v45);

    goto LABEL_77;
  }

LABEL_100:
  v18 = 0;
LABEL_80:
  LOBYTE(v15) = v60;
LABEL_81:
  if ((v15 & 1) != 0)
LABEL_82:
    *(_BYTE *)(a1 + 68) |= 1u;
  if (v62 & 1 | ((v18 & 1) == 0))
  {
    *(_BYTE *)(a1 + 68) |= 2u;
    *(_BYTE *)(a1 + 68) |= 4u;
    goto LABEL_93;
  }
  if (v17)
  {
    while (2)
    {
      while (1)
      {
        v56 = *v17++;
        v55 = v56;
        if (v56 == 1)
          break;
        if (v55 == 2)
        {
          v57 = 4;
          goto LABEL_92;
        }
        if (!v55)
          goto LABEL_93;
      }
      v57 = 2;
LABEL_92:
      *(_BYTE *)(a1 + 68) |= v57;
      continue;
    }
  }
LABEL_93:
  if (v18)
    v3 = *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]) == 0;
  else
    v3 = 0;
  if ((v62 & 1) != 0)
  {
    v58 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1894377D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189437D68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOHoursCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[128];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v1 = *(id *)(a1 + 48);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v5, v9, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v6;
    while (1)
    {
      if (*(_QWORD *)v6 != v4)
        objc_enumerationMutation(v1);
      if (!--v3)
      {
        v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v5, v9, 16);
        if (!v3)
          break;
      }
    }
  }

}

unint64_t GEOHoursReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOHoursReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOHoursReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOHoursReadAllFrom_initialTag;
  Specified = GEOHoursReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOHoursCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189438098(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894382F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189438530(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOIndexQueryNodeReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  BOOL v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  id v45;
  void *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  GEOIndexQueryNode *v51;
  char v52;
  char v53;
  int v54;
  char v55;
  void *v56;
  int v58;
  int *v59;
  char v60;
  char v61;
  char v62;
  char v63;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = ((*(unsigned __int8 *)(a1 + 64) >> 3) & 1)
      + (*(_BYTE *)(a1 + 64) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 1) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 2) & 1);
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 > 1;
        v60 = v17 & ~(_BYTE)v12 | v8;
        v61 = v17 | v12 | v60;
        if ((((v17 | v12) | v9) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v62 = (v18 == 0) | v17 | v12;
        v63 = v17 | v12;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v8;
LABEL_8:
        v15 = v11;
        v16 = v12;
LABEL_10:
        ++v10;
        v8 = v14;
        v11 = v15;
        v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v20))
      goto LABEL_78;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v7))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      v29 = v23++ >= 9;
      if (v29)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_27:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_78:
      v58 = 1;
      goto LABEL_79;
    }
    v32 = v24 >> 3;
    v33 = v63;
    if ((v62 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if ((v9 & 1) == 0)
          goto LABEL_65;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        while (1)
        {
          v41 = *v19;
          v42 = *(_QWORD *)(v3 + v41);
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)(v3 + *v7))
            break;
          v44 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v42);
          *(_QWORD *)(v3 + v41) = v43;
          v40 |= (unint64_t)(v44 & 0x7F) << v38;
          if ((v44 & 0x80) == 0)
            goto LABEL_68;
          v38 += 7;
          v29 = v39++ >= 9;
          if (v29)
          {
            LODWORD(v40) = 0;
            goto LABEL_70;
          }
        }
        *(_BYTE *)(v3 + *v20) = 1;
LABEL_68:
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v40) = 0;
LABEL_70:
        *(_DWORD *)(a1 + 60) = v40;
        goto LABEL_77;
      case 4:
        if (!v33)
          goto LABEL_65;
        if ((*(_BYTE *)(a1 + 64) & 2) == 0)
        {
          PBReaderReadString();
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = 24;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_95;
        v53 = *(_BYTE *)(a1 + 64) << 6;
        goto LABEL_75;
      case 5:
        if (!v33)
          goto LABEL_65;
        if ((*(_BYTE *)(a1 + 64) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_95;
          v53 = 16 * *(_BYTE *)(a1 + 64);
LABEL_75:
          v10 += v53 >> 7;
        }
        else
        {
          PBReaderReadString();
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = 40;
LABEL_59:
          v50 = *(void **)(a1 + v49);
          *(_QWORD *)(a1 + v49) = v48;

          --v10;
        }
        goto LABEL_76;
      case 6:
        if (!v33 || (*(_BYTE *)(a1 + 64) & 4) != 0)
          goto LABEL_65;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_95;
        v51 = objc_alloc_init(GEOIndexQueryNode);
        if (GEOIndexQueryNodeReadAllFrom())
        {
          PBReaderRecallMark();
          -[GEOIndexQueryNode _addNoFlagsOperands:](a1, v51);

LABEL_76:
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
LABEL_77:
          if (!(v61 & 1 | (v10 != 0)))
            goto LABEL_78;
          continue;
        }

LABEL_95:
        v58 = 0;
        v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_79:
        v59 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
        if ((v60 & 1) != 0)
LABEL_80:
          *(_BYTE *)(a1 + v59[385]) |= 1u;
        if (v63 & 1 | ((v58 & 1) == 0))
        {
          *(_BYTE *)(a1 + v59[385]) |= 2u;
          *(_BYTE *)(a1 + v59[385]) |= 8u;
          *(_BYTE *)(a1 + v59[385]) |= 4u;
        }
        else if (v18)
        {
          while (1)
          {
            v54 = *v18++;
            v55 = 2;
            switch(v54)
            {
              case 0:
                goto LABEL_88;
              case 4:
                goto LABEL_87;
              case 5:
                v55 = 8;
                goto LABEL_87;
              case 6:
                v55 = 4;
LABEL_87:
                *(_BYTE *)(a1 + v59[385]) |= v55;
                break;
              default:
                continue;
            }
          }
        }
LABEL_88:
        if (v58)
          v3 = *(_BYTE *)(v3 + *v20) == 0;
        else
          v3 = 0;
        if ((v63 & 1) != 0)
        {
          v56 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v60 & 1) == 0 || (*(_BYTE *)(a1 + 64) & 1) != 0)
        {
LABEL_65:
          v52 = PBReaderSkipValueWithTag();
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v20 = (int *)MEMORY[0x1E0D82BC8];
          if ((v52 & 1) == 0)
          {
            v58 = 0;
            goto LABEL_79;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v45 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v46 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v45;

          }
          v47 = PBUnknownFieldAdd();
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          if (!v47)
          {
            v58 = 0;
            v59 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
            goto LABEL_80;
          }
        }
        goto LABEL_77;
    }
  }
}

void sub_189438F6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189439480(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189439560(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOIndexQueryNodeCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        -[GEOIndexQueryNode readAll:](*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * v5++), 1);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOIndexQueryNodeReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOIndexQueryNodeReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOIndexQueryNodeReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOIndexQueryNodeReadAllFrom_initialTag;
  Specified = GEOIndexQueryNodeReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOIndexQueryNodeCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189439BF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOIndexQueryNodeIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v24;
  uint64_t v25;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = 0;
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_41;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *v2;
        v11 = *(_QWORD *)&a1[v10];
        v12 = v11 + 1;
        if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v11);
        *(_QWORD *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        if (v8++ >= 9)
        {
          v9 = 0;
          v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v15 = a1[*v4];
      if (a1[*v4])
        v9 = 0;
LABEL_14:
      v16 = v9 & 7;
      if (v15 || v16 == 4)
        goto LABEL_41;
      switch((v9 >> 3))
      {
        case 1u:
          if (v5 || (v9 & 7) != 0)
            goto LABEL_48;
          v18 = 0;
          do
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
            {
              v5 = 1;
              a1[*v4] = 1;
              goto LABEL_38;
            }
            v22 = *(char *)(*(_QWORD *)&a1[*v6] + v20);
            *(_QWORD *)&a1[v19] = v21;
            v5 = 1;
            if ((v22 & 0x80000000) == 0)
              break;
          }
          while (v18++ <= 8);
          goto LABEL_38;
        case 4u:
          if (v16 == 2)
            goto LABEL_31;
          goto LABEL_48;
        case 5u:
          if (v16 == 2)
            goto LABEL_31;
          goto LABEL_48;
        case 6u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOIndexQueryNodeIsValid(a1))
            goto LABEL_48;
          PBReaderRecallMark();
          goto LABEL_38;
        default:
LABEL_31:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_48:
            PBReaderRecallMark();
            return 0;
          }
LABEL_38:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_41;
          break;
      }
    }
  }
  v5 = 0;
LABEL_41:
  if (a1[*v4])
    v24 = 1;
  else
    v24 = v5 == 0;
  v25 = !v24;
  PBReaderRecallMark();
  return v25;
}

void sub_18943A0D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOIndexQueryNodeIsDirty(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  if ((*(_BYTE *)(a1 + 64) & 0x1E) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 64) & 4) == 0)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v3 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v3);
        if ((GEOIndexQueryNodeIsDirty(*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * i)) & 1) != 0)
        {
          v2 = 1;
          goto LABEL_15;
        }
      }
      v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEOIndexQueryNodeIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOIndexQueryNodeIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_18943A4DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedDisambiguationLabelReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  char v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  void *v42;
  int v43;
  char v44;
  char v45;
  char v46;
  int v47;
  int v48;
  void *v49;
  int v51;
  char v52;
  char v53;
  char v54;
  BOOL v55;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 & ~(_BYTE)v7;
        v16 = v14 | v7;
        v52 = v15 | v8;
        v17 = v16 | v15 | v8;
        if (((v16 | v9) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v55 = v16;
        v53 = v17;
        v54 = (v18 == 0) | v16;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v20))
      goto LABEL_59;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v6))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_23;
      v22 += 7;
      if (v23++ >= 9)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_23:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_25:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_59:
      v51 = 1;
      goto LABEL_60;
    }
    v32 = v24 >> 3;
    v33 = v55;
    if ((v54 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    if ((_DWORD)v32 == 2)
      break;
    if ((_DWORD)v32 == 1)
    {
      if (!v33)
        goto LABEL_51;
      if ((*(_BYTE *)(a1 + 52) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_78;
        v45 = *(_BYTE *)(a1 + 52) << 6;
        goto LABEL_57;
      }
      PBReaderReadString();
      v38 = objc_claimAutoreleasedReturnValue();
      v39 = 24;
      goto LABEL_44;
    }
    if ((v52 & 1) == 0 || (*(_BYTE *)(a1 + 52) & 1) != 0)
    {
LABEL_51:
      v44 = PBReaderSkipValueWithTag();
      v20 = (int *)MEMORY[0x1E0D82BC8];
      if ((v44 & 1) == 0)
      {
        v51 = 0;
        goto LABEL_60;
      }
      goto LABEL_58;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v42 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v41;

    }
    v43 = PBUnknownFieldAdd();
    v20 = (int *)MEMORY[0x1E0D82BC8];
    if (!v43)
    {
      v51 = 0;
      goto LABEL_61;
    }
LABEL_58:
    if (!(v53 & 1 | (v10 != 0)))
      goto LABEL_59;
  }
  if (!v33)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 52) & 4) == 0)
  {
    PBReaderReadString();
    v38 = objc_claimAutoreleasedReturnValue();
    v39 = 32;
LABEL_44:
    v40 = *(void **)(a1 + v39);
    *(_QWORD *)(a1 + v39) = v38;

    v20 = (int *)MEMORY[0x1E0D82BC8];
    --v10;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v45 = 32 * *(_BYTE *)(a1 + 52);
LABEL_57:
    v10 += v45 >> 7;
    v20 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_58;
  }
LABEL_78:
  v51 = 0;
  v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_60:
  if ((v52 & 1) == 0)
    goto LABEL_62;
LABEL_61:
  *(_BYTE *)(a1 + 52) |= 1u;
LABEL_62:
  if (v55 || (v51 & 1) == 0)
  {
    *(_BYTE *)(a1 + 52) |= 2u;
    *(_BYTE *)(a1 + 52) |= 4u;
    goto LABEL_72;
  }
  if (v18)
  {
    while (1)
    {
      v48 = *v18++;
      v47 = v48;
      if (v48 == 1)
        break;
      if (v47 == 2)
      {
        v46 = 4;
LABEL_68:
        *(_BYTE *)(a1 + 52) |= v46;
      }
      else if (!v47)
      {
        goto LABEL_72;
      }
    }
    v46 = 2;
    goto LABEL_68;
  }
LABEL_72:
  if (v51)
    v3 = *(_BYTE *)(v3 + *v20) == 0;
  else
    v3 = 0;
  if (v55)
  {
    v49 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_18943B07C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18943B148(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedDisambiguationLabelReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLocalizedDisambiguationLabelReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLocalizedDisambiguationLabelReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLocalizedDisambiguationLabelReadAllFrom_initialTag;
  Specified = GEOLocalizedDisambiguationLabelReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18943B39C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18943B528(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18943B694(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18943B9E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedNameReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  id v44;
  void *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  void *v56;
  char v57;
  char v58;
  int v59;
  char v60;
  void *v61;
  int v63;
  int *v64;
  char v65;
  char v66;
  char v67;
  BOOL v68;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 76)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFAFFFBFFFDFFFCLL) & 0xFF01FF01FF01FF01))+ ((*(_BYTE *)(a1 + 76) & 4) != 0));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 > 2;
        v15 = v14 & ~(_BYTE)v10 | v7;
        v16 = v14 | v10;
        v65 = v15;
        v66 = v16 | v15;
        if (((v16 | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v67 = (v17 == 0) | v16;
        v68 = v16;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_94;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_94:
      v63 = 1;
      goto LABEL_95;
    }
    v31 = v23 >> 3;
    v32 = v68;
    if ((v67 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_73;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 76) |= 2u;
        while (1)
        {
          v40 = *v18;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v41);
          *(_QWORD *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0)
            goto LABEL_76;
          v37 += 7;
          v28 = v38++ >= 9;
          if (v28)
          {
            v39 = 0;
            goto LABEL_78;
          }
        }
        *(_BYTE *)(v3 + *v19) = 1;
LABEL_76:
        if (*(_BYTE *)(v3 + *v19))
          v39 = 0;
LABEL_78:
        *(_BYTE *)(a1 + 72) = v39 != 0;
        goto LABEL_93;
      case 2:
        if (!v32)
          goto LABEL_73;
        if ((*(_BYTE *)(a1 + 76) & 8) == 0)
        {
          PBReaderReadString();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = 24;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_111;
        v58 = 16 * *(_BYTE *)(a1 + 76);
        goto LABEL_91;
      case 3:
        if (!v32)
          goto LABEL_73;
        if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
        {
          PBReaderReadString();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = 32;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_111;
        v58 = 8 * *(_BYTE *)(a1 + 76);
        goto LABEL_91;
      case 4:
        if (!v32)
          goto LABEL_73;
        if ((*(_BYTE *)(a1 + 76) & 0x20) == 0)
        {
          PBReaderReadString();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = 40;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_111;
        v58 = 4 * *(_BYTE *)(a1 + 76);
        goto LABEL_91;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_73;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        *(_BYTE *)(a1 + 76) |= 1u;
        while (2)
        {
          v52 = *v18;
          v53 = *(_QWORD *)(v3 + v52);
          v54 = v53 + 1;
          if (v53 == -1 || v54 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v53);
            *(_QWORD *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              v28 = v50++ >= 9;
              if (v28)
              {
                LODWORD(v51) = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v51) = 0;
LABEL_82:
        *(_DWORD *)(a1 + 68) = v51;
        goto LABEL_93;
      case 6:
        if (!v32)
          goto LABEL_73;
        if ((*(_BYTE *)(a1 + 76) & 0x40) == 0)
        {
          PBReaderReadString();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = 48;
LABEL_72:
          v56 = *(void **)(a1 + v48);
          *(_QWORD *)(a1 + v48) = v47;

          --v9;
LABEL_92:
          v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_93:
          if (!(v66 & 1 | (v9 != 0)))
            goto LABEL_94;
          continue;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v58 = 2 * *(_BYTE *)(a1 + 76);
LABEL_91:
          v9 += v58 >> 7;
          goto LABEL_92;
        }
LABEL_111:
        v63 = 0;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_95:
        v64 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
        if ((v65 & 1) != 0)
LABEL_96:
          *(_BYTE *)(a1 + v64[403]) |= 4u;
        if (v68 || (v63 & 1) == 0)
        {
          *(_BYTE *)(a1 + v64[403]) |= 8u;
          *(_BYTE *)(a1 + v64[403]) |= 0x10u;
          *(_BYTE *)(a1 + v64[403]) |= 0x20u;
          *(_BYTE *)(a1 + v64[403]) |= 0x40u;
        }
        else if (v17)
        {
          while (1)
          {
            v59 = *v17++;
            v60 = 8;
            switch(v59)
            {
              case 0:
                goto LABEL_105;
              case 2:
                goto LABEL_104;
              case 3:
                v60 = 16;
                goto LABEL_104;
              case 4:
                v60 = 32;
                goto LABEL_104;
              case 6:
                v60 = 64;
LABEL_104:
                *(_BYTE *)(a1 + v64[403]) |= v60;
                break;
              default:
                continue;
            }
          }
        }
LABEL_105:
        if (v63)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if (v68)
        {
          v61 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v65 & 1) == 0 || (*(_BYTE *)(a1 + 76) & 4) != 0)
        {
LABEL_73:
          v57 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v57 & 1) == 0)
          {
            v63 = 0;
            goto LABEL_95;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v44 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v45 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v44;

          }
          v46 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v46)
          {
            v63 = 0;
            v64 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
            goto LABEL_96;
          }
        }
        goto LABEL_93;
    }
  }
}

void sub_18943C288(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18943C3CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18943C578(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18943CC9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedNameReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLocalizedNameReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLocalizedNameReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLocalizedNameReadAllFrom_initialTag;
  Specified = GEOLocalizedNameReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_18943CE28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedNameReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLocalizedNameReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18943CE88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18943D0A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocalizedNameIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = *(unsigned __int8 *)(a1 + 76) > 7u;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_18943D480(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18943D874(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMatchedTokenReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 v15;
  char v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  void *v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  id v54;
  void *v55;
  int v56;
  char v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  int v66;
  int v67;
  char v68;
  void *v69;
  char v71;
  unsigned __int8 v72;
  char v73;
  char v74;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 72) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 | v7;
        v16 = v14 & ~(_BYTE)v7 | v8;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        if (((v15 | v9) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_94;
        v71 = v16;
        v73 = v15 | v16;
        v74 = (v18 == 0) | v15;
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        v72 = v15;
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_BYTE *)(v3 + *v19))
      goto LABEL_92;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v17;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_25:
    v30 = v23 & 7;
    if (v29 || v30 == 4)
    {
LABEL_92:
      LODWORD(v12) = 1;
      goto LABEL_93;
    }
    v32 = v23 >> 3;
    v33 = v15;
    if ((v74 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    if ((_DWORD)v32 == 3)
    {
      if (v33 && (*(_BYTE *)(a1 + 72) & 4) == 0)
      {
        if (v30 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_113;
          v20 = (int *)MEMORY[0x1E0D82BB8];
          while (*(_QWORD *)(v3 + *v17) < *(_QWORD *)(v3 + *v6))
          {
            if (*(_BYTE *)(v3 + *v19))
              break;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            while (1)
            {
              v43 = *v17;
              v44 = *(_QWORD *)(v3 + v43);
              v45 = v44 + 1;
              if (v44 == -1 || v45 > *(_QWORD *)(v3 + *v6))
                break;
              v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v44);
              *(_QWORD *)(v3 + v43) = v45;
              v42 |= (unint64_t)(v46 & 0x7F) << v40;
              if (v46 < 0)
              {
                v40 += 7;
                v28 = v41++ >= 9;
                if (!v28)
                  continue;
              }
              goto LABEL_56;
            }
            *(_BYTE *)(v3 + *v19) = 1;
LABEL_56:
            PBRepeatedUInt64Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v59 = 0;
          v60 = 0;
          v61 = 0;
          v20 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v62 = *v17;
            v63 = *(_QWORD *)(v3 + v62);
            v64 = v63 + 1;
            if (v63 == -1 || v64 > *(_QWORD *)(v3 + *v6))
              break;
            v65 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v63);
            *(_QWORD *)(v3 + v62) = v64;
            v61 |= (unint64_t)(v65 & 0x7F) << v59;
            if (v65 < 0)
            {
              v59 += 7;
              v28 = v60++ >= 9;
              if (!v28)
                continue;
            }
            goto LABEL_90;
          }
          *(_BYTE *)(v3 + *v19) = 1;
LABEL_90:
          PBRepeatedUInt64Add();
        }
        goto LABEL_91;
      }
      goto LABEL_72;
    }
    if ((_DWORD)v32 == 2)
    {
      if ((v9 & 1) != 0)
      {
        v47 = 0;
        v48 = 0;
        v49 = 0;
        *(_BYTE *)(a1 + 72) |= 1u;
        v20 = (int *)MEMORY[0x1E0D82BB8];
        while (1)
        {
          v50 = *v17;
          v51 = *(_QWORD *)(v3 + v50);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(v3 + *v6))
            break;
          v53 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v51);
          *(_QWORD *)(v3 + v50) = v52;
          v49 |= (unint64_t)(v53 & 0x7F) << v47;
          if ((v53 & 0x80) == 0)
            goto LABEL_77;
          v47 += 7;
          v28 = v48++ >= 9;
          if (v28)
          {
            LODWORD(v49) = 0;
            goto LABEL_79;
          }
        }
        *(_BYTE *)(v3 + *v19) = 1;
LABEL_77:
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v49) = 0;
LABEL_79:
        *(_DWORD *)(a1 + 68) = v49;
        goto LABEL_73;
      }
      goto LABEL_72;
    }
    if ((_DWORD)v32 == 1)
      break;
    if ((v71 & 1) != 0 && (*(_BYTE *)(a1 + 72) & 2) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v54 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v55 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v54;

      }
      v56 = PBUnknownFieldAdd();
      v15 = v72;
      v20 = (int *)MEMORY[0x1E0D82BB8];
      if (!v56)
      {
        LODWORD(v12) = 0;
LABEL_95:
        *(_BYTE *)(a1 + 72) |= 2u;
        goto LABEL_96;
      }
      goto LABEL_73;
    }
LABEL_72:
    v57 = PBReaderSkipValueWithTag();
    v15 = v72;
    v20 = (int *)MEMORY[0x1E0D82BB8];
    if ((v57 & 1) == 0)
    {
      LODWORD(v12) = 0;
      goto LABEL_93;
    }
LABEL_73:
    if (!(v73 & 1 | (v10 != 0)) || *(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6))
      goto LABEL_92;
  }
  if (!v33)
    goto LABEL_72;
  if ((*(_BYTE *)(a1 + 72) & 8) == 0)
  {
    PBReaderReadString();
    v38 = objc_claimAutoreleasedReturnValue();
    v39 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v38;

    --v10;
    v15 = v72;
    v20 = (int *)MEMORY[0x1E0D82BB8];
    goto LABEL_73;
  }
  v58 = PBReaderSkipValueWithTag();
  v20 = (int *)MEMORY[0x1E0D82BB8];
  if ((v58 & 1) != 0)
  {
    v10 += *(unsigned __int8 *)(a1 + 72) << 28 >> 31;
LABEL_91:
    v15 = v72;
    goto LABEL_73;
  }
LABEL_113:
  LODWORD(v12) = 0;
  v15 = v72;
LABEL_93:
  v16 = v71;
LABEL_94:
  if ((v16 & 1) != 0)
    goto LABEL_95;
LABEL_96:
  if (v15 & 1 | ((v12 & 1) == 0))
  {
    *(_BYTE *)(a1 + 72) |= 8u;
    *(_BYTE *)(a1 + 72) |= 4u;
    goto LABEL_106;
  }
  if (v18)
  {
    while (2)
    {
      while (1)
      {
        v67 = *v18++;
        v66 = v67;
        if (v67 == 1)
          break;
        if (v66 == 3)
        {
          v68 = 4;
          goto LABEL_105;
        }
        if (!v66)
          goto LABEL_106;
      }
      v68 = 8;
LABEL_105:
      *(_BYTE *)(a1 + 72) |= v68;
      continue;
    }
  }
LABEL_106:
  if ((_DWORD)v12)
  {
    v3 = *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]) == 0;
    if ((v15 & 1) == 0)
      return v3;
LABEL_110:
    v69 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  else
  {
    v3 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_110;
  }
  return v3;
}

void sub_18943E280(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18943E3C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18943ECBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMatchedTokenReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOMatchedTokenReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOMatchedTokenReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOMatchedTokenReadAllFrom_initialTag;
  Specified = GEOMatchedTokenReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_18943EE48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMatchedTokenReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMatchedTokenReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18943EEA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOMatchedTokenIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  uint64_t v36;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = 0;
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_56;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *v2;
        v11 = *(_QWORD *)&a1[v10];
        v12 = v11 + 1;
        if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v11);
        *(_QWORD *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        v14 = v8++ >= 9;
        if (v14)
        {
          v9 = 0;
          v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v15 = a1[*v4];
      if (a1[*v4])
        v9 = 0;
LABEL_14:
      v16 = v9 & 7;
      if (v15 || v16 == 4)
        goto LABEL_56;
      v18 = v9 >> 3;
      if ((v9 >> 3) == 3)
      {
        if (v16 != 2)
        {
          if ((v9 & 7) != 0)
            goto LABEL_64;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              break;
            v22 = *(char *)(*(_QWORD *)&a1[*v6] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0)
            {
              v23 = v16++;
              if (v23 <= 8)
                continue;
            }
            goto LABEL_53;
          }
LABEL_41:
          a1[*v4] = 1;
          goto LABEL_53;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_64;
LABEL_43:
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
        {
          v30 = a1[*v4];
          if (a1[*v4])
            break;
          while (1)
          {
            v31 = *v2;
            v32 = *(_QWORD *)&a1[v31];
            v33 = v32 + 1;
            if (v32 == -1 || v33 > *(_QWORD *)&a1[*v3])
              break;
            v34 = *(char *)(*(_QWORD *)&a1[*v6] + v32);
            *(_QWORD *)&a1[v31] = v33;
            if (v34 < 0)
            {
              v14 = v30++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_43;
          }
          a1[*v4] = 1;
        }
        PBReaderRecallMark();
      }
      else
      {
        if ((_DWORD)v18 == 2)
        {
          if ((v9 & 7) != 0)
            goto LABEL_64;
          v24 = 0;
          while (1)
          {
            v25 = *v2;
            v26 = *(_QWORD *)&a1[v25];
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
              goto LABEL_41;
            v28 = *(char *)(*(_QWORD *)&a1[*v6] + v26);
            *(_QWORD *)&a1[v25] = v27;
            if (v28 < 0 && v24++ <= 8)
              continue;
            goto LABEL_53;
          }
        }
        if ((_DWORD)v18 == 1)
        {
          if (v5 || v16 != 2)
          {
LABEL_64:
            PBReaderRecallMark();
            return 0;
          }
          v5 = 1;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_64;
      }
LABEL_53:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_56;
    }
  }
  v5 = 0;
LABEL_56:
  if (a1[*v4])
    v35 = 1;
  else
    v35 = v5 == 0;
  v36 = !v35;
  PBReaderRecallMark();
  return v36;
}

void sub_18943F39C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMatchedTokenIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = (*(_BYTE *)(a1 + 72) & 0x1C) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_18943F6D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18943F9A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONamedFeatureReadAllFrom(_QWORD *a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  _BOOL8 v26;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *v6;
            v17 = v3[v16];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = *v6;
        v17 = v3[v16];
        if (v3[v16])
          v10 = 0;
LABEL_15:
        if (v17 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v21 = *v4;
          v22 = *(_QWORD *)&v3[v21];
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v23 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v22 + 8;
          }
          else
          {
            v3[v16] = 1;
            v23 = 0;
          }
          a1[3] = v23;
        }
        else if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = (void *)a1[2];
          a1[2] = v19;

        }
        else
        {
          if (!a1[1])
          {
            v24 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v25 = (void *)a1[1];
            a1[1] = v24;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_33;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v26 = v3[*v6] == 0;
  }
  else
  {
LABEL_33:
    v26 = 0;
  }
  objc_sync_exit(v3);

  return v26;
}

void sub_1894400EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONamedFeatureReadFrom(_QWORD *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEONamedFeatureReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18944014C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONamedFeatureIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  char v19;
  char v20;
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BOOL4 v29;
  _BOOL8 v30;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v32[0] = 0;
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_47;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
      {
LABEL_47:
        v29 = HIDWORD(v32[0]) != 0;
        goto LABEL_41;
      }
      if ((v8 >> 3) == 1)
        break;
      if ((v8 >> 3) != 2)
        goto LABEL_36;
      v18 = 0;
      v19 = 1;
      while (1)
      {
        v20 = v19;
        v21 = *((_DWORD *)v32 + v18);
        if (!v21)
          break;
        if (v21 != 2)
        {
          v19 = 0;
          v18 = 1;
          if ((v20 & 1) != 0)
            continue;
        }
        goto LABEL_45;
      }
      *((_DWORD *)v32 + v18) = 2;
      if (v16 != 1)
        goto LABEL_45;
      v26 = *v2;
      v27 = *(_QWORD *)&a1[v26];
      if (v27 <= 0xFFFFFFFFFFFFFFF7 && (v28 = v27 + 8, v28 <= *(_QWORD *)&a1[*v3]))
        *(_QWORD *)&a1[v26] = v28;
      else
        a1[v14] = 1;
LABEL_37:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_47;
    }
    v22 = 0;
    v23 = 1;
    while (1)
    {
      v24 = v23;
      v25 = *((_DWORD *)v32 + v22);
      if (!v25)
        break;
      if (v25 != 1)
      {
        v23 = 0;
        v22 = 1;
        if ((v24 & 1) != 0)
          continue;
      }
      goto LABEL_45;
    }
    *((_DWORD *)v32 + v22) = 1;
    if (v16 != 2)
    {
LABEL_45:
      PBReaderRecallMark();
      return 0;
    }
LABEL_36:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_45;
    goto LABEL_37;
  }
  v29 = 0;
LABEL_41:
  if (a1[*v4])
    v30 = 0;
  else
    v30 = v29;
  PBReaderRecallMark();
  return v30;
}

unint64_t GEONamedFieldReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  void *v41;
  GEONamedFieldValue *v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  char v47;
  int v48;
  int v49;
  void *v50;
  int v52;
  int *v53;
  char v54;
  char v55;
  char v56;
  BOOL v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v12;
        v13 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v13 = v7;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_BYTE)v11 | v8;
        v18 = v16 | v11;
        v54 = v17;
        v19 = v18 | v17;
        if (((v18 | v9) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v57 = v18;
        v55 = v19;
        v56 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v7;
        v14 = v8;
LABEL_8:
        v15 = v11;
LABEL_10:
        ++v10;
        v7 = v13;
        v8 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_60;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_60:
      v52 = 1;
      goto LABEL_61;
    }
    v34 = v26 >> 3;
    v35 = v57;
    if ((v56 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    if ((_DWORD)v34 == 2)
      break;
    if ((_DWORD)v34 == 1)
    {
      if (!v35)
        goto LABEL_54;
      if ((*(_BYTE *)(a1 + 52) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_80;
        v10 += *(unsigned __int8 *)(a1 + 52) << 30 >> 31;
      }
      else
      {
        PBReaderReadString();
        v40 = objc_claimAutoreleasedReturnValue();
        v41 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v40;

        --v10;
      }
      goto LABEL_58;
    }
    if ((v54 & 1) == 0 || (*(_BYTE *)(a1 + 52) & 1) != 0)
      goto LABEL_54;
    if (!*(_QWORD *)(a1 + 16))
    {
      v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v44 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v43;

    }
    v45 = PBUnknownFieldAdd();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if (!v45)
    {
      v52 = 0;
      v53 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
      goto LABEL_62;
    }
LABEL_59:
    if (!(v55 & 1 | (v10 != 0)))
      goto LABEL_60;
  }
  if (!v35 || (*(_BYTE *)(a1 + 52) & 4) != 0)
  {
LABEL_54:
    v46 = PBReaderSkipValueWithTag();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if ((v46 & 1) == 0)
    {
      v52 = 0;
      goto LABEL_61;
    }
    goto LABEL_59;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_80;
  v42 = objc_alloc_init(GEONamedFieldValue);
  if (GEONamedFieldValueReadAllFrom((uint64_t)v42, (void *)v3, v7 & 1))
  {
    PBReaderRecallMark();
    -[GEONamedField _addNoFlagsValues:](a1, v42);

LABEL_58:
    v22 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_59;
  }

LABEL_80:
  v52 = 0;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_61:
  v53 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
  if ((v54 & 1) == 0)
    goto LABEL_63;
LABEL_62:
  *(_BYTE *)(a1 + v53[426]) |= 1u;
LABEL_63:
  if (v57 || (v52 & 1) == 0)
  {
    *(_BYTE *)(a1 + v53[426]) |= 2u;
    *(_BYTE *)(a1 + v53[426]) |= 4u;
    goto LABEL_73;
  }
  if (v20)
  {
    while (1)
    {
      v49 = *v20++;
      v48 = v49;
      if (v49 == 1)
        break;
      if (v48 == 2)
      {
        v47 = 4;
LABEL_69:
        *(_BYTE *)(a1 + v53[426]) |= v47;
      }
      else if (!v48)
      {
        goto LABEL_73;
      }
    }
    v47 = 2;
    goto LABEL_69;
  }
LABEL_73:
  if (v52)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v57)
  {
    v50 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_189440E74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18944129C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189441378(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEONamedFieldCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        -[GEONamedFieldValue readAll:](*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * v5++), 1);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEONamedFieldReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEONamedFieldReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEONamedFieldReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEONamedFieldReadAllFrom_initialTag;
  Specified = GEONamedFieldReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEONamedFieldCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189441BF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEONamedFieldIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *v2;
        v11 = *(_QWORD *)&a1[v10];
        v12 = v11 + 1;
        if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v11);
        *(_QWORD *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        v14 = v8++ >= 9;
        if (v14)
        {
          v9 = 0;
          v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v15 = a1[*v4];
      if (a1[*v4])
        v9 = 0;
LABEL_14:
      v16 = v9 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v9 >> 3) == 2)
      {
        if (v16 != 2 || !PBReaderPlaceMark())
          goto LABEL_87;
        objc_msgSend(a1, "position", 0, 0);
        objc_msgSend(a1, "length");
LABEL_26:
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          while (1)
          {
            v21 = *v2;
            v22 = *(_QWORD *)&a1[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&a1[*v3])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v22);
            *(_QWORD *)&a1[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_36;
            v18 += 7;
            v14 = v19++ >= 9;
            if (v14)
            {
              v20 = 0;
              v25 = *v4;
              v26 = a1[v25];
              goto LABEL_38;
            }
          }
          a1[*v4] = 1;
LABEL_36:
          v25 = *v4;
          v26 = a1[v25];
          if (a1[v25])
            v20 = 0;
LABEL_38:
          v27 = v20 & 7;
          if (v26 || v27 == 4)
            break;
          switch((v20 >> 3))
          {
            case 1u:
              if (v27 != 1)
                goto LABEL_86;
              v29 = *v2;
              v30 = *(_QWORD *)&a1[v29];
              if (v30 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_67;
              v31 = v30 + 8;
              if (v31 > *(_QWORD *)&a1[*v3])
                goto LABEL_67;
              *(_QWORD *)&a1[v29] = v31;
              continue;
            case 2u:
              if (v27 == 2)
                goto LABEL_48;
              goto LABEL_86;
            case 3u:
              if ((v20 & 7) != 0)
                goto LABEL_86;
              v32 = 0;
              while (1)
              {
                v33 = *v2;
                v34 = *(_QWORD *)&a1[v33];
                v35 = v34 + 1;
                if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
                  goto LABEL_66;
                v36 = *(char *)(*(_QWORD *)&a1[*v6] + v34);
                *(_QWORD *)&a1[v33] = v35;
                if (v36 < 0)
                {
                  v37 = v32++ > 8;
                  if (!v37)
                    continue;
                }
                goto LABEL_26;
              }
            case 4u:
              if ((v20 & 7) != 0)
                goto LABEL_86;
              v38 = 0;
              break;
            case 5u:
              if (v27 != 2 || !PBReaderPlaceMark() || !GEONamedFieldIsValid(a1))
                goto LABEL_86;
              PBReaderRecallMark();
              continue;
            default:
LABEL_48:
              if ((PBReaderSkipValueWithTag() & 1) != 0)
                continue;
LABEL_86:
              PBReaderRecallMark();
              goto LABEL_87;
          }
          while (1)
          {
            v39 = *v2;
            v40 = *(_QWORD *)&a1[v39];
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)&a1[*v3])
              break;
            v42 = *(char *)(*(_QWORD *)&a1[*v6] + v40);
            *(_QWORD *)&a1[v39] = v41;
            if (v42 < 0)
            {
              v37 = v38++ > 8;
              if (!v37)
                continue;
            }
            goto LABEL_26;
          }
LABEL_66:
          v25 = *v4;
LABEL_67:
          a1[v25] = 1;
        }
        v43 = a1[*v4];
        PBReaderRecallMark();
        if (v43)
        {
LABEL_87:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        if ((v9 >> 3) == 1)
        {
          if (v5 || v16 != 2)
            goto LABEL_87;
          v5 = 1;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_87;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  if (a1[*v4])
    v44 = 1;
  else
    v44 = v5 == 0;
  v45 = !v44;
  PBReaderRecallMark();
  return v45;
}

void sub_189442274(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEONamedFieldIsDirty(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t i;
  os_unfair_lock_s *v6;
  char IsDirty;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  if ((*(_BYTE *)(a1 + 52) & 0xE) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 52) & 4) == 0)
    return 0;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v3 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v3);
        v6 = *(os_unfair_lock_s **)(*((_QWORD *)&v9 + 1) + 8 * i);
        if (v6)
        {
          os_unfair_lock_lock_with_options();
          IsDirty = _GEONamedFieldValueIsDirty((uint64_t)v6);
          os_unfair_lock_unlock(v6 + 16);
          if ((IsDirty & 1) != 0)
          {
            v2 = 1;
            goto LABEL_16;
          }
        }
      }
      v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_16:

  return v2;
}

os_unfair_lock_s *GEONamedFieldIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEONamedFieldIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189442684(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEONamedFieldValueReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  BOOL v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  int v43;
  uint64_t v44;
  void *v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  GEONamedField *v60;
  char v61;
  char v62;
  int v63;
  int v64;
  char v65;
  void *v66;
  int v68;
  int *v69;
  char v70;
  char v71;
  char v72;
  char v73;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = ((*(unsigned __int8 *)(a1 + 72) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 3) & 1);
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v11])
    {
      case -4:
        ++v13;
        v14 = v8;
        goto LABEL_8;
      case -3:
        v10 = 1;
        goto LABEL_7;
      case -2:
        v14 = v8;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 != 0;
        v70 = v17 & ~(_BYTE)v12 | v9;
        v71 = v17 | v12 | v70;
        if ((((v17 | v12) | v10) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v72 = (v18 == 0) | v17 | v12;
        v73 = v17 | v12;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v8;
        v15 = v9;
LABEL_8:
        v16 = v12;
LABEL_10:
        ++v11;
        v8 = v14;
        v9 = v15;
        v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v20))
      goto LABEL_93;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v7))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      v29 = v23++ >= 9;
      if (v29)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_27:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_93:
      v68 = 1;
      goto LABEL_94;
    }
    v32 = v24 >> 3;
    v33 = v73;
    if ((v72 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if ((v10 & 1) == 0)
          goto LABEL_74;
        *(_BYTE *)(a1 + 72) |= 1u;
        v38 = *v19;
        v39 = *(_QWORD *)(v3 + v38);
        if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *(_QWORD *)(v3 + *v7))
        {
          v40 = *(_QWORD *)(*(_QWORD *)(v3 + *v21) + v39);
          *(_QWORD *)(v3 + v38) = v39 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v20) = 1;
          v40 = 0;
        }
        *(_QWORD *)(a1 + 24) = v40;
        goto LABEL_92;
      case 2:
        if (!v33)
          goto LABEL_74;
        if ((*(_BYTE *)(a1 + 72) & 0x20) == 0)
        {
          PBReaderReadString();
          v44 = objc_claimAutoreleasedReturnValue();
          v45 = *(void **)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v44;
          goto LABEL_73;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_113;
        v62 = 4 * *(_BYTE *)(a1 + 72);
        goto LABEL_88;
      case 3:
        if ((v10 & 1) == 0)
          goto LABEL_74;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        *(_BYTE *)(a1 + 72) |= 2u;
        while (2)
        {
          v49 = *v19;
          v50 = *(_QWORD *)(v3 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v50);
            *(_QWORD *)(v3 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              v29 = v47++ >= 9;
              if (v29)
              {
                v48 = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          v48 = 0;
LABEL_79:
        *(_QWORD *)(a1 + 32) = v48;
        goto LABEL_92;
      case 4:
        if ((v10 & 1) == 0)
          goto LABEL_74;
        v53 = 0;
        v54 = 0;
        v55 = 0;
        *(_BYTE *)(a1 + 72) |= 4u;
        while (2)
        {
          v56 = *v19;
          v57 = *(_QWORD *)(v3 + v56);
          v58 = v57 + 1;
          if (v57 == -1 || v58 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v57);
            *(_QWORD *)(v3 + v56) = v58;
            v55 |= (unint64_t)(v59 & 0x7F) << v53;
            if (v59 < 0)
            {
              v53 += 7;
              v29 = v54++ >= 9;
              if (v29)
              {
                v55 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          v55 = 0;
LABEL_83:
        *(_BYTE *)(a1 + 68) = v55 != 0;
        goto LABEL_92;
      case 5:
        if (!v33)
          goto LABEL_74;
        if ((*(_BYTE *)(a1 + 72) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_113;
          v62 = 8 * *(_BYTE *)(a1 + 72);
LABEL_88:
          v11 += v62 >> 7;
          goto LABEL_89;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_113;
        v60 = objc_alloc_init(GEONamedField);
        if (GEONamedFieldReadAllFrom())
        {
          PBReaderRecallMark();
          v45 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v60;
LABEL_73:

          --v11;
LABEL_89:
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
LABEL_92:
          if (!(v71 & 1 | (v11 != 0)))
            goto LABEL_93;
          continue;
        }

LABEL_113:
        v68 = 0;
        v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_94:
        v69 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
        if ((v70 & 1) != 0)
LABEL_95:
          *(_BYTE *)(a1 + v69[435]) |= 8u;
        if (v73 & 1 | ((v68 & 1) == 0))
        {
          *(_BYTE *)(a1 + v69[435]) |= 0x20u;
          *(_BYTE *)(a1 + v69[435]) |= 0x10u;
          goto LABEL_106;
        }
        if (v18)
        {
          while (2)
          {
            while (1)
            {
              v64 = *v18++;
              v63 = v64;
              if (v64 == 2)
                break;
              if (v63 == 5)
              {
                v65 = 16;
                goto LABEL_105;
              }
              if (!v63)
                goto LABEL_106;
            }
            v65 = 32;
LABEL_105:
            *(_BYTE *)(a1 + v69[435]) |= v65;
            continue;
          }
        }
LABEL_106:
        if (v68)
          v3 = *(_BYTE *)(v3 + *v20) == 0;
        else
          v3 = 0;
        if ((v73 & 1) != 0)
        {
          v66 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v70 & 1) == 0 || (*(_BYTE *)(a1 + 72) & 8) != 0)
        {
LABEL_74:
          v61 = PBReaderSkipValueWithTag();
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v20 = (int *)MEMORY[0x1E0D82BC8];
          if ((v61 & 1) == 0)
          {
            v68 = 0;
            goto LABEL_94;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v42 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v41;

          }
          v43 = PBUnknownFieldAdd();
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          if (!v43)
          {
            v68 = 0;
            v69 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
            goto LABEL_95;
          }
        }
        goto LABEL_92;
    }
  }
}

void sub_1894435F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894436DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEONamedFieldValueReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEONamedFieldValueReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEONamedFieldValueReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEONamedFieldValueReadAllFrom_initialTag;
  Specified = GEONamedFieldValueReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    -[GEONamedField readAll:](*(_QWORD *)(a1 + 40), 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189443948(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189443B38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEONamedFieldValueIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  if ((*(_BYTE *)(a1 + 72) & 0x60) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 72) & 0x10) != 0)
    return GEONamedFieldIsDirty(*(_QWORD *)(a1 + 40));
  return 0;
}

void sub_189443D98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894443A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPhotoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  unint64_t v29;
  BOOL v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  void *v43;
  GEOPhotoInfo *v44;
  id v45;
  void *v46;
  int v47;
  char v48;
  int v49;
  int v50;
  char v51;
  void *v52;
  int v54;
  int *v55;
  char v56;
  char v57;
  char v58;
  char v59;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 != 0;
        v56 = v14 & ~(_BYTE)v10 | v7;
        v57 = v14 | v10 | v56;
        if ((((v14 | v10) | v8) & 1) != 0)
          v15 = 0;
        else
          v15 = a3;
        v16 = (int *)MEMORY[0x1E0D82BF0];
        v58 = (v15 == 0) | v14 | v10;
        v59 = v14 | v10;
        v17 = (int *)MEMORY[0x1E0D82BC8];
        v18 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_72;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v16;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_24;
      v19 += 7;
      v26 = v20++ >= 9;
      if (v26)
      {
        v21 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_24:
    v27 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v21 = 0;
LABEL_26:
    if (v27 || (v21 & 7) == 4)
    {
LABEL_72:
      v54 = 1;
      goto LABEL_73;
    }
    v29 = v21 >> 3;
    v30 = v59;
    if ((v58 & 1) == 0)
    {
      v31 = v15;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 == 3)
    {
      if (!v30)
        goto LABEL_62;
      if ((*(_BYTE *)(a1 + 56) & 8) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_92;
        v9 += *(unsigned __int8 *)(a1 + 56) << 28 >> 31;
      }
      else
      {
        PBReaderReadString();
        v42 = objc_claimAutoreleasedReturnValue();
        v43 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v42;

        --v9;
      }
      goto LABEL_70;
    }
    if ((_DWORD)v29 == 2)
      break;
    if ((_DWORD)v29 == 1)
    {
      if ((v8 & 1) == 0)
        goto LABEL_62;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      *(_BYTE *)(a1 + 56) |= 1u;
      while (1)
      {
        v38 = *v16;
        v39 = *(_QWORD *)(v3 + v38);
        v40 = v39 + 1;
        if (v39 == -1 || v40 > *(_QWORD *)(v3 + *v6))
          break;
        v41 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v39);
        *(_QWORD *)(v3 + v38) = v40;
        v37 |= (unint64_t)(v41 & 0x7F) << v35;
        if ((v41 & 0x80) == 0)
          goto LABEL_65;
        v35 += 7;
        v26 = v36++ >= 9;
        if (v26)
        {
          LODWORD(v37) = 0;
          goto LABEL_67;
        }
      }
      *(_BYTE *)(v3 + *v17) = 1;
LABEL_65:
      if (*(_BYTE *)(v3 + *v17))
        LODWORD(v37) = 0;
LABEL_67:
      *(_DWORD *)(a1 + 52) = v37;
    }
    else
    {
      if ((v56 & 1) == 0 || (*(_BYTE *)(a1 + 56) & 2) != 0)
        goto LABEL_62;
      if (!*(_QWORD *)(a1 + 16))
      {
        v45 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v46 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v45;

      }
      v47 = PBUnknownFieldAdd();
      v17 = (int *)MEMORY[0x1E0D82BC8];
      if (!v47)
      {
        v54 = 0;
        v55 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
        goto LABEL_74;
      }
    }
LABEL_71:
    if (!(v57 & 1 | (v9 != 0)))
      goto LABEL_72;
  }
  if (!v30 || (*(_BYTE *)(a1 + 56) & 4) != 0)
  {
LABEL_62:
    v48 = PBReaderSkipValueWithTag();
    v17 = (int *)MEMORY[0x1E0D82BC8];
    if ((v48 & 1) == 0)
    {
      v54 = 0;
      goto LABEL_73;
    }
    goto LABEL_71;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_92;
  v44 = objc_alloc_init(GEOPhotoInfo);
  if (GEOPhotoInfoReadAllFrom((uint64_t)v44, (void *)v3))
  {
    PBReaderRecallMark();
    -[GEOPhoto _addNoFlagsPhotoInfo:](a1, v44);

LABEL_70:
    v17 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_71;
  }

LABEL_92:
  v54 = 0;
  v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_73:
  v55 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
  if ((v56 & 1) == 0)
    goto LABEL_75;
LABEL_74:
  *(_BYTE *)(a1 + v55[445]) |= 2u;
LABEL_75:
  if (v59 & 1 | ((v54 & 1) == 0))
  {
    *(_BYTE *)(a1 + v55[445]) |= 4u;
    *(_BYTE *)(a1 + v55[445]) |= 8u;
    goto LABEL_85;
  }
  if (v15)
  {
    while (2)
    {
      while (1)
      {
        v50 = *v15++;
        v49 = v50;
        if (v50 == 2)
          break;
        if (v49 == 3)
        {
          v51 = 8;
          goto LABEL_84;
        }
        if (!v49)
          goto LABEL_85;
      }
      v51 = 4;
LABEL_84:
      *(_BYTE *)(a1 + v55[445]) |= v51;
      continue;
    }
  }
LABEL_85:
  if (v54)
    v3 = *(_BYTE *)(v3 + *v17) == 0;
  else
    v3 = 0;
  if ((v59 & 1) != 0)
  {
    v52 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_189444C7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189445538(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPhotoCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 24);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOPhotoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPhotoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPhotoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPhotoReadAllFrom_initialTag;
  Specified = GEOPhotoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPhotoCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1894457C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPhotoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPhotoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189445824(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPhotoInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if (v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_37:
          v23 = 0;
          goto LABEL_36;
        }
      }
      else if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_37;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8)
            continue;
          goto LABEL_34;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_37;
      }
LABEL_34:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v23 = a1[*v4] == 0;
LABEL_36:
  PBReaderRecallMark();
  return v23;
}

void sub_189445C8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPhotoIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 56) & 0x1C) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_1894460A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189446424(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPhotoInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  _BOOL8 v29;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          PBReaderReadString();
          v25 = objc_claimAutoreleasedReturnValue();
          v26 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v25;

        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_34;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 24) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v27 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v28 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v27;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_39;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v29 = v3[*v6] == 0;
  }
  else
  {
LABEL_39:
    v29 = 0;
  }
  objc_sync_exit(v3);

  return v29;
}

void sub_189447020(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPhotoInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPhotoInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189447080(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPhotoOptionsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  id v40;
  void *v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  _BOOL8 v50;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_74;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        v17 = v10 & 7;
        if (v16 || v17 == 4)
          goto LABEL_74;
        v19 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          if (v17 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_75;
            while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5] && !v3[*v6])
            {
              v27 = 0;
              v28 = 0;
              v29 = 0;
              while (1)
              {
                v30 = *v4;
                v31 = *(_QWORD *)&v3[v30];
                v32 = v31 + 1;
                if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
                  break;
                v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
                *(_QWORD *)&v3[v30] = v32;
                v29 |= (unint64_t)(v33 & 0x7F) << v27;
                if (v33 < 0)
                {
                  v27 += 7;
                  v15 = v28++ >= 9;
                  if (!v15)
                    continue;
                }
                goto LABEL_41;
              }
              v3[*v6] = 1;
LABEL_41:
              PBRepeatedInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v43 = 0;
            v44 = 0;
            v45 = 0;
            while (1)
            {
              v46 = *v4;
              v47 = *(_QWORD *)&v3[v46];
              v48 = v47 + 1;
              if (v47 == -1 || v48 > *(_QWORD *)&v3[*v5])
                break;
              v49 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v47);
              *(_QWORD *)&v3[v46] = v48;
              v45 |= (unint64_t)(v49 & 0x7F) << v43;
              if (v49 < 0)
              {
                v43 += 7;
                v15 = v44++ >= 9;
                if (!v15)
                  continue;
              }
              goto LABEL_73;
            }
            v3[*v6] = 1;
LABEL_73:
            PBRepeatedInt32Add();
          }
          goto LABEL_62;
        }
        if ((_DWORD)v19 == 2)
          break;
        if ((_DWORD)v19 == 1)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&v3[*v5])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
            *(_QWORD *)&v3[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_54;
            v20 += 7;
            v15 = v21++ >= 9;
            if (v15)
            {
              LODWORD(v22) = 0;
              goto LABEL_56;
            }
          }
          v3[*v6] = 1;
LABEL_54:
          if (v3[*v6])
            LODWORD(v22) = 0;
LABEL_56:
          v42 = 40;
LABEL_61:
          *(_DWORD *)(a1 + v42) = v22;
          goto LABEL_62;
        }
        if (!*(_QWORD *)(a1 + 8))
        {
          v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v41 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v40;

        }
        if (!PBUnknownFieldAdd())
          goto LABEL_75;
LABEL_62:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_74;
      }
      v34 = 0;
      v35 = 0;
      v22 = 0;
      *(_BYTE *)(a1 + 48) |= 1u;
      while (1)
      {
        v36 = *v4;
        v37 = *(_QWORD *)&v3[v36];
        v38 = v37 + 1;
        if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
          break;
        v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
        *(_QWORD *)&v3[v36] = v38;
        v22 |= (unint64_t)(v39 & 0x7F) << v34;
        if ((v39 & 0x80) == 0)
          goto LABEL_58;
        v34 += 7;
        v15 = v35++ >= 9;
        if (v15)
        {
          LODWORD(v22) = 0;
          goto LABEL_60;
        }
      }
      v3[*v6] = 1;
LABEL_58:
      if (v3[*v6])
        LODWORD(v22) = 0;
LABEL_60:
      v42 = 44;
      goto LABEL_61;
    }
LABEL_74:
    v50 = v3[*v6] == 0;
  }
  else
  {
LABEL_75:
    v50 = 0;
  }
  objc_sync_exit(v3);

  return v50;
}

void sub_1894485F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPhotoOptionsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPhotoOptionsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189448658(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189449368(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const float *v13;
  uint32x4_t v14;
  int8x16_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  unsigned __int8 v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  BOOL v34;
  int v35;
  unint64_t v37;
  BOOL v38;
  int *v39;
  int v40;
  int v41;
  BOOL v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  GEOMapRegion *v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  void *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  id v98;
  void *v99;
  int v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  void *v108;
  int v110;
  char v111;
  char v112;
  char v113;
  BOOL v114;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 176));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 172);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 168));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (const float *)(a1 + 200);
  v14 = (uint32x4_t)vld1q_dup_f32(v13);
  v15.i64[0] = 0x100000001;
  v15.i64[1] = 0x100000001;
  v16 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDD400), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDD410), v15)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDD3E0), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDD3F0), v15))));
  while (2)
  {
    v17 = 1;
    v18 = 1;
    v19 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v16;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v18 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v20 = v16 > 0xB;
        v21 = v20 & ~(_BYTE)v12 | v10;
        v22 = v20 | v12;
        v111 = v21;
        v112 = v22 | v21;
        if (((v22 | v9) & 1) != 0)
          v23 = 0;
        else
          v23 = a3;
        v24 = (int *)MEMORY[0x1E0D82BF0];
        v25 = (int *)MEMORY[0x1E0D82BC8];
        v113 = (v23 == 0) | v22;
        v114 = v22;
        v26 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v16;
LABEL_7:
        v17 = v10;
LABEL_8:
        v18 = v11;
        v19 = v12;
LABEL_10:
        ++v8;
        v10 = v17;
        v11 = v18;
        v12 = v19;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v24) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v25))
      goto LABEL_240;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    while (1)
    {
      v30 = *v24;
      v31 = *(_QWORD *)(v3 + v30);
      v32 = v31 + 1;
      if (v31 == -1 || v32 > *(_QWORD *)(v3 + *v7))
        break;
      v33 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v31);
      *(_QWORD *)(v3 + v30) = v32;
      v29 |= (unint64_t)(v33 & 0x7F) << v27;
      if ((v33 & 0x80) == 0)
        goto LABEL_25;
      v27 += 7;
      v34 = v28++ >= 9;
      if (v34)
      {
        v29 = 0;
        v35 = *(unsigned __int8 *)(v3 + *v25);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v25) = 1;
LABEL_25:
    v35 = *(unsigned __int8 *)(v3 + *v25);
    if (*(_BYTE *)(v3 + *v25))
      v29 = 0;
LABEL_27:
    if (v35 || (v29 & 7) == 4)
    {
LABEL_240:
      v110 = 1;
      goto LABEL_241;
    }
    v37 = v29 >> 3;
    v38 = v114;
    if ((v113 & 1) == 0)
    {
      v39 = v23;
      do
      {
        v41 = *v39++;
        v40 = v41;
        v38 = v41 != 0;
        if (v41)
          v42 = v40 == (_DWORD)v37;
        else
          v42 = 1;
      }
      while (!v42);
    }
    if ((int)v37 <= 99)
      break;
    switch((_DWORD)v37)
    {
      case 0x64:
        if ((v9 & 1) != 0)
        {
          v91 = 0;
          v92 = 0;
          v45 = 0;
          *(_DWORD *)(a1 + 200) |= 4u;
          while (1)
          {
            v93 = *v24;
            v94 = *(_QWORD *)(v3 + v93);
            v95 = v94 + 1;
            if (v94 == -1 || v95 > *(_QWORD *)(v3 + *v7))
              break;
            v96 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v94);
            *(_QWORD *)(v3 + v93) = v95;
            v45 |= (unint64_t)(v96 & 0x7F) << v91;
            if ((v96 & 0x80) == 0)
              goto LABEL_206;
            v91 += 7;
            v34 = v92++ >= 9;
            if (v34)
            {
              v45 = 0;
              goto LABEL_208;
            }
          }
          *(_BYTE *)(v3 + *v25) = 1;
LABEL_206:
          if (*(_BYTE *)(v3 + *v25))
            v45 = 0;
LABEL_208:
          v102 = 80;
LABEL_209:
          *(_QWORD *)(a1 + v102) = v45;
          goto LABEL_236;
        }
LABEL_178:
        v101 = PBReaderSkipValueWithTag();
        v26 = (int *)MEMORY[0x1E0D82BB8];
        v7 = (int *)MEMORY[0x1E0D82BD8];
        v25 = (int *)MEMORY[0x1E0D82BC8];
        if ((v101 & 1) == 0)
        {
          v110 = 0;
          goto LABEL_241;
        }
        goto LABEL_236;
      case 0xCA:
        if (v38)
        {
          if ((*(_BYTE *)(a1 + 202) & 2) == 0)
          {
            PBReaderReadString();
            v97 = objc_claimAutoreleasedReturnValue();
            v90 = *(void **)(a1 + 112);
            *(_QWORD *)(a1 + 112) = v97;
            goto LABEL_154;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_270;
          v104 = (int)(*(_DWORD *)(a1 + 200) << 14) >> 31;
LABEL_234:
          v8 += v104;
LABEL_235:
          v25 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v26 = (int *)MEMORY[0x1E0D82BB8];
          goto LABEL_236;
        }
        goto LABEL_178;
      case 0xCE:
        if ((v9 & 1) != 0)
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          *(_DWORD *)(a1 + 200) |= 0x20u;
          while (1)
          {
            v53 = *v24;
            v54 = *(_QWORD *)(v3 + v53);
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v7))
              break;
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if ((v56 & 0x80) == 0)
              goto LABEL_185;
            v50 += 7;
            v34 = v51++ >= 9;
            if (v34)
            {
              LODWORD(v52) = 0;
              goto LABEL_187;
            }
          }
          *(_BYTE *)(v3 + *v25) = 1;
LABEL_185:
          if (*(_BYTE *)(v3 + *v25))
            LODWORD(v52) = 0;
LABEL_187:
          v103 = 188;
LABEL_204:
          *(_DWORD *)(a1 + v103) = v52;
          goto LABEL_236;
        }
        goto LABEL_178;
    }
LABEL_172:
    if ((v111 & 1) == 0 || (*(_BYTE *)(a1 + 201) & 1) != 0)
      goto LABEL_178;
    if (!*(_QWORD *)(a1 + 16))
    {
      v98 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v99 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v98;

    }
    v100 = PBUnknownFieldAdd();
    v25 = (int *)MEMORY[0x1E0D82BC8];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v26 = (int *)MEMORY[0x1E0D82BB8];
    if (!v100)
    {
      v110 = 0;
      goto LABEL_242;
    }
LABEL_236:
    if (!(v112 & 1 | (v8 != 0)))
      goto LABEL_240;
  }
  switch((int)v37)
  {
    case 1:
      if ((v9 & 1) == 0)
        goto LABEL_178;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      *(_DWORD *)(a1 + 200) |= 1u;
      while (2)
      {
        v46 = *v24;
        v47 = *(_QWORD *)(v3 + v46);
        v48 = v47 + 1;
        if (v47 == -1 || v48 > *(_QWORD *)(v3 + *v7))
        {
          *(_BYTE *)(v3 + *v25) = 1;
        }
        else
        {
          v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v47);
          *(_QWORD *)(v3 + v46) = v48;
          v45 |= (unint64_t)(v49 & 0x7F) << v43;
          if (v49 < 0)
          {
            v43 += 7;
            v34 = v44++ >= 9;
            if (v34)
            {
              v45 = 0;
              goto LABEL_183;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(v3 + *v25))
        v45 = 0;
LABEL_183:
      v102 = 24;
      goto LABEL_209;
    case 3:
      if ((v9 & 1) == 0)
        goto LABEL_178;
      v57 = 0;
      v58 = 0;
      v52 = 0;
      *(_DWORD *)(a1 + 200) |= 0x40u;
      while (2)
      {
        v59 = *v24;
        v60 = *(_QWORD *)(v3 + v59);
        v61 = v60 + 1;
        if (v60 == -1 || v61 > *(_QWORD *)(v3 + *v7))
        {
          *(_BYTE *)(v3 + *v25) = 1;
        }
        else
        {
          v62 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v60);
          *(_QWORD *)(v3 + v59) = v61;
          v52 |= (unint64_t)(v62 & 0x7F) << v57;
          if (v62 < 0)
          {
            v57 += 7;
            v34 = v58++ >= 9;
            if (v34)
            {
              LODWORD(v52) = 0;
              goto LABEL_191;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(v3 + *v25))
        LODWORD(v52) = 0;
LABEL_191:
      v103 = 192;
      goto LABEL_204;
    case 4:
      if (!v38)
        goto LABEL_178;
      if ((*(_BYTE *)(a1 + 201) & 0x80) == 0)
      {
        PBReaderReadString();
        v63 = objc_claimAutoreleasedReturnValue();
        v64 = 96;
        goto LABEL_133;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_270;
      v104 = (int)(*(_DWORD *)(a1 + 200) << 16) >> 31;
      goto LABEL_234;
    case 5:
      if (!v38)
        goto LABEL_178;
      if ((*(_BYTE *)(a1 + 201) & 0x40) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_270;
        v104 = (int)(*(_DWORD *)(a1 + 200) << 17) >> 31;
        goto LABEL_234;
      }
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_270;
      v65 = objc_alloc_init(GEOMapRegion);
      if (!GEOMapRegionReadAllFrom((uint64_t)v65, (void *)v3))
        goto LABEL_269;
      PBReaderRecallMark();
      v66 = 88;
      goto LABEL_153;
    case 6:
      if (!v38)
        goto LABEL_178;
      if ((*(_BYTE *)(a1 + 201) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_270;
        v104 = (int)(*(_DWORD *)(a1 + 200) << 22) >> 31;
        goto LABEL_234;
      }
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_270;
      v65 = objc_alloc_init(GEOAddress);
      if (!GEOAddressReadAllFrom((uint64_t)v65, (void *)v3, v11 & 1))
        goto LABEL_269;
      PBReaderRecallMark();
      v66 = 32;
      goto LABEL_153;
    case 7:
      if (!v38)
        goto LABEL_178;
      if ((*(_BYTE *)(a1 + 202) & 4) == 0)
      {
        PBReaderReadString();
        v63 = objc_claimAutoreleasedReturnValue();
        v64 = 120;
        goto LABEL_133;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_270;
      v104 = (int)(*(_DWORD *)(a1 + 200) << 13) >> 31;
      goto LABEL_234;
    case 8:
      if (!v38)
        goto LABEL_178;
      if ((*(_BYTE *)(a1 + 202) & 1) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_270;
        v104 = (int)(*(_DWORD *)(a1 + 200) << 15) >> 31;
        goto LABEL_234;
      }
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_270;
      v65 = objc_alloc_init(GEOAddress);
      if (!GEOAddressReadAllFrom((uint64_t)v65, (void *)v3, v11 & 1))
        goto LABEL_269;
      PBReaderRecallMark();
      v66 = 104;
      goto LABEL_153;
    case 9:
      if (!v38)
        goto LABEL_178;
      if ((*(_BYTE *)(a1 + 201) & 8) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_270;
        v104 = (int)(*(_DWORD *)(a1 + 200) << 20) >> 31;
        goto LABEL_234;
      }
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_270;
      v65 = objc_alloc_init(GEOLatLng);
      if (!GEOLatLngReadAllFrom((uint64_t)v65, (void *)v3))
        goto LABEL_269;
      PBReaderRecallMark();
      v66 = 56;
      goto LABEL_153;
    case 10:
      if (!v38 || (*(_BYTE *)(a1 + 201) & 4) != 0)
        goto LABEL_178;
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_270;
      v65 = objc_alloc_init(GEOBusiness);
      if (!GEOBusinessReadAllFrom((uint64_t)v65, (void *)v3, v11 & 1))
        goto LABEL_269;
      PBReaderRecallMark();
      -[GEOPlace _addNoFlagsBusiness:](a1, v65);
      goto LABEL_160;
    case 11:
      if ((v9 & 1) == 0)
        goto LABEL_178;
      v67 = 0;
      v68 = 0;
      v52 = 0;
      *(_DWORD *)(a1 + 200) |= 8u;
      while (2)
      {
        v69 = *v24;
        v70 = *(_QWORD *)(v3 + v69);
        v71 = v70 + 1;
        if (v70 == -1 || v71 > *(_QWORD *)(v3 + *v7))
        {
          *(_BYTE *)(v3 + *v25) = 1;
        }
        else
        {
          v72 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v70);
          *(_QWORD *)(v3 + v69) = v71;
          v52 |= (unint64_t)(v72 & 0x7F) << v67;
          if (v72 < 0)
          {
            v67 += 7;
            v34 = v68++ >= 9;
            if (v34)
            {
              LODWORD(v52) = 0;
              goto LABEL_195;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(v3 + *v25))
        LODWORD(v52) = 0;
LABEL_195:
      v103 = 180;
      goto LABEL_204;
    case 12:
      if (!v38 || (*(_BYTE *)(a1 + 201) & 0x20) != 0)
        goto LABEL_178;
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_270;
      v65 = objc_alloc_init(GEOLatLng);
      if (!GEOLatLngReadAllFrom((uint64_t)v65, (void *)v3))
        goto LABEL_269;
      PBReaderRecallMark();
      -[GEOPlace _addNoFlagsEntryPoint:](a1, v65);
      goto LABEL_160;
    case 13:
      if ((v9 & 1) == 0)
        goto LABEL_178;
      v73 = 0;
      v74 = 0;
      v75 = 0;
      *(_DWORD *)(a1 + 200) |= 0x80u;
      while (2)
      {
        v76 = *v24;
        v77 = *(_QWORD *)(v3 + v76);
        v78 = v77 + 1;
        if (v77 == -1 || v78 > *(_QWORD *)(v3 + *v7))
        {
          *(_BYTE *)(v3 + *v25) = 1;
        }
        else
        {
          v79 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v77);
          *(_QWORD *)(v3 + v76) = v78;
          v75 |= (unint64_t)(v79 & 0x7F) << v73;
          if (v79 < 0)
          {
            v73 += 7;
            v34 = v74++ >= 9;
            if (v34)
            {
              v75 = 0;
              goto LABEL_199;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(v3 + *v25))
        v75 = 0;
LABEL_199:
      *(_BYTE *)(a1 + 196) = v75 != 0;
      goto LABEL_236;
    case 14:
      if ((v9 & 1) == 0)
        goto LABEL_178;
      v80 = 0;
      v81 = 0;
      v52 = 0;
      *(_DWORD *)(a1 + 200) |= 0x10u;
      while (2)
      {
        v82 = *v24;
        v83 = *(_QWORD *)(v3 + v82);
        v84 = v83 + 1;
        if (v83 == -1 || v84 > *(_QWORD *)(v3 + *v7))
        {
          *(_BYTE *)(v3 + *v25) = 1;
        }
        else
        {
          v85 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v83);
          *(_QWORD *)(v3 + v82) = v84;
          v52 |= (unint64_t)(v85 & 0x7F) << v80;
          if (v85 < 0)
          {
            v80 += 7;
            v34 = v81++ >= 9;
            if (v34)
            {
              LODWORD(v52) = 0;
              goto LABEL_203;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(v3 + *v25))
        LODWORD(v52) = 0;
LABEL_203:
      v103 = 184;
      goto LABEL_204;
    case 15:
      if (!v38)
        goto LABEL_178;
      if ((*(_BYTE *)(a1 + 202) & 0x20) == 0)
      {
        PBReaderReadString();
        v63 = objc_claimAutoreleasedReturnValue();
        v64 = 144;
        goto LABEL_133;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_270;
      v104 = (int)(*(_DWORD *)(a1 + 200) << 10) >> 31;
      goto LABEL_234;
    case 16:
      if (!v38)
        goto LABEL_178;
      if ((*(_BYTE *)(a1 + 202) & 0x10) == 0)
      {
        PBReaderReadString();
        v63 = objc_claimAutoreleasedReturnValue();
        v64 = 136;
LABEL_133:
        v86 = *(void **)(a1 + v64);
        *(_QWORD *)(a1 + v64) = v63;

        v26 = (int *)MEMORY[0x1E0D82BB8];
        v7 = (int *)MEMORY[0x1E0D82BD8];
        v25 = (int *)MEMORY[0x1E0D82BC8];
        --v8;
        goto LABEL_236;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_270;
      v104 = (int)(*(_DWORD *)(a1 + 200) << 11) >> 31;
      goto LABEL_234;
    case 17:
      if ((v9 & 1) == 0)
        goto LABEL_178;
      *(_DWORD *)(a1 + 200) |= 2u;
      v87 = *v24;
      v88 = *(_QWORD *)(v3 + v87);
      if (v88 <= 0xFFFFFFFFFFFFFFF7 && v88 + 8 <= *(_QWORD *)(v3 + *v7))
      {
        v89 = *(_QWORD *)(*(_QWORD *)(v3 + *v26) + v88);
        *(_QWORD *)(v3 + v87) = v88 + 8;
      }
      else
      {
        *(_BYTE *)(v3 + *v25) = 1;
        v89 = 0;
      }
      *(_QWORD *)(a1 + 40) = v89;
      goto LABEL_236;
    case 18:
      if (!v38)
        goto LABEL_178;
      if ((*(_BYTE *)(a1 + 202) & 0x40) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_270;
        v104 = (int)(*(_DWORD *)(a1 + 200) << 9) >> 31;
        goto LABEL_234;
      }
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_270;
      v65 = objc_alloc_init(GEOStructuredAddress);
      if (!GEOStructuredAddressReadAllFrom(v65, (void *)v3))
        goto LABEL_269;
      PBReaderRecallMark();
      v66 = 152;
      goto LABEL_153;
    case 19:
      if (!v38)
        goto LABEL_178;
      if ((*(_BYTE *)(a1 + 202) & 0x80) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_270;
        v104 = (int)(*(_DWORD *)(a1 + 200) << 8) >> 31;
        goto LABEL_234;
      }
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_270;
      v65 = objc_alloc_init(GEOTimezone);
      if (!GEOTimezoneReadAllFrom((uint64_t)v65, (void *)v3))
        goto LABEL_269;
      PBReaderRecallMark();
      v66 = 160;
      goto LABEL_153;
    case 20:
      if (!v38)
        goto LABEL_178;
      if ((*(_BYTE *)(a1 + 201) & 0x10) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_270;
        v104 = (int)(*(_DWORD *)(a1 + 200) << 19) >> 31;
        goto LABEL_234;
      }
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_270;
      v65 = objc_alloc_init(GEOMapRegion);
      if (GEOMapRegionReadAllFrom((uint64_t)v65, (void *)v3))
      {
        PBReaderRecallMark();
        v66 = 64;
LABEL_153:
        v90 = *(void **)(a1 + v66);
        *(_QWORD *)(a1 + v66) = v65;
LABEL_154:

        --v8;
        goto LABEL_235;
      }
LABEL_269:

LABEL_270:
      v110 = 0;
      v25 = (int *)MEMORY[0x1E0D82BC8];
LABEL_241:
      if ((v111 & 1) != 0)
LABEL_242:
        *(_DWORD *)(a1 + 200) |= 0x100u;
      if (v114 || (v110 & 1) == 0)
      {
        *(_DWORD *)(a1 + 200) |= 0x8000u;
        *(_DWORD *)(a1 + 200) |= 0x4000u;
        *(_DWORD *)(a1 + 200) |= 0x200u;
        *(_DWORD *)(a1 + 200) |= 0x40000u;
        *(_DWORD *)(a1 + 200) |= 0x10000u;
        *(_DWORD *)(a1 + 200) |= 0x800u;
        *(_DWORD *)(a1 + 200) |= 0x400u;
        *(_DWORD *)(a1 + 200) |= 0x2000u;
        *(_DWORD *)(a1 + 200) |= 0x200000u;
        *(_DWORD *)(a1 + 200) |= 0x100000u;
        *(_DWORD *)(a1 + 200) |= 0x400000u;
        *(_DWORD *)(a1 + 200) |= 0x800000u;
        *(_DWORD *)(a1 + 200) |= 0x1000u;
        *(_DWORD *)(a1 + 200) |= 0x80000u;
        *(_DWORD *)(a1 + 200) |= 0x20000u;
      }
      else if (v23)
      {
        while (1)
        {
          v106 = *v23++;
          v105 = v106;
          v107 = 0x8000;
          switch(v106)
          {
            case 0:
              goto LABEL_263;
            case 1:
            case 2:
            case 3:
            case 11:
            case 13:
            case 14:
            case 17:
              continue;
            case 4:
              goto LABEL_262;
            case 5:
              v107 = 0x4000;
              goto LABEL_262;
            case 6:
              v107 = 512;
              goto LABEL_262;
            case 7:
              v107 = 0x40000;
              goto LABEL_262;
            case 8:
              v107 = 0x10000;
              goto LABEL_262;
            case 9:
              v107 = 2048;
              goto LABEL_262;
            case 10:
              v107 = 1024;
              goto LABEL_262;
            case 12:
              v107 = 0x2000;
              goto LABEL_262;
            case 15:
              v107 = 0x200000;
              goto LABEL_262;
            case 16:
              v107 = 0x100000;
              goto LABEL_262;
            case 18:
              v107 = 0x400000;
              goto LABEL_262;
            case 19:
              v107 = 0x800000;
              goto LABEL_262;
            case 20:
              v107 = 4096;
              goto LABEL_262;
            case 21:
              v107 = 0x80000;
              goto LABEL_262;
            default:
              if (v105 != 202)
                continue;
              v107 = 0x20000;
LABEL_262:
              *(_DWORD *)(a1 + 200) |= v107;
              break;
          }
        }
      }
LABEL_263:
      if (v110)
        v3 = *(_BYTE *)(v3 + *v25) == 0;
      else
        v3 = 0;
      if (v114)
      {
        v108 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

      }
      return v3;
    case 21:
      if (!v38 || (*(_BYTE *)(a1 + 202) & 8) != 0)
        goto LABEL_178;
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_270;
      v65 = objc_alloc_init(GEORoadAccessPoint);
      if (!GEORoadAccessPointReadAllFrom((uint64_t)v65, (void *)v3))
        goto LABEL_269;
      PBReaderRecallMark();
      -[GEOPlace _addNoFlagsRoadAccessPoints:](a1, v65);
LABEL_160:

      goto LABEL_235;
    default:
      goto LABEL_172;
  }
}

void sub_18944A768(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18944A8B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18944A9F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18944AB3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18944AC80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18944ADC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18944B2FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18944B798(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18944B8DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18944BAA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18944BBE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18944BD24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18944BE6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18944DF80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPlaceCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[11], "readAll:", 1);
  objc_msgSend(a1[4], "readAll:", 1);
  objc_msgSend(a1[13], "readAll:", 1);
  objc_msgSend(a1[7], "readAll:", 1);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v2 = a1[6];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v26;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v26 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
    }
    while (v4);
  }

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v7 = a1[9];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v22;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v22 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * v11++), "readAll:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
    }
    while (v9);
  }

  objc_msgSend(a1[8], "readAll:", 1);
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v12 = a1[16];
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v18;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v18 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v16++), "readAll:", 1, (_QWORD)v17);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
    }
    while (v14);
  }

}

unint64_t GEOPlaceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 172))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPlaceReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 176));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 168) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 172) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPlaceReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPlaceReadAllFrom_initialTag;
  Specified = GEOPlaceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPlaceCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 176));
  return Specified;
}

void sub_18944E394(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPlaceReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18944E3F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  _BOOL8 v58;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_124;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        goto LABEL_124;
      v18 = v8 >> 3;
      if ((int)(v8 >> 3) <= 99)
        break;
      switch((_DWORD)v18)
      {
        case 0x64:
          if ((v8 & 7) != 0)
            goto LABEL_126;
          v53 = 0;
          while (1)
          {
            v54 = *v2;
            v55 = *(_QWORD *)&a1[v54];
            v56 = v55 + 1;
            if (v55 == -1 || v56 > *(_QWORD *)&a1[*v3])
              goto LABEL_119;
            v57 = *(char *)(*(_QWORD *)&a1[*v5] + v55);
            *(_QWORD *)&a1[v54] = v56;
            if (v57 < 0)
            {
              v24 = v53++ > 8;
              if (!v24)
                continue;
            }
            goto LABEL_123;
          }
        case 0xCA:
          if (v16 != 2)
            goto LABEL_126;
          break;
        case 0xCE:
          if ((v8 & 7) != 0)
            goto LABEL_126;
          v19 = 0;
          while (1)
          {
            v20 = *v2;
            v21 = *(_QWORD *)&a1[v20];
            v22 = v21 + 1;
            if (v21 == -1 || v22 > *(_QWORD *)&a1[*v3])
              goto LABEL_119;
            v23 = *(char *)(*(_QWORD *)&a1[*v5] + v21);
            *(_QWORD *)&a1[v20] = v22;
            if (v23 < 0)
            {
              v24 = v19++ > 8;
              if (!v24)
                continue;
            }
            goto LABEL_123;
          }
      }
LABEL_122:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_126:
        PBReaderRecallMark();
        return 0;
      }
LABEL_123:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_124;
    }
    switch((int)v18)
    {
      case 1:
        if ((v8 & 7) != 0)
          goto LABEL_126;
        v25 = 0;
        while (1)
        {
          v26 = *v2;
          v27 = *(_QWORD *)&a1[v26];
          v28 = v27 + 1;
          if (v27 == -1 || v28 > *(_QWORD *)&a1[*v3])
            goto LABEL_119;
          v29 = *(char *)(*(_QWORD *)&a1[*v5] + v27);
          *(_QWORD *)&a1[v26] = v28;
          if (v29 < 0)
          {
            v24 = v25++ > 8;
            if (!v24)
              continue;
          }
          goto LABEL_123;
        }
      case 3:
        if ((v8 & 7) != 0)
          goto LABEL_126;
        v30 = 0;
        while (1)
        {
          v31 = *v2;
          v32 = *(_QWORD *)&a1[v31];
          v33 = v32 + 1;
          if (v32 == -1 || v33 > *(_QWORD *)&a1[*v3])
            goto LABEL_119;
          v34 = *(char *)(*(_QWORD *)&a1[*v5] + v32);
          *(_QWORD *)&a1[v31] = v33;
          if (v34 < 0)
          {
            v24 = v30++ > 8;
            if (!v24)
              continue;
          }
          goto LABEL_123;
        }
      case 4:
        if (v16 == 2)
          goto LABEL_122;
        goto LABEL_126;
      case 5:
      case 20:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
          goto LABEL_126;
        goto LABEL_110;
      case 6:
      case 8:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOAddressIsValid(a1))
          goto LABEL_126;
        goto LABEL_110;
      case 7:
        if (v16 == 2)
          goto LABEL_122;
        goto LABEL_126;
      case 9:
      case 12:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
          goto LABEL_126;
        goto LABEL_110;
      case 10:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOBusinessIsValid(a1))
          goto LABEL_126;
        goto LABEL_110;
      case 11:
        if ((v8 & 7) != 0)
          goto LABEL_126;
        v35 = 0;
        while (1)
        {
          v36 = *v2;
          v37 = *(_QWORD *)&a1[v36];
          v38 = v37 + 1;
          if (v37 == -1 || v38 > *(_QWORD *)&a1[*v3])
            goto LABEL_119;
          v39 = *(char *)(*(_QWORD *)&a1[*v5] + v37);
          *(_QWORD *)&a1[v36] = v38;
          if (v39 < 0)
          {
            v24 = v35++ > 8;
            if (!v24)
              continue;
          }
          goto LABEL_123;
        }
      case 13:
        if ((v8 & 7) != 0)
          goto LABEL_126;
        v40 = 0;
        while (1)
        {
          v41 = *v2;
          v42 = *(_QWORD *)&a1[v41];
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)&a1[*v3])
            goto LABEL_119;
          v44 = *(char *)(*(_QWORD *)&a1[*v5] + v42);
          *(_QWORD *)&a1[v41] = v43;
          if (v44 < 0)
          {
            v24 = v40++ > 8;
            if (!v24)
              continue;
          }
          goto LABEL_123;
        }
      case 14:
        if ((v8 & 7) != 0)
          goto LABEL_126;
        v45 = 0;
        break;
      case 15:
        if (v16 == 2)
          goto LABEL_122;
        goto LABEL_126;
      case 16:
        if (v16 == 2)
          goto LABEL_122;
        goto LABEL_126;
      case 17:
        if (v16 != 1)
          goto LABEL_126;
        v50 = *v2;
        v51 = *(_QWORD *)&a1[v50];
        if (v51 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_120;
        v52 = v51 + 8;
        if (v52 > *(_QWORD *)&a1[*v3])
          goto LABEL_120;
        *(_QWORD *)&a1[v50] = v52;
        goto LABEL_123;
      case 18:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOStructuredAddressIsValid(a1))
          goto LABEL_126;
        goto LABEL_110;
      case 19:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOTimezoneIsValid(a1))
          goto LABEL_126;
        goto LABEL_110;
      case 21:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEORoadAccessPointIsValid(a1))
          goto LABEL_126;
LABEL_110:
        PBReaderRecallMark();
        goto LABEL_123;
      default:
        goto LABEL_122;
    }
    while (1)
    {
      v46 = *v2;
      v47 = *(_QWORD *)&a1[v46];
      v48 = v47 + 1;
      if (v47 == -1 || v48 > *(_QWORD *)&a1[*v3])
        break;
      v49 = *(char *)(*(_QWORD *)&a1[*v5] + v47);
      *(_QWORD *)&a1[v46] = v48;
      if (v49 < 0)
      {
        v24 = v45++ > 8;
        if (!v24)
          continue;
      }
      goto LABEL_123;
    }
LABEL_119:
    v14 = *v4;
LABEL_120:
    a1[v14] = 1;
    goto LABEL_123;
  }
LABEL_124:
  v58 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v58;
}

void sub_18944EF80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPlaceIsDirty(uint64_t a1)
{
  int v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 176));
  v2 = *(_DWORD *)(a1 + 200);
  if ((v2 & 0x100C000) != 0)
    return 1;
  if ((v2 & 0x200) != 0)
  {
    if (GEOAddressIsDirty(*(_QWORD *)(a1 + 32)))
      return 1;
    v2 = *(_DWORD *)(a1 + 200);
  }
  if ((v2 & 0x40000) != 0)
    return 1;
  if ((v2 & 0x10000) == 0)
    goto LABEL_11;
  if (GEOAddressIsDirty(*(_QWORD *)(a1 + 104)))
    return 1;
  v2 = *(_DWORD *)(a1 + 200);
LABEL_11:
  if ((v2 & 0xFA3C00) != 0)
    return 1;
  if ((v2 & 0x400) == 0)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v5 = *(id *)(a1 + 48);
  v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v6 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v5);
        if ((GEOBusinessIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v8 + 1) + 8 * i)) & 1) != 0)
        {
          v3 = 1;
          goto LABEL_24;
        }
      }
      v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_24:

  return v3;
}

os_unfair_lock_s *GEOPlaceIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPlaceIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 44);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_18944FE68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189450B8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189450F58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceDataAmendmentReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            v20 = 0;
LABEL_34:
          *(_BYTE *)(a1 + 16) = v20 != 0;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_189451938(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceDataAmendmentReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPlaceDataAmendmentReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189451998(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189451E4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const float *v13;
  uint32x4_t v14;
  int8x16_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  unsigned __int8 v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  BOOL v34;
  int v35;
  unint64_t v37;
  BOOL v38;
  int *v39;
  int v40;
  int v41;
  BOOL v42;
  GEOAddress *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  void *v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  id v75;
  void *v76;
  int v77;
  char v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  void *v84;
  int v86;
  char v87;
  char v88;
  char v89;
  BOOL v90;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 124);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 120));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (const float *)(a1 + 144);
  v14 = (uint32x4_t)vld1q_dup_f32(v13);
  v15.i64[0] = 0x100000001;
  v15.i64[1] = 0x100000001;
  v16 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDD420), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDD430), v15)), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CDD440), v15)));
  while (2)
  {
    v17 = 1;
    v18 = 1;
    v19 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v16;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v18 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v20 = v16 > 7;
        v21 = v20 & ~(_BYTE)v12 | v10;
        v22 = v20 | v12;
        v87 = v21;
        v88 = v22 | v21;
        if (((v22 | v9) & 1) != 0)
          v23 = 0;
        else
          v23 = a3;
        v89 = (v23 == 0) | v22;
        v90 = v22;
        v24 = (int *)MEMORY[0x1E0D82BF0];
        v25 = (int *)MEMORY[0x1E0D82BC8];
        v26 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v16;
LABEL_7:
        v17 = v10;
LABEL_8:
        v18 = v11;
        v19 = v12;
LABEL_10:
        ++v8;
        v10 = v17;
        v11 = v18;
        v12 = v19;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v24) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v25))
      goto LABEL_166;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    while (1)
    {
      v30 = *v24;
      v31 = *(_QWORD *)(v3 + v30);
      v32 = v31 + 1;
      if (v31 == -1 || v32 > *(_QWORD *)(v3 + *v7))
        break;
      v33 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v31);
      *(_QWORD *)(v3 + v30) = v32;
      v29 |= (unint64_t)(v33 & 0x7F) << v27;
      if ((v33 & 0x80) == 0)
        goto LABEL_25;
      v27 += 7;
      v34 = v28++ >= 9;
      if (v34)
      {
        v29 = 0;
        v35 = *(unsigned __int8 *)(v3 + *v25);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v25) = 1;
LABEL_25:
    v35 = *(unsigned __int8 *)(v3 + *v25);
    if (*(_BYTE *)(v3 + *v25))
      v29 = 0;
LABEL_27:
    if (v35 || (v29 & 7) == 4)
    {
LABEL_166:
      v86 = 1;
      goto LABEL_167;
    }
    v37 = v29 >> 3;
    v38 = v90;
    if ((v89 & 1) == 0)
    {
      v39 = v23;
      do
      {
        v41 = *v39++;
        v40 = v41;
        v38 = v41 != 0;
        if (v41)
          v42 = v40 == (_DWORD)v37;
        else
          v42 = 1;
      }
      while (!v42);
    }
    switch((int)v37)
    {
      case 'd':
        if (!v38)
          goto LABEL_134;
        if ((*(_BYTE *)(a1 + 145) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_193;
          v80 = (int)(*(_DWORD *)(a1 + 144) << 17) >> 31;
          goto LABEL_163;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_193;
        v43 = objc_alloc_init(GEOAddress);
        if (!GEOAddressReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1))
          goto LABEL_192;
        PBReaderRecallMark();
        v44 = 104;
        goto LABEL_92;
      case 'e':
        if (!v38)
          goto LABEL_134;
        if ((*(_BYTE *)(a1 + 145) & 8) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 80;
LABEL_77:
          v60 = *(void **)(a1 + v46);
          *(_QWORD *)(a1 + v46) = v45;
          goto LABEL_93;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_193;
        v80 = (int)(*(_DWORD *)(a1 + 144) << 20) >> 31;
        goto LABEL_163;
      case 'f':
        if (!v38 || (*(_BYTE *)(a1 + 145) & 0x80) != 0)
          goto LABEL_126;
        PBReaderReadString();
        v43 = (GEOAddress *)objc_claimAutoreleasedReturnValue();
        if (v43)
          -[GEOPlaceResult _addNoFlagsUnmatchedString:](a1, v43);
        goto LABEL_125;
      case 'g':
        if (!v38 || (*(_BYTE *)(a1 + 145) & 1) != 0)
          goto LABEL_126;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_193;
        v43 = objc_alloc_init(GEONamedFeature);
        if (!GEONamedFeatureReadAllFrom(v43, (void *)v3))
          goto LABEL_192;
        PBReaderRecallMark();
        -[GEOPlaceResult _addNoFlagsNamedFeature:](a1, v43);
        goto LABEL_125;
      case 'h':
        if (!v38)
          goto LABEL_134;
        if ((*(_BYTE *)(a1 + 145) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_193;
          v80 = (int)(*(_DWORD *)(a1 + 144) << 19) >> 31;
LABEL_163:
          v8 += v80;
        }
        else
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_193;
          v43 = objc_alloc_init(GEOPlaceSearchRequest);
          if (!GEOPlaceSearchRequestReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1))
            goto LABEL_192;
          PBReaderRecallMark();
          v44 = 88;
LABEL_92:
          v60 = *(void **)(a1 + v44);
          *(_QWORD *)(a1 + v44) = v43;
LABEL_93:

          --v8;
        }
        goto LABEL_164;
      case 'i':
        if (!v38 || (*(_BYTE *)(a1 + 144) & 0x80) != 0)
          goto LABEL_126;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_193;
        v43 = objc_alloc_init(GEOMatchedToken);
        if (!GEOMatchedTokenReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1))
          goto LABEL_192;
        PBReaderRecallMark();
        -[GEOPlaceResult _addNoFlagsMatchedToken:](a1, v43);
        goto LABEL_125;
      case 'j':
        if ((v9 & 1) == 0)
          goto LABEL_134;
        v61 = 0;
        v62 = 0;
        v63 = 0;
        *(_DWORD *)(a1 + 144) |= 1u;
        while (2)
        {
          v64 = *v24;
          v65 = *(_QWORD *)(v3 + v64);
          v66 = v65 + 1;
          if (v65 == -1 || v66 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v25) = 1;
          }
          else
          {
            v67 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v65);
            *(_QWORD *)(v3 + v64) = v66;
            v63 |= (unint64_t)(v67 & 0x7F) << v61;
            if (v67 < 0)
            {
              v61 += 7;
              v34 = v62++ >= 9;
              if (v34)
              {
                v63 = 0;
                goto LABEL_151;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v25))
          v63 = 0;
LABEL_151:
        *(_QWORD *)(a1 + 40) = v63;
        goto LABEL_165;
      case 'k':
        if ((v9 & 1) != 0)
        {
          v68 = 0;
          v69 = 0;
          v49 = 0;
          *(_DWORD *)(a1 + 144) |= 2u;
          while (1)
          {
            v70 = *v24;
            v71 = *(_QWORD *)(v3 + v70);
            v72 = v71 + 1;
            if (v71 == -1 || v72 > *(_QWORD *)(v3 + *v7))
              break;
            v73 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v71);
            *(_QWORD *)(v3 + v70) = v72;
            v49 |= (unint64_t)(v73 & 0x7F) << v68;
            if ((v73 & 0x80) == 0)
              goto LABEL_153;
            v68 += 7;
            v34 = v69++ >= 9;
            if (v34)
            {
              LODWORD(v49) = 0;
              goto LABEL_155;
            }
          }
          *(_BYTE *)(v3 + *v25) = 1;
LABEL_153:
          if (*(_BYTE *)(v3 + *v25))
            LODWORD(v49) = 0;
LABEL_155:
          v79 = 132;
LABEL_156:
          *(_DWORD *)(a1 + v79) = v49;
        }
        else
        {
LABEL_134:
          v78 = PBReaderSkipValueWithTag();
          v26 = (int *)MEMORY[0x1E0D82BB8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v25 = (int *)MEMORY[0x1E0D82BC8];
          if ((v78 & 1) == 0)
          {
LABEL_191:
            v86 = 0;
            goto LABEL_167;
          }
        }
        goto LABEL_165;
      case 'l':
        if (!v38 || (*(_BYTE *)(a1 + 144) & 0x40) != 0)
          goto LABEL_126;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_193;
        v43 = objc_alloc_init(GEOLocalizedDisambiguationLabel);
        if (!GEOLocalizedDisambiguationLabelReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1))
          goto LABEL_192;
        PBReaderRecallMark();
        -[GEOPlaceResult _addNoFlagsDisambiguationLabel:](a1, v43);
        goto LABEL_125;
      case 'm':
        if (!v38 || (*(_BYTE *)(a1 + 145) & 2) != 0)
        {
LABEL_126:
          v74 = PBReaderSkipValueWithTag();
          v25 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v26 = (int *)MEMORY[0x1E0D82BB8];
          if ((v74 & 1) == 0)
            goto LABEL_191;
          goto LABEL_165;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_193;
        v43 = objc_alloc_init(GEONamedField);
        if (GEONamedFieldReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          -[GEOPlaceResult _addNoFlagsNamedField:](a1, v43);
LABEL_125:

LABEL_164:
          v25 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v26 = (int *)MEMORY[0x1E0D82BB8];
LABEL_165:
          if (!(v88 & 1 | (v8 != 0)))
            goto LABEL_166;
          continue;
        }
LABEL_192:

LABEL_193:
        v86 = 0;
        v25 = (int *)MEMORY[0x1E0D82BC8];
LABEL_167:
        if ((v87 & 1) != 0)
LABEL_168:
          *(_DWORD *)(a1 + 144) |= 0x10u;
        if (v90 || (v86 & 1) == 0)
        {
          *(_DWORD *)(a1 + 144) |= 0x400u;
          *(_DWORD *)(a1 + 144) |= 0x20u;
          *(_DWORD *)(a1 + 144) |= 0x2000u;
          *(_DWORD *)(a1 + 144) |= 0x4000u;
          *(_DWORD *)(a1 + 144) |= 0x800u;
          *(_DWORD *)(a1 + 144) |= 0x8000u;
          *(_DWORD *)(a1 + 144) |= 0x100u;
          *(_DWORD *)(a1 + 144) |= 0x1000u;
          *(_DWORD *)(a1 + 144) |= 0x80u;
          *(_DWORD *)(a1 + 144) |= 0x40u;
          *(_DWORD *)(a1 + 144) |= 0x200u;
        }
        else if (v23)
        {
          while (2)
          {
            v82 = *v23++;
            v81 = v82;
            switch(v82)
            {
              case 'd':
                v83 = 0x4000;
                goto LABEL_184;
              case 'e':
                v83 = 2048;
                goto LABEL_184;
              case 'f':
                v83 = 0x8000;
                goto LABEL_184;
              case 'g':
                v83 = 256;
                goto LABEL_184;
              case 'h':
                v83 = 4096;
                goto LABEL_184;
              case 'i':
                v83 = 128;
                goto LABEL_184;
              case 'j':
              case 'k':
                continue;
              case 'l':
                v83 = 64;
                goto LABEL_184;
              case 'm':
                v83 = 512;
LABEL_184:
                *(_DWORD *)(a1 + 144) |= v83;
                continue;
              default:
                v83 = 1024;
                switch(v81)
                {
                  case 0:
                    goto LABEL_185;
                  case 1:
                    goto LABEL_184;
                  case 3:
                    v83 = 32;
                    goto LABEL_184;
                  case 4:
                    v83 = 0x2000;
                    goto LABEL_184;
                  default:
                    continue;
                }
                goto LABEL_185;
            }
          }
        }
LABEL_185:
        if (v86)
          v3 = *(_BYTE *)(v3 + *v25) == 0;
        else
          v3 = 0;
        if (v90)
        {
          v84 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        switch((int)v37)
        {
          case 1:
            if (!v38)
              goto LABEL_134;
            if ((*(_BYTE *)(a1 + 145) & 4) != 0)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_193;
              v80 = (int)(*(_DWORD *)(a1 + 144) << 21) >> 31;
              goto LABEL_163;
            }
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_193;
            v43 = objc_alloc_init(GEOPlace);
            if (!GEOPlaceReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1))
              goto LABEL_192;
            PBReaderRecallMark();
            v44 = 72;
            break;
          case 3:
            if (!v38 || (*(_BYTE *)(a1 + 144) & 0x20) != 0)
              goto LABEL_126;
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_193;
            v43 = objc_alloc_init(GEOPlace);
            if (!GEOPlaceReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1))
              goto LABEL_192;
            PBReaderRecallMark();
            -[GEOPlaceResult _addNoFlagsAdditionalPlace:](a1, v43);
            goto LABEL_125;
          case 4:
            if (!v38)
              goto LABEL_134;
            if ((*(_BYTE *)(a1 + 145) & 0x20) == 0)
            {
              PBReaderReadString();
              v45 = objc_claimAutoreleasedReturnValue();
              v46 = 96;
              goto LABEL_77;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_193;
            v80 = (int)(*(_DWORD *)(a1 + 144) << 18) >> 31;
            goto LABEL_163;
          case 5:
            if ((v9 & 1) == 0)
              goto LABEL_134;
            v47 = 0;
            v48 = 0;
            v49 = 0;
            *(_DWORD *)(a1 + 144) |= 8u;
            while (2)
            {
              v50 = *v24;
              v51 = *(_QWORD *)(v3 + v50);
              v52 = v51 + 1;
              if (v51 == -1 || v52 > *(_QWORD *)(v3 + *v7))
              {
                *(_BYTE *)(v3 + *v25) = 1;
              }
              else
              {
                v53 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v51);
                *(_QWORD *)(v3 + v50) = v52;
                v49 |= (unint64_t)(v53 & 0x7F) << v47;
                if (v53 < 0)
                {
                  v47 += 7;
                  v34 = v48++ >= 9;
                  if (v34)
                  {
                    LODWORD(v49) = 0;
                    goto LABEL_139;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v25))
              LODWORD(v49) = 0;
LABEL_139:
            v79 = 140;
            goto LABEL_156;
          case 6:
            if ((v9 & 1) == 0)
              goto LABEL_134;
            v54 = 0;
            v55 = 0;
            v49 = 0;
            *(_DWORD *)(a1 + 144) |= 4u;
            while (2)
            {
              v56 = *v24;
              v57 = *(_QWORD *)(v3 + v56);
              v58 = v57 + 1;
              if (v57 == -1 || v58 > *(_QWORD *)(v3 + *v7))
              {
                *(_BYTE *)(v3 + *v25) = 1;
              }
              else
              {
                v59 = *(_BYTE *)(*(_QWORD *)(v3 + *v26) + v57);
                *(_QWORD *)(v3 + v56) = v58;
                v49 |= (unint64_t)(v59 & 0x7F) << v54;
                if (v59 < 0)
                {
                  v54 += 7;
                  v34 = v55++ >= 9;
                  if (v34)
                  {
                    LODWORD(v49) = 0;
                    goto LABEL_143;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v25))
              LODWORD(v49) = 0;
LABEL_143:
            v79 = 136;
            goto LABEL_156;
          default:
            if ((v87 & 1) == 0 || (*(_BYTE *)(a1 + 144) & 0x10) != 0)
              goto LABEL_134;
            if (!*(_QWORD *)(a1 + 16))
            {
              v75 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v76 = *(void **)(a1 + 16);
              *(_QWORD *)(a1 + 16) = v75;

            }
            v77 = PBUnknownFieldAdd();
            v25 = (int *)MEMORY[0x1E0D82BC8];
            v7 = (int *)MEMORY[0x1E0D82BD8];
            v26 = (int *)MEMORY[0x1E0D82BB8];
            if (v77)
              goto LABEL_165;
            v86 = 0;
            goto LABEL_168;
        }
        goto LABEL_92;
    }
  }
}

void sub_189452CE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189453020(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189453268(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894533B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894534F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189453834(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189453B70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189453CB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894541F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189454534(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189455F7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPlaceResultCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  _BYTE v48[128];
  _BYTE v49[128];
  _BYTE v50[128];
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[9], "readAll:", 1);
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v2 = a1[3];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v44;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v44 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
    }
    while (v4);
  }

  objc_msgSend(a1[13], "readAll:", 1);
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v7 = a1[7];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v39, v50, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v40;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v40 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v39 + 1) + 8 * v11++), "readAll:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v39, v50, 16);
    }
    while (v9);
  }

  objc_msgSend(a1[11], "readAll:", 1);
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v12 = a1[6];
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v35, v49, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v36;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v36 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * v16++), "readAll:", 1);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v35, v49, 16);
    }
    while (v14);
  }

  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v17 = a1[4];
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v31, v48, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v32;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v32 != v20)
          objc_enumerationMutation(v17);
        -[GEOLocalizedDisambiguationLabel readAll:](*(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * v21++), 1);
      }
      while (v19 != v21);
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v31, v48, 16);
    }
    while (v19);
  }

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v22 = a1[8];
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v27, v47, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v28;
    do
    {
      v26 = 0;
      do
      {
        if (*(_QWORD *)v28 != v25)
          objc_enumerationMutation(v22);
        -[GEONamedField readAll:](*(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * v26++), 1);
      }
      while (v24 != v26);
      v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v27, v47, 16);
    }
    while (v24);
  }

}

unint64_t GEOPlaceResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 124))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPlaceResultReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 120) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 124) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPlaceResultReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPlaceResultReadAllFrom_initialTag;
  Specified = GEOPlaceResultReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPlaceResultCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  return Specified;
}

void sub_1894564A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceResultReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPlaceResultReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189456504(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPlaceResultIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  int v46;
  int v47;
  int v49;
  BOOL v50;
  uint64_t v51;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = 0;
LABEL_122:
    if (a1[*v4])
      v50 = 1;
    else
      v50 = v5 == 0;
    v51 = !v50;
    PBReaderRecallMark();
    return v51;
  }
  v5 = 0;
  v6 = (int *)MEMORY[0x1E0D82BB8];
LABEL_3:
  if (a1[*v4])
    goto LABEL_122;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v10 = *v2;
    v11 = *(_QWORD *)&a1[v10];
    v12 = v11 + 1;
    if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
      break;
    v13 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v11);
    *(_QWORD *)&a1[v10] = v12;
    v9 |= (unint64_t)(v13 & 0x7F) << v7;
    if ((v13 & 0x80) == 0)
      goto LABEL_12;
    v7 += 7;
    v14 = v8++ >= 9;
    if (v14)
    {
      v9 = 0;
      v15 = a1[*v4];
      goto LABEL_14;
    }
  }
  a1[*v4] = 1;
LABEL_12:
  v15 = a1[*v4];
  if (a1[*v4])
    v9 = 0;
LABEL_14:
  v16 = v9 & 7;
  if (v15 || v16 == 4)
    goto LABEL_122;
  switch((v9 >> 3))
  {
    case 'd':
      if (v16 != 2 || !PBReaderPlaceMark() || !GEOAddressIsValid(a1))
        goto LABEL_130;
      goto LABEL_115;
    case 'e':
      if (v16 == 2)
        goto LABEL_118;
      goto LABEL_130;
    case 'f':
      if (v16 != 2)
        goto LABEL_130;
LABEL_118:
      if ((PBReaderSkipValueWithTag() & 1) != 0)
        goto LABEL_119;
      goto LABEL_130;
    case 'g':
      if (v16 != 2 || !PBReaderPlaceMark() || !GEONamedFeatureIsValid(a1))
        goto LABEL_130;
      goto LABEL_115;
    case 'h':
      if (v16 != 2 || !PBReaderPlaceMark() || !GEOPlaceSearchRequestIsValid(a1))
        goto LABEL_130;
      goto LABEL_115;
    case 'i':
      if (v16 != 2 || !PBReaderPlaceMark() || !GEOMatchedTokenIsValid(a1))
        goto LABEL_130;
      goto LABEL_115;
    case 'j':
      if ((v9 & 7) != 0)
        goto LABEL_130;
      v29 = 0;
      while (1)
      {
        v30 = *v2;
        v31 = *(_QWORD *)&a1[v30];
        v32 = v31 + 1;
        if (v31 == -1 || v32 > *(_QWORD *)&a1[*v3])
          goto LABEL_83;
        v33 = *(char *)(*(_QWORD *)&a1[*v6] + v31);
        *(_QWORD *)&a1[v30] = v32;
        if (v33 < 0)
        {
          v23 = v29++ > 8;
          if (!v23)
            continue;
        }
        goto LABEL_119;
      }
    case 'k':
      if ((v9 & 7) != 0)
        goto LABEL_130;
      v34 = 0;
      while (1)
      {
        v35 = *v2;
        v36 = *(_QWORD *)&a1[v35];
        v37 = v36 + 1;
        if (v36 == -1 || v37 > *(_QWORD *)&a1[*v3])
          goto LABEL_83;
        v38 = *(char *)(*(_QWORD *)&a1[*v6] + v36);
        *(_QWORD *)&a1[v35] = v37;
        if (v38 < 0)
        {
          v23 = v34++ > 8;
          if (!v23)
            continue;
        }
        goto LABEL_119;
      }
    case 'l':
      if (v16 != 2 || !PBReaderPlaceMark())
        goto LABEL_130;
      objc_msgSend(a1, "position", 0, 0);
      objc_msgSend(a1, "length");
      break;
    case 'm':
      if (v16 == 2 && PBReaderPlaceMark() && GEONamedFieldIsValid(a1))
        goto LABEL_115;
      goto LABEL_130;
    default:
      switch((v9 >> 3))
      {
        case 1u:
          if (v5 || v16 != 2 || !PBReaderPlaceMark() || !GEOPlaceIsValid(a1))
            goto LABEL_130;
          PBReaderRecallMark();
          v5 = 1;
          goto LABEL_119;
        case 3u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPlaceIsValid(a1))
            goto LABEL_130;
          goto LABEL_115;
        case 4u:
          if (v16 == 2)
            goto LABEL_118;
          goto LABEL_130;
        case 5u:
          if ((v9 & 7) != 0)
            goto LABEL_130;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              goto LABEL_83;
            v22 = *(char *)(*(_QWORD *)&a1[*v6] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0)
            {
              v23 = v18++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_119;
          }
        case 6u:
          if ((v9 & 7) != 0)
            goto LABEL_130;
          v24 = 0;
          break;
        default:
          goto LABEL_118;
      }
      while (1)
      {
        v25 = *v2;
        v26 = *(_QWORD *)&a1[v25];
        v27 = v26 + 1;
        if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
          break;
        v28 = *(char *)(*(_QWORD *)&a1[*v6] + v26);
        *(_QWORD *)&a1[v25] = v27;
        if (v28 < 0)
        {
          v23 = v24++ > 8;
          if (!v23)
            continue;
        }
        goto LABEL_119;
      }
LABEL_83:
      a1[*v4] = 1;
      goto LABEL_119;
  }
  do
  {
LABEL_87:
    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
      goto LABEL_116;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    while (1)
    {
      v42 = *v2;
      v43 = *(_QWORD *)&a1[v42];
      v44 = v43 + 1;
      if (v43 == -1 || v44 > *(_QWORD *)&a1[*v3])
        break;
      v45 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v43);
      *(_QWORD *)&a1[v42] = v44;
      v41 |= (unint64_t)(v45 & 0x7F) << v39;
      if ((v45 & 0x80) == 0)
        goto LABEL_97;
      v39 += 7;
      v14 = v40++ >= 9;
      if (v14)
      {
        v41 = 0;
        v46 = a1[*v4];
        goto LABEL_99;
      }
    }
    a1[*v4] = 1;
LABEL_97:
    v46 = a1[*v4];
    if (a1[*v4])
      v41 = 0;
LABEL_99:
    v47 = v41 & 7;
    if (v46 || v47 == 4)
    {
LABEL_116:
      v49 = a1[*v4];
      PBReaderRecallMark();
      if (v49)
        goto LABEL_130;
LABEL_115:
      PBReaderRecallMark();
LABEL_119:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_122;
      goto LABEL_3;
    }
    if ((v41 >> 3) == 2)
    {
      if (v47 != 2)
        break;
LABEL_108:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        break;
      goto LABEL_87;
    }
    if ((v41 >> 3) == 1)
    {
      if (v47 != 2)
        break;
      goto LABEL_108;
    }
  }
  while (PBReaderSkipValueWithTag());
  PBReaderRecallMark();
LABEL_130:
  PBReaderRecallMark();
  return 0;
}

BOOL GEOPlaceSearchRequestIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  char v117;
  unsigned int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  int v124;
  int v125;
  BOOL v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  int v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  int v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  int v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  int v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  int v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  int v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  int v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  int v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  int v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  int v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  int v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  int v246;
  int v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  int v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  int v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  int v262;
  _BOOL8 v263;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 2u:
          if (v16 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_498;
            while (1)
            {
              v21 = *v2;
              v22 = *(_QWORD *)&a1[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&a1[*v3])
                goto LABEL_455;
              v24 = *(char *)(*(_QWORD *)&a1[*v5] + v22);
              *(_QWORD *)&a1[v21] = v23;
              if (v24 < 0)
              {
                v25 = v16++;
                if (v25 <= 8)
                  continue;
              }
              goto LABEL_461;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_498;
LABEL_466:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v248 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v249 = *v2;
              v250 = *(_QWORD *)&a1[v249];
              v251 = v250 + 1;
              if (v250 == -1 || v251 > *(_QWORD *)&a1[*v3])
                break;
              v252 = *(char *)(*(_QWORD *)&a1[*v5] + v250);
              *(_QWORD *)&a1[v249] = v251;
              if (v252 < 0)
              {
                v13 = v248++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_466;
            }
            a1[*v4] = 1;
          }
          goto LABEL_438;
        case 3u:
        case 0x6Cu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOAddressIsValid(a1))
            goto LABEL_498;
          goto LABEL_438;
        case 4u:
          if (v16 != 2 || !PBReaderPlaceMark() || (GEOLocationIsValid(a1) & 1) == 0)
            goto LABEL_498;
          goto LABEL_438;
        case 5u:
          if (v16 == 2)
            goto LABEL_460;
          goto LABEL_498;
        case 6u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
            goto LABEL_498;
          goto LABEL_438;
        case 7u:
          if (v16 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_498;
            while (1)
            {
              v26 = *v2;
              v27 = *(_QWORD *)&a1[v26];
              v28 = v27 + 1;
              if (v27 == -1 || v28 > *(_QWORD *)&a1[*v3])
                goto LABEL_455;
              v29 = *(char *)(*(_QWORD *)&a1[*v5] + v27);
              *(_QWORD *)&a1[v26] = v28;
              if (v29 < 0)
              {
                v30 = v16++;
                if (v30 <= 8)
                  continue;
              }
              goto LABEL_461;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_498;
LABEL_476:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v253 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v254 = *v2;
              v255 = *(_QWORD *)&a1[v254];
              v256 = v255 + 1;
              if (v255 == -1 || v256 > *(_QWORD *)&a1[*v3])
                break;
              v257 = *(char *)(*(_QWORD *)&a1[*v5] + v255);
              *(_QWORD *)&a1[v254] = v256;
              if (v257 < 0)
              {
                v13 = v253++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_476;
            }
            a1[*v4] = 1;
          }
          goto LABEL_438;
        case 8u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v31 = 0;
          while (1)
          {
            v32 = *v2;
            v33 = *(_QWORD *)&a1[v32];
            v34 = v33 + 1;
            if (v33 == -1 || v34 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v35 = *(char *)(*(_QWORD *)&a1[*v5] + v33);
            *(_QWORD *)&a1[v32] = v34;
            if (v35 < 0)
            {
              v36 = v31++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 9u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v37 = 0;
          while (1)
          {
            v38 = *v2;
            v39 = *(_QWORD *)&a1[v38];
            v40 = v39 + 1;
            if (v39 == -1 || v40 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
            *(_QWORD *)&a1[v38] = v40;
            if (v41 < 0)
            {
              v36 = v37++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0xCu:
          if (v16 != 2 || !PBReaderPlaceMark() || (GEOSessionIDIsValid(a1) & 1) == 0)
            goto LABEL_498;
          goto LABEL_438;
        case 0xDu:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v42 = 0;
          while (1)
          {
            v43 = *v2;
            v44 = *(_QWORD *)&a1[v43];
            v45 = v44 + 1;
            if (v44 == -1 || v45 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v46 = *(char *)(*(_QWORD *)&a1[*v5] + v44);
            *(_QWORD *)&a1[v43] = v45;
            if (v46 < 0)
            {
              v36 = v42++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0xEu:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v47 = 0;
          while (1)
          {
            v48 = *v2;
            v49 = *(_QWORD *)&a1[v48];
            v50 = v49 + 1;
            if (v49 == -1 || v50 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v51 = *(char *)(*(_QWORD *)&a1[*v5] + v49);
            *(_QWORD *)&a1[v48] = v50;
            if (v51 < 0)
            {
              v36 = v47++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0xFu:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v52 = 0;
          while (1)
          {
            v53 = *v2;
            v54 = *(_QWORD *)&a1[v53];
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v56 = *(char *)(*(_QWORD *)&a1[*v5] + v54);
            *(_QWORD *)&a1[v53] = v55;
            if (v56 < 0)
            {
              v36 = v52++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x10u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v57 = 0;
          while (1)
          {
            v58 = *v2;
            v59 = *(_QWORD *)&a1[v58];
            v60 = v59 + 1;
            if (v59 == -1 || v60 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v61 = *(char *)(*(_QWORD *)&a1[*v5] + v59);
            *(_QWORD *)&a1[v58] = v60;
            if (v61 < 0)
            {
              v36 = v57++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x11u:
          if (v16 == 2)
            goto LABEL_460;
          goto LABEL_498;
        case 0x12u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v62 = 0;
          while (1)
          {
            v63 = *v2;
            v64 = *(_QWORD *)&a1[v63];
            v65 = v64 + 1;
            if (v64 == -1 || v65 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v66 = *(char *)(*(_QWORD *)&a1[*v5] + v64);
            *(_QWORD *)&a1[v63] = v65;
            if (v66 < 0)
            {
              v36 = v62++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x13u:
        case 0x24u:
        case 0x25u:
          if (v16 != 1)
            goto LABEL_498;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_456;
          v20 = v19 + 8;
          if (v20 > *(_QWORD *)&a1[*v3])
            goto LABEL_456;
          *(_QWORD *)&a1[v18] = v20;
          goto LABEL_461;
        case 0x14u:
          if (v16 == 2)
            goto LABEL_460;
          goto LABEL_498;
        case 0x15u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v67 = 0;
          while (1)
          {
            v68 = *v2;
            v69 = *(_QWORD *)&a1[v68];
            v70 = v69 + 1;
            if (v69 == -1 || v70 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v71 = *(char *)(*(_QWORD *)&a1[*v5] + v69);
            *(_QWORD *)&a1[v68] = v70;
            if (v71 < 0)
            {
              v36 = v67++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x16u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOBusinessOptionsIsValid(a1))
            goto LABEL_498;
          goto LABEL_438;
        case 0x17u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v72 = 0;
          while (1)
          {
            v73 = *v2;
            v74 = *(_QWORD *)&a1[v73];
            v75 = v74 + 1;
            if (v74 == -1 || v75 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v76 = *(char *)(*(_QWORD *)&a1[*v5] + v74);
            *(_QWORD *)&a1[v73] = v75;
            if (v76 < 0)
            {
              v36 = v72++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x18u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v77 = 0;
          while (1)
          {
            v78 = *v2;
            v79 = *(_QWORD *)&a1[v78];
            v80 = v79 + 1;
            if (v79 == -1 || v80 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v81 = *(char *)(*(_QWORD *)&a1[*v5] + v79);
            *(_QWORD *)&a1[v78] = v80;
            if (v81 < 0)
            {
              v36 = v77++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x19u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v82 = 0;
          while (1)
          {
            v83 = *v2;
            v84 = *(_QWORD *)&a1[v83];
            v85 = v84 + 1;
            if (v84 == -1 || v85 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v86 = *(char *)(*(_QWORD *)&a1[*v5] + v84);
            *(_QWORD *)&a1[v83] = v85;
            if (v86 < 0)
            {
              v36 = v82++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x1Bu:
          if (v16 == 2)
            goto LABEL_460;
          goto LABEL_498;
        case 0x1Cu:
          if (v16 == 2)
            goto LABEL_460;
          goto LABEL_498;
        case 0x1Du:
        case 0x72u:
        case 0x78u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_498;
          goto LABEL_438;
        case 0x1Eu:
          if (v16 == 2)
            goto LABEL_460;
          goto LABEL_498;
        case 0x1Fu:
          if (v16 == 2)
            goto LABEL_460;
          goto LABEL_498;
        case 0x20u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v87 = 0;
          while (1)
          {
            v88 = *v2;
            v89 = *(_QWORD *)&a1[v88];
            v90 = v89 + 1;
            if (v89 == -1 || v90 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v91 = *(char *)(*(_QWORD *)&a1[*v5] + v89);
            *(_QWORD *)&a1[v88] = v90;
            if (v91 < 0)
            {
              v36 = v87++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x21u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v92 = 0;
          while (1)
          {
            v93 = *v2;
            v94 = *(_QWORD *)&a1[v93];
            v95 = v94 + 1;
            if (v94 == -1 || v95 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v96 = *(char *)(*(_QWORD *)&a1[*v5] + v94);
            *(_QWORD *)&a1[v93] = v95;
            if (v96 < 0)
            {
              v36 = v92++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x22u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v97 = 0;
          while (1)
          {
            v98 = *v2;
            v99 = *(_QWORD *)&a1[v98];
            v100 = v99 + 1;
            if (v99 == -1 || v100 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v101 = *(char *)(*(_QWORD *)&a1[*v5] + v99);
            *(_QWORD *)&a1[v98] = v100;
            if (v101 < 0)
            {
              v36 = v97++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x27u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v102 = 0;
          while (1)
          {
            v103 = *v2;
            v104 = *(_QWORD *)&a1[v103];
            v105 = v104 + 1;
            if (v104 == -1 || v105 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v106 = *(char *)(*(_QWORD *)&a1[*v5] + v104);
            *(_QWORD *)&a1[v103] = v105;
            if (v106 < 0)
            {
              v36 = v102++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x2Au:
          if (v16 == 2)
            goto LABEL_460;
          goto LABEL_498;
        case 0x2Bu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOClientCapabilitiesIsValid(a1))
            goto LABEL_498;
          goto LABEL_438;
        case 0x2Cu:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v107 = 0;
          while (1)
          {
            v108 = *v2;
            v109 = *(_QWORD *)&a1[v108];
            v110 = v109 + 1;
            if (v109 == -1 || v110 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v111 = *(char *)(*(_QWORD *)&a1[*v5] + v109);
            *(_QWORD *)&a1[v108] = v110;
            if (v111 < 0)
            {
              v36 = v107++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x2Du:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v112 = 0;
          while (1)
          {
            v113 = *v2;
            v114 = *(_QWORD *)&a1[v113];
            v115 = v114 + 1;
            if (v114 == -1 || v115 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v116 = *(char *)(*(_QWORD *)&a1[*v5] + v114);
            *(_QWORD *)&a1[v113] = v115;
            if (v116 < 0)
            {
              v36 = v112++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x2Eu:
          if (v16 != 2 || !PBReaderPlaceMark())
            goto LABEL_498;
          objc_msgSend(a1, "position", 0, 0);
          objc_msgSend(a1, "length");
LABEL_224:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
          {
            v117 = 0;
            v118 = 0;
            v119 = 0;
            while (2)
            {
              v120 = *v2;
              v121 = *(_QWORD *)&a1[v120];
              v122 = v121 + 1;
              if (v121 == -1 || v122 > *(_QWORD *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                v123 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v121);
                *(_QWORD *)&a1[v120] = v122;
                v119 |= (unint64_t)(v123 & 0x7F) << v117;
                if (v123 < 0)
                {
                  v117 += 7;
                  v13 = v118++ >= 9;
                  if (v13)
                  {
                    v119 = 0;
                    v124 = a1[*v4];
                    goto LABEL_236;
                  }
                  continue;
                }
              }
              break;
            }
            v124 = a1[*v4];
            if (a1[*v4])
              v119 = 0;
LABEL_236:
            v125 = v119 & 7;
            if (v124)
              v126 = 1;
            else
              v126 = v125 == 4;
            if (!v126)
            {
              switch((v119 >> 3))
              {
                case 1u:
                  if ((v119 & 7) != 0)
                    goto LABEL_497;
                  v127 = 0;
                  while (1)
                  {
                    v128 = *v2;
                    v129 = *(_QWORD *)&a1[v128];
                    v130 = v129 + 1;
                    if (v129 == -1 || v130 > *(_QWORD *)&a1[*v3])
                      goto LABEL_279;
                    v131 = *(char *)(*(_QWORD *)&a1[*v5] + v129);
                    *(_QWORD *)&a1[v128] = v130;
                    if (v131 < 0)
                    {
                      v36 = v127++ > 8;
                      if (!v36)
                        continue;
                    }
                    goto LABEL_224;
                  }
                case 2u:
                  if ((v119 & 7) != 0)
                    goto LABEL_497;
                  v132 = 0;
                  while (1)
                  {
                    v133 = *v2;
                    v134 = *(_QWORD *)&a1[v133];
                    v135 = v134 + 1;
                    if (v134 == -1 || v135 > *(_QWORD *)&a1[*v3])
                      goto LABEL_279;
                    v136 = *(char *)(*(_QWORD *)&a1[*v5] + v134);
                    *(_QWORD *)&a1[v133] = v135;
                    if (v136 < 0)
                    {
                      v36 = v132++ > 8;
                      if (!v36)
                        continue;
                    }
                    goto LABEL_224;
                  }
                case 3u:
                  if (v125 == 2)
                    goto LABEL_269;
                  goto LABEL_497;
                case 4u:
                  if (v125 == 2)
                    goto LABEL_269;
                  goto LABEL_497;
                case 5u:
                  if ((v119 & 7) != 0)
                    goto LABEL_497;
                  v137 = 0;
                  while (1)
                  {
                    v138 = *v2;
                    v139 = *(_QWORD *)&a1[v138];
                    v140 = v139 + 1;
                    if (v139 == -1 || v140 > *(_QWORD *)&a1[*v3])
                      goto LABEL_279;
                    v141 = *(char *)(*(_QWORD *)&a1[*v5] + v139);
                    *(_QWORD *)&a1[v138] = v140;
                    if (v141 < 0)
                    {
                      v36 = v137++ > 8;
                      if (!v36)
                        continue;
                    }
                    goto LABEL_224;
                  }
                case 7u:
                  if ((v119 & 7) != 0)
                    goto LABEL_497;
                  v142 = 0;
                  do
                  {
                    v143 = *v2;
                    v144 = *(_QWORD *)&a1[v143];
                    v145 = v144 + 1;
                    if (v144 == -1 || v145 > *(_QWORD *)&a1[*v3])
                    {
LABEL_279:
                      a1[*v4] = 1;
                      goto LABEL_224;
                    }
                    v146 = *(char *)(*(_QWORD *)&a1[*v5] + v144);
                    *(_QWORD *)&a1[v143] = v145;
                    if ((v146 & 0x80000000) == 0)
                      break;
                    v36 = v142++ > 8;
                  }
                  while (!v36);
                  break;
                default:
LABEL_269:
                  if ((PBReaderSkipValueWithTag() & 1) != 0)
                    continue;
LABEL_497:
                  PBReaderRecallMark();
                  goto LABEL_498;
              }
              continue;
            }
            break;
          }
          v247 = a1[*v4];
          PBReaderRecallMark();
          if (!v247)
            goto LABEL_438;
          goto LABEL_498;
        case 0x2Fu:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v147 = 0;
          while (1)
          {
            v148 = *v2;
            v149 = *(_QWORD *)&a1[v148];
            v150 = v149 + 1;
            if (v149 == -1 || v150 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v151 = *(char *)(*(_QWORD *)&a1[*v5] + v149);
            *(_QWORD *)&a1[v148] = v150;
            if (v151 < 0)
            {
              v36 = v147++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x30u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v152 = 0;
          while (1)
          {
            v153 = *v2;
            v154 = *(_QWORD *)&a1[v153];
            v155 = v154 + 1;
            if (v154 == -1 || v155 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v156 = *(char *)(*(_QWORD *)&a1[*v5] + v154);
            *(_QWORD *)&a1[v153] = v155;
            if (v156 < 0)
            {
              v36 = v152++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x31u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v157 = 0;
          while (1)
          {
            v158 = *v2;
            v159 = *(_QWORD *)&a1[v158];
            v160 = v159 + 1;
            if (v159 == -1 || v160 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v161 = *(char *)(*(_QWORD *)&a1[*v5] + v159);
            *(_QWORD *)&a1[v158] = v160;
            if (v161 < 0)
            {
              v36 = v157++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x32u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v162 = 0;
          while (1)
          {
            v163 = *v2;
            v164 = *(_QWORD *)&a1[v163];
            v165 = v164 + 1;
            if (v164 == -1 || v165 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v166 = *(char *)(*(_QWORD *)&a1[*v5] + v164);
            *(_QWORD *)&a1[v163] = v165;
            if (v166 < 0)
            {
              v36 = v162++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x34u:
          if (v16 == 2)
            goto LABEL_460;
          goto LABEL_498;
        case 0x35u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v167 = 0;
          while (1)
          {
            v168 = *v2;
            v169 = *(_QWORD *)&a1[v168];
            v170 = v169 + 1;
            if (v169 == -1 || v170 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v171 = *(char *)(*(_QWORD *)&a1[*v5] + v169);
            *(_QWORD *)&a1[v168] = v170;
            if (v171 < 0)
            {
              v36 = v167++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x64u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v172 = 0;
          while (1)
          {
            v173 = *v2;
            v174 = *(_QWORD *)&a1[v173];
            v175 = v174 + 1;
            if (v174 == -1 || v175 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v176 = *(char *)(*(_QWORD *)&a1[*v5] + v174);
            *(_QWORD *)&a1[v173] = v175;
            if (v176 < 0)
            {
              v36 = v172++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x65u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v177 = 0;
          while (1)
          {
            v178 = *v2;
            v179 = *(_QWORD *)&a1[v178];
            v180 = v179 + 1;
            if (v179 == -1 || v180 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v181 = *(char *)(*(_QWORD *)&a1[*v5] + v179);
            *(_QWORD *)&a1[v178] = v180;
            if (v181 < 0)
            {
              v36 = v177++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x66u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v182 = 0;
          while (1)
          {
            v183 = *v2;
            v184 = *(_QWORD *)&a1[v183];
            v185 = v184 + 1;
            if (v184 == -1 || v185 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v186 = *(char *)(*(_QWORD *)&a1[*v5] + v184);
            *(_QWORD *)&a1[v183] = v185;
            if (v186 < 0)
            {
              v36 = v182++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x67u:
        case 0x6Au:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOSearchSubstringIsValid(a1))
            goto LABEL_498;
          goto LABEL_438;
        case 0x68u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v187 = 0;
          while (1)
          {
            v188 = *v2;
            v189 = *(_QWORD *)&a1[v188];
            v190 = v189 + 1;
            if (v189 == -1 || v190 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v191 = *(char *)(*(_QWORD *)&a1[*v5] + v189);
            *(_QWORD *)&a1[v188] = v190;
            if (v191 < 0)
            {
              v36 = v187++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x69u:
          if (v16 == 2)
            goto LABEL_460;
          goto LABEL_498;
        case 0x6Bu:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v192 = 0;
          while (1)
          {
            v193 = *v2;
            v194 = *(_QWORD *)&a1[v193];
            v195 = v194 + 1;
            if (v194 == -1 || v195 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v196 = *(char *)(*(_QWORD *)&a1[*v5] + v194);
            *(_QWORD *)&a1[v193] = v195;
            if (v196 < 0)
            {
              v36 = v192++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x6Du:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v197 = 0;
          while (1)
          {
            v198 = *v2;
            v199 = *(_QWORD *)&a1[v198];
            v200 = v199 + 1;
            if (v199 == -1 || v200 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v201 = *(char *)(*(_QWORD *)&a1[*v5] + v199);
            *(_QWORD *)&a1[v198] = v200;
            if (v201 < 0)
            {
              v36 = v197++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x6Eu:
          if (v16 != 2 || !PBReaderPlaceMark() || (GEOIndexQueryNodeIsValid(a1) & 1) == 0)
            goto LABEL_498;
          goto LABEL_438;
        case 0x6Fu:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v202 = 0;
          while (1)
          {
            v203 = *v2;
            v204 = *(_QWORD *)&a1[v203];
            v205 = v204 + 1;
            if (v204 == -1 || v205 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v206 = *(char *)(*(_QWORD *)&a1[*v5] + v204);
            *(_QWORD *)&a1[v203] = v205;
            if (v206 < 0)
            {
              v36 = v202++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x70u:
          if (v16 != 2 || !PBReaderPlaceMark() || (GEOGeoServiceTagIsValid(a1) & 1) == 0)
            goto LABEL_498;
          goto LABEL_438;
        case 0x71u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v207 = 0;
          while (1)
          {
            v208 = *v2;
            v209 = *(_QWORD *)&a1[v208];
            v210 = v209 + 1;
            if (v209 == -1 || v210 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v211 = *(char *)(*(_QWORD *)&a1[*v5] + v209);
            *(_QWORD *)&a1[v208] = v210;
            if (v211 < 0)
            {
              v36 = v207++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x73u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v212 = 0;
          while (1)
          {
            v213 = *v2;
            v214 = *(_QWORD *)&a1[v213];
            v215 = v214 + 1;
            if (v214 == -1 || v215 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v216 = *(char *)(*(_QWORD *)&a1[*v5] + v214);
            *(_QWORD *)&a1[v213] = v215;
            if (v216 < 0)
            {
              v36 = v212++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x75u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v217 = 0;
          while (1)
          {
            v218 = *v2;
            v219 = *(_QWORD *)&a1[v218];
            v220 = v219 + 1;
            if (v219 == -1 || v220 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v221 = *(char *)(*(_QWORD *)&a1[*v5] + v219);
            *(_QWORD *)&a1[v218] = v220;
            if (v221 < 0)
            {
              v36 = v217++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x76u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v222 = 0;
          while (1)
          {
            v223 = *v2;
            v224 = *(_QWORD *)&a1[v223];
            v225 = v224 + 1;
            if (v224 == -1 || v225 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v226 = *(char *)(*(_QWORD *)&a1[*v5] + v224);
            *(_QWORD *)&a1[v223] = v225;
            if (v226 < 0)
            {
              v36 = v222++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x77u:
          if (v16 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_498:
              PBReaderRecallMark();
              return 0;
            }
LABEL_486:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v258 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v259 = *v2;
                v260 = *(_QWORD *)&a1[v259];
                v261 = v260 + 1;
                if (v260 == -1 || v261 > *(_QWORD *)&a1[*v3])
                  break;
                v262 = *(char *)(*(_QWORD *)&a1[*v5] + v260);
                *(_QWORD *)&a1[v259] = v261;
                if (v262 < 0)
                {
                  v13 = v258++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_486;
              }
              a1[*v4] = 1;
            }
LABEL_438:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_498;
            while (1)
            {
              v227 = *v2;
              v228 = *(_QWORD *)&a1[v227];
              v229 = v228 + 1;
              if (v228 == -1 || v229 > *(_QWORD *)&a1[*v3])
                break;
              v230 = *(char *)(*(_QWORD *)&a1[*v5] + v228);
              *(_QWORD *)&a1[v227] = v229;
              if (v230 < 0)
              {
                v231 = v16++;
                if (v231 <= 8)
                  continue;
              }
              goto LABEL_461;
            }
LABEL_455:
            v14 = *v4;
LABEL_456:
            a1[v14] = 1;
          }
LABEL_461:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_495;
          break;
        case 0x79u:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v232 = 0;
          while (1)
          {
            v233 = *v2;
            v234 = *(_QWORD *)&a1[v233];
            v235 = v234 + 1;
            if (v234 == -1 || v235 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v236 = *(char *)(*(_QWORD *)&a1[*v5] + v234);
            *(_QWORD *)&a1[v233] = v235;
            if (v236 < 0)
            {
              v36 = v232++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x7Au:
          if (v16 == 2 && PBReaderPlaceMark() && GEOAdditionalEnabledMarketsIsValid(a1))
            goto LABEL_438;
          goto LABEL_498;
        case 0x7Bu:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v237 = 0;
          while (1)
          {
            v238 = *v2;
            v239 = *(_QWORD *)&a1[v238];
            v240 = v239 + 1;
            if (v239 == -1 || v240 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v241 = *(char *)(*(_QWORD *)&a1[*v5] + v239);
            *(_QWORD *)&a1[v238] = v240;
            if (v241 < 0)
            {
              v36 = v237++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x7Cu:
          if ((v8 & 7) != 0)
            goto LABEL_498;
          v242 = 0;
          while (1)
          {
            v243 = *v2;
            v244 = *(_QWORD *)&a1[v243];
            v245 = v244 + 1;
            if (v244 == -1 || v245 > *(_QWORD *)&a1[*v3])
              goto LABEL_455;
            v246 = *(char *)(*(_QWORD *)&a1[*v5] + v244);
            *(_QWORD *)&a1[v243] = v245;
            if (v246 < 0)
            {
              v36 = v242++ > 8;
              if (!v36)
                continue;
            }
            goto LABEL_461;
          }
        case 0x7Du:
          if (v16 == 2)
            goto LABEL_460;
          goto LABEL_498;
        case 0x7Eu:
          if (v16 == 2)
            goto LABEL_460;
          goto LABEL_498;
        default:
LABEL_460:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            goto LABEL_461;
          goto LABEL_498;
      }
    }
  }
LABEL_495:
  v263 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v263;
}

void sub_189458704(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPlaceResultIsDirty(uint64_t a1)
{
  int v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  _BYTE v39[128];
  _BYTE v40[128];
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  v2 = *(_DWORD *)(a1 + 144);
  if ((v2 & 0x10000) != 0)
    return 1;
  if ((v2 & 0x400) != 0)
  {
    if ((GEOPlaceIsDirty(*(os_unfair_lock_s **)(a1 + 72)) & 1) != 0)
      return 1;
    v2 = *(_DWORD *)(a1 + 144);
  }
  if ((v2 & 0x2020) == 0)
  {
    if ((v2 & 0x4000) != 0)
    {
      if (GEOAddressIsDirty(*(_QWORD *)(a1 + 104)))
        return 1;
      v2 = *(_DWORD *)(a1 + 144);
    }
    if ((v2 & 0x8900) == 0)
    {
      if ((v2 & 0x1000) == 0)
        goto LABEL_13;
      if ((GEOPlaceSearchRequestIsDirty(*(os_unfair_lock_s **)(a1 + 88)) & 1) == 0)
      {
        v2 = *(_DWORD *)(a1 + 144);
LABEL_13:
        if ((v2 & 0x2C0) != 0)
          return 1;
        if ((v2 & 0x20) != 0)
        {
          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          v5 = *(id *)(a1 + 24);
          v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v34, v41, 16);
          if (v6)
          {
            v7 = v6;
            v8 = *(_QWORD *)v35;
LABEL_19:
            v9 = 0;
            while (1)
            {
              if (*(_QWORD *)v35 != v8)
                objc_enumerationMutation(v5);
              if ((GEOPlaceIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v34 + 1) + 8 * v9)) & 1) != 0)
                goto LABEL_58;
              if (v7 == ++v9)
              {
                v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v34, v41, 16);
                if (v7)
                  goto LABEL_19;
                break;
              }
            }
          }

          v2 = *(_DWORD *)(a1 + 144);
        }
        if ((v2 & 0x80) != 0)
        {
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          v5 = *(id *)(a1 + 48);
          v10 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
          if (v10)
          {
            v11 = v10;
            v12 = *(_QWORD *)v31;
LABEL_29:
            v13 = 0;
            while (1)
            {
              if (*(_QWORD *)v31 != v12)
                objc_enumerationMutation(v5);
              if (GEOMatchedTokenIsDirty(*(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * v13)))
                goto LABEL_58;
              if (v11 == ++v13)
              {
                v11 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
                if (v11)
                  goto LABEL_29;
                break;
              }
            }
          }

          v2 = *(_DWORD *)(a1 + 144);
        }
        if ((v2 & 0x40) != 0)
        {
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v5 = *(id *)(a1 + 32);
          v14 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v39, 16);
          if (v14)
          {
            v15 = v14;
            v16 = *(_QWORD *)v27;
LABEL_39:
            v17 = 0;
            while (1)
            {
              if (*(_QWORD *)v27 != v16)
                objc_enumerationMutation(v5);
              v18 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * v17);
              if (v18)
              {
                os_unfair_lock_lock_with_options();
                os_unfair_lock_assert_owner((const os_unfair_lock *)(v18 + 48));
                v19 = *(_BYTE *)(v18 + 52) & 0xE;
                os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 48));
                if (v19)
                  goto LABEL_58;
              }
              if (v15 == ++v17)
              {
                v15 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v39, 16);
                if (v15)
                  goto LABEL_39;
                break;
              }
            }
          }

          v2 = *(_DWORD *)(a1 + 144);
        }
        if ((v2 & 0x200) == 0)
          return 0;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v5 = *(id *)(a1 + 64);
        v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v38, 16);
        if (!v3)
        {
LABEL_59:

          return v3;
        }
        v20 = *(_QWORD *)v23;
LABEL_51:
        v21 = 0;
        while (1)
        {
          if (*(_QWORD *)v23 != v20)
            objc_enumerationMutation(v5);
          if ((GEONamedFieldIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v22 + 1) + 8 * v21)) & 1) != 0)
            break;
          if (v3 == ++v21)
          {
            v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v38, 16);
            if (v3)
              goto LABEL_51;
            goto LABEL_59;
          }
        }
LABEL_58:
        v3 = 1;
        goto LABEL_59;
      }
    }
  }
  return 1;
}

os_unfair_lock_s *GEOPlaceResultIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPlaceResultIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 32);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEOPlaceResultClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  id v9;

  if (a3
    && objc_msgSend(a1, "hasRevgeoRequestTemplate")
    && (objc_msgSend(a1, "revgeoRequestTemplate"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = GEOPlaceSearchRequestHasSensitiveFields(v5),
        v5,
        v6))
  {
    objc_msgSend(a1, "revgeoRequestTemplate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (id)objc_msgSend(v7, "copy");

    objc_msgSend(v9, "location");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);

    objc_msgSend(a1, "setRevgeoRequestTemplate:", v9);
  }
  else
  {
    objc_msgSend(a1, "revgeoRequestTemplate");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "clearSensitiveFields:", a2);
  }

}

void *GEOPlaceResultHasSensitiveFields(void *result)
{
  void *v1;
  void *v2;

  if (result)
  {
    objc_msgSend(result, "revgeoRequestTemplate");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = GEOPlaceSearchRequestHasSensitiveFields(v1);

    return v2;
  }
  return result;
}

void *GEOPlaceSearchRequestHasSensitiveFields(void *result)
{
  void *v1;
  uint64_t HasSensitiveFields;

  if (result)
  {
    objc_msgSend(result, "location");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v1);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void GEOPlaceSearchRequestClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  int HasSensitiveFields;
  void *v7;
  _DWORD *v8;

  if (a3
    && objc_msgSend(a1, "hasLocation")
    && (objc_msgSend(a1, "location"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v5),
        v5,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "location");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (_DWORD *)objc_msgSend(v7, "copy");

    GEOLocationClearSensitiveFields(v8);
    objc_msgSend(a1, "setLocation:", v8);
  }
  else
  {
    objc_msgSend(a1, "location");
    v8 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

}

void sub_189459940(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18945A3BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18945AADC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceSearchRequestReadSpecified(uint64_t a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x2_t v10;
  __int128 v11;
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int32x2_t v29;
  int32x2_t v30;
  int32x2_t v31;
  int32x2_t v32;
  char v33;
  int *v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x2_t v38;
  _BYTE *v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  char v50;
  char v51;
  int *v52;
  int *v53;
  int v54;
  int *v55;
  int *v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  BOOL v64;
  int v65;
  int v66;
  unint64_t v68;
  BOOL v69;
  int *v70;
  int v71;
  int v72;
  BOOL v73;
  int *v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  GEOAddress *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  char v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  char v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char v152;
  char v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  char v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  char v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char v178;
  char v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char v185;
  char v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char v203;
  char v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char v210;
  char v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char v216;
  char v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  char v222;
  char v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  char v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  char v236;
  char v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char v243;
  char v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  char v250;
  char v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  char v257;
  char v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  char v264;
  char v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  char v271;
  char v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  char v278;
  char v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  char v285;
  char v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  char v292;
  char v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  char v299;
  char v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char v305;
  char v306;
  unsigned int v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  char v311;
  char v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char v318;
  char v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  char v324;
  int *v325;
  char v326;
  unsigned int v327;
  uint64_t v328;
  int *v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  char v333;
  char v334;
  unsigned int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  char v340;
  void *v341;
  char v342;
  unsigned int v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  char v347;
  char v348;
  unsigned int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  char v354;
  id v355;
  void *v356;
  int v357;
  char v358;
  char v359;
  BOOL v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  char v365;
  unsigned int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  char v371;
  char v372;
  unsigned int v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  char v378;
  uint64_t v379;
  char v380;
  unsigned int v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  char v386;
  _BOOL8 v387;
  char v388;
  int v389;
  int v390;
  char v391;
  unint64_t v392;
  char v393;
  void *v394;
  int32x2_t v396;
  char v397;
  int32x2_t v398;
  char v399;
  int32x2_t v400;
  char v401;

  if (!a2)
    return 0;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 376));
  *(_QWORD *)&a2[*MEMORY[0x1E0D82BD8]] = *(unsigned int *)(a1 + 372);
  objc_msgSend(a2, "seekToOffset:", *(unsigned int *)(a1 + 368));
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = (int32x2_t)*(unsigned __int8 *)(a1 + 452);
  *((int32x2_t *)&v11 + 1) = v10;
  *(_QWORD *)&v11 = *(_QWORD *)(a1 + 444);
  v12 = (int32x2_t)(v11 >> 46);
  *((int32x2_t *)&v11 + 1) = v10;
  v13 = (int32x2_t)(v11 >> 49);
  *((int32x2_t *)&v11 + 1) = v10;
  v14 = (int32x2_t)(v11 >> 48);
  *((int32x2_t *)&v11 + 1) = v10;
  v15 = (int32x2_t)(v11 >> 57);
  *((int32x2_t *)&v11 + 1) = v10;
  v398 = (int32x2_t)(v11 >> 42);
  v400 = v15;
  *((int32x2_t *)&v11 + 1) = v10;
  v16 = (int32x2_t)(v11 >> 45);
  *((int32x2_t *)&v11 + 1) = v10;
  v396 = (int32x2_t)(v11 >> 52);
  *((int32x2_t *)&v11 + 1) = v10;
  v17 = (int32x2_t)(v11 >> 41);
  *((int32x2_t *)&v11 + 1) = v10;
  v18 = (int32x2_t)(v11 >> 58);
  *((int32x2_t *)&v11 + 1) = v10;
  v19 = (int32x2_t)(v11 >> 59);
  *((int32x2_t *)&v11 + 1) = v10;
  v20 = (int32x2_t)(v11 >> 54);
  *((int32x2_t *)&v11 + 1) = v10;
  v21 = (int32x2_t)(v11 >> 47);
  *((int32x2_t *)&v11 + 1) = v10;
  v22 = (int32x2_t)(v11 >> 50);
  *((int32x2_t *)&v11 + 1) = v10;
  v23 = (int32x2_t)(v11 >> 53);
  *((int32x2_t *)&v11 + 1) = v10;
  v24 = (int32x2_t)(v11 >> 60);
  *((int32x2_t *)&v11 + 1) = v10;
  v25 = (int32x2_t)(v11 >> 61);
  *((int32x2_t *)&v11 + 1) = v10;
  v26 = (int32x2_t)(v11 >> 56);
  *((int32x2_t *)&v11 + 1) = v10;
  v27 = (int32x2_t)(v11 >> 62);
  *((int32x2_t *)&v11 + 1) = v10;
  v28 = (int32x2_t)(v11 >> 43);
  *((int32x2_t *)&v11 + 1) = v10;
  v29 = (int32x2_t)(v11 >> 55);
  *((int32x2_t *)&v11 + 1) = v10;
  v30 = (int32x2_t)(v11 >> 44);
  *((int32x2_t *)&v11 + 1) = v10;
  v31 = v17;
  v32 = v18;
  v33 = 0;
  v34 = (int *)MEMORY[0x1E0D82BD8];
  *(int32x2_t *)v35.i8 = vzip1_s32(v20, v19);
  v35.u64[1] = (unint64_t)vzip1_s32(v22, v21);
  *(int32x2_t *)v36.i8 = vzip1_s32(v32, v31);
  v36.u64[1] = (unint64_t)vzip1_s32(v396, (int32x2_t)(*(_QWORD *)&v10 >> 6));
  *(int32x2_t *)v37.i8 = vzip1_s32(v16, v398);
  v37.u64[1] = (unint64_t)vzip1_s32(v400, (int32x2_t)(*(_QWORD *)&v10 >> 1));
  v38 = v29;
  v39 = a2;
  *(int32x2_t *)v40.i8 = vzip1_s32(v12, (int32x2_t)(*(_QWORD *)&v10 >> 4));
  v40.u64[1] = (unint64_t)vzip1_s32(v14, v13);
  v41.i64[0] = 0x100000001;
  v41.i64[1] = 0x100000001;
  *(int32x2_t *)v42.i8 = vzip1_s32((int32x2_t)(*(_QWORD *)&v10 >> 3), v26);
  v42.u64[1] = (unint64_t)vzip1_s32(v10, v27);
  *(int32x2_t *)v43.i8 = vzip1_s32(v25, v24);
  v43.u64[1] = (unint64_t)vzip1_s32(v23, (int32x2_t)(*(_QWORD *)&v10 >> 2));
  *(int32x2_t *)v44.i8 = vzip1_s32(v38, v28);
  v44.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v11 >> 63), v30);
  v45 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v37, v41), (int32x4_t)vandq_s8(v40, v41)), vaddq_s32((int32x4_t)vandq_s8(v36, v41), (int32x4_t)vandq_s8(v35, v41))), vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v42, v41), (int32x4_t)vandq_s8(v43, v41)), (int32x4_t)vandq_s8(v44, v41))))+ (((unint64_t)v11 >> 51) & 1)+ (((unsigned __int32)v10.i32[0] >> 5) & 1)+ (((unint64_t)v11 >> 40) & 1);
  while (2)
  {
    v46 = 1;
    v47 = 1;
    v48 = 1;
    switch(a3[v6])
    {
      case -4:
        ++v45;
        goto LABEL_8;
      case -3:
        v33 = 1;
        goto LABEL_7;
      case -2:
        v47 = v8;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v49 = v45 > 0x17;
        v50 = v49 & ~(_BYTE)v9 | v7;
        v51 = v49 | v9;
        v401 = v33;
        if ((((v49 | v9) | v33) & 1) != 0)
          v52 = 0;
        else
          v52 = a3;
        v53 = (int *)MEMORY[0x1E0D82BF0];
        v54 = 1;
        v55 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)&v39[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&v39[*MEMORY[0x1E0D82BD8]])
          goto LABEL_765;
        v397 = v51 | v50;
        v56 = (int *)MEMORY[0x1E0D82BB8];
        v399 = v49 & ~(_BYTE)v9 | v7;
        break;
      default:
        ++v45;
LABEL_7:
        v46 = v7;
LABEL_8:
        v47 = v8;
        v48 = v9;
LABEL_10:
        ++v6;
        v7 = v46;
        v8 = v47;
        v9 = v48;
        continue;
    }
    break;
  }
  while (2)
  {
    if (v39[*v55])
      goto LABEL_762;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    while (1)
    {
      v60 = *v53;
      v61 = *(_QWORD *)&v39[v60];
      v62 = v61 + 1;
      if (v61 == -1 || v62 > *(_QWORD *)&v39[*v34])
        break;
      v63 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v61);
      *(_QWORD *)&v39[v60] = v62;
      v59 |= (unint64_t)(v63 & 0x7F) << v57;
      if ((v63 & 0x80) == 0)
        goto LABEL_25;
      v57 += 7;
      v64 = v58++ >= 9;
      if (v64)
      {
        v59 = 0;
        v65 = v39[*v55];
        goto LABEL_27;
      }
    }
    v39[*v55] = 1;
LABEL_25:
    v65 = v39[*v55];
    if (v39[*v55])
      v59 = 0;
LABEL_27:
    v66 = v59 & 7;
    if (v65 || v66 == 4)
    {
LABEL_762:
      v54 = 1;
      if ((v50 & 1) == 0)
        goto LABEL_767;
      goto LABEL_766;
    }
    v68 = v59 >> 3;
    v69 = v51;
    if (!((v52 == 0) | v51 & 1))
    {
      v70 = v52;
      do
      {
        v72 = *v70++;
        v71 = v72;
        v69 = v72 != 0;
        if (v72)
          v73 = v71 == (_DWORD)v68;
        else
          v73 = 1;
      }
      while (!v73);
    }
    switch((int)v68)
    {
      case 2:
        if (!v69 || (*(_QWORD *)(a1 + 444) & 0x40000000000) != 0)
          goto LABEL_527;
        if (v66 != 2)
        {
          v365 = 0;
          v366 = 0;
          v367 = 0;
          while (1)
          {
            v368 = *v53;
            v369 = *(_QWORD *)&v39[v368];
            v370 = v369 + 1;
            if (v369 == -1 || v370 > *(_QWORD *)&v39[*v34])
              break;
            v371 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v369);
            *(_QWORD *)&v39[v368] = v370;
            v367 |= (unint64_t)(v371 & 0x7F) << v365;
            if (v371 < 0)
            {
              v365 += 7;
              v64 = v366++ >= 9;
              if (!v64)
                continue;
            }
            goto LABEL_760;
          }
          v39[*v55] = 1;
LABEL_760:
          PBRepeatedUInt64Add();
          goto LABEL_725;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_812;
        while (1)
        {
          v74 = (int *)MEMORY[0x1E0D82BD8];
          if (*(_QWORD *)&v39[*v53] >= *(_QWORD *)&v39[*MEMORY[0x1E0D82BD8]] || v39[*v55])
            goto LABEL_529;
          v75 = 0;
          v76 = 0;
          v77 = 0;
          v78 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v79 = *v53;
            v80 = *(_QWORD *)&v39[v79];
            v81 = v80 + 1;
            if (v80 == -1 || v81 > *(_QWORD *)&v39[*v74])
              break;
            v82 = *(_BYTE *)(*(_QWORD *)&v39[*v78] + v80);
            *(_QWORD *)&v39[v79] = v81;
            v77 |= (unint64_t)(v82 & 0x7F) << v75;
            if (v82 < 0)
            {
              v75 += 7;
              v64 = v76++ >= 9;
              if (!v64)
                continue;
            }
            goto LABEL_53;
          }
          v39[*v55] = 1;
LABEL_53:
          PBRepeatedUInt64Add();
        }
      case 3:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x200000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_812;
          v364 = (uint64_t)(*(_QWORD *)(a1 + 444) << 18) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_812;
        v83 = objc_alloc_init(GEOAddress);
        if (!GEOAddressReadAllFrom((uint64_t)v83, v39, v8 & 1))
          goto LABEL_811;
        PBReaderRecallMark();
        v84 = 120;
        goto LABEL_480;
      case 4:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x200000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_812;
          v364 = (uint64_t)(*(_QWORD *)(a1 + 444) << 6) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_812;
        v83 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v83, v39, v8 & 1))
          goto LABEL_811;
        PBReaderRecallMark();
        v84 = 232;
        goto LABEL_480;
      case 5:
        if (!v69)
          goto LABEL_527;
        if ((*(_BYTE *)(a1 + 452) & 2) == 0)
        {
          PBReaderReadString();
          v85 = objc_claimAutoreleasedReturnValue();
          v86 = 296;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_812;
        LOBYTE(v364) = *(_BYTE *)(a1 + 452) << 6;
        goto LABEL_723;
      case 6:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x400000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_812;
          v364 = (32 * *(_QWORD *)(a1 + 444)) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_812;
        v83 = objc_alloc_init(GEOMapRegion);
        if (!GEOMapRegionReadAllFrom((uint64_t)v83, v39))
          goto LABEL_811;
        PBReaderRecallMark();
        v84 = 240;
        goto LABEL_480;
      case 7:
        if (!v69 || (*(_QWORD *)(a1 + 444) & 0x20000000000) != 0)
          goto LABEL_527;
        if (v66 != 2)
        {
          v372 = 0;
          v373 = 0;
          v374 = 0;
          while (1)
          {
            v375 = *v53;
            v376 = *(_QWORD *)&v39[v375];
            v377 = v376 + 1;
            if (v376 == -1 || v377 > *(_QWORD *)&v39[*v34])
              goto LABEL_757;
            v378 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v376);
            *(_QWORD *)&v39[v375] = v377;
            v374 |= (unint64_t)(v378 & 0x7F) << v372;
            if (v378 < 0)
            {
              v372 += 7;
              v64 = v373++ >= 9;
              if (!v64)
                continue;
            }
            goto LABEL_758;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_812;
        while (1)
        {
          v87 = (int *)MEMORY[0x1E0D82BD8];
          if (*(_QWORD *)&v39[*v53] >= *(_QWORD *)&v39[*MEMORY[0x1E0D82BD8]] || v39[*v55])
            goto LABEL_529;
          v88 = 0;
          v89 = 0;
          v90 = 0;
          v91 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v92 = *v53;
            v93 = *(_QWORD *)&v39[v92];
            v94 = v93 + 1;
            if (v93 == -1 || v94 > *(_QWORD *)&v39[*v87])
              break;
            v95 = *(_BYTE *)(*(_QWORD *)&v39[*v91] + v93);
            *(_QWORD *)&v39[v92] = v94;
            v90 |= (unint64_t)(v95 & 0x7F) << v88;
            if (v95 < 0)
            {
              v88 += 7;
              v64 = v89++ >= 9;
              if (!v64)
                continue;
            }
            goto LABEL_86;
          }
          v39[*v55] = 1;
LABEL_86:
          PBRepeatedInt32Add();
        }
      case 8:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v96 = 0;
        v97 = 0;
        v98 = 0;
        *(_QWORD *)(a1 + 444) |= 0x1000000uLL;
        while (2)
        {
          v99 = *v53;
          v100 = *(_QWORD *)&v39[v99];
          v101 = v100 + 1;
          if (v100 == -1 || v101 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v102 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v100);
            *(_QWORD *)&v39[v99] = v101;
            v98 |= (unint64_t)(v102 & 0x7F) << v96;
            if (v102 < 0)
            {
              v96 += 7;
              v64 = v97++ >= 9;
              if (v64)
              {
                v98 = 0;
                goto LABEL_533;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v98 = 0;
LABEL_533:
        v360 = v98 != 0;
        v361 = 428;
        goto LABEL_676;
      case 9:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v103 = 0;
        v104 = 0;
        v105 = 0;
        *(_QWORD *)(a1 + 444) |= 0x800uLL;
        while (2)
        {
          v106 = *v53;
          v107 = *(_QWORD *)&v39[v106];
          v108 = v107 + 1;
          if (v107 == -1 || v108 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v109 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v107);
            *(_QWORD *)&v39[v106] = v108;
            v105 |= (unint64_t)(v109 & 0x7F) << v103;
            if (v109 < 0)
            {
              v103 += 7;
              v64 = v104++ >= 9;
              if (v64)
              {
                LODWORD(v105) = 0;
                goto LABEL_537;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          LODWORD(v105) = 0;
LABEL_537:
        v362 = 400;
        goto LABEL_671;
      case 12:
        if ((v401 & 1) == 0)
          goto LABEL_525;
        if (!PBReaderPlaceMark() || (GEOSessionIDReadAllFrom((_QWORD *)(a1 + 96), (uint64_t)v39) & 1) == 0)
          goto LABEL_812;
        PBReaderRecallMark();
        *(_QWORD *)(a1 + 444) |= 1uLL;
        goto LABEL_725;
      case 13:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v110 = 0;
        v111 = 0;
        v105 = 0;
        *(_QWORD *)(a1 + 444) |= 0x40uLL;
        while (2)
        {
          v112 = *v53;
          v113 = *(_QWORD *)&v39[v112];
          v114 = v113 + 1;
          if (v113 == -1 || v114 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v115 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v113);
            *(_QWORD *)&v39[v112] = v114;
            v105 |= (unint64_t)(v115 & 0x7F) << v110;
            if (v115 < 0)
            {
              v110 += 7;
              v64 = v111++ >= 9;
              if (v64)
              {
                LODWORD(v105) = 0;
                goto LABEL_541;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          LODWORD(v105) = 0;
LABEL_541:
        v362 = 380;
        goto LABEL_671;
      case 14:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v116 = 0;
        v117 = 0;
        v118 = 0;
        *(_QWORD *)(a1 + 444) |= 0x40000uLL;
        while (2)
        {
          v119 = *v53;
          v120 = *(_QWORD *)&v39[v119];
          v121 = v120 + 1;
          if (v120 == -1 || v121 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v122 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v120);
            *(_QWORD *)&v39[v119] = v121;
            v118 |= (unint64_t)(v122 & 0x7F) << v116;
            if (v122 < 0)
            {
              v116 += 7;
              v64 = v117++ >= 9;
              if (v64)
              {
                v118 = 0;
                goto LABEL_545;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v118 = 0;
LABEL_545:
        v360 = v118 != 0;
        v361 = 422;
        goto LABEL_676;
      case 15:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v123 = 0;
        v124 = 0;
        v125 = 0;
        *(_QWORD *)(a1 + 444) |= 0x20000uLL;
        while (2)
        {
          v126 = *v53;
          v127 = *(_QWORD *)&v39[v126];
          v128 = v127 + 1;
          if (v127 == -1 || v128 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v129 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v127);
            *(_QWORD *)&v39[v126] = v128;
            v125 |= (unint64_t)(v129 & 0x7F) << v123;
            if (v129 < 0)
            {
              v123 += 7;
              v64 = v124++ >= 9;
              if (v64)
              {
                v125 = 0;
                goto LABEL_549;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v125 = 0;
LABEL_549:
        v360 = v125 != 0;
        v361 = 421;
        goto LABEL_676;
      case 16:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v130 = 0;
        v131 = 0;
        v105 = 0;
        *(_QWORD *)(a1 + 444) |= 0x400uLL;
        while (2)
        {
          v132 = *v53;
          v133 = *(_QWORD *)&v39[v132];
          v134 = v133 + 1;
          if (v133 == -1 || v134 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v135 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v133);
            *(_QWORD *)&v39[v132] = v134;
            v105 |= (unint64_t)(v135 & 0x7F) << v130;
            if (v135 < 0)
            {
              v130 += 7;
              v64 = v131++ >= 9;
              if (v64)
              {
                LODWORD(v105) = 0;
                goto LABEL_553;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          LODWORD(v105) = 0;
LABEL_553:
        v362 = 396;
        goto LABEL_671;
      case 17:
        if (!v69 || (*(_QWORD *)(a1 + 444) & 0x10000000000000) != 0)
          goto LABEL_525;
        PBReaderReadString();
        v83 = (GEOAddress *)objc_claimAutoreleasedReturnValue();
        if (v83)
          -[GEOPlaceSearchRequest _addNoFlagsFilterByBusinessCategory:](a1, v83);
        goto LABEL_409;
      case 18:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v136 = 0;
        v137 = 0;
        v138 = 0;
        *(_QWORD *)(a1 + 444) |= 0x1000000000uLL;
        while (2)
        {
          v139 = *v53;
          v140 = *(_QWORD *)&v39[v139];
          v141 = v140 + 1;
          if (v140 == -1 || v141 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v142 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v140);
            *(_QWORD *)&v39[v139] = v141;
            v138 |= (unint64_t)(v142 & 0x7F) << v136;
            if (v142 < 0)
            {
              v136 += 7;
              v64 = v137++ >= 9;
              if (v64)
              {
                v138 = 0;
                goto LABEL_557;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v138 = 0;
LABEL_557:
        v360 = v138 != 0;
        v361 = 440;
        goto LABEL_676;
      case 19:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        *(_QWORD *)(a1 + 444) |= 0x20uLL;
        v143 = *v53;
        v144 = *(_QWORD *)&v39[v143];
        if (v144 <= 0xFFFFFFFFFFFFFFF7 && v144 + 8 <= *(_QWORD *)&v39[*v34])
        {
          v145 = *(_QWORD *)(*(_QWORD *)&v39[*v56] + v144);
          *(_QWORD *)&v39[v143] = v144 + 8;
        }
        else
        {
          v39[*v55] = 1;
          v145 = 0;
        }
        v379 = 344;
        goto LABEL_749;
      case 20:
        if (!v69)
          goto LABEL_527;
        if ((*(_BYTE *)(a1 + 452) & 0x40) == 0)
        {
          PBReaderReadData();
          v85 = objc_claimAutoreleasedReturnValue();
          v86 = 360;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_812;
        LOBYTE(v364) = 2 * *(_BYTE *)(a1 + 452);
        goto LABEL_723;
      case 21:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v146 = 0;
        v147 = 0;
        v148 = 0;
        *(_QWORD *)(a1 + 444) |= 0x80000uLL;
        while (2)
        {
          v149 = *v53;
          v150 = *(_QWORD *)&v39[v149];
          v151 = v150 + 1;
          if (v150 == -1 || v151 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v152 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v150);
            *(_QWORD *)&v39[v149] = v151;
            v148 |= (unint64_t)(v152 & 0x7F) << v146;
            if (v152 < 0)
            {
              v146 += 7;
              v64 = v147++ >= 9;
              if (v64)
              {
                v148 = 0;
                goto LABEL_561;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v148 = 0;
LABEL_561:
        v360 = v148 != 0;
        v361 = 423;
        goto LABEL_676;
      case 22:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x400000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_812;
          v364 = (uint64_t)(*(_QWORD *)(a1 + 444) << 17) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_812;
        v83 = objc_alloc_init(GEOBusinessOptions);
        if (!GEOBusinessOptionsReadAllFrom((uint64_t)v83, v39, v8 & 1))
          goto LABEL_811;
        PBReaderRecallMark();
        v84 = 128;
        goto LABEL_480;
      case 23:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v153 = 0;
        v154 = 0;
        v105 = 0;
        *(_QWORD *)(a1 + 444) |= 0x100uLL;
        while (2)
        {
          v155 = *v53;
          v156 = *(_QWORD *)&v39[v155];
          v157 = v156 + 1;
          if (v156 == -1 || v157 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v158 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v156);
            *(_QWORD *)&v39[v155] = v157;
            v105 |= (unint64_t)(v158 & 0x7F) << v153;
            if (v158 < 0)
            {
              v153 += 7;
              v64 = v154++ >= 9;
              if (v64)
              {
                LODWORD(v105) = 0;
                goto LABEL_565;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          LODWORD(v105) = 0;
LABEL_565:
        v362 = 388;
        goto LABEL_671;
      case 24:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v159 = 0;
        v160 = 0;
        v161 = 0;
        *(_QWORD *)(a1 + 444) |= 0x20000000uLL;
        while (2)
        {
          v162 = *v53;
          v163 = *(_QWORD *)&v39[v162];
          v164 = v163 + 1;
          if (v163 == -1 || v164 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v165 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v163);
            *(_QWORD *)&v39[v162] = v164;
            v161 |= (unint64_t)(v165 & 0x7F) << v159;
            if (v165 < 0)
            {
              v159 += 7;
              v64 = v160++ >= 9;
              if (v64)
              {
                v161 = 0;
                goto LABEL_569;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v161 = 0;
LABEL_569:
        v360 = v161 != 0;
        v361 = 433;
        goto LABEL_676;
      case 25:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v166 = 0;
        v167 = 0;
        v168 = 0;
        *(_QWORD *)(a1 + 444) |= 0x4000000000uLL;
        while (2)
        {
          v169 = *v53;
          v170 = *(_QWORD *)&v39[v169];
          v171 = v170 + 1;
          if (v170 == -1 || v171 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v172 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v170);
            *(_QWORD *)&v39[v169] = v171;
            v168 |= (unint64_t)(v172 & 0x7F) << v166;
            if (v172 < 0)
            {
              v166 += 7;
              v64 = v167++ >= 9;
              if (v64)
              {
                v168 = 0;
                goto LABEL_573;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v168 = 0;
LABEL_573:
        v360 = v168 != 0;
        v361 = 442;
        goto LABEL_676;
      case 27:
        if (!v69)
          goto LABEL_527;
        if ((*(_BYTE *)(a1 + 452) & 0x10) == 0)
        {
          PBReaderReadString();
          v85 = objc_claimAutoreleasedReturnValue();
          v86 = 320;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_812;
        LOBYTE(v364) = 8 * *(_BYTE *)(a1 + 452);
        goto LABEL_723;
      case 28:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x1000000000000) == 0)
        {
          PBReaderReadString();
          v85 = objc_claimAutoreleasedReturnValue();
          v86 = 144;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_812;
        v364 = (uint64_t)(*(_QWORD *)(a1 + 444) << 15) >> 56;
        goto LABEL_724;
      case 29:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x2000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_812;
          v364 = (uint64_t)(*(_QWORD *)(a1 + 444) << 14) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_812;
        v83 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v83, v39))
          goto LABEL_811;
        PBReaderRecallMark();
        v84 = 152;
        goto LABEL_480;
      case 30:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x40000000000000) == 0)
        {
          PBReaderReadString();
          v85 = objc_claimAutoreleasedReturnValue();
          v86 = 200;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_812;
        v364 = (uint64_t)(*(_QWORD *)(a1 + 444) << 9) >> 56;
        goto LABEL_724;
      case 31:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x800000000000000) == 0)
        {
          PBReaderReadString();
          v85 = objc_claimAutoreleasedReturnValue();
          v86 = 248;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_812;
        v364 = (16 * *(_QWORD *)(a1 + 444)) >> 56;
        goto LABEL_724;
      case 32:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v173 = 0;
        v174 = 0;
        v105 = 0;
        *(_QWORD *)(a1 + 444) |= 0x4000uLL;
        while (2)
        {
          v175 = *v53;
          v176 = *(_QWORD *)&v39[v175];
          v177 = v176 + 1;
          if (v176 == -1 || v177 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v178 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v176);
            *(_QWORD *)&v39[v175] = v177;
            v105 |= (unint64_t)(v178 & 0x7F) << v173;
            if (v178 < 0)
            {
              v173 += 7;
              v64 = v174++ >= 9;
              if (v64)
              {
                LODWORD(v105) = 0;
                goto LABEL_577;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          LODWORD(v105) = 0;
LABEL_577:
        v362 = 412;
        goto LABEL_671;
      case 33:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v179 = 0;
        v180 = 0;
        v181 = 0;
        *(_QWORD *)(a1 + 444) |= 0x8000000000uLL;
        while (2)
        {
          v182 = *v53;
          v183 = *(_QWORD *)&v39[v182];
          v184 = v183 + 1;
          if (v183 == -1 || v184 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v185 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v183);
            *(_QWORD *)&v39[v182] = v184;
            v181 |= (unint64_t)(v185 & 0x7F) << v179;
            if (v185 < 0)
            {
              v179 += 7;
              v64 = v180++ >= 9;
              if (v64)
              {
                v181 = 0;
                goto LABEL_581;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v181 = 0;
LABEL_581:
        v360 = v181 != 0;
        v361 = 443;
        goto LABEL_676;
      case 34:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v186 = 0;
        v187 = 0;
        v188 = 0;
        *(_QWORD *)(a1 + 444) |= 0x400000000uLL;
        while (2)
        {
          v189 = *v53;
          v190 = *(_QWORD *)&v39[v189];
          v191 = v190 + 1;
          if (v190 == -1 || v191 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v192 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v190);
            *(_QWORD *)&v39[v189] = v191;
            v188 |= (unint64_t)(v192 & 0x7F) << v186;
            if (v192 < 0)
            {
              v186 += 7;
              v64 = v187++ >= 9;
              if (v64)
              {
                v188 = 0;
                goto LABEL_585;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v188 = 0;
LABEL_585:
        v360 = v188 != 0;
        v361 = 438;
        goto LABEL_676;
      case 36:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        *(_QWORD *)(a1 + 444) |= 8uLL;
        v193 = *v53;
        v194 = *(_QWORD *)&v39[v193];
        if (v194 <= 0xFFFFFFFFFFFFFFF7 && v194 + 8 <= *(_QWORD *)&v39[*v34])
        {
          v145 = *(_QWORD *)(*(_QWORD *)&v39[*v56] + v194);
          *(_QWORD *)&v39[v193] = v194 + 8;
        }
        else
        {
          v39[*v55] = 1;
          v145 = 0;
        }
        v379 = 328;
        goto LABEL_749;
      case 37:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        *(_QWORD *)(a1 + 444) |= 0x10uLL;
        v195 = *v53;
        v196 = *(_QWORD *)&v39[v195];
        if (v196 <= 0xFFFFFFFFFFFFFFF7 && v196 + 8 <= *(_QWORD *)&v39[*v34])
        {
          v145 = *(_QWORD *)(*(_QWORD *)&v39[*v56] + v196);
          *(_QWORD *)&v39[v195] = v196 + 8;
        }
        else
        {
          v39[*v55] = 1;
          v145 = 0;
        }
        v379 = 336;
LABEL_749:
        *(_QWORD *)(a1 + v379) = v145;
        goto LABEL_726;
      case 39:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v197 = 0;
        v198 = 0;
        v199 = 0;
        *(_QWORD *)(a1 + 444) |= 0x8000000uLL;
        while (2)
        {
          v200 = *v53;
          v201 = *(_QWORD *)&v39[v200];
          v202 = v201 + 1;
          if (v201 == -1 || v202 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v203 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v201);
            *(_QWORD *)&v39[v200] = v202;
            v199 |= (unint64_t)(v203 & 0x7F) << v197;
            if (v203 < 0)
            {
              v197 += 7;
              v64 = v198++ >= 9;
              if (v64)
              {
                v199 = 0;
                goto LABEL_589;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v199 = 0;
LABEL_589:
        v360 = v199 != 0;
        v361 = 431;
        goto LABEL_676;
      case 42:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x4000000000000) == 0)
        {
          PBReaderReadString();
          v85 = objc_claimAutoreleasedReturnValue();
          v86 = 160;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_812;
        v364 = (uint64_t)(*(_QWORD *)(a1 + 444) << 13) >> 56;
        goto LABEL_724;
      case 43:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x800000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_812;
          v364 = *(char *)(a1 + 449);
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_812;
        v83 = objc_alloc_init(GEOClientCapabilities);
        if (!GEOClientCapabilitiesReadAllFrom((uint64_t)v83, v39, v8 & 1))
          goto LABEL_811;
        PBReaderRecallMark();
        v84 = 136;
        goto LABEL_480;
      case 44:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v204 = 0;
        v205 = 0;
        v206 = 0;
        *(_QWORD *)(a1 + 444) |= 0x80000000uLL;
        while (2)
        {
          v207 = *v53;
          v208 = *(_QWORD *)&v39[v207];
          v209 = v208 + 1;
          if (v208 == -1 || v209 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v210 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v208);
            *(_QWORD *)&v39[v207] = v209;
            v206 |= (unint64_t)(v210 & 0x7F) << v204;
            if (v210 < 0)
            {
              v204 += 7;
              v64 = v205++ >= 9;
              if (v64)
              {
                v206 = 0;
                goto LABEL_593;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v206 = 0;
LABEL_593:
        v360 = v206 != 0;
        v361 = 435;
        goto LABEL_676;
      case 45:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v211 = 0;
        v212 = 0;
        v105 = 0;
        *(_QWORD *)(a1 + 444) |= 0x8000uLL;
        while (2)
        {
          v213 = *v53;
          v214 = *(_QWORD *)&v39[v213];
          v215 = v214 + 1;
          if (v214 == -1 || v215 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v216 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v214);
            *(_QWORD *)&v39[v213] = v215;
            v105 |= (unint64_t)(v216 & 0x7F) << v211;
            if (v216 < 0)
            {
              v211 += 7;
              v64 = v212++ >= 9;
              if (v64)
              {
                LODWORD(v105) = 0;
                goto LABEL_597;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          LODWORD(v105) = 0;
LABEL_597:
        v362 = 416;
        goto LABEL_671;
      case 46:
        if (!v69)
          goto LABEL_527;
        if ((*(_BYTE *)(a1 + 452) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_812;
          LOBYTE(v364) = 16 * *(_BYTE *)(a1 + 452);
LABEL_723:
          v364 = (char)v364;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_812;
        v83 = objc_alloc_init(GEOSuggestionsOptions);
        if (!GEOSuggestionsOptionsReadAllFrom((uint64_t)v83, v39, v8 & 1))
          goto LABEL_811;
        PBReaderRecallMark();
        v84 = 312;
        goto LABEL_480;
      case 47:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v217 = 0;
        v218 = 0;
        v105 = 0;
        *(_QWORD *)(a1 + 444) |= 0x1000uLL;
        while (2)
        {
          v219 = *v53;
          v220 = *(_QWORD *)&v39[v219];
          v221 = v220 + 1;
          if (v220 == -1 || v221 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v222 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v220);
            *(_QWORD *)&v39[v219] = v221;
            v105 |= (unint64_t)(v222 & 0x7F) << v217;
            if (v222 < 0)
            {
              v217 += 7;
              v64 = v218++ >= 9;
              if (v64)
              {
                LODWORD(v105) = 0;
                goto LABEL_601;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          LODWORD(v105) = 0;
LABEL_601:
        v362 = 404;
        goto LABEL_671;
      case 48:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v223 = 0;
        v224 = 0;
        v225 = 0;
        *(_QWORD *)(a1 + 444) |= 0x800000000uLL;
        while (2)
        {
          v226 = *v53;
          v227 = *(_QWORD *)&v39[v226];
          v228 = v227 + 1;
          if (v227 == -1 || v228 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v229 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v227);
            *(_QWORD *)&v39[v226] = v228;
            v225 |= (unint64_t)(v229 & 0x7F) << v223;
            if (v229 < 0)
            {
              v223 += 7;
              v64 = v224++ >= 9;
              if (v64)
              {
                v225 = 0;
                goto LABEL_605;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v225 = 0;
LABEL_605:
        v360 = v225 != 0;
        v361 = 439;
        goto LABEL_676;
      case 49:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v230 = 0;
        v231 = 0;
        v232 = 0;
        *(_QWORD *)(a1 + 444) |= 0x40000000uLL;
        while (2)
        {
          v233 = *v53;
          v234 = *(_QWORD *)&v39[v233];
          v235 = v234 + 1;
          if (v234 == -1 || v235 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v236 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v234);
            *(_QWORD *)&v39[v233] = v235;
            v232 |= (unint64_t)(v236 & 0x7F) << v230;
            if (v236 < 0)
            {
              v230 += 7;
              v64 = v231++ >= 9;
              if (v64)
              {
                v232 = 0;
                goto LABEL_609;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v232 = 0;
LABEL_609:
        v360 = v232 != 0;
        v361 = 434;
        goto LABEL_676;
      case 50:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v237 = 0;
        v238 = 0;
        v239 = 0;
        *(_QWORD *)(a1 + 444) |= 0x4000000uLL;
        while (2)
        {
          v240 = *v53;
          v241 = *(_QWORD *)&v39[v240];
          v242 = v241 + 1;
          if (v241 == -1 || v242 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v243 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v241);
            *(_QWORD *)&v39[v240] = v242;
            v239 |= (unint64_t)(v243 & 0x7F) << v237;
            if (v243 < 0)
            {
              v237 += 7;
              v64 = v238++ >= 9;
              if (v64)
              {
                v239 = 0;
                goto LABEL_613;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v239 = 0;
LABEL_613:
        v360 = v239 != 0;
        v361 = 430;
        goto LABEL_676;
      case 52:
        if (!v69 || (*(_QWORD *)(a1 + 444) & 0x100000000000000) != 0)
          goto LABEL_525;
        PBReaderReadString();
        v83 = (GEOAddress *)objc_claimAutoreleasedReturnValue();
        if (v83)
          -[GEOPlaceSearchRequest _addNoFlagsLimitToCountryCodeIso2:](a1, v83);
        goto LABEL_409;
      case 53:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v244 = 0;
        v245 = 0;
        v246 = 0;
        *(_QWORD *)(a1 + 444) |= 0x200000000uLL;
        while (2)
        {
          v247 = *v53;
          v248 = *(_QWORD *)&v39[v247];
          v249 = v248 + 1;
          if (v248 == -1 || v249 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v250 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v248);
            *(_QWORD *)&v39[v247] = v249;
            v246 |= (unint64_t)(v250 & 0x7F) << v244;
            if (v250 < 0)
            {
              v244 += 7;
              v64 = v245++ >= 9;
              if (v64)
              {
                v246 = 0;
                goto LABEL_617;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v246 = 0;
LABEL_617:
        v360 = v246 != 0;
        v361 = 437;
        goto LABEL_676;
      case 100:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v251 = 0;
        v252 = 0;
        v253 = 0;
        *(_QWORD *)(a1 + 444) |= 2uLL;
        while (2)
        {
          v254 = *v53;
          v255 = *(_QWORD *)&v39[v254];
          v256 = v255 + 1;
          if (v255 == -1 || v256 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v257 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v255);
            *(_QWORD *)&v39[v254] = v256;
            v253 |= (unint64_t)(v257 & 0x7F) << v251;
            if (v257 < 0)
            {
              v251 += 7;
              v64 = v252++ >= 9;
              if (v64)
              {
                v253 = 0;
                goto LABEL_621;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v253 = 0;
LABEL_621:
        v363 = 184;
        goto LABEL_650;
      case 101:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v258 = 0;
        v259 = 0;
        v260 = 0;
        *(_QWORD *)(a1 + 444) |= 0x2000000uLL;
        while (2)
        {
          v261 = *v53;
          v262 = *(_QWORD *)&v39[v261];
          v263 = v262 + 1;
          if (v262 == -1 || v263 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v264 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v262);
            *(_QWORD *)&v39[v261] = v263;
            v260 |= (unint64_t)(v264 & 0x7F) << v258;
            if (v264 < 0)
            {
              v258 += 7;
              v64 = v259++ >= 9;
              if (v64)
              {
                v260 = 0;
                goto LABEL_625;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v260 = 0;
LABEL_625:
        v360 = v260 != 0;
        v361 = 429;
        goto LABEL_676;
      case 102:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v265 = 0;
        v266 = 0;
        v267 = 0;
        *(_QWORD *)(a1 + 444) |= 0x10000uLL;
        while (2)
        {
          v268 = *v53;
          v269 = *(_QWORD *)&v39[v268];
          v270 = v269 + 1;
          if (v269 == -1 || v270 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v271 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v269);
            *(_QWORD *)&v39[v268] = v270;
            v267 |= (unint64_t)(v271 & 0x7F) << v265;
            if (v271 < 0)
            {
              v265 += 7;
              v64 = v266++ >= 9;
              if (v64)
              {
                v267 = 0;
                goto LABEL_629;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v267 = 0;
LABEL_629:
        v360 = v267 != 0;
        v361 = 420;
        goto LABEL_676;
      case 103:
        if (!v69 || (*(_BYTE *)(a1 + 452) & 1) != 0)
          goto LABEL_525;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_812;
        v83 = objc_alloc_init(GEOSearchSubstring);
        if (!GEOSearchSubstringReadAllFrom(v83, v39))
          goto LABEL_811;
        PBReaderRecallMark();
        -[GEOPlaceSearchRequest _addNoFlagsSearchSubstring:](a1, v83);
        goto LABEL_409;
      case 104:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v272 = 0;
        v273 = 0;
        v274 = 0;
        *(_QWORD *)(a1 + 444) |= 0x200000uLL;
        while (2)
        {
          v275 = *v53;
          v276 = *(_QWORD *)&v39[v275];
          v277 = v276 + 1;
          if (v276 == -1 || v277 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v278 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v276);
            *(_QWORD *)&v39[v275] = v277;
            v274 |= (unint64_t)(v278 & 0x7F) << v272;
            if (v278 < 0)
            {
              v272 += 7;
              v64 = v273++ >= 9;
              if (v64)
              {
                v274 = 0;
                goto LABEL_633;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v274 = 0;
LABEL_633:
        v360 = v274 != 0;
        v361 = 425;
        goto LABEL_676;
      case 105:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x4000000000000000) == 0)
        {
          PBReaderReadString();
          v85 = objc_claimAutoreleasedReturnValue();
          v86 = 272;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_812;
        v364 = (2 * *(_QWORD *)(a1 + 444)) >> 56;
        goto LABEL_724;
      case 106:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x2000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_812;
          v364 = (4 * *(_QWORD *)(a1 + 444)) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_812;
        v83 = objc_alloc_init(GEOSearchSubstring);
        if (!GEOSearchSubstringReadAllFrom(v83, v39))
          goto LABEL_811;
        PBReaderRecallMark();
        v84 = 264;
        goto LABEL_480;
      case 107:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v279 = 0;
        v280 = 0;
        v281 = 0;
        *(_QWORD *)(a1 + 444) |= 0x10000000uLL;
        while (2)
        {
          v282 = *v53;
          v283 = *(_QWORD *)&v39[v282];
          v284 = v283 + 1;
          if (v283 == -1 || v284 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v285 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v283);
            *(_QWORD *)&v39[v282] = v284;
            v281 |= (unint64_t)(v285 & 0x7F) << v279;
            if (v285 < 0)
            {
              v279 += 7;
              v64 = v280++ >= 9;
              if (v64)
              {
                v281 = 0;
                goto LABEL_637;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v281 = 0;
LABEL_637:
        v360 = v281 != 0;
        v361 = 432;
        goto LABEL_676;
      case 108:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x1000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_812;
          v364 = (8 * *(_QWORD *)(a1 + 444)) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_812;
        v83 = objc_alloc_init(GEOAddress);
        if (!GEOAddressReadAllFrom((uint64_t)v83, v39, v8 & 1))
          goto LABEL_811;
        PBReaderRecallMark();
        v84 = 256;
        goto LABEL_480;
      case 109:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v286 = 0;
        v287 = 0;
        v288 = 0;
        *(_QWORD *)(a1 + 444) |= 0x100000000uLL;
        while (2)
        {
          v289 = *v53;
          v290 = *(_QWORD *)&v39[v289];
          v291 = v290 + 1;
          if (v290 == -1 || v291 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v292 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v290);
            *(_QWORD *)&v39[v289] = v291;
            v288 |= (unint64_t)(v292 & 0x7F) << v286;
            if (v292 < 0)
            {
              v286 += 7;
              v64 = v287++ >= 9;
              if (v64)
              {
                v288 = 0;
                goto LABEL_641;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v288 = 0;
LABEL_641:
        v360 = v288 != 0;
        v361 = 436;
        goto LABEL_676;
      case 110:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x20000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_812;
          v364 = (uint64_t)(*(_QWORD *)(a1 + 444) << 10) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_812;
        v83 = objc_alloc_init(GEOIndexQueryNode);
        if (!GEOIndexQueryNodeReadAllFrom((uint64_t)v83, v39, v8 & 1))
          goto LABEL_811;
        PBReaderRecallMark();
        v84 = 192;
        goto LABEL_480;
      case 111:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v293 = 0;
        v294 = 0;
        v295 = 0;
        *(_QWORD *)(a1 + 444) |= 0x100000uLL;
        while (2)
        {
          v296 = *v53;
          v297 = *(_QWORD *)&v39[v296];
          v298 = v297 + 1;
          if (v297 == -1 || v298 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v299 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v297);
            *(_QWORD *)&v39[v296] = v298;
            v295 |= (unint64_t)(v299 & 0x7F) << v293;
            if (v299 < 0)
            {
              v293 += 7;
              v64 = v294++ >= 9;
              if (v64)
              {
                v295 = 0;
                goto LABEL_645;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v295 = 0;
LABEL_645:
        v360 = v295 != 0;
        v361 = 424;
        goto LABEL_676;
      case 112:
        if (!v69 || (*(_BYTE *)(a1 + 452) & 4) != 0)
        {
LABEL_525:
          v358 = PBReaderSkipValueWithTag();
          v34 = (int *)MEMORY[0x1E0D82BD8];
          if ((v358 & 1) == 0)
            goto LABEL_812;
          goto LABEL_726;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_812;
        v83 = objc_alloc_init(GEOGeoServiceTag);
        if (!GEOGeoServiceTagReadAllFrom((uint64_t)v83, v39))
          goto LABEL_811;
        PBReaderRecallMark();
        -[GEOPlaceSearchRequest _addNoFlagsServiceTag:](a1, v83);
LABEL_409:

        goto LABEL_725;
      case 113:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v300 = 0;
        v301 = 0;
        v253 = 0;
        *(_QWORD *)(a1 + 444) |= 4uLL;
        while (2)
        {
          v302 = *v53;
          v303 = *(_QWORD *)&v39[v302];
          v304 = v303 + 1;
          if (v303 == -1 || v304 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v305 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v303);
            *(_QWORD *)&v39[v302] = v304;
            v253 |= (unint64_t)(v305 & 0x7F) << v300;
            if (v305 < 0)
            {
              v300 += 7;
              v64 = v301++ >= 9;
              if (v64)
              {
                v253 = 0;
                goto LABEL_649;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v253 = 0;
LABEL_649:
        v363 = 208;
LABEL_650:
        *(_QWORD *)(a1 + v363) = v253;
        goto LABEL_726;
      case 114:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x80000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_812;
          v364 = *(char *)(a1 + 450);
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_812;
        v83 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v83, v39))
          goto LABEL_811;
        PBReaderRecallMark();
        v84 = 216;
        goto LABEL_480;
      case 115:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v306 = 0;
        v307 = 0;
        v105 = 0;
        *(_QWORD *)(a1 + 444) |= 0x80uLL;
        while (2)
        {
          v308 = *v53;
          v309 = *(_QWORD *)&v39[v308];
          v310 = v309 + 1;
          if (v309 == -1 || v310 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v311 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v309);
            *(_QWORD *)&v39[v308] = v310;
            v105 |= (unint64_t)(v311 & 0x7F) << v306;
            if (v311 < 0)
            {
              v306 += 7;
              v64 = v307++ >= 9;
              if (v64)
              {
                LODWORD(v105) = 0;
                goto LABEL_654;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          LODWORD(v105) = 0;
LABEL_654:
        v362 = 384;
        goto LABEL_671;
      case 117:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v312 = 0;
        v313 = 0;
        v314 = 0;
        *(_QWORD *)(a1 + 444) |= 0x400000uLL;
        while (2)
        {
          v315 = *v53;
          v316 = *(_QWORD *)&v39[v315];
          v317 = v316 + 1;
          if (v316 == -1 || v317 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v318 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v316);
            *(_QWORD *)&v39[v315] = v317;
            v314 |= (unint64_t)(v318 & 0x7F) << v312;
            if (v318 < 0)
            {
              v312 += 7;
              v64 = v313++ >= 9;
              if (v64)
              {
                v314 = 0;
                goto LABEL_658;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v314 = 0;
LABEL_658:
        v360 = v314 != 0;
        v361 = 426;
        goto LABEL_676;
      case 118:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v319 = 0;
        v320 = 0;
        v105 = 0;
        *(_QWORD *)(a1 + 444) |= 0x2000uLL;
        while (2)
        {
          v321 = *v53;
          v322 = *(_QWORD *)&v39[v321];
          v323 = v322 + 1;
          if (v322 == -1 || v323 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v324 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v322);
            *(_QWORD *)&v39[v321] = v323;
            v105 |= (unint64_t)(v324 & 0x7F) << v319;
            if (v324 < 0)
            {
              v319 += 7;
              v64 = v320++ >= 9;
              if (v64)
              {
                LODWORD(v105) = 0;
                goto LABEL_662;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          LODWORD(v105) = 0;
LABEL_662:
        v362 = 408;
        goto LABEL_671;
      case 119:
        if (!v69 || (*(_QWORD *)(a1 + 444) & 0x80000000000) != 0)
          goto LABEL_527;
        if (v66 != 2)
        {
          v380 = 0;
          v381 = 0;
          v382 = 0;
          while (1)
          {
            v383 = *v53;
            v384 = *(_QWORD *)&v39[v383];
            v385 = v384 + 1;
            if (v384 == -1 || v385 > *(_QWORD *)&v39[*v34])
              break;
            v386 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v384);
            *(_QWORD *)&v39[v383] = v385;
            v382 |= (unint64_t)(v386 & 0x7F) << v380;
            if (v386 < 0)
            {
              v380 += 7;
              v64 = v381++ >= 9;
              if (!v64)
                continue;
            }
            goto LABEL_758;
          }
LABEL_757:
          v39[*v55] = 1;
LABEL_758:
          PBRepeatedInt32Add();
          goto LABEL_725;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_812;
        while (1)
        {
          v325 = (int *)MEMORY[0x1E0D82BD8];
          if (*(_QWORD *)&v39[*v53] >= *(_QWORD *)&v39[*MEMORY[0x1E0D82BD8]] || v39[*v55])
            break;
          v326 = 0;
          v327 = 0;
          v328 = 0;
          v329 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v330 = *v53;
            v331 = *(_QWORD *)&v39[v330];
            v332 = v331 + 1;
            if (v331 == -1 || v332 > *(_QWORD *)&v39[*v325])
              break;
            v333 = *(_BYTE *)(*(_QWORD *)&v39[*v329] + v331);
            *(_QWORD *)&v39[v330] = v332;
            v328 |= (unint64_t)(v333 & 0x7F) << v326;
            if (v333 < 0)
            {
              v326 += 7;
              v64 = v327++ >= 9;
              if (!v64)
                continue;
            }
            goto LABEL_461;
          }
          v39[*v55] = 1;
LABEL_461:
          PBRepeatedInt32Add();
        }
LABEL_529:
        PBReaderRecallMark();
        v34 = (int *)MEMORY[0x1E0D82BD8];
        goto LABEL_726;
      case 120:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x8000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_812;
          v364 = *(char *)(a1 + 451);
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_812;
        v83 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v83, v39))
          goto LABEL_811;
        PBReaderRecallMark();
        v84 = 280;
        goto LABEL_480;
      case 121:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v334 = 0;
        v335 = 0;
        v336 = 0;
        *(_QWORD *)(a1 + 444) |= 0x800000uLL;
        while (2)
        {
          v337 = *v53;
          v338 = *(_QWORD *)&v39[v337];
          v339 = v338 + 1;
          if (v338 == -1 || v339 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v340 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v338);
            *(_QWORD *)&v39[v337] = v339;
            v336 |= (unint64_t)(v340 & 0x7F) << v334;
            if (v340 < 0)
            {
              v334 += 7;
              v64 = v335++ >= 9;
              if (v64)
              {
                v336 = 0;
                goto LABEL_666;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v336 = 0;
LABEL_666:
        v360 = v336 != 0;
        v361 = 427;
        goto LABEL_676;
      case 122:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x100000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_812;
          v364 = (uint64_t)(*(_QWORD *)(a1 + 444) << 19) >> 56;
LABEL_724:
          v6 += v364 >> 7;
LABEL_725:
          v34 = (int *)MEMORY[0x1E0D82BD8];
LABEL_726:
          if (!(v397 & 1 | (v6 != 0)))
          {
            v54 = 1;
            v50 = v399;
LABEL_765:
            if ((v50 & 1) == 0)
              goto LABEL_767;
LABEL_766:
            *(_QWORD *)(a1 + 444) |= 0x10000000000uLL;
            goto LABEL_767;
          }
          v50 = v399;
          v56 = (int *)MEMORY[0x1E0D82BB8];
          if (*(_QWORD *)&v39[*v53] >= *(_QWORD *)&v39[*v34])
            goto LABEL_762;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_812;
        v83 = objc_alloc_init(GEOAdditionalEnabledMarkets);
        if (GEOAdditionalEnabledMarketsReadAllFrom((uint64_t)v83, v39, v8 & 1))
        {
          PBReaderRecallMark();
          v84 = 112;
LABEL_480:
          v341 = *(void **)(a1 + v84);
          *(_QWORD *)(a1 + v84) = v83;
LABEL_504:

          --v6;
          goto LABEL_725;
        }
LABEL_811:

LABEL_812:
        v54 = 0;
        if ((v399 & 1) != 0)
          goto LABEL_766;
LABEL_767:
        if (v51 & 1 | ((v54 & 1) == 0))
        {
          v388 = *(_BYTE *)(a1 + 452) | 0x7F;
          *(_QWORD *)(a1 + 444) |= 0xFFFFFE0000000000;
          *(_BYTE *)(a1 + 452) = v388;
        }
        else if (v52)
        {
          while (2)
          {
            while (1)
            {
              v390 = *v52++;
              v389 = v390;
              if (v390 <= 51)
                break;
              switch(v389)
              {
                case 'g':
                  v392 = 0;
                  v391 = 1;
                  goto LABEL_804;
                case 'h':
                case 'k':
                case 'm':
                case 'o':
                case 'q':
                case 's':
                case 't':
                case 'u':
                case 'v':
                case 'y':
                case '{':
                case '|':
                  continue;
                case 'i':
                  v391 = 0;
                  v392 = 0x4000000000000000;
                  goto LABEL_804;
                case 'j':
                  v391 = 0;
                  v392 = 0x2000000000000000;
                  goto LABEL_804;
                case 'l':
                  v391 = 0;
                  v392 = 0x1000000000000000;
                  goto LABEL_804;
                case 'n':
                  v391 = 0;
                  v392 = 0x20000000000000;
                  goto LABEL_804;
                case 'p':
                  v392 = 0;
                  v391 = 4;
                  goto LABEL_804;
                case 'r':
                  v391 = 0;
                  v392 = 0x80000000000000;
                  goto LABEL_804;
                case 'w':
                  v391 = 0;
                  v392 = 0x80000000000;
                  goto LABEL_804;
                case 'x':
                  v391 = 0;
                  v392 = 0x8000000000000000;
                  goto LABEL_804;
                case 'z':
                  v391 = 0;
                  v392 = 0x100000000000;
                  goto LABEL_804;
                case '}':
                  v391 = 0;
                  v392 = 0x8000000000000;
                  goto LABEL_804;
                case '~':
                  v392 = 0;
                  v391 = 32;
                  goto LABEL_804;
                default:
                  if (v389 != 52)
                    continue;
                  v391 = 0;
                  v392 = 0x100000000000000;
LABEL_804:
                  v393 = *(_BYTE *)(a1 + 452) | v391;
                  *(_QWORD *)(a1 + 444) |= v392;
                  *(_BYTE *)(a1 + 452) = v393;
                  break;
              }
            }
            v391 = 0;
            v392 = 0x40000000000;
            switch(v389)
            {
              case 0:
                break;
              case 1:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
              case 18:
              case 19:
              case 21:
                continue;
              case 2:
                goto LABEL_804;
              case 3:
                v391 = 0;
                v392 = 0x200000000000;
                goto LABEL_804;
              case 4:
                v391 = 0;
                v392 = 0x200000000000000;
                goto LABEL_804;
              case 5:
                v392 = 0;
                v391 = 2;
                goto LABEL_804;
              case 6:
                v391 = 0;
                v392 = 0x400000000000000;
                goto LABEL_804;
              case 7:
                v391 = 0;
                v392 = 0x20000000000;
                goto LABEL_804;
              case 17:
                v391 = 0;
                v392 = 0x10000000000000;
                goto LABEL_804;
              case 20:
                v392 = 0;
                v391 = 64;
                goto LABEL_804;
              case 22:
                v391 = 0;
                v392 = 0x400000000000;
                goto LABEL_804;
              default:
                switch(v389)
                {
                  case 27:
                    v392 = 0;
                    v391 = 16;
                    goto LABEL_804;
                  case 28:
                    v391 = 0;
                    v392 = 0x1000000000000;
                    goto LABEL_804;
                  case 29:
                    v391 = 0;
                    v392 = 0x2000000000000;
                    goto LABEL_804;
                  case 30:
                    v391 = 0;
                    v392 = 0x40000000000000;
                    goto LABEL_804;
                  case 31:
                    v391 = 0;
                    v392 = 0x800000000000000;
                    goto LABEL_804;
                  case 42:
                    v391 = 0;
                    v392 = 0x4000000000000;
                    goto LABEL_804;
                  case 43:
                    v391 = 0;
                    v392 = 0x800000000000;
                    goto LABEL_804;
                  case 46:
                    v392 = 0;
                    v391 = 8;
                    goto LABEL_804;
                  default:
                    continue;
                }
                continue;
            }
            break;
          }
        }
        if (v54)
        {
          v387 = v39[*v55] == 0;
          if ((v51 & 1) == 0)
            return v387;
LABEL_809:
          v394 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v387 = 0;
          if ((v51 & 1) != 0)
            goto LABEL_809;
        }
        return v387;
      case 123:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v342 = 0;
        v343 = 0;
        v105 = 0;
        *(_QWORD *)(a1 + 444) |= 0x200uLL;
        while (2)
        {
          v344 = *v53;
          v345 = *(_QWORD *)&v39[v344];
          v346 = v345 + 1;
          if (v345 == -1 || v346 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v347 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v345);
            *(_QWORD *)&v39[v344] = v346;
            v105 |= (unint64_t)(v347 & 0x7F) << v342;
            if (v347 < 0)
            {
              v342 += 7;
              v64 = v343++ >= 9;
              if (v64)
              {
                LODWORD(v105) = 0;
                goto LABEL_670;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          LODWORD(v105) = 0;
LABEL_670:
        v362 = 392;
LABEL_671:
        *(_DWORD *)(a1 + v362) = v105;
        goto LABEL_726;
      case 124:
        if ((v401 & 1) == 0)
          goto LABEL_527;
        v348 = 0;
        v349 = 0;
        v350 = 0;
        *(_QWORD *)(a1 + 444) |= 0x2000000000uLL;
        while (2)
        {
          v351 = *v53;
          v352 = *(_QWORD *)&v39[v351];
          v353 = v352 + 1;
          if (v352 == -1 || v353 > *(_QWORD *)&v39[*v34])
          {
            v39[*v55] = 1;
          }
          else
          {
            v354 = *(_BYTE *)(*(_QWORD *)&v39[*v56] + v352);
            *(_QWORD *)&v39[v351] = v353;
            v350 |= (unint64_t)(v354 & 0x7F) << v348;
            if (v354 < 0)
            {
              v348 += 7;
              v64 = v349++ >= 9;
              if (v64)
              {
                v350 = 0;
                goto LABEL_675;
              }
              continue;
            }
          }
          break;
        }
        if (v39[*v55])
          v350 = 0;
LABEL_675:
        v360 = v350 != 0;
        v361 = 441;
LABEL_676:
        *(_BYTE *)(a1 + v361) = v360;
        goto LABEL_726;
      case 125:
        if (!v69)
          goto LABEL_527;
        if ((*(_QWORD *)(a1 + 444) & 0x8000000000000) == 0)
        {
          PBReaderReadString();
          v85 = objc_claimAutoreleasedReturnValue();
          v86 = 168;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_812;
        v364 = (uint64_t)(*(_QWORD *)(a1 + 444) << 12) >> 56;
        goto LABEL_724;
      case 126:
        if (!v69)
          goto LABEL_527;
        if ((*(_BYTE *)(a1 + 452) & 0x20) == 0)
        {
          PBReaderReadString();
          v85 = objc_claimAutoreleasedReturnValue();
          v86 = 352;
LABEL_503:
          v341 = *(void **)(a1 + v86);
          *(_QWORD *)(a1 + v86) = v85;
          goto LABEL_504;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_812;
        LOBYTE(v364) = 4 * *(_BYTE *)(a1 + 452);
        goto LABEL_723;
      default:
        if ((v50 & 1) == 0 || (*(_QWORD *)(a1 + 444) & 0x10000000000) != 0)
        {
LABEL_527:
          v359 = PBReaderSkipValueWithTag();
          v34 = (int *)MEMORY[0x1E0D82BD8];
          if ((v359 & 1) == 0)
            goto LABEL_812;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v355 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v356 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v355;

          }
          v357 = PBUnknownFieldAdd();
          v34 = (int *)MEMORY[0x1E0D82BD8];
          if (!v357)
          {
            v54 = 0;
            goto LABEL_766;
          }
        }
        goto LABEL_726;
    }
  }
}

void sub_18945E450(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18945E59C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18945E6EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18945E830(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18945E97C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18945F7C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18945FC20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18945FDF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894600F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189460234(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189460380(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894604CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189460618(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189460AC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189460C10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189461014(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18946197C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189461EFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894622C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189462414(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894625F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894627CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894629AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189462D78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18946355C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189463910(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189463AEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189463EB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189464004(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189468B70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPlaceSearchRequestCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 120), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 232), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 240), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 128), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 152), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 136), "readAll:", 1);
  -[GEOSuggestionsOptions readAll:](*(_QWORD *)(a1 + 312), 1);
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v2 = *(id *)(a1 + 288);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v18;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v18 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v4);
  }

  objc_msgSend(*(id *)(a1 + 264), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 256), "readAll:", 1);
  -[GEOIndexQueryNode readAll:](*(_QWORD *)(a1 + 192), 1);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v7 = *(id *)(a1 + 304);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v11++), "readAll:", 1, (_QWORD)v13);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
    }
    while (v9);
  }

  objc_msgSend(*(id *)(a1 + 216), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 280), "readAll:", 1);
  return objc_msgSend(*(id *)(a1 + 112), "readAll:", 1);
}

BOOL GEOPlaceSearchRequestReadAllFrom(uint64_t a1, void *a2, int a3)
{
  _BOOL8 Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 372))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPlaceSearchRequestReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 376));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 368) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 372) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPlaceSearchRequestReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPlaceSearchRequestReadAllFrom_initialTag;
  Specified = GEOPlaceSearchRequestReadSpecified(a1, (char *)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPlaceSearchRequestCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 376));
  return Specified;
}

void sub_189468F74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceSearchRequestReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPlaceSearchRequestReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189468FD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchSubstringIsValid(char *a1)
{
  _BOOL4 v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  _BOOL8 v37;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = 0;
  v40 = 0;
  v3 = (int *)MEMORY[0x1E0D82BF0];
  v39 = 0;
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v5])
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *v3;
        v11 = *(_QWORD *)&a1[v10];
        v12 = v11 + 1;
        if (v11 == -1 || v12 > *(_QWORD *)&a1[*v4])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v11);
        *(_QWORD *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        if (v8++ >= 9)
        {
          v9 = 0;
          v15 = a1[*v5];
          goto LABEL_14;
        }
      }
      a1[*v5] = 1;
LABEL_12:
      v15 = a1[*v5];
      if (a1[*v5])
        v9 = 0;
LABEL_14:
      v16 = v9 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v9 >> 3))
      {
        case 1u:
          v18 = v39;
          if ((_DWORD)v39)
          {
            if ((_DWORD)v39 == 1)
              goto LABEL_74;
            if (HIDWORD(v39))
            {
              if (HIDWORD(v39) == 1 || v40)
                goto LABEL_74;
              v18 = 2;
            }
            else
            {
              v18 = 1;
            }
          }
          *((_DWORD *)&v39 + v18) = 1;
          if (v16)
            goto LABEL_74;
          v21 = 0;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)&a1[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&a1[*v4])
              goto LABEL_67;
            v25 = *(char *)(*(_QWORD *)&a1[*v6] + v23);
            *(_QWORD *)&a1[v22] = v24;
            if (v25 < 0)
            {
              v26 = v21++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_68;
          }
        case 2u:
          v19 = v39;
          if (!(_DWORD)v39)
            goto LABEL_50;
          if ((_DWORD)v39 == 2)
            goto LABEL_74;
          if (HIDWORD(v39))
          {
            if (HIDWORD(v39) == 2 || v40)
              goto LABEL_74;
            v19 = 2;
          }
          else
          {
            v19 = 1;
          }
LABEL_50:
          *((_DWORD *)&v39 + v19) = 2;
          if (v16)
            goto LABEL_74;
          v27 = 0;
          while (1)
          {
            v28 = *v3;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v4])
              goto LABEL_67;
            v31 = *(char *)(*(_QWORD *)&a1[*v6] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v26 = v27++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_68;
          }
        case 3u:
          v20 = v39;
          if (!(_DWORD)v39)
            goto LABEL_59;
          if ((_DWORD)v39 == 3)
            goto LABEL_74;
          if (HIDWORD(v39))
          {
            if (HIDWORD(v39) == 3 || v40)
            {
LABEL_74:
              v37 = 0;
              goto LABEL_73;
            }
            v20 = 2;
          }
          else
          {
            v20 = 1;
          }
LABEL_59:
          *((_DWORD *)&v39 + v20) = 3;
          if (v16)
            goto LABEL_74;
          v32 = 0;
          while (1)
          {
            v33 = *v3;
            v34 = *(_QWORD *)&a1[v33];
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)&a1[*v4])
              break;
            v36 = *(char *)(*(_QWORD *)&a1[*v6] + v34);
            *(_QWORD *)&a1[v33] = v35;
            if (v36 < 0)
            {
              v26 = v32++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_68;
          }
LABEL_67:
          a1[*v5] = 1;
LABEL_68:
          if (*(_QWORD *)&a1[*v3] >= *(_QWORD *)&a1[*v4])
            goto LABEL_69;
          break;
        case 4u:
          if (v16 == 2)
            goto LABEL_38;
          goto LABEL_74;
        default:
LABEL_38:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_74;
          goto LABEL_68;
      }
    }
LABEL_69:
    v2 = v40 != 0;
  }
  if (a1[*v5])
    v37 = 0;
  else
    v37 = v2;
LABEL_73:
  PBReaderRecallMark();
  return v37;
}

void sub_18946A084(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPlaceSearchRequestIsDirty(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 376));
  v2 = *(unsigned __int8 *)(a1 + 452);
  v3 = *(_QWORD *)(a1 + 444);
  if (v3 & 0x40000000000 | v2 & 0x80)
    return 1;
  if ((v3 & 0x200000000000) != 0)
  {
    if (GEOAddressIsDirty(*(_QWORD *)(a1 + 120)))
      return 1;
    v3 = *(_QWORD *)(a1 + 444);
    v2 = *(unsigned __int8 *)(a1 + 452);
  }
  if ((v3 & 0x200000000000000) != 0)
  {
    if (GEOLocationIsDirty(*(os_unfair_lock_s **)(a1 + 232)))
      return 1;
    v3 = *(_QWORD *)(a1 + 444);
    v2 = *(unsigned __int8 *)(a1 + 452);
  }
  if (v3 & 0x410020000000000 | v2 & 0x42)
    return 1;
  if ((v3 & 0x400000000000) != 0)
  {
    if (GEOBusinessOptionsIsDirty(*(_QWORD *)(a1 + 128)))
      return 1;
    v3 = *(_QWORD *)(a1 + 444);
    v2 = *(unsigned __int8 *)(a1 + 452);
  }
  if (v3 & 0x847000000000000 | v2 & 0x10)
    return 1;
  if ((v3 & 0x800000000000) != 0)
  {
    if (GEOClientCapabilitiesIsDirty(*(_QWORD *)(a1 + 136)))
      return 1;
    v3 = *(_QWORD *)(a1 + 444);
    v2 = *(unsigned __int8 *)(a1 + 452);
  }
  if ((v2 & 8) != 0)
  {
    if (GEOSuggestionsOptionsIsDirty(*(_QWORD *)(a1 + 312)))
      return 1;
    v3 = *(_QWORD *)(a1 + 444);
    v2 = *(unsigned __int8 *)(a1 + 452);
  }
  if (v3 & 0x6100000000000000 | v2 & 1)
    return 1;
  if ((v3 & 0x1000000000000000) != 0)
  {
    if (GEOAddressIsDirty(*(_QWORD *)(a1 + 256)))
      return 1;
    v3 = *(_QWORD *)(a1 + 444);
    v2 = *(unsigned __int8 *)(a1 + 452);
  }
  if ((v3 & 0x20000000000000) != 0)
  {
    if ((GEOIndexQueryNodeIsDirty(*(os_unfair_lock_s **)(a1 + 192)) & 1) != 0)
      return 1;
    v3 = *(_QWORD *)(a1 + 444);
    v2 = *(unsigned __int8 *)(a1 + 452);
  }
  if (v3 & 0x8080080000000000 | v2 & 4)
    return 1;
  if ((v3 & 0x100000000000) == 0)
    goto LABEL_31;
  if (GEOAdditionalEnabledMarketsIsDirty(*(_QWORD *)(a1 + 112)))
    return 1;
  v3 = *(_QWORD *)(a1 + 444);
  v2 = *(unsigned __int8 *)(a1 + 452);
LABEL_31:
  if ((v3 & 0x8000000000000) != 0)
    return 1;
  return (v2 >> 5) & 1;
}

os_unfair_lock_s *GEOPlaceSearchRequestIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPlaceSearchRequestIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 94);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_18946BD50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18946E438(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18946ED20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceSearchResponseReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  BOOL v30;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  GEOPlaceResult *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  __int16 v72;
  int v73;
  int v74;
  __int16 v75;
  void *v76;
  int v78;
  int *v79;
  char v80;
  char v81;
  char v82;
  BOOL v83;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 84);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 80));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 104)), (uint16x4_t)0xFFF7FFF8FFF9FFFCLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 104) >> 5) & 1)+ ((*(_WORD *)(a1 + 104) >> 6) & 1)+ ((*(_WORD *)(a1 + 104) >> 3) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 3;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v80 = v17;
        v81 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v82 = (v19 == 0) | v18;
        v83 = v18;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_128;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      v30 = v24++ >= 9;
      if (v30)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_128:
      v78 = 1;
      goto LABEL_129;
    }
    v33 = v25 >> 3;
    v34 = v83;
    if ((v82 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_102;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (2)
        {
          v42 = *v20;
          v43 = *(_QWORD *)(v3 + v42);
          v44 = v43 + 1;
          if (v43 == -1 || v44 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v43);
            *(_QWORD *)(v3 + v42) = v44;
            v41 |= (unint64_t)(v45 & 0x7F) << v39;
            if (v45 < 0)
            {
              v39 += 7;
              v30 = v40++ >= 9;
              if (v30)
              {
                LODWORD(v41) = 0;
                goto LABEL_107;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v41) = 0;
LABEL_107:
        v71 = 96;
        goto LABEL_116;
      case 2:
        if (!v34 || (*(_WORD *)(a1 + 104) & 0x80) != 0)
          goto LABEL_102;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_150;
        v52 = objc_alloc_init(GEOPlaceResult);
        if (!GEOPlaceResultReadAllFrom((uint64_t)v52, (void *)v3, v10 & 1))
          goto LABEL_149;
        PBReaderRecallMark();
        -[GEOPlaceSearchResponse _addNoFlagsPlaceResult:](a1, v52);
        goto LABEL_79;
      case 3:
        if (!v34)
          goto LABEL_102;
        if ((*(_WORD *)(a1 + 104) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_150;
          v72 = *(_WORD *)(a1 + 104) << 11;
LABEL_123:
          v7 += v72 >> 15;
        }
        else
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_150;
          v52 = objc_alloc_init(GEOMapRegion);
          if (!GEOMapRegionReadAllFrom((uint64_t)v52, (void *)v3))
            goto LABEL_149;
          PBReaderRecallMark();
          v53 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v52;

          --v7;
        }
        goto LABEL_124;
      case 4:
      case 5:
      case 6:
      case 8:
LABEL_80:
        if ((v80 & 1) == 0 || (*(_WORD *)(a1 + 104) & 8) != 0)
          goto LABEL_102;
        if (!*(_QWORD *)(a1 + 16))
        {
          v56 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v57 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v56;

        }
        v58 = PBUnknownFieldAdd();
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        if (v58)
          goto LABEL_127;
        v78 = 0;
        v79 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        goto LABEL_131;
      case 7:
        if (!v34 || (*(_WORD *)(a1 + 104) & 0x100) != 0)
          goto LABEL_102;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_150;
        v52 = objc_alloc_init(GEOSuggestionEntryList);
        if (!GEOSuggestionEntryListReadAllFrom((uint64_t)v52, (void *)v3, v10 & 1))
          goto LABEL_149;
        PBReaderRecallMark();
        -[GEOPlaceSearchResponse _addNoFlagsSuggestionEntryLists:](a1, v52);
        goto LABEL_79;
      case 9:
        if (!v34)
          goto LABEL_102;
        if ((*(_WORD *)(a1 + 104) & 0x200) == 0)
        {
          PBReaderReadData();
          v54 = objc_claimAutoreleasedReturnValue();
          v55 = 64;
          goto LABEL_93;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_150;
        v72 = *(_WORD *)(a1 + 104) << 6;
        goto LABEL_123;
      case 10:
        if (!v34 || (*(_WORD *)(a1 + 104) & 0x20) != 0)
        {
LABEL_102:
          v70 = PBReaderSkipValueWithTag();
          v22 = (int *)MEMORY[0x1E0D82BB8];
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if ((v70 & 1) != 0)
            goto LABEL_127;
          v78 = 0;
LABEL_129:
          v79 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
          goto LABEL_130;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_150;
        v52 = objc_alloc_init(GEONamedFeature);
        if (GEONamedFeatureReadAllFrom(v52, (void *)v3))
        {
          PBReaderRecallMark();
          -[GEOPlaceSearchResponse _addNoFlagsNamedFeatures:](a1, v52);
LABEL_79:

LABEL_124:
          v21 = (int *)MEMORY[0x1E0D82BC8];
          v22 = (int *)MEMORY[0x1E0D82BB8];
LABEL_127:
          if (!(v81 & 1 | (v7 != 0)))
            goto LABEL_128;
          continue;
        }
LABEL_149:

LABEL_150:
        v78 = 0;
        v79 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_130:
        if ((v80 & 1) != 0)
LABEL_131:
          *(_WORD *)(a1 + v79[399]) |= 8u;
        if (v83 || (v78 & 1) == 0)
        {
          *(_WORD *)(a1 + v79[399]) |= 0x80u;
          *(_WORD *)(a1 + v79[399]) |= 0x10u;
          *(_WORD *)(a1 + v79[399]) |= 0x100u;
          *(_WORD *)(a1 + v79[399]) |= 0x200u;
          *(_WORD *)(a1 + v79[399]) |= 0x20u;
          *(_WORD *)(a1 + v79[399]) |= 0x40u;
        }
        else if (v19)
        {
          while (1)
          {
            v74 = *v19++;
            v73 = v74;
            v75 = 128;
            switch(v74)
            {
              case 0:
                goto LABEL_143;
              case 1:
              case 4:
              case 5:
              case 6:
              case 8:
                continue;
              case 2:
                goto LABEL_142;
              case 3:
                v75 = 16;
                goto LABEL_142;
              case 7:
                v75 = 256;
                goto LABEL_142;
              case 9:
                v75 = 512;
                goto LABEL_142;
              case 10:
                v75 = 32;
                goto LABEL_142;
              default:
                if (v73 != 103)
                  continue;
                v75 = 64;
LABEL_142:
                *(_WORD *)(a1 + v79[399]) |= v75;
                break;
            }
          }
        }
LABEL_143:
        if (v78)
          v3 = *(_BYTE *)(v3 + *v21) == 0;
        else
          v3 = 0;
        if (v83)
        {
          v76 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        switch((int)v33)
        {
          case 'd':
            if ((v8 & 1) == 0)
              goto LABEL_102;
            v46 = 0;
            v47 = 0;
            v41 = 0;
            *(_WORD *)(a1 + 104) |= 2u;
            while (2)
            {
              v48 = *v20;
              v49 = *(_QWORD *)(v3 + v48);
              v50 = v49 + 1;
              if (v49 == -1 || v50 > *(_QWORD *)(v3 + *v6))
              {
                *(_BYTE *)(v3 + *v21) = 1;
              }
              else
              {
                v51 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v49);
                *(_QWORD *)(v3 + v48) = v50;
                v41 |= (unint64_t)(v51 & 0x7F) << v46;
                if (v51 < 0)
                {
                  v46 += 7;
                  v30 = v47++ >= 9;
                  if (v30)
                  {
                    LODWORD(v41) = 0;
                    goto LABEL_115;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v21))
              LODWORD(v41) = 0;
LABEL_115:
            v71 = 92;
LABEL_116:
            *(_DWORD *)(a1 + v71) = v41;
            goto LABEL_127;
          case 'e':
            if ((v8 & 1) == 0)
              goto LABEL_102;
            *(_WORD *)(a1 + 104) |= 1u;
            v59 = *v20;
            v60 = *(_QWORD *)(v3 + v59);
            if (v60 <= 0xFFFFFFFFFFFFFFF7 && v60 + 8 <= *(_QWORD *)(v3 + *v6))
            {
              v61 = *(_QWORD *)(*(_QWORD *)(v3 + *v22) + v60);
              *(_QWORD *)(v3 + v59) = v60 + 8;
            }
            else
            {
              *(_BYTE *)(v3 + *v21) = 1;
              v61 = 0;
            }
            *(_QWORD *)(a1 + 72) = v61;
            goto LABEL_127;
          case 'g':
            if (!v34)
              goto LABEL_102;
            if ((*(_WORD *)(a1 + 104) & 0x40) == 0)
            {
              PBReaderReadString();
              v54 = objc_claimAutoreleasedReturnValue();
              v55 = 40;
LABEL_93:
              v62 = *(void **)(a1 + v55);
              *(_QWORD *)(a1 + v55) = v54;

              v22 = (int *)MEMORY[0x1E0D82BB8];
              v21 = (int *)MEMORY[0x1E0D82BC8];
              --v7;
              goto LABEL_127;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_150;
            v72 = *(_WORD *)(a1 + 104) << 9;
            break;
          case 'h':
            if ((v8 & 1) == 0)
              goto LABEL_102;
            v63 = 0;
            v64 = 0;
            v65 = 0;
            *(_WORD *)(a1 + 104) |= 4u;
            while (2)
            {
              v66 = *v20;
              v67 = *(_QWORD *)(v3 + v66);
              v68 = v67 + 1;
              if (v67 == -1 || v68 > *(_QWORD *)(v3 + *v6))
              {
                *(_BYTE *)(v3 + *v21) = 1;
              }
              else
              {
                v69 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v67);
                *(_QWORD *)(v3 + v66) = v68;
                v65 |= (unint64_t)(v69 & 0x7F) << v63;
                if (v69 < 0)
                {
                  v63 += 7;
                  v30 = v64++ >= 9;
                  if (v30)
                  {
                    v65 = 0;
                    goto LABEL_120;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v21))
              v65 = 0;
LABEL_120:
            *(_BYTE *)(a1 + 100) = v65 != 0;
            goto LABEL_127;
          default:
            goto LABEL_80;
        }
        goto LABEL_123;
    }
  }
}

void sub_18946FAC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18946FC04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18946FF34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189470070(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894705C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18947239C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189472464(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPlaceSearchResponseCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v2 = a1[6];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v26;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v26 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
    }
    while (v4);
  }

  objc_msgSend(a1[3], "readAll:", 1);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v7 = a1[7];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v22;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v22 != v10)
          objc_enumerationMutation(v7);
        -[GEOSuggestionEntryList readAll:](*(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v11++), 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
    }
    while (v9);
  }

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v12 = a1[4];
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v18;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v18 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v16++), "readAll:", 1, (_QWORD)v17);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
    }
    while (v14);
  }

}

unint64_t GEOPlaceSearchResponseReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 84))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPlaceSearchResponseReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 80) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 84) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPlaceSearchResponseReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPlaceSearchResponseReadAllFrom_initialTag;
  Specified = GEOPlaceSearchResponseReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPlaceSearchResponseCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
  return Specified;
}

void sub_189472834(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceSearchResponseReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPlaceSearchResponseReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189472894(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPlaceSearchResponseIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  int v37;
  int v38;
  char v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  int v47;
  int v48;
  _BOOL4 AllFrom;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  BOOL v71;
  uint64_t v72;
  _QWORD v74[2];
  uint64_t v75;
  uint64_t v76;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = 0;
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_159;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *v2;
        v11 = *(_QWORD *)&a1[v10];
        v12 = v11 + 1;
        if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v11);
        *(_QWORD *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        v14 = v8++ >= 9;
        if (v14)
        {
          v9 = 0;
          v15 = *v4;
          v16 = a1[v15];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v15 = *v4;
      v16 = a1[v15];
      if (a1[v15])
        v9 = 0;
LABEL_14:
      v17 = v9 & 7;
      if (v16 || v17 == 4)
        goto LABEL_159;
      switch((v9 >> 3))
      {
        case 1u:
          if (v5 || (v9 & 7) != 0)
            goto LABEL_168;
          v19 = 0;
          while (1)
          {
            v20 = *v2;
            v21 = *(_QWORD *)&a1[v20];
            v22 = v21 + 1;
            if (v21 == -1 || v22 > *(_QWORD *)&a1[*v3])
              break;
            v23 = *(char *)(*(_QWORD *)&a1[*v6] + v21);
            *(_QWORD *)&a1[v20] = v22;
            v5 = 1;
            if (v23 < 0)
            {
              v24 = v19++ > 8;
              if (!v24)
                continue;
            }
            goto LABEL_156;
          }
          v5 = 1;
          a1[*v4] = 1;
          goto LABEL_156;
        case 2u:
          if (v17 != 2)
            goto LABEL_168;
          v75 = 0;
          v76 = 0;
          if (!PBReaderPlaceMark() || !GEOPlaceResultIsValid(a1))
            goto LABEL_168;
          goto LABEL_131;
        case 3u:
          if (v17 != 2)
            goto LABEL_168;
          v75 = 0;
          v76 = 0;
          if (!PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
            goto LABEL_168;
          goto LABEL_131;
        case 4u:
        case 5u:
        case 6u:
        case 8u:
          goto LABEL_143;
        case 7u:
          if (v17 != 2 || !PBReaderPlaceMark())
            goto LABEL_168;
          objc_msgSend(a1, "position", 0, 0);
          objc_msgSend(a1, "length");
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_130;
          while (2)
          {
            if (!a1[*v4])
            {
              v30 = 0;
              v31 = 0;
              v32 = 0;
              while (1)
              {
                v33 = *v2;
                v34 = *(_QWORD *)&a1[v33];
                v35 = v34 + 1;
                if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
                  break;
                v36 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v34);
                *(_QWORD *)&a1[v33] = v35;
                v32 |= (unint64_t)(v36 & 0x7F) << v30;
                if ((v36 & 0x80) == 0)
                  goto LABEL_57;
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  v32 = 0;
                  v37 = a1[*v4];
                  goto LABEL_59;
                }
              }
              a1[*v4] = 1;
LABEL_57:
              v37 = a1[*v4];
              if (a1[*v4])
                v32 = 0;
LABEL_59:
              v38 = v32 & 7;
              if (!v37 && v38 != 4)
              {
                switch((v32 >> 3))
                {
                  case 1u:
                    if (v38 != 2 || !PBReaderPlaceMark())
                      goto LABEL_167;
                    objc_msgSend(a1, "position");
                    objc_msgSend(a1, "length");
                    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
                      goto LABEL_107;
LABEL_67:
                    if (a1[*v4])
                      goto LABEL_107;
                    v40 = 0;
                    v41 = 0;
                    v42 = 0;
                    while (1)
                    {
                      v43 = *v2;
                      v44 = *(_QWORD *)&a1[v43];
                      v45 = v44 + 1;
                      if (v44 == -1 || v45 > *(_QWORD *)&a1[*v3])
                        break;
                      v46 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v44);
                      *(_QWORD *)&a1[v43] = v45;
                      v42 |= (unint64_t)(v46 & 0x7F) << v40;
                      if ((v46 & 0x80) == 0)
                        goto LABEL_76;
                      v40 += 7;
                      v14 = v41++ >= 9;
                      if (v14)
                      {
                        v42 = 0;
                        v47 = a1[*v4];
                        goto LABEL_78;
                      }
                    }
                    a1[*v4] = 1;
LABEL_76:
                    v47 = a1[*v4];
                    if (a1[*v4])
                      v42 = 0;
LABEL_78:
                    v48 = v42 & 7;
                    if (v47 || v48 == 4)
                    {
LABEL_107:
                      v51 = a1[*v4];
                      PBReaderRecallMark();
                      if (v51)
                        goto LABEL_167;
                      PBReaderRecallMark();
LABEL_129:
                      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
                        goto LABEL_130;
                      continue;
                    }
                    switch((v42 >> 3))
                    {
                      case 1u:
                        if (v48 != 2)
                          goto LABEL_166;
                        goto LABEL_100;
                      case 2u:
                        if (v48 == 2)
                        {
                          if (PBReaderPlaceMark())
                          {
                            v75 = objc_msgSend(a1, "position");
                            v76 = objc_msgSend(a1, "length");
                            v74[0] = 0;
                            v74[1] = 0;
                            AllFrom = GEOHighlightReadAllFrom((uint64_t)v74, (uint64_t)a1);
                            PBReaderRecallMark();
                            if (AllFrom)
                              goto LABEL_105;
                          }
                        }
                        goto LABEL_166;
                      case 3u:
                        if (v48 == 2)
                          goto LABEL_100;
                        goto LABEL_166;
                      case 4u:
                        if (v48 != 2)
                          goto LABEL_166;
                        v75 = 0;
                        v76 = 0;
                        if (!PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
                          goto LABEL_166;
                        goto LABEL_105;
                      case 5u:
                        if (v48 == 2)
                          goto LABEL_100;
                        goto LABEL_166;
                      case 6u:
                        if (v48 == 2)
                          goto LABEL_100;
                        goto LABEL_166;
                      case 7u:
                        if (v48 == 2)
                          goto LABEL_100;
                        goto LABEL_166;
                      case 9u:
                        if (v48 != 2)
                          goto LABEL_166;
                        v75 = 0;
                        v76 = 0;
                        if (!PBReaderPlaceMark() || !GEONamedFeatureIsValid(a1))
                          goto LABEL_166;
LABEL_105:
                        PBReaderRecallMark();
                        goto LABEL_106;
                      default:
LABEL_100:
                        if ((PBReaderSkipValueWithTag() & 1) != 0)
                        {
LABEL_106:
                          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
                            goto LABEL_107;
                          goto LABEL_67;
                        }
LABEL_166:
                        PBReaderRecallMark();
                        break;
                    }
LABEL_167:
                    PBReaderRecallMark();
                    break;
                  case 2u:
                    if (v38 == 2)
                      goto LABEL_110;
                    goto LABEL_167;
                  case 3u:
                    if ((v32 & 7) != 0)
                      goto LABEL_167;
                    v52 = 0;
                    while (1)
                    {
                      v53 = *v2;
                      v54 = *(_QWORD *)&a1[v53];
                      v55 = v54 + 1;
                      if (v54 == -1 || v55 > *(_QWORD *)&a1[*v3])
                        goto LABEL_128;
                      v56 = *(char *)(*(_QWORD *)&a1[*v6] + v54);
                      *(_QWORD *)&a1[v53] = v55;
                      if (v56 < 0)
                      {
                        v24 = v52++ > 8;
                        if (!v24)
                          continue;
                      }
                      goto LABEL_129;
                    }
                  case 4u:
                    if ((v32 & 7) != 0)
                      goto LABEL_167;
                    v57 = 0;
                    while (1)
                    {
                      v58 = *v2;
                      v59 = *(_QWORD *)&a1[v58];
                      v60 = v59 + 1;
                      if (v59 == -1 || v60 > *(_QWORD *)&a1[*v3])
                        break;
                      v61 = *(char *)(*(_QWORD *)&a1[*v6] + v59);
                      *(_QWORD *)&a1[v58] = v60;
                      if (v61 < 0)
                      {
                        v24 = v57++ > 8;
                        if (!v24)
                          continue;
                      }
                      goto LABEL_129;
                    }
LABEL_128:
                    a1[*v4] = 1;
                    goto LABEL_129;
                  default:
LABEL_110:
                    if ((PBReaderSkipValueWithTag() & 1) == 0)
                      goto LABEL_167;
                    goto LABEL_129;
                }
LABEL_168:
                PBReaderRecallMark();
                return 0;
              }
            }
            break;
          }
LABEL_130:
          v62 = a1[*v4];
          PBReaderRecallMark();
          if (v62)
            goto LABEL_168;
LABEL_131:
          PBReaderRecallMark();
LABEL_156:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_159;
          break;
        case 9u:
          if (v17 != 2)
            goto LABEL_168;
LABEL_143:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_168;
          goto LABEL_156;
        case 0xAu:
          if (v17 == 2)
          {
            v75 = 0;
            v76 = 0;
            if (PBReaderPlaceMark())
            {
              if (GEONamedFeatureIsValid(a1))
                goto LABEL_131;
            }
          }
          goto LABEL_168;
        default:
          switch((v9 >> 3))
          {
            case 'd':
              if ((v9 & 7) != 0)
                goto LABEL_168;
              v25 = 0;
              while (1)
              {
                v26 = *v2;
                v27 = *(_QWORD *)&a1[v26];
                v28 = v27 + 1;
                if (v27 == -1 || v28 > *(_QWORD *)&a1[*v3])
                  goto LABEL_153;
                v29 = *(char *)(*(_QWORD *)&a1[*v6] + v27);
                *(_QWORD *)&a1[v26] = v28;
                if (v29 < 0)
                {
                  v24 = v25++ > 8;
                  if (!v24)
                    continue;
                }
                goto LABEL_156;
              }
            case 'e':
              if (v17 != 1)
                goto LABEL_168;
              v63 = *v2;
              v64 = *(_QWORD *)&a1[v63];
              if (v64 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_154;
              v65 = v64 + 8;
              if (v65 > *(_QWORD *)&a1[*v3])
                goto LABEL_154;
              *(_QWORD *)&a1[v63] = v65;
              goto LABEL_156;
            case 'g':
              if (v17 == 2)
                goto LABEL_143;
              goto LABEL_168;
            case 'h':
              if ((v9 & 7) != 0)
                goto LABEL_168;
              v66 = 0;
              break;
            default:
              goto LABEL_143;
          }
          while (1)
          {
            v67 = *v2;
            v68 = *(_QWORD *)&a1[v67];
            v69 = v68 + 1;
            if (v68 == -1 || v69 > *(_QWORD *)&a1[*v3])
              break;
            v70 = *(char *)(*(_QWORD *)&a1[*v6] + v68);
            *(_QWORD *)&a1[v67] = v69;
            if (v70 < 0)
            {
              v24 = v66++ > 8;
              if (!v24)
                continue;
            }
            goto LABEL_156;
          }
LABEL_153:
          v15 = *v4;
LABEL_154:
          a1[v15] = 1;
          goto LABEL_156;
      }
    }
  }
  v5 = 0;
LABEL_159:
  if (a1[*v4])
    v71 = 1;
  else
    v71 = v5 == 0;
  v72 = !v71;
  PBReaderRecallMark();
  return v72;
}

void sub_18947358C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPlaceSearchResponseIsDirty(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  if ((*(_WORD *)(a1 + 104) & 0x7F0) != 0)
    return 1;
  if ((*(_WORD *)(a1 + 104) & 0x100) == 0)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v3 = *(id *)(a1 + 56);
  v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v3);
        if (GEOSuggestionEntryListIsDirty(*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * i)))
        {
          v2 = 1;
          goto LABEL_15;
        }
      }
      v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEOPlaceSearchResponseIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPlaceSearchResponseIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 22);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

unint64_t GEOPlaceSearchResponseClearSensitiveFields(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t result;
  unint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  -[GEOPlaceSearchResponse _readPlaceResults](a1);
  result = objc_msgSend(*(id *)(a1 + 48), "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", i);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = v8;
      if (a3 && GEOPlaceResultHasSensitiveFields(v8))
      {
        v10 = (void *)objc_msgSend(v9, "copy");
        objc_msgSend(v10, "revgeoRequestTemplate");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "clearSensitiveFields:", a2);

        objc_msgSend(*(id *)(a1 + 48), "replaceObjectAtIndex:withObject:", i, v10);
      }
      else
      {
        objc_msgSend(v9, "clearSensitiveFields:", a2);
      }

      result = objc_msgSend(*(id *)(a1 + 48), "count");
    }
  }
  return result;
}

uint64_t GEOPlaceSearchResponseHasSensitiveFields(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  objc_msgSend(a1, "placeResults", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        if ((GEOPlaceResultHasSensitiveFields(*(void **)(*((_QWORD *)&v8 + 1) + 8 * v5)) & 1) != 0)
        {
          v6 = 1;
          goto LABEL_12;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_12:

  return v6;
}

void sub_1894742C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189474A48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORatingReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  BOOL v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  GEOReview *v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  void *v62;
  char v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  int v67;
  __int16 v68;
  void *v69;
  int v71;
  int *v72;
  char v73;
  char v74;
  char v75;
  char v76;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 76);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 72));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 92)), (uint16x4_t)0xFFF9FFF8FFFAFFFBLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 92) >> 4) & 1));
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 > 2;
        v73 = v17 & ~(_BYTE)v12 | v10;
        v74 = v17 | v12 | v73;
        if ((((v17 | v12) | v8) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v75 = (v18 == 0) | v17 | v12;
        v76 = v17 | v12;
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v10;
LABEL_8:
        v15 = v11;
        v16 = v12;
LABEL_10:
        ++v9;
        v10 = v14;
        v11 = v15;
        v12 = v16;
        continue;
    }
    break;
  }
  while (*(_QWORD *)(v3 + *v19) < *(_QWORD *)(v3 + *v7) && !*(_BYTE *)(v3 + *v20))
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v7))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      v29 = v23++ >= 9;
      if (v29)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_27:
    if (v30 || (v24 & 7) == 4)
      break;
    v32 = v24 >> 3;
    v33 = v76;
    if ((v75 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_84;
        *(_WORD *)(a1 + 92) |= 2u;
        v38 = *v19;
        v39 = *(_QWORD *)(v3 + v38);
        if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *(_QWORD *)(v3 + *v7))
        {
          v40 = *(_QWORD *)(*(_QWORD *)(v3 + *v21) + v39);
          *(_QWORD *)(v3 + v38) = v39 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v20) = 1;
          v40 = 0;
        }
        v66 = 64;
        goto LABEL_107;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_84;
        *(_WORD *)(a1 + 92) |= 1u;
        v44 = *v19;
        v45 = *(_QWORD *)(v3 + v44);
        if (v45 <= 0xFFFFFFFFFFFFFFF7 && v45 + 8 <= *(_QWORD *)(v3 + *v7))
        {
          v40 = *(_QWORD *)(*(_QWORD *)(v3 + *v21) + v45);
          *(_QWORD *)(v3 + v44) = v45 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v20) = 1;
          v40 = 0;
        }
        v66 = 32;
LABEL_107:
        *(_QWORD *)(a1 + v66) = v40;
        goto LABEL_108;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_84;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        *(_WORD *)(a1 + 92) |= 4u;
        while (2)
        {
          v49 = *v19;
          v50 = *(_QWORD *)(v3 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v50);
            *(_QWORD *)(v3 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              v29 = v47++ >= 9;
              if (v29)
              {
                LODWORD(v48) = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v48) = 0;
LABEL_89:
        v64 = 84;
        goto LABEL_94;
      case 4:
        if (!v33)
          goto LABEL_84;
        if ((*(_WORD *)(a1 + 92) & 0x40) == 0)
        {
          PBReaderReadString();
          v53 = objc_claimAutoreleasedReturnValue();
          v54 = 40;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_128;
        v65 = *(_WORD *)(a1 + 92) << 9;
        goto LABEL_101;
      case 5:
        if (!v33)
          goto LABEL_84;
        if ((*(_WORD *)(a1 + 92) & 0x20) == 0)
        {
          PBReaderReadString();
          v53 = objc_claimAutoreleasedReturnValue();
          v54 = 24;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_128;
        v65 = *(_WORD *)(a1 + 92) << 10;
        goto LABEL_101;
      case 6:
        if (!v33 || (*(_WORD *)(a1 + 92) & 0x100) != 0)
          goto LABEL_84;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_128;
        v55 = objc_alloc_init(GEOReview);
        if (GEOReviewReadAllFrom((uint64_t)v55, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          -[GEORating _addNoFlagsReview:](a1, v55);

LABEL_102:
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          goto LABEL_108;
        }

LABEL_128:
        v71 = 0;
        v72 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_111:
        if ((v73 & 1) != 0)
LABEL_112:
          *(_WORD *)(a1 + v72[404]) |= 0x10u;
        if (v76 & 1 | ((v71 & 1) == 0))
        {
          *(_WORD *)(a1 + v72[404]) |= 0x40u;
          *(_WORD *)(a1 + v72[404]) |= 0x20u;
          *(_WORD *)(a1 + v72[404]) |= 0x100u;
          *(_WORD *)(a1 + v72[404]) |= 0x80u;
        }
        else if (v18)
        {
          while (1)
          {
            v67 = *v18++;
            v68 = 64;
            switch(v67)
            {
              case 0:
                goto LABEL_121;
              case 4:
                goto LABEL_120;
              case 5:
                v68 = 32;
                goto LABEL_120;
              case 6:
                v68 = 256;
                goto LABEL_120;
              case 8:
                v68 = 128;
LABEL_120:
                *(_WORD *)(a1 + v72[404]) |= v68;
                break;
              default:
                continue;
            }
          }
        }
LABEL_121:
        if (v71)
          v3 = *(_BYTE *)(v3 + *v20) == 0;
        else
          v3 = 0;
        if ((v76 & 1) != 0)
        {
          v69 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_84;
        v56 = 0;
        v57 = 0;
        v48 = 0;
        *(_WORD *)(a1 + 92) |= 8u;
        while (2)
        {
          v58 = *v19;
          v59 = *(_QWORD *)(v3 + v58);
          v60 = v59 + 1;
          if (v59 == -1 || v60 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v61 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v59);
            *(_QWORD *)(v3 + v58) = v60;
            v48 |= (unint64_t)(v61 & 0x7F) << v56;
            if (v61 < 0)
            {
              v56 += 7;
              v29 = v57++ >= 9;
              if (v29)
              {
                LODWORD(v48) = 0;
                goto LABEL_93;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v48) = 0;
LABEL_93:
        v64 = 88;
LABEL_94:
        *(_DWORD *)(a1 + v64) = v48;
        goto LABEL_108;
      case 8:
        if (!v33)
          goto LABEL_84;
        if ((*(_WORD *)(a1 + 92) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_128;
          v65 = *(_WORD *)(a1 + 92) << 8;
LABEL_101:
          v9 += v65 >> 15;
        }
        else
        {
          PBReaderReadString();
          v53 = objc_claimAutoreleasedReturnValue();
          v54 = 48;
LABEL_83:
          v62 = *(void **)(a1 + v54);
          *(_QWORD *)(a1 + v54) = v53;

          --v9;
        }
        goto LABEL_102;
      default:
        if ((v73 & 1) == 0 || (*(_WORD *)(a1 + 92) & 0x10) != 0)
        {
LABEL_84:
          v63 = PBReaderSkipValueWithTag();
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v20 = (int *)MEMORY[0x1E0D82BC8];
          if ((v63 & 1) == 0)
          {
            v71 = 0;
LABEL_110:
            v72 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
            goto LABEL_111;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v42 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v41;

          }
          v43 = PBUnknownFieldAdd();
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          if (!v43)
          {
            v71 = 0;
            v72 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
            goto LABEL_112;
          }
        }
LABEL_108:
        if (!(v74 & 1 | (v9 != 0)))
          goto LABEL_109;
        break;
    }
  }
LABEL_109:
  v71 = 1;
  goto LABEL_110;
}

void sub_189475A0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894760A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189476184(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEORatingCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 56);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        -[GEOReview readAll:](*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * v5++), 1);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEORatingReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 76))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORatingReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 76) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORatingReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORatingReadAllFrom_initialTag;
  Specified = GEORatingReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEORatingCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_1894764D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894767DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189476B10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOReviewReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  BOOL v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  GEOUser *v48;
  void *v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  __int16 v58;
  uint64_t v59;
  int v60;
  __int16 v61;
  void *v62;
  int v64;
  int *v65;
  char v66;
  char v67;
  char v68;
  char v69;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 76);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 72));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 88)), (uint16x4_t)0xFFFCFFF9FFFAFFFBLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 88) >> 3) & 1));
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 > 2;
        v66 = v17 & ~(_BYTE)v12 | v10;
        v67 = v17 | v12 | v66;
        if ((((v17 | v12) | v8) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v68 = (v18 == 0) | v17 | v12;
        v69 = v17 | v12;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v10;
LABEL_8:
        v15 = v11;
        v16 = v12;
LABEL_10:
        ++v9;
        v10 = v14;
        v11 = v15;
        v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v20))
      goto LABEL_99;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v7))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      v29 = v23++ >= 9;
      if (v29)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_27:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_99:
      v64 = 1;
      goto LABEL_100;
    }
    v32 = v24 >> 3;
    v33 = v69;
    if ((v68 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if (!v33)
          goto LABEL_77;
        if ((*(_WORD *)(a1 + 88) & 0x40) == 0)
        {
          PBReaderReadString();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = 56;
          goto LABEL_67;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_117;
        v58 = *(_WORD *)(a1 + 88) << 9;
        goto LABEL_91;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_77;
        *(_WORD *)(a1 + 88) |= 2u;
        v43 = *v19;
        v44 = *(_QWORD *)(v3 + v43);
        if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(_QWORD *)(v3 + *v7))
        {
          v45 = *(_QWORD *)(*(_QWORD *)(v3 + *v21) + v44);
          *(_QWORD *)(v3 + v43) = v44 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v20) = 1;
          v45 = 0;
        }
        v59 = 48;
        goto LABEL_97;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_77;
        *(_WORD *)(a1 + 88) |= 1u;
        v46 = *v19;
        v47 = *(_QWORD *)(v3 + v46);
        if (v47 <= 0xFFFFFFFFFFFFFFF7 && v47 + 8 <= *(_QWORD *)(v3 + *v7))
        {
          v45 = *(_QWORD *)(*(_QWORD *)(v3 + *v21) + v47);
          *(_QWORD *)(v3 + v46) = v47 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v20) = 1;
          v45 = 0;
        }
        v59 = 32;
LABEL_97:
        *(_QWORD *)(a1 + v59) = v45;
        goto LABEL_98;
      case 4:
        if (!v33)
          goto LABEL_77;
        if ((*(_WORD *)(a1 + 88) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_117;
          v58 = *(_WORD *)(a1 + 88) << 10;
LABEL_91:
          v9 += v58 >> 15;
          goto LABEL_92;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_117;
        v48 = objc_alloc_init(GEOUser);
        if (GEOUserReadAllFrom((uint64_t)v48, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          v49 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v48;
LABEL_68:

          --v9;
LABEL_92:
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
LABEL_98:
          if (!(v67 & 1 | (v9 != 0)))
            goto LABEL_99;
          continue;
        }

LABEL_117:
        v64 = 0;
        v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_100:
        v65 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
        if ((v66 & 1) != 0)
LABEL_101:
          *(_WORD *)(a1 + v65[610]) |= 8u;
        if (v69 & 1 | ((v64 & 1) == 0))
        {
          *(_WORD *)(a1 + v65[610]) |= 0x40u;
          *(_WORD *)(a1 + v65[610]) |= 0x20u;
          *(_WORD *)(a1 + v65[610]) |= 0x80u;
          *(_WORD *)(a1 + v65[610]) |= 0x10u;
        }
        else if (v18)
        {
          while (1)
          {
            v60 = *v18++;
            v61 = 64;
            switch(v60)
            {
              case 0:
                goto LABEL_110;
              case 1:
                goto LABEL_109;
              case 4:
                v61 = 32;
                goto LABEL_109;
              case 5:
                v61 = 128;
                goto LABEL_109;
              case 6:
                v61 = 16;
LABEL_109:
                *(_WORD *)(a1 + v65[610]) |= v61;
                break;
              default:
                continue;
            }
          }
        }
LABEL_110:
        if (v64)
          v3 = *(_BYTE *)(v3 + *v20) == 0;
        else
          v3 = 0;
        if ((v69 & 1) != 0)
        {
          v62 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 5:
        if (!v33)
          goto LABEL_77;
        if ((*(_WORD *)(a1 + 88) & 0x80) == 0)
        {
          PBReaderReadString();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = 64;
          goto LABEL_67;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_117;
        v58 = *(_WORD *)(a1 + 88) << 8;
        goto LABEL_91;
      case 6:
        if (!v33)
          goto LABEL_77;
        if ((*(_WORD *)(a1 + 88) & 0x10) == 0)
        {
          PBReaderReadString();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = 24;
LABEL_67:
          v49 = *(void **)(a1 + v39);
          *(_QWORD *)(a1 + v39) = v38;
          goto LABEL_68;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_117;
        v58 = *(_WORD *)(a1 + 88) << 11;
        goto LABEL_91;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_77;
        v50 = 0;
        v51 = 0;
        v52 = 0;
        *(_WORD *)(a1 + 88) |= 4u;
        while (2)
        {
          v53 = *v19;
          v54 = *(_QWORD *)(v3 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              v29 = v51++ >= 9;
              if (v29)
              {
                v52 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          v52 = 0;
LABEL_82:
        *(_BYTE *)(a1 + 84) = v52 != 0;
        goto LABEL_98;
      default:
        if ((v66 & 1) == 0 || (*(_WORD *)(a1 + 88) & 8) != 0)
        {
LABEL_77:
          v57 = PBReaderSkipValueWithTag();
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v20 = (int *)MEMORY[0x1E0D82BC8];
          if ((v57 & 1) == 0)
          {
            v64 = 0;
            goto LABEL_100;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v41 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v40;

          }
          v42 = PBUnknownFieldAdd();
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          if (!v42)
          {
            v64 = 0;
            v65 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
            goto LABEL_101;
          }
        }
        goto LABEL_98;
    }
  }
}

void sub_189477D10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189477DFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOReviewReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 76))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOReviewReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 76) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOReviewReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOReviewReadAllFrom_initialTag;
  Specified = GEOReviewReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    -[GEOUser readAll:](*(_QWORD *)(a1 + 40), 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_189478068(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189478304(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189478534(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSearchAttributionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  void *v38;
  void *v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  id v47;
  void *v48;
  int v49;
  char v50;
  int v51;
  int v52;
  char v53;
  void *v54;
  int v56;
  int *v57;
  char v58;
  char v59;
  char v60;
  BOOL v61;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1)
      + (*(_BYTE *)(a1 + 56) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 & ~(_BYTE)v7;
        v16 = v14 | v7;
        v58 = v15 | v8;
        v59 = v16 | v15 | v8;
        if (((v16 | v9) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v60 = (v17 == 0) | v16;
        v61 = v16;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_71;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_71:
      v56 = 1;
      goto LABEL_72;
    }
    v31 = v23 >> 3;
    v32 = v61;
    if ((v60 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 == 3)
    {
      if (!v32 || (*(_BYTE *)(a1 + 56) & 2) != 0)
      {
LABEL_61:
        v50 = PBReaderSkipValueWithTag();
        v19 = (int *)MEMORY[0x1E0D82BC8];
        if ((v50 & 1) == 0)
        {
          v56 = 0;
          goto LABEL_72;
        }
        goto LABEL_70;
      }
      PBReaderReadString();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      if (v39)
        -[GEOSearchAttribution _addNoFlagsAttributionURLs:](a1, v39);

      goto LABEL_69;
    }
    if ((_DWORD)v31 == 2)
    {
      if ((v9 & 1) == 0)
        goto LABEL_61;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      while (1)
      {
        v43 = *v18;
        v44 = *(_QWORD *)(v3 + v43);
        v45 = v44 + 1;
        if (v44 == -1 || v45 > *(_QWORD *)(v3 + *v6))
          break;
        v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v44);
        *(_QWORD *)(v3 + v43) = v45;
        v42 |= (unint64_t)(v46 & 0x7F) << v40;
        if ((v46 & 0x80) == 0)
          goto LABEL_64;
        v40 += 7;
        v28 = v41++ >= 9;
        if (v28)
        {
          LODWORD(v42) = 0;
          goto LABEL_66;
        }
      }
      *(_BYTE *)(v3 + *v19) = 1;
LABEL_64:
      if (*(_BYTE *)(v3 + *v19))
        LODWORD(v42) = 0;
LABEL_66:
      *(_DWORD *)(a1 + 52) = v42;
      goto LABEL_70;
    }
    if ((_DWORD)v31 == 1)
      break;
    if ((v58 & 1) == 0 || (*(_BYTE *)(a1 + 56) & 1) != 0)
      goto LABEL_61;
    if (!*(_QWORD *)(a1 + 16))
    {
      v47 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v48 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v47;

    }
    v49 = PBUnknownFieldAdd();
    v19 = (int *)MEMORY[0x1E0D82BC8];
    if (!v49)
    {
      v56 = 0;
      v57 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
      goto LABEL_73;
    }
LABEL_70:
    if (!(v59 & 1 | (v10 != 0)))
      goto LABEL_71;
  }
  if (!v32)
    goto LABEL_61;
  if ((*(_BYTE *)(a1 + 56) & 4) == 0)
  {
    PBReaderReadString();
    v37 = objc_claimAutoreleasedReturnValue();
    v38 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v37;

    --v10;
LABEL_69:
    v19 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_70;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v10 += *(unsigned __int8 *)(a1 + 56) << 29 >> 31;
    goto LABEL_69;
  }
  v56 = 0;
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_72:
  v57 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
  if ((v58 & 1) == 0)
    goto LABEL_74;
LABEL_73:
  *(_BYTE *)(a1 + v57[623]) |= 1u;
LABEL_74:
  if (v61 || (v56 & 1) == 0)
  {
    *(_BYTE *)(a1 + v57[623]) |= 4u;
    *(_BYTE *)(a1 + v57[623]) |= 2u;
    goto LABEL_84;
  }
  if (v17)
  {
    while (2)
    {
      while (1)
      {
        v52 = *v17++;
        v51 = v52;
        if (v52 == 1)
          break;
        if (v51 == 3)
        {
          v53 = 2;
          goto LABEL_83;
        }
        if (!v51)
          goto LABEL_84;
      }
      v53 = 4;
LABEL_83:
      *(_BYTE *)(a1 + v57[623]) |= v53;
      continue;
    }
  }
LABEL_84:
  if (v56)
    v3 = *(_BYTE *)(v3 + *v19) == 0;
  else
    v3 = 0;
  if (v61)
  {
    v54 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_189478FDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894790F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189479964(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSearchAttributionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOSearchAttributionReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOSearchAttributionReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOSearchAttributionReadAllFrom_initialTag;
  Specified = GEOSearchAttributionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189479AF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSearchAttributionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSearchAttributionReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189479B50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189479DA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchAttributionIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 56) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_18947A170(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18947A494(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchSubstringReadAllFrom(_QWORD *a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  void *v39;
  uint64_t v40;
  _BOOL8 v41;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                goto LABEL_49;
              v18 += 7;
              v15 = v19++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_51;
              }
            }
            v3[*v6] = 1;
LABEL_49:
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_51:
            v40 = 32;
            goto LABEL_60;
          case 2u:
            v27 = 0;
            v28 = 0;
            v20 = 0;
            while (2)
            {
              v29 = *v4;
              v30 = *(_QWORD *)&v3[v29];
              v31 = v30 + 1;
              if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
                *(_QWORD *)&v3[v29] = v31;
                v20 |= (unint64_t)(v32 & 0x7F) << v27;
                if (v32 < 0)
                {
                  v27 += 7;
                  v15 = v28++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_55;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_55:
            v40 = 24;
            goto LABEL_60;
          case 3u:
            v33 = 0;
            v34 = 0;
            v20 = 0;
            break;
          case 4u:
            PBReaderReadString();
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            if (v39)
              objc_msgSend(a1, "addSpanData:", v39);

            continue;
          default:
            if (!a1[1])
            {
              v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v26 = (void *)a1[1];
              a1[1] = v25;

            }
            if (!PBUnknownFieldAdd())
              goto LABEL_63;
            continue;
        }
        while (1)
        {
          v35 = *v4;
          v36 = *(_QWORD *)&v3[v35];
          v37 = v36 + 1;
          if (v36 == -1 || v37 > *(_QWORD *)&v3[*v5])
            break;
          v38 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v36);
          *(_QWORD *)&v3[v35] = v37;
          v20 |= (unint64_t)(v38 & 0x7F) << v33;
          if ((v38 & 0x80) == 0)
            goto LABEL_57;
          v33 += 7;
          v15 = v34++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_59;
          }
        }
        v3[*v6] = 1;
LABEL_57:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_59:
        v40 = 28;
LABEL_60:
        *(_DWORD *)((char *)a1 + v40) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v41 = v3[*v6] == 0;
  }
  else
  {
LABEL_63:
    v41 = 0;
  }
  objc_sync_exit(v3);

  return v41;
}

void sub_18947B254(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchSubstringReadFrom(_QWORD *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSearchSubstringReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18947B2B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSourceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  char v42;
  int v43;
  char v44;
  void *v45;
  int v47;
  char v48;
  char v49;
  char v50;
  BOOL v51;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 1;
        v15 = v14 & ~(_BYTE)v7;
        v16 = v14 | v7;
        v48 = v15 | v8;
        v49 = v16 | v15 | v8;
        if (((v16 | v9) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v50 = (v17 == 0) | v16;
        v51 = v16;
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_65;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_65:
      v47 = 1;
      goto LABEL_66;
    }
    v31 = v23 >> 3;
    v32 = v51;
    if ((v50 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 == 3)
    {
      if (!v32)
        goto LABEL_55;
      if ((*(_BYTE *)(a1 + 60) & 8) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_81;
        v42 = 16 * *(_BYTE *)(a1 + 60);
        goto LABEL_63;
      }
      PBReaderReadString();
      v37 = objc_claimAutoreleasedReturnValue();
      v38 = 40;
      goto LABEL_48;
    }
    if ((_DWORD)v31 == 2)
      break;
    if ((_DWORD)v31 == 1)
    {
      if (!v32)
        goto LABEL_55;
      if ((*(_BYTE *)(a1 + 60) & 4) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_81;
        v42 = 32 * *(_BYTE *)(a1 + 60);
        goto LABEL_63;
      }
      PBReaderReadString();
      v37 = objc_claimAutoreleasedReturnValue();
      v38 = 32;
      goto LABEL_48;
    }
    if ((v48 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 1) != 0)
    {
LABEL_55:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_81;
      goto LABEL_64;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v41 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v40;

    }
    if (!PBUnknownFieldAdd())
    {
      v47 = 0;
      v19 = (int *)MEMORY[0x1E0D82BC8];
      goto LABEL_67;
    }
LABEL_64:
    v19 = (int *)MEMORY[0x1E0D82BC8];
    if (!(v49 & 1 | (v10 != 0)))
      goto LABEL_65;
  }
  if (!v32)
    goto LABEL_55;
  if ((*(_BYTE *)(a1 + 60) & 2) == 0)
  {
    PBReaderReadString();
    v37 = objc_claimAutoreleasedReturnValue();
    v38 = 24;
LABEL_48:
    v39 = *(void **)(a1 + v38);
    *(_QWORD *)(a1 + v38) = v37;

    --v10;
    goto LABEL_64;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v42 = *(_BYTE *)(a1 + 60) << 6;
LABEL_63:
    v10 += v42 >> 7;
    goto LABEL_64;
  }
LABEL_81:
  v47 = 0;
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_66:
  if ((v48 & 1) == 0)
    goto LABEL_68;
LABEL_67:
  *(_BYTE *)(a1 + 60) |= 1u;
LABEL_68:
  if (v51 || (v47 & 1) == 0)
  {
    *(_BYTE *)(a1 + 60) |= 4u;
    *(_BYTE *)(a1 + 60) |= 2u;
    *(_BYTE *)(a1 + 60) |= 8u;
  }
  else if (v17)
  {
    while (1)
    {
      v43 = *v17++;
      v44 = 4;
      switch(v43)
      {
        case 0:
          goto LABEL_75;
        case 1:
          goto LABEL_74;
        case 2:
          v44 = 2;
          goto LABEL_74;
        case 3:
          v44 = 8;
LABEL_74:
          *(_BYTE *)(a1 + 60) |= v44;
          break;
        default:
          continue;
      }
    }
  }
LABEL_75:
  if (v47)
    v3 = *(_BYTE *)(v3 + *v19) == 0;
  else
    v3 = 0;
  if (v51)
  {
    v45 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_18947C02C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18947C110(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18947C1F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18947C7E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSourceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOSourceReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOSourceReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOSourceReadAllFrom_initialTag;
  Specified = GEOSourceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_18947C974(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSourceReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSourceReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18947C9D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18947CB74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSourceIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = (*(_BYTE *)(a1 + 60) & 0x1E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_18947CE30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18947D0A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOStyleAttributeReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOStyleAttributeReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18947D684(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOStyleAttributesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOStyleAttributesReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18947E0B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18947E73C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOSuggestionEntryReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  GEOLatLng *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  int v46;
  char v47;
  __int16 v48;
  int v49;
  __int16 v50;
  void *v51;
  int v53;
  char v54;
  char v55;
  char v56;
  BOOL v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 112));
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 108);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 104));
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = *(unsigned __int16 *)(a1 + 116);
  v12 = ((v11 >> 6) & 1)
      + (v11 & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(v11), (uint16x4_t)0xFFFBFFFCFFFDFFFFLL), (int8x8_t)0x1000100010001))+ ((v11 >> 8) & 1)+ ((v11 >> 7) & 1)+ ((v11 >> 2) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v6])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v7 = 1;
        goto LABEL_7;
      case -2:
        v14 = v9;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 5;
        v17 = v16 & ~(_BYTE)v10 | v8;
        v18 = v16 | v10;
        v54 = v17;
        v55 = v18 | v17;
        if (((v18 | v7) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v56 = (v19 == 0) | v18;
        v57 = v18;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v8;
LABEL_8:
        v14 = v9;
        v15 = v10;
LABEL_10:
        ++v6;
        v8 = v13;
        v9 = v14;
        v10 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    v23 = (int *)MEMORY[0x1E0D82BD8];
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) || *(_BYTE *)(v3 + *v21))
      goto LABEL_94;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v20;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v23))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_94:
      v53 = 1;
      goto LABEL_95;
    }
    v34 = v26 >> 3;
    v35 = v57;
    if ((v56 & 1) == 0)
    {
      v36 = v19;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35 || (*(_WORD *)(a1 + 116) & 8) != 0)
          goto LABEL_79;
        PBReaderReadString();
        v40 = (GEOLatLng *)objc_claimAutoreleasedReturnValue();
        if (v40)
          -[GEOSuggestionEntry _addNoFlagsDisplayLine:](a1, v40);
        goto LABEL_78;
      case 2:
        if (!v35 || (*(_WORD *)(a1 + 116) & 2) != 0)
          goto LABEL_79;
        if (!PBReaderPlaceMark())
          goto LABEL_116;
        -[GEOSuggestionEntry _reserveTextHighlights:](a1, 1uLL);
        if (!GEOHighlightReadAllFrom(*(_QWORD *)(a1 + 24) + 16 * *(_QWORD *)(a1 + 32), v3))
          goto LABEL_116;
        PBReaderRecallMark();
        ++*(_QWORD *)(a1 + 32);
        goto LABEL_92;
      case 3:
        if (!v35)
          goto LABEL_79;
        if ((*(_WORD *)(a1 + 116) & 0x10) == 0)
        {
          PBReaderReadString();
          v41 = objc_claimAutoreleasedReturnValue();
          v42 = 64;
          goto LABEL_65;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_116;
        v48 = *(_WORD *)(a1 + 116) << 11;
        goto LABEL_91;
      case 4:
        if (!v35)
          goto LABEL_79;
        if ((*(_WORD *)(a1 + 116) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_116;
          v48 = *(_WORD *)(a1 + 116) << 10;
LABEL_91:
          v6 += v48 >> 15;
          goto LABEL_92;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_116;
        v40 = objc_alloc_init(GEOLatLng);
        if (GEOLatLngReadAllFrom((uint64_t)v40, (void *)v3))
        {
          PBReaderRecallMark();
          v43 = *(void **)(a1 + 72);
          *(_QWORD *)(a1 + 72) = v40;
LABEL_66:

          --v6;
LABEL_92:
          v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_93:
          if (!(v55 & 1 | (v6 != 0)))
            goto LABEL_94;
          continue;
        }
LABEL_115:

LABEL_116:
        v53 = 0;
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_95:
        if ((v54 & 1) != 0)
LABEL_96:
          *(_WORD *)(a1 + 116) |= 1u;
        if (v57 || (v53 & 1) == 0)
        {
          *(_WORD *)(a1 + 116) |= 8u;
          *(_WORD *)(a1 + 116) |= 2u;
          *(_WORD *)(a1 + 116) |= 0x10u;
          *(_WORD *)(a1 + 116) |= 0x20u;
          *(_WORD *)(a1 + 116) |= 0x100u;
          *(_WORD *)(a1 + 116) |= 0x80u;
          *(_WORD *)(a1 + 116) |= 4u;
          *(_WORD *)(a1 + 116) |= 0x40u;
        }
        else if (v19)
        {
          while (1)
          {
            v49 = *v19++;
            v50 = 8;
            switch(v49)
            {
              case 0:
                goto LABEL_109;
              case 1:
                goto LABEL_108;
              case 2:
                v50 = 2;
                goto LABEL_108;
              case 3:
                v50 = 16;
                goto LABEL_108;
              case 4:
                v50 = 32;
                goto LABEL_108;
              case 5:
                v50 = 256;
                goto LABEL_108;
              case 6:
                v50 = 128;
                goto LABEL_108;
              case 7:
                v50 = 4;
                goto LABEL_108;
              case 9:
                v50 = 64;
LABEL_108:
                *(_WORD *)(a1 + 116) |= v50;
                break;
              default:
                continue;
            }
          }
        }
LABEL_109:
        if (v53)
          v3 = *(_BYTE *)(v3 + *v21) == 0;
        else
          v3 = 0;
        if (v57)
        {
          v51 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 5:
        if (!v35)
          goto LABEL_79;
        if ((*(_WORD *)(a1 + 116) & 0x100) == 0)
        {
          PBReaderReadData();
          v41 = objc_claimAutoreleasedReturnValue();
          v42 = 96;
          goto LABEL_65;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_116;
        v48 = *(_WORD *)(a1 + 116) << 7;
        goto LABEL_91;
      case 6:
        if (!v35)
          goto LABEL_79;
        if ((*(_WORD *)(a1 + 116) & 0x80) == 0)
        {
          PBReaderReadString();
          v41 = objc_claimAutoreleasedReturnValue();
          v42 = 88;
          goto LABEL_65;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_116;
        v48 = *(_WORD *)(a1 + 116) << 8;
        goto LABEL_91;
      case 7:
        if (!v35)
          goto LABEL_79;
        if ((*(_WORD *)(a1 + 116) & 4) == 0)
        {
          PBReaderReadString();
          v41 = objc_claimAutoreleasedReturnValue();
          v42 = 48;
LABEL_65:
          v43 = *(void **)(a1 + v42);
          *(_QWORD *)(a1 + v42) = v41;
          goto LABEL_66;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_116;
        v48 = *(_WORD *)(a1 + 116) << 13;
        goto LABEL_91;
      case 9:
        if (!v35 || (*(_WORD *)(a1 + 116) & 0x40) != 0)
          goto LABEL_79;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_116;
        v40 = objc_alloc_init(GEONamedFeature);
        if (!GEONamedFeatureReadAllFrom(v40, (void *)v3))
          goto LABEL_115;
        PBReaderRecallMark();
        -[GEOSuggestionEntry _addNoFlagsNamedFeature:](a1, v40);
LABEL_78:

        goto LABEL_92;
      default:
        if ((v54 & 1) == 0 || (*(_WORD *)(a1 + 116) & 1) != 0)
        {
LABEL_79:
          v47 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if ((v47 & 1) == 0)
          {
            v53 = 0;
            goto LABEL_95;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v44 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v45 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v44;

          }
          v46 = PBUnknownFieldAdd();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if (!v46)
          {
            v53 = 0;
            goto LABEL_96;
          }
        }
        goto LABEL_93;
    }
  }
}

void sub_18947F1E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18947F2EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18947FAF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18947FBD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOSuggestionEntryCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 72), "readAll:", 1);
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = *(id *)(a1 + 80);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v7);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

uint64_t GEOSuggestionEntryReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 108))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOSuggestionEntryReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 104) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 108) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOSuggestionEntryReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOSuggestionEntryReadAllFrom_initialTag;
  Specified = GEOSuggestionEntryReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOSuggestionEntryCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  return Specified;
}

void sub_18947FF44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18948033C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894806EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189480B4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSuggestionEntryListReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  GEOSuggestionEntry *v37;
  id v38;
  void *v39;
  int v40;
  uint64_t v41;
  void *v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  int v58;
  int v59;
  char v60;
  void *v61;
  int v63;
  int *v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 60) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v12;
        v13 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v13 = v7;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v65 = v16 & ~(_BYTE)v11 | v8;
        v66 = v9;
        v67 = v16 | v11 | v65;
        if ((((v16 | v11) | v9) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v68 = (v17 == 0) | v16 | v11;
        v69 = v16 | v11;
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v7;
        v14 = v8;
LABEL_8:
        v15 = v11;
LABEL_10:
        ++v10;
        v7 = v13;
        v8 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_83;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_83:
      v63 = 1;
      goto LABEL_84;
    }
    v31 = v23 >> 3;
    v32 = v69;
    if ((v68 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32 || (*(_BYTE *)(a1 + 60) & 0x10) != 0)
          goto LABEL_69;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_104;
        v37 = objc_alloc_init(GEOSuggestionEntry);
        if (GEOSuggestionEntryReadAllFrom((uint64_t)v37, (void *)v3, v7 & 1))
        {
          PBReaderRecallMark();
          -[GEOSuggestionEntryList _addNoFlagsSuggestionEntries:](a1, v37);

          goto LABEL_81;
        }

        goto LABEL_104;
      case 2:
        if (!v32)
          goto LABEL_69;
        if ((*(_BYTE *)(a1 + 60) & 8) == 0)
        {
          PBReaderReadString();
          v41 = objc_claimAutoreleasedReturnValue();
          v42 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v41;

          --v10;
LABEL_81:
          v19 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_82;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v10 += *(unsigned __int8 *)(a1 + 60) << 28 >> 31;
          goto LABEL_81;
        }
LABEL_104:
        v63 = 0;
        v64 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_85:
        if ((v65 & 1) != 0)
LABEL_86:
          *(_BYTE *)(a1 + v64[408]) |= 4u;
        if (v69 & 1 | ((v63 & 1) == 0))
        {
          *(_BYTE *)(a1 + v64[408]) |= 0x10u;
          *(_BYTE *)(a1 + v64[408]) |= 8u;
          goto LABEL_97;
        }
        if (v17)
        {
          while (2)
          {
            while (1)
            {
              v59 = *v17++;
              v58 = v59;
              if (v59 == 1)
                break;
              if (v58 == 2)
              {
                v60 = 8;
                goto LABEL_96;
              }
              if (!v58)
                goto LABEL_97;
            }
            v60 = 16;
LABEL_96:
            *(_BYTE *)(a1 + v64[408]) |= v60;
            continue;
          }
        }
LABEL_97:
        if (v63)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if ((v69 & 1) != 0)
        {
          v61 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 3:
        if ((v66 & 1) == 0)
          goto LABEL_69;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        *(_BYTE *)(a1 + 60) |= 2u;
        while (2)
        {
          v46 = *v18;
          v47 = *(_QWORD *)(v3 + v46);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v47);
            *(_QWORD *)(v3 + v46) = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              v28 = v44++ >= 9;
              if (v28)
              {
                v45 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v45 = 0;
LABEL_74:
        *(_BYTE *)(a1 + 56) = v45 != 0;
        goto LABEL_82;
      case 4:
        if ((v66 & 1) == 0)
          goto LABEL_69;
        v50 = 0;
        v51 = 0;
        v52 = 0;
        *(_BYTE *)(a1 + 60) |= 1u;
        while (2)
        {
          v53 = *v18;
          v54 = *(_QWORD *)(v3 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              v28 = v51++ >= 9;
              if (v28)
              {
                LODWORD(v52) = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v52) = 0;
LABEL_78:
        *(_DWORD *)(a1 + 52) = v52;
        goto LABEL_82;
      default:
        if ((v65 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 4) != 0)
        {
LABEL_69:
          v57 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v57 & 1) == 0)
          {
            v63 = 0;
LABEL_84:
            v64 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
            goto LABEL_85;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v38 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v39 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v38;

          }
          v40 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v40)
          {
            v63 = 0;
            v64 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
            goto LABEL_86;
          }
        }
LABEL_82:
        if (!(v67 & 1 | (v10 != 0)))
          goto LABEL_83;
        continue;
    }
  }
}

void sub_189481764(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189481844(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOSuggestionEntryListCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        -[GEOSuggestionEntry readAll:](*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * v5++), 1);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOSuggestionEntryListReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOSuggestionEntryListReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOSuggestionEntryListReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOSuggestionEntryListReadAllFrom_initialTag;
  Specified = GEOSuggestionEntryListReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOSuggestionEntryListCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189481B94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189481E14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSuggestionEntryListIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 60) & 0x38) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_18948212C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSuggestionsOptionsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  id v60;
  void *v61;
  int v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  char v74;
  char v75;
  int v76;
  int v77;
  void *v78;
  int v80;
  char v81;
  char v82;
  char v83;
  char v84;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 64) >> 6) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 4) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 | v7;
        v81 = v14 & ~(_BYTE)v7 | v8;
        v83 = v14 | v7 | v81;
        if ((((v14 | v7) | v9) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v84 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
        v20 = (int *)MEMORY[0x1E0D82BB8];
        v82 = v14 | v7;
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_108;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v17;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v23 = 0;
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_108:
      v80 = 1;
      goto LABEL_109;
    }
    v31 = v23 >> 3;
    v32 = v15;
    if ((v84 & 1) == 0)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v9 & 1) == 0)
          goto LABEL_82;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + v19[678]) |= 2u;
        while (1)
        {
          v40 = *v17;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v41);
          *(_QWORD *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0)
            goto LABEL_85;
          v37 += 7;
          v28 = v38++ >= 9;
          if (v28)
          {
            LODWORD(v39) = 0;
            goto LABEL_87;
          }
        }
        *(_BYTE *)(v3 + *v18) = 1;
LABEL_85:
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_87:
        v71 = 56;
        goto LABEL_92;
      case 2:
        if ((v9 & 1) == 0)
          goto LABEL_82;
        v44 = 0;
        v45 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + v19[678]) |= 1u;
        while (2)
        {
          v46 = *v17;
          v47 = *(_QWORD *)(v3 + v46);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v47);
            *(_QWORD *)(v3 + v46) = v48;
            v39 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              v28 = v45++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_91:
        v71 = 52;
LABEL_92:
        *(_DWORD *)(a1 + v71) = v39;
        goto LABEL_107;
      case 3:
        if (!v32)
          goto LABEL_82;
        if ((*(_BYTE *)(a1 + v19[678]) & 0x40) == 0)
        {
          PBReaderReadData();
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = 32;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_127;
        v19 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
        v74 = 2 * *(_BYTE *)(a1 + 64);
        goto LABEL_106;
      case 4:
        if (!v32)
          goto LABEL_82;
        if ((*(_BYTE *)(a1 + v19[678]) & 0x20) == 0)
        {
          PBReaderReadData();
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = 24;
LABEL_59:
          v52 = *(void **)(a1 + v51);
          *(_QWORD *)(a1 + v51) = v50;

          --v10;
          v15 = v82;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v19 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
LABEL_107:
          if (!(v83 & 1 | (v10 != 0)))
            goto LABEL_108;
          continue;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v19 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
          v74 = 4 * *(_BYTE *)(a1 + 64);
LABEL_106:
          v10 += v74 >> 7;
          v15 = v82;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_107;
        }
LABEL_127:
        v80 = 0;
        v15 = v82;
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
LABEL_109:
        if ((v81 & 1) != 0)
LABEL_110:
          *(_BYTE *)(a1 + v19[678]) |= 0x10u;
        if (v15 & 1 | ((v80 & 1) == 0))
        {
          *(_BYTE *)(a1 + v19[678]) |= 0x40u;
          *(_BYTE *)(a1 + v19[678]) |= 0x20u;
          goto LABEL_121;
        }
        if (v16)
        {
          while (1)
          {
            v77 = *v16++;
            v76 = v77;
            if (v77 == 3)
              break;
            if (v76 == 4)
            {
              v75 = 32;
LABEL_117:
              *(_BYTE *)(a1 + v19[678]) |= v75;
            }
            else if (!v76)
            {
              goto LABEL_121;
            }
          }
          v75 = 64;
          goto LABEL_117;
        }
LABEL_121:
        if (v80)
        {
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) == 0)
            return v3;
LABEL_125:
          v78 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
            goto LABEL_125;
        }
        return v3;
      case 5:
        if ((v9 & 1) == 0)
          goto LABEL_82;
        v53 = 0;
        v54 = 0;
        v55 = 0;
        *(_BYTE *)(a1 + v19[678]) |= 8u;
        while (2)
        {
          v56 = *v17;
          v57 = *(_QWORD *)(v3 + v56);
          v58 = v57 + 1;
          if (v57 == -1 || v58 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v57);
            *(_QWORD *)(v3 + v56) = v58;
            v55 |= (unint64_t)(v59 & 0x7F) << v53;
            if (v59 < 0)
            {
              v53 += 7;
              v28 = v54++ >= 9;
              if (v28)
              {
                v55 = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v55 = 0;
LABEL_96:
        v72 = v55 != 0;
        v73 = 61;
        goto LABEL_101;
      case 7:
        if ((v9 & 1) == 0)
          goto LABEL_82;
        v63 = 0;
        v64 = 0;
        v65 = 0;
        *(_BYTE *)(a1 + v19[678]) |= 4u;
        while (2)
        {
          v66 = *v17;
          v67 = *(_QWORD *)(v3 + v66);
          v68 = v67 + 1;
          if (v67 == -1 || v68 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v69 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v67);
            *(_QWORD *)(v3 + v66) = v68;
            v65 |= (unint64_t)(v69 & 0x7F) << v63;
            if (v69 < 0)
            {
              v63 += 7;
              v28 = v64++ >= 9;
              if (v28)
              {
                v65 = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v65 = 0;
LABEL_100:
        v72 = v65 != 0;
        v73 = 60;
LABEL_101:
        *(_BYTE *)(a1 + v73) = v72;
        goto LABEL_107;
      default:
        if ((v81 & 1) == 0 || (*(_BYTE *)(a1 + v19[678]) & 0x10) != 0)
        {
LABEL_82:
          v70 = PBReaderSkipValueWithTag();
          v19 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v82;
          if ((v70 & 1) == 0)
          {
            v80 = 0;
            goto LABEL_109;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v60 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v61 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v60;

          }
          v62 = PBUnknownFieldAdd();
          v15 = v82;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v19 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
          if (!v62)
          {
            v80 = 0;
            goto LABEL_110;
          }
        }
        goto LABEL_107;
    }
  }
}

void sub_189483184(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189483250(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSuggestionsOptionsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOSuggestionsOptionsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOSuggestionsOptionsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOSuggestionsOptionsReadAllFrom_initialTag;
  Specified = GEOSuggestionsOptionsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1894834A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894836C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSuggestionsOptionsIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = *(unsigned __int8 *)(a1 + 64) > 0x1Fu;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189483948(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTimeRangeReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  void *v34;
  _BOOL8 v35;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_49;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          goto LABEL_49;
        if ((v10 >> 3) == 2)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEOTimeRange__from;
              goto LABEL_41;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEOTimeRange__from;
              goto LABEL_44;
            }
          }
          v26 = &OBJC_IVAR___GEOTimeRange__from;
LABEL_42:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_44:
          *(_DWORD *)(a1 + *v26) = v20;
          goto LABEL_45;
        }
        if (!*(_QWORD *)(a1 + 8))
        {
          v33 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v34 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v33;

        }
        if ((PBUnknownFieldAdd() & 1) == 0)
          goto LABEL_50;
LABEL_45:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_49;
      }
      v27 = 0;
      v28 = 0;
      v20 = 0;
      *(_BYTE *)(a1 + 24) |= 2u;
      while (1)
      {
        v29 = *v4;
        v30 = *(_QWORD *)&v3[v29];
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
          break;
        v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
        *(_QWORD *)&v3[v29] = v31;
        v20 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0)
        {
          v26 = &OBJC_IVAR___GEOTimeRange__to;
          goto LABEL_42;
        }
        v27 += 7;
        v25 = v28++ > 8;
        if (v25)
        {
          LODWORD(v20) = 0;
          v26 = &OBJC_IVAR___GEOTimeRange__to;
          goto LABEL_44;
        }
      }
      v26 = &OBJC_IVAR___GEOTimeRange__to;
LABEL_41:
      v3[*v6] = 1;
      goto LABEL_42;
    }
LABEL_49:
    v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_50:
    v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_189484264(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOUUIDReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  void *v34;
  _BOOL8 v35;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_49;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          goto LABEL_49;
        if ((v10 >> 3) == 2)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEOUUID__high;
              goto LABEL_41;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              v20 = 0;
              v26 = &OBJC_IVAR___GEOUUID__high;
              goto LABEL_44;
            }
          }
          v26 = &OBJC_IVAR___GEOUUID__high;
LABEL_42:
          if (v3[*v6])
            v20 = 0;
LABEL_44:
          *(_QWORD *)(a1 + *v26) = v20;
          goto LABEL_45;
        }
        if (!*(_QWORD *)(a1 + 8))
        {
          v33 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v34 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v33;

        }
        if ((PBUnknownFieldAdd() & 1) == 0)
          goto LABEL_50;
LABEL_45:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_49;
      }
      v27 = 0;
      v28 = 0;
      v20 = 0;
      *(_BYTE *)(a1 + 32) |= 2u;
      while (1)
      {
        v29 = *v4;
        v30 = *(_QWORD *)&v3[v29];
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
          break;
        v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
        *(_QWORD *)&v3[v29] = v31;
        v20 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0)
        {
          v26 = &OBJC_IVAR___GEOUUID__low;
          goto LABEL_42;
        }
        v27 += 7;
        v25 = v28++ > 8;
        if (v25)
        {
          v20 = 0;
          v26 = &OBJC_IVAR___GEOUUID__low;
          goto LABEL_44;
        }
      }
      v26 = &OBJC_IVAR___GEOUUID__low;
LABEL_41:
      v3[*v6] = 1;
      goto LABEL_42;
    }
LABEL_49:
    v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_50:
    v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_189484C04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOUserReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  void *v40;
  GEOPhoto *v41;
  id v42;
  void *v43;
  int v44;
  char v45;
  char v46;
  int v47;
  int v48;
  void *v49;
  int v51;
  int *v52;
  char v53;
  char v54;
  char v55;
  BOOL v56;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v12;
        v13 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v13 = v7;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_BYTE)v11 | v8;
        v18 = v16 | v11;
        v53 = v17;
        v54 = v18 | v17;
        if (((v18 | v9) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v55 = (v19 == 0) | v18;
        v56 = v18;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v7;
        v14 = v8;
LABEL_8:
        v15 = v11;
LABEL_10:
        ++v10;
        v7 = v13;
        v8 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_64;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_64:
      v51 = 1;
      goto LABEL_65;
    }
    v33 = v25 >> 3;
    v34 = v56;
    if ((v55 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    if ((_DWORD)v33 == 2)
      break;
    if ((_DWORD)v33 == 1)
    {
      if (!v34)
        goto LABEL_55;
      if ((*(_BYTE *)(a1 + 52) & 4) == 0)
      {
        PBReaderReadString();
        v39 = objc_claimAutoreleasedReturnValue();
        v40 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v39;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_83;
      v46 = 32 * *(_BYTE *)(a1 + 52);
LABEL_61:
      v10 += v46 >> 7;
LABEL_62:
      v21 = (int *)MEMORY[0x1E0D82BC8];
      goto LABEL_63;
    }
    if ((v53 & 1) == 0 || (*(_BYTE *)(a1 + 52) & 1) != 0)
    {
LABEL_55:
      v45 = PBReaderSkipValueWithTag();
      v21 = (int *)MEMORY[0x1E0D82BC8];
      if ((v45 & 1) == 0)
      {
        v51 = 0;
        goto LABEL_65;
      }
      goto LABEL_63;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v42 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v43 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v42;

    }
    v44 = PBUnknownFieldAdd();
    v21 = (int *)MEMORY[0x1E0D82BC8];
    if (!v44)
    {
      v51 = 0;
      v52 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
      goto LABEL_66;
    }
LABEL_63:
    if (!(v54 & 1 | (v10 != 0)))
      goto LABEL_64;
  }
  if (!v34)
    goto LABEL_55;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_83;
    v46 = *(_BYTE *)(a1 + 52) << 6;
    goto LABEL_61;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_83;
  v41 = objc_alloc_init(GEOPhoto);
  if (GEOPhotoReadAllFrom((uint64_t)v41, (void *)v3, v7 & 1))
  {
    PBReaderRecallMark();
    v40 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v41;
LABEL_48:

    --v10;
    goto LABEL_62;
  }

LABEL_83:
  v51 = 0;
  v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_65:
  v52 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
  if ((v53 & 1) == 0)
    goto LABEL_67;
LABEL_66:
  *(_BYTE *)(a1 + v52[691]) |= 1u;
LABEL_67:
  if (v56 || (v51 & 1) == 0)
  {
    *(_BYTE *)(a1 + v52[691]) |= 4u;
    *(_BYTE *)(a1 + v52[691]) |= 2u;
    goto LABEL_76;
  }
  if (v19)
  {
    while (2)
    {
      while (1)
      {
        v48 = *v19++;
        v47 = v48;
        if (v48 == 1)
          break;
        if (v47 == 2)
          goto LABEL_75;
        if (!v47)
          goto LABEL_76;
      }
      LOBYTE(v47) = 4;
LABEL_75:
      *(_BYTE *)(a1 + v52[691]) |= v47;
      continue;
    }
  }
LABEL_76:
  if (v51)
    v3 = *(_BYTE *)(v3 + *v21) == 0;
  else
    v3 = 0;
  if (v56)
  {
    v49 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1894857CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894858B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOUserReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOUserReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOUserReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOUserReadAllFrom_initialTag;
  Specified = GEOUserReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189485B1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189485C98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL _GEOUserIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  if ((*(_BYTE *)(a1 + 52) & 0xC) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
    return GEOPhotoIsDirty(*(_QWORD *)(a1 + 24));
  return 0;
}

void sub_189485E6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWalkingSupportedFeaturesReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            v20 = 0;
LABEL_34:
          *(_BYTE *)(a1 + 16) = v20 != 0;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_189486654(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWalkingSupportedFeaturesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOWalkingSupportedFeaturesReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894866B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189486B64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  GEOLatLng *v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  char v47;
  int v48;
  char v49;
  void *v50;
  int v52;
  int *v53;
  char v54;
  char v55;
  char v56;
  BOOL v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v54 = v17;
        v19 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v57 = v18;
        v55 = v19;
        v56 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_72;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_72:
      v52 = 1;
      goto LABEL_73;
    }
    v34 = v26 >> 3;
    v35 = v57;
    if ((v56 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    if ((_DWORD)v34 == 3)
    {
      if (v35 && (*(_BYTE *)(a1 + 60) & 2) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_90;
        v40 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v40, (void *)v3))
          goto LABEL_89;
        PBReaderRecallMark();
        -[GEOWaypoint _addNoFlagsEntryPoint:](a1, v40);

        goto LABEL_70;
      }
      goto LABEL_63;
    }
    if ((_DWORD)v34 == 2)
      break;
    if ((_DWORD)v34 == 1)
    {
      if (v35)
      {
        if ((*(_BYTE *)(a1 + 60) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_90;
          v40 = objc_alloc_init(GEOPlaceSearchRequest);
          if (!GEOPlaceSearchRequestReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
            goto LABEL_89;
          PBReaderRecallMark();
          v41 = 40;
LABEL_56:
          v42 = *(void **)(a1 + v41);
          *(_QWORD *)(a1 + v41) = v40;

          --v7;
LABEL_70:
          v22 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_71;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_90;
        v47 = 16 * *(_BYTE *)(a1 + 60);
LABEL_69:
        v7 += v47 >> 7;
        goto LABEL_70;
      }
    }
    else if ((v54 & 1) != 0 && (*(_BYTE *)(a1 + 60) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v44 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v43;

      }
      v45 = PBUnknownFieldAdd();
      v22 = (int *)MEMORY[0x1E0D82BC8];
      if (!v45)
      {
        v52 = 0;
        v53 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        goto LABEL_75;
      }
      goto LABEL_71;
    }
LABEL_63:
    v46 = PBReaderSkipValueWithTag();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if ((v46 & 1) == 0)
    {
      v52 = 0;
LABEL_73:
      v53 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
      goto LABEL_74;
    }
LABEL_71:
    if (!(v55 & 1 | (v7 != 0)))
      goto LABEL_72;
  }
  if (!v35)
    goto LABEL_63;
  if ((*(_BYTE *)(a1 + 60) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_90;
    v47 = 32 * *(_BYTE *)(a1 + 60);
    goto LABEL_69;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_90;
  v40 = objc_alloc_init(GEOLocation);
  if (GEOLocationReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    v41 = 32;
    goto LABEL_56;
  }
LABEL_89:

LABEL_90:
  v52 = 0;
  v53 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_74:
  if ((v54 & 1) == 0)
    goto LABEL_76;
LABEL_75:
  *(_BYTE *)(a1 + v53[417]) |= 1u;
LABEL_76:
  if (v57 || (v52 & 1) == 0)
  {
    *(_BYTE *)(a1 + v53[417]) |= 8u;
    *(_BYTE *)(a1 + v53[417]) |= 4u;
    *(_BYTE *)(a1 + v53[417]) |= 2u;
  }
  else if (v20)
  {
    while (1)
    {
      v48 = *v20++;
      v49 = 8;
      switch(v48)
      {
        case 0:
          goto LABEL_83;
        case 1:
          goto LABEL_82;
        case 2:
          v49 = 4;
          goto LABEL_82;
        case 3:
          v49 = 2;
LABEL_82:
          *(_BYTE *)(a1 + v53[417]) |= v49;
          break;
        default:
          continue;
      }
    }
  }
LABEL_83:
  if (v52)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v57)
  {
    v50 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1894872A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894873E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189487E10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOWaypointCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[5], "readAll:", 1);
  objc_msgSend(a1[4], "readAll:", 1);
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = a1[3];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v7);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

unint64_t GEOWaypointReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOWaypointReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOWaypointReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOWaypointReadAllFrom_initialTag;
  Specified = GEOWaypointReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOWaypointCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_1894880C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOWaypointReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189488124(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  _BOOL8 v18;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_35;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_35;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
        {
LABEL_36:
          PBReaderRecallMark();
          return 0;
        }
        goto LABEL_32;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPlaceSearchRequestIsValid(a1))
          goto LABEL_36;
LABEL_32:
        PBReaderRecallMark();
        goto LABEL_34;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_36;
LABEL_34:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_35;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocationIsValid(a1))
      goto LABEL_36;
    goto LABEL_32;
  }
LABEL_35:
  v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

void sub_1894885A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOWaypointIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = *(unsigned __int8 *)(a1 + 60);
  if ((v2 & 0x10) != 0)
    return 1;
  if ((v2 & 8) != 0)
  {
    if ((GEOPlaceSearchRequestIsDirty(*(os_unfair_lock_s **)(a1 + 40)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 60);
  }
  if ((v2 & 4) != 0)
  {
    if (GEOLocationIsDirty(*(os_unfair_lock_s **)(a1 + 32)))
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 60);
  }
  return (v2 >> 1) & 1;
}

os_unfair_lock_s *GEOWaypointIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOWaypointIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEOWaypointClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int HasSensitiveFields;
  void *v13;
  _DWORD *v14;

  if (!a3)
  {
    objc_msgSend(a1, "placeSearchRequest");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "clearSensitiveFields:", a2);

LABEL_10:
    objc_msgSend(a1, "location");
    v14 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "clearSensitiveFields:", a2);
    goto LABEL_11;
  }
  if (objc_msgSend(a1, "hasPlaceSearchRequest")
    && (objc_msgSend(a1, "placeSearchRequest"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = GEOPlaceSearchRequestHasSensitiveFields(v5),
        v5,
        v6))
  {
    objc_msgSend(a1, "placeSearchRequest");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v7, "copy");

    objc_msgSend(v8, "location");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "clearSensitiveFields:", a2);

    objc_msgSend(a1, "setPlaceSearchRequest:", v8);
  }
  else
  {
    objc_msgSend(a1, "placeSearchRequest");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

  if (!objc_msgSend(a1, "hasLocation"))
    goto LABEL_10;
  objc_msgSend(a1, "location");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v11);

  if (!HasSensitiveFields)
    goto LABEL_10;
  objc_msgSend(a1, "location");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (_DWORD *)objc_msgSend(v13, "copy");

  GEOLocationClearSensitiveFields(v14);
  objc_msgSend(a1, "setLocation:", v14);
LABEL_11:

}

uint64_t GEOWaypointHasSensitiveFields(void *a1)
{
  void *v2;
  uint64_t HasSensitiveFields;
  void *v4;

  if (!a1)
    return 0;
  objc_msgSend(a1, "placeSearchRequest");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((GEOPlaceSearchRequestHasSensitiveFields(v2) & 1) != 0)
  {
    HasSensitiveFields = 1;
  }
  else
  {
    objc_msgSend(a1, "location");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v4);

  }
  return HasSensitiveFields;
}

void sub_189488D50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894890A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894894E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointIDReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  id v44;
  void *v45;
  int v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  GEOLatLng *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  int v75;
  __int16 v76;
  void *v77;
  int v79;
  int *v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 76);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 72));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 92)), (uint16x4_t)0xFFFAFFF8FFF9FFFBLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 92) >> 4) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 2;
        v81 = v16 & ~(_BYTE)v11 | v9;
        v82 = v8;
        v83 = v16 | v11 | v81;
        if ((((v16 | v11) | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v84 = (v17 == 0) | v16 | v11;
        v85 = v16 | v11;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_126;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_126:
      v79 = 1;
      goto LABEL_127;
    }
    v31 = v23 >> 3;
    v32 = v85;
    if ((v84 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v82 & 1) == 0)
          goto LABEL_97;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 92) |= 1u;
        while (1)
        {
          v40 = *v18;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v41);
          *(_QWORD *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0)
            goto LABEL_100;
          v37 += 7;
          v28 = v38++ >= 9;
          if (v28)
          {
            v39 = 0;
            goto LABEL_102;
          }
        }
        *(_BYTE *)(v3 + *v19) = 1;
LABEL_100:
        if (*(_BYTE *)(v3 + *v19))
          v39 = 0;
LABEL_102:
        v72 = 48;
        goto LABEL_107;
      case 2:
        if ((v82 & 1) == 0)
          goto LABEL_97;
        v47 = 0;
        v48 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 92) |= 2u;
        while (2)
        {
          v49 = *v18;
          v50 = *(_QWORD *)(v3 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v50);
            *(_QWORD *)(v3 + v49) = v51;
            v39 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              v28 = v48++ >= 9;
              if (v28)
              {
                v39 = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v39 = 0;
LABEL_106:
        v72 = 64;
LABEL_107:
        *(_QWORD *)(a1 + v72) = v39;
        goto LABEL_125;
      case 3:
        if (!v32)
          goto LABEL_97;
        if ((*(_WORD *)(a1 + 92) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_145;
          v74 = *(_WORD *)(a1 + 92) << 8;
          goto LABEL_123;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_145;
        v53 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v53, (void *)v3))
          goto LABEL_144;
        PBReaderRecallMark();
        v54 = 40;
        goto LABEL_71;
      case 4:
        if (!v32)
          goto LABEL_97;
        if ((*(_WORD *)(a1 + 92) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_145;
          v74 = *(_WORD *)(a1 + 92) << 10;
LABEL_123:
          v7 += v74 >> 15;
LABEL_124:
          v19 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_125;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_145;
        v53 = objc_alloc_init(GEOStructuredAddress);
        if (GEOStructuredAddressReadAllFrom(v53, (void *)v3))
        {
          PBReaderRecallMark();
          v54 = 24;
LABEL_71:
          v55 = *(void **)(a1 + v54);
          *(_QWORD *)(a1 + v54) = v53;
LABEL_75:

          --v7;
          goto LABEL_124;
        }
LABEL_144:

LABEL_145:
        v79 = 0;
        v80 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_128:
        if ((v81 & 1) != 0)
LABEL_129:
          *(_WORD *)(a1 + v80[421]) |= 0x10u;
        if (v85 & 1 | ((v79 & 1) == 0))
        {
          *(_WORD *)(a1 + v80[421]) |= 0x80u;
          *(_WORD *)(a1 + v80[421]) |= 0x20u;
          *(_WORD *)(a1 + v80[421]) |= 0x100u;
          *(_WORD *)(a1 + v80[421]) |= 0x40u;
        }
        else if (v17)
        {
          while (1)
          {
            v75 = *v17++;
            v76 = 128;
            switch(v75)
            {
              case 0:
                goto LABEL_138;
              case 3:
                goto LABEL_137;
              case 4:
                v76 = 32;
                goto LABEL_137;
              case 5:
                v76 = 256;
                goto LABEL_137;
              case 6:
                v76 = 64;
LABEL_137:
                *(_WORD *)(a1 + v80[421]) |= v76;
                break;
              default:
                continue;
            }
          }
        }
LABEL_138:
        if (v79)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if ((v85 & 1) != 0)
        {
          v77 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 5:
        if (!v32)
          goto LABEL_97;
        if ((*(_WORD *)(a1 + 92) & 0x100) == 0)
        {
          PBReaderReadString();
          v56 = objc_claimAutoreleasedReturnValue();
          v55 = *(void **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v56;
          goto LABEL_75;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_145;
        v74 = *(_WORD *)(a1 + 92) << 7;
        goto LABEL_123;
      case 6:
        if (!v32 || (*(_WORD *)(a1 + 92) & 0x40) != 0)
          goto LABEL_97;
        PBReaderReadString();
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        if (v57)
          -[GEOWaypointID _addNoFlagsFormattedAddressLineHint:](a1, v57);

        goto LABEL_124;
      case 7:
        if ((v82 & 1) == 0)
          goto LABEL_97;
        v58 = 0;
        v59 = 0;
        v60 = 0;
        *(_WORD *)(a1 + 92) |= 8u;
        while (2)
        {
          v61 = *v18;
          v62 = *(_QWORD *)(v3 + v61);
          v63 = v62 + 1;
          if (v62 == -1 || v63 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v62);
            *(_QWORD *)(v3 + v61) = v63;
            v60 |= (unint64_t)(v64 & 0x7F) << v58;
            if (v64 < 0)
            {
              v58 += 7;
              v28 = v59++ >= 9;
              if (v28)
              {
                LODWORD(v60) = 0;
                goto LABEL_111;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v60) = 0;
LABEL_111:
        v73 = 88;
        goto LABEL_116;
      case 8:
        if ((v82 & 1) == 0)
          goto LABEL_97;
        v65 = 0;
        v66 = 0;
        v60 = 0;
        *(_WORD *)(a1 + 92) |= 4u;
        while (2)
        {
          v67 = *v18;
          v68 = *(_QWORD *)(v3 + v67);
          v69 = v68 + 1;
          if (v68 == -1 || v69 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v70 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v68);
            *(_QWORD *)(v3 + v67) = v69;
            v60 |= (unint64_t)(v70 & 0x7F) << v65;
            if (v70 < 0)
            {
              v65 += 7;
              v28 = v66++ >= 9;
              if (v28)
              {
                LODWORD(v60) = 0;
                goto LABEL_115;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v60) = 0;
LABEL_115:
        v73 = 84;
LABEL_116:
        *(_DWORD *)(a1 + v73) = v60;
        goto LABEL_125;
      default:
        if ((v81 & 1) == 0 || (*(_WORD *)(a1 + 92) & 0x10) != 0)
        {
LABEL_97:
          v71 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v71 & 1) == 0)
          {
            v79 = 0;
LABEL_127:
            v80 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
            goto LABEL_128;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v44 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v45 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v44;

          }
          v46 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v46)
          {
            v79 = 0;
            v80 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
            goto LABEL_129;
          }
        }
LABEL_125:
        if (!(v83 & 1 | (v7 != 0)))
          goto LABEL_126;
        continue;
    }
  }
}

void sub_189489F7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18948A0BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18948A1F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18948BA58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointIDReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t v6;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 76))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOWaypointIDReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 76) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOWaypointIDReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOWaypointIDReadAllFrom_initialTag;
  v6 = GEOWaypointIDReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return v6;
}

void sub_18948BBF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointIDReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t v4;

  v3 = a2;
  objc_sync_enter(v3);
  v4 = GEOWaypointIDReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return v4;
}

void sub_18948BC58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointIDIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  _BOOL8 v38;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_68;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_64;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_65;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_68;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_64;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_65;
          }
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_68;
          goto LABEL_42;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOStructuredAddressIsValid(a1))
            goto LABEL_68;
LABEL_42:
          PBReaderRecallMark();
          continue;
        case 5u:
          if (v15 == 2)
            goto LABEL_46;
          goto LABEL_68;
        case 6u:
          if (v15 == 2)
            goto LABEL_46;
          goto LABEL_68;
        case 7u:
          if ((v8 & 7) != 0)
            goto LABEL_68;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_64;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_65;
          }
        case 8u:
          if ((v8 & 7) != 0)
            goto LABEL_68;
          v33 = 0;
          break;
        default:
LABEL_46:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_68:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v34 = *v2;
        v35 = *(_QWORD *)&a1[v34];
        v36 = v35 + 1;
        if (v35 == -1 || v36 > *(_QWORD *)&a1[*v3])
          break;
        v37 = *(char *)(*(_QWORD *)&a1[*v5] + v35);
        *(_QWORD *)&a1[v34] = v36;
        if (v37 < 0)
        {
          v22 = v33++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_65;
      }
LABEL_64:
      a1[*v4] = 1;
LABEL_65:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v38 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v38;
}

void sub_18948C2E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointIDIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v2 = (*(_WORD *)(a1 + 92) & 0x3E0) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return v2;
}

void sub_18948C88C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18948CE38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointLocationReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v18;
  GEOLocation *v20;
  void *v21;
  id v22;
  void *v23;
  _BOOL8 v24;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          if (v11++ >= 9)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_29;
          v20 = objc_alloc_init(GEOLocation);
          if (!GEOLocationReadAllFrom((uint64_t)v20, v5, a3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          v21 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v20;

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v22 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v23 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v22;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_29;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v24 = v5[*v8] == 0;
  }
  else
  {
LABEL_29:
    v24 = 0;
  }
  objc_sync_exit(v5);

  return v24;
}

void sub_18948D58C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointLocationReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOWaypointLocationReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18948D5EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointLocationIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocationIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void GEOWaypointLocationClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  int HasSensitiveFields;
  void *v7;
  _DWORD *v8;

  if (a3
    && objc_msgSend(a1, "hasLocation")
    && (objc_msgSend(a1, "location"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v5),
        v5,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "location");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (_DWORD *)objc_msgSend(v7, "copy");

    GEOLocationClearSensitiveFields(v8);
    objc_msgSend(a1, "setLocation:", v8);
  }
  else
  {
    objc_msgSend(a1, "location");
    v8 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

}

void *GEOWaypointLocationHasSensitiveFields(void *result)
{
  void *v1;
  uint64_t HasSensitiveFields;

  if (result)
  {
    objc_msgSend(result, "location");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v1);

    return (void *)HasSensitiveFields;
  }
  return result;
}

BOOL GEOWaypointNamePropertiesReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  id v27;
  void *v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  _BOOL8 v47;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 20) |= 2u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasDisplayName;
                goto LABEL_56;
              }
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                break;
              v18 += 7;
              v25 = v19++ > 8;
              if (v25)
              {
                v20 = 0;
                v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasDisplayName;
                goto LABEL_59;
              }
            }
            v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasDisplayName;
            goto LABEL_57;
          case 2u:
            v29 = 0;
            v30 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 20) |= 8u;
            while (2)
            {
              v31 = *v4;
              v32 = *(_QWORD *)&v3[v31];
              v33 = v32 + 1;
              if (v32 == -1 || v33 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasSpokenName;
                goto LABEL_56;
              }
              v34 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v32);
              *(_QWORD *)&v3[v31] = v33;
              v20 |= (unint64_t)(v34 & 0x7F) << v29;
              if (v34 < 0)
              {
                v29 += 7;
                v25 = v30++ > 8;
                if (v25)
                {
                  v20 = 0;
                  v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasSpokenName;
                  goto LABEL_59;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasSpokenName;
            goto LABEL_57;
          case 3u:
            v35 = 0;
            v36 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 20) |= 1u;
            while (2)
            {
              v37 = *v4;
              v38 = *(_QWORD *)&v3[v37];
              v39 = v38 + 1;
              if (v38 == -1 || v39 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasDisplayAddress;
                goto LABEL_56;
              }
              v40 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v38);
              *(_QWORD *)&v3[v37] = v39;
              v20 |= (unint64_t)(v40 & 0x7F) << v35;
              if (v40 < 0)
              {
                v35 += 7;
                v25 = v36++ > 8;
                if (v25)
                {
                  v20 = 0;
                  v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasDisplayAddress;
                  goto LABEL_59;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasDisplayAddress;
            goto LABEL_57;
          case 4u:
            v41 = 0;
            v42 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 20) |= 4u;
            break;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v27 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v28 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v27;

            }
            if ((PBUnknownFieldAdd() & 1) == 0)
              goto LABEL_67;
            continue;
        }
        while (1)
        {
          v43 = *v4;
          v44 = *(_QWORD *)&v3[v43];
          v45 = v44 + 1;
          if (v44 == -1 || v45 > *(_QWORD *)&v3[*v5])
            break;
          v46 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v44);
          *(_QWORD *)&v3[v43] = v45;
          v20 |= (unint64_t)(v46 & 0x7F) << v41;
          if ((v46 & 0x80) == 0)
          {
            v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasSpokenAddress;
            goto LABEL_57;
          }
          v41 += 7;
          v25 = v42++ > 8;
          if (v25)
          {
            v20 = 0;
            v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasSpokenAddress;
            goto LABEL_59;
          }
        }
        v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasSpokenAddress;
LABEL_56:
        v3[*v6] = 1;
LABEL_57:
        if (v3[*v6])
          v20 = 0;
LABEL_59:
        *(_BYTE *)(a1 + *v26) = v20 != 0;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v47 = v3[*v6] == 0;
  }
  else
  {
LABEL_67:
    v47 = 0;
  }
  objc_sync_exit(v3);

  return v47;
}

void sub_18948E818(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointNamePropertiesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOWaypointNamePropertiesReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18948E878(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointNamePropertiesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  _BOOL8 v37;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            v19 = v18 + 1;
            if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
              goto LABEL_53;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_54;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
              goto LABEL_53;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_54;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_53;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_54;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v32 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_57:
          v37 = 0;
          goto LABEL_56;
      }
      while (1)
      {
        v33 = *v2;
        v34 = *(_QWORD *)&a1[v33];
        v35 = v34 + 1;
        if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
          break;
        v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
        *(_QWORD *)&a1[v33] = v35;
        if (v36 < 0)
        {
          v21 = v32++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_54;
      }
LABEL_53:
      a1[*v4] = 1;
LABEL_54:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v37 = a1[*v4] == 0;
LABEL_56:
  PBReaderRecallMark();
  return v37;
}

void sub_18948F2E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointPlaceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  GEOMapRegion *v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  char v47;
  int v48;
  char v49;
  void *v50;
  int v52;
  int *v53;
  char v54;
  char v55;
  char v56;
  BOOL v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v54 = v17;
        v19 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v57 = v18;
        v55 = v19;
        v56 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_72;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_72:
      v52 = 1;
      goto LABEL_73;
    }
    v34 = v26 >> 3;
    v35 = v57;
    if ((v56 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    if ((_DWORD)v34 != 3)
      break;
    if (v35)
    {
      if ((*(_BYTE *)(a1 + 60) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_90;
        v40 = objc_alloc_init(GEOMapRegion);
        if (!GEOMapRegionReadAllFrom((uint64_t)v40, (void *)v3))
          goto LABEL_89;
        PBReaderRecallMark();
        v41 = 32;
        goto LABEL_51;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_90;
      v47 = 32 * *(_BYTE *)(a1 + 60);
LABEL_69:
      v7 += v47 >> 7;
      goto LABEL_70;
    }
LABEL_63:
    v46 = PBReaderSkipValueWithTag();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if ((v46 & 1) == 0)
    {
      v52 = 0;
LABEL_73:
      v53 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
      goto LABEL_74;
    }
LABEL_71:
    if (!(v55 & 1 | (v7 != 0)))
      goto LABEL_72;
  }
  if ((_DWORD)v34 != 2)
  {
    if ((_DWORD)v34 == 1)
    {
      if (v35)
      {
        if ((*(_BYTE *)(a1 + 60) & 2) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_90;
          v40 = objc_alloc_init(GEOLatLng);
          if (!GEOLatLngReadAllFrom((uint64_t)v40, (void *)v3))
            goto LABEL_89;
          PBReaderRecallMark();
          v41 = 24;
LABEL_51:
          v42 = *(void **)(a1 + v41);
          *(_QWORD *)(a1 + v41) = v40;

          --v7;
LABEL_70:
          v22 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_71;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_90;
        v47 = *(_BYTE *)(a1 + 60) << 6;
        goto LABEL_69;
      }
    }
    else if ((v54 & 1) != 0 && (*(_BYTE *)(a1 + 60) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v44 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v43;

      }
      v45 = PBUnknownFieldAdd();
      v22 = (int *)MEMORY[0x1E0D82BC8];
      if (!v45)
      {
        v52 = 0;
        v53 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        goto LABEL_75;
      }
      goto LABEL_71;
    }
    goto LABEL_63;
  }
  if (!v35 || (*(_BYTE *)(a1 + 60) & 8) != 0)
    goto LABEL_63;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_90;
  v40 = objc_alloc_init(GEORoadAccessPoint);
  if (GEORoadAccessPointReadAllFrom((uint64_t)v40, (void *)v3))
  {
    PBReaderRecallMark();
    -[GEOWaypointPlace _addNoFlagsRoadAccessPoint:](a1, v40);

    goto LABEL_70;
  }
LABEL_89:

LABEL_90:
  v52 = 0;
  v53 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_74:
  if ((v54 & 1) == 0)
    goto LABEL_76;
LABEL_75:
  *(_BYTE *)(a1 + v53[423]) |= 1u;
LABEL_76:
  if (v57 || (v52 & 1) == 0)
  {
    *(_BYTE *)(a1 + v53[423]) |= 2u;
    *(_BYTE *)(a1 + v53[423]) |= 8u;
    *(_BYTE *)(a1 + v53[423]) |= 4u;
  }
  else if (v20)
  {
    while (1)
    {
      v48 = *v20++;
      v49 = 2;
      switch(v48)
      {
        case 0:
          goto LABEL_83;
        case 1:
          goto LABEL_82;
        case 2:
          v49 = 8;
          goto LABEL_82;
        case 3:
          v49 = 4;
LABEL_82:
          *(_BYTE *)(a1 + v53[423]) |= v49;
          break;
        default:
          continue;
      }
    }
  }
LABEL_83:
  if (v52)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v57)
  {
    v50 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_18948FA28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18948FD58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894905D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOWaypointPlaceCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[3], "readAll:", 1);
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v2 = a1[5];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v8);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  return objc_msgSend(a1[4], "readAll:", 1);
}

unint64_t GEOWaypointPlaceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOWaypointPlaceReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOWaypointPlaceReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOWaypointPlaceReadAllFrom_initialTag;
  Specified = GEOWaypointPlaceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOWaypointPlaceCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189490888(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointPlaceReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOWaypointPlaceReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894908E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointPlaceIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  _BOOL8 v18;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_35;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_35;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
        {
LABEL_36:
          PBReaderRecallMark();
          return 0;
        }
        goto LABEL_32;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
          goto LABEL_36;
LABEL_32:
        PBReaderRecallMark();
        goto LABEL_34;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_36;
LABEL_34:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_35;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEORoadAccessPointIsValid(a1))
      goto LABEL_36;
    goto LABEL_32;
  }
LABEL_35:
  v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

void sub_189490D74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointPlaceIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = (*(_BYTE *)(a1 + 60) & 0x1E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_1894912CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189491624(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189491B20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointTypedReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  BOOL v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  id v45;
  void *v46;
  int v47;
  GEOWaypointID *v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  void *v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  __int16 v87;
  int v88;
  __int16 v89;
  void *v90;
  int v92;
  char v93;
  char v94;
  char v95;
  char v96;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
  v13 = (unsigned __int16)(vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 96)), (uint16x4_t)0xFFF6FFF7FFF8FFF5) & 0xFF01FF01FF01FF01))+ ((*(_WORD *)(a1 + 96) >> 7) & 1)+ ((*(_WORD *)(a1 + 96) >> 6) & 1));
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v15 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 > 3;
        v93 = v17 & ~(_BYTE)v11 | v9;
        v94 = v17 | v11 | v93;
        if ((((v17 | v11) | v8) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v95 = (v18 == 0) | v17 | v11;
        v96 = v17 | v11;
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v9;
LABEL_8:
        v15 = v10;
        v16 = v11;
LABEL_10:
        ++v7;
        v9 = v14;
        v10 = v15;
        v11 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v20))
      goto LABEL_160;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v6))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      v29 = v23++ >= 9;
      if (v29)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_27:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_160:
      v92 = 1;
      goto LABEL_161;
    }
    v32 = v24 >> 3;
    v33 = v96;
    if ((v95 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_119;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_WORD *)(a1 + v12[425]) |= 8u;
        while (1)
        {
          v41 = *v19;
          v42 = *(_QWORD *)(v3 + v41);
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)(v3 + *v6))
            break;
          v44 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v42);
          *(_QWORD *)(v3 + v41) = v43;
          v40 |= (unint64_t)(v44 & 0x7F) << v38;
          if ((v44 & 0x80) == 0)
            goto LABEL_122;
          v38 += 7;
          v29 = v39++ >= 9;
          if (v29)
          {
            LODWORD(v40) = 0;
            goto LABEL_124;
          }
        }
        *(_BYTE *)(v3 + *v20) = 1;
LABEL_122:
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v40) = 0;
LABEL_124:
        v84 = 88;
        goto LABEL_146;
      case 2:
        if (!v33)
          goto LABEL_119;
        if ((*(_WORD *)(a1 + v12[425]) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_179;
          v12 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
          v87 = *(_WORD *)(a1 + 96) << 7;
          goto LABEL_157;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_179;
        v48 = objc_alloc_init(GEOWaypointID);
        if (!GEOWaypointIDReadAllFrom((uint64_t)v48, (void *)v3, v10 & 1))
          goto LABEL_178;
        PBReaderRecallMark();
        v49 = 32;
        goto LABEL_102;
      case 3:
        if (!v33)
          goto LABEL_119;
        if ((*(_WORD *)(a1 + v12[425]) & 0x800) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_179;
          v12 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
          v87 = 16 * *(_WORD *)(a1 + 96);
          goto LABEL_157;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_179;
        v48 = objc_alloc_init(GEOWaypointPlace);
        if (!GEOWaypointPlaceReadAllFrom((uint64_t)v48, (void *)v3, v10 & 1))
          goto LABEL_178;
        PBReaderRecallMark();
        v49 = 56;
        goto LABEL_102;
      case 4:
        if (!v33)
          goto LABEL_119;
        if ((*(_WORD *)(a1 + v12[425]) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_179;
          v12 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
          v87 = *(_WORD *)(a1 + 96) << 6;
          goto LABEL_157;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_179;
        v48 = objc_alloc_init(GEOWaypointLocation);
        if (!GEOWaypointLocationReadAllFrom((uint64_t)v48, (void *)v3, v10 & 1))
          goto LABEL_178;
        PBReaderRecallMark();
        v49 = 40;
        goto LABEL_102;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_119;
        v50 = 0;
        v51 = 0;
        v52 = 0;
        *(_WORD *)(a1 + v12[425]) |= 0x10u;
        while (2)
        {
          v53 = *v19;
          v54 = *(_QWORD *)(v3 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              v29 = v51++ >= 9;
              if (v29)
              {
                v52 = 0;
                goto LABEL_128;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          v52 = 0;
LABEL_128:
        v85 = v52 != 0;
        v86 = 92;
        goto LABEL_133;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_119;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        *(_WORD *)(a1 + v12[425]) |= 0x20u;
        while (2)
        {
          v60 = *v19;
          v61 = *(_QWORD *)(v3 + v60);
          v62 = v61 + 1;
          if (v61 == -1 || v62 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v61);
            *(_QWORD *)(v3 + v60) = v62;
            v59 |= (unint64_t)(v63 & 0x7F) << v57;
            if (v63 < 0)
            {
              v57 += 7;
              v29 = v58++ >= 9;
              if (v29)
              {
                v59 = 0;
                goto LABEL_132;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          v59 = 0;
LABEL_132:
        v85 = v59 != 0;
        v86 = 93;
LABEL_133:
        *(_BYTE *)(a1 + v86) = v85;
        goto LABEL_159;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_119;
        v64 = 0;
        v65 = 0;
        v40 = 0;
        *(_WORD *)(a1 + v12[425]) |= 4u;
        while (2)
        {
          v66 = *v19;
          v67 = *(_QWORD *)(v3 + v66);
          v68 = v67 + 1;
          if (v67 == -1 || v68 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v69 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v67);
            *(_QWORD *)(v3 + v66) = v68;
            v40 |= (unint64_t)(v69 & 0x7F) << v64;
            if (v69 < 0)
            {
              v64 += 7;
              v29 = v65++ >= 9;
              if (v29)
              {
                LODWORD(v40) = 0;
                goto LABEL_137;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v40) = 0;
LABEL_137:
        v84 = 84;
        goto LABEL_146;
      case 8:
        if (!v33)
          goto LABEL_119;
        if ((*(_WORD *)(a1 + v12[425]) & 0x400) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_179;
          v12 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
          v87 = 32 * *(_WORD *)(a1 + 96);
          goto LABEL_157;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_179;
        v48 = objc_alloc_init(GEOWaypointNameProperties);
        if (!GEOWaypointNamePropertiesReadAllFrom((uint64_t)v48, (void *)v3))
          goto LABEL_178;
        PBReaderRecallMark();
        v49 = 48;
        goto LABEL_102;
      case 9:
        if (!v33)
          goto LABEL_119;
        if ((*(_WORD *)(a1 + v12[425]) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_179;
          v12 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
          v87 = *(_WORD *)(a1 + 96) << 8;
LABEL_157:
          v7 += v87 >> 15;
LABEL_158:
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v21 = (int *)MEMORY[0x1E0D82BB8];
LABEL_159:
          if (!(v94 & 1 | (v7 != 0)))
            goto LABEL_160;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_179;
        v48 = objc_alloc_init(GEOWaypointUUID);
        if (GEOWaypointUUIDReadAllFrom((uint64_t)v48, (void *)v3))
        {
          PBReaderRecallMark();
          v49 = 24;
LABEL_102:
          v70 = *(void **)(a1 + v49);
          *(_QWORD *)(a1 + v49) = v48;

          --v7;
          v12 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
          goto LABEL_158;
        }
LABEL_178:

LABEL_179:
        v92 = 0;
        v12 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_161:
        if ((v93 & 1) != 0)
LABEL_162:
          *(_WORD *)(a1 + v12[425]) |= 0x40u;
        if (v96 & 1 | ((v92 & 1) == 0))
        {
          *(_WORD *)(a1 + v12[425]) |= 0x100u;
          *(_WORD *)(a1 + v12[425]) |= 0x800u;
          *(_WORD *)(a1 + v12[425]) |= 0x200u;
          *(_WORD *)(a1 + v12[425]) |= 0x400u;
          *(_WORD *)(a1 + v12[425]) |= 0x80u;
        }
        else if (v18)
        {
          while (1)
          {
            v88 = *v18++;
            v89 = 256;
            switch(v88)
            {
              case 0:
                goto LABEL_172;
              case 2:
                goto LABEL_171;
              case 3:
                v89 = 2048;
                goto LABEL_171;
              case 4:
                v89 = 512;
                goto LABEL_171;
              case 8:
                v89 = 1024;
                goto LABEL_171;
              case 9:
                v89 = 128;
LABEL_171:
                *(_WORD *)(a1 + v12[425]) |= v89;
                break;
              default:
                continue;
            }
          }
        }
LABEL_172:
        if (v92)
          v3 = *(_BYTE *)(v3 + *v20) == 0;
        else
          v3 = 0;
        if ((v96 & 1) != 0)
        {
          v90 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 10:
        if ((v8 & 1) == 0)
          goto LABEL_119;
        v71 = 0;
        v72 = 0;
        v40 = 0;
        *(_WORD *)(a1 + v12[425]) |= 1u;
        while (2)
        {
          v73 = *v19;
          v74 = *(_QWORD *)(v3 + v73);
          v75 = v74 + 1;
          if (v74 == -1 || v75 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v76 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v74);
            *(_QWORD *)(v3 + v73) = v75;
            v40 |= (unint64_t)(v76 & 0x7F) << v71;
            if (v76 < 0)
            {
              v71 += 7;
              v29 = v72++ >= 9;
              if (v29)
              {
                LODWORD(v40) = 0;
                goto LABEL_141;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v40) = 0;
LABEL_141:
        v84 = 76;
        goto LABEL_146;
      case 11:
        if ((v8 & 1) == 0)
          goto LABEL_119;
        v77 = 0;
        v78 = 0;
        v40 = 0;
        *(_WORD *)(a1 + v12[425]) |= 2u;
        while (2)
        {
          v79 = *v19;
          v80 = *(_QWORD *)(v3 + v79);
          v81 = v80 + 1;
          if (v80 == -1 || v81 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v82 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v80);
            *(_QWORD *)(v3 + v79) = v81;
            v40 |= (unint64_t)(v82 & 0x7F) << v77;
            if (v82 < 0)
            {
              v77 += 7;
              v29 = v78++ >= 9;
              if (v29)
              {
                LODWORD(v40) = 0;
                goto LABEL_145;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v40) = 0;
LABEL_145:
        v84 = 80;
LABEL_146:
        *(_DWORD *)(a1 + v84) = v40;
        goto LABEL_159;
      default:
        if ((v93 & 1) == 0 || (*(_WORD *)(a1 + v12[425]) & 0x40) != 0)
        {
LABEL_119:
          v83 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BB8];
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v12 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
          if ((v83 & 1) == 0)
          {
            v92 = 0;
            goto LABEL_161;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v45 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v46 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v45;

          }
          v47 = PBUnknownFieldAdd();
          v12 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v21 = (int *)MEMORY[0x1E0D82BB8];
          if (!v47)
          {
            v92 = 0;
            goto LABEL_162;
          }
        }
        goto LABEL_159;
    }
  }
}

void sub_189492830(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18949296C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189492D50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189492E90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189494124(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOWaypointTypedCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  objc_msgSend(a1[4], "readAll:", 1);
  objc_msgSend(a1[7], "readAll:", 1);
  objc_msgSend(a1[5], "readAll:", 1);
  return objc_msgSend(a1[6], "readAll:", 1);
}

unint64_t GEOWaypointTypedReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOWaypointTypedReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOWaypointTypedReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOWaypointTypedReadAllFrom_initialTag;
  Specified = GEOWaypointTypedReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOWaypointTypedCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_189494320(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointTypedReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOWaypointTypedReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189494380(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointTypedIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  _BOOL8 v48;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_93;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_89;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_90;
          }
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOWaypointIDIsValid(a1))
            goto LABEL_93;
          goto LABEL_72;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOWaypointPlaceIsValid(a1))
            goto LABEL_93;
          goto LABEL_72;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOWaypointLocationIsValid(a1))
            goto LABEL_93;
          goto LABEL_72;
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_93;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_89;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_90;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_93;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_89;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_90;
          }
        case 7u:
          if ((v8 & 7) != 0)
            goto LABEL_93;
          v33 = 0;
          while (1)
          {
            v34 = *v2;
            v35 = *(_QWORD *)&a1[v34];
            v36 = v35 + 1;
            if (v35 == -1 || v36 > *(_QWORD *)&a1[*v3])
              goto LABEL_89;
            v37 = *(char *)(*(_QWORD *)&a1[*v5] + v35);
            *(_QWORD *)&a1[v34] = v36;
            if (v37 < 0)
            {
              v22 = v33++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_90;
          }
        case 8u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOWaypointNamePropertiesIsValid(a1))
            goto LABEL_93;
          goto LABEL_72;
        case 9u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDSearchClientBehaviorIsValid(a1))
            goto LABEL_93;
LABEL_72:
          PBReaderRecallMark();
          continue;
        case 0xAu:
          if ((v8 & 7) != 0)
            goto LABEL_93;
          v38 = 0;
          while (1)
          {
            v39 = *v2;
            v40 = *(_QWORD *)&a1[v39];
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)&a1[*v3])
              goto LABEL_89;
            v42 = *(char *)(*(_QWORD *)&a1[*v5] + v40);
            *(_QWORD *)&a1[v39] = v41;
            if (v42 < 0)
            {
              v22 = v38++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_90;
          }
        case 0xBu:
          if ((v8 & 7) != 0)
            goto LABEL_93;
          v43 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_93:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v44 = *v2;
        v45 = *(_QWORD *)&a1[v44];
        v46 = v45 + 1;
        if (v45 == -1 || v46 > *(_QWORD *)&a1[*v3])
          break;
        v47 = *(char *)(*(_QWORD *)&a1[*v5] + v45);
        *(_QWORD *)&a1[v44] = v46;
        if (v47 < 0)
        {
          v22 = v43++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_90;
      }
LABEL_89:
      a1[*v4] = 1;
LABEL_90:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v48 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v48;
}

void sub_189494AD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOWaypointTypedIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v2 = *(unsigned __int16 *)(a1 + 96);
  if ((v2 & 0x1000) != 0)
    return 1;
  if ((v2 & 0x100) != 0)
  {
    if (GEOWaypointIDIsDirty(*(_QWORD *)(a1 + 32)))
      return 1;
    v2 = *(unsigned __int16 *)(a1 + 96);
  }
  if ((v2 & 0x800) == 0)
    goto LABEL_8;
  if (GEOWaypointPlaceIsDirty(*(_QWORD *)(a1 + 56)))
    return 1;
  v2 = *(unsigned __int16 *)(a1 + 96);
LABEL_8:
  if ((v2 & 0x600) != 0)
    return 1;
  return (v2 >> 7) & 1;
}

os_unfair_lock_s *GEOWaypointTypedIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOWaypointTypedIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 18);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEOWaypointTypedClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  id v9;

  if (a3
    && objc_msgSend(a1, "hasWaypointLocation")
    && (objc_msgSend(a1, "waypointLocation"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = GEOWaypointLocationHasSensitiveFields(v5),
        v5,
        v6))
  {
    objc_msgSend(a1, "waypointLocation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (id)objc_msgSend(v7, "copy");

    objc_msgSend(v9, "location");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);

    objc_msgSend(a1, "setWaypointLocation:", v9);
  }
  else
  {
    objc_msgSend(a1, "waypointLocation");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "clearSensitiveFields:", a2);
  }

}

void *GEOWaypointTypedHasSensitiveFields(void *result)
{
  void *v1;
  void *v2;

  if (result)
  {
    objc_msgSend(result, "waypointLocation");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = GEOWaypointLocationHasSensitiveFields(v1);

    return v2;
  }
  return result;
}

void sub_18949523C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189495960(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointUUIDReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  void *v34;
  _BOOL8 v35;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_49;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          goto LABEL_49;
        if ((v10 >> 3) == 2)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEOWaypointUUID__high;
              goto LABEL_41;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              v20 = 0;
              v26 = &OBJC_IVAR___GEOWaypointUUID__high;
              goto LABEL_44;
            }
          }
          v26 = &OBJC_IVAR___GEOWaypointUUID__high;
LABEL_42:
          if (v3[*v6])
            v20 = 0;
LABEL_44:
          *(_QWORD *)(a1 + *v26) = v20;
          goto LABEL_45;
        }
        if (!*(_QWORD *)(a1 + 8))
        {
          v33 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v34 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v33;

        }
        if ((PBUnknownFieldAdd() & 1) == 0)
          goto LABEL_50;
LABEL_45:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_49;
      }
      v27 = 0;
      v28 = 0;
      v20 = 0;
      *(_BYTE *)(a1 + 32) |= 2u;
      while (1)
      {
        v29 = *v4;
        v30 = *(_QWORD *)&v3[v29];
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
          break;
        v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
        *(_QWORD *)&v3[v29] = v31;
        v20 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0)
        {
          v26 = &OBJC_IVAR___GEOWaypointUUID__low;
          goto LABEL_42;
        }
        v27 += 7;
        v25 = v28++ > 8;
        if (v25)
        {
          v20 = 0;
          v26 = &OBJC_IVAR___GEOWaypointUUID__low;
          goto LABEL_44;
        }
      }
      v26 = &OBJC_IVAR___GEOWaypointUUID__low;
LABEL_41:
      v3[*v6] = 1;
      goto LABEL_42;
    }
LABEL_49:
    v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_50:
    v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_189496240(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

const __CFString *GEOLogDirectory(_QWORD *a1)
{
  void *v2;
  const __CFString *v3;
  char v4;
  void *v5;
  id v6;
  NSObject *v7;
  id v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = CFSTR("/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/Maps");
  v4 = objc_msgSend(v2, "fileExistsAtPath:", CFSTR("/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/Maps"));

  if ((v4 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 0;
    objc_msgSend(v5, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", CFSTR("/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/Maps"), 1, 0, &v9);
    v6 = v9;

    if (v6)
    {
      GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v11 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/GeoServices/Logging/GEOFileLogging.m";
        v12 = 1024;
        v13 = 42;
        v14 = 2112;
        v15 = v6;
        _os_log_impl(&dword_1885A9000, v7, OS_LOG_TYPE_ERROR, "%s:%d %@", buf, 0x1Cu);
      }

      v3 = 0;
      if (a1)
        *a1 = objc_retainAutorelease(v6);
    }

  }
  return v3;
}

void _GEOLogToFile(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  pid_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  __CFString *v25;
  __CFString *v26;
  const char *v27;
  const UInt8 *v28;
  CFIndex v29;
  CFStringRef v30;
  uint64_t v31;
  __CFString *v32;
  __CFString *v33;
  __CFString *v34;
  void *v35;
  __CFString *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  NSObject *v44;
  void *v45;
  id v46;
  id v47;
  BOOL v48;
  void *v49;
  void *v50;
  _BOOL4 v51;
  NSObject *v52;
  id *v53;
  NSObject *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  id *v65;
  NSObject *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  char v70;
  void *v71;
  void *v72;
  void *v73;
  NSObject *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  NSObject *v82;
  uint64_t v83;
  id v84;
  id v85;
  void *v86;
  id v87;
  __CFString *v88;
  id v89;
  void *v90;
  void *v91;
  id v92;
  id v93;
  _QWORD v94[4];
  NSObject *v95;
  id obj;
  id v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t);
  void (*v102)(uint64_t);
  id v103;
  uint8_t v104[4];
  const char *v105;
  __int16 v106;
  int v107;
  __int16 v108;
  uint64_t v109;
  _BYTE buf[32];
  id v111;
  id v112;
  uint64_t *v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v10 = a1;
  v92 = a2;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", v92, &a9);
  v12 = v10;
  v13 = v11;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = qword_1ECDBC1B0;
  v16 = v13;
  v17 = v12;
  v18 = v14;
  if (v15 != -1)
    dispatch_once(&qword_1ECDBC1B0, &__block_literal_global_111);
  objc_msgSend((id)qword_1ECDBC1A8, "stringFromDate:", v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = (void *)MEMORY[0x1E0CB3940];
  v21 = getpid();
  objc_msgSend(MEMORY[0x1E0CB3978], "currentThread");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "stringWithFormat:", CFSTR("%@, %ld, %p, [%@]: %@"), v19, v21, v22, v17, v16);
  v91 = (void *)objc_claimAutoreleasedReturnValue();

  v23 = v17;
  if (qword_1ECDBC1C8 != -1)
    dispatch_once(&qword_1ECDBC1C8, &__block_literal_global_18);
  objc_msgSend(0, "objectForKey:", v23);
  v24 = objc_claimAutoreleasedReturnValue();
  v25 = &stru_1E1C241D0;
  if (v24)
    v25 = (__CFString *)v24;
  v26 = v25;
  v27 = getprogname();
  v28 = (const UInt8 *)v27;
  if (v27)
  {
    v29 = strlen(v27);
    v30 = CFStringCreateWithBytes(0, v28, v29, 0x8000100u, 0);
  }
  else
  {
    v31 = getpid();
    v30 = CFStringCreateWithFormat(0, 0, CFSTR("pid_%d"), v31);
  }
  v32 = (__CFString *)v30;
  if (-[__CFString length](v26, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), v32, v26);
    v33 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v33 = v32;
  }
  v34 = v33;

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = v34;
  if (qword_1ECDBC1D0 != -1)
    dispatch_once(&qword_1ECDBC1D0, &__block_literal_global_28);
  v37 = (void *)MEMORY[0x1E0CB3940];
  v38 = (void *)qword_1ECDBC1D8;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "stringFromDate:", v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "stringWithFormat:", CFSTR("%@_%@.log"), v36, v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  v98 = 0;
  GEOLogDirectory(&v98);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = v42;
  if (v98)
  {
    GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
    v44 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/GeoServices/GeoServices/Logging/GEOFileLogging.m";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 165;
      _os_log_impl(&dword_1885A9000, v44, OS_LOG_TYPE_ERROR, "Error creating LogDirectory for Maps. Cannot create filepath %s:%d", buf, 0x12u);
    }

    v45 = 0;
  }
  else
  {
    objc_msgSend(v42, "stringByAppendingPathComponent:", v41);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
  }

  if ((objc_msgSend(v35, "fileExistsAtPath:", v45) & 1) == 0)
    objc_msgSend((id)qword_1ECDBC1B8, "removeObjectForKey:", v26);
  objc_msgSend((id)qword_1ECDBC1B8, "objectForKey:", v26);
  v46 = (id)objc_claimAutoreleasedReturnValue();
  if (!v46)
  {
    objc_msgSend((id)qword_1ECDBC1C0, "objectForKey:", v23);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = v50 == 0;

    if (v51)
    {
      v89 = v35;
      v88 = v36;
      v98 = 0;
      v99 = &v98;
      v100 = 0x3032000000;
      v101 = __Block_byref_object_copy__59;
      v102 = __Block_byref_object_dispose__59;
      v103 = 0;
      v97 = 0;
      GEOLogDirectory(&v97);
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      v87 = v97;
      if (v87)
      {
        GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
        v52 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/GeoServices/GeoServices/Logging/GEOFileLogging.m";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 101;
          _os_log_impl(&dword_1885A9000, v52, OS_LOG_TYPE_ERROR, "Error creating LogDirectory for Maps. Cannot prune logs %s:%d", buf, 0x12u);
        }
      }
      else
      {
        v53 = (id *)(v99 + 5);
        obj = (id)v99[5];
        objc_msgSend(v89, "contentsOfDirectoryAtPath:error:", v90, &obj);
        v82 = objc_claimAutoreleasedReturnValue();
        objc_storeStrong(v53, obj);
        if (v99[5])
        {
          GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
          v54 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            v55 = v99[5];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/GeoServices/GeoServices/Logging/GEOFileLogging.m";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 107;
            *(_WORD *)&buf[18] = 2112;
            *(_QWORD *)&buf[20] = v55;
            _os_log_impl(&dword_1885A9000, v54, OS_LOG_TYPE_ERROR, "%s:%d %@", buf, 0x1Cu);
          }
        }
        else
        {
          v56 = (void *)MEMORY[0x1E0CB3880];
          v57 = MEMORY[0x1E0C809B0];
          v94[0] = MEMORY[0x1E0C809B0];
          v94[1] = 3221225472;
          v94[2] = ___pruneOldLogs_block_invoke;
          v94[3] = &unk_1E1C0F410;
          v95 = v88;
          objc_msgSend(v56, "predicateWithBlock:", v94);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject filteredArrayUsingPredicate:](v82, "filteredArrayUsingPredicate:", v58);
          v81 = (void *)objc_claimAutoreleasedReturnValue();

          v59 = v81;
          if ((unint64_t)objc_msgSend(v81, "count") >= 7)
          {
            *(_QWORD *)buf = v57;
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = ___pruneOldLogs_block_invoke_2;
            *(_QWORD *)&buf[24] = &unk_1E1C0F438;
            v85 = v90;
            v111 = v85;
            v84 = v89;
            v112 = v84;
            v113 = &v98;
            objc_msgSend(v81, "sortedArrayUsingComparator:", buf);
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            v60 = (void *)v99[5];
            v99[5] = 0;

            v61 = objc_msgSend(v86, "count");
            v83 = v61 - 6;
            if (v61 != 6)
            {
              v62 = 0;
              do
              {
                objc_msgSend(v86, "objectAtIndex:", v62);
                v63 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v85, "stringByAppendingPathComponent:", v63);
                v64 = (void *)objc_claimAutoreleasedReturnValue();

                v65 = (id *)(v99 + 5);
                v93 = (id)v99[5];
                objc_msgSend(v84, "removeItemAtPath:error:", v64, &v93);
                objc_storeStrong(v65, v93);
                if (v99[5])
                {
                  GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
                  v66 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                  {
                    v67 = v99[5];
                    *(_DWORD *)v104 = 136315650;
                    v105 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/GeoServices/Logging/GEOFileLogging.m";
                    v106 = 1024;
                    v107 = 142;
                    v108 = 2112;
                    v109 = v67;
                    _os_log_impl(&dword_1885A9000, v66, OS_LOG_TYPE_ERROR, "%s:%d %@", v104, 0x1Cu);
                  }

                  v68 = (void *)v99[5];
                  v99[5] = 0;

                }
                ++v62;
              }
              while (v83 != v62);
            }

            v59 = v81;
          }

          v54 = v95;
        }

        v52 = v82;
      }

      _Block_object_dispose(&v98, 8);
      objc_msgSend((id)qword_1ECDBC1C0, "setObject:forKey:", MEMORY[0x1E0C9AAB0], v23);
    }
    if (v45)
    {
      if ((objc_msgSend(v35, "fileExistsAtPath:", v45) & 1) != 0
        || (objc_msgSend(MEMORY[0x1E0C99D50], "data"),
            v69 = (void *)objc_claimAutoreleasedReturnValue(),
            v70 = objc_msgSend(v35, "createFileAtPath:contents:attributes:", v45, v69, 0),
            v69,
            (v70 & 1) != 0))
      {
        objc_msgSend(MEMORY[0x1E0CB3608], "fileHandleForWritingAtPath:", v45);
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = v71;
        if (v71)
        {
          objc_msgSend(v71, "seekToEndReturningOffset:error:", 0, 0);
          objc_msgSend((id)qword_1ECDBC1B8, "setObject:forKey:", v46, v26);
          goto LABEL_23;
        }
        GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
        v74 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v45;
          _os_log_impl(&dword_1885A9000, v74, OS_LOG_TYPE_ERROR, "Could not open log file: %@", buf, 0xCu);
        }
      }
      else
      {
        GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
        v74 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v45;
          _os_log_impl(&dword_1885A9000, v74, OS_LOG_TYPE_ERROR, "Could not create log file: %@", buf, 0xCu);
        }
      }

    }
    else
    {
      v72 = (void *)qword_1ECDBC1B8;
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v72, "setObject:forKey:", v73, v23);

    }
    v46 = 0;
    goto LABEL_57;
  }
LABEL_23:
  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v47 = (id)objc_claimAutoreleasedReturnValue();
  v48 = v46 == v47;

  if (!v48)
  {
    v46 = v46;
    v49 = v46;
    goto LABEL_58;
  }
LABEL_57:
  v49 = 0;
LABEL_58:

  objc_msgSend((id)_MergedGlobals_253, "objectForKeyedSubscript:", v23);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v76 = objc_msgSend(v75, "unsignedLongValue");

  if (v76)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("\n-----------------------\n--- Dropped %lu Log entries for facility(%@) due to 'no disk space' error ---\n-----------------------\n\n"), v76, v23);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v77, "dataUsingEncoding:", 4);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "writeData:error:", v78, 0);
    objc_msgSend((id)_MergedGlobals_253, "removeObjectForKey:", v23);

  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@\n"), v91);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "dataUsingEncoding:", 4);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "writeData:error:", v80, 0);

}

void sub_189497150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

uint64_t ___dateFormatterForLogMessage_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)qword_1ECDBC1A8;
  qword_1ECDBC1A8 = (uint64_t)v0;

  return objc_msgSend((id)qword_1ECDBC1A8, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss.SSS"));
}

void ___handleForFacility_block_invoke()
{
  id v0;
  void *v1;
  id v2;
  void *v3;

  if (!qword_1ECDBC1C0)
  {
    v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v1 = (void *)qword_1ECDBC1C0;
    qword_1ECDBC1C0 = (uint64_t)v0;

  }
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v3 = (void *)qword_1ECDBC1B8;
  qword_1ECDBC1B8 = (uint64_t)v2;

}

uint64_t ___filenameForIdentifier_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)qword_1ECDBC1D8;
  qword_1ECDBC1D8 = (uint64_t)v0;

  objc_msgSend((id)qword_1ECDBC1D8, "setDateStyle:", 1);
  return objc_msgSend((id)qword_1ECDBC1D8, "setDateFormat:", CFSTR("yyyy_MM_dd"));
}

uint64_t ___pruneOldLogs_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "hasPrefix:", *(_QWORD *)(a1 + 32));
}

uint64_t ___pruneOldLogs_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  id v24;
  id obj;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "stringByAppendingPathComponent:", a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "stringByAppendingPathComponent:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = *(void **)(a1 + 40);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v10 + 40);
  objc_msgSend(v9, "attributesOfItemAtPath:error:", v7, &obj);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(v10 + 40), obj);
  objc_msgSend(v11, "fileModificationDate");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v15 = *(_QWORD *)(v13 + 40);
  v14 = (id *)(v13 + 40);
  if (v15)
  {
    GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 136315650;
      v27 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/GeoServices/Logging/GEOFileLogging.m";
      v28 = 1024;
      v29 = 123;
      v30 = 2112;
      v31 = v17;
      _os_log_impl(&dword_1885A9000, v16, OS_LOG_TYPE_ERROR, "%s:%d %@", buf, 0x1Cu);
    }
    v18 = -1;
  }
  else
  {
    v19 = *(void **)(a1 + 40);
    v24 = 0;
    objc_msgSend(v19, "attributesOfItemAtPath:error:", v8, &v24);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong(v14, v24);
    objc_msgSend(v20, "fileModificationDate");
    v16 = objc_claimAutoreleasedReturnValue();

    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
    {
      GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        *(_DWORD *)buf = 136315650;
        v27 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/GeoServices/Logging/GEOFileLogging.m";
        v28 = 1024;
        v29 = 128;
        v30 = 2112;
        v31 = v22;
        _os_log_impl(&dword_1885A9000, v21, OS_LOG_TYPE_ERROR, "%s:%d %@", buf, 0x1Cu);
      }

      v18 = 1;
    }
    else
    {
      v18 = objc_msgSend(v12, "compare:", v16);
    }
  }

  return v18;
}

void sub_189497728(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_189497898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  id *v15;
  uint64_t v16;

  objc_destroyWeak(v15);
  objc_destroyWeak((id *)(v16 - 72));

  _Unwind_Resume(a1);
}

void sub_18949791C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_189497B50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _deleteOldEntitledKey(void *a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a1;
  v5 = a3;
  if (GEOConfig_keyRequiresEntitlement(v9, v6))
  {
    GEOConfig_stripEntitlement(v9);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "getConfigValueForKey:countryCode:options:source:", v7, 0, a2, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
      objc_msgSend(v5, "setConfigValue:forKey:options:synchronous:", 0, v7, a2, 1);

  }
}

id GEOGetGEORouteBuilderLog()
{
  if (qword_1ECDBC1E8 != -1)
    dispatch_once(&qword_1ECDBC1E8, &__block_literal_global_112);
  return (id)_MergedGlobals_254;
}

void sub_18949842C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_189498B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_189498E30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_189499D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  void *v42;
  void *v43;
  void *v44;

  _Unwind_Resume(a1);
}

void sub_18949A20C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18949A3C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18949A6F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18949A9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18949ADFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_18949AF04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18949B060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18949B1B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18949B31C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18949B528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18949B95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_18949BCC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18949C11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_18949C2A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18949C6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  _Block_object_dispose((const void *)(v22 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_18949C974(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18949CB44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t GEOAppleMediaServicesMediaTypeForGeoSubtype(unsigned int a1)
{
  if (a1 > 0x13)
    return 0;
  else
    return qword_189CDD478[a1];
}

__CFString *__setUserInfoValueProviderForGEOProtobufSessionErrorDomain_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  uint64_t v5;
  __CFString *v6;

  v4 = a2;
  if (objc_msgSend(a3, "isEqualToString:", *MEMORY[0x1E0CB2D50])
    && (v5 = objc_msgSend(v4, "code"), (unint64_t)(v5 - 1) <= 3))
  {
    v6 = off_1E1C0F640[v5 - 1];
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

_GEOCancelBlock *GEOCancellableForBlock(void *a1)
{
  id v1;
  _GEOCancelBlock *v2;
  id v3;
  uint64_t v4;
  id block;
  objc_super v7;

  v1 = a1;
  v2 = [_GEOCancelBlock alloc];
  v3 = v1;
  if (v2)
  {
    v7.receiver = v2;
    v7.super_class = (Class)_GEOCancelBlock;
    v2 = (_GEOCancelBlock *)objc_msgSendSuper2(&v7, sel_init);
    if (v2)
    {
      v4 = objc_msgSend(v3, "copy");
      block = v2->_block;
      v2->_block = (id)v4;

    }
  }

  return v2;
}

double GEOMapRectForMapRegionE7(void *a1)
{
  id v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  unint64_t v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = GEOTilePointForCoordinate((double)(int)objc_msgSend(v1, "northLatE7") * 0.0000001, (double)(int)objc_msgSend(v1, "westLngE7") * 0.0000001, 20.0);
  v4 = v3;
  v5 = GEOTilePointForCoordinate((double)(int)objc_msgSend(v1, "southLatE7") * 0.0000001, (double)(int)objc_msgSend(v1, "eastLngE7") * 0.0000001, 20.0);
  v7 = v6;
  if ((objc_msgSend(v1, "hasRectangleVertices") & 1) == 0)
  {
    if (!objc_msgSend(v1, "vertexE7sCount"))
    {
      v19 = INFINITY;
      goto LABEL_33;
    }
    if (objc_msgSend(v1, "vertexE7sCount"))
    {
      v8 = 0;
      do
      {
        objc_msgSend(v1, "vertexE7AtIndex:", v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "coordinate");
        v12 = GEOTilePointForCoordinate(v10, v11, 20.0);
        if (v2 >= v12)
          v14 = v12;
        else
          v14 = v2;
        if (v4 >= v13)
          v15 = v13;
        else
          v15 = v4;
        if (v5 <= v12)
          v16 = v12;
        else
          v16 = v5;
        if (v7 <= v13)
          v17 = v13;
        else
          v17 = v7;
        if (v8)
          v4 = v15;
        else
          v4 = v13;
        if (v8)
          v5 = v16;
        else
          v5 = v12;
        if (v8)
          v7 = v17;
        else
          v7 = v13;
        if (v8)
          v2 = v14;
        else
          v2 = v12;

        ++v8;
      }
      while (v8 < objc_msgSend(v1, "vertexE7sCount"));
    }
  }
  v18 = -0.0;
  if (v2 > v5)
    v18 = 268435456.0;
  *(double *)v21 = v2;
  *(double *)&v21[1] = v4;
  *(double *)&v21[2] = v5 + v18;
  *(double *)&v21[3] = v7;
  v19 = GEOMapRectBoundingMapPoints((uint64_t)v21, 2);
LABEL_33:

  return v19;
}

GEOMapRegionE7 *GEOMapRegionE7Union(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  GEOMapRegionE7 *v15;
  GEOMapRegionE7 *v16;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = GEOMapRectForMapRegionE7(v3);
      v8 = v7;
      v10 = v9;
      v12 = v11;
      v13 = GEOMapRectForMapRegionE7(v5);
      v15 = -[GEOMapRegionE7 initWithMapRect:]([GEOMapRegionE7 alloc], "initWithMapRect:", GEOMapRectUnion(v6, v8, v10, v12, v13, v14));
    }
    else
    {
      v15 = (GEOMapRegionE7 *)v3;
    }
  }
  else
  {
    v15 = (GEOMapRegionE7 *)v4;
  }
  v16 = v15;

  return v16;
}

void sub_18949F36C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18949F65C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_18949F91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_18949FDA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18949FEA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18949FFC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  if (!v3)

  _Unwind_Resume(a1);
}

void sub_1894A0060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)GEORouteHypothesisMonitor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1894A0268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1894A0370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1894A0414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1894A0460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1894A0650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1894A08C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1894A0960(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1894A0A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1894A0AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1894A0E8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1894A10F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1894A11F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1894A15DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1894A1844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1894A1CDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1894A1EA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1894A2098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1894A21C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1894A232C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1894A242C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1894A24BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1894A264C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1894A2870(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1894A28DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1894A2C68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1894A2D3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1894A2E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1894A31DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1894A33AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1894A3600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1894A374C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1894A6A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  MEMORY[0x18D76437C](v17, 0x10A1C401611C0F7);

  _Unwind_Resume(a1);
}

void sub_1894A6BE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1894A6CE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1894A7568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;

  MEMORY[0x18D76437C](v31, 0x10E0C4057EA438BLL);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v32 - 112);
  zilch::Path<std::shared_ptr<geo::MapEdge>>::~Path((uint64_t)&a31);
  std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::~deque[abi:ne180100](a12);
  _Unwind_Resume(a1);
}

void sub_1894A7790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  zilch::Path<std::shared_ptr<geo::MapEdge>>::~Path((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t zilch::Path<std::shared_ptr<geo::MapEdge>>::~Path(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 48);
  std::vector<zilch::GeometryPathElement>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 24);
  std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

_QWORD *__copy_helper_block_ea8_40c55_ZTSN5zilch4PathINSt3__110shared_ptrIN3geo7MapEdgeEEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  __int128 v4;

  v3 = (_QWORD *)a1;
  v4 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__init_with_size[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*>((_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3));
  v3[11] = 0;
  v3[12] = 0;
  v3[13] = 0;
  std::vector<zilch::GeometryPathElement>::__init_with_size[abi:ne180100]<zilch::GeometryPathElement*,zilch::GeometryPathElement*>(v3 + 11, *(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 4));
  v3[14] = 0;
  v3[15] = 0;
  v3 += 14;
  v3[2] = 0;
  return std::vector<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry,std::allocator<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry>>::__init_with_size[abi:ne180100]<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*,zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*>(v3, *(const void **)(a2 + 112), *(_QWORD *)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 4);
}

void sub_1894A78E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<zilch::GeometryPathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c55_ZTSN5zilch4PathINSt3__110shared_ptrIN3geo7MapEdgeEEEEE(uint64_t a1)
{
  void *v2;
  void **v3;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  v3 = (void **)(a1 + 88);
  std::vector<zilch::GeometryPathElement>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 64);
  std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

_QWORD *std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__init_with_size[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    while (a2 != a3)
    {
      result = (_QWORD *)std::allocator<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::construct[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>&>(v7, a2);
      a2 += 72;
      v7 += 72;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1894A7B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a1);
}

uint64_t std::allocator<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::construct[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)result = &unk_1E1BF7018;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)result = &off_1E1BF7040;
  v2 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 32) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

_QWORD *zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>::~RoadPathElement(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E1BF7040;
  v2 = (uint64_t)(a1 + 3);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>::~RoadPathElement(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E1BF7040;
  v1 = (uint64_t)(a1 + 3);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v1);
  JUMPOUT(0x18D76437CLL);
}

uint64_t zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>::toString@<X0>(zilch::PathElement *a1@<X0>, _QWORD *a2@<X8>)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[11];
  char v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v15;
  char __str[1024];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)a1 + 3) + 88))(__p);
  if ((v15 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v5 = v15;
  else
    v5 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v4, v5);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  v6 = zilch::PathElement::controlPointIndex(a1);
  std::stringbuf::str();
  if ((v15 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  snprintf(__str, 0x400uLL, "%lu: RPE(%s)", v6, (const char *)v7);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(a2, __str);
  v10[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v11[0] = v8;
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18D764310](&v13);
}

void sub_1894A7E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 72;
      v7 = v4 - 72;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 72;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<zilch::GeometryPathElement>::__init_with_size[abi:ne180100]<zilch::GeometryPathElement*,zilch::GeometryPathElement*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<zilch::GeometryPathElement>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<zilch::GeometryPathElement>,zilch::GeometryPathElement*,zilch::GeometryPathElement*,zilch::GeometryPathElement*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1894A7FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<zilch::GeometryPathElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<zilch::GeometryPathElement>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  char *result;

  if (a2 >= 0x555555555555556)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v3 = 3 * a2;
  result = (char *)operator new(48 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v3];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<zilch::GeometryPathElement>,zilch::GeometryPathElement*,zilch::GeometryPathElement*,zilch::GeometryPathElement*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;

  if (a1 != a2)
  {
    v5 = 0;
    do
    {
      v6 = a3 + v5;
      *(_QWORD *)v6 = &unk_1E1BF7018;
      *(_OWORD *)(v6 + 8) = *(_OWORD *)(a1 + v5 + 8);
      *(_QWORD *)v6 = &off_1E1BF7068;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      v8 = *(_BYTE **)(a1 + v5 + 24);
      v7 = *(_BYTE **)(a1 + v5 + 32);
      v9 = v7 - v8;
      if (v7 != v8)
      {
        std::vector<maps::path_codec::Coordinate>::__vallocate[abi:ne180100]((_QWORD *)(a3 + v5 + 24), 0xAAAAAAAAAAAAAAABLL * (v9 >> 2));
        v10 = *(char **)(a3 + v5 + 32);
        memmove(v10, v8, v9);
        *(_QWORD *)(a3 + v5 + 32) = &v10[4 * (v9 >> 2)];
      }
      v5 += 48;
    }
    while (a1 + v5 != a2);
    a3 += v5;
  }
  return a3;
}

void sub_1894A8114(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;

  v4 = *(void **)(v1 + v2 + 24);
  if (v4)
  {
    *(_QWORD *)(v1 + v2 + 32) = v4;
    operator delete(v4);
  }
  if (v2)
  {
    v5 = v1 - 48;
    do
    {
      (**(void (***)(uint64_t))(v5 + v2))(v5 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<zilch::GeometryPathElement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 48;
      v7 = v4 - 48;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 48;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry,std::allocator<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry>>::__init_with_size[abi:ne180100]<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*,zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry,std::allocator<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1894A823C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry,std::allocator<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v7 = std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v7) + 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 256;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::update(unint64_t a1, uint64_t a2, zilch::ControlPoint *this, _QWORD *a4, int a5, int a6)
{
  std::__shared_weak_count *v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  zilch::GeoPolyline *v22;
  const zilch::GeoCoordinates *v23;
  _QWORD *v24;
  unint64_t i;
  char **v26;
  _DWORD *Point;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  char *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  int v53;
  unsigned __int16 StartHeading;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  __int128 v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double *v78;
  unint64_t v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  const zilch::GeoCoordinates *v90;
  unsigned __int16 v91;
  int v92;
  const zilch::GeoCoordinates *v93;
  unsigned int v94;
  double v95;
  double v96;
  double *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  double *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  const zilch::GeoCoordinates *v111;
  unsigned __int16 v112;
  std::__shared_weak_count *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  double v128;
  _QWORD *v129;
  const zilch::GeoCoordinates *v130;
  char **v131;
  uint64_t v132;
  int v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  int v147;
  char *v148;
  int v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  int v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  std::__shared_weak_count_vtbl *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  double *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  BOOL v188;
  uint64_t v189;
  uint64_t v190;
  double *v191;
  double v192;
  __int128 v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  double v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  __n128 v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  std::__shared_weak_count_vtbl *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t *v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  int v219;
  char **v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  char *v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  char *v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  int v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  __int128 v250;
  std::__shared_weak_count *v251;
  unint64_t *p_shared_owners;
  unint64_t v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  uint64_t v272;
  zilch::ControlPoint *v273;
  _QWORD *v274;
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  zilch::PathElement *__p;
  uint64_t __pa;
  double *__pb;
  void *__pc[2];
  unint64_t v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  double v290;
  double v291;
  __int128 v292;
  double v293;
  _OWORD v294[2];
  double v295;
  double v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  __int128 v299;
  _BYTE v300[24];
  __int128 v301;
  __int128 v302;
  int v303;
  int v304;
  __int128 v305;
  double v306[4];
  uint64_t v307;
  int v308;
  __int128 v309;
  __int16 v310;
  __n128 v311[3];

  if (*(int *)(a1 + 320) <= 1)
  {
    ++*(_QWORD *)(a1 + 328);
    if (zilch::ControlPoint::dummy(this))
    {
      v11 = *(std::__shared_weak_count **)(a1 + 8);
      *(_QWORD *)v300 = *(_QWORD *)a1;
      if (v11)
      {
        *(_QWORD *)&v300[8] = std::__shared_weak_count::lock(v11);
        if (*(_QWORD *)&v300[8])
        {
          v12 = std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(a4, (__n128 *)v300);
          v13 = *(std::__shared_weak_count **)&v300[8];
          if (!*(_QWORD *)&v300[8])
            return;
          v14 = (unint64_t *)(*(_QWORD *)&v300[8] + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
LABEL_337:
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
            std::__shared_weak_count::__release_weak(v13);
          }
          return;
        }
      }
      goto LABEL_341;
    }
    v16 = *(_QWORD *)(a1 + 336);
    *(_QWORD *)(a1 + 336) = 0;
    if (*(_QWORD *)(a1 + 104) == *(_QWORD *)(a1 + 112))
    {
      v44 = zilch::ControlPoint::position(this);
      v45 = *(_DWORD *)(v44 + 8);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)v44;
      *(_DWORD *)(a1 + 40) = v45;
      if (a5)
        goto LABEL_11;
    }
    else if (a5)
    {
LABEL_11:
      v17 = zilch::ControlPoint::position(this);
      v18 = *(_DWORD *)(v17 + 8);
      *(_QWORD *)(a1 + 44) = *(_QWORD *)v17;
      *(_DWORD *)(a1 + 52) = v18;
      v19 = *(_QWORD *)(a1 + 112);
      if (*(_QWORD *)(a1 + 104) != v19 && !*(_DWORD *)(v19 - 16))
      {
        v20 = *(_QWORD *)(a1 + 56);
        v21 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 64) - v20) >> 3) - 1;
        v22 = (zilch::GeoPolyline *)(v20 + 72 * v21 + 40);
        zilch::GeoPolyline::walk(v22, (zilch::GeoPolyline::Walker *)v311);
        v310 = zilch::ControlPoint::heading(this);
        v23 = (const zilch::GeoCoordinates *)zilch::ControlPoint::position(this);
        if (zilch::GeoPolyline::Walker::advanceTo((zilch::GeoPolyline::Walker *)v311, v23, (const zilch::Angle *)&v310)
          && !zilch::GeoPolyline::Walker::done((unint64_t **)v311))
        {
          v286 = v21;
          v275 = a4;
          v278 = v20;
          __p = (zilch::PathElement *)(v20 + 72 * v21);
          v24 = (_QWORD *)operator new();
          v24[1] = 0;
          v24[2] = 0;
          *v24 = 0;
          std::shared_ptr<std::vector<zilch::GeoCoordinates>>::shared_ptr[abi:ne180100]<std::vector<zilch::GeoCoordinates>,void>(&v309, (uint64_t)v24);
          for (i = 0; i <= zilch::GeoPolyline::Walker::point((zilch::GeoPolyline::Walker *)v311); ++i)
          {
            v26 = (char **)v309;
            Point = zilch::GeoPolyline::getPoint(v22, i);
            v28 = (unint64_t)v26[2];
            v29 = (unint64_t)v26[1];
            if (v29 >= v28)
            {
              v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)*v26) >> 2);
              v33 = v32 + 1;
              if (v32 + 1 > 0x1555555555555555)
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)*v26) >> 2);
              if (2 * v34 > v33)
                v33 = 2 * v34;
              if (v34 >= 0xAAAAAAAAAAAAAAALL)
                v35 = 0x1555555555555555;
              else
                v35 = v33;
              if (v35)
                v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::GeoCoordinates>>((uint64_t)(v26 + 2), v35);
              else
                v36 = 0;
              v37 = &v36[12 * v32];
              v38 = *(_QWORD *)Point;
              *((_DWORD *)v37 + 2) = Point[2];
              *(_QWORD *)v37 = v38;
              v40 = *v26;
              v39 = v26[1];
              v41 = v37;
              if (v39 != *v26)
              {
                do
                {
                  v42 = *(_QWORD *)(v39 - 12);
                  v39 -= 12;
                  v43 = *((_DWORD *)v39 + 2);
                  *(_QWORD *)(v41 - 12) = v42;
                  v41 -= 12;
                  *((_DWORD *)v41 + 2) = v43;
                }
                while (v39 != v40);
                v39 = *v26;
              }
              v31 = v37 + 12;
              *v26 = v41;
              v26[1] = v37 + 12;
              v26[2] = &v36[12 * v35];
              if (v39)
                operator delete(v39);
            }
            else
            {
              v30 = *(_QWORD *)Point;
              *(_DWORD *)(v29 + 8) = Point[2];
              *(_QWORD *)v29 = v30;
              v31 = (char *)(v29 + 12);
            }
            v26[1] = v31;
          }
          v307 = zilch::GeoPolyline::Walker::position((zilch::GeoPolyline::Walker *)v311);
          v308 = v219;
          a4 = v275;
          if (zilch::GeoCoordinates::operator!=(&v307, (unsigned int *)(*(_QWORD *)(v309 + 8) - 12)))
          {
            v220 = (char **)v309;
            v221 = *(_QWORD *)(v309 + 8);
            v222 = *(_QWORD *)(v309 + 16);
            if (v221 >= v222)
            {
              v225 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v221 - *(_QWORD *)v309) >> 2);
              v226 = v225 + 1;
              if (v225 + 1 > 0x1555555555555555)
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              v227 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v222 - *(_QWORD *)v309) >> 2);
              if (2 * v227 > v226)
                v226 = 2 * v227;
              if (v227 >= 0xAAAAAAAAAAAAAAALL)
                v228 = 0x1555555555555555;
              else
                v228 = v226;
              if (v228)
                v229 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::GeoCoordinates>>(v309 + 16, v228);
              else
                v229 = 0;
              v230 = &v229[12 * v225];
              v231 = &v229[12 * v228];
              v232 = v307;
              *((_DWORD *)v230 + 2) = v308;
              *(_QWORD *)v230 = v232;
              v224 = v230 + 12;
              v234 = *v220;
              v233 = v220[1];
              if (v233 != *v220)
              {
                do
                {
                  v235 = *(_QWORD *)(v233 - 12);
                  v233 -= 12;
                  v236 = *((_DWORD *)v233 + 2);
                  *(_QWORD *)(v230 - 12) = v235;
                  v230 -= 12;
                  *((_DWORD *)v230 + 2) = v236;
                }
                while (v233 != v234);
                v233 = *v220;
              }
              *v220 = v230;
              v220[1] = v224;
              v220[2] = v231;
              if (v233)
                operator delete(v233);
            }
            else
            {
              v223 = v307;
              *(_DWORD *)(v221 + 8) = v308;
              *(_QWORD *)v221 = v223;
              v224 = (char *)(v221 + 12);
            }
            v220[1] = v224;
          }
          v305 = v309;
          if (*((_QWORD *)&v309 + 1))
          {
            v237 = (unint64_t *)(*((_QWORD *)&v309 + 1) + 8);
            do
              v238 = __ldxr(v237);
            while (__stxr(v238 + 1, v237));
          }
          zilch::GeoPolyline::GeoPolyline((uint64_t)v306, &v305, 0);
          v239 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
          if (*((_QWORD *)&v305 + 1))
          {
            v240 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
            do
              v241 = __ldaxr(v240);
            while (__stlxr(v241 - 1, v240));
            if (!v241)
            {
              ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
              std::__shared_weak_count::__release_weak(v239);
            }
          }
          v242 = v278 + 72 * v286;
          *(_QWORD *)&v299 = *(_QWORD *)(v242 + 24);
          v243 = *(_QWORD *)(v242 + 32);
          *((_QWORD *)&v299 + 1) = v243;
          if (v243)
          {
            v244 = (unint64_t *)(v243 + 8);
            do
              v245 = __ldxr(v244);
            while (__stxr(v245 + 1, v244));
          }
          v246 = zilch::PathElement::controlPointIndex(__p);
          zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>::RoadPathElement((uint64_t)v300, &v299, (uint64_t)v306, v246);
          v247 = *(_QWORD *)(a1 + 56);
          v248 = -1 - 0x71C71C71C71C71C7 * ((*(_QWORD *)(a1 + 64) - v247) >> 3);
          v249 = v247 + 72 * v248;
          *(_OWORD *)(v249 + 8) = *(_OWORD *)&v300[8];
          v250 = v301;
          v301 = 0uLL;
          v251 = *(std::__shared_weak_count **)(v249 + 32);
          *(_OWORD *)(v249 + 24) = v250;
          if (v251)
          {
            p_shared_owners = (unint64_t *)&v251->__shared_owners_;
            do
              v253 = __ldaxr(p_shared_owners);
            while (__stlxr(v253 - 1, p_shared_owners));
            if (!v253)
            {
              ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
              std::__shared_weak_count::__release_weak(v251);
            }
          }
          v254 = v247 + 72 * v248;
          std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](v254 + 40, &v302);
          *(_DWORD *)(v254 + 56) = v303;
          *(_DWORD *)(v254 + 64) = v304;
          *(_QWORD *)v300 = &off_1E1BF7040;
          v255 = (std::__shared_weak_count *)*((_QWORD *)&v302 + 1);
          if (*((_QWORD *)&v302 + 1))
          {
            v256 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 8);
            do
              v257 = __ldaxr(v256);
            while (__stlxr(v257 - 1, v256));
            if (!v257)
            {
              ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
              std::__shared_weak_count::__release_weak(v255);
            }
          }
          v258 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
          if (*((_QWORD *)&v301 + 1))
          {
            v259 = (unint64_t *)(*((_QWORD *)&v301 + 1) + 8);
            do
              v260 = __ldaxr(v259);
            while (__stlxr(v260 - 1, v259));
            if (!v260)
            {
              ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
              std::__shared_weak_count::__release_weak(v258);
            }
          }
          v261 = (std::__shared_weak_count *)*((_QWORD *)&v299 + 1);
          if (*((_QWORD *)&v299 + 1))
          {
            v262 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
            do
              v263 = __ldaxr(v262);
            while (__stlxr(v263 - 1, v262));
            if (!v263)
            {
              ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
              std::__shared_weak_count::__release_weak(v261);
            }
          }
          v264 = *(std::__shared_weak_count **)&v306[1];
          if (*(_QWORD *)&v306[1])
          {
            v265 = (unint64_t *)(*(_QWORD *)&v306[1] + 8);
            do
              v266 = __ldaxr(v265);
            while (__stlxr(v266 - 1, v265));
            if (!v266)
            {
              ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
              std::__shared_weak_count::__release_weak(v264);
            }
          }
          v267 = (std::__shared_weak_count *)*((_QWORD *)&v309 + 1);
          if (*((_QWORD *)&v309 + 1))
          {
            v268 = (unint64_t *)(*((_QWORD *)&v309 + 1) + 8);
            do
              v269 = __ldaxr(v268);
            while (__stlxr(v269 - 1, v268));
            if (!v269)
            {
              ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
              std::__shared_weak_count::__release_weak(v267);
            }
          }
        }
      }
      v270 = *(std::__shared_weak_count **)(a1 + 8);
      *(_QWORD *)v300 = *(_QWORD *)a1;
      if (v270)
      {
        *(_QWORD *)&v300[8] = std::__shared_weak_count::lock(v270);
        if (*(_QWORD *)&v300[8])
        {
          v12 = std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(a4, (__n128 *)v300);
          v13 = *(std::__shared_weak_count **)&v300[8];
          if (!*(_QWORD *)&v300[8])
            return;
          v271 = (unint64_t *)(*(_QWORD *)&v300[8] + 8);
          do
            v15 = __ldaxr(v271);
          while (__stlxr(v15 - 1, v271));
          goto LABEL_337;
        }
      }
LABEL_341:
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    if (*(_QWORD *)(a1 + 104) != *(_QWORD *)(a1 + 112))
    {
      if (a6 != 1)
      {
        zilch::GeoPolyline::walk((zilch::GeoPolyline *)(a1 + 152), (zilch::GeoPolyline::Walker *)v300);
        LOWORD(v309) = zilch::ControlPoint::heading(this);
        v111 = (const zilch::GeoCoordinates *)zilch::ControlPoint::position(this);
        zilch::GeoPolyline::Walker::advanceTo((zilch::GeoPolyline::Walker *)v300, v111, (const zilch::Angle *)&v309);
        v112 = zilch::GeoPolyline::Walker::heading((uint64_t **)v300);
        v306[0] = zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::getProbability((double *)a1, this, a1 + 152, v112);
        zilch::Probability::Probability(&v293, 0.1);
        if (!zilch::Probability::operator>=(v306, v293))
          return;
        v113 = *(std::__shared_weak_count **)(a1 + 8);
        v311[0].n128_u64[0] = *(_QWORD *)a1;
        if (v113)
        {
          v311[0].n128_u64[1] = (unint64_t)std::__shared_weak_count::lock(v113);
          if (v311[0].n128_u64[1])
          {
            std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(a4, v311);
            std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)v311);
            return;
          }
        }
        goto LABEL_341;
      }
      __pa = v16;
      v276 = a4;
      if (*(_QWORD *)(a1 + 216) == *(_QWORD *)(a1 + 208))
      {
        v46 = 0;
        v47 = 0;
      }
      else
      {
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        do
        {
          v50 = *(_QWORD *)(a1 + 232);
          v51 = zilch::ControlPoint::heading(this);
          v52 = zilch::ControlPoint::formOfWay(this);
          v53 = zilch::ControlPoint::functionalClass(this);
          StartHeading = zilch::GeoPolyline::getStartHeading((zilch::GeoPolyline *)(v50 + 40 * v49));
          v311[0].n128_u64[0] = zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::getProbability((double *)a1, v51, v52, v53, StartHeading, *(_DWORD *)(v50 + 40 * v49 + 24), *(_DWORD *)(v50 + 40 * v49 + 28));
          v55 = *(_QWORD *)(a1 + 208);
          v56 = *(std::__shared_weak_count **)(a1 + 144);
          v297 = *(_QWORD *)(a1 + 136);
          v298 = v56;
          if (v56)
          {
            v57 = (unint64_t *)&v56->__shared_owners_;
            do
              v58 = __ldxr(v57);
            while (__stxr(v58 + 1, v57));
          }
          (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a2 + 24))(v300, a2, &v297);
          v59 = *(_QWORD *)(v55 + 16 * v49);
          v60 = *(_OWORD *)v300;
          if (*(_QWORD *)&v300[8])
          {
            v61 = (unint64_t *)(*(_QWORD *)&v300[8] + 8);
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v60 + 1) + 16))(*((_QWORD *)&v60 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v60 + 1));
            }
          }
          v63 = v298;
          if (v298)
          {
            v64 = (unint64_t *)&v298->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          if (v59 == (_QWORD)v60)
          {
            zilch::Probability::Probability(&v296, 0.9);
            v311[0].n128_u64[0] = zilch::Probability::operator*(v311[0].n128_f64, v296);
          }
          zilch::Probability::Probability(&v295, 0.1);
          if (zilch::Probability::operator>=(v311[0].n128_f64, v295))
          {
            v66 = v311[0].n128_u64[0];
            if ((unint64_t)v47 >= v48)
            {
              v67 = ((char *)v47 - v46) >> 4;
              v68 = v67 + 1;
              if ((unint64_t)(v67 + 1) >> 60)
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v48 - (_QWORD)v46) >> 3 > v68)
                v68 = (uint64_t)(v48 - (_QWORD)v46) >> 3;
              if (v48 - (unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
                v69 = 0xFFFFFFFFFFFFFFFLL;
              else
                v69 = v68;
              if (v69)
                v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v69);
              else
                v70 = 0;
              v71 = (unint64_t *)(v69 + 16 * v67);
              *v71 = v49;
              v71[1] = v66;
              if (v47 == (unint64_t *)v46)
              {
                v73 = (char *)(v69 + 16 * v67);
              }
              else
              {
                v72 = v69 + 16 * v67;
                do
                {
                  v73 = (char *)(v72 - 16);
                  *(_OWORD *)(v72 - 16) = *((_OWORD *)v47 - 1);
                  v47 -= 2;
                  v72 -= 16;
                }
                while (v47 != (unint64_t *)v46);
              }
              v48 = v69 + 16 * v70;
              v47 = v71 + 2;
              if (v46)
                operator delete(v46);
              v46 = v73;
            }
            else
            {
              *v47 = v49;
              v47[1] = v66;
              v47 += 2;
            }
          }
          ++v49;
        }
        while (v49 < (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 4);
      }
      v185 = (char *)v47 - v46;
      if ((unint64_t)((char *)v47 - v46) > 0x10)
        std::sort[abi:ne180100]<std::__wrap_iter<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>>((double *)v46, (double *)v47);
      if (v47 != (unint64_t *)v46)
      {
        v186 = 0;
        v187 = v185 >> 4;
        v188 = v185 >> 4 != 0;
        v189 = (v185 >> 4) - 1;
        if (v189 != 0 && v188)
          v190 = v187;
        else
          v190 = 1;
        while (1)
        {
          v191 = (double *)&v46[16 * v186];
          v192 = *v191;
          v193 = *(_OWORD *)(*(_QWORD *)(a1 + 208) + 16 * *(_QWORD *)v191);
          *(_OWORD *)v300 = v193;
          *(_OWORD *)__pc = v193;
          v194 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
          if (*((_QWORD *)&v193 + 1))
          {
            v195 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
            do
              v196 = __ldxr(v195);
            while (__stxr(v196 + 1, v195));
            v192 = *v191;
          }
          v197 = *(_QWORD *)(a1 + 232) + 40 * *(_QWORD *)&v192;
          v198 = v191[1];
          if (v186 == v189)
          {
            v294[1] = v193;
            if (*((_QWORD *)&v193 + 1))
            {
              v199 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
              do
                v200 = __ldxr(v199);
              while (__stxr(v200 + 1, v199));
            }
            zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::addRoadToHypothesis(a1, v193, *((std::__shared_weak_count **)&v193 + 1), v197, a2, v198);
            if (v194)
            {
              v201 = (unint64_t *)&v194->__shared_owners_;
              do
                v202 = __ldaxr(v201);
              while (__stlxr(v202 - 1, v201));
              if (!v202)
              {
                ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                std::__shared_weak_count::__release_weak(v194);
              }
            }
            v203 = *(std::__shared_weak_count **)(a1 + 8);
            v311[0].n128_u64[0] = *(_QWORD *)a1;
            if (!v203 || (v311[0].n128_u64[1] = (unint64_t)std::__shared_weak_count::lock(v203)) == 0)
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v204 = std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(v276, v311);
            v205 = (std::__shared_weak_count *)v311[0].n128_u64[1];
            if (!v311[0].n128_u64[1])
              goto LABEL_263;
            v206 = (unint64_t *)(v311[0].n128_u64[1] + 8);
            do
              v207 = __ldaxr(v206);
            while (__stlxr(v207 - 1, v206));
          }
          else
          {
            v208 = operator new();
            v209 = (std::__shared_weak_count_vtbl *)v208;
            v294[0] = *(_OWORD *)__pc;
            if (v194)
            {
              v210 = (unint64_t *)&v194->__shared_owners_;
              do
                v211 = __ldxr(v210);
              while (__stxr(v211 + 1, v210));
            }
            zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::PathHypothesis(v208, a1, (uint64_t *)v294, v197, v197, a2, v198);
            std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>::shared_ptr[abi:ne180100]<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>,void>((std::__shared_weak_count_vtbl **)v311, v209);
            v212 = (std::__shared_weak_count *)*((_QWORD *)&v294[0] + 1);
            if (*((_QWORD *)&v294[0] + 1))
            {
              v213 = (unint64_t *)(*((_QWORD *)&v294[0] + 1) + 8);
              do
                v214 = __ldaxr(v213);
              while (__stlxr(v214 - 1, v213));
              if (!v214)
              {
                ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                std::__shared_weak_count::__release_weak(v212);
              }
            }
            std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(v276, (__int128 *)v311);
            v205 = (std::__shared_weak_count *)v311[0].n128_u64[1];
            if (!v311[0].n128_u64[1])
              goto LABEL_263;
            v215 = (unint64_t *)(v311[0].n128_u64[1] + 8);
            do
              v207 = __ldaxr(v215);
            while (__stlxr(v207 - 1, v215));
          }
          if (!v207)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v205->__on_zero_shared)(v205, v204);
            std::__shared_weak_count::__release_weak(v205);
          }
LABEL_263:
          v216 = *(std::__shared_weak_count **)&v300[8];
          if (*(_QWORD *)&v300[8])
          {
            v217 = (unint64_t *)(*(_QWORD *)&v300[8] + 8);
            do
              v218 = __ldaxr(v217);
            while (__stlxr(v218 - 1, v217));
            if (!v218)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v216->__on_zero_shared)(v216, v204);
              std::__shared_weak_count::__release_weak(v216);
            }
          }
          if (++v186 == v190)
            goto LABEL_271;
        }
      }
      --*(_QWORD *)(a1 + 328);
      *(_QWORD *)(a1 + 336) = __pa;
      zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::extend(a1, a2, v276);
      if (!v46)
        return;
LABEL_271:
      v184 = (double *)v46;
LABEL_272:
      operator delete(v184);
      return;
    }
    v274 = (_QWORD *)(a1 + 256);
    v75 = *(_QWORD *)(a1 + 256);
    v74 = *(_QWORD *)(a1 + 264);
    if (v74 != v75)
    {
      do
        v74 = std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v74 - 16);
      while (v74 != v75);
      *(_QWORD *)(a1 + 264) = v75;
    }
    LOWORD(v307) = zilch::ControlPoint::heading(this);
    v76 = zilch::ControlPoint::position(this);
    (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD *))a2)(a2, v76, *(unsigned int *)(a1 + 16), v274);
    v77 = *(_QWORD *)(a1 + 256);
    if (*(_QWORD *)(a1 + 264) == v77)
    {
      __pb = 0;
      v78 = 0;
    }
    else
    {
      __pb = 0;
      v78 = 0;
      v79 = 0;
      v80 = 0;
      do
      {
        v81 = *(_OWORD *)(v77 + 16 * v80);
        *(_OWORD *)v306 = v81;
        v279 = v81;
        v82 = *((_QWORD *)&v81 + 1);
        if (*((_QWORD *)&v81 + 1))
        {
          v83 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
        zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road::Road((uint64_t)v300);
        v292 = v279;
        if (v82)
        {
          v85 = (unint64_t *)(v82 + 8);
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
        (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)a2 + 8))(a2, &v292, v300);
        v87 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
        if (*((_QWORD *)&v292 + 1))
        {
          v88 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        zilch::GeoPolyline::walk((zilch::GeoPolyline *)v300, (zilch::GeoPolyline::Walker *)v311);
        v90 = (const zilch::GeoCoordinates *)zilch::ControlPoint::position(this);
        zilch::GeoPolyline::Walker::advanceTo((zilch::GeoPolyline::Walker *)v311, v90, (const zilch::Angle *)&v307);
        v91 = zilch::GeoPolyline::Walker::heading((uint64_t **)v311);
        *(_QWORD *)&v305 = zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::getProbability((double *)a1, this, (uint64_t)v300, v91);
        *(_QWORD *)&v309 = zilch::GeoPolyline::Walker::position((zilch::GeoPolyline::Walker *)v311);
        DWORD2(v309) = v92;
        v93 = (const zilch::GeoCoordinates *)zilch::ControlPoint::position(this);
        v94 = zilch::GeoCoordinates::distanceTo((zilch::GeoCoordinates *)&v309, v93);
        zilch::Probability::Probability(&v291, 0.1);
        if (zilch::Probability::operator>=((double *)&v305, v291))
        {
          zilch::Probability::Probability(&v290, (double)v94 * 0.05);
          v95 = zilch::Probability::operator-((double *)&v305, v290);
          v96 = v95;
          if ((unint64_t)v78 >= v79)
          {
            v97 = __pb;
            v98 = ((char *)v78 - (char *)__pb) >> 4;
            v99 = v98 + 1;
            if ((unint64_t)(v98 + 1) >> 60)
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v79 - (_QWORD)__pb) >> 3 > v99)
              v99 = (uint64_t)(v79 - (_QWORD)__pb) >> 3;
            if (v79 - (unint64_t)__pb >= 0x7FFFFFFFFFFFFFF0)
              v100 = 0xFFFFFFFFFFFFFFFLL;
            else
              v100 = v99;
            if (v100)
            {
              v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v100);
              v97 = __pb;
            }
            else
            {
              v101 = 0;
            }
            v102 = (unint64_t *)(v100 + 16 * v98);
            *v102 = v80;
            *((double *)v102 + 1) = v96;
            if (v78 == v97)
            {
              v104 = (double *)(v100 + 16 * v98);
            }
            else
            {
              v103 = v100 + 16 * v98;
              do
              {
                v104 = (double *)(v103 - 16);
                *(_OWORD *)(v103 - 16) = *((_OWORD *)v78 - 1);
                v78 -= 2;
                v103 -= 16;
              }
              while (v78 != v97);
            }
            v79 = v100 + 16 * v101;
            v78 = (double *)(v102 + 2);
            if (v97)
              operator delete(v97);
            __pb = v104;
          }
          else
          {
            *(_QWORD *)v78 = v80;
            v78[1] = v95;
            v78 += 2;
          }
        }
        v105 = *(std::__shared_weak_count **)&v300[8];
        if (*(_QWORD *)&v300[8])
        {
          v106 = (unint64_t *)(*(_QWORD *)&v300[8] + 8);
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        v108 = *(std::__shared_weak_count **)&v306[1];
        if (*(_QWORD *)&v306[1])
        {
          v109 = (unint64_t *)(*(_QWORD *)&v306[1] + 8);
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 - 1, v109));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        ++v80;
        v77 = *(_QWORD *)(a1 + 256);
      }
      while (v80 < (*(_QWORD *)(a1 + 264) - v77) >> 4);
    }
    v273 = this;
    v277 = a4;
    v114 = ((char *)v78 - (char *)__pb) >> 4;
    if ((unint64_t)((char *)v78 - (char *)__pb) > 0x10)
    {
      v115 = 126 - 2 * __clz(v114);
      if (v78 == __pb)
        v116 = 0;
      else
        v116 = v115;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *,false>(__pb, v78, v116, 1);
    }
    if (v78 != __pb)
    {
      v117 = 0;
      if (v114 <= 1)
        v118 = 1;
      else
        v118 = ((char *)v78 - (char *)__pb) >> 4;
      v272 = v118;
      do
      {
        v119 = *(_OWORD *)(*v274 + 16 * *(_QWORD *)&__pb[2 * v117]);
        v309 = v119;
        v280 = v119;
        v120 = *((_QWORD *)&v119 + 1);
        if (*((_QWORD *)&v119 + 1))
        {
          v121 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
          do
            v122 = __ldxr(v121);
          while (__stxr(v122 + 1, v121));
        }
        zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road::Road((uint64_t)v300);
        v289 = v280;
        if (v120)
        {
          v123 = (unint64_t *)(v120 + 8);
          do
            v124 = __ldxr(v123);
          while (__stxr(v124 + 1, v123));
        }
        (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)a2 + 8))(a2, &v289, v300);
        v125 = (std::__shared_weak_count *)*((_QWORD *)&v289 + 1);
        if (*((_QWORD *)&v289 + 1))
        {
          v126 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        v128 = __pb[2 * v117 + 1];
        v129 = (_QWORD *)operator new();
        *v129 = 0;
        v129[1] = 0;
        v129[2] = 0;
        std::shared_ptr<std::vector<zilch::GeoCoordinates>>::shared_ptr[abi:ne180100]<std::vector<zilch::GeoCoordinates>,void>(&v305, (uint64_t)v129);
        zilch::GeoPolyline::walk((zilch::GeoPolyline *)v300, (zilch::GeoPolyline::Walker *)v311);
        v130 = (const zilch::GeoCoordinates *)zilch::ControlPoint::position(v273);
        zilch::GeoPolyline::Walker::advanceTo((zilch::GeoPolyline::Walker *)v311, v130, (const zilch::Angle *)&v307);
        v131 = (char **)v305;
        v132 = zilch::GeoPolyline::Walker::position((zilch::GeoPolyline::Walker *)v311);
        v134 = v133;
        v135 = (unint64_t)v131[2];
        v136 = (unint64_t)v131[1];
        if (v136 >= v135)
        {
          v137 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v136 - (_QWORD)*v131) >> 2);
          v138 = v137 + 1;
          if (v137 + 1 > 0x1555555555555555)
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - (_QWORD)*v131) >> 2);
          if (2 * v139 > v138)
            v138 = 2 * v139;
          if (v139 >= 0xAAAAAAAAAAAAAAALL)
            v140 = 0x1555555555555555;
          else
            v140 = v138;
          if (v140)
            v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::GeoCoordinates>>((uint64_t)(v131 + 2), v140);
          else
            v141 = 0;
          v142 = &v141[12 * v137];
          *(_QWORD *)v142 = v132;
          *((_DWORD *)v142 + 2) = v134;
          v144 = *v131;
          v143 = v131[1];
          v145 = v142;
          if (v143 != *v131)
          {
            do
            {
              v146 = *(_QWORD *)(v143 - 12);
              v143 -= 12;
              v147 = *((_DWORD *)v143 + 2);
              *(_QWORD *)(v145 - 12) = v146;
              v145 -= 12;
              *((_DWORD *)v145 + 2) = v147;
            }
            while (v143 != v144);
LABEL_162:
            v143 = *v131;
          }
          goto LABEL_163;
        }
        while (1)
        {
          *(_QWORD *)v136 = v132;
          *(_DWORD *)(v136 + 8) = v134;
          v148 = (char *)(v136 + 12);
LABEL_165:
          v131[1] = v148;
          if (zilch::GeoPolyline::Walker::done((unint64_t **)v311))
            break;
          zilch::GeoPolyline::Walker::advanceToNextPoint((zilch::GeoPolyline **)v311);
          v131 = (char **)v305;
          v132 = zilch::GeoPolyline::Walker::position((zilch::GeoPolyline::Walker *)v311);
          v134 = v149;
          v150 = (unint64_t)v131[2];
          v136 = (unint64_t)v131[1];
          if (v136 >= v150)
          {
            v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v136 - (_QWORD)*v131) >> 2);
            v152 = v151 + 1;
            if (v151 + 1 > 0x1555555555555555)
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v153 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v150 - (_QWORD)*v131) >> 2);
            if (2 * v153 > v152)
              v152 = 2 * v153;
            if (v153 >= 0xAAAAAAAAAAAAAAALL)
              v140 = 0x1555555555555555;
            else
              v140 = v152;
            if (v140)
              v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::GeoCoordinates>>((uint64_t)(v131 + 2), v140);
            else
              v141 = 0;
            v142 = &v141[12 * v151];
            *(_QWORD *)v142 = v132;
            *((_DWORD *)v142 + 2) = v134;
            v154 = *v131;
            v143 = v131[1];
            v145 = v142;
            if (v143 != *v131)
            {
              do
              {
                v155 = *(_QWORD *)(v143 - 12);
                v143 -= 12;
                v156 = *((_DWORD *)v143 + 2);
                *(_QWORD *)(v145 - 12) = v155;
                v145 -= 12;
                *((_DWORD *)v145 + 2) = v156;
              }
              while (v143 != v154);
              goto LABEL_162;
            }
LABEL_163:
            v148 = v142 + 12;
            *v131 = v145;
            v131[1] = v142 + 12;
            v131[2] = &v141[12 * v140];
            if (v143)
              operator delete(v143);
            goto LABEL_165;
          }
        }
        v288 = v305;
        if (*((_QWORD *)&v305 + 1))
        {
          v157 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
          do
            v158 = __ldxr(v157);
          while (__stxr(v158 + 1, v157));
        }
        zilch::GeoPolyline::GeoPolyline((uint64_t)v306, &v288, 0);
        v159 = (std::__shared_weak_count *)*((_QWORD *)&v288 + 1);
        if (*((_QWORD *)&v288 + 1))
        {
          v160 = (unint64_t *)(*((_QWORD *)&v288 + 1) + 8);
          do
            v161 = __ldaxr(v160);
          while (__stlxr(v161 - 1, v160));
          if (!v161)
          {
            ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
            std::__shared_weak_count::__release_weak(v159);
          }
        }
        v162 = operator new();
        v163 = (std::__shared_weak_count_vtbl *)v162;
        v287 = v309;
        if (*((_QWORD *)&v309 + 1))
        {
          v164 = (unint64_t *)(*((_QWORD *)&v309 + 1) + 8);
          do
            v165 = __ldxr(v164);
          while (__stxr(v165 + 1, v164));
        }
        zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::PathHypothesis(v162, a1, (uint64_t *)&v287, (uint64_t)v300, (uint64_t)v306, a2, v128);
        std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>::shared_ptr[abi:ne180100]<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>,void>((std::__shared_weak_count_vtbl **)&v299, v163);
        v166 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
        if (*((_QWORD *)&v287 + 1))
        {
          v167 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
          do
            v168 = __ldaxr(v167);
          while (__stlxr(v168 - 1, v167));
          if (!v168)
          {
            ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
            std::__shared_weak_count::__release_weak(v166);
          }
        }
        std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(v277, &v299);
        v169 = (std::__shared_weak_count *)*((_QWORD *)&v299 + 1);
        if (*((_QWORD *)&v299 + 1))
        {
          v170 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
          do
            v171 = __ldaxr(v170);
          while (__stlxr(v171 - 1, v170));
          if (!v171)
          {
            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
            std::__shared_weak_count::__release_weak(v169);
          }
        }
        v172 = *(std::__shared_weak_count **)&v306[1];
        if (*(_QWORD *)&v306[1])
        {
          v173 = (unint64_t *)(*(_QWORD *)&v306[1] + 8);
          do
            v174 = __ldaxr(v173);
          while (__stlxr(v174 - 1, v173));
          if (!v174)
          {
            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
            std::__shared_weak_count::__release_weak(v172);
          }
        }
        v175 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
        if (*((_QWORD *)&v305 + 1))
        {
          v176 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
          do
            v177 = __ldaxr(v176);
          while (__stlxr(v177 - 1, v176));
          if (!v177)
          {
            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
            std::__shared_weak_count::__release_weak(v175);
          }
        }
        v178 = *(std::__shared_weak_count **)&v300[8];
        if (*(_QWORD *)&v300[8])
        {
          v179 = (unint64_t *)(*(_QWORD *)&v300[8] + 8);
          do
            v180 = __ldaxr(v179);
          while (__stlxr(v180 - 1, v179));
          if (!v180)
          {
            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
            std::__shared_weak_count::__release_weak(v178);
          }
        }
        v181 = (std::__shared_weak_count *)*((_QWORD *)&v309 + 1);
        if (*((_QWORD *)&v309 + 1))
        {
          v182 = (unint64_t *)(*((_QWORD *)&v309 + 1) + 8);
          do
            v183 = __ldaxr(v182);
          while (__stlxr(v183 - 1, v182));
          if (!v183)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
          }
        }
        ++v117;
      }
      while (v117 != v272);
    }
    v184 = __pb;
    if (__pb)
      goto LABEL_272;
  }
}

void sub_1894A9938(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v1 - 256);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v1 - 192);
  _Unwind_Resume(a1);
}

uint64_t zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road::Road(uint64_t a1)
{
  uint64_t v2;

  v2 = zilch::GeoPolyline::GeoPolyline(a1);
  zilch::FormOfWay::FormOfWay((_DWORD *)(v2 + 24), 0);
  zilch::FunctionalClass::FunctionalClass((_DWORD *)(a1 + 28), 9);
  *(_QWORD *)(a1 + 32) = -1;
  return a1;
}

void sub_1894A9B8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>::shared_ptr[abi:ne180100]<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>,void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB608;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (a2)
  {
    v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
    if (v6)
    {
      if (v6->__shared_owners_ != -1)
        return a1;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
      std::__shared_weak_count::__release_weak(v6);
    }
    else
    {
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1894A9CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>> *,std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>::__shared_ptr_default_delete<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>,std::allocator<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D76437CLL);
}

uint64_t std::__shared_ptr_pointer<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>> *,std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>::__shared_ptr_default_delete<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>,std::allocator<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::~PathHypothesis(result);
    JUMPOUT(0x18D76437CLL);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>> *,std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>::__shared_ptr_default_delete<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>,std::allocator<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::~PathHypothesis(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  void **v5;

  std::__hash_table<std::shared_ptr<geo::MapEdge>,std::hash<std::shared_ptr<geo::MapEdge>>,std::equal_to<std::shared_ptr<geo::MapEdge>>,std::allocator<std::shared_ptr<geo::MapEdge>>>::~__hash_table(a1 + 280);
  v5 = (void **)(a1 + 256);
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 232);
  std::vector<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road,std::allocator<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 208);
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](a1 + 152);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](a1 + 136);
  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  v5 = (void **)(a1 + 80);
  std::vector<zilch::GeometryPathElement>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 56);
  std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t std::__hash_table<std::shared_ptr<geo::MapEdge>,std::hash<std::shared_ptr<geo::MapEdge>>,std::equal_to<std::shared_ptr<geo::MapEdge>>,std::allocator<std::shared_ptr<geo::MapEdge>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::vector<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road,std::allocator<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::unique_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::~PathHypothesis(result);
    JUMPOUT(0x18D76437CLL);
  }
  return result;
}

void std::sort[abi:ne180100]<std::__wrap_iter<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>>(double *a1, double *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz(((char *)a2 - (char *)a1) >> 4);
  if (a2 == a1)
    v3 = 0;
  else
    v3 = v2;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *,false>(a1, a2, v3, 1);
}

void zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::addRoadToHypothesis(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, double a6)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v11 = a2;
  v12 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::addRoadToHypothesis(a1, &v11, a4, a4, a5, a6);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1894A9FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::extend(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v8;
  double *v9;
  unint64_t v10;
  int *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 EndHeading;
  unsigned __int16 v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  double v58;
  double v59;
  double v60;
  int v61;
  unint64_t *v62;
  unint64_t v63;
  zilch::Angle *v64;
  __int16 v65;
  int v66;
  int v67;
  unsigned __int16 v68;
  double Probability;
  double v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  __int128 v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  BOOL v83;
  unint64_t *v84;
  unint64_t v85;
  double *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  double *v91;
  uint64_t v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  __n128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count_vtbl *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  zilch::GeoPolyline *v118;
  int *v119;
  unint64_t v121;
  zilch::FunctionalClass *v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int16 v128;
  __int16 StartHeading;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  __n128 v141;
  _OWORD v142[2];

  if (*(_QWORD *)(a1 + 104) == *(_QWORD *)(a1 + 112))
    return;
  v3 = a1;
  if (*(int *)(a1 + 320) > 1)
    return;
  v4 = *(_QWORD *)(a1 + 336) + *(unsigned int *)(a1 + 188);
  *(_QWORD *)(a1 + 336) = v4;
  if (v4 > 0x5DC0)
    return;
  v6 = *(_QWORD *)(a1 + 208);
  v5 = *(_QWORD *)(a1 + 216);
  if (v5 == v6)
    return;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (int *)(a1 + 176);
  v118 = (zilch::GeoPolyline *)(a1 + 152);
  v121 = 0;
  v122 = (zilch::FunctionalClass *)(a1 + 180);
  v119 = (int *)(a1 + 176);
  do
  {
    v12 = *(_OWORD *)(v6 + 16 * v10);
    v127 = v12;
    if (*((_QWORD *)&v12 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v6 = *(_QWORD *)(v3 + 208);
      v5 = *(_QWORD *)(v3 + 216);
    }
    v15 = (v5 - v6) >> 4;
    if (v15 == 1)
      goto LABEL_78;
    v123 = *(_QWORD *)(v3 + 232);
    if (v15 != 2)
      goto LABEL_26;
    v16 = *(_QWORD *)(v3 + 144);
    v141.n128_u64[0] = *(_QWORD *)(v3 + 136);
    v141.n128_u64[1] = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    (*(void (**)(_OWORD *__return_ptr, uint64_t, __n128 *))(*(_QWORD *)a2 + 24))(v142, a2, &v141);
    v19 = *(_QWORD *)(v6 + 16 * (1 - v10));
    v20 = v142[0];
    if (*((_QWORD *)&v142[0] + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v142[0] + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      }
    }
    v23 = (std::__shared_weak_count *)v141.n128_u64[1];
    if (v141.n128_u64[1])
    {
      v24 = (unint64_t *)(v141.n128_u64[1] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v19 == (_QWORD)v20)
    {
      v74 = *(std::__shared_weak_count **)(v3 + 144);
      v139 = *(_QWORD *)(v3 + 136);
      v140 = v74;
      if (v74)
      {
        p_shared_owners = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldxr(p_shared_owners);
        while (__stxr(v76 + 1, p_shared_owners));
      }
      a1 = (unint64_t)(*(_QWORD *(**)(_OWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a2 + 24))(v142, a2, &v139);
      v77 = v142[0];
      if (*((_QWORD *)&v142[0] + 1))
      {
        v78 = (unint64_t *)(*((_QWORD *)&v142[0] + 1) + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v77 + 1) + 16))(*((_QWORD *)&v77 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v77 + 1));
        }
      }
      v80 = v140;
      if (v140)
      {
        v81 = (unint64_t *)&v140->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      if (v10)
        v83 = (_QWORD)v127 == (_QWORD)v77;
      else
        v83 = 0;
      v61 = !v83;
    }
    else
    {
LABEL_26:
      zilch::FunctionalClass::FunctionalClass(&v138, 9);
      if (!zilch::FunctionalClass::operator!=(v122, v138))
        goto LABEL_176;
      zilch::FunctionalClass::FunctionalClass(&v137, 9);
      if (!zilch::FunctionalClass::operator!=((_DWORD *)(v123 + 40 * v10 + 28), v137))
        goto LABEL_176;
      v26 = zilch::FunctionalClass::toInteger(v122);
      a1 = zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)(v123 + 40 * v10 + 28));
      v27 = v26 - a1;
      if (v26 - (int)a1 < 0)
        v27 = a1 - v26;
      if (v27 <= 1)
      {
LABEL_176:
        zilch::FormOfWay::FormOfWay(&v136, 0);
        if (!zilch::FormOfWay::operator!=(v11, v136)
          || (zilch::FormOfWay::FormOfWay(&v135, 0),
              !zilch::FormOfWay::operator!=((_DWORD *)(v123 + 40 * v10 + 24), v135))
          || (a1 = zilch::FormOfWay::operator!=(v11, *(_DWORD *)(v123 + 40 * v10 + 24)), (a1 & 1) == 0))
        {
          zilch::FormOfWay::FormOfWay(&v134, 1);
          if (zilch::FormOfWay::operator==(v11, v134))
          {
            zilch::FormOfWay::FormOfWay(&v133, 1);
            a1 = zilch::FormOfWay::operator==((_DWORD *)(v123 + 40 * v10 + 24), v133);
            if ((_DWORD)a1)
            {
              v29 = *(_QWORD *)(v3 + 208);
              v28 = *(_QWORD *)(v3 + 216);
              if (v28 != v29)
              {
                v30 = 0;
                while (1)
                {
                  v31 = (_QWORD *)(v29 + 16 * v30);
                  if (*v31 != (_QWORD)v127)
                  {
                    v32 = *(std::__shared_weak_count **)(v3 + 144);
                    v139 = *(_QWORD *)(v3 + 136);
                    v140 = v32;
                    if (v32)
                    {
                      v33 = (unint64_t *)&v32->__shared_owners_;
                      do
                        v34 = __ldxr(v33);
                      while (__stxr(v34 + 1, v33));
                    }
                    a1 = (unint64_t)(*(_QWORD *(**)(_OWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a2 + 24))(v142, a2, &v139);
                    if (*v31 == *(_QWORD *)&v142[0])
                    {
                      v36 = 0;
                    }
                    else
                    {
                      v35 = *(_QWORD *)(v3 + 232);
                      zilch::FormOfWay::FormOfWay(&v132, 10);
                      a1 = zilch::FormOfWay::operator!=((_DWORD *)(v35 + 40 * v30 + 24), v132);
                      v36 = a1;
                    }
                    v37 = (std::__shared_weak_count *)*((_QWORD *)&v142[0] + 1);
                    if (*((_QWORD *)&v142[0] + 1))
                    {
                      v38 = (unint64_t *)(*((_QWORD *)&v142[0] + 1) + 8);
                      do
                        v39 = __ldaxr(v38);
                      while (__stlxr(v39 - 1, v38));
                      if (!v39)
                      {
                        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                        std::__shared_weak_count::__release_weak(v37);
                      }
                    }
                    v40 = v140;
                    if (v140)
                    {
                      v41 = (unint64_t *)&v140->__shared_owners_;
                      do
                        v42 = __ldaxr(v41);
                      while (__stlxr(v42 - 1, v41));
                      if (!v42)
                      {
                        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                        std::__shared_weak_count::__release_weak(v40);
                      }
                    }
                    if ((v36 & 1) != 0)
                      goto LABEL_59;
                    v29 = *(_QWORD *)(v3 + 208);
                    v28 = *(_QWORD *)(v3 + 216);
                  }
                  if (++v30 >= (unint64_t)((v28 - v29) >> 4))
                    goto LABEL_78;
                }
              }
              goto LABEL_78;
            }
          }
LABEL_59:
          zilch::FormOfWay::FormOfWay(v142, 4);
          if (zilch::FormOfWay::operator==(v11, v142[0]))
          {
            zilch::FormOfWay::FormOfWay(&v131, 4);
            a1 = zilch::FormOfWay::operator==((_DWORD *)(v123 + 40 * v10 + 24), v131);
            if ((_DWORD)a1)
            {
              v44 = *(_QWORD *)(v3 + 208);
              v43 = *(_QWORD *)(v3 + 216);
              if (v43 != v44)
              {
                v45 = 0;
                v46 = 0;
                v47 = 24;
                do
                {
                  if (*(_QWORD *)(v44 + v45) != (_QWORD)v127)
                  {
                    v48 = a2;
                    v49 = *(_QWORD *)(v3 + 232);
                    zilch::FormOfWay::FormOfWay(&v130, 4);
                    a1 = zilch::FormOfWay::operator==((_DWORD *)(v49 + v47), v130);
                    a2 = v48;
                    v11 = v119;
                    if ((a1 & 1) != 0)
                      goto LABEL_68;
                    v44 = *(_QWORD *)(v3 + 208);
                    v43 = *(_QWORD *)(v3 + 216);
                  }
                  ++v46;
                  v47 += 40;
                  v45 += 16;
                }
                while (v46 < (v43 - v44) >> 4);
              }
LABEL_78:
              v61 = 1;
              goto LABEL_79;
            }
          }
LABEL_68:
          EndHeading = zilch::GeoPolyline::getEndHeading(v118);
          StartHeading = zilch::GeoPolyline::getStartHeading((zilch::GeoPolyline *)(v123 + 40 * v10));
          v51 = EndHeading;
          if (zilch::Angle::degreesFrom(&StartHeading, EndHeading, v52) <= 20.0)
          {
            v54 = *(_QWORD *)(v3 + 208);
            v53 = *(_QWORD *)(v3 + 216);
            if (v53 == v54)
              goto LABEL_78;
            v55 = 0;
            v56 = 0;
            v57 = 0;
            v58 = 360.0;
            do
            {
              if (*(_QWORD *)(v54 + v55) != (_QWORD)v127)
              {
                v128 = zilch::GeoPolyline::getStartHeading((zilch::GeoPolyline *)(*(_QWORD *)(v3 + 232) + v56));
                v60 = zilch::Angle::degreesFrom(&v128, v51, v59);
                if (v60 < v58)
                  v58 = v60;
                v54 = *(_QWORD *)(v3 + 208);
                v53 = *(_QWORD *)(v3 + 216);
              }
              ++v57;
              v56 += 40;
              v55 += 16;
            }
            while (v57 < (v53 - v54) >> 4);
            v11 = v119;
            if (v58 >= 25.0)
              goto LABEL_78;
          }
        }
      }
      v61 = 0;
    }
    if (!*((_QWORD *)&v127 + 1))
      goto LABEL_83;
LABEL_79:
    v62 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v127 + 1) + 16))(*((_QWORD *)&v127 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v127 + 1));
      if (!v61)
        goto LABEL_124;
    }
    else
    {
LABEL_83:
      if (!v61)
        goto LABEL_124;
    }
    v64 = (zilch::Angle *)zilch::Angle::zero((zilch::Angle *)a1);
    v65 = (__int16)v64;
    v66 = *v11;
    v67 = *(_DWORD *)v122;
    v68 = zilch::Angle::zero(v64);
    Probability = zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::getProbability((double *)v3, v65, v66, v67, v68, *(_DWORD *)(*(_QWORD *)(v3 + 232) + 40 * v10 + 24), *(_DWORD *)(*(_QWORD *)(v3 + 232) + 40 * v10 + 28));
    v70 = Probability;
    if ((unint64_t)v9 >= v121)
    {
      v71 = ((char *)v9 - (char *)v8) >> 4;
      v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 60)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v121 - (_QWORD)v8) >> 3 > v72)
        v72 = (uint64_t)(v121 - (_QWORD)v8) >> 3;
      if (v121 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
        a1 = 0xFFFFFFFFFFFFFFFLL;
      else
        a1 = v72;
      if (a1)
        a1 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(a1);
      else
        v73 = 0;
      v84 = (unint64_t *)(a1 + 16 * v71);
      *v84 = v10;
      *((double *)v84 + 1) = v70;
      if (v9 == v8)
      {
        v86 = (double *)(a1 + 16 * v71);
      }
      else
      {
        v85 = a1 + 16 * v71;
        do
        {
          v86 = (double *)(v85 - 16);
          *(_OWORD *)(v85 - 16) = *((_OWORD *)v9 - 1);
          v9 -= 2;
          v85 -= 16;
        }
        while (v9 != v8);
      }
      v121 = a1 + 16 * v73;
      v9 = (double *)(v84 + 2);
      if (v8)
        operator delete(v8);
      v8 = v86;
    }
    else
    {
      *(_QWORD *)v9 = v10;
      v9[1] = Probability;
      v9 += 2;
    }
LABEL_124:
    ++v10;
    v6 = *(_QWORD *)(v3 + 208);
    v5 = *(_QWORD *)(v3 + 216);
  }
  while (v10 < (v5 - v6) >> 4);
  if (v8 != v9)
  {
    v87 = ((char *)v9 - (char *)v8) >> 4;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *,false>(v8, v9, 126 - 2 * __clz(v87), 1);
    v88 = 0;
    v89 = v87 - 1;
    if (v87 <= 1)
      v90 = 1;
    else
      v90 = ((char *)v9 - (char *)v8) >> 4;
    while (1)
    {
      v91 = &v8[2 * v88];
      v92 = *(_QWORD *)v91;
      v93 = *(_OWORD *)(*(_QWORD *)(v3 + 208) + 16 * *(_QWORD *)v91);
      v142[0] = v93;
      v124 = v93;
      v94 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
      if (*((_QWORD *)&v93 + 1))
      {
        v95 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
        v97 = *(_QWORD *)(v3 + 232) + 40 * *(_QWORD *)v91;
        if (v88 != v89)
        {
LABEL_149:
          v107 = operator new();
          v108 = (std::__shared_weak_count_vtbl *)v107;
          v125 = v124;
          if (v94)
          {
            v109 = (unint64_t *)&v94->__shared_owners_;
            do
              v110 = __ldxr(v109);
            while (__stxr(v110 + 1, v109));
          }
          zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::PathHypothesis(v107, v3, (uint64_t *)&v125, v97, v97, a2, v8[2 * v88 + 1]);
          std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>::shared_ptr[abi:ne180100]<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>,void>((std::__shared_weak_count_vtbl **)&v141, v108);
          v111 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
          if (*((_QWORD *)&v125 + 1))
          {
            v112 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
          std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(a3, (__int128 *)&v141);
          v104 = (std::__shared_weak_count *)v141.n128_u64[1];
          if (!v141.n128_u64[1])
            goto LABEL_162;
          v114 = (unint64_t *)(v141.n128_u64[1] + 8);
          do
            v106 = __ldaxr(v114);
          while (__stlxr(v106 - 1, v114));
          goto LABEL_160;
        }
        v126 = v93;
        do
          v98 = __ldxr(v95);
        while (__stxr(v98 + 1, v95));
        v99 = v93;
      }
      else
      {
        v97 = *(_QWORD *)(v3 + 232) + 40 * v92;
        if (v88 != v89)
          goto LABEL_149;
        v99 = v93;
        v126 = v93;
      }
      zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::addRoadToHypothesis(v3, v99, *((std::__shared_weak_count **)&v93 + 1), v97, a2, v8[2 * v89 + 1]);
      if (v94)
      {
        v100 = (unint64_t *)&v94->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v102 = *(std::__shared_weak_count **)(v3 + 8);
      v141.n128_u64[0] = *(_QWORD *)v3;
      if (!v102 || (v141.n128_u64[1] = (unint64_t)std::__shared_weak_count::lock(v102)) == 0)
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v103 = std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(a3, &v141);
      v104 = (std::__shared_weak_count *)v141.n128_u64[1];
      if (!v141.n128_u64[1])
        goto LABEL_162;
      v105 = (unint64_t *)(v141.n128_u64[1] + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
LABEL_160:
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v104->__on_zero_shared)(v104, v103);
        std::__shared_weak_count::__release_weak(v104);
      }
LABEL_162:
      v115 = (std::__shared_weak_count *)*((_QWORD *)&v142[0] + 1);
      if (*((_QWORD *)&v142[0] + 1))
      {
        v116 = (unint64_t *)(*((_QWORD *)&v142[0] + 1) + 8);
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v115->__on_zero_shared)(v115, v103);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      if (++v88 == v90)
        goto LABEL_170;
    }
  }
  if (v8)
LABEL_170:
    operator delete(v8);
}

void sub_1894AAA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  if (v29)
    operator delete(v29);
  _Unwind_Resume(exception_object);
}

double zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::getProbability(double *a1, zilch::ControlPoint *this, uint64_t a3, unsigned __int16 a4)
{
  __int16 v8;
  int v9;
  int v10;

  v8 = zilch::ControlPoint::heading(this);
  v9 = zilch::ControlPoint::formOfWay(this);
  v10 = zilch::ControlPoint::functionalClass(this);
  return zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::getProbability(a1, v8, v9, v10, a4, *(_DWORD *)(a3 + 24), *(_DWORD *)(a3 + 28));
}

__n128 std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v38 = 1;
      else
        v38 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v38);
      v40 = &v39[8 * (v38 >> 2)];
      v42 = &v39[8 * v41];
      v43 = (uint64_t *)a1[1];
      v6 = v40;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v39[8 * (v38 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0x1000uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v49 = 1;
      else
        v49 = (v19 - v22) >> 2;
      v50 = 2 * v49;
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v49);
      v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      v53 = (uint64_t *)a1[1];
      v54 = v22;
      v55 = a1[2] - (_QWORD)v53;
      if (v55)
      {
        v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        v56 = 8 * (v55 >> 3);
        v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v58 = *v53++;
          *(_QWORD *)v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v82 = 1;
      else
        v82 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v82);
      v40 = &v39[8 * (v82 >> 2)];
      v42 = &v39[8 * v83];
      v84 = (uint64_t *)a1[1];
      v6 = v40;
      v85 = a1[2] - (_QWORD)v84;
      if (v85)
      {
        v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        v86 = 8 * (v85 >> 3);
        v87 = &v39[8 * (v82 >> 2)];
        do
        {
          v88 = *v84++;
          *(_QWORD *)v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v28);
  v31 = v30;
  v32 = operator new(0x1000uLL);
  v33 = &v29[8 * v23];
  v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      v60 = v35 >> 2;
      if (v20 == v22)
        v61 = 1;
      else
        v61 = v60;
      v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v61);
      v33 = &v62[8 * (v61 >> 2)];
      v34 = &v62[8 * v63];
      if (v29)
        operator delete(v29);
      v29 = v62;
    }
    else
    {
      v36 = v35 >> 3;
      if (v36 >= -1)
        v37 = v36 + 1;
      else
        v37 = v36 + 2;
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(_QWORD *)v33 = v32;
  v64 = v33 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29)
          v70 = 1;
        else
          v70 = (v34 - v29) >> 2;
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v70);
        v73 = v71;
        v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        v75 = v64 - v29;
        v74 = v64 == v29;
        v64 = v33;
        if (!v74)
        {
          v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          v76 = 8 * (v75 >> 3);
          v77 = v33;
          v78 = (uint64_t *)v29;
          do
          {
            v79 = *v78++;
            *(_QWORD *)v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        v34 = &v71[8 * v72];
        if (v29)
          operator delete(v29);
        v29 = v73;
      }
      else
      {
        v66 = (v34 - v64) >> 3;
        if (v66 >= -1)
          v67 = v66 + 1;
        else
          v67 = v66 + 2;
        v68 = v67 >> 1;
        v33 = &v29[8 * (v67 >> 1)];
        v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          v69 = v64;
        }
        v64 = &v69[8 * v68];
      }
    }
    v80 = *(_QWORD *)(i - 8);
    *((_QWORD *)v33 - 1) = v80;
    v33 -= 8;
  }
  v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
    operator delete(v81);
}

void sub_1894AAFFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

uint64_t zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>::RoadPathElement(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = zilch::PathElement::PathElement(a1, 0, a4);
  *(_QWORD *)result = &off_1E1BF7040;
  v7 = a2[1];
  *(_QWORD *)(result + 24) = *a2;
  *(_QWORD *)(result + 32) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(result + 40) = *(_QWORD *)a3;
  *(_QWORD *)(result + 48) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_DWORD *)(result + 56) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(result + 64) = 0;
  return result;
}

double zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::getProbability(double *a1, __int16 a2, int a3, int a4, unsigned __int16 a5, int a6, int a7)
{
  double v9;
  int v10;
  int v11;
  double v12;
  double v14;
  int v15;
  int v16;
  double v17;
  int v18;
  int v19;
  double v20;
  int v21;
  int v22;
  int v23;
  int v24;
  __int16 v25;
  double v26;

  v25 = a2;
  v23 = a4;
  v24 = a3;
  v21 = a7;
  v22 = a6;
  v26 = zilch::Probability::one((zilch::Probability *)a1);
  v9 = zilch::Angle::degreesFrom(&v25, a5, v26);
  zilch::Probability::Probability(&v20, fmax(v9 / a1[3] * (v9 / a1[3]) * -0.9 + 1.0, 0.0));
  zilch::Probability::operator*=(&v26, v20);
  zilch::FormOfWay::FormOfWay(&v19, 0);
  if (zilch::FormOfWay::operator!=(&v24, v19))
  {
    zilch::FormOfWay::FormOfWay(&v18, 0);
    if (zilch::FormOfWay::operator!=(&v22, v18) && zilch::FormOfWay::operator!=(&v24, v22))
    {
      zilch::Probability::Probability(&v17, 0.5);
      zilch::Probability::operator*=(&v26, v17);
    }
  }
  zilch::FunctionalClass::FunctionalClass(&v16, 9);
  if (zilch::FunctionalClass::operator!=(&v23, v16))
  {
    zilch::FunctionalClass::FunctionalClass(&v15, 9);
    if (zilch::FunctionalClass::operator!=(&v21, v15))
    {
      v10 = zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)&v23);
      v11 = v10 - zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)&v21);
      if (v11 < 0)
        v11 = -v11;
      v12 = exp2(-(double)v11);
      zilch::Probability::Probability(&v14, v12);
      zilch::Probability::operator*=(&v26, v14);
    }
  }
  return v26;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *,false>(double *a1, double *a2, uint64_t a3, char a4)
{
  double *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double *v12;
  uint64_t v13;
  double v14;
  double v15;
  BOOL v16;
  double *v17;
  double *v18;
  double *v19;
  _BOOL4 v20;
  double *v21;
  BOOL v22;
  double *v23;
  double *v24;
  double *v25;
  BOOL v26;
  double *v27;
  BOOL v28;
  double *v29;
  _BOOL4 v30;
  double *v31;
  double *v32;
  BOOL v33;
  double v34;
  double v35;
  double *v36;
  double *v37;
  uint64_t v38;
  double *v39;
  double v40;
  double *v41;
  uint64_t v42;
  double *v43;
  double *v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  double *v49;
  _BOOL4 v50;
  double *v51;
  double v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double *v61;
  double *v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL4 v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  double v69;
  double *v70;
  double *i;
  double v73;
  double *v74;
  double *v75;
  double *v76;
  BOOL v77;
  double *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(double *a1, double *a2, double *a3)
{
  double *v6;
  BOOL v7;
  _BOOL8 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = a2 + 1;
  v7 = zilch::Probability::operator<(a2 + 1, a1[1]);
  result = zilch::Probability::operator<(a3 + 1, a2[1]);
  if (v7)
  {
    if (result)
    {
      v9 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
    }
    else
    {
      v12 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v12;
      result = zilch::Probability::operator<(a3 + 1, a2[1]);
      if (!result)
        return result;
      v9 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v9;
  }
  else if (result)
  {
    v10 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v10;
    result = zilch::Probability::operator<(v6, a1[1]);
    if (result)
    {
      v11 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v11;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(double *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  double *v7;
  double *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  double *v12;
  double *v13;
  __int128 v14;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (zilch::Probability::operator<(a2 - 1, a1[1]))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a1 + 2, a1 + 4, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a1 + 2, a1 + 4, (uint64_t)(a1 + 6), (uint64_t)(a2 - 2));
      return 1;
    default:
      v7 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a1 + 2, a1 + 4);
      v8 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (zilch::Probability::operator<(v8 + 1, v7[1]))
    {
      v14 = *(_OWORD *)v8;
      v11 = v9;
      while (1)
      {
        v12 = (double *)((char *)a1 + v11);
        *(_OWORD *)((char *)a1 + v11 + 48) = *(_OWORD *)((char *)a1 + v11 + 32);
        if (v11 == -32)
          break;
        v11 -= 16;
        if (!zilch::Probability::operator<((double *)&v14 + 1, v12[3]))
        {
          v13 = (double *)((char *)a1 + v11 + 48);
          goto LABEL_12;
        }
      }
      v13 = a1;
LABEL_12:
      *(_OWORD *)v13 = v14;
      if (++v10 == 8)
        return v8 + 2 == a2;
    }
    v7 = v8;
    v9 += 16;
    v8 += 2;
    if (v8 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(double *a1, double *a2, double *a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a2, a3);
  if (zilch::Probability::operator<((double *)(a4 + 8), a3[1]))
  {
    v9 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v9;
    if (zilch::Probability::operator<(a3 + 1, a2[1]))
    {
      v10 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v10;
      if (zilch::Probability::operator<(a2 + 1, a1[1]))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(double *a1, double *a2, double *a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a2, a3, a4);
  if (zilch::Probability::operator<((double *)(a5 + 8), *(double *)(a4 + 8)))
  {
    v11 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v11;
    if (zilch::Probability::operator<((double *)(a4 + 8), a3[1]))
    {
      v12 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v12;
      if (zilch::Probability::operator<(a3 + 1, a2[1]))
      {
        v13 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v13;
        if (zilch::Probability::operator<(a2 + 1, a1[1]))
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

void zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::addRoadToHypothesis(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  std::__shared_weak_count *v12;
  void **v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  void (***v39)(char *);
  void (**v40)(char *);
  BOOL v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  BOOL v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  __int128 v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int64x2_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  __int128 v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  __int128 v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  void **v118;
  std::__shared_weak_count *v119;
  _BYTE v120[40];
  __int128 v121;
  int v122;
  int v123;

  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::operator=[abi:ne180100]((_QWORD *)(a1 + 136), a2);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::operator=[abi:ne180100]((_QWORD *)(a1 + 152), (uint64_t *)a3);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a3 + 24);
  zilch::Probability::operator*=((double *)(a1 + 128), a6);
  v13 = (void **)*a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v116 = *a2;
  v117 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = *(_QWORD *)(a1 + 328);
  v18 = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 64);
  v118 = v13;
  v119 = v12;
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>::RoadPathElement((uint64_t)v120, &v118, a4, v16);
  v21 = *(_QWORD *)(a1 + 64);
  v22 = *(_QWORD *)(a1 + 72);
  if (v21 < v22)
  {
    *(_QWORD *)v21 = &unk_1E1BF7018;
    *(_OWORD *)(v21 + 8) = *(_OWORD *)&v120[8];
    *(_QWORD *)v21 = &off_1E1BF7040;
    *(_OWORD *)(v21 + 24) = *(_OWORD *)&v120[24];
    *(_OWORD *)(v21 + 40) = v121;
    v121 = 0uLL;
    *(_QWORD *)&v120[24] = 0;
    *(_QWORD *)&v120[32] = 0;
    *(_DWORD *)(v21 + 56) = v122;
    *(_DWORD *)(v21 + 64) = v123;
    *(_QWORD *)(a1 + 64) = v21 + 72;
    *(_QWORD *)v120 = &off_1E1BF7040;
    goto LABEL_29;
  }
  v23 = *(_QWORD *)(a1 + 56);
  v24 = 0x8E38E38E38E38E39 * ((uint64_t)(v21 - v23) >> 3);
  v25 = v24 + 1;
  if (v24 + 1 > 0x38E38E38E38E38ELL)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v26 = 0x8E38E38E38E38E39 * ((uint64_t)(v22 - v23) >> 3);
  if (2 * v26 > v25)
    v25 = 2 * v26;
  if (v26 >= 0x1C71C71C71C71C7)
    v27 = 0x38E38E38E38E38ELL;
  else
    v27 = v25;
  v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>>(v27);
  v30 = &v28[72 * v24];
  *(_QWORD *)v30 = &unk_1E1BF7018;
  *(_OWORD *)(v30 + 8) = *(_OWORD *)&v120[8];
  *(_QWORD *)v30 = &off_1E1BF7040;
  *(_OWORD *)(v30 + 24) = *(_OWORD *)&v120[24];
  *(_QWORD *)&v120[24] = 0;
  *(_QWORD *)&v120[32] = 0;
  *(_OWORD *)(v30 + 40) = v121;
  v121 = 0uLL;
  *((_DWORD *)v30 + 14) = v122;
  *((_DWORD *)v30 + 16) = v123;
  v31 = *(char **)(a1 + 56);
  v32 = *(char **)(a1 + 64);
  if (v32 == v31)
  {
    v37 = v30 + 72;
    *(_QWORD *)(a1 + 56) = v30;
    *(_QWORD *)(a1 + 64) = v30 + 72;
    *(_QWORD *)(a1 + 72) = &v28[72 * v29];
    if (!v32)
      goto LABEL_24;
  }
  else
  {
    v33 = 0;
    do
    {
      v34 = &v30[v33];
      *((_QWORD *)v34 - 9) = &unk_1E1BF7018;
      v35 = &v32[v33];
      *((_OWORD *)v34 - 4) = *(_OWORD *)&v32[v33 - 64];
      *((_QWORD *)v34 - 9) = &off_1E1BF7040;
      *((_OWORD *)v34 - 3) = *(_OWORD *)&v32[v33 - 48];
      *((_QWORD *)v35 - 6) = 0;
      *((_QWORD *)v35 - 5) = 0;
      *((_OWORD *)v34 - 2) = *(_OWORD *)&v32[v33 - 32];
      *((_QWORD *)v35 - 4) = 0;
      *((_QWORD *)v35 - 3) = 0;
      *((_DWORD *)v34 - 4) = *(_DWORD *)&v32[v33 - 16];
      *((_DWORD *)v34 - 2) = *(_DWORD *)&v32[v33 - 8];
      v33 -= 72;
    }
    while (&v32[v33] != v31);
    v32 = *(char **)(a1 + 56);
    v36 = *(char **)(a1 + 64);
    v37 = v30 + 72;
    *(_QWORD *)(a1 + 56) = &v30[v33];
    *(_QWORD *)(a1 + 64) = v30 + 72;
    *(_QWORD *)(a1 + 72) = &v28[72 * v29];
    if (v36 != v32)
    {
      v38 = v36 - 72;
      v39 = (void (***)(char *))(v36 - 72);
      do
      {
        v40 = *v39;
        v39 -= 9;
        (*v40)(v38);
        v41 = v38 == v32;
        v38 = (char *)v39;
      }
      while (!v41);
    }
    if (!v32)
      goto LABEL_24;
  }
  operator delete(v32);
LABEL_24:
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
  *(_QWORD *)(a1 + 64) = v37;
  *(_QWORD *)v120 = &off_1E1BF7040;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
LABEL_29:
  v45 = *(std::__shared_weak_count **)&v120[32];
  if (*(_QWORD *)&v120[32])
  {
    v46 = (unint64_t *)(*(_QWORD *)&v120[32] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v119;
  if (v119)
  {
    v49 = (unint64_t *)&v119->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = 0x8E38E38E38E38E39 * ((v17 - v18) >> 3);
  v53 = *(char **)(a1 + 112);
  v52 = *(_QWORD *)(a1 + 120);
  if ((unint64_t)v53 >= v52)
  {
    v55 = *(char **)(a1 + 104);
    v56 = (v53 - v55) >> 4;
    v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) >> 60)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v58 = v52 - (_QWORD)v55;
    if (v58 >> 3 > v57)
      v57 = v58 >> 3;
    v59 = (unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0;
    v60 = 0xFFFFFFFFFFFFFFFLL;
    if (!v59)
      v60 = v57;
    if (v60)
    {
      v60 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v60);
      v55 = *(char **)(a1 + 104);
      v53 = *(char **)(a1 + 112);
    }
    else
    {
      v61 = 0;
    }
    v62 = v60 + 16 * v56;
    v63 = v60 + 16 * v61;
    *(_DWORD *)v62 = 0;
    *(_QWORD *)(v62 + 8) = v51;
    v54 = (_QWORD *)(v62 + 16);
    if (v53 != v55)
    {
      do
      {
        *(_OWORD *)(v62 - 16) = *((_OWORD *)v53 - 1);
        v62 -= 16;
        v53 -= 16;
      }
      while (v53 != v55);
      v55 = *(char **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v62;
    *(_QWORD *)(a1 + 112) = v54;
    *(_QWORD *)(a1 + 120) = v63;
    if (v55)
      operator delete(v55);
  }
  else
  {
    *(_DWORD *)v53 = 0;
    *((_QWORD *)v53 + 1) = v51;
    v54 = v53 + 16;
  }
  *(_QWORD *)(a1 + 112) = v54;
  if (v117)
  {
    v64 = &v117->__shared_owners_;
    do
      v65 = __ldaxr((unint64_t *)v64);
    while (__stlxr(v65 - 1, (unint64_t *)v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if ((std::__hash_table<std::shared_ptr<geo::MapEdge>,std::hash<std::shared_ptr<geo::MapEdge>>,std::equal_to<std::shared_ptr<geo::MapEdge>>,std::allocator<std::shared_ptr<geo::MapEdge>>>::__emplace_unique_key_args<std::shared_ptr<geo::MapEdge>,std::shared_ptr<geo::MapEdge> const&>(a1 + 280, *a2, *a2, a2[1]) & 1) == 0)++*(_DWORD *)(a1 + 320);
  memset(v120, 0, sizeof(v120));
  zilch::GeoCoordinates::GeoCoordinates((zilch::GeoCoordinates *)v120);
  v66 = 0uLL;
  *(_QWORD *)&v120[32] = 0;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)v120;
  *(_OWORD *)&v120[16] = 0u;
  *(_DWORD *)(a1 + 200) = *(_DWORD *)&v120[8];
  v67 = (void **)(a1 + 208);
  v68 = *(_QWORD *)(a1 + 208);
  if (v68)
  {
    v69 = *(_QWORD *)(a1 + 216);
    v70 = *(void **)(a1 + 208);
    if (v69 != v68)
    {
      do
        v69 = std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v69 - 16);
      while (v69 != v68);
      v70 = *v67;
    }
    *(_QWORD *)(a1 + 216) = v68;
    operator delete(v70);
    *v67 = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    v66 = *(_OWORD *)&v120[16];
    v71 = *(_QWORD *)&v120[32];
  }
  else
  {
    v71 = 0;
  }
  *(_OWORD *)(a1 + 208) = v66;
  *(_QWORD *)(a1 + 224) = v71;
  memset(&v120[16], 0, 24);
  v118 = (void **)&v120[16];
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&v118);
  v72 = *(std::__shared_weak_count **)(a1 + 144);
  v114 = *(_QWORD *)(a1 + 136);
  v115 = v72;
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a5 + 16))(a5, &v114, a1 + 192);
  v75 = v115;
  if (v115)
  {
    v76 = (unint64_t *)&v115->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208);
  v79 = v78 >> 4;
  v80 = *(_QWORD *)(a1 + 232);
  v81 = *(_QWORD *)(a1 + 240);
  v82 = 0xCCCCCCCCCCCCCCCDLL * ((v81 - v80) >> 3);
  v83 = (v78 >> 4) - v82;
  if (v78 >> 4 <= v82)
  {
    if (v78 >> 4 < v82)
    {
      v101 = v80 + 40 * v79;
      while (v81 != v101)
      {
        v81 -= 40;
        std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v81);
      }
      *(_QWORD *)(a1 + 240) = v101;
    }
  }
  else
  {
    v84 = *(_QWORD *)(a1 + 248);
    if (0xCCCCCCCCCCCCCCCDLL * ((v84 - v81) >> 3) >= v83)
    {
      v102 = v81 + 40 * v83;
      v103 = 40 * v79 - 8 * ((v81 - v80) >> 3);
      do
      {
        zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road::Road(v81);
        v81 += 40;
        v103 -= 40;
      }
      while (v103);
      *(_QWORD *)(a1 + 240) = v102;
    }
    else
    {
      if ((unint64_t)v78 >= 0x6666666666666661)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v85 = 0xCCCCCCCCCCCCCCCDLL * ((v84 - v80) >> 3);
      v86 = 2 * v85;
      if (2 * v85 <= v79)
        v86 = v79;
      if (v85 >= 0x333333333333333)
        v87 = 0x666666666666666;
      else
        v87 = v86;
      *(_QWORD *)&v120[32] = a1 + 248;
      v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CAARiseTransitSetDetails2>>(v87);
      v89 = (uint64_t)&v88[40 * v82];
      *(_QWORD *)v120 = v88;
      *(_QWORD *)&v120[8] = v89;
      *(_QWORD *)&v120[16] = v89;
      *(_QWORD *)&v120[24] = &v88[40 * v90];
      v91 = 5 * v79;
      v92 = &v88[40 * v79];
      v93 = 8 * v91 - 40 * v82;
      do
      {
        zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road::Road(v89);
        v89 += 40;
        v93 -= 40;
      }
      while (v93);
      *(_QWORD *)&v120[16] = v92;
      v95 = *(_QWORD *)(a1 + 232);
      v94 = *(_QWORD *)(a1 + 240);
      v96 = *(_QWORD *)&v120[8];
      if (v94 == v95)
      {
        v100 = vdupq_n_s64(v94);
      }
      else
      {
        v97 = 0;
        do
        {
          v98 = v96 + v97;
          v99 = v94 + v97;
          *(_OWORD *)(v98 - 40) = *(_OWORD *)(v94 + v97 - 40);
          *(_QWORD *)(v99 - 40) = 0;
          *(_QWORD *)(v99 - 32) = 0;
          *(_DWORD *)(v98 - 24) = *(_DWORD *)(v94 + v97 - 24);
          *(_OWORD *)(v98 - 16) = *(_OWORD *)(v94 + v97 - 16);
          v97 -= 40;
        }
        while (v94 + v97 != v95);
        v100 = *(int64x2_t *)(a1 + 232);
        v92 = *(char **)&v120[16];
        v96 += v97;
      }
      *(_QWORD *)(a1 + 232) = v96;
      *(_QWORD *)(a1 + 240) = v92;
      *(int64x2_t *)&v120[8] = v100;
      v104 = *(_QWORD *)(a1 + 248);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)&v120[24];
      *(_QWORD *)&v120[24] = v104;
      *(_QWORD *)v120 = v100.i64[0];
      std::__split_buffer<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road,std::allocator<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road> &>::~__split_buffer((uint64_t)v120);
    }
  }
  v105 = *(_QWORD *)(a1 + 208);
  if (*(_QWORD *)(a1 + 216) != v105)
  {
    v106 = 0;
    do
    {
      v107 = *(_OWORD *)(v105 + 16 * v106);
      v113 = v107;
      if (*((_QWORD *)&v107 + 1))
      {
        v108 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
        do
          v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
      }
      (*(void (**)(uint64_t, __int128 *, unint64_t))(*(_QWORD *)a5 + 8))(a5, &v113, *(_QWORD *)(a1 + 232) + 40 * v106);
      v110 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
      if (*((_QWORD *)&v113 + 1))
      {
        v111 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      ++v106;
      v105 = *(_QWORD *)(a1 + 208);
    }
    while (v106 < (*(_QWORD *)(a1 + 216) - v105) >> 4);
  }
}

void sub_1894AC5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::shared_ptr<geo::MapEdge>,std::hash<std::shared_ptr<geo::MapEdge>>,std::equal_to<std::shared_ptr<geo::MapEdge>>,std::allocator<std::shared_ptr<geo::MapEdge>>>::__emplace_unique_key_args<std::shared_ptr<geo::MapEdge>,std::shared_ptr<geo::MapEdge> const&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v30[2];
  char v31;

  v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == a2)
            return 0;
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v17 = operator new(0x20uLL);
  v30[0] = v17;
  v30[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v17[2] = a3;
  v17[3] = a4;
  if (a4)
  {
    v18 = (unint64_t *)(a4 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v31 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<google::protobuf::Descriptor const*,std::hash<google::protobuf::Descriptor const*>,std::equal_to<google::protobuf::Descriptor const*>,std::allocator<google::protobuf::Descriptor const*>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *v17 = *v27;
LABEL_41:
    *v27 = v17;
    goto LABEL_42;
  }
  *v17 = *v16;
  *v16 = v17;
  *(_QWORD *)(v26 + 8 * v4) = v16;
  if (*v17)
  {
    v28 = *(_QWORD *)(*v17 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  v30[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<geo::MapEdge>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<geo::MapEdge>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
  return 1;
}

void sub_1894AC8CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<geo::MapEdge>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<geo::MapEdge>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::shared_ptr<geo::MapEdge>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<geo::MapEdge>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t std::__split_buffer<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road,std::allocator<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::PathHypothesis(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v14 = *(_OWORD *)(a2 + 32);
  v15 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v15;
  *(_OWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__init_with_size[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*>((_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<zilch::GeometryPathElement>::__init_with_size[abi:ne180100]<zilch::GeometryPathElement*,zilch::GeometryPathElement*>((_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 4));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry,std::allocator<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry>>::__init_with_size[abi:ne180100]<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*,zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*>((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 4);
  v16 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = v16;
  *(_QWORD *)(a1 + 144) = 0;
  zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road::Road(a1 + 152);
  zilch::GeoCoordinates::GeoCoordinates((zilch::GeoCoordinates *)(a1 + 192));
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  std::unordered_set<std::shared_ptr<geo::MapEdge>>::unordered_set(a1 + 280, a2 + 280);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  v17 = a3[1];
  v24 = *a3;
  v25 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::addRoadToHypothesis(a1, &v24, a4, a5, a6, a7);
  v20 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return a1;
}

void sub_1894ACB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void **a12)
{
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v18;

  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::__hash_table<std::shared_ptr<geo::MapEdge>,std::hash<std::shared_ptr<geo::MapEdge>>,std::equal_to<std::shared_ptr<geo::MapEdge>>,std::allocator<std::shared_ptr<geo::MapEdge>>>::~__hash_table(v16);
  a12 = v12 + 6;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = v12 + 3;
  std::vector<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road,std::allocator<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = v12;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](a9);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v15);
  zilch::Path<std::shared_ptr<geo::MapEdge>>::~Path(v13 - 24);
  v18 = *(std::__shared_weak_count **)(v14 + 8);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::shared_ptr<geo::MapEdge>>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<google::protobuf::Descriptor const*,std::hash<google::protobuf::Descriptor const*>,std::equal_to<google::protobuf::Descriptor const*>,std::allocator<google::protobuf::Descriptor const*>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::shared_ptr<geo::MapEdge>,std::hash<std::shared_ptr<geo::MapEdge>>,std::equal_to<std::shared_ptr<geo::MapEdge>>,std::allocator<std::shared_ptr<geo::MapEdge>>>::__emplace_unique_key_args<std::shared_ptr<geo::MapEdge>,std::shared_ptr<geo::MapEdge> const&>(a1, i[2], i[2], i[3]);
  return a1;
}

void sub_1894ACC6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::shared_ptr<geo::MapEdge>,std::hash<std::shared_ptr<geo::MapEdge>>,std::equal_to<std::shared_ptr<geo::MapEdge>>,std::allocator<std::shared_ptr<geo::MapEdge>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

uint64_t zilch::Path<std::shared_ptr<geo::MapEdge>>::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  void **v5;
  void (***v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (***v11)(_QWORD);
  void *v12;
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void (**v15)(_QWORD);
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (***v26)(_QWORD);
  void (***v27)(_QWORD);
  void (**v28)(_QWORD);
  void **v29;
  void (***v30)(_QWORD);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void (***v35)(_QWORD);
  void *v36;
  void (***v37)(_QWORD);
  void (***v38)(_QWORD);
  void (**v39)(_QWORD);
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char **v45;
  char **v46;
  char **v47;
  char **v48;
  char *v49;
  char *v50;
  char *v51;
  _BYTE *v52;
  size_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void **v58;
  _BYTE *v59;
  unint64_t v60;
  char *v61;
  void *v62;
  char *v63;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  if ((__int128 *)a1 != a2)
  {
    v5 = (void **)(a1 + 24);
    v6 = *(void (****)(_QWORD))(a1 + 24);
    v8 = *((_QWORD *)a2 + 3);
    v7 = *((_QWORD *)a2 + 4);
    v9 = 0x8E38E38E38E38E39 * ((v7 - v8) >> 3);
    v10 = *(_QWORD *)(a1 + 40);
    if (0x8E38E38E38E38E39 * ((v10 - (uint64_t)v6) >> 3) >= v9)
    {
      if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v6) >> 3) >= v9)
      {
        v24 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *>(*((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *(_QWORD *)(a1 + 24));
        v25 = *(_QWORD *)(a1 + 32);
        if (v25 != v24)
        {
          v26 = (void (***)(_QWORD))(v25 - 72);
          v27 = (void (***)(_QWORD))(v25 - 72);
          do
          {
            v28 = *v27;
            v27 -= 9;
            (*v28)(v26);
            v16 = v26 == (void (***)(_QWORD))v24;
            v26 = v27;
          }
          while (!v16);
        }
        *(_QWORD *)(a1 + 32) = v24;
      }
      else
      {
        v21 = v8 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v6) >> 3);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *>(*((_QWORD *)a2 + 3), v21, *(_QWORD *)(a1 + 24));
        v22 = *(_QWORD *)(a1 + 32);
        if (v21 != v7)
        {
          v23 = *(_QWORD *)(a1 + 32);
          do
          {
            std::allocator<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::construct[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>&>(v23, v21);
            v21 += 72;
            v23 += 72;
            v22 += 72;
          }
          while (v21 != v7);
        }
        *(_QWORD *)(a1 + 32) = v22;
      }
    }
    else
    {
      if (v6)
      {
        v11 = *(void (****)(_QWORD))(a1 + 32);
        v12 = *(void **)(a1 + 24);
        if (v11 != v6)
        {
          v13 = v11 - 9;
          v14 = v11 - 9;
          do
          {
            v15 = *v14;
            v14 -= 9;
            (*v15)(v13);
            v16 = v13 == v6;
            v13 = v14;
          }
          while (!v16);
          v12 = *v5;
        }
        *(_QWORD *)(a1 + 32) = v6;
        operator delete(v12);
        v10 = 0;
        *v5 = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
      }
      if (v9 > 0x38E38E38E38E38ELL)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v17 = 0x8E38E38E38E38E39 * (v10 >> 3);
      v18 = 2 * v17;
      if (2 * v17 <= v9)
        v18 = 0x8E38E38E38E38E39 * ((v7 - v8) >> 3);
      if (v17 >= 0x1C71C71C71C71C7)
        v19 = 0x38E38E38E38E38ELL;
      else
        v19 = v18;
      std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__vallocate[abi:ne180100]((_QWORD *)(a1 + 24), v19);
      v20 = *(_QWORD *)(a1 + 32);
      while (v8 != v7)
      {
        std::allocator<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::construct[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>&>(v20, v8);
        v8 += 72;
        v20 += 72;
      }
      *(_QWORD *)(a1 + 32) = v20;
    }
    v29 = (void **)(a1 + 48);
    v30 = *(void (****)(_QWORD))(a1 + 48);
    v32 = *((_QWORD *)a2 + 6);
    v31 = *((_QWORD *)a2 + 7);
    v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v32) >> 4);
    v34 = *(_QWORD *)(a1 + 64);
    if (0xAAAAAAAAAAAAAAABLL * ((v34 - (uint64_t)v30) >> 4) >= v33)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - (_QWORD)v30) >> 4) >= v33)
      {
        v45 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<zilch::GeometryPathElement *,zilch::GeometryPathElement *,zilch::GeometryPathElement *>(*((_QWORD *)a2 + 6), *((_QWORD *)a2 + 7), *(_QWORD *)(a1 + 48));
        v46 = *(char ***)(a1 + 56);
        if (v46 != v45)
        {
          v47 = v46 - 6;
          v48 = v46 - 6;
          do
          {
            v49 = *v48;
            v48 -= 6;
            (*(void (**)(char **))v49)(v47);
            v16 = v47 == v45;
            v47 = v48;
          }
          while (!v16);
        }
        *(_QWORD *)(a1 + 56) = v45;
LABEL_53:
        v50 = *(char **)(a1 + 72);
        v51 = (char *)*((_QWORD *)a2 + 9);
        v52 = (_BYTE *)*((_QWORD *)a2 + 10);
        v53 = v52 - v51;
        v54 = (v52 - v51) >> 4;
        v55 = *(_QWORD *)(a1 + 88);
        if (v54 <= (v55 - (uint64_t)v50) >> 4)
        {
          v58 = (void **)(a1 + 80);
          v59 = *(_BYTE **)(a1 + 80);
          v60 = (v59 - v50) >> 4;
          if (v60 < v54)
          {
            v61 = &v51[16 * v60];
            if (v59 != v50)
            {
              memmove(*(void **)(a1 + 72), v51, v59 - v50);
              v50 = (char *)*v58;
            }
            v53 = v52 - v61;
            if (v52 == v61)
              goto LABEL_71;
            v62 = v50;
            v63 = v61;
            goto LABEL_70;
          }
        }
        else
        {
          if (v50)
          {
            *(_QWORD *)(a1 + 80) = v50;
            operator delete(v50);
            v55 = 0;
            *(_QWORD *)(a1 + 72) = 0;
            *(_QWORD *)(a1 + 80) = 0;
            *(_QWORD *)(a1 + 88) = 0;
          }
          if ((v53 & 0x8000000000000000) != 0)
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v56 = v55 >> 3;
          if (v55 >> 3 <= v54)
            v56 = (v52 - v51) >> 4;
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
            v57 = 0xFFFFFFFFFFFFFFFLL;
          else
            v57 = v56;
          std::vector<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry,std::allocator<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry>>::__vallocate[abi:ne180100]((_QWORD *)(a1 + 72), v57);
          v58 = (void **)(a1 + 80);
          v50 = *(char **)(a1 + 80);
        }
        if (v52 == v51)
        {
LABEL_71:
          *v58 = &v50[v53];
          return a1;
        }
        v62 = v50;
        v63 = v51;
LABEL_70:
        memmove(v62, v63, v53);
        goto LABEL_71;
      }
      v44 = v32 + 16 * ((uint64_t)(*(_QWORD *)(a1 + 56) - (_QWORD)v30) >> 4);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<zilch::GeometryPathElement *,zilch::GeometryPathElement *,zilch::GeometryPathElement *>(*((_QWORD *)a2 + 6), v44, *(_QWORD *)(a1 + 48));
      v43 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<zilch::GeometryPathElement>,zilch::GeometryPathElement*,zilch::GeometryPathElement*,zilch::GeometryPathElement*>(v44, v31, *(_QWORD *)(a1 + 56));
    }
    else
    {
      if (v30)
      {
        v35 = *(void (****)(_QWORD))(a1 + 56);
        v36 = *(void **)(a1 + 48);
        if (v35 != v30)
        {
          v37 = v35 - 6;
          v38 = v35 - 6;
          do
          {
            v39 = *v38;
            v38 -= 6;
            (*v39)(v37);
            v16 = v37 == v30;
            v37 = v38;
          }
          while (!v16);
          v36 = *v29;
        }
        *(_QWORD *)(a1 + 56) = v30;
        operator delete(v36);
        v34 = 0;
        *v29 = 0;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
      }
      if (v33 > 0x555555555555555)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v40 = 0xAAAAAAAAAAAAAAABLL * (v34 >> 4);
      v41 = 2 * v40;
      if (2 * v40 <= v33)
        v41 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v32) >> 4);
      if (v40 >= 0x2AAAAAAAAAAAAAALL)
        v42 = 0x555555555555555;
      else
        v42 = v41;
      std::vector<zilch::GeometryPathElement>::__vallocate[abi:ne180100]((_QWORD *)(a1 + 48), v42);
      v43 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<zilch::GeometryPathElement>,zilch::GeometryPathElement*,zilch::GeometryPathElement*,zilch::GeometryPathElement*>(v32, v31, *(_QWORD *)(a1 + 56));
    }
    *(_QWORD *)(a1 + 56) = v43;
    goto LABEL_53;
  }
  return a1;
}

void sub_1894AD1AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 56) = v2;
  _Unwind_Resume(a1);
}

void sub_1894AD1B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 56) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      *(_OWORD *)(a3 + v6 + 8) = *(_OWORD *)(a1 + v6 + 8);
      std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::operator=[abi:ne180100]((_QWORD *)(a3 + v6 + 24), (uint64_t *)(a1 + v6 + 24));
      std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::operator=[abi:ne180100]((_QWORD *)(a3 + v6 + 40), (uint64_t *)(a1 + v6 + 40));
      *(_DWORD *)(v7 + 56) = *(_DWORD *)(a1 + v6 + 56);
      *(_DWORD *)(v7 + 64) = *(_DWORD *)(a1 + v6 + 64);
      v6 += 72;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

char **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<zilch::GeometryPathElement *,zilch::GeometryPathElement *,zilch::GeometryPathElement *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  char *v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  char *v19;

  v3 = a3;
  if (a1 != a2)
  {
    v4 = a2;
    v5 = a1;
    v6 = (char **)(a3 + 24);
    do
    {
      *((_OWORD *)v6 - 1) = *(_OWORD *)(v5 + 8);
      if ((char **)v5 != v6 - 3)
      {
        v7 = *(char **)(v5 + 24);
        v8 = *(_BYTE **)(v5 + 32);
        v9 = v8 - v7;
        v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 2);
        v11 = (uint64_t)v6[2];
        v12 = *v6;
        if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)*v6) >> 2) >= v10)
        {
          v16 = (_QWORD *)(v3 + 32);
          v17 = v6[1];
          v18 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v12) >> 2);
          if (v18 >= v10)
          {
            if (v8 != v7)
              memmove(*v6, *(const void **)(v5 + 24), v8 - v7);
            v4 = a2;
          }
          else
          {
            if (v17 != v12)
            {
              memmove(*v6, *(const void **)(v5 + 24), v17 - v12);
              v12 = v6[1];
            }
            v19 = &v7[12 * v18];
            v9 = v8 - v19;
            if (v8 != v19)
              memmove(v12, v19, v8 - v19);
            v4 = a2;
          }
        }
        else
        {
          if (v12)
          {
            v6[1] = v12;
            operator delete(v12);
            v11 = 0;
            *v6 = 0;
            v6[1] = 0;
            v6[2] = 0;
          }
          if (v10 > 0x1555555555555555)
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v13 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 2);
          v14 = 2 * v13;
          if (2 * v13 <= v10)
            v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 2);
          if (v13 >= 0xAAAAAAAAAAAAAAALL)
            v15 = 0x1555555555555555;
          else
            v15 = v14;
          std::vector<maps::path_codec::Coordinate>::__vallocate[abi:ne180100](v6, v15);
          v16 = v6 + 1;
          v12 = v6[1];
          if (v8 != v7)
            memmove(v6[1], v7, v8 - v7);
        }
        *v16 = &v12[v9];
      }
      v5 += 48;
      v3 += 48;
      v6 += 6;
    }
    while (v5 != v4);
    return v6 - 3;
  }
  return (char **)v3;
}

uint64_t zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::PathHypothesis(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__init_with_size[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*>((_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<zilch::GeometryPathElement>::__init_with_size[abi:ne180100]<zilch::GeometryPathElement*,zilch::GeometryPathElement*>((_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 4));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry,std::allocator<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry>>::__init_with_size[abi:ne180100]<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*,zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*>((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 4);
  v6 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v6;
  v7 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v10 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 160) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v13 = *(_QWORD *)(a2 + 192);
  v14 = *(_DWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 200) = v14;
  *(_QWORD *)(a1 + 192) = v13;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  std::vector<std::shared_ptr<geo::MapEdge>>::__init_with_size[abi:ne180100]<std::shared_ptr<geo::MapEdge>*,std::shared_ptr<geo::MapEdge>*>((_QWORD *)(a1 + 208), *(_QWORD **)(a2 + 208), *(_QWORD **)(a2 + 216), (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 4);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  v15 = *(_QWORD *)(a2 + 232);
  v16 = *(_QWORD *)(a2 + 240);
  if (v16 != v15)
  {
    v17 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - v15) >> 3);
    if (v17 >= 0x666666666666667)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CAARiseTransitSetDetails2>>(v17);
    *(_QWORD *)(a1 + 232) = v18;
    *(_QWORD *)(a1 + 240) = v18;
    *(_QWORD *)(a1 + 248) = &v18[40 * v19];
    do
    {
      *(_QWORD *)v18 = *(_QWORD *)v15;
      v20 = *(_QWORD *)(v15 + 8);
      *((_QWORD *)v18 + 1) = v20;
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      *((_DWORD *)v18 + 4) = *(_DWORD *)(v15 + 16);
      *(_OWORD *)(v18 + 24) = *(_OWORD *)(v15 + 24);
      v15 += 40;
      v18 += 40;
    }
    while (v15 != v16);
    *(_QWORD *)(a1 + 240) = v18;
  }
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  std::vector<std::shared_ptr<geo::MapEdge>>::__init_with_size[abi:ne180100]<std::shared_ptr<geo::MapEdge>*,std::shared_ptr<geo::MapEdge>*>((_QWORD *)(a1 + 256), *(_QWORD **)(a2 + 256), *(_QWORD **)(a2 + 264), (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 4);
  std::unordered_set<std::shared_ptr<geo::MapEdge>>::unordered_set(a1 + 280, a2 + 280);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  return a1;
}

void sub_1894AD6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v14;

  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road,std::allocator<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v11);
  zilch::Path<std::shared_ptr<geo::MapEdge>>::~Path(v10 - 24);
  v14 = *(std::__shared_weak_count **)(v9 + 8);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<geo::MapEdge>>::__init_with_size[abi:ne180100]<std::shared_ptr<geo::MapEdge>*,std::shared_ptr<geo::MapEdge>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v4 = result;
    if (a4 >> 60)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)(result + 2), a4);
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[2 * v7];
    while (a2 != a3)
    {
      *result = *a2;
      v8 = a2[1];
      result[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      result += 2;
    }
    v4[1] = result;
  }
  return result;
}

void sub_1894AD7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1894AD96C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAddStopRouteInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  int v44;
  void *v45;
  GEORouteAttributes *v46;
  char v47;
  char v48;
  int v49;
  char v50;
  void *v51;
  int v53;
  int *v54;
  char v55;
  char v56;
  char v57;
  BOOL v58;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 76)), (uint16x4_t)0xFFFDFFFCFFFFFFFBLL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 76) & 1)+ ((*(_BYTE *)(a1 + 76) & 4) != 0));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 3;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v55 = v17;
        v19 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v58 = v18;
        v56 = v19;
        v57 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_79;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_79:
      v53 = 1;
      goto LABEL_80;
    }
    v34 = v26 >> 3;
    v35 = v58;
    if ((v57 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35)
          goto LABEL_64;
        if ((*(_BYTE *)(a1 + 76) & 2) == 0)
        {
          PBReaderReadData();
          v40 = objc_claimAutoreleasedReturnValue();
          v41 = 24;
          goto LABEL_57;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_98;
        v48 = *(_BYTE *)(a1 + 76) << 6;
        goto LABEL_76;
      case 2:
        if (!v35)
          goto LABEL_64;
        if ((*(_BYTE *)(a1 + 76) & 0x20) == 0)
        {
          PBReaderReadData();
          v40 = objc_claimAutoreleasedReturnValue();
          v41 = 56;
          goto LABEL_57;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_98;
        v48 = 4 * *(_BYTE *)(a1 + 76);
        goto LABEL_76;
      case 3:
        if (!v35)
          goto LABEL_64;
        if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
        {
          PBReaderReadData();
          v40 = objc_claimAutoreleasedReturnValue();
          v41 = 48;
          goto LABEL_57;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_98;
        v48 = 8 * *(_BYTE *)(a1 + 76);
        goto LABEL_76;
      case 4:
        if (!v35)
          goto LABEL_64;
        if ((*(_BYTE *)(a1 + 76) & 8) == 0)
        {
          PBReaderReadData();
          v40 = objc_claimAutoreleasedReturnValue();
          v41 = 40;
LABEL_57:
          v45 = *(void **)(a1 + v41);
          *(_QWORD *)(a1 + v41) = v40;
          goto LABEL_58;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_98;
        v48 = 16 * *(_BYTE *)(a1 + 76);
        goto LABEL_76;
      case 5:
        if (!v35)
          goto LABEL_64;
        if ((*(_BYTE *)(a1 + 76) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_98;
          v48 = 32 * *(_BYTE *)(a1 + 76);
LABEL_76:
          v7 += v48 >> 7;
          goto LABEL_77;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_98;
        v46 = objc_alloc_init(GEORouteAttributes);
        if (GEORouteAttributesReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v45 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v46;
LABEL_58:

          --v7;
LABEL_77:
          v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_78:
          if (!(v56 & 1 | (v7 != 0)))
            goto LABEL_79;
          continue;
        }

LABEL_98:
        v53 = 0;
        v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_80:
        v54 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
        if ((v55 & 1) != 0)
LABEL_81:
          *(_BYTE *)(a1 + v54[767]) |= 1u;
        if (v58 || (v53 & 1) == 0)
        {
          *(_BYTE *)(a1 + v54[767]) |= 2u;
          *(_BYTE *)(a1 + v54[767]) |= 0x20u;
          *(_BYTE *)(a1 + v54[767]) |= 0x10u;
          *(_BYTE *)(a1 + v54[767]) |= 8u;
          *(_BYTE *)(a1 + v54[767]) |= 4u;
        }
        else if (v20)
        {
          while (1)
          {
            v49 = *v20++;
            v50 = 2;
            switch(v49)
            {
              case 0:
                goto LABEL_91;
              case 1:
                goto LABEL_90;
              case 2:
                v50 = 32;
                goto LABEL_90;
              case 3:
                v50 = 16;
                goto LABEL_90;
              case 4:
                v50 = 8;
                goto LABEL_90;
              case 5:
                v50 = 4;
LABEL_90:
                *(_BYTE *)(a1 + v54[767]) |= v50;
                break;
              default:
                continue;
            }
          }
        }
LABEL_91:
        if (v53)
          v3 = *(_BYTE *)(v3 + *v22) == 0;
        else
          v3 = 0;
        if (v58)
        {
          v51 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v55 & 1) == 0 || (*(_BYTE *)(a1 + 76) & 1) != 0)
        {
LABEL_64:
          v47 = PBReaderSkipValueWithTag();
          v22 = (int *)MEMORY[0x1E0D82BC8];
          if ((v47 & 1) == 0)
          {
            v53 = 0;
            goto LABEL_80;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v42 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v43 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v42;

          }
          v44 = PBUnknownFieldAdd();
          v22 = (int *)MEMORY[0x1E0D82BC8];
          if (!v44)
          {
            v53 = 0;
            v54 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
            goto LABEL_81;
          }
        }
        goto LABEL_78;
    }
  }
}

void sub_1894AE174(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894AE2B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894AE3F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894AE53C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894AED88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAddStopRouteInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOAddStopRouteInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOAddStopRouteInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOAddStopRouteInfoReadAllFrom_initialTag;
  Specified = GEOAddStopRouteInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_1894AEF2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAddStopRouteInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOAddStopRouteInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894AEF8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAddStopRouteInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2)
            goto LABEL_34;
          goto LABEL_26;
        case 2u:
          if (v15 == 2)
            goto LABEL_26;
          goto LABEL_34;
        case 3u:
          if (v15 == 2)
            goto LABEL_26;
          goto LABEL_34;
        case 4u:
          if (v15 == 2)
            goto LABEL_26;
          goto LABEL_34;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORouteAttributesIsValid(a1))
            goto LABEL_34;
          PBReaderRecallMark();
          goto LABEL_27;
        default:
LABEL_26:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_34:
            PBReaderRecallMark();
            return 0;
          }
LABEL_27:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_33;
          break;
      }
    }
  }
LABEL_33:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_1894AF3AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *_GEOAddStopRouteInfoIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  if ((*(_BYTE *)(a1 + 76) & 0x7A) != 0)
    return (os_unfair_lock_s *)1;
  if ((*(_BYTE *)(a1 + 76) & 4) != 0)
    return GEORouteAttributesIsDirty(*(os_unfair_lock_s **)(a1 + 32));
  return 0;
}

os_unfair_lock_s *GEOAddStopRouteInfoIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    v2 = _GEOAddStopRouteInfoIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 18);
    return v2;
  }
  return result;
}

void sub_1894AF748(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894AFA68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894AFD08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCachedCategorySuggestionsPlaceResponseReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  GEOPDPlaceResponse *v38;
  void *v39;
  id v40;
  void *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  int v50;
  char v51;
  void *v52;
  int v54;
  int *v55;
  char v56;
  char v57;
  char v58;
  char v59;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 76)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFDFFFEFFFCFFFBLL) & 0xFF01FF01FF01FF01))+ ((*(_BYTE *)(a1 + 76) & 2) != 0));
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 > 2;
        v56 = v17 & ~(_BYTE)v12 | v10;
        v57 = v17 | v12 | v56;
        if ((((v17 | v12) | v8) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v58 = (v18 == 0) | v17 | v12;
        v59 = v17 | v12;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v10;
LABEL_8:
        v15 = v11;
        v16 = v12;
LABEL_10:
        ++v9;
        v10 = v14;
        v11 = v15;
        v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v20))
      goto LABEL_80;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v7))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      if (v23++ >= 9)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_27:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_80:
      v54 = 1;
      goto LABEL_81;
    }
    v32 = v24 >> 3;
    v33 = v59;
    if ((v58 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if (!v33)
          goto LABEL_65;
        if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_98;
          v38 = objc_alloc_init(GEOPDPlaceResponse);
          if (GEOPDPlaceResponseReadAllFrom((uint64_t)v38, (void *)v3, v11 & 1))
          {
            PBReaderRecallMark();
            v39 = *(void **)(a1 + 40);
            *(_QWORD *)(a1 + 40) = v38;
            goto LABEL_64;
          }

          goto LABEL_98;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_98;
        v49 = 8 * *(_BYTE *)(a1 + 76);
        goto LABEL_75;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_65;
        *(_BYTE *)(a1 + 76) |= 1u;
        v43 = *v19;
        v44 = *(_QWORD *)(v3 + v43);
        if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(_QWORD *)(v3 + *v7))
        {
          v45 = *(_QWORD *)(*(_QWORD *)(v3 + *v21) + v44);
          *(_QWORD *)(v3 + v43) = v44 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v20) = 1;
          v45 = 0;
        }
        *(_QWORD *)(a1 + 56) = v45;
        goto LABEL_79;
      case 3:
        if (!v33)
          goto LABEL_65;
        if ((*(_BYTE *)(a1 + 76) & 0x20) == 0)
        {
          PBReaderReadString();
          v46 = objc_claimAutoreleasedReturnValue();
          v47 = 48;
          goto LABEL_63;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_98;
        v49 = 4 * *(_BYTE *)(a1 + 76);
        goto LABEL_75;
      case 4:
        if (!v33)
          goto LABEL_65;
        if ((*(_BYTE *)(a1 + 76) & 4) == 0)
        {
          PBReaderReadString();
          v46 = objc_claimAutoreleasedReturnValue();
          v47 = 24;
          goto LABEL_63;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_98;
        v49 = 32 * *(_BYTE *)(a1 + 76);
        goto LABEL_75;
      case 5:
        if (!v33)
          goto LABEL_65;
        if ((*(_BYTE *)(a1 + 76) & 8) == 0)
        {
          PBReaderReadString();
          v46 = objc_claimAutoreleasedReturnValue();
          v47 = 32;
LABEL_63:
          v39 = *(void **)(a1 + v47);
          *(_QWORD *)(a1 + v47) = v46;
LABEL_64:

          --v9;
LABEL_76:
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
LABEL_79:
          if (!(v57 & 1 | (v9 != 0)))
            goto LABEL_80;
          continue;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v49 = 16 * *(_BYTE *)(a1 + 76);
LABEL_75:
          v9 += v49 >> 7;
          goto LABEL_76;
        }
LABEL_98:
        v54 = 0;
        v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_81:
        v55 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
        if ((v56 & 1) != 0)
LABEL_82:
          *(_BYTE *)(a1 + v55[778]) |= 2u;
        if (v59 & 1 | ((v54 & 1) == 0))
        {
          *(_BYTE *)(a1 + v55[778]) |= 0x10u;
          *(_BYTE *)(a1 + v55[778]) |= 0x20u;
          *(_BYTE *)(a1 + v55[778]) |= 4u;
          *(_BYTE *)(a1 + v55[778]) |= 8u;
        }
        else if (v18)
        {
          while (1)
          {
            v50 = *v18++;
            v51 = 16;
            switch(v50)
            {
              case 0:
                goto LABEL_91;
              case 1:
                goto LABEL_90;
              case 3:
                v51 = 32;
                goto LABEL_90;
              case 4:
                v51 = 4;
                goto LABEL_90;
              case 5:
                v51 = 8;
LABEL_90:
                *(_BYTE *)(a1 + v55[778]) |= v51;
                break;
              default:
                continue;
            }
          }
        }
LABEL_91:
        if (v54)
          v3 = *(_BYTE *)(v3 + *v20) == 0;
        else
          v3 = 0;
        if ((v59 & 1) != 0)
        {
          v52 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v56 & 1) == 0 || (*(_BYTE *)(a1 + 76) & 2) != 0)
        {
LABEL_65:
          v48 = PBReaderSkipValueWithTag();
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v20 = (int *)MEMORY[0x1E0D82BC8];
          if ((v48 & 1) == 0)
          {
            v54 = 0;
            goto LABEL_81;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v41 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v40;

          }
          v42 = PBUnknownFieldAdd();
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          if (!v42)
          {
            v54 = 0;
            v55 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
            goto LABEL_82;
          }
        }
        goto LABEL_79;
    }
  }
}

void sub_1894B0594(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894B06D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894B0814(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894B0F10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCachedCategorySuggestionsPlaceResponseReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOCachedCategorySuggestionsPlaceResponseReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 64) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 68) = objc_msgSend(v6, "length");
      Specified = GEOCachedCategorySuggestionsPlaceResponseReadSpecified(a1, (unint64_t)v6, (int *)&GEOCachedCategorySuggestionsPlaceResponseReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_1894B1088(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894B1504(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894B18F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894B1CC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCameraFrameReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int *v33;
  _BOOL8 v34;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            *(_BYTE *)(a1 + 64) |= 2u;
            v18 = *v4;
            v19 = *(_QWORD *)&v3[v18];
            if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v19);
              *(_QWORD *)&v3[v18] = v19 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v33 = &OBJC_IVAR___GEOCameraFrame__latitude;
            goto LABEL_54;
          case 2u:
            *(_BYTE *)(a1 + 64) |= 4u;
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v24);
              *(_QWORD *)&v3[v23] = v24 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v33 = &OBJC_IVAR___GEOCameraFrame__longitude;
            goto LABEL_54;
          case 3u:
            *(_BYTE *)(a1 + 64) |= 1u;
            v25 = *v4;
            v26 = *(_QWORD *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v26);
              *(_QWORD *)&v3[v25] = v26 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v33 = &OBJC_IVAR___GEOCameraFrame__altitude;
            goto LABEL_54;
          case 4u:
            *(_BYTE *)(a1 + 64) |= 0x20u;
            v27 = *v4;
            v28 = *(_QWORD *)&v3[v27];
            if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v28);
              *(_QWORD *)&v3[v27] = v28 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v33 = &OBJC_IVAR___GEOCameraFrame__yaw;
            goto LABEL_54;
          case 5u:
            *(_BYTE *)(a1 + 64) |= 8u;
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v30);
              *(_QWORD *)&v3[v29] = v30 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v33 = &OBJC_IVAR___GEOCameraFrame__pitch;
            goto LABEL_54;
          case 6u:
            *(_BYTE *)(a1 + 64) |= 0x10u;
            v31 = *v4;
            v32 = *(_QWORD *)&v3[v31];
            if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v32);
              *(_QWORD *)&v3[v31] = v32 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v33 = &OBJC_IVAR___GEOCameraFrame__roll;
LABEL_54:
            *(_QWORD *)(a1 + *v33) = v20;
            break;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v21 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v22 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v21;

            }
            if ((PBUnknownFieldAdd() & 1) == 0)
              goto LABEL_57;
            break;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v34 = v3[*v6] == 0;
  }
  else
  {
LABEL_57:
    v34 = 0;
  }
  objc_sync_exit(v3);

  return v34;
}

void sub_1894B2B10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCameraFrameReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOCameraFrameReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894B2B70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCameraFrameIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
          if (v16 != 1)
            goto LABEL_28;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && (v20 = v19 + 8, v20 <= *(_QWORD *)&a1[*v3]))
            *(_QWORD *)&a1[v18] = v20;
          else
            a1[v14] = 1;
          goto LABEL_25;
        default:
          if (!PBReaderSkipValueWithTag())
          {
LABEL_28:
            v21 = 0;
            goto LABEL_27;
          }
LABEL_25:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_26;
          break;
      }
    }
  }
LABEL_26:
  v21 = a1[*v4] == 0;
LABEL_27:
  PBReaderRecallMark();
  return v21;
}

BOOL GEOClientMetricsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  unint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  GEOClientNetworkMetrics *v31;
  void *v32;
  id v33;
  void *v34;
  _BOOL8 v35;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v17 = v11++ >= 9;
          if (v17)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        v20 = v12 >> 3;
        if ((v12 >> 3) == 3)
        {
          *(_BYTE *)(a1 + 36) |= 1u;
          v28 = *v6;
          v29 = *(_QWORD *)&v5[v28];
          if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)&v5[*v7])
          {
            v30 = *(_QWORD *)(*(_QWORD *)&v5[*v9] + v29);
            *(_QWORD *)&v5[v28] = v29 + 8;
          }
          else
          {
            v5[*v8] = 1;
            v30 = 0;
          }
          *(_QWORD *)(a1 + 24) = v30;
        }
        else if ((_DWORD)v20 == 2)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_48;
          v31 = objc_alloc_init(GEOClientNetworkMetrics);
          if (!GEOClientNetworkMetricsReadAllFrom((uint64_t)v31, v5, a3))
          {

            goto LABEL_48;
          }
          PBReaderRecallMark();
          v32 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v31;

        }
        else if ((_DWORD)v20 == 1)
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (1)
          {
            v24 = *v6;
            v25 = *(_QWORD *)&v5[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&v5[*v7])
              break;
            v27 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v25);
            *(_QWORD *)&v5[v24] = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if ((v27 & 0x80) == 0)
              goto LABEL_40;
            v21 += 7;
            v17 = v22++ >= 9;
            if (v17)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          v5[*v8] = 1;
LABEL_40:
          if (v5[*v8])
            LODWORD(v23) = 0;
LABEL_42:
          *(_DWORD *)(a1 + 32) = v23;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v33 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v34 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v33;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_48;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v35 = v5[*v8] == 0;
  }
  else
  {
LABEL_48:
    v35 = 0;
  }
  objc_sync_exit(v5);

  return v35;
}

void sub_1894B4204(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOClientMetricsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOClientMetricsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894B4264(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOClientMetricsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BOOL8 v28;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      v18 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v16 != 1)
          goto LABEL_44;
        v25 = *v2;
        v26 = *(_QWORD *)&a1[v25];
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && (v27 = v26 + 8, v27 <= *(_QWORD *)&a1[*v3]))
          *(_QWORD *)&a1[v25] = v27;
        else
          a1[v14] = 1;
      }
      else if ((_DWORD)v18 == 2)
      {
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOClientNetworkMetricsIsValid(a1))
        {
LABEL_44:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((_DWORD)v18 == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_44;
        v19 = 0;
        while (1)
        {
          v20 = *v2;
          v21 = *(_QWORD *)&a1[v20];
          v22 = v21 + 1;
          if (v21 == -1 || v22 > *(_QWORD *)&a1[*v3])
            break;
          v23 = *(char *)(*(_QWORD *)&a1[*v5] + v21);
          *(_QWORD *)&a1[v20] = v22;
          if (v23 < 0 && v19++ <= 8)
            continue;
          goto LABEL_41;
        }
        a1[*v4] = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_44;
      }
LABEL_41:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v28 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v28;
}

BOOL GEOClientNetworkMetricsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  _BOOL8 v47;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_78;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              goto LABEL_68;
            v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0)
            {
              v23 = v18++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_70;
          }
        case 2u:
          if (v16 != 2)
            goto LABEL_78;
LABEL_58:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_78:
          PBReaderRecallMark();
          return 0;
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_78;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_68;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v23 = v27++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_70;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_78;
          v32 = 0;
          while (1)
          {
            v33 = *v2;
            v34 = *(_QWORD *)&a1[v33];
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
              goto LABEL_68;
            v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
            *(_QWORD *)&a1[v33] = v35;
            if (v36 < 0)
            {
              v23 = v32++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_70;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_78;
          v37 = 0;
          while (1)
          {
            v38 = *v2;
            v39 = *(_QWORD *)&a1[v38];
            v40 = v39 + 1;
            if (v39 == -1 || v40 > *(_QWORD *)&a1[*v3])
              goto LABEL_68;
            v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
            *(_QWORD *)&a1[v38] = v40;
            if (v41 < 0)
            {
              v23 = v37++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_70;
          }
        default:
          switch((v8 >> 3))
          {
            case 0x14u:
            case 0x15u:
              if (v16 != 1)
                goto LABEL_78;
              v24 = *v2;
              v25 = *(_QWORD *)&a1[v24];
              if (v25 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_69;
              v26 = v25 + 8;
              if (v26 > *(_QWORD *)&a1[*v3])
                goto LABEL_69;
              *(_QWORD *)&a1[v24] = v26;
              continue;
            case 0x16u:
              if ((v8 & 7) != 0)
                goto LABEL_78;
              v42 = 0;
              break;
            case 0x17u:
              if (v16 != 2 || !PBReaderPlaceMark() || !GEOClientNetworkTransactionMetricsIsValid(a1))
                goto LABEL_78;
              PBReaderRecallMark();
              continue;
            default:
              goto LABEL_58;
          }
          break;
      }
      while (1)
      {
        v43 = *v2;
        v44 = *(_QWORD *)&a1[v43];
        v45 = v44 + 1;
        if (v44 == -1 || v45 > *(_QWORD *)&a1[*v3])
          break;
        v46 = *(char *)(*(_QWORD *)&a1[*v5] + v44);
        *(_QWORD *)&a1[v43] = v45;
        if (v46 < 0)
        {
          v23 = v42++ > 8;
          if (!v23)
            continue;
        }
        goto LABEL_70;
      }
LABEL_68:
      v14 = *v4;
LABEL_69:
      a1[v14] = 1;
LABEL_70:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v47 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v47;
}

void sub_1894B4ED4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOClientNetworkMetricsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  id v68;
  void *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  GEOClientNetworkTransactionMetrics *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  __int16 v85;
  void *v86;
  int v88;
  char v89;
  char v90;
  char v91;
  char v92;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (HIBYTE(*(unsigned __int16 *)(a1 + 88)) & 1)
      + ((*(unsigned __int16 *)(a1 + 88) >> 9) & 1)
      + ((*(unsigned __int16 *)(a1 + 88) >> 7) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 != 0;
        v15 = v14 | v10;
        v89 = v14 & ~(_BYTE)v10 | v7;
        v91 = v14 | v10 | v89;
        if ((((v14 | v10) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v92 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
        v20 = (int *)MEMORY[0x1E0D82BB8];
        v90 = v14 | v10;
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_133;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v17;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v23 = 0;
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_133:
      v88 = 1;
      goto LABEL_134;
    }
    v31 = v23 >> 3;
    v32 = v15;
    if ((v92 & 1) == 0)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_102;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_WORD *)(a1 + v19[803]) |= 4u;
        while (2)
        {
          v40 = *v17;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v41);
            *(_QWORD *)(v3 + v40) = v42;
            v39 |= (unint64_t)(v43 & 0x7F) << v37;
            if (v43 < 0)
            {
              v37 += 7;
              v28 = v38++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_107;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_107:
        v81 = 68;
        goto LABEL_124;
      case 2:
        if (!v32)
          goto LABEL_102;
        if ((*(_WORD *)(a1 + v19[803]) & 0x100) == 0)
        {
          PBReaderReadString();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v47;

          --v9;
          goto LABEL_101;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_153;
        v19 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
        v9 += *(unsigned __int16 *)(a1 + 88) << 23 >> 31;
        v15 = v90;
        v18 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_132;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_102;
        v49 = 0;
        v50 = 0;
        v39 = 0;
        *(_WORD *)(a1 + v19[803]) |= 0x10u;
        while (2)
        {
          v51 = *v17;
          v52 = *(_QWORD *)(v3 + v51);
          v53 = v52 + 1;
          if (v52 == -1 || v53 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v52);
            *(_QWORD *)(v3 + v51) = v53;
            v39 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              v28 = v50++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_111;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_111:
        v81 = 76;
        goto LABEL_124;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_102;
        v55 = 0;
        v56 = 0;
        v39 = 0;
        *(_WORD *)(a1 + v19[803]) |= 0x20u;
        while (2)
        {
          v57 = *v17;
          v58 = *(_QWORD *)(v3 + v57);
          v59 = v58 + 1;
          if (v58 == -1 || v59 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v60 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v58);
            *(_QWORD *)(v3 + v57) = v59;
            v39 |= (unint64_t)(v60 & 0x7F) << v55;
            if (v60 < 0)
            {
              v55 += 7;
              v28 = v56++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_115;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_115:
        v81 = 80;
        goto LABEL_124;
      case 5:
        if ((v8 & 1) != 0)
        {
          v61 = 0;
          v62 = 0;
          v63 = 0;
          *(_WORD *)(a1 + v19[803]) |= 0x40u;
          while (1)
          {
            v64 = *v17;
            v65 = *(_QWORD *)(v3 + v64);
            v66 = v65 + 1;
            if (v65 == -1 || v66 > *(_QWORD *)(v3 + *v6))
              break;
            v67 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v65);
            *(_QWORD *)(v3 + v64) = v66;
            v63 |= (unint64_t)(v67 & 0x7F) << v61;
            if ((v67 & 0x80) == 0)
              goto LABEL_117;
            v61 += 7;
            v28 = v62++ >= 9;
            if (v28)
            {
              v63 = 0;
              goto LABEL_119;
            }
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_117:
          if (*(_BYTE *)(v3 + *v18))
            v63 = 0;
LABEL_119:
          *(_BYTE *)(a1 + 84) = v63 != 0;
        }
        else
        {
LABEL_102:
          v80 = PBReaderSkipValueWithTag();
          v19 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v90;
          if ((v80 & 1) == 0)
          {
            v88 = 0;
            goto LABEL_134;
          }
        }
        goto LABEL_132;
      default:
        switch((int)v31)
        {
          case 20:
            if ((v8 & 1) == 0)
              goto LABEL_102;
            *(_WORD *)(a1 + v19[803]) |= 2u;
            v44 = *v17;
            v45 = *(_QWORD *)(v3 + v44);
            if (v45 <= 0xFFFFFFFFFFFFFFF7 && v45 + 8 <= *(_QWORD *)(v3 + *v6))
            {
              v46 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v45);
              *(_QWORD *)(v3 + v44) = v45 + 8;
            }
            else
            {
              *(_BYTE *)(v3 + *v18) = 1;
              v46 = 0;
            }
            v82 = 32;
            goto LABEL_131;
          case 21:
            if ((v8 & 1) == 0)
              goto LABEL_102;
            *(_WORD *)(a1 + v19[803]) |= 1u;
            v71 = *v17;
            v72 = *(_QWORD *)(v3 + v71);
            if (v72 <= 0xFFFFFFFFFFFFFFF7 && v72 + 8 <= *(_QWORD *)(v3 + *v6))
            {
              v46 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v72);
              *(_QWORD *)(v3 + v71) = v72 + 8;
            }
            else
            {
              *(_BYTE *)(v3 + *v18) = 1;
              v46 = 0;
            }
            v82 = 24;
LABEL_131:
            *(_QWORD *)(a1 + v82) = v46;
            goto LABEL_132;
          case 22:
            if ((v8 & 1) == 0)
              goto LABEL_102;
            v73 = 0;
            v74 = 0;
            v39 = 0;
            *(_WORD *)(a1 + v19[803]) |= 8u;
            while (2)
            {
              v75 = *v17;
              v76 = *(_QWORD *)(v3 + v75);
              v77 = v76 + 1;
              if (v76 == -1 || v77 > *(_QWORD *)(v3 + *v6))
              {
                *(_BYTE *)(v3 + *v18) = 1;
              }
              else
              {
                v78 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v76);
                *(_QWORD *)(v3 + v75) = v77;
                v39 |= (unint64_t)(v78 & 0x7F) << v73;
                if (v78 < 0)
                {
                  v73 += 7;
                  v28 = v74++ >= 9;
                  if (v28)
                  {
                    LODWORD(v39) = 0;
                    goto LABEL_123;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v18))
              LODWORD(v39) = 0;
LABEL_123:
            v81 = 72;
LABEL_124:
            *(_DWORD *)(a1 + v81) = v39;
            goto LABEL_132;
          case 23:
            if (!v32 || (*(_WORD *)(a1 + v19[803]) & 0x200) != 0)
              goto LABEL_102;
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_153;
            v79 = objc_alloc_init(GEOClientNetworkTransactionMetrics);
            if (GEOClientNetworkTransactionMetricsReadAllFrom((uint64_t)v79, (void *)v3))
            {
              PBReaderRecallMark();
              -[GEOClientNetworkMetrics _addNoFlagsTransactionMetrics:](a1, v79);

LABEL_101:
              v15 = v90;
              v18 = (int *)MEMORY[0x1E0D82BC8];
              v19 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
LABEL_132:
              if (!(v91 & 1 | (v9 != 0)))
                goto LABEL_133;
              continue;
            }

LABEL_153:
            v88 = 0;
            v15 = v90;
            v18 = (int *)MEMORY[0x1E0D82BC8];
            v19 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
LABEL_134:
            if ((v89 & 1) != 0)
LABEL_135:
              *(_WORD *)(a1 + v19[803]) |= 0x80u;
            if (v15 & 1 | ((v88 & 1) == 0))
            {
              *(_WORD *)(a1 + v19[803]) |= 0x100u;
              *(_WORD *)(a1 + v19[803]) |= 0x200u;
              goto LABEL_146;
            }
            if (v16)
            {
              while (2)
              {
                while (1)
                {
                  v84 = *v16++;
                  v83 = v84;
                  if (v84 == 2)
                    break;
                  if (v83 == 23)
                  {
                    v85 = 512;
                    goto LABEL_145;
                  }
                  if (!v83)
                    goto LABEL_146;
                }
                v85 = 256;
LABEL_145:
                *(_WORD *)(a1 + v19[803]) |= v85;
                continue;
              }
            }
LABEL_146:
            if (v88)
            {
              v3 = *(_BYTE *)(v3 + *v18) == 0;
              if ((v15 & 1) == 0)
                return v3;
LABEL_150:
              v86 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;

            }
            else
            {
              v3 = 0;
              if ((v15 & 1) != 0)
                goto LABEL_150;
            }
            return v3;
          default:
            if ((v89 & 1) == 0 || (*(_WORD *)(a1 + v19[803]) & 0x80) != 0)
              goto LABEL_102;
            if (!*(_QWORD *)(a1 + 16))
            {
              v68 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v69 = *(void **)(a1 + 16);
              *(_QWORD *)(a1 + 16) = v68;

            }
            v70 = PBUnknownFieldAdd();
            v15 = v90;
            v18 = (int *)MEMORY[0x1E0D82BC8];
            v19 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
            if (v70)
              goto LABEL_132;
            v88 = 0;
            goto LABEL_135;
        }
    }
  }
}

void _GEOClientNetworkMetricsCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 48);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOClientNetworkMetricsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOClientNetworkMetricsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOClientNetworkMetricsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOClientNetworkMetricsReadAllFrom_initialTag;
  Specified = GEOClientNetworkMetricsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOClientNetworkMetricsCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1894B6990(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOClientNetworkMetricsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOClientNetworkMetricsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894B69F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOClientNetworkTransactionMetricsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  _BOOL8 v57;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
          if (v16 != 1)
            goto LABEL_86;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_82;
          v20 = v19 + 8;
          if (v20 > *(_QWORD *)&a1[*v3])
            goto LABEL_82;
          *(_QWORD *)&a1[v18] = v20;
          continue;
        case 0xCu:
          if ((v8 & 7) != 0)
            goto LABEL_86;
          v21 = 0;
          while (1)
          {
            v22 = *v2;
            v23 = *(_QWORD *)&a1[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&a1[*v3])
              goto LABEL_81;
            v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
            *(_QWORD *)&a1[v22] = v24;
            if (v25 < 0)
            {
              v26 = v21++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_83;
          }
        case 0xDu:
          if ((v8 & 7) != 0)
            goto LABEL_86;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_81;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v26 = v27++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_83;
          }
        case 0xEu:
          if ((v8 & 7) != 0)
            goto LABEL_86;
          v32 = 0;
          while (1)
          {
            v33 = *v2;
            v34 = *(_QWORD *)&a1[v33];
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
              goto LABEL_81;
            v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
            *(_QWORD *)&a1[v33] = v35;
            if (v36 < 0)
            {
              v26 = v32++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_83;
          }
        case 0xFu:
          if ((v8 & 7) != 0)
            goto LABEL_86;
          v37 = 0;
          while (1)
          {
            v38 = *v2;
            v39 = *(_QWORD *)&a1[v38];
            v40 = v39 + 1;
            if (v39 == -1 || v40 > *(_QWORD *)&a1[*v3])
              goto LABEL_81;
            v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
            *(_QWORD *)&a1[v38] = v40;
            if (v41 < 0)
            {
              v26 = v37++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_83;
          }
        case 0x10u:
          if ((v8 & 7) != 0)
            goto LABEL_86;
          v42 = 0;
          while (1)
          {
            v43 = *v2;
            v44 = *(_QWORD *)&a1[v43];
            v45 = v44 + 1;
            if (v44 == -1 || v45 > *(_QWORD *)&a1[*v3])
              goto LABEL_81;
            v46 = *(char *)(*(_QWORD *)&a1[*v5] + v44);
            *(_QWORD *)&a1[v43] = v45;
            if (v46 < 0)
            {
              v26 = v42++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_83;
          }
        case 0x11u:
          if ((v8 & 7) != 0)
            goto LABEL_86;
          v47 = 0;
          while (1)
          {
            v48 = *v2;
            v49 = *(_QWORD *)&a1[v48];
            v50 = v49 + 1;
            if (v49 == -1 || v50 > *(_QWORD *)&a1[*v3])
              goto LABEL_81;
            v51 = *(char *)(*(_QWORD *)&a1[*v5] + v49);
            *(_QWORD *)&a1[v48] = v50;
            if (v51 < 0)
            {
              v26 = v47++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_83;
          }
        case 0x12u:
          if ((v8 & 7) != 0)
            goto LABEL_86;
          v52 = 0;
          break;
        default:
          if (PBReaderSkipValueWithTag())
            continue;
LABEL_86:
          v57 = 0;
          goto LABEL_85;
      }
      while (1)
      {
        v53 = *v2;
        v54 = *(_QWORD *)&a1[v53];
        v55 = v54 + 1;
        if (v54 == -1 || v55 > *(_QWORD *)&a1[*v3])
          break;
        v56 = *(char *)(*(_QWORD *)&a1[*v5] + v54);
        *(_QWORD *)&a1[v53] = v55;
        if (v56 < 0)
        {
          v26 = v52++ > 8;
          if (!v26)
            continue;
        }
        goto LABEL_83;
      }
LABEL_81:
      v14 = *v4;
LABEL_82:
      a1[v14] = 1;
LABEL_83:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v57 = a1[*v4] == 0;
LABEL_85:
  PBReaderRecallMark();
  return v57;
}

BOOL GEOClientNetworkMetricsIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = (*(_WORD *)(a1 + 88) & 0x700) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_1894B7418(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894B7B1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOClientNetworkTransactionMetricsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  _BOOL8 v94;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            *(_DWORD *)(a1 + 120) |= 0x10u;
            v18 = *v4;
            v19 = *(_QWORD *)&v3[v18];
            if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v19);
              *(_QWORD *)&v3[v18] = v19 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v93 = 48;
            goto LABEL_158;
          case 2u:
            *(_DWORD *)(a1 + 120) |= 8u;
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v24);
              *(_QWORD *)&v3[v23] = v24 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v93 = 40;
            goto LABEL_158;
          case 3u:
            *(_DWORD *)(a1 + 120) |= 4u;
            v25 = *v4;
            v26 = *(_QWORD *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v26);
              *(_QWORD *)&v3[v25] = v26 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v93 = 32;
            goto LABEL_158;
          case 4u:
            *(_DWORD *)(a1 + 120) |= 2u;
            v27 = *v4;
            v28 = *(_QWORD *)&v3[v27];
            if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v28);
              *(_QWORD *)&v3[v27] = v28 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v93 = 24;
            goto LABEL_158;
          case 5u:
            *(_DWORD *)(a1 + 120) |= 0x400u;
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v30);
              *(_QWORD *)&v3[v29] = v30 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v93 = 96;
            goto LABEL_158;
          case 6u:
            *(_DWORD *)(a1 + 120) |= 0x200u;
            v31 = *v4;
            v32 = *(_QWORD *)&v3[v31];
            if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v32);
              *(_QWORD *)&v3[v31] = v32 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v93 = 88;
            goto LABEL_158;
          case 7u:
            *(_DWORD *)(a1 + 120) |= 1u;
            v33 = *v4;
            v34 = *(_QWORD *)&v3[v33];
            if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v34);
              *(_QWORD *)&v3[v33] = v34 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v93 = 16;
            goto LABEL_158;
          case 8u:
            *(_DWORD *)(a1 + 120) |= 0x40u;
            v35 = *v4;
            v36 = *(_QWORD *)&v3[v35];
            if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v36);
              *(_QWORD *)&v3[v35] = v36 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v93 = 64;
            goto LABEL_158;
          case 9u:
            *(_DWORD *)(a1 + 120) |= 0x20u;
            v37 = *v4;
            v38 = *(_QWORD *)&v3[v37];
            if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v38);
              *(_QWORD *)&v3[v37] = v38 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v93 = 56;
            goto LABEL_158;
          case 0xAu:
            *(_DWORD *)(a1 + 120) |= 0x100u;
            v39 = *v4;
            v40 = *(_QWORD *)&v3[v39];
            if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v40);
              *(_QWORD *)&v3[v39] = v40 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v93 = 80;
            goto LABEL_158;
          case 0xBu:
            *(_DWORD *)(a1 + 120) |= 0x80u;
            v41 = *v4;
            v42 = *(_QWORD *)&v3[v41];
            if (v42 <= 0xFFFFFFFFFFFFFFF7 && v42 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v42);
              *(_QWORD *)&v3[v41] = v42 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v93 = 72;
LABEL_158:
            *(_QWORD *)(a1 + v93) = v20;
            continue;
          case 0xCu:
            v43 = 0;
            v44 = 0;
            v45 = 0;
            *(_DWORD *)(a1 + 120) |= 0x1000u;
            while (2)
            {
              v46 = *v4;
              v47 = *(_QWORD *)&v3[v46];
              v48 = v47 + 1;
              if (v47 == -1 || v48 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v49 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v47);
                *(_QWORD *)&v3[v46] = v48;
                v45 |= (unint64_t)(v49 & 0x7F) << v43;
                if (v49 < 0)
                {
                  v43 += 7;
                  v15 = v44++ >= 9;
                  if (v15)
                  {
                    LODWORD(v45) = 0;
                    goto LABEL_109;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v45) = 0;
LABEL_109:
            v90 = 108;
            goto LABEL_130;
          case 0xDu:
            v50 = 0;
            v51 = 0;
            v52 = 0;
            *(_DWORD *)(a1 + 120) |= 0x8000u;
            while (2)
            {
              v53 = *v4;
              v54 = *(_QWORD *)&v3[v53];
              v55 = v54 + 1;
              if (v54 == -1 || v55 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v56 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v54);
                *(_QWORD *)&v3[v53] = v55;
                v52 |= (unint64_t)(v56 & 0x7F) << v50;
                if (v56 < 0)
                {
                  v50 += 7;
                  v15 = v51++ >= 9;
                  if (v15)
                  {
                    v52 = 0;
                    goto LABEL_113;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v52 = 0;
LABEL_113:
            v91 = v52 != 0;
            v92 = 117;
            goto LABEL_135;
          case 0xEu:
            v57 = 0;
            v58 = 0;
            v59 = 0;
            *(_DWORD *)(a1 + 120) |= 0x10000u;
            while (2)
            {
              v60 = *v4;
              v61 = *(_QWORD *)&v3[v60];
              v62 = v61 + 1;
              if (v61 == -1 || v62 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v63 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v61);
                *(_QWORD *)&v3[v60] = v62;
                v59 |= (unint64_t)(v63 & 0x7F) << v57;
                if (v63 < 0)
                {
                  v57 += 7;
                  v15 = v58++ >= 9;
                  if (v15)
                  {
                    v59 = 0;
                    goto LABEL_117;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v59 = 0;
LABEL_117:
            v91 = v59 != 0;
            v92 = 118;
            goto LABEL_135;
          case 0xFu:
            v64 = 0;
            v65 = 0;
            v45 = 0;
            *(_DWORD *)(a1 + 120) |= 0x2000u;
            while (2)
            {
              v66 = *v4;
              v67 = *(_QWORD *)&v3[v66];
              v68 = v67 + 1;
              if (v67 == -1 || v68 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v69 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v67);
                *(_QWORD *)&v3[v66] = v68;
                v45 |= (unint64_t)(v69 & 0x7F) << v64;
                if (v69 < 0)
                {
                  v64 += 7;
                  v15 = v65++ >= 9;
                  if (v15)
                  {
                    LODWORD(v45) = 0;
                    goto LABEL_121;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v45) = 0;
LABEL_121:
            v90 = 112;
            goto LABEL_130;
          case 0x10u:
            v70 = 0;
            v71 = 0;
            v72 = 0;
            *(_DWORD *)(a1 + 120) |= 0x4000u;
            while (2)
            {
              v73 = *v4;
              v74 = *(_QWORD *)&v3[v73];
              v75 = v74 + 1;
              if (v74 == -1 || v75 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v76 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v74);
                *(_QWORD *)&v3[v73] = v75;
                v72 |= (unint64_t)(v76 & 0x7F) << v70;
                if (v76 < 0)
                {
                  v70 += 7;
                  v15 = v71++ >= 9;
                  if (v15)
                  {
                    v72 = 0;
                    goto LABEL_125;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v72 = 0;
LABEL_125:
            v91 = v72 != 0;
            v92 = 116;
            goto LABEL_135;
          case 0x11u:
            v77 = 0;
            v78 = 0;
            v45 = 0;
            *(_DWORD *)(a1 + 120) |= 0x800u;
            while (2)
            {
              v79 = *v4;
              v80 = *(_QWORD *)&v3[v79];
              v81 = v80 + 1;
              if (v80 == -1 || v81 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v82 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v80);
                *(_QWORD *)&v3[v79] = v81;
                v45 |= (unint64_t)(v82 & 0x7F) << v77;
                if (v82 < 0)
                {
                  v77 += 7;
                  v15 = v78++ >= 9;
                  if (v15)
                  {
                    LODWORD(v45) = 0;
                    goto LABEL_129;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v45) = 0;
LABEL_129:
            v90 = 104;
LABEL_130:
            *(_DWORD *)(a1 + v90) = v45;
            continue;
          case 0x12u:
            v83 = 0;
            v84 = 0;
            v85 = 0;
            *(_DWORD *)(a1 + 120) |= 0x20000u;
            break;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v21 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v22 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v21;

            }
            if (!PBUnknownFieldAdd())
              goto LABEL_161;
            continue;
        }
        while (1)
        {
          v86 = *v4;
          v87 = *(_QWORD *)&v3[v86];
          v88 = v87 + 1;
          if (v87 == -1 || v88 > *(_QWORD *)&v3[*v5])
            break;
          v89 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v87);
          *(_QWORD *)&v3[v86] = v88;
          v85 |= (unint64_t)(v89 & 0x7F) << v83;
          if ((v89 & 0x80) == 0)
            goto LABEL_132;
          v83 += 7;
          v15 = v84++ >= 9;
          if (v15)
          {
            v85 = 0;
            goto LABEL_134;
          }
        }
        v3[*v6] = 1;
LABEL_132:
        if (v3[*v6])
          v85 = 0;
LABEL_134:
        v91 = v85 != 0;
        v92 = 119;
LABEL_135:
        *(_BYTE *)(a1 + v92) = v91;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v94 = v3[*v6] == 0;
  }
  else
  {
LABEL_161:
    v94 = 0;
  }
  objc_sync_exit(v3);

  return v94;
}

void sub_1894BA178(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOClientNetworkTransactionMetricsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOClientNetworkTransactionMetricsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894BA1D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894BB7C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCollectionPlaceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  id v44;
  void *v45;
  int v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  GEOLatLng *v56;
  void *v57;
  char v58;
  char v59;
  int v60;
  char v61;
  void *v62;
  int v64;
  int *v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 72)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFBFFFDFFFCLL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v66 = v16 & ~(_BYTE)v11 | v7;
        v67 = v8;
        v68 = v16 | v11 | v66;
        if ((((v16 | v11) | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v69 = (v17 == 0) | v16 | v11;
        v70 = v16 | v11;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v7;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v9;
        v7 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_93;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_93:
      v64 = 1;
      goto LABEL_94;
    }
    v31 = v23 >> 3;
    v32 = v70;
    if ((v69 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v67 & 1) == 0)
          goto LABEL_74;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 72) |= 2u;
        while (1)
        {
          v40 = *v18;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v41);
          *(_QWORD *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0)
            goto LABEL_77;
          v37 += 7;
          v28 = v38++ >= 9;
          if (v28)
          {
            LODWORD(v39) = 0;
            goto LABEL_79;
          }
        }
        *(_BYTE *)(v3 + *v19) = 1;
LABEL_77:
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v39) = 0;
LABEL_79:
        *(_DWORD *)(a1 + 68) = v39;
        goto LABEL_92;
      case 2:
        if ((v67 & 1) == 0)
          goto LABEL_74;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        *(_BYTE *)(a1 + 72) |= 1u;
        while (2)
        {
          v50 = *v18;
          v51 = *(_QWORD *)(v3 + v50);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v51);
            *(_QWORD *)(v3 + v50) = v52;
            v49 |= (unint64_t)(v53 & 0x7F) << v47;
            if (v53 < 0)
            {
              v47 += 7;
              v28 = v48++ >= 9;
              if (v28)
              {
                v49 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v49 = 0;
LABEL_83:
        *(_QWORD *)(a1 + 40) = v49;
        goto LABEL_92;
      case 3:
        if (!v32)
          goto LABEL_74;
        if ((*(_BYTE *)(a1 + 72) & 8) == 0)
        {
          PBReaderReadString();
          v54 = objc_claimAutoreleasedReturnValue();
          v55 = 24;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_110;
        v59 = 16 * *(_BYTE *)(a1 + 72);
        goto LABEL_90;
      case 4:
        if (!v32)
          goto LABEL_74;
        if ((*(_BYTE *)(a1 + 72) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_110;
          v59 = 8 * *(_BYTE *)(a1 + 72);
LABEL_90:
          v9 += v59 >> 7;
          goto LABEL_91;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_110;
        v56 = objc_alloc_init(GEOLatLng);
        if (GEOLatLngReadAllFrom((uint64_t)v56, (void *)v3))
        {
          PBReaderRecallMark();
          v57 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v56;
LABEL_73:

          --v9;
LABEL_91:
          v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_92:
          if (!(v68 & 1 | (v9 != 0)))
            goto LABEL_93;
          continue;
        }

LABEL_110:
        v64 = 0;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_94:
        v65 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
        if ((v66 & 1) != 0)
LABEL_95:
          *(_BYTE *)(a1 + v65[838]) |= 4u;
        if (v70 & 1 | ((v64 & 1) == 0))
        {
          *(_BYTE *)(a1 + v65[838]) |= 8u;
          *(_BYTE *)(a1 + v65[838]) |= 0x10u;
          *(_BYTE *)(a1 + v65[838]) |= 0x20u;
        }
        else if (v17)
        {
          while (1)
          {
            v60 = *v17++;
            v61 = 8;
            switch(v60)
            {
              case 0:
                goto LABEL_103;
              case 3:
                goto LABEL_102;
              case 4:
                v61 = 16;
                goto LABEL_102;
              case 5:
                v61 = 32;
LABEL_102:
                *(_BYTE *)(a1 + v65[838]) |= v61;
                break;
              default:
                continue;
            }
          }
        }
LABEL_103:
        if (v64)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if ((v70 & 1) != 0)
        {
          v62 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 5:
        if (!v32)
          goto LABEL_74;
        if ((*(_BYTE *)(a1 + 72) & 0x20) == 0)
        {
          PBReaderReadString();
          v54 = objc_claimAutoreleasedReturnValue();
          v55 = 48;
LABEL_72:
          v57 = *(void **)(a1 + v55);
          *(_QWORD *)(a1 + v55) = v54;
          goto LABEL_73;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_110;
        v59 = 4 * *(_BYTE *)(a1 + 72);
        goto LABEL_90;
      default:
        if ((v66 & 1) == 0 || (*(_BYTE *)(a1 + 72) & 4) != 0)
        {
LABEL_74:
          v58 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v58 & 1) == 0)
          {
            v64 = 0;
            goto LABEL_94;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v44 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v45 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v44;

          }
          v46 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v46)
          {
            v64 = 0;
            v65 = &OBJC_IVAR___GEORPMerchantLookupContext__readerMarkLength;
            goto LABEL_95;
          }
        }
        goto LABEL_92;
    }
  }
}

void sub_1894BC044(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894BC188(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894BC8B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCollectionPlaceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOCollectionPlaceReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOCollectionPlaceReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOCollectionPlaceReadAllFrom_initialTag;
  Specified = GEOCollectionPlaceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1894BCA5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCollectionPlaceReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOCollectionPlaceReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894BCABC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCollectionPlaceIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  _BOOL8 v28;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_47;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_35;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_44;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_47;
          v23 = 0;
          break;
        case 3u:
          if (v15 == 2)
            goto LABEL_43;
          goto LABEL_47;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_47;
          PBReaderRecallMark();
          continue;
        case 5u:
          if (v15 == 2)
            goto LABEL_43;
          goto LABEL_47;
        default:
LABEL_43:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_47:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v24 = *v2;
        v25 = *(_QWORD *)&a1[v24];
        v26 = v25 + 1;
        if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
          break;
        v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
        *(_QWORD *)&a1[v24] = v26;
        if (v27 < 0)
        {
          v22 = v23++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_44;
      }
LABEL_35:
      a1[*v4] = 1;
LABEL_44:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v28 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v28;
}

void sub_1894BCF78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCollectionPlaceIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = (*(_BYTE *)(a1 + 72) & 0x78) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_1894BD344(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894BD6CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894BD948(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocationInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  char v42;
  int v43;
  char v44;
  void *v45;
  int v47;
  char v48;
  char v49;
  char v50;
  BOOL v51;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 1;
        v15 = v14 & ~(_BYTE)v7;
        v16 = v14 | v7;
        v48 = v15 | v8;
        v49 = v16 | v15 | v8;
        if (((v16 | v9) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v50 = (v17 == 0) | v16;
        v51 = v16;
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_65;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_65:
      v47 = 1;
      goto LABEL_66;
    }
    v31 = v23 >> 3;
    v32 = v51;
    if ((v50 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 == 3)
    {
      if (!v32)
        goto LABEL_55;
      if ((*(_BYTE *)(a1 + 60) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_81;
        v42 = *(_BYTE *)(a1 + 60) << 6;
        goto LABEL_63;
      }
      PBReaderReadString();
      v37 = objc_claimAutoreleasedReturnValue();
      v38 = 24;
      goto LABEL_48;
    }
    if ((_DWORD)v31 == 2)
      break;
    if ((_DWORD)v31 == 1)
    {
      if (!v32)
        goto LABEL_55;
      if ((*(_BYTE *)(a1 + 60) & 4) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_81;
        v42 = 32 * *(_BYTE *)(a1 + 60);
        goto LABEL_63;
      }
      PBReaderReadString();
      v37 = objc_claimAutoreleasedReturnValue();
      v38 = 32;
      goto LABEL_48;
    }
    if ((v48 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 1) != 0)
    {
LABEL_55:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_81;
      goto LABEL_64;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v41 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v40;

    }
    if (!PBUnknownFieldAdd())
    {
      v47 = 0;
      v19 = (int *)MEMORY[0x1E0D82BC8];
      goto LABEL_67;
    }
LABEL_64:
    v19 = (int *)MEMORY[0x1E0D82BC8];
    if (!(v49 & 1 | (v10 != 0)))
      goto LABEL_65;
  }
  if (!v32)
    goto LABEL_55;
  if ((*(_BYTE *)(a1 + 60) & 8) == 0)
  {
    PBReaderReadString();
    v37 = objc_claimAutoreleasedReturnValue();
    v38 = 40;
LABEL_48:
    v39 = *(void **)(a1 + v38);
    *(_QWORD *)(a1 + v38) = v37;

    --v10;
    goto LABEL_64;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v42 = 16 * *(_BYTE *)(a1 + 60);
LABEL_63:
    v10 += v42 >> 7;
    goto LABEL_64;
  }
LABEL_81:
  v47 = 0;
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_66:
  if ((v48 & 1) == 0)
    goto LABEL_68;
LABEL_67:
  *(_BYTE *)(a1 + 60) |= 1u;
LABEL_68:
  if (v51 || (v47 & 1) == 0)
  {
    *(_BYTE *)(a1 + 60) |= 4u;
    *(_BYTE *)(a1 + 60) |= 8u;
    *(_BYTE *)(a1 + 60) |= 2u;
  }
  else if (v17)
  {
    while (1)
    {
      v43 = *v17++;
      v44 = 4;
      switch(v43)
      {
        case 0:
          goto LABEL_75;
        case 1:
          goto LABEL_74;
        case 2:
          v44 = 8;
          goto LABEL_74;
        case 3:
          v44 = 2;
LABEL_74:
          *(_BYTE *)(a1 + 60) |= v44;
          break;
        default:
          continue;
      }
    }
  }
LABEL_75:
  if (v47)
    v3 = *(_BYTE *)(v3 + *v19) == 0;
  else
    v3 = 0;
  if (v51)
  {
    v45 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1894BDFBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894BE0FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894BE6F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocationInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLocationInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLocationInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLocationInfoReadAllFrom_initialTag;
  Specified = GEOLocationInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_1894BE880(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocationInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLocationInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894BE8E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocationInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  _BOOL8 v18;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_30;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_30;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        if (v15 != 2)
          goto LABEL_32;
LABEL_26:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_32;
        goto LABEL_29;
      }
      if ((_DWORD)v17 == 1)
      {
        if (v15 != 2)
          goto LABEL_32;
        goto LABEL_26;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_32:
        v18 = 0;
        goto LABEL_31;
      }
LABEL_29:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_30;
    }
    if (v15 != 2)
      goto LABEL_32;
    goto LABEL_26;
  }
LABEL_30:
  v18 = a1[*v4] == 0;
LABEL_31:
  PBReaderRecallMark();
  return v18;
}

void sub_1894BEC68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocationInfoIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = (*(_BYTE *)(a1 + 60) & 0x1E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_1894BEF38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894BF1A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894BF5B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemAddressBookAttributesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  id v44;
  void *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  void *v56;
  char v57;
  char v58;
  int v59;
  char v60;
  void *v61;
  int v63;
  int *v64;
  char v65;
  char v66;
  char v67;
  BOOL v68;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 76)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFBFFFALL) & 0xFF01FF01FF01FF01))+ ((*(_BYTE *)(a1 + 76) & 4) != 0));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 > 2;
        v15 = v14 & ~(_BYTE)v10 | v7;
        v16 = v14 | v10;
        v65 = v15;
        v66 = v16 | v15;
        if (((v16 | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v67 = (v17 == 0) | v16;
        v68 = v16;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_94;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_94:
      v63 = 1;
      goto LABEL_95;
    }
    v31 = v23 >> 3;
    v32 = v68;
    if ((v67 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_73;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 76) |= 1u;
        while (1)
        {
          v40 = *v18;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v41);
          *(_QWORD *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0)
            goto LABEL_76;
          v37 += 7;
          v28 = v38++ >= 9;
          if (v28)
          {
            LODWORD(v39) = 0;
            goto LABEL_78;
          }
        }
        *(_BYTE *)(v3 + *v19) = 1;
LABEL_76:
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v39) = 0;
LABEL_78:
        *(_DWORD *)(a1 + 68) = v39;
        goto LABEL_93;
      case 2:
        if (!v32)
          goto LABEL_73;
        if ((*(_BYTE *)(a1 + 76) & 0x20) == 0)
        {
          PBReaderReadString();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = 40;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_112;
        v58 = 4 * *(_BYTE *)(a1 + 76);
        goto LABEL_91;
      case 3:
        if (!v32)
          goto LABEL_73;
        if ((*(_BYTE *)(a1 + 76) & 0x40) == 0)
        {
          PBReaderReadString();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = 48;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_112;
        v58 = 2 * *(_BYTE *)(a1 + 76);
        goto LABEL_91;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_73;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        *(_BYTE *)(a1 + 76) |= 2u;
        while (2)
        {
          v52 = *v18;
          v53 = *(_QWORD *)(v3 + v52);
          v54 = v53 + 1;
          if (v53 == -1 || v54 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v53);
            *(_QWORD *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              v28 = v50++ >= 9;
              if (v28)
              {
                v51 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v51 = 0;
LABEL_82:
        *(_BYTE *)(a1 + 72) = v51 != 0;
        goto LABEL_93;
      case 5:
        if (!v32)
          goto LABEL_73;
        if ((*(_BYTE *)(a1 + 76) & 8) == 0)
        {
          PBReaderReadString();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = 24;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_112;
        v58 = 16 * *(_BYTE *)(a1 + 76);
        goto LABEL_91;
      case 6:
        if (!v32)
          goto LABEL_73;
        if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
        {
          PBReaderReadString();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = 32;
LABEL_72:
          v56 = *(void **)(a1 + v48);
          *(_QWORD *)(a1 + v48) = v47;

          --v9;
LABEL_92:
          v19 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_93;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v58 = 8 * *(_BYTE *)(a1 + 76);
LABEL_91:
          v9 += v58 >> 7;
          goto LABEL_92;
        }
LABEL_112:
        v63 = 0;
        v64 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_96:
        if ((v65 & 1) != 0)
LABEL_97:
          *(_BYTE *)(a1 + v64[509]) |= 4u;
        if (v68 || (v63 & 1) == 0)
        {
          *(_BYTE *)(a1 + v64[509]) |= 0x20u;
          *(_BYTE *)(a1 + v64[509]) |= 0x40u;
          *(_BYTE *)(a1 + v64[509]) |= 8u;
          *(_BYTE *)(a1 + v64[509]) |= 0x10u;
        }
        else if (v17)
        {
          while (1)
          {
            v59 = *v17++;
            v60 = 32;
            switch(v59)
            {
              case 0:
                goto LABEL_106;
              case 2:
                goto LABEL_105;
              case 3:
                v60 = 64;
                goto LABEL_105;
              case 5:
                v60 = 8;
                goto LABEL_105;
              case 6:
                v60 = 16;
LABEL_105:
                *(_BYTE *)(a1 + v64[509]) |= v60;
                break;
              default:
                continue;
            }
          }
        }
LABEL_106:
        if (v63)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if (v68)
        {
          v61 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v65 & 1) == 0 || (*(_BYTE *)(a1 + 76) & 4) != 0)
        {
LABEL_73:
          v57 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v57 & 1) == 0)
          {
            v63 = 0;
LABEL_95:
            v64 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
            goto LABEL_96;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v44 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v45 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v44;

          }
          v46 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v46)
          {
            v63 = 0;
            v64 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
            goto LABEL_97;
          }
        }
LABEL_93:
        if (!(v66 & 1 | (v9 != 0)))
          goto LABEL_94;
        continue;
    }
  }
}

void sub_1894BFE64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C0018(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C0154(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C0940(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemAddressBookAttributesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOMapItemAddressBookAttributesReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOMapItemAddressBookAttributesReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOMapItemAddressBookAttributesReadAllFrom_initialTag;
  Specified = GEOMapItemAddressBookAttributesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1894C0AC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemAddressBookAttributesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapItemAddressBookAttributesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894C0B28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemAddressBookAttributesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  _BOOL8 v28;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_47;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_39;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_44;
          }
        case 2u:
          if (v15 == 2)
            goto LABEL_43;
          goto LABEL_47;
        case 3u:
          if (v15 == 2)
            goto LABEL_43;
          goto LABEL_47;
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_47;
          v23 = 0;
          break;
        case 5u:
          if (v15 == 2)
            goto LABEL_43;
          goto LABEL_47;
        case 6u:
          if (v15 == 2)
            goto LABEL_43;
          goto LABEL_47;
        default:
LABEL_43:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_47:
          v28 = 0;
          goto LABEL_46;
      }
      while (1)
      {
        v24 = *v2;
        v25 = *(_QWORD *)&a1[v24];
        v26 = v25 + 1;
        if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
          break;
        v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
        *(_QWORD *)&a1[v24] = v26;
        if (v27 < 0)
        {
          v22 = v23++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_44;
      }
LABEL_39:
      a1[*v4] = 1;
LABEL_44:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v28 = a1[*v4] == 0;
LABEL_46:
  PBReaderRecallMark();
  return v28;
}

void sub_1894C0FE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemAddressBookAttributesIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = *(unsigned __int8 *)(a1 + 76) > 7u;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_1894C13C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C17B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C1A34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemClientAttributesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEOMapItemAddressBookAttributes *v39;
  uint64_t v40;
  id v41;
  void *v42;
  int v43;
  void *v44;
  char v45;
  char v46;
  int v47;
  char v48;
  void *v49;
  int v51;
  int *v52;
  char v53;
  char v54;
  char v55;
  BOOL v56;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 68)), (uint16x4_t)0xFFFDFFFEFFFFFFFCLL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 68) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 2;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v53 = v17;
        v54 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v55 = (v19 == 0) | v18;
        v56 = v18;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_79;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_79:
      v51 = 1;
      goto LABEL_80;
    }
    v33 = v25 >> 3;
    v34 = v56;
    if ((v55 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 68) & 2) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_98;
          v39 = objc_alloc_init(GEOMapItemAddressBookAttributes);
          if (GEOMapItemAddressBookAttributesReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            v40 = 24;
            goto LABEL_65;
          }
          goto LABEL_97;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_98;
        v46 = *(_BYTE *)(a1 + 68) << 6;
        goto LABEL_76;
      case 2:
        if (!v34)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 68) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_98;
          v46 = 8 * *(_BYTE *)(a1 + 68);
          goto LABEL_76;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_98;
        v39 = objc_alloc_init(GEOMapItemRoutineAttributes);
        if (!GEOMapItemRoutineAttributesReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_97;
        PBReaderRecallMark();
        v40 = 48;
        goto LABEL_65;
      case 3:
        if (!v34)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 68) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_98;
          v46 = 32 * *(_BYTE *)(a1 + 68);
          goto LABEL_76;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_98;
        v39 = objc_alloc_init(GEOMapItemCorrectedLocationAttributes);
        if (!GEOMapItemCorrectedLocationAttributesReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_97;
        PBReaderRecallMark();
        v40 = 32;
        goto LABEL_65;
      case 4:
        if (!v34)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 68) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_98;
          v46 = 16 * *(_BYTE *)(a1 + 68);
LABEL_76:
          v7 += v46 >> 7;
LABEL_77:
          v21 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_78;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_98;
        v39 = objc_alloc_init(GEOMapItemMapsSyncAttributes);
        if (GEOMapItemMapsSyncAttributesReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v40 = 40;
LABEL_65:
          v44 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v39;

          --v7;
          goto LABEL_77;
        }
LABEL_97:

LABEL_98:
        v51 = 0;
        v52 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_81:
        if ((v53 & 1) != 0)
LABEL_82:
          *(_BYTE *)(a1 + v52[511]) |= 1u;
        if (v56 || (v51 & 1) == 0)
        {
          *(_BYTE *)(a1 + v52[511]) |= 2u;
          *(_BYTE *)(a1 + v52[511]) |= 0x10u;
          *(_BYTE *)(a1 + v52[511]) |= 4u;
          *(_BYTE *)(a1 + v52[511]) |= 8u;
        }
        else if (v19)
        {
          while (1)
          {
            v47 = *v19++;
            v48 = 2;
            switch(v47)
            {
              case 0:
                goto LABEL_91;
              case 1:
                goto LABEL_90;
              case 2:
                v48 = 16;
                goto LABEL_90;
              case 3:
                v48 = 4;
                goto LABEL_90;
              case 4:
                v48 = 8;
LABEL_90:
                *(_BYTE *)(a1 + v52[511]) |= v48;
                break;
              default:
                continue;
            }
          }
        }
LABEL_91:
        if (v51)
          v3 = *(_BYTE *)(v3 + *v21) == 0;
        else
          v3 = 0;
        if (v56)
        {
          v49 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v53 & 1) == 0 || (*(_BYTE *)(a1 + 68) & 1) != 0)
        {
LABEL_66:
          v45 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if ((v45 & 1) == 0)
          {
            v51 = 0;
LABEL_80:
            v52 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
            goto LABEL_81;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v42 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v41;

          }
          v43 = PBUnknownFieldAdd();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if (!v43)
          {
            v51 = 0;
            v52 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
            goto LABEL_82;
          }
        }
LABEL_78:
        if (!(v54 & 1 | (v7 != 0)))
          goto LABEL_79;
        continue;
    }
  }
}

void sub_1894C2254(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C2390(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C24D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C2BE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOMapItemClientAttributesCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  objc_msgSend(a1[3], "readAll:", 1);
  objc_msgSend(a1[6], "readAll:", 1);
  objc_msgSend(a1[4], "readAll:", 1);
  return objc_msgSend(a1[5], "readAll:", 1);
}

unint64_t GEOMapItemClientAttributesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOMapItemClientAttributesReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOMapItemClientAttributesReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOMapItemClientAttributesReadAllFrom_initialTag;
  Specified = GEOMapItemClientAttributesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOMapItemClientAttributesCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1894C2DDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemClientAttributesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapItemClientAttributesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894C2E3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemClientAttributesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOMapItemAddressBookAttributesIsValid(a1))
            goto LABEL_36;
          goto LABEL_39;
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapItemRoutineAttributesIsValid(a1))
            goto LABEL_39;
          goto LABEL_36;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapItemCorrectedLocationAttributesIsValid(a1))
            goto LABEL_39;
          goto LABEL_36;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapItemMapsSyncAttributesIsValid(a1))
            goto LABEL_39;
LABEL_36:
          PBReaderRecallMark();
          goto LABEL_37;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_39:
            PBReaderRecallMark();
            return 0;
          }
LABEL_37:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_38;
          break;
      }
    }
  }
LABEL_38:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOMapItemRoutineAttributesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  _BOOL8 v32;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_50;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              goto LABEL_43;
            v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0)
            {
              v23 = v18++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_47;
          }
        case 2u:
          if (v16 == 2)
            goto LABEL_46;
          goto LABEL_50;
        case 3u:
          if (v16 != 1)
            goto LABEL_50;
          v24 = *v2;
          v25 = *(_QWORD *)&a1[v24];
          if (v25 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_44;
          v26 = v25 + 8;
          if (v26 > *(_QWORD *)&a1[*v3])
            goto LABEL_44;
          *(_QWORD *)&a1[v24] = v26;
          continue;
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_50;
          v27 = 0;
          break;
        case 5u:
          if (v16 != 2)
            goto LABEL_50;
LABEL_46:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_50:
          v32 = 0;
          goto LABEL_49;
        default:
          if (!PBReaderSkipValueWithTag())
            goto LABEL_50;
          continue;
      }
      while (1)
      {
        v28 = *v2;
        v29 = *(_QWORD *)&a1[v28];
        v30 = v29 + 1;
        if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
          break;
        v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
        *(_QWORD *)&a1[v28] = v30;
        if (v31 < 0)
        {
          v23 = v27++ > 8;
          if (!v23)
            continue;
        }
        goto LABEL_47;
      }
LABEL_43:
      v14 = *v4;
LABEL_44:
      a1[v14] = 1;
LABEL_47:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v32 = a1[*v4] == 0;
LABEL_49:
  PBReaderRecallMark();
  return v32;
}

BOOL GEOMapItemCorrectedLocationAttributesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  _BOOL8 v27;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOLatLngIsValid(a1))
            goto LABEL_26;
          goto LABEL_49;
        case 2u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOAddressIsValid(a1))
            goto LABEL_49;
LABEL_26:
          PBReaderRecallMark();
          continue;
        case 3u:
          if (v16 == 2)
            goto LABEL_30;
          goto LABEL_49;
        case 4u:
          if (v16 == 2)
            goto LABEL_30;
          goto LABEL_49;
        case 5u:
          if (v16 != 1)
            goto LABEL_49;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_45;
          v20 = v19 + 8;
          if (v20 > *(_QWORD *)&a1[*v3])
            goto LABEL_45;
          *(_QWORD *)&a1[v18] = v20;
          continue;
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_49;
          v21 = 0;
          break;
        default:
LABEL_30:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_49:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v22 = *v2;
        v23 = *(_QWORD *)&a1[v22];
        v24 = v23 + 1;
        if (v23 == -1 || v24 > *(_QWORD *)&a1[*v3])
          break;
        v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
        *(_QWORD *)&a1[v22] = v24;
        if (v25 < 0 && v21++ <= 8)
          continue;
        goto LABEL_46;
      }
      v14 = *v4;
LABEL_45:
      a1[v14] = 1;
LABEL_46:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v27 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v27;
}

BOOL GEOMapItemMapsSyncAttributesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_27;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_27;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2)
          goto LABEL_29;
        goto LABEL_23;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_29:
        v17 = 0;
        goto LABEL_28;
      }
LABEL_26:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_27;
    }
    if (v15 != 2)
      goto LABEL_29;
LABEL_23:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_29;
    goto LABEL_26;
  }
LABEL_27:
  v17 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v17;
}

void sub_1894C39A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL _GEOMapItemClientAttributesIsDirty(uint64_t a1)
{
  char v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = *(_BYTE *)(a1 + 68);
  if ((v2 & 0x20) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 68) & 2) != 0)
  {
    if (GEOMapItemAddressBookAttributesIsDirty(*(_QWORD *)(a1 + 24)))
      return 1;
    v2 = *(_BYTE *)(a1 + 68);
  }
  if ((v2 & 0x10) == 0)
    goto LABEL_8;
  if (GEOMapItemRoutineAttributesIsDirty(*(_QWORD *)(a1 + 48)))
    return 1;
  v2 = *(_BYTE *)(a1 + 68);
LABEL_8:
  if ((v2 & 4) != 0)
  {
    if ((GEOMapItemCorrectedLocationAttributesIsDirty(*(os_unfair_lock_s **)(a1 + 32)) & 1) != 0)
      return 1;
    v2 = *(_BYTE *)(a1 + 68);
  }
  return (v2 & 8) != 0 && GEOMapItemMapsSyncAttributesIsDirty(*(_QWORD *)(a1 + 40));
}

os_unfair_lock_s *GEOMapItemClientAttributesIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  _BOOL8 IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOMapItemClientAttributesIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 16);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1894C3DA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C40C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C439C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemCorrectedLocationAttributesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  GEOLatLng *v37;
  uint64_t v38;
  id v39;
  void *v40;
  int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  char v56;
  int v57;
  char v58;
  void *v59;
  int v61;
  int *v62;
  char v63;
  char v64;
  char v65;
  char v66;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 80)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFAFFFDFFFBFFFCLL) & 0xFF01FF01FF01FF01))+ ((*(_BYTE *)(a1 + 80) & 4) != 0));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 2;
        v63 = v16 & ~(_BYTE)v11 | v9;
        v64 = v16 | v11 | v63;
        if ((((v16 | v11) | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v65 = (v17 == 0) | v16 | v11;
        v66 = v16 | v11;
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_95;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_95:
      v61 = 1;
      goto LABEL_96;
    }
    v31 = v23 >> 3;
    v32 = v66;
    if ((v65 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_76;
        if ((*(_BYTE *)(a1 + 80) & 0x20) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_114;
          v37 = objc_alloc_init(GEOLatLng);
          if (GEOLatLngReadAllFrom((uint64_t)v37, (void *)v3))
          {
            PBReaderRecallMark();
            v38 = 40;
            goto LABEL_55;
          }
          goto LABEL_113;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_114;
        v56 = 4 * *(_BYTE *)(a1 + 80);
        goto LABEL_90;
      case 2:
        if (!v32)
          goto LABEL_76;
        if ((*(_BYTE *)(a1 + 80) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_114;
          v56 = 8 * *(_BYTE *)(a1 + 80);
LABEL_90:
          v7 += v56 >> 7;
          goto LABEL_91;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_114;
        v37 = objc_alloc_init(GEOAddress);
        if (GEOAddressReadAllFrom((uint64_t)v37, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v38 = 32;
LABEL_55:
          v42 = *(void **)(a1 + v38);
          *(_QWORD *)(a1 + v38) = v37;
LABEL_63:

          --v7;
LABEL_91:
          v19 = (int *)MEMORY[0x1E0D82BC8];
          v20 = (int *)MEMORY[0x1E0D82BB8];
          goto LABEL_94;
        }
LABEL_113:

LABEL_114:
        v61 = 0;
        v62 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_97:
        if ((v63 & 1) != 0)
LABEL_98:
          *(_BYTE *)(a1 + v62[517]) |= 4u;
        if (v66 & 1 | ((v61 & 1) == 0))
        {
          *(_BYTE *)(a1 + v62[517]) |= 0x20u;
          *(_BYTE *)(a1 + v62[517]) |= 0x10u;
          *(_BYTE *)(a1 + v62[517]) |= 8u;
          *(_BYTE *)(a1 + v62[517]) |= 0x40u;
        }
        else if (v17)
        {
          while (1)
          {
            v57 = *v17++;
            v58 = 32;
            switch(v57)
            {
              case 0:
                goto LABEL_107;
              case 1:
                goto LABEL_106;
              case 2:
                v58 = 16;
                goto LABEL_106;
              case 3:
                v58 = 8;
                goto LABEL_106;
              case 4:
                v58 = 64;
LABEL_106:
                *(_BYTE *)(a1 + v62[517]) |= v58;
                break;
              default:
                continue;
            }
          }
        }
LABEL_107:
        if (v61)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if ((v66 & 1) != 0)
        {
          v59 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 3:
        if (!v32)
          goto LABEL_76;
        if ((*(_BYTE *)(a1 + 80) & 8) == 0)
        {
          PBReaderReadString();
          v43 = objc_claimAutoreleasedReturnValue();
          v44 = 24;
          goto LABEL_62;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_114;
        v56 = 16 * *(_BYTE *)(a1 + 80);
        goto LABEL_90;
      case 4:
        if (!v32)
          goto LABEL_76;
        if ((*(_BYTE *)(a1 + 80) & 0x40) == 0)
        {
          PBReaderReadString();
          v43 = objc_claimAutoreleasedReturnValue();
          v44 = 48;
LABEL_62:
          v42 = *(void **)(a1 + v44);
          *(_QWORD *)(a1 + v44) = v43;
          goto LABEL_63;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_114;
        v56 = 2 * *(_BYTE *)(a1 + 80);
        goto LABEL_90;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_76;
        *(_BYTE *)(a1 + 80) |= 1u;
        v45 = *v18;
        v46 = *(_QWORD *)(v3 + v45);
        if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v47 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v46);
          *(_QWORD *)(v3 + v45) = v46 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v19) = 1;
          v47 = 0;
        }
        *(_QWORD *)(a1 + 56) = v47;
        goto LABEL_94;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_76;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        *(_BYTE *)(a1 + 80) |= 2u;
        while (2)
        {
          v51 = *v18;
          v52 = *(_QWORD *)(v3 + v51);
          v53 = v52 + 1;
          if (v52 == -1 || v53 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v52);
            *(_QWORD *)(v3 + v51) = v53;
            v50 |= (unint64_t)(v54 & 0x7F) << v48;
            if (v54 < 0)
            {
              v48 += 7;
              v28 = v49++ >= 9;
              if (v28)
              {
                v50 = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v50 = 0;
LABEL_81:
        *(_BYTE *)(a1 + 76) = v50 != 0;
        goto LABEL_94;
      default:
        if ((v63 & 1) == 0 || (*(_BYTE *)(a1 + 80) & 4) != 0)
        {
LABEL_76:
          v55 = PBReaderSkipValueWithTag();
          v20 = (int *)MEMORY[0x1E0D82BB8];
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v55 & 1) == 0)
          {
            v61 = 0;
LABEL_96:
            v62 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
            goto LABEL_97;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v40 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v39;

          }
          v41 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          v20 = (int *)MEMORY[0x1E0D82BB8];
          if (!v41)
          {
            v61 = 0;
            v62 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
            goto LABEL_98;
          }
        }
LABEL_94:
        if (!(v64 & 1 | (v7 != 0)))
          goto LABEL_95;
        continue;
    }
  }
}

void sub_1894C4CB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C4DF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C4F30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C57E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemCorrectedLocationAttributesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOMapItemCorrectedLocationAttributesReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOMapItemCorrectedLocationAttributesReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOMapItemCorrectedLocationAttributesReadAllFrom_initialTag;
  Specified = GEOMapItemCorrectedLocationAttributesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_1894C5998(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemCorrectedLocationAttributesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapItemCorrectedLocationAttributesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894C59F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C5C0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOMapItemCorrectedLocationAttributesIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v2 = *(unsigned __int8 *)(a1 + 80);
  if ((v2 & 0xA0) != 0)
    return 1;
  if ((v2 & 0x10) != 0)
  {
    if (GEOAddressIsDirty(*(_QWORD *)(a1 + 32)))
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 80);
  }
  if ((v2 & 8) != 0)
    return 1;
  return (v2 >> 6) & 1;
}

os_unfair_lock_s *GEOMapItemCorrectedLocationAttributesIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOMapItemCorrectedLocationAttributesIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 18);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1894C606C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C64DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C6784(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemMapsSyncAttributesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  int v41;
  char v42;
  char v43;
  char v44;
  int v45;
  int v46;
  void *v47;
  int v49;
  int *v50;
  unsigned __int8 v51;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 | v7;
        v51 = v14 & ~(_BYTE)v7 | v8;
        if ((((v14 | v7) | v9) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_59;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_59:
      v49 = 1;
      goto LABEL_60;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if (!((v16 == 0) | v15 & 1))
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    if ((_DWORD)v30 == 2)
      break;
    if ((_DWORD)v30 == 1)
    {
      if (v31)
      {
        if ((*(_BYTE *)(a1 + 52) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_79;
          v43 = *(_BYTE *)(a1 + 52) << 6;
          goto LABEL_57;
        }
        PBReaderReadString();
        v36 = objc_claimAutoreleasedReturnValue();
        v37 = 24;
        goto LABEL_44;
      }
    }
    else if ((v51 & 1) != 0 && (*(_BYTE *)(a1 + 52) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v40 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v39;

      }
      v41 = PBUnknownFieldAdd();
      v18 = (int *)MEMORY[0x1E0D82BC8];
      if (!v41)
      {
        v49 = 0;
        v50 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        goto LABEL_62;
      }
      goto LABEL_58;
    }
LABEL_51:
    v42 = PBReaderSkipValueWithTag();
    v18 = (int *)MEMORY[0x1E0D82BC8];
    if ((v42 & 1) == 0)
    {
      v49 = 0;
LABEL_60:
      v50 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
      goto LABEL_61;
    }
LABEL_58:
    if (!((v15 | v51) & 1 | (v10 != 0)))
      goto LABEL_59;
  }
  if (!v31)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 52) & 4) == 0)
  {
    PBReaderReadString();
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = 32;
LABEL_44:
    v38 = *(void **)(a1 + v37);
    *(_QWORD *)(a1 + v37) = v36;

    v18 = (int *)MEMORY[0x1E0D82BC8];
    --v10;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v43 = 32 * *(_BYTE *)(a1 + 52);
LABEL_57:
    v10 += v43 >> 7;
    v18 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_58;
  }
LABEL_79:
  v49 = 0;
  v50 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
  v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_61:
  if ((v51 & 1) == 0)
    goto LABEL_63;
LABEL_62:
  *(_BYTE *)(a1 + v50[520]) |= 1u;
LABEL_63:
  if (v15 & 1 | ((v49 & 1) == 0))
  {
    *(_BYTE *)(a1 + v50[520]) |= 2u;
    *(_BYTE *)(a1 + v50[520]) |= 4u;
    goto LABEL_73;
  }
  if (v16)
  {
    while (1)
    {
      v46 = *v16++;
      v45 = v46;
      if (v46 == 1)
        break;
      if (v45 == 2)
      {
        v44 = 4;
LABEL_69:
        *(_BYTE *)(a1 + v50[520]) |= v44;
      }
      else if (!v45)
      {
        goto LABEL_73;
      }
    }
    v44 = 2;
    goto LABEL_69;
  }
LABEL_73:
  if (v49)
  {
    v3 = *(_BYTE *)(v3 + *v18) == 0;
    if ((v15 & 1) == 0)
      return v3;
LABEL_77:
    v47 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  else
  {
    v3 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_77;
  }
  return v3;
}

void sub_1894C6DA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C72B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemMapsSyncAttributesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOMapItemMapsSyncAttributesReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOMapItemMapsSyncAttributesReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOMapItemMapsSyncAttributesReadAllFrom_initialTag;
  Specified = GEOMapItemMapsSyncAttributesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1894C7438(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemMapsSyncAttributesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapItemMapsSyncAttributesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894C7498(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C762C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemMapsSyncAttributesIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 52) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_1894C78D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C7AF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C7F28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemRoutineAttributesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  id v44;
  void *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  void *v59;
  char v60;
  char v61;
  int v62;
  int v63;
  char v64;
  void *v65;
  int v67;
  int *v68;
  char v69;
  char v70;
  char v71;
  BOOL v72;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 68) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 3) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 & ~(_BYTE)v7;
        v16 = v14 | v7;
        v69 = v15 | v8;
        v70 = v16 | v15 | v8;
        if (((v16 | v9) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v71 = (v17 == 0) | v16;
        v72 = v16;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_89;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_89:
      v67 = 1;
      goto LABEL_90;
    }
    v31 = v23 >> 3;
    v32 = v72;
    if ((v71 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v9 & 1) == 0)
          goto LABEL_70;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 68) |= 2u;
        while (1)
        {
          v40 = *v18;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v41);
          *(_QWORD *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0)
            goto LABEL_73;
          v37 += 7;
          v28 = v38++ >= 9;
          if (v28)
          {
            LODWORD(v39) = 0;
            goto LABEL_75;
          }
        }
        *(_BYTE *)(v3 + *v19) = 1;
LABEL_73:
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v39) = 0;
LABEL_75:
        *(_DWORD *)(a1 + 60) = v39;
        goto LABEL_88;
      case 2:
        if (!v32)
          goto LABEL_70;
        if ((*(_BYTE *)(a1 + 68) & 0x10) == 0)
        {
          PBReaderReadString();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = 32;
          goto LABEL_69;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_109;
        v61 = 8 * *(_BYTE *)(a1 + 68);
        goto LABEL_84;
      case 3:
        if ((v9 & 1) == 0)
          goto LABEL_70;
        *(_BYTE *)(a1 + 68) |= 1u;
        v49 = *v18;
        v50 = *(_QWORD *)(v3 + v49);
        if (v50 <= 0xFFFFFFFFFFFFFFF7 && v50 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v51 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v50);
          *(_QWORD *)(v3 + v49) = v50 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v19) = 1;
          v51 = 0;
        }
        *(_QWORD *)(a1 + 24) = v51;
        goto LABEL_88;
      case 4:
        if ((v9 & 1) == 0)
          goto LABEL_70;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        *(_BYTE *)(a1 + 68) |= 4u;
        while (2)
        {
          v55 = *v18;
          v56 = *(_QWORD *)(v3 + v55);
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v56);
            *(_QWORD *)(v3 + v55) = v57;
            v54 |= (unint64_t)(v58 & 0x7F) << v52;
            if (v58 < 0)
            {
              v52 += 7;
              v28 = v53++ >= 9;
              if (v28)
              {
                v54 = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v54 = 0;
LABEL_79:
        *(_BYTE *)(a1 + 64) = v54 != 0;
        goto LABEL_88;
      case 5:
        if (!v32)
          goto LABEL_70;
        if ((*(_BYTE *)(a1 + 68) & 0x20) == 0)
        {
          PBReaderReadString();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = 40;
LABEL_69:
          v59 = *(void **)(a1 + v48);
          *(_QWORD *)(a1 + v48) = v47;

          --v10;
LABEL_85:
          v19 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_88;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v61 = 4 * *(_BYTE *)(a1 + 68);
LABEL_84:
          v10 += v61 >> 7;
          goto LABEL_85;
        }
LABEL_109:
        v67 = 0;
        v68 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_91:
        if ((v69 & 1) != 0)
LABEL_92:
          *(_BYTE *)(a1 + v68[522]) |= 8u;
        if (v72 || (v67 & 1) == 0)
        {
          *(_BYTE *)(a1 + v68[522]) |= 0x10u;
          *(_BYTE *)(a1 + v68[522]) |= 0x20u;
          goto LABEL_103;
        }
        if (v17)
        {
          while (2)
          {
            while (1)
            {
              v63 = *v17++;
              v62 = v63;
              if (v63 == 2)
                break;
              if (v62 == 5)
              {
                v64 = 32;
                goto LABEL_102;
              }
              if (!v62)
                goto LABEL_103;
            }
            v64 = 16;
LABEL_102:
            *(_BYTE *)(a1 + v68[522]) |= v64;
            continue;
          }
        }
LABEL_103:
        if (v67)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if (v72)
        {
          v65 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v69 & 1) == 0 || (*(_BYTE *)(a1 + 68) & 8) != 0)
        {
LABEL_70:
          v60 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v60 & 1) == 0)
          {
            v67 = 0;
LABEL_90:
            v68 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
            goto LABEL_91;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v44 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v45 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v44;

          }
          v46 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v46)
          {
            v67 = 0;
            v68 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
            goto LABEL_92;
          }
        }
LABEL_88:
        if (!(v70 & 1 | (v10 != 0)))
          goto LABEL_89;
        continue;
    }
  }
}

void sub_1894C8830(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C8FC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemRoutineAttributesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOMapItemRoutineAttributesReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOMapItemRoutineAttributesReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOMapItemRoutineAttributesReadAllFrom_initialTag;
  Specified = GEOMapItemRoutineAttributesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_1894C9150(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemRoutineAttributesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapItemRoutineAttributesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894C91B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C93B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemRoutineAttributesIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = (*(_BYTE *)(a1 + 68) & 0x70) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_1894C9768(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894C9B7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemStorageReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEOPDPlace *v39;
  uint64_t v40;
  id v41;
  void *v42;
  int v43;
  uint64_t v44;
  void *v45;
  char v46;
  __int16 v47;
  int v48;
  __int16 v49;
  void *v50;
  int v52;
  char v53;
  char v54;
  char v55;
  BOOL v56;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 124);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 120));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int16 *)(a1 + 132) >> 9) & 1)
      + (*(_WORD *)(a1 + 132) & 1)
      + ((*(unsigned __int16 *)(a1 + 132) >> 1) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 132)), (uint16x4_t)0xFFF9FFFEFFFAFFF8), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 132) >> 5) & 1)+ ((*(_WORD *)(a1 + 132) >> 3) & 1)+ ((*(_WORD *)(a1 + 132) >> 4) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 6;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v53 = v17;
        v54 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v55 = (v19 == 0) | v18;
        v56 = v18;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_111;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_111:
      v52 = 1;
      goto LABEL_112;
    }
    v33 = v25 >> 3;
    v34 = v56;
    if ((v55 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34)
          goto LABEL_90;
        if ((*(_WORD *)(a1 + 132) & 0x40) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_134;
          v39 = objc_alloc_init(GEOPDPlace);
          if (GEOPDPlaceReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            v40 = 88;
            goto LABEL_83;
          }
          goto LABEL_133;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_134;
        v47 = *(_WORD *)(a1 + 132) << 9;
        goto LABEL_108;
      case 2:
        if (!v34)
          goto LABEL_90;
        if ((*(_WORD *)(a1 + 132) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_134;
          v47 = *(_WORD *)(a1 + 132) << 7;
          goto LABEL_108;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_134;
        v39 = objc_alloc_init(GEOPlace);
        if (!GEOPlaceReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_133;
        PBReaderRecallMark();
        v40 = 104;
        goto LABEL_83;
      case 3:
        if (!v34)
          goto LABEL_90;
        if ((*(_WORD *)(a1 + 132) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_134;
          v47 = *(_WORD *)(a1 + 132) << 13;
          goto LABEL_108;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_134;
        v39 = objc_alloc_init(GEOMapItemClientAttributes);
        if (!GEOMapItemClientAttributesReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_133;
        PBReaderRecallMark();
        v40 = 56;
        goto LABEL_83;
      case 4:
        if (!v34)
          goto LABEL_90;
        if ((*(_WORD *)(a1 + 132) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_134;
          v47 = *(_WORD *)(a1 + 132) << 8;
          goto LABEL_108;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_134;
        v39 = objc_alloc_init(GEOPlaceResult);
        if (!GEOPlaceResultReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_133;
        PBReaderRecallMark();
        v40 = 96;
        goto LABEL_83;
      case 5:
        if (!v34)
          goto LABEL_90;
        if ((*(_WORD *)(a1 + 132) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_134;
          v47 = *(_WORD *)(a1 + 132) << 10;
          goto LABEL_108;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_134;
        v39 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v39, (void *)v3))
          goto LABEL_133;
        PBReaderRecallMark();
        v40 = 80;
        goto LABEL_83;
      case 6:
        if (!v34)
          goto LABEL_90;
        if ((*(_WORD *)(a1 + 132) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_134;
          v47 = *(_WORD *)(a1 + 132) << 12;
          goto LABEL_108;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_134;
        v39 = objc_alloc_init(GEOPDResultDetourInfo);
        if (!GEOPDResultDetourInfoReadAllFrom((uint64_t)v39, (void *)v3))
          goto LABEL_133;
        PBReaderRecallMark();
        v40 = 64;
        goto LABEL_83;
      case 7:
        if (!v34)
          goto LABEL_90;
        if ((*(_WORD *)(a1 + 132) & 0x10) == 0)
        {
          PBReaderReadString();
          v44 = objc_claimAutoreleasedReturnValue();
          v45 = *(void **)(a1 + 72);
          *(_QWORD *)(a1 + 72) = v44;
          goto LABEL_84;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_134;
        v47 = *(_WORD *)(a1 + 132) << 11;
        goto LABEL_108;
      case 8:
        if (!v34)
          goto LABEL_90;
        if ((*(_WORD *)(a1 + 132) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_134;
          v47 = *(_WORD *)(a1 + 132) << 6;
LABEL_108:
          v7 += v47 >> 15;
LABEL_109:
          v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_110:
          v22 = (int *)MEMORY[0x1E0D82BB8];
          if (!(v54 & 1 | (v7 != 0)))
            goto LABEL_111;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_134;
        v39 = objc_alloc_init(GEOMapItemStorageUserValues);
        if (GEOMapItemStorageUserValuesReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v40 = 112;
LABEL_83:
          v45 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v39;
LABEL_84:

          --v7;
          goto LABEL_109;
        }
LABEL_133:

LABEL_134:
        v52 = 0;
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_112:
        if ((v53 & 1) != 0)
LABEL_113:
          *(_WORD *)(a1 + 132) |= 1u;
        if (v56 || (v52 & 1) == 0)
        {
          *(_WORD *)(a1 + 132) |= 0x40u;
          *(_WORD *)(a1 + 132) |= 0x100u;
          *(_WORD *)(a1 + 132) |= 4u;
          *(_WORD *)(a1 + 132) |= 0x80u;
          *(_WORD *)(a1 + 132) |= 0x20u;
          *(_WORD *)(a1 + 132) |= 8u;
          *(_WORD *)(a1 + 132) |= 0x10u;
          *(_WORD *)(a1 + 132) |= 0x200u;
          *(_WORD *)(a1 + 132) |= 2u;
        }
        else if (v19)
        {
          while (1)
          {
            v48 = *v19++;
            v49 = 64;
            switch(v48)
            {
              case 0:
                goto LABEL_127;
              case 1:
                goto LABEL_126;
              case 2:
                v49 = 256;
                goto LABEL_126;
              case 3:
                v49 = 4;
                goto LABEL_126;
              case 4:
                v49 = 128;
                goto LABEL_126;
              case 5:
                v49 = 32;
                goto LABEL_126;
              case 6:
                v49 = 8;
                goto LABEL_126;
              case 7:
                v49 = 16;
                goto LABEL_126;
              case 8:
                v49 = 512;
                goto LABEL_126;
              case 9:
                v49 = 2;
LABEL_126:
                *(_WORD *)(a1 + 132) |= v49;
                break;
              default:
                continue;
            }
          }
        }
LABEL_127:
        if (v52)
          v3 = *(_BYTE *)(v3 + *v21) == 0;
        else
          v3 = 0;
        if (v56)
        {
          v50 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = 0;

        }
        return v3;
      case 9:
        if (!v34 || (*(_WORD *)(a1 + 132) & 2) != 0)
          goto LABEL_90;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_134;
        v39 = objc_alloc_init(GEOPDPlace);
        if (!GEOPDPlaceReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_133;
        PBReaderRecallMark();
        -[GEOMapItemStorage _addNoFlagsAdditionalPlaceDatas:](a1, v39);

        goto LABEL_109;
      default:
        if ((v53 & 1) == 0 || (*(_WORD *)(a1 + 132) & 1) != 0)
        {
LABEL_90:
          v46 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if ((v46 & 1) == 0)
          {
            v52 = 0;
            goto LABEL_112;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 40))
          {
            v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v42 = *(void **)(a1 + 40);
            *(_QWORD *)(a1 + 40) = v41;

          }
          v43 = PBUnknownFieldAdd();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if (!v43)
          {
            v52 = 0;
            goto LABEL_113;
          }
        }
        goto LABEL_110;
    }
  }
}

void sub_1894CA750(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894CA8C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894CAA04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894CAB78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894CBA70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOMapItemStorageCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[11], "readAll:", 1);
  objc_msgSend(a1[13], "readAll:", 1);
  objc_msgSend(a1[7], "readAll:", 1);
  objc_msgSend(a1[12], "readAll:", 1);
  objc_msgSend(a1[10], "readAll:", 1);
  objc_msgSend(a1[8], "readAll:", 1);
  objc_msgSend(a1[14], "readAll:", 1);
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = a1[6];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v7);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

unint64_t GEOMapItemStorageReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 124))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOMapItemStorageReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 32), a2);
  *(_DWORD *)(a1 + 120) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 124) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOMapItemStorageReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOMapItemStorageReadAllFrom_initialTag;
  Specified = GEOMapItemStorageReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOMapItemStorageCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  return Specified;
}

void sub_1894CBD74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemStorageReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapItemStorageReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894CBDD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemStorageIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
        case 9u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOPDPlaceIsValid(a1))
            goto LABEL_49;
          goto LABEL_52;
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPlaceIsValid(a1))
            goto LABEL_52;
          goto LABEL_49;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapItemClientAttributesIsValid(a1))
            goto LABEL_52;
          goto LABEL_49;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPlaceResultIsValid(a1))
            goto LABEL_52;
          goto LABEL_49;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_52;
          goto LABEL_49;
        case 6u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDResultDetourInfoIsValid(a1))
            goto LABEL_52;
          goto LABEL_49;
        case 7u:
          if (v15 == 2)
            goto LABEL_44;
          goto LABEL_52;
        case 8u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapItemStorageUserValuesIsValid(a1))
            goto LABEL_52;
LABEL_49:
          PBReaderRecallMark();
          goto LABEL_50;
        default:
LABEL_44:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_52:
            PBReaderRecallMark();
            return 0;
          }
LABEL_50:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_51;
          break;
      }
    }
  }
LABEL_51:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOMapItemStorageUserValuesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2)
            goto LABEL_33;
          goto LABEL_30;
        case 2u:
          if (v15 == 2)
            goto LABEL_30;
          goto LABEL_33;
        case 3u:
          if (v15 == 2)
            goto LABEL_30;
          goto LABEL_33;
        case 4u:
          if (v15 == 2)
            goto LABEL_30;
          goto LABEL_33;
        case 5u:
          if (v15 != 2)
            goto LABEL_33;
LABEL_30:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_33:
            v17 = 0;
            goto LABEL_34;
          }
LABEL_31:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_32;
          break;
        default:
          if (!PBReaderSkipValueWithTag())
            goto LABEL_33;
          goto LABEL_31;
      }
    }
  }
LABEL_32:
  v17 = a1[*v4] == 0;
LABEL_34:
  PBReaderRecallMark();
  return v17;
}

void sub_1894CC5E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOMapItemStorageIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  v2 = *(unsigned __int16 *)(a1 + 132);
  if ((v2 & 0x400) != 0)
    return 1;
  if ((v2 & 0x40) != 0)
  {
    if ((GEOPDPlaceIsDirty(*(os_unfair_lock_s **)(a1 + 88)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int16 *)(a1 + 132);
  }
  if ((v2 & 0x100) != 0)
  {
    if ((GEOPlaceIsDirty(*(os_unfair_lock_s **)(a1 + 104)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int16 *)(a1 + 132);
  }
  if ((v2 & 4) != 0)
  {
    if ((GEOMapItemClientAttributesIsDirty(*(os_unfair_lock_s **)(a1 + 56)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int16 *)(a1 + 132);
  }
  if ((v2 & 0x80) == 0)
    goto LABEL_14;
  if ((GEOPlaceResultIsDirty(*(os_unfair_lock_s **)(a1 + 96)) & 1) != 0)
    return 1;
  v2 = *(unsigned __int16 *)(a1 + 132);
LABEL_14:
  if ((v2 & 0x38) != 0)
    return 1;
  if ((v2 & 0x200) != 0)
  {
    if (GEOMapItemStorageUserValuesIsDirty(*(_QWORD *)(a1 + 112)))
      return 1;
    v2 = *(unsigned __int16 *)(a1 + 132);
  }
  return (v2 >> 1) & 1;
}

os_unfair_lock_s *GEOMapItemStorageIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOMapItemStorageIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 32);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

unint64_t GEOMapItemStorageClearSensitiveFields(id *a1, uint64_t a2, int a3)
{
  void *v6;
  unsigned int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *v14;
  void *v15;
  void *v16;
  unint64_t result;
  unint64_t i;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  if (a3)
  {
    if (objc_msgSend(a1, "hasPlaceData")
      && (objc_msgSend(a1, "placeData"),
          v6 = (void *)objc_claimAutoreleasedReturnValue(),
          v7 = GEOPDPlaceHasSensitiveFields(v6, a2),
          v6,
          v7))
    {
      objc_msgSend(a1, "placeData");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = (void *)objc_msgSend(v8, "copy");

      objc_msgSend(v9, "requestData");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "clearSensitiveFields:", a2);

      objc_msgSend(a1, "setPlaceData:", v9);
    }
    else
    {
      objc_msgSend(a1, "placeData");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "clearSensitiveFields:", a2);
    }

    if (objc_msgSend(a1, "hasPlaceResult"))
    {
      objc_msgSend(a1, "placeResult");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = GEOPlaceResultHasSensitiveFields(v12);

      if (v13)
      {
        objc_msgSend(a1, "placeResult");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (void *)objc_msgSend(v14, "copy");

        objc_msgSend(v15, "revgeoRequestTemplate");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "clearSensitiveFields:", a2);

        objc_msgSend(a1, "setPlaceResult:", v15);
        goto LABEL_11;
      }
    }
  }
  else
  {
    objc_msgSend(a1, "placeData");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "clearSensitiveFields:", a2);

  }
  objc_msgSend(a1, "placeResult");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "clearSensitiveFields:", a2);
LABEL_11:

  -[GEOMapItemStorage _readAdditionalPlaceDatas]((uint64_t)a1);
  result = objc_msgSend(a1[6], "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      objc_msgSend(a1[6], "objectAtIndexedSubscript:", i);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v19;
      if (a3 && GEOPDPlaceHasSensitiveFields(v19, a2))
      {
        v21 = (void *)objc_msgSend(v20, "copy");
        objc_msgSend(v21, "requestData");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "clearSensitiveFields:", a2);

        objc_msgSend(a1[6], "replaceObjectAtIndex:withObject:", i, v21);
      }
      else
      {
        objc_msgSend(v20, "clearSensitiveFields:", a2);
      }

      result = objc_msgSend(a1[6], "count");
    }
  }
  return result;
}

uint64_t GEOMapItemStorageHasSensitiveFields(uint64_t result, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = (void *)result;
    objc_msgSend((id)result, "placeData");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (GEOPDPlaceHasSensitiveFields(v4, a2))
    {

      return 1;
    }
    objc_msgSend(v3, "placeResult");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = GEOPlaceResultHasSensitiveFields(v5);

    if ((v6 & 1) != 0)
      return 1;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    objc_msgSend(v3, "additionalPlaceDatas", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v13;
      while (2)
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v13 != v10)
            objc_enumerationMutation(v7);
          if ((GEOPDPlaceHasSensitiveFields(*(void **)(*((_QWORD *)&v12 + 1) + 8 * v11), a2) & 1) != 0)
          {

            return 1;
          }
          ++v11;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v9)
          continue;
        break;
      }
    }

    return 0;
  }
  return result;
}

void sub_1894CD3A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894CD6E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemStorageUserValuesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  int v41;
  void *v42;
  char v43;
  char v44;
  int v45;
  char v46;
  void *v47;
  int v49;
  char v50;
  char v51;
  char v52;
  BOOL v53;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 76)), (uint16x4_t)0xFFFCFFFBFFFFFFFELL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 76) & 1)+ ((*(_BYTE *)(a1 + 76) & 8) != 0));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 > 3;
        v15 = v14 & ~(_BYTE)v10 | v7;
        v16 = v14 | v10;
        v50 = v15;
        v51 = v16 | v15;
        if (((v16 | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v52 = (v17 == 0) | v16;
        v53 = v16;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_75;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_75:
      v49 = 1;
      goto LABEL_76;
    }
    v31 = v23 >> 3;
    v32 = v53;
    if ((v52 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_60;
        if ((*(_BYTE *)(a1 + 76) & 2) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 24;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_93;
        v44 = *(_BYTE *)(a1 + 76) << 6;
        goto LABEL_72;
      case 2:
        if (!v32)
          goto LABEL_60;
        if ((*(_BYTE *)(a1 + 76) & 4) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 32;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_93;
        v44 = 32 * *(_BYTE *)(a1 + 76);
        goto LABEL_72;
      case 3:
        if (!v32)
          goto LABEL_60;
        if ((*(_BYTE *)(a1 + 76) & 0x20) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 56;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_93;
        v44 = 4 * *(_BYTE *)(a1 + 76);
        goto LABEL_72;
      case 4:
        if (!v32)
          goto LABEL_60;
        if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 48;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_93;
        v44 = 8 * *(_BYTE *)(a1 + 76);
        goto LABEL_72;
      case 5:
        if (!v32)
          goto LABEL_60;
        if ((*(_BYTE *)(a1 + 76) & 8) == 0)
        {
          PBReaderReadData();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 40;
LABEL_59:
          v42 = *(void **)(a1 + v38);
          *(_QWORD *)(a1 + v38) = v37;

          --v9;
LABEL_73:
          v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_74:
          if (!(v51 & 1 | (v9 != 0)))
            goto LABEL_75;
          continue;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v44 = 16 * *(_BYTE *)(a1 + 76);
LABEL_72:
          v9 += v44 >> 7;
          goto LABEL_73;
        }
LABEL_93:
        v49 = 0;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_76:
        if ((v50 & 1) != 0)
LABEL_77:
          *(_BYTE *)(a1 + 76) |= 1u;
        if (v53 || (v49 & 1) == 0)
        {
          *(_BYTE *)(a1 + 76) |= 2u;
          *(_BYTE *)(a1 + 76) |= 4u;
          *(_BYTE *)(a1 + 76) |= 0x20u;
          *(_BYTE *)(a1 + 76) |= 0x10u;
          *(_BYTE *)(a1 + 76) |= 8u;
        }
        else if (v17)
        {
          while (1)
          {
            v45 = *v17++;
            v46 = 2;
            switch(v45)
            {
              case 0:
                goto LABEL_87;
              case 1:
                goto LABEL_86;
              case 2:
                v46 = 4;
                goto LABEL_86;
              case 3:
                v46 = 32;
                goto LABEL_86;
              case 4:
                v46 = 16;
                goto LABEL_86;
              case 5:
                v46 = 8;
LABEL_86:
                *(_BYTE *)(a1 + 76) |= v46;
                break;
              default:
                continue;
            }
          }
        }
LABEL_87:
        if (v49)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if (v53)
        {
          v47 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v50 & 1) == 0 || (*(_BYTE *)(a1 + 76) & 1) != 0)
        {
LABEL_60:
          v43 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v43 & 1) == 0)
          {
            v49 = 0;
            goto LABEL_76;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v40 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v39;

          }
          v41 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v41)
          {
            v49 = 0;
            goto LABEL_77;
          }
        }
        goto LABEL_74;
    }
  }
}

void sub_1894CDE64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894CDFA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894CE0E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894CE228(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894CE94C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemStorageUserValuesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOMapItemStorageUserValuesReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOMapItemStorageUserValuesReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOMapItemStorageUserValuesReadAllFrom_initialTag;
  Specified = GEOMapItemStorageUserValuesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_1894CEAD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemStorageUserValuesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapItemStorageUserValuesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894CEB38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894CED2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemStorageUserValuesIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v2 = (*(_BYTE *)(a1 + 76) & 0x7E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return v2;
}

void sub_1894CF06C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894CF378(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894CF610(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D05DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D072C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D0BDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D1544(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D1694(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D17E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D1928(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D23F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D2EE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D3600(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D3C6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D3DEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D41B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D4740(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D4CB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D4E38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D51D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D57EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D5B00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D5C4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D5F28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D61EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D6644(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D69F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D6BC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D6D58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894D6F28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOMapServiceTraitsCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];
  _BYTE v41[128];
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 384), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 456), "readAll:", 1);
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v2 = *(id *)(a1 + 472);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v35, v42, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v36;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v36 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v35, v42, 16);
    }
    while (v4);
  }

  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v7 = *(id *)(a1 + 520);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v32;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v32 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * v11++), "readAll:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
    }
    while (v9);
  }

  objc_msgSend(*(id *)(a1 + 568), "readAll:", 1);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v12 = *(id *)(a1 + 440);
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v27, v40, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v28;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v28 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * v16++), "readAll:", 1);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v27, v40, 16);
    }
    while (v14);
  }

  objc_msgSend(*(id *)(a1 + 328), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 560), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 600), "readAll:", 1);
  -[GEOPDVenueIdentifier readAll:](*(_QWORD *)(a1 + 592), 1);
  objc_msgSend(*(id *)(a1 + 576), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 376), "readAll:", 1);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v17 = *(id *)(a1 + 424);
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v23, v39, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v24;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v24 != v20)
          objc_enumerationMutation(v17);
        objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * v21++), "readAll:", 1, (_QWORD)v23);
      }
      while (v19 != v21);
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v23, v39, 16);
    }
    while (v19);
  }

  objc_msgSend(*(id *)(a1 + 480), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 512), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 320), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 536), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 280), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 488), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 528), "readAll:", 1);
  objc_msgSend(*(id *)(a1 + 504), "readAll:", 1);
  return objc_msgSend(*(id *)(a1 + 584), "readAll:", 1);
}

uint64_t GEOMapServiceTraitsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  uint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapServiceTraitsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894DEA2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapServiceTraitsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  int v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  int v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  int v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  int v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  int v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  int v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  int v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  int v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  int v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  int v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  int v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  int v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  int v269;
  unsigned int v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  int v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  int v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  int v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  int v290;
  unsigned int v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  int v295;
  unsigned int v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  int v300;
  unsigned int v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  int v305;
  unsigned int v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  int v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  int v314;
  unsigned int v315;
  unsigned int v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  int v320;
  unsigned int v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  int v325;
  unsigned int v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  int v330;
  unsigned int v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  int v335;
  unsigned int v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  int v340;
  unsigned int v341;
  uint64_t v342;
  unint64_t v343;
  unint64_t v344;
  int v345;
  unsigned int v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  int v350;
  unsigned int v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  int v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  int v360;
  unsigned int v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  int v365;
  unsigned int v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  int v370;
  unsigned int v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  int v375;
  unsigned int v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  int v380;
  unsigned int v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  int v385;
  unsigned int v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  int v390;
  unsigned int v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  int v395;
  unsigned int v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  int v400;
  _BOOL8 v401;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v12 = v7++ >= 9;
        if (v12)
        {
          v8 = 0;
          v13 = *v4;
          v14 = a1[v13];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = *v4;
      v14 = a1[v13];
      if (a1[v13])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && (GEOSessionIDIsValid(a1) & 1) != 0)
            goto LABEL_634;
          goto LABEL_751;
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v20 = 0;
          while (1)
          {
            v21 = *v2;
            v22 = *(_QWORD *)&a1[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v24 = *(char *)(*(_QWORD *)&a1[*v5] + v22);
            *(_QWORD *)&a1[v21] = v23;
            if (v24 < 0)
            {
              v25 = v20++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 3u:
          if (v15 == 2)
            goto LABEL_646;
          goto LABEL_751;
        case 4u:
          if (v15 == 2)
            goto LABEL_646;
          goto LABEL_751;
        case 5u:
          if (v15 == 2)
            goto LABEL_646;
          goto LABEL_751;
        case 6u:
        case 0x26u:
          if (v15 != 2 || !PBReaderPlaceMark() || (GEOLocationIsValid(a1) & 1) == 0)
            goto LABEL_751;
          goto LABEL_634;
        case 7u:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_751;
            while (1)
            {
              v26 = *v2;
              v27 = *(_QWORD *)&a1[v26];
              v28 = v27 + 1;
              if (v27 == -1 || v28 > *(_QWORD *)&a1[*v3])
                goto LABEL_643;
              v29 = *(char *)(*(_QWORD *)&a1[*v5] + v27);
              *(_QWORD *)&a1[v26] = v28;
              if (v29 < 0)
              {
                v30 = v15++;
                if (v30 <= 8)
                  continue;
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_751;
LABEL_650:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v351 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v352 = *v2;
              v353 = *(_QWORD *)&a1[v352];
              v354 = v353 + 1;
              if (v353 == -1 || v354 > *(_QWORD *)&a1[*v3])
                break;
              v355 = *(char *)(*(_QWORD *)&a1[*v5] + v353);
              *(_QWORD *)&a1[v352] = v354;
              if (v355 < 0)
              {
                v12 = v351++ >= 9;
                if (!v12)
                  continue;
              }
              goto LABEL_650;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 8u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
            goto LABEL_751;
          goto LABEL_634;
        case 9u:
          if (v15 == 2)
            goto LABEL_646;
          goto LABEL_751;
        case 0xAu:
          if (v15 == 2)
            goto LABEL_646;
          goto LABEL_751;
        case 0xBu:
          if (v15 == 2)
            goto LABEL_646;
          goto LABEL_751;
        case 0xEu:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v31 = 0;
          while (1)
          {
            v32 = *v2;
            v33 = *(_QWORD *)&a1[v32];
            v34 = v33 + 1;
            if (v33 == -1 || v34 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v35 = *(char *)(*(_QWORD *)&a1[*v5] + v33);
            *(_QWORD *)&a1[v32] = v34;
            if (v35 < 0)
            {
              v25 = v31++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0xFu:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v36 = 0;
          while (1)
          {
            v37 = *v2;
            v38 = *(_QWORD *)&a1[v37];
            v39 = v38 + 1;
            if (v38 == -1 || v39 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v40 = *(char *)(*(_QWORD *)&a1[*v5] + v38);
            *(_QWORD *)&a1[v37] = v39;
            if (v40 < 0)
            {
              v25 = v36++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x10u:
        case 0x12u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTraitsPhotoSizeIsValid(a1))
            goto LABEL_751;
          goto LABEL_634;
        case 0x11u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v41 = 0;
          while (1)
          {
            v42 = *v2;
            v43 = *(_QWORD *)&a1[v42];
            v44 = v43 + 1;
            if (v43 == -1 || v44 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v45 = *(char *)(*(_QWORD *)&a1[*v5] + v43);
            *(_QWORD *)&a1[v42] = v44;
            if (v45 < 0)
            {
              v25 = v41++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x13u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v46 = 0;
          while (1)
          {
            v47 = *v2;
            v48 = *(_QWORD *)&a1[v47];
            v49 = v48 + 1;
            if (v48 == -1 || v49 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v50 = *(char *)(*(_QWORD *)&a1[*v5] + v48);
            *(_QWORD *)&a1[v47] = v49;
            if (v50 < 0)
            {
              v25 = v46++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x14u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v51 = 0;
          while (1)
          {
            v52 = *v2;
            v53 = *(_QWORD *)&a1[v52];
            v54 = v53 + 1;
            if (v53 == -1 || v54 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v55 = *(char *)(*(_QWORD *)&a1[*v5] + v53);
            *(_QWORD *)&a1[v52] = v54;
            if (v55 < 0)
            {
              v25 = v51++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x15u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v56 = 0;
          while (1)
          {
            v57 = *v2;
            v58 = *(_QWORD *)&a1[v57];
            v59 = v58 + 1;
            if (v58 == -1 || v59 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v60 = *(char *)(*(_QWORD *)&a1[*v5] + v58);
            *(_QWORD *)&a1[v57] = v59;
            if (v60 < 0)
            {
              v25 = v56++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x17u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v61 = 0;
          while (1)
          {
            v62 = *v2;
            v63 = *(_QWORD *)&a1[v62];
            v64 = v63 + 1;
            if (v63 == -1 || v64 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v65 = *(char *)(*(_QWORD *)&a1[*v5] + v63);
            *(_QWORD *)&a1[v62] = v64;
            if (v65 < 0)
            {
              v25 = v61++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x18u:
          if (v15 == 2)
            goto LABEL_646;
          goto LABEL_751;
        case 0x19u:
          if (v15 == 2)
            goto LABEL_646;
          goto LABEL_751;
        case 0x1Au:
        case 0x1Bu:
        case 0x1Du:
        case 0x35u:
        case 0x4Eu:
          if (v15 != 1)
            goto LABEL_751;
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          if (v18 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_644;
          v19 = v18 + 8;
          if (v19 > *(_QWORD *)&a1[*v3])
            goto LABEL_644;
          *(_QWORD *)&a1[v17] = v19;
          goto LABEL_647;
        case 0x1Cu:
        case 0x3Eu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTraitsTransitScheduleFilterIsValid(a1))
            goto LABEL_751;
          goto LABEL_634;
        case 0x1Eu:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v66 = 0;
          while (1)
          {
            v67 = *v2;
            v68 = *(_QWORD *)&a1[v67];
            v69 = v68 + 1;
            if (v68 == -1 || v69 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v70 = *(char *)(*(_QWORD *)&a1[*v5] + v68);
            *(_QWORD *)&a1[v67] = v69;
            if (v70 < 0)
            {
              v25 = v66++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x1Fu:
          if (v15 == 2)
            goto LABEL_646;
          goto LABEL_751;
        case 0x20u:
          if (v15 == 2)
            goto LABEL_646;
          goto LABEL_751;
        case 0x21u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v71 = 0;
          while (1)
          {
            v72 = *v2;
            v73 = *(_QWORD *)&a1[v72];
            v74 = v73 + 1;
            if (v73 == -1 || v74 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v75 = *(char *)(*(_QWORD *)&a1[*v5] + v73);
            *(_QWORD *)&a1[v72] = v74;
            if (v75 < 0)
            {
              v25 = v71++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x22u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v76 = 0;
          while (1)
          {
            v77 = *v2;
            v78 = *(_QWORD *)&a1[v77];
            v79 = v78 + 1;
            if (v78 == -1 || v79 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v80 = *(char *)(*(_QWORD *)&a1[*v5] + v78);
            *(_QWORD *)&a1[v77] = v79;
            if (v80 < 0)
            {
              v25 = v76++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x23u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v81 = 0;
          while (1)
          {
            v82 = *v2;
            v83 = *(_QWORD *)&a1[v82];
            v84 = v83 + 1;
            if (v83 == -1 || v84 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v85 = *(char *)(*(_QWORD *)&a1[*v5] + v83);
            *(_QWORD *)&a1[v82] = v84;
            if (v85 < 0)
            {
              v25 = v81++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x24u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v86 = 0;
          while (1)
          {
            v87 = *v2;
            v88 = *(_QWORD *)&a1[v87];
            v89 = v88 + 1;
            if (v88 == -1 || v89 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v90 = *(char *)(*(_QWORD *)&a1[*v5] + v88);
            *(_QWORD *)&a1[v87] = v89;
            if (v90 < 0)
            {
              v25 = v86++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x27u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOAutomobileOptionsIsValid(a1))
            goto LABEL_751;
          goto LABEL_634;
        case 0x28u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitOptionsIsValid(a1))
            goto LABEL_751;
          goto LABEL_634;
        case 0x29u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOWalkingOptionsIsValid(a1))
            goto LABEL_751;
          goto LABEL_634;
        case 0x2Au:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_751;
            while (1)
            {
              v91 = *v2;
              v92 = *(_QWORD *)&a1[v91];
              v93 = v92 + 1;
              if (v92 == -1 || v93 > *(_QWORD *)&a1[*v3])
                goto LABEL_643;
              v94 = *(char *)(*(_QWORD *)&a1[*v5] + v92);
              *(_QWORD *)&a1[v91] = v93;
              if (v94 < 0)
              {
                v95 = v15++;
                if (v95 <= 8)
                  continue;
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_751;
LABEL_660:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v356 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v357 = *v2;
              v358 = *(_QWORD *)&a1[v357];
              v359 = v358 + 1;
              if (v358 == -1 || v359 > *(_QWORD *)&a1[*v3])
                break;
              v360 = *(char *)(*(_QWORD *)&a1[*v5] + v358);
              *(_QWORD *)&a1[v357] = v359;
              if (v360 < 0)
              {
                v12 = v356++ >= 9;
                if (!v12)
                  continue;
              }
              goto LABEL_660;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x2Bu:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v96 = 0;
          while (1)
          {
            v97 = *v2;
            v98 = *(_QWORD *)&a1[v97];
            v99 = v98 + 1;
            if (v98 == -1 || v99 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v100 = *(char *)(*(_QWORD *)&a1[*v5] + v98);
            *(_QWORD *)&a1[v97] = v99;
            if (v100 < 0)
            {
              v25 = v96++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x2Cu:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v101 = 0;
          while (1)
          {
            v102 = *v2;
            v103 = *(_QWORD *)&a1[v102];
            v104 = v103 + 1;
            if (v103 == -1 || v104 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v105 = *(char *)(*(_QWORD *)&a1[*v5] + v103);
            *(_QWORD *)&a1[v102] = v104;
            if (v105 < 0)
            {
              v25 = v101++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x2Du:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_751;
            while (1)
            {
              v106 = *v2;
              v107 = *(_QWORD *)&a1[v106];
              v108 = v107 + 1;
              if (v107 == -1 || v108 > *(_QWORD *)&a1[*v3])
                goto LABEL_643;
              v109 = *(char *)(*(_QWORD *)&a1[*v5] + v107);
              *(_QWORD *)&a1[v106] = v108;
              if (v109 < 0)
              {
                v110 = v15++;
                if (v110 <= 8)
                  continue;
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_751;
LABEL_670:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v361 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v362 = *v2;
              v363 = *(_QWORD *)&a1[v362];
              v364 = v363 + 1;
              if (v363 == -1 || v364 > *(_QWORD *)&a1[*v3])
                break;
              v365 = *(char *)(*(_QWORD *)&a1[*v5] + v363);
              *(_QWORD *)&a1[v362] = v364;
              if (v365 < 0)
              {
                v12 = v361++ >= 9;
                if (!v12)
                  continue;
              }
              goto LABEL_670;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x2Eu:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v111 = 0;
          while (1)
          {
            v112 = *v2;
            v113 = *(_QWORD *)&a1[v112];
            v114 = v113 + 1;
            if (v113 == -1 || v114 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v115 = *(char *)(*(_QWORD *)&a1[*v5] + v113);
            *(_QWORD *)&a1[v112] = v114;
            if (v115 < 0)
            {
              v25 = v111++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x2Fu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDVenueIdentifierIsValid(a1))
            goto LABEL_751;
          goto LABEL_634;
        case 0x30u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v116 = 0;
          while (1)
          {
            v117 = *v2;
            v118 = *(_QWORD *)&a1[v117];
            v119 = v118 + 1;
            if (v118 == -1 || v119 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v120 = *(char *)(*(_QWORD *)&a1[*v5] + v118);
            *(_QWORD *)&a1[v117] = v119;
            if (v120 < 0)
            {
              v25 = v116++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x31u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v121 = 0;
          while (1)
          {
            v122 = *v2;
            v123 = *(_QWORD *)&a1[v122];
            v124 = v123 + 1;
            if (v123 == -1 || v124 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v125 = *(char *)(*(_QWORD *)&a1[*v5] + v123);
            *(_QWORD *)&a1[v122] = v124;
            if (v125 < 0)
            {
              v25 = v121++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x32u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v126 = 0;
          while (1)
          {
            v127 = *v2;
            v128 = *(_QWORD *)&a1[v127];
            v129 = v128 + 1;
            if (v128 == -1 || v129 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v130 = *(char *)(*(_QWORD *)&a1[*v5] + v128);
            *(_QWORD *)&a1[v127] = v129;
            if (v130 < 0)
            {
              v25 = v126++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x33u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v131 = 0;
          while (1)
          {
            v132 = *v2;
            v133 = *(_QWORD *)&a1[v132];
            v134 = v133 + 1;
            if (v133 == -1 || v134 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v135 = *(char *)(*(_QWORD *)&a1[*v5] + v133);
            *(_QWORD *)&a1[v132] = v134;
            if (v135 < 0)
            {
              v25 = v131++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x34u:
          if (v15 == 2)
            goto LABEL_646;
          goto LABEL_751;
        case 0x36u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v136 = 0;
          while (1)
          {
            v137 = *v2;
            v138 = *(_QWORD *)&a1[v137];
            v139 = v138 + 1;
            if (v138 == -1 || v139 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v140 = *(char *)(*(_QWORD *)&a1[*v5] + v138);
            *(_QWORD *)&a1[v137] = v139;
            if (v140 < 0)
            {
              v25 = v136++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x37u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v141 = 0;
          while (1)
          {
            v142 = *v2;
            v143 = *(_QWORD *)&a1[v142];
            v144 = v143 + 1;
            if (v143 == -1 || v144 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v145 = *(char *)(*(_QWORD *)&a1[*v5] + v143);
            *(_QWORD *)&a1[v142] = v144;
            if (v145 < 0)
            {
              v25 = v141++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x38u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v146 = 0;
          while (1)
          {
            v147 = *v2;
            v148 = *(_QWORD *)&a1[v147];
            v149 = v148 + 1;
            if (v148 == -1 || v149 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v150 = *(char *)(*(_QWORD *)&a1[*v5] + v148);
            *(_QWORD *)&a1[v147] = v149;
            if (v150 < 0)
            {
              v25 = v146++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x39u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v151 = 0;
          while (1)
          {
            v152 = *v2;
            v153 = *(_QWORD *)&a1[v152];
            v154 = v153 + 1;
            if (v153 == -1 || v154 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v155 = *(char *)(*(_QWORD *)&a1[*v5] + v153);
            *(_QWORD *)&a1[v152] = v154;
            if (v155 < 0)
            {
              v25 = v151++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x3Au:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v156 = 0;
          while (1)
          {
            v157 = *v2;
            v158 = *(_QWORD *)&a1[v157];
            v159 = v158 + 1;
            if (v158 == -1 || v159 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v160 = *(char *)(*(_QWORD *)&a1[*v5] + v158);
            *(_QWORD *)&a1[v157] = v159;
            if (v160 < 0)
            {
              v25 = v156++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x3Bu:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v161 = 0;
          while (1)
          {
            v162 = *v2;
            v163 = *(_QWORD *)&a1[v162];
            v164 = v163 + 1;
            if (v163 == -1 || v164 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v165 = *(char *)(*(_QWORD *)&a1[*v5] + v163);
            *(_QWORD *)&a1[v162] = v164;
            if (v165 < 0)
            {
              v25 = v161++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x3Cu:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_751;
            while (1)
            {
              v166 = *v2;
              v167 = *(_QWORD *)&a1[v166];
              v168 = v167 + 1;
              if (v167 == -1 || v168 > *(_QWORD *)&a1[*v3])
                goto LABEL_643;
              v169 = *(char *)(*(_QWORD *)&a1[*v5] + v167);
              *(_QWORD *)&a1[v166] = v168;
              if (v169 < 0)
              {
                v170 = v15++;
                if (v170 <= 8)
                  continue;
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_751;
LABEL_680:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v366 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v367 = *v2;
              v368 = *(_QWORD *)&a1[v367];
              v369 = v368 + 1;
              if (v368 == -1 || v369 > *(_QWORD *)&a1[*v3])
                break;
              v370 = *(char *)(*(_QWORD *)&a1[*v5] + v368);
              *(_QWORD *)&a1[v367] = v369;
              if (v370 < 0)
              {
                v12 = v366++ >= 9;
                if (!v12)
                  continue;
              }
              goto LABEL_680;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x3Du:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v171 = 0;
          while (1)
          {
            v172 = *v2;
            v173 = *(_QWORD *)&a1[v172];
            v174 = v173 + 1;
            if (v173 == -1 || v174 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v175 = *(char *)(*(_QWORD *)&a1[*v5] + v173);
            *(_QWORD *)&a1[v172] = v174;
            if (v175 < 0)
            {
              v25 = v171++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x3Fu:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v176 = 0;
          while (1)
          {
            v177 = *v2;
            v178 = *(_QWORD *)&a1[v177];
            v179 = v178 + 1;
            if (v178 == -1 || v179 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v180 = *(char *)(*(_QWORD *)&a1[*v5] + v178);
            *(_QWORD *)&a1[v177] = v179;
            if (v180 < 0)
            {
              v25 = v176++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x40u:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_751;
            while (1)
            {
              v181 = *v2;
              v182 = *(_QWORD *)&a1[v181];
              v183 = v182 + 1;
              if (v182 == -1 || v183 > *(_QWORD *)&a1[*v3])
                goto LABEL_643;
              v184 = *(char *)(*(_QWORD *)&a1[*v5] + v182);
              *(_QWORD *)&a1[v181] = v183;
              if (v184 < 0)
              {
                v185 = v15++;
                if (v185 <= 8)
                  continue;
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_751;
LABEL_690:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v371 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v372 = *v2;
              v373 = *(_QWORD *)&a1[v372];
              v374 = v373 + 1;
              if (v373 == -1 || v374 > *(_QWORD *)&a1[*v3])
                break;
              v375 = *(char *)(*(_QWORD *)&a1[*v5] + v373);
              *(_QWORD *)&a1[v372] = v374;
              if (v375 < 0)
              {
                v12 = v371++ >= 9;
                if (!v12)
                  continue;
              }
              goto LABEL_690;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x41u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v186 = 0;
          while (1)
          {
            v187 = *v2;
            v188 = *(_QWORD *)&a1[v187];
            v189 = v188 + 1;
            if (v188 == -1 || v189 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v190 = *(char *)(*(_QWORD *)&a1[*v5] + v188);
            *(_QWORD *)&a1[v187] = v189;
            if (v190 < 0)
            {
              v25 = v186++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x42u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v191 = 0;
          while (1)
          {
            v192 = *v2;
            v193 = *(_QWORD *)&a1[v192];
            v194 = v193 + 1;
            if (v193 == -1 || v194 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v195 = *(char *)(*(_QWORD *)&a1[*v5] + v193);
            *(_QWORD *)&a1[v192] = v194;
            if (v195 < 0)
            {
              v25 = v191++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x43u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v196 = 0;
          while (1)
          {
            v197 = *v2;
            v198 = *(_QWORD *)&a1[v197];
            v199 = v198 + 1;
            if (v198 == -1 || v199 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v200 = *(char *)(*(_QWORD *)&a1[*v5] + v198);
            *(_QWORD *)&a1[v197] = v199;
            if (v200 < 0)
            {
              v25 = v196++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x44u:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_751;
            while (1)
            {
              v201 = *v2;
              v202 = *(_QWORD *)&a1[v201];
              v203 = v202 + 1;
              if (v202 == -1 || v203 > *(_QWORD *)&a1[*v3])
                goto LABEL_643;
              v204 = *(char *)(*(_QWORD *)&a1[*v5] + v202);
              *(_QWORD *)&a1[v201] = v203;
              if (v204 < 0)
              {
                v205 = v15++;
                if (v205 <= 8)
                  continue;
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_751;
LABEL_700:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v376 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v377 = *v2;
              v378 = *(_QWORD *)&a1[v377];
              v379 = v378 + 1;
              if (v378 == -1 || v379 > *(_QWORD *)&a1[*v3])
                break;
              v380 = *(char *)(*(_QWORD *)&a1[*v5] + v378);
              *(_QWORD *)&a1[v377] = v379;
              if (v380 < 0)
              {
                v12 = v376++ >= 9;
                if (!v12)
                  continue;
              }
              goto LABEL_700;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x46u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v206 = 0;
          while (1)
          {
            v207 = *v2;
            v208 = *(_QWORD *)&a1[v207];
            v209 = v208 + 1;
            if (v208 == -1 || v209 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v210 = *(char *)(*(_QWORD *)&a1[*v5] + v208);
            *(_QWORD *)&a1[v207] = v209;
            if (v210 < 0)
            {
              v25 = v206++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x47u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOCyclingOptionsIsValid(a1))
            goto LABEL_751;
          goto LABEL_634;
        case 0x48u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v211 = 0;
          while (1)
          {
            v212 = *v2;
            v213 = *(_QWORD *)&a1[v212];
            v214 = v213 + 1;
            if (v213 == -1 || v214 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v215 = *(char *)(*(_QWORD *)&a1[*v5] + v213);
            *(_QWORD *)&a1[v212] = v214;
            if (v215 < 0)
            {
              v25 = v211++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x49u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDEvChargingPortIsValid(a1))
            goto LABEL_751;
          goto LABEL_634;
        case 0x4Au:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v216 = 0;
          while (1)
          {
            v217 = *v2;
            v218 = *(_QWORD *)&a1[v217];
            v219 = v218 + 1;
            if (v218 == -1 || v219 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v220 = *(char *)(*(_QWORD *)&a1[*v5] + v218);
            *(_QWORD *)&a1[v217] = v219;
            if (v220 < 0)
            {
              v25 = v216++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x4Bu:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_751;
            while (1)
            {
              v221 = *v2;
              v222 = *(_QWORD *)&a1[v221];
              v223 = v222 + 1;
              if (v222 == -1 || v223 > *(_QWORD *)&a1[*v3])
                goto LABEL_643;
              v224 = *(char *)(*(_QWORD *)&a1[*v5] + v222);
              *(_QWORD *)&a1[v221] = v223;
              if (v224 < 0)
              {
                v225 = v15++;
                if (v225 <= 8)
                  continue;
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_751;
LABEL_710:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v381 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v382 = *v2;
              v383 = *(_QWORD *)&a1[v382];
              v384 = v383 + 1;
              if (v383 == -1 || v384 > *(_QWORD *)&a1[*v3])
                break;
              v385 = *(char *)(*(_QWORD *)&a1[*v5] + v383);
              *(_QWORD *)&a1[v382] = v384;
              if (v385 < 0)
              {
                v12 = v381++ >= 9;
                if (!v12)
                  continue;
              }
              goto LABEL_710;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x4Cu:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v226 = 0;
          while (1)
          {
            v227 = *v2;
            v228 = *(_QWORD *)&a1[v227];
            v229 = v228 + 1;
            if (v228 == -1 || v229 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v230 = *(char *)(*(_QWORD *)&a1[*v5] + v228);
            *(_QWORD *)&a1[v227] = v229;
            if (v230 < 0)
            {
              v25 = v226++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x4Du:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v231 = 0;
          while (1)
          {
            v232 = *v2;
            v233 = *(_QWORD *)&a1[v232];
            v234 = v233 + 1;
            if (v233 == -1 || v234 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v235 = *(char *)(*(_QWORD *)&a1[*v5] + v233);
            *(_QWORD *)&a1[v232] = v234;
            if (v235 < 0)
            {
              v25 = v231++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x4Fu:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_751;
            while (1)
            {
              v236 = *v2;
              v237 = *(_QWORD *)&a1[v236];
              v238 = v237 + 1;
              if (v237 == -1 || v238 > *(_QWORD *)&a1[*v3])
                goto LABEL_643;
              v239 = *(char *)(*(_QWORD *)&a1[*v5] + v237);
              *(_QWORD *)&a1[v236] = v238;
              if (v239 < 0)
              {
                v240 = v15++;
                if (v240 <= 8)
                  continue;
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_751;
LABEL_720:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v386 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v387 = *v2;
              v388 = *(_QWORD *)&a1[v387];
              v389 = v388 + 1;
              if (v388 == -1 || v389 > *(_QWORD *)&a1[*v3])
                break;
              v390 = *(char *)(*(_QWORD *)&a1[*v5] + v388);
              *(_QWORD *)&a1[v387] = v389;
              if (v390 < 0)
              {
                v12 = v386++ >= 9;
                if (!v12)
                  continue;
              }
              goto LABEL_720;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x50u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v241 = 0;
          while (1)
          {
            v242 = *v2;
            v243 = *(_QWORD *)&a1[v242];
            v244 = v243 + 1;
            if (v243 == -1 || v244 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v245 = *(char *)(*(_QWORD *)&a1[*v5] + v243);
            *(_QWORD *)&a1[v242] = v244;
            if (v245 < 0)
            {
              v25 = v241++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x51u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v246 = 0;
          while (1)
          {
            v247 = *v2;
            v248 = *(_QWORD *)&a1[v247];
            v249 = v248 + 1;
            if (v248 == -1 || v249 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v250 = *(char *)(*(_QWORD *)&a1[*v5] + v248);
            *(_QWORD *)&a1[v247] = v249;
            if (v250 < 0)
            {
              v25 = v246++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x52u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDViewportInfoIsValid(a1))
            goto LABEL_751;
          goto LABEL_634;
        case 0x53u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v251 = 0;
          while (1)
          {
            v252 = *v2;
            v253 = *(_QWORD *)&a1[v252];
            v254 = v253 + 1;
            if (v253 == -1 || v254 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v255 = *(char *)(*(_QWORD *)&a1[*v5] + v253);
            *(_QWORD *)&a1[v252] = v254;
            if (v255 < 0)
            {
              v25 = v251++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x54u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDResultRefinementQueryIsValid(a1))
            goto LABEL_751;
          goto LABEL_634;
        case 0x55u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v256 = 0;
          while (1)
          {
            v257 = *v2;
            v258 = *(_QWORD *)&a1[v257];
            v259 = v258 + 1;
            if (v258 == -1 || v259 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v260 = *(char *)(*(_QWORD *)&a1[*v5] + v258);
            *(_QWORD *)&a1[v257] = v259;
            if (v260 < 0)
            {
              v25 = v256++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x56u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v261 = 0;
          while (1)
          {
            v262 = *v2;
            v263 = *(_QWORD *)&a1[v262];
            v264 = v263 + 1;
            if (v263 == -1 || v264 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v265 = *(char *)(*(_QWORD *)&a1[*v5] + v263);
            *(_QWORD *)&a1[v262] = v264;
            if (v265 < 0)
            {
              v25 = v261++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x57u:
          if (v15 == 2)
            goto LABEL_646;
          goto LABEL_751;
        case 0x58u:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_751;
            while (1)
            {
              v266 = *v2;
              v267 = *(_QWORD *)&a1[v266];
              v268 = v267 + 1;
              if (v267 == -1 || v268 > *(_QWORD *)&a1[*v3])
                goto LABEL_643;
              v269 = *(char *)(*(_QWORD *)&a1[*v5] + v267);
              *(_QWORD *)&a1[v266] = v268;
              if (v269 < 0)
              {
                v270 = v15++;
                if (v270 <= 8)
                  continue;
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_751;
LABEL_730:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v391 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v392 = *v2;
              v393 = *(_QWORD *)&a1[v392];
              v394 = v393 + 1;
              if (v393 == -1 || v394 > *(_QWORD *)&a1[*v3])
                break;
              v395 = *(char *)(*(_QWORD *)&a1[*v5] + v393);
              *(_QWORD *)&a1[v392] = v394;
              if (v395 < 0)
              {
                v12 = v391++ >= 9;
                if (!v12)
                  continue;
              }
              goto LABEL_730;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x59u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v271 = 0;
          while (1)
          {
            v272 = *v2;
            v273 = *(_QWORD *)&a1[v272];
            v274 = v273 + 1;
            if (v273 == -1 || v274 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v275 = *(char *)(*(_QWORD *)&a1[*v5] + v273);
            *(_QWORD *)&a1[v272] = v274;
            if (v275 < 0)
            {
              v25 = v271++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x5Au:
        case 0x5Cu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_751;
          goto LABEL_634;
        case 0x5Bu:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v276 = 0;
          while (1)
          {
            v277 = *v2;
            v278 = *(_QWORD *)&a1[v277];
            v279 = v278 + 1;
            if (v278 == -1 || v279 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v280 = *(char *)(*(_QWORD *)&a1[*v5] + v278);
            *(_QWORD *)&a1[v277] = v279;
            if (v280 < 0)
            {
              v25 = v276++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x5Eu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOAddStopRouteInfoIsValid(a1))
            goto LABEL_751;
          goto LABEL_634;
        case 0x5Fu:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v281 = 0;
          while (1)
          {
            v282 = *v2;
            v283 = *(_QWORD *)&a1[v282];
            v284 = v283 + 1;
            if (v283 == -1 || v284 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v285 = *(char *)(*(_QWORD *)&a1[*v5] + v283);
            *(_QWORD *)&a1[v282] = v284;
            if (v285 < 0)
            {
              v25 = v281++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x60u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v286 = 0;
          while (1)
          {
            v287 = *v2;
            v288 = *(_QWORD *)&a1[v287];
            v289 = v288 + 1;
            if (v288 == -1 || v289 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v290 = *(char *)(*(_QWORD *)&a1[*v5] + v288);
            *(_QWORD *)&a1[v287] = v289;
            if (v290 < 0)
            {
              v25 = v286++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x61u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v291 = 0;
          while (1)
          {
            v292 = *v2;
            v293 = *(_QWORD *)&a1[v292];
            v294 = v293 + 1;
            if (v293 == -1 || v294 > *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v295 = *(char *)(*(_QWORD *)&a1[*v5] + v293);
            *(_QWORD *)&a1[v292] = v294;
            if (v295 < 0)
            {
              v25 = v291++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x62u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPrivacyMetadataIsValid(a1))
            goto LABEL_751;
          goto LABEL_634;
        case 0x63u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v296 = 0;
          while (1)
          {
            v297 = *v2;
            v298 = *(_QWORD *)&a1[v297];
            if (v298 == -1 || v298 >= *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v299 = v298 + 1;
            v300 = *(char *)(*(_QWORD *)&a1[*v5] + v298);
            *(_QWORD *)&a1[v297] = v299;
            if (v300 < 0)
            {
              v25 = v296++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x64u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v301 = 0;
          while (1)
          {
            v302 = *v2;
            v303 = *(_QWORD *)&a1[v302];
            if (v303 == -1 || v303 >= *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v304 = v303 + 1;
            v305 = *(char *)(*(_QWORD *)&a1[*v5] + v303);
            *(_QWORD *)&a1[v302] = v304;
            if (v305 < 0)
            {
              v25 = v301++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x66u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v306 = 0;
          while (1)
          {
            v307 = *v2;
            v308 = *(_QWORD *)&a1[v307];
            if (v308 == -1 || v308 >= *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v309 = v308 + 1;
            v310 = *(char *)(*(_QWORD *)&a1[*v5] + v308);
            *(_QWORD *)&a1[v307] = v309;
            if (v310 < 0)
            {
              v25 = v306++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x67u:
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_751:
              PBReaderRecallMark();
              return 0;
            }
LABEL_740:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v396 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v397 = *v2;
                v398 = *(_QWORD *)&a1[v397];
                if (v398 == -1 || v398 >= *(_QWORD *)&a1[*v3])
                  break;
                v399 = v398 + 1;
                v400 = *(char *)(*(_QWORD *)&a1[*v5] + v398);
                *(_QWORD *)&a1[v397] = v399;
                if (v400 < 0)
                {
                  v12 = v396++ >= 9;
                  if (!v12)
                    continue;
                }
                goto LABEL_740;
              }
              a1[*v4] = 1;
            }
LABEL_634:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_751;
            while (1)
            {
              v311 = *v2;
              v312 = *(_QWORD *)&a1[v311];
              if (v312 == -1 || v312 >= *(_QWORD *)&a1[*v3])
                break;
              v313 = v312 + 1;
              v314 = *(char *)(*(_QWORD *)&a1[*v5] + v312);
              *(_QWORD *)&a1[v311] = v313;
              if (v314 < 0)
              {
                v315 = v15++;
                if (v315 <= 8)
                  continue;
              }
              goto LABEL_647;
            }
LABEL_643:
            v13 = *v4;
LABEL_644:
            a1[v13] = 1;
          }
LABEL_647:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_749;
          break;
        case 0x68u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v316 = 0;
          while (1)
          {
            v317 = *v2;
            v318 = *(_QWORD *)&a1[v317];
            if (v318 == -1 || v318 >= *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v319 = v318 + 1;
            v320 = *(char *)(*(_QWORD *)&a1[*v5] + v318);
            *(_QWORD *)&a1[v317] = v319;
            if (v320 < 0)
            {
              v25 = v316++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x69u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOSearchImplicitFilterInfoIsValid(a1))
            goto LABEL_751;
          goto LABEL_634;
        case 0x6Au:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v321 = 0;
          while (1)
          {
            v322 = *v2;
            v323 = *(_QWORD *)&a1[v322];
            if (v323 == -1 || v323 >= *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v324 = v323 + 1;
            v325 = *(char *)(*(_QWORD *)&a1[*v5] + v323);
            *(_QWORD *)&a1[v322] = v324;
            if (v325 < 0)
            {
              v25 = v321++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x6Bu:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v326 = 0;
          while (1)
          {
            v327 = *v2;
            v328 = *(_QWORD *)&a1[v327];
            if (v328 == -1 || v328 >= *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v329 = v328 + 1;
            v330 = *(char *)(*(_QWORD *)&a1[*v5] + v328);
            *(_QWORD *)&a1[v327] = v329;
            if (v330 < 0)
            {
              v25 = v326++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x6Cu:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v331 = 0;
          while (1)
          {
            v332 = *v2;
            v333 = *(_QWORD *)&a1[v332];
            if (v333 == -1 || v333 >= *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v334 = v333 + 1;
            v335 = *(char *)(*(_QWORD *)&a1[*v5] + v333);
            *(_QWORD *)&a1[v332] = v334;
            if (v335 < 0)
            {
              v25 = v331++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x6Du:
          if (v15 == 2)
            goto LABEL_646;
          goto LABEL_751;
        case 0x6Eu:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v336 = 0;
          while (1)
          {
            v337 = *v2;
            v338 = *(_QWORD *)&a1[v337];
            if (v338 == -1 || v338 >= *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v339 = v338 + 1;
            v340 = *(char *)(*(_QWORD *)&a1[*v5] + v338);
            *(_QWORD *)&a1[v337] = v339;
            if (v340 < 0)
            {
              v25 = v336++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x70u:
          if (v15 != 2
            || !PBReaderPlaceMark()
            || !GEOPDAutocompleteSessionDataIsValid((unsigned __int8 *)a1))
          {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x71u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v341 = 0;
          while (1)
          {
            v342 = *v2;
            v343 = *(_QWORD *)&a1[v342];
            if (v343 == -1 || v343 >= *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v344 = v343 + 1;
            v345 = *(char *)(*(_QWORD *)&a1[*v5] + v343);
            *(_QWORD *)&a1[v342] = v344;
            if (v345 < 0)
            {
              v25 = v341++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x72u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOPDSSessionUserActionMetadataIsValid(a1))
            goto LABEL_634;
          goto LABEL_751;
        case 0x73u:
          if ((v8 & 7) != 0)
            goto LABEL_751;
          v346 = 0;
          while (1)
          {
            v347 = *v2;
            v348 = *(_QWORD *)&a1[v347];
            if (v348 == -1 || v348 >= *(_QWORD *)&a1[*v3])
              goto LABEL_643;
            v349 = v348 + 1;
            v350 = *(char *)(*(_QWORD *)&a1[*v5] + v348);
            *(_QWORD *)&a1[v347] = v349;
            if (v350 < 0)
            {
              v25 = v346++ > 8;
              if (!v25)
                continue;
            }
            goto LABEL_647;
          }
        case 0x74u:
          if (v15 == 2)
            goto LABEL_646;
          goto LABEL_751;
        default:
LABEL_646:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            goto LABEL_647;
          goto LABEL_751;
      }
    }
  }
LABEL_749:
  v401 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v401;
}

BOOL GEOTraitsPhotoSizeIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_39;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_39;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_41;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0)
          {
            v21 = v16++ > 8;
            if (!v21)
              continue;
          }
          goto LABEL_38;
        }
LABEL_36:
        a1[*v4] = 1;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        v27 = 0;
        goto LABEL_40;
      }
LABEL_38:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_39;
    }
    if ((v8 & 7) != 0)
      goto LABEL_41;
    v22 = 0;
    while (1)
    {
      v23 = *v2;
      v24 = *(_QWORD *)&a1[v23];
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
        goto LABEL_36;
      v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
      *(_QWORD *)&a1[v23] = v25;
      if (v26 < 0)
      {
        v21 = v22++ > 8;
        if (!v21)
          continue;
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  v27 = a1[*v4] == 0;
LABEL_40:
  PBReaderRecallMark();
  return v27;
}

BOOL GEOTraitsTransitScheduleFilterIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  _BOOL8 v18;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_31;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_31;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2 || (_DWORD)v17 == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOTraitsTransitScheduleModeFilterIsValid(a1))
          goto LABEL_32;
LABEL_28:
        PBReaderRecallMark();
        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_32;
LABEL_30:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_31;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOTraitsTransitScheduleTimeRangeIsValid(a1))
    {
LABEL_32:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_28;
  }
LABEL_31:
  v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

BOOL GEOSearchImplicitFilterInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_39;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_39;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_41;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0)
          {
            v21 = v16++ > 8;
            if (!v21)
              continue;
          }
          goto LABEL_38;
        }
LABEL_36:
        a1[*v4] = 1;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        v27 = 0;
        goto LABEL_40;
      }
LABEL_38:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_39;
    }
    if ((v8 & 7) != 0)
      goto LABEL_41;
    v22 = 0;
    while (1)
    {
      v23 = *v2;
      v24 = *(_QWORD *)&a1[v23];
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
        goto LABEL_36;
      v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
      *(_QWORD *)&a1[v23] = v25;
      if (v26 < 0)
      {
        v21 = v22++ > 8;
        if (!v21)
          continue;
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  v27 = a1[*v4] == 0;
LABEL_40:
  PBReaderRecallMark();
  return v27;
}

uint64_t _GEOMapServiceTraitsIsDirty(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v7;
  uint64_t v8;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 616));
  v2 = (uint64_t *)(a1 + 756);
  v3 = *(_QWORD *)(a1 + 764);
  if ((v3 & 0x200000003800) != 0)
    return 1;
  if ((v3 & 0x100000) != 0)
  {
    if (GEOLocationIsDirty(*(os_unfair_lock_s **)(a1 + 384)))
      return 1;
    v2 = (uint64_t *)(a1 + 756);
    v3 = *(_QWORD *)(a1 + 764);
  }
  v4 = *v2;
  if ((v3 & 0x830E30100) != 0)
    return 1;
  if ((v3 & 0x10000000000) == 0)
    goto LABEL_9;
  if (GEOTraitsTransitScheduleFilterIsDirty(*(_QWORD *)(a1 + 568)))
    return 1;
  v4 = *(_QWORD *)(a1 + 756);
  v3 = *(_QWORD *)(a1 + 764);
LABEL_9:
  if ((v3 & 0x109000000) != 0)
    return 1;
  if ((v3 & 0x8000) != 0)
  {
    if ((GEOAutomobileOptionsIsDirty(*(os_unfair_lock_s **)(a1 + 328)) & 1) != 0)
      return 1;
    v4 = *(_QWORD *)(a1 + 756);
    v3 = *(_QWORD *)(a1 + 764);
  }
  if ((v3 & 0x8000000000) != 0)
  {
    if (GEOTransitOptionsIsDirty(*(_QWORD *)(a1 + 560)))
      return 1;
    v4 = *(_QWORD *)(a1 + 756);
    v3 = *(_QWORD *)(a1 + 764);
  }
  if ((v3 & 0x100000000000) != 0)
  {
    if (GEOWalkingOptionsIsDirty(*(_QWORD *)(a1 + 600)))
      return 1;
    v4 = *(_QWORD *)(a1 + 756);
    v3 = *(_QWORD *)(a1 + 764);
  }
  if (v4 & 0x8000000000000000 | v3 & 1)
    return 1;
  if ((v3 & 0x80000000000) != 0)
  {
    if (GEOPDVenueIdentifierIsDirty(*(_QWORD *)(a1 + 592)))
      return 1;
    v3 = *(_QWORD *)(a1 + 764);
  }
  if ((v3 & 0x408) != 0)
    return 1;
  if ((v3 & 0x20000000000) != 0)
  {
    if (GEOTraitsTransitScheduleFilterIsDirty(*(_QWORD *)(a1 + 576)))
      return 1;
    v3 = *(_QWORD *)(a1 + 764);
  }
  if ((v3 & 0x30) != 0)
    return 1;
  if ((v3 & 0x80000) != 0)
  {
    if (GEOCyclingOptionsIsDirty(*(_QWORD *)(a1 + 376)))
      return 1;
    v3 = *(_QWORD *)(a1 + 764);
  }
  if ((v3 & 0x42000082) != 0)
    return 1;
  if ((v3 & 0x400000000) != 0)
  {
    if ((GEOPDResultRefinementQueryIsDirty(*(os_unfair_lock_s **)(a1 + 512)) & 1) != 0)
      return 1;
    v3 = *(_QWORD *)(a1 + 764);
  }
  if ((v3 & 0x2000044040) != 0)
    return 1;
  if ((v3 & 0x200) != 0)
  {
    if ((GEOAddStopRouteInfoIsDirty(*(os_unfair_lock_s **)(a1 + 280)) & 1) != 0)
      return 1;
    v3 = *(_QWORD *)(a1 + 764);
  }
  if ((v3 & 0x45284000004) != 0)
    return 1;
  if ((v3 & 0x8000000) == 0)
    return 0;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v7 = *(id *)(a1 + 440);
  v5 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v8 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(v7);
        if (GEOLocationIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v10 + 1) + 8 * i)))
        {
          v5 = 1;
          goto LABEL_54;
        }
      }
      v5 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_54:

  return v5;
}

os_unfair_lock_s *GEOMapServiceTraitsIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOMapServiceTraitsIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 154);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

unint64_t GEOMapServiceTraitsClearSensitiveFields(id *a1, uint64_t a2, int a3)
{
  void *v6;
  int HasSensitiveFields;
  void *v8;
  _DWORD *v9;
  unint64_t result;
  unint64_t i;
  uint64_t v12;
  void *v13;
  _DWORD *v14;

  if (a3
    && objc_msgSend(a1, "hasDeviceLocation")
    && (objc_msgSend(a1, "deviceLocation"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v6),
        v6,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "deviceLocation");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (_DWORD *)objc_msgSend(v8, "copy");

    GEOLocationClearSensitiveFields(v9);
    objc_msgSend(a1, "setDeviceLocation:", v9);
  }
  else
  {
    objc_msgSend(a1, "deviceLocation");
    v9 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "clearSensitiveFields:", a2);
  }

  -[GEOMapServiceTraits _readHistoricalLocations]((uint64_t)a1);
  result = objc_msgSend(a1[55], "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      objc_msgSend(a1[55], "objectAtIndexedSubscript:", i);
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = (void *)v12;
      if (a3 && GEOLocationHasSensitiveFields(v12))
      {
        v14 = (_DWORD *)objc_msgSend(v13, "copy");
        GEOLocationClearSensitiveFields(v14);
        objc_msgSend(a1[55], "replaceObjectAtIndex:withObject:", i, v14);

      }
      else
      {
        objc_msgSend(v13, "clearSensitiveFields:", a2);
      }

      result = objc_msgSend(a1[55], "count");
    }
  }
  return result;
}

uint64_t GEOMapServiceTraitsHasSensitiveFields(void *a1)
{
  void *v2;
  char HasSensitiveFields;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  objc_msgSend(a1, "deviceLocation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v2);

  if ((HasSensitiveFields & 1) != 0)
    return 1;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "historicalLocations", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v12;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v5);
        if ((GEOLocationHasSensitiveFields(*(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v9)) & 1) != 0)
        {
          v4 = 1;
          goto LABEL_15;
        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v7)
        continue;
      break;
    }
  }
  v4 = 0;
LABEL_15:

  return v4;
}

void sub_1894E649C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894E6A60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMuninViewStateReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  GEOCameraFrame *v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  char v47;
  char v48;
  int v49;
  int v50;
  void *v51;
  int v53;
  int *v54;
  char v55;
  char v56;
  char v57;
  BOOL v58;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v7 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v55 = v17;
        v19 = v18 | v17;
        if (((v18 | v7) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v58 = v18;
        v56 = v19;
        v57 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v8;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_66;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_66:
      v53 = 1;
      goto LABEL_67;
    }
    v34 = v26 >> 3;
    v35 = v58;
    if ((v57 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    if ((_DWORD)v34 == 2)
      break;
    if ((_DWORD)v34 == 1)
    {
      if (!v35)
        goto LABEL_57;
      if ((*(_BYTE *)(a1 + 52) & 2) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_86;
        v40 = objc_alloc_init(GEOCameraFrame);
        if (!GEOCameraFrameReadAllFrom((uint64_t)v40, (void *)v3))
          goto LABEL_85;
        PBReaderRecallMark();
        v41 = 24;
LABEL_50:
        v42 = *(void **)(a1 + v41);
        *(_QWORD *)(a1 + v41) = v40;

        --v8;
LABEL_64:
        v22 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_65;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_86;
      v47 = *(_BYTE *)(a1 + 52) << 6;
LABEL_63:
      v8 += v47 >> 7;
      goto LABEL_64;
    }
    if ((v55 & 1) == 0 || (*(_BYTE *)(a1 + 52) & 1) != 0)
    {
LABEL_57:
      v46 = PBReaderSkipValueWithTag();
      v22 = (int *)MEMORY[0x1E0D82BC8];
      if ((v46 & 1) == 0)
      {
        v53 = 0;
        goto LABEL_67;
      }
      goto LABEL_65;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v44 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v43;

    }
    v45 = PBUnknownFieldAdd();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if (!v45)
    {
      v53 = 0;
      v54 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
      goto LABEL_68;
    }
LABEL_65:
    if (!(v56 & 1 | (v8 != 0)))
      goto LABEL_66;
  }
  if (!v35)
    goto LABEL_57;
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_86;
    v47 = 32 * *(_BYTE *)(a1 + 52);
    goto LABEL_63;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_86;
  v40 = objc_alloc_init(GEOLocationInfo);
  if (GEOLocationInfoReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    v41 = 32;
    goto LABEL_50;
  }
LABEL_85:

LABEL_86:
  v53 = 0;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_67:
  v54 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
  if ((v55 & 1) == 0)
    goto LABEL_69;
LABEL_68:
  *(_BYTE *)(a1 + v54[7]) |= 1u;
LABEL_69:
  if (v58 || (v53 & 1) == 0)
  {
    *(_BYTE *)(a1 + v54[7]) |= 2u;
    *(_BYTE *)(a1 + v54[7]) |= 4u;
    goto LABEL_79;
  }
  if (v20)
  {
    while (1)
    {
      v50 = *v20++;
      v49 = v50;
      if (v50 == 1)
        break;
      if (v49 == 2)
      {
        v48 = 4;
LABEL_75:
        *(_BYTE *)(a1 + v54[7]) |= v48;
      }
      else if (!v49)
      {
        goto LABEL_79;
      }
    }
    v48 = 2;
    goto LABEL_75;
  }
LABEL_79:
  if (v53)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v58)
  {
    v51 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1894E70F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894E76E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMuninViewStateReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOMuninViewStateReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOMuninViewStateReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOMuninViewStateReadAllFrom_initialTag;
  Specified = GEOMuninViewStateReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1894E78A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMuninViewStateReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMuninViewStateReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894E7900(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMuninViewStateIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_30;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_30;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOCameraFrameIsValid(a1))
          goto LABEL_31;
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_31;
LABEL_29:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_30;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocationInfoIsValid(a1))
    {
LABEL_31:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_27;
  }
LABEL_30:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_1894E7C7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL _GEOMuninViewStateIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  if ((*(_BYTE *)(a1 + 52) & 0xA) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
    return GEOLocationInfoIsDirty(*(_QWORD *)(a1 + 32));
  return 0;
}

os_unfair_lock_s *GEOMuninViewStateIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  _BOOL8 IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOMuninViewStateIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1894E7F70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894E81BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894E83E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEONetworkEventDataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint32x4_t v13;
  int8x16_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  unsigned __int8 v21;
  int *v22;
  int *v23;
  int *v24;
  int *v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  BOOL v33;
  int v34;
  unint64_t v36;
  BOOL v37;
  int *v38;
  int v39;
  int v40;
  BOOL v41;
  GEOClientMetrics *v42;
  void *v43;
  id v44;
  void *v45;
  int v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  void *v102;
  int v104;
  char v105;
  char v106;
  char v107;
  char v108;
  BOOL v109;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 124);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 120));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 156);
  v13 = (uint32x4_t)vdupq_n_s32(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  v15 = vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CDE460), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CDE470), v14)))+ ((v12 >> 15) & 1)+ ((v12 >> 10) & 1)+ ((v12 >> 8) & 1);
  while (2)
  {
    v16 = 1;
    v17 = 1;
    v18 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v17 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v19 = v15 > 7;
        v20 = v19 & ~(_BYTE)v11 | v9;
        v21 = v19 | v11;
        v105 = v20;
        v106 = v8;
        v107 = v21 | v20;
        if (((v21 | v8) & 1) != 0)
          v22 = 0;
        else
          v22 = a3;
        v23 = (int *)MEMORY[0x1E0D82BF0];
        v108 = (v22 == 0) | v21;
        v109 = v21;
        v24 = (int *)MEMORY[0x1E0D82BC8];
        v25 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v15;
LABEL_7:
        v16 = v9;
LABEL_8:
        v17 = v10;
        v18 = v11;
LABEL_10:
        ++v7;
        v9 = v16;
        v10 = v17;
        v11 = v18;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v23) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v24))
      goto LABEL_196;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    while (1)
    {
      v29 = *v23;
      v30 = *(_QWORD *)(v3 + v29);
      v31 = v30 + 1;
      if (v30 == -1 || v31 > *(_QWORD *)(v3 + *v6))
        break;
      v32 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v30);
      *(_QWORD *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0)
        goto LABEL_25;
      v26 += 7;
      v33 = v27++ >= 9;
      if (v33)
      {
        v28 = 0;
        v34 = *(unsigned __int8 *)(v3 + *v24);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v24) = 1;
LABEL_25:
    v34 = *(unsigned __int8 *)(v3 + *v24);
    if (*(_BYTE *)(v3 + *v24))
      v28 = 0;
LABEL_27:
    if (v34 || (v28 & 7) == 4)
    {
LABEL_196:
      v104 = 1;
      goto LABEL_197;
    }
    v36 = v28 >> 3;
    v37 = v109;
    if ((v108 & 1) == 0)
    {
      v38 = v22;
      do
      {
        v40 = *v38++;
        v39 = v40;
        v37 = v40 != 0;
        if (v40)
          v41 = v39 == (_DWORD)v36;
        else
          v41 = 1;
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        if (!v37)
          goto LABEL_141;
        if ((*(_BYTE *)(a1 + 157) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_220;
          v42 = objc_alloc_init(GEOClientMetrics);
          if (GEOClientMetricsReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            v43 = *(void **)(a1 + 40);
            *(_QWORD *)(a1 + 40) = v42;
            goto LABEL_140;
          }
          goto LABEL_219;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_220;
        v99 = (int)(*(_DWORD *)(a1 + 156) << 20) >> 31;
        goto LABEL_190;
      case 2:
        if ((v106 & 1) == 0)
          goto LABEL_141;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        *(_DWORD *)(a1 + 156) |= 8u;
        while (2)
        {
          v50 = *v23;
          v51 = *(_QWORD *)(v3 + v50);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v51);
            *(_QWORD *)(v3 + v50) = v52;
            v49 |= (unint64_t)(v53 & 0x7F) << v47;
            if (v53 < 0)
            {
              v47 += 7;
              v33 = v48++ >= 9;
              if (v33)
              {
                LODWORD(v49) = 0;
                goto LABEL_146;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          LODWORD(v49) = 0;
LABEL_146:
        v98 = 136;
        goto LABEL_171;
      case 3:
        if ((v106 & 1) == 0)
          goto LABEL_141;
        v54 = 0;
        v55 = 0;
        v49 = 0;
        *(_DWORD *)(a1 + 156) |= 4u;
        while (2)
        {
          v56 = *v23;
          v57 = *(_QWORD *)(v3 + v56);
          v58 = v57 + 1;
          if (v57 == -1 || v58 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v57);
            *(_QWORD *)(v3 + v56) = v58;
            v49 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              v33 = v55++ >= 9;
              if (v33)
              {
                LODWORD(v49) = 0;
                goto LABEL_150;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          LODWORD(v49) = 0;
LABEL_150:
        v98 = 132;
        goto LABEL_171;
      case 4:
        if ((v106 & 1) == 0)
          goto LABEL_141;
        v60 = 0;
        v61 = 0;
        v49 = 0;
        *(_DWORD *)(a1 + 156) |= 0x20u;
        while (2)
        {
          v62 = *v23;
          v63 = *(_QWORD *)(v3 + v62);
          v64 = v63 + 1;
          if (v63 == -1 || v64 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v63);
            *(_QWORD *)(v3 + v62) = v64;
            v49 |= (unint64_t)(v65 & 0x7F) << v60;
            if (v65 < 0)
            {
              v60 += 7;
              v33 = v61++ >= 9;
              if (v33)
              {
                LODWORD(v49) = 0;
                goto LABEL_154;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          LODWORD(v49) = 0;
LABEL_154:
        v98 = 144;
        goto LABEL_171;
      case 5:
        if ((v106 & 1) == 0)
          goto LABEL_141;
        v66 = 0;
        v67 = 0;
        v68 = 0;
        *(_DWORD *)(a1 + 156) |= 0x80u;
        while (2)
        {
          v69 = *v23;
          v70 = *(_QWORD *)(v3 + v69);
          v71 = v70 + 1;
          if (v70 == -1 || v71 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v72 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v70);
            *(_QWORD *)(v3 + v69) = v71;
            v68 |= (unint64_t)(v72 & 0x7F) << v66;
            if (v72 < 0)
            {
              v66 += 7;
              v33 = v67++ >= 9;
              if (v33)
              {
                v68 = 0;
                goto LABEL_158;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          v68 = 0;
LABEL_158:
        *(_BYTE *)(a1 + 152) = v68 != 0;
        goto LABEL_192;
      case 6:
        if (!v37)
          goto LABEL_141;
        if ((*(_BYTE *)(a1 + 158) & 1) == 0)
        {
          PBReaderReadString();
          v73 = objc_claimAutoreleasedReturnValue();
          v74 = 96;
          goto LABEL_139;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_220;
        v99 = (int)(*(_DWORD *)(a1 + 156) << 15) >> 31;
        goto LABEL_190;
      case 7:
        if (!v37)
          goto LABEL_141;
        if ((*(_BYTE *)(a1 + 158) & 2) == 0)
        {
          PBReaderReadString();
          v73 = objc_claimAutoreleasedReturnValue();
          v74 = 104;
          goto LABEL_139;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_220;
        v99 = (int)(*(_DWORD *)(a1 + 156) << 14) >> 31;
        goto LABEL_190;
      case 8:
        if (!v37)
          goto LABEL_141;
        if ((*(_BYTE *)(a1 + 158) & 4) == 0)
        {
          PBReaderReadString();
          v73 = objc_claimAutoreleasedReturnValue();
          v74 = 112;
          goto LABEL_139;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_220;
        v99 = (int)(*(_DWORD *)(a1 + 156) << 13) >> 31;
        goto LABEL_190;
      case 9:
        if (!v37)
          goto LABEL_141;
        if ((*(_BYTE *)(a1 + 157) & 0x20) == 0)
        {
          PBReaderReadString();
          v73 = objc_claimAutoreleasedReturnValue();
          v74 = 64;
          goto LABEL_139;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_220;
        v99 = (int)(*(_DWORD *)(a1 + 156) << 18) >> 31;
        goto LABEL_190;
      case 10:
        if ((v106 & 1) == 0)
          goto LABEL_141;
        v75 = 0;
        v76 = 0;
        v77 = 0;
        *(_DWORD *)(a1 + 156) |= 1u;
        while (2)
        {
          v78 = *v23;
          v79 = *(_QWORD *)(v3 + v78);
          v80 = v79 + 1;
          if (v79 == -1 || v80 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v81 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v79);
            *(_QWORD *)(v3 + v78) = v80;
            v77 |= (unint64_t)(v81 & 0x7F) << v75;
            if (v81 < 0)
            {
              v75 += 7;
              v33 = v76++ >= 9;
              if (v33)
              {
                v77 = 0;
                goto LABEL_162;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          v77 = 0;
LABEL_162:
        *(_QWORD *)(a1 + 56) = v77;
        goto LABEL_192;
      case 11:
        if (!v37 || (*(_BYTE *)(a1 + 157) & 2) != 0)
          goto LABEL_141;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_220;
        v42 = objc_alloc_init(GEOLogMsgState);
        if (GEOLogMsgStateReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          -[GEONetworkEventData _addNoFlagsAdditionalStates:](a1, v42);

LABEL_191:
          v24 = (int *)MEMORY[0x1E0D82BC8];
          v25 = (int *)MEMORY[0x1E0D82BB8];
LABEL_192:
          if (!(v107 & 1 | (v7 != 0)))
            goto LABEL_196;
          continue;
        }
LABEL_219:

LABEL_220:
        v104 = 0;
        v24 = (int *)MEMORY[0x1E0D82BC8];
LABEL_197:
        if ((v105 & 1) != 0)
LABEL_198:
          *(_DWORD *)(a1 + 156) |= 0x100u;
        if (v109 || (v104 & 1) == 0)
        {
          *(_DWORD *)(a1 + 156) |= 0x800u;
          *(_DWORD *)(a1 + 156) |= 0x10000u;
          *(_DWORD *)(a1 + 156) |= 0x20000u;
          *(_DWORD *)(a1 + 156) |= 0x40000u;
          *(_DWORD *)(a1 + 156) |= 0x2000u;
          *(_DWORD *)(a1 + 156) |= 0x200u;
          *(_DWORD *)(a1 + 156) |= 0x1000u;
          *(_DWORD *)(a1 + 156) |= 0x4000u;
          *(_DWORD *)(a1 + 156) |= 0x8000u;
          *(_DWORD *)(a1 + 156) |= 0x400u;
        }
        else if (v22)
        {
          while (1)
          {
            v100 = *v22++;
            v101 = 2048;
            switch(v100)
            {
              case 0:
                goto LABEL_213;
              case 1:
                goto LABEL_212;
              case 6:
                v101 = 0x10000;
                goto LABEL_212;
              case 7:
                v101 = 0x20000;
                goto LABEL_212;
              case 8:
                v101 = 0x40000;
                goto LABEL_212;
              case 9:
                v101 = 0x2000;
                goto LABEL_212;
              case 11:
                v101 = 512;
                goto LABEL_212;
              case 13:
                v101 = 4096;
                goto LABEL_212;
              case 15:
                v101 = 0x4000;
                goto LABEL_212;
              case 17:
                v101 = 0x8000;
                goto LABEL_212;
              case 18:
                v101 = 1024;
LABEL_212:
                *(_DWORD *)(a1 + 156) |= v101;
                break;
              default:
                continue;
            }
          }
        }
LABEL_213:
        if (v104)
          v3 = *(_BYTE *)(v3 + *v24) == 0;
        else
          v3 = 0;
        if (v109)
        {
          v102 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 12:
        if ((v106 & 1) == 0)
          goto LABEL_141;
        *(_DWORD *)(a1 + 156) |= 2u;
        v82 = *v23;
        v83 = *(_QWORD *)(v3 + v82);
        if (v83 <= 0xFFFFFFFFFFFFFFF7 && v83 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v84 = *(_QWORD *)(*(_QWORD *)(v3 + *v25) + v83);
          *(_QWORD *)(v3 + v82) = v83 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v24) = 1;
          v84 = 0;
        }
        *(_QWORD *)(a1 + 72) = v84;
        goto LABEL_192;
      case 13:
        if (!v37)
          goto LABEL_141;
        if ((*(_BYTE *)(a1 + 157) & 0x10) == 0)
        {
          PBReaderReadString();
          v73 = objc_claimAutoreleasedReturnValue();
          v74 = 48;
          goto LABEL_139;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_220;
        v99 = (int)(*(_DWORD *)(a1 + 156) << 19) >> 31;
        goto LABEL_190;
      case 14:
        if ((v106 & 1) == 0)
          goto LABEL_141;
        v85 = 0;
        v86 = 0;
        v49 = 0;
        *(_DWORD *)(a1 + 156) |= 0x40u;
        while (2)
        {
          v87 = *v23;
          v88 = *(_QWORD *)(v3 + v87);
          v89 = v88 + 1;
          if (v88 == -1 || v89 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v90 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v88);
            *(_QWORD *)(v3 + v87) = v89;
            v49 |= (unint64_t)(v90 & 0x7F) << v85;
            if (v90 < 0)
            {
              v85 += 7;
              v33 = v86++ >= 9;
              if (v33)
              {
                LODWORD(v49) = 0;
                goto LABEL_166;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          LODWORD(v49) = 0;
LABEL_166:
        v98 = 148;
        goto LABEL_171;
      case 15:
        if (!v37)
          goto LABEL_141;
        if ((*(_BYTE *)(a1 + 157) & 0x40) == 0)
        {
          PBReaderReadString();
          v73 = objc_claimAutoreleasedReturnValue();
          v74 = 80;
          goto LABEL_139;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_220;
        v99 = (int)(*(_DWORD *)(a1 + 156) << 17) >> 31;
        goto LABEL_190;
      case 16:
        if ((v106 & 1) == 0)
          goto LABEL_141;
        v91 = 0;
        v92 = 0;
        v49 = 0;
        *(_DWORD *)(a1 + 156) |= 0x10u;
        while (2)
        {
          v93 = *v23;
          v94 = *(_QWORD *)(v3 + v93);
          v95 = v94 + 1;
          if (v94 == -1 || v95 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v24) = 1;
          }
          else
          {
            v96 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v94);
            *(_QWORD *)(v3 + v93) = v95;
            v49 |= (unint64_t)(v96 & 0x7F) << v91;
            if (v96 < 0)
            {
              v91 += 7;
              v33 = v92++ >= 9;
              if (v33)
              {
                LODWORD(v49) = 0;
                goto LABEL_170;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v24))
          LODWORD(v49) = 0;
LABEL_170:
        v98 = 140;
LABEL_171:
        *(_DWORD *)(a1 + v98) = v49;
        goto LABEL_192;
      case 17:
        if (!v37)
          goto LABEL_141;
        if ((*(_BYTE *)(a1 + 157) & 0x80) == 0)
        {
          PBReaderReadString();
          v73 = objc_claimAutoreleasedReturnValue();
          v74 = 88;
          goto LABEL_139;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_220;
        v99 = (int)(*(_DWORD *)(a1 + 156) << 16) >> 31;
        goto LABEL_190;
      case 18:
        if (!v37)
          goto LABEL_141;
        if ((*(_BYTE *)(a1 + 157) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_220;
          v99 = (int)(*(_DWORD *)(a1 + 156) << 21) >> 31;
LABEL_190:
          v7 += v99;
        }
        else
        {
          PBReaderReadString();
          v73 = objc_claimAutoreleasedReturnValue();
          v74 = 32;
LABEL_139:
          v43 = *(void **)(a1 + v74);
          *(_QWORD *)(a1 + v74) = v73;
LABEL_140:

          --v7;
        }
        goto LABEL_191;
      default:
        if ((v105 & 1) == 0 || (*(_BYTE *)(a1 + 157) & 1) != 0)
        {
LABEL_141:
          v97 = PBReaderSkipValueWithTag();
          v25 = (int *)MEMORY[0x1E0D82BB8];
          v24 = (int *)MEMORY[0x1E0D82BC8];
          if ((v97 & 1) == 0)
          {
            v104 = 0;
            goto LABEL_197;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v44 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v45 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v44;

          }
          v46 = PBUnknownFieldAdd();
          v24 = (int *)MEMORY[0x1E0D82BC8];
          v25 = (int *)MEMORY[0x1E0D82BB8];
          if (!v46)
          {
            v104 = 0;
            goto LABEL_198;
          }
        }
        goto LABEL_192;
    }
  }
}

void sub_1894E9924(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894E9A40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894E9B5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894E9C78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894EA00C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894EA17C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894EA2EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894EA408(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEONetworkEventDataCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = *(id *)(a1 + 24);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v7);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

unint64_t GEONetworkEventDataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 124))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEONetworkEventDataReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 120) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 124) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEONetworkEventDataReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEONetworkEventDataReadAllFrom_initialTag;
  Specified = GEONetworkEventDataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEONetworkEventDataCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  return Specified;
}

void sub_1894EBB2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEONetworkEventDataReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEONetworkEventDataReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894EBB8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONetworkEventDataIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  _BOOL8 v57;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOClientMetricsIsValid(a1))
            goto LABEL_74;
          goto LABEL_108;
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_108;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              goto LABEL_99;
            v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0)
            {
              v23 = v18++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_105;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_108;
          v24 = 0;
          while (1)
          {
            v25 = *v2;
            v26 = *(_QWORD *)&a1[v25];
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
              goto LABEL_99;
            v28 = *(char *)(*(_QWORD *)&a1[*v5] + v26);
            *(_QWORD *)&a1[v25] = v27;
            if (v28 < 0)
            {
              v23 = v24++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_105;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_108;
          v29 = 0;
          while (1)
          {
            v30 = *v2;
            v31 = *(_QWORD *)&a1[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&a1[*v3])
              goto LABEL_99;
            v33 = *(char *)(*(_QWORD *)&a1[*v5] + v31);
            *(_QWORD *)&a1[v30] = v32;
            if (v33 < 0)
            {
              v23 = v29++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_105;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_108;
          v34 = 0;
          while (1)
          {
            v35 = *v2;
            v36 = *(_QWORD *)&a1[v35];
            v37 = v36 + 1;
            if (v36 == -1 || v37 > *(_QWORD *)&a1[*v3])
              goto LABEL_99;
            v38 = *(char *)(*(_QWORD *)&a1[*v5] + v36);
            *(_QWORD *)&a1[v35] = v37;
            if (v38 < 0)
            {
              v23 = v34++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_105;
          }
        case 6u:
          if (v16 == 2)
            goto LABEL_104;
          goto LABEL_108;
        case 7u:
          if (v16 == 2)
            goto LABEL_104;
          goto LABEL_108;
        case 8u:
          if (v16 == 2)
            goto LABEL_104;
          goto LABEL_108;
        case 9u:
          if (v16 == 2)
            goto LABEL_104;
          goto LABEL_108;
        case 0xAu:
          if ((v8 & 7) != 0)
            goto LABEL_108;
          v39 = 0;
          while (1)
          {
            v40 = *v2;
            v41 = *(_QWORD *)&a1[v40];
            v42 = v41 + 1;
            if (v41 == -1 || v42 > *(_QWORD *)&a1[*v3])
              goto LABEL_99;
            v43 = *(char *)(*(_QWORD *)&a1[*v5] + v41);
            *(_QWORD *)&a1[v40] = v42;
            if (v43 < 0)
            {
              v23 = v39++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_105;
          }
        case 0xBu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLogMsgStateIsValid(a1))
            goto LABEL_108;
LABEL_74:
          PBReaderRecallMark();
          continue;
        case 0xCu:
          if (v16 != 1)
            goto LABEL_108;
          v44 = *v2;
          v45 = *(_QWORD *)&a1[v44];
          if (v45 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_100;
          v46 = v45 + 8;
          if (v46 > *(_QWORD *)&a1[*v3])
            goto LABEL_100;
          *(_QWORD *)&a1[v44] = v46;
          continue;
        case 0xDu:
          if (v16 == 2)
            goto LABEL_104;
          goto LABEL_108;
        case 0xEu:
          if ((v8 & 7) != 0)
            goto LABEL_108;
          v47 = 0;
          while (1)
          {
            v48 = *v2;
            v49 = *(_QWORD *)&a1[v48];
            v50 = v49 + 1;
            if (v49 == -1 || v50 > *(_QWORD *)&a1[*v3])
              goto LABEL_99;
            v51 = *(char *)(*(_QWORD *)&a1[*v5] + v49);
            *(_QWORD *)&a1[v48] = v50;
            if (v51 < 0)
            {
              v23 = v47++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_105;
          }
        case 0xFu:
          if (v16 == 2)
            goto LABEL_104;
          goto LABEL_108;
        case 0x10u:
          if ((v8 & 7) != 0)
            goto LABEL_108;
          v52 = 0;
          break;
        case 0x11u:
          if (v16 == 2)
            goto LABEL_104;
          goto LABEL_108;
        case 0x12u:
          if (v16 == 2)
            goto LABEL_104;
          goto LABEL_108;
        default:
LABEL_104:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_108:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v53 = *v2;
        v54 = *(_QWORD *)&a1[v53];
        v55 = v54 + 1;
        if (v54 == -1 || v55 > *(_QWORD *)&a1[*v3])
          break;
        v56 = *(char *)(*(_QWORD *)&a1[*v5] + v54);
        *(_QWORD *)&a1[v53] = v55;
        if (v56 < 0)
        {
          v23 = v52++ > 8;
          if (!v23)
            continue;
        }
        goto LABEL_105;
      }
LABEL_99:
      v14 = *v4;
LABEL_100:
      a1[v14] = 1;
LABEL_105:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v57 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v57;
}

BOOL GEONetworkEventDataIsDirty(os_unfair_lock_s *a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner(a1 + 32);
  v2 = (a1[39]._os_unfair_lock_opaque & 0xFFE00) != 0;
  os_unfair_lock_unlock(a1 + 32);
  return v2;
}

unint64_t GEONetworkEventDataClearSensitiveFields(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t result;
  unint64_t i;
  void *v8;
  void *v9;
  void *v10;

  -[GEONetworkEventData _readAdditionalStates](a1);
  result = objc_msgSend(*(id *)(a1 + 24), "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      objc_msgSend(*(id *)(a1 + 24), "objectAtIndexedSubscript:", i);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = v8;
      if (a3 && GEOLogMsgStateHasSensitiveFields(v8, a2))
      {
        v10 = (void *)objc_msgSend(v9, "copy");
        GEOLogMsgStateClearSensitiveFields(v10, a2, 0);
        objc_msgSend(*(id *)(a1 + 24), "replaceObjectAtIndex:withObject:", i, v10);

      }
      else
      {
        objc_msgSend(v9, "clearSensitiveFields:", a2);
      }

      result = objc_msgSend(*(id *)(a1 + 24), "count");
    }
  }
  return result;
}

uint64_t GEONetworkEventDataHasSensitiveFields(void *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  objc_msgSend(a1, "additionalStates", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        if ((GEOLogMsgStateHasSensitiveFields(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7), a2) & 1) != 0)
        {
          v8 = 1;
          goto LABEL_12;
        }
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        continue;
      break;
    }
  }
  v8 = 0;
LABEL_12:

  return v8;
}

void sub_1894ECBE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894ED5E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceCollectionStorageReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  GEOPDPlaceCollection *v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  char v47;
  int v48;
  int v49;
  void *v50;
  int v52;
  int *v53;
  char v54;
  char v55;
  char v56;
  BOOL v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v7 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v54 = v17;
        v19 = v18 | v17;
        if (((v18 | v7) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v57 = v18;
        v55 = v19;
        v56 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v8;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_66;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_66:
      v52 = 1;
      goto LABEL_67;
    }
    v34 = v26 >> 3;
    v35 = v57;
    if ((v56 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    if ((_DWORD)v34 == 2)
      break;
    if ((_DWORD)v34 == 1)
    {
      if (!v35)
        goto LABEL_57;
      if ((*(_BYTE *)(a1 + 52) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_85;
        v40 = objc_alloc_init(GEOPDPlaceCollection);
        if (!GEOPDPlaceCollectionReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
          goto LABEL_84;
        PBReaderRecallMark();
        v41 = 32;
LABEL_50:
        v42 = *(void **)(a1 + v41);
        *(_QWORD *)(a1 + v41) = v40;

        --v8;
LABEL_64:
        v22 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_65;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_85;
      v47 = 32 * *(_BYTE *)(a1 + 52);
LABEL_63:
      v8 += v47 >> 7;
      goto LABEL_64;
    }
    if ((v54 & 1) == 0 || (*(_BYTE *)(a1 + 52) & 1) != 0)
    {
LABEL_57:
      v46 = PBReaderSkipValueWithTag();
      v22 = (int *)MEMORY[0x1E0D82BC8];
      if ((v46 & 1) == 0)
      {
        v52 = 0;
        goto LABEL_67;
      }
      goto LABEL_65;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v44 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v43;

    }
    v45 = PBUnknownFieldAdd();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if (!v45)
    {
      v52 = 0;
      v53 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
      goto LABEL_68;
    }
LABEL_65:
    if (!(v55 & 1 | (v8 != 0)))
      goto LABEL_66;
  }
  if (!v35)
    goto LABEL_57;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_85;
    v47 = *(_BYTE *)(a1 + 52) << 6;
    goto LABEL_63;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_85;
  v40 = objc_alloc_init(GEOPDAttribution);
  if (GEOPDAttributionReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    v41 = 24;
    goto LABEL_50;
  }
LABEL_84:

LABEL_85:
  v52 = 0;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_67:
  v53 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
  if ((v54 & 1) == 0)
    goto LABEL_69;
LABEL_68:
  *(_BYTE *)(a1 + v53[39]) |= 1u;
LABEL_69:
  if (v57 || (v52 & 1) == 0)
  {
    *(_BYTE *)(a1 + v53[39]) |= 4u;
    *(_BYTE *)(a1 + v53[39]) |= 2u;
    goto LABEL_78;
  }
  if (v20)
  {
    while (1)
    {
      v49 = *v20++;
      v48 = v49;
      if (v49 == 1)
        break;
      if (v48 == 2)
      {
LABEL_74:
        *(_BYTE *)(a1 + v53[39]) |= v48;
      }
      else if (!v48)
      {
        goto LABEL_78;
      }
    }
    LOBYTE(v48) = 4;
    goto LABEL_74;
  }
LABEL_78:
  if (v52)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v57)
  {
    v50 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1894EDFC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894EE0B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceCollectionStorageReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPlaceCollectionStorageReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 40) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 44) = objc_msgSend(v6, "length");
      Specified = GEOPlaceCollectionStorageReadSpecified(a1, (unint64_t)v6, (int *)&GEOPlaceCollectionStorageReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_1894EE2F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894EE4B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894EE61C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894EE8F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORequestResponseMetadataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  BOOL v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  GEOLogMsgEventServiceMetadata *v38;
  uint64_t v39;
  id v40;
  void *v41;
  int v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  char v54;
  char v55;
  int v56;
  char v57;
  void *v58;
  int v60;
  int *v61;
  char v62;
  char v63;
  char v64;
  char v65;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 72)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFCFFFDFFFBLL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 > 1;
        v62 = v17 & ~(_BYTE)v12 | v10;
        v63 = v17 | v12 | v62;
        if ((((v17 | v12) | v9) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v64 = (v18 == 0) | v17 | v12;
        v65 = v17 | v12;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v10;
LABEL_8:
        v15 = v11;
        v16 = v12;
LABEL_10:
        ++v8;
        v10 = v14;
        v11 = v15;
        v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v20))
      goto LABEL_90;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v7))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      v29 = v23++ >= 9;
      if (v29)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_27:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_90:
      v60 = 1;
      goto LABEL_91;
    }
    v32 = v24 >> 3;
    v33 = v65;
    if ((v64 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if (!v33)
          goto LABEL_73;
        if ((*(_BYTE *)(a1 + 72) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_107;
          v38 = objc_alloc_init(GEOLogMsgEventServiceMetadata);
          if (GEOLogMsgEventServiceMetadataReadAllFrom((uint64_t)v38, (void *)v3, v11 & 1))
          {
            PBReaderRecallMark();
            v39 = 32;
            goto LABEL_72;
          }
          goto LABEL_106;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_107;
        v55 = 16 * *(_BYTE *)(a1 + 72);
        goto LABEL_85;
      case 2:
        if (!v33)
          goto LABEL_73;
        if ((*(_BYTE *)(a1 + 72) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_107;
          v55 = 4 * *(_BYTE *)(a1 + 72);
          goto LABEL_85;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_107;
        v38 = objc_alloc_init(GEOLogMsgStateUserSession);
        if (!GEOLogMsgStateUserSessionReadAllFrom((uint64_t)v38, (void *)v3))
          goto LABEL_106;
        PBReaderRecallMark();
        v39 = 48;
        goto LABEL_72;
      case 3:
        if ((v9 & 1) == 0)
          goto LABEL_73;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        *(_BYTE *)(a1 + 72) |= 2u;
        while (2)
        {
          v46 = *v19;
          v47 = *(_QWORD *)(v3 + v46);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v47);
            *(_QWORD *)(v3 + v46) = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              v29 = v44++ >= 9;
              if (v29)
              {
                LODWORD(v45) = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v45) = 0;
LABEL_78:
        *(_DWORD *)(a1 + 68) = v45;
        goto LABEL_89;
      case 4:
        if ((v9 & 1) == 0)
          goto LABEL_73;
        *(_BYTE *)(a1 + 72) |= 1u;
        v50 = *v19;
        v51 = *(_QWORD *)(v3 + v50);
        if (v51 <= 0xFFFFFFFFFFFFFFF7 && v51 + 8 <= *(_QWORD *)(v3 + *v7))
        {
          v52 = *(_QWORD *)(*(_QWORD *)(v3 + *v21) + v51);
          *(_QWORD *)(v3 + v50) = v51 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v20) = 1;
          v52 = 0;
        }
        *(_QWORD *)(a1 + 24) = v52;
        goto LABEL_89;
      case 5:
        if (!v33)
          goto LABEL_73;
        if ((*(_BYTE *)(a1 + 72) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_107;
          v55 = 8 * *(_BYTE *)(a1 + 72);
LABEL_85:
          v8 += v55 >> 7;
LABEL_86:
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
LABEL_89:
          if (!(v63 & 1 | (v8 != 0)))
            goto LABEL_90;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_107;
        v38 = objc_alloc_init(GEOLogMsgStateOffline);
        if (GEOLogMsgStateOfflineReadAllFrom((uint64_t)v38, (void *)v3))
        {
          PBReaderRecallMark();
          v39 = 40;
LABEL_72:
          v53 = *(void **)(a1 + v39);
          *(_QWORD *)(a1 + v39) = v38;

          --v8;
          goto LABEL_86;
        }
LABEL_106:

LABEL_107:
        v60 = 0;
        v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_91:
        v61 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
        if ((v62 & 1) != 0)
LABEL_92:
          *(_BYTE *)(a1 + v61[47]) |= 4u;
        if (v65 & 1 | ((v60 & 1) == 0))
        {
          *(_BYTE *)(a1 + v61[47]) |= 8u;
          *(_BYTE *)(a1 + v61[47]) |= 0x20u;
          *(_BYTE *)(a1 + v61[47]) |= 0x10u;
        }
        else if (v18)
        {
          while (1)
          {
            v56 = *v18++;
            v57 = 8;
            switch(v56)
            {
              case 0:
                goto LABEL_100;
              case 1:
                goto LABEL_99;
              case 2:
                v57 = 32;
                goto LABEL_99;
              case 5:
                v57 = 16;
LABEL_99:
                *(_BYTE *)(a1 + v61[47]) |= v57;
                break;
              default:
                continue;
            }
          }
        }
LABEL_100:
        if (v60)
          v3 = *(_BYTE *)(v3 + *v20) == 0;
        else
          v3 = 0;
        if ((v65 & 1) != 0)
        {
          v58 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v62 & 1) == 0 || (*(_BYTE *)(a1 + 72) & 4) != 0)
        {
LABEL_73:
          v54 = PBReaderSkipValueWithTag();
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v20 = (int *)MEMORY[0x1E0D82BC8];
          if ((v54 & 1) == 0)
          {
            v60 = 0;
            goto LABEL_91;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v41 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v40;

          }
          v42 = PBUnknownFieldAdd();
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          if (!v42)
          {
            v60 = 0;
            v61 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
            goto LABEL_92;
          }
        }
        goto LABEL_89;
    }
  }
}

void sub_1894EF1AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894EF3D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894EFC0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORequestResponseMetadataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORequestResponseMetadataReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORequestResponseMetadataReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORequestResponseMetadataReadAllFrom_initialTag;
  Specified = GEORequestResponseMetadataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 48), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1894EFDD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORequestResponseMetadataReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORequestResponseMetadataReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894EFE34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORequestResponseMetadataIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BOOL8 v27;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOLogMsgEventServiceMetadataIsValid(a1))
            goto LABEL_44;
          goto LABEL_49;
        case 2u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLogMsgStateUserSessionIsValid(a1))
            goto LABEL_49;
          goto LABEL_44;
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_49;
          v18 = 0;
          break;
        case 4u:
          if (v16 != 1)
            goto LABEL_49;
          v24 = *v2;
          v25 = *(_QWORD *)&a1[v24];
          if (v25 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_46;
          v26 = v25 + 8;
          if (v26 > *(_QWORD *)&a1[*v3])
            goto LABEL_46;
          *(_QWORD *)&a1[v24] = v26;
          continue;
        case 5u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLogMsgStateOfflineIsValid(a1))
            goto LABEL_49;
LABEL_44:
          PBReaderRecallMark();
          continue;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_49:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v19 = *v2;
        v20 = *(_QWORD *)&a1[v19];
        v21 = v20 + 1;
        if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
          break;
        v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
        *(_QWORD *)&a1[v19] = v21;
        if (v22 < 0 && v18++ <= 8)
          continue;
        goto LABEL_47;
      }
      v14 = *v4;
LABEL_46:
      a1[v14] = 1;
LABEL_47:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v27 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v27;
}

void sub_1894F02F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORequestResponseMetadataIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = *(unsigned __int8 *)(a1 + 72);
  if ((v2 & 0x40) != 0)
    return 1;
  if ((v2 & 8) != 0)
  {
    if (GEOLogMsgEventServiceMetadataIsDirty(*(_QWORD *)(a1 + 32)))
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 72);
  }
  if ((v2 & 0x20) == 0)
    return (v2 >> 4) & 1;
  return 1;
}

os_unfair_lock_s *GEORequestResponseMetadataIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORequestResponseMetadataIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 16);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1894F06DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894F0AF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894F0D5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSearchCategoryStorageReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  GEOPDBrowseCategory *v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  char v47;
  int v48;
  int v49;
  void *v50;
  int v52;
  int *v53;
  char v54;
  char v55;
  char v56;
  BOOL v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v7 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v54 = v17;
        v19 = v18 | v17;
        if (((v18 | v7) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v57 = v18;
        v55 = v19;
        v56 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v8;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_66;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_66:
      v52 = 1;
      goto LABEL_67;
    }
    v34 = v26 >> 3;
    v35 = v57;
    if ((v56 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    if ((_DWORD)v34 == 2)
      break;
    if ((_DWORD)v34 == 1)
    {
      if (!v35)
        goto LABEL_57;
      if ((*(_BYTE *)(a1 + 52) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_85;
        v40 = objc_alloc_init(GEOPDBrowseCategory);
        if (!GEOPDBrowseCategoryReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
          goto LABEL_84;
        PBReaderRecallMark();
        v41 = 32;
LABEL_50:
        v42 = *(void **)(a1 + v41);
        *(_QWORD *)(a1 + v41) = v40;

        --v8;
LABEL_64:
        v22 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_65;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_85;
      v47 = 32 * *(_BYTE *)(a1 + 52);
LABEL_63:
      v8 += v47 >> 7;
      goto LABEL_64;
    }
    if ((v54 & 1) == 0 || (*(_BYTE *)(a1 + 52) & 1) != 0)
    {
LABEL_57:
      v46 = PBReaderSkipValueWithTag();
      v22 = (int *)MEMORY[0x1E0D82BC8];
      if ((v46 & 1) == 0)
      {
        v52 = 0;
        goto LABEL_67;
      }
      goto LABEL_65;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v44 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v43;

    }
    v45 = PBUnknownFieldAdd();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if (!v45)
    {
      v52 = 0;
      v53 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
      goto LABEL_68;
    }
LABEL_65:
    if (!(v55 & 1 | (v8 != 0)))
      goto LABEL_66;
  }
  if (!v35)
    goto LABEL_57;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_85;
    v47 = *(_BYTE *)(a1 + 52) << 6;
    goto LABEL_63;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_85;
  v40 = objc_alloc_init(GEOPDAutocompleteEntry);
  if (GEOPDAutocompleteEntryReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    v41 = 24;
    goto LABEL_50;
  }
LABEL_84:

LABEL_85:
  v52 = 0;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_67:
  v53 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
  if ((v54 & 1) == 0)
    goto LABEL_69;
LABEL_68:
  *(_BYTE *)(a1 + v53[58]) |= 1u;
LABEL_69:
  if (v57 || (v52 & 1) == 0)
  {
    *(_BYTE *)(a1 + v53[58]) |= 4u;
    *(_BYTE *)(a1 + v53[58]) |= 2u;
    goto LABEL_78;
  }
  if (v20)
  {
    while (1)
    {
      v49 = *v20++;
      v48 = v49;
      if (v49 == 1)
        break;
      if (v48 == 2)
      {
LABEL_74:
        *(_BYTE *)(a1 + v53[58]) |= v48;
      }
      else if (!v48)
      {
        goto LABEL_78;
      }
    }
    LOBYTE(v48) = 4;
    goto LABEL_74;
  }
LABEL_78:
  if (v52)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v57)
  {
    v50 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1894F13E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894F19A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSearchCategoryStorageReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOSearchCategoryStorageReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOSearchCategoryStorageReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOSearchCategoryStorageReadAllFrom_initialTag;
  Specified = GEOSearchCategoryStorageReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    -[GEOPDBrowseCategory readAll:](*(_QWORD *)(a1 + 32), 1);
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1894F1B60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSearchCategoryStorageReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSearchCategoryStorageReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894F1BC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchCategoryStorageIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_30;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_30;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDBrowseCategoryIsValid(a1))
          goto LABEL_31;
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_31;
LABEL_29:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_30;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAutocompleteEntryIsValid(a1))
    {
LABEL_31:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_27;
  }
LABEL_30:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_1894F1F3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOSearchCategoryStorageIsDirty(uint64_t a1)
{
  char v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = *(_BYTE *)(a1 + 52);
  if ((v2 & 8) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if (GEOPDBrowseCategoryIsDirty(*(_QWORD *)(a1 + 32)))
      return 1;
    v2 = *(_BYTE *)(a1 + 52);
  }
  if ((v2 & 2) != 0)
    return (uint64_t)GEOPDAutocompleteEntryIsDirty(*(os_unfair_lock_s **)(a1 + 24));
  else
    return 0;
}

os_unfair_lock_s *GEOSearchCategoryStorageIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOSearchCategoryStorageIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEOSearchCategoryStorageClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  id v9;

  if (a3
    && objc_msgSend(a1, "hasAutocompleteEntry")
    && (objc_msgSend(a1, "autocompleteEntry"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = GEOPDAutocompleteEntryHasSensitiveFields(v5, a2),
        v5,
        v6))
  {
    objc_msgSend(a1, "autocompleteEntry");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (id)objc_msgSend(v7, "copy");

    objc_msgSend(v9, "business");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);

    objc_msgSend(a1, "setAutocompleteEntry:", v9);
  }
  else
  {
    objc_msgSend(a1, "autocompleteEntry");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "clearSensitiveFields:", a2);
  }

}

void *GEOSearchCategoryStorageHasSensitiveFields(void *result, uint64_t a2)
{
  void *v3;
  void *v4;

  if (result)
  {
    objc_msgSend(result, "autocompleteEntry");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = GEOPDAutocompleteEntryHasSensitiveFields(v3, a2);

    return v4;
  }
  return result;
}

void sub_1894F2394(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894F25E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchImplicitFilterInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  id v32;
  void *v33;
  _BOOL8 v34;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v28 = *v4;
            v29 = *(_QWORD *)&v3[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&v3[*v5])
              break;
            v31 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
            *(_QWORD *)&v3[v28] = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if ((v31 & 0x80) == 0)
              goto LABEL_44;
            v25 += 7;
            v15 = v26++ >= 9;
            if (v15)
            {
              v27 = 0;
              goto LABEL_46;
            }
          }
          v3[*v6] = 1;
LABEL_44:
          if (v3[*v6])
            v27 = 0;
LABEL_46:
          *(_QWORD *)(a1 + 16) = v27;
        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_40;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_42;
            }
          }
          v3[*v6] = 1;
LABEL_40:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_42:
          *(_DWORD *)(a1 + 24) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v32 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v33 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v32;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_49;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v34 = v3[*v6] == 0;
  }
  else
  {
LABEL_49:
    v34 = 0;
  }
  objc_sync_exit(v3);

  return v34;
}

void sub_1894F3144(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchImplicitFilterInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSearchImplicitFilterInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894F31A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavChargingStationInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  _BOOL8 v33;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          *(_BYTE *)(a1 + 40) |= 1u;
          v26 = *v4;
          v27 = *(_QWORD *)&v3[v26];
          if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v28 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v27);
            *(_QWORD *)&v3[v26] = v27 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v28 = 0;
          }
          *(_QWORD *)(a1 + 16) = v28;
        }
        else if ((_DWORD)v18 == 2)
        {
          PBReaderReadString();
          v29 = objc_claimAutoreleasedReturnValue();
          v30 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v29;

        }
        else if ((_DWORD)v18 == 1)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
              break;
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_38;
            v19 += 7;
            v15 = v20++ >= 9;
            if (v15)
            {
              v21 = 0;
              goto LABEL_40;
            }
          }
          v3[*v6] = 1;
LABEL_38:
          if (v3[*v6])
            v21 = 0;
LABEL_40:
          *(_QWORD *)(a1 + 24) = v21;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v31 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v32 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v31;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_45;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_45:
    v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_1894F3E84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavChargingStationInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSharedNavChargingStationInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894F3EE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavChargingStationInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BOOL8 v28;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      v18 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v16 != 1)
          goto LABEL_43;
        v25 = *v2;
        v26 = *(_QWORD *)&a1[v25];
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && (v27 = v26 + 8, v27 <= *(_QWORD *)&a1[*v3]))
          *(_QWORD *)&a1[v25] = v27;
        else
          a1[v14] = 1;
      }
      else if ((_DWORD)v18 == 2)
      {
        if (v16 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_43:
          v28 = 0;
          goto LABEL_42;
        }
      }
      else if ((_DWORD)v18 == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_43;
        v19 = 0;
        while (1)
        {
          v20 = *v2;
          v21 = *(_QWORD *)&a1[v20];
          v22 = v21 + 1;
          if (v21 == -1 || v22 > *(_QWORD *)&a1[*v3])
            break;
          v23 = *(char *)(*(_QWORD *)&a1[*v5] + v21);
          *(_QWORD *)&a1[v20] = v22;
          if (v23 < 0 && v19++ <= 8)
            continue;
          goto LABEL_40;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_43;
      }
LABEL_40:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v28 = a1[*v4] == 0;
LABEL_42:
  PBReaderRecallMark();
  return v28;
}

BOOL GEOSharedNavETAInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  _BOOL8 v39;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            *(_BYTE *)(a1 + 60) |= 8u;
            v18 = *v4;
            v19 = *(_QWORD *)&v3[v18];
            if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v19);
              *(_QWORD *)&v3[v18] = v19 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v38 = 40;
            goto LABEL_60;
          case 2u:
            *(_BYTE *)(a1 + 60) |= 0x10u;
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v24);
              *(_QWORD *)&v3[v23] = v24 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v38 = 48;
            goto LABEL_60;
          case 3u:
            *(_BYTE *)(a1 + 60) |= 2u;
            v25 = *v4;
            v26 = *(_QWORD *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v26);
              *(_QWORD *)&v3[v25] = v26 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v38 = 24;
            goto LABEL_60;
          case 4u:
            *(_BYTE *)(a1 + 60) |= 4u;
            v27 = *v4;
            v28 = *(_QWORD *)&v3[v27];
            if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v28);
              *(_QWORD *)&v3[v27] = v28 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v38 = 32;
            goto LABEL_60;
          case 5u:
            *(_BYTE *)(a1 + 60) |= 1u;
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v30);
              *(_QWORD *)&v3[v29] = v30 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v38 = 16;
LABEL_60:
            *(_QWORD *)(a1 + v38) = v20;
            continue;
          case 6u:
            v31 = 0;
            v32 = 0;
            v33 = 0;
            *(_BYTE *)(a1 + 60) |= 0x20u;
            break;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v21 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v22 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v21;

            }
            if (!PBUnknownFieldAdd())
              goto LABEL_63;
            continue;
        }
        while (1)
        {
          v34 = *v4;
          v35 = *(_QWORD *)&v3[v34];
          v36 = v35 + 1;
          if (v35 == -1 || v36 > *(_QWORD *)&v3[*v5])
            break;
          v37 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v35);
          *(_QWORD *)&v3[v34] = v36;
          v33 |= (unint64_t)(v37 & 0x7F) << v31;
          if ((v37 & 0x80) == 0)
            goto LABEL_47;
          v31 += 7;
          v15 = v32++ >= 9;
          if (v15)
          {
            LODWORD(v33) = 0;
            goto LABEL_49;
          }
        }
        v3[*v6] = 1;
LABEL_47:
        if (v3[*v6])
          LODWORD(v33) = 0;
LABEL_49:
        *(_DWORD *)(a1 + 56) = v33;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v39 = v3[*v6] == 0;
  }
  else
  {
LABEL_63:
    v39 = 0;
  }
  objc_sync_exit(v3);

  return v39;
}

void sub_1894F5494(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavETAInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSharedNavETAInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894F54F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavETAInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  _BOOL8 v27;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
          if (v16 != 1)
            goto LABEL_38;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_34;
          v20 = v19 + 8;
          if (v20 > *(_QWORD *)&a1[*v3])
            goto LABEL_34;
          *(_QWORD *)&a1[v18] = v20;
          continue;
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_38;
          v21 = 0;
          break;
        default:
          if (PBReaderSkipValueWithTag())
            continue;
LABEL_38:
          v27 = 0;
          goto LABEL_37;
      }
      while (1)
      {
        v22 = *v2;
        v23 = *(_QWORD *)&a1[v22];
        v24 = v23 + 1;
        if (v23 == -1 || v24 > *(_QWORD *)&a1[*v3])
          break;
        v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
        *(_QWORD *)&a1[v22] = v24;
        if (v25 < 0 && v21++ <= 8)
          continue;
        goto LABEL_35;
      }
      v14 = *v4;
LABEL_34:
      a1[v14] = 1;
LABEL_35:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v27 = a1[*v4] == 0;
LABEL_37:
  PBReaderRecallMark();
  return v27;
}

BOOL GEOSharedNavLocationInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  GEOLatLng *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  id v31;
  void *v32;
  _BOOL8 v33;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          *(_BYTE *)(a1 + 32) |= 2u;
          v21 = *v4;
          v22 = *(_QWORD *)&v3[v21];
          if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)&v3[*v5])
          {
            v23 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v22 + 4;
          }
          else
          {
            v3[*v6] = 1;
            v23 = 0;
          }
          *(_DWORD *)(a1 + 28) = v23;
        }
        else if ((_DWORD)v18 == 2)
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            v27 = *v4;
            v28 = *(_QWORD *)&v3[v27];
            v29 = v28 + 1;
            if (v28 == -1 || v29 > *(_QWORD *)&v3[*v5])
              break;
            v30 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v28);
            *(_QWORD *)&v3[v27] = v29;
            v26 |= (unint64_t)(v30 & 0x7F) << v24;
            if ((v30 & 0x80) == 0)
              goto LABEL_40;
            v24 += 7;
            v15 = v25++ >= 9;
            if (v15)
            {
              LODWORD(v26) = 0;
              goto LABEL_42;
            }
          }
          v3[*v6] = 1;
LABEL_40:
          if (v3[*v6])
            LODWORD(v26) = 0;
LABEL_42:
          *(_DWORD *)(a1 + 24) = v26;
        }
        else if ((_DWORD)v18 == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_48;
          v19 = objc_alloc_init(GEOLatLng);
          if (!GEOLatLngReadAllFrom((uint64_t)v19, v3))
          {

            goto LABEL_48;
          }
          PBReaderRecallMark();
          v20 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v19;

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v31 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v32 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v31;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_48;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_1894F6A24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavLocationInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSharedNavLocationInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894F6A84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavLocationInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v28;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      v18 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v16 != 5)
          goto LABEL_44;
        v19 = *v2;
        v20 = *(_QWORD *)&a1[v19];
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && (v21 = v20 + 4, v21 <= *(_QWORD *)&a1[*v3]))
          *(_QWORD *)&a1[v19] = v21;
        else
          a1[v14] = 1;
      }
      else if ((_DWORD)v18 == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_44;
        v22 = 0;
        while (1)
        {
          v23 = *v2;
          v24 = *(_QWORD *)&a1[v23];
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
            break;
          v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
          *(_QWORD *)&a1[v23] = v25;
          if (v26 < 0 && v22++ <= 8)
            continue;
          goto LABEL_41;
        }
        a1[*v4] = 1;
      }
      else if ((_DWORD)v18 == 1)
      {
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
        {
LABEL_44:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_44;
      }
LABEL_41:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v28 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v28;
}

void sub_1894F7468(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavRouteInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  int v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  GEOSharedNavChargingStationInfo *v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  int v77;
  char v78;
  void *v79;
  char v81;
  int v82;
  int v83;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 116);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 112));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 124)), (uint16x4_t)0xFFFCFFFEFFFFFFFDLL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 124) & 1)+ ((*(_BYTE *)(a1 + 124) & 0x20) != 0));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 > 3;
        v15 = v14 & ~(_DWORD)v10 | v9;
        v16 = v14 | v10;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        if ((((v14 | v10) | v8) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v82 = 1;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_123;
        v81 = v14 & ~(_BYTE)v10 | v9;
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v83 = (v7 != 0) | v16 | v15;
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v9;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v19))
      goto LABEL_121;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v17;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *v19;
        v30 = *(unsigned __int8 *)(v3 + v29);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_24:
    v29 = *v19;
    v30 = *(unsigned __int8 *)(v3 + v29);
    if (*(_BYTE *)(v3 + v29))
      v23 = 0;
LABEL_26:
    v31 = v23 & 7;
    if (v30 || v31 == 4)
    {
LABEL_121:
      v82 = 1;
      goto LABEL_122;
    }
    v33 = v23 >> 3;
    v34 = v16;
    if (!((v18 == 0) | v16 & 1))
    {
      v35 = v18;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34 || (*(_BYTE *)(a1 + 124) & 2) != 0)
          goto LABEL_95;
        if (v31 != 2)
        {
          v61 = *v17;
          v62 = *(_QWORD *)(v3 + v61);
          if (v62 <= 0xFFFFFFFFFFFFFFF7 && v62 + 8 <= *(_QWORD *)(v3 + *v6))
            *(_QWORD *)(v3 + v61) = v62 + 8;
          else
            *(_BYTE *)(v3 + v29) = 1;
          PBRepeatedDoubleAdd();
          goto LABEL_119;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_141;
        while (1)
        {
          v39 = (unint64_t *)(v3 + *v17);
          v40 = *v39;
          v41 = *(_QWORD *)(v3 + *v6);
          if (*v39 >= v41)
            break;
          v42 = *v19;
          if (*(_BYTE *)(v3 + v42))
            break;
          if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > v41)
            *(_BYTE *)(v3 + v42) = 1;
          else
            *v39 = v40 + 8;
          PBRepeatedDoubleAdd();
        }
        goto LABEL_97;
      case 2:
        if (!v34 || (*(_BYTE *)(a1 + 124) & 8) != 0)
          goto LABEL_95;
        if (v31 != 2)
        {
          v63 = 0;
          v64 = 0;
          v65 = 0;
          while (1)
          {
            v66 = *v17;
            v67 = *(_QWORD *)(v3 + v66);
            v68 = v67 + 1;
            if (v67 == -1 || v68 > *(_QWORD *)(v3 + *v6))
              goto LABEL_115;
            v69 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v67);
            *(_QWORD *)(v3 + v66) = v68;
            v65 |= (unint64_t)(v69 & 0x7F) << v63;
            if (v69 < 0)
            {
              v63 += 7;
              v28 = v64++ >= 9;
              if (!v28)
                continue;
            }
            goto LABEL_116;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_141;
        while (*(_QWORD *)(v3 + *v17) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v19))
        {
          v45 = 0;
          v46 = 0;
          v47 = 0;
          while (1)
          {
            v48 = *v17;
            v49 = *(_QWORD *)(v3 + v48);
            v50 = v49 + 1;
            if (v49 == -1 || v50 > *(_QWORD *)(v3 + *v6))
              break;
            v51 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v49);
            *(_QWORD *)(v3 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              v28 = v46++ >= 9;
              if (!v28)
                continue;
            }
            goto LABEL_69;
          }
          *(_BYTE *)(v3 + *v19) = 1;
LABEL_69:
          PBRepeatedUInt32Add();
        }
        goto LABEL_97;
      case 3:
        if (!v34 || (*(_BYTE *)(a1 + 124) & 4) != 0)
          goto LABEL_95;
        if (v31 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_141;
          while (*(_QWORD *)(v3 + *v17) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v19))
          {
            v52 = 0;
            v53 = 0;
            v54 = 0;
            while (1)
            {
              v55 = *v17;
              v56 = *(_QWORD *)(v3 + v55);
              v57 = v56 + 1;
              if (v56 == -1 || v57 > *(_QWORD *)(v3 + *v6))
                break;
              v58 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v56);
              *(_QWORD *)(v3 + v55) = v57;
              v54 |= (unint64_t)(v58 & 0x7F) << v52;
              if (v58 < 0)
              {
                v52 += 7;
                v28 = v53++ >= 9;
                if (!v28)
                  continue;
              }
              goto LABEL_84;
            }
            *(_BYTE *)(v3 + *v19) = 1;
LABEL_84:
            PBRepeatedUInt32Add();
          }
LABEL_97:
          PBReaderRecallMark();
        }
        else
        {
          v70 = 0;
          v71 = 0;
          v72 = 0;
          while (1)
          {
            v73 = *v17;
            v74 = *(_QWORD *)(v3 + v73);
            v75 = v74 + 1;
            if (v74 == -1 || v75 > *(_QWORD *)(v3 + *v6))
              break;
            v76 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v74);
            *(_QWORD *)(v3 + v73) = v75;
            v72 |= (unint64_t)(v76 & 0x7F) << v70;
            if (v76 < 0)
            {
              v70 += 7;
              v28 = v71++ >= 9;
              if (!v28)
                continue;
            }
            goto LABEL_116;
          }
LABEL_115:
          *(_BYTE *)(v3 + *v19) = 1;
LABEL_116:
          PBRepeatedUInt32Add();
        }
        goto LABEL_119;
      case 4:
        if (!v34 || (*(_BYTE *)(a1 + 124) & 0x10) != 0)
          goto LABEL_95;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_141;
        v59 = objc_alloc_init(GEOSharedNavChargingStationInfo);
        if (GEOSharedNavChargingStationInfoReadAllFrom((uint64_t)v59, (void *)v3))
        {
          PBReaderRecallMark();
          -[GEOSharedNavRouteInfo _addNoFlagsChargingStations:](a1, v59);
LABEL_94:

LABEL_119:
          if ((v83 & 1) == 0)
            goto LABEL_121;
LABEL_120:
          if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_121;
          continue;
        }

LABEL_141:
        v82 = 0;
LABEL_122:
        LOBYTE(v15) = v81;
LABEL_123:
        if ((v15 & 1) != 0)
LABEL_124:
          *(_BYTE *)(a1 + 124) |= 1u;
        if (v16 & 1 | ((v82 & 1) == 0))
        {
          *(_BYTE *)(a1 + 124) |= 2u;
          *(_BYTE *)(a1 + 124) |= 8u;
          *(_BYTE *)(a1 + 124) |= 4u;
          *(_BYTE *)(a1 + 124) |= 0x10u;
          *(_BYTE *)(a1 + 124) |= 0x20u;
        }
        else if (v18)
        {
          while (1)
          {
            v77 = *v18++;
            v78 = 2;
            switch(v77)
            {
              case 0:
                goto LABEL_134;
              case 1:
                goto LABEL_133;
              case 2:
                v78 = 8;
                goto LABEL_133;
              case 3:
                v78 = 4;
                goto LABEL_133;
              case 4:
                v78 = 16;
                goto LABEL_133;
              case 5:
                v78 = 32;
LABEL_133:
                *(_BYTE *)(a1 + 124) |= v78;
                break;
              default:
                continue;
            }
          }
        }
LABEL_134:
        if (v82)
        {
          v3 = *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]) == 0;
          if ((v16 & 1) == 0)
            return v3;
LABEL_138:
          v79 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v16 & 1) != 0)
            goto LABEL_138;
        }
        return v3;
      case 5:
        if (!v34 || (*(_BYTE *)(a1 + 124) & 0x20) != 0)
          goto LABEL_95;
        PBReaderReadData();
        v59 = (GEOSharedNavChargingStationInfo *)objc_claimAutoreleasedReturnValue();
        if (v59)
          -[GEOSharedNavRouteInfo _addNoFlagsRoutingPathLeg:](a1, v59);
        goto LABEL_94;
      default:
        if ((v81 & 1) == 0 || (*(_BYTE *)(a1 + 124) & 1) != 0)
        {
LABEL_95:
          v60 = PBReaderSkipValueWithTag();
          if ((v60 & v83 & 1) == 0)
          {
            v82 = v60;
            goto LABEL_122;
          }
          goto LABEL_120;
        }
        if (!*(_QWORD *)(a1 + 16))
        {
          v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v44 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v43;

        }
        if (!PBUnknownFieldAdd())
        {
          v82 = 0;
          goto LABEL_124;
        }
        goto LABEL_119;
    }
  }
}

void sub_1894F810C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894F844C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894F878C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894F8AC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894F9968(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOSharedNavRouteInfoCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 96);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOSharedNavRouteInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 116))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOSharedNavRouteInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 112) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 116) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOSharedNavRouteInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOSharedNavRouteInfoReadAllFrom_initialTag;
  Specified = GEOSharedNavRouteInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOSharedNavRouteInfoCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
  return Specified;
}

void sub_1894F9BF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavRouteInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSharedNavRouteInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894F9C54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavRouteInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  _BOOL8 v46;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 1)
          {
            v33 = *v2;
            v34 = *(_QWORD *)&a1[v33];
            if (v34 <= 0xFFFFFFFFFFFFFFF7)
            {
              v35 = v34 + 8;
              if (v35 <= *(_QWORD *)&a1[*v3])
              {
                *(_QWORD *)&a1[v33] = v35;
                goto LABEL_53;
              }
            }
            goto LABEL_52;
          }
          if (v16 != 2 || !PBReaderPlaceMark())
            goto LABEL_78;
          while (1)
          {
            v18 = (unint64_t *)&a1[*v2];
            v19 = *v18;
            v20 = *(_QWORD *)&a1[*v3];
            if (*v18 >= v20)
              break;
            v21 = *v4;
            if (a1[v21])
              break;
            if (v19 > 0xFFFFFFFFFFFFFFF7 || (v22 = v19 + 8, v22 > v20))
              a1[v21] = 1;
            else
              *v18 = v22;
          }
          goto LABEL_45;
        case 2u:
          if (v16 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_78;
            while (1)
            {
              v23 = *v2;
              v24 = *(_QWORD *)&a1[v23];
              v25 = v24 + 1;
              if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
                goto LABEL_49;
              v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
              *(_QWORD *)&a1[v23] = v25;
              if (v26 < 0)
              {
                v27 = v16++;
                if (v27 <= 8)
                  continue;
              }
              goto LABEL_53;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_78;
LABEL_56:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v36 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v37 = *v2;
              v38 = *(_QWORD *)&a1[v37];
              v39 = v38 + 1;
              if (v38 == -1 || v39 > *(_QWORD *)&a1[*v3])
                break;
              v40 = *(char *)(*(_QWORD *)&a1[*v5] + v38);
              *(_QWORD *)&a1[v37] = v39;
              if (v40 < 0)
              {
                v13 = v36++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_56;
            }
            a1[*v4] = 1;
          }
          goto LABEL_45;
        case 3u:
          if (v16 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_78:
              PBReaderRecallMark();
              return 0;
            }
LABEL_66:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v41 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v42 = *v2;
                v43 = *(_QWORD *)&a1[v42];
                v44 = v43 + 1;
                if (v43 == -1 || v44 > *(_QWORD *)&a1[*v3])
                  break;
                v45 = *(char *)(*(_QWORD *)&a1[*v5] + v43);
                *(_QWORD *)&a1[v42] = v44;
                if (v45 < 0)
                {
                  v13 = v41++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_66;
              }
              a1[*v4] = 1;
            }
LABEL_45:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_78;
            while (1)
            {
              v28 = *v2;
              v29 = *(_QWORD *)&a1[v28];
              v30 = v29 + 1;
              if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
                break;
              v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
              *(_QWORD *)&a1[v28] = v30;
              if (v31 < 0)
              {
                v32 = v16++;
                if (v32 <= 8)
                  continue;
              }
              goto LABEL_53;
            }
LABEL_49:
            v14 = *v4;
LABEL_52:
            a1[v14] = 1;
          }
LABEL_53:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_76;
          break;
        case 4u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOSharedNavChargingStationInfoIsValid(a1))
            goto LABEL_45;
          goto LABEL_78;
        case 5u:
          if (v16 == 2)
            goto LABEL_47;
          goto LABEL_78;
        default:
LABEL_47:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_78;
          goto LABEL_53;
      }
    }
  }
LABEL_76:
  v46 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v46;
}

void sub_1894FA460(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavRouteInfoIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  v2 = (*(_BYTE *)(a1 + 124) & 0x7E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
  return v2;
}

void sub_1894FAA04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894FAE88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894FB1AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavSenderInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  int v41;
  void *v42;
  char v43;
  char v44;
  int v45;
  char v46;
  void *v47;
  int v49;
  char v50;
  char v51;
  char v52;
  BOOL v53;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 68)), (uint16x4_t)0xFFFFFFFEFFFCFFFDLL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 68) & 1));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 > 2;
        v15 = v14 & ~(_BYTE)v10 | v7;
        v16 = v14 | v10;
        v50 = v15;
        v51 = v16 | v15;
        if (((v16 | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v52 = (v17 == 0) | v16;
        v53 = v16;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_69;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_69:
      v49 = 1;
      goto LABEL_70;
    }
    v31 = v23 >> 3;
    v32 = v53;
    if ((v52 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 2:
        if (!v32)
          goto LABEL_57;
        if ((*(_BYTE *)(a1 + 68) & 0x10) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 48;
          goto LABEL_56;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_86;
        v44 = 8 * *(_BYTE *)(a1 + 68);
        goto LABEL_67;
      case 3:
        if (!v32)
          goto LABEL_57;
        if ((*(_BYTE *)(a1 + 68) & 8) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 40;
          goto LABEL_56;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_86;
        v44 = 16 * *(_BYTE *)(a1 + 68);
        goto LABEL_67;
      case 4:
        if (!v32)
          goto LABEL_57;
        if ((*(_BYTE *)(a1 + 68) & 4) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 32;
          goto LABEL_56;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_86;
        v44 = 32 * *(_BYTE *)(a1 + 68);
        goto LABEL_67;
      case 5:
        if (!v32)
          goto LABEL_57;
        if ((*(_BYTE *)(a1 + 68) & 2) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 24;
LABEL_56:
          v42 = *(void **)(a1 + v38);
          *(_QWORD *)(a1 + v38) = v37;

          v19 = (int *)MEMORY[0x1E0D82BC8];
          --v9;
LABEL_68:
          if (!(v51 & 1 | (v9 != 0)))
            goto LABEL_69;
          continue;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v44 = *(_BYTE *)(a1 + 68) << 6;
LABEL_67:
          v9 += v44 >> 7;
          v19 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_68;
        }
LABEL_86:
        v49 = 0;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_70:
        if ((v50 & 1) != 0)
LABEL_71:
          *(_BYTE *)(a1 + 68) |= 1u;
        if (v53 || (v49 & 1) == 0)
        {
          *(_BYTE *)(a1 + 68) |= 0x10u;
          *(_BYTE *)(a1 + 68) |= 8u;
          *(_BYTE *)(a1 + 68) |= 4u;
          *(_BYTE *)(a1 + 68) |= 2u;
        }
        else if (v17)
        {
          while (1)
          {
            v45 = *v17++;
            v46 = 16;
            switch(v45)
            {
              case 0:
                goto LABEL_80;
              case 2:
                goto LABEL_79;
              case 3:
                v46 = 8;
                goto LABEL_79;
              case 4:
                v46 = 4;
                goto LABEL_79;
              case 5:
                v46 = 2;
LABEL_79:
                *(_BYTE *)(a1 + 68) |= v46;
                break;
              default:
                continue;
            }
          }
        }
LABEL_80:
        if (v49)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if (v53)
        {
          v47 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v50 & 1) == 0 || (*(_BYTE *)(a1 + 68) & 1) != 0)
        {
LABEL_57:
          v43 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v43 & 1) == 0)
          {
            v49 = 0;
            goto LABEL_70;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v40 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v39;

          }
          v41 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v41)
          {
            v49 = 0;
            goto LABEL_71;
          }
        }
        goto LABEL_68;
    }
  }
}

void sub_1894FB8B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894FB9F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894FBB3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894FC1CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavSenderInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOSharedNavSenderInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOSharedNavSenderInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOSharedNavSenderInfoReadAllFrom_initialTag;
  Specified = GEOSharedNavSenderInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1894FC358(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavSenderInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSharedNavSenderInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1894FC3B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavSenderInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 2u:
          if (v15 != 2)
            goto LABEL_32;
          goto LABEL_28;
        case 3u:
          if (v15 == 2)
            goto LABEL_28;
          goto LABEL_32;
        case 4u:
          if (v15 == 2)
            goto LABEL_28;
          goto LABEL_32;
        case 5u:
          if (v15 != 2)
            goto LABEL_32;
LABEL_28:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_32:
            v17 = 0;
            goto LABEL_31;
          }
LABEL_29:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_30;
          break;
        default:
          if (!PBReaderSkipValueWithTag())
            goto LABEL_32;
          goto LABEL_29;
      }
    }
  }
LABEL_30:
  v17 = a1[*v4] == 0;
LABEL_31:
  PBReaderRecallMark();
  return v17;
}

void sub_1894FC788(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavSenderInfoIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = (*(_BYTE *)(a1 + 68) & 0x3E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_1894FCA90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894FCD50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894FCFD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavStateReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const float *v12;
  uint32x4_t v13;
  int8x16_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  int *v21;
  int *v22;
  int *v23;
  int *v24;
  int *v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  BOOL v33;
  int v34;
  unint64_t v36;
  BOOL v37;
  int *v38;
  int v39;
  int v40;
  BOOL v41;
  GEOMapItemStorage *v42;
  uint64_t v43;
  id v44;
  void *v45;
  int v46;
  uint64_t v47;
  void *v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  char v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  int v124;
  void *v125;
  int v127;
  char v128;
  char v129;
  char v130;
  char v131;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 116);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 112));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (const float *)(a1 + 148);
  v13 = (uint32x4_t)vld1q_dup_f32(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  v15 = vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CDE480), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CDE490), v14)));
  while (2)
  {
    v16 = 1;
    v17 = 1;
    v18 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v17 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v19 = v15 > 4;
        v20 = v19 | v11;
        v128 = v19 & ~(_BYTE)v11 | v9;
        v130 = v19 | v11 | v128;
        if ((((v19 | v11) | v8) & 1) != 0)
          v21 = 0;
        else
          v21 = a3;
        v131 = (v21 == 0) | v20;
        v22 = (int *)MEMORY[0x1E0D82BF0];
        v23 = (int *)MEMORY[0x1E0D82BC8];
        v24 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
        v25 = (int *)MEMORY[0x1E0D82BB8];
        v129 = v19 | v11;
        break;
      default:
        ++v15;
LABEL_7:
        v16 = v9;
LABEL_8:
        v17 = v10;
        v18 = v11;
LABEL_10:
        ++v7;
        v9 = v16;
        v10 = v17;
        v11 = v18;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v22) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v23))
      goto LABEL_232;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    while (1)
    {
      v29 = *v22;
      v30 = *(_QWORD *)(v3 + v29);
      v31 = v30 + 1;
      if (v30 == -1 || v31 > *(_QWORD *)(v3 + *v6))
        break;
      v32 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v30);
      *(_QWORD *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0)
        goto LABEL_25;
      v26 += 7;
      v33 = v27++ >= 9;
      if (v33)
      {
        v28 = 0;
        v34 = *(unsigned __int8 *)(v3 + *v23);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v23) = 1;
LABEL_25:
    v34 = *(unsigned __int8 *)(v3 + *v23);
    if (*(_BYTE *)(v3 + *v23))
      v28 = 0;
LABEL_27:
    if (v34 || (v28 & 7) == 4)
    {
LABEL_232:
      v127 = 1;
      goto LABEL_233;
    }
    v36 = v28 >> 3;
    v37 = v20;
    if ((v131 & 1) == 0)
    {
      v38 = v21;
      do
      {
        v40 = *v38++;
        v39 = v40;
        v37 = v40 != 0;
        if (v40)
          v41 = v39 == (_DWORD)v36;
        else
          v41 = 1;
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        if (!v37)
          goto LABEL_170;
        if ((*(_BYTE *)(a1 + v24[109] + 1) & 0x40) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_253;
          v42 = objc_alloc_init(GEOMapItemStorage);
          if (GEOMapItemStorageReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            v43 = 40;
            goto LABEL_143;
          }
          goto LABEL_252;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_253;
        v24 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
        v121 = (int)(*(_DWORD *)(a1 + 148) << 17) >> 31;
        goto LABEL_220;
      case 2:
        if (!v37 || (*(_BYTE *)(a1 + v24[109] + 1) & 0x80) != 0)
          goto LABEL_170;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_253;
        v42 = objc_alloc_init(GEOSharedNavETAInfo);
        if (!GEOSharedNavETAInfoReadAllFrom((uint64_t)v42, (void *)v3))
          goto LABEL_252;
        PBReaderRecallMark();
        -[GEOSharedNavState _addNoFlagsEtaInfo:](a1, v42);
        goto LABEL_129;
      case 3:
        if (!v37)
          goto LABEL_170;
        if ((*(_BYTE *)(a1 + v24[109] + 2) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_253;
          v24 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
          v121 = (int)(*(_DWORD *)(a1 + 148) << 13) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_253;
        v42 = objc_alloc_init(GEOSharedNavRouteInfo);
        if (!GEOSharedNavRouteInfoReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
          goto LABEL_252;
        PBReaderRecallMark();
        v43 = 80;
        goto LABEL_143;
      case 4:
        if (!v37)
          goto LABEL_170;
        if ((*(_BYTE *)(a1 + v24[109] + 2) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_253;
          v24 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
          v121 = (int)(*(_DWORD *)(a1 + 148) << 12) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_253;
        v42 = objc_alloc_init(GEOSharedNavSenderInfo);
        if (!GEOSharedNavSenderInfoReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
          goto LABEL_252;
        PBReaderRecallMark();
        v43 = 88;
        goto LABEL_143;
      case 5:
        if (!v37)
          goto LABEL_170;
        if ((*(_BYTE *)(a1 + v24[109] + 2) & 1) == 0)
        {
          PBReaderReadString();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = *(void **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v47;
          goto LABEL_144;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_253;
        v24 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
        v121 = (int)(*(_DWORD *)(a1 + 148) << 15) >> 31;
        goto LABEL_220;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_170;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        *(_DWORD *)(a1 + v24[109]) |= 0x200u;
        while (2)
        {
          v52 = *v22;
          v53 = *(_QWORD *)(v3 + v52);
          v54 = v53 + 1;
          if (v53 == -1 || v54 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v23) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v53);
            *(_QWORD *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              v33 = v50++ >= 9;
              if (v33)
              {
                v51 = 0;
                goto LABEL_175;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v23))
          v51 = 0;
LABEL_175:
        v118 = v51 != 0;
        v119 = 144;
        goto LABEL_204;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_170;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        *(_DWORD *)(a1 + v24[109]) |= 0x400u;
        while (2)
        {
          v59 = *v22;
          v60 = *(_QWORD *)(v3 + v59);
          v61 = v60 + 1;
          if (v60 == -1 || v61 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v23) = 1;
          }
          else
          {
            v62 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v60);
            *(_QWORD *)(v3 + v59) = v61;
            v58 |= (unint64_t)(v62 & 0x7F) << v56;
            if (v62 < 0)
            {
              v56 += 7;
              v33 = v57++ >= 9;
              if (v33)
              {
                v58 = 0;
                goto LABEL_179;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v23))
          v58 = 0;
LABEL_179:
        v118 = v58 != 0;
        v119 = 145;
        goto LABEL_204;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_170;
        v63 = 0;
        v64 = 0;
        v65 = 0;
        *(_DWORD *)(a1 + v24[109]) |= 0x80u;
        while (2)
        {
          v66 = *v22;
          v67 = *(_QWORD *)(v3 + v66);
          v68 = v67 + 1;
          if (v67 == -1 || v68 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v23) = 1;
          }
          else
          {
            v69 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v67);
            *(_QWORD *)(v3 + v66) = v68;
            v65 |= (unint64_t)(v69 & 0x7F) << v63;
            if (v69 < 0)
            {
              v63 += 7;
              v33 = v64++ >= 9;
              if (v33)
              {
                LODWORD(v65) = 0;
                goto LABEL_183;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v23))
          LODWORD(v65) = 0;
LABEL_183:
        v120 = 136;
        goto LABEL_209;
      case 9:
        if ((v8 & 1) == 0)
          goto LABEL_170;
        v70 = 0;
        v71 = 0;
        v72 = 0;
        *(_DWORD *)(a1 + v24[109]) |= 0x800u;
        while (2)
        {
          v73 = *v22;
          v74 = *(_QWORD *)(v3 + v73);
          v75 = v74 + 1;
          if (v74 == -1 || v75 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v23) = 1;
          }
          else
          {
            v76 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v74);
            *(_QWORD *)(v3 + v73) = v75;
            v72 |= (unint64_t)(v76 & 0x7F) << v70;
            if (v76 < 0)
            {
              v70 += 7;
              v33 = v71++ >= 9;
              if (v33)
              {
                v72 = 0;
                goto LABEL_187;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v23))
          v72 = 0;
LABEL_187:
        v118 = v72 != 0;
        v119 = 146;
        goto LABEL_204;
      case 10:
        if ((v8 & 1) == 0)
          goto LABEL_170;
        *(_DWORD *)(a1 + v24[109]) |= 8u;
        v77 = *v22;
        v78 = *(_QWORD *)(v3 + v77);
        if (v78 <= 0xFFFFFFFFFFFFFFF7 && v78 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v79 = *(_QWORD *)(*(_QWORD *)(v3 + *v25) + v78);
          *(_QWORD *)(v3 + v77) = v78 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v23) = 1;
          v79 = 0;
        }
        v122 = 96;
        goto LABEL_230;
      case 11:
        if ((v8 & 1) == 0)
          goto LABEL_170;
        v80 = 0;
        v81 = 0;
        v65 = 0;
        *(_DWORD *)(a1 + v24[109]) |= 0x100u;
        while (2)
        {
          v82 = *v22;
          v83 = *(_QWORD *)(v3 + v82);
          v84 = v83 + 1;
          if (v83 == -1 || v84 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v23) = 1;
          }
          else
          {
            v85 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v83);
            *(_QWORD *)(v3 + v82) = v84;
            v65 |= (unint64_t)(v85 & 0x7F) << v80;
            if (v85 < 0)
            {
              v80 += 7;
              v33 = v81++ >= 9;
              if (v33)
              {
                LODWORD(v65) = 0;
                goto LABEL_191;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v23))
          LODWORD(v65) = 0;
LABEL_191:
        v120 = 140;
        goto LABEL_209;
      case 12:
        if ((v8 & 1) == 0)
          goto LABEL_170;
        v86 = 0;
        v87 = 0;
        v65 = 0;
        *(_DWORD *)(a1 + v24[109]) |= 0x40u;
        while (2)
        {
          v88 = *v22;
          v89 = *(_QWORD *)(v3 + v88);
          v90 = v89 + 1;
          if (v89 == -1 || v90 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v23) = 1;
          }
          else
          {
            v91 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v89);
            *(_QWORD *)(v3 + v88) = v90;
            v65 |= (unint64_t)(v91 & 0x7F) << v86;
            if (v91 < 0)
            {
              v86 += 7;
              v33 = v87++ >= 9;
              if (v33)
              {
                LODWORD(v65) = 0;
                goto LABEL_195;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v23))
          LODWORD(v65) = 0;
LABEL_195:
        v120 = 132;
        goto LABEL_209;
      case 13:
        if ((v8 & 1) == 0)
          goto LABEL_170;
        *(_DWORD *)(a1 + v24[109]) |= 4u;
        v92 = *v22;
        v93 = *(_QWORD *)(v3 + v92);
        if (v93 <= 0xFFFFFFFFFFFFFFF7 && v93 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v79 = *(_QWORD *)(*(_QWORD *)(v3 + *v25) + v93);
          *(_QWORD *)(v3 + v92) = v93 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v23) = 1;
          v79 = 0;
        }
        v122 = 72;
        goto LABEL_230;
      case 14:
        if (!v37 || (*(_BYTE *)(a1 + v24[109] + 2) & 0x10) != 0)
          goto LABEL_170;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_253;
        v42 = objc_alloc_init(GEOSharedNavWaypointInfo);
        if (!GEOSharedNavWaypointInfoReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
          goto LABEL_252;
        PBReaderRecallMark();
        -[GEOSharedNavState _addNoFlagsWaypointInfo:](a1, v42);
LABEL_129:

        goto LABEL_145;
      case 15:
        if ((v8 & 1) == 0)
          goto LABEL_170;
        v94 = 0;
        v95 = 0;
        v65 = 0;
        *(_DWORD *)(a1 + v24[109]) |= 0x20u;
        while (2)
        {
          v96 = *v22;
          v97 = *(_QWORD *)(v3 + v96);
          v98 = v97 + 1;
          if (v97 == -1 || v98 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v23) = 1;
          }
          else
          {
            v99 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v97);
            *(_QWORD *)(v3 + v96) = v98;
            v65 |= (unint64_t)(v99 & 0x7F) << v94;
            if (v99 < 0)
            {
              v94 += 7;
              v33 = v95++ >= 9;
              if (v33)
              {
                LODWORD(v65) = 0;
                goto LABEL_199;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v23))
          LODWORD(v65) = 0;
LABEL_199:
        v120 = 128;
        goto LABEL_209;
      case 16:
        if (!v37)
          goto LABEL_170;
        if ((*(_BYTE *)(a1 + v24[109] + 2) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_253;
          v24 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
          v121 = (int)(*(_DWORD *)(a1 + 148) << 14) >> 31;
LABEL_220:
          v7 += v121;
          v20 = v129;
          v23 = (int *)MEMORY[0x1E0D82BC8];
LABEL_221:
          v25 = (int *)MEMORY[0x1E0D82BB8];
LABEL_231:
          if (!(v130 & 1 | (v7 != 0)))
            goto LABEL_232;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_253;
        v42 = objc_alloc_init(GEOSharedNavLocationInfo);
        if (GEOSharedNavLocationInfoReadAllFrom((uint64_t)v42, (void *)v3))
        {
          PBReaderRecallMark();
          v43 = 64;
LABEL_143:
          v48 = *(void **)(a1 + v43);
          *(_QWORD *)(a1 + v43) = v42;
LABEL_144:

          --v7;
LABEL_145:
          v20 = v129;
          v23 = (int *)MEMORY[0x1E0D82BC8];
          v24 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
          goto LABEL_221;
        }
LABEL_252:

LABEL_253:
        v127 = 0;
        v20 = v129;
        v23 = (int *)MEMORY[0x1E0D82BC8];
        v24 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
LABEL_233:
        if ((v128 & 1) != 0)
LABEL_234:
          *(_DWORD *)(a1 + v24[109]) |= 0x2000u;
        if (v20 & 1 | ((v127 & 1) == 0))
        {
          *(_DWORD *)(a1 + v24[109]) |= 0x4000u;
          *(_DWORD *)(a1 + v24[109]) |= 0x8000u;
          *(_DWORD *)(a1 + v24[109]) |= 0x40000u;
          *(_DWORD *)(a1 + v24[109]) |= 0x80000u;
          *(_DWORD *)(a1 + v24[109]) |= 0x10000u;
          *(_DWORD *)(a1 + v24[109]) |= 0x100000u;
          *(_DWORD *)(a1 + v24[109]) |= 0x20000u;
        }
        else if (v21)
        {
          while (1)
          {
            v123 = *v21++;
            v124 = 0x4000;
            switch(v123)
            {
              case 0:
                goto LABEL_246;
              case 1:
                goto LABEL_245;
              case 2:
                v124 = 0x8000;
                goto LABEL_245;
              case 3:
                v124 = 0x40000;
                goto LABEL_245;
              case 4:
                v124 = 0x80000;
                goto LABEL_245;
              case 5:
                v124 = 0x10000;
                goto LABEL_245;
              case 14:
                v124 = 0x100000;
                goto LABEL_245;
              case 16:
                v124 = 0x20000;
LABEL_245:
                *(_DWORD *)(a1 + v24[109]) |= v124;
                break;
              default:
                continue;
            }
          }
        }
LABEL_246:
        if (v127)
        {
          v3 = *(_BYTE *)(v3 + *v23) == 0;
          if ((v20 & 1) == 0)
            return v3;
LABEL_250:
          v125 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v20 & 1) != 0)
            goto LABEL_250;
        }
        return v3;
      case 17:
        if ((v8 & 1) == 0)
          goto LABEL_170;
        v100 = 0;
        v101 = 0;
        v102 = 0;
        *(_DWORD *)(a1 + v24[109]) |= 0x1000u;
        while (2)
        {
          v103 = *v22;
          v104 = *(_QWORD *)(v3 + v103);
          v105 = v104 + 1;
          if (v104 == -1 || v105 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v23) = 1;
          }
          else
          {
            v106 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v104);
            *(_QWORD *)(v3 + v103) = v105;
            v102 |= (unint64_t)(v106 & 0x7F) << v100;
            if (v106 < 0)
            {
              v100 += 7;
              v33 = v101++ >= 9;
              if (v33)
              {
                v102 = 0;
                goto LABEL_203;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v23))
          v102 = 0;
LABEL_203:
        v118 = v102 != 0;
        v119 = 147;
LABEL_204:
        *(_BYTE *)(a1 + v119) = v118;
        goto LABEL_231;
      case 18:
        if ((v8 & 1) == 0)
          goto LABEL_170;
        v107 = 0;
        v108 = 0;
        v65 = 0;
        *(_DWORD *)(a1 + v24[109]) |= 0x10u;
        while (2)
        {
          v109 = *v22;
          v110 = *(_QWORD *)(v3 + v109);
          v111 = v110 + 1;
          if (v110 == -1 || v111 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v23) = 1;
          }
          else
          {
            v112 = *(_BYTE *)(*(_QWORD *)(v3 + *v25) + v110);
            *(_QWORD *)(v3 + v109) = v111;
            v65 |= (unint64_t)(v112 & 0x7F) << v107;
            if (v112 < 0)
            {
              v107 += 7;
              v33 = v108++ >= 9;
              if (v33)
              {
                LODWORD(v65) = 0;
                goto LABEL_208;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v23))
          LODWORD(v65) = 0;
LABEL_208:
        v120 = 124;
LABEL_209:
        *(_DWORD *)(a1 + v120) = v65;
        goto LABEL_231;
      case 19:
        if ((v8 & 1) == 0)
          goto LABEL_170;
        *(_DWORD *)(a1 + v24[109]) |= 1u;
        v113 = *v22;
        v114 = *(_QWORD *)(v3 + v113);
        if (v114 <= 0xFFFFFFFFFFFFFFF7 && v114 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v79 = *(_QWORD *)(*(_QWORD *)(v3 + *v25) + v114);
          *(_QWORD *)(v3 + v113) = v114 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v23) = 1;
          v79 = 0;
        }
        v122 = 24;
        goto LABEL_230;
      case 20:
        if ((v8 & 1) == 0)
          goto LABEL_170;
        *(_DWORD *)(a1 + v24[109]) |= 2u;
        v115 = *v22;
        v116 = *(_QWORD *)(v3 + v115);
        if (v116 <= 0xFFFFFFFFFFFFFFF7 && v116 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v79 = *(_QWORD *)(*(_QWORD *)(v3 + *v25) + v116);
          *(_QWORD *)(v3 + v115) = v116 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v23) = 1;
          v79 = 0;
        }
        v122 = 32;
LABEL_230:
        *(_QWORD *)(a1 + v122) = v79;
        goto LABEL_231;
      default:
        if ((v128 & 1) == 0 || (*(_BYTE *)(a1 + v24[109] + 1) & 0x20) != 0)
        {
LABEL_170:
          v117 = PBReaderSkipValueWithTag();
          v25 = (int *)MEMORY[0x1E0D82BB8];
          v24 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
          v23 = (int *)MEMORY[0x1E0D82BC8];
          v20 = v129;
          if ((v117 & 1) == 0)
          {
            v127 = 0;
            goto LABEL_233;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v44 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v45 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v44;

          }
          v46 = PBUnknownFieldAdd();
          v20 = v129;
          v23 = (int *)MEMORY[0x1E0D82BC8];
          v24 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
          v25 = (int *)MEMORY[0x1E0D82BB8];
          if (!v46)
          {
            v127 = 0;
            goto LABEL_234;
          }
        }
        goto LABEL_231;
    }
  }
}

